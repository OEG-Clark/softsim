{"home.repos.pwc.inspect_result.jianf-wang_gbdl.None.archs.VGGBlock.__init__": [[12, 19], ["torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Module.__init__", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "middle_channels", ",", "out_channels", ",", "act", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "act", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "middle_channels", ",", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "in1", "=", "nn", ".", "InstanceNorm3d", "(", "middle_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "middle_channels", ",", "out_channels", ",", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "in2", "=", "nn", ".", "InstanceNorm3d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.archs.VGGBlock.forward": [[20, 30], ["archs.VGGBlock.conv1", "archs.VGGBlock.in1", "archs.VGGBlock.relu", "archs.VGGBlock.conv2", "archs.VGGBlock.in2", "archs.VGGBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "in1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "in2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.archs.VGGBlock_MC.__init__": [[32, 39], ["torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Module.__init__", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "middle_channels", ",", "out_channels", ",", "act", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "act", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "middle_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "in1", "=", "nn", ".", "InstanceNorm3d", "(", "middle_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "middle_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "in2", "=", "nn", ".", "InstanceNorm3d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.archs.VGGBlock_MC.forward": [[40, 50], ["archs.VGGBlock_MC.conv1", "archs.VGGBlock_MC.in1", "archs.VGGBlock_MC.relu", "archs.VGGBlock_MC.conv2", "archs.VGGBlock_MC.in2", "archs.VGGBlock_MC.relu", "torch.dropout3d", "torch.dropout3d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "train", "=", "True", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "dropout3d", "(", "x", ",", "training", "=", "train", ",", "p", "=", "0.3", ")", ")", "\n", "out", "=", "self", ".", "in1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "in2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.archs.MC_UNet.__init__": [[53, 83], ["torch.nn.Module.__init__", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.Upsample", "torch.nn.Upsample", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock_MC", "archs.VGGBlock_MC", "archs.VGGBlock_MC", "archs.VGGBlock_MC", "torch.nn.Conv3d", "torch.nn.Conv3d", "archs.MC_UNet.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "input_channels", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "nb_filter", "=", "[", "32", ",", "64", ",", "96", ",", "192", ",", "384", "]", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool3d", "(", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "(", "1.0", ",", "2.0", ",", "2.0", ")", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "self", ".", "conv0_0", "=", "VGGBlock", "(", "input_channels", ",", "nb_filter", "[", "0", "]", ",", "nb_filter", "[", "0", "]", ")", "\n", "\n", "self", ".", "conv1_0", "=", "VGGBlock", "(", "nb_filter", "[", "0", "]", ",", "nb_filter", "[", "0", "]", ",", "nb_filter", "[", "1", "]", ")", "\n", "self", ".", "conv2_0", "=", "VGGBlock", "(", "nb_filter", "[", "1", "]", ",", "nb_filter", "[", "1", "]", ",", "nb_filter", "[", "2", "]", ")", "\n", "self", ".", "conv3_0", "=", "VGGBlock", "(", "nb_filter", "[", "2", "]", ",", "nb_filter", "[", "2", "]", ",", "nb_filter", "[", "3", "]", ")", "\n", "self", ".", "conv4_0", "=", "VGGBlock", "(", "nb_filter", "[", "3", "]", ",", "nb_filter", "[", "3", "]", ",", "nb_filter", "[", "4", "]", ")", "\n", "\n", "self", ".", "conv3_1", "=", "VGGBlock_MC", "(", "nb_filter", "[", "3", "]", "+", "nb_filter", "[", "4", "]", ",", "nb_filter", "[", "3", "]", ",", "nb_filter", "[", "3", "]", ")", "\n", "self", ".", "conv2_2", "=", "VGGBlock_MC", "(", "nb_filter", "[", "2", "]", "+", "nb_filter", "[", "3", "]", ",", "nb_filter", "[", "2", "]", ",", "nb_filter", "[", "2", "]", ")", "\n", "self", ".", "conv1_3", "=", "VGGBlock_MC", "(", "nb_filter", "[", "1", "]", "+", "nb_filter", "[", "2", "]", ",", "nb_filter", "[", "1", "]", ",", "nb_filter", "[", "1", "]", ")", "\n", "self", ".", "conv0_4", "=", "VGGBlock_MC", "(", "nb_filter", "[", "0", "]", "+", "nb_filter", "[", "1", "]", ",", "nb_filter", "[", "0", "]", ",", "nb_filter", "[", "0", "]", ")", "\n", "\n", "self", ".", "final", "=", "nn", ".", "Conv3d", "(", "nb_filter", "[", "0", "]", ",", "num_classes", ",", "1", ",", "padding", "=", "0", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "          ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "               ", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.archs.MC_UNet.forward": [[84, 114], ["archs.MC_UNet.conv0_0", "archs.MC_UNet.conv1_0", "archs.MC_UNet.conv2_0", "archs.MC_UNet.conv3_0", "archs.MC_UNet.conv4_0", "range", "archs.MC_UNet.pool", "archs.MC_UNet.pool", "archs.MC_UNet.pool", "archs.MC_UNet.pool", "archs.MC_UNet.conv3_1", "archs.MC_UNet.conv2_2", "archs.MC_UNet.conv1_3", "archs.MC_UNet.conv0_4", "archs.MC_UNet.final", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "archs.MC_UNet.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "archs.MC_UNet.up", "archs.MC_UNet.up", "archs.MC_UNet.up", "archs.MC_UNet.up", "archs.MC_UNet.unsqueeze"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ",", "train", "=", "True", ",", "T", "=", "1", ")", ":", "\n", "\n", "\n", "        ", "x0_0", "=", "self", ".", "conv0_0", "(", "input", ")", "\n", "\n", "x1_0", "=", "self", ".", "conv1_0", "(", "self", ".", "pool", "(", "x0_0", ")", ")", "\n", "x2_0", "=", "self", ".", "conv2_0", "(", "self", ".", "pool", "(", "x1_0", ")", ")", "\n", "x3_0", "=", "self", ".", "conv3_0", "(", "self", ".", "pool", "(", "x2_0", ")", ")", "\n", "x4_0", "=", "self", ".", "conv4_0", "(", "self", ".", "pool", "(", "x3_0", ")", ")", "\n", "\n", "output_final", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "T", ")", ":", "\n", "\n", "          ", "x3_1", "=", "self", ".", "conv3_1", "(", "torch", ".", "cat", "(", "[", "x3_0", ",", "self", ".", "up", "(", "x4_0", ")", "]", ",", "1", ")", ")", "\n", "x2_2", "=", "self", ".", "conv2_2", "(", "torch", ".", "cat", "(", "[", "x2_0", ",", "self", ".", "up", "(", "x3_1", ")", "]", ",", "1", ")", ")", "\n", "x1_3", "=", "self", ".", "conv1_3", "(", "torch", ".", "cat", "(", "[", "x1_0", ",", "self", ".", "up", "(", "x2_2", ")", "]", ",", "1", ")", ")", "\n", "x0_4", "=", "self", ".", "conv0_4", "(", "torch", ".", "cat", "(", "[", "x0_0", ",", "self", ".", "up", "(", "x1_3", ")", "]", ",", "1", ")", ")", "\n", "\n", "output", "=", "self", ".", "final", "(", "x0_4", ")", "\n", "\n", "if", "T", "<=", "1", ":", "\n", "            ", "output_final", "=", "output", "\n", "", "else", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "               ", "output_final", "=", "output", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "               ", "output_final", "=", "torch", ".", "cat", "(", "(", "output_final", ",", "output", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "", "return", "output_final", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.archs.LRL.__init__": [[116, 181], ["torch.nn.Module.__init__", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.ReLU", "torch.nn.ReLU", "int", "int", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ConvTranspose3d", "torch.nn.ConvTranspose3d", "torch.nn.ConvTranspose3d", "torch.nn.ConvTranspose3d", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Tanh", "torch.nn.Tanh", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "archs.VGGBlock", "torch.nn.Conv3d", "torch.nn.Conv3d", "archs.LRL.modules", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "int", "int", "int", "int", "int", "int", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BceLoss.__init__"], ["      ", "def", "__init__", "(", "self", ",", "num_classes", ",", "input_channels", "=", "3", ",", "resize_w", "=", "128", ",", "resize_h", "=", "128", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nb_filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool3d", "(", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "(", "1.0", ",", "2.0", ",", "2.0", ")", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "w", "=", "int", "(", "resize_w", "/", "32", ")", "\n", "h", "=", "int", "(", "resize_h", "/", "32", ")", "\n", "\n", "self", ".", "conv0_x", "=", "VGGBlock", "(", "input_channels", ",", "self", ".", "nb_filter", "[", "0", "]", ",", "self", ".", "nb_filter", "[", "0", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv1_x", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "0", "]", ",", "self", ".", "nb_filter", "[", "1", "]", ",", "self", ".", "nb_filter", "[", "1", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv2_x", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "1", "]", ",", "self", ".", "nb_filter", "[", "2", "]", ",", "self", ".", "nb_filter", "[", "2", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv3_x", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "2", "]", ",", "self", ".", "nb_filter", "[", "3", "]", ",", "self", ".", "nb_filter", "[", "3", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv4_x", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "3", "]", ",", "self", ".", "nb_filter", "[", "4", "]", ",", "self", ".", "nb_filter", "[", "4", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv_down", "=", "nn", ".", "Conv3d", "(", "self", ".", "nb_filter", "[", "4", "]", ",", "self", ".", "nb_filter", "[", "4", "]", ",", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv_down_", "=", "nn", ".", "Conv3d", "(", "self", ".", "nb_filter", "[", "4", "]", ",", "self", ".", "nb_filter", "[", "4", "]", ",", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "mean_vec", "=", "nn", ".", "Linear", "(", "self", ".", "nb_filter", "[", "4", "]", "*", "w", "*", "h", ",", "int", "(", "self", ".", "nb_filter", "[", "3", "]", "/", "2", ")", ")", "\n", "\n", "self", ".", "covar_half", "=", "nn", ".", "Linear", "(", "self", ".", "nb_filter", "[", "4", "]", "*", "w", "*", "h", ",", "int", "(", "self", ".", "nb_filter", "[", "3", "]", "/", "2", ")", ")", "\n", "self", ".", "covar_diag", "=", "nn", ".", "Linear", "(", "self", ".", "nb_filter", "[", "4", "]", "*", "w", "*", "h", ",", "int", "(", "self", ".", "nb_filter", "[", "3", "]", "/", "2", ")", ")", "\n", "\n", "self", ".", "x_ori_vec", "=", "nn", ".", "Linear", "(", "self", ".", "nb_filter", "[", "4", "]", "*", "w", "*", "h", ",", "int", "(", "self", ".", "nb_filter", "[", "3", "]", "/", "2", ")", ")", "\n", "\n", "self", ".", "transform", "=", "nn", ".", "Linear", "(", "int", "(", "self", ".", "nb_filter", "[", "3", "]", "/", "2", ")", ",", "self", ".", "nb_filter", "[", "4", "]", "*", "w", "*", "h", ")", "\n", "self", ".", "transform_", "=", "nn", ".", "Linear", "(", "int", "(", "self", ".", "nb_filter", "[", "3", "]", "/", "2", ")", ",", "self", ".", "nb_filter", "[", "4", "]", "*", "w", "*", "h", ")", "\n", "\n", "self", ".", "conv_up", "=", "nn", ".", "ConvTranspose3d", "(", "self", ".", "nb_filter", "[", "4", "]", ",", "self", ".", "nb_filter", "[", "4", "]", ",", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv_up_", "=", "nn", ".", "ConvTranspose3d", "(", "self", ".", "nb_filter", "[", "4", "]", ",", "self", ".", "nb_filter", "[", "4", "]", ",", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "\n", "\n", "self", ".", "conv3_1_x", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "3", "]", "+", "self", ".", "nb_filter", "[", "4", "]", ",", "self", ".", "nb_filter", "[", "3", "]", ",", "self", ".", "nb_filter", "[", "3", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv2_2_x", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "2", "]", "+", "self", ".", "nb_filter", "[", "3", "]", ",", "self", ".", "nb_filter", "[", "2", "]", ",", "self", ".", "nb_filter", "[", "2", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv1_3_x", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "1", "]", "+", "self", ".", "nb_filter", "[", "2", "]", ",", "self", ".", "nb_filter", "[", "1", "]", ",", "self", ".", "nb_filter", "[", "1", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv0_4_x", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "0", "]", "+", "self", ".", "nb_filter", "[", "1", "]", ",", "self", ".", "nb_filter", "[", "0", "]", ",", "self", ".", "nb_filter", "[", "0", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "\n", "self", ".", "conv00", "=", "nn", ".", "Conv3d", "(", "self", ".", "nb_filter", "[", "0", "]", ",", "input_channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "\n", "self", ".", "conv0_0", "=", "VGGBlock", "(", "input_channels", ",", "self", ".", "nb_filter", "[", "0", "]", ",", "self", ".", "nb_filter", "[", "0", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv1_0", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "0", "]", ",", "self", ".", "nb_filter", "[", "1", "]", ",", "self", ".", "nb_filter", "[", "1", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv2_0", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "1", "]", ",", "self", ".", "nb_filter", "[", "2", "]", ",", "self", ".", "nb_filter", "[", "2", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv3_0", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "2", "]", ",", "self", ".", "nb_filter", "[", "3", "]", ",", "self", ".", "nb_filter", "[", "3", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv4_0", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "3", "]", ",", "self", ".", "nb_filter", "[", "4", "]", ",", "self", ".", "nb_filter", "[", "4", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv3_1", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "3", "]", "+", "self", ".", "nb_filter", "[", "4", "]", "+", "self", ".", "nb_filter", "[", "4", "]", ",", "self", ".", "nb_filter", "[", "3", "]", ",", "self", ".", "nb_filter", "[", "3", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv2_2", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "2", "]", "+", "self", ".", "nb_filter", "[", "3", "]", ",", "self", ".", "nb_filter", "[", "2", "]", ",", "self", ".", "nb_filter", "[", "2", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv1_3", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "1", "]", "+", "self", ".", "nb_filter", "[", "2", "]", ",", "self", ".", "nb_filter", "[", "1", "]", ",", "self", ".", "nb_filter", "[", "1", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv0_4", "=", "VGGBlock", "(", "self", ".", "nb_filter", "[", "0", "]", "+", "self", ".", "nb_filter", "[", "1", "]", ",", "self", ".", "nb_filter", "[", "0", "]", ",", "self", ".", "nb_filter", "[", "0", "]", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "final", "=", "nn", ".", "Conv3d", "(", "self", ".", "nb_filter", "[", "0", "]", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "          ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "               ", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.archs.LRL.reparameterize": [[182, 203], ["mu.size", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "range", "torch.cat.view", "torch.cat.view", "torch.bmm.view", "torch.bmm.view", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.bmm.view", "torch.bmm.view", "lat.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "lat.unsqueeze"], "methods", ["None"], ["", "", "", "", "def", "reparameterize", "(", "self", ",", "mu", ",", "covar_half", ",", "M", "=", "1", ")", ":", "\n", "\n", "\n", "        ", "B", ",", "depth", ",", "D", "=", "mu", ".", "size", "(", ")", "\n", "\n", "if", "M", "==", "1", ":", "\n", "          ", "eps", "=", "torch", ".", "randn", "(", "B", "*", "depth", ",", "1", ",", "D", ")", ".", "cuda", "(", ")", "\n", "eps_", "=", "torch", ".", "bmm", "(", "eps", ",", "covar_half", ")", "\n", "return", "eps_", ".", "view", "(", "B", ",", "depth", ",", "D", ")", "+", "mu", "\n", "", "else", ":", "\n", "          ", "latent", "=", "None", "\n", "# latent will be (M, B, depth, D)", "\n", "for", "i", "in", "range", "(", "M", ")", ":", "\n", "             ", "eps", "=", "torch", ".", "randn", "(", "B", "*", "depth", ",", "1", ",", "D", ")", ".", "cuda", "(", ")", "\n", "eps_", "=", "torch", ".", "bmm", "(", "eps", ",", "covar_half", ")", "\n", "lat", "=", "eps_", ".", "view", "(", "B", ",", "depth", ",", "D", ")", "+", "mu", "\n", "if", "i", "==", "0", ":", "\n", "                ", "latent", "=", "lat", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "latent", "=", "torch", ".", "cat", "(", "(", "latent", ",", "lat", ".", "unsqueeze", "(", "0", ")", ")", ",", "0", ")", "\n", "", "", "return", "latent", ".", "view", "(", "B", "*", "M", ",", "depth", ",", "D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.archs.LRL.forward": [[205, 271], ["archs.LRL.conv0_x", "archs.LRL.conv1_x", "archs.LRL.conv2_x", "archs.LRL.conv3_x", "archs.LRL.conv4_x", "archs.LRL.conv_down", "torch.transpose().flatten", "torch.transpose().flatten", "torch.transpose().flatten", "torch.transpose().flatten", "archs.LRL.mean_vec", "archs.LRL.size", "archs.LRL.covar_half", "covar_half_vec.view().unsqueeze.view().unsqueeze.view().unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "archs.LRL.reparameterize", "archs.LRL.transform().view", "archs.LRL.conv_up", "archs.LRL.conv3_1_x", "archs.LRL.conv2_2_x", "archs.LRL.conv1_3_x", "archs.LRL.conv0_4_x", "archs.LRL.tanh", "archs.LRL.conv0_0", "archs.LRL.conv1_0", "archs.LRL.conv2_0", "archs.LRL.conv3_0", "archs.LRL.conv4_0", "archs.LRL.conv_down_", "archs.LRL.x_ori_vec", "archs.LRL.transform_().view().repeat", "archs.LRL.conv_up_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "archs.LRL.conv3_1", "archs.LRL.conv2_2", "archs.LRL.conv1_3", "archs.LRL.conv0_4", "archs.LRL.final", "archs.LRL.pool", "archs.LRL.pool", "archs.LRL.pool", "archs.LRL.pool", "torch.eye().unsqueeze().expand().cuda", "torch.eye().unsqueeze().expand().cuda", "torch.eye().unsqueeze().expand().cuda", "torch.eye().unsqueeze().expand().cuda", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "archs.LRL.conv00", "archs.LRL.pool", "archs.LRL.pool", "archs.LRL.pool", "archs.LRL.pool", "torch.transpose().flatten", "torch.transpose().flatten", "torch.transpose().flatten", "torch.transpose().flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm.view", "torch.bmm.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "covar_half_vec.view().unsqueeze.view().unsqueeze.view", "covar_half_vec.view().unsqueeze.view().unsqueeze.transpose", "archs.LRL.transform", "archs.LRL.size", "archs.LRL.size", "archs.LRL.size", "archs.LRL.size", "archs.LRL.size", "archs.LRL.size", "archs.LRL.size", "archs.LRL.size", "archs.LRL.transform_().view", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "archs.LRL.repeat", "archs.LRL.up", "archs.LRL.repeat", "archs.LRL.up", "archs.LRL.repeat", "archs.LRL.up", "archs.LRL.repeat", "archs.LRL.up", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "archs.LRL.repeat", "archs.LRL.up", "archs.LRL.repeat", "archs.LRL.up", "archs.LRL.repeat", "archs.LRL.up", "archs.LRL.repeat", "archs.LRL.up", "archs.LRL.transform_", "archs.LRL.size", "archs.LRL.size", "archs.LRL.size", "archs.LRL.size", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.archs.LRL.reparameterize"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "M", "=", "1", ")", ":", "\n", "        ", "x0_x", "=", "self", ".", "conv0_x", "(", "input", ")", "\n", "x1_x", "=", "self", ".", "conv1_x", "(", "self", ".", "pool", "(", "x0_x", ")", ")", "\n", "x2_x", "=", "self", ".", "conv2_x", "(", "self", ".", "pool", "(", "x1_x", ")", ")", "\n", "x3_x", "=", "self", ".", "conv3_x", "(", "self", ".", "pool", "(", "x2_x", ")", ")", "\n", "x4_x", "=", "self", ".", "conv4_x", "(", "self", ".", "pool", "(", "x3_x", ")", ")", "\n", "x4_", "=", "self", ".", "conv_down", "(", "x4_x", ")", "\n", "\n", "# change to four dimensions    ", "\n", "\n", "x4_d", "=", "torch", ".", "transpose", "(", "x4_", ",", "1", ",", "2", ")", ".", "flatten", "(", "start_dim", "=", "2", ")", "\n", "\n", "mean", "=", "self", ".", "mean_vec", "(", "x4_d", ")", "\n", "\n", "B", ",", "depth", ",", "D", "=", "mean", ".", "size", "(", ")", "\n", "identity", "=", "torch", ".", "eye", "(", "D", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "B", "*", "depth", ",", "-", "1", ",", "-", "1", ")", ".", "cuda", "(", ")", "*", "10.0", "\n", "\n", "covar_half_vec", "=", "self", ".", "covar_half", "(", "x4_d", ")", "\n", "covar_half_vec", "=", "covar_half_vec", ".", "view", "(", "-", "1", ",", "D", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "covar_half", "=", "torch", ".", "bmm", "(", "covar_half_vec", ",", "covar_half_vec", ".", "transpose", "(", "1", ",", "2", ")", ")", "+", "identity", "\n", "\n", "covar", "=", "torch", ".", "bmm", "(", "covar_half", ",", "covar_half", ")", "\n", "\n", "Z", "=", "self", ".", "reparameterize", "(", "mean", ",", "covar_half", ",", "M", ")", "\n", "\n", "Z_", "=", "self", ".", "transform", "(", "Z", ")", ".", "view", "(", "B", "*", "M", ",", "x4_", ".", "size", "(", ")", "[", "-", "4", "]", ",", "x4_", ".", "size", "(", ")", "[", "-", "3", "]", ",", "x4_", ".", "size", "(", ")", "[", "-", "2", "]", ",", "x4_", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "\n", "# change to five dimensions", "\n", "x4_x_size", "=", "[", "B", "*", "M", ",", "x4_x", ".", "size", "(", ")", "[", "-", "4", "]", ",", "x4_x", ".", "size", "(", ")", "[", "-", "3", "]", ",", "x4_x", ".", "size", "(", ")", "[", "-", "2", "]", ",", "x4_x", ".", "size", "(", ")", "[", "-", "1", "]", "]", "\n", "\n", "x4_0_v", "=", "self", ".", "conv_up", "(", "Z_", ",", "output_size", "=", "x4_x_size", ")", "\n", "\n", "x3_1x", "=", "self", ".", "conv3_1_x", "(", "torch", ".", "cat", "(", "[", "x3_x", ".", "repeat", "(", "M", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "self", ".", "up", "(", "x4_0_v", ")", "]", ",", "1", ")", ")", "\n", "x2_2x", "=", "self", ".", "conv2_2_x", "(", "torch", ".", "cat", "(", "[", "x2_x", ".", "repeat", "(", "M", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "self", ".", "up", "(", "x3_1x", ")", "]", ",", "1", ")", ")", "\n", "x1_3x", "=", "self", ".", "conv1_3_x", "(", "torch", ".", "cat", "(", "[", "x1_x", ".", "repeat", "(", "M", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "self", ".", "up", "(", "x2_2x", ")", "]", ",", "1", ")", ")", "\n", "x0_4x", "=", "self", ".", "conv0_4_x", "(", "torch", ".", "cat", "(", "[", "x0_x", ".", "repeat", "(", "M", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "self", ".", "up", "(", "x1_3x", ")", "]", ",", "1", ")", ")", "\n", "\n", "\n", "x_ori", "=", "self", ".", "tanh", "(", "self", ".", "conv00", "(", "x0_4x", ")", ")", "\n", "\n", "\n", "x0_0", "=", "self", ".", "conv0_0", "(", "input", ")", "\n", "\n", "x1_0", "=", "self", ".", "conv1_0", "(", "self", ".", "pool", "(", "x0_0", ")", ")", "\n", "x2_0", "=", "self", ".", "conv2_0", "(", "self", ".", "pool", "(", "x1_0", ")", ")", "\n", "x3_0", "=", "self", ".", "conv3_0", "(", "self", ".", "pool", "(", "x2_0", ")", ")", "\n", "x4_0", "=", "self", ".", "conv4_0", "(", "self", ".", "pool", "(", "x3_0", ")", ")", "\n", "x4_0_", "=", "self", ".", "conv_down_", "(", "x4_0", ")", "\n", "\n", "\n", "Z_f", "=", "self", ".", "x_ori_vec", "(", "torch", ".", "transpose", "(", "x4_0_", ",", "1", ",", "2", ")", ".", "flatten", "(", "start_dim", "=", "2", ")", ")", "\n", "Z_f_", "=", "self", ".", "transform_", "(", "Z_f", ")", ".", "view", "(", "B", ",", "x4_0_", ".", "size", "(", ")", "[", "-", "4", "]", ",", "x4_0_", ".", "size", "(", ")", "[", "-", "3", "]", ",", "x4_0_", ".", "size", "(", ")", "[", "-", "2", "]", ",", "x4_0_", ".", "size", "(", ")", "[", "-", "1", "]", ")", ".", "repeat", "(", "M", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "x4_0_size", "=", "[", "B", "*", "M", ",", "x4_0", ".", "size", "(", ")", "[", "-", "4", "]", ",", "x4_0", ".", "size", "(", ")", "[", "-", "3", "]", ",", "x4_0", ".", "size", "(", ")", "[", "-", "2", "]", ",", "x4_0", ".", "size", "(", ")", "[", "-", "1", "]", "]", "\n", "x4_0_z", "=", "self", ".", "conv_up_", "(", "Z_f_", ",", "output_size", "=", "x4_0_size", ")", "\n", "\n", "x4_0", "=", "torch", ".", "cat", "(", "[", "x4_0_z", ",", "x4_0_v", "]", ",", "1", ")", "\n", "x3_1", "=", "self", ".", "conv3_1", "(", "torch", ".", "cat", "(", "[", "x3_0", ".", "repeat", "(", "M", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "self", ".", "up", "(", "x4_0", ")", "]", ",", "1", ")", ")", "\n", "x2_2", "=", "self", ".", "conv2_2", "(", "torch", ".", "cat", "(", "[", "x2_0", ".", "repeat", "(", "M", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "self", ".", "up", "(", "x3_1", ")", "]", ",", "1", ")", ")", "\n", "x1_3", "=", "self", ".", "conv1_3", "(", "torch", ".", "cat", "(", "[", "x1_0", ".", "repeat", "(", "M", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "self", ".", "up", "(", "x2_2", ")", "]", ",", "1", ")", ")", "\n", "x0_4", "=", "self", ".", "conv0_4", "(", "torch", ".", "cat", "(", "[", "x0_0", ".", "repeat", "(", "M", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "self", ".", "up", "(", "x1_3", ")", "]", ",", "1", ")", ")", "\n", "\n", "output", "=", "self", ".", "final", "(", "x0_4", ")", "\n", "\n", "return", "output", ",", "mean", ",", "covar", ".", "view", "(", "-", "1", ",", "depth", ",", "D", ",", "D", ")", ",", "x_ori", ",", "Z", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.surface_distances": [[8, 40], ["numpy.atleast_1d", "numpy.atleast_1d", "scipy.ndimage.morphology.generate_binary_structure", "scipy.ndimage.morphology.distance_transform_edt", "np.atleast_1d.astype", "np.atleast_1d.astype", "scipy.ndimage._ni_support._normalize_sequence", "numpy.asarray", "numpy.count_nonzero", "RuntimeError", "numpy.count_nonzero", "RuntimeError", "scipy.ndimage.morphology.binary_erosion", "scipy.ndimage.morphology.binary_erosion", "voxelspacing.copy.copy"], "function", ["None"], ["def", "surface_distances", "(", "result", ",", "reference", ",", "voxelspacing", "=", "None", ",", "connectivity", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        The distances between the surface voxel of binary objects in result and their\n        nearest partner surface voxel of a binary object in reference.\n        \"\"\"", "\n", "result", "=", "np", ".", "atleast_1d", "(", "result", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "reference", "=", "np", ".", "atleast_1d", "(", "reference", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "if", "voxelspacing", "is", "not", "None", ":", "\n", "            ", "voxelspacing", "=", "_ni_support", ".", "_normalize_sequence", "(", "voxelspacing", ",", "result", ".", "ndim", ")", "\n", "voxelspacing", "=", "np", ".", "asarray", "(", "voxelspacing", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "if", "not", "voxelspacing", ".", "flags", ".", "contiguous", ":", "\n", "                ", "voxelspacing", "=", "voxelspacing", ".", "copy", "(", ")", "\n", "\n", "# binary structure", "\n", "", "", "footprint", "=", "generate_binary_structure", "(", "result", ".", "ndim", ",", "connectivity", ")", "\n", "\n", "# test for emptiness", "\n", "if", "0", "==", "np", ".", "count_nonzero", "(", "result", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'The first supplied array does not contain any binary object.'", ")", "\n", "", "if", "0", "==", "np", ".", "count_nonzero", "(", "reference", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'The second supplied array does not contain any binary object.'", ")", "\n", "\n", "# extract only 1-pixel border line of objects", "\n", "", "result_border", "=", "result", "^", "binary_erosion", "(", "result", ",", "structure", "=", "footprint", ",", "iterations", "=", "1", ")", "\n", "reference_border", "=", "reference", "^", "binary_erosion", "(", "reference", ",", "structure", "=", "footprint", ",", "iterations", "=", "1", ")", "\n", "\n", "# compute average surface distance", "\n", "# Note: scipys distance transform is calculated only inside the borders of the", "\n", "#       foreground objects, therefore the input has to be reversed", "\n", "dt", "=", "distance_transform_edt", "(", "~", "reference_border", ",", "sampling", "=", "voxelspacing", ")", "\n", "sds", "=", "dt", "[", "result_border", "]", "\n", "return", "sds", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.hd95": [[41, 83], ["metrics.surface_distances", "metrics.surface_distances", "numpy.percentile", "numpy.hstack"], "function", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.surface_distances", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.surface_distances"], ["", "def", "hd95", "(", "result", ",", "reference", ",", "voxelspacing", "=", "None", ",", "connectivity", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        95th percentile of the Hausdorff Distance.\n        Computes the 95th percentile of the (symmetric) Hausdorff Distance (HD) between the binary objects in two\n        images. Compared to the Hausdorff Distance, this metric is slightly more stable to small outliers and is\n        commonly used in Biomedical Segmentation challenges.\n        Parameters\n        ----------\n        result : array_like\n            Input data containing objects. Can be any type but will be converted\n            into binary: background where 0, object everywhere else.\n        reference : array_like\n            Input data containing objects. Can be any type but will be converted\n            into binary: background where 0, object everywhere else.\n        voxelspacing : float or sequence of floats, optional\n            The voxelspacing in a distance unit i.e. spacing of elements\n            along each dimension. If a sequence, must be of length equal to\n            the input rank; if a single number, this is used for all axes. If\n            not specified, a grid spacing of unity is implied.\n        connectivity : int\n            The neighbourhood/connectivity considered when determining the surface\n            of the binary objects. This value is passed to\n            `scipy.ndimage.morphology.generate_binary_structure` and should usually be :math:`> 1`.\n            Note that the connectivity influences the result in the case of the Hausdorff distance.\n        Returns\n        -------\n        hd : float\n            The symmetric Hausdorff Distance between the object(s) in ```result``` and the\n            object(s) in ```reference```. The distance unit is the same as for the spacing of\n            elements along each dimension, which is usually given in mm.\n        See also\n        --------\n        :func:`hd`\n        Notes\n        -----\n        This is a real metric. The binary images can therefore be supplied in any order.\n        \"\"\"", "\n", "hd1", "=", "surface_distances", "(", "result", ",", "reference", ",", "voxelspacing", ",", "connectivity", ")", "\n", "hd2", "=", "surface_distances", "(", "reference", ",", "result", ",", "voxelspacing", ",", "connectivity", ")", "\n", "hd95", "=", "np", ".", "percentile", "(", "np", ".", "hstack", "(", "(", "hd1", ",", "hd2", ")", ")", ",", "95", ")", "\n", "\n", "return", "hd95", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.Jaccord": [[84, 103], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "output.data.cpu().numpy.data.cpu().numpy", "target.data.cpu().numpy.data.cpu().numpy", "output.data.cpu().numpy.data.cpu", "target.data.cpu().numpy.data.cpu"], "function", ["None"], ["", "def", "Jaccord", "(", "output", ",", "target", ",", "numpy", "=", "False", ")", ":", "\n", "    ", "smooth", "=", "1e-5", "\n", "\n", "output", "=", "output", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "target", "=", "target", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "if", "not", "numpy", ":", "\n", "      ", "if", "torch", ".", "is_tensor", "(", "output", ")", ":", "\n", "        ", "output", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "target", ")", ":", "\n", "        ", "target", "=", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "output_", "=", "output", ">", "0.5", "\n", "target_", "=", "target", ">", "0.5", "\n", "\n", "intersection", "=", "(", "output_", "&", "target_", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "output_", "|", "target_", ")", ".", "sum", "(", ")", "\n", "\n", "return", "(", "intersection", "+", "smooth", ")", "/", "(", "union", "+", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.dice_coef": [[105, 131], ["output.contiguous().view().detach().cpu().numpy.size", "output_.astype", "target_.astype", "all_iou.sum", "output.contiguous().view().detach().cpu().numpy.reshape", "target.contiguous().view().detach().cpu().numpy.reshape", "output.contiguous().view().detach().cpu().numpy.contiguous().view().detach().cpu().numpy", "target.contiguous().view().detach().cpu().numpy.contiguous().view().detach().cpu().numpy", "output.contiguous().view().detach().cpu().numpy.contiguous().view().detach().cpu", "target.contiguous().view().detach().cpu().numpy.contiguous().view().detach().cpu", "output.contiguous().view().detach().cpu().numpy.sum", "target.contiguous().view().detach().cpu().numpy.sum", "output.contiguous().view().detach().cpu().numpy.contiguous().view().detach", "target.contiguous().view().detach().cpu().numpy.contiguous().view().detach", "output.contiguous().view().detach().cpu().numpy.contiguous().view", "target.contiguous().view().detach().cpu().numpy.contiguous().view", "output.contiguous().view().detach().cpu().numpy.contiguous", "target.contiguous().view().detach().cpu().numpy.contiguous"], "function", ["None"], ["", "def", "dice_coef", "(", "output", ",", "target", ",", "numpy", "=", "False", ")", ":", "\n", "    ", "smooth", "=", "1e-8", "\n", "N", "=", "output", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "output", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "target", "=", "target", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "if", "numpy", ":", "\n", "      ", "output", "=", "output", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "      ", "output", "=", "output", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "", "output_", "=", "output", ">", "0.5", "\n", "target_", "=", "target", ">", "0.5", "\n", "\n", "output", "=", "output_", ".", "astype", "(", "int", ")", "\n", "target", "=", "target_", ".", "astype", "(", "int", ")", "\n", "\n", "intersection", "=", "(", "output", "*", "target", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n", "all_iou", "=", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "output", ".", "sum", "(", "axis", "=", "1", ")", "+", "target", ".", "sum", "(", "axis", "=", "1", ")", "+", "smooth", ")", "\n", "\n", "return", "all_iou", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.HD": [[132, 148], ["output[].squeeze", "target[].squeeze", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "metrics.hd95", "numpy.mean", "output.data.cpu().numpy.data.cpu().numpy", "target.data.cpu().numpy.data.cpu().numpy", "output.data.cpu().numpy.data.cpu", "target.data.cpu().numpy.data.cpu"], "function", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.hd95"], ["", "def", "HD", "(", "output", ",", "target", ")", ":", "\n", "\n", "    ", "output", "=", "(", "output", ">", "0.5", ")", "\n", "target", "=", "(", "target", ">", "0.5", ")", "\n", "\n", "output", "=", "output", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "target", "=", "target", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "output", ")", ":", "\n", "        ", "output", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "target", ")", ":", "\n", "        ", "target", "=", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "hd_", "=", "hd95", "(", "output", ",", "target", ")", "\n", "\n", "return", "np", ".", "mean", "(", "hd_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.ASD": [[149, 165], ["output[].squeeze", "target[].squeeze", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "metrics.surface_distances", "numpy.mean", "output.data.cpu().numpy.data.cpu().numpy", "target.data.cpu().numpy.data.cpu().numpy", "output.data.cpu().numpy.data.cpu", "target.data.cpu().numpy.data.cpu"], "function", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.surface_distances"], ["", "def", "ASD", "(", "output", ",", "target", ")", ":", "\n", "    ", "output", "=", "(", "output", ">", "0.5", ")", "\n", "target", "=", "(", "target", ">", "0.5", ")", "\n", "\n", "output", "=", "output", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "target", "=", "target", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "output", ")", ":", "\n", "        ", "output", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "target", ")", ":", "\n", "        ", "target", "=", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "", "asd_", "=", "surface_distances", "(", "output", ",", "target", ")", "\n", "\n", "return", "np", ".", "mean", "(", "asd_", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.train.parse_args": [[30, 113], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "default", "=", "'AtriaSeg_16'", ",", "\n", "help", "=", "'experiment name'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_save_dir'", ",", "default", "=", "'/users-2/jianfeng/bayes/'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "160", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--start-epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'manual epoch number (useful on restarts)'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch_size'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'mini-batch size. Note that this is the batch size of patients rather than CT slices'", ")", "\n", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "'--archG'", ",", "metavar", "=", "'ARCH'", ",", "default", "=", "'LRL'", ",", "\n", "choices", "=", "ARCH_NAMES", ",", "\n", "help", "=", "'LRL architecture: '", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "metavar", "=", "'ARCH'", ",", "default", "=", "'MC_UNet'", ",", "\n", "choices", "=", "ARCH_NAMES", ",", "\n", "help", "=", "'MC_UNet architecture: '", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--input_channels'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "\n", "help", "=", "'input channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_crop'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "\n", "help", "=", "'image width'", ")", "\n", "parser", ".", "add_argument", "(", "'--depth'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "\n", "help", "=", "'image depth'", ")", "\n", "parser", ".", "add_argument", "(", "'--M'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of sampling'", ")", "\n", "# loss", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "default", "=", "'BCEDiceLoss'", ",", "\n", "choices", "=", "LOSS_NAMES", ",", "\n", "help", "=", "'loss:  (default: BCEDiceLoss)'", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'AtriaSeg'", ",", "\n", "help", "=", "'dataset name'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--train_txt'", ",", "default", "=", "'./train_AtriaSeg.txt'", ",", "\n", "help", "=", "'text file showing the patient id used for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--val_txt'", ",", "default", "=", "'./val_AtriaSeg.txt'", ",", "\n", "help", "=", "'text file showing the patient id used for validation'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--img_ext'", ",", "default", "=", "'png'", ",", "\n", "help", "=", "'image file extension'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_ext'", ",", "default", "=", "'png'", ",", "\n", "help", "=", "'mask file extension'", ")", "\n", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "'--learning_rate'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'LR'", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_factor_semi'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'percentaget of labeld volume'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "\n", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "\n", "# scheduler", "\n", "parser", ".", "add_argument", "(", "'--scheduler'", ",", "default", "=", "'CosineAnnealingLR'", ",", "\n", "choices", "=", "[", "'CosineAnnealingLR'", ",", "'ReduceLROnPlateau'", ",", "'MultiStepLR'", ",", "'ConstantLR'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--min_lr'", ",", "default", "=", "1e-7", ",", "type", "=", "float", ",", "\n", "help", "=", "'minimum learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--factor'", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--patience'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--milestones'", ",", "default", "=", "'50,80'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--early_stopping'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'early stopping (default: -1)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "\n", "config", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.train.data_collate": [[115, 134], ["num_per_patient.append", "torch.cat.float", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.dstack", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "data_collate", "(", "batch", ")", ":", "\n", "    ", "input", "=", "None", "\n", "target", "=", "None", "\n", "input_paths", "=", "None", "\n", "total_num", "=", "0", "\n", "num_per_patient", "=", "[", "]", "\n", "for", "info", "in", "batch", ":", "\n", "      ", "if", "total_num", "==", "0", ":", "\n", "        ", "input", "=", "torch", ".", "from_numpy", "(", "info", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "info", "[", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "input_paths", "=", "info", "[", "3", "]", "\n", "", "else", ":", "\n", "        ", "input", "=", "torch", ".", "cat", "(", "(", "input", ",", "torch", ".", "from_numpy", "(", "info", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "target", "=", "torch", ".", "cat", "(", "(", "target", ",", "torch", ".", "from_numpy", "(", "info", "[", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "input_paths", "=", "np", ".", "dstack", "(", "(", "input_paths", ",", "info", "[", "3", "]", ")", ")", "\n", "", "num_per_patient", ".", "append", "(", "info", "[", "2", "]", ")", "\n", "total_num", "+=", "1", "\n", "\n", "", "return", "input", ".", "float", "(", ")", ",", "target", ",", "num_per_patient", ",", "input_paths", ",", "info", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.train.train": [[136, 296], ["tqdm.tqdm", "tqdm.tqdm.close", "collections.OrderedDict", "utils.AverageMeter", "utils.AverageMeter", "int", "model_seg.train", "model.eval", "model.train", "input.cuda.cuda", "target.cuda.cuda", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "optimizer.zero_grad", "loss.backward", "optimizer.step", "avg_meters[].update", "collections.OrderedDict", "tqdm.tqdm.set_postfix", "tqdm.tqdm.update", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "labeled_patient.append", "int", "model_seg", "range", "model", "covar.size", "mean.view", "covar.view", "torch.linalg.inv", "torch.linalg.inv", "torch.linalg.inv", "torch.linalg.inv", "torch.linalg.inv.view", "torch.logdet", "torch.logdet", "torch.logdet", "torch.logdet", "torch.linalg.inv().diagonal().sum", "torch.linalg.inv().diagonal().sum", "torch.linalg.inv().diagonal().sum", "torch.linalg.inv().diagonal().sum", "torch.linalg.inv", "torch.linalg.inv", "torch.linalg.inv", "torch.linalg.inv", "torch.bmm().view().sum", "torch.bmm().view().sum", "torch.bmm().view().sum", "torch.bmm().view().sum", "torch.bmm().squeeze().squeeze", "torch.bmm().squeeze().squeeze", "torch.bmm().squeeze().squeeze", "torch.bmm().squeeze().squeeze", "range", "int", "loss.item", "avg_meters[].update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "output.view.view", "torch.softmax().mean().detach", "torch.softmax().mean().detach", "torch.softmax().mean().detach", "torch.softmax().mean().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "model_seg.size", "path[].split", "output.view.size", "metrics.dice_coef", "torch.mse_loss", "torch.linalg.inv", "torch.linalg.inv", "torch.linalg.inv", "torch.linalg.inv", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "output.view.size", "ele[].split", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "metrics.dice_coef", "x_ori.size", "prec_matrix_view.view.sum", "torch.linalg.inv().diagonal", "torch.linalg.inv().diagonal", "torch.linalg.inv().diagonal", "torch.linalg.inv().diagonal", "prec_matrix_view.view.sum", "prec_matrix_view.view.sum", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "metrics.dice_coef", "torch.autograd.Variable.size", "len", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.softmax().mean", "torch.softmax().mean", "torch.softmax().mean", "torch.softmax().mean", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "path[].split", "output_pseudo[].unsqueeze", "out_seg[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "target_[].unsqueeze", "out_seg[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "metrics.dice_coef", "metrics.dice_coef", "x_ori.size", "x_ori.size", "torch.bmm().squeeze().squeeze.sum", "path[].split", "output[].unsqueeze", "target_[].unsqueeze", "output[].unsqueeze", "target_[].unsqueeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "target_[].unsqueeze", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.linalg.inv", "torch.linalg.inv", "torch.linalg.inv", "torch.linalg.inv", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.linalg.inv().diagonal().sum.sum", "output[].unsqueeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "output_pseudo[].unsqueeze", "out_seg[].unsqueeze", "target_[].unsqueeze", "out_seg[].unsqueeze", "prec_matrix_view.view.sum", "prec_matrix_view.view.view", "mean.view.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm().view().sum.unsqueeze", "torch.logdet.sum", "torch.transpose.size", "torch.bmm().view().sum.unsqueeze"], "function", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.train.train", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.train.train", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.dice_coef", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.dice_coef", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.dice_coef", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.dice_coef", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.dice_coef"], ["", "def", "train", "(", "config", ",", "train_loader", ",", "model", ",", "model_seg", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "avg_meters", "=", "{", "'loss'", ":", "AverageMeter", "(", ")", ",", "\n", "'iou'", ":", "AverageMeter", "(", ")", "}", "\n", "\n", "if", "epoch", ">", "int", "(", "config", "[", "'epochs'", "]", "/", "2", ")", ":", "\n", "          ", "model_seg", ".", "train", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "          ", "model", ".", "train", "(", ")", "\n", "\n", "\n", "", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "train_loader", ")", ")", "\n", "for", "input", ",", "target", ",", "num_per_p", ",", "paths", ",", "patient", "in", "train_loader", ":", "\n", "        ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "\n", "", "KLD", "=", "0.0", "\n", "crit", "=", "0.0", "\n", "crit_dice", "=", "0.0", "\n", "crit_seg", "=", "0.0", "\n", "crit_seg_dice", "=", "0.0", "\n", "iou", "=", "0.0", "\n", "recon", "=", "0.0", "\n", "batch_", "=", "0.0", "\n", "\n", "input_", "=", "torch", ".", "transpose", "(", "input_var", ",", "1", ",", "2", ")", "\n", "target_", "=", "torch", ".", "transpose", "(", "target_var", ",", "1", ",", "2", ")", "\n", "\n", "path", "=", "paths", "[", "0", "]", "[", "0", "]", "\n", "\n", "labeled_patient", "=", "[", "]", "\n", "for", "ele", "in", "patient", ":", "\n", "          ", "labeled_patient", ".", "append", "(", "ele", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ")", "\n", "\n", "", "if", "epoch", ">", "int", "(", "config", "[", "'epochs'", "]", "/", "2", ")", ":", "\n", "           ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                  ", "output", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "input_", ",", "M", "=", "config", "[", "'M'", "]", ")", "\n", "\n", "", "out_seg", "=", "model_seg", "(", "input_", ")", "\n", "\n", "if", "config", "[", "'M'", "]", ">", "1", ":", "\n", "             ", "output", "=", "output", ".", "view", "(", "config", "[", "'M'", "]", ",", "input_", ".", "size", "(", ")", "[", "-", "5", "]", ",", "config", "[", "'num_classes'", "]", ",", "input_", ".", "size", "(", ")", "[", "-", "3", "]", ",", "input_", ".", "size", "(", ")", "[", "-", "2", "]", ",", "input_", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "output_pseudo", "=", "torch", ".", "softmax", "(", "output", ",", "dim", "=", "2", ")", ".", "mean", "(", "0", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "             ", "output_pseudo", "=", "torch", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "\n", "\n", "", "target_pseudo", "=", "None", "\n", "target_real", "=", "None", "\n", "output_labeled", "=", "None", "\n", "output_unlabeled", "=", "None", "\n", "batch_", "=", "out_seg", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "\n", "name_p", "=", "path", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "for", "i", "in", "range", "(", "output", ".", "size", "(", "0", ")", ")", ":", "\n", "                    ", "try", ":", "\n", "                      ", "name_p", "=", "path", "[", "i", "*", "config", "[", "'depth'", "]", "]", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "", "except", ":", "\n", "                      ", "continue", "\n", "# if the case is not in the labeled data, we use pseudo labels. Otherwise, we use pseudo labels.", "\n", "\n", "", "if", "name_p", "not", "in", "labeled_patient", ":", "\n", "                       ", "if", "target_pseudo", "is", "None", ":", "\n", "                          ", "target_pseudo", "=", "output_pseudo", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "output_unlabeled", "=", "out_seg", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                          ", "target_pseudo", "=", "torch", ".", "cat", "(", "[", "target_pseudo", ",", "output_pseudo", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "]", ")", "\n", "output_unlabeled", "=", "torch", ".", "cat", "(", "[", "output_unlabeled", ",", "out_seg", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "]", ")", "\n", "", "", "else", ":", "\n", "                       ", "if", "target_real", "is", "None", ":", "\n", "                          ", "target_real", "=", "target_", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "output_labeled", "=", "out_seg", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                          ", "target_real", "=", "torch", ".", "cat", "(", "[", "target_real", ",", "target_", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "]", ")", "\n", "output_labeled", "=", "torch", ".", "cat", "(", "[", "output_labeled", ",", "out_seg", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "]", ")", "\n", "\n", "\n", "", "", "", "if", "target_real", "is", "None", ":", "\n", "                  ", "crit_seg", "=", "criterion", "[", "0", "]", "(", "output_unlabeled", ",", "target_pseudo", ",", "num_classes", "=", "config", "[", "'num_classes'", "]", ")", "\n", "crit_seg_dice", "=", "criterion", "[", "1", "]", "(", "output_unlabeled", ",", "target_pseudo", ")", "\n", "iou", "=", "dice_coef", "(", "torch", ".", "softmax", "(", "output_unlabeled", ",", "dim", "=", "1", ")", ",", "target_pseudo", ")", "\n", "", "elif", "target_pseudo", "is", "None", ":", "\n", "                  ", "crit_seg", "=", "criterion", "[", "0", "]", "(", "output_labeled", ",", "target_real", ",", "num_classes", "=", "config", "[", "'num_classes'", "]", ")", "\n", "crit_seg_dice", "=", "criterion", "[", "1", "]", "(", "output_labeled", ",", "target_real", ")", "\n", "iou", "=", "dice_coef", "(", "torch", ".", "softmax", "(", "output_labeled", ",", "dim", "=", "1", ")", ",", "target_real", ")", "\n", "", "else", ":", "\n", "                  ", "crit_seg", "=", "criterion", "[", "0", "]", "(", "output_labeled", ",", "target_real", ",", "num_classes", "=", "config", "[", "'num_classes'", "]", ")", "+", "criterion", "[", "0", "]", "(", "output_unlabeled", ",", "target_pseudo", ",", "num_classes", "=", "config", "[", "'num_classes'", "]", ")", "\n", "crit_seg_dice", "=", "criterion", "[", "1", "]", "(", "output_labeled", ",", "target_real", ")", "+", "criterion", "[", "1", "]", "(", "output_unlabeled", ",", "target_pseudo", ")", "\n", "iou", "=", "dice_coef", "(", "torch", ".", "softmax", "(", "output_unlabeled", ",", "dim", "=", "1", ")", ",", "target_pseudo", ")", "+", "dice_coef", "(", "torch", ".", "softmax", "(", "output_labeled", ",", "dim", "=", "1", ")", ",", "target_real", ")", "\n", "\n", "", "", "else", ":", "\n", "              ", "output", ",", "mean", ",", "covar", ",", "x_ori", ",", "Z", "=", "model", "(", "input_", ")", "\n", "\n", "recon", "=", "F", ".", "mse_loss", "(", "x_ori", ",", "input_", ",", "reduction", "=", "'sum'", ")", "/", "(", "x_ori", ".", "size", "(", "-", "1", ")", "*", "x_ori", ".", "size", "(", "-", "2", ")", "*", "x_ori", ".", "size", "(", "-", "3", ")", ")", "\n", "\n", "B", ",", "depth", ",", "D", ",", "_", "=", "covar", ".", "size", "(", ")", "\n", "mean_view", "=", "mean", ".", "view", "(", "-", "1", ",", "D", ")", "\n", "covar_view", "=", "covar", ".", "view", "(", "-", "1", ",", "D", ",", "D", ")", "\n", "\n", "prec_matrix_view", "=", "torch", ".", "linalg", ".", "inv", "(", "covar_view", ")", "\n", "prec_matrix", "=", "prec_matrix_view", ".", "view", "(", "B", ",", "-", "1", ",", "D", ",", "D", ")", "\n", "\n", "term1", "=", "torch", ".", "logdet", "(", "torch", ".", "linalg", ".", "inv", "(", "prec_matrix", ".", "sum", "(", "1", ")", ")", ")", "\n", "term2", "=", "torch", ".", "linalg", ".", "inv", "(", "prec_matrix", ".", "sum", "(", "1", ")", ")", ".", "diagonal", "(", "offset", "=", "0", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "2", ")", ".", "sum", "(", "-", "1", ")", "\n", "term3_2", "=", "torch", ".", "linalg", ".", "inv", "(", "torch", ".", "bmm", "(", "prec_matrix", ".", "sum", "(", "1", ")", ",", "prec_matrix", ".", "sum", "(", "1", ")", ")", ")", "\n", "term3_1", "=", "torch", ".", "bmm", "(", "prec_matrix", ".", "view", "(", "-", "1", ",", "D", ",", "D", ")", ",", "mean_view", ".", "unsqueeze", "(", "2", ")", ")", ".", "view", "(", "-", "1", ",", "depth", ",", "D", ")", ".", "sum", "(", "1", ")", "\n", "term3", "=", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "term3_1", ".", "unsqueeze", "(", "1", ")", ",", "term3_2", ")", ",", "term3_1", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "KLD", "+=", "-", "0.5", "*", "torch", ".", "sum", "(", "D", "+", "term1", ".", "sum", "(", ")", "-", "term2", ".", "sum", "(", ")", "-", "term3", ".", "sum", "(", ")", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "output", ".", "size", "(", "0", ")", ")", ":", "\n", "                    ", "try", ":", "\n", "                      ", "name_p", "=", "path", "[", "i", "*", "config", "[", "'depth'", "]", "]", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "", "except", ":", "\n", "                      ", "continue", "\n", "\n", "", "if", "name_p", "not", "in", "labeled_patient", ":", "\n", "                      ", "continue", "\n", "", "else", ":", "\n", "                      ", "crit", "+=", "criterion", "[", "0", "]", "(", "output", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ",", "target_", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ",", "num_classes", "=", "config", "[", "'num_classes'", "]", ")", "\n", "crit_dice", "+=", "criterion", "[", "1", "]", "(", "output", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ",", "target_", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "iou", "+=", "dice_coef", "(", "torch", ".", "softmax", "(", "output", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ",", "dim", "=", "1", ")", ",", "target_", "[", "i", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "batch_", "+=", "1", "\n", "\n", "", "", "", "if", "epoch", "<=", "int", "(", "config", "[", "'epochs'", "]", "/", "2", ")", ":", "\n", "           ", "if", "batch_", ">", "0", ":", "\n", "             ", "loss", "=", "crit", "/", "batch_", "+", "0.005", "*", "KLD", "/", "input_", ".", "size", "(", "0", ")", "+", "2", "*", "crit_dice", "/", "batch_", "+", "recon", "/", "input_", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "              ", "loss", "=", "0.005", "*", "KLD", "/", "input_", ".", "size", "(", "0", ")", "+", "recon", "/", "input_", ".", "size", "(", "0", ")", "\n", "", "", "else", ":", "\n", "\n", "           ", "loss", "=", "crit_seg", "/", "input_var", ".", "size", "(", "0", ")", "+", "2", "*", "crit_seg_dice", "/", "len", "(", "num_per_p", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "avg_meters", "[", "'loss'", "]", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "if", "batch_", ">", "0", ":", "\n", "           ", "avg_meters", "[", "'iou'", "]", ".", "update", "(", "iou", "/", "batch_", ")", "\n", "\n", "", "postfix", "=", "OrderedDict", "(", "[", "\n", "(", "'loss'", ",", "avg_meters", "[", "'loss'", "]", ".", "avg", ")", ",", "\n", "(", "'iou'", ",", "avg_meters", "[", "'iou'", "]", ".", "avg", ")", ",", "\n", "]", ")", "\n", "pbar", ".", "set_postfix", "(", "postfix", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n", "return", "OrderedDict", "(", "[", "(", "'loss'", ",", "avg_meters", "[", "'loss'", "]", ".", "avg", ")", ",", "\n", "(", "'iou'", ",", "avg_meters", "[", "'iou'", "]", ".", "avg", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.train.validate": [[298, 376], ["model.eval", "model_seg.eval", "collections.OrderedDict", "utils.AverageMeter", "utils.AverageMeter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "tqdm.tqdm.close", "int", "len", "input.cuda.cuda", "target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "model", "metrics.dice_coef", "avg_meters[].update", "avg_meters[].update", "collections.OrderedDict", "tqdm.tqdm.set_postfix", "tqdm.tqdm.update", "range", "metrics.dice_coef", "avg_meters[].update", "avg_meters[].update", "collections.OrderedDict", "tqdm.tqdm.set_postfix", "tqdm.tqdm.update", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "loss.item", "input.cuda.cuda", "target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "model_seg", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "loss.item", "output.size"], "function", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.dice_coef", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.dice_coef", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update"], ["", "def", "validate", "(", "config", ",", "val_loader", ",", "model", ",", "model_seg", ",", "criterion", ",", "epoch", ")", ":", "\n", "    ", "avg_meters", "=", "{", "'loss'", ":", "AverageMeter", "(", ")", ",", "\n", "'iou'", ":", "AverageMeter", "(", ")", "}", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "model_seg", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "val_loader", ")", ")", "\n", "if", "epoch", "<=", "int", "(", "config", "[", "'epochs'", "]", "/", "2", ")", ":", "\n", "          ", "for", "input", ",", "target", ",", "_", ",", "_", ",", "_", ",", "in", "val_loader", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "input_", "=", "torch", ".", "transpose", "(", "input_var", ",", "1", ",", "2", ")", "\n", "target_", "=", "torch", ".", "transpose", "(", "target_var", ",", "1", ",", "2", ")", "\n", "\n", "\n", "output", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "input_", ")", "\n", "\n", "loss", "=", "criterion", "[", "0", "]", "(", "output", ",", "target_", ",", "num_classes", "=", "config", "[", "'num_classes'", "]", ")", "/", "output", ".", "size", "(", "0", ")", "+", "criterion", "[", "1", "]", "(", "output", ",", "target_", ")", "\n", "iou", "=", "dice_coef", "(", "torch", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ",", "target_", ")", "\n", "\n", "avg_meters", "[", "'loss'", "]", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "avg_meters", "[", "'iou'", "]", ".", "update", "(", "iou", ")", "\n", "postfix", "=", "OrderedDict", "(", "[", "\n", "(", "'loss'", ",", "avg_meters", "[", "'loss'", "]", ".", "avg", ")", ",", "\n", "(", "'iou'", ",", "avg_meters", "[", "'iou'", "]", ".", "avg", ")", ",", "\n", "]", ")", "\n", "pbar", ".", "set_postfix", "(", "postfix", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "else", ":", "\n", "          ", "for", "input", ",", "target", ",", "_", ",", "_", ",", "_", ",", "in", "val_loader", ":", "\n", "                ", "T", "=", "5", "\n", "out_seg", "=", "None", "\n", "out_seg_", "=", "None", "\n", "\n", "for", "ii", "in", "range", "(", "T", ")", ":", "\n", "                   ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "input_", "=", "torch", ".", "transpose", "(", "input_var", ",", "1", ",", "2", ")", "\n", "target_", "=", "torch", ".", "transpose", "(", "target_var", ",", "1", ",", "2", ")", "\n", "\n", "out_map", "=", "model_seg", "(", "input_", ")", "\n", "score_map", "=", "torch", ".", "softmax", "(", "out_map", ",", "dim", "=", "1", ")", "\n", "if", "ii", "==", "0", ":", "\n", "                     ", "out_seg_", "=", "out_map", "\n", "out_seg", "=", "score_map", "\n", "", "else", ":", "\n", "                     ", "out_seg_", "=", "out_seg_", "+", "out_map", "\n", "out_seg", "=", "out_seg", "+", "score_map", "\n", "\n", "", "", "output", "=", "out_seg_", "/", "T", "\n", "loss", "=", "criterion", "[", "0", "]", "(", "output", ",", "target_", ",", "num_classes", "=", "config", "[", "'num_classes'", "]", ")", "+", "criterion", "[", "1", "]", "(", "output", ",", "target_", ")", "\n", "output", "=", "out_seg", "/", "T", "\n", "iou", "=", "dice_coef", "(", "output", ",", "target_", ")", "\n", "\n", "avg_meters", "[", "'loss'", "]", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "avg_meters", "[", "'iou'", "]", ".", "update", "(", "iou", ")", "\n", "\n", "postfix", "=", "OrderedDict", "(", "[", "\n", "(", "'loss'", ",", "avg_meters", "[", "'loss'", "]", ".", "avg", ")", ",", "\n", "(", "'iou'", ",", "avg_meters", "[", "'iou'", "]", ".", "avg", ")", ",", "\n", "]", ")", "\n", "pbar", ".", "set_postfix", "(", "postfix", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "pbar", ".", "close", "(", ")", "\n", "\n", "", "return", "OrderedDict", "(", "[", "(", "'loss'", ",", "avg_meters", "[", "'loss'", "]", ".", "avg", ")", ",", "\n", "(", "'iou'", ",", "avg_meters", "[", "'iou'", "]", ".", "avg", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.train.main": [[378, 582], ["vars", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "os.makedirs", "print", "print", "losses.BceLoss().cuda", "losses.DiceLoss().cuda", "print", "print", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "filter", "filter", "torch.Adam", "torchvision.Compose", "torchvision.Compose", "dataset.Dataset", "dataset.Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "collections.OrderedDict", "range", "train.parse_args", "print", "open", "yaml.dump", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.optim.lr_scheduler.CosineAnnealingLR", "print", "train.validate", "print", "log[].append", "log[].append", "log[].append", "log[].append", "log[].append", "log[].append", "pandas.DataFrame().to_csv", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "losses.BceLoss", "losses.DiceLoss", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ColorJitter", "torchvision.Resize", "torchvision.CenterCrop", "int", "torch.Adam", "int", "train.train", "train.train", "lr_scheduler.MultiStepLR.step", "int", "utils.save_checkpoint", "print", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "lr_scheduler.MultiStepLR.step", "pandas.DataFrame", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.nn.DataParallel().cuda.state_dict", "optim.Adam.state_dict", "torch.optim.lr_scheduler.MultiStepLR", "int", "config[].split", "int", "config[].split"], "function", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.test.parse_args", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.train.validate", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.train.train", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.train.train", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.save_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "    ", "config", "=", "vars", "(", "parse_args", "(", ")", ")", "\n", "seed", "=", "0", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "config", "[", "'name'", "]", "is", "None", ":", "\n", "            ", "config", "[", "'name'", "]", "=", "'%s_%s_woDS'", "%", "(", "config", "[", "'dataset'", "]", ",", "config", "[", "'arch'", "]", ")", "\n", "", "os", ".", "makedirs", "(", "'%s%s'", "%", "(", "config", "[", "'model_save_dir'", "]", ",", "config", "[", "'name'", "]", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "'-'", "*", "20", ")", "\n", "for", "key", "in", "config", ":", "\n", "        ", "print", "(", "'%s: %s'", "%", "(", "key", ",", "config", "[", "key", "]", ")", ")", "\n", "", "print", "(", "'-'", "*", "20", ")", "\n", "\n", "with", "open", "(", "'%s/%s/config.yml'", "%", "(", "config", "[", "'model_save_dir'", "]", ",", "config", "[", "'name'", "]", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "config", ",", "f", ")", "\n", "\n", "", "criterion_bce", "=", "losses", ".", "BceLoss", "(", ")", ".", "cuda", "(", ")", "\n", "criterion_dice", "=", "losses", ".", "DiceLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "criterion", "=", "[", "criterion_bce", ",", "criterion_dice", "]", "\n", "\n", "# create model", "\n", "print", "(", "\"=> creating model %s\"", "%", "config", "[", "'archG'", "]", ")", "\n", "model", "=", "archs", ".", "__dict__", "[", "config", "[", "'archG'", "]", "]", "(", "config", "[", "'num_classes'", "]", ",", "\n", "config", "[", "'input_channels'", "]", ",", "\n", "config", "[", "'input_crop'", "]", ",", "\n", "config", "[", "'input_crop'", "]", ")", "\n", "\n", "print", "(", "\"=> creating model %s\"", "%", "config", "[", "'arch'", "]", ")", "\n", "model_seg", "=", "archs", ".", "__dict__", "[", "config", "[", "'arch'", "]", "]", "(", "config", "[", "'num_classes'", "]", ",", "\n", "config", "[", "'input_channels'", "]", ",", ")", "\n", "\n", "\n", "\n", "model_seg", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model_seg", ")", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "params", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "params_seg", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model_seg", ".", "parameters", "(", ")", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "params", ",", "lr", "=", "config", "[", "'lr'", "]", "*", "1.0", ",", "weight_decay", "=", "config", "[", "'weight_decay'", "]", ")", "\n", "\n", "if", "config", "[", "'scheduler'", "]", "==", "'CosineAnnealingLR'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "T_max", "=", "config", "[", "'epochs'", "]", ",", "eta_min", "=", "config", "[", "'min_lr'", "]", ")", "\n", "", "elif", "config", "[", "'scheduler'", "]", "==", "'ReduceLROnPlateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "factor", "=", "config", "[", "'factor'", "]", ",", "patience", "=", "config", "[", "'patience'", "]", ",", "\n", "verbose", "=", "1", ",", "min_lr", "=", "config", "[", "'min_lr'", "]", ")", "\n", "", "elif", "config", "[", "'scheduler'", "]", "==", "'MultiStepLR'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "int", "(", "e", ")", "for", "e", "in", "config", "[", "'milestones'", "]", ".", "split", "(", "','", ")", "]", ",", "gamma", "=", "config", "[", "'gamma'", "]", ")", "\n", "", "elif", "config", "[", "'scheduler'", "]", "==", "'ConstantLR'", ":", "\n", "        ", "scheduler", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Data loading code", "\n", "\n", "", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "160", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0", ")", ",", "\n", "]", ")", "\n", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "160", ")", ",", "\n", "]", ")", "\n", "\n", "train_dataset", "=", "Dataset", "(", "\n", "data_txt", "=", "config", "[", "'train_txt'", "]", ",", "\n", "img_ext", "=", "config", "[", "'img_ext'", "]", ",", "\n", "mask_ext", "=", "config", "[", "'mask_ext'", "]", ",", "\n", "semi_setting", "=", "True", ",", "\n", "label_factor_semi", "=", "config", "[", "'label_factor_semi'", "]", ",", "\n", "transform", "=", "train_transform", ",", "\n", "rotate_flip", "=", "True", ",", "\n", "random_whd_crop", "=", "True", ",", "\n", "crop_hw", "=", "config", "[", "'input_crop'", "]", ",", "\n", "depth", "=", "config", "[", "'depth'", "]", ",", "\n", "num_classes", "=", "config", "[", "'num_classes'", "]", ")", "\n", "\n", "\n", "val_dataset", "=", "Dataset", "(", "\n", "data_txt", "=", "config", "[", "'val_txt'", "]", ",", "\n", "img_ext", "=", "config", "[", "'img_ext'", "]", ",", "\n", "mask_ext", "=", "config", "[", "'mask_ext'", "]", ",", "\n", "semi_setting", "=", "False", ",", "\n", "label_factor_semi", "=", "None", ",", "\n", "transform", "=", "val_transform", ",", "\n", "rotate_flip", "=", "False", ",", "\n", "random_whd_crop", "=", "True", ",", "\n", "crop_hw", "=", "config", "[", "'input_crop'", "]", ",", "\n", "depth", "=", "config", "[", "'depth'", "]", ",", "\n", "num_classes", "=", "config", "[", "'num_classes'", "]", ")", "\n", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "config", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "data_collate", ",", "\n", "num_workers", "=", "config", "[", "'num_workers'", "]", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "data_collate", ",", "\n", "num_workers", "=", "config", "[", "'num_workers'", "]", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "\n", "log", "=", "OrderedDict", "(", "[", "\n", "(", "'epoch'", ",", "[", "]", ")", ",", "\n", "(", "'lr'", ",", "[", "]", ")", ",", "\n", "(", "'loss'", ",", "[", "]", ")", ",", "\n", "(", "'iou'", ",", "[", "]", ")", ",", "\n", "(", "'val_loss'", ",", "[", "]", ")", ",", "\n", "(", "'val_iou'", ",", "[", "]", ")", ",", "\n", "]", ")", "\n", "\n", "best_iou", "=", "0", "\n", "\n", "trigger", "=", "0", "\n", "for", "epoch", "in", "range", "(", "config", "[", "'start_epoch'", "]", ",", "config", "[", "'epochs'", "]", ")", ":", "\n", "        ", "print", "(", "'Epoch [%d/%d]'", "%", "(", "epoch", ",", "config", "[", "'epochs'", "]", ")", ")", "\n", "\n", "# train for one epoch", "\n", "\n", "if", "epoch", "==", "int", "(", "config", "[", "'epochs'", "]", "/", "2", "+", "1", ")", ":", "\n", "           ", "best_iou", "=", "0", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "params_seg", ",", "lr", "=", "config", "[", "'lr'", "]", "*", "5", ",", "weight_decay", "=", "config", "[", "'weight_decay'", "]", "*", "0.1", ")", "\n", "\n", "if", "config", "[", "'scheduler'", "]", "==", "'CosineAnnealingLR'", ":", "\n", "             ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "T_max", "=", "config", "[", "'epochs'", "]", ",", "eta_min", "=", "config", "[", "'min_lr'", "]", ")", "\n", "", "elif", "config", "[", "'scheduler'", "]", "==", "'ReduceLROnPlateau'", ":", "\n", "             ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "factor", "=", "config", "[", "'factor'", "]", ",", "patience", "=", "config", "[", "'patience'", "]", ",", "\n", "verbose", "=", "1", ",", "min_lr", "=", "config", "[", "'min_lr'", "]", ")", "\n", "", "elif", "config", "[", "'scheduler'", "]", "==", "'MultiStepLR'", ":", "\n", "             ", "scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "int", "(", "e", ")", "for", "e", "in", "config", "[", "'milestones'", "]", ".", "split", "(", "','", ")", "]", ",", "gamma", "=", "config", "[", "'gamma'", "]", ")", "\n", "", "elif", "config", "[", "'scheduler'", "]", "==", "'ConstantLR'", ":", "\n", "             ", "scheduler", "=", "None", "\n", "", "else", ":", "\n", "             ", "raise", "NotImplementedError", "\n", "\n", "# first train LRL, then train MC_UNet", "\n", "\n", "", "", "if", "epoch", "<=", "int", "(", "config", "[", "'epochs'", "]", "/", "2", ")", ":", "\n", "          ", "train_log", "=", "train", "(", "config", ",", "train_loader", ",", "model", ",", "model_seg", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "", "else", ":", "\n", "          ", "train_log", "=", "train", "(", "config", ",", "train_loader", ",", "model", ",", "model_seg", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "\n", "", "val_log", "=", "validate", "(", "config", ",", "val_loader", ",", "model", ",", "model_seg", ",", "criterion", ",", "epoch", ")", "\n", "\n", "\n", "if", "config", "[", "'scheduler'", "]", "==", "'CosineAnnealingLR'", "or", "config", "[", "'scheduler'", "]", "==", "'MultiStepLR'", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "elif", "config", "[", "'scheduler'", "]", "==", "'ReduceLROnPlateau'", ":", "\n", "            ", "scheduler", ".", "step", "(", "val_log", "[", "'loss'", "]", ")", "\n", "\n", "\n", "", "print", "(", "'loss %.4f - iou %.4f - val_loss %.4f - val_iou %.4f'", "\n", "%", "(", "train_log", "[", "'loss'", "]", ",", "train_log", "[", "'iou'", "]", ",", "val_log", "[", "'loss'", "]", ",", "val_log", "[", "'iou'", "]", ")", ")", "\n", "\n", "\n", "log", "[", "'epoch'", "]", ".", "append", "(", "epoch", ")", "\n", "log", "[", "'lr'", "]", ".", "append", "(", "config", "[", "'lr'", "]", ")", "\n", "log", "[", "'loss'", "]", ".", "append", "(", "train_log", "[", "'loss'", "]", ")", "\n", "log", "[", "'iou'", "]", ".", "append", "(", "train_log", "[", "'iou'", "]", ")", "\n", "log", "[", "'val_loss'", "]", ".", "append", "(", "val_log", "[", "'loss'", "]", ")", "\n", "\n", "\n", "log", "[", "'val_iou'", "]", ".", "append", "(", "val_log", "[", "'iou'", "]", ")", "\n", "\n", "pd", ".", "DataFrame", "(", "log", ")", ".", "to_csv", "(", "'%s/%s/log.csv'", "%", "\n", "(", "config", "[", "'model_save_dir'", "]", ",", "config", "[", "'name'", "]", ")", ",", "index", "=", "False", ")", "\n", "\n", "trigger", "+=", "1", "\n", "if", "epoch", ">", "int", "(", "config", "[", "'epochs'", "]", "/", "2", ")", ":", "\n", "            ", "best_iou", "=", "val_log", "[", "'iou'", "]", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "config", "[", "'arch'", "]", ",", "\n", "'state_dict'", ":", "model_seg", ".", "state_dict", "(", ")", ",", "\n", "'best_iou'", ":", "best_iou", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "filename", "=", "'%s/%s/model_seg.pth'", "%", "(", "config", "[", "'model_save_dir'", "]", ",", "config", "[", "'name'", "]", ")", ")", "\n", "\n", "# early stopping", "\n", "", "if", "config", "[", "'early_stopping'", "]", ">=", "0", "and", "trigger", ">=", "config", "[", "'early_stopping'", "]", ":", "\n", "            ", "print", "(", "\"=> early stopping\"", ")", "\n", "break", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.dataset.Dataset.__init__": [[11, 51], ["open", "open.readlines", "len", "random.shuffle", "dataset.Dataset.patient.append", "int", "range", "int", "ele.split", "[].split", "dataset.Dataset.patient_label.append", "dataset.Dataset.patient_unlabel.append", "len", "len", "ele.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_txt", ",", "img_ext", ",", "mask_ext", ",", "transform", "=", "None", ",", "semi_setting", "=", "True", ",", "label_factor_semi", "=", "0.2", ",", "rotate_flip", "=", "True", ",", "depth", "=", "96", ",", "crop_hw", "=", "96", ",", "random_whd_crop", "=", "True", ",", "num_classes", "=", "2", ")", ":", "\n", "\n", "        ", "self", ".", "data_txt", "=", "data_txt", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "img_ext", "=", "img_ext", "\n", "self", ".", "mask_ext", "=", "mask_ext", "\n", "self", ".", "patient", "=", "[", "]", "\n", "self", ".", "random_whd_crop", "=", "random_whd_crop", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "crop_hw", "=", "crop_hw", "\n", "self", ".", "semi_setting", "=", "semi_setting", "\n", "self", ".", "patient_label", "=", "[", "]", "\n", "self", ".", "patient_unlabel", "=", "[", "]", "\n", "self", ".", "rotate_flip", "=", "rotate_flip", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "w", "=", "open", "(", "self", ".", "data_txt", ")", "\n", "# store images and label maps", "\n", "for", "ele", "in", "w", ".", "readlines", "(", ")", ":", "\n", "           ", "id", "=", "ele", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "id_l", "=", "ele", ".", "split", "(", "' '", ")", "[", "1", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "self", ".", "patient", ".", "append", "(", "[", "id", ",", "id_l", "]", ")", "\n", "\n", "", "num", "=", "len", "(", "self", ".", "patient", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "patient", ")", "\n", "\n", "if", "self", ".", "semi_setting", ":", "\n", "         ", "num_patient", "=", "int", "(", "num", "*", "label_factor_semi", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "           ", "if", "i", "<", "num_patient", ":", "\n", "            ", "self", ".", "patient_label", ".", "append", "(", "self", ".", "patient", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "patient_unlabel", ".", "append", "(", "self", ".", "patient", "[", "i", "]", ")", "\n", "\n", "", "", "num_ratio", "=", "int", "(", "len", "(", "self", ".", "patient_unlabel", ")", "/", "len", "(", "self", ".", "patient_label", ")", ")", "\n", "# copy to make they have the same length for sampling", "\n", "\n", "\n", "# balanced labeled and unlabeled data", "\n", "patient_label_repeat", "=", "self", ".", "patient_label", "*", "(", "num_ratio", "+", "1", ")", "\n", "self", ".", "patient", "=", "patient_label_repeat", "+", "self", ".", "patient_unlabel", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.dataset.Dataset.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "patient", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.dataset.Dataset.rotate": [[56, 68], ["cv2.getRotationMatrix2D", "cv2.warpAffine", "cv2.warpAffine"], "methods", ["None"], ["", "def", "rotate", "(", "self", ",", "image", ",", "label", ",", "angle", ",", "center", "=", "None", ",", "scale", "=", "1.0", ")", ":", "\n", "\n", "       ", "(", "h", ",", "w", ")", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "center", "is", "None", ":", "\n", "          ", "center", "=", "(", "w", "/", "2", ",", "h", "/", "2", ")", "\n", "\n", "", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "center", ",", "angle", ",", "scale", ")", "\n", "rotated_image", "=", "cv2", ".", "warpAffine", "(", "image", ",", "M", ",", "(", "w", ",", "h", ")", ")", "\n", "rotated_label", "=", "cv2", ".", "warpAffine", "(", "label", ",", "M", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "rotated_image", ",", "rotated_label", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.dataset.Dataset.random_crop": [[72, 82], ["numpy.random.randint"], "methods", ["None"], ["", "def", "random_crop", "(", "self", ",", "image", ",", "mask", ",", "crop_sz", ")", ":", "\n", "      ", "img_sz", "=", "image", ".", "shape", "[", "0", "]", "\n", "random_arr", "=", "np", ".", "random", ".", "randint", "(", "img_sz", "-", "crop_sz", "+", "1", ",", "size", "=", "2", ")", "\n", "y", "=", "random_arr", "[", "1", "]", "\n", "x", "=", "random_arr", "[", "0", "]", "\n", "h", "=", "crop_sz", "\n", "image_crop", "=", "image", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "h", ",", ":", "]", "\n", "mask_crop", "=", "mask", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "h", ",", ":", "]", "\n", "\n", "return", "image_crop", ",", "mask_crop", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.dataset.Dataset.transform_crop": [[83, 102], ["max", "min", "max", "min", "image.astype.astype.astype", "numpy.expand_dims", "max", "max"], "methods", ["None"], ["", "def", "transform_crop", "(", "self", ",", "image", ",", "label", ",", "minx", ",", "maxx", ",", "miny", ",", "maxy", ",", "output_size", "=", "[", "112", ",", "112", "]", ")", ":", "\n", "\n", "        ", "w", ",", "h", "=", "label", ".", "shape", "\n", "\n", "px", "=", "max", "(", "output_size", "[", "0", "]", "-", "(", "maxx", "-", "minx", ")", ",", "0", ")", "//", "2", "\n", "py", "=", "max", "(", "output_size", "[", "1", "]", "-", "(", "maxy", "-", "miny", ")", ",", "0", ")", "//", "2", "\n", "\n", "minx", "=", "max", "(", "minx", "-", "10", "-", "px", ",", "0", ")", "\n", "maxx", "=", "min", "(", "maxx", "+", "10", "+", "px", ",", "w", ")", "\n", "miny", "=", "max", "(", "miny", "-", "10", "-", "py", ",", "0", ")", "\n", "maxy", "=", "min", "(", "maxy", "+", "10", "+", "py", ",", "h", ")", "\n", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "image", "=", "image", "[", "minx", ":", "maxx", ",", "miny", ":", "maxy", ",", ":", "]", "\n", "label", "=", "label", "[", "minx", ":", "maxx", ",", "miny", ":", "maxy", "]", "\n", "\n", "label", "=", "np", ".", "expand_dims", "(", "label", ",", "-", "1", ")", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.dataset.Dataset.__getitem__": [[103, 233], ["os.listdir", "len", "min", "range", "range", "numpy.mean", "numpy.std", "range", "numpy.array", "numpy.array", "numpy.dstack", "patient[].split", "[].split", "int", "nums.append", "os.path.join", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open().convert", "numpy.sum", "numpy.sum", "imgs.append", "masks.append", "numpy.dstack.append", "len", "len", "len", "numpy.dstack", "numpy.dstack", "cv2.flip.transpose", "cv2.flip.transpose", "numpy.expand_dims", "numpy.reshape", "numpy.expand_dims", "numpy.reshape", "numpy.ones", "range", "ele.split", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.expand_dims", "numpy.max", "numpy.max", "int", "random.randint", "numpy.zeros", "numpy.zeros", "range", "dataset.Dataset.random_crop", "numpy.random.randint", "numpy.random.randint", "ele1.split", "PIL.Image.open", "PIL.Image.open", "dataset.Dataset.transform", "numpy.array", "numpy.expand_dims.astype", "imgs[].astype", "imgs.append", "masks.append", "numpy.dstack.append", "cv2.flip", "cv2.flip", "numpy.random.uniform", "dataset.Dataset.rotate", "numpy.concatenate", "patient[].split", "str", "str", "numpy.array", "numpy.array", "dataset.Dataset.transform", "numpy.expand_dims.astype", "numpy.max", "imgs[].astype", "numpy.expand_dims.astype"], "methods", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.dataset.Dataset.random_crop", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.dataset.Dataset.rotate"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "patient", "=", "self", ".", "patient", "[", "idx", "]", "\n", "imgs", "=", "[", "]", "\n", "masks", "=", "[", "]", "\n", "img_list", "=", "os", ".", "listdir", "(", "patient", "[", "0", "]", ")", "\n", "\n", "num", "=", "len", "(", "img_list", ")", "\n", "base_name", "=", "patient", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "base_name_l", "=", "patient", "[", "1", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "\n", "nums", "=", "[", "]", "\n", "\n", "image_shape", "=", "None", "\n", "mask_shape", "=", "None", "\n", "\n", "for", "ele", "in", "img_list", ":", "\n", "           ", "ele1", "=", "ele", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", "\n", "num_", "=", "int", "(", "ele1", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "nums", ".", "append", "(", "num_", ")", "\n", "\n", "", "base_num", "=", "min", "(", "nums", ")", "\n", "img_channel", "=", "3", "\n", "img_paths", "=", "[", "]", "\n", "num_collect", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "num", ")", ":", "\n", "           ", "ele", "=", "base_name", "+", "'-'", "+", "str", "(", "base_num", "+", "i", ")", "+", "'.'", "+", "self", ".", "img_ext", "\n", "ele_l", "=", "base_name_l", "+", "'-'", "+", "str", "(", "base_num", "+", "i", ")", "+", "'.'", "+", "self", ".", "mask_ext", "\n", "img", "=", "os", ".", "path", ".", "join", "(", "patient", "[", "0", "]", ",", "ele", ")", "\n", "img_", "=", "Image", ".", "open", "(", "img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "anno", "=", "os", ".", "path", ".", "join", "(", "patient", "[", "1", "]", ",", "ele_l", ")", "\n", "mask_", "=", "Image", ".", "open", "(", "anno", ")", ".", "convert", "(", "'L'", ")", "\n", "\n", "img_sum", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "img_", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "mask_sum", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "mask_", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "\n", "if", "img_sum", "==", "0.0", "or", "mask_sum", "<", "1.0", ":", "\n", "                ", "continue", "\n", "\n", "", "imgs", ".", "append", "(", "img_", ")", "\n", "masks", ".", "append", "(", "mask_", ")", "\n", "img_paths", ".", "append", "(", "img", ")", "\n", "num_collect", "+=", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "            ", "img_", "=", "imgs", "[", "i", "]", "\n", "mask_", "=", "masks", "[", "i", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "              ", "imgs", "[", "i", "]", "=", "np", ".", "array", "(", "self", ".", "transform", "(", "img_", ")", ")", "\n", "mask_", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "self", ".", "transform", "(", "mask_", ")", ")", ",", "-", "1", ")", "\n", "\n", "\n", "", "if", "np", ".", "max", "(", "mask_", ".", "astype", "(", "'float32'", ")", ")", "!=", "0.0", ":", "\n", "               ", "masks", "[", "i", "]", "=", "mask_", ".", "astype", "(", "'float32'", ")", "/", "np", ".", "max", "(", "mask_", ".", "astype", "(", "'float32'", ")", ")", "*", "(", "self", ".", "num_classes", "-", "1", ")", "\n", "", "else", ":", "\n", "               ", "masks", "[", "i", "]", "=", "mask_", "\n", "\n", "\n", "", "", "img_mean", "=", "np", ".", "mean", "(", "imgs", ")", "\n", "img_std", "=", "np", ".", "std", "(", "imgs", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "            ", "if", "np", ".", "max", "(", "imgs", "[", "i", "]", ".", "astype", "(", "'float32'", ")", ")", ">", "0.0", ":", "\n", "              ", "imgs", "[", "i", "]", "=", "(", "imgs", "[", "i", "]", ".", "astype", "(", "'float32'", ")", "-", "img_mean", ")", "/", "img_std", "\n", "\n", "", "", "image_shape", "=", "imgs", "[", "0", "]", ".", "shape", "\n", "mask_shape", "=", "masks", "[", "0", "]", ".", "shape", "\n", "\n", "\n", "if", "self", ".", "random_whd_crop", ":", "\n", "         ", "n_frame", "=", "len", "(", "imgs", ")", "\n", "if", "n_frame", ">=", "int", "(", "self", ".", "depth", ")", ":", "\n", "           ", "start", "=", "random", ".", "randint", "(", "0", ",", "n_frame", "-", "self", ".", "depth", ")", "\n", "imgs", "=", "imgs", "[", "start", ":", "start", "+", "self", ".", "depth", "]", "\n", "masks", "=", "masks", "[", "start", ":", "start", "+", "self", ".", "depth", "]", "\n", "img_paths", "=", "img_paths", "[", "start", ":", "start", "+", "self", ".", "depth", "]", "\n", "", "else", ":", "\n", "           ", "N", "=", "self", ".", "depth", "-", "n_frame", "\n", "zero_img", "=", "np", ".", "zeros", "(", "image_shape", ")", "\n", "zero_mask", "=", "np", ".", "zeros", "(", "mask_shape", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "               ", "imgs", ".", "append", "(", "zero_img", ")", "\n", "masks", ".", "append", "(", "zero_mask", ")", "\n", "img_paths", ".", "append", "(", "' '", ")", "\n", "\n", "", "", "", "img", "=", "np", ".", "array", "(", "np", ".", "dstack", "(", "imgs", ")", ")", "\n", "mask", "=", "np", ".", "array", "(", "np", ".", "dstack", "(", "masks", ")", ")", "\n", "img_paths", "=", "np", ".", "dstack", "(", "img_paths", ")", "\n", "\n", "try", ":", "\n", "         ", "if", "self", ".", "random_whd_crop", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "random_crop", "(", "img", ",", "mask", ",", "self", ".", "crop_hw", ")", "\n", "\n", "\n", "", "if", "self", ".", "rotate_flip", ":", "\n", "          ", "a", "=", "np", ".", "random", ".", "randint", "(", "2", ")", "\n", "if", "a", "==", "0", ":", "\n", "            ", "img", "=", "cv2", ".", "flip", "(", "img", ",", "1", ")", "\n", "mask", "=", "cv2", ".", "flip", "(", "mask", ",", "1", ")", "\n", "\n", "", "b", "=", "np", ".", "random", ".", "randint", "(", "2", ")", "\n", "if", "b", "==", "0", ":", "\n", "            ", "angle", "=", "np", ".", "random", ".", "uniform", "(", "-", "10", ",", "10", ")", "\n", "img", ",", "mask", "=", "self", ".", "rotate", "(", "img", ",", "mask", ",", "angle", ")", "\n", "\n", "", "", "", "finally", ":", "\n", "         ", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "1", ")", "\n", "img", "=", "np", ".", "reshape", "(", "img", ",", "(", "-", "1", ",", "img_channel", ",", "img", ".", "shape", "[", "-", "2", "]", ",", "img", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "\n", "mask", "=", "np", ".", "expand_dims", "(", "mask", ",", "1", ")", "\n", "mask", "=", "np", ".", "reshape", "(", "mask", ",", "(", "-", "1", ",", "1", ",", "mask", ".", "shape", "[", "-", "2", "]", ",", "mask", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "mask_ones", "=", "np", ".", "ones", "(", "mask", ".", "shape", ")", "\n", "\n", "\n", "mask_one_hot", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "             ", "if", "mask_one_hot", "is", "None", ":", "\n", "                 ", "mask_one_hot", "=", "(", "mask", "==", "(", "(", "i", ")", "*", "mask_ones", ")", ")", ".", "astype", "(", "'int'", ")", "\n", "", "else", ":", "\n", "                 ", "mask_one_hot", "=", "np", ".", "concatenate", "(", "(", "mask_one_hot", ",", "(", "mask", "==", "(", "i", "*", "mask_ones", ")", ")", ".", "astype", "(", "'int'", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "", "return", "img", ",", "mask_one_hot", ",", "num_collect", ",", "img_paths", ",", "self", ".", "patient_label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.test.parse_args": [[19, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_dir'", ",", "default", "=", "'/raid/D/bayes/bayes_AtriaSeg_8/'", ",", "\n", "help", "=", "'model directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_crop'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "\n", "help", "=", "'image width'", ")", "\n", "parser", ".", "add_argument", "(", "'--depth'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "\n", "help", "=", "'image depth'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_txt'", ",", "default", "=", "'./val_AtriaSeg.txt'", ",", "\n", "help", "=", "'text file showing the patient id used for validation'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'setting gpu id'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of classes'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.test.data_collate": [[40, 59], ["num_per_patient.append", "torch.cat.float", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.dstack", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "data_collate", "(", "batch", ")", ":", "\n", "    ", "input", "=", "None", "\n", "target", "=", "None", "\n", "input_paths", "=", "None", "\n", "total_num", "=", "0", "\n", "num_per_patient", "=", "[", "]", "\n", "for", "info", "in", "batch", ":", "\n", "      ", "if", "total_num", "==", "0", ":", "\n", "        ", "input", "=", "torch", ".", "from_numpy", "(", "info", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "info", "[", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "input_paths", "=", "info", "[", "3", "]", "\n", "", "else", ":", "\n", "        ", "input", "=", "torch", ".", "cat", "(", "(", "input", ",", "torch", ".", "from_numpy", "(", "info", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "target", "=", "torch", ".", "cat", "(", "(", "target", ",", "torch", ".", "from_numpy", "(", "info", "[", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "input_paths", "=", "np", ".", "dstack", "(", "(", "input_paths", ",", "info", "[", "3", "]", ")", ")", "\n", "", "num_per_patient", ".", "append", "(", "info", "[", "2", "]", ")", "\n", "total_num", "+=", "1", "\n", "\n", "", "return", "input", ".", "float", "(", ")", ",", "target", ",", "num_per_patient", ",", "input_paths", ",", "info", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.test.main": [[63, 182], ["test.parse_args", "os.path.join", "print", "yaml.load.keys", "print", "print", "model_seg.cuda.cuda", "os.path.join", "torch.load", "torch.load", "collections.OrderedDict", "pretrain_dict.items", "model_seg.cuda.state_dict", "model_seg.state_dict.update", "model_seg.cuda.load_state_dict", "model_seg.cuda.eval", "torch.cuda.set_device", "torch.cuda.set_device", "torchvision.Compose", "dataset.Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "open", "yaml.load", "print", "k.startswith", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "torchvision.Resize", "torchvision.CenterCrop", "input.cuda.cuda", "target.cuda.cuda", "range", "metrics.dice_coef", "metrics.Jaccord", "metrics.HD", "metrics.ASD", "avg_meters[].update", "avg_meters[].update", "avg_meters[].update", "avg_meters[].update", "len", "input.cuda.cuda", "target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "utils.test_single_case", "input.cuda.size", "input.cuda.size", "input.cuda.size", "input.cuda.size", "str"], "function", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.test.parse_args", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.dice_coef", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.Jaccord", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.HD", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.metrics.ASD", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.test_single_case"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "model_dir", "=", "args", ".", "model_dir", "\n", "\n", "yml", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'config.yml'", ")", "\n", "\n", "with", "open", "(", "yml", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "", "print", "(", "'-'", "*", "20", ")", "\n", "for", "key", "in", "config", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "'%s: %s'", "%", "(", "key", ",", "str", "(", "config", "[", "key", "]", ")", ")", ")", "\n", "", "print", "(", "'-'", "*", "20", ")", "\n", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "print", "(", "\"=> creating model %s\"", "%", "config", "[", "'arch'", "]", ")", "\n", "model_seg", "=", "archs", ".", "__dict__", "[", "config", "[", "'arch'", "]", "]", "(", "args", ".", "num_classes", ",", "\n", "config", "[", "'input_channels'", "]", ")", "\n", "\n", "\n", "model_seg", "=", "model_seg", ".", "cuda", "(", ")", "\n", "\n", "model_seg_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'model_seg_240.pth'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_seg_path", ")", "\n", "pretrain_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "new_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "\"module\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "7", ":", "]", "\n", "new_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "model_dict", "=", "model_seg", ".", "state_dict", "(", ")", "\n", "model_dict", ".", "update", "(", "new_dict", ")", "\n", "model_seg", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "\n", "model_seg", ".", "eval", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu_id", ")", "\n", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "160", ")", ",", "\n", "]", ")", "\n", "\n", "test_dataset", "=", "Dataset", "(", "\n", "data_txt", "=", "args", ".", "test_txt", ",", "\n", "img_ext", "=", "'png'", ",", "\n", "mask_ext", "=", "'png'", ",", "\n", "semi_setting", "=", "False", ",", "\n", "label_factor_semi", "=", "None", ",", "\n", "transform", "=", "test_transform", ",", "\n", "rotate_flip", "=", "False", ",", "\n", "random_whd_crop", "=", "False", ",", "\n", "crop_hw", "=", "128", ",", "\n", "depth", "=", "None", ")", "\n", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "data_collate", ",", "\n", "num_workers", "=", "config", "[", "'num_workers'", "]", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "avg_meters", "=", "{", "'dice'", ":", "AverageMeter", "(", ")", ",", "\n", "'jaccord'", ":", "AverageMeter", "(", ")", ",", "\n", "'hd95'", ":", "AverageMeter", "(", ")", ",", "\n", "'asd'", ":", "AverageMeter", "(", ")", "}", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "input", ",", "target", ",", "_", ",", "_", ",", "_", ",", "in", "tqdm", "(", "test_loader", ",", "total", "=", "len", "(", "test_loader", ")", ")", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "T", "=", "1", "\n", "out_seg", "=", "None", "\n", "out_seg_", "=", "None", "\n", "\n", "for", "ii", "in", "range", "(", "T", ")", ":", "\n", "             ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "input_", "=", "torch", ".", "transpose", "(", "input_var", ",", "1", ",", "2", ")", "\n", "target_", "=", "torch", ".", "transpose", "(", "target_var", ",", "1", ",", "2", ")", "\n", "out_map", ",", "score_map", "=", "test_single_case", "(", "model_seg", ",", "input_", ",", "8", ",", "8", ",", "patch_size", "=", "(", "args", ".", "input_crop", ",", "args", ".", "input_crop", ",", "args", ".", "depth", ")", ",", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "ii", "==", "0", ":", "\n", "               ", "out_seg", "=", "score_map", "\n", "out_seg_", "=", "out_map", "\n", "", "else", ":", "\n", "               ", "out_seg", "=", "out_seg", "+", "score_map", "\n", "out_seg_", "=", "out_seg_", "+", "out_map", "\n", "\n", "", "", "output", "=", "out_seg", "/", "T", "\n", "\n", "dice", "=", "dice_coef", "(", "output", ",", "target_", ")", "\n", "jaccord", "=", "Jaccord", "(", "output", ",", "target_", ")", "\n", "hd", "=", "HD", "(", "output", ",", "target_", ")", "\n", "asd", "=", "ASD", "(", "output", ",", "target_", ")", "\n", "\n", "avg_meters", "[", "'dice'", "]", ".", "update", "(", "dice", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "avg_meters", "[", "'jaccord'", "]", ".", "update", "(", "jaccord", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "avg_meters", "[", "'hd95'", "]", ".", "update", "(", "hd", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "avg_meters", "[", "'asd'", "]", ".", "update", "(", "asd", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "\n", "\n", "", "", "print", "(", "'Dice: %.4f'", "%", "avg_meters", "[", "'dice'", "]", ".", "avg", ")", "\n", "print", "(", "'Jaccord: %.4f'", "%", "avg_meters", "[", "'jaccord'", "]", ".", "avg", ")", "\n", "print", "(", "'hd95: %.4f'", "%", "avg_meters", "[", "'hd95'", "]", ".", "avg", ")", "\n", "print", "(", "'asd: %.4f'", "%", "avg_meters", "[", "'asd'", "]", ".", "avg", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.RandomApply.__init__": [[25, 29], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fn", ",", "p", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "self", ".", "p", "=", "p", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.RandomApply.forward": [[29, 33], ["utils.RandomApply.fn", "random.random"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "p", ":", "\n", "            ", "return", "x", "\n", "", "return", "self", ".", "fn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.__init__": [[37, 39], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.reset": [[40, 45], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.AverageMeter.update": [[46, 51], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.str2bool": [[8, 15], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "[", "'true'", ",", "1", "]", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "[", "'false'", ",", "0", "]", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.count_params": [[17, 19], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "", "def", "count_params", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.save_checkpoint": [[21, 23], ["torch.save", "torch.save"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.utils.test_single_case": [[53, 125], ["img.cpu().numpy", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "range", "int", "int", "int", "int", "int", "int", "numpy.pad", "math.ceil", "math.ceil", "math.ceil", "min", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "img.cpu", "numpy.zeros", "numpy.zeros", "numpy.zeros", "min", "range", "min", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "net", "torch.softmax().mean", "torch.softmax().mean", "y.cpu().data.numpy.cpu().data.numpy", "y1.cpu().data.numpy.cpu().data.numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "y1.cpu().data.numpy.mean", "torch.from_numpy", "torch.from_numpy", "torch.softmax", "torch.softmax", "y.cpu().data.numpy.cpu", "y1.cpu().data.numpy.cpu"], "function", ["None"], ["", "", "def", "test_single_case", "(", "net", ",", "img", ",", "stride_xy", ",", "stride_z", ",", "patch_size", ",", "num_classes", "=", "1", ")", ":", "\n", "    ", "image", "=", "img", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "b", ",", "c", ",", "d", ",", "w", ",", "h", "=", "image", ".", "shape", "\n", "\n", "# if the size of image is less than patch_size, then padding it", "\n", "add_pad", "=", "False", "\n", "if", "w", "<", "patch_size", "[", "0", "]", ":", "\n", "        ", "w_pad", "=", "patch_size", "[", "0", "]", "-", "w", "\n", "add_pad", "=", "True", "\n", "", "else", ":", "\n", "        ", "w_pad", "=", "0", "\n", "", "if", "h", "<", "patch_size", "[", "1", "]", ":", "\n", "        ", "h_pad", "=", "patch_size", "[", "1", "]", "-", "h", "\n", "add_pad", "=", "True", "\n", "", "else", ":", "\n", "        ", "h_pad", "=", "0", "\n", "", "if", "d", "<", "patch_size", "[", "2", "]", ":", "\n", "        ", "d_pad", "=", "patch_size", "[", "2", "]", "-", "d", "\n", "add_pad", "=", "True", "\n", "", "else", ":", "\n", "        ", "d_pad", "=", "0", "\n", "\n", "\n", "", "wl_pad", ",", "wr_pad", "=", "int", "(", "w_pad", "//", "2", ")", ",", "int", "(", "w_pad", "-", "w_pad", "//", "2", ")", "\n", "hl_pad", ",", "hr_pad", "=", "int", "(", "h_pad", "//", "2", ")", ",", "int", "(", "h_pad", "-", "h_pad", "//", "2", ")", "\n", "dl_pad", ",", "dr_pad", "=", "int", "(", "d_pad", "//", "2", ")", ",", "int", "(", "d_pad", "-", "d_pad", "//", "2", ")", "\n", "\n", "\n", "if", "add_pad", ":", "\n", "        ", "image", "=", "np", ".", "pad", "(", "image", ",", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "dl_pad", ",", "dr_pad", ")", ",", "(", "wl_pad", ",", "wr_pad", ")", ",", "(", "hl_pad", ",", "hr_pad", ")", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "", "bb", ",", "cc", ",", "dd", ",", "ww", ",", "hh", "=", "image", ".", "shape", "\n", "\n", "sx", "=", "math", ".", "ceil", "(", "(", "ww", "-", "patch_size", "[", "0", "]", ")", "/", "stride_xy", ")", "+", "1", "\n", "sy", "=", "math", ".", "ceil", "(", "(", "hh", "-", "patch_size", "[", "1", "]", ")", "/", "stride_xy", ")", "+", "1", "\n", "sz", "=", "math", ".", "ceil", "(", "(", "dd", "-", "patch_size", "[", "2", "]", ")", "/", "stride_z", ")", "+", "1", "\n", "\n", "score_map", "=", "np", ".", "zeros", "(", "(", "bb", ",", "num_classes", ",", "dd", ",", "ww", ",", "hh", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "cnt", "=", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "dd", ",", "ww", ",", "hh", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "out_map", "=", "np", ".", "zeros", "(", "(", "bb", ",", "num_classes", ",", "dd", ",", "ww", ",", "hh", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "range", "(", "0", ",", "sx", ")", ":", "\n", "        ", "xs", "=", "min", "(", "stride_xy", "*", "x", ",", "ww", "-", "patch_size", "[", "0", "]", ")", "\n", "for", "y", "in", "range", "(", "0", ",", "sy", ")", ":", "\n", "            ", "ys", "=", "min", "(", "stride_xy", "*", "y", ",", "hh", "-", "patch_size", "[", "1", "]", ")", "\n", "for", "z", "in", "range", "(", "0", ",", "sz", ")", ":", "\n", "                ", "zs", "=", "min", "(", "stride_z", "*", "z", ",", "dd", "-", "patch_size", "[", "2", "]", ")", "\n", "test_patch", "=", "image", "[", ":", ",", ":", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", ",", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", "]", "\n", "test_patch", "=", "torch", ".", "from_numpy", "(", "test_patch", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "y1", "=", "net", "(", "test_patch", ",", "T", "=", "10", ")", "\n", "y", "=", "torch", ".", "softmax", "(", "y1", ",", "dim", "=", "2", ")", ".", "mean", "(", "0", ")", "\n", "\n", "\n", "y", "=", "y", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "y1", "=", "y1", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "score_map", "[", ":", ",", ":", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", ",", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", "]", "=", "score_map", "[", ":", ",", ":", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", ",", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", "]", "+", "y", "\n", "\n", "cnt", "[", ":", ",", ":", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", ",", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", "]", "=", "cnt", "[", ":", ",", ":", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", ",", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", "]", "+", "1", "\n", "\n", "out_map", "[", ":", ",", ":", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", ",", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", "]", "=", "out_map", "[", ":", ",", ":", ",", "zs", ":", "zs", "+", "patch_size", "[", "2", "]", ",", "xs", ":", "xs", "+", "patch_size", "[", "0", "]", ",", "ys", ":", "ys", "+", "patch_size", "[", "1", "]", "]", "+", "y1", ".", "mean", "(", "0", ")", "\n", "\n", "", "", "", "score_map", "=", "score_map", "/", "cnt", "\n", "out_map", "=", "out_map", "/", "cnt", "\n", "if", "add_pad", ":", "\n", "        ", "out_map", "=", "out_map", "[", ":", ",", ":", ",", "dl_pad", ":", "dl_pad", "+", "d", ",", "wl_pad", ":", "wl_pad", "+", "w", ",", "hl_pad", ":", "hl_pad", "+", "h", "]", "\n", "score_map", "=", "score_map", "[", ":", ",", ":", ",", "dl_pad", ":", "dl_pad", "+", "d", ",", "wl_pad", ":", "wl_pad", "+", "w", ",", "hl_pad", ":", "hl_pad", "+", "h", "]", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "out_map", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "score_map", ")", ".", "cuda", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BCEDiceLoss.__init__": [[10, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BCEDiceLoss.forward": [[13, 28], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "target.view.view.size", "input.view.view.view", "target.view.view.view", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "input.view.view.size", "input.view.view.size", "input.view.view.size", "intersection.sum", "input.view.view.sum", "target.view.view.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "bce", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target", ",", "reduction", "=", "'sum'", ")", "/", "(", "input", ".", "size", "(", "-", "1", ")", "*", "input", ".", "size", "(", "-", "2", ")", "*", "input", ".", "size", "(", "-", "3", ")", ")", "\n", "smooth", "=", "1e-5", "\n", "input", "=", "torch", ".", "sigmoid", "(", "input", ")", "\n", "num", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", ".", "view", "(", "num", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "num", ",", "-", "1", ")", "\n", "\n", "intersection", "=", "(", "input", "*", "target", ")", "\n", "\n", "dice", "=", "(", "2", "*", "intersection", ".", "sum", "(", ")", "+", "smooth", ")", "/", "(", "input", ".", "sum", "(", ")", "+", "target", ".", "sum", "(", ")", "+", "smooth", ")", "\n", "dice", "=", "1.0", "-", "dice", "\n", "\n", "return", "bce", "+", "2", "*", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.DiceLoss.__init__": [[31, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BceLoss.__init__"], ["      ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.DiceLoss.forward": [[34, 54], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "target.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.contiguous().view", "target.contiguous().view.contiguous().view.contiguous().view", "all_dice.sum", "input.contiguous().view.contiguous().view.contiguous", "target.contiguous().view.contiguous().view.contiguous", "intersection.sum", "input.contiguous().view.contiguous().view.sum", "target.contiguous().view.contiguous().view.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "\n", "        ", "smooth", "=", "1e-5", "\n", "input", "=", "torch", ".", "softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "num", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "input", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "target", "=", "target", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "num", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "num", ",", "-", "1", ")", "\n", "\n", "\n", "\n", "intersection", "=", "(", "input", "*", "target", ")", "\n", "\n", "dice", "=", "(", "2", "*", "intersection", ".", "sum", "(", "dim", "=", "1", ")", "+", "smooth", ")", "/", "(", "input", ".", "sum", "(", "dim", "=", "1", ")", "+", "target", ".", "sum", "(", "dim", "=", "1", ")", "+", "smooth", ")", "\n", "all_dice", "=", "1.0", "-", "dice", "\n", "\n", "return", "all_dice", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BceLoss.__init__": [[56, 58], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BceLoss.__init__"], ["      ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jianf-wang_gbdl.None.losses.BceLoss.forward": [[59, 81], ["input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "range", "input.contiguous().view.contiguous().view.contiguous().view", "target_n.contiguous().view().long", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "input.contiguous().view.contiguous().view.contiguous", "target_n.contiguous().view", "target[].unsqueeze", "target[].unsqueeze", "target_n.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "depth", "=", "input", ".", "size", "(", "2", ")", "\n", "num", "=", "input", ".", "size", "(", "0", ")", "\n", "w", "=", "input", ".", "size", "(", "-", "3", ")", "\n", "h", "=", "input", ".", "size", "(", "-", "2", ")", "\n", "target", "=", "(", "target", ">", "0.5", ")", ".", "int", "(", ")", "\n", "\n", "target_n", "=", "None", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "           ", "if", "target_n", "is", "None", ":", "\n", "              ", "target_n", "=", "i", "*", "target", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "              ", "target_n", "=", "target_n", "+", "i", "*", "target", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "num", "*", "depth", ",", "num_classes", ",", "-", "1", ")", "\n", "target", "=", "(", "target_n", ".", "contiguous", "(", ")", ".", "view", "(", "num", "*", "depth", ",", "-", "1", ")", ")", ".", "long", "(", ")", "\n", "\n", "\n", "bce", "=", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "all_bce", "=", "torch", ".", "sum", "(", "bce", ")", "/", "(", "w", "*", "h", "*", "depth", ")", "\n", "\n", "return", "all_bce", "\n", "", "", ""]]}