{"home.repos.pwc.inspect_result.UKPLab_irj-neural-april.None.stage2_reinf_learning.addResult": [[10, 16], ["all_dic[].append"], "function", ["None"], ["def", "addResult", "(", "all_dic", ",", "result", ")", ":", "\n", "    ", "for", "metric", "in", "result", ":", "\n", "        ", "if", "metric", "in", "all_dic", ":", "\n", "            ", "all_dic", "[", "metric", "]", ".", "append", "(", "result", "[", "metric", "]", ")", "\n", "", "else", ":", "\n", "            ", "all_dic", "[", "metric", "]", "=", "[", "result", "[", "metric", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.None.stage2_reinf_learning.readLearntRank": [[17, 29], ["os.path.join", "open", "open.readlines", "open.close", "weights.append", "rewards.append", "float", "np.dot"], "function", ["None"], ["", "", "", "def", "readLearntRank", "(", "dataset", ",", "topic", ",", "model_name", ",", "setting", ",", "vectors", ")", ":", "\n", "    ", "weights", "=", "[", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "LEARNT_RANKER_PATH", ",", "dataset", ",", "topic", ",", "'model{}-{}'", ".", "format", "(", "model_name", ",", "setting", ")", ")", "\n", "ff", "=", "open", "(", "path", ",", "'r'", ")", "\n", "for", "line", "in", "ff", ".", "readlines", "(", ")", ":", "\n", "        ", "weights", ".", "append", "(", "float", "(", "line", ")", ")", "\n", "", "ff", ".", "close", "(", ")", "\n", "\n", "rewards", "=", "[", "]", "\n", "for", "vec", "in", "vectors", ":", "\n", "        ", "rewards", ".", "append", "(", "np", ".", "dot", "(", "vec", ",", "weights", ")", ")", "\n", "", "return", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.None.stage0_sample_summaries.writeSample": [[9, 31], ["summariser.utils.writer.append_to_file", "enumerate", "summariser.utils.writer.append_to_file", "repr", "repr", "repr"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.append_to_file", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.append_to_file"], ["def", "writeSample", "(", "actions", ",", "reward", ",", "path", ")", ":", "\n", "    ", "if", "'heuristic'", "in", "path", ":", "\n", "        ", "str", "=", "'\\nactions:'", "\n", "for", "act", "in", "actions", ":", "\n", "            ", "str", "+=", "repr", "(", "act", ")", "+", "','", "\n", "", "str", "=", "str", "[", ":", "-", "1", "]", "\n", "str", "+=", "'\\nutility:'", "+", "repr", "(", "reward", ")", "\n", "append_to_file", "(", "str", ",", "path", ")", "\n", "", "else", ":", "\n", "        ", "assert", "'rouge'", "in", "path", "\n", "str", "=", "'\\n'", "\n", "for", "j", ",", "model_name", "in", "enumerate", "(", "reward", ")", ":", "\n", "            ", "str", "+=", "'\\nmodel {}:{}'", ".", "format", "(", "j", ",", "model_name", ")", "\n", "str", "+=", "'\\nactions:'", "\n", "for", "act", "in", "actions", ":", "\n", "                ", "str", "+=", "repr", "(", "act", ")", "+", "','", "\n", "", "str", "=", "str", "[", ":", "-", "1", "]", "\n", "str", "+=", "'\\nR1:{};R2:{};R3:{};R4:{};RL:{};RSU:{}'", ".", "format", "(", "\n", "reward", "[", "model_name", "]", "[", "0", "]", ",", "reward", "[", "model_name", "]", "[", "1", "]", ",", "reward", "[", "model_name", "]", "[", "2", "]", ",", "\n", "reward", "[", "model_name", "]", "[", "3", "]", ",", "reward", "[", "model_name", "]", "[", "4", "]", ",", "reward", "[", "model_name", "]", "[", "5", "]", "\n", ")", "\n", "", "append_to_file", "(", "str", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.None.stage1_active_pref_learning.writeRanker": [[15, 32], ["os.path.join", "open", "open.write", "open.close", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "q_type.upper"], "function", ["None"], ["def", "writeRanker", "(", "weights", ",", "dataset", ",", "topic", ",", "model", ",", "inter_round", ",", "q_type", ",", "post_w", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "LEARNT_RANKER_PATH", ",", "dataset", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "LEARNT_RANKER_PATH", ",", "dataset", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "LEARNT_RANKER_PATH", ",", "dataset", ",", "topic", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "LEARNT_RANKER_PATH", ",", "dataset", ",", "topic", ")", ")", "\n", "\n", "", "out_file", "=", "os", ".", "path", ".", "join", "(", "LEARNT_RANKER_PATH", ",", "dataset", ",", "topic", ",", "\n", "'model{}-round{}-query{}-postWeight{}'", ".", "format", "(", "model", ",", "inter_round", ",", "q_type", ".", "upper", "(", ")", ",", "post_w", ")", ")", "\n", "\n", "str", "=", "''", "\n", "for", "ww", "in", "weights", ":", "\n", "        ", "str", "+=", "'{}\\n'", ".", "format", "(", "ww", ")", "\n", "\n", "", "ff", "=", "open", "(", "out_file", ",", "'w'", ")", "\n", "ff", ".", "write", "(", "str", ")", "\n", "ff", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.create_dir": [[6, 11], ["os.path.normpath", "os.path.expanduser", "os.path.isdir", "os.makedirs"], "function", ["None"], ["def", "create_dir", "(", "dirpath", ")", ":", "\n", "    ", "p", "=", "os", ".", "path", ".", "normpath", "(", "os", ".", "path", ".", "expanduser", "(", "dirpath", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "p", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "p", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.clean_create_dir": [[12, 17], ["os.path.isdir", "shutil.rmtree", "os.path.isdir", "os.makedirs"], "function", ["None"], ["", "def", "clean_create_dir", "(", "dirpath", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "dirpath", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "dirpath", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirpath", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_rl_details": [[18, 46], ["os.path.dirname", "range", "writer.write_to_file", "os.path.isdir", "os.makedirs", "len", "len"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_to_file"], ["", "", "def", "write_rl_details", "(", "summary", ",", "model_name_list", ",", "R1_list", ",", "R2_list", ",", "R4_list", ",", "filename", ")", ":", "\n", "    ", "'''\n    YG: to write the results of the RL-based summarizer\n    :param summary: a list of sentences (strings)\n    :param R1:\n    :param R2:\n    :param R4:\n    :param filename:\n    :return: null\n    '''", "\n", "dirpath", "=", "os", ".", "path", ".", "dirname", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirpath", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "if", "len", "(", "summary", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "model_name_list", ")", ")", ":", "\n", "        ", "model_name", "=", "model_name_list", "[", "i", "]", "\n", "text", "=", "'\\nmodel name: {} \\n'", ".", "format", "(", "model_name", ")", "\n", "text", "+=", "'\\tR1 : {} ;'", ".", "format", "(", "R1_list", "[", "i", "]", ")", "\n", "text", "+=", "'R2 : {} ;'", ".", "format", "(", "R2_list", "[", "i", "]", ")", "\n", "text", "+=", "'R4 : {} ;'", ".", "format", "(", "R4_list", "[", "i", "]", ")", "\n", "\n", "", "text", "+=", "'\\n'", "\n", "for", "sent", "in", "summary", ":", "\n", "        ", "text", "+=", "sent", "+", "'\\n'", "\n", "\n", "", "write_to_file", "(", "text", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_details_file": [[48, 70], ["os.path.dirname", "max", "range", "writer.write_to_file", "os.path.isdir", "os.makedirs", "len", "len", "len", "str", "str", "str", "str", "str", "unicode"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_to_file"], ["", "def", "write_details_file", "(", "details_list", ",", "filename", ")", ":", "\n", "    ", "'''\n    [[0, R1, R2, text], [1, R1, R2, text]], [[0, R1, R2, text], [1, R1, R2, text]]\n    '''", "\n", "dirpath", "=", "os", ".", "path", ".", "dirname", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirpath", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "if", "len", "(", "details_list", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "max_len", "=", "max", "(", "[", "len", "(", "feedback", ")", "for", "feedback", "in", "details_list", "]", ")", "\n", "text", "=", "''", "\n", "for", "i", "in", "range", "(", "max_len", ")", ":", "\n", "        ", "text", "+=", "'%s,'", "%", "(", "i", ")", "\n", "for", "feedback", "in", "details_list", ":", "\n", "            ", "if", "i", ">=", "len", "(", "feedback", ")", ":", "\n", "                ", "text", "+=", "\",,,,,,\"", "\n", "", "else", ":", "\n", "                ", "_", ",", "R1", ",", "R2", ",", "SU4", ",", "accept", ",", "reject", ",", "summ_text", "=", "feedback", "[", "i", "]", "\n", "text", "+=", "u\"%s,%s,%s,%s,%s,\\\"%s\\\",\"", "%", "(", "str", "(", "R1", ")", ",", "str", "(", "R2", ")", ",", "str", "(", "SU4", ")", ",", "str", "(", "accept", ")", ",", "str", "(", "reject", ")", ",", "unicode", "(", "summ_text", ")", ")", "\n", "", "", "text", "=", "text", "[", ":", "-", "1", "]", "+", "'\\n'", "\n", "", "write_to_file", "(", "text", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_config": [[71, 74], ["writer.write_to_file"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_to_file"], ["", "def", "write_config", "(", "filename", ",", "config", ")", ":", "\n", "    ", "string", "=", "\"<ROUGE-EVAL version=\\\"1.55\\\">\\n\"", "+", "config", "+", "\"</ROUGE-EVAL>\\n\"", "\n", "write_to_file", "(", "string", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_to_csv": [[75, 85], ["collections.OrderedDict", "sorted", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "result_dict.items", "csv.DictWriter.writerow"], "function", ["None"], ["", "def", "write_to_csv", "(", "result_dict", ",", "filename", ")", ":", "\n", "    ", "ordered_dict", "=", "OrderedDict", "(", "sorted", "(", "result_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "t", ":", "t", "[", "0", "]", ")", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "csvfile", ":", "\n", "        ", "fieldnames", "=", "[", "\"Experiment\"", ",", "\"ROUGE-1 R\"", ",", "\"ROUGE-1 P\"", ",", "\"ROUGE-1 F\"", ",", "\"ROUGE-2 R\"", ",", "\"ROUGE-2 P\"", ",", "\"ROUGE-2 F\"", ",", "\"ROUGE-3 R\"", ",", "\"ROUGE-3 P\"", ",", "\"ROUGE-3 F\"", ",", "\"ROUGE-4 R\"", ",", "\"ROUGE-4 P\"", ",", "\"ROUGE-4 F\"", ",", "\"ROUGE-SU4 F\"", ",", "\"ROUGE-SU4 P\"", ",", "\"ROUGE-4 F\"", "]", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "key", "in", "ordered_dict", ":", "\n", "            ", "writer", ".", "writerow", "(", "ordered_dict", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_to_file": [[86, 93], ["open.write", "open.close", "open", "open"], "function", ["None"], ["", "", "", "def", "write_to_file", "(", "text", ",", "filename", ",", "add", "=", "False", ")", ":", "\n", "    ", "if", "not", "add", ":", "\n", "        ", "fp", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "", "else", ":", "\n", "        ", "fp", "=", "open", "(", "filename", ",", "'a'", ")", "\n", "", "fp", ".", "write", "(", "text", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.append_to_file": [[95, 102], ["os.path.isfile", "open.write", "open.close", "open", "open"], "function", ["None"], ["", "def", "append_to_file", "(", "text", ",", "filename", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "fp", "=", "open", "(", "filename", ",", "'a'", ")", "\n", "", "else", ":", "\n", "        ", "fp", "=", "open", "(", "filename", ",", "'w+'", ")", "\n", "", "fp", ".", "write", "(", "text", ")", "\n", "fp", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getExistingNum": [[6, 14], ["open", "open.readlines", "open.close"], "function", ["None"], ["def", "getExistingNum", "(", "path", ")", ":", "\n", "    ", "cnt", "=", "0", "\n", "ff", "=", "open", "(", "path", ",", "'r'", ")", "\n", "for", "line", "in", "ff", ".", "readlines", "(", ")", ":", "\n", "        ", "if", "'rewards:'", "in", "line", ":", "\n", "            ", "cnt", "+=", "1", "\n", "", "", "ff", ".", "close", "(", ")", "\n", "return", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.normaliseList": [[15, 26], ["min", "max", "norm_list.append", "len"], "function", ["None"], ["", "def", "normaliseList", "(", "ll", ",", "maxv", "=", "10.0", ")", ":", "\n", "    ", "minv", "=", "min", "(", "ll", ")", "\n", "rangev", "=", "max", "(", "ll", ")", "-", "minv", "\n", "if", "rangev", "==", "0", ":", "\n", "        ", "return", "[", "0.", "]", "*", "len", "(", "ll", ")", "\n", "\n", "", "norm_list", "=", "[", "]", "\n", "for", "vv", "in", "ll", ":", "\n", "        ", "norm_list", ".", "append", "(", "maxv", "*", "(", "vv", "-", "minv", ")", "/", "rangev", ")", "\n", "\n", "", "return", "norm_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.normaliseMatrix": [[27, 38], ["mm.min", "numpy.array", "mm.max", "rtn_matrix.append", "new_row.append"], "function", ["None"], ["", "def", "normaliseMatrix", "(", "mm", ",", "maxv", "=", "10.0", ")", ":", "\n", "    ", "minv", "=", "mm", ".", "min", "(", ")", "\n", "rangev", "=", "mm", ".", "max", "(", ")", "-", "minv", "\n", "rtn_matrix", "=", "[", "]", "\n", "for", "row", "in", "mm", ":", "\n", "        ", "new_row", "=", "[", "]", "\n", "for", "ele", "in", "row", ":", "\n", "            ", "new_row", ".", "append", "(", "maxv", "*", "(", "ele", "-", "minv", ")", "/", "rangev", ")", "\n", "", "rtn_matrix", ".", "append", "(", "new_row", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "rtn_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.sigmoid": [[40, 42], ["numpy.exp"], "function", ["None"], ["", "def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "return", "1.0", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.ncr": [[43, 49], ["min", "reduce", "reduce", "xrange", "xrange"], "function", ["None"], ["", "def", "ncr", "(", "n", ",", "r", ")", ":", "\n", "    ", "r", "=", "min", "(", "r", ",", "n", "-", "r", ")", "\n", "if", "r", "==", "0", ":", "return", "1", "\n", "numer", "=", "reduce", "(", "op", ".", "mul", ",", "xrange", "(", "n", ",", "n", "-", "r", ",", "-", "1", ")", ")", "\n", "denom", "=", "reduce", "(", "op", ".", "mul", ",", "xrange", "(", "1", ",", "r", "+", "1", ")", ")", "\n", "return", "numer", "//", "denom", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getDBSRewardsFromWeights": [[51, 70], ["summary_samples_reader.readSyntheticSampleVectors", "open", "open.readlines", "numpy.array", "open.close", "summary_samples_reader.normaliseList", "np.array.append", "uti_list.append", "float", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readSyntheticSampleVectors", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "getDBSRewardsFromWeights", "(", "summary_list", ",", "weights_dir", ",", "vector_path", ")", ":", "\n", "# get vectors", "\n", "    ", "_", ",", "vector_list", ",", "_", "=", "readSyntheticSampleVectors", "(", "summary_list", ",", "vector_path", ",", "False", ",", "True", ",", "False", ")", "\n", "\n", "# get weights", "\n", "weights", "=", "[", "]", "\n", "f", "=", "open", "(", "weights_dir", ",", "'r'", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "        ", "weights", ".", "append", "(", "float", "(", "line", ")", ")", "\n", "", "weights", "=", "np", ".", "array", "(", "weights", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# compoute dot product", "\n", "uti_list", "=", "[", "]", "\n", "for", "vector", "in", "vector_list", ":", "\n", "        ", "uti_list", ".", "append", "(", "np", ".", "dot", "(", "vector", ",", "weights", ")", ")", "\n", "", "norm_uti_list", "=", "normaliseList", "(", "uti_list", ")", "\n", "\n", "return", "norm_uti_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getRewardsFromWeights": [[73, 112], ["summary_samples_reader.readSyntheticSampleVectors", "range", "range", "range", "os.path.join", "open", "open.readlines", "numpy.array", "open.close", "enumerate", "max", "min", "ranges.append", "minvs.append", "len", "range", "norm_value_list.append", "np.array.append", "temp_row.append", "float", "value_list.append", "numpy.dot", "value_list[].append", "numpy.dot", "numpy.array"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readSyntheticSampleVectors"], ["", "def", "getRewardsFromWeights", "(", "summary_list", ",", "weights_dir", ",", "vector_path", ",", "sample_num", ",", "model_num", ")", ":", "\n", "# get vectors", "\n", "    ", "_", ",", "vector_list", ",", "_", "=", "readSyntheticSampleVectors", "(", "summary_list", ",", "vector_path", ",", "False", ",", "True", ",", "False", ")", "\n", "\n", "# get weights", "\n", "value_list", "=", "[", "]", "\n", "for", "model_idx", "in", "range", "(", "model_num", ")", ":", "\n", "        ", "weights_path", "=", "os", ".", "path", ".", "join", "(", "weights_dir", ",", "'model{}'", ".", "format", "(", "model_idx", ")", ")", "\n", "weights", "=", "[", "]", "\n", "f", "=", "open", "(", "weights_path", ",", "'r'", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "weights", ".", "append", "(", "float", "(", "line", ")", ")", "\n", "", "weights", "=", "np", ".", "array", "(", "weights", ")", "\n", "f", ".", "close", "(", ")", "\n", "for", "i", ",", "vec", "in", "enumerate", "(", "vector_list", ")", ":", "\n", "            ", "if", "model_idx", "==", "0", ":", "\n", "                ", "value", "=", "[", "np", ".", "dot", "(", "weights", ",", "np", ".", "array", "(", "vec", ")", ")", "]", "\n", "value_list", ".", "append", "(", "value", ")", "\n", "", "else", ":", "\n", "                ", "value", "=", "np", ".", "dot", "(", "weights", ",", "vec", ")", "\n", "value_list", "[", "i", "]", ".", "append", "(", "value", ")", "\n", "\n", "# normalise the values", "\n", "", "", "", "minvs", "=", "[", "]", "\n", "ranges", "=", "[", "]", "\n", "norm_value_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "model_num", ")", ":", "\n", "        ", "maxv", "=", "max", "(", "[", "i", "[", "idx", "]", "for", "i", "in", "value_list", "]", ")", "\n", "minv", "=", "min", "(", "[", "i", "[", "idx", "]", "for", "i", "in", "value_list", "]", ")", "\n", "ranges", ".", "append", "(", "maxv", "-", "minv", ")", "\n", "minvs", ".", "append", "(", "minv", ")", "\n", "", "for", "cnt", "in", "range", "(", "len", "(", "value_list", ")", ")", ":", "\n", "        ", "temp_row", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "model_num", ")", ":", "\n", "            ", "temp_row", ".", "append", "(", "10.0", "*", "(", "value_list", "[", "cnt", "]", "[", "idx", "]", "-", "minvs", "[", "idx", "]", ")", "/", "ranges", "[", "idx", "]", ")", "\n", "", "norm_value_list", ".", "append", "(", "temp_row", ")", "\n", "\n", "\n", "", "return", "norm_value_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readAccPretrainedRewards": [[114, 139], ["print", "os.path.join", "open", "open.readlines", "open.close", "summary_samples_reader.normaliseList", "print", "len", "len", "int", "raw_reward_list.append", "print", "[].split", "float", "len", "line.split", "line.split"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "readAccPretrainedRewards", "(", "acts_list", ",", "topic", ",", "data_set", ")", ":", "\n", "    ", "print", "(", "'\\n-----Start reading pre-trained acc-rewards. Target num: {}-----'", ".", "format", "(", "len", "(", "acts_list", ")", ")", ")", "\n", "# read in accumulated rewards", "\n", "reward_path", "=", "os", ".", "path", ".", "join", "(", "'/home/gao/PycharmProjects/sampling_summaries/pretrained_rewards'", ",", "data_set", ",", "topic", ")", "\n", "cnt", "=", "0", "\n", "raw_reward_list", "=", "[", "]", "\n", "ff", "=", "open", "(", "reward_path", ",", "'r'", ")", "\n", "for", "line", "in", "ff", ".", "readlines", "(", ")", ":", "\n", "        ", "if", "'actions:'", "in", "line", ":", "\n", "            ", "acts", "=", "[", "int", "(", "i", ")", "for", "i", "in", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "]", "\n", "assert", "acts", "==", "acts_list", "[", "cnt", "]", "\n", "cnt", "+=", "1", "\n", "", "elif", "'acc-rewards:'", "in", "line", ":", "\n", "            ", "raw_reward_list", ".", "append", "(", "float", "(", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ")", ")", "\n", "if", "cnt", ">=", "len", "(", "acts_list", ")", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'!!!!!ERROR in reading pretrained rewards! Count:{}\\n Path: {}'", ".", "format", "(", "cnt", ",", "reward_path", ")", ")", "\n", "", "", "ff", ".", "close", "(", ")", "\n", "\n", "# normalise", "\n", "norm_list", "=", "normaliseList", "(", "raw_reward_list", ")", "\n", "\n", "print", "(", "'{} pretrained acc-rewards have been read and normalised'", ".", "format", "(", "len", "(", "norm_list", ")", ")", ")", "\n", "return", "norm_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readSumVecPretrainedRewards": [[141, 170], ["len", "print", "os.path.join", "os.path.join", "summary_samples_reader.readSyntheticSampleVectors", "os.path.join", "open", "open.readlines", "numpy.array", "open.close", "range", "summary_samples_reader.normaliseList", "print", "np.array.append", "numpy.dot", "reward_list.append", "float", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readSyntheticSampleVectors", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "readSumVecPretrainedRewards", "(", "summary_list", ",", "topic", ",", "data_set", ")", ":", "\n", "# read vectors, vector form: NGRAM-base100-block6", "\n", "    ", "sample_num", "=", "len", "(", "summary_list", ")", "\n", "print", "(", "'\\n-----Start reading pre-trained rewards. Target num: {}-----'", ".", "format", "(", "sample_num", ")", ")", "\n", "vector_strs_dir", "=", "os", ".", "path", ".", "join", "(", "'/home/gao/workspace/v43-12Sep/summarizer/sampled-summaries-vectors-strs'", ",", "data_set", ",", "topic", ")", "\n", "vector_file_path", "=", "os", ".", "path", ".", "join", "(", "vector_strs_dir", ",", "'optimal'", ",", "'state{}-base{}-block{}'", ".", "format", "(", "'NGRAM'", ",", "100", ",", "6", ")", ")", "\n", "_", ",", "vector_list", ",", "_", "=", "readSyntheticSampleVectors", "(", "summary_list", ",", "vector_file_path", ",", "False", ",", "True", ",", "False", ")", "\n", "\n", "# read weights", "\n", "weights", "=", "[", "]", "\n", "weights_path", "=", "os", ".", "path", ".", "join", "(", "'/home/gao/workspace/v43-12Sep/summarizer/pretrained_rewards/readin_weights'", ",", "topic", ")", "\n", "file", "=", "open", "(", "weights_path", ",", "'r'", ")", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "weights", ".", "append", "(", "float", "(", "line", ")", ")", "\n", "", "weights", "=", "np", ".", "array", "(", "weights", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n", "# compute the rewards for each summary", "\n", "reward_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "sample_num", ")", ":", "\n", "        ", "temp_value", "=", "np", ".", "dot", "(", "np", ".", "array", "(", "vector_list", "[", "idx", "]", ")", ",", "weights", ")", "\n", "reward_list", ".", "append", "(", "temp_value", ")", "\n", "\n", "# normalise the rewards", "\n", "", "norm_reward_list", "=", "normaliseList", "(", "reward_list", ")", "\n", "\n", "print", "(", "'{} pre-trained rewards are read and normalised.'", ".", "format", "(", "len", "(", "norm_reward_list", ")", ")", ")", "\n", "return", "norm_reward_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.reconstructFullVectorFromShort": [[171, 183], ["str.split", "range", "numpy.array", "int", "vector.append", "vector.append", "float", "ele_list[].split", "ele_list[].split"], "function", ["None"], ["", "def", "reconstructFullVectorFromShort", "(", "length", ",", "str", ")", ":", "\n", "    ", "ele_list", "=", "str", ".", "split", "(", "';'", ")", "\n", "ele_idx", "=", "0", "\n", "vector", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "length", ")", ":", "\n", "        ", "if", "ii", "==", "int", "(", "ele_list", "[", "ele_idx", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", ")", ":", "\n", "            ", "vector", ".", "append", "(", "float", "(", "ele_list", "[", "ele_idx", "]", ".", "split", "(", "\":\"", ")", "[", "1", "]", ")", ")", "\n", "ele_idx", "+=", "1", "\n", "", "else", ":", "\n", "            ", "vector", ".", "append", "(", "0.0", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readIntermediateSampleVectors": [[184, 224], ["print", "open", "len", "open.readlines", "open.close", "print", "int", "len", "print", "print", "print", "exit", "[].split", "temp_vectors_list.append", "final_vector_list.append", "inter_vector_list.append", "line.split", "line.split", "line.split"], "function", ["None"], ["", "def", "readIntermediateSampleVectors", "(", "summary_act_list", ",", "path", ",", "vec_length", ",", "inter_vectors_wanted", "=", "True", ",", "final_vector_wanted", "=", "True", ")", ":", "\n", "    ", "print", "(", "'\\n-----Start reading vectors from: {}-----'", ".", "format", "(", "path", ")", ")", "\n", "summary_list", "=", "[", "]", "\n", "inter_vector_list", "=", "[", "]", "\n", "final_vector_list", "=", "[", "]", "\n", "file", "=", "open", "(", "path", ",", "'r'", ")", "\n", "num", "=", "len", "(", "summary_act_list", ")", "\n", "temp_vectors_list", "=", "[", "]", "\n", "act_num", "=", "-", "1", "\n", "\n", "cnt", "=", "0", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "if", "cnt", ">=", "num", ":", "\n", "            ", "break", "\n", "", "if", "'AYGactionsAYG:'", "in", "line", ":", "\n", "            ", "acts", "=", "[", "int", "(", "i", ")", "for", "i", "in", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "]", "\n", "if", "acts", "==", "summary_act_list", "[", "cnt", "]", ":", "\n", "                ", "act_num", "=", "len", "(", "acts", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "'ERROR! Inconsistent actions!'", ")", "\n", "print", "(", "'From sampled summary {}: {}'", ".", "format", "(", "cnt", ",", "summary_act_list", "[", "cnt", "]", ")", ")", "\n", "print", "(", "'From vector strs: {}'", ".", "format", "(", "line", ")", ")", "\n", "exit", "(", "1", ")", "\n", "", "", "elif", "'AYGacc_vector:'", "in", "line", ":", "\n", "            ", "if", "inter_vectors_wanted", ":", "\n", "                ", "vec", "=", "line", ".", "split", "(", "':'", ")", "[", "1", "]", "\n", "temp_vectors_list", ".", "append", "(", "vec", ")", "\n", "", "if", "final_vector_wanted", "and", "'{}'", ".", "format", "(", "act_num", ")", "in", "line", ":", "\n", "                ", "vec", "=", "line", ".", "split", "(", "':'", ")", "[", "1", "]", "\n", "final_vector_list", ".", "append", "(", "vec", ")", "\n", "", "if", "'{}'", ".", "format", "(", "act_num", "-", "1", ")", "in", "line", ":", "\n", "                ", "inter_vector_list", ".", "append", "(", "temp_vectors_list", "[", ":", "]", ")", "\n", "cnt", "+=", "1", "\n", "act_num", "=", "-", "1", "\n", "temp_vectors_list", "=", "[", "]", "\n", "\n", "", "", "", "file", ".", "close", "(", ")", "\n", "print", "(", "'{} samples are read from file'", ".", "format", "(", "cnt", ")", ")", "\n", "return", "summary_list", ",", "inter_vector_list", ",", "final_vector_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readShortAccSampleVectors": [[227, 267], ["print", "open", "len", "open.readlines", "open.close", "print", "int", "print", "print", "print", "exit", "[].split", "summary_samples_reader.reconstructFullVectorFromShort", "acc_vector_list.append", "summary_samples_reader.reconstructFullVectorFromShort", "final_vector_list.append", "summary_list.append", "line.split", "len", "len"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.reconstructFullVectorFromShort", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.reconstructFullVectorFromShort"], ["", "def", "readShortAccSampleVectors", "(", "summary_act_list", ",", "path", ",", "vec_length", ",", "\n", "str_wanted", "=", "True", ",", "acc_vector_wanted", "=", "True", ",", "final_vector_wanted", "=", "True", ",", "reward_wanted", "=", "True", ")", ":", "\n", "    ", "print", "(", "'\\n-----Start reading vectors from: {}-----'", ".", "format", "(", "path", ")", ")", "\n", "summary_list", "=", "[", "]", "\n", "acc_vector_list", "=", "[", "]", "\n", "final_vector_list", "=", "[", "]", "\n", "reward_list", "=", "[", "]", "\n", "file", "=", "open", "(", "path", ",", "'r'", ")", "\n", "num", "=", "len", "(", "summary_act_list", ")", "\n", "\n", "cnt", "=", "0", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "if", "cnt", ">=", "num", ":", "\n", "            ", "break", "\n", "", "if", "'AYGactionsAYG:'", "in", "line", ":", "\n", "            ", "acts", "=", "[", "int", "(", "i", ")", "for", "i", "in", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "]", "\n", "if", "acts", "==", "summary_act_list", "[", "cnt", "]", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "'ERROR! Inconsistent actions!'", ")", "\n", "print", "(", "'From sampled summary {}: {}'", ".", "format", "(", "cnt", ",", "summary_act_list", "[", "cnt", "]", ")", ")", "\n", "print", "(", "'From vector strs: {}'", ".", "format", "(", "line", ")", ")", "\n", "exit", "(", "1", ")", "\n", "", "", "elif", "'AYGacc_vectorAYG:'", "in", "line", ":", "\n", "            ", "if", "acc_vector_wanted", ":", "\n", "                ", "vec", "=", "reconstructFullVectorFromShort", "(", "vec_length", ",", "line", "[", "len", "(", "\"AYGacc_vectorAYG:\"", ")", ":", "]", ")", "\n", "acc_vector_list", ".", "append", "(", "vec", ")", "\n", "", "", "elif", "'AYGfinal_vectorAYG:'", "in", "line", ":", "\n", "            ", "if", "final_vector_wanted", ":", "\n", "                ", "vec", "=", "reconstructFullVectorFromShort", "(", "vec_length", ",", "line", "[", "len", "(", "\"AYGfinal_vectorAYG:\"", ")", ":", "]", ")", "\n", "final_vector_list", ".", "append", "(", "vec", ")", "\n", "", "", "elif", "'AYGsummary stringAYG:'", "in", "line", ":", "\n", "            ", "if", "str_wanted", ":", "\n", "                ", "str", "=", "line", "[", "15", ":", "-", "1", "]", "\n", "summary_list", ".", "append", "(", "str", ")", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "", "file", ".", "close", "(", ")", "\n", "print", "(", "'{} samples are read from file'", ".", "format", "(", "cnt", ")", ")", "\n", "return", "summary_list", ",", "acc_vector_list", ",", "final_vector_list", ",", "reward_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readSyntheticSampleVectors": [[271, 305], ["print", "open", "len", "open.readlines", "open.close", "print", "int", "print", "print", "print", "exit", "[].split", "vector_list.append", "float", "summary_list.append", "[].split", "line.split", "line.split"], "function", ["None"], ["", "def", "readSyntheticSampleVectors", "(", "summary_act_list", ",", "path", ",", "str_wanted", "=", "True", ",", "vector_wanted", "=", "True", ",", "reward_wanted", "=", "True", ")", ":", "\n", "    ", "print", "(", "'\\n-----Start reading vectors from: {}-----'", ".", "format", "(", "path", ")", ")", "\n", "summary_list", "=", "[", "]", "\n", "vector_list", "=", "[", "]", "\n", "reward_list", "=", "[", "]", "\n", "file", "=", "open", "(", "path", ",", "'r'", ")", "\n", "num", "=", "len", "(", "summary_act_list", ")", "\n", "\n", "cnt", "=", "0", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "if", "cnt", ">=", "num", ":", "\n", "            ", "break", "\n", "", "if", "'AYGactionsAYG:'", "in", "line", ":", "\n", "            ", "acts", "=", "[", "int", "(", "i", ")", "for", "i", "in", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "]", "\n", "if", "acts", "==", "summary_act_list", "[", "cnt", "]", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "'ERROR! Inconsistent actions!'", ")", "\n", "print", "(", "'From sampled summary {}: {}'", ".", "format", "(", "cnt", ",", "summary_act_list", "[", "cnt", "]", ")", ")", "\n", "print", "(", "'From vector strs: {}'", ".", "format", "(", "line", ")", ")", "\n", "exit", "(", "1", ")", "\n", "", "", "elif", "'AYGvectorAYG:'", "in", "line", ":", "\n", "            ", "if", "vector_wanted", ":", "\n", "                ", "vec", "=", "[", "float", "(", "i", ")", "for", "i", "in", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "]", "\n", "vector_list", ".", "append", "(", "vec", ")", "\n", "", "", "elif", "'AYGsummary stringAYG:'", "in", "line", ":", "\n", "            ", "if", "str_wanted", ":", "\n", "                ", "str", "=", "line", "[", "15", ":", "-", "1", "]", "\n", "summary_list", ".", "append", "(", "str", ")", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "", "file", ".", "close", "(", ")", "\n", "print", "(", "'{} samples are read from file'", ".", "format", "(", "cnt", ")", ")", "\n", "return", "summary_list", ",", "vector_list", ",", "reward_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.mixingPretrainedLearntRewards": [[307, 314], ["range", "len", "len", "len", "new_list.append", "temp_row.tolist", "numpy.array"], "function", ["None"], ["", "def", "mixingPretrainedLearntRewards", "(", "prewards", ",", "lrewards", ",", "tdf", ")", ":", "\n", "    ", "new_list", "=", "[", "]", "\n", "assert", "len", "(", "prewards", ")", "==", "len", "(", "lrewards", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "lrewards", ")", ")", ":", "\n", "        ", "temp_row", "=", "tdf", "*", "prewards", "[", "idx", "]", "+", "(", "1", "-", "tdf", ")", "*", "np", ".", "array", "(", "lrewards", "[", "idx", "]", ")", "\n", "new_list", ".", "append", "(", "temp_row", ".", "tolist", "(", ")", ")", "\n", "", "return", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.mixingPretrainedLearntModelRewards": [[315, 322], ["summary_samples_reader.mixingPretrainedLearntRewards", "new_list.append"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.mixingPretrainedLearntRewards"], ["", "def", "mixingPretrainedLearntModelRewards", "(", "prewards", ",", "lrewards_list", ",", "tdf", ")", ":", "\n", "    ", "new_list", "=", "[", "]", "\n", "for", "lrewards", "in", "lrewards_list", ":", "\n", "        ", "model_value", "=", "mixingPretrainedLearntRewards", "(", "prewards", ",", "lrewards", ",", "tdf", ")", "\n", "new_list", ".", "append", "(", "model_value", ")", "\n", "\n", "", "return", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readDbsOptimalSummariesAndValues": [[324, 379], ["print", "summary_samples_reader.normaliseList", "print", "open", "os.path.join", "file.readline", "len", "topic.index", "[].split", "summary_list.append", "acts.append", "file.readline.split", "float", "float", "float", "int", "file.readline.split", "scores[].split", "scores[].split", "scores[].split", "summary_value_list.append"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "readDbsOptimalSummariesAndValues", "(", "sample_num", ",", "dir", ",", "topic", ",", "only_act", "=", "False", ")", ":", "\n", "    ", "print", "(", "'\\n-----Start reading samples in topic {}. Target sample num: {}-----'", ".", "format", "(", "topic", ",", "sample_num", ")", ")", "\n", "\n", "summary_list", "=", "[", "]", "\n", "summary_value_list", "=", "[", "]", "\n", "type", "=", "'optimal'", "\n", "model_idx_str", "=", "topic", "[", "topic", ".", "index", "(", "'_'", ")", "+", "1", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "topic", ",", "type", ")", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "flag", "=", "False", "\n", "cnt", "=", "0", "\n", "value", "=", "-", "1", "\n", "while", "cnt", "<", "sample_num", ":", "\n", "            ", "line", "=", "file", ".", "readline", "(", ")", "\n", "if", "line", "==", "''", ":", "\n", "                ", "break", "\n", "", "if", "'model '", "+", "model_idx_str", "not", "in", "line", "and", "not", "flag", ":", "\n", "                ", "continue", "\n", "", "elif", "'model '", "+", "model_idx_str", "in", "line", ":", "\n", "                ", "flag", "=", "True", "\n", "", "elif", "'model '", "+", "model_idx_str", "not", "in", "line", "and", "flag", ":", "\n", "                ", "if", "'action'", "in", "line", ":", "\n", "                    ", "nums_str", "=", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "\n", "acts", "=", "[", "]", "\n", "for", "nn", "in", "nums_str", ":", "\n", "                        ", "acts", ".", "append", "(", "int", "(", "nn", ")", ")", "\n", "", "summary_list", ".", "append", "(", "acts", ")", "\n", "if", "only_act", ":", "\n", "                        ", "cnt", "+=", "1", "\n", "", "", "elif", "'R1'", "in", "line", ":", "\n", "                    ", "if", "only_act", ":", "\n", "                        ", "continue", "\n", "", "scores", "=", "line", ".", "split", "(", "';'", ")", "\n", "R1", "=", "float", "(", "scores", "[", "0", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "R2", "=", "float", "(", "scores", "[", "1", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "#R3 = float(scores[2].split(':')[1])", "\n", "#R4 = float(scores[3].split(':')[1])", "\n", "#RL = float(scores[4].split(':')[1])", "\n", "RSU", "=", "float", "(", "scores", "[", "5", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "value", "=", "R1", "/", "0.848", "+", "R2", "/", "0.75", "+", "RSU", "/", "0.532", "\n", "", "elif", "'action'", "not", "in", "line", "and", "'R1'", "not", "in", "line", ":", "\n", "                    ", "flag", "=", "False", "\n", "if", "not", "only_act", ":", "\n", "                        ", "assert", "value", "!=", "-", "1", "\n", "summary_value_list", ".", "append", "(", "value", ")", "\n", "cnt", "+=", "1", "\n", "", "value", "=", "-", "1", "\n", "\n", "", "", "", "", "if", "only_act", ":", "\n", "        ", "return", "summary_list", "\n", "\n", "#normalise", "\n", "", "norm_value_list", "=", "normaliseList", "(", "summary_value_list", ")", "\n", "\n", "print", "(", "'{} samples are read from file'", ".", "format", "(", "len", "(", "norm_value_list", ")", ")", ")", "\n", "return", "summary_list", ",", "norm_value_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getModelOrder": [[380, 393], ["open", "open.readlines", "open.close", "os.path.join", "line.split", "model_names.append"], "function", ["None"], ["", "def", "getModelOrder", "(", "dir", ",", "topic", ")", ":", "\n", "    ", "model_names", "=", "[", "]", "\n", "ff", "=", "open", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "topic", ",", "'optimal'", ")", ")", "\n", "for", "line", "in", "ff", ".", "readlines", "(", ")", ":", "\n", "        ", "if", "'model '", "in", "line", ":", "\n", "            ", "model", "=", "line", ".", "split", "(", "\":\"", ")", "[", "1", "]", "\n", "if", "model", "in", "model_names", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "model_names", ".", "append", "(", "model", ")", "\n", "\n", "", "", "", "ff", ".", "close", "(", ")", "\n", "return", "model_names", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readSummariesAndValues": [[394, 491], ["print", "print", "open", "summary_samples_reader.normaliseList", "os.path.join", "len", "range", "range", "len", "file.readline", "max", "min", "ranges.append", "minvs.append", "len", "range", "normaliseList.append", "[].split", "summary_list.append", "file.readline", "temp_row.append", "acts.append", "float", "summary_value_list.append", "int", "int", "file.readline.split", "file.readline().split", "[].split", "[].split", "summary_list.append", "file.readline", "acts.append", "file.readline.split", "float", "float", "float", "value_list.append", "int", "file.readline.split", "file.readline.split", "scores[].split", "scores[].split", "scores[].split", "print", "exit", "summary_value_list.append"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "readSummariesAndValues", "(", "sample_num", ",", "dir", ",", "topic", ",", "reward_type", ",", "only_act", "=", "False", ")", ":", "\n", "    ", "print", "(", "'\\n-----Start reading samples in topic {}. Target sample num: {}-----'", ".", "format", "(", "topic", ",", "sample_num", ")", ")", "\n", "summary_list", "=", "[", "]", "\n", "summary_value_list", "=", "[", "]", "\n", "type", "=", "reward_type", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "topic", ",", "type", ")", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "if", "reward_type", "==", "'synthetic'", ":", "\n", "            ", "cnt", "=", "0", "\n", "while", "cnt", "<", "sample_num", ":", "\n", "                ", "line", "=", "file", ".", "readline", "(", ")", "\n", "if", "line", "==", "''", ":", "\n", "                    ", "break", "\n", "", "if", "'actions'", "not", "in", "line", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "cnt", "+=", "1", "\n", "nums_str", "=", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "\n", "acts", "=", "[", "]", "\n", "for", "nn", "in", "nums_str", ":", "\n", "                        ", "acts", ".", "append", "(", "int", "(", "nn", ")", ")", "\n", "", "summary_list", ".", "append", "(", "acts", ")", "\n", "if", "not", "only_act", ":", "\n", "                        ", "value", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "summary_value_list", ".", "append", "(", "value", ")", "\n", "", "", "", "", "elif", "reward_type", "==", "'optimal'", ":", "\n", "            ", "flag", "=", "False", "\n", "value_list", "=", "[", "]", "\n", "idx", "=", "-", "1", "\n", "cnt", "=", "0", "\n", "while", "cnt", "<", "sample_num", ":", "\n", "                ", "line", "=", "file", ".", "readline", "(", ")", "\n", "if", "line", "==", "''", ":", "\n", "                    ", "break", "\n", "", "if", "'model'", "not", "in", "line", "and", "not", "flag", ":", "\n", "                    ", "continue", "\n", "", "elif", "'model'", "in", "line", ":", "\n", "                    ", "idx", "=", "int", "(", "line", ".", "split", "(", "':'", ")", "[", "0", "]", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "\n", "flag", "=", "True", "\n", "", "elif", "'model'", "not", "in", "line", "and", "flag", ":", "\n", "                    ", "if", "'action'", "in", "line", "and", "idx", "==", "0", ":", "\n", "                        ", "nums_str", "=", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "\n", "acts", "=", "[", "]", "\n", "for", "nn", "in", "nums_str", ":", "\n", "                            ", "acts", ".", "append", "(", "int", "(", "nn", ")", ")", "\n", "", "summary_list", ".", "append", "(", "acts", ")", "\n", "if", "only_act", ":", "\n", "                            ", "cnt", "+=", "1", "\n", "", "", "elif", "'R1'", "in", "line", ":", "\n", "                        ", "if", "only_act", ":", "\n", "                            ", "continue", "\n", "", "scores", "=", "line", ".", "split", "(", "';'", ")", "\n", "R1", "=", "float", "(", "scores", "[", "0", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "R2", "=", "float", "(", "scores", "[", "1", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "#R3 = float(scores[2].split(':')[1])", "\n", "#R4 = float(scores[3].split(':')[1])", "\n", "#RL = float(scores[4].split(':')[1])", "\n", "RSU", "=", "float", "(", "scores", "[", "5", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "if", "'DUC'", "in", "dir", ":", "\n", "                            ", "value", "=", "2", "*", "(", "R1", "/", "0.48", "+", "R2", "/", "0.212", "+", "RSU", "/", "0.195", ")", "\n", "", "elif", "'DBS'", "in", "dir", ":", "\n", "                            ", "value", "=", "R1", "/", "0.848", "+", "R2", "/", "0.75", "+", "RSU", "/", "0.532", "\n", "", "else", ":", "\n", "                            ", "print", "(", "'Error in readSummariesAndValues! DUC or DBS are not in the directory {}'", ".", "format", "(", "dir", ")", ")", "\n", "exit", "(", "1", ")", "\n", "", "value_list", ".", "append", "(", "value", ")", "\n", "", "elif", "'action'", "not", "in", "line", "and", "'R1'", "not", "in", "line", ":", "\n", "                        ", "flag", "=", "False", "\n", "if", "not", "only_act", ":", "\n", "                            ", "summary_value_list", ".", "append", "(", "value_list", "[", ":", "]", ")", "\n", "cnt", "+=", "1", "\n", "", "value_list", "=", "[", "]", "\n", "\n", "", "", "", "", "", "if", "only_act", ":", "\n", "        ", "return", "summary_list", "\n", "\n", "#normalise", "\n", "", "if", "reward_type", "==", "'synthetic'", ":", "\n", "        ", "norm_value_list", "=", "normaliseList", "(", "summary_value_list", ")", "\n", "", "elif", "reward_type", "==", "'optimal'", ":", "\n", "        ", "model_num", "=", "len", "(", "summary_value_list", "[", "0", "]", ")", "\n", "minvs", "=", "[", "]", "\n", "ranges", "=", "[", "]", "\n", "norm_value_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "model_num", ")", ":", "\n", "            ", "maxv", "=", "max", "(", "[", "i", "[", "idx", "]", "for", "i", "in", "summary_value_list", "]", ")", "\n", "minv", "=", "min", "(", "[", "i", "[", "idx", "]", "for", "i", "in", "summary_value_list", "]", ")", "\n", "ranges", ".", "append", "(", "maxv", "-", "minv", ")", "\n", "minvs", ".", "append", "(", "minv", ")", "\n", "", "for", "cnt", "in", "range", "(", "len", "(", "summary_value_list", ")", ")", ":", "\n", "            ", "temp_row", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "model_num", ")", ":", "\n", "                ", "temp_row", ".", "append", "(", "10.0", "*", "(", "summary_value_list", "[", "cnt", "]", "[", "idx", "]", "-", "minvs", "[", "idx", "]", ")", "/", "ranges", "[", "idx", "]", ")", "\n", "", "norm_value_list", ".", "append", "(", "temp_row", ")", "\n", "\n", "\n", "", "", "print", "(", "'{} samples are read from file'", ".", "format", "(", "len", "(", "norm_value_list", ")", ")", ")", "\n", "return", "summary_list", ",", "norm_value_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getValueListFromGpplModel": [[493, 513], ["setting.split", "setting.split.insert", "summary_samples_reader.readSyntheticSampleVectors", "numpy.array", "pickle.load.predict_f", "numpy.ndarray.tolist", "summary_samples_reader.normaliseList", "os.listdir", "print", "exit", "open", "pickle.load", "os.path.join", "np.ndarray.tolist.reshape", "len"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readSyntheticSampleVectors", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "getValueListFromGpplModel", "(", "summary_list", ",", "vector_path", ",", "model_dir", ",", "setting", ",", "model_name", ")", ":", "\n", "    ", "tt", "=", "setting", ".", "split", "(", "'_'", ")", "\n", "tt", ".", "insert", "(", "2", ",", "'model{}'", ".", "format", "(", "model_name", ")", ")", "\n", "file_name", "=", "'_'", ".", "join", "(", "tt", ")", "\n", "\n", "if", "file_name", "not", "in", "os", ".", "listdir", "(", "model_dir", ")", ":", "\n", "        ", "print", "(", "'ERROR! No file in dir {} corresponds to model {}'", ".", "format", "(", "model_dir", ",", "model_name", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "file_name", ")", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "gppl_model", "=", "pickle", ".", "load", "(", "fh", ")", "\n", "\n", "# get vectors", "\n", "", "_", ",", "vector_list", ",", "_", "=", "readSyntheticSampleVectors", "(", "summary_list", ",", "vector_path", ",", "False", ",", "True", ",", "False", ")", "\n", "\n", "vector_array", "=", "np", ".", "array", "(", "vector_list", ")", "\n", "rewards_list", ",", "var_list", "=", "gppl_model", ".", "predict_f", "(", "None", ",", "vector_array", ")", "\n", "rewards_list", "=", "np", ".", "ndarray", ".", "tolist", "(", "rewards_list", ".", "reshape", "(", "1", ",", "len", "(", "rewards_list", ")", ")", "[", "0", "]", ")", "\n", "\n", "return", "normaliseList", "(", "rewards_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getGpplLearntRewards": [[515, 554], ["os.path.join", "os.path.join", "os.path.join", "exit", "summary_samples_reader.getValueListFromGpplModel", "new_learnt_value_list.append"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getValueListFromGpplModel"], ["", "def", "getGpplLearntRewards", "(", "summary_list", ",", "data_set", ",", "topic", ",", "learnt_rewards_setting_name", ",", "noisy", ",", "model_names", ")", ":", "\n", "    ", "if", "'DUC'", "in", "data_set", ":", "\n", "        ", "base_length", "=", "200", "\n", "block_num", "=", "1", "\n", "", "else", ":", "\n", "        ", "base_length", "=", "1000", "\n", "block_num", "=", "1", "\n", "\n", "", "if", "noisy", "and", "'DUC'", "in", "data_set", ":", "\n", "        ", "gppl_model_dir", "=", "os", ".", "path", ".", "join", "(", "'/home/gao//PycharmProjects/gppl_rankers/v1_12Feb18_alQuery/learnt_model'", ",", "\n", "'10PercentNoisyFeedback'", ",", "data_set", ",", "topic", ",", "\n", "'stateNGRAM-base{}-block{}'", ".", "format", "(", "base_length", ",", "block_num", ")", ",", "\n", ")", "\n", "", "elif", "not", "noisy", "and", "'DUC'", "in", "data_set", ":", "\n", "        ", "gppl_model_dir", "=", "os", ".", "path", ".", "join", "(", "'/home/gao/PycharmProjects/gppl_rankers/v1_12Feb18_alQuery/learnt_model'", ",", "'mix2'", ",", "\n", "data_set", ",", "topic", ",", "'stateNGRAM-base{}-block{}'", ".", "format", "(", "base_length", ",", "block_num", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "exit", "(", "1", ")", "###TODO: add DBS", "\n", "\n", "", "if", "'DUC'", "in", "data_set", ":", "\n", "        ", "vector_path", "=", "os", ".", "path", ".", "join", "(", "'/home/gao/PycharmProjects/sampling_summaries/2_vectors'", ",", "\n", "data_set", ",", "topic", ",", "'synthetic'", ",", "'stateNGRAM-base{}-block{}'", ".", "format", "(", "base_length", ",", "block_num", ")", ")", "\n", "\n", "new_learnt_value_list", "=", "[", "]", "\n", "for", "model", "in", "model_names", ":", "\n", "            ", "value_list", "=", "getValueListFromGpplModel", "(", "summary_list", ",", "vector_path", ",", "gppl_model_dir", ",", "\n", "learnt_rewards_setting_name", ",", "model", "[", ":", "-", "1", "]", ")", "\n", "new_learnt_value_list", ".", "append", "(", "value_list", ")", "\n", "", "", "else", ":", "\n", "        ", "pass", "\n", "###TODO: for DBS", "\n", "#vector_path = os.path.join('/home/gao/PycharmProjects/sampling_summaries/2_vectors',", "\n", "#data_set,topic,'model_{}'.format(model_idx),'synthetic',", "\n", "#'stateNGRAM-base{}-block{}'.format(base_length,block_num))", "\n", "#new_learnt_value_list = getDBSRewardsFromWeights(summary_list,learnt_weights_path,vector_path)", "\n", "\n", "\n", "", "return", "new_learnt_value_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getLearntRewards": [[609, 651], ["os.path.join", "os.path.join", "os.listdir", "summary_samples_reader.getRewardsFromWeights", "os.path.join", "summary_samples_reader.getDBSRewardsFromWeights", "os.path.join", "len", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getRewardsFromWeights", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getDBSRewardsFromWeights"], ["def", "getLearntRewards", "(", "summary_list", ",", "data_set", ",", "topic", ",", "learnt_rewards_setting_name", ",", "noisy", ",", "model_idx", "=", "0", ")", ":", "\n", "    ", "if", "'DUC'", "in", "data_set", ":", "\n", "        ", "base_length", "=", "200", "\n", "block_num", "=", "1", "\n", "", "else", ":", "\n", "        ", "base_length", "=", "1000", "\n", "block_num", "=", "1", "\n", "\n", "", "if", "noisy", "and", "'DUC'", "in", "data_set", ":", "\n", "        ", "learnt_weights_dir", "=", "os", ".", "path", ".", "join", "(", "'/home/gao/PycharmProjects/sampling_summaries/al_learnt_rewards_weights'", ",", "\n", "'10PercentNoisyFeedback'", ",", "data_set", ",", "topic", ",", "'stateNGRAM-base{}-block{}'", ".", "format", "(", "base_length", ",", "block_num", ")", ",", "\n", "learnt_rewards_setting_name", ")", "\n", "", "elif", "not", "noisy", "and", "'DUC'", "in", "data_set", ":", "\n", "        ", "learnt_weights_dir", "=", "os", ".", "path", ".", "join", "(", "'/home/gao/PycharmProjects/sampling_summaries/al_learnt_rewards_weights'", ",", "\n", "data_set", ",", "topic", ",", "'stateNGRAM-base{}-block{}'", ".", "format", "(", "base_length", ",", "block_num", ")", ",", "\n", "learnt_rewards_setting_name", ")", "\n", "", "elif", "noisy", "and", "'DBS'", "in", "data_set", ":", "\n", "        ", "learnt_weights_path", "=", "os", ".", "path", ".", "join", "(", "'/home/gao/PycharmProjects/sampling_summaries/al_learnt_rewards_weights'", ",", "\n", "'10PercentNoisyFeedback'", ",", "data_set", ",", "topic", ",", "'stateNGRAM-base{}-block{}'", ".", "format", "(", "base_length", ",", "block_num", ")", ",", "\n", "learnt_rewards_setting_name", ",", "'model_{}'", ".", "format", "(", "model_idx", ")", ")", "\n", "", "else", ":", "#not noisy and 'DBS' in data_set:", "\n", "        ", "learnt_weights_path", "=", "os", ".", "path", ".", "join", "(", "'/home/gao/PycharmProjects/sampling_summaries/al_learnt_rewards_weights'", ",", "\n", "data_set", ",", "topic", ",", "'stateNGRAM-base{}-block{}'", ".", "format", "(", "base_length", ",", "block_num", ")", ",", "\n", "learnt_rewards_setting_name", ",", "'model_{}'", ".", "format", "(", "model_idx", ")", ")", "\n", "\n", "", "if", "'DUC'", "in", "data_set", ":", "\n", "        ", "vector_path", "=", "os", ".", "path", ".", "join", "(", "'/home/gao/PycharmProjects/sampling_summaries/2_vectors'", ",", "\n", "data_set", ",", "topic", ",", "'synthetic'", ",", "'stateNGRAM-base{}-block{}'", ".", "format", "(", "base_length", ",", "block_num", ")", ")", "\n", "models", "=", "os", ".", "listdir", "(", "learnt_weights_dir", ")", "\n", "model_num", "=", "0", "\n", "for", "model", "in", "models", ":", "\n", "            ", "if", "model", "[", "0", "]", "!=", "'.'", ":", "\n", "                ", "model_num", "+=", "1", "\n", "", "", "new_learnt_value_list", "=", "getRewardsFromWeights", "(", "summary_list", ",", "learnt_weights_dir", ",", "vector_path", ",", "len", "(", "summary_list", ")", ",", "model_num", ")", "\n", "", "else", ":", "\n", "        ", "vector_path", "=", "os", ".", "path", ".", "join", "(", "'/home/gao/PycharmProjects/sampling_summaries/2_vectors'", ",", "\n", "data_set", ",", "topic", ",", "'model_{}'", ".", "format", "(", "model_idx", ")", ",", "'synthetic'", ",", "\n", "'stateNGRAM-base{}-block{}'", ".", "format", "(", "base_length", ",", "block_num", ")", ")", "\n", "new_learnt_value_list", "=", "getDBSRewardsFromWeights", "(", "summary_list", ",", "learnt_weights_path", ",", "vector_path", ")", "\n", "\n", "\n", "", "return", "new_learnt_value_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getGpplMixedLearntRewards": [[653, 665], ["summary_samples_reader.getGpplLearntRewards", "summary_samples_reader.readAccPretrainedRewards", "summary_samples_reader.readSummariesAndValues", "exit"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getGpplLearntRewards", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readAccPretrainedRewards", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readSummariesAndValues"], ["", "def", "getGpplMixedLearntRewards", "(", "sample_num", ",", "samples_dir", ",", "topic", ",", "data_set", ",", "setting_name", ",", "\n", "model_names", ",", "noisy", "=", "False", ")", ":", "\n", "#get learnt rewards", "\n", "    ", "if", "'DUC'", "in", "data_set", ":", "\n", "        ", "act_list", "=", "readSummariesAndValues", "(", "sample_num", ",", "samples_dir", ",", "topic", ",", "'optimal'", ",", "True", ")", "\n", "", "else", ":", "\n", "        ", "exit", "(", "1", ")", "###TODO: DBS", "\n", "\n", "", "learnt_rewards_list", "=", "getGpplLearntRewards", "(", "act_list", ",", "data_set", ",", "topic", ",", "setting_name", ",", "noisy", ",", "model_names", ")", "\n", "pre_rewards_list", "=", "readAccPretrainedRewards", "(", "act_list", ",", "topic", ",", "data_set", ")", "\n", "\n", "return", "act_list", ",", "pre_rewards_list", ",", "learnt_rewards_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getMixedLearntRewards": [[668, 692], ["summary_samples_reader.getLearntRewards", "summary_samples_reader.readAccPretrainedRewards", "print", "summary_samples_reader.mixingPretrainedLearntRewards", "summary_samples_reader.readSummariesAndValues", "os.path.join", "summary_samples_reader.readDbsOptimalSummariesAndValues", "summary_samples_reader.readSummariesAndValues", "len", "len"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getLearntRewards", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readAccPretrainedRewards", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.mixingPretrainedLearntRewards", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readSummariesAndValues", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readDbsOptimalSummariesAndValues", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.readSummariesAndValues"], ["", "def", "getMixedLearntRewards", "(", "sample_num", ",", "samples_dir", ",", "tdf", ",", "topic", ",", "data_set", ",", "acc_rewards", ",", "setting_name", ",", "\n", "verbose", "=", "False", ",", "reward_type", "=", "'optimal'", ",", "noisy", "=", "False", ",", "model_idx", "=", "0", ")", ":", "\n", "#get learnt rewards", "\n", "    ", "if", "'DUC'", "in", "data_set", ":", "\n", "        ", "act_list", "=", "readSummariesAndValues", "(", "sample_num", ",", "samples_dir", ",", "topic", ",", "reward_type", ",", "True", ")", "\n", "topic_model", "=", "topic", "\n", "", "else", ":", "\n", "        ", "topic_model", "=", "os", ".", "path", ".", "join", "(", "topic", ",", "'model_{}'", ".", "format", "(", "model_idx", ")", ")", "\n", "if", "reward_type", "==", "'optimal'", ":", "\n", "            ", "act_list", "=", "readDbsOptimalSummariesAndValues", "(", "sample_num", ",", "samples_dir", ",", "topic_model", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "act_list", "=", "readSummariesAndValues", "(", "sample_num", ",", "samples_dir", ",", "topic_model", ",", "reward_type", ",", "True", ")", "\n", "\n", "\n", "", "", "learnt_rewards_list", "=", "getLearntRewards", "(", "act_list", ",", "data_set", ",", "topic", ",", "setting_name", ",", "noisy", ",", "model_idx", ")", "\n", "pre_rewards_list", "=", "readAccPretrainedRewards", "(", "act_list", ",", "topic_model", ",", "data_set", ")", "\n", "\n", "print", "(", "'length of pre_rewards: {}; length of learnt rewards: {}'", ".", "format", "(", "len", "(", "pre_rewards_list", ")", ",", "len", "(", "learnt_rewards_list", ")", ")", ")", "\n", "mixed_rewards_list", "=", "mixingPretrainedLearntRewards", "(", "pre_rewards_list", ",", "learnt_rewards_list", ",", "tdf", ")", "\n", "\n", "if", "not", "verbose", ":", "\n", "        ", "return", "act_list", ",", "mixed_rewards_list", "\n", "", "else", ":", "\n", "        ", "return", "act_list", ",", "pre_rewards_list", ",", "learnt_rewards_list", ",", "mixed_rewards_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getSoftmaxList": [[693, 699], ["softmax_list.append", "numpy.exp"], "function", ["None"], ["", "", "def", "getSoftmaxList", "(", "value_list", ",", "strict", ")", ":", "\n", "    ", "softmax_list", "=", "[", "]", "\n", "for", "value", "in", "value_list", ":", "\n", "        ", "softmax_list", ".", "append", "(", "np", ".", "exp", "(", "value", "/", "strict", ")", ")", "\n", "\n", "", "return", "softmax_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getProbSoftmaxList": [[700, 708], ["summary_samples_reader.getSoftmaxList", "len", "weights_list.append", "sum"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.getSoftmaxList"], ["", "def", "getProbSoftmaxList", "(", "value_list", ",", "strict", ")", ":", "\n", "    ", "softmax_list", "=", "getSoftmaxList", "(", "value_list", ",", "strict", ")", "\n", "sumv", "=", "sum", "(", "softmax_list", ")", "*", "1.0", "/", "len", "(", "value_list", ")", "\n", "weights_list", "=", "[", "]", "\n", "for", "vv", "in", "softmax_list", ":", "\n", "        ", "weights_list", ".", "append", "(", "vv", "/", "sumv", ")", "\n", "\n", "", "return", "weights_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.summary_samples_reader.getExpectation": [[709, 717], ["summary_samples_reader.getSoftmaxList", "sum", "enumerate"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.getSoftmaxList"], ["", "def", "getExpectation", "(", "value_list", ",", "strict", ")", ":", "\n", "    ", "softmax_list", "=", "getSoftmaxList", "(", "value_list", ",", "strict", ")", "\n", "sumv", "=", "sum", "(", "softmax_list", ")", "\n", "exp", "=", "0", "\n", "for", "(", "i", ",", "vv", ")", "in", "enumerate", "(", "value_list", ")", ":", "\n", "        ", "exp", "+=", "vv", "*", "(", "softmax_list", "[", "i", "]", "/", "sumv", ")", "\n", "\n", "", "return", "exp", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.mean_reciprocal_rank": [[13, 34], ["numpy.mean", "numpy.asarray().nonzero", "numpy.asarray"], "function", ["None"], ["def", "mean_reciprocal_rank", "(", "rs", ")", ":", "\n", "    ", "\"\"\"Score is reciprocal of the rank of the first relevant item\n    First element is 'rank 1'.  Relevance is binary (nonzero is relevant).\n    Example from http://en.wikipedia.org/wiki/Mean_reciprocal_rank\n    >>> rs = [[0, 0, 1], [0, 1, 0], [1, 0, 0]]\n    >>> mean_reciprocal_rank(rs)\n    0.61111111111111105\n    >>> rs = np.array([[0, 0, 0], [0, 1, 0], [1, 0, 0]])\n    >>> mean_reciprocal_rank(rs)\n    0.5\n    >>> rs = [[0, 0, 0, 1], [1, 0, 0], [1, 0, 0]]\n    >>> mean_reciprocal_rank(rs)\n    0.75\n    Args:\n        rs: Iterator of relevance scores (list or numpy) in rank order\n            (first element is the first item)\n    Returns:\n        Mean reciprocal rank\n    \"\"\"", "\n", "rs", "=", "(", "np", ".", "asarray", "(", "r", ")", ".", "nonzero", "(", ")", "[", "0", "]", "for", "r", "in", "rs", ")", "\n", "return", "np", ".", "mean", "(", "[", "1.", "/", "(", "r", "[", "0", "]", "+", "1", ")", "if", "r", ".", "size", "else", "0.", "for", "r", "in", "rs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.r_precision": [[36, 59], ["numpy.mean", "numpy.asarray", "r.nonzero"], "function", ["None"], ["", "def", "r_precision", "(", "r", ")", ":", "\n", "    ", "\"\"\"Score is precision after all relevant documents have been retrieved\n    Relevance is binary (nonzero is relevant).\n    >>> r = [0, 0, 1]\n    >>> r_precision(r)\n    0.33333333333333331\n    >>> r = [0, 1, 0]\n    >>> r_precision(r)\n    0.5\n    >>> r = [1, 0, 0]\n    >>> r_precision(r)\n    1.0\n    Args:\n        r: Relevance scores (list or numpy) in rank order\n            (first element is the first item)\n    Returns:\n        R Precision\n    \"\"\"", "\n", "r", "=", "np", ".", "asarray", "(", "r", ")", "!=", "0", "\n", "z", "=", "r", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "not", "z", ".", "size", ":", "\n", "        ", "return", "0.", "\n", "", "return", "np", ".", "mean", "(", "r", "[", ":", "z", "[", "-", "1", "]", "+", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.precision_at_k": [[61, 88], ["numpy.mean", "ValueError", "numpy.asarray"], "function", ["None"], ["", "def", "precision_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "\"\"\"Score is precision @ k\n    Relevance is binary (nonzero is relevant).\n    >>> r = [0, 0, 1]\n    >>> precision_at_k(r, 1)\n    0.0\n    >>> precision_at_k(r, 2)\n    0.0\n    >>> precision_at_k(r, 3)\n    0.33333333333333331\n    >>> precision_at_k(r, 4)\n    Traceback (most recent call last):\n        File \"<stdin>\", line 1, in ?\n    ValueError: Relevance score length < k\n    Args:\n        r: Relevance scores (list or numpy) in rank order\n            (first element is the first item)\n    Returns:\n        Precision @ k\n    Raises:\n        ValueError: len(r) must be >= k\n    \"\"\"", "\n", "assert", "k", ">=", "1", "\n", "r", "=", "np", ".", "asarray", "(", "r", ")", "[", ":", "k", "]", "!=", "0", "\n", "if", "r", ".", "size", "!=", "k", ":", "\n", "        ", "raise", "ValueError", "(", "'Relevance score length < k'", ")", "\n", "", "return", "np", ".", "mean", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.average_precision": [[90, 110], ["numpy.mean", "numpy.asarray", "rank_metrics.precision_at_k", "range"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.precision_at_k"], ["", "def", "average_precision", "(", "r", ")", ":", "\n", "    ", "\"\"\"Score is average precision (area under PR curve)\n    Relevance is binary (nonzero is relevant).\n    >>> r = [1, 1, 0, 1, 0, 1, 0, 0, 0, 1]\n    >>> delta_r = 1. / sum(r)\n    >>> sum([sum(r[:x + 1]) / (x + 1.) * delta_r for x, y in enumerate(r) if y])\n    0.7833333333333333\n    >>> average_precision(r)\n    0.78333333333333333\n    Args:\n        r: Relevance scores (list or numpy) in rank order\n            (first element is the first item)\n    Returns:\n        Average precision\n    \"\"\"", "\n", "r", "=", "np", ".", "asarray", "(", "r", ")", "!=", "0", "\n", "out", "=", "[", "precision_at_k", "(", "r", ",", "k", "+", "1", ")", "for", "k", "in", "range", "(", "r", ".", "size", ")", "if", "r", "[", "k", "]", "]", "\n", "if", "not", "out", ":", "\n", "        ", "return", "0.", "\n", "", "return", "np", ".", "mean", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.mean_average_precision": [[112, 128], ["numpy.mean", "rank_metrics.average_precision"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.average_precision"], ["", "def", "mean_average_precision", "(", "rs", ")", ":", "\n", "    ", "\"\"\"Score is mean average precision\n    Relevance is binary (nonzero is relevant).\n    >>> rs = [[1, 1, 0, 1, 0, 1, 0, 0, 0, 1]]\n    >>> mean_average_precision(rs)\n    0.78333333333333333\n    >>> rs = [[1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0]]\n    >>> mean_average_precision(rs)\n    0.39166666666666666\n    Args:\n        rs: Iterator of relevance scores (list or numpy) in rank order\n            (first element is the first item)\n    Returns:\n        Mean average precision\n    \"\"\"", "\n", "return", "np", ".", "mean", "(", "[", "average_precision", "(", "r", ")", "for", "r", "in", "rs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.dcg_at_k": [[130, 167], ["numpy.asfarray", "numpy.sum", "numpy.sum", "ValueError", "numpy.log2", "numpy.log2", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "dcg_at_k", "(", "r", ",", "k", ",", "method", "=", "0", ")", ":", "\n", "    ", "\"\"\"Score is discounted cumulative gain (dcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Example from\n    http://www.stanford.edu/class/cs276/handouts/EvaluationNew-handout-6-per.pdf\n    >>> r = [3, 2, 3, 0, 0, 1, 2, 2, 3, 0]\n    >>> dcg_at_k(r, 1)\n    3.0\n    >>> dcg_at_k(r, 1, method=1)\n    3.0\n    >>> dcg_at_k(r, 2)\n    5.0\n    >>> dcg_at_k(r, 2, method=1)\n    4.2618595071429155\n    >>> dcg_at_k(r, 10)\n    9.6051177391888114\n    >>> dcg_at_k(r, 11)\n    9.6051177391888114\n    Args:\n        r: Relevance scores (list or numpy) in rank order\n            (first element is the first item)\n        k: Number of results to consider\n        method: If 0 then weights are [1.0, 1.0, 0.6309, 0.5, 0.4307, ...]\n                If 1 then weights are [1.0, 0.6309, 0.5, 0.4307, ...]\n    Returns:\n        Discounted cumulative gain\n    \"\"\"", "\n", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "r", ".", "size", ":", "\n", "        ", "if", "method", "==", "0", ":", "\n", "            ", "return", "r", "[", "0", "]", "+", "np", ".", "sum", "(", "r", "[", "1", ":", "]", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "1", ")", ")", ")", "\n", "", "elif", "method", "==", "1", ":", "\n", "            ", "return", "np", ".", "sum", "(", "r", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'method must be 0 or 1.'", ")", "\n", "", "", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.ndcg_at_k": [[169, 201], ["rank_metrics.dcg_at_k", "sorted", "rank_metrics.dcg_at_k"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.dcg_at_k", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.dcg_at_k"], ["", "def", "ndcg_at_k", "(", "r", ",", "k", ",", "method", "=", "0", ")", ":", "\n", "    ", "\"\"\"Score is normalized discounted cumulative gain (ndcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Example from\n    http://www.stanford.edu/class/cs276/handouts/EvaluationNew-handout-6-per.pdf\n    >>> r = [3, 2, 3, 0, 0, 1, 2, 2, 3, 0]\n    >>> ndcg_at_k(r, 1)\n    1.0\n    >>> r = [2, 1, 2, 0]\n    >>> ndcg_at_k(r, 4)\n    0.9203032077642922\n    >>> ndcg_at_k(r, 4, method=1)\n    0.96519546960144276\n    >>> ndcg_at_k([0], 1)\n    0.0\n    >>> ndcg_at_k([1], 2)\n    1.0\n\n    Args:\n        r: Relevance scores (list or numpy) in rank order\n            (first element is the first item)\n        k: Number of results to consider\n        method: If 0 then weights are [1.0, 1.0, 0.6309, 0.5, 0.4307, ...]\n                If 1 then weights are [1.0, 0.6309, 0.5, 0.4307, ...]\n    Returns:\n        Normalized discounted cumulative gain\n    \"\"\"", "\n", "dcg_max", "=", "dcg_at_k", "(", "sorted", "(", "r", ",", "reverse", "=", "True", ")", ",", "k", ",", "method", ")", "\n", "if", "not", "dcg_max", ":", "\n", "        ", "return", "0.", "\n", "", "return", "dcg_at_k", "(", "r", ",", "k", ",", "method", ")", "/", "dcg_max", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.remove_spaces_lines": [[20, 34], ["re.sub", "str"], "function", ["None"], ["def", "remove_spaces_lines", "(", "text", ")", ":", "\n", "    ", "'''\n    Normalize text\n    Remove & Replace unnessary characters\n    Parameter argument:\n    text: a string (e.g. '.... \n                        \n                        New York N.Y is a city...')\n    \n    Return:\n    text: a string (New York N.Y is a city.)\n    '''", "\n", "text", "=", "re", ".", "sub", "(", "'[\\n\\s\\t_]+'", ",", "' '", ",", "str", "(", "text", ")", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.text_normalization": [[35, 61], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub"], "function", ["None"], ["", "def", "text_normalization", "(", "text", ")", ":", "\n", "    ", "'''\n    Normalize text\n    Remove & Replace unnessary characters\n    Parameter argument:\n    text: a string (e.g. '.... *** New York N.Y is a city...')\n    \n    Return:\n    text: a string (New York N.Y is a city.)\n    '''", "\n", "text", "=", "re", ".", "sub", "(", "u'\\u201e|\\u201c'", ",", "u''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\"\\u2022\"", ",", "u'. '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\"([.?!]);\"", ",", "u\"\\\\1\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'``'", ",", "u'``'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\"\\.\\.+\"", ",", "u\" \"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\"\\s+\\.\"", ",", "u\".\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\"\\?\\.\"", ",", "u\"?\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'[\\n\\s\\t_]+'", ",", "u' '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\"[*]\"", ",", "u\"\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\"\\-+\"", ",", "u\"-\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'^ '", ",", "u''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'\\u00E2'", ",", "u''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'\\u00E0'", ",", "u'a'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'\\u00E9'", ",", "u'e'", ",", "text", ")", "\n", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2tokens": [[62, 77], ["data_helpers.text_normalization", "nltk.tokenize.word_tokenize", "sent.lower.lower"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.text_normalization"], ["", "def", "sent2tokens", "(", "sent", ",", "language", ",", "lower", "=", "True", ")", ":", "\n", "    ", "'''\n    Sentence to stemmed tokens\n    Parameter arguments:\n    words = list of words e.g. sent = '... The boy is playing.'\n    \n    return:\n    list of tokens\n    ['the', 'boy', 'is', 'playing','.']\n    '''", "\n", "if", "lower", "==", "True", ":", "\n", "        ", "sent", "=", "sent", ".", "lower", "(", ")", "\n", "", "sent", "=", "text_normalization", "(", "sent", ")", "\n", "words", "=", "word_tokenize", "(", "sent", ",", "language", ")", "\n", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2stokens": [[78, 90], ["data_helpers.sent2tokens", "stemmer.stem", "word.startswith"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.sent2tokens"], ["", "def", "sent2stokens", "(", "sent", ",", "stemmer", ",", "language", ",", "lower", "=", "True", ")", ":", "\n", "    ", "'''\n    Sentence to stemmed tokens\n    Parameter arguments:\n    sent = a unicode string e.g. sent = '... The boys are playing'\n    \n    return:\n    list of stemmed tokens\n    ['the', 'boy', 'are', 'play', '.']\n    '''", "\n", "words", "=", "sent2tokens", "(", "sent", ",", "language", ",", "lower", ")", "\n", "return", "[", "stemmer", ".", "stem", "(", "word", ")", "for", "word", "in", "words", "if", "not", "word", ".", "startswith", "(", "PUNCT", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.remove_stopwords": [[91, 102], ["token.startswith"], "function", ["None"], ["", "def", "remove_stopwords", "(", "words", ",", "stoplist", ")", ":", "\n", "    ", "''' Remove stop words\n    Parameter arguments:\n    words = list of words e.g. ['.', 'The', 'boy', 'is', 'playing', '.']\n    \n    return:\n    list of tokens\n    ['boy', 'is', 'playing']\n    '''", "\n", "\n", "return", "[", "token", "for", "token", "in", "words", "if", "not", "(", "token", ".", "startswith", "(", "PUNCT", ")", "or", "token", "in", "stoplist", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2tokens_wostop": [[103, 117], ["data_helpers.sent2tokens", "data_helpers.remove_stopwords"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.sent2tokens", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.remove_stopwords"], ["", "def", "sent2tokens_wostop", "(", "sent", ",", "stoplist", ",", "language", ")", ":", "\n", "    ", "'''\n    Sentence to tokens without stopwords\n    Parameter arguments:\n    sent = a unicode string e.g. sent = '... The boys are playing'\n    \n    return:\n    list of stemmed tokens without stop words\n    ['boys', 'are', 'playing']\n    '''", "\n", "\n", "words", "=", "sent2tokens", "(", "sent", ",", "language", ")", "\n", "tokens", "=", "remove_stopwords", "(", "words", ",", "stoplist", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2stokens_wostop": [[118, 130], ["data_helpers.sent2tokens_wostop", "stemmer.stem"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2tokens_wostop"], ["", "def", "sent2stokens_wostop", "(", "sent", ",", "stemmer", ",", "stoplist", ",", "language", ")", ":", "\n", "    ", "'''\n    Sentence to stemmed tokens without stopwords\n    Parameter arguments:\n    sent = a unicode string e.g. sent = '... The boys are playing'\n    \n    return:\n    list of stemmed tokens without stop words\n    ['boy', 'are', 'play']\n    '''", "\n", "tokens", "=", "sent2tokens_wostop", "(", "sent", ",", "stoplist", ",", "language", ")", "\n", "return", "[", "stemmer", ".", "stem", "(", "token", ")", "for", "token", "in", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.extract_ngrams": [[131, 167], ["enumerate", "data_helpers.sent2stokens_wostop", "range", "range", "concepts.append", "len", "ngram.append", "len", "stemmer.stem", "tokens[].lower", "re.search"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2stokens_wostop"], ["", "def", "extract_ngrams", "(", "sentences", ",", "stoplist", ",", "stemmer", ",", "language", ",", "n", "=", "2", ")", ":", "\n", "    ", "\"\"\"Extract the ngrams of words from the input sentences.\n\n    Args:\n        n (int): the number of words for ngrams, defaults to 2\n    \"\"\"", "\n", "concepts", "=", "[", "]", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "\n", "# for each ngram of words", "\n", "        ", "tokens", "=", "sent2stokens_wostop", "(", "sentence", ",", "stoplist", ",", "language", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "tokens", ")", "-", "(", "n", "-", "1", ")", ")", ":", "\n", "\n", "# initialize ngram container", "\n", "            ", "ngram", "=", "[", "]", "\n", "\n", "# for each token of the ngram", "\n", "for", "k", "in", "range", "(", "j", ",", "j", "+", "n", ")", ":", "\n", "                ", "ngram", ".", "append", "(", "tokens", "[", "k", "]", ".", "lower", "(", ")", ")", "\n", "\n", "# do not consider ngrams containing punctuation marks", "\n", "", "marks", "=", "[", "t", "for", "t", "in", "ngram", "if", "not", "re", ".", "search", "(", "'[a-zA-Z0-9]'", ",", "t", ")", "]", "\n", "if", "len", "(", "marks", ")", ">", "0", ":", "\n", "                ", "continue", "\n", "\n", "# do not consider ngrams composed of only stopwords", "\n", "#stops = [t for t in ngram if t in stoplist]", "\n", "#if len(stops) == len(ngram):", "\n", "#continue", "\n", "\n", "# stem the ngram", "\n", "", "ngram", "=", "[", "stemmer", ".", "stem", "(", "t", ")", "for", "t", "in", "ngram", "]", "\n", "\n", "# add the ngram to the concepts", "\n", "concepts", ".", "append", "(", "' '", ".", "join", "(", "ngram", ")", ")", "\n", "", "", "return", "concepts", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.extract_ngrams2": [[169, 189], ["re.sub", "list", "enumerate", "nltk.ngrams", "ngrams_list.append", "data_helpers.sent2stokens"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2stokens"], ["", "def", "extract_ngrams2", "(", "sentences", ",", "stemmer", ",", "language", ",", "N", "=", "2", ")", ":", "\n", "    ", "'''\n    Parameter Arguments:\n    sentences: list of sentences\n             ['Ney York is a city.', 'It has a huge population.']\n    N: Length of the n-grams e.g. 1, 2\n    \n    return: a list of n-grams\n    [('new', 'york'), ('york', 'is'), ('is', 'a'), ('a', 'city'), (city, '.'), \n    ('it', 'has'), ('has','a'), ('a', 'huge'), ('huge', 'population') , ('population', '.')]\n    '''", "\n", "ngrams_list", "=", "[", "]", "\n", "for", "sent", "in", "sentences", ":", "\n", "        ", "sent", "=", "re", ".", "sub", "(", "'[-](,?\\s)'", ",", "'\\\\1'", ",", "sent", ")", "#case where magister- has to be handled", "\n", "ngram_items", "=", "list", "(", "ngrams", "(", "sent2stokens", "(", "sent", ",", "stemmer", ",", "language", ")", ",", "N", ")", ")", "\n", "for", "i", ",", "ngram", "in", "enumerate", "(", "ngram_items", ")", ":", "\n", "            ", "ngram_str", "=", "' '", ".", "join", "(", "ngram", ")", "\n", "\n", "ngrams_list", ".", "append", "(", "ngram_str", ")", "\n", "", "", "return", "ngrams_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.getTopNgrams": [[190, 219], ["data_helpers.extract_ngrams_count", "len", "top_list.append"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.extract_ngrams_count"], ["", "def", "getTopNgrams", "(", "sentences", ",", "stemmer", ",", "language", ",", "stoplist", ",", "N", "=", "2", ",", "top", "=", "100", ")", ":", "\n", "    ", "'''\n    YG:\n    get the top n-grams from the input sentences\n    :param sentences:\n    :param stemmer:\n    :param language:\n    :param stoplist:\n    :param N:\n    :param top:\n    :return: a list of n-grams, like: ['New York', 'York is', ...]\n    '''", "\n", "ngram_list", "=", "extract_ngrams_count", "(", "sentences", ",", "stemmer", ",", "language", ",", "stoplist", ",", "N", ")", "\n", "top_list", "=", "[", "]", "\n", "while", "len", "(", "top_list", ")", "<", "top", ":", "\n", "        ", "highest_count", "=", "-", "1", "\n", "ngram", "=", "''", "\n", "for", "key", "in", "ngram_list", ":", "\n", "            ", "if", "(", "ngram_list", "[", "key", "]", ">", "highest_count", ")", ":", "\n", "                ", "highest_count", "=", "ngram_list", "[", "key", "]", "\n", "ngram", "=", "key", "\n", "", "", "top_list", ".", "append", "(", "ngram", ")", "\n", "del", "ngram_list", "[", "ngram", "]", "\n", "\n", "#for key in ngram_list:", "\n", "#if ngram_list[key] >= highest_count:", "\n", "#top_list.append(key)", "\n", "\n", "", "return", "top_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.extract_ngrams_count": [[221, 272], ["collections.OrderedDict", "enumerate", "data_helpers.sent2stokens", "range", "range", "len", "ngram.append", "len", "len", "len", "tokens[].lower", "re.search"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2stokens"], ["", "def", "extract_ngrams_count", "(", "sentences", ",", "stemmer", ",", "language", ",", "stoplist", ",", "N", "=", "2", ")", ":", "\n", "    ", "'''\n    YG:\n    extract n-grams and count the appearance times of each n-gram\n    :param sentences: the list of sentences, each sentence is a string\n    :param stemmer:\n    :param language:\n    :param N:\n    :return:\n\n    example input : 'This is a foo bar sentence'\n    output: {'this is' : 1, 'is a' : 1, 'a foo' : 1, ...}\n    the output is a dictionary\n    '''", "\n", "#TODO: I am not sure whether we should remove all stopwords or not; maybe try both settings", "\n", "ngrams_count_dic", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "\n", "# for each ngram of words", "\n", "#sent = re.sub('[-](,?\\s)','\\\\1', sentence) #case where magister- has to be handled", "\n", "#tokens = sent2stokens_wostop(sentence,stemmer,stoplist,language)", "\n", "        ", "tokens", "=", "sent2stokens", "(", "sentence", ",", "stemmer", ",", "language", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "tokens", ")", "-", "(", "N", "-", "1", ")", ")", ":", "\n", "# initialize ngram container", "\n", "            ", "ngram", "=", "[", "]", "\n", "\n", "# for each token of the ngram", "\n", "for", "k", "in", "range", "(", "j", ",", "j", "+", "N", ")", ":", "\n", "                ", "ngram", ".", "append", "(", "tokens", "[", "k", "]", ".", "lower", "(", ")", ")", "\n", "\n", "# do not consider ngrams containing punctuation marks", "\n", "", "marks", "=", "[", "t", "for", "t", "in", "ngram", "if", "not", "re", ".", "search", "(", "'[a-zA-Z0-9]'", ",", "t", ")", "]", "\n", "if", "len", "(", "marks", ")", ">", "0", ":", "\n", "                ", "continue", "\n", "\n", "# do not consider ngrams composed of only stopwords", "\n", "", "stops", "=", "[", "t", "for", "t", "in", "ngram", "if", "t", "in", "stoplist", "]", "\n", "if", "len", "(", "stops", ")", "==", "len", "(", "ngram", ")", ":", "\n", "                ", "continue", "\n", "\n", "# stem the ngram", "\n", "#ngram = [stemmer.stem(t) for t in ngram]", "\n", "", "ngram", "=", "' '", ".", "join", "(", "ngram", ")", "\n", "#print('ngram: '+repr(ngram))", "\n", "\n", "# add check whether this n-gram has already been contained in the n-grams list", "\n", "if", "ngram", "in", "ngrams_count_dic", ":", "\n", "                ", "ngrams_count_dic", "[", "ngram", "]", "=", "ngrams_count_dic", "[", "ngram", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "ngrams_count_dic", "[", "ngram", "]", "=", "1", "\n", "", "", "", "return", "ngrams_count_dic", "\n", "#return sorted(ngrams_count_dic.items(), key=lambda x:x[1], reverse=True)", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.extract_entity_names": [[276, 285], ["hasattr", "t.label", "entity_names.append", "entity_names.extend", "data_helpers.extract_entity_names"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.extract_entity_names"], ["", "def", "extract_entity_names", "(", "t", ")", ":", "\n", "    ", "entity_names", "=", "[", "]", "\n", "if", "hasattr", "(", "t", ",", "'label'", ")", ":", "\n", "        ", "if", "t", ".", "label", "(", ")", "==", "'NE'", ":", "\n", "            ", "entity_names", ".", "append", "(", "' '", ".", "join", "(", "[", "child", "[", "0", "]", "for", "child", "in", "t", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "child", "in", "t", ":", "\n", "                ", "entity_names", ".", "extend", "(", "extract_entity_names", "(", "child", ")", ")", "\n", "", "", "", "return", "entity_names", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.get_phrases": [[286, 297], ["data_helpers.sent2stokens", "nltk.pos_tag", "nltk.ne_chunk_sents", "re.match", "phrases.extend", "data_helpers.extract_entity_names"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2stokens", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.extract_entity_names"], ["", "def", "get_phrases", "(", "sentence", ",", "phrase_type", ",", "language", ")", ":", "\n", "    ", "tokens", "=", "sent2stokens", "(", "sentence", ",", "language", ",", "lower", "=", "'False'", ")", "\n", "tagged_sentence", "=", "pos_tag", "(", "tokens", ")", "\n", "tags", "=", "[", "tag", "for", "_", ",", "tag", "in", "tagged_sentence", "if", "re", ".", "match", "(", "r'NN.*|V.*|RB|JJ'", ",", "tag", ")", "]", "\n", "\n", "phrases", "=", "[", "]", "\n", "if", "phrase_type", "==", "'entities'", ":", "\n", "        ", "chunked_sentence", "=", "ne_chunk_sents", "(", "[", "tagged_sentence", "]", ",", "binary", "=", "True", ")", "\n", "for", "tree", "in", "chunked_sentence", ":", "\n", "            ", "phrases", ".", "extend", "(", "extract_entity_names", "(", "tree", ")", ")", "\n", "", "", "return", "phrases", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.extract_nuggets": [[298, 321], ["list", "data_helpers.get_phrases", "data_helpers.get_phrases", "data_helpers.get_phrases", "nugget_list.append", "nltk.ngrams", "data_helpers.sent2stokens"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.get_phrases", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.get_phrases", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.get_phrases", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2stokens"], ["", "def", "extract_nuggets", "(", "sentences", ",", "nugget_type", ",", "language", ")", ":", "\n", "    ", "'''\n    Parameter Arguments:\n    sentences: list of sentences\n             ['Ney York is a city.', 'It has a huge population.']\n    \n    return: a list of noun phrases, events, named_entities\n    [('new', 'york'), ('york', 'is'), ('a', 'city'), \n    ('it', 'has'), ('has','a'), ('a', 'huge'), ('huge', 'population') , ('population', '.')]\n    '''", "\n", "nugget_list", "=", "[", "]", "\n", "for", "sent", "in", "sentences", ":", "\n", "        ", "if", "nugget_type", "==", "'n-grams'", ":", "\n", "            ", "nugget_items", "=", "list", "(", "ngrams", "(", "sent2stokens", "(", "sent", ",", "language", ")", ",", "2", ")", ")", "\n", "", "if", "nugget_type", "==", "'NP'", ":", "\n", "            ", "nugget_items", "=", "get_phrases", "(", "sent", ",", "'NP'", ")", "\n", "", "if", "nugget_type", "==", "'Phrases'", ":", "\n", "            ", "nugget_items", "=", "get_phrases", "(", "sent", ",", "'Phrases'", ")", "\n", "", "if", "nugget_type", "==", "'NE'", ":", "\n", "            ", "nugget_items", "=", "get_phrases", "(", "sent", ",", "'NE'", ")", "\n", "", "for", "nugget", "in", "nugget_items", ":", "\n", "            ", "nugget_list", ".", "append", "(", "' '", ".", "join", "(", "nugget", ")", ")", "\n", "", "", "return", "nugget_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.prune_ngrams": [[322, 332], ["ngram.split", "pruned_list.append"], "function", ["None"], ["", "def", "prune_ngrams", "(", "ngrams", ",", "stoplist", ",", "N", "=", "2", ")", ":", "\n", "    ", "pruned_list", "=", "[", "]", "\n", "for", "ngram", "in", "ngrams", ":", "\n", "        ", "items", "=", "ngram", ".", "split", "(", "' '", ")", "\n", "i", "=", "0", "\n", "for", "item", "in", "items", ":", "\n", "            ", "if", "item", "in", "stoplist", ":", "i", "+=", "1", "\n", "", "if", "i", "<", "N", ":", "\n", "            ", "pruned_list", ".", "append", "(", "ngram", ")", "\n", "", "", "return", "pruned_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.get_sorted": [[333, 338], ["sorted"], "function", ["None"], ["", "def", "get_sorted", "(", "dictionary", ")", ":", "\n", "    ", "'''\n    Sort the dictionary\n    '''", "\n", "return", "sorted", "(", "dictionary", ",", "key", "=", "lambda", "x", ":", "dictionary", "[", "x", "]", ",", "reverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.untokenize": [[339, 372], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.replace", "re.sub", "re.sub", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip", "re.sub.strip"], "function", ["None"], ["", "def", "untokenize", "(", "tokens", ")", ":", "\n", "    ", "\"\"\"Untokenizing a list of tokens. \n\n    Args:\n        tokens (list of str): the list of tokens to untokenize.\n\n    Returns:\n        a string\n\n    \"\"\"", "\n", "text", "=", "u' '", ".", "join", "(", "tokens", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\"\\s+\"", ",", "u\" \"", ",", "text", ".", "strip", "(", ")", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\" ('[a-z]) \"", ",", "u\"\\g<1> \"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\" ([\\.;,-]) \"", ",", "u\"\\g<1> \"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\" ([\\.;,-?!])$\"", ",", "u\"\\g<1>\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\" _ (.+) _ \"", ",", "u\" _\\g<1>_ \"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\" \\$ ([\\d\\.]+) \"", ",", "u\" $\\g<1> \"", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "u\" ' \"", ",", "u\"' \"", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\"([\\W\\s])\\( \"", ",", "u\"\\g<1>(\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\" \\)([\\W\\s])\"", ",", "u\")\\g<1>\"", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "u\"`` \"", ",", "u\"``\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "u\" ''\"", ",", "u\"''\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "u\" n't\"", ",", "u\"n't\"", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'(^| )\" ([^\"]+) \"( |$)'", ",", "u'\\g<1>\"\\g<2>\"\\g<3>'", ",", "text", ")", "\n", "\n", "# times", "\n", "text", "=", "re", ".", "sub", "(", "'(\\d+) : (\\d+ [ap]\\.m\\.)'", ",", "'\\g<1>:\\g<2>'", ",", "text", ")", "\n", "\n", "text", "=", "re", ".", "sub", "(", "'^\" '", ",", "'\"'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "' \"$'", ",", "'\"'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\"\\s+\"", ",", "u\" \"", ",", "text", ".", "strip", "(", ")", ")", "\n", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.flatten_childtrees": [[401, 411], ["t.height", "children.extend", "t.label", "t.height", "children.append", "children.extend", "nltk.tree.Tree", "data_helpers.flatten_childtrees", "t.label", "t.pos"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.flatten_childtrees"], ["def", "flatten_childtrees", "(", "trees", ")", ":", "\n", "    ", "children", "=", "[", "]", "\n", "for", "t", "in", "trees", ":", "\n", "        ", "if", "t", ".", "height", "(", ")", "<", "3", ":", "\n", "            ", "children", ".", "extend", "(", "t", ".", "label", "(", ")", ")", "\n", "", "elif", "t", ".", "height", "(", ")", "==", "3", ":", "\n", "            ", "children", ".", "append", "(", "Tree", "(", "t", ".", "label", "(", ")", ",", "t", ".", "pos", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "children", ".", "extend", "(", "flatten_childtrees", "(", "[", "c", "for", "c", "in", "t", "]", ")", ")", "\n", "", "", "return", "children", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.flatten_deeptree": [[412, 414], ["nltk.tree.Tree", "tree.label", "data_helpers.flatten_childtrees"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.flatten_childtrees"], ["", "def", "flatten_deeptree", "(", "tree", ")", ":", "\n", "    ", "return", "Tree", "(", "tree", ".", "label", "(", ")", ",", "flatten_childtrees", "(", "[", "c", "for", "c", "in", "tree", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.prune_phrases": [[415, 431], ["sorted", "data_helpers.sent2stokens", "enumerate", "re.search", "pruned_list.append"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2stokens"], ["", "def", "prune_phrases", "(", "phrases", ",", "stoplist", ",", "stemmer", ",", "language", ")", ":", "\n", "    ", "pruned_list", "=", "[", "]", "\n", "phrases", "=", "sorted", "(", "phrases", ",", "key", "=", "len", ",", "reverse", "=", "True", ")", "\n", "for", "phrase", "in", "phrases", ":", "\n", "        ", "tokens", "=", "sent2stokens", "(", "phrase", ",", "stemmer", ",", "language", ")", "\n", "ph", "=", "u' '", ".", "join", "(", "tokens", ")", "\n", "flag", "=", "0", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "pruned_list", ")", ":", "\n", "            ", "if", "re", ".", "search", "(", "ph", ",", "x", ")", ":", "\n", "                ", "flag", "=", "1", "\n", "break", "\n", "", "", "if", "ph", "in", "stoplist", "or", "flag", "==", "1", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "pruned_list", ".", "append", "(", "ph", ")", "\n", "", "", "return", "pruned_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.load_w2v_embeddings": [[433, 456], ["oracle_type.startswith", "os.normpath", "os.normpath", "LoadEmbeddings", "os.normpath", "os.normpath", "LoadEmbeddings", "os.join", "os.join", "os.exists", "os.makedirs", "os.makedirs", "os.join", "os.join"], "function", ["None"], ["", "def", "load_w2v_embeddings", "(", "embeddings_path", ",", "language", ",", "oracle_type", ")", ":", "\n", "    ", "embeddings", "=", "{", "}", "\n", "if", "oracle_type", ".", "startswith", "(", "'active_learning'", ")", ":", "\n", "        ", "if", "language", "==", "'english'", ":", "\n", "#embeddPath = path.normpath(path.join(embeddings_path, \"english/GoogleNews-vectors-negative300.bin.gz\"))", "\n", "            ", "embeddPath", "=", "path", ".", "normpath", "(", "path", ".", "join", "(", "embeddings_path", ",", "\"english/glove.6B.300d.txt\"", ")", ")", "\n", "embeddData", "=", "path", ".", "normpath", "(", "path", ".", "join", "(", "embeddings_path", ",", "\"english/data/\"", ")", ")", "\n", "if", "not", "path", ".", "exists", "(", "embeddData", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "embeddData", ")", "\n", "", "embedding_size", "=", "300", "\n", "vocab_size", "=", "400000", "# Glove vectors", "\n", "binary_val", "=", "False", "\n", "embeddings", "=", "LoadEmbeddings", "(", "filepath", "=", "embeddPath", ",", "data_path", "=", "embeddData", ",", "vocab_size", "=", "vocab_size", ",", "\n", "embedding_size", "=", "embedding_size", ",", "binary_val", "=", "binary_val", ")", "\n", "\n", "", "if", "language", "==", "'german'", ":", "\n", "            ", "embeddPath", "=", "path", ".", "normpath", "(", "path", ".", "join", "(", "embeddings_path", ",", "\"german/2014_tudarmstadt_german_50mincount.vec\"", ")", ")", "\n", "embeddData", "=", "path", ".", "normpath", "(", "path", ".", "join", "(", "embeddings_path", ",", "\"german/data/\"", ")", ")", "\n", "vocab_size", "=", "648460", "\n", "embedding_size", "=", "100", "\n", "embeddings", "=", "LoadEmbeddings", "(", "filepath", "=", "embeddPath", ",", "data_path", "=", "embeddData", ",", "vocab_size", "=", "vocab_size", ",", "\n", "embedding_size", "=", "embedding_size", ")", "\n", "", "", "return", "embeddings", "", "", ""]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList": [[5, 12], ["min", "max"], "function", ["None"], ["def", "normaliseList", "(", "ll", ",", "max_value", "=", "10.", ")", ":", "\n", "    ", "minv", "=", "min", "(", "ll", ")", "\n", "maxv", "=", "max", "(", "ll", ")", "\n", "\n", "new_ll", "=", "[", "(", "x", "-", "minv", ")", "*", "max_value", "/", "maxv", "for", "x", "in", "ll", "]", "\n", "\n", "return", "new_ll", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.sigmoid": [[13, 15], ["math.exp"], "function", ["None"], ["", "def", "sigmoid", "(", "x", ",", "temp", "=", "1.", ")", ":", "\n", "    ", "return", "1.0", "/", "(", "1.", "+", "math", ".", "exp", "(", "-", "x", "/", "temp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.softmaxSample": [[17, 40], ["len", "misc.getSoftmaxList", "random.random", "sum"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.getSoftmaxList"], ["", "def", "softmaxSample", "(", "value_list", ",", "strict", ",", "softmax_list", "=", "[", "]", ",", "return_softmax_list", "=", "False", ")", ":", "\n", "    ", "if", "len", "(", "softmax_list", ")", "==", "0", ":", "\n", "        ", "slist", "=", "getSoftmaxList", "(", "value_list", ",", "strict", ")", "\n", "", "else", ":", "\n", "        ", "slist", "=", "softmax_list", "\n", "\n", "", "pointer", "=", "random", ".", "random", "(", ")", "*", "sum", "(", "softmax_list", ")", "\n", "tier", "=", "0", "\n", "idx", "=", "0", "\n", "\n", "rtn_idx", "=", "-", "1", "\n", "for", "value", "in", "slist", ":", "\n", "        ", "if", "pointer", ">=", "tier", "and", "pointer", "<", "tier", "+", "value", ":", "\n", "            ", "rtn_idx", "=", "idx", "\n", "break", "\n", "", "else", ":", "\n", "            ", "tier", "+=", "value", "\n", "idx", "+=", "1", "\n", "\n", "", "", "if", "return_softmax_list", ":", "\n", "        ", "return", "rtn_idx", ",", "slist", "\n", "", "else", ":", "\n", "        ", "return", "rtn_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.getSoftmaxList": [[43, 48], ["softmax_list.append", "numpy.exp"], "function", ["None"], ["", "", "def", "getSoftmaxList", "(", "value_list", ",", "strict", ")", ":", "\n", "    ", "softmax_list", "=", "[", "]", "\n", "for", "value", "in", "value_list", ":", "\n", "        ", "softmax_list", ".", "append", "(", "np", ".", "exp", "(", "value", "/", "strict", ")", ")", "\n", "", "return", "softmax_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.corpus_reader.CorpusReader.__init__": [[10, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_path", ",", "parse_type", "=", "None", ")", ":", "\n", "        ", "self", ".", "base_path", "=", "base_path", "\n", "self", ".", "parse_type", "=", "parse_type", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.corpus_reader.CorpusReader.getDocs": [[14, 32], ["os.split", "os.split", "open", "open.readlines", "open.close", "print", "exit", "[].split", "range", "len", "docs[].strip", "line.split"], "methods", ["None"], ["", "def", "getDocs", "(", "self", ",", "path", ")", ":", "\n", "        ", "ele", "=", "path", ".", "split", "(", "'/'", ")", "\n", "dataset", "=", "ele", "[", "-", "3", "]", "\n", "topic", "=", "ele", "[", "-", "2", "]", "\n", "docs", "=", "None", "\n", "\n", "ff", "=", "open", "(", "DOC_SEQUENCE_PATH", ",", "'r'", ")", "\n", "for", "line", "in", "ff", ".", "readlines", "(", ")", ":", "\n", "            ", "if", "'{};{}'", ".", "format", "(", "dataset", ",", "topic", ")", "in", "line", ":", "\n", "                ", "docs", "=", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", "';'", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "docs", ")", ")", ":", "\n", "                    ", "docs", "[", "ii", "]", "=", "docs", "[", "ii", "]", ".", "strip", "(", ")", "\n", "", "return", "docs", "\n", "\n", "", "", "ff", ".", "close", "(", ")", "\n", "if", "docs", "is", "None", ":", "\n", "            ", "print", "(", "'INVALID PATH: {}'", ".", "format", "(", "path", ")", ")", "\n", "exit", "(", "11", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.corpus_reader.CorpusReader.load_processed": [[33, 49], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "corpus_reader.CorpusReader.getDocs", "data.append", "codecs.open", "fp.read().splitlines", "re.search", "fp.read"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.corpus_reader.CorpusReader.getDocs"], ["", "", "def", "load_processed", "(", "self", ",", "path", ",", "summary_len", "=", "None", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "\n", "if", "summary_len", "is", "not", "None", ":", "\n", "            ", "docs", "=", "os", ".", "listdir", "(", "path", ")", "\n", "summaries", "=", "[", "model", "for", "model", "in", "docs", "if", "re", ".", "search", "(", "\"M\\.%s\\.\"", "%", "(", "summary_len", ")", ",", "model", ")", "]", "\n", "docs", "=", "summaries", "\n", "", "else", ":", "\n", "            ", "docs", "=", "self", ".", "getDocs", "(", "path", ")", "\n", "\n", "", "for", "doc_name", "in", "docs", ":", "\n", "            ", "filename", "=", "\"%s/%s\"", "%", "(", "path", ",", "doc_name", ")", "\n", "with", "codecs", ".", "open", "(", "filename", ",", "'r'", ",", "'utf-8'", ")", "as", "fp", ":", "\n", "                ", "text", "=", "fp", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "data", ".", "append", "(", "(", "filename", ",", "text", ")", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.corpus_reader.CorpusReader.get_data": [[50, 74], ["os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "sorted", "os.join", "os.join", "os.join", "os.join", "corpus_reader.CorpusReader.load_processed", "corpus_reader.CorpusReader.load_processed"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.corpus_reader.CorpusReader.load_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.corpus_reader.CorpusReader.load_processed"], ["", "def", "get_data", "(", "self", ",", "corpus_name", ",", "summary_len", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        generator function that returns a iterable tuple which contains\n\n        :rtype: tuple consisting of topic, contained documents, and contained summaries\n        :param corpus_name: \n        :param summary_len:\n        \"\"\"", "\n", "corpus_base_dir", "=", "path", ".", "join", "(", "self", ".", "base_path", ",", "corpus_name", ")", "\n", "\n", "docs_directory_name", "=", "\"docs\"", "\n", "models_directory_name", "=", "\"summaries\"", "\n", "if", "self", ".", "parse_type", "==", "\"parse\"", ":", "\n", "            ", "docs_directory_name", "=", "\"docs.parsed\"", "\n", "models_directory_name", "=", "\"summaries.parsed\"", "\n", "\n", "", "dir_listing", "=", "os", ".", "listdir", "(", "corpus_base_dir", ")", "\n", "for", "ctopic", "in", "sorted", "(", "dir_listing", ")", ":", "\n", "            ", "docs_path", "=", "path", ".", "join", "(", "corpus_base_dir", ",", "ctopic", ",", "docs_directory_name", ")", "\n", "summary_path", "=", "path", ".", "join", "(", "corpus_base_dir", ",", "ctopic", ",", "models_directory_name", ")", "\n", "\n", "docs", "=", "self", ".", "load_processed", "(", "docs_path", ")", "\n", "summaries", "=", "self", ".", "load_processed", "(", "summary_path", ",", "summary_len", ")", "\n", "yield", "ctopic", ",", "docs", ",", "summaries", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.loadEmbeddings.LoadEmbeddings.__init__": [[8, 12], ["loadEmbeddings.LoadEmbeddings.loadEmbeddings"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.loadEmbeddings.LoadEmbeddings.loadEmbeddings"], ["    ", "def", "__init__", "(", "self", ",", "filepath", ",", "data_path", ",", "vocab_size", ",", "embedding_size", "=", "300", ",", "binary_val", "=", "True", ")", ":", "\n", "        ", "self", ".", "vocab_dict", "=", "{", "}", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "loadEmbeddings", "(", "filepath", ",", "data_path", ",", "vocab_size", ",", "binary_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.loadEmbeddings.LoadEmbeddings.convertToNumpy": [[13, 15], ["numpy.array", "float"], "methods", ["None"], ["", "def", "convertToNumpy", "(", "self", ",", "vector", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "vector", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.loadEmbeddings.LoadEmbeddings.loadEmbeddings": [[16, 33], ["os.path.normpath", "os.path.normpath", "os.path.normpath", "os.path.normpath", "numpy.memmap", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "print", "print", "gensim.models.KeyedVectors.load_word2vec_format", "numpy.memmap", "os.path.normpath", "os.path.normpath", "os.path.normpath", "os.path.normpath", "codecs.open", "open", "sorted", "os.path.normpath", "os.path.normpath", "os.path.normpath", "os.path.normpath", "x.strip", "enumerate", "os.path.normpath", "os.path.normpath", "os.path.normpath", "os.path.normpath", "numpy.memmap.write", "f.readlines", "gensim.models.KeyedVectors.load_word2vec_format.vocab.items", "w.encode"], "methods", ["None"], ["", "def", "loadEmbeddings", "(", "self", ",", "filepath", ",", "data_path", ",", "vocab_size", ",", "binary_val", ")", ":", "\n", "        ", "embed_short", "=", "os", ".", "path", ".", "normpath", "(", "\"%s/embed.dat\"", "%", "data_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "embed_short", ")", ":", "\n", "            ", "print", "(", "\"Caching word embeddings in memmapped format...\"", ")", "\n", "print", "(", "binary_val", ",", "filepath", ")", "\n", "wv", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "\"%s\"", "%", "(", "filepath", ")", ",", "binary", "=", "binary_val", ")", "\n", "fp", "=", "np", ".", "memmap", "(", "embed_short", ",", "dtype", "=", "np", ".", "double", ",", "mode", "=", "'w+'", ",", "shape", "=", "wv", ".", "syn0", ".", "shape", ")", "\n", "fp", "[", ":", "]", "=", "wv", ".", "syn0", "[", ":", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "normpath", "(", "\"%s/embed.vocab\"", "%", "data_path", ")", ",", "\"w\"", ")", "as", "fp", ":", "\n", "                ", "for", "_", ",", "w", "in", "sorted", "(", "(", "voc", ".", "index", ",", "word", ")", "for", "word", ",", "voc", "in", "wv", ".", "vocab", ".", "items", "(", ")", ")", ":", "\n", "                    ", "fp", ".", "write", "(", "\"%s\\n\"", "%", "(", "w", ".", "encode", "(", "\"utf8\"", ")", ")", ")", "\n", "", "", "del", "fp", ",", "wv", "\n", "\n", "", "self", ".", "W", "=", "np", ".", "memmap", "(", "os", ".", "path", ".", "normpath", "(", "\"%s/embed.dat\"", "%", "data_path", ")", ",", "dtype", "=", "np", ".", "double", ",", "mode", "=", "\"r\"", ",", "shape", "=", "(", "vocab_size", ",", "self", ".", "embedding_size", ")", ")", "\n", "with", "codecs", ".", "open", "(", "os", ".", "path", ".", "normpath", "(", "\"%s/embed.vocab\"", "%", "data_path", ")", ",", "'r'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "vocab_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "self", ".", "vocab_dict", "=", "{", "w", ":", "k", "for", "k", ",", "w", "in", "enumerate", "(", "vocab_list", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.loadEmbeddings.LoadEmbeddings.word2embedd": [[34, 40], ["word.lower.lower.lower"], "methods", ["None"], ["", "def", "word2embedd", "(", "self", ",", "word", ")", ":", "\n", "        ", "word", "=", "word", ".", "lower", "(", ")", "\n", "if", "word", "in", "self", ".", "vocab_dict", ":", "\n", "            ", "return", "self", ".", "W", "[", "self", ".", "vocab_dict", "[", "word", "]", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "W", "[", "self", ".", "vocab_dict", "[", "\"unknown\"", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.loadEmbeddings.LoadEmbeddings.isKnown": [[41, 44], ["word.lower.lower.lower"], "methods", ["None"], ["", "", "def", "isKnown", "(", "self", ",", "word", ")", ":", "\n", "        ", "word", "=", "word", ".", "lower", "(", ")", "\n", "return", "word", "in", "self", ".", "vocab_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.evaluator.evaluateReward": [[8, 51], ["sklearn.metrics.mean_squared_error", "getSoftmaxList", "getSoftmaxList", "scipy.entropy", "sorted", "sorted", "scipy.kendalltau", "scipy.pearsonr", "scipy.pearsonr", "sorted", "summariser.utils.rank_metrics.ndcg_at_k", "summariser.utils.rank_metrics.ndcg_at_k", "summariser.utils.rank_metrics.ndcg_at_k", "summariser.utils.rank_metrics.ndcg_at_k", "summariser.utils.rank_metrics.ndcg_at_k", "summariser.utils.rank_metrics.ndcg_at_k", "sorted.index", "sorted.index", "int", "int", "int", "int", "int", "len", "learnt_values.index", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.getSoftmaxList", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.getSoftmaxList", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.ndcg_at_k", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.ndcg_at_k", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.ndcg_at_k", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.ndcg_at_k", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.ndcg_at_k", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.rank_metrics.ndcg_at_k"], ["def", "evaluateReward", "(", "learnt_values", ",", "ref_values", ")", ":", "\n", "    ", "metrics_dic", "=", "{", "}", "\n", "\n", "### compute the absolute errors", "\n", "mse", "=", "mean_squared_error", "(", "ref_values", ",", "learnt_values", ")", "\n", "metrics_dic", "[", "'mse'", "]", "=", "mse", "\n", "\n", "### compute KL divergence", "\n", "prob_optimal", "=", "getSoftmaxList", "(", "ref_values", ",", "1.0", ")", "\n", "prob_learnt", "=", "getSoftmaxList", "(", "learnt_values", ",", "1.0", ")", "\n", "kld", "=", "stats", ".", "entropy", "(", "prob_optimal", ",", "prob_learnt", ")", "\n", "metrics_dic", "[", "'kld'", "]", "=", "kld", "\n", "\n", "### compute Kendall's tau, Spearman's rho and Pearson correlation coefficient", "\n", "sorted_list", "=", "sorted", "(", "learnt_values", ")", "\n", "new_reward_ranking", "=", "[", "sorted_list", ".", "index", "(", "i", ")", "for", "i", "in", "learnt_values", "]", "\n", "sorted_list", "=", "sorted", "(", "ref_values", ")", "\n", "true_reward_ranking", "=", "[", "sorted_list", ".", "index", "(", "i", ")", "for", "i", "in", "ref_values", "]", "\n", "tau", ",", "_", "=", "stats", ".", "kendalltau", "(", "new_reward_ranking", ",", "true_reward_ranking", ")", "\n", "rho", ",", "_", "=", "stats", ".", "pearsonr", "(", "new_reward_ranking", ",", "true_reward_ranking", ")", "\n", "pcc", ",", "_", "=", "stats", ".", "pearsonr", "(", "learnt_values", ",", "ref_values", ")", "\n", "metrics_dic", "[", "'tau'", "]", "=", "tau", "\n", "metrics_dic", "[", "'rho'", "]", "=", "rho", "\n", "metrics_dic", "[", "'pcc'", "]", "=", "pcc", "\n", "\n", "### compute nDCG", "\n", "sorted_list", "=", "sorted", "(", "learnt_values", ",", "reverse", "=", "True", ")", "\n", "ll", "=", "[", "ref_values", "[", "learnt_values", ".", "index", "(", "ele", ")", "]", "for", "ele", "in", "sorted_list", "]", "\n", "\n", "ndcg", "=", "ndcg_at_k", "(", "ll", ",", "int", "(", "0.01", "*", "len", "(", "ll", ")", ")", ")", "\n", "metrics_dic", "[", "'ndcg_at_1%'", "]", "=", "ndcg", "\n", "ndcg", "=", "ndcg_at_k", "(", "ll", ",", "int", "(", "0.05", "*", "len", "(", "ll", ")", ")", ")", "\n", "metrics_dic", "[", "'ndcg_at_5%'", "]", "=", "ndcg", "\n", "ndcg", "=", "ndcg_at_k", "(", "ll", ",", "int", "(", "0.1", "*", "len", "(", "ll", ")", ")", ")", "\n", "metrics_dic", "[", "'ndcg_at_10%'", "]", "=", "ndcg", "\n", "ndcg", "=", "ndcg_at_k", "(", "ll", ",", "int", "(", "0.2", "*", "len", "(", "ll", ")", ")", ")", "\n", "metrics_dic", "[", "'ndcg_at_20%'", "]", "=", "ndcg", "\n", "ndcg", "=", "ndcg_at_k", "(", "ll", ",", "int", "(", "0.5", "*", "len", "(", "ll", ")", ")", ")", "\n", "metrics_dic", "[", "'ndcg_at_50%'", "]", "=", "ndcg", "\n", "ndcg", "=", "ndcg_at_k", "(", "ll", ",", "len", "(", "ll", ")", ")", "\n", "metrics_dic", "[", "'ndcg_at_all'", "]", "=", "ndcg", "\n", "\n", "return", "metrics_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.evaluator.evaluateSummary": [[53, 64], ["summariser.rouge.rouge.Rouge", "summariser.rouge.rouge.Rouge.", "summariser.rouge.rouge.Rouge.clean"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.clean"], ["", "def", "evaluateSummary", "(", "cand", ",", "model", ",", "len", "=", "100", ")", ":", "\n", "    ", "rouge_scorer", "=", "Rouge", "(", "ROUGE_DIR", ",", "BASE_DIR", ",", "True", ")", "\n", "r1", ",", "r2", ",", "rl", ",", "rsu4", "=", "rouge_scorer", "(", "cand", ",", "[", "model", "]", ",", "len", ")", "\n", "rouge_scorer", ".", "clean", "(", ")", "\n", "dic", "=", "{", "}", "\n", "dic", "[", "'ROUGE-1'", "]", "=", "r1", "\n", "dic", "[", "'ROUGE-2'", "]", "=", "r2", "\n", "dic", "[", "'ROUGE-L'", "]", "=", "rl", "\n", "dic", "[", "'ROUGE-SU4'", "]", "=", "rsu4", "\n", "dic", "[", "'WeightedSum'", "]", "=", "3.33", "*", "(", "r1", "/", ".47", "+", "r2", "/", ".212", "+", "rsu4", "/", ".185", ")", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.reader.read_csv": [[6, 11], ["open", "csv.reader"], "function", ["None"], ["def", "read_csv", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "csvfile", ",", "delimiter", "=", "\",\"", ",", "quotechar", "=", "'\"'", ")", "\n", "rows", "=", "[", "row", "for", "row", "in", "reader", "]", "\n", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.reader.read_file": [[12, 15], ["codecs.open", "fp.read"], "function", ["None"], ["", "", "def", "read_file", "(", "filename", ")", ":", "\n", "    ", "with", "codecs", ".", "open", "(", "filename", ",", "'r'", ",", "'utf-8'", ",", "errors", "=", "'ignore'", ")", "as", "fp", ":", "\n", "        ", "return", "fp", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.reader.readSampleSummaries": [[16, 21], ["reader.readSummaries", "reader.readSummaries"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.reader.readSummaries", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.reader.readSummaries"], ["", "", "def", "readSampleSummaries", "(", "dataset", ",", "topic", ",", "sample_num", "=", "9999", ")", ":", "\n", "    ", "summaries", ",", "ref_values", "=", "readSummaries", "(", "dataset", ",", "topic", ",", "'rouge'", ",", "sample_num", ")", "\n", "summaries", ",", "heu_values", "=", "readSummaries", "(", "dataset", ",", "topic", ",", "'heuristic'", ",", "sample_num", ")", "\n", "\n", "return", "summaries", ",", "ref_values", ",", "heu_values", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.reader.readSummaries": [[22, 97], ["os.path.join", "open", "normaliseList", "range", "len", "normaliseList", "ff.readline", "[].split", "summary_list.append", "float", "value_list.append", "ff.readline", "acts.append", "int", "ff.readline().split", "int", "[].strip", "ff.readline.split", "model_names.append", "ff.readline", "[].split", "[].split", "summary_list.append", "ff.readline.split", "acts.append", "ff.readline.split", "float", "float", "float", "float.append", "int", "value_list.append", "ff.readline.split", "ff.readline.split", "scores[].split", "scores[].split", "scores[].split"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "readSummaries", "(", "dataset", ",", "topic", ",", "reward_type", ",", "sample_num", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "SUMMARY_DB_DIR", ",", "dataset", ",", "topic", ",", "reward_type", ")", "\n", "summary_list", "=", "[", "]", "\n", "value_list", "=", "[", "]", "\n", "model_names", "=", "[", "]", "\n", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "ff", ":", "\n", "        ", "if", "reward_type", "==", "'heuristic'", ":", "\n", "            ", "cnt", "=", "0", "\n", "while", "cnt", "<", "sample_num", ":", "\n", "                ", "line", "=", "ff", ".", "readline", "(", ")", "\n", "if", "line", "==", "''", ":", "\n", "                    ", "break", "\n", "", "if", "'actions'", "not", "in", "line", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "cnt", "+=", "1", "\n", "nums_str", "=", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "\n", "acts", "=", "[", "]", "\n", "for", "nn", "in", "nums_str", ":", "\n", "                        ", "acts", ".", "append", "(", "int", "(", "nn", ")", ")", "\n", "", "summary_list", ".", "append", "(", "acts", ")", "\n", "value", "=", "float", "(", "ff", ".", "readline", "(", ")", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "value_list", ".", "append", "(", "value", ")", "\n", "", "", "", "elif", "reward_type", "==", "'rouge'", ":", "\n", "            ", "flag", "=", "False", "\n", "value", "=", "[", "]", "\n", "idx", "=", "-", "1", "\n", "cnt", "=", "0", "\n", "while", "cnt", "<", "sample_num", ":", "\n", "                ", "line", "=", "ff", ".", "readline", "(", ")", "\n", "if", "line", "==", "''", ":", "\n", "                    ", "break", "\n", "", "if", "'model'", "not", "in", "line", "and", "not", "flag", ":", "\n", "                    ", "continue", "\n", "", "elif", "'model'", "in", "line", ":", "\n", "                    ", "idx", "=", "int", "(", "line", ".", "split", "(", "':'", ")", "[", "0", "]", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "\n", "name", "=", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "strip", "(", ")", "\n", "if", "name", "not", "in", "model_names", ":", "\n", "                        ", "model_names", ".", "append", "(", "name", ")", "\n", "", "flag", "=", "True", "\n", "", "elif", "'model'", "not", "in", "line", "and", "flag", ":", "\n", "                    ", "if", "'action'", "in", "line", "and", "idx", "==", "0", ":", "\n", "                        ", "nums_str", "=", "line", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "\n", "acts", "=", "[", "]", "\n", "for", "nn", "in", "nums_str", ":", "\n", "                            ", "acts", ".", "append", "(", "int", "(", "nn", ")", ")", "\n", "", "summary_list", ".", "append", "(", "acts", ")", "\n", "", "elif", "'R1'", "in", "line", ":", "\n", "                        ", "scores", "=", "line", ".", "split", "(", "';'", ")", "\n", "R1", "=", "float", "(", "scores", "[", "0", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "R2", "=", "float", "(", "scores", "[", "1", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "# R3 = float(scores[2].split(':')[1])", "\n", "# R4 = float(scores[3].split(':')[1])", "\n", "# RL = float(scores[4].split(':')[1])", "\n", "RSU", "=", "float", "(", "scores", "[", "5", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "vv", "=", "(", "R1", "/", "0.48", "+", "R2", "/", "0.212", "+", "RSU", "/", "0.195", ")", "\n", "value", ".", "append", "(", "vv", ")", "\n", "", "elif", "'action'", "not", "in", "line", "and", "'R1'", "not", "in", "line", ":", "\n", "                        ", "flag", "=", "False", "\n", "value_list", ".", "append", "(", "value", ")", "\n", "value", "=", "[", "]", "\n", "cnt", "+=", "1", "\n", "\n", "# normalise", "\n", "", "", "", "", "", "norm_value_dic", "=", "{", "}", "\n", "if", "reward_type", "==", "'heuristic'", ":", "\n", "        ", "norm_value_dic", "=", "normaliseList", "(", "value_list", ")", "\n", "", "else", ":", "\n", "        ", "assert", "reward_type", "==", "'rouge'", "\n", "for", "ii", "in", "range", "(", "len", "(", "value_list", "[", "0", "]", ")", ")", ":", "\n", "            ", "temp_list", "=", "[", "x", "[", "ii", "]", "for", "x", "in", "value_list", "]", "\n", "norm_value_dic", "[", "model_names", "[", "ii", "]", "]", "=", "normaliseList", "(", "temp_list", ")", "\n", "\n", "", "", "return", "summary_list", ",", "norm_value_dic", "", "", ""]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.oracle.lno_ref_values.SimulatedUser.__init__": [[7, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ref_values", ",", "m", "=", "2.5", ")", ":", "\n", "        ", "self", ".", "ref_values", "=", "ref_values", "\n", "self", ".", "temperature", "=", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.oracle.lno_ref_values.SimulatedUser.getPref": [[11, 18], ["summariser.utils.misc.sigmoid", "random.random"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.sigmoid"], ["", "def", "getPref", "(", "self", ",", "idx1", ",", "idx2", ")", ":", "\n", "        ", "prob", "=", "sigmoid", "(", "self", ".", "ref_values", "[", "idx1", "]", "-", "self", ".", "ref_values", "[", "idx2", "]", ",", "self", ".", "temperature", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<=", "prob", ":", "\n", "            ", "return", "0", "## summary1 is preferred", "\n", "", "else", ":", "\n", "            ", "return", "1", "## summary2 is preferred", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.oracle.lno.SimulatedUser.__init__": [[7, 12], ["summariser.rouge.rouge.Rouge"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "len", ",", "temp", "=", "2.5", ")", ":", "\n", "        ", "self", ".", "rouge_score", "=", "Rouge", "(", "ROUGE_DIR", ",", "BASE_DIR", ",", "False", ")", "\n", "self", ".", "temperature", "=", "temp", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "summary_len", "=", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.oracle.lno.SimulatedUser.getPref": [[13, 26], ["lno.SimulatedUser.rouge_score", "lno.SimulatedUser.rouge_score", "lno.SimulatedUser.rouge_score.clean", "random.random", "math.exp"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.clean"], ["", "def", "getPref", "(", "self", ",", "sum1", ",", "sum2", ")", ":", "\n", "        ", "R11", ",", "R12", ",", "R1SU", "=", "self", ".", "rouge_score", "(", "sum1", ",", "self", ".", "model", ",", "self", ".", "summary_len", ")", "\n", "R21", ",", "R22", ",", "R2SU", "=", "self", ".", "rouge_score", "(", "sum2", ",", "self", ".", "model", ",", "self", ".", "summary_len", ")", "\n", "self", ".", "rouge_score", ".", "clean", "(", ")", "\n", "score1", "=", "R11", "/", "0.47", "+", "R12", "/", "0.212", "+", "R1SU", "/", "0.185", "\n", "score2", "=", "R21", "/", "0.47", "+", "R22", "/", "0.212", "+", "R2SU", "/", "0.185", "\n", "\n", "if", "random", ".", "random", "(", ")", ">", "1.", "/", "(", "1.", "+", "math", ".", "exp", "(", "(", "score2", "-", "score1", ")", "/", "self", ".", "temperature", ")", ")", ":", "\n", "# prefers summary 1", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "# prefers summary 2", "\n", "            ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.__init__": [[13, 24], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "tempfile.mkdtemp", "repr", "time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rouge_dir", ",", "base_dir", ",", "rouge_l", "=", "True", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "ROUGE_DIR", "=", "rouge_dir", "\n", "self", ".", "reference_summary_temp_filename", "=", "\"reference_summary.txt\"", "\n", "config_file", "=", "\"config.xml\"", "\n", "self", ".", "temp_dir", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'rouge_temp_files'", ",", "tempfile", ".", "mkdtemp", "(", ")", "+", "repr", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "self", ".", "temp_config_file", "=", "path", ".", "join", "(", "self", ".", "temp_dir", ",", "config_file", ")", "\n", "self", ".", "rouge_l", "=", "rouge_l", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "if", "not", "path", ".", "exists", "(", "self", ".", "temp_dir", ")", ":", "\n", "            ", "makedirs", "(", "self", ".", "temp_dir", ")", "\n", "# print(\"created Rouge instance with tmp: '%s'\" % self.temp_dir)", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.create_config": [[29, 52], ["enumerate", "os.path.basename", "str"], "methods", ["None"], ["", "", "def", "create_config", "(", "self", ",", "peers", ",", "models", ",", "models_dir", ")", ":", "\n", "        ", "config_file", "=", "\"<EVAL ID=\\\"1\\\">\\n\"", "\n", "config_file", "+=", "\"<PEER-ROOT>\\n\"", "\n", "config_file", "+=", "self", ".", "temp_dir", "+", "\"\\n\"", "\n", "config_file", "+=", "\"</PEER-ROOT>\\n\"", "\n", "config_file", "+=", "\"<MODEL-ROOT>\\n\"", "\n", "config_file", "+=", "models_dir", "+", "\"\\n\"", "\n", "config_file", "+=", "\"</MODEL-ROOT>\\n\"", "\n", "\n", "config_file", "+=", "\"<INPUT-FORMAT TYPE=\\\"SPL\\\">\\n</INPUT-FORMAT>\\n\"", "\n", "config_file", "+=", "\"<PEERS>\\n\"", "\n", "for", "i", ",", "peer", "in", "enumerate", "(", "peers", ")", ":", "\n", "            ", "config_file", "+=", "\"<P ID=\\\"\"", "+", "str", "(", "i", "+", "1", ")", "+", "\"\\\">\"", "+", "peer", "+", "\"</P>\\n\"", "\n", "", "config_file", "+=", "\"</PEERS>\\n\"", "\n", "\n", "config_file", "+=", "\"<MODELS>\\n\"", "\n", "for", "model", ",", "_", "in", "models", ":", "\n", "            ", "model_name", "=", "path", ".", "basename", "(", "model", ")", "\n", "config_file", "+=", "\"<M ID=\\\"\"", "+", "model_name", "[", "-", "1", "]", "+", "\"\\\">\"", "+", "model_name", "+", "\"</M>\\n\"", "\n", "", "config_file", "+=", "\"</MODELS>\\n\"", "\n", "config_file", "+=", "\"</EVAL>\\n\"", "\n", "\n", "return", "config_file", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.extract_results": [[53, 73], ["result.split", "re.search", "re.search.group", "re.search.group", "re.search.group", "re.search.group"], "methods", ["None"], ["", "def", "extract_results", "(", "self", ",", "result", ")", ":", "\n", "        ", "lines", "=", "result", ".", "split", "(", "\"\\n\"", ")", "\n", "#print('rouge result lines:\\n')", "\n", "#for line in lines:", "\n", "#print(line)", "\n", "result_dict", "=", "{", "}", "\n", "prev_exp", "=", "\"\"", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "x", "=", "re", ".", "search", "(", "\"([\\w\\d]+) (ROUGE-[\\w\\d][\\w]?[*]?) Average_(\\w): (\\d\\.\\d*) .+\"", ",", "line", ")", "\n", "if", "x", ":", "\n", "                ", "exp_no", ",", "rouge_name", ",", "stype", ",", "score", "=", "x", ".", "group", "(", "1", ")", ",", "x", ".", "group", "(", "2", ")", ",", "x", ".", "group", "(", "3", ")", ",", "x", ".", "group", "(", "4", ")", "\n", "index", "=", "exp_no", "\n", "rouge_type", "=", "rouge_name", "+", "\" \"", "+", "stype", "\n", "if", "exp_no", "!=", "prev_exp", ":", "\n", "                    ", "if", "index", "not", "in", "result_dict", ":", "\n", "                        ", "result_dict", "[", "index", "]", "=", "{", "}", "\n", "", "result_dict", "[", "index", "]", "[", "\"Experiment\"", "]", "=", "exp_no", "\n", "prev_exp", "=", "exp_no", "\n", "", "result_dict", "[", "index", "]", "[", "rouge_type", "]", "=", "score", "\n", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.execute_rouge": [[74, 79], ["subprocess.check_output"], "methods", ["None"], ["", "def", "execute_rouge", "(", "self", ")", ":", "\n", "        ", "cmd", "=", "\"perl \"", "+", "self", ".", "ROUGE_DIR", "+", "\"ROUGE-1.5.5.pl -e \"", "+", "self", ".", "ROUGE_DIR", "+", "\"data \"", "+", "self", ".", "ROUGE_ARGS", "+", "' -a '", "+", "self", ".", "temp_config_file", "\n", "#print(\"execute_rouge command is\" , cmd)", "\n", "\n", "return", "check_output", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.clean": [[80, 82], ["shutil.rmtree"], "methods", ["None"], ["", "def", "clean", "(", "self", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "self", ".", "temp_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.get_scores": [[83, 111], ["summariser.utils.writer.write_to_file", "os.path.dirname", "rouge.Rouge.create_config", "summariser.utils.writer.write_to_file", "rouge.Rouge.execute_rouge", "rouge.Rouge.extract_results", "float", "float", "float", "os.path.join", "rouge.Rouge.decode", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_to_file", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.create_config", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_to_file", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.execute_rouge", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.extract_results"], ["", "def", "get_scores", "(", "self", ",", "summary", ",", "models", ")", ":", "\n", "        ", "write_to_file", "(", "summary", ",", "path", ".", "join", "(", "self", ".", "temp_dir", ",", "self", ".", "reference_summary_temp_filename", ")", ",", "True", ")", "\n", "\n", "models_dir", "=", "path", ".", "dirname", "(", "models", "[", "0", "]", "[", "0", "]", ")", "\n", "config", "=", "self", ".", "create_config", "(", "[", "self", ".", "reference_summary_temp_filename", "]", ",", "models", ",", "models_dir", ")", "\n", "\n", "write_to_file", "(", "config", ",", "self", ".", "temp_config_file", ",", "True", ")", "\n", "\n", "result", "=", "self", ".", "execute_rouge", "(", ")", "\n", "\n", "result_dict", "=", "self", ".", "extract_results", "(", "result", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "\n", "R1score", "=", "float", "(", "result_dict", "[", "\"1\"", "]", "[", "'ROUGE-1 R'", "]", ")", "\n", "R2score", "=", "float", "(", "result_dict", "[", "\"1\"", "]", "[", "'ROUGE-2 R'", "]", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "R3score", "=", "float", "(", "result_dict", "[", "\"1\"", "]", "[", "'ROUGE-3 R'", "]", ")", "\n", "R4score", "=", "float", "(", "result_dict", "[", "\"1\"", "]", "[", "'ROUGE-4 R'", "]", ")", "\n", "", "if", "self", ".", "rouge_l", ":", "\n", "            ", "RLscore", "=", "float", "(", "result_dict", "[", "\"1\"", "]", "[", "'ROUGE-L R'", "]", ")", "\n", "", "RSU4score", "=", "float", "(", "result_dict", "[", "\"1\"", "]", "[", "'ROUGE-SU* R'", "]", ")", "\n", "if", "self", ".", "verbose", "and", "self", ".", "rouge_l", ":", "\n", "            ", "return", "R1score", ",", "R2score", ",", "R3score", ",", "R4score", ",", "RLscore", ",", "RSU4score", "\n", "", "elif", "self", ".", "verbose", "and", "not", "self", ".", "rouge_l", ":", "\n", "            ", "return", "R1score", ",", "R2score", ",", "R3score", ",", "R4score", ",", "RSU4score", "\n", "", "elif", "not", "self", ".", "verbose", "and", "self", ".", "rouge_l", ":", "\n", "            ", "return", "R1score", ",", "R2score", ",", "RLscore", ",", "RSU4score", "\n", "", "else", ":", "\n", "            ", "return", "R1score", ",", "R2score", ",", "RSU4score", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.__call__": [[112, 121], ["rouge.Rouge.get_scores"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.get_scores"], ["", "", "def", "__call__", "(", "self", ",", "summary", ",", "models", ",", "summary_len", ")", ":", "\n", "        ", "if", "self", ".", "rouge_l", "==", "False", ":", "\n", "            ", "self", ".", "ROUGE_ARGS", "=", "'-n 4 -m -x -c 95 -r 1000 -f A -p 0.5 -t 0 -a -2 -4 -u -l %s'", "%", "(", "summary_len", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ROUGE_ARGS", "=", "'-n 4 -m -c 95 -r 1000 -f A -p 0.5 -t 0 -a -2 -4 -u -l %s'", "%", "(", "summary_len", ")", "\n", "\n", "#self.ROUGE_ARGS = '-m -s -p 0 %s' % (summary_len)", "\n", "\n", "", "return", "self", ".", "get_scores", "(", "summary", ",", "models", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.__init__.Rouge.__init__": [[3, 5], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.random_querier.RandomQuerier.__init__": [[8, 13], ["LogisticRewardLearner"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "summary_vectors", ",", "heuristic_values", ",", "learnt_weight", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "summary_vectors", "=", "summary_vectors", "\n", "self", ".", "reward_learner", "=", "LogisticRewardLearner", "(", ")", "\n", "self", ".", "heuristics", "=", "heuristic_values", "\n", "self", ".", "learnt_weight", "=", "learnt_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.random_querier.RandomQuerier.inLog": [[14, 22], ["None"], "methods", ["None"], ["", "def", "inLog", "(", "self", ",", "sum1", ",", "sum2", ",", "log", ")", ":", "\n", "        ", "for", "entry", "in", "log", ":", "\n", "            ", "if", "[", "sum1", ",", "sum2", "]", "in", "entry", ":", "\n", "                ", "return", "True", "\n", "", "elif", "[", "sum2", ",", "sum1", "]", "in", "entry", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.random_querier.RandomQuerier.getQuery": [[23, 33], ["len", "random.randint", "random.randint", "random_querier.RandomQuerier.inLog", "random.randint"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.inLog"], ["", "def", "getQuery", "(", "self", ",", "log", ")", ":", "\n", "        ", "summary_num", "=", "len", "(", "self", ".", "summary_vectors", ")", "\n", "rand1", "=", "random", ".", "randint", "(", "0", ",", "summary_num", "-", "1", ")", "\n", "rand2", "=", "random", ".", "randint", "(", "0", ",", "summary_num", "-", "1", ")", "\n", "\n", "### ensure the sampled pair has not been queried before", "\n", "while", "rand2", "==", "rand1", "or", "self", ".", "inLog", "(", "rand1", ",", "rand2", ",", "log", ")", ":", "\n", "            ", "rand2", "=", "random", ".", "randint", "(", "0", ",", "summary_num", "-", "1", ")", "\n", "\n", "", "return", "rand1", ",", "rand2", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.random_querier.RandomQuerier.updateRanker": [[34, 37], ["random_querier.RandomQuerier.reward_learner.train", "random_querier.RandomQuerier.getReward"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.train", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getReward"], ["", "def", "updateRanker", "(", "self", ",", "pref_log", ")", ":", "\n", "        ", "self", ".", "reward_learner", ".", "train", "(", "pref_log", ",", "self", ".", "summary_vectors", ")", "\n", "self", ".", "learnt_values", "=", "self", ".", "getReward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.random_querier.RandomQuerier.getReward": [[38, 41], ["summariser.utils.misc.normaliseList", "np.dot"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "getReward", "(", "self", ")", ":", "\n", "        ", "values", "=", "[", "np", ".", "dot", "(", "self", ".", "reward_learner", ".", "weights", ",", "vv", ")", "for", "vv", "in", "self", ".", "summary_vectors", "]", "\n", "return", "normaliseList", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.random_querier.RandomQuerier.getMixReward": [[42, 48], ["summariser.utils.misc.normaliseList", "np.array", "np.array"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "getMixReward", "(", "self", ",", "learnt_weight", "=", "-", "1", ")", ":", "\n", "        ", "if", "learnt_weight", "==", "-", "1", ":", "\n", "            ", "learnt_weight", "=", "self", ".", "learnt_weight", "\n", "\n", "", "mix_values", "=", "np", ".", "array", "(", "self", ".", "learnt_values", ")", "*", "learnt_weight", "+", "np", ".", "array", "(", "self", ".", "heuristics", ")", "*", "(", "1", "-", "learnt_weight", ")", "\n", "return", "normaliseList", "(", "mix_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.gibbs_querier.GibbsQuerier.__init__": [[7, 13], ["LogisticRewardLearner", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "summary_vectors", ",", "heuristic_values", ",", "learnt_weight", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "summary_vectors", "=", "summary_vectors", "\n", "self", ".", "reward_learner", "=", "LogisticRewardLearner", "(", ")", "\n", "self", ".", "learnt_values", "=", "[", "0.", "]", "*", "len", "(", "summary_vectors", ")", "\n", "self", ".", "heuristics", "=", "heuristic_values", "\n", "self", ".", "learnt_weight", "=", "learnt_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.gibbs_querier.GibbsQuerier.inLog": [[14, 22], ["None"], "methods", ["None"], ["", "def", "inLog", "(", "self", ",", "sum1", ",", "sum2", ",", "log", ")", ":", "\n", "        ", "for", "entry", "in", "log", ":", "\n", "            ", "if", "[", "sum1", ",", "sum2", "]", "in", "entry", ":", "\n", "                ", "return", "True", "\n", "", "elif", "[", "sum2", ",", "sum1", "]", "in", "entry", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.gibbs_querier.GibbsQuerier.getQuery": [[24, 39], ["gibbs_querier.GibbsQuerier.getMixReward", "summariser.utils.misc.softmaxSample", "summariser.utils.misc.softmaxSample", "gibbs_querier.GibbsQuerier.inLog", "summariser.utils.misc.softmaxSample", "summariser.utils.misc.softmaxSample", "random.random"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getMixReward", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.softmaxSample", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.softmaxSample", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.inLog", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.softmaxSample", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.softmaxSample"], ["", "def", "getQuery", "(", "self", ",", "log", ")", ":", "\n", "        ", "mix_values", "=", "self", ".", "getMixReward", "(", ")", "\n", "\n", "sum_idx1", "=", "softmaxSample", "(", "mix_values", ",", "1.0", ")", "\n", "sum_idx2", "=", "softmaxSample", "(", "mix_values", ",", "-", "1.0", ")", "\n", "\n", "### ensure the sampled pair has not been queried before", "\n", "while", "(", "self", ".", "inLog", "(", "sum_idx1", ",", "sum_idx2", ",", "log", ")", ")", ":", "\n", "            ", "sum_idx1", "=", "softmaxSample", "(", "mix_values", ",", "1.0", ")", "\n", "sum_idx2", "=", "softmaxSample", "(", "mix_values", ",", "-", "1.0", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "return", "sum_idx1", ",", "sum_idx2", "\n", "", "else", ":", "\n", "            ", "return", "sum_idx2", ",", "sum_idx1", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.gibbs_querier.GibbsQuerier.updateRanker": [[40, 43], ["gibbs_querier.GibbsQuerier.reward_learner.train", "gibbs_querier.GibbsQuerier.getReward"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.train", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getReward"], ["", "", "def", "updateRanker", "(", "self", ",", "pref_log", ")", ":", "\n", "        ", "self", ".", "reward_learner", ".", "train", "(", "pref_log", ",", "self", ".", "summary_vectors", ")", "\n", "self", ".", "learnt_values", "=", "self", ".", "getReward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.gibbs_querier.GibbsQuerier.getReward": [[44, 47], ["summariser.utils.misc.normaliseList", "np.dot"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "getReward", "(", "self", ")", ":", "\n", "        ", "values", "=", "[", "np", ".", "dot", "(", "self", ".", "reward_learner", ".", "weights", ",", "vv", ")", "for", "vv", "in", "self", ".", "summary_vectors", "]", "\n", "return", "normaliseList", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.gibbs_querier.GibbsQuerier.getMixReward": [[48, 55], ["summariser.utils.misc.normaliseList", "np.array", "np.array"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "getMixReward", "(", "self", ",", "learnt_weight", "=", "-", "1", ")", ":", "\n", "        ", "if", "learnt_weight", "==", "-", "1", ":", "\n", "            ", "learnt_weight", "=", "self", ".", "learnt_weight", "\n", "\n", "", "mix_values", "=", "np", ".", "array", "(", "self", ".", "learnt_values", ")", "*", "learnt_weight", "+", "np", ".", "array", "(", "self", ".", "heuristics", ")", "*", "(", "1", "-", "learnt_weight", ")", "\n", "\n", "return", "normaliseList", "(", "mix_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.logistic_reward_learner.LogisticRewardLearner.__init__": [[6, 9], ["sklearn.linear_model.LogisticRegression"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "steep", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "learner", "=", "linear_model", ".", "LogisticRegression", "(", "fit_intercept", "=", "False", ")", "\n", "self", ".", "steep", "=", "steep", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.logistic_reward_learner.LogisticRewardLearner.train": [[10, 34], ["range", "numpy.array", "numpy.array", "logistic_reward_learner.LogisticRewardLearner.learner.fit", "numpy.array", "len", "numpy.array", "numpy.array", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.array.append"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "pref_history", ",", "vector_list", ")", ":", "\n", "        ", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "pref_idx", "in", "range", "(", "len", "(", "pref_history", ")", ")", ":", "\n", "            ", "vec1", "=", "np", ".", "array", "(", "vector_list", "[", "pref_history", "[", "pref_idx", "]", "[", "0", "]", "[", "0", "]", "]", ")", "\n", "vec2", "=", "np", ".", "array", "(", "vector_list", "[", "pref_history", "[", "pref_idx", "]", "[", "0", "]", "[", "1", "]", "]", ")", "\n", "delta", "=", "self", ".", "steep", "*", "(", "vec1", "-", "vec2", ")", "\n", "preff", "=", "pref_history", "[", "pref_idx", "]", "[", "1", "]", "\n", "X", ".", "append", "(", "delta", ")", "\n", "X", ".", "append", "(", "-", "delta", ")", "\n", "#the first summary is preferred", "\n", "if", "preff", "==", "0", ":", "\n", "                ", "Y", ".", "append", "(", "1", ")", "\n", "Y", ".", "append", "(", "0", ")", "\n", "#the second summary is preferred", "\n", "", "elif", "preff", "==", "1", ":", "\n", "                ", "Y", ".", "append", "(", "0", ")", "\n", "Y", ".", "append", "(", "1", ")", "\n", "\n", "", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "\n", "self", ".", "learner", ".", "fit", "(", "X", ",", "Y", ")", "\n", "self", ".", "weights", "=", "np", ".", "array", "(", "self", ".", "learner", ".", "coef_", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.__init__": [[8, 14], ["LogisticRewardLearner", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "summary_vectors", ",", "heuristic_values", ",", "learnt_weight", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "summary_vectors", "=", "summary_vectors", "\n", "self", ".", "reward_learner", "=", "LogisticRewardLearner", "(", ")", "\n", "self", ".", "learnt_values", "=", "[", "0.", "]", "*", "len", "(", "summary_vectors", ")", "\n", "self", ".", "heuristics", "=", "heuristic_values", "\n", "self", ".", "learnt_weight", "=", "learnt_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getUncScores": [[15, 26], ["summariser.utils.misc.sigmoid", "unc_scores.append", "unc_scores.append"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.sigmoid"], ["", "def", "getUncScores", "(", "self", ",", "scores", ")", ":", "\n", "        ", "unc_scores", "=", "[", "]", "\n", "\n", "for", "vv", "in", "scores", ":", "\n", "            ", "prob", "=", "sigmoid", "(", "(", "vv", "-", "5", ")", "*", ".6", ")", "\n", "if", "prob", ">", "0.5", ":", "\n", "                ", "unc_scores", ".", "append", "(", "2", "*", "(", "1", "-", "prob", ")", ")", "\n", "", "else", ":", "\n", "                ", "unc_scores", ".", "append", "(", "2", "*", "prob", ")", "\n", "\n", "", "", "return", "unc_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.inLog": [[27, 35], ["None"], "methods", ["None"], ["", "def", "inLog", "(", "self", ",", "sum1", ",", "sum2", ",", "log", ")", ":", "\n", "        ", "for", "entry", "in", "log", ":", "\n", "            ", "if", "[", "sum1", ",", "sum2", "]", "in", "entry", ":", "\n", "                ", "return", "True", "\n", "", "elif", "[", "sum2", ",", "sum1", "]", "in", "entry", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getMostUncertainPair": [[36, 52], ["range", "len", "len", "range", "unc_scores.index", "unc_scores.index", "uncertainty_querier.UncQuerier.inLog"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.inLog"], ["", "def", "getMostUncertainPair", "(", "self", ",", "num", ",", "unc_scores", ",", "sorted_unc", ",", "log", ")", ":", "\n", "        ", "max_value", "=", "-", "999", "\n", "pair", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "if", "num", ">", "len", "(", "unc_scores", ")", ":", "\n", "            ", "num", "=", "len", "(", "unc_scores", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "num", ")", ":", "\n", "                ", "if", "sorted_unc", "[", "i", "]", "+", "sorted_unc", "[", "j", "]", ">", "max_value", ":", "\n", "                    ", "idx_i", "=", "unc_scores", ".", "index", "(", "sorted_unc", "[", "i", "]", ")", "\n", "idx_j", "=", "unc_scores", ".", "index", "(", "sorted_unc", "[", "j", "]", ")", "\n", "if", "not", "self", ".", "inLog", "(", "idx_i", ",", "idx_j", ",", "log", ")", ":", "\n", "                        ", "pair", "=", "[", "idx_i", ",", "idx_j", "]", "\n", "max_value", "=", "sorted_unc", "[", "i", "]", "+", "sorted_unc", "[", "j", "]", "\n", "\n", "", "", "", "", "return", "pair", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getQuery": [[54, 69], ["uncertainty_querier.UncQuerier.getMixReward", "uncertainty_querier.UncQuerier.getUncScores", "sorted", "uncertainty_querier.UncQuerier.getMostUncertainPair", "uncertainty_querier.UncQuerier.getMostUncertainPair", "random.random"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getMixReward", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getUncScores", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getMostUncertainPair", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getMostUncertainPair"], ["", "def", "getQuery", "(", "self", ",", "log", ")", ":", "\n", "        ", "mix_values", "=", "self", ".", "getMixReward", "(", ")", "\n", "unc_scores", "=", "self", ".", "getUncScores", "(", "mix_values", ")", "\n", "sorted_unc", "=", "sorted", "(", "unc_scores", ",", "reverse", "=", "True", ")", "\n", "num", "=", "10", "\n", "\n", "pair", "=", "self", ".", "getMostUncertainPair", "(", "num", ",", "unc_scores", ",", "sorted_unc", ",", "log", ")", "\n", "while", "pair", "==", "[", "-", "1", ",", "-", "1", "]", ":", "\n", "            ", "pair", "=", "self", ".", "getMostUncertainPair", "(", "2", "*", "num", ",", "unc_scores", ",", "sorted_unc", ")", "\n", "\n", "\n", "", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "return", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "pair", "[", "1", "]", ",", "pair", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.updateRanker": [[70, 73], ["uncertainty_querier.UncQuerier.reward_learner.train", "uncertainty_querier.UncQuerier.getReward"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.train", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getReward"], ["", "", "def", "updateRanker", "(", "self", ",", "pref_log", ")", ":", "\n", "        ", "self", ".", "reward_learner", ".", "train", "(", "pref_log", ",", "self", ".", "summary_vectors", ")", "\n", "self", ".", "learnt_values", "=", "self", ".", "getReward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getReward": [[74, 77], ["summariser.utils.misc.normaliseList", "np.dot"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "getReward", "(", "self", ")", ":", "\n", "        ", "values", "=", "[", "np", ".", "dot", "(", "self", ".", "reward_learner", ".", "weights", ",", "vv", ")", "for", "vv", "in", "self", ".", "summary_vectors", "]", "\n", "return", "normaliseList", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.querier.uncertainty_querier.UncQuerier.getMixReward": [[78, 85], ["summariser.utils.misc.normaliseList", "np.array", "np.array"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.normaliseList"], ["", "def", "getMixReward", "(", "self", ",", "learnt_weight", "=", "-", "1", ")", ":", "\n", "        ", "if", "learnt_weight", "==", "-", "1", ":", "\n", "            ", "learnt_weight", "=", "self", ".", "learnt_weight", "\n", "\n", "", "mix_values", "=", "np", ".", "array", "(", "self", ".", "learnt_values", ")", "*", "learnt_weight", "+", "np", ".", "array", "(", "self", ".", "heuristics", ")", "*", "(", "1", "-", "learnt_weight", ")", "\n", "\n", "return", "normaliseList", "(", "mix_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.base.Sentence.__init__": [[10, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tokens", ",", "doc_id", ",", "position", ")", ":", "\n", "\n", "        ", "self", ".", "tokens", "=", "tokens", "\n", "\"\"\" tokens as a list. \"\"\"", "\n", "\n", "self", ".", "doc_id", "=", "doc_id", "\n", "\"\"\" document identifier of the sentence. \"\"\"", "\n", "\n", "self", ".", "position", "=", "position", "\n", "\"\"\" position of the sentence within the document. \"\"\"", "\n", "\n", "self", ".", "concepts", "=", "[", "]", "\n", "\"\"\" concepts of the sentence. \"\"\"", "\n", "\n", "self", ".", "untokenized_form", "=", "''", "\n", "\"\"\" untokenized form of the sentence. \"\"\"", "\n", "\n", "self", ".", "length", "=", "0", "\n", "\"\"\" length of the untokenized sentence. \"\"\"", "", "", "", ""]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.__init__": [[17, 46], ["state_type.StateLengthComputer", "state_type.State.state_length_computer.getTotalLength", "state_type.State.state_length_computer.getStatesLength", "nltk.stem.snowball.SnowballStemmer", "set", "nltk.corpus.stopwords.words", "range"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getTotalLength", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getStatesLength"], ["    ", "def", "__init__", "(", "self", ",", "sum_token_length", ",", "base_length", ",", "sent_num", ",", "block_num", ",", "language", ")", ":", "\n", "# hyper parameters", "\n", "        ", "self", ".", "reward_lambda", "=", "0.9", "\n", "\n", "# learning arguments", "\n", "if", "sum_token_length", "!=", "None", ":", "\n", "            ", "self", ".", "sum_token_length", "=", "sum_token_length", "\n", "", "else", ":", "\n", "            ", "self", ".", "sum_token_length", "=", "99999", "\n", "\n", "", "self", ".", "state_length_computer", "=", "StateLengthComputer", "(", "block_num", ",", "base_length", ",", "sent_num", ")", "\n", "self", ".", "vec_length", "=", "self", ".", "state_length_computer", ".", "getTotalLength", "(", ")", "\n", "self", ".", "summary_vector_length", "=", "self", ".", "state_length_computer", ".", "getStatesLength", "(", "block_num", ")", "\n", "self", ".", "language", "=", "language", "\n", "\n", "# stemmers and stop words list", "\n", "self", ".", "stemmer", "=", "SnowballStemmer", "(", "self", ".", "language", ")", "\n", "self", ".", "stoplist", "=", "set", "(", "stopwords", ".", "words", "(", "self", ".", "language", ")", ")", "\n", "\n", "# class variables", "\n", "#self.draft_summary = ''", "\n", "self", ".", "draft_summary_list", "=", "[", "]", "\n", "self", ".", "historical_actions", "=", "[", "]", "\n", "self", ".", "available_sents", "=", "[", "i", "for", "i", "in", "range", "(", "0", ",", "sent_num", "+", "1", ")", "]", "\n", "self", ".", "terminal_state", "=", "0", "# 0 stands for non-terminal, and 1 stands for terminal", "\n", "self", ".", "draft_summary_length", "=", "0", "\n", "\n", "#some flags/options", "\n", "self", ".", "newReward", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getSelfVector": [[47, 50], ["state_type.State.getStateVector"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getStateVector"], ["", "def", "getSelfVector", "(", "self", ",", "top_ngrams", ",", "sentences", ")", ":", "\n", "        ", "return", "self", ".", "getStateVector", "(", "self", ".", "draft_summary_list", ",", "self", ".", "historical_actions", ",", "\n", "top_ngrams", ",", "sentences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getStateVector": [[51, 116], ["len", "summariser.extract_ngrams_count", "range", "state_type.State.getPositionInfo", "numpy.array", "len", "numpy.zeros", "state_type.State.state_length_computer.getIndexUntilSentNum", "state_type.State.state_length_computer.getStatesLength", "len", "len", "sent.split", "len", "state_type.State.state_length_computer.getTotalLength", "state_type.State.state_length_computer.getIndexUntilSentNum"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.extract_ngrams_count", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getPositionInfo", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getIndexUntilSentNum", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getStatesLength", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getTotalLength", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getIndexUntilSentNum"], ["", "def", "getStateVector", "(", "self", ",", "draft_list", ",", "draft_index_list", ",", "top_ngrams", ",", "sentences", ")", ":", "\n", "        ", "'''\n        Represent the current draft summary using a vector\n        :param draft_list: a list of sentences, included in the current draft summary\n        :param draft_index_list: the indices of the included sentences\n        :param top_ngrams: top n-grams for all the original documents\n        :param sentences: all sentences information, used to find positions information\n        :param tfidf: decides to use the Japan version (state_type==True) or the REAPER version\n        :return: an numpy array, the vector representation of the state\n        '''", "\n", "\n", "# for empty or over-length draft, return a full-zero vector", "\n", "draft_length", "=", "0", "\n", "for", "sent", "in", "draft_list", ":", "\n", "            ", "draft_length", "+=", "len", "(", "sent", ".", "split", "(", "' '", ")", ")", "\n", "\n", "", "if", "len", "(", "draft_list", ")", "==", "0", "or", "draft_list", "==", "None", ":", "#or draft_length>self.sum_token_length:", "\n", "            ", "return", "np", ".", "zeros", "(", "self", ".", "vec_length", ")", "\n", "\n", "", "vector", "=", "[", "0", "]", "*", "self", ".", "vec_length", "\n", "coverage_num", "=", "0", "\n", "redundant_count", "=", "0", "\n", "\n", "sent_num", "=", "len", "(", "draft_index_list", ")", "\n", "index", "=", "-", "1", "+", "self", ".", "state_length_computer", ".", "getIndexUntilSentNum", "(", "sent_num", ")", "\n", "\n", "draft_ngrams", "=", "util", ".", "extract_ngrams_count", "(", "draft_list", ",", "self", ".", "stemmer", ",", "self", ".", "language", ",", "self", ".", "stoplist", ")", "\n", "\n", "num", "=", "self", ".", "state_length_computer", ".", "getStatesLength", "(", "sent_num", ")", "-", "5", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "            ", "index", "+=", "1", "\n", "if", "top_ngrams", "[", "i", "]", "in", "draft_ngrams", ":", "\n", "                ", "vector", "[", "index", "]", "=", "1", "\n", "coverage_num", "+=", "1", "\n", "if", "draft_ngrams", "[", "top_ngrams", "[", "i", "]", "]", ">=", "2", ":", "\n", "                    ", "redundant_count", "+=", "1", "# draft_ngrams[top_ngrams[i]]-1", "\n", "\n", "#this is needed, because the above loop does not perform the last add", "\n", "", "", "", "index", "+=", "1", "\n", "\n", "#second part: coverage ratio", "\n", "vector", "[", "index", "]", "=", "coverage_num", "*", "1.0", "/", "len", "(", "top_ngrams", ")", "\n", "index", "+=", "1", "\n", "\n", "#third part: redundant ratio;", "\n", "vector", "[", "index", "]", "=", "redundant_count", "*", "1.0", "/", "len", "(", "top_ngrams", ")", "\n", "index", "+=", "1", "\n", "\n", "#fourth part: length ratio", "\n", "vector", "[", "index", "]", "=", "draft_length", "*", "1.0", "/", "self", ".", "sum_token_length", "\n", "index", "+=", "1", "\n", "\n", "vector", "[", "index", "]", "=", "self", ".", "getPositionInfo", "(", "sentences", ",", "draft_index_list", ")", "\n", "index", "+=", "1", "\n", "\n", "#sixth part: length violation bit", "\n", "if", "draft_length", "<=", "self", ".", "sum_token_length", ":", "\n", "            ", "vector", "[", "index", "]", "=", "1", "\n", "\n", "", "if", "sent_num", ">=", "self", ".", "state_length_computer", ".", "block_num", ":", "\n", "            ", "assert", "index", "==", "-", "1", "+", "self", ".", "state_length_computer", ".", "getTotalLength", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "index", "==", "-", "1", "+", "self", ".", "state_length_computer", ".", "getIndexUntilSentNum", "(", "sent_num", "+", "1", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getPositionInfo": [[117, 123], ["None"], "methods", ["None"], ["", "def", "getPositionInfo", "(", "self", ",", "sentences", ",", "draft_index_list", ")", ":", "\n", "        ", "position_index", "=", "0", "\n", "for", "idx", "in", "draft_index_list", ":", "\n", "            ", "pos", "=", "sentences", "[", "idx", "]", ".", "position", "\n", "position_index", "+=", "1.0", "/", "pos", "\n", "", "return", "position_index", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.noCommonTokens": [[125, 134], ["float", "set().isdisjoint", "len", "len", "set"], "methods", ["None"], ["", "def", "noCommonTokens", "(", "self", ",", "token_list1", ",", "token_list2", ",", "word_num_limit", "=", "float", "(", "\"inf\"", ")", ")", ":", "\n", "# we do not check long sentences", "\n", "        ", "if", "len", "(", "token_list1", ")", "<=", "word_num_limit", "and", "len", "(", "token_list2", ")", "<=", "word_num_limit", ":", "\n", "            ", "if", "set", "(", "token_list1", ")", ".", "isdisjoint", "(", "token_list2", ")", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getSimilarity": [[137, 160], ["tokens1.split", "sklearn.feature_extraction.text.TfidfVectorizer", "state_type.State.noCommonTokens", "token_str2.split", "sentences2.split", "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", "sklearn.metrics.pairwise.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.noCommonTokens"], ["", "", "def", "getSimilarity", "(", "self", ",", "tokens1", ",", "sentences2", ",", "fullDoc", "=", "False", ")", ":", "\n", "# tokens1 is a string of tokens", "\n", "# sentences2 is a list of sentences, and each sentences is a list of tokens", "\n", "        ", "token_list1", "=", "tokens1", ".", "split", "(", "' '", ")", "\n", "token_str1", "=", "tokens1", "\n", "if", "fullDoc", ":", "\n", "            ", "token_str2", "=", "' '", ".", "join", "(", "sentences2", ")", "\n", "token_list2", "=", "token_str2", ".", "split", "(", "' '", ")", "\n", "", "else", ":", "\n", "            ", "token_list2", "=", "sentences2", ".", "split", "(", "' '", ")", "\n", "token_str2", "=", "sentences2", "\n", "", "tfidf_vectorizer", "=", "TfidfVectorizer", "(", "min_df", "=", "0", ")", "\n", "#print('token_list 1: '+' '.join(token_list1))", "\n", "#print('token_list 2: '+' '.join(token_list2))", "\n", "if", "self", ".", "noCommonTokens", "(", "token_list1", ",", "token_list2", ")", ":", "\n", "            ", "return", "0", "\n", "", "if", "token_str2", "==", "token_str1", ":", "\n", "            ", "return", "1", "\n", "", "try", ":", "\n", "            ", "tfidf_matrix_train", "=", "tfidf_vectorizer", ".", "fit_transform", "(", "[", "token_str1", ",", "token_str2", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "return", "0", "\n", "", "return", "cosine_similarity", "(", "tfidf_matrix_train", "[", "0", "]", ",", "tfidf_matrix_train", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getNewStateVec": [[162, 166], ["state_type.State.getStateVector"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getStateVector"], ["", "def", "getNewStateVec", "(", "self", ",", "new_sent_id", ",", "top_ngrams", ",", "sentences", ")", ":", "\n", "        ", "temp_draft_summary_list", "=", "self", ".", "draft_summary_list", "+", "[", "sentences", "[", "new_sent_id", "]", ".", "untokenized_form", "]", "\n", "draft_index_list", "=", "self", ".", "historical_actions", "+", "[", "new_sent_id", "]", "\n", "return", "self", ".", "getStateVector", "(", "temp_draft_summary_list", ",", "draft_index_list", ",", "top_ngrams", ",", "sentences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.removeOverlengthSents": [[167, 180], ["len", "new_avai_acts.append", "sents[].untokenized_form.split", "len", "sents[].untokenized_form.split", "int"], "methods", ["None"], ["", "def", "removeOverlengthSents", "(", "self", ",", "sents", ",", "production", ")", ":", "\n", "        ", "new_avai_acts", "=", "[", "0", "]", "\n", "for", "sent_id", "in", "self", ".", "available_sents", ":", "\n", "            ", "if", "sent_id", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "not", "production", "and", "len", "(", "sents", "[", "sent_id", "-", "1", "]", ".", "untokenized_form", ".", "split", "(", "' '", ")", ")", ">", "self", ".", "sum_token_length", "-", "self", ".", "draft_summary_length", ":", "\n", "                ", "continue", "\n", "", "elif", "production", "and", "len", "(", "sents", "[", "sent_id", "-", "1", "]", ".", "untokenized_form", ".", "split", "(", "' '", ")", ")", ">", "int", "(", "1.2", "*", "self", ".", "sum_token_length", ")", "-", "self", ".", "draft_summary_length", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "new_avai_acts", ".", "append", "(", "sent_id", ")", "\n", "", "", "self", ".", "available_sents", "=", "new_avai_acts", "[", ":", "]", "\n", "del", "new_avai_acts", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.updateState": [[182, 195], ["state_type.State.draft_summary_list.append", "state_type.State.historical_actions.append", "len", "sents[].untokenized_form.split", "state_type.State.available_sents.remove", "state_type.State.removeOverlengthSents", "print"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.removeOverlengthSents"], ["", "def", "updateState", "(", "self", ",", "new_sent_id", ",", "sents", ",", "read", "=", "False", ",", "production", "=", "False", ")", ":", "\n", "        ", "self", ".", "draft_summary_list", ".", "append", "(", "sents", "[", "new_sent_id", "]", ".", "untokenized_form", ")", "\n", "self", ".", "historical_actions", ".", "append", "(", "new_sent_id", ")", "\n", "self", ".", "draft_summary_length", "+=", "len", "(", "sents", "[", "new_sent_id", "]", ".", "untokenized_form", ".", "split", "(", "' '", ")", ")", "\n", "if", "not", "read", ":", "\n", "            ", "self", ".", "available_sents", ".", "remove", "(", "new_sent_id", "+", "1", ")", "\n", "self", ".", "removeOverlengthSents", "(", "sents", ",", "production", ")", "\n", "if", "not", "production", "and", "self", ".", "draft_summary_length", ">", "self", ".", "sum_token_length", ":", "\n", "                ", "self", ".", "available_sents", "=", "[", "0", "]", "\n", "self", ".", "terminal_state", "=", "1", "\n", "print", "(", "'overlength! should not happen'", ")", "\n", "return", "-", "1", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getOptimalTerminalRougeScores": [[196, 204], ["summariser.rouge.rouge.Rouge", "summariser.rouge.rouge.Rouge.", "summariser.rouge.rouge.Rouge.clean", "len"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rouge.rouge.Rouge.clean"], ["", "def", "getOptimalTerminalRougeScores", "(", "self", ",", "model", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "draft_summary_list", ")", "==", "0", ":", "\n", "            ", "return", "0.", "\n", "\n", "", "rouge", "=", "Rouge", "(", "ROUGE_DIR", ",", "BASE_DIR", ",", "True", ",", "True", ")", "\n", "R1", ",", "R2", ",", "R3", ",", "R4", ",", "RL", ",", "RSU", "=", "rouge", "(", "' '", ".", "join", "(", "self", ".", "draft_summary_list", ")", ",", "[", "model", "]", ",", "self", ".", "sum_token_length", ")", "\n", "rouge", ".", "clean", "(", ")", "\n", "return", "[", "R1", ",", "R2", ",", "R3", ",", "R4", ",", "RL", ",", "RSU", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getTerminalReward": [[205, 241], ["range", "len", "range", "state_type.State.getSimilarity", "state_type.State.getSimilarity", "sent2tokens", "sent2tokens", "sent2tokens"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getSimilarity", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getSimilarity", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.sent2tokens", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.sent2tokens", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.sent2tokens"], ["", "def", "getTerminalReward", "(", "self", ",", "sentences", ",", "sentences_stemmed_aggreate", ",", "sent2tokens", ",", "sim_scores", ")", ":", "\n", "# assert self.draft_summary_length <= self.sum_token_length", "\n", "# print('summary: \\n'+' ||| '.join(self.draft_summary_list))", "\n", "\n", "        ", "relatedness_score", "=", "0", "\n", "redundant_score", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "historical_actions", ")", ")", ":", "\n", "            ", "sent_idx", "=", "self", ".", "historical_actions", "[", "i", "]", "\n", "\n", "# compute relatedness scores", "\n", "# the original version used in the japan version", "\n", "# -1 stands for full docs", "\n", "if", "(", "sent_idx", ",", "-", "1", ")", "in", "sim_scores", ":", "\n", "                ", "relatedness_score", "+=", "sim_scores", "[", "(", "sent_idx", ",", "-", "1", ")", "]", "\n", "", "elif", "(", "-", "1", ",", "sent_idx", ")", "in", "sim_scores", ":", "\n", "                ", "relatedness_score", "+=", "sim_scores", "[", "(", "-", "1", ",", "sent_idx", ")", "]", "\n", "", "else", ":", "\n", "                ", "sim_score", "=", "self", ".", "getSimilarity", "(", "' '", ".", "join", "(", "sent2tokens", "(", "self", ".", "draft_summary_list", "[", "i", "]", ")", ")", ",", "\n", "sentences_stemmed_aggreate", ",", "True", ")", "+", "1.0", "/", "sentences", "[", "sent_idx", "]", ".", "position", "\n", "relatedness_score", "+=", "sim_score", "\n", "sim_scores", "[", "(", "sent_idx", ",", "-", "1", ")", "]", "=", "sim_score", "\n", "\n", "# compute redundancy scores", "\n", "", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "idx2", "=", "self", ".", "historical_actions", "[", "j", "]", "\n", "if", "(", "sent_idx", ",", "idx2", ")", "in", "sim_scores", ":", "\n", "                    ", "redundant_score", "+=", "sim_scores", "[", "(", "sent_idx", ",", "idx2", ")", "]", "\n", "", "elif", "(", "idx2", ",", "sent_idx", ")", "in", "sim_scores", ":", "\n", "                    ", "redundant_score", "+=", "sim_scores", "[", "(", "idx2", ",", "sent_idx", ")", "]", "\n", "", "else", ":", "\n", "                    ", "red_score", "=", "self", ".", "getSimilarity", "(", "' '", ".", "join", "(", "sent2tokens", "(", "self", ".", "draft_summary_list", "[", "j", "]", ")", ")", ",", "\n", "' '", ".", "join", "(", "sent2tokens", "(", "self", ".", "draft_summary_list", "[", "i", "]", ")", ")", ")", "\n", "redundant_score", "+=", "red_score", "\n", "sim_scores", "[", "(", "sent_idx", ",", "idx2", ")", "]", "=", "red_score", "\n", "\n", "", "", "", "return", "relatedness_score", "*", "self", ".", "reward_lambda", "-", "(", "1", "-", "self", ".", "reward_lambda", ")", "*", "redundant_score", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.__init__": [[244, 250], ["numpy.log10", "range", "state_type.StateLengthComputer.ncr", "state_type.StateLengthComputer.lengths.append", "int", "numpy.log10", "state_type.StateLengthComputer.ncr"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.ncr", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.ncr"], ["    ", "def", "__init__", "(", "self", ",", "block_num", ",", "base_length", ",", "sent_num", ")", ":", "\n", "        ", "self", ".", "block_num", "=", "block_num", "\n", "self", ".", "lengths", "=", "[", "]", "\n", "base_num", "=", "np", ".", "log10", "(", "self", ".", "ncr", "(", "sent_num", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "block_num", ")", ":", "\n", "            ", "self", ".", "lengths", ".", "append", "(", "int", "(", "base_length", "*", "np", ".", "log10", "(", "self", ".", "ncr", "(", "sent_num", ",", "i", "+", "1", ")", ")", "*", "1.0", "/", "base_num", ")", "+", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getStatesLength": [[251, 256], ["None"], "methods", ["None"], ["", "", "def", "getStatesLength", "(", "self", ",", "sent_num", ")", ":", "\n", "        ", "if", "sent_num", "<", "self", ".", "block_num", ":", "\n", "            ", "return", "self", ".", "lengths", "[", "sent_num", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "lengths", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getIndexUntilSentNum": [[257, 263], ["min", "range", "state_type.StateLengthComputer.getStatesLength"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getStatesLength"], ["", "", "def", "getIndexUntilSentNum", "(", "self", ",", "n", ")", ":", "\n", "        ", "idx", "=", "0", "\n", "nn", "=", "min", "(", "n", ",", "self", ".", "block_num", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "nn", "-", "1", ")", ":", "\n", "            ", "idx", "+=", "self", ".", "getStatesLength", "(", "i", "+", "1", ")", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getTotalLength": [[264, 266], ["sum"], "methods", ["None"], ["", "def", "getTotalLength", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "lengths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.ncr": [[267, 273], ["min", "functools.reduce", "functools.reduce", "range", "range"], "methods", ["None"], ["", "def", "ncr", "(", "self", ",", "n", ",", "r", ")", ":", "\n", "        ", "r", "=", "min", "(", "r", ",", "n", "-", "r", ")", "\n", "if", "r", "==", "0", ":", "return", "1", "\n", "numer", "=", "functools", ".", "reduce", "(", "op", ".", "mul", ",", "range", "(", "n", ",", "n", "-", "r", ",", "-", "1", ")", ")", "\n", "denom", "=", "functools", ".", "reduce", "(", "op", ".", "mul", ",", "range", "(", "1", ",", "r", "+", "1", ")", ")", "\n", "return", "numer", "//", "denom", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.__init__": [[12, 27], ["nltk.stem.porter.PorterStemmer", "set", "vector_generator.Vectoriser.load_data", "nltk.corpus.stopwords.words"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.load_data"], ["    ", "def", "__init__", "(", "self", ",", "docs", ",", "sum_len", "=", "100", ",", "no_stop_words", "=", "True", ",", "stem", "=", "True", ",", "block", "=", "1", ",", "base", "=", "200", ",", "lang", "=", "'english'", ")", ":", "\n", "        ", "self", ".", "docs", "=", "docs", "\n", "self", ".", "without_stopwords", "=", "no_stop_words", "\n", "self", ".", "stem", "=", "stem", "\n", "self", ".", "block_num", "=", "block", "\n", "self", ".", "base_length", "=", "base", "\n", "self", ".", "language", "=", "lang", "\n", "self", ".", "sum_token_length", "=", "sum_len", "\n", "\n", "self", ".", "stemmer", "=", "PorterStemmer", "(", ")", "\n", "self", ".", "stoplist", "=", "set", "(", "stopwords", ".", "words", "(", "self", ".", "language", ")", ")", "\n", "self", ".", "sim_scores", "=", "{", "}", "\n", "self", ".", "stemmed_sentences_list", "=", "[", "]", "\n", "\n", "self", ".", "load_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.sampleRandomReviews": [[28, 61], ["range", "State", "act_list.append", "len", "random.choice", "State.updateState", "State.getTerminalReward", "heuristic_list.append", "rouge_list.append", "[].strip", "State.getOptimalTerminalRougeScores", "len", "vector_generator.Vectoriser.sentences[].untokenized_form.split", "model[].split"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.updateState", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getTerminalReward", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getOptimalTerminalRougeScores"], ["", "def", "sampleRandomReviews", "(", "self", ",", "num", ",", "heuristic_reward", "=", "True", ",", "rouge_reward", "=", "True", ",", "models", "=", "None", ")", ":", "\n", "        ", "heuristic_list", "=", "[", "]", "\n", "rouge_list", "=", "[", "]", "\n", "act_list", "=", "[", "]", "\n", "\n", "for", "ii", "in", "range", "(", "num", ")", ":", "\n", "            ", "state", "=", "State", "(", "self", ".", "sum_token_length", ",", "self", ".", "base_length", ",", "len", "(", "self", ".", "sentences", ")", ",", "\n", "self", ".", "block_num", ",", "self", ".", "language", ")", "\n", "while", "state", ".", "available_sents", "!=", "[", "0", "]", ":", "\n", "                ", "new_id", "=", "random", ".", "choice", "(", "state", ".", "available_sents", ")", "\n", "if", "new_id", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "new_id", ">", "0", "and", "len", "(", "self", ".", "sentences", "[", "new_id", "-", "1", "]", ".", "untokenized_form", ".", "split", "(", "' '", ")", ")", ">", "self", ".", "sum_token_length", ":", "\n", "                    ", "continue", "\n", "", "state", ".", "updateState", "(", "new_id", "-", "1", ",", "self", ".", "sentences", ",", "production", "=", "True", ")", "\n", "", "actions", "=", "state", ".", "historical_actions", "\n", "act_list", ".", "append", "(", "actions", ")", "\n", "#print('summary length: {}'.format(state.draft_summary_length))", "\n", "\n", "if", "heuristic_reward", ":", "\n", "                ", "rew", "=", "state", ".", "getTerminalReward", "(", "self", ".", "sentences", ",", "self", ".", "stemmed_sentences_list", ",", "self", ".", "sent2tokens", ",", "self", ".", "sim_scores", ")", "\n", "heuristic_list", ".", "append", "(", "rew", ")", "\n", "\n", "", "if", "rouge_reward", ":", "\n", "                ", "assert", "models", "is", "not", "None", "\n", "r_dic", "=", "{", "}", "\n", "for", "model", "in", "models", ":", "\n", "                    ", "model_name", "=", "model", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "strip", "(", ")", "\n", "rew", "=", "state", ".", "getOptimalTerminalRougeScores", "(", "model", ")", "\n", "r_dic", "[", "model_name", "]", "=", "rew", "\n", "", "rouge_list", ".", "append", "(", "r_dic", ")", "\n", "\n", "", "", "return", "act_list", ",", "heuristic_list", ",", "rouge_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.getSummaryVectors": [[63, 74], ["State", "enumerate", "State.getSelfVector", "vector_list.append", "len", "State.updateState"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getSelfVector", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.updateState"], ["", "def", "getSummaryVectors", "(", "self", ",", "summary_acts_list", ")", ":", "\n", "        ", "vector_list", "=", "[", "]", "\n", "\n", "for", "act_list", "in", "summary_acts_list", ":", "\n", "            ", "state", "=", "State", "(", "self", ".", "sum_token_length", ",", "self", ".", "base_length", ",", "len", "(", "self", ".", "sentences", ")", ",", "self", ".", "block_num", ",", "self", ".", "language", ")", "\n", "for", "i", ",", "act", "in", "enumerate", "(", "act_list", ")", ":", "\n", "                ", "state", ".", "updateState", "(", "act", ",", "self", ".", "sentences", ",", "read", "=", "True", ")", "\n", "", "vector", "=", "state", ".", "getSelfVector", "(", "self", ".", "top_ngrams_list", ",", "self", ".", "sentences", ")", "\n", "vector_list", ".", "append", "(", "vector", ")", "\n", "\n", "", "return", "vector_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.sent2tokens": [[75, 84], ["sent2stokens_wostop", "sent2stokens", "sent2tokens_wostop", "vector_generator.Vectoriser.sent2tokens"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2stokens_wostop", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2stokens", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.sent2tokens_wostop", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.sent2tokens"], ["", "def", "sent2tokens", "(", "self", ",", "sent_str", ")", ":", "\n", "        ", "if", "self", ".", "without_stopwords", "and", "self", ".", "stem", ":", "\n", "            ", "return", "sent2stokens_wostop", "(", "sent_str", ",", "self", ".", "stemmer", ",", "self", ".", "stoplist", ",", "self", ".", "language", ")", "\n", "", "elif", "self", ".", "without_stopwords", "==", "False", "and", "self", ".", "stem", ":", "\n", "            ", "return", "sent2stokens", "(", "sent_str", ",", "self", ".", "stemmer", ",", "self", ".", "language", ")", "\n", "", "elif", "self", ".", "without_stopwords", "and", "self", ".", "stem", "==", "False", ":", "\n", "            ", "return", "sent2tokens_wostop", "(", "sent_str", ",", "self", ".", "stoplist", ",", "self", ".", "language", ")", "\n", "", "else", ":", "# both false", "\n", "            ", "return", "sent2tokens", "(", "sent_str", ",", "self", ".", "language", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.load_data": [[86, 113], ["enumerate", "StateLengthComputer", "vector_generator.Vectoriser.state_length_computer.getStatesLength", "vector_generator.Vectoriser.state_length_computer.getTotalLength", "getTopNgrams", "enumerate", "len", "sent_list.append", "sorted", "nltk.tokenize.word_tokenize", "summariser.vector.base.Sentence", "untokenize", "len", "vector_generator.Vectoriser.sentences.append", "vector_generator.Vectoriser.sent2tokens", "doc_tokens_list.extend", "vector_generator.Vectoriser.stemmed_sentences_list.append", "untokenize.split"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getStatesLength", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.StateLengthComputer.getTotalLength", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.getTopNgrams", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.untokenize", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.vector_generator.Vectoriser.sent2tokens"], ["", "", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "sentences", "=", "[", "]", "\n", "for", "doc_id", ",", "doc", "in", "enumerate", "(", "self", ".", "docs", ")", ":", "\n", "            ", "doc_name", ",", "doc_sents", "=", "doc", "\n", "doc_tokens_list", "=", "[", "]", "\n", "for", "sent_id", ",", "sent_text", "in", "enumerate", "(", "doc_sents", ")", ":", "\n", "                ", "token_sent", "=", "word_tokenize", "(", "sent_text", ",", "self", ".", "language", ")", "\n", "current_sent", "=", "Sentence", "(", "token_sent", ",", "doc_id", ",", "sent_id", "+", "1", ")", "\n", "untokenized_form", "=", "untokenize", "(", "token_sent", ")", "\n", "current_sent", ".", "untokenized_form", "=", "untokenized_form", "\n", "current_sent", ".", "length", "=", "len", "(", "untokenized_form", ".", "split", "(", "' '", ")", ")", "\n", "self", ".", "sentences", ".", "append", "(", "current_sent", ")", "\n", "sent_tokens", "=", "self", ".", "sent2tokens", "(", "untokenized_form", ")", "\n", "doc_tokens_list", ".", "extend", "(", "sent_tokens", ")", "\n", "stemmed_form", "=", "' '", ".", "join", "(", "sent_tokens", ")", "\n", "self", ".", "stemmed_sentences_list", ".", "append", "(", "stemmed_form", ")", "\n", "#print('total sentence num: ' + str(len(self.sentences)))", "\n", "\n", "", "", "self", ".", "state_length_computer", "=", "StateLengthComputer", "(", "self", ".", "block_num", ",", "self", ".", "base_length", ",", "len", "(", "self", ".", "sentences", ")", ")", "\n", "self", ".", "top_ngrams_num", "=", "self", ".", "state_length_computer", ".", "getStatesLength", "(", "self", ".", "block_num", ")", "\n", "self", ".", "vec_length", "=", "self", ".", "state_length_computer", ".", "getTotalLength", "(", ")", "\n", "\n", "sent_list", "=", "[", "]", "\n", "for", "sent", "in", "self", ".", "sentences", ":", "\n", "            ", "sent_list", ".", "append", "(", "sent", ".", "untokenized_form", ")", "\n", "", "self", ".", "top_ngrams_list", "=", "getTopNgrams", "(", "sorted", "(", "sent_list", ")", ",", "self", ".", "stemmer", ",", "self", ".", "language", ",", "\n", "self", ".", "stoplist", ",", "2", ",", "self", ".", "top_ngrams_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.collect_props": [[8, 24], ["list", "set", "pruned_list.append"], "function", ["None"], ["def", "collect_props", "(", "list_props", ")", ":", "\n", "    ", "pruned_list", "=", "[", "]", "\n", "for", "items", "in", "list_props", ":", "\n", "        ", "for", "prop1", "in", "items", ":", "\n", "            ", "'''\n            if pruned_list:\n                flag = 0\n                for prop2 in pruned_list:\n                    if re.search(prop2, prop1):\n                        flag = 1\n                if flag == 0:\n                    pruned_list.append(prop1)\n            else:\n            '''", "\n", "pruned_list", ".", "append", "(", "prop1", ")", "\n", "", "", "return", "list", "(", "set", "(", "pruned_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.flatten_childtrees": [[25, 35], ["t.height", "children.extend", "t.pos", "t.height", "children.append", "children.extend", "Tree", "clauseIE_tree.flatten_childtrees", "t.pos"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.flatten_childtrees"], ["", "def", "flatten_childtrees", "(", "trees", ")", ":", "\n", "    ", "children", "=", "[", "]", "\n", "for", "t", "in", "trees", ":", "\n", "        ", "if", "t", ".", "height", "(", ")", "<", "3", ":", "\n", "            ", "children", ".", "extend", "(", "t", ".", "pos", "(", ")", ")", "\n", "", "elif", "t", ".", "height", "(", ")", "==", "3", ":", "\n", "            ", "children", ".", "append", "(", "Tree", "(", "t", ".", "node", ",", "t", ".", "pos", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "children", ".", "extend", "(", "flatten_childtrees", "(", "[", "c", "for", "c", "in", "t", "]", ")", ")", "\n", "", "", "return", "children", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.flatten_deeptree": [[36, 38], ["Tree", "clauseIE_tree.flatten_childtrees"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.flatten_childtrees"], ["", "def", "flatten_deeptree", "(", "tree", ")", ":", "\n", "    ", "return", "Tree", "(", "tree", ".", "node", ",", "flatten_childtrees", "(", "[", "c", "for", "c", "in", "tree", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.prune_props": [[39, 43], ["sorted", "print", "list", "set"], "function", ["None"], ["", "def", "prune_props", "(", "prop_list", ")", ":", "\n", "    ", "prop_list", "=", "sorted", "(", "prop_list", ",", "key", "=", "len", ",", "reverse", "=", "True", ")", "\n", "print", "(", "list", "(", "set", "(", "prop_list", ")", ")", ")", "\n", "return", "prop_list", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.create_parsesents": [[44, 78], ["print", "range", "len", "clauseIE_tree.prune_props", "re.sub", "re.sub", "re.sub.strip", "re.sub.find", "print", "re.sub", "re.sub", "print", "parse_sents.append", "re.sub.rfind", "len", "prop.lower", "print", "re.sub"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.prune_props"], ["", "def", "create_parsesents", "(", "props", ",", "sents", ")", ":", "\n", "    ", "parse_sents", "=", "[", "]", "\n", "print", "(", "'Creating Parse sentences:'", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "props", ")", ")", ":", "\n", "        ", "prop_list", ",", "sent", "=", "props", "[", "index", "+", "1", "]", ",", "sents", "[", "index", "]", "\n", "prop_list", "=", "prune_props", "(", "prop_list", ")", "\n", "for", "prop", "in", "prop_list", ":", "\n", "            ", "if", "prop", ".", "lower", "(", ")", "in", "stoplist", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "prop", ")", "\n", "sent", "=", "re", ".", "sub", "(", "\" %s \"", "%", "(", "prop", ")", ",", "' (C %s) '", "%", "prop", ",", "sent", ")", "\n", "", "", "sent", "=", "re", ".", "sub", "(", "\"\\) ([^(]+) \\(\"", ",", "\") (O \\\\1) (\"", ",", "sent", ")", "\n", "\n", "sent", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "sent", ")", "\n", "sent", "=", "sent", ".", "strip", "(", ")", "\n", "\n", "bracket_index", "=", "sent", ".", "rfind", "(", "')'", ")", "+", "1", "\n", "if", "bracket_index", "<", "len", "(", "sent", ")", ":", "\n", "            ", "sent", "=", "\"%s (O %s)\"", "%", "(", "sent", "[", ":", "bracket_index", "]", ",", "sent", "[", "bracket_index", "+", "1", ":", "]", ")", "\n", "", "bracket_index", "=", "sent", ".", "find", "(", "'('", ")", "\n", "if", "bracket_index", ">", "0", ":", "\n", "            ", "sent", "=", "\"(O %s) %s\"", "%", "(", "sent", "[", ":", "bracket_index", "]", ",", "sent", "[", "bracket_index", ":", "]", ")", "\n", "\n", "", "print", "(", "'Before:'", ",", "sent", ")", "\n", "#additional conditions for others", "\n", "sent", "=", "re", ".", "sub", "(", "\"\\(C ([^)(]+) \\(\"", ",", "\"(C (O \\\\1) (\"", ",", "sent", ")", "\n", "sent", "=", "re", ".", "sub", "(", "\"\\) ([^()]+)\\)\"", ",", "\") (C \\\\1))\"", ",", "sent", ")", "\n", "\n", "\n", "sent", "=", "\"(S %s)\"", "%", "(", "sent", ")", "\n", "print", "(", "index", "+", "1", ",", "sent", ")", "\n", "parse_sents", ".", "append", "(", "sent", ")", "\n", "", "return", "parse_sents", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.error_correct": [[79, 89], ["item.replace.startswith", "item.replace.endswith", "new_items.append", "item.replace.replace", "item.replace.replace"], "function", ["None"], ["", "def", "error_correct", "(", "subj", ",", "pred", ",", "obj", ")", ":", "\n", "    ", "items", "=", "[", "subj", ",", "pred", ",", "obj", "]", "\n", "new_items", "=", "[", "]", "\n", "for", "item", "in", "items", ":", "\n", "        ", "if", "item", ".", "startswith", "(", "'u '", ")", ":", "\n", "            ", "item", "=", "item", ".", "replace", "(", "'u '", ",", "''", ")", "\n", "", "if", "item", ".", "endswith", "(", "' u'", ")", ":", "\n", "            ", "item", "=", "item", ".", "replace", "(", "' u'", ",", "''", ")", "\n", "", "new_items", ".", "append", "(", "item", ")", "\n", "", "return", "new_items", "[", "0", "]", ",", "new_items", "[", "1", "]", ",", "new_items", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.create_trees": [[90, 117], ["collections.defaultdict", "print", "enumerate", "clauseIE_tree.collect_props", "print", "clauseIE_tree.create_parsesents", "int", "clauseIE_tree.error_correct", "list_props.append", "clauseIE_tree.collect_props", "print"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.collect_props", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.create_parsesents", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.error_correct", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.collect_props"], ["", "def", "create_trees", "(", "sent_triples", ",", "sents", ")", ":", "\n", "    ", "props", "=", "defaultdict", "(", "list", ")", "\n", "prev_index", "=", "1", "\n", "list_props", "=", "[", "]", "\n", "print", "(", "'Making a list of props:'", ")", "\n", "for", "index", ",", "triples", "in", "enumerate", "(", "sent_triples", ")", ":", "\n", "        ", "index", "=", "index", "+", "1", "\n", "for", "triple", "in", "triples", ":", "\n", "            ", "_", ",", "subj", ",", "pred", ",", "obj", "=", "int", "(", "triple", ".", "index", ")", ",", "triple", ".", "subject", ",", "triple", ".", "predicate", ",", "triple", ".", "object", "\n", "#Error from clauseIE output", "\n", "if", "subj", "==", "\"u\"", "or", "pred", "==", "'u'", "or", "obj", "==", "'u'", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "subj", ",", "pred", ",", "obj", "=", "error_correct", "(", "subj", ",", "pred", ",", "obj", ")", "\n", "\n", "if", "prev_index", "!=", "index", ":", "\n", "                    ", "props", "[", "prev_index", "]", "=", "collect_props", "(", "list_props", ")", "\n", "print", "(", "prev_index", ",", "props", "[", "prev_index", "]", ")", "\n", "list_props", "=", "[", "]", "\n", "", "list_props", ".", "append", "(", "[", "subj", ",", "pred", ",", "obj", "]", ")", "\n", "prev_index", "=", "index", "\n", "\n", "", "", "", "props", "[", "prev_index", "]", "=", "collect_props", "(", "list_props", ")", "\n", "print", "(", "prev_index", ",", "props", "[", "prev_index", "]", ")", "\n", "\n", "parse_sents", "=", "create_parsesents", "(", "props", ",", "sents", ")", "\n", "return", "parse_sents", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.get_props": [[118, 128], ["collections.defaultdict", "enumerate", "print", "Tree.fromstring", "Tree.fromstring.draw", "Tree.fromstring().subtrees", "Tree.fromstring", "re.match", "props[].append", "i.label", "i.leaves"], "function", ["None"], ["", "def", "get_props", "(", "parse_sents", ")", ":", "\n", "    ", "props", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "sent", "in", "enumerate", "(", "parse_sents", ")", ":", "\n", "        ", "print", "(", "sent", ")", "\n", "t", "=", "Tree", ".", "fromstring", "(", "sent", ")", "\n", "t", ".", "draw", "(", ")", "\n", "for", "i", "in", "Tree", ".", "fromstring", "(", "sent", ")", ".", "subtrees", "(", ")", ":", "\n", "            ", "if", "re", ".", "match", "(", "'C'", ",", "i", ".", "label", "(", ")", ")", "and", "i", ".", "height", "<", "3", ":", "\n", "                ", "props", "[", "index", "]", ".", "append", "(", "' '", ".", "join", "(", "i", ".", "leaves", "(", ")", ")", ")", "\n", "", "", "", "return", "props", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.read_file_tree": [[130, 134], ["open", "fp.read().splitlines", "clauseIE_tree.get_props", "fp.read"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.get_props"], ["", "def", "read_file_tree", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "parse_lines", "=", "fp", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "get_props", "(", "parse_lines", ")", "\n", "", "", "def", "read_file", "(", "filename", ")", ":", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.read_file": [[134, 138], ["open", "fp.read().splitlines", "fp.read"], "function", ["None"], ["", "", "def", "read_file", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "sents", "=", "fp", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "return", "sents", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.make_data.main": [[7, 26], ["os.join", "summariser.data_processer.corpus_cleaner.CorpusCleaner", "AttributeError", "summariser.data_processer.corpus_cleaner.CorpusCleaner.cleanDuc_data", "summariser.data_processer.corpus_cleaner.CorpusCleaner.cleanDBS_data", "summariser.data_processer.corpus_cleaner.CorpusCleaner.cleanWiki_data"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.cleanDuc_data", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.cleanDBS_data", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.cleanWiki_data"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "corpus_name", "=", "'DUC2004'", "# DUC2001, DUC2002, DUC2004", "\n", "parse_type", "=", "'parse'", "\n", "language", "=", "'english'", "\n", "data_path", "=", "path", ".", "join", "(", "PROJECT_PATH", ",", "\"../data\"", ")", "\n", "\n", "if", "parse_type", "!=", "None", "and", "language", "==", "None", ":", "\n", "        ", "raise", "AttributeError", "(", "'Please specify language'", ")", "\n", "\n", "", "corpus", "=", "CorpusCleaner", "(", "data_path", ",", "corpus_name", ",", "parse_type", ",", "language", ")", "\n", "if", "corpus_name", "[", ":", "3", "]", "==", "'DUC'", "or", "corpus_name", "[", ":", "3", "]", "==", "'TAC'", ":", "\n", "        ", "corpus", ".", "cleanDuc_data", "(", "parse_type", ")", "\n", "", "if", "corpus_name", "[", ":", "3", "]", "==", "'DBS'", ":", "\n", "        ", "corpus", ".", "cleanDBS_data", "(", "parse_type", ")", "\n", "", "if", "corpus_name", "==", "'WikiAIPHES'", ":", "\n", "        ", "corpus", ".", "cleanWiki_data", "(", "parse_type", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.task_extractor.TaskExtractor.__init__": [[35, 38], ["summariser.utils.writer.create_dir", "summariser.utils.writer.create_dir"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.create_dir", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.create_dir"], ["    ", "def", "__init__", "(", "self", ",", "output_directory", ")", ":", "\n", "        ", "create_dir", "(", "output_directory", ")", "\n", "self", ".", "output_directory", "=", "create_dir", "(", "output_directory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.task_extractor.TaskExtractor.process": [[40, 51], ["summariser.utils.reader.read_file", "xml.fromstring.findall", "xml.fromstring", "task_extractor.TaskExtractor.parseTopic", "task_extractor.TaskExtractor.create_processed", "xml.fromstring"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.read_file", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.task_extractor.TaskExtractor.parseTopic", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed"], ["", "def", "process", "(", "self", ",", "input_file", ",", "type", "=", "\"DUC2006\"", ")", ":", "\n", "        ", "file_data", "=", "read_file", "(", "input_file", ")", "\n", "try", ":", "\n", "            ", "root", "=", "ET", ".", "fromstring", "(", "file_data", ")", "\n", "", "except", "ET", ".", "ParseError", ":", "\n", "# some DUC topic xmls are broken, try to fix them:", "\n", "            ", "root", "=", "ET", ".", "fromstring", "(", "\"<xml>%s</xml>\"", "%", "file_data", ")", "\n", "\n", "", "for", "child", "in", "root", ".", "findall", "(", "\"topic\"", ")", ":", "\n", "            ", "topic_description", "=", "self", ".", "parseTopic", "(", "child", ")", "\n", "self", ".", "create_processed", "(", "topic_description", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.task_extractor.TaskExtractor.parseTopic": [[54, 60], ["xml_element.find().text.strip", "xml_element.find().text.strip", "xml_element.find().text.strip", "xml_element.find", "xml_element.find", "xml_element.find"], "methods", ["None"], ["", "", "def", "parseTopic", "(", "self", ",", "xml_element", ")", ":", "\n", "        ", "doc_id", "=", "xml_element", ".", "find", "(", "\"num\"", ")", ".", "text", ".", "strip", "(", ")", "\n", "title", "=", "xml_element", ".", "find", "(", "\"title\"", ")", ".", "text", ".", "strip", "(", ")", "\n", "narrative", "=", "xml_element", ".", "find", "(", "\"narr\"", ")", ".", "text", ".", "strip", "(", ")", "\n", "\n", "return", "{", "\"id\"", ":", "doc_id", ",", "\"title\"", ":", "title", ",", "\"narrative\"", ":", "narrative", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.task_extractor.TaskExtractor.create_processed": [[61, 65], ["os.path.join", "json.dumps", "summariser.utils.writer.write_to_file", "summariser.utils.writer.create_dir", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_to_file", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.create_dir"], ["", "def", "create_processed", "(", "self", ",", "topic_description", ")", ":", "\n", "        ", "filename", "=", "path", ".", "join", "(", "create_dir", "(", "path", ".", "join", "(", "self", ".", "output_directory", ",", "topic_description", "[", "\"id\"", "]", ")", ")", ",", "\"task.json\"", ")", "\n", "retval", "=", "json", ".", "dumps", "(", "topic_description", ")", "\n", "write_to_file", "(", "retval", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.task_extractor.main": [[11, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "task_extractor.TaskExtractor", "task_extractor.TaskExtractor.process", "os.path.join"], "function", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.task_extractor.TaskExtractor.process"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "\n", "argparse", ".", "RawDescriptionHelpFormatter", ")", "\n", "# DUC2001, DUC2002, DUC2004", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input'", ",", "help", "=", "\"Input file\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "\n", "# ../data", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output'", ",", "help", "=", "\"Target directory\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "\n", "default", "=", "path", ".", "join", "(", "\"~\"", ",", "\".ukpsummarizer\"", ",", "\"output\"", ",", "\"topics\"", ")", ")", "\n", "\n", "# iobasedir", "\n", "# parser.add_argument('-i', '--iobase',", "\n", "#                     help=\"base directory\",", "\n", "#                     type=str,", "\n", "#                     required=False,", "\n", "#                     default=path.normpath(path.join(path.expanduser(\"~\"), \".ukpsummarizer\")))", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "tde", "=", "TaskExtractor", "(", "args", ".", "output", ")", "\n", "tde", ".", "process", "(", "args", ".", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.__init__": [[25, 42], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "nltk.parse.stanford.StanfordParser", "nltk.parse.stanford.StanfordParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "datasets_path", ",", "corpus_name", ",", "parse_type", ",", "lang", "=", "'english'", ")", ":", "\n", "        ", "self", ".", "datasets_path", "=", "datasets_path", "\n", "self", ".", "corpus_name", "=", "corpus_name", "\n", "self", ".", "corpus_path", "=", "path", ".", "join", "(", "datasets_path", ",", "corpus_name", ")", "\n", "self", ".", "docs_path", "=", "path", ".", "join", "(", "self", ".", "corpus_path", ",", "\"docs\"", ")", "\n", "self", ".", "topics_file", "=", "path", ".", "join", "(", "self", ".", "corpus_path", ",", "\"topics.xml\"", ")", "\n", "self", ".", "models_path", "=", "path", ".", "join", "(", "self", ".", "corpus_path", ",", "\"models\"", ")", "\n", "self", ".", "smodels_path", "=", "path", ".", "join", "(", "self", ".", "corpus_path", ",", "\"smodels\"", ")", "\n", "self", ".", "jar_path", "=", "JAR_PATH", "\n", "os", ".", "environ", "[", "'CLASSPATH'", "]", "=", "self", ".", "jar_path", "\n", "self", ".", "cleaned_path", "=", "path", ".", "join", "(", "datasets_path", ",", "\"processed_data\"", ")", "\n", "\n", "if", "parse_type", "==", "'parse'", ":", "\n", "            ", "if", "lang", "==", "'english'", ":", "\n", "                ", "self", ".", "parser", "=", "stanford", ".", "StanfordParser", "(", "model_path", "=", "\"%s/englishPCFG.ser.gz\"", "%", "(", "self", ".", "jar_path", ")", ")", "\n", "", "if", "lang", "==", "'german'", ":", "\n", "                ", "self", ".", "parser", "=", "stanford", ".", "StanfordParser", "(", "model_path", "=", "\"%s/germanPCFG.ser.gz\"", "%", "(", "self", ".", "jar_path", ")", ")", "\n", "# self.cleaned_path = path.join(datasets_path, \"processed.parse\")", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.parse_xml_all": [[50, 67], ["xml.parse", "xml.parse.getroot", "topics.attrib.get", "topics.findall", "documents.attrib.get", "summariser.utils.data_helpers.text_normalization", "nltk.tokenize.sent_tokenize", "data.append", "documents.find", "documents.find"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.text_normalization"], ["", "", "", "def", "parse_xml_all", "(", "self", ",", "data_file", ",", "doc_type", ",", "language", "=", "'english'", ")", ":", "\n", "        ", "e", "=", "ET", ".", "parse", "(", "data_file", ")", "\n", "cluster_data", "=", "{", "}", "\n", "root", "=", "e", ".", "getroot", "(", ")", "\n", "for", "topics", "in", "root", ":", "\n", "            ", "data", "=", "[", "]", "\n", "topic_id", "=", "topics", ".", "attrib", ".", "get", "(", "'id'", ")", "\n", "for", "documents", "in", "topics", ".", "findall", "(", "doc_type", ")", ":", "\n", "                ", "doc_id", "=", "documents", ".", "attrib", ".", "get", "(", "'id'", ")", "\n", "if", "doc_type", "==", "'document'", ":", "\n", "                    ", "title_text", "=", "documents", ".", "find", "(", "'title'", ")", ".", "text", "\n", "", "doc_text", "=", "documents", ".", "find", "(", "'text'", ")", ".", "text", "\n", "text", "=", "text_normalization", "(", "doc_text", ")", "\n", "doc_sents", "=", "sent_tokenize", "(", "text", ",", "language", ")", "\n", "data", ".", "append", "(", "[", "doc_id", ",", "doc_sents", "]", ")", "\n", "", "cluster_data", "[", "topic_id", "]", "=", "data", "\n", "", "return", "cluster_data", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.load_processDBS": [[68, 72], ["corpus_cleaner.CorpusCleaner.parse_xml_all", "corpus_cleaner.CorpusCleaner.parse_xml_all"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.parse_xml_all", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.parse_xml_all"], ["", "def", "load_processDBS", "(", "self", ",", "docs_file", ",", "summaries_file", ")", ":", "\n", "        ", "docs_data", "=", "self", ".", "parse_xml_all", "(", "docs_file", ",", "'document'", ",", "language", "=", "'german'", ")", "\n", "summaries_data", "=", "self", ".", "parse_xml_all", "(", "summaries_file", ",", "'summary'", ",", "language", "=", "'german'", ")", "\n", "return", "docs_data", ",", "summaries_data", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.loadWiki_cluster": [[73, 106], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "datafile.startswith", "summaries.append", "print", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "summariser.utils.data_helpers.text_normalization", "nltk.tokenize.sent_tokenize", "docs.append", "codecs.open", "fp.read().splitlines", "codecs.open", "fp.read().splitlines", "summariser.utils.data_helpers.text_normalization.encode", "fp.read", "fp.read"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.text_normalization"], ["", "def", "loadWiki_cluster", "(", "self", ",", "ctopic", ")", ":", "\n", "        ", "cluster_path", "=", "'%s/%s/'", "%", "(", "self", ".", "corpus_path", ",", "ctopic", ")", "\n", "self", ".", "docs_path", "=", "'%s/input/'", "%", "(", "cluster_path", ")", "\n", "self", ".", "models_path", "=", "'%s/reference/'", "%", "(", "cluster_path", ")", "\n", "docs", ",", "summaries", "=", "[", "]", ",", "[", "]", "\n", "for", "datafile", "in", "os", ".", "listdir", "(", "self", ".", "docs_path", ")", ":", "\n", "            ", "if", "datafile", ".", "startswith", "(", "'M'", ")", ":", "\n", "                ", "filename", "=", "'%s/%s'", "%", "(", "self", ".", "docs_path", ",", "datafile", ")", "\n", "\n", "with", "codecs", ".", "open", "(", "filename", ",", "'r'", ",", "'utf-8'", ",", "errors", "=", "'ignore'", ")", "as", "fp", ":", "\n", "                    ", "data", "=", "fp", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "text", "=", "' '", ".", "join", "(", "data", ")", "\n", "print", "(", "text", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'\\u201e|\\u201c'", ",", "u''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'\\(EL[^\\)]+\\)'", ",", "u''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'\\(MLI[^\\)]+\\)'", ",", "u''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'\\(ED[^\\)]+\\)'", ",", "u''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'[0-9]+([A-Z])'", ",", "u'. \\\\1'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'^\\. '", ",", "u''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'\\u2026'", ",", "u'.'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'\\u00E2'", ",", "u''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'\\u00E0'", ",", "u''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'; \\*'", ",", "u'.'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'([0-9]\\))\\n'", ",", "u'\\\\1.\\n'", ",", "text", ")", "\n", "text", "=", "text_normalization", "(", "text", ")", "\n", "new_data", "=", "sent_tokenize", "(", "text", ")", "\n", "docs", ".", "append", "(", "(", "datafile", ",", "new_data", ")", ")", "\n", "", "", "for", "model_file", "in", "os", ".", "listdir", "(", "self", ".", "models_path", ")", ":", "\n", "            ", "filename", "=", "'%s/%s'", "%", "(", "self", ".", "models_path", ",", "model_file", ")", "\n", "with", "codecs", ".", "open", "(", "filename", ",", "'r'", ",", "'utf-8'", ")", "as", "fp", ":", "\n", "                ", "data", "=", "fp", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "summaries", ".", "append", "(", "(", "model_file", ",", "data", ")", ")", "\n", "", "return", "(", "docs", ",", "summaries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.cleanWiki_data": [[107, 118], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "corpus_cleaner.CorpusCleaner.loadWiki_cluster", "print", "corpus_cleaner.CorpusCleaner.create_processed", "corpus_cleaner.CorpusCleaner.create_processed", "corpus_cleaner.CorpusCleaner.runparser_data", "corpus_cleaner.CorpusCleaner.runparser_data", "corpus_cleaner.CorpusCleaner.create_processed", "corpus_cleaner.CorpusCleaner.create_processed"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.loadWiki_cluster", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.runparser_data", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.runparser_data", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed"], ["", "def", "cleanWiki_data", "(", "self", ",", "parse_type", ")", ":", "\n", "        ", "for", "ctopic", "in", "os", ".", "listdir", "(", "self", ".", "datasets_path", ")", ":", "\n", "            ", "docs", ",", "summaries", "=", "self", ".", "loadWiki_cluster", "(", "ctopic", ")", "\n", "print", "(", "'TOPIC:'", ",", "ctopic", ")", "\n", "if", "parse_type", "==", "'parse'", ":", "\n", "                ", "parsed_docs", "=", "self", ".", "runparser_data", "(", "docs", ")", "\n", "parsed_summaries", "=", "self", ".", "runparser_data", "(", "summaries", ")", "\n", "self", ".", "create_processed", "(", "ctopic", ",", "parsed_docs", ",", "doc_type", "=", "'docs.parsed'", ")", "\n", "self", ".", "create_processed", "(", "ctopic", ",", "parsed_summaries", ",", "doc_type", "=", "'summaries.parsed'", ")", "\n", "", "self", ".", "create_processed", "(", "ctopic", ",", "docs", ",", "doc_type", "=", "'docs'", ")", "\n", "self", ".", "create_processed", "(", "ctopic", ",", "summaries", ",", "doc_type", "=", "'summaries'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.cleanDBS_data": [[119, 133], ["corpus_cleaner.CorpusCleaner.load_processDBS", "os.join", "os.join", "corpus_cleaner.CorpusCleaner.create_processed", "corpus_cleaner.CorpusCleaner.create_processed", "corpus_cleaner.CorpusCleaner.runparser_data", "corpus_cleaner.CorpusCleaner.runparser_data", "corpus_cleaner.CorpusCleaner.create_processed", "corpus_cleaner.CorpusCleaner.create_processed"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.load_processDBS", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.runparser_data", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.runparser_data", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed"], ["", "", "def", "cleanDBS_data", "(", "self", ",", "parse_type", ")", ":", "\n", "        ", "docs_file", "=", "\"%s/dbs-documents.xml\"", "%", "(", "self", ".", "docs_path", ")", "\n", "summaries_file", "=", "\"%s/dbs-summary.xml\"", "%", "(", "self", ".", "models_path", ")", "\n", "docs_data", ",", "summaries_data", "=", "self", ".", "load_processDBS", "(", "docs_file", ",", "summaries_file", ")", "\n", "for", "ctopic", "in", "docs_data", ":", "\n", "            ", "docs", ",", "summaries", "=", "docs_data", "[", "ctopic", "]", ",", "summaries_data", "[", "ctopic", "]", "\n", "dir_path", "=", "path", ".", "join", "(", "self", ".", "cleaned_path", ",", "self", ".", "corpus_name", ",", "ctopic", ",", "\"docs\"", ")", "\n", "if", "parse_type", "==", "'parse'", ":", "\n", "                ", "parsed_docs", "=", "self", ".", "runparser_data", "(", "docs", ")", "\n", "parsed_summaries", "=", "self", ".", "runparser_data", "(", "summaries", ")", "\n", "self", ".", "create_processed", "(", "ctopic", ",", "parsed_docs", ",", "doc_type", "=", "'docs.parsed'", ")", "\n", "self", ".", "create_processed", "(", "ctopic", ",", "parsed_summaries", ",", "doc_type", "=", "'summaries.parsed'", ")", "\n", "", "self", ".", "create_processed", "(", "ctopic", ",", "docs", ",", "doc_type", "=", "'docs'", ")", "\n", "self", ".", "create_processed", "(", "ctopic", ",", "summaries", ",", "doc_type", "=", "'summaries'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed": [[134, 142], ["os.join", "os.join", "summariser.utils.writer.create_dir", "os.join", "os.join", "summariser.utils.writer.write_to_file"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.create_dir", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.writer.write_to_file"], ["", "", "def", "create_processed", "(", "self", ",", "ctopic", ",", "docs", ",", "doc_type", ")", ":", "\n", "        ", "for", "doc_name", ",", "doc_sents", "in", "docs", ":", "\n", "            ", "data", "=", "'\\n'", ".", "join", "(", "doc_sents", ")", "\n", "dir_path", "=", "path", ".", "join", "(", "self", ".", "cleaned_path", ",", "self", ".", "corpus_name", ",", "ctopic", ",", "doc_type", ")", "\n", "\n", "create_dir", "(", "dir_path", ")", "\n", "filename", "=", "path", ".", "join", "(", "dir_path", ",", "doc_name", ")", "\n", "write_to_file", "(", "data", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.runparser_data": [[143, 154], ["print", "corpus_cleaner.CorpusCleaner.parser.raw_parse_sents", "new_docs.append", "sents.append", "list", "summariser.utils.data_helpers.remove_spaces_lines"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.remove_spaces_lines"], ["", "", "def", "runparser_data", "(", "self", ",", "docs", ")", ":", "\n", "        ", "new_docs", "=", "[", "]", "\n", "for", "doc_name", ",", "doc", "in", "docs", ":", "\n", "            ", "print", "(", "'Processing:'", ",", "doc_name", ")", "\n", "sentences", "=", "self", ".", "parser", ".", "raw_parse_sents", "(", "doc", ")", "\n", "sents", "=", "[", "]", "\n", "for", "sent", "in", "sentences", ":", "\n", "                ", "parsestr", "=", "list", "(", "sent", ")", "[", "0", "]", "\n", "sents", ".", "append", "(", "remove_spaces_lines", "(", "parsestr", ")", ")", "\n", "", "new_docs", ".", "append", "(", "(", "doc_name", ",", "sents", ")", ")", "\n", "", "return", "new_docs", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.props_exception": [[155, 161], ["doc[].replace", "doc[].replace"], "methods", ["None"], ["", "def", "props_exception", "(", "self", ",", "doc_name", ",", "doc", ")", ":", "\n", "        ", "if", "doc_name", "==", "'NYT19981114.0057'", ":", "\n", "            ", "doc", "[", "23", "]", "=", "doc", "[", "23", "]", ".", "replace", "(", "'but who belong to no group,'", ",", "''", ")", "\n", "", "if", "doc_name", "==", "'APW19981005.0474'", ":", "\n", "            ", "doc", "[", "6", "]", "=", "doc", "[", "6", "]", ".", "replace", "(", "'what it claims are '", ",", "''", ")", "\n", "", "return", "doc", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.runprops_data": [[162, 185], ["print", "corpus_cleaner.CorpusCleaner.props_exception", "enumerate", "enumerate", "summariser.data_processer.clauseIE_tree.create_trees", "new_docs.append", "doc_new.append", "print", "corpus_cleaner.CorpusCleaner.props_parser.extract_triples", "triples.append", "nltk.tokenize.word_tokenize", "print"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.props_exception", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.create_trees"], ["", "def", "runprops_data", "(", "self", ",", "docs", ")", ":", "\n", "        ", "new_docs", "=", "[", "]", "\n", "for", "doc_name", ",", "doc", "in", "docs", ":", "\n", "            ", "print", "(", "'Processing:'", ",", "doc_name", ")", "\n", "doc_new", "=", "[", "]", "\n", "doc", "=", "self", ".", "props_exception", "(", "doc_name", ",", "doc", ")", "\n", "\n", "for", "index", ",", "sent", "in", "enumerate", "(", "doc", ")", ":", "\n", "                ", "doc_new", ".", "append", "(", "' '", ".", "join", "(", "word_tokenize", "(", "sent", ")", ")", ")", "\n", "print", "(", "index", "+", "1", ",", "doc_new", "[", "index", "]", ")", "\n", "\n", "", "triples", "=", "[", "]", "\n", "for", "i", ",", "sent", "in", "enumerate", "(", "doc_new", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "tmp_triples", "=", "self", ".", "props_parser", ".", "extract_triples", "(", "[", "sent", "]", ")", "\n", "triples", ".", "append", "(", "tmp_triples", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "'Error: failed for line %s'", "%", "(", "sent", ")", ")", "\n", "continue", "\n", "", "", "parse_sents", "=", "create_trees", "(", "triples", ",", "doc_new", ")", "\n", "sents", "=", "[", "]", "\n", "new_docs", ".", "append", "(", "(", "doc_name", ",", "parse_sents", ")", ")", "\n", "", "return", "new_docs", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.cleanDuc_data": [[186, 218], ["os.exists", "os.exists", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "summariser.data_processer.task_extractor.TaskExtractor", "summariser.data_processer.task_extractor.TaskExtractor.process", "print", "os.join", "os.join", "corpus_cleaner.CorpusCleaner.clean_DUC_cluster", "os.join", "os.join", "os.isdir", "os.isdir", "corpus_cleaner.CorpusCleaner.create_processed", "corpus_cleaner.CorpusCleaner.create_processed", "print", "corpus_cleaner.CorpusCleaner.runparser_data", "corpus_cleaner.CorpusCleaner.runparser_data", "corpus_cleaner.CorpusCleaner.create_processed", "corpus_cleaner.CorpusCleaner.create_processed", "corpus_cleaner.CorpusCleaner.runprops_data", "corpus_cleaner.CorpusCleaner.runprops_data", "corpus_cleaner.CorpusCleaner.create_processed", "corpus_cleaner.CorpusCleaner.create_processed", "sys.exc_info", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.task_extractor.TaskExtractor.process", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.clean_DUC_cluster", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.runparser_data", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.runparser_data", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.runprops_data", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.runprops_data", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.create_processed"], ["", "def", "cleanDuc_data", "(", "self", ",", "parse_type", ")", ":", "\n", "        ", "if", "path", ".", "exists", "(", "self", ".", "topics_file", ")", ":", "\n", "            ", "task_extractor", "=", "TaskExtractor", "(", "path", ".", "join", "(", "self", ".", "cleaned_path", ",", "self", ".", "corpus_name", ")", ")", "\n", "task_extractor", ".", "process", "(", "self", ".", "topics_file", ")", "\n", "", "for", "ctopic", "in", "os", ".", "listdir", "(", "self", ".", "docs_path", ")", ":", "\n", "            ", "print", "(", "\"Cleaning \"", ",", "ctopic", ")", "\n", "try", ":", "\n", "                ", "docs", ",", "summaries", "=", "self", ".", "clean_DUC_cluster", "(", "ctopic", ")", "\n", "dir_path", "=", "path", ".", "join", "(", "self", ".", "cleaned_path", ",", "self", ".", "corpus_name", ",", "ctopic", ",", "\"docs.props\"", ")", "\n", "\n", "if", "path", ".", "isdir", "(", "dir_path", ")", ":", "\n", "                    ", "print", "(", "'Cleaning:'", ",", "dir_path", ")", "\n", "#clean_create_dir(dir_path)", "\n", "continue", "\n", "\n", "", "if", "parse_type", "==", "'parse'", ":", "\n", "                    ", "parsed_docs", "=", "self", ".", "runparser_data", "(", "docs", ")", "\n", "parsed_summaries", "=", "self", ".", "runparser_data", "(", "summaries", ")", "\n", "self", ".", "create_processed", "(", "ctopic", ",", "parsed_docs", ",", "doc_type", "=", "'docs.parsed'", ")", "\n", "self", ".", "create_processed", "(", "ctopic", ",", "parsed_summaries", ",", "doc_type", "=", "'summaries.parsed'", ")", "\n", "", "if", "parse_type", "==", "'props'", ":", "\n", "                    ", "parsed_docs", "=", "self", ".", "runprops_data", "(", "docs", ")", "\n", "parsed_summaries", "=", "self", ".", "runprops_data", "(", "summaries", ")", "\n", "self", ".", "create_processed", "(", "ctopic", ",", "parsed_docs", ",", "doc_type", "=", "'docs.props'", ")", "\n", "self", ".", "create_processed", "(", "ctopic", ",", "parsed_summaries", ",", "doc_type", "=", "'summaries.props'", ")", "\n", "\n", "", "self", ".", "create_processed", "(", "ctopic", ",", "docs", ",", "doc_type", "=", "'docs'", ")", "\n", "self", ".", "create_processed", "(", "ctopic", ",", "summaries", ",", "doc_type", "=", "'summaries'", ")", "\n", "", "except", "'Exception'", ":", "\n", "                ", "t", ",", "v", ",", "st", "=", "sys", ".", "exc_info", "(", ")", "\n", "print", "(", "\"error cleaning %s - type: %s, value %s\"", "%", "(", "ctopic", ",", "t", ",", "v", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.copy_ssummaries": [[219, 224], ["shutil.copyfile"], "methods", ["None"], ["", "", "", "def", "copy_ssummaries", "(", "self", ",", "topic_summ", ",", "smodels_org", ",", "smodels_dir", ")", ":", "\n", "        ", "for", "ssumm_file", "in", "topic_summ", ":", "\n", "            ", "rfile", "=", "'/'", ".", "join", "(", "[", "smodels_org", ",", "ssumm_file", "]", ")", "\n", "wfile", "=", "'/'", ".", "join", "(", "[", "smodels_dir", ",", "ssumm_file", "]", ")", "\n", "copyfile", "(", "rfile", ",", "wfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.extractSummaries": [[225, 236], ["os.join", "os.join", "open", "open.read", "nltk.tokenize.sent_tokenize", "models.append", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "filename.startswith", "open.read.replace().split", "open.read.replace"], "methods", ["None"], ["", "", "def", "extractSummaries", "(", "self", ",", "ctopic", ")", ":", "\n", "        ", "cid", "=", "\"%s.M.\"", "%", "(", "ctopic", ")", "\n", "model_files", "=", "[", "filename", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "models_path", ")", "if", "filename", ".", "startswith", "(", "cid", ")", "]", "\n", "models", "=", "[", "]", "\n", "for", "model_file", "in", "model_files", ":", "\n", "            ", "model_name", "=", "path", ".", "join", "(", "self", ".", "models_path", ",", "model_file", ")", "\n", "fp", "=", "open", "(", "model_name", ",", "'r'", ")", "\n", "text", "=", "fp", ".", "read", "(", ")", "\n", "model_text", "=", "sent_tokenize", "(", "' '", ".", "join", "(", "text", ".", "replace", "(", "'\\n'", ",", "' '", ")", ".", "split", "(", ")", ")", ")", "\n", "models", ".", "append", "(", "(", "model_file", ",", "model_text", ")", ")", "\n", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.clean_DUC_cluster": [[237, 249], ["ctopic[].upper", "corpus_cleaner.CorpusCleaner.extractSummaries", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "summariser.utils.reader.read_file().replace", "print", "corpus_cleaner.CorpusCleaner.parse_xml", "docs.append", "summariser.utils.reader.read_file", "type"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.extractSummaries", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.parse_xml", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.clauseIE_tree.read_file"], ["", "def", "clean_DUC_cluster", "(", "self", ",", "ctopic", ")", ":", "\n", "        ", "cluster_id", "=", "ctopic", "[", ":", "-", "1", "]", ".", "upper", "(", ")", "\n", "summaries", "=", "self", ".", "extractSummaries", "(", "cluster_id", ")", "\n", "docs", "=", "[", "]", "\n", "cluster_path", "=", "path", ".", "join", "(", "self", ".", "docs_path", ",", "ctopic", ")", "\n", "for", "datafile", "in", "os", ".", "listdir", "(", "cluster_path", ")", ":", "\n", "            ", "filename", "=", "path", ".", "join", "(", "cluster_path", ",", "datafile", ")", "\n", "file_data", "=", "read_file", "(", "filename", ")", ".", "replace", "(", "'&'", ",", "'111'", ")", "\n", "print", "(", "'going to parse xml: '", "\"%s\"", "' ; %s '", "%", "(", "filename", ",", "type", "(", "file_data", ")", ")", ")", "\n", "doc_no", ",", "headline", ",", "rawtext", "=", "self", ".", "parse_xml", "(", "file_data", ",", "filename", ")", "\n", "docs", ".", "append", "(", "(", "doc_no", ",", "rawtext", ")", ")", "\n", "", "return", "(", "docs", ",", "summaries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.data_processer.corpus_cleaner.CorpusCleaner.parse_xml": [[250, 326], ["xml.fromstring", "print", "re.sub.replace", "re.sub", "summariser.utils.data_helpers.text_normalization", "nltk.tokenize.sent_tokenize", "xml.fromstring.find().text.replace", "doc_no.replace.replace.replace", "re.sub", "re.sub", "re.sub.encode", "xml.fromstring.find().findall", "xml.fromstring.find", "xml.fromstring.findall", "xml.fromstring.find", "text_block.findall", "xml.fromstring.find", "xml.fromstring.find", "ET.fromstring.find.text.replace", "ET.fromstring.find.text.replace", "xml.fromstring.find", "xml.fromstring.find().findall", "xml.fromstring.find", "xml.fromstring.find", "xml.fromstring.find", "xml.fromstring.find().findall", "id.findall", "para.text.rstrip", "re.search", "ET.fromstring.find.text.replace", "xml.fromstring.find", "xml.fromstring.find", "para.text.replace", "para.text.rstrip", "re.search"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.data_helpers.text_normalization"], ["", "def", "parse_xml", "(", "self", ",", "file_data", ",", "filename", "=", "\"unknown filename\"", ")", ":", "\n", "        ", "e", "=", "ET", ".", "fromstring", "(", "file_data", ")", "\n", "if", "self", ".", "corpus_name", "==", "\"DUC2002\"", "or", "self", ".", "corpus_name", "==", "\"DUC2001\"", "or", "self", ".", "corpus_name", "==", "\"DUC2006\"", "or", "self", ".", "corpus_name", "==", "\"DUC2007\"", ":", "\n", "            ", "text", "=", "\"\"", "\n", "if", "self", ".", "corpus_name", "==", "'DUC2006'", "or", "self", ".", "corpus_name", "==", "'DUC2007'", ":", "\n", "                ", "textid", "=", "e", ".", "find", "(", "'BODY'", ")", ".", "findall", "(", "'TEXT'", ")", "\n", "headid", "=", "e", ".", "find", "(", "'HEADLINE'", ")", "\n", "", "else", ":", "\n", "                ", "textid", "=", "e", ".", "findall", "(", "'TEXT'", ")", "\n", "headid", "=", "e", ".", "find", "(", "'HEAD'", ")", "\n", "", "for", "text_block", "in", "textid", ":", "\n", "                ", "paras", "=", "text_block", ".", "findall", "(", "'P'", ")", "\n", "if", "not", "paras", ":", "\n", "                    ", "text", "+=", "text_block", ".", "text", "\n", "", "elif", "paras", ":", "\n", "                    ", "text", "=", "\"\"", "\n", "for", "para", "in", "paras", ":", "\n", "                        ", "tmp_txt", "=", "para", ".", "text", ".", "rstrip", "(", "' \\n'", ")", "\n", "if", "re", ".", "search", "(", "r'[\\'\".?]$'", ",", "tmp_txt", ")", ":", "\n", "                            ", "text", "+=", "tmp_txt", "+", "' '", "\n", "", "else", ":", "\n", "                            ", "text", "+=", "tmp_txt", "+", "'. '", "\n", "", "", "", "", "if", "headid", "==", "None", ":", "\n", "                ", "headid", "=", "e", ".", "find", "(", "'HL'", ")", "\n", "if", "headid", "==", "None", ":", "\n", "                    ", "headid", "=", "e", ".", "find", "(", "'HEADLINE'", ")", "\n", "if", "headid", "==", "None", ":", "\n", "                        ", "headline", "=", "\"\"", "\n", "", "else", ":", "\n", "                        ", "paras", "=", "e", ".", "find", "(", "'HEADLINE'", ")", ".", "findall", "(", "'P'", ")", "\n", "if", "paras", "==", "None", ":", "\n", "                            ", "headline", "=", "headid", ".", "text", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "", "else", ":", "\n", "                            ", "headline", "=", "\"\"", "\n", "for", "para", "in", "paras", ":", "\n", "                                ", "headline", "+=", "para", ".", "text", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "", "", "", "", "else", ":", "\n", "                    ", "headline", "=", "headid", ".", "text", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "", "", "elif", "headid", "!=", "None", ":", "\n", "                ", "headline", "=", "headid", ".", "text", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "\n", "", "text", "=", "re", ".", "sub", "(", "u\"(ATHLETE:)\"", ",", "u\". \\\\1\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u\"[*]\\n\"", ",", "u\". \"", ",", "text", ")", "\n", "", "elif", "self", ".", "corpus_name", "==", "\"DUC2004\"", ":", "\n", "            ", "text", "=", "e", ".", "find", "(", "'TEXT'", ")", ".", "text", "\n", "headline", "=", "\"\"", "\n", "", "elif", "self", ".", "corpus_name", "==", "\"DUC2004TASK5\"", ":", "\n", "            ", "text", "=", "\"\"", "\n", "textids", "=", "e", ".", "find", "(", "'BODY'", ")", ".", "findall", "(", "'TEXT'", ")", "\n", "for", "id", "in", "textids", ":", "\n", "                ", "paras", "=", "id", ".", "findall", "(", "'P'", ")", "\n", "if", "not", "paras", ":", "\n", "                    ", "text", "+=", "id", ".", "text", "\n", "", "elif", "paras", ":", "\n", "                    ", "for", "para", "in", "paras", ":", "\n", "                        ", "tmp_txt", "=", "para", ".", "text", ".", "rstrip", "(", "' \\n'", ")", "\n", "if", "re", ".", "search", "(", "r'[\\'\".?]$'", ",", "tmp_txt", ")", ":", "\n", "                            ", "text", "+=", "tmp_txt", "+", "' '", "\n", "", "else", ":", "\n", "                            ", "text", "+=", "tmp_txt", "+", "'. '", "\n", "", "", "", "", "headline", "=", "e", ".", "find", "(", "\"HEADLINE\"", ")", "\n", "if", "not", "headline", ":", "\n", "                ", "headline", "=", "\"\"", "\n", "\n", "\n", "\n", "# TODO add DUC2007 parsing", "\n", "", "", "print", "(", "\"Original_text:\"", ",", "text", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "text", "=", "text", ".", "replace", "(", "u\"111amp;\"", ",", "u\"\"", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'111[^;]+;'", ",", "u''", ",", "text", ")", "\n", "text", "=", "text_normalization", "(", "text", ")", "\n", "raw_sents", "=", "sent_tokenize", "(", "text", ")", "\n", "\n", "doc_no", "=", "e", ".", "find", "(", "'DOCNO'", ")", ".", "text", ".", "replace", "(", "' '", ",", "''", ")", "\n", "doc_no", "=", "doc_no", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "return", "doc_no", ",", "headline", ",", "raw_sents", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.deep_td.DeepTDAgent.__init__": [[24, 43], ["numpy.zeros", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vectoriser", ",", "summaries", ",", "train_round", "=", "5000", ",", "strict_para", "=", "3", ")", ":", "\n", "\n", "# hyper parameters", "\n", "        ", "self", ".", "gamma", "=", "1.", "\n", "self", ".", "epsilon", "=", "1.", "\n", "self", ".", "alpha", "=", "0.001", "\n", "self", ".", "lamb", "=", "1.0", "\n", "\n", "# training options and hyper-parameters", "\n", "self", ".", "train_round", "=", "train_round", "\n", "self", ".", "strict_para", "=", "strict_para", "\n", "\n", "# samples", "\n", "self", ".", "summaries", "=", "summaries", "\n", "self", ".", "vectoriser", "=", "vectoriser", "\n", "self", ".", "weights", "=", "np", ".", "zeros", "(", "self", ".", "vectoriser", ".", "vec_length", ")", "\n", "\n", "# deep training", "\n", "self", ".", "hidden_layer_width", "=", "int", "(", "self", ".", "vectoriser", ".", "vec_length", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.deep_td.DeepTDAgent.__call__": [[45, 49], ["deep_td.DeepTDAgent.trainModel"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.trainModel"], ["", "def", "__call__", "(", "self", ",", "reward_list", ")", ":", "\n", "        ", "self", ".", "softmax_list", "=", "[", "]", "\n", "summary", "=", "self", ".", "trainModel", "(", "self", ".", "summaries", ",", "reward_list", ")", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.deep_td.DeepTDAgent.trainModel": [[51, 76], ["summariser.utils.misc.softmaxSample", "torch.nn.Sequential", "torch.optim.Adam", "range", "deep_td.DeepTDAgent.produceSummary", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "deep_td.DeepTDAgent.deep_model.parameters", "int", "summariser.utils.misc.softmaxSample", "deep_td.DeepTDAgent.train", "print"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.softmaxSample", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.produceSummary", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.softmaxSample", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.train"], ["", "def", "trainModel", "(", "self", ",", "summary_list", ",", "reward_list", ")", ":", "\n", "        ", "_", ",", "self", ".", "softmax_list", "=", "softmaxSample", "(", "reward_list", ",", "self", ".", "strict_para", ",", "[", "]", ",", "True", ")", "\n", "\n", "self", ".", "deep_model", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "vectoriser", ".", "vec_length", ",", "self", ".", "hidden_layer_width", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "hidden_layer_width", ",", "self", ".", "hidden_layer_width", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "hidden_layer_width", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "optimiser", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "deep_model", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "ii", "in", "range", "(", "int", "(", "self", ".", "train_round", ")", ")", ":", "\n", "\n", "            ", "if", "(", "ii", "+", "1", ")", "%", "1000", "==", "0", "and", "ii", "!=", "0", ":", "\n", "                ", "print", "(", "'trained for {} episodes.'", ".", "format", "(", "ii", "+", "1", ")", ")", "\n", "\n", "#find a new sample, using the softmax value", "\n", "", "idx", "=", "softmaxSample", "(", "reward_list", ",", "self", ".", "strict_para", ",", "self", ".", "softmax_list", ",", "False", ")", "\n", "\n", "# train the model for one episode", "\n", "loss", "=", "self", ".", "train", "(", "summary_list", "[", "idx", "]", ",", "reward_list", "[", "idx", "]", ")", "\n", "\n", "", "summary", "=", "self", ".", "produceSummary", "(", ")", "\n", "return", "' '", ".", "join", "(", "summary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.deep_td.DeepTDAgent.produceSummary": [[77, 89], ["summariser.vector.state_type.State", "len", "deep_td.DeepTDAgent.getGreedySent", "summariser.vector.state_type.State.updateState"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.getGreedySent", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.updateState"], ["", "def", "produceSummary", "(", "self", ")", ":", "\n", "        ", "state", "=", "State", "(", "self", ".", "vectoriser", ".", "sum_token_length", ",", "self", ".", "vectoriser", ".", "base_length", ",", "len", "(", "self", ".", "vectoriser", ".", "sentences", ")", ",", "self", ".", "vectoriser", ".", "block_num", ",", "self", ".", "vectoriser", ".", "language", ")", "\n", "\n", "# select sentences greedily", "\n", "while", "state", ".", "terminal_state", "==", "0", ":", "\n", "            ", "new_sent_id", "=", "self", ".", "getGreedySent", "(", "state", ")", "\n", "if", "new_sent_id", "==", "0", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "state", ".", "updateState", "(", "new_sent_id", "-", "1", ",", "self", ".", "vectoriser", ".", "sentences", ",", "production", "=", "True", ")", "\n", "\n", "", "", "return", "state", ".", "draft_summary_list", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.deep_td.DeepTDAgent.coreUpdate": [[90, 95], ["numpy.dot"], "methods", ["None"], ["", "def", "coreUpdate", "(", "self", ",", "reward", ",", "current_vec", ",", "new_vec", ",", "vector_e", ")", ":", "\n", "        ", "delta", "=", "reward", "+", "np", ".", "dot", "(", "self", ".", "weights", ",", "self", ".", "gamma", "*", "new_vec", "-", "current_vec", ")", "\n", "vec_e", "=", "self", ".", "gamma", "*", "self", ".", "lamb", "*", "vector_e", "+", "current_vec", "\n", "self", ".", "weights", "=", "self", ".", "weights", "+", "self", ".", "alpha", "*", "delta", "*", "vec_e", "\n", "return", "vec_e", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.deep_td.DeepTDAgent.getGreedySent": [[96, 139], ["torch.autograd.Variable", "deep_td.DeepTDAgent.deep_model", "deep_td.DeepTDAgent.data.numpy", "float", "enumerate", "len", "torch.from_numpy().float", "state.getSelfVector", "torch.autograd.Variable", "state.getNewStateVec", "vec_list.append", "enumerate", "str_vec_list.append", "torch.from_numpy().float", "torch.from_numpy", "deep_td.DeepTDAgent.deep_model().data.numpy", "numpy.array", "torch.from_numpy", "numpy.array", "deep_td.DeepTDAgent.deep_model", "torch.autograd.Variable.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getSelfVector", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getNewStateVec"], ["", "def", "getGreedySent", "(", "self", ",", "state", ")", ":", "\n", "        ", "vec_list", "=", "[", "]", "\n", "str_vec_list", "=", "[", "]", "\n", "\n", "for", "act_id", "in", "state", ".", "available_sents", ":", "\n", "\n", "# for action 'finish', the reward is the terminal reward", "\n", "            ", "if", "act_id", "==", "0", ":", "\n", "                ", "current_state_vec", "=", "state", ".", "getSelfVector", "(", "self", ".", "vectoriser", ".", "top_ngrams_list", ",", "self", ".", "vectoriser", ".", "sentences", ")", "\n", "vec_variable", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "current_state_vec", ")", ")", ".", "float", "(", ")", ")", "\n", "terminate_reward", "=", "self", ".", "deep_model", "(", "vec_variable", ".", "unsqueeze", "(", "0", ")", ")", ".", "data", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "# otherwise, the reward is 0, and value-function can be computed using the weight", "\n", "", "else", ":", "\n", "                ", "temp_state_vec", "=", "state", ".", "getNewStateVec", "(", "act_id", "-", "1", ",", "self", ".", "vectoriser", ".", "top_ngrams_list", ",", "\n", "self", ".", "vectoriser", ".", "sentences", ")", "\n", "vec_list", ".", "append", "(", "temp_state_vec", ")", "\n", "str_vec", "=", "''", "\n", "for", "ii", ",", "vv", "in", "enumerate", "(", "temp_state_vec", ")", ":", "\n", "                    ", "if", "vv", "!=", "0.", ":", "\n", "                        ", "str_vec", "+=", "'{}:{};'", ".", "format", "(", "ii", ",", "vv", ")", "\n", "", "", "str_vec_list", ".", "append", "(", "str_vec", ")", "\n", "\n", "", "", "if", "len", "(", "vec_list", ")", "==", "0", ":", "return", "0", "\n", "# get action that results in highest values", "\n", "variable", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "vec_list", ")", ")", ".", "float", "(", ")", ")", "\n", "values", "=", "self", ".", "deep_model", "(", "variable", ")", "\n", "values_list", "=", "values", ".", "data", ".", "numpy", "(", ")", "\n", "values_list", "=", "[", "v", "[", "0", "]", "for", "v", "in", "values_list", "]", "\n", "#print('vectors list: ')", "\n", "#for vv in str_vec_list:", "\n", "#print(vv)", "\n", "max_value", "=", "float", "(", "'-inf'", ")", "\n", "max_idx", "=", "-", "1", "\n", "for", "ii", ",", "value", "in", "enumerate", "(", "values_list", ")", ":", "\n", "            ", "if", "value", ">", "max_value", ":", "\n", "                ", "max_value", "=", "value", "\n", "max_idx", "=", "ii", "\n", "\n", "", "", "if", "terminate_reward", ">", "max_value", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "state", ".", "available_sents", "[", "max_idx", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.deep_td.DeepTDAgent.train": [[141, 158], ["summariser.vector.state_type.State", "summariser.vector.state_type.State.getStateVector", "vec_list.append", "deep_td.DeepTDAgent.deepTrain", "len", "summariser.vector.state_type.State.updateState", "summariser.vector.state_type.State.getStateVector", "vec_list.append"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getStateVector", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.deep_td.DeepTDAgent.deepTrain", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.updateState", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getStateVector"], ["", "", "def", "train", "(", "self", ",", "summary_actions", ",", "summary_value", ")", ":", "\n", "        ", "state", "=", "State", "(", "self", ".", "vectoriser", ".", "sum_token_length", ",", "self", ".", "vectoriser", ".", "base_length", ",", "\n", "len", "(", "self", ".", "vectoriser", ".", "sentences", ")", ",", "self", ".", "vectoriser", ".", "block_num", ",", "self", ".", "vectoriser", ".", "language", ")", "\n", "current_vec", "=", "state", ".", "getStateVector", "(", "state", ".", "draft_summary_list", ",", "state", ".", "historical_actions", ",", "\n", "self", ".", "vectoriser", ".", "top_ngrams_list", ",", "self", ".", "vectoriser", ".", "sentences", ")", "\n", "\n", "vec_list", "=", "[", "]", "\n", "vec_list", ".", "append", "(", "current_vec", ")", "\n", "\n", "for", "act", "in", "summary_actions", ":", "\n", "#BE CAREFUL: here the argument for updateState is act, because here act is the real sentence id, not action", "\n", "            ", "reward", "=", "state", ".", "updateState", "(", "act", ",", "self", ".", "vectoriser", ".", "sentences", ",", "True", ")", "\n", "new_vec", "=", "state", ".", "getStateVector", "(", "state", ".", "draft_summary_list", ",", "state", ".", "historical_actions", ",", "\n", "self", ".", "vectoriser", ".", "top_ngrams_list", ",", "self", ".", "vectoriser", ".", "sentences", ")", "\n", "vec_list", ".", "append", "(", "new_vec", ")", "\n", "\n", "", "return", "self", ".", "deepTrain", "(", "vec_list", ",", "summary_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.deep_td.DeepTDAgent.deepTrain": [[160, 179], ["deep_td.DeepTDAgent.deep_model", "deep_td.DeepTDAgent.data.numpy", "range", "target_list.append", "torch.autograd.Variable().unsqueeze().view", "torch.nn.MSELoss", "torch.nn.MSELoss.", "deep_td.DeepTDAgent.optimiser.zero_grad", "torch.nn.MSELoss.backward", "deep_td.DeepTDAgent.optimiser.step", "torch.nn.MSELoss.item", "torch.autograd.Variable", "target_list.append", "torch.from_numpy().float", "len", "torch.autograd.Variable().unsqueeze", "torch.from_numpy", "torch.autograd.Variable", "numpy.array", "torch.from_numpy().float", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["", "def", "deepTrain", "(", "self", ",", "vec_list", ",", "last_reward", ")", ":", "\n", "        ", "value_variables", "=", "self", ".", "deep_model", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "vec_list", ")", ")", ".", "float", "(", ")", ")", ")", "\n", "#print('value var', value_variables)", "\n", "value_list", "=", "value_variables", ".", "data", ".", "numpy", "(", ")", "\n", "target_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "value_list", ")", "-", "1", ")", ":", "\n", "            ", "target_list", ".", "append", "(", "self", ".", "gamma", "*", "value_list", "[", "idx", "+", "1", "]", "[", "0", "]", ")", "\n", "", "target_list", ".", "append", "(", "last_reward", ")", "\n", "target_variables", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "target_list", ")", ")", ".", "float", "(", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "#print('target var', target_variables)", "\n", "\n", "loss_fn", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fn", "(", "value_variables", ",", "target_variables", ")", "\n", "\n", "self", ".", "optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimiser", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.__init__": [[16, 33], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vectoriser", ",", "summaries", ",", "train_round", "=", "5000", ",", "strict_para", "=", "3", ")", ":", "\n", "\n", "# hyper parameters", "\n", "        ", "self", ".", "gamma", "=", "1.", "\n", "self", ".", "epsilon", "=", "1.", "\n", "self", ".", "alpha", "=", "0.001", "\n", "self", ".", "lamb", "=", "1.0", "\n", "\n", "# training options and hyper-parameters", "\n", "self", ".", "train_round", "=", "train_round", "\n", "self", ".", "strict_para", "=", "strict_para", "\n", "\n", "# samples", "\n", "self", ".", "summaries", "=", "summaries", "\n", "self", ".", "vectoriser", "=", "vectoriser", "\n", "self", ".", "softmax_list", "=", "[", "]", "\n", "self", ".", "weights", "=", "np", ".", "zeros", "(", "self", ".", "vectoriser", ".", "vec_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.__call__": [[35, 38], ["td_agent.TDAgent.trainModel"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.trainModel"], ["", "def", "__call__", "(", "self", ",", "reward_list", ")", ":", "\n", "        ", "summary", "=", "self", ".", "trainModel", "(", "self", ".", "summaries", ",", "reward_list", ")", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.trainModel": [[40, 58], ["range", "td_agent.TDAgent.produceSummary", "int", "summariser.utils.misc.getSoftmaxList", "summariser.utils.misc.softmaxSample", "td_agent.TDAgent.train", "print"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.produceSummary", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.getSoftmaxList", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.utils.misc.softmaxSample", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.train"], ["", "def", "trainModel", "(", "self", ",", "summary_list", ",", "reward_list", ")", ":", "\n", "\n", "        ", "for", "ii", "in", "range", "(", "int", "(", "self", ".", "train_round", ")", ")", ":", "\n", "\n", "            ", "if", "(", "ii", "+", "1", ")", "%", "1000", "==", "0", "and", "ii", "!=", "0", ":", "\n", "                ", "print", "(", "'trained for {} episodes.'", ".", "format", "(", "ii", "+", "1", ")", ")", "\n", "\n", "", "self", ".", "alpha", "=", "0.001", "\n", "\n", "#find a new sample, using the softmax value", "\n", "self", ".", "softmax_list", "=", "getSoftmaxList", "(", "reward_list", ",", "self", ".", "strict_para", ")", "\n", "idx", "=", "softmaxSample", "(", "reward_list", ",", "self", ".", "strict_para", ",", "self", ".", "softmax_list", ")", "\n", "\n", "# train the model for one episode", "\n", "self", ".", "train", "(", "summary_list", "[", "idx", "]", ",", "reward_list", "[", "idx", "]", ")", "\n", "\n", "", "summary", "=", "self", ".", "produceSummary", "(", ")", "\n", "return", "' '", ".", "join", "(", "summary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.produceSummary": [[59, 79], ["summariser.vector.state_type.State", "len", "td_agent.TDAgent.getGreedySent", "summariser.vector.state_type.State.updateState", "len"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.getGreedySent", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.updateState"], ["", "def", "produceSummary", "(", "self", ")", ":", "\n", "        ", "state", "=", "State", "(", "self", ".", "vectoriser", ".", "sum_token_length", ",", "self", ".", "vectoriser", ".", "base_length", ",", "len", "(", "self", ".", "vectoriser", ".", "sentences", ")", ",", "\n", "self", ".", "vectoriser", ".", "block_num", ",", "self", ".", "vectoriser", ".", "language", ")", "\n", "\n", "# select sentences greedily", "\n", "while", "state", ".", "terminal_state", "==", "0", ":", "\n", "            ", "new_sent_id", "=", "self", ".", "getGreedySent", "(", "state", ")", "\n", "if", "new_sent_id", "==", "0", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "state", ".", "updateState", "(", "new_sent_id", "-", "1", ",", "self", ".", "vectoriser", ".", "sentences", ")", "\n", "\n", "# if the selection terminates by 'finish' action", "\n", "", "", "if", "new_sent_id", "==", "0", ":", "\n", "            ", "assert", "len", "(", "''", ".", "join", "(", "state", ".", "draft_summary_list", ")", ".", "split", "(", "' '", ")", ")", "<=", "self", ".", "vectoriser", ".", "sum_token_length", "\n", "return", "state", ".", "draft_summary_list", "\n", "\n", "# else, the selection terminates because of over-length; thus the last selected action is deleted", "\n", "", "else", ":", "\n", "            ", "return", "state", ".", "draft_summary_list", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.coreUpdate": [[80, 85], ["numpy.dot"], "methods", ["None"], ["", "", "def", "coreUpdate", "(", "self", ",", "reward", ",", "current_vec", ",", "new_vec", ",", "vector_e", ")", ":", "\n", "        ", "delta", "=", "reward", "+", "np", ".", "dot", "(", "self", ".", "weights", ",", "self", ".", "gamma", "*", "new_vec", "-", "current_vec", ")", "\n", "vec_e", "=", "self", ".", "gamma", "*", "self", ".", "lamb", "*", "vector_e", "+", "current_vec", "\n", "self", ".", "weights", "=", "self", ".", "weights", "+", "self", ".", "alpha", "*", "delta", "*", "vec_e", "\n", "return", "vec_e", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.getGreedySent": [[86, 110], ["float", "numpy.dot", "state.getNewStateVec", "numpy.dot", "state.getSelfVector"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getNewStateVec", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getSelfVector"], ["", "def", "getGreedySent", "(", "self", ",", "state", ")", ":", "\n", "        ", "highest_value", "=", "float", "(", "'-inf'", ")", "\n", "best_sent_id", "=", "-", "1", "\n", "for", "act_id", "in", "state", ".", "available_sents", ":", "\n", "\n", "# for action 'finish', the reward is the terminal reward", "\n", "            ", "if", "act_id", "==", "0", ":", "\n", "                ", "temp_state_value", "=", "np", ".", "dot", "(", "self", ".", "weights", ",", "\n", "state", ".", "getSelfVector", "(", "self", ".", "vectoriser", ".", "top_ngrams_list", ",", "\n", "self", ".", "vectoriser", ".", "sentences", ")", ")", "\n", "\n", "# otherwise, the reward is 0, and value-function can be computed using the weight", "\n", "", "else", ":", "\n", "                ", "temp_state_vec", "=", "state", ".", "getNewStateVec", "(", "act_id", "-", "1", ",", "self", ".", "vectoriser", ".", "top_ngrams_list", ",", "\n", "self", ".", "vectoriser", ".", "sentences", ")", "\n", "temp_state_value", "=", "np", ".", "dot", "(", "self", ".", "weights", ",", "temp_state_vec", ")", "\n", "\n", "# get action that results in highest values", "\n", "", "if", "temp_state_value", ">", "highest_value", ":", "\n", "                ", "highest_value", "=", "temp_state_value", "\n", "best_sent_id", "=", "act_id", "\n", "\n", "# the return value ranges from 0 to act_num+1 (inclusive)", "\n", "", "", "return", "best_sent_id", "\n", "\n"]], "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.train": [[111, 130], ["summariser.vector.state_type.State", "summariser.vector.state_type.State.getStateVector", "numpy.zeros", "numpy.zeros", "td_agent.TDAgent.coreUpdate", "len", "summariser.vector.state_type.State.updateState", "summariser.vector.state_type.State.getStateVector", "td_agent.TDAgent.coreUpdate"], "methods", ["home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getStateVector", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.coreUpdate", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.updateState", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.vector.state_type.State.getStateVector", "home.repos.pwc.inspect_result.UKPLab_irj-neural-april.rl.td_agent.TDAgent.coreUpdate"], ["", "def", "train", "(", "self", ",", "summary_actions", ",", "summary_value", ")", ":", "\n", "        ", "state", "=", "State", "(", "self", ".", "vectoriser", ".", "sum_token_length", ",", "self", ".", "vectoriser", ".", "base_length", ",", "\n", "len", "(", "self", ".", "vectoriser", ".", "sentences", ")", ",", "self", ".", "vectoriser", ".", "block_num", ",", "self", ".", "vectoriser", ".", "language", ")", "\n", "current_vec", "=", "state", ".", "getStateVector", "(", "state", ".", "draft_summary_list", ",", "state", ".", "historical_actions", ",", "\n", "self", ".", "vectoriser", ".", "top_ngrams_list", ",", "self", ".", "vectoriser", ".", "sentences", ")", "\n", "\n", "vector_e", "=", "np", ".", "zeros", "(", "self", ".", "vectoriser", ".", "vec_length", ")", "\n", "\n", "for", "act", "in", "summary_actions", ":", "\n", "#BE CAREFUL: here the argument for updateState is act, because here act is the real sentence id, not action", "\n", "            ", "reward", "=", "state", ".", "updateState", "(", "act", ",", "self", ".", "vectoriser", ".", "sentences", ",", "True", ")", "\n", "new_vec", "=", "state", ".", "getStateVector", "(", "state", ".", "draft_summary_list", ",", "state", ".", "historical_actions", ",", "\n", "self", ".", "vectoriser", ".", "top_ngrams_list", ",", "self", ".", "vectoriser", ".", "sentences", ")", "\n", "vector_e", "=", "self", ".", "coreUpdate", "(", "reward", ",", "current_vec", ",", "new_vec", ",", "vector_e", ")", "\n", "current_vec", "=", "new_vec", "\n", "del", "new_vec", "\n", "\n", "", "new_vec", "=", "np", ".", "zeros", "(", "self", ".", "vectoriser", ".", "vec_length", ")", "\n", "self", ".", "coreUpdate", "(", "summary_value", ",", "current_vec", ",", "new_vec", ",", "vector_e", ")", "\n", "\n"]]}