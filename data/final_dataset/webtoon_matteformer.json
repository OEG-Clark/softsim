{"home.repos.pwc.inspect_result.webtoon_matteformer.None.main.copy_script": [[33, 48], ["shutil.copytree", "shutil.copytree", "shutil.copytree", "shutil.copytree", "shutil.copytree", "shutil.copy", "shutil.copy", "shutil.copy", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "shutil.ignore_patterns", "shutil.ignore_patterns", "shutil.ignore_patterns", "shutil.ignore_patterns", "shutil.ignore_patterns"], "function", ["None"], ["def", "copy_script", "(", "root_path", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "root_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root_path", ")", "\n", "os", ".", "makedirs", "(", "CONFIG", ".", "log", ".", "logging_path", ")", "\n", "os", ".", "makedirs", "(", "CONFIG", ".", "log", ".", "checkpoint_path", ")", "\n", "\n", "", "shutil", ".", "copytree", "(", "'./config'", ",", "os", ".", "path", ".", "join", "(", "root_path", ",", "'config'", ")", ",", "ignore", "=", "shutil", ".", "ignore_patterns", "(", "'__pycache__'", ")", ")", "\n", "shutil", ".", "copytree", "(", "'./dataloader'", ",", "os", ".", "path", ".", "join", "(", "root_path", ",", "'dataloader'", ")", ",", "ignore", "=", "shutil", ".", "ignore_patterns", "(", "'__pycache__'", ")", ")", "\n", "shutil", ".", "copytree", "(", "'./networks'", ",", "os", ".", "path", ".", "join", "(", "root_path", ",", "'networks'", ")", ",", "ignore", "=", "shutil", ".", "ignore_patterns", "(", "'__pycache__'", ")", ")", "\n", "shutil", ".", "copytree", "(", "'./trainers'", ",", "os", ".", "path", ".", "join", "(", "root_path", ",", "'trainers'", ")", ",", "ignore", "=", "shutil", ".", "ignore_patterns", "(", "'__pycache__'", ")", ")", "\n", "shutil", ".", "copytree", "(", "'./utils'", ",", "os", ".", "path", ".", "join", "(", "root_path", ",", "'utils'", ")", ",", "ignore", "=", "shutil", ".", "ignore_patterns", "(", "'__pycache__'", ")", ")", "\n", "\n", "shutil", ".", "copy", "(", "'./main.py'", ",", "os", ".", "path", ".", "join", "(", "root_path", ",", "'main.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'./inference.py'", ",", "os", ".", "path", ".", "join", "(", "root_path", ",", "'inference.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'./evaluation.py'", ",", "os", ".", "path", ".", "join", "(", "root_path", ",", "'evaluation.py'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.None.main.main": [[50, 110], ["utils.CONFIG.phase.lower", "utils.get_logger", "dataloader.image_file.ImageFileTrain", "dataloader.image_file.ImageFileTest", "dataloader.data_generator.DataGenerator", "dataloader.data_generator.DataGenerator", "torch.utils.data.DataLoader", "dataloader.prefetcher.Prefetcher", "torch.utils.data.DataLoader", "trainers.trainer.Trainer", "trainers.trainer.Trainer.train", "NotImplementedError", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.get_world_size", "utils.make_dir", "utils.make_dir", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler"], "function", ["home.repos.pwc.inspect_result.webtoon_matteformer.utils.logger.get_logger", "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.train", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.make_dir", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.make_dir"], ["", "def", "main", "(", ")", ":", "\n", "# Train or Test", "\n", "    ", "if", "CONFIG", ".", "phase", ".", "lower", "(", ")", "==", "\"train\"", ":", "\n", "# set distributed training", "\n", "        ", "if", "CONFIG", ".", "dist", ":", "\n", "            ", "CONFIG", ".", "gpu", "=", "CONFIG", ".", "local_rank", "\n", "torch", ".", "cuda", ".", "set_device", "(", "CONFIG", ".", "gpu", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "CONFIG", ".", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "\n", "# Create directories if not exist.", "\n", "", "if", "CONFIG", ".", "local_rank", "==", "0", ":", "\n", "            ", "utils", ".", "make_dir", "(", "CONFIG", ".", "log", ".", "logging_path", ")", "\n", "utils", ".", "make_dir", "(", "CONFIG", ".", "log", ".", "checkpoint_path", ")", "\n", "\n", "", "\"\"\"=== Set logger ===\"\"\"", "\n", "logger", "=", "utils", ".", "get_logger", "(", "CONFIG", ".", "log", ".", "logging_path", ",", "logging_level", "=", "CONFIG", ".", "log", ".", "logging_level", ")", "\n", "\n", "\"\"\"=== Set data loader ===\"\"\"", "\n", "# [1] Composition-1k dataset", "\n", "train_image_file", "=", "ImageFileTrain", "(", "alpha_dir", "=", "CONFIG", ".", "data", ".", "train_alpha", ",", "\n", "fg_dir", "=", "CONFIG", ".", "data", ".", "train_fg", ",", "\n", "bg_dir", "=", "CONFIG", ".", "data", ".", "train_bg", ")", "\n", "test_image_file", "=", "ImageFileTest", "(", "alpha_dir", "=", "CONFIG", ".", "data", ".", "test_alpha", ",", "\n", "merged_dir", "=", "CONFIG", ".", "data", ".", "test_merged", ",", "\n", "trimap_dir", "=", "CONFIG", ".", "data", ".", "test_trimap", ")", "\n", "train_dataset", "=", "DataGenerator", "(", "train_image_file", ",", "phase", "=", "'train'", ")", "\n", "test_dataset", "=", "DataGenerator", "(", "test_image_file", ",", "phase", "=", "'val'", ")", "\n", "\n", "if", "CONFIG", ".", "dist", ":", "\n", "            ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "test_dataset", ")", "\n", "", "else", ":", "\n", "            ", "train_sampler", "=", "None", "\n", "test_sampler", "=", "None", "\n", "\n", "", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "CONFIG", ".", "model", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "CONFIG", ".", "data", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ")", "\n", "train_dataloader", "=", "Prefetcher", "(", "train_dataloader", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "CONFIG", ".", "data", ".", "workers", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "\"\"\"=== Set Trainer ===\"\"\"", "\n", "trainer", "=", "Trainer", "(", "train_dataloader", "=", "train_dataloader", ",", "\n", "test_dataloader", "=", "test_dataloader", ",", "\n", "logger", "=", "logger", ")", "\n", "\"\"\"=== Run Trainer ===\"\"\"", "\n", "trainer", ".", "train", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unknown Phase: {}\"", ".", "format", "(", "CONFIG", ".", "phase", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.None.inference.single_inference": [[15, 44], ["torch.no_grad", "image.cuda.cuda", "trimap.cuda.cuda", "model", "alpha_pred_os8.clone().detach", "utils.get_unknown_tensor_from_pred", "utils.get_unknown_tensor_from_pred", "alpha_pred.astype.astype", "alpha_pred[].data.cpu().numpy", "alpha_pred_os8.clone", "alpha_pred[].data.cpu", "numpy.argmax", "numpy.argmax", "trimap.cuda.cpu().numpy", "trimap.cuda.cpu().numpy", "trimap.cuda.cpu", "trimap.cuda.cpu"], "function", ["home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor_from_pred", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor_from_pred"], ["def", "single_inference", "(", "model", ",", "image_dict", ")", ":", "\n", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "image", ",", "trimap", "=", "image_dict", "[", "'image'", "]", ",", "image_dict", "[", "'trimap'", "]", "\n", "\n", "image", "=", "image", ".", "cuda", "(", ")", "\n", "trimap", "=", "trimap", ".", "cuda", "(", ")", "\n", "\n", "# run model", "\n", "pred", "=", "model", "(", "image", ",", "trimap", ")", "\n", "alpha_pred_os1", ",", "alpha_pred_os4", ",", "alpha_pred_os8", "=", "pred", "[", "'alpha_os1'", "]", ",", "pred", "[", "'alpha_os4'", "]", ",", "pred", "[", "'alpha_os8'", "]", "\n", "\n", "# refinement", "\n", "alpha_pred", "=", "alpha_pred_os8", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "weight_os4", "=", "utils", ".", "get_unknown_tensor_from_pred", "(", "alpha_pred", ",", "rand_width", "=", "CONFIG", ".", "model", ".", "self_refine_width1", ",", "train_mode", "=", "False", ")", "\n", "alpha_pred", "[", "weight_os4", ">", "0", "]", "=", "alpha_pred_os4", "[", "weight_os4", ">", "0", "]", "\n", "weight_os1", "=", "utils", ".", "get_unknown_tensor_from_pred", "(", "alpha_pred", ",", "rand_width", "=", "CONFIG", ".", "model", ".", "self_refine_width2", ",", "train_mode", "=", "False", ")", "\n", "alpha_pred", "[", "weight_os1", ">", "0", "]", "=", "alpha_pred_os1", "[", "weight_os1", ">", "0", "]", "\n", "\n", "h", ",", "w", "=", "image_dict", "[", "'alpha_shape'", "]", "\n", "alpha_pred", "=", "alpha_pred", "[", "0", ",", "0", ",", "...", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255", "\n", "alpha_pred", "=", "alpha_pred", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "alpha_pred", "[", "np", ".", "argmax", "(", "trimap", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "axis", "=", "0", ")", "==", "0", "]", "=", "0.0", "\n", "alpha_pred", "[", "np", ".", "argmax", "(", "trimap", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "axis", "=", "0", ")", "==", "2", "]", "=", "255.", "\n", "\n", "alpha_pred", "=", "alpha_pred", "[", "32", ":", "h", "+", "32", ",", "32", ":", "w", "+", "32", "]", "\n", "\n", "return", "alpha_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.None.inference.generator_tensor_dict": [[46, 103], ["cv2.imread", "cv2.imread", "torch.tensor().view", "torch.tensor().view", "image.transpose().astype.transpose().astype", "sample[].sub_().div_", "torch.nn.functional.one_hot().permute().float", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.pad", "torch.from_numpy", "torch.from_numpy().to", "torch.tensor", "torch.tensor", "image.transpose().astype.transpose", "sample[].sub_", "torch.nn.functional.one_hot().permute", "torch.from_numpy", "torch.nn.functional.one_hot"], "function", ["None"], ["", "", "def", "generator_tensor_dict", "(", "image_path", ",", "trimap_path", ")", ":", "\n", "# read images", "\n", "    ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "trimap", "=", "cv2", ".", "imread", "(", "trimap_path", ",", "0", ")", "\n", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'trimap'", ":", "trimap", ",", "'alpha_shape'", ":", "(", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", "}", "\n", "\n", "# reshape", "\n", "h", ",", "w", "=", "sample", "[", "\"alpha_shape\"", "]", "\n", "\n", "if", "h", "%", "32", "==", "0", "and", "w", "%", "32", "==", "0", ":", "\n", "        ", "padded_image", "=", "np", ".", "pad", "(", "sample", "[", "'image'", "]", ",", "(", "(", "32", ",", "32", ")", ",", "(", "32", ",", "32", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "padded_trimap", "=", "np", ".", "pad", "(", "sample", "[", "'trimap'", "]", ",", "(", "(", "32", ",", "32", ")", ",", "(", "32", ",", "32", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "\n", "sample", "[", "'image'", "]", "=", "padded_image", "\n", "sample", "[", "'trimap'", "]", "=", "padded_trimap", "\n", "\n", "", "else", ":", "\n", "        ", "target_h", "=", "32", "*", "(", "(", "h", "-", "1", ")", "//", "32", "+", "1", ")", "\n", "target_w", "=", "32", "*", "(", "(", "w", "-", "1", ")", "//", "32", "+", "1", ")", "\n", "pad_h", "=", "target_h", "-", "h", "\n", "pad_w", "=", "target_w", "-", "w", "\n", "padded_image", "=", "np", ".", "pad", "(", "sample", "[", "'image'", "]", ",", "(", "(", "32", ",", "pad_h", "+", "32", ")", ",", "(", "32", ",", "pad_w", "+", "32", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "padded_trimap", "=", "np", ".", "pad", "(", "sample", "[", "'trimap'", "]", ",", "(", "(", "32", ",", "pad_h", "+", "32", ")", ",", "(", "32", ",", "pad_w", "+", "32", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "\n", "sample", "[", "'image'", "]", "=", "padded_image", "\n", "sample", "[", "'trimap'", "]", "=", "padded_trimap", "\n", "\n", "# ImageNet mean & std", "\n", "", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "\n", "# convert GBR images to RGB", "\n", "image", ",", "trimap", "=", "sample", "[", "'image'", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "sample", "[", "'trimap'", "]", "\n", "\n", "# swap color axis", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# trimap configuration", "\n", "padded_trimap", "[", "padded_trimap", "<", "85", "]", "=", "0", "\n", "padded_trimap", "[", "padded_trimap", ">=", "170", "]", "=", "2", "\n", "padded_trimap", "[", "padded_trimap", ">=", "85", "]", "=", "1", "\n", "\n", "# normalize image", "\n", "image", "/=", "255.", "\n", "\n", "# to tensor", "\n", "sample", "[", "'image'", "]", ",", "sample", "[", "'trimap'", "]", "=", "torch", ".", "from_numpy", "(", "image", ")", ",", "torch", ".", "from_numpy", "(", "trimap", ")", ".", "to", "(", "torch", ".", "long", ")", "\n", "sample", "[", "'image'", "]", "=", "sample", "[", "'image'", "]", ".", "sub_", "(", "mean", ")", ".", "div_", "(", "std", ")", "\n", "\n", "# trimap to one-hot 3 channel", "\n", "sample", "[", "'trimap'", "]", "=", "F", ".", "one_hot", "(", "sample", "[", "'trimap'", "]", ",", "num_classes", "=", "3", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "# add first channel", "\n", "sample", "[", "'image'", "]", ",", "sample", "[", "'trimap'", "]", "=", "sample", "[", "'image'", "]", "[", "None", ",", "...", "]", ",", "sample", "[", "'trimap'", "]", "[", "None", ",", "...", "]", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.None.evaluation.evaluate": [[8, 40], ["enumerate", "print", "print", "os.listdir", "cv2.imread().astype", "cv2.imread().astype", "cv2.imread().astype", "utils.compute_mse_loss", "print", "img_names.append", "mse_loss_unknown.append", "sad_loss_unknown.append", "print", "numpy.array().mean", "numpy.array().mean", "print", "utils.compute_sad_loss", "os.path.isfile", "os.path.isfile", "os.path.isfile", "cv2.imread", "cv2.imread", "cv2.imread", "len", "numpy.array", "numpy.array", "os.path.join", "os.path.join", "os.path.join", "len", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.listdir"], "function", ["home.repos.pwc.inspect_result.webtoon_matteformer.utils.evaluate.compute_mse_loss", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.evaluate.compute_sad_loss"], ["def", "evaluate", "(", "args", ")", ":", "\n", "    ", "img_names", "=", "[", "]", "\n", "mse_loss_unknown", "=", "[", "]", "\n", "sad_loss_unknown", "=", "[", "]", "\n", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "os", ".", "listdir", "(", "args", ".", "label_dir", ")", ")", ":", "\n", "\n", "        ", "if", "not", "(", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "pred_dir", ",", "img", ")", ")", "and", "\n", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "label_dir", ",", "img", ")", ")", "and", "\n", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "trimap_dir", ",", "img", ")", ")", ")", ")", ":", "\n", "            ", "print", "(", "'[{}/{}] \"{}\" skipping'", ".", "format", "(", "i", ",", "len", "(", "os", ".", "listdir", "(", "args", ".", "label_dir", ")", ")", ",", "img", ")", ")", "\n", "continue", "\n", "\n", "", "pred", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "args", ".", "pred_dir", ",", "img", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "label", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "args", ".", "label_dir", ",", "img", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "trimap", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "args", ".", "trimap_dir", ",", "img", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# calculate loss", "\n", "mse_loss_unknown_", "=", "compute_mse_loss", "(", "pred", ",", "label", ",", "trimap", ")", "\n", "sad_loss_unknown_", "=", "compute_sad_loss", "(", "pred", ",", "label", ",", "trimap", ")", "[", "0", "]", "\n", "print", "(", "'Unknown Region: MSE:'", ",", "mse_loss_unknown_", ",", "' SAD:'", ",", "sad_loss_unknown_", ")", "\n", "\n", "# save for average", "\n", "img_names", ".", "append", "(", "img", ")", "\n", "\n", "mse_loss_unknown", ".", "append", "(", "mse_loss_unknown_", ")", "# mean l2 loss per unknown pixel", "\n", "sad_loss_unknown", ".", "append", "(", "sad_loss_unknown_", ")", "# l1 loss on unknown area", "\n", "\n", "print", "(", "'[{}/{}] \"{}\" processed'", ".", "format", "(", "i", ",", "len", "(", "os", ".", "listdir", "(", "args", ".", "label_dir", ")", ")", ",", "img", ")", ")", "\n", "\n", "", "print", "(", "'* Unknown Region: MSE:'", ",", "np", ".", "array", "(", "mse_loss_unknown", ")", ".", "mean", "(", ")", ",", "' SAD:'", ",", "np", ".", "array", "(", "sad_loss_unknown", ")", ".", "mean", "(", ")", ")", "\n", "print", "(", "'* if you want to report scores in your paper, please use the official matlab codes for evaluation.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.config.load_config": [[89, 116], ["custom_config.keys", "NotImplementedError", "isinstance", "isinstance", "isinstance", "config.load_config", "ValueError", "ValueError", "type", "type"], "function", ["home.repos.pwc.inspect_result.webtoon_matteformer.utils.config.load_config"], ["def", "load_config", "(", "custom_config", ",", "default_config", "=", "CONFIG", ",", "prefix", "=", "\"CONFIG\"", ")", ":", "\n", "    ", "\"\"\"\n    This function will recursively overwrite the default config by a custom config\n    :param default_config:\n    :param custom_config: parsed from config/config.toml\n    :param prefix: prefix for config key\n    :return: None\n    \"\"\"", "\n", "if", "\"is_default\"", "in", "default_config", ":", "\n", "        ", "default_config", ".", "is_default", "=", "False", "\n", "\n", "", "for", "key", "in", "custom_config", ".", "keys", "(", ")", ":", "\n", "        ", "full_key", "=", "\".\"", ".", "join", "(", "[", "prefix", ",", "key", "]", ")", "\n", "if", "key", "not", "in", "default_config", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown config key: {}\"", ".", "format", "(", "full_key", ")", ")", "\n", "", "elif", "isinstance", "(", "custom_config", "[", "key", "]", ",", "dict", ")", ":", "\n", "            ", "if", "isinstance", "(", "default_config", "[", "key", "]", ",", "dict", ")", ":", "\n", "                ", "load_config", "(", "default_config", "=", "default_config", "[", "key", "]", ",", "\n", "custom_config", "=", "custom_config", "[", "key", "]", ",", "\n", "prefix", "=", "full_key", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"{}: Expected {}, got dict instead.\"", ".", "format", "(", "full_key", ",", "type", "(", "custom_config", "[", "key", "]", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "default_config", "[", "key", "]", ",", "dict", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"{}: Expected dict, got {} instead.\"", ".", "format", "(", "full_key", ",", "type", "(", "custom_config", "[", "key", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "default_config", "[", "key", "]", "=", "custom_config", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.evaluate.compute_mse_loss": [[5, 10], ["numpy.sum", "numpy.sum"], "function", ["None"], ["def", "compute_mse_loss", "(", "pred", ",", "target", ",", "trimap", ")", ":", "\n", "    ", "error_map", "=", "(", "pred", "-", "target", ")", "/", "255.0", "\n", "loss", "=", "np", ".", "sum", "(", "(", "error_map", "**", "2", ")", "*", "(", "trimap", "==", "128", ")", ")", "/", "(", "np", ".", "sum", "(", "trimap", "==", "128", ")", "+", "1e-8", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.evaluate.compute_sad_loss": [[12, 17], ["numpy.abs", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "compute_sad_loss", "(", "pred", ",", "target", ",", "trimap", ")", ":", "\n", "    ", "error_map", "=", "np", ".", "abs", "(", "(", "pred", "-", "target", ")", "/", "255.0", ")", "\n", "loss", "=", "np", ".", "sum", "(", "error_map", "*", "(", "trimap", "==", "128", ")", ")", "\n", "\n", "return", "loss", "/", "1000", ",", "np", ".", "sum", "(", "trimap", "==", "128", ")", "/", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.logger.MyLogger.__init__": [[57, 59], ["logging.Logger.__init__"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MyLogger", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.logger.MyLogger._log": [[60, 63], ["super()._log"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.utils.logger.MyLogger._log"], ["", "def", "_log", "(", "self", ",", "level", ",", "msg", ",", "args", ",", "exc_info", "=", "None", ",", "extra", "=", "None", ",", "stack_info", "=", "False", ")", ":", "\n", "        ", "if", "CONFIG", ".", "local_rank", "==", "0", ":", "\n", "            ", "super", "(", ")", ".", "_log", "(", "level", ",", "msg", ",", "args", ",", "exc_info", ",", "extra", ",", "stack_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.logger.make_color_wheel": [[18, 48], ["numpy.zeros", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "make_color_wheel", "(", ")", ":", "\n", "# from https://github.com/JiahuiYu/generative_inpainting/blob/master/inpaint_ops.py", "\n", "    ", "RY", ",", "YG", ",", "GC", ",", "CB", ",", "BM", ",", "MR", "=", "(", "15", ",", "6", ",", "4", ",", "11", ",", "13", ",", "6", ")", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "[", "ncols", ",", "3", "]", ")", "\n", "col", "=", "0", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "255", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "RY", ")", "/", "RY", ")", ")", "\n", "col", "+=", "RY", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "YG", ")", "/", "YG", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "255", "\n", "col", "+=", "YG", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "GC", ")", "/", "GC", ")", ")", "\n", "col", "+=", "GC", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "CB", ")", "/", "CB", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "255", "\n", "col", "+=", "CB", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "BM", ")", "/", "BM", ")", ")", "\n", "col", "+=", "+", "BM", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "MR", ")", "/", "MR", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "255", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.logger.get_logger": [[65, 99], ["datetime.datetime.now().strftime", "logging.setLoggerClass", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "pprint.pprint", "logging_level.upper", "datetime.datetime.now"], "function", ["None"], ["", "", "", "def", "get_logger", "(", "log_dir", "=", "None", ",", "logging_level", "=", "\"DEBUG\"", ")", ":", "\n", "    ", "\"\"\"\n    Return a default build-in logger if log_file=None and\n    Return a build-in logger which dump stdout to log_file if log_file is assigned\n    :param log_file: logging file dumped from stdout\n    :param logging_level:\n    :return: Logger\n    \"\"\"", "\n", "level", "=", "LEVELS", "[", "logging_level", ".", "upper", "(", ")", "]", "\n", "exp_string", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ")", "\n", "\n", "logging", ".", "setLoggerClass", "(", "MyLogger", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'Logger'", ")", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "# create formatter", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s] %(levelname)s: %(message)s'", ",", "datefmt", "=", "'%m-%d %H:%M:%S'", ")", "\n", "\n", "# create console handler", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "level", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "# add the handlers to logger", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# create file handler", "\n", "if", "log_dir", "is", "not", "None", "and", "CONFIG", ".", "local_rank", "==", "0", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "exp_string", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", "+", "'.log'", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setLevel", "(", "level", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "pprint", "(", "CONFIG", ",", "stream", "=", "fh", ".", "stream", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.make_dir": [[11, 17], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "make_dir", "(", "target_dir", ")", ":", "\n", "    ", "\"\"\"\n    Create dir if not exists\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "target_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "target_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.print_network": [[19, 31], ["logging.getLogger", "model.parameters", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "p.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "model", ",", "name", ")", ":", "\n", "    ", "\"\"\"\n    Print out the network information\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"Logger\"", ")", "\n", "num_params", "=", "0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "p", ".", "numel", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "model", ")", "\n", "logger", ".", "info", "(", "name", ")", "\n", "logger", ".", "info", "(", "\"Number of parameters: {}\"", ".", "format", "(", "num_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.update_lr": [[33, 39], ["None"], "function", ["None"], ["", "def", "update_lr", "(", "lr", ",", "optimizer", ")", ":", "\n", "    ", "\"\"\"\n    update learning rates\n    \"\"\"", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.warmup_lr": [[41, 46], ["None"], "function", ["None"], ["", "", "def", "warmup_lr", "(", "init_lr", ",", "step", ",", "iter_num", ")", ":", "\n", "    ", "\"\"\"\n    Warm up learning rate\n    \"\"\"", "\n", "return", "step", "/", "iter_num", "*", "init_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.remove_prefix_state_dict": [[48, 61], ["list", "first_state_name.startswith", "state_dict.items", "state_dict.items", "state_dict.keys", "state_dict[].float", "state_dict[].float", "len"], "function", ["None"], ["", "def", "remove_prefix_state_dict", "(", "state_dict", ",", "prefix", "=", "\"module\"", ")", ":", "\n", "    ", "\"\"\"\n    remove prefix from the key of pretrained state dict for Data-Parallel\n    \"\"\"", "\n", "new_state_dict", "=", "{", "}", "\n", "first_state_name", "=", "list", "(", "state_dict", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "if", "not", "first_state_name", ".", "startswith", "(", "prefix", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "new_state_dict", "[", "key", "]", "=", "state_dict", "[", "key", "]", ".", "float", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "new_state_dict", "[", "key", "[", "len", "(", "prefix", ")", "+", "1", ":", "]", "]", "=", "state_dict", "[", "key", "]", ".", "float", "(", ")", "\n", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor": [[63, 72], ["trimap[].float", "trimap.eq().float", "trimap.eq"], "function", ["None"], ["", "def", "get_unknown_tensor", "(", "trimap", ")", ":", "\n", "    ", "\"\"\"\n    get 1-channel unknown area tensor from the 3-channel/1-channel trimap tensor\n    \"\"\"", "\n", "if", "CONFIG", ".", "model", ".", "trimap_channel", "==", "3", ":", "\n", "        ", "weight", "=", "trimap", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "        ", "weight", "=", "trimap", ".", "eq", "(", "1", ")", ".", "float", "(", ")", "\n", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.reduce_tensor_dict": [[74, 82], ["tensor_dict.items", "util.reduce_tensor"], "function", ["home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.reduce_tensor"], ["", "def", "reduce_tensor_dict", "(", "tensor_dict", ",", "mode", "=", "'mean'", ")", ":", "\n", "    ", "\"\"\"\n    average tensor dict over different GPUs\n    \"\"\"", "\n", "for", "key", ",", "tensor", "in", "tensor_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "tensor", "is", "not", "None", ":", "\n", "            ", "tensor_dict", "[", "key", "]", "=", "reduce_tensor", "(", "tensor", ",", "mode", ")", "\n", "", "", "return", "tensor_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.reduce_tensor": [[84, 97], ["tensor.clone", "torch.all_reduce", "NotImplementedError"], "function", ["None"], ["", "def", "reduce_tensor", "(", "tensor", ",", "mode", "=", "'mean'", ")", ":", "\n", "    ", "\"\"\"\n    average tensor over different GPUs\n    \"\"\"", "\n", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "if", "mode", "==", "'mean'", ":", "\n", "        ", "rt", "/=", "CONFIG", ".", "world_size", "\n", "", "elif", "mode", "==", "'sum'", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"reduce mode can only be 'mean' or 'sum'\"", ")", "\n", "", "return", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor_from_pred": [[102, 129], ["torch.interpolate", "pred.data.cpu().numpy.data.cpu().numpy", "numpy.ones_like", "range", "numpy.zeros_like", "numpy.array", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.interpolate", "cv2.dilate", "pred.data.cpu().numpy.data.cpu", "numpy.random.randint", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "get_unknown_tensor_from_pred", "(", "pred", ",", "rand_width", "=", "30", ",", "train_mode", "=", "True", ")", ":", "\n", "### pred: N, 1 ,H, W ", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "pred", ".", "shape", "\n", "pred", "=", "F", ".", "interpolate", "(", "pred", ",", "size", "=", "(", "640", ",", "640", ")", ",", "mode", "=", "'nearest'", ")", "\n", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "uncertain_area", "=", "np", ".", "ones_like", "(", "pred", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "uncertain_area", "[", "pred", "<", "1.0", "/", "255.0", "]", "=", "0", "\n", "uncertain_area", "[", "pred", ">", "1", "-", "1.0", "/", "255.0", "]", "=", "0", "\n", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "uncertain_area_", "=", "uncertain_area", "[", "n", ",", "0", ",", ":", ",", ":", "]", "# H, W", "\n", "if", "train_mode", ":", "\n", "            ", "width", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "rand_width", ")", "\n", "", "else", ":", "\n", "            ", "width", "=", "rand_width", "//", "2", "\n", "", "uncertain_area_", "=", "cv2", ".", "dilate", "(", "uncertain_area_", ",", "Kernels", "[", "width", "]", ")", "\n", "uncertain_area", "[", "n", ",", "0", ",", ":", ",", ":", "]", "=", "uncertain_area_", "\n", "\n", "", "weight", "=", "np", ".", "zeros_like", "(", "uncertain_area", ")", "\n", "weight", "[", "uncertain_area", "==", "1", "]", "=", "1", "\n", "\n", "weight", "=", "np", ".", "array", "(", "weight", ",", "dtype", "=", "np", ".", "float", ")", "\n", "weight", "=", "torch", ".", "from_numpy", "(", "weight", ")", ".", "cuda", "(", ")", "\n", "\n", "weight", "=", "F", ".", "interpolate", "(", "weight", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "return", "weight", "", "", ""]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile.__init__": [[8, 12], ["logging.getLogger", "numpy.random.RandomState"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "phase", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\"Logger\"", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._get_valid_names": [[13, 31], ["list", "image_file.ImageFile._get_name_set", "functools.reduce", "image_file.ImageFile.rng.shuffle", "len", "image_file.ImageFile.logger.error", "image_file.ImageFile.logger.info", "image_file.ImageFile.phase.upper", "len"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._get_name_set"], ["", "def", "_get_valid_names", "(", "self", ",", "*", "dirs", ",", "shuffle", "=", "True", ")", ":", "\n", "# Extract valid names", "\n", "        ", "name_sets", "=", "[", "self", ".", "_get_name_set", "(", "d", ")", "for", "d", "in", "dirs", "]", "\n", "\n", "# Reduce", "\n", "def", "_join_and", "(", "a", ",", "b", ")", ":", "\n", "            ", "return", "a", "&", "b", "\n", "\n", "", "valid_names", "=", "list", "(", "functools", ".", "reduce", "(", "_join_and", ",", "name_sets", ")", ")", "\n", "if", "shuffle", ":", "\n", "            ", "self", ".", "rng", ".", "shuffle", "(", "valid_names", ")", "\n", "\n", "", "if", "len", "(", "valid_names", ")", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "'No image valid'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'{}: {} foreground/images are valid'", ".", "format", "(", "self", ".", "phase", ".", "upper", "(", ")", ",", "len", "(", "valid_names", ")", ")", ")", "\n", "\n", "", "return", "valid_names", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._get_name_set": [[32, 41], ["glob.glob", "set", "os.path.join", "os.path.basename", "set.add", "os.path.splitext"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_name_set", "(", "dir_name", ")", ":", "\n", "        ", "path_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dir_name", ",", "'*'", ")", ")", "\n", "name_set", "=", "set", "(", ")", "\n", "for", "path", "in", "path_list", ":", "\n", "            ", "name", "=", "os", ".", "path", ".", "basename", "(", "path", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "name", ")", "[", "0", "]", "\n", "name_set", ".", "add", "(", "name", ")", "\n", "", "return", "name_set", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._list_abspath": [[42, 46], ["os.path.join"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_list_abspath", "(", "data_dir", ",", "ext", ",", "data_list", ")", ":", "\n", "        ", "return", "[", "os", ".", "path", ".", "join", "(", "data_dir", ",", "name", "+", "ext", ")", "\n", "for", "name", "in", "data_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFileTrain.__init__": [[49, 73], ["image_file.ImageFile.__init__", "image_file.ImageFileTrain.logger.debug", "image_file.ImageFileTrain._get_valid_names", "image_file.ImageFileTrain._list_abspath", "image_file.ImageFileTrain._list_abspath", "image_file.ImageFileTrain._list_abspath", "os.path.splitext", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._get_valid_names", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._list_abspath", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._list_abspath", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._list_abspath"], ["    ", "def", "__init__", "(", "self", ",", "\n", "alpha_dir", "=", "\"train_alpha\"", ",", "\n", "fg_dir", "=", "\"train_fg\"", ",", "\n", "bg_dir", "=", "\"train_bg\"", ",", "\n", "alpha_ext", "=", "\".jpg\"", ",", "\n", "fg_ext", "=", "\".jpg\"", ",", "\n", "bg_ext", "=", "\".jpg\"", ")", ":", "\n", "        ", "super", "(", "ImageFileTrain", ",", "self", ")", ".", "__init__", "(", "phase", "=", "\"train\"", ")", "\n", "\n", "self", ".", "alpha_dir", "=", "alpha_dir", "\n", "self", ".", "fg_dir", "=", "fg_dir", "\n", "self", ".", "bg_dir", "=", "bg_dir", "\n", "self", ".", "alpha_ext", "=", "alpha_ext", "\n", "self", ".", "fg_ext", "=", "fg_ext", "\n", "self", ".", "bg_ext", "=", "bg_ext", "\n", "\n", "self", ".", "logger", ".", "debug", "(", "'Load Training Images From Folders'", ")", "\n", "\n", "self", ".", "valid_fg_list", "=", "self", ".", "_get_valid_names", "(", "self", ".", "fg_dir", ",", "self", ".", "alpha_dir", ")", "\n", "self", ".", "valid_bg_list", "=", "[", "os", ".", "path", ".", "splitext", "(", "name", ")", "[", "0", "]", "for", "name", "in", "os", ".", "listdir", "(", "self", ".", "bg_dir", ")", "]", "\n", "\n", "self", ".", "alpha", "=", "self", ".", "_list_abspath", "(", "self", ".", "alpha_dir", ",", "self", ".", "alpha_ext", ",", "self", ".", "valid_fg_list", ")", "\n", "self", ".", "fg", "=", "self", ".", "_list_abspath", "(", "self", ".", "fg_dir", ",", "self", ".", "fg_ext", ",", "self", ".", "valid_fg_list", ")", "\n", "self", ".", "bg", "=", "self", ".", "_list_abspath", "(", "self", ".", "bg_dir", ",", "self", ".", "bg_ext", ",", "self", ".", "valid_bg_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFileTrain.__len__": [[74, 76], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFileTest.__init__": [[79, 102], ["image_file.ImageFile.__init__", "image_file.ImageFileTest.logger.debug", "image_file.ImageFileTest._get_valid_names", "image_file.ImageFileTest._list_abspath", "image_file.ImageFileTest._list_abspath", "image_file.ImageFileTest._list_abspath"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._get_valid_names", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._list_abspath", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._list_abspath", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFile._list_abspath"], ["    ", "def", "__init__", "(", "self", ",", "\n", "alpha_dir", "=", "\"test_alpha\"", ",", "\n", "merged_dir", "=", "\"test_merged\"", ",", "\n", "trimap_dir", "=", "\"test_trimap\"", ",", "\n", "alpha_ext", "=", "\".png\"", ",", "\n", "merged_ext", "=", "\".png\"", ",", "\n", "trimap_ext", "=", "\".png\"", ")", ":", "\n", "        ", "super", "(", "ImageFileTest", ",", "self", ")", ".", "__init__", "(", "phase", "=", "\"test\"", ")", "\n", "\n", "self", ".", "alpha_dir", "=", "alpha_dir", "\n", "self", ".", "merged_dir", "=", "merged_dir", "\n", "self", ".", "trimap_dir", "=", "trimap_dir", "\n", "self", ".", "alpha_ext", "=", "alpha_ext", "\n", "self", ".", "merged_ext", "=", "merged_ext", "\n", "self", ".", "trimap_ext", "=", "trimap_ext", "\n", "\n", "self", ".", "logger", ".", "debug", "(", "'Load Testing Images From Folders'", ")", "\n", "\n", "self", ".", "valid_image_list", "=", "self", ".", "_get_valid_names", "(", "self", ".", "alpha_dir", ",", "self", ".", "merged_dir", ",", "self", ".", "trimap_dir", ",", "shuffle", "=", "False", ")", "\n", "\n", "self", ".", "alpha", "=", "self", ".", "_list_abspath", "(", "self", ".", "alpha_dir", ",", "self", ".", "alpha_ext", ",", "self", ".", "valid_image_list", ")", "\n", "self", ".", "merged", "=", "self", ".", "_list_abspath", "(", "self", ".", "merged_dir", ",", "self", ".", "merged_ext", ",", "self", ".", "valid_image_list", ")", "\n", "self", ".", "trimap", "=", "self", ".", "_list_abspath", "(", "self", ".", "trimap_dir", ",", "self", ".", "trimap_ext", ",", "self", ".", "valid_image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.image_file.ImageFileTest.__len__": [[103, 105], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.prefetcher.Prefetcher.__init__": [[8, 12], ["torch.cuda.Stream"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "orig_loader", "=", "loader", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "self", ".", "next_sample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.prefetcher.Prefetcher.preload": [[13, 24], ["next", "torch.cuda.stream", "prefetcher.Prefetcher.next_sample.items", "isinstance", "value.cuda"], "methods", ["None"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "next_sample", "=", "next", "(", "self", ".", "loader", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "next_sample", "=", "None", "\n", "return", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "next_sample", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "self", ".", "next_sample", "[", "key", "]", "=", "value", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.prefetcher.Prefetcher.__next__": [[25, 38], ["torch.cuda.current_stream().wait_stream", "sample.items", "prefetcher.Prefetcher.preload", "StopIteration", "torch.cuda.current_stream", "isinstance", "sample[].record_stream", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.prefetcher.Prefetcher.preload"], ["", "", "", "", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "sample", "=", "self", ".", "next_sample", "\n", "if", "sample", "is", "not", "None", ":", "\n", "            ", "for", "key", ",", "value", "in", "sample", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "sample", "[", "key", "]", ".", "record_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ")", "\n", "", "", "self", ".", "preload", "(", ")", "\n", "", "else", ":", "\n", "# throw stop exception if there is no more data to perform as a default dataloader", "\n", "            ", "raise", "StopIteration", "(", "\"No samples in loader. example: `iterator = iter(Prefetcher(loader)); \"", "\n", "\"data = next(iterator)`\"", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.prefetcher.Prefetcher.__iter__": [[39, 43], ["iter", "prefetcher.Prefetcher.preload"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.prefetcher.Prefetcher.preload"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "loader", "=", "iter", "(", "self", ".", "orig_loader", ")", "\n", "self", ".", "preload", "(", ")", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.ToTensor.__init__": [[30, 34], ["torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "phase", "=", "\"test\"", ")", ":", "\n", "        ", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.ToTensor.__call__": [[35, 78], ["image.transpose().astype.transpose().astype.transpose().astype", "numpy.expand_dims", "numpy.expand_dims", "sample[].sub_().div_", "torch.from_numpy().float", "numpy.expand_dims.astype", "numpy.expand_dims.astype", "torch.from_numpy().sub_().div_", "torch.from_numpy().sub_().div_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().to", "torch.nn.functional.one_hot().permute().float", "image.transpose().astype.transpose().astype.transpose", "[].transpose().astype", "[].transpose().astype", "sample[].sub_", "[].float", "NotImplementedError", "torch.from_numpy", "torch.from_numpy().sub_", "torch.from_numpy().sub_", "torch.from_numpy", "torch.nn.functional.one_hot().permute", "[].transpose", "[].transpose", "torch.from_numpy", "torch.from_numpy", "torch.nn.functional.one_hot"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "# convert GBR images to RGB", "\n", "        ", "image", ",", "alpha", ",", "trimap", ",", "mask", "=", "sample", "[", "'image'", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "sample", "[", "'alpha'", "]", ",", "sample", "[", "'trimap'", "]", ",", "sample", "[", "'mask'", "]", "\n", "\n", "alpha", "[", "alpha", "<", "0", "]", "=", "0", "\n", "alpha", "[", "alpha", ">", "1", "]", "=", "1", "\n", "\n", "# swap color axis because", "\n", "# numpy image: H x W x C", "\n", "# torch image: C X H X W", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "alpha", "=", "np", ".", "expand_dims", "(", "alpha", ".", "astype", "(", "np", ".", "float32", ")", ",", "axis", "=", "0", ")", "\n", "trimap", "[", "trimap", "<", "85", "]", "=", "0", "\n", "trimap", "[", "trimap", ">=", "170", "]", "=", "2", "\n", "trimap", "[", "trimap", ">=", "85", "]", "=", "1", "\n", "\n", "mask", "=", "np", ".", "expand_dims", "(", "mask", ".", "astype", "(", "np", ".", "float32", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# normalize image", "\n", "image", "/=", "255.", "\n", "\n", "if", "self", ".", "phase", "==", "\"train\"", ":", "\n", "# convert GBR images to RGB", "\n", "            ", "fg", "=", "sample", "[", "'fg'", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "sample", "[", "'fg'", "]", "=", "torch", ".", "from_numpy", "(", "fg", ")", ".", "sub_", "(", "self", ".", "mean", ")", ".", "div_", "(", "self", ".", "std", ")", "\n", "bg", "=", "sample", "[", "'bg'", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "sample", "[", "'bg'", "]", "=", "torch", ".", "from_numpy", "(", "bg", ")", ".", "sub_", "(", "self", ".", "mean", ")", ".", "div_", "(", "self", ".", "std", ")", "\n", "# del sample['image_name']", "\n", "\n", "", "sample", "[", "'image'", "]", ",", "sample", "[", "'alpha'", "]", ",", "sample", "[", "'trimap'", "]", "=", "torch", ".", "from_numpy", "(", "image", ")", ",", "torch", ".", "from_numpy", "(", "alpha", ")", ",", "torch", ".", "from_numpy", "(", "trimap", ")", ".", "to", "(", "torch", ".", "long", ")", "\n", "sample", "[", "'image'", "]", "=", "sample", "[", "'image'", "]", ".", "sub_", "(", "self", ".", "mean", ")", ".", "div_", "(", "self", ".", "std", ")", "\n", "\n", "if", "CONFIG", ".", "model", ".", "trimap_channel", "==", "3", ":", "\n", "            ", "sample", "[", "'trimap'", "]", "=", "F", ".", "one_hot", "(", "sample", "[", "'trimap'", "]", ",", "num_classes", "=", "3", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "", "elif", "CONFIG", ".", "model", ".", "trimap_channel", "==", "1", ":", "\n", "            ", "sample", "[", "'trimap'", "]", "=", "sample", "[", "'trimap'", "]", "[", "None", ",", "...", "]", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"CONFIG.model.trimap_channel can only be 3 or 1\"", ")", "\n", "\n", "", "sample", "[", "'mask'", "]", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomAffine.__init__": [[84, 125], ["isinstance", "isinstance", "ValueError", "isinstance", "isinstance", "isinstance", "len", "len", "ValueError", "len", "ValueError", "ValueError", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "degrees", ",", "translate", "=", "None", ",", "scale", "=", "None", ",", "shear", "=", "None", ",", "flip", "=", "None", ",", "resample", "=", "False", ",", "fillcolor", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "degrees", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "degrees", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If degrees is a single number, it must be positive.\"", ")", "\n", "", "self", ".", "degrees", "=", "(", "-", "degrees", ",", "degrees", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "degrees", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "degrees", ")", "==", "2", ",", "\"degrees should be a list or tuple and it must be of length 2.\"", "\n", "self", ".", "degrees", "=", "degrees", "\n", "\n", "", "if", "translate", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "translate", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "translate", ")", "==", "2", ",", "\"translate should be a list or tuple and it must be of length 2.\"", "\n", "for", "t", "in", "translate", ":", "\n", "                ", "if", "not", "(", "0.0", "<=", "t", "<=", "1.0", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"translation values should be between 0 and 1\"", ")", "\n", "", "", "", "self", ".", "translate", "=", "translate", "\n", "\n", "if", "scale", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "scale", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "scale", ")", "==", "2", ",", "\"scale should be a list or tuple and it must be of length 2.\"", "\n", "for", "s", "in", "scale", ":", "\n", "                ", "if", "s", "<=", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"scale values should be positive\"", ")", "\n", "", "", "", "self", ".", "scale", "=", "scale", "\n", "\n", "if", "shear", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "shear", ",", "numbers", ".", "Number", ")", ":", "\n", "                ", "if", "shear", "<", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"If shear is a single number, it must be positive.\"", ")", "\n", "", "self", ".", "shear", "=", "(", "-", "shear", ",", "shear", ")", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "shear", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "shear", ")", "==", "2", ",", "\"shear should be a list or tuple and it must be of length 2.\"", "\n", "self", ".", "shear", "=", "shear", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "shear", "=", "shear", "\n", "\n", "", "self", ".", "resample", "=", "resample", "\n", "self", ".", "fillcolor", "=", "fillcolor", "\n", "self", ".", "flip", "=", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomAffine.get_params": [[126, 157], ["random.uniform", "random.uniform", "numpy.round", "numpy.round", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "numpy.random.rand"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "degrees", ",", "translate", ",", "scale_ranges", ",", "shears", ",", "flip", ",", "img_size", ")", ":", "\n", "        ", "\"\"\"Get parameters for affine transformation\n\n        Returns:\n            sequence: params to be passed to the affine transformation\n        \"\"\"", "\n", "angle", "=", "random", ".", "uniform", "(", "degrees", "[", "0", "]", ",", "degrees", "[", "1", "]", ")", "\n", "if", "translate", "is", "not", "None", ":", "\n", "            ", "max_dx", "=", "translate", "[", "0", "]", "*", "img_size", "[", "0", "]", "\n", "max_dy", "=", "translate", "[", "1", "]", "*", "img_size", "[", "1", "]", "\n", "translations", "=", "(", "np", ".", "round", "(", "random", ".", "uniform", "(", "-", "max_dx", ",", "max_dx", ")", ")", ",", "\n", "np", ".", "round", "(", "random", ".", "uniform", "(", "-", "max_dy", ",", "max_dy", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "translations", "=", "(", "0", ",", "0", ")", "\n", "\n", "", "if", "scale_ranges", "is", "not", "None", ":", "\n", "            ", "scale", "=", "(", "random", ".", "uniform", "(", "scale_ranges", "[", "0", "]", ",", "scale_ranges", "[", "1", "]", ")", ",", "\n", "random", ".", "uniform", "(", "scale_ranges", "[", "0", "]", ",", "scale_ranges", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "(", "1.0", ",", "1.0", ")", "\n", "\n", "", "if", "shears", "is", "not", "None", ":", "\n", "            ", "shear", "=", "random", ".", "uniform", "(", "shears", "[", "0", "]", ",", "shears", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "shear", "=", "0.0", "\n", "\n", "", "if", "flip", "is", "not", "None", ":", "\n", "            ", "flip", "=", "(", "np", ".", "random", ".", "rand", "(", "2", ")", "<", "flip", ")", ".", "astype", "(", "np", ".", "int", ")", "*", "2", "-", "1", "\n", "\n", "", "return", "angle", ",", "translations", ",", "scale", ",", "shear", ",", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomAffine.__call__": [[158, 178], ["data_generator.RandomAffine._get_inverse_affine_matrix", "numpy.array().reshape", "cv2.warpAffine", "cv2.warpAffine", "numpy.maximum", "data_generator.RandomAffine.get_params", "data_generator.RandomAffine.get_params", "numpy.array", "data_generator.maybe_random_interp", "data_generator.maybe_random_interp"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomAffine._get_inverse_affine_matrix", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomAffine.get_params", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomAffine.get_params", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "fg", ",", "alpha", "=", "sample", "[", "'fg'", "]", ",", "sample", "[", "'alpha'", "]", "\n", "rows", ",", "cols", ",", "ch", "=", "fg", ".", "shape", "\n", "if", "np", ".", "maximum", "(", "rows", ",", "cols", ")", "<", "1024", ":", "\n", "            ", "params", "=", "self", ".", "get_params", "(", "(", "0", ",", "0", ")", ",", "self", ".", "translate", ",", "self", ".", "scale", ",", "self", ".", "shear", ",", "self", ".", "flip", ",", "fg", ".", "size", ")", "\n", "", "else", ":", "\n", "            ", "params", "=", "self", ".", "get_params", "(", "self", ".", "degrees", ",", "self", ".", "translate", ",", "self", ".", "scale", ",", "self", ".", "shear", ",", "self", ".", "flip", ",", "fg", ".", "size", ")", "\n", "\n", "", "center", "=", "(", "cols", "*", "0.5", "+", "0.5", ",", "rows", "*", "0.5", "+", "0.5", ")", "\n", "M", "=", "self", ".", "_get_inverse_affine_matrix", "(", "center", ",", "*", "params", ")", "\n", "M", "=", "np", ".", "array", "(", "M", ")", ".", "reshape", "(", "(", "2", ",", "3", ")", ")", "\n", "\n", "fg", "=", "cv2", ".", "warpAffine", "(", "fg", ",", "M", ",", "(", "cols", ",", "rows", ")", ",", "\n", "flags", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_NEAREST", ")", "+", "cv2", ".", "WARP_INVERSE_MAP", ")", "\n", "alpha", "=", "cv2", ".", "warpAffine", "(", "alpha", ",", "M", ",", "(", "cols", ",", "rows", ")", ",", "\n", "flags", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_NEAREST", ")", "+", "cv2", ".", "WARP_INVERSE_MAP", ")", "\n", "\n", "sample", "[", "'fg'", "]", ",", "sample", "[", "'alpha'", "]", "=", "fg", ",", "alpha", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomAffine._get_inverse_affine_matrix": [[180, 219], ["math.radians", "math.radians", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_inverse_affine_matrix", "(", "center", ",", "angle", ",", "translate", ",", "scale", ",", "shear", ",", "flip", ")", ":", "\n", "# Helper method to compute inverse matrix for affine transformation", "\n", "\n", "# As it is explained in PIL.Image.rotate", "\n", "# We need compute INVERSE of affine transformation matrix: M = T * C * RSS * C^-1", "\n", "# where T is translation matrix: [1, 0, tx | 0, 1, ty | 0, 0, 1]", "\n", "# C is translation matrix to keep center: [1, 0, cx | 0, 1, cy | 0, 0, 1]", "\n", "# RSS is rotation with scale and shear matrix", "\n", "# It is different from the original function in torchvision", "\n", "# The order are changed to flip -> scale -> rotation -> shear", "\n", "# x and y have different scale factors", "\n", "# RSS(shear, a, scale, f) = [ cos(a + shear)*scale_x*f -sin(a + shear)*scale_y     0]", "\n", "# [ sin(a)*scale_x*f          cos(a)*scale_y             0]", "\n", "# [     0                       0                      1]", "\n", "# Thus, the inverse is M^-1 = C * RSS^-1 * C^-1 * T^-1", "\n", "\n", "        ", "angle", "=", "math", ".", "radians", "(", "angle", ")", "\n", "shear", "=", "math", ".", "radians", "(", "shear", ")", "\n", "scale_x", "=", "1.0", "/", "scale", "[", "0", "]", "*", "flip", "[", "0", "]", "\n", "scale_y", "=", "1.0", "/", "scale", "[", "1", "]", "*", "flip", "[", "1", "]", "\n", "\n", "# Inverted rotation matrix with scale and shear", "\n", "d", "=", "math", ".", "cos", "(", "angle", "+", "shear", ")", "*", "math", ".", "cos", "(", "angle", ")", "+", "math", ".", "sin", "(", "angle", "+", "shear", ")", "*", "math", ".", "sin", "(", "angle", ")", "\n", "matrix", "=", "[", "\n", "math", ".", "cos", "(", "angle", ")", "*", "scale_x", ",", "math", ".", "sin", "(", "angle", "+", "shear", ")", "*", "scale_x", ",", "0", ",", "\n", "-", "math", ".", "sin", "(", "angle", ")", "*", "scale_y", ",", "math", ".", "cos", "(", "angle", "+", "shear", ")", "*", "scale_y", ",", "0", "\n", "]", "\n", "matrix", "=", "[", "m", "/", "d", "for", "m", "in", "matrix", "]", "\n", "\n", "# Apply inverse of translation and of center translation: RSS^-1 * C^-1 * T^-1", "\n", "matrix", "[", "2", "]", "+=", "matrix", "[", "0", "]", "*", "(", "-", "center", "[", "0", "]", "-", "translate", "[", "0", "]", ")", "+", "matrix", "[", "1", "]", "*", "(", "-", "center", "[", "1", "]", "-", "translate", "[", "1", "]", ")", "\n", "matrix", "[", "5", "]", "+=", "matrix", "[", "3", "]", "*", "(", "-", "center", "[", "0", "]", "-", "translate", "[", "0", "]", ")", "+", "matrix", "[", "4", "]", "*", "(", "-", "center", "[", "1", "]", "-", "translate", "[", "1", "]", ")", "\n", "\n", "# Apply center translation: C * RSS^-1 * C^-1 * T^-1", "\n", "matrix", "[", "2", "]", "+=", "center", "[", "0", "]", "\n", "matrix", "[", "5", "]", "+=", "center", "[", "1", "]", "\n", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomJitter.__call__": [[226, 260], ["sample.copy", "numpy.all", "cv2.cvtColor", "numpy.random.randint", "numpy.remainder", "[].mean", "numpy.isnan", "numpy.abs", "[].mean", "numpy.isnan", "numpy.abs", "cv2.cvtColor", "cv2.cvtColor.astype", "fg[].astype", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample_ori", "=", "sample", ".", "copy", "(", ")", "\n", "fg", ",", "alpha", "=", "sample", "[", "'fg'", "]", ",", "sample", "[", "'alpha'", "]", "\n", "# if alpha is all 0 skip", "\n", "if", "np", ".", "all", "(", "alpha", "==", "0", ")", ":", "\n", "            ", "return", "sample_ori", "\n", "# convert to HSV space, convert to float32 image to keep precision during space conversion.", "\n", "", "fg", "=", "cv2", ".", "cvtColor", "(", "fg", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", ",", "cv2", ".", "COLOR_BGR2HSV", ")", "\n", "# Hue noise", "\n", "hue_jitter", "=", "np", ".", "random", ".", "randint", "(", "-", "40", ",", "40", ")", "\n", "fg", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "remainder", "(", "fg", "[", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "+", "hue_jitter", ",", "360", ")", "\n", "# Saturation noise", "\n", "sat_bar", "=", "fg", "[", ":", ",", ":", ",", "1", "]", "[", "alpha", ">", "0", "]", ".", "mean", "(", ")", "\n", "if", "np", ".", "isnan", "(", "sat_bar", ")", ":", "\n", "            ", "return", "sample_ori", "\n", "", "sat_jitter", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "1.1", "-", "sat_bar", ")", "/", "5", "-", "(", "1.1", "-", "sat_bar", ")", "/", "10", "\n", "sat", "=", "fg", "[", ":", ",", ":", ",", "1", "]", "\n", "sat", "=", "np", ".", "abs", "(", "sat", "+", "sat_jitter", ")", "\n", "sat", "[", "sat", ">", "1", "]", "=", "2", "-", "sat", "[", "sat", ">", "1", "]", "\n", "fg", "[", ":", ",", ":", ",", "1", "]", "=", "sat", "\n", "# Value noise", "\n", "val_bar", "=", "fg", "[", ":", ",", ":", ",", "2", "]", "[", "alpha", ">", "0", "]", ".", "mean", "(", ")", "\n", "if", "np", ".", "isnan", "(", "val_bar", ")", ":", "\n", "            ", "return", "sample_ori", "\n", "", "val_jitter", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "1.1", "-", "val_bar", ")", "/", "5", "-", "(", "1.1", "-", "val_bar", ")", "/", "10", "\n", "val", "=", "fg", "[", ":", ",", ":", ",", "2", "]", "\n", "val", "=", "np", ".", "abs", "(", "val", "+", "val_jitter", ")", "\n", "val", "[", "val", ">", "1", "]", "=", "2", "-", "val", "[", "val", ">", "1", "]", "\n", "fg", "[", ":", ",", ":", ",", "2", "]", "=", "val", "\n", "# convert back to BGR space", "\n", "fg", "=", "cv2", ".", "cvtColor", "(", "fg", ",", "cv2", ".", "COLOR_HSV2BGR", ")", "\n", "sample", "[", "'fg'", "]", "=", "fg", "*", "255", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomHorizontalFlip.__init__": [[266, 268], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomHorizontalFlip.__call__": [[268, 276], ["numpy.random.uniform", "cv2.flip", "cv2.flip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "fg", ",", "alpha", "=", "sample", "[", "'fg'", "]", ",", "sample", "[", "'alpha'", "]", "\n", "if", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "self", ".", "prob", ":", "\n", "            ", "fg", "=", "cv2", ".", "flip", "(", "fg", ",", "1", ")", "\n", "alpha", "=", "cv2", ".", "flip", "(", "alpha", ",", "1", ")", "\n", "", "sample", "[", "'fg'", "]", ",", "sample", "[", "'alpha'", "]", "=", "fg", ",", "alpha", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomCrop.__init__": [[286, 295], ["isinstance", "isinstance", "logging.getLogger", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", "=", "(", "CONFIG", ".", "data", ".", "crop_size", ",", "CONFIG", ".", "data", ".", "crop_size", ")", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "", "self", ".", "margin", "=", "output_size", "[", "0", "]", "//", "2", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\"Logger\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.RandomCrop.__call__": [[296, 339], ["cv2.resize", "cv2.resize", "list", "len", "sample.update", "zip", "len", "numpy.random.randint", "len", "data_generator.RandomCrop.logger.error", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "data_generator.maybe_random_interp", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.random.randint", "numpy.random.randint", "numpy.where", "numpy.where", "data_generator.maybe_random_interp", "data_generator.maybe_random_interp", "data_generator.maybe_random_interp", "int", "int", "data_generator.maybe_random_interp", "int", "int", "data_generator.maybe_random_interp", "int", "int", "int", "int", "data_generator.maybe_random_interp", "int", "int"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "fg", ",", "alpha", ",", "trimap", ",", "mask", ",", "name", "=", "sample", "[", "'fg'", "]", ",", "sample", "[", "'alpha'", "]", ",", "sample", "[", "'trimap'", "]", ",", "sample", "[", "'mask'", "]", ",", "sample", "[", "'image_name'", "]", "\n", "bg", "=", "sample", "[", "'bg'", "]", "\n", "h", ",", "w", "=", "trimap", ".", "shape", "\n", "bg", "=", "cv2", ".", "resize", "(", "bg", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_CUBIC", ")", ")", "\n", "if", "w", "<", "self", ".", "output_size", "[", "0", "]", "+", "1", "or", "h", "<", "self", ".", "output_size", "[", "1", "]", "+", "1", ":", "\n", "            ", "ratio", "=", "1.1", "*", "self", ".", "output_size", "[", "0", "]", "/", "h", "if", "h", "<", "w", "else", "1.1", "*", "self", ".", "output_size", "[", "1", "]", "/", "w", "\n", "# self.logger.warning(\"Size of {} is {}.\".format(name, (h, w)))", "\n", "while", "h", "<", "self", ".", "output_size", "[", "0", "]", "+", "1", "or", "w", "<", "self", ".", "output_size", "[", "1", "]", "+", "1", ":", "\n", "                ", "fg", "=", "cv2", ".", "resize", "(", "fg", ",", "(", "int", "(", "w", "*", "ratio", ")", ",", "int", "(", "h", "*", "ratio", ")", ")", ",", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_NEAREST", ")", ")", "\n", "alpha", "=", "cv2", ".", "resize", "(", "alpha", ",", "(", "int", "(", "w", "*", "ratio", ")", ",", "int", "(", "h", "*", "ratio", ")", ")", ",", "\n", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_NEAREST", ")", ")", "\n", "trimap", "=", "cv2", ".", "resize", "(", "trimap", ",", "(", "int", "(", "w", "*", "ratio", ")", ",", "int", "(", "h", "*", "ratio", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "bg", "=", "cv2", ".", "resize", "(", "bg", ",", "(", "int", "(", "w", "*", "ratio", ")", ",", "int", "(", "h", "*", "ratio", ")", ")", ",", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_CUBIC", ")", ")", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "int", "(", "w", "*", "ratio", ")", ",", "int", "(", "h", "*", "ratio", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "h", ",", "w", "=", "trimap", ".", "shape", "\n", "", "", "small_trimap", "=", "cv2", ".", "resize", "(", "trimap", ",", "(", "w", "//", "4", ",", "h", "//", "4", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "unknown_list", "=", "list", "(", "zip", "(", "*", "np", ".", "where", "(", "small_trimap", "[", "self", ".", "margin", "//", "4", ":", "(", "h", "-", "self", ".", "margin", ")", "//", "4", ",", "\n", "self", ".", "margin", "//", "4", ":", "(", "w", "-", "self", ".", "margin", ")", "//", "4", "]", "==", "128", ")", ")", ")", "\n", "unknown_num", "=", "len", "(", "unknown_list", ")", "\n", "if", "len", "(", "unknown_list", ")", "<", "10", ":", "\n", "            ", "left_top", "=", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "output_size", "[", "0", "]", "+", "1", ")", ",", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "output_size", "[", "1", "]", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "unknown_num", ")", "\n", "left_top", "=", "(", "unknown_list", "[", "idx", "]", "[", "0", "]", "*", "4", ",", "unknown_list", "[", "idx", "]", "[", "1", "]", "*", "4", ")", "\n", "\n", "", "fg_crop", "=", "fg", "[", "left_top", "[", "0", "]", ":", "left_top", "[", "0", "]", "+", "self", ".", "output_size", "[", "0", "]", ",", "left_top", "[", "1", "]", ":", "left_top", "[", "1", "]", "+", "self", ".", "output_size", "[", "1", "]", ",", ":", "]", "\n", "alpha_crop", "=", "alpha", "[", "left_top", "[", "0", "]", ":", "left_top", "[", "0", "]", "+", "self", ".", "output_size", "[", "0", "]", ",", "left_top", "[", "1", "]", ":", "left_top", "[", "1", "]", "+", "self", ".", "output_size", "[", "1", "]", "]", "\n", "bg_crop", "=", "bg", "[", "left_top", "[", "0", "]", ":", "left_top", "[", "0", "]", "+", "self", ".", "output_size", "[", "0", "]", ",", "left_top", "[", "1", "]", ":", "left_top", "[", "1", "]", "+", "self", ".", "output_size", "[", "1", "]", ",", ":", "]", "\n", "trimap_crop", "=", "trimap", "[", "left_top", "[", "0", "]", ":", "left_top", "[", "0", "]", "+", "self", ".", "output_size", "[", "0", "]", ",", "left_top", "[", "1", "]", ":", "left_top", "[", "1", "]", "+", "self", ".", "output_size", "[", "1", "]", "]", "\n", "mask_crop", "=", "mask", "[", "left_top", "[", "0", "]", ":", "left_top", "[", "0", "]", "+", "self", ".", "output_size", "[", "0", "]", ",", "left_top", "[", "1", "]", ":", "left_top", "[", "1", "]", "+", "self", ".", "output_size", "[", "1", "]", "]", "\n", "\n", "if", "len", "(", "np", ".", "where", "(", "trimap", "==", "128", ")", "[", "0", "]", ")", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "\"{} does not have enough unknown area for crop. Resized to target size.\"", "\n", "\"left_top: {}\"", ".", "format", "(", "name", ",", "left_top", ")", ")", "\n", "fg_crop", "=", "cv2", ".", "resize", "(", "fg", ",", "self", ".", "output_size", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_NEAREST", ")", ")", "\n", "alpha_crop", "=", "cv2", ".", "resize", "(", "alpha", ",", "self", ".", "output_size", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_NEAREST", ")", ")", "\n", "trimap_crop", "=", "cv2", ".", "resize", "(", "trimap", ",", "self", ".", "output_size", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "bg_crop", "=", "cv2", ".", "resize", "(", "bg", ",", "self", ".", "output_size", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_CUBIC", ")", ")", "\n", "mask_crop", "=", "cv2", ".", "resize", "(", "mask", ",", "self", ".", "output_size", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "", "sample", ".", "update", "(", "{", "'fg'", ":", "fg_crop", ",", "'alpha'", ":", "alpha_crop", ",", "'trimap'", ":", "trimap_crop", ",", "'mask'", ":", "mask_crop", ",", "'bg'", ":", "bg_crop", "}", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.OriginScale.__call__": [[342, 362], ["numpy.pad", "numpy.pad", "numpy.pad"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "h", ",", "w", "=", "sample", "[", "\"alpha_shape\"", "]", "\n", "\n", "if", "h", "%", "32", "==", "0", "and", "w", "%", "32", "==", "0", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "target_h", "=", "32", "*", "(", "(", "h", "-", "1", ")", "//", "32", "+", "1", ")", "\n", "target_w", "=", "32", "*", "(", "(", "w", "-", "1", ")", "//", "32", "+", "1", ")", "\n", "pad_h", "=", "target_h", "-", "h", "\n", "pad_w", "=", "target_w", "-", "w", "\n", "\n", "padded_image", "=", "np", ".", "pad", "(", "sample", "[", "'image'", "]", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "padded_trimap", "=", "np", ".", "pad", "(", "sample", "[", "'trimap'", "]", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "padded_mask", "=", "np", ".", "pad", "(", "sample", "[", "'mask'", "]", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "\n", "sample", "[", "'image'", "]", "=", "padded_image", "\n", "sample", "[", "'trimap'", "]", "=", "padded_trimap", "\n", "sample", "[", "'mask'", "]", "=", "padded_mask", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.GenMask.__init__": [[365, 367], ["cv2.getStructuringElement", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "erosion_kernels", "=", "[", "None", "]", "+", "[", "cv2", ".", "getStructuringElement", "(", "cv2", ".", "MORPH_ELLIPSE", ",", "(", "size", ",", "size", ")", ")", "for", "size", "in", "range", "(", "1", ",", "30", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.GenMask.__call__": [[368, 416], ["cv2.resize", "cv2.erode", "cv2.erode", "numpy.random.randint", "numpy.random.randint", "cv2.erode", "cv2.erode", "cv2.resize", "random.randint", "cv2.resize", "numpy.ones_like", "cv2.erode", "data_generator.maybe_random_interp", "random.random", "cv2.dilate", "numpy.random.randint", "numpy.random.randint", "cv2.erode", "cv2.dilate", "numpy.random.randint", "cv2.dilate", "cv2.erode", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "alpha_ori", "=", "sample", "[", "'alpha'", "]", "\n", "h", ",", "w", "=", "alpha_ori", ".", "shape", "\n", "\n", "max_kernel_size", "=", "30", "\n", "alpha", "=", "cv2", ".", "resize", "(", "alpha_ori", ",", "(", "640", ",", "640", ")", ",", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_NEAREST", ")", ")", "\n", "\n", "### generate trimap", "\n", "fg_mask", "=", "(", "alpha", "+", "1e-5", ")", ".", "astype", "(", "np", ".", "int", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "bg_mask", "=", "(", "1", "-", "alpha", "+", "1e-5", ")", ".", "astype", "(", "np", ".", "int", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "fg_mask", "=", "cv2", ".", "erode", "(", "fg_mask", ",", "self", ".", "erosion_kernels", "[", "np", ".", "random", ".", "randint", "(", "1", ",", "max_kernel_size", ")", "]", ")", "\n", "bg_mask", "=", "cv2", ".", "erode", "(", "bg_mask", ",", "self", ".", "erosion_kernels", "[", "np", ".", "random", ".", "randint", "(", "1", ",", "max_kernel_size", ")", "]", ")", "\n", "\n", "fg_width", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "30", ")", "\n", "bg_width", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "30", ")", "\n", "fg_mask", "=", "(", "alpha", "+", "1e-5", ")", ".", "astype", "(", "np", ".", "int", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "bg_mask", "=", "(", "1", "-", "alpha", "+", "1e-5", ")", ".", "astype", "(", "np", ".", "int", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "fg_mask", "=", "cv2", ".", "erode", "(", "fg_mask", ",", "self", ".", "erosion_kernels", "[", "fg_width", "]", ")", "\n", "bg_mask", "=", "cv2", ".", "erode", "(", "bg_mask", ",", "self", ".", "erosion_kernels", "[", "bg_width", "]", ")", "\n", "\n", "trimap", "=", "np", ".", "ones_like", "(", "alpha", ")", "*", "128", "\n", "trimap", "[", "fg_mask", "==", "1", "]", "=", "255", "\n", "trimap", "[", "bg_mask", "==", "1", "]", "=", "0", "\n", "\n", "trimap", "=", "cv2", ".", "resize", "(", "trimap", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "sample", "[", "'trimap'", "]", "=", "trimap", "\n", "\n", "### generate mask", "\n", "low", "=", "0.01", "\n", "high", "=", "1.0", "\n", "thres", "=", "random", ".", "random", "(", ")", "*", "(", "high", "-", "low", ")", "+", "low", "\n", "seg_mask", "=", "(", "alpha", ">=", "thres", ")", ".", "astype", "(", "np", ".", "int", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "random_num", "=", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "if", "random_num", "==", "0", ":", "\n", "            ", "seg_mask", "=", "cv2", ".", "erode", "(", "seg_mask", ",", "self", ".", "erosion_kernels", "[", "np", ".", "random", ".", "randint", "(", "1", ",", "max_kernel_size", ")", "]", ")", "\n", "", "elif", "random_num", "==", "1", ":", "\n", "            ", "seg_mask", "=", "cv2", ".", "dilate", "(", "seg_mask", ",", "self", ".", "erosion_kernels", "[", "np", ".", "random", ".", "randint", "(", "1", ",", "max_kernel_size", ")", "]", ")", "\n", "", "elif", "random_num", "==", "2", ":", "\n", "            ", "seg_mask", "=", "cv2", ".", "erode", "(", "seg_mask", ",", "self", ".", "erosion_kernels", "[", "np", ".", "random", ".", "randint", "(", "1", ",", "max_kernel_size", ")", "]", ")", "\n", "seg_mask", "=", "cv2", ".", "dilate", "(", "seg_mask", ",", "self", ".", "erosion_kernels", "[", "np", ".", "random", ".", "randint", "(", "1", ",", "max_kernel_size", ")", "]", ")", "\n", "", "elif", "random_num", "==", "3", ":", "\n", "            ", "seg_mask", "=", "cv2", ".", "dilate", "(", "seg_mask", ",", "self", ".", "erosion_kernels", "[", "np", ".", "random", ".", "randint", "(", "1", ",", "max_kernel_size", ")", "]", ")", "\n", "seg_mask", "=", "cv2", ".", "erode", "(", "seg_mask", ",", "self", ".", "erosion_kernels", "[", "np", ".", "random", ".", "randint", "(", "1", ",", "max_kernel_size", ")", "]", ")", "\n", "\n", "", "seg_mask", "=", "cv2", ".", "resize", "(", "seg_mask", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "sample", "[", "'mask'", "]", "=", "seg_mask", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.Composite.__call__": [[419, 431], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "fg", ",", "bg", ",", "alpha", "=", "sample", "[", "'fg'", "]", ",", "sample", "[", "'bg'", "]", ",", "sample", "[", "'alpha'", "]", "\n", "alpha", "[", "alpha", "<", "0", "]", "=", "0", "\n", "alpha", "[", "alpha", ">", "1", "]", "=", "1", "\n", "fg", "[", "fg", "<", "0", "]", "=", "0", "\n", "fg", "[", "fg", ">", "255", "]", "=", "255", "\n", "bg", "[", "bg", "<", "0", "]", "=", "0", "\n", "bg", "[", "bg", ">", "255", "]", "=", "255", "\n", "\n", "image", "=", "fg", "*", "alpha", "[", ":", ",", ":", ",", "None", "]", "+", "bg", "*", "(", "1", "-", "alpha", "[", ":", ",", ":", ",", "None", "]", ")", "\n", "sample", "[", "'image'", "]", "=", "image", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.CutMask.__init__": [[434, 436], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "perturb_prob", "=", "0", ")", ":", "\n", "        ", "self", ".", "perturb_prob", "=", "perturb_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.CutMask.__call__": [[437, 453], ["random.randint", "random.randint", "random.randint", "random.randint", "mask[].copy", "numpy.random.rand", "random.randint", "random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "perturb_prob", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "mask", "=", "sample", "[", "'mask'", "]", "# H x W, trimap 0--255, segmask 0--1, alpha 0--1", "\n", "h", ",", "w", "=", "mask", ".", "shape", "\n", "perturb_size_h", ",", "perturb_size_w", "=", "random", ".", "randint", "(", "h", "//", "4", ",", "h", "//", "2", ")", ",", "random", ".", "randint", "(", "w", "//", "4", ",", "w", "//", "2", ")", "\n", "x", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "perturb_size_h", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "perturb_size_w", ")", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "perturb_size_h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "perturb_size_w", ")", "\n", "\n", "mask", "[", "x", ":", "x", "+", "perturb_size_h", ",", "y", ":", "y", "+", "perturb_size_w", "]", "=", "mask", "[", "x1", ":", "x1", "+", "perturb_size_h", ",", "y1", ":", "y1", "+", "perturb_size_w", "]", ".", "copy", "(", ")", "\n", "\n", "sample", "[", "'mask'", "]", "=", "mask", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.DataGenerator.__init__": [[456, 497], ["len", "data_generator.RandomAffine", "data_generator.GenMask", "data_generator.CutMask", "data_generator.RandomCrop", "data_generator.RandomJitter", "data_generator.Composite", "data_generator.ToTensor", "data_generator.OriginScale", "data_generator.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "data_generator.OriginScale", "data_generator.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "phase", "=", "\"train\"", ")", ":", "\n", "        ", "self", ".", "phase", "=", "phase", "\n", "self", ".", "crop_size", "=", "CONFIG", ".", "data", ".", "crop_size", "\n", "self", ".", "alpha", "=", "data", ".", "alpha", "\n", "\n", "if", "self", ".", "phase", "==", "\"train\"", ":", "\n", "            ", "self", ".", "fg", "=", "data", ".", "fg", "\n", "self", ".", "bg", "=", "data", ".", "bg", "\n", "self", ".", "merged", "=", "[", "]", "\n", "self", ".", "trimap", "=", "[", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "fg", "=", "[", "]", "\n", "self", ".", "bg", "=", "[", "]", "\n", "self", ".", "merged", "=", "data", ".", "merged", "\n", "self", ".", "trimap", "=", "data", ".", "trimap", "\n", "\n", "", "train_trans", "=", "[", "\n", "RandomAffine", "(", "degrees", "=", "30", ",", "scale", "=", "[", "0.8", ",", "1.25", "]", ",", "shear", "=", "10", ",", "flip", "=", "0.5", ")", ",", "\n", "GenMask", "(", ")", ",", "\n", "CutMask", "(", "perturb_prob", "=", "CONFIG", ".", "data", ".", "cutmask_prob", ")", ",", "\n", "RandomCrop", "(", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", ")", ",", "\n", "RandomJitter", "(", ")", ",", "\n", "Composite", "(", ")", ",", "\n", "ToTensor", "(", "phase", "=", "\"train\"", ")", "]", "\n", "\n", "test_trans", "=", "[", "OriginScale", "(", ")", ",", "ToTensor", "(", ")", "]", "\n", "\n", "self", ".", "transform", "=", "{", "\n", "'train'", ":", "\n", "transforms", ".", "Compose", "(", "train_trans", ")", ",", "\n", "'val'", ":", "\n", "transforms", ".", "Compose", "(", "[", "\n", "OriginScale", "(", ")", ",", "\n", "ToTensor", "(", ")", "\n", "]", ")", ",", "\n", "'test'", ":", "\n", "transforms", ".", "Compose", "(", "test_trans", ")", "\n", "}", "[", "phase", "]", "\n", "\n", "self", ".", "fg_num", "=", "len", "(", "self", ".", "fg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.DataGenerator.__getitem__": [[498, 521], ["data_generator.DataGenerator.transform", "cv2.imread", "cv2.imread", "data_generator.DataGenerator._composite_fg", "cv2.imread", "cv2.imread", "cv2.imread().astype", "os.path.split", "cv2.imread", "os.path.split", "cv2.imread"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.DataGenerator._composite_fg"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "phase", "==", "\"train\"", ":", "\n", "            ", "fg", "=", "cv2", ".", "imread", "(", "self", ".", "fg", "[", "idx", "%", "self", ".", "fg_num", "]", ")", "\n", "alpha", "=", "cv2", ".", "imread", "(", "self", ".", "alpha", "[", "idx", "%", "self", ".", "fg_num", "]", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "bg", "=", "cv2", ".", "imread", "(", "self", ".", "bg", "[", "idx", "]", ",", "1", ")", "\n", "\n", "fg", ",", "alpha", "=", "self", ".", "_composite_fg", "(", "fg", ",", "alpha", ",", "idx", ")", "\n", "\n", "image_name", "=", "os", ".", "path", ".", "split", "(", "self", ".", "fg", "[", "idx", "%", "self", ".", "fg_num", "]", ")", "[", "-", "1", "]", "\n", "sample", "=", "{", "'fg'", ":", "fg", ",", "'alpha'", ":", "alpha", ",", "'bg'", ":", "bg", ",", "'image_name'", ":", "image_name", "}", "\n", "\n", "", "else", ":", "\n", "            ", "image", "=", "cv2", ".", "imread", "(", "self", ".", "merged", "[", "idx", "]", ")", "\n", "alpha", "=", "cv2", ".", "imread", "(", "self", ".", "alpha", "[", "idx", "]", ",", "0", ")", "/", "255.", "\n", "trimap", "=", "cv2", ".", "imread", "(", "self", ".", "trimap", "[", "idx", "]", ",", "0", ")", "\n", "mask", "=", "(", "trimap", ">=", "170", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "image_name", "=", "os", ".", "path", ".", "split", "(", "self", ".", "merged", "[", "idx", "]", ")", "[", "-", "1", "]", "\n", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'alpha'", ":", "alpha", ",", "'trimap'", ":", "trimap", ",", "'mask'", ":", "mask", ",", "'image_name'", ":", "image_name", ",", "'alpha_shape'", ":", "alpha", ".", "shape", "}", "\n", "\n", "", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.DataGenerator._composite_fg": [[522, 544], ["numpy.random.rand", "cv2.imread", "cv2.resize", "cv2.resize", "numpy.any", "numpy.random.rand", "cv2.resize", "cv2.resize", "numpy.random.randint", "cv2.imread().astype", "fg.astype.astype.astype", "data_generator.maybe_random_interp", "data_generator.maybe_random_interp", "data_generator.maybe_random_interp", "data_generator.maybe_random_interp", "cv2.imread", "fg.astype.astype.astype", "cv2.resize.astype"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp", "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp"], ["", "def", "_composite_fg", "(", "self", ",", "fg", ",", "alpha", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "            ", "idx2", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "fg_num", ")", "+", "idx", "\n", "fg2", "=", "cv2", ".", "imread", "(", "self", ".", "fg", "[", "idx2", "%", "self", ".", "fg_num", "]", ")", "\n", "alpha2", "=", "cv2", ".", "imread", "(", "self", ".", "alpha", "[", "idx2", "%", "self", ".", "fg_num", "]", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "h", ",", "w", "=", "alpha", ".", "shape", "\n", "fg2", "=", "cv2", ".", "resize", "(", "fg2", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_NEAREST", ")", ")", "\n", "alpha2", "=", "cv2", ".", "resize", "(", "alpha2", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_NEAREST", ")", ")", "\n", "\n", "alpha_tmp", "=", "1", "-", "(", "1", "-", "alpha", ")", "*", "(", "1", "-", "alpha2", ")", "\n", "if", "np", ".", "any", "(", "alpha_tmp", "<", "1", ")", ":", "\n", "                ", "fg", "=", "fg", ".", "astype", "(", "np", ".", "float32", ")", "*", "alpha", "[", ":", ",", ":", ",", "None", "]", "+", "fg2", ".", "astype", "(", "np", ".", "float32", ")", "*", "(", "1", "-", "alpha", "[", ":", ",", ":", ",", "None", "]", ")", "\n", "# The overlap of two 50% transparency should be 25%", "\n", "alpha", "=", "alpha_tmp", "\n", "fg", "=", "fg", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.25", ":", "\n", "            ", "fg", "=", "cv2", ".", "resize", "(", "fg", ",", "(", "640", ",", "640", ")", ",", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_NEAREST", ")", ")", "\n", "alpha", "=", "cv2", ".", "resize", "(", "alpha", ",", "(", "640", ",", "640", ")", ",", "interpolation", "=", "maybe_random_interp", "(", "cv2", ".", "INTER_NEAREST", ")", ")", "\n", "\n", "", "return", "fg", ",", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.DataGenerator.__len__": [[545, 550], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "phase", "==", "\"train\"", ":", "\n", "            ", "return", "len", "(", "self", ".", "bg", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "alpha", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.webtoon_matteformer.dataloader.data_generator.maybe_random_interp": [[19, 24], ["numpy.random.choice", "cv2.INTER_NEAREST", "cv2.INTER_NEAREST", "cv2.INTER_CUBIC", "cv2.INTER_NEAREST", "cv2.INTER_NEAREST", "cv2.INTER_CUBIC", "cv2.INTER_NEAREST", "cv2.INTER_NEAREST", "cv2.INTER_CUBIC", "cv2.INTER_NEAREST", "cv2.INTER_NEAREST", "cv2.INTER_NEAREST", "cv2.INTER_NEAREST", "cv2.INTER_NEAREST"], "function", ["None"], ["def", "maybe_random_interp", "(", "cv2_interp", ")", ":", "\n", "    ", "if", "CONFIG", ".", "data", ".", "random_interp", ":", "\n", "        ", "return", "np", ".", "random", ".", "choice", "(", "interp_list", ")", "\n", "", "else", ":", "\n", "        ", "return", "cv2_interp", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.__init__": [[21, 55], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "trainer.Trainer.gauss_filter.repeat", "trainer.Trainer.build_model", "utils.print_network", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.build_model", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.print_network"], ["    ", "def", "__init__", "(", "self", ",", "\n", "train_dataloader", ",", "\n", "test_dataloader", ",", "\n", "logger", ")", ":", "\n", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "self", ".", "train_dataloader", "=", "train_dataloader", "\n", "self", ".", "test_dataloader", "=", "test_dataloader", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "model_config", "=", "CONFIG", ".", "model", "\n", "self", ".", "train_config", "=", "CONFIG", ".", "train", "\n", "self", ".", "log_config", "=", "CONFIG", ".", "log", "\n", "self", ".", "loss_dict", "=", "{", "'rec'", ":", "None", ",", "\n", "'comp'", ":", "None", ",", "\n", "'lap'", ":", "None", ",", "}", "\n", "self", ".", "test_loss_dict", "=", "{", "'rec'", ":", "None", ",", "\n", "'mse'", ":", "None", ",", "\n", "'sad'", ":", "None", "}", "\n", "\n", "self", ".", "gauss_filter", "=", "torch", ".", "tensor", "(", "[", "[", "1.", ",", "4.", ",", "6.", ",", "4.", ",", "1.", "]", ",", "\n", "[", "4.", ",", "16.", ",", "24.", ",", "16.", ",", "4.", "]", ",", "\n", "[", "6.", ",", "24.", ",", "36.", ",", "24.", ",", "6.", "]", ",", "\n", "[", "4.", ",", "16.", ",", "24.", ",", "16.", ",", "4.", "]", ",", "\n", "[", "1.", ",", "4.", ",", "6.", ",", "4.", ",", "1.", "]", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "gauss_filter", "/=", "256.", "\n", "self", ".", "gauss_filter", "=", "self", ".", "gauss_filter", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "build_model", "(", ")", "\n", "self", ".", "resume_step", "=", "None", "\n", "self", ".", "best_loss", "=", "{", "'mse'", ":", "1e+8", ",", "'sad'", ":", "1e+8", "}", "\n", "\n", "utils", ".", "print_network", "(", "self", ".", "G", ",", "CONFIG", ".", "version", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.build_model": [[56, 75], ["networks.get_generator", "trainer.Trainer.G.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "trainer.Trainer.build_lr_scheduler", "trainer.Trainer.logger.info", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "trainer.Trainer.G.parameters", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.networks.generators.get_generator", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.build_lr_scheduler"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "G", "=", "networks", ".", "get_generator", "(", ")", "\n", "self", ".", "G", ".", "cuda", "(", ")", "\n", "\n", "if", "CONFIG", ".", "dist", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Using pytorch synced BN\"", ")", "\n", "self", ".", "G", "=", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "self", ".", "G", ")", "\n", "\n", "", "self", ".", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "G", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "train_config", ".", "G_lr", ",", "\n", "betas", "=", "[", "self", ".", "train_config", ".", "beta1", ",", "self", ".", "train_config", ".", "beta2", "]", ")", "\n", "\n", "if", "CONFIG", ".", "dist", ":", "\n", "# SyncBatchNorm only supports DistributedDataParallel with single GPU per process", "\n", "            ", "self", ".", "G", "=", "DistributedDataParallel", "(", "self", ".", "G", ",", "device_ids", "=", "[", "CONFIG", ".", "local_rank", "]", ",", "output_device", "=", "CONFIG", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "G", "=", "nn", ".", "DataParallel", "(", "self", ".", "G", ")", "\n", "\n", "", "self", ".", "build_lr_scheduler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.build_lr_scheduler": [[76, 81], ["torch.CosineAnnealingLR", "torch.CosineAnnealingLR", "torch.CosineAnnealingLR", "torch.CosineAnnealingLR", "torch.CosineAnnealingLR", "torch.CosineAnnealingLR"], "methods", ["None"], ["", "def", "build_lr_scheduler", "(", "self", ")", ":", "\n", "        ", "\"\"\"Build cosine learning rate scheduler.\"\"\"", "\n", "self", ".", "G_scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "self", ".", "G_optimizer", ",", "\n", "T_max", "=", "self", ".", "train_config", ".", "total_step", "\n", "-", "self", ".", "train_config", ".", "warmup_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.reset_grad": [[82, 85], ["trainer.Trainer.G_optimizer.zero_grad"], "methods", ["None"], ["", "def", "reset_grad", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the gradient buffers.\"\"\"", "\n", "self", ".", "G_optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.train": [[86, 192], ["iter", "range", "image.cuda.cuda.cuda", "alpha.cuda.cuda.cuda", "trimap.cuda.cuda.cuda", "trainer.Trainer.G.train", "trainer.Trainer.G", "utils.get_unknown_tensor", "trainer.Trainer.loss_dict.keys", "trainer.Trainer.reset_grad", "loss.backward", "trainer.Trainer.G_optimizer.step", "next", "image_dict[].cuda", "image_dict[].cuda", "utils.warmup_lr", "utils.update_lr", "trainer.Trainer.G_scheduler.step", "utils.get_unknown_tensor", "utils.get_unknown_tensor", "trainer.Trainer.write_log", "trainer.Trainer.test", "iter", "next", "trainer.Trainer.G_scheduler.get_lr", "utils.get_unknown_tensor_from_pred", "utils.get_unknown_tensor_from_pred", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "random.randint", "utils.get_unknown_tensor", "utils.get_unknown_tensor", "utils.get_unknown_tensor_from_pred", "utils.get_unknown_tensor_from_pred", "trainer.Trainer.G.parameters", "trainer.Trainer.G.parameters", "trainer.Trainer.regression_loss", "trainer.Trainer.composition_loss", "trainer.Trainer.lap_loss", "trainer.Trainer.regression_loss", "trainer.Trainer.regression_loss", "trainer.Trainer.composition_loss", "trainer.Trainer.composition_loss", "trainer.Trainer.lap_loss", "trainer.Trainer.lap_loss"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.train", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.reset_grad", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.warmup_lr", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.update_lr", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.write_log", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.test", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor_from_pred", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor_from_pred", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor_from_pred", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor_from_pred", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.regression_loss", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.composition_loss", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.lap_loss", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.regression_loss", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.regression_loss", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.composition_loss", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.composition_loss", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.lap_loss", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.lap_loss"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "data_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "\n", "if", "self", ".", "train_config", ".", "resume_checkpoint", ":", "\n", "            ", "start", "=", "self", ".", "resume_step", "+", "1", "\n", "", "else", ":", "\n", "            ", "start", "=", "0", "\n", "\n", "", "moving_max_grad", "=", "0", "\n", "moving_grad_moment", "=", "0.999", "\n", "\n", "for", "step", "in", "range", "(", "start", ",", "self", ".", "train_config", ".", "total_step", "+", "1", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "image_dict", "=", "next", "(", "data_iter", ")", "\n", "", "except", ":", "\n", "                ", "data_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "image_dict", "=", "next", "(", "data_iter", ")", "\n", "\n", "", "image", ",", "alpha", ",", "trimap", "=", "image_dict", "[", "'image'", "]", ",", "image_dict", "[", "'alpha'", "]", ",", "image_dict", "[", "'trimap'", "]", "\n", "image", "=", "image", ".", "cuda", "(", ")", "\n", "alpha", "=", "alpha", ".", "cuda", "(", ")", "\n", "trimap", "=", "trimap", ".", "cuda", "(", ")", "\n", "fg_norm", ",", "bg_norm", "=", "image_dict", "[", "'fg'", "]", ".", "cuda", "(", ")", ",", "image_dict", "[", "'bg'", "]", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "G", ".", "train", "(", ")", "\n", "loss", "=", "0", "\n", "\n", "\"\"\"===== Update Learning Rate =====\"\"\"", "\n", "if", "step", "<", "self", ".", "train_config", ".", "warmup_step", "and", "self", ".", "train_config", ".", "resume_checkpoint", "is", "None", ":", "\n", "                ", "cur_G_lr", "=", "utils", ".", "warmup_lr", "(", "self", ".", "train_config", ".", "G_lr", ",", "step", "+", "1", ",", "self", ".", "train_config", ".", "warmup_step", ")", "\n", "utils", ".", "update_lr", "(", "cur_G_lr", ",", "self", ".", "G_optimizer", ")", "\n", "\n", "", "else", ":", "\n", "                ", "self", ".", "G_scheduler", ".", "step", "(", ")", "\n", "cur_G_lr", "=", "self", ".", "G_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n", "", "\"\"\"===== Forward G =====\"\"\"", "\n", "pred", "=", "self", ".", "G", "(", "image", ",", "trimap", ")", "\n", "alpha_pred_os1", ",", "alpha_pred_os4", ",", "alpha_pred_os8", "=", "pred", "[", "'alpha_os1'", "]", ",", "pred", "[", "'alpha_os4'", "]", ",", "pred", "[", "'alpha_os8'", "]", "\n", "\n", "weight_os8", "=", "utils", ".", "get_unknown_tensor", "(", "trimap", ")", "\n", "weight_os8", "[", "...", "]", "=", "1", "\n", "\n", "if", "step", "<", "self", ".", "train_config", ".", "warmup_step", ":", "\n", "                ", "weight_os4", "=", "utils", ".", "get_unknown_tensor", "(", "trimap", ")", "\n", "weight_os1", "=", "utils", ".", "get_unknown_tensor", "(", "trimap", ")", "\n", "\n", "", "elif", "step", "<", "self", ".", "train_config", ".", "warmup_step", "*", "3", ":", "\n", "                ", "if", "random", ".", "randint", "(", "0", ",", "1", ")", "==", "0", ":", "\n", "                    ", "weight_os4", "=", "utils", ".", "get_unknown_tensor", "(", "trimap", ")", "\n", "weight_os1", "=", "utils", ".", "get_unknown_tensor", "(", "trimap", ")", "\n", "", "else", ":", "\n", "                    ", "weight_os4", "=", "utils", ".", "get_unknown_tensor_from_pred", "(", "alpha_pred_os8", ",", "rand_width", "=", "CONFIG", ".", "model", ".", "self_refine_width1", ",", "train_mode", "=", "True", ")", "\n", "alpha_pred_os4", "[", "weight_os4", "==", "0", "]", "=", "alpha_pred_os8", "[", "weight_os4", "==", "0", "]", "\n", "weight_os1", "=", "utils", ".", "get_unknown_tensor_from_pred", "(", "alpha_pred_os4", ",", "rand_width", "=", "CONFIG", ".", "model", ".", "self_refine_width2", ",", "train_mode", "=", "True", ")", "\n", "alpha_pred_os1", "[", "weight_os1", "==", "0", "]", "=", "alpha_pred_os4", "[", "weight_os1", "==", "0", "]", "\n", "", "", "else", ":", "\n", "                ", "weight_os4", "=", "utils", ".", "get_unknown_tensor_from_pred", "(", "alpha_pred_os8", ",", "rand_width", "=", "CONFIG", ".", "model", ".", "self_refine_width1", ",", "train_mode", "=", "True", ")", "\n", "alpha_pred_os4", "[", "weight_os4", "==", "0", "]", "=", "alpha_pred_os8", "[", "weight_os4", "==", "0", "]", "\n", "weight_os1", "=", "utils", ".", "get_unknown_tensor_from_pred", "(", "alpha_pred_os4", ",", "rand_width", "=", "CONFIG", ".", "model", ".", "self_refine_width2", ",", "train_mode", "=", "True", ")", "\n", "alpha_pred_os1", "[", "weight_os1", "==", "0", "]", "=", "alpha_pred_os4", "[", "weight_os1", "==", "0", "]", "\n", "\n", "", "\"\"\"===== Calculate Loss =====\"\"\"", "\n", "if", "self", ".", "train_config", ".", "rec_weight", ">", "0", ":", "\n", "                ", "self", ".", "loss_dict", "[", "'rec'", "]", "=", "(", "self", ".", "regression_loss", "(", "alpha_pred_os1", ",", "alpha", ",", "loss_type", "=", "'l1'", ",", "weight", "=", "weight_os1", ")", "*", "2", "+", "self", ".", "regression_loss", "(", "alpha_pred_os4", ",", "alpha", ",", "loss_type", "=", "'l1'", ",", "weight", "=", "weight_os4", ")", "*", "1", "+", "self", ".", "regression_loss", "(", "alpha_pred_os8", ",", "alpha", ",", "loss_type", "=", "'l1'", ",", "weight", "=", "weight_os8", ")", "*", "1", ")", "/", "5.0", "*", "self", ".", "train_config", ".", "rec_weight", "\n", "\n", "", "if", "self", ".", "train_config", ".", "comp_weight", ">", "0", ":", "\n", "                ", "self", ".", "loss_dict", "[", "'comp'", "]", "=", "(", "self", ".", "composition_loss", "(", "alpha_pred_os1", ",", "fg_norm", ",", "bg_norm", ",", "image", ",", "weight", "=", "weight_os1", ")", "*", "2", "+", "self", ".", "composition_loss", "(", "alpha_pred_os4", ",", "fg_norm", ",", "bg_norm", ",", "image", ",", "weight", "=", "weight_os4", ")", "*", "1", "+", "self", ".", "composition_loss", "(", "alpha_pred_os8", ",", "fg_norm", ",", "bg_norm", ",", "image", ",", "weight", "=", "weight_os8", ")", "*", "1", ")", "/", "5.0", "*", "self", ".", "train_config", ".", "comp_weight", "\n", "\n", "", "if", "self", ".", "train_config", ".", "lap_weight", ">", "0", ":", "\n", "                ", "self", ".", "loss_dict", "[", "'lap'", "]", "=", "(", "self", ".", "lap_loss", "(", "logit", "=", "alpha_pred_os1", ",", "target", "=", "alpha", ",", "gauss_filter", "=", "self", ".", "gauss_filter", ",", "loss_type", "=", "'l1'", ",", "weight", "=", "weight_os1", ")", "*", "2", "+", "self", ".", "lap_loss", "(", "logit", "=", "alpha_pred_os4", ",", "target", "=", "alpha", ",", "gauss_filter", "=", "self", ".", "gauss_filter", ",", "loss_type", "=", "'l1'", ",", "weight", "=", "weight_os4", ")", "*", "1", "+", "self", ".", "lap_loss", "(", "logit", "=", "alpha_pred_os8", ",", "target", "=", "alpha", ",", "gauss_filter", "=", "self", ".", "gauss_filter", ",", "loss_type", "=", "'l1'", ",", "weight", "=", "weight_os8", ")", "*", "1", ")", "/", "5.0", "*", "self", ".", "train_config", ".", "lap_weight", "\n", "\n", "", "for", "loss_key", "in", "self", ".", "loss_dict", ".", "keys", "(", ")", ":", "\n", "                ", "if", "self", ".", "loss_dict", "[", "loss_key", "]", "is", "not", "None", "and", "loss_key", "in", "[", "'rec'", ",", "'comp'", ",", "'lap'", "]", ":", "\n", "                    ", "loss", "+=", "self", ".", "loss_dict", "[", "loss_key", "]", "\n", "\n", "", "", "\"\"\"===== Back Propagate =====\"\"\"", "\n", "self", ".", "reset_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "\"\"\"===== Clip Large Gradient =====\"\"\"", "\n", "if", "self", ".", "train_config", ".", "clip_grad", ":", "\n", "                ", "if", "moving_max_grad", "==", "0", ":", "\n", "                    ", "moving_max_grad", "=", "nn_utils", ".", "clip_grad_norm_", "(", "self", ".", "G", ".", "parameters", "(", ")", ",", "1e+6", ")", "\n", "max_grad", "=", "moving_max_grad", "\n", "", "else", ":", "\n", "                    ", "max_grad", "=", "nn_utils", ".", "clip_grad_norm_", "(", "self", ".", "G", ".", "parameters", "(", ")", ",", "2", "*", "moving_max_grad", ")", "\n", "moving_max_grad", "=", "moving_max_grad", "*", "moving_grad_moment", "+", "max_grad", "*", "(", "1", "-", "moving_grad_moment", ")", "\n", "\n", "", "", "\"\"\"===== Update Parameters =====\"\"\"", "\n", "self", ".", "G_optimizer", ".", "step", "(", ")", "\n", "\n", "\"\"\"===== Write Log =====\"\"\"", "\n", "# stdout log", "\n", "if", "step", "%", "self", ".", "log_config", ".", "logging_step", "==", "0", ":", "\n", "                ", "self", ".", "write_log", "(", "loss", ",", "step", ",", "image", ",", "trimap", ",", "cur_G_lr", ")", "\n", "\n", "", "\"\"\"===== TEST =====\"\"\"", "\n", "if", "(", "(", "step", "%", "self", ".", "train_config", ".", "val_step", ")", "==", "0", "or", "step", "==", "self", ".", "train_config", ".", "total_step", ")", "and", "step", ">", "start", ":", "\n", "                ", "self", ".", "test", "(", "step", ",", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.test": [[193, 267], ["trainer.Trainer.G.eval", "trainer.Trainer.loss_dict.keys", "trainer.Trainer.test_loss_dict.keys", "trainer.Trainer.logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "utils.reduce_tensor_dict", "trainer.Trainer.logger.info", "trainer.Trainer.save_model", "image.cuda.cuda.cuda", "alpha.cuda.cuda.cuda", "trimap.cuda.cuda.cuda", "trainer.Trainer.G", "alpha_pred_os8.clone().detach", "utils.get_unknown_tensor_from_pred", "utils.get_unknown_tensor_from_pred", "utils.get_unknown_tensor", "trainer.Trainer.mse", "trainer.Trainer.sad", "len", "trainer.Trainer.save_model", "loss_key.upper", "alpha_pred_os8.clone", "trainer.Trainer.regression_loss"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.reduce_tensor_dict", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.save_model", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor_from_pred", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor_from_pred", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.get_unknown_tensor", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.mse", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.sad", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.save_model", "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.regression_loss"], ["", "", "", "def", "test", "(", "self", ",", "step", ",", "start", ")", ":", "\n", "        ", "self", ".", "G", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "log_info", "=", "\"\"", "\n", "\n", "self", ".", "test_loss_dict", "[", "'mse'", "]", "=", "0", "\n", "self", ".", "test_loss_dict", "[", "'sad'", "]", "=", "0", "\n", "for", "loss_key", "in", "self", ".", "loss_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "loss_key", "in", "self", ".", "test_loss_dict", "and", "self", ".", "loss_dict", "[", "loss_key", "]", "is", "not", "None", ":", "\n", "                ", "self", ".", "test_loss_dict", "[", "loss_key", "]", "=", "0", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "idx", ",", "image_dict", "in", "enumerate", "(", "self", ".", "test_dataloader", ")", ":", "\n", "                ", "image", ",", "alpha", ",", "trimap", "=", "image_dict", "[", "'image'", "]", ",", "image_dict", "[", "'alpha'", "]", ",", "image_dict", "[", "'trimap'", "]", "\n", "alpha_shape", "=", "image_dict", "[", "'alpha_shape'", "]", "\n", "image", "=", "image", ".", "cuda", "(", ")", "\n", "alpha", "=", "alpha", ".", "cuda", "(", ")", "\n", "trimap", "=", "trimap", ".", "cuda", "(", ")", "\n", "\n", "pred", "=", "self", ".", "G", "(", "image", ",", "trimap", ")", "\n", "\n", "alpha_pred_os1", ",", "alpha_pred_os4", ",", "alpha_pred_os8", "=", "pred", "[", "'alpha_os1'", "]", ",", "pred", "[", "'alpha_os4'", "]", ",", "pred", "[", "'alpha_os8'", "]", "\n", "alpha_pred", "=", "alpha_pred_os8", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "weight_os4", "=", "utils", ".", "get_unknown_tensor_from_pred", "(", "alpha_pred", ",", "rand_width", "=", "CONFIG", ".", "model", ".", "self_refine_width1", ",", "train_mode", "=", "False", ")", "\n", "alpha_pred", "[", "weight_os4", ">", "0", "]", "=", "alpha_pred_os4", "[", "weight_os4", ">", "0", "]", "\n", "weight_os1", "=", "utils", ".", "get_unknown_tensor_from_pred", "(", "alpha_pred", ",", "rand_width", "=", "CONFIG", ".", "model", ".", "self_refine_width2", ",", "train_mode", "=", "False", ")", "\n", "alpha_pred", "[", "weight_os1", ">", "0", "]", "=", "alpha_pred_os1", "[", "weight_os1", ">", "0", "]", "\n", "\n", "h", ",", "w", "=", "alpha_shape", "\n", "alpha_pred", "=", "alpha_pred", "[", "...", ",", ":", "h", ",", ":", "w", "]", "\n", "\n", "trimap", "=", "trimap", "[", "...", ",", ":", "h", ",", ":", "w", "]", "\n", "\n", "weight", "=", "utils", ".", "get_unknown_tensor", "(", "trimap", ")", "# get unknown region (trimap)", "\n", "# weight[...] = 1                          # get whole region", "\n", "\n", "# value of MSE/SAD here is different from test.py and matlab version", "\n", "self", ".", "test_loss_dict", "[", "'mse'", "]", "+=", "self", ".", "mse", "(", "(", "(", "alpha_pred", "*", "255.", ")", ".", "int", "(", ")", ")", ".", "float", "(", ")", "/", "255.", ",", "alpha", ",", "weight", ")", "\n", "# self.test_loss_dict['mse'] += self.mse(alpha_pred, alpha, weight)", "\n", "self", ".", "test_loss_dict", "[", "'sad'", "]", "+=", "self", ".", "sad", "(", "alpha_pred", ",", "alpha", ",", "weight", ")", "\n", "\n", "if", "self", ".", "train_config", ".", "rec_weight", ">", "0", ":", "\n", "                    ", "self", ".", "test_loss_dict", "[", "'rec'", "]", "+=", "self", ".", "regression_loss", "(", "alpha_pred", ",", "alpha", ",", "weight", "=", "weight", ")", "*", "self", ".", "train_config", ".", "rec_weight", "\n", "\n", "# reduce losses from GPUs", "\n", "", "", "", "if", "CONFIG", ".", "dist", ":", "\n", "            ", "self", ".", "test_loss_dict", "=", "utils", ".", "reduce_tensor_dict", "(", "self", ".", "test_loss_dict", ",", "mode", "=", "'mean'", ")", "\n", "\n", "", "\"\"\"===== Write Log =====\"\"\"", "\n", "# stdout log", "\n", "for", "loss_key", "in", "self", ".", "test_loss_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "self", ".", "test_loss_dict", "[", "loss_key", "]", "is", "not", "None", ":", "\n", "                ", "self", ".", "test_loss_dict", "[", "loss_key", "]", "/=", "len", "(", "self", ".", "test_dataloader", ")", "\n", "# logging", "\n", "log_info", "+=", "loss_key", ".", "upper", "(", ")", "+", "\": {:.4f} \"", ".", "format", "(", "self", ".", "test_loss_dict", "[", "loss_key", "]", ")", "\n", "\n", "if", "loss_key", "in", "[", "'rec'", "]", ":", "\n", "                    ", "test_loss", "+=", "self", ".", "test_loss_dict", "[", "loss_key", "]", "\n", "\n", "", "", "", "self", ".", "logger", ".", "info", "(", "\"TEST: LOSS: {:.4f} \"", ".", "format", "(", "test_loss", ")", "+", "log_info", ")", "\n", "\n", "\"\"\"===== Save Model =====\"\"\"", "\n", "if", "(", "step", "%", "self", ".", "log_config", ".", "checkpoint_step", "==", "0", "or", "step", "==", "self", ".", "train_config", ".", "total_step", ")", "and", "CONFIG", ".", "local_rank", "==", "0", "and", "(", "step", ">", "start", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Saving the trained models from step {}...'", ".", "format", "(", "iter", ")", ")", "\n", "self", ".", "save_model", "(", "\"latest_model\"", ",", "step", ",", "self", ".", "best_loss", ")", "\n", "\n", "if", "self", ".", "test_loss_dict", "[", "'mse'", "]", "<", "self", ".", "best_loss", "[", "'mse'", "]", ":", "\n", "                ", "self", ".", "best_loss", "[", "'mse'", "]", "=", "self", ".", "test_loss_dict", "[", "'mse'", "]", "\n", "self", ".", "best_loss", "[", "'sad'", "]", "=", "self", ".", "test_loss_dict", "[", "'sad'", "]", "\n", "self", ".", "save_model", "(", "\"best_model_mse\"", ",", "step", ",", "self", ".", "best_loss", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.write_log": [[268, 285], ["trainer.Trainer.loss_dict.keys", "trainer.Trainer.logger.debug", "trainer.Trainer.logger.info", "utils.reduce_tensor_dict", "utils.reduce_tensor", "loss_key.upper"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.reduce_tensor_dict", "home.repos.pwc.inspect_result.webtoon_matteformer.utils.util.reduce_tensor"], ["", "def", "write_log", "(", "self", ",", "loss", ",", "step", ",", "image", ",", "trimap", ",", "cur_G_lr", ")", ":", "\n", "        ", "log_info", "=", "''", "\n", "\n", "# reduce losses from GPUs", "\n", "if", "CONFIG", ".", "dist", ":", "\n", "            ", "self", ".", "loss_dict", "=", "utils", ".", "reduce_tensor_dict", "(", "self", ".", "loss_dict", ",", "mode", "=", "'mean'", ")", "\n", "loss", "=", "utils", ".", "reduce_tensor", "(", "loss", ")", "\n", "\n", "# create logging information", "\n", "", "for", "loss_key", "in", "self", ".", "loss_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "self", ".", "loss_dict", "[", "loss_key", "]", "is", "not", "None", ":", "\n", "                ", "log_info", "+=", "loss_key", ".", "upper", "(", ")", "+", "\": {:.4f}, \"", ".", "format", "(", "self", ".", "loss_dict", "[", "loss_key", "]", ")", "\n", "\n", "", "", "self", ".", "logger", ".", "debug", "(", "\"Image tensor shape: {}. Trimap tensor shape: {}\"", ".", "format", "(", "image", ".", "shape", ",", "trimap", ".", "shape", ")", ")", "\n", "log_info", "=", "\"[{}/{}], \"", ".", "format", "(", "step", ",", "self", ".", "train_config", ".", "total_step", ")", "+", "log_info", "\n", "log_info", "+=", "\"lr: {:6f}\"", ".", "format", "(", "cur_G_lr", ")", "\n", "self", ".", "logger", ".", "info", "(", "log_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.save_model": [[286, 296], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "trainer.Trainer.logger.info", "os.path.join", "trainer.Trainer.G.state_dict", "trainer.Trainer.G_optimizer.state_dict", "trainer.Trainer.G_scheduler.state_dict"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "checkpoint_name", ",", "iter", ",", "loss", ")", ":", "\n", "        ", "\"\"\"Restore the trained generator and discriminator.\"\"\"", "\n", "torch", ".", "save", "(", "{", "\n", "'iter'", ":", "iter", ",", "\n", "'loss'", ":", "loss", ",", "\n", "'state_dict'", ":", "self", ".", "G", ".", "state_dict", "(", ")", ",", "\n", "'opt_state_dict'", ":", "self", ".", "G_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr_state_dict'", ":", "self", ".", "G_scheduler", ".", "state_dict", "(", ")", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "self", ".", "log_config", ".", "checkpoint_path", ",", "'{}.pth'", ".", "format", "(", "checkpoint_name", ")", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Saving models in step {} iter... : {}'", ".", "format", "(", "iter", ",", "'{}.pth'", ".", "format", "(", "checkpoint_name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.mse": [[297, 301], ["trainer.Trainer.regression_loss"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.regression_loss"], ["", "@", "staticmethod", "\n", "def", "mse", "(", "logit", ",", "target", ",", "weight", ")", ":", "\n", "# return F.mse_loss(logit * weight, target * weight, reduction='sum') / (torch.sum(weight) + 1e-8)", "\n", "        ", "return", "Trainer", ".", "regression_loss", "(", "logit", ",", "target", ",", "loss_type", "=", "'l2'", ",", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.sad": [[302, 305], ["torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sad", "(", "logit", ",", "target", ",", "weight", ")", ":", "\n", "        ", "return", "F", ".", "l1_loss", "(", "logit", "*", "weight", ",", "target", "*", "weight", ",", "reduction", "=", "'sum'", ")", "/", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.regression_loss": [[306, 330], ["torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "NotImplementedError", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "NotImplementedError", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "regression_loss", "(", "logit", ",", "target", ",", "loss_type", "=", "'l1'", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Alpha reconstruction loss\n        :param logit:\n        :param target:\n        :param loss_type: \"l1\" or \"l2\"\n        :param weight: tensor with shape [N,1,H,W] weights for each pixel\n        :return:\n        \"\"\"", "\n", "if", "weight", "is", "None", ":", "\n", "            ", "if", "loss_type", "==", "'l1'", ":", "\n", "                ", "return", "F", ".", "l1_loss", "(", "logit", ",", "target", ")", "\n", "", "elif", "loss_type", "==", "'l2'", ":", "\n", "                ", "return", "F", ".", "mse_loss", "(", "logit", ",", "target", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"NotImplemented loss type {}\"", ".", "format", "(", "loss_type", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "loss_type", "==", "'l1'", ":", "\n", "                ", "return", "F", ".", "l1_loss", "(", "logit", "*", "weight", ",", "target", "*", "weight", ",", "reduction", "=", "'sum'", ")", "/", "(", "torch", ".", "sum", "(", "weight", ")", "+", "1e-8", ")", "\n", "", "elif", "loss_type", "==", "'l2'", ":", "\n", "                ", "return", "F", ".", "mse_loss", "(", "logit", "*", "weight", ",", "target", "*", "weight", ",", "reduction", "=", "'sum'", ")", "/", "(", "torch", ".", "sum", "(", "weight", ")", "+", "1e-8", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"NotImplemented loss type {}\"", ".", "format", "(", "loss_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.composition_loss": [[331, 338], ["trainer.Trainer.regression_loss"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.regression_loss"], ["", "", "", "@", "staticmethod", "\n", "def", "composition_loss", "(", "alpha", ",", "fg", ",", "bg", ",", "image", ",", "weight", ",", "loss_type", "=", "'l1'", ")", ":", "\n", "        ", "\"\"\"\n        Alpha composition loss\n        \"\"\"", "\n", "merged", "=", "fg", "*", "alpha", "+", "bg", "*", "(", "1", "-", "alpha", ")", "\n", "return", "Trainer", ".", "regression_loss", "(", "merged", ",", "image", ",", "loss_type", "=", "loss_type", ",", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.trainers.trainer.Trainer.lap_loss": [[339, 394], ["trainer.Trainer.lap_loss.lap_pyramid"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "lap_loss", "(", "logit", ",", "target", ",", "gauss_filter", ",", "loss_type", "=", "'l1'", ",", "weight", "=", "None", ")", ":", "\n", "        ", "'''\n        Based on FBA Matting implementation:\n        https://gist.github.com/MarcoForte/a07c40a2b721739bb5c5987671aa5270\n        '''", "\n", "\n", "def", "conv_gauss", "(", "x", ",", "kernel", ")", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "mode", "=", "'reflect'", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "kernel", ",", "groups", "=", "x", ".", "shape", "[", "1", "]", ")", "\n", "return", "x", "\n", "\n", "", "def", "downsample", "(", "x", ")", ":", "\n", "            ", "return", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "\n", "", "def", "upsample", "(", "x", ",", "kernel", ")", ":", "\n", "            ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "cc", "=", "torch", ".", "cat", "(", "[", "x", ",", "torch", ".", "zeros", "(", "N", ",", "C", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "]", ",", "dim", "=", "3", ")", "\n", "cc", "=", "cc", ".", "view", "(", "N", ",", "C", ",", "H", "*", "2", ",", "W", ")", "\n", "cc", "=", "cc", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "cc", "=", "torch", ".", "cat", "(", "[", "cc", ",", "torch", ".", "zeros", "(", "N", ",", "C", ",", "W", ",", "H", "*", "2", ")", ".", "cuda", "(", ")", "]", ",", "dim", "=", "3", ")", "\n", "cc", "=", "cc", ".", "view", "(", "N", ",", "C", ",", "W", "*", "2", ",", "H", "*", "2", ")", "\n", "x_up", "=", "cc", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "return", "conv_gauss", "(", "x_up", ",", "kernel", "=", "4", "*", "gauss_filter", ")", "\n", "\n", "", "def", "lap_pyramid", "(", "x", ",", "kernel", ",", "max_levels", "=", "3", ")", ":", "\n", "            ", "current", "=", "x", "\n", "pyr", "=", "[", "]", "\n", "for", "level", "in", "range", "(", "max_levels", ")", ":", "\n", "                ", "filtered", "=", "conv_gauss", "(", "current", ",", "kernel", ")", "\n", "down", "=", "downsample", "(", "filtered", ")", "\n", "up", "=", "upsample", "(", "down", ",", "kernel", ")", "\n", "diff", "=", "current", "-", "up", "\n", "pyr", ".", "append", "(", "diff", ")", "\n", "current", "=", "down", "\n", "", "return", "pyr", "\n", "\n", "", "def", "weight_pyramid", "(", "x", ",", "max_levels", "=", "3", ")", ":", "\n", "            ", "current", "=", "x", "\n", "pyr", "=", "[", "]", "\n", "for", "level", "in", "range", "(", "max_levels", ")", ":", "\n", "                ", "down", "=", "downsample", "(", "current", ")", "\n", "pyr", ".", "append", "(", "current", ")", "\n", "current", "=", "down", "\n", "", "return", "pyr", "\n", "\n", "", "pyr_logit", "=", "lap_pyramid", "(", "x", "=", "logit", ",", "kernel", "=", "gauss_filter", ",", "max_levels", "=", "5", ")", "\n", "pyr_target", "=", "lap_pyramid", "(", "x", "=", "target", ",", "kernel", "=", "gauss_filter", ",", "max_levels", "=", "5", ")", "\n", "if", "weight", "is", "not", "None", ":", "\n", "            ", "pyr_weight", "=", "weight_pyramid", "(", "x", "=", "weight", ",", "max_levels", "=", "5", ")", "\n", "return", "sum", "(", "Trainer", ".", "regression_loss", "(", "A", "[", "0", "]", ",", "A", "[", "1", "]", ",", "loss_type", "=", "loss_type", ",", "weight", "=", "A", "[", "2", "]", ")", "*", "(", "2", "**", "i", ")", "for", "i", ",", "A", "in", "\n", "enumerate", "(", "zip", "(", "pyr_logit", ",", "pyr_target", ",", "pyr_weight", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "sum", "(", "Trainer", ".", "regression_loss", "(", "A", "[", "0", "]", ",", "A", "[", "1", "]", ",", "loss_type", "=", "loss_type", ",", "weight", "=", "None", ")", "*", "(", "2", "**", "i", ")", "for", "i", ",", "A", "in", "\n", "enumerate", "(", "zip", "(", "pyr_logit", ",", "pyr_target", ")", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.SpectralNorm.__init__": [[15, 22], ["torch.nn.Module.__init__", "ops.SpectralNorm._made_params", "ops.SpectralNorm._make_params"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__", "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.SpectralNorm._made_params", "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.SpectralNorm._make_params"], ["def", "__init__", "(", "self", ",", "module", ",", "name", "=", "'weight'", ",", "power_iterations", "=", "1", ")", ":", "\n", "        ", "super", "(", "SpectralNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "power_iterations", "=", "power_iterations", "\n", "if", "not", "self", ".", "_made_params", "(", ")", ":", "\n", "            ", "self", ".", "_make_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.SpectralNorm._update_u_v": [[23, 35], ["getattr", "getattr", "getattr", "range", "getattr.dot", "setattr", "ops.l2normalize", "ops.l2normalize", "getattr.view().mv", "torch.mv", "torch.mv", "getattr.dot.expand_as", "torch.t", "getattr.view", "getattr.view", "getattr.view"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.l2normalize", "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.l2normalize"], ["", "", "def", "_update_u_v", "(", "self", ")", ":", "\n", "        ", "u", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_u\"", ")", "\n", "v", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_v\"", ")", "\n", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_bar\"", ")", "\n", "\n", "height", "=", "w", ".", "data", ".", "shape", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "power_iterations", ")", ":", "\n", "            ", "v", ".", "data", "=", "l2normalize", "(", "torch", ".", "mv", "(", "torch", ".", "t", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ")", ",", "u", ".", "data", ")", ")", "\n", "u", ".", "data", "=", "l2normalize", "(", "torch", ".", "mv", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ",", "v", ".", "data", ")", ")", "\n", "\n", "", "sigma", "=", "u", ".", "dot", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "mv", "(", "v", ")", ")", "\n", "setattr", "(", "self", ".", "module", ",", "self", ".", "name", ",", "w", "/", "sigma", ".", "expand_as", "(", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.SpectralNorm._noupdate_u_v": [[36, 44], ["getattr", "getattr", "getattr", "getattr.dot", "setattr", "getattr.view().mv", "getattr.dot.expand_as", "getattr.view"], "methods", ["None"], ["", "def", "_noupdate_u_v", "(", "self", ")", ":", "\n", "        ", "u", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_u\"", ")", "\n", "v", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_v\"", ")", "\n", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_bar\"", ")", "\n", "\n", "height", "=", "w", ".", "data", ".", "shape", "[", "0", "]", "\n", "sigma", "=", "u", ".", "dot", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "mv", "(", "v", ")", ")", "\n", "setattr", "(", "self", ".", "module", ",", "self", ".", "name", ",", "w", "/", "sigma", ".", "expand_as", "(", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.SpectralNorm._made_params": [[45, 53], ["getattr", "getattr", "getattr"], "methods", ["None"], ["", "def", "_made_params", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "u", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_u\"", ")", "\n", "v", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_v\"", ")", "\n", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_bar\"", ")", "\n", "return", "True", "\n", "", "except", "AttributeError", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.SpectralNorm._make_params": [[54, 71], ["getattr", "torch.nn.Parameter", "torch.nn.Parameter", "ops.l2normalize", "ops.l2normalize", "torch.nn.Parameter", "ops.SpectralNorm.module.register_parameter", "ops.SpectralNorm.module.register_parameter", "ops.SpectralNorm.module.register_parameter", "getattr.data.new().normal_", "getattr.data.new().normal_", "getattr.view", "getattr.data.new", "getattr.data.new"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.l2normalize", "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.l2normalize"], ["", "", "def", "_make_params", "(", "self", ")", ":", "\n", "        ", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", ")", "\n", "\n", "height", "=", "w", ".", "data", ".", "shape", "[", "0", "]", "\n", "width", "=", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ".", "shape", "[", "1", "]", "\n", "\n", "u", "=", "Parameter", "(", "w", ".", "data", ".", "new", "(", "height", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "v", "=", "Parameter", "(", "w", ".", "data", ".", "new", "(", "width", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "u", ".", "data", "=", "l2normalize", "(", "u", ".", "data", ")", "\n", "v", ".", "data", "=", "l2normalize", "(", "v", ".", "data", ")", "\n", "w_bar", "=", "Parameter", "(", "w", ".", "data", ")", "\n", "\n", "del", "self", ".", "module", ".", "_parameters", "[", "self", ".", "name", "]", "\n", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_u\"", ",", "u", ")", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_v\"", ",", "v", ")", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_bar\"", ",", "w_bar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.SpectralNorm.forward": [[72, 79], ["ops.SpectralNorm.module.forward", "ops.SpectralNorm._update_u_v", "ops.SpectralNorm._noupdate_u_v"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.forward", "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.SpectralNorm._update_u_v", "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.SpectralNorm._noupdate_u_v"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "# if torch.is_grad_enabled() and self.module.training:", "\n", "        ", "if", "self", ".", "module", ".", "training", ":", "\n", "            ", "self", ".", "_update_u_v", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_noupdate_u_v", "(", ")", "\n", "", "return", "self", ".", "module", ".", "forward", "(", "*", "args", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.webtoon_matteformer.networks.ops.l2normalize": [[6, 8], ["v.norm"], "function", ["None"], ["def", "l2normalize", "(", "v", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "return", "v", "/", "(", "v", ".", "norm", "(", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.networks.generators.Generator_MatteFormer.__init__": [[17, 38], ["torch.Module.__init__", "networks.encoders.MatteFormer.MatteFormer", "generators.Generator_MatteFormer.init_pretrained_weight"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__", "home.repos.pwc.inspect_result.webtoon_matteformer.networks.generators.Generator_MatteFormer.init_pretrained_weight"], ["    ", "def", "__init__", "(", "self", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "Generator_MatteFormer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "MatteFormer", "(", "embed_dim", "=", "96", ",", "\n", "depths", "=", "[", "2", ",", "2", ",", "6", ",", "2", "]", ",", "# tiny-model", "\n", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "window_size", "=", "7", ",", "\n", "mlp_ratio", "=", "4.0", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "attn_drop_rate", "=", "0.0", ",", "\n", "drop_path_rate", "=", "0.3", ",", "\n", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", "\n", ")", "\n", "# original", "\n", "self", ".", "decoder", "=", "decoders", ".", "__dict__", "[", "'res_shortcut_decoder'", "]", "(", ")", "\n", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "init_pretrained_weight", "(", "pretrained_path", "=", "CONFIG", ".", "model", ".", "imagenet_pretrain_path", ")", "# MatteFormer", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.networks.generators.Generator_MatteFormer.init_pretrained_weight": [[39, 93], ["enumerate", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "patch_embed_weight_new[].copy_", "generators.Generator_MatteFormer.encoder.load_state_dict", "print", "os.path.isfile", "print", "exit", "torch.load", "torch.load", "torch.load", "torch.load", "weight.items", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "range", "k.split", "weight_.update", "print", "weight_.items", "int", "int", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "weight_.items", "int", "int", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "range", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len", "layer_name.split", "layer_name.split", "layer_name.split", "layer_name.split", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "weight.items", "weight.items"], "methods", ["None"], ["", "", "def", "init_pretrained_weight", "(", "self", ",", "pretrained_path", "=", "None", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "pretrained_path", ")", ":", "\n", "            ", "print", "(", "'Please Check your Pretrained weight path.. file not exist : {}'", ".", "format", "(", "pretrained_path", ")", ")", "\n", "exit", "(", ")", "\n", "\n", "", "weight", "=", "torch", ".", "load", "(", "pretrained_path", ")", "[", "'model'", "]", "\n", "\n", "# [1] get backbone weights", "\n", "weight_", "=", "{", "}", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "weight", ".", "items", "(", ")", ")", ":", "\n", "            ", "head", "=", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "head", "in", "[", "'patch_embed'", ",", "'layers'", "]", ":", "\n", "                ", "if", "'attn_mask'", "in", "k", ":", "\n", "                    ", "print", "(", "'[{}/{}] {} will be ignored'", ".", "format", "(", "i", ",", "len", "(", "weight", ".", "items", "(", ")", ")", ",", "k", ")", ")", "\n", "continue", "\n", "", "weight_", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'[{}/{}] {} will be ignored'", ".", "format", "(", "i", ",", "len", "(", "weight", ".", "items", "(", ")", ")", ",", "k", ")", ")", "\n", "\n", "", "", "patch_embed_weight", "=", "weight_", "[", "'patch_embed.proj.weight'", "]", "\n", "patch_embed_weight_new", "=", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "torch", ".", "randn", "(", "96", ",", "(", "3", "+", "3", ")", ",", "4", ",", "4", ")", ".", "cuda", "(", ")", ")", "\n", "patch_embed_weight_new", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ".", "copy_", "(", "patch_embed_weight", ")", "\n", "weight_", "[", "'patch_embed.proj.weight'", "]", "=", "patch_embed_weight_new", "\n", "\n", "attn_layers", "=", "[", "k", "for", "k", ",", "v", "in", "weight_", ".", "items", "(", ")", "if", "'attn.relative_position_bias_table'", "in", "k", "]", "\n", "for", "layer_name", "in", "attn_layers", ":", "\n", "            ", "pos_bias", "=", "weight_", "[", "layer_name", "]", "\n", "n_bias", ",", "n_head", "=", "pos_bias", ".", "shape", "\n", "\n", "layer_idx", ",", "block_idx", "=", "int", "(", "layer_name", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", ",", "int", "(", "layer_name", ".", "split", "(", "'.'", ")", "[", "3", "]", ")", "\n", "n_prior", "=", "block_idx", "+", "1", "\n", "pos_bias_new", "=", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "torch", ".", "randn", "(", "n_bias", "+", "n_prior", "*", "3", ",", "n_head", ")", ")", "\n", "\n", "pos_bias_new", "[", ":", "n_bias", ",", ":", "]", "=", "pos_bias", "\n", "weight_", "[", "layer_name", "]", "=", "pos_bias_new", "\n", "\n", "", "attn_layers", "=", "[", "k", "for", "k", ",", "v", "in", "weight_", ".", "items", "(", ")", "if", "'attn.relative_position_index'", "in", "k", "]", "\n", "for", "layer_name", "in", "attn_layers", ":", "\n", "            ", "pos_index", "=", "weight_", "[", "layer_name", "]", "\n", "\n", "layer_idx", ",", "block_idx", "=", "int", "(", "layer_name", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", ",", "int", "(", "layer_name", ".", "split", "(", "'.'", ")", "[", "3", "]", ")", "\n", "n_prior", "=", "block_idx", "+", "1", "\n", "\n", "num_patch", "=", "49", "\n", "last_idx", "=", "169", "\n", "pos_index_new", "=", "torch", ".", "ones", "(", "(", "num_patch", ",", "num_patch", "+", "n_prior", "*", "3", ")", ")", ".", "long", "(", ")", "*", "last_idx", "\n", "pos_index_new", "[", ":", "num_patch", ",", ":", "num_patch", "]", "=", "pos_index", "\n", "for", "i", "in", "range", "(", "n_prior", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                    ", "pos_index_new", "[", ":", ",", "num_patch", "+", "i", "*", "3", "+", "j", ":", "num_patch", "+", "i", "*", "3", "+", "j", "+", "1", "]", "=", "last_idx", "+", "i", "*", "3", "+", "j", "\n", "", "", "weight_", "[", "layer_name", "]", "=", "pos_index_new", "\n", "\n", "", "self", ".", "encoder", ".", "load_state_dict", "(", "weight_", ",", "strict", "=", "False", ")", "\n", "print", "(", "'load pretrained model done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.networks.generators.Generator_MatteFormer.forward": [[94, 100], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.Generator_MatteFormer.encoder", "generators.Generator_MatteFormer.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "trimap", ")", ":", "\n", "        ", "inp", "=", "torch", ".", "cat", "(", "(", "image", ",", "trimap", ")", ",", "axis", "=", "1", ")", "\n", "x", "=", "self", ".", "encoder", "(", "inp", ",", "trimap", ")", "\n", "embedding", "=", "x", "[", "-", "1", "]", "\n", "outs", "=", "self", ".", "decoder", "(", "embedding", ",", "x", "[", ":", "-", "1", "]", ")", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.networks.generators.get_generator": [[10, 13], ["generators.Generator_MatteFormer"], "function", ["None"], ["def", "get_generator", "(", "is_train", "=", "True", ")", ":", "\n", "    ", "generator", "=", "Generator_MatteFormer", "(", "is_train", "=", "is_train", ")", "\n", "return", "generator", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.BasicBlock.__init__": [[31, 47], ["torch.Module.__init__", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "networks.ops.SpectralNorm", "norm_layer", "networks.ops.SpectralNorm", "networks.ops.SpectralNorm", "conv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "conv"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "upsample", "=", "None", ",", "norm_layer", "=", "None", ",", "large_kernel", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "stride", "=", "stride", "\n", "conv", "=", "conv5x5", "if", "large_kernel", "else", "conv3x3", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "self", ".", "conv1", "=", "SpectralNorm", "(", "nn", ".", "ConvTranspose2d", "(", "inplanes", ",", "inplanes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "SpectralNorm", "(", "conv", "(", "inplanes", ",", "inplanes", ")", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "inplanes", ")", "\n", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "SpectralNorm", "(", "conv", "(", "inplanes", ",", "planes", ")", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "upsample", "=", "upsample", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.BasicBlock.forward": [[48, 65], ["resnet_decoder.BasicBlock.conv1", "resnet_decoder.BasicBlock.bn1", "resnet_decoder.BasicBlock.activation", "resnet_decoder.BasicBlock.conv2", "resnet_decoder.BasicBlock.bn2", "resnet_decoder.BasicBlock.activation", "resnet_decoder.BasicBlock.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "activation", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "upsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "upsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "activation", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.ResNet_D_Dec.__init__": [[69, 129], ["torch.Module.__init__", "logging.getLogger", "networks.ops.SpectralNorm", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "resnet_decoder.ResNet_D_Dec._make_layer", "resnet_decoder.ResNet_D_Dec._make_layer", "resnet_decoder.ResNet_D_Dec._make_layer", "resnet_decoder.ResNet_D_Dec._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_decoder.ResNet_D_Dec.modules", "resnet_decoder.ResNet_D_Dec.modules", "resnet_decoder.ResNet_D_Dec.logger.debug", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "isinstance", "hasattr", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__", "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.ResNet_D_Dec._make_layer", "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.ResNet_D_Dec._make_layer", "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.ResNet_D_Dec._make_layer", "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.ResNet_D_Dec._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "norm_layer", "=", "None", ",", "large_kernel", "=", "False", ",", "late_downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet_D_Dec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\"Logger\"", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "large_kernel", "=", "large_kernel", "\n", "self", ".", "kernel_size", "=", "5", "if", "self", ".", "large_kernel", "else", "3", "\n", "\n", "self", ".", "inplanes", "=", "512", "if", "layers", "[", "0", "]", ">", "0", "else", "256", "\n", "self", ".", "late_downsample", "=", "late_downsample", "\n", "self", ".", "midplanes", "=", "64", "if", "late_downsample", "else", "32", "\n", "\n", "self", ".", "conv1", "=", "SpectralNorm", "(", "nn", ".", "ConvTranspose2d", "(", "self", ".", "midplanes", ",", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "32", ")", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "midplanes", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "refine_OS1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "32", ")", ",", "\n", "self", ".", "leaky_relu", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "kernel_size", "//", "2", ")", ",", ")", "\n", "\n", "self", ".", "refine_OS4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "32", ")", ",", "\n", "self", ".", "leaky_relu", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "kernel_size", "//", "2", ")", ",", ")", "\n", "\n", "self", ".", "refine_OS8", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "32", ")", ",", "\n", "self", ".", "leaky_relu", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "kernel_size", "//", "2", ")", ",", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "\"weight_bar\"", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight_bar", ")", "\n", "", "else", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n", "", "", "self", ".", "logger", ".", "debug", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.ResNet_D_Dec._make_layer": [[130, 153], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Identity", "torch.Identity", "torch.Identity", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "networks.ops.SpectralNorm", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "resnet_decoder.conv1x1", "networks.ops.SpectralNorm", "norm_layer", "resnet_decoder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.conv1x1", "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.conv1x1"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "if", "blocks", "==", "0", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Identity", "(", ")", ")", "\n", "", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "upsample", "=", "None", "\n", "if", "stride", "!=", "1", ":", "\n", "            ", "upsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", ",", "\n", "SpectralNorm", "(", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ")", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "elif", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "upsample", "=", "nn", ".", "Sequential", "(", "\n", "SpectralNorm", "(", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ")", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "upsample", ",", "norm_layer", ",", "self", ".", "large_kernel", ")", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "norm_layer", "=", "norm_layer", ",", "large_kernel", "=", "self", ".", "large_kernel", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.ResNet_D_Dec.forward": [[154, 182], ["resnet_decoder.ResNet_D_Dec.layer1", "resnet_decoder.ResNet_D_Dec.layer2", "resnet_decoder.ResNet_D_Dec.refine_OS8", "resnet_decoder.ResNet_D_Dec.layer3", "resnet_decoder.ResNet_D_Dec.refine_OS4", "resnet_decoder.ResNet_D_Dec.layer4", "resnet_decoder.ResNet_D_Dec.conv1", "resnet_decoder.ResNet_D_Dec.bn1", "resnet_decoder.ResNet_D_Dec.leaky_relu", "resnet_decoder.ResNet_D_Dec.refine_OS1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mid_fea", ")", ":", "\n", "        ", "ret", "=", "{", "}", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# N x 256 x 32 x 32", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# N x 128 x 64 x 64", "\n", "x_os8", "=", "self", ".", "refine_OS8", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# N x 64 x 128 x 128", "\n", "x_os4", "=", "self", ".", "refine_OS4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "# N x 32 x 256 x 256", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x_os1", "=", "self", ".", "refine_OS1", "(", "x", ")", "\n", "\n", "x_os4", "=", "F", ".", "interpolate", "(", "x_os4", ",", "scale_factor", "=", "4.0", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x_os8", "=", "F", ".", "interpolate", "(", "x_os8", ",", "scale_factor", "=", "8.0", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "x_os1", "=", "(", "torch", ".", "tanh", "(", "x_os1", ")", "+", "1.0", ")", "/", "2.0", "\n", "x_os4", "=", "(", "torch", ".", "tanh", "(", "x_os4", ")", "+", "1.0", ")", "/", "2.0", "\n", "x_os8", "=", "(", "torch", ".", "tanh", "(", "x_os8", ")", "+", "1.0", ")", "/", "2.0", "\n", "\n", "ret", "[", "'alpha_os1'", "]", "=", "x_os1", "\n", "ret", "[", "'alpha_os4'", "]", "=", "x_os4", "\n", "ret", "[", "'alpha_os8'", "]", "=", "x_os8", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.ResShortCut_D_Decoder.__init__": [[186, 188], ["resnet_decoder.ResNet_D_Dec.__init__"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "norm_layer", "=", "None", ",", "large_kernel", "=", "False", ",", "late_downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResShortCut_D_Decoder", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ",", "norm_layer", ",", "large_kernel", ",", "late_downsample", "=", "late_downsample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.ResShortCut_D_Decoder.forward": [[189, 217], ["resnet_decoder.ResShortCut_D_Decoder.refine_OS8", "resnet_decoder.ResShortCut_D_Decoder.refine_OS4", "resnet_decoder.ResShortCut_D_Decoder.conv1", "resnet_decoder.ResShortCut_D_Decoder.bn1", "resnet_decoder.ResShortCut_D_Decoder.refine_OS1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "resnet_decoder.ResShortCut_D_Decoder.layer1", "resnet_decoder.ResShortCut_D_Decoder.layer2", "resnet_decoder.ResShortCut_D_Decoder.layer3", "resnet_decoder.ResShortCut_D_Decoder.layer4", "resnet_decoder.ResShortCut_D_Decoder.leaky_relu", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mid_fea", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "ret", "=", "{", "}", "\n", "fea1", ",", "fea2", ",", "fea3", ",", "fea4", ",", "fea5", "=", "mid_fea", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "+", "fea5", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "+", "fea4", "\n", "x_os8", "=", "self", ".", "refine_OS8", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "+", "fea3", "\n", "x_os4", "=", "self", ".", "refine_OS4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "+", "fea2", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "+", "fea1", "\n", "x_os1", "=", "self", ".", "refine_OS1", "(", "x", ")", "\n", "\n", "x_os4", "=", "F", ".", "interpolate", "(", "x_os4", ",", "scale_factor", "=", "4.0", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x_os8", "=", "F", ".", "interpolate", "(", "x_os8", ",", "scale_factor", "=", "8.0", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "x_os1", "=", "(", "torch", ".", "tanh", "(", "x_os1", ")", "+", "1.0", ")", "/", "2.0", "\n", "x_os4", "=", "(", "torch", ".", "tanh", "(", "x_os4", ")", "+", "1.0", ")", "/", "2.0", "\n", "x_os8", "=", "(", "torch", ".", "tanh", "(", "x_os8", ")", "+", "1.0", ")", "/", "2.0", "\n", "\n", "ret", "[", "'alpha_os1'", "]", "=", "x_os1", "\n", "ret", "[", "'alpha_os4'", "]", "=", "x_os4", "\n", "ret", "[", "'alpha_os8'", "]", "=", "x_os8", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.conv5x5": [[11, 15], ["torch.Conv2d"], "function", ["None"], ["def", "conv5x5", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"5x5 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "2", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.resnet_decoder.conv1x1": [[23, 26], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.decoders.__init__.res_shortcut_decoder": [[5, 7], ["resnet_decoder.ResShortCut_D_Decoder"], "function", ["None"], [""]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.Mlp.__init__": [[69, 77], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.Mlp.forward": [[78, 85], ["MatteFormer.Mlp.fc1", "MatteFormer.Mlp.act", "MatteFormer.Mlp.drop", "MatteFormer.Mlp.fc2", "MatteFormer.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.PatchMerging.__init__": [[94, 99], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "reduction", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "2", "*", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "4", "*", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.PatchMerging.forward": [[100, 128], ["torch.pad.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pad.view", "MatteFormer.PatchMerging.norm", "MatteFormer.PatchMerging.reduction", "torch.pad", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "\"\"\" Forward function.\n\n        Args:\n            x: Input feature, tensor size (B, H*W, C).\n            H, W: Spatial resolution of the input feature.\n        \"\"\"", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# padding", "\n", "pad_input", "=", "(", "H", "%", "2", "==", "1", ")", "or", "(", "W", "%", "2", "==", "1", ")", "\n", "if", "pad_input", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "W", "%", "2", ",", "0", ",", "H", "%", "2", ")", ")", "\n", "\n", "", "x0", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x1", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x2", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x3", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x0", ",", "x1", ",", "x2", ",", "x3", "]", ",", "-", "1", ")", "# B H/2 W/2 4*C", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "4", "*", "C", ")", "# B H/2*W/2 4*C", "\n", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "reduction", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.PatchEmbed.__init__": [[140, 153], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__"], ["def", "__init__", "(", "self", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "96", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "if", "norm_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.PatchEmbed.forward": [[155, 173], ["x.transpose().view.transpose().view.size", "MatteFormer.PatchEmbed.proj", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "x.transpose().view.transpose().view.flatten().transpose", "MatteFormer.PatchEmbed.norm", "x.transpose().view.transpose().view.transpose().view", "x.transpose().view.transpose().view.size", "x.transpose().view.transpose().view.size", "x.transpose().view.transpose().view.flatten", "x.transpose().view.transpose().view.transpose"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "\n", "# padding", "\n", "if", "W", "%", "self", ".", "patch_size", "[", "1", "]", "!=", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "self", ".", "patch_size", "[", "1", "]", "-", "W", "%", "self", ".", "patch_size", "[", "1", "]", ")", ")", "\n", "", "if", "H", "%", "self", ".", "patch_size", "[", "0", "]", "!=", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "self", ".", "patch_size", "[", "0", "]", "-", "H", "%", "self", ".", "patch_size", "[", "0", "]", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "proj", "(", "x", ")", "# B C Wh Ww", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "Wh", ",", "Ww", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", ",", "Wh", ",", "Ww", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.PAWSA.__init__": [[176, 224], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "range", "MatteFormer.PAWSA.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "timm.models.layers.trunc_normal_", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "range", "relative_coords.permute().contiguous.permute().contiguous.permute", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "window_size", ",", "num_heads", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "\n", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "use_prior", "=", "True", ",", "num_priorset", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "window_size", "=", "window_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "use_prior", "=", "use_prior", "\n", "self", ".", "num_priorset", "=", "num_priorset", "\n", "\n", "# use 3 prior vector", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", "+", "3", "*", "self", ".", "num_priorset", ",", "num_heads", ")", ")", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "\n", "\n", "# relative position index", "\n", "num_patch", "=", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", "\n", "last_idx", "=", "169", "\n", "relative_position_index_withPrior", "=", "torch", ".", "ones", "(", "(", "num_patch", ",", "num_patch", "+", "self", ".", "num_priorset", "*", "3", ")", ")", ".", "long", "(", ")", "*", "last_idx", "\n", "relative_position_index_withPrior", "[", ":", "num_patch", ",", ":", "num_patch", "]", "=", "relative_position_index", "\n", "for", "i", "in", "range", "(", "self", ".", "num_priorset", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "relative_position_index_withPrior", "[", ":", ",", "num_patch", "+", "i", "*", "3", "+", "j", ":", "num_patch", "+", "i", "*", "3", "+", "j", "+", "1", "]", "=", "last_idx", "+", "i", "*", "3", "+", "j", "\n", "", "", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index_withPrior", ")", "\n", "\n", "# params", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.PAWSA.forward": [[225, 279], ["MatteFormer.PAWSA.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "MatteFormer.PAWSA.qkv().reshape().permute", "MatteFormer.PAWSA.softmax", "MatteFormer.PAWSA.proj", "MatteFormer.PAWSA.proj_drop", "MatteFormer.PAWSA.qkv().reshape().permute", "MatteFormer.PAWSA.transpose().reshape", "MatteFormer.PAWSA.proj", "MatteFormer.PAWSA.proj_drop", "uk_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view", "fg_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view", "bg_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "attn.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "MatteFormer.PAWSA.qkv().reshape", "attn.view.view.view", "torch.pad.contiguous().unsqueeze().unsqueeze", "MatteFormer.PAWSA.qkv().reshape", "MatteFormer.PAWSA.transpose", "uk_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous", "fg_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous", "bg_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous", "MatteFormer.PAWSA.relative_position_index.view", "MatteFormer.PAWSA.qkv", "torch.pad.contiguous().unsqueeze", "MatteFormer.PAWSA.qkv", "uk_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand().unsqueeze", "fg_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand().unsqueeze", "bg_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand().unsqueeze", "torch.pad.contiguous", "uk_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand", "fg_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand", "bg_prior.expand().unsqueeze().contiguous().view.expand().unsqueeze().contiguous().view.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "_inp_shape", "=", "None", ",", "prior_bins", "=", "None", ")", ":", "\n", "# get shape", "\n", "        ", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "_inp_shape", "\n", "\n", "# for prior-memory", "\n", "prior_highway", "=", "None", "\n", "for", "prior", "in", "prior_bins", ":", "\n", "            ", "uk_prior", ",", "fg_prior", ",", "bg_prior", "=", "prior", "[", "'unknown'", "]", ",", "prior", "[", "'fg'", "]", ",", "prior", "[", "'bg'", "]", "\n", "# prior highways (for shortcut)", "\n", "if", "prior_highway", "is", "None", ":", "\n", "                ", "prior_highway", "=", "torch", ".", "cat", "(", "(", "uk_prior", ",", "fg_prior", ",", "bg_prior", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "prior_highway", "=", "torch", ".", "cat", "(", "(", "prior_highway", ",", "uk_prior", ",", "fg_prior", ",", "bg_prior", ")", ",", "dim", "=", "1", ")", "\n", "# concate prior-tokens to spatial-tokens(x)", "\n", "", "uk_prior", "=", "uk_prior", ".", "expand", "(", "(", "-", "1", ",", "(", "H", "//", "self", ".", "window_size", "[", "0", "]", ")", "*", "(", "W", "//", "self", ".", "window_size", "[", "1", "]", ")", ",", "-", "1", ")", ")", ".", "unsqueeze", "(", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "C", ")", "\n", "fg_prior", "=", "fg_prior", ".", "expand", "(", "(", "-", "1", ",", "(", "H", "//", "self", ".", "window_size", "[", "0", "]", ")", "*", "(", "W", "//", "self", ".", "window_size", "[", "1", "]", ")", ",", "-", "1", ")", ")", ".", "unsqueeze", "(", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "C", ")", "\n", "bg_prior", "=", "bg_prior", ".", "expand", "(", "(", "-", "1", ",", "(", "H", "//", "self", ".", "window_size", "[", "0", "]", ")", "*", "(", "W", "//", "self", ".", "window_size", "[", "1", "]", ")", ",", "-", "1", ")", ")", ".", "unsqueeze", "(", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "C", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "uk_prior", ",", "fg_prior", ",", "bg_prior", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", "+", "self", ".", "num_priorset", "*", "3", ",", "-", "1", ")", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "# qkv projection for x", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", "+", "self", ".", "num_priorset", "*", "3", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "\n", "q", "=", "q", "[", ":", ",", ":", ",", ":", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", ":", "]", "*", "self", ".", "scale", "\n", "\n", "# get self-attention features", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "nW", "=", "mask", ".", "shape", "[", "0", "]", "\n", "mask_withPrior", "=", "F", ".", "pad", "(", "mask", ",", "(", "0", ",", "self", ".", "num_priorset", "*", "3", ",", "0", ",", "0", ")", ")", "\n", "attn", "=", "attn", ".", "view", "(", "B_", "//", "nW", ",", "nW", ",", "self", ".", "num_heads", ",", "N", ",", "N", "+", "self", ".", "num_priorset", "*", "3", ")", "+", "mask_withPrior", ".", "contiguous", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "attn", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "N", ",", "N", "+", "self", ".", "num_priorset", "*", "3", ")", "\n", "", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "\n", "# projection", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "# prior projection for prior-memory", "\n", "prior_highway", "=", "self", ".", "qkv", "(", "prior_highway", ")", ".", "reshape", "(", "B", ",", "self", ".", "num_priorset", "*", "3", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "_q_hw", ",", "_k_hw", ",", "_v_hw", "=", "prior_highway", "[", "0", "]", ",", "prior_highway", "[", "1", "]", ",", "prior_highway", "[", "2", "]", "\n", "\n", "_v_hw", "=", "_v_hw", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "self", ".", "num_priorset", "*", "3", ",", "C", ")", "\n", "_v_hw", "=", "self", ".", "proj", "(", "_v_hw", ")", "\n", "_v_hw", "=", "self", ".", "proj_drop", "(", "_v_hw", ")", "\n", "\n", "return", "x", ",", "_v_hw", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.PASTBlock.__init__": [[282, 310], ["torch.Module.__init__", "norm_layer", "MatteFormer.PAWSA", "norm_layer", "int", "MatteFormer.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "timm.models.layers.to_2tuple"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_idx", ",", "block_idx", ",", "dim", ",", "num_heads", ",", "window_size", "=", "7", ",", "shift_size", "=", "0", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "use_prior", "=", "True", ",", "num_priorset", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_idx", "=", "layer_idx", "\n", "self", ".", "block_idx", "=", "block_idx", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "shift_size", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "self", ".", "use_prior", "=", "use_prior", "\n", "self", ".", "num_priorset", "=", "num_priorset", "\n", "\n", "assert", "0", "<=", "self", ".", "shift_size", "<", "self", ".", "window_size", ",", "\"shift_size must in 0-window_size\"", "\n", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "PAWSA", "(", "\n", "dim", ",", "window_size", "=", "to_2tuple", "(", "self", ".", "window_size", ")", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "use_prior", "=", "self", ".", "use_prior", ",", "num_priorset", "=", "self", ".", "num_priorset", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "self", ".", "H", "=", "None", "\n", "self", ".", "W", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.PASTBlock.forward": [[312, 421], ["MatteFormer.PASTBlock.norm1", "x[].contiguous.view", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "MatteFormer.window_partition", "x_windows.view.view.view", "MatteFormer.PASTBlock.attn", "attn_windows.view.view.view", "MatteFormer.window_reverse", "x[].contiguous.view", "dict", "shortcut.view", "prior_memory.append", "list", "enumerate", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "x[].contiguous", "MatteFormer.PASTBlock.drop_path", "MatteFormer.PASTBlock.drop_path", "priors_after_attn.chunk.chunk.chunk", "list", "range", "list", "enumerate", "uk_prior.sum", "fg_prior.sum", "bg_prior.sum", "dict", "MatteFormer.PASTBlock.norm1", "MatteFormer.PASTBlock.norm1", "MatteFormer.PASTBlock.norm1", "list.append", "MatteFormer.PASTBlock.mlp", "dict", "list.append", "zip", "list.append", "area_uk.sum", "area_fg.sum", "area_bg.sum", "MatteFormer.PASTBlock.norm2", "MatteFormer.PASTBlock.drop_path", "MatteFormer.PASTBlock.drop_path", "MatteFormer.PASTBlock.drop_path", "MatteFormer.PASTBlock.drop_path", "MatteFormer.PASTBlock.drop_path", "MatteFormer.PASTBlock.drop_path", "prior_out[].squeeze", "MatteFormer.PASTBlock.mlp", "prior_out[].squeeze", "MatteFormer.PASTBlock.mlp", "prior_out[].squeeze", "MatteFormer.PASTBlock.mlp", "MatteFormer.PASTBlock.norm2", "MatteFormer.PASTBlock.norm2", "MatteFormer.PASTBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.window_partition", "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.window_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask_matrix", ",", "prior_memory", "=", "None", ",", "area_fg", "=", "None", ",", "area_bg", "=", "None", ",", "area_uk", "=", "None", ")", ":", "\n", "        ", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "H", ",", "W", "=", "self", ".", "H", ",", "self", ".", "W", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n", "# shortcut features", "\n", "shortcut", "=", "x", "\n", "\n", "# shortcut prior features (current prior + previous blk prior)", "\n", "if", "True", ":", "\n", "            ", "shortcut_prior", "=", "dict", "(", ")", "\n", "shortcut_", "=", "shortcut", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "# [1, 256, 512, 96]", "\n", "\n", "epsilon", "=", "1e-9", "\n", "uk_prior", "=", "(", "area_uk", "*", "shortcut_", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "uk_prior", "=", "uk_prior", ".", "sum", "(", "axis", "=", "(", "-", "1", ",", "-", "2", ")", ")", "/", "(", "area_uk", ".", "sum", "(", "axis", "=", "(", "1", ",", "2", ")", ")", "+", "epsilon", ")", "\n", "fg_prior", "=", "(", "area_fg", "*", "shortcut_", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "fg_prior", "=", "fg_prior", ".", "sum", "(", "axis", "=", "(", "-", "1", ",", "-", "2", ")", ")", "/", "(", "area_fg", ".", "sum", "(", "axis", "=", "(", "1", ",", "2", ")", ")", "+", "epsilon", ")", "\n", "bg_prior", "=", "(", "area_bg", "*", "shortcut_", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "bg_prior", "=", "bg_prior", ".", "sum", "(", "axis", "=", "(", "-", "1", ",", "-", "2", ")", ")", "/", "(", "area_bg", ".", "sum", "(", "axis", "=", "(", "1", ",", "2", ")", ")", "+", "epsilon", ")", "\n", "\n", "shortcut_prior", "[", "'fg'", "]", "=", "fg_prior", "\n", "shortcut_prior", "[", "'bg'", "]", "=", "bg_prior", "\n", "shortcut_prior", "[", "'unknown'", "]", "=", "uk_prior", "\n", "\n", "# current blk prior on last index", "\n", "prior_memory", ".", "append", "(", "shortcut_prior", ")", "\n", "\n", "# forward", "\n", "", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# forward all prior to norm1", "\n", "if", "True", ":", "\n", "            ", "prior_bins", "=", "list", "(", ")", "\n", "for", "p", ",", "prior", "in", "enumerate", "(", "prior_memory", ")", ":", "\n", "                ", "prior_bin", "=", "dict", "(", ")", "\n", "prior_bin", "[", "'fg'", "]", "=", "self", ".", "norm1", "(", "prior", "[", "'fg'", "]", ")", "\n", "prior_bin", "[", "'bg'", "]", "=", "self", ".", "norm1", "(", "prior", "[", "'bg'", "]", ")", "\n", "prior_bin", "[", "'unknown'", "]", "=", "self", ".", "norm1", "(", "prior", "[", "'unknown'", "]", ")", "\n", "prior_bins", ".", "append", "(", "prior_bin", ")", "\n", "\n", "# pad feature maps to multiples of window size", "\n", "", "", "pad_l", "=", "pad_t", "=", "0", "\n", "pad_r", "=", "(", "self", ".", "window_size", "-", "W", "%", "self", ".", "window_size", ")", "%", "self", ".", "window_size", "\n", "pad_b", "=", "(", "self", ".", "window_size", "-", "H", "%", "self", ".", "window_size", ")", "%", "self", ".", "window_size", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "pad_l", ",", "pad_r", ",", "pad_t", ",", "pad_b", ")", ")", "# [1, 259, 518, 96]", "\n", "_", ",", "Hp", ",", "Wp", ",", "_", "=", "x", ".", "shape", "\n", "\n", "# cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "shifted_x", "=", "torch", ".", "roll", "(", "x", ",", "shifts", "=", "(", "-", "self", ".", "shift_size", ",", "-", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "attn_mask", "=", "mask_matrix", "\n", "", "else", ":", "\n", "            ", "shifted_x", "=", "x", "\n", "attn_mask", "=", "None", "\n", "\n", "# partition windows", "\n", "", "x_windows", ",", "prior_bins", "=", "window_partition", "(", "shifted_x", ",", "self", ".", "window_size", ",", "prior_bins", ")", "\n", "x_windows", "=", "x_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "\n", "# foward attention layer", "\n", "attn_windows", ",", "priors_after_attn", "=", "self", ".", "attn", "(", "x_windows", ",", "mask", "=", "attn_mask", ",", "prior_bins", "=", "prior_bins", ",", "_inp_shape", "=", "shifted_x", ".", "shape", ")", "\n", "\n", "# merge windows", "\n", "attn_windows", "=", "attn_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "shifted_x", "=", "window_reverse", "(", "attn_windows", ",", "self", ".", "window_size", ",", "Hp", ",", "Wp", ")", "# B H' W' C", "\n", "\n", "# reverse cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "roll", "(", "shifted_x", ",", "shifts", "=", "(", "self", ".", "shift_size", ",", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "shifted_x", "\n", "\n", "", "if", "pad_r", ">", "0", "or", "pad_b", ">", "0", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", "H", ",", ":", "W", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "# FFN : second module", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "if", "True", ":", "\n", "            ", "priors_after_attn", "=", "priors_after_attn", ".", "chunk", "(", "chunks", "=", "self", ".", "num_priorset", "*", "3", ",", "axis", "=", "1", ")", "\n", "prior_bins_outs", "=", "list", "(", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "num_priorset", ")", ":", "\n", "                ", "prior_bin_out", "=", "dict", "(", ")", "\n", "prior_bin_out", "[", "'unknown'", "]", "=", "priors_after_attn", "[", "idx", "*", "3", "+", "0", "]", "\n", "prior_bin_out", "[", "'fg'", "]", "=", "priors_after_attn", "[", "idx", "*", "3", "+", "1", "]", "\n", "prior_bin_out", "[", "'bg'", "]", "=", "priors_after_attn", "[", "idx", "*", "3", "+", "2", "]", "\n", "prior_bins_outs", ".", "append", "(", "prior_bin_out", ")", "\n", "\n", "# FFN : prior second module", "\n", "", "prior_memory_out", "=", "list", "(", ")", "\n", "for", "p", ",", "(", "prior_shortcut", ",", "prior_out", ")", "in", "enumerate", "(", "zip", "(", "prior_memory", ",", "prior_bins_outs", ")", ")", ":", "\n", "                ", "prior_out_uk", "=", "prior_shortcut", "[", "'unknown'", "]", "+", "self", ".", "drop_path", "(", "prior_out", "[", "'unknown'", "]", ".", "squeeze", "(", ")", ")", "\n", "prior_out_uk", "=", "prior_out_uk", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "prior_out_uk", ")", ")", ")", "\n", "\n", "prior_out_fg", "=", "prior_shortcut", "[", "'fg'", "]", "+", "self", ".", "drop_path", "(", "prior_out", "[", "'fg'", "]", ".", "squeeze", "(", ")", ")", "\n", "prior_out_fg", "=", "prior_out_fg", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "prior_out_fg", ")", ")", ")", "\n", "\n", "prior_out_bg", "=", "prior_shortcut", "[", "'bg'", "]", "+", "self", ".", "drop_path", "(", "prior_out", "[", "'bg'", "]", ".", "squeeze", "(", ")", ")", "\n", "prior_out_bg", "=", "prior_out_bg", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "prior_out_bg", ")", ")", ")", "\n", "\n", "prior_out", "=", "{", "'fg'", ":", "prior_out_fg", ",", "'bg'", ":", "prior_out_bg", ",", "'unknown'", ":", "prior_out_uk", "}", "\n", "prior_memory_out", ".", "append", "(", "prior_out", ")", "\n", "\n", "", "", "return", "x", ",", "prior_memory_out", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.BasicLayer.__init__": [[425, 461], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "downsample", "MatteFormer.PASTBlock", "range", "isinstance"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_idx", ",", "\n", "dim", ",", "depth", ",", "num_heads", ",", "window_size", "=", "7", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "downsample", "=", "None", ",", "\n", "use_checkpoint", "=", "False", ",", "use_prior", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_idx", "=", "layer_idx", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "window_size", "//", "2", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "# build blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "PASTBlock", "(", "\n", "layer_idx", "=", "layer_idx", ",", "\n", "block_idx", "=", "i", ",", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "window_size", "=", "window_size", ",", "\n", "shift_size", "=", "0", "if", "(", "i", "%", "2", "==", "0", ")", "else", "window_size", "//", "2", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", "[", "i", "]", "if", "isinstance", "(", "drop_path", ",", "list", ")", "else", "drop_path", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "use_prior", "=", "use_prior", ",", "\n", "num_priorset", "=", "i", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "# patch merging layer", "\n", "if", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", "=", "downsample", "(", "dim", "=", "dim", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.BasicLayer._make_shortcut": [[462, 466], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "def", "_make_shortcut", "(", "self", ",", "inplane", ",", "planes", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "inplane", ",", "planes", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.BasicLayer.forward": [[469, 513], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "MatteFormer.window_partition", "mask_windows.view.view.view", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill().masked_fill", "enumerate", "int", "int", "slice", "slice", "slice", "slice", "slice", "slice", "mask_windows.view.view.unsqueeze", "mask_windows.view.view.unsqueeze", "float", "MatteFormer.BasicLayer.downsample", "numpy.ceil", "numpy.ceil", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk", "float"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.window_partition"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ",", "area_fg", ",", "area_bg", ",", "area_uk", ")", ":", "\n", "\n", "# calculate attention mask for SW-MSA", "\n", "        ", "Hp", "=", "int", "(", "np", ".", "ceil", "(", "H", "/", "self", ".", "window_size", ")", ")", "*", "self", ".", "window_size", "\n", "Wp", "=", "int", "(", "np", ".", "ceil", "(", "W", "/", "self", ".", "window_size", ")", ")", "*", "self", ".", "window_size", "\n", "img_mask", "=", "torch", ".", "zeros", "(", "(", "1", ",", "Hp", ",", "Wp", ",", "1", ")", ",", "device", "=", "x", ".", "device", ")", "# 1 Hp Wp 1", "\n", "h_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "w_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "\n", "# img_mask -> index map (0~8) # [1, 259, 518, 1]", "\n", "cnt", "=", "0", "\n", "for", "h", "in", "h_slices", ":", "\n", "            ", "for", "w", "in", "w_slices", ":", "\n", "                ", "img_mask", "[", ":", ",", "h", ",", "w", ",", ":", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "# get attn_mask", "\n", "", "", "mask_windows", "=", "window_partition", "(", "img_mask", ",", "self", ".", "window_size", ")", "\n", "mask_windows", "=", "mask_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "\n", "attn_mask", "=", "mask_windows", ".", "unsqueeze", "(", "1", ")", "-", "mask_windows", ".", "unsqueeze", "(", "2", ")", "\n", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "attn_mask", "!=", "0", ",", "float", "(", "-", "100.0", ")", ")", ".", "masked_fill", "(", "attn_mask", "==", "0", ",", "float", "(", "0.0", ")", ")", "\n", "\n", "# forward blocks", "\n", "prior_memory", "=", "[", "]", "\n", "for", "b", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "blk", ".", "H", ",", "blk", ".", "W", "=", "H", ",", "W", "\n", "\n", "if", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ",", "attn_mask", ")", "\n", "", "else", ":", "\n", "                ", "x", ",", "prior_memory", "=", "blk", "(", "x", ",", "attn_mask", ",", "prior_memory", "=", "prior_memory", ",", "\n", "area_fg", "=", "area_fg", ",", "area_bg", "=", "area_bg", ",", "area_uk", "=", "area_uk", ")", "\n", "\n", "", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x_down", "=", "self", ".", "downsample", "(", "x", ",", "H", ",", "W", ")", "\n", "Wh", ",", "Ww", "=", "(", "H", "+", "1", ")", "//", "2", ",", "(", "W", "+", "1", ")", "//", "2", "\n", "return", "x", ",", "H", ",", "W", ",", "x_down", ",", "Wh", ",", "Ww", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "H", ",", "W", ",", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__": [[517, 576], ["torch.Module.__init__", "len", "MatteFormer.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "x.item", "MatteFormer.BasicLayer", "MatteFormer.MatteFormer.layers.append", "int", "norm_layer", "MatteFormer.MatteFormer.add_module", "MatteFormer.MatteFormer.shortcut.append", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "range", "MatteFormer.MatteFormer._make_shortcut", "sum", "int", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.__init__", "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer._make_shortcut"], ["    ", "def", "__init__", "(", "self", ",", "\n", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "96", ",", "depths", "=", "[", "2", ",", "2", ",", "6", ",", "2", "]", ",", "\n", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "window_size", "=", "7", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.2", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "patch_norm", "=", "True", ",", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "use_checkpoint", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_layers", "=", "len", "(", "depths", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "patch_norm", "=", "patch_norm", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "\n", "# split image into non-overlapping patches (with trimap)", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", "+", "3", ",", "embed_dim", "=", "embed_dim", ",", "\n", "norm_layer", "=", "norm_layer", "if", "self", ".", "patch_norm", "else", "None", ")", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "# stochastic depth", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "\n", "# build layers", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer", "=", "BasicLayer", "(", "\n", "layer_idx", "=", "i_layer", ",", "\n", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "\n", "depth", "=", "depths", "[", "i_layer", "]", ",", "\n", "num_heads", "=", "num_heads", "[", "i_layer", "]", ",", "\n", "window_size", "=", "window_size", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i_layer", "]", ")", ":", "sum", "(", "depths", "[", ":", "i_layer", "+", "1", "]", ")", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "downsample", "=", "PatchMerging", "if", "(", "i_layer", "<", "self", ".", "num_layers", "-", "1", ")", "else", "None", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_prior", "=", "True", ",", "\n", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "num_features", "=", "[", "int", "(", "embed_dim", "*", "2", "**", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", "]", "\n", "self", ".", "num_features", "=", "num_features", "\n", "\n", "# add a norm layer for each output [from Swin-Transformer-Semantic-Segmentation]", "\n", "for", "i_layer", "in", "out_indices", ":", "\n", "            ", "layer", "=", "norm_layer", "(", "num_features", "[", "i_layer", "]", ")", "\n", "layer_name", "=", "f'norm{i_layer}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "\n", "# add shortcut layer [from MG-Matting]", "\n", "", "self", ".", "shortcut", "=", "nn", ".", "ModuleList", "(", ")", "\n", "shortcut_inplanes", "=", "[", "[", "6", ",", "32", "]", ",", "[", "96", ",", "32", "]", ",", "[", "96", ",", "64", "]", ",", "[", "192", ",", "128", "]", ",", "[", "384", ",", "256", "]", ",", "[", "768", ",", "512", "]", "]", "\n", "for", "shortcut", "in", "shortcut_inplanes", ":", "\n", "            ", "inplane", ",", "planes", "=", "shortcut", "\n", "self", ".", "shortcut", ".", "append", "(", "self", ".", "_make_shortcut", "(", "inplane", "=", "inplane", ",", "planes", "=", "planes", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer._make_shortcut": [[577, 588], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.ops.SpectralNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "norm_layer", "networks.ops.SpectralNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "", "def", "_make_shortcut", "(", "self", ",", "inplane", ",", "planes", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "'''\n        came from MGMatting\n        '''", "\n", "return", "nn", ".", "Sequential", "(", "\n", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "inplane", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "norm_layer", "(", "planes", ")", ",", "\n", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "norm_layer", "(", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.forward": [[590, 628], ["outs.append", "MatteFormer.MatteFormer.patch_embed", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "outs.append", "MatteFormer.MatteFormer.flatten().transpose", "MatteFormer.MatteFormer.pos_drop", "range", "tuple", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "trimapmask_[].unsqueeze", "trimapmask_[].unsqueeze", "trimapmask_[].unsqueeze", "layer", "torch.upsample_bilinear", "torch.upsample_bilinear", "torch.upsample_bilinear", "torch.upsample_bilinear", "MatteFormer.MatteFormer.flatten", "getattr", "getattr.", "getattr.view().permute().contiguous", "outs.append", "pow", "getattr.view().permute", "getattr.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "trimapmask", ",", "sampleidx", "=", "None", ")", ":", "\n", "# set outputs", "\n", "        ", "outs", "=", "[", "]", "\n", "\n", "# get outs[0]", "\n", "outs", ".", "append", "(", "self", ".", "shortcut", "[", "0", "]", "(", "x", ")", ")", "\n", "\n", "# forward patch-embedding layer", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "_", ",", "_", ",", "Wh", ",", "Ww", "=", "x", ".", "shape", "\n", "trimapmask", "=", "F", ".", "interpolate", "(", "trimapmask", ",", "scale_factor", "=", "1", "/", "4", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "# get outs[1]", "\n", "outs", ".", "append", "(", "self", ".", "shortcut", "[", "1", "]", "(", "F", ".", "upsample_bilinear", "(", "x", ",", "scale_factor", "=", "2.0", ")", ")", ")", "\n", "\n", "# dropout", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "# get outs[2~5]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer", "=", "self", ".", "layers", "[", "i", "]", "\n", "\n", "trimapmask_", "=", "F", ".", "interpolate", "(", "trimapmask", ",", "scale_factor", "=", "1", "/", "(", "pow", "(", "2", ",", "i", ")", ")", ",", "mode", "=", "'nearest'", ")", "\n", "area_fg", "=", "trimapmask_", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", "# background area", "\n", "area_bg", "=", "trimapmask_", "[", ":", ",", "2", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", "# foreground area", "\n", "area_uk", "=", "trimapmask_", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", "# unknown area", "\n", "\n", "x_out", ",", "H", ",", "W", ",", "x", ",", "Wh", ",", "Ww", "=", "layer", "(", "x", ",", "Wh", ",", "Ww", ",", "area_fg", "=", "area_fg", ",", "area_bg", "=", "area_bg", ",", "area_uk", "=", "area_uk", ")", "\n", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "norm_layer", "=", "getattr", "(", "self", ",", "f'norm{i}'", ")", "\n", "x_out", "=", "norm_layer", "(", "x_out", ")", "\n", "out", "=", "x_out", ".", "view", "(", "-", "1", ",", "H", ",", "W", ",", "self", ".", "num_features", "[", "i", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "out", "=", "self", ".", "shortcut", "[", "i", "+", "2", "]", "(", "out", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.train": [[629, 631], ["super().train"], "methods", ["home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.MatteFormer.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "MatteFormer", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.window_partition": [[17, 47], ["x.view.view", "x.view.permute().contiguous().view", "list", "enumerate", "x.view.view", "x.view.permute().contiguous().view", "prior[].unsqueeze", "prior[].unsqueeze", "prior[].unsqueeze", "list.append", "x.view.permute().contiguous", "x.view.permute().contiguous", "x.view.permute", "x.view.permute"], "function", ["None"], ["def", "window_partition", "(", "x", ",", "window_size", ",", "priors", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "\n", "if", "priors", "is", "not", "None", ":", "\n", "        ", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", "*", "window_size", ",", "C", ")", "\n", "\n", "return_priors", "=", "list", "(", ")", "\n", "for", "p", ",", "prior", "in", "enumerate", "(", "priors", ")", ":", "\n", "            ", "prior", "[", "'unknown'", "]", "=", "prior", "[", "'unknown'", "]", ".", "unsqueeze", "(", "1", ")", "\n", "prior", "[", "'fg'", "]", "=", "prior", "[", "'fg'", "]", ".", "unsqueeze", "(", "1", ")", "\n", "prior", "[", "'bg'", "]", "=", "prior", "[", "'bg'", "]", ".", "unsqueeze", "(", "1", ")", "\n", "return_priors", ".", "append", "(", "prior", ")", "\n", "\n", "", "return", "windows", ",", "return_priors", "\n", "\n", "", "else", ":", "\n", "        ", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.webtoon_matteformer.encoders.MatteFormer.window_reverse": [[49, 64], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]]}