{"home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.beam_search.compute_topk_scores_and_seq": [[32, 85], ["mesh_tensorflow.ops_with_redefined_builtins.top_k", "mesh_tensorflow.ops_with_redefined_builtins.one_hot", "beam_search.compute_topk_scores_and_seq.gather"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather"], ["def", "compute_topk_scores_and_seq", "(", "sequences", ",", "scores", ",", "scores_to_gather", ",", "flags", ",", "\n", "beam_dim", ",", "prefix", "=", "\"default\"", ")", ":", "\n", "  ", "\"\"\"Given sequences and scores, will gather the top k=beam size sequences.\n\n  This function is used to grow alive, and finished. It takes sequences,\n  scores, and flags, and returns the top k from sequences, scores_to_gather,\n  and flags based on the values in scores.\n\n  This method permits easy introspection using tfdbg.  It adds two named ops\n  that are prefixed by `prefix`:\n    - _topk_seq: the tensor for topk_seq returned by this method.\n    - _topk_flags: the tensor for topk_finished_flags returned by this method.\n\n  Args:\n    sequences: Tensor of sequences that we need to gather from.\n      [batch_size, beam_size, seq_length]\n    scores: Tensor of scores for each sequence in sequences.\n      [batch_size, beam_size]. We will use these to compute the topk.\n    scores_to_gather: Tensor of scores for each sequence in sequences.\n      [batch_size, beam_size]. We will return the gathered scores from here.\n      Scores to gather is different from scores because for grow_alive, we will\n      need to return log_probs, while for grow_finished, we will need to return\n      the length penalized scores.\n    flags: Tensor of bools for sequences that say whether a sequence has reached\n      EOS or not\n    beam_dim: mtf.Dimension\n    prefix: an optional string\n  Returns:\n    Tuple of\n    (topk_seq [batch_size, beam_size, decode_length],\n     topk_gathered_scores [batch_size, beam_size],\n     topk_finished_flags[batch_size, beam_size],\n     selector)\n  \"\"\"", "\n", "unused_batch_dim", ",", "old_beam_dim", ",", "unused_length_dim", "=", "sequences", ".", "shape", ".", "dims", "\n", "_", ",", "topk_indices", "=", "mtf", ".", "top_k", "(", "scores", ",", "old_beam_dim", ",", "k_dim", "=", "beam_dim", ")", "\n", "\n", "selector", "=", "mtf", ".", "one_hot", "(", "topk_indices", ",", "old_beam_dim", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# Gather up the highest scoring sequences.", "\n", "# For each operation added, give it", "\n", "# a concrete name to simplify observing these operations with tfdbg.", "\n", "# Clients can capture these tensors by watching these node names.", "\n", "def", "gather", "(", "tensor", ",", "name", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "prefix", "+", "name", ")", ":", "\n", "      ", "output_shape", "=", "mtf", ".", "Shape", "(", "\n", "[", "beam_dim", "if", "d", "==", "old_beam_dim", "else", "d", "for", "d", "in", "tensor", ".", "shape", ".", "dims", "]", ")", "\n", "return", "mtf", ".", "gather", "(", "\n", "tensor", ",", "topk_indices", ",", "old_beam_dim", ",", "output_shape", "=", "output_shape", ")", "\n", "", "", "topk_seq", "=", "gather", "(", "sequences", ",", "\"_seq\"", ")", "\n", "topk_flags", "=", "gather", "(", "flags", ",", "\"_flags\"", ")", "\n", "topk_gathered_scores", "=", "gather", "(", "scores_to_gather", ",", "\"_scores\"", ")", "\n", "return", "topk_seq", ",", "topk_gathered_scores", ",", "topk_flags", ",", "selector", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.beam_search.beam_search": [[87, 574], ["mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.broadcast", "mesh_tensorflow.ops_with_redefined_builtins.constant", "mesh_tensorflow.ops_with_redefined_builtins.constant", "mesh_tensorflow.ops_with_redefined_builtins.constant", "mesh_tensorflow.ops_with_redefined_builtins.constant", "mesh_tensorflow.ops_with_redefined_builtins.where", "mesh_tensorflow.ops_with_redefined_builtins.where", "mesh_tensorflow.ops_with_redefined_builtins.one_hot", "mesh_tensorflow.ops_with_redefined_builtins.minimum", "_my_concat"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.broadcast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum"], ["", "@", "gin", ".", "configurable", "\n", "def", "beam_search", "(", "logits_fn", ",", "\n", "initial_ids", ",", "\n", "alpha", ",", "\n", "states", "=", "None", ",", "\n", "eos_id", "=", "EOS_ID", ",", "\n", "stop_early", "=", "True", ",", "\n", "decode_length", "=", "None", ",", "\n", "use_tpu", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "layout", "=", "None", ",", "\n", "mesh_shape", "=", "None", ",", "\n", "num_prefilter", "=", "2", ")", ":", "\n", "  ", "\"\"\"Beam search with length penalties.\n\n  Requires a function that can take the currently decoded symbols and return\n  the logits for the next symbol. The implementation is inspired by\n  https://arxiv.org/abs/1609.08144.\n\n  When running, the beam search steps can be visualized by using tfdbg to watch\n  the operations generating the output ids for each beam step.  These operations\n  have the pattern:\n    (alive|finished)_topk_(seq,scores)\n\n  Operations marked `alive` represent the new beam sequences that will be\n  processed in the next step.  Operations marked `finished` represent the\n  completed beam sequences, which may be padded with 0s if no beams finished.\n\n  Operations marked `seq` store the full beam sequence for the time step.\n  Operations marked `scores` store the sequence's final log scores.\n\n  The beam search steps will be processed sequentially in order, so when\n  capturing observed from these operations, tensors, clients can make\n  assumptions about which step is being recorded.\n\n  num_prefilter is a theoretically lossy shortcut around slow performance of\n  top_k on TPU on large Tensors and large k.  This option should be removed once\n  better top_k implementations on TPU are avialable.  If num_prefilter is set to\n  a nonzero value, then at each step we first compute the top num_prefilter\n  sequences per beam and then compute the top k sequences overall from among\n  those.  Empirically, there seems to be no quality difference in setting\n  num_prefilter to 2.\n\n  Args:\n    logits_fn: Interface to the model, to provide logits.\n        Should take:\n          step_num - mtf Scalar\n          ids - mtf Tensor with shape [batch, beam, length]\n        Should return:\n          logits - [batch, beam, vocab_size], dtype=dtype\n    initial_ids: a mtf.Tensor with shape [batch_dim, beam_dim, length_dim])\n    alpha: alpha for length penalty.\n    states: list of mtf.Tensor\n    eos_id: ID for end of sentence.\n    stop_early: a boolean - stop once best sequence is provably determined.\n    decode_length: a mtf Scalar of dtype tf.int32 - maximum length of decodes\n    use_tpu: a boolean\n    dtype: a tf.dtype\n    layout: an optional string\n    mesh_shape: an optional string\n    num_prefilter: an optional integer\n  Returns:\n    Tuple of\n    (decoded beams [batch, beam, length]\n     decoding probabilities [batch, beam_size])\n  \"\"\"", "\n", "batch_dim", ",", "beam_dim", ",", "length_dim", "=", "initial_ids", ".", "shape", ".", "dims", "\n", "batch_and_beam_dim", "=", "mtf", ".", "Dimension", "(", "\n", "batch_dim", ".", "name", ",", "batch_dim", ".", "size", "*", "beam_dim", ".", "size", ")", "\n", "mesh", "=", "initial_ids", ".", "mesh", "\n", "\n", "batch_by_beam", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "beam_dim", "]", ")", "\n", "initial_log_probs", "=", "mtf", ".", "broadcast", "(", "\n", "mtf", ".", "one_hot", "(", "\n", "mtf", ".", "constant", "(", "mesh", ",", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "beam_dim", ",", "\n", "on_value", "=", "0.0", ",", "\n", "off_value", "=", "-", "INF", ",", "\n", "dtype", "=", "dtype", ")", ",", "\n", "batch_by_beam", ")", "\n", "\n", "length_scalar", "=", "mtf", ".", "constant", "(", "mesh", ",", "length_dim", ".", "size", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "if", "decode_length", "is", "None", ":", "\n", "    ", "decode_length", "=", "length_scalar", "\n", "", "else", ":", "\n", "    ", "decode_length", "=", "mtf", ".", "minimum", "(", "decode_length", ",", "length_scalar", ")", "\n", "\n", "", "alive_log_probs", "=", "initial_log_probs", "\n", "alive_seq", "=", "initial_ids", "\n", "\n", "# Finished will keep track of all the sequences that have finished so far", "\n", "# Finished log probs will be negative infinity in the beginning", "\n", "# finished_flags will keep track of booleans", "\n", "finished_seq", "=", "initial_ids", "\n", "finished_scores", "=", "mtf", ".", "constant", "(", "mesh", ",", "-", "INF", ",", "batch_by_beam", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# Setting the scores of the initial to negative infinity.", "\n", "finished_flags", "=", "mtf", ".", "constant", "(", "mesh", ",", "False", ",", "batch_by_beam", ",", "tf", ".", "bool", ")", "\n", "\n", "def", "grow_finished", "(", "finished_seq", ",", "finished_scores", ",", "finished_flags", ",", "curr_seq", ",", "\n", "curr_scores", ",", "curr_finished", ")", ":", "\n", "    ", "\"\"\"Given sequences and scores, will gather the top k=beam size sequences.\n\n    Args:\n      finished_seq: Current finished sequences.\n        [batch, beam, length]\n      finished_scores: scores for each of these sequences.\n        [batch, beam]\n      finished_flags: finished bools for each of these sequences.\n        [batch, beam]\n      curr_seq: current topk sequence that has been grown by one position.\n        [batch, beam, length]\n      curr_scores: scores for each of these sequences. [batch, beam]\n      curr_finished: Finished flags for each of these sequences.\n        [batch, beam]\n    Returns:\n      Tuple of\n        (Topk sequences based on scores,\n         log probs of these sequences,\n         Finished flags of these sequences,\n         None (no states))\n    \"\"\"", "\n", "\n", "# Set the scores of the unfinished seq in curr_seq to large negative", "\n", "# values", "\n", "curr_scores", "+=", "(", "1.", "-", "mtf", ".", "cast", "(", "curr_finished", ",", "curr_scores", ".", "dtype", ")", ")", "*", "-", "INF", "\n", "unused_batch_dim", ",", "beam_dim", ",", "unused_length_dim", "=", "finished_seq", ".", "shape", ".", "dims", "\n", "# concatenating the sequences and scores along beam axis", "\n", "def", "_my_concat", "(", "a", ",", "b", ")", ":", "\n", "      ", "a", "=", "mtf", ".", "rename_dimension", "(", "a", ",", "\"beam\"", ",", "\"triple_beam\"", ")", "\n", "b", "=", "mtf", ".", "rename_dimension", "(", "b", ",", "\"double_beam\"", ",", "\"triple_beam\"", ")", "\n", "return", "mtf", ".", "concat", "(", "[", "a", ",", "b", "]", ",", "\"triple_beam\"", ")", "\n", "\n", "", "curr_finished_seq", "=", "_my_concat", "(", "finished_seq", ",", "curr_seq", ")", "\n", "curr_finished_scores", "=", "_my_concat", "(", "finished_scores", ",", "curr_scores", ")", "\n", "curr_finished_flags", "=", "_my_concat", "(", "finished_flags", ",", "curr_finished", ")", "\n", "return", "compute_topk_scores_and_seq", "(", "\n", "curr_finished_seq", ",", "curr_finished_scores", ",", "curr_finished_scores", ",", "\n", "curr_finished_flags", ",", "beam_dim", ",", "\"grow_finished\"", ")", "\n", "\n", "", "def", "grow_alive", "(", "curr_seq", ",", "curr_scores", ",", "curr_log_probs", ",", "curr_finished", ")", ":", "\n", "    ", "\"\"\"Given sequences and scores, will gather the top k=beam size sequences.\n\n    Args:\n      curr_seq: current topk sequence that has been grown by one position.\n        [batch, beam, length]\n      curr_scores: scores for each of these sequences. [batch_size, beam_size]\n      curr_log_probs: log probs for each of these sequences.\n        [batch, beam]\n      curr_finished: Finished flags for each of these sequences.\n        [batch, beam]\n    Returns:\n      Tuple of\n        (Topk sequences based on scores,\n         log probs of these sequences,\n         Finished flags of these sequences)\n    \"\"\"", "\n", "# Set the scores of the finished seq in curr_seq to large negative", "\n", "# values", "\n", "curr_scores", "+=", "mtf", ".", "cast", "(", "curr_finished", ",", "curr_scores", ".", "dtype", ")", "*", "-", "INF", "\n", "return", "compute_topk_scores_and_seq", "(", "curr_seq", ",", "curr_scores", ",", "curr_log_probs", ",", "\n", "curr_finished", ",", "beam_dim", ",", "\n", "\"grow_alive\"", ")", "\n", "\n", "", "def", "grow_topk", "(", "i", ",", "alive_seq", ",", "alive_log_probs", ",", "states", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Inner beam search loop.\n\n    This function takes the current alive sequences, and grows them to topk\n    sequences where k = 2*beam. We use 2*beam because, we could have beam_size\n    number of sequences that might hit <EOS> and there will be no alive\n    sequences to continue. With 2*beam_size, this will not happen. This relies\n    on the assumption the vocab size is > beam size. If this is true, we'll\n    have at least beam_size non <EOS> extensions if we extract the next top\n    2*beam words.\n    Length penalty is given by = (5+len(decode)/6) ^ -\\alpha. Pls refer to\n    https://arxiv.org/abs/1609.08144.\n\n    Args:\n      i: loop index\n      alive_seq: Topk sequences decoded so far [batch, beam, length]\n      alive_log_probs: probabilities of these sequences. [batch, beam]\n      states: optional list of mtf.Tensor\n    Returns:\n      Tuple of\n        (Topk sequences extended by the next word,\n         The log probs of these sequences,\n         The scores with length penalty of these sequences,\n         Flags indicating which of these sequences have finished decoding,\n         list of transformed decoding states)\n    \"\"\"", "\n", "logits", ",", "new_states", "=", "logits_fn", "(", "i", ",", "alive_seq", ",", "states", ")", "\n", "batch_dim", ",", "beam_dim", ",", "vocab_dim", "=", "logits", ".", "shape", ".", "dims", "\n", "\n", "# Convert logits to normalized log probs", "\n", "candidate_log_probs", "=", "mtf", ".", "log_softmax", "(", "logits", ",", "vocab_dim", ")", "\n", "\n", "# Multiply the probabilities by the current probabilities of the beam.", "\n", "# (batch_size, beam_size, vocab_size) + (batch_size, beam_size, 1)", "\n", "log_probs", "=", "candidate_log_probs", "+", "alive_log_probs", "\n", "\n", "length_penalty", "=", "mtf", ".", "pow", "(", "(", "(", "5.", "+", "mtf", ".", "cast", "(", "i", "+", "1", ",", "logits", ".", "dtype", ")", ")", "/", "6.", ")", ",", "alpha", ")", "\n", "\n", "# scores have shape [batch, beam, vocab]", "\n", "curr_scores", "=", "log_probs", "/", "length_penalty", "\n", "\n", "# We find the top 2k sequences to make sure we get k alive sequences.", "\n", "#", "\n", "# TODO(noam): This is inefficient.  We should separately compute the k", "\n", "# finished sequences (previously alive sequences + EOS), and the top k new", "\n", "# alive sequences.", "\n", "double_beam", "=", "mtf", ".", "Dimension", "(", "\"double_beam\"", ",", "beam_dim", ".", "size", "*", "2", ")", "\n", "\n", "if", "use_tpu", "and", "layout", "is", "not", "None", "and", "mesh_shape", "is", "not", "None", ":", "\n", "# Do some partial top-k-ing first locally to avoid communication.", "\n", "# We reshape the logits from:", "\n", "#   [batch, beam, vocab] to", "\n", "#   [batch, beam, major_vocab, minor_vocab]", "\n", "# We first reduce (locally) across the minor_vocab dimension.  This makes", "\n", "# the thing we need to broadcast smaller.", "\n", "# This also enables our shortcut of only picking the top num_prefilter", "\n", "#   sequences per beam per major_vocab in the first pass.", "\n", "      ", "major_vocab_size", "=", "mtf", ".", "tensor_dim_to_mesh_dim_size", "(", "\n", "layout", ",", "mesh_shape", ",", "vocab_dim", ")", "\n", "major_vocab", "=", "mtf", ".", "Dimension", "(", "vocab_dim", ".", "name", ",", "major_vocab_size", ")", "\n", "minor_vocab", "=", "mtf", ".", "Dimension", "(", "\n", "\"minor_vocab\"", ",", "vocab_dim", ".", "size", "//", "major_vocab_size", ")", "\n", "curr_scores", "=", "mtf", ".", "reshape", "(", "\n", "curr_scores", ",", "[", "batch_dim", ",", "beam_dim", ",", "major_vocab", ",", "minor_vocab", "]", ")", "\n", "prefilter", "=", "mtf", ".", "Dimension", "(", "\"prefilter\"", ",", "num_prefilter", "or", "double_beam", ".", "size", ")", "\n", "# shape = [batch_dim, beam_dim, major_vocab, prefilter]", "\n", "top_scores", ",", "top_minor_vocab_ids", "=", "mtf", ".", "top_k", "(", "\n", "curr_scores", ",", "reduced_dim", "=", "minor_vocab", ",", "k_dim", "=", "prefilter", ")", "\n", "combined", "=", "mtf", ".", "Dimension", "(", "\n", "\"combined\"", ",", "beam_dim", ".", "size", "*", "major_vocab", ".", "size", "*", "prefilter", ".", "size", ")", "\n", "top_scores", "=", "mtf", ".", "reshape", "(", "top_scores", ",", "[", "batch_dim", ",", "combined", "]", ")", "\n", "top_minor_vocab_ids", "=", "mtf", ".", "reshape", "(", "\n", "top_minor_vocab_ids", ",", "[", "batch_dim", ",", "combined", "]", ")", "\n", "# shpae = [batch_dim, double_beam]", "\n", "# ids are indices representing (beam, major_vocab, prefilter)", "\n", "top_scores", ",", "top_combined_ids", "=", "mtf", ".", "top_k", "(", "\n", "top_scores", ",", "reduced_dim", "=", "combined", ",", "k_dim", "=", "double_beam", ")", "\n", "top_minor_vocab_ids", "=", "mtf", ".", "gather", "(", "\n", "top_minor_vocab_ids", ",", "top_combined_ids", ",", "combined", ",", "\n", "output_shape", "=", "[", "batch_dim", ",", "double_beam", "]", ")", "\n", "top_beam_index", "=", "top_combined_ids", "//", "(", "major_vocab", ".", "size", "*", "prefilter", ".", "size", ")", "\n", "top_combined_ids", "-=", "top_beam_index", "*", "(", "major_vocab", ".", "size", "*", "prefilter", ".", "size", ")", "\n", "top_major_vocab_ids", "=", "top_combined_ids", "//", "prefilter", ".", "size", "\n", "top_combined_ids", "-=", "top_major_vocab_ids", "*", "prefilter", ".", "size", "\n", "top_ids", "=", "top_major_vocab_ids", "*", "minor_vocab", ".", "size", "+", "top_minor_vocab_ids", "\n", "", "else", ":", "\n", "      ", "beam_and_vocab_dim", "=", "mtf", ".", "Dimension", "(", "\n", "\"beam_and_vocab\"", ",", "beam_dim", ".", "size", "*", "vocab_dim", ".", "size", ")", "\n", "flat_shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "beam_and_vocab_dim", "]", ")", "\n", "# Flatten out (beam_size, vocab_size) probs into a list of possibilities", "\n", "flat_curr_scores", "=", "mtf", ".", "reshape", "(", "\n", "curr_scores", ",", "flat_shape", ",", "name", "=", "\"flatten_scores\"", ")", "\n", "top_scores", ",", "top_ids", "=", "mtf", ".", "top_k", "(", "\n", "flat_curr_scores", ",", "reduced_dim", "=", "beam_and_vocab_dim", ",", "k_dim", "=", "double_beam", ")", "\n", "# Work out what beam the top probs are in.", "\n", "top_beam_index", "=", "top_ids", "//", "vocab_dim", ".", "size", "\n", "top_ids", "%=", "vocab_dim", ".", "size", "# Unflatten the ids", "\n", "\n", "# Recovering the log probs because we will need to send them back", "\n", "", "top_log_probs", "=", "top_scores", "*", "length_penalty", "\n", "\n", "selector", "=", "mtf", ".", "one_hot", "(", "top_beam_index", ",", "beam_dim", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "def", "my_gather", "(", "tensor", ")", ":", "\n", "      ", "return", "mtf", ".", "gather", "(", "\n", "tensor", ",", "top_beam_index", ",", "beam_dim", ",", "\n", "output_shape", "=", "mtf", ".", "Shape", "(", "\n", "[", "double_beam", "if", "d", "==", "beam_dim", "else", "d", "for", "d", "in", "tensor", ".", "shape", ".", "dims", "]", ")", ")", "\n", "\n", "# Gather up the most probable 2*beams both for the ids and finished_in_alive", "\n", "# bools", "\n", "", "top_seq", "=", "my_gather", "(", "alive_seq", ")", "\n", "\n", "# Append the most probable alive", "\n", "top_seq", "+=", "top_ids", "*", "mtf", ".", "one_hot", "(", "i", ",", "length_dim", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "top_finished", "=", "mtf", ".", "equal", "(", "top_ids", ",", "eos_id", ")", "\n", "\n", "return", "(", "\n", "top_seq", ",", "top_log_probs", ",", "top_scores", ",", "top_finished", ",", "new_states", ",", "selector", ")", "\n", "\n", "", "def", "inner_loop", "(", "i", ",", "alive_seq", ",", "alive_log_probs", ",", "finished_seq", ",", "finished_scores", ",", "\n", "finished_flags", ",", "*", "states", ")", ":", "\n", "    ", "\"\"\"Inner beam search loop.\n\n    There are three groups of tensors, alive, finished, and topk.\n    The alive group contains information about the current alive sequences\n    The topk group contains information about alive + topk current decoded words\n    the finished group contains information about finished sentences, that is,\n    the ones that have decoded to <EOS>. These are what we return.\n    The general beam search algorithm is as follows:\n    While we haven't terminated (pls look at termination condition)\n      1. Grow the current alive to get beam*2 topk sequences\n      2. Among the topk, keep the top beam_size ones that haven't reached EOS\n      into alive\n      3. Among the topk, keep the top beam_size ones have reached EOS into\n      finished\n    Repeat\n    To make things simple with using fixed size tensors, we will end\n    up inserting unfinished sequences into finished in the beginning. To stop\n    that we add -ve INF to the score of the unfinished sequence so that when a\n    true finished sequence does appear, it will have a higher score than all the\n    unfinished ones.\n\n    Args:\n      i: loop index\n      alive_seq: Topk sequences decoded so far [batch_size, beam_size, i+1]\n      alive_log_probs: probabilities of the beams. [batch_size, beam_size]\n      finished_seq: Current finished sequences.\n        [batch_size, beam_size, i+1]\n      finished_scores: scores for each of these sequences.\n        [batch_size, beam_size]\n      finished_flags: finished bools for each of these sequences.\n        [batch_size, beam_size]\n      *states: mtf Tensors\n\n    Returns:\n      Tuple of\n        (Incremented loop index\n         New alive sequences,\n         Log probs of the alive sequences,\n         New finished sequences,\n         Scores of the new finished sequences,\n         Flags indicating which sequence in finished as reached EOS,\n         dict of final decoding states)\n    \"\"\"", "\n", "states", "=", "[", "mtf", ".", "replace_dimensions", "(", "\n", "state", ",", "batch_and_beam_dim", ",", "[", "batch_dim", ",", "beam_dim", "]", ")", "for", "state", "in", "states", "]", "\n", "# Each inner loop, we carry out three steps:", "\n", "# 1. Get the current topk items.", "\n", "# 2. Extract the ones that have finished and haven't finished", "\n", "# 3. Recompute the contents of finished based on scores.", "\n", "(", "top2k_seq", ",", "top2k_log_probs", ",", "top2k_scores", ",", "top2k_finished", ",", "\n", "new_states", ",", "first_selector", ")", "=", "grow_topk", "(", "\n", "i", ",", "alive_seq", ",", "alive_log_probs", ",", "states", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"grow_alive\"", ")", ":", "\n", "      ", "alive_seq", ",", "alive_log_probs", ",", "_", ",", "second_selector", "=", "grow_alive", "(", "\n", "top2k_seq", ",", "top2k_scores", ",", "top2k_log_probs", ",", "top2k_finished", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"grow_finished\"", ")", ":", "\n", "      ", "finished_seq", ",", "finished_scores", ",", "finished_flags", ",", "_", "=", "grow_finished", "(", "\n", "finished_seq", ",", "finished_scores", ",", "finished_flags", ",", "top2k_seq", ",", "\n", "top2k_scores", ",", "top2k_finished", ")", "\n", "", "old_beam_dim", "=", "mtf", ".", "Dimension", "(", "\"old_beam\"", ",", "beam_dim", ".", "size", ")", "\n", "selector", "=", "mtf", ".", "einsum", "(", "\n", "[", "mtf", ".", "rename_dimension", "(", "first_selector", ",", "beam_dim", ".", "name", ",", "old_beam_dim", ".", "name", ")", ",", "\n", "second_selector", "]", ",", "\n", "output_shape", "=", "[", "batch_dim", ",", "old_beam_dim", ",", "beam_dim", "]", ")", "\n", "gathered_states", "=", "[", "]", "\n", "if", "use_tpu", "and", "layout", "is", "not", "None", "and", "mesh_shape", "is", "not", "None", ":", "\n", "# This hack combines the beam dimension with some of the batch dimension.", "\n", "# It makes gathering faster on TPU.", "\n", "#", "\n", "# Instead of multiplying by a [beam, beam] selector matrix, we instead", "\n", "# multiply by a [minor_batch*beam, minor_batch*beam] selector matrix.", "\n", "# This is theoretically more FLOPs, but it brings the matrix size closer", "\n", "# to the magic optimal value of 128.", "\n", "#", "\n", "# TODO(noam): file a bug with the XLA team to do this automatically", "\n", "      ", "major_batch_size", "=", "mtf", ".", "tensor_dim_to_mesh_dim_size", "(", "\n", "layout", ",", "mesh_shape", ",", "batch_dim", ")", "\n", "major_batch", "=", "mtf", ".", "Dimension", "(", "batch_dim", ".", "name", ",", "major_batch_size", ")", "\n", "minor_batch", "=", "mtf", ".", "Dimension", "(", "\n", "\"minor_batch\"", ",", "batch_dim", ".", "size", "//", "major_batch", ".", "size", ")", "\n", "old_minor_batch", "=", "mtf", ".", "Dimension", "(", "\"old_minor_batch\"", ",", "minor_batch", ".", "size", ")", "\n", "old_combined", "=", "mtf", ".", "Dimension", "(", "\n", "\"old_combined\"", ",", "minor_batch", ".", "size", "*", "beam_dim", ".", "size", ")", "\n", "combined", "=", "mtf", ".", "Dimension", "(", "\n", "\"new_combined\"", ",", "old_combined", ".", "size", ")", "\n", "same_minor_batch", "=", "mtf", ".", "to_float", "(", "\n", "mtf", ".", "equal", "(", "mtf", ".", "range", "(", "mesh", ",", "old_minor_batch", ",", "tf", ".", "float32", ")", ",", "\n", "mtf", ".", "range", "(", "mesh", ",", "minor_batch", ",", "tf", ".", "float32", ")", ")", ")", "\n", "selector", "=", "mtf", ".", "reshape", "(", "\n", "selector", ",", "[", "major_batch", ",", "minor_batch", ",", "old_beam_dim", ",", "beam_dim", "]", ")", "\n", "selector", "=", "mtf", ".", "einsum", "(", "\n", "[", "selector", ",", "same_minor_batch", "]", ",", "\n", "output_shape", "=", "[", "major_batch", ",", "\n", "old_minor_batch", ",", "old_beam_dim", ",", "\n", "minor_batch", ",", "beam_dim", "]", ",", "\n", "reduced_dims", "=", "[", "]", ")", "\n", "selector", "=", "mtf", ".", "reshape", "(", "selector", ",", "[", "major_batch", ",", "old_combined", ",", "combined", "]", ")", "\n", "for", "state", "in", "new_states", ":", "\n", "        ", "s", "=", "mtf", ".", "replace_dimensions", "(", "\n", "state", ",", "[", "batch_dim", ",", "beam_dim", "]", ",", "[", "major_batch", ",", "old_combined", "]", ")", "\n", "s", "=", "mtf", ".", "einsum", "(", "\n", "[", "s", ",", "mtf", ".", "cast", "(", "selector", ",", "state", ".", "dtype", ")", "]", ",", "\n", "reduced_dims", "=", "[", "old_combined", "]", ",", "\n", "output_shape", "=", "mtf", ".", "replace_dimensions", "(", "\n", "state", ".", "shape", ",", "[", "batch_dim", ",", "beam_dim", "]", ",", "\n", "[", "major_batch", ",", "combined", "]", ")", ")", "\n", "gathered_states", ".", "append", "(", "mtf", ".", "replace_dimensions", "(", "\n", "s", ",", "[", "major_batch", ",", "combined", "]", ",", "batch_and_beam_dim", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "for", "state", "in", "new_states", ":", "\n", "        ", "state", "=", "mtf", ".", "einsum", "(", "\n", "[", "mtf", ".", "rename_dimension", "(", "state", ",", "beam_dim", ".", "name", ",", "old_beam_dim", ".", "name", ")", ",", "\n", "mtf", ".", "cast", "(", "selector", ",", "state", ".", "dtype", ")", "]", ",", "\n", "reduced_dims", "=", "[", "old_beam_dim", "]", ",", "output_shape", "=", "state", ".", "shape", ")", "\n", "state", "=", "mtf", ".", "replace_dimensions", "(", "\n", "state", ",", "[", "batch_dim", ",", "beam_dim", "]", ",", "batch_and_beam_dim", ")", "\n", "gathered_states", ".", "append", "(", "state", ")", "\n", "\n", "", "", "return", "(", "i", "+", "1", ",", "alive_seq", ",", "alive_log_probs", ",", "finished_seq", ",", "finished_scores", ",", "\n", "finished_flags", ")", "+", "tuple", "(", "gathered_states", ")", "\n", "\n", "", "def", "_is_finished", "(", "i", ",", "unused_alive_seq", ",", "alive_log_probs", ",", "unused_finished_seq", ",", "\n", "finished_scores", ",", "finished_in_finished", ",", "*", "unused_states", ")", ":", "\n", "    ", "\"\"\"Checking termination condition.\n\n    We terminate when we decoded up to decode_length or the lowest scoring item\n    in finished has a greater score that the highest prob item in alive divided\n    by the max length penalty\n\n    Args:\n      i: loop index\n      alive_log_probs: probabilities of the beams. [batch_size, beam_size]\n      finished_scores: scores for each of these sequences.\n        [batch_size, beam_size]\n      finished_in_finished: finished bools for each of these sequences.\n        [batch_size, beam_size]\n\n    Returns:\n      Bool.\n    \"\"\"", "\n", "# TODO(noam): support a different decode length...", "\n", "# decode_length = mtf.constant(mesh, length_dim.size, dtype=tf.int32)", "\n", "\n", "# del alive_log_probs, finished_scores, finished_in_finished", "\n", "# return mtf.less(i, length_dim.size)", "\n", "if", "not", "stop_early", ":", "\n", "      ", "return", "mtf", ".", "less", "(", "i", ",", "decode_length", ")", "\n", "", "max_length_penalty", "=", "mtf", ".", "pow", "(", "\n", "(", "(", "5.", "+", "mtf", ".", "cast", "(", "decode_length", ",", "finished_scores", ".", "dtype", ")", ")", "/", "6.", ")", ",", "alpha", ")", "\n", "# The best possible score of the most likely alive sequence.", "\n", "lower_bound_alive_scores", "=", "mtf", ".", "gather", "(", "\n", "alive_log_probs", ",", "mtf", ".", "constant", "(", "mesh", ",", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "beam_dim", ")", "/", "max_length_penalty", "\n", "\n", "# Now to compute the lowest score of a finished sequence in finished", "\n", "# If the sequence isn't finished, we multiply it's score by 0. since", "\n", "# scores are all -ve, taking the min will give us the score of the lowest", "\n", "# finished item.", "\n", "lowest_score_of_finished_in_finished", "=", "mtf", ".", "reduce_min", "(", "\n", "finished_scores", "*", "mtf", ".", "cast", "(", "finished_in_finished", ",", "finished_scores", ".", "dtype", ")", ",", "\n", "reduced_dim", "=", "beam_dim", ")", "\n", "\n", "# If none of the sequences have finished, then the min will be 0 and", "\n", "# we have to replace it by -ve INF if it is. The score of any seq in alive", "\n", "# will be much higher than -ve INF and the termination condition will not", "\n", "# be met.", "\n", "lowest_score_of_finished_in_finished", "+=", "(", "\n", "(", "1.", "-", "mtf", ".", "cast", "(", "mtf", ".", "reduce_any", "(", "\n", "finished_in_finished", ",", "reduced_dim", "=", "beam_dim", ")", ",", "\n", "finished_scores", ".", "dtype", ")", ")", "*", "-", "INF", ")", "\n", "\n", "bound_is_met", "=", "mtf", ".", "reduce_all", "(", "\n", "mtf", ".", "greater", "(", "lowest_score_of_finished_in_finished", ",", "\n", "lower_bound_alive_scores", ")", ")", "\n", "return", "mtf", ".", "logical_and", "(", "\n", "mtf", ".", "less", "(", "i", ",", "decode_length", ")", ",", "mtf", ".", "logical_not", "(", "bound_is_met", ")", ")", "\n", "\n", "", "initial_step_num", "=", "mtf", ".", "constant", "(", "mesh", ",", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "states", "=", "[", "mtf", ".", "replace_dimensions", "(", "\n", "state", ",", "[", "batch_dim", ",", "beam_dim", "]", ",", "batch_and_beam_dim", ")", "for", "state", "in", "states", "]", "\n", "while_loop_inputs", "=", "[", "\n", "initial_step_num", ",", "alive_seq", ",", "alive_log_probs", ",", "finished_seq", ",", "\n", "finished_scores", ",", "finished_flags", "]", "+", "states", "\n", "\n", "(", "_", ",", "alive_seq", ",", "alive_log_probs", ",", "finished_seq", ",", "finished_scores", ",", "\n", "finished_flags", ")", "=", "mtf", ".", "while_loop", "(", "\n", "_is_finished", ",", "inner_loop", ",", "while_loop_inputs", ",", "\n", "num_loop_vars", "=", "None", "if", "use_tpu", "else", "6", ")", "[", ":", "6", "]", "\n", "\n", "# Accounting for corner case: It's possible that no sequence in alive for a", "\n", "# particular batch item ever reached EOS. In that case, we should just copy", "\n", "# the contents of alive for that batch item. tf.reduce_any(finished_flags, 1)", "\n", "# if 0, means that no sequence for that batch index had reached EOS. We need", "\n", "# to do the same for the scores as well.", "\n", "finished_seq", "=", "mtf", ".", "where", "(", "\n", "mtf", ".", "reduce_any", "(", "finished_flags", ",", "reduced_dim", "=", "beam_dim", ")", ",", "\n", "finished_seq", ",", "alive_seq", ")", "\n", "finished_scores", "=", "mtf", ".", "where", "(", "\n", "mtf", ".", "reduce_any", "(", "finished_flags", ",", "reduced_dim", "=", "beam_dim", ")", ",", "\n", "finished_scores", ",", "alive_log_probs", ")", "\n", "return", "finished_seq", ",", "finished_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.beam_search.greedy_decode": [[576, 643], ["mesh_tensorflow.ops_with_redefined_builtins.constant", "mesh_tensorflow.ops_with_redefined_builtins.constant", "mesh_tensorflow.ops_with_redefined_builtins.Print", "mesh_tensorflow.ops_with_redefined_builtins.equal", "mesh_tensorflow.ops_with_redefined_builtins.reduce_any", "mesh_tensorflow.ops_with_redefined_builtins.reduce_all", "mesh_tensorflow.ops_with_redefined_builtins.logical_not", "logits_fn", "mesh_tensorflow.ops_with_redefined_builtins.sample_with_temperature", "mesh_tensorflow.ops_with_redefined_builtins.while_loop", "mesh_tensorflow.ops_with_redefined_builtins.equal", "mesh_tensorflow.ops_with_redefined_builtins.logical_or", "mesh_tensorflow.ops_with_redefined_builtins.gather", "mesh_tensorflow.ops_with_redefined_builtins.one_hot", "mesh_tensorflow.ops_with_redefined_builtins.to_int32", "mesh_tensorflow.ops_with_redefined_builtins.equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.Print", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_any", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_all", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_not", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sample_with_temperature", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.while_loop", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_or", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal"], ["", "@", "gin", ".", "configurable", "\n", "def", "greedy_decode", "(", "logits_fn", ",", "\n", "initial_ids", ",", "\n", "temperature", "=", "0.0", ",", "\n", "initial_states", "=", "None", ",", "\n", "eos_id", "=", "EOS_ID", ",", "\n", "forced_ids", "=", "None", ",", "\n", "use_tpu", "=", "True", ")", ":", "\n", "  ", "\"\"\"Greedy decoding.\n\n  Args:\n    logits_fn: Interface to the model, to provide logits.\n        Shoud take:\n          step_num - mtf Scalar\n          ids - mtf Tensor with shape [..., length]\n          states - list of mtf.Tensor\n        Should return:\n          logits - [batch, vocab_size]\n          new_states - list of mtf.Tensor\n    initial_ids: mtf.Tensor with shape [..., length], containing zeros.\n    temperature: a float between 0.0 (argmax) and 1.0 (random)\n    initial_states: list of mtf.Tensor\n    eos_id: ID for end of sentence.\n    forced_ids: optional mtf.Tensor with shape [..., length]\n    use_tpu: a boolean\n  Returns:\n    Tensor with shape [..., length]\n  \"\"\"", "\n", "length_dim", "=", "initial_ids", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "mesh", "=", "initial_ids", ".", "mesh", "\n", "num_steps", "=", "mtf", ".", "constant", "(", "mesh", ",", "length_dim", ".", "size", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "def", "cond_fn", "(", "step_num", ",", "prev_ids", ",", "*", "unused_states", ")", ":", "\n", "    ", "\"\"\"Should we run another loop iteration.\"\"\"", "\n", "overflow", "=", "mtf", ".", "equal", "(", "step_num", ",", "num_steps", ")", "\n", "has_eos", "=", "mtf", ".", "reduce_any", "(", "\n", "mtf", ".", "equal", "(", "prev_ids", ",", "eos_id", ")", ",", "reduced_dim", "=", "length_dim", ")", "\n", "all_has_eos", "=", "mtf", ".", "reduce_all", "(", "has_eos", ")", "\n", "return", "mtf", ".", "logical_not", "(", "mtf", ".", "logical_or", "(", "overflow", ",", "all_has_eos", ")", ")", "\n", "", "def", "body_fn", "(", "step_num", ",", "ids", ",", "*", "states", ")", ":", "\n", "    ", "\"\"\"Body function for greedy decoding.\n\n    Args:\n      step_num: a mtf.Tensor\n      ids: a mtf.Tensor\n      *states: additional mtf.Tensors\n    Returns:\n      new_step_num, new_ids, *new_states\n    \"\"\"", "\n", "logits", ",", "new_states", "=", "logits_fn", "(", "step_num", ",", "ids", ",", "states", ")", "\n", "vocab_dim", "=", "logits", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "new_ids", "=", "mtf", ".", "sample_with_temperature", "(", "\n", "logits", ",", "vocab_dim", ",", "temperature", ")", "\n", "if", "forced_ids", "is", "not", "None", ":", "\n", "# force the new ids to equal the partial targets where specified", "\n", "# (positions where partial_targets contain nonzero values)", "\n", "      ", "forced", "=", "mtf", ".", "gather", "(", "forced_ids", ",", "step_num", ",", "length_dim", ")", "\n", "new_ids", "=", "forced", "+", "new_ids", "*", "mtf", ".", "to_int32", "(", "mtf", ".", "equal", "(", "forced", ",", "0", ")", ")", "\n", "", "ids", "+=", "new_ids", "*", "mtf", ".", "one_hot", "(", "step_num", ",", "length_dim", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "new_step_num", "=", "step_num", "+", "1", "\n", "return", "[", "new_step_num", ",", "ids", "]", "+", "new_states", "\n", "", "initial_step_num", "=", "mtf", ".", "constant", "(", "mesh", ",", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "while_loop_inputs", "=", "[", "initial_step_num", ",", "initial_ids", "]", "+", "initial_states", "\n", "final_step_num", ",", "mtf_samples", "=", "mtf", ".", "while_loop", "(", "\n", "cond_fn", ",", "body_fn", ",", "while_loop_inputs", ",", "\n", "num_loop_vars", "=", "None", "if", "use_tpu", "else", "2", ")", "[", ":", "2", "]", "\n", "mtf_samples", "=", "mtf", ".", "Print", "(", "mtf_samples", ",", "[", "final_step_num", "]", ",", "\"output_length\"", ")", "\n", "return", "mtf_samples", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.LaidOutTensor.__init__": [[34, 36], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tensor_list", ")", ":", "\n", "    ", "self", ".", "tensor_list", "=", "tensor_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testConvertToDimension": [[40, 48], ["absl.testing.parameterized.parameters", "mesh_tensorflow.convert_to_dimension", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "mesh_tensorflow.Dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension"], ["  ", "@", "parameterized", ".", "parameters", "(", "\n", "(", "mtf", ".", "Dimension", "(", "\"x\"", ",", "5", ")", ",", ")", ",", "\n", "(", "(", "\"x\"", ",", "5", ")", ",", ")", ",", "\n", ")", "\n", "def", "testConvertToDimension", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "dimension", "=", "mtf", ".", "convert_to_dimension", "(", "inputs", ")", "\n", "self", ".", "assertEqual", "(", "dimension", ".", "name", ",", "\"x\"", ")", "\n", "self", ".", "assertEqual", "(", "dimension", ".", "size", ",", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testConvertToDimensionGenericInputs": [[49, 54], ["mesh_tensorflow.convert_to_dimension", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertRaises", "mesh_tensorflow.convert_to_dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension"], ["", "def", "testConvertToDimensionGenericInputs", "(", "self", ")", ":", "\n", "    ", "dimension", "=", "mtf", ".", "convert_to_dimension", "(", "None", ")", "\n", "self", ".", "assertEqual", "(", "dimension", ",", "None", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "      ", "mtf", ".", "convert_to_dimension", "(", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testConvertToShape": [[55, 67], ["absl.testing.parameterized.parameters", "mesh_tensorflow.convert_to_shape", "ops_test.MeshTensorFlowTest.assertEqual", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "", "@", "parameterized", ".", "parameters", "(", "\n", "(", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"x\"", ",", "4", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"y\"", ",", "8", ")", "]", ")", ",", ")", ",", "\n", "(", "\"x:4;y:8\"", ",", ")", ",", "\n", "(", "\"x:4.y:8\"", ",", ")", ",", "\n", "(", "\"x:4 y:8\"", ",", ")", ",", "\n", "(", "\"x:4,y:8\"", ",", ")", ",", "\n", ")", "\n", "def", "testConvertToShape", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "shape", "=", "mtf", ".", "convert_to_shape", "(", "inputs", ")", "\n", "self", ".", "assertEqual", "(", "shape", ",", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"x\"", ",", "4", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"y\"", ",", "8", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testConvertToShapeGenericInputs": [[68, 75], ["mesh_tensorflow.convert_to_shape", "ops_test.MeshTensorFlowTest.assertEqual", "mesh_tensorflow.convert_to_shape", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertRaises", "mesh_tensorflow.convert_to_shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "def", "testConvertToShapeGenericInputs", "(", "self", ")", ":", "\n", "    ", "shape", "=", "mtf", ".", "convert_to_shape", "(", "[", "]", ")", "\n", "self", ".", "assertEqual", "(", "shape", ".", "dims", ",", "[", "]", ")", "\n", "shape", "=", "mtf", ".", "convert_to_shape", "(", "None", ")", "\n", "self", ".", "assertEqual", "(", "shape", ",", "None", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "mtf", ".", "convert_to_shape", "(", "\"x;4\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testConvertToLayoutRules": [[76, 89], ["absl.testing.parameterized.parameters", "mesh_tensorflow.convert_to_layout_rules", "ops_test.MeshTensorFlowTest.assertEqual", "mesh_tensorflow.LayoutRules", "mesh_tensorflow.LayoutRules"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules"], ["", "", "@", "parameterized", ".", "parameters", "(", "\n", "(", "mtf", ".", "LayoutRules", "(", "[", "(", "\"d_ff\"", ",", "\"model\"", ")", ",", "(", "\"heads\"", ",", "\"model\"", ")", "]", ")", ",", ")", ",", "\n", "(", "\"d_ff:model;heads:model\"", ",", ")", ",", "\n", "(", "\"d_ff:model.heads:model\"", ",", ")", ",", "\n", "(", "\"d_ff:model heads:model\"", ",", ")", ",", "\n", "(", "\"d_ff:model,heads:model\"", ",", ")", ",", "\n", "(", "[", "(", "\"d_ff\"", ",", "\"model\"", ")", ",", "(", "\"heads\"", ",", "\"model\"", ")", "]", ",", ")", ",", "\n", ")", "\n", "def", "testConvertToLayoutRules", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "layout_rules", "=", "mtf", ".", "convert_to_layout_rules", "(", "inputs", ")", "\n", "self", ".", "assertEqual", "(", "\n", "layout_rules", ".", "_pairs", ",", "\n", "mtf", ".", "LayoutRules", "(", "[", "(", "\"d_ff\"", ",", "\"model\"", ")", ",", "(", "\"heads\"", ",", "\"model\"", ")", "]", ")", ".", "_pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testConvertToLayoutRulesGenericInputs": [[90, 93], ["ops_test.MeshTensorFlowTest.assertRaises", "mesh_tensorflow.convert_to_layout_rules"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules"], ["", "def", "testConvertToLayoutRulesGenericInputs", "(", "self", ")", ":", "\n", "    ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "mtf", ".", "convert_to_layout_rules", "(", "\"d_ff;heads\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testTensorLayout": [[94, 103], ["mesh_tensorflow.TensorLayout", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "mesh_tensorflow.TensorLayout", "ops_test.MeshTensorFlowTest.assertFalse", "mesh_tensorflow.TensorLayout", "ops_test.MeshTensorFlowTest.assertTrue", "mesh_tensorflow.TensorLayout.mesh_axis_to_tensor_axis", "mesh_tensorflow.TensorLayout.mesh_axis_to_tensor_axis", "mesh_tensorflow.TensorLayout.mesh_axis_to_tensor_axis"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.mesh_axis_to_tensor_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.mesh_axis_to_tensor_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.mesh_axis_to_tensor_axis"], ["", "", "def", "testTensorLayout", "(", "self", ")", ":", "\n", "    ", "tensor_layout", "=", "mtf", ".", "TensorLayout", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "tensor_layout", ".", "mesh_axis_to_tensor_axis", "(", "0", ")", ",", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "tensor_layout", ".", "mesh_axis_to_tensor_axis", "(", "1", ")", ",", "(", "0", ",", ")", ")", "\n", "self", ".", "assertEqual", "(", "tensor_layout", ".", "mesh_axis_to_tensor_axis", "(", "2", ")", ",", "(", "0", ",", "2", ")", ")", "\n", "tensor_layout", "=", "mtf", ".", "TensorLayout", "(", "[", "None", ",", "0", "]", ")", "\n", "self", ".", "assertFalse", "(", "tensor_layout", ".", "is_fully_replicated", ")", "\n", "tensor_layout", "=", "mtf", ".", "TensorLayout", "(", "[", "None", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "assertTrue", "(", "tensor_layout", ".", "is_fully_replicated", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testGraph": [[104, 124], ["mesh_tensorflow.Graph", "ops_test.MeshTensorFlowTest.assertEmpty", "ops_test.MeshTensorFlowTest.assertEmpty", "ops_test.MeshTensorFlowTest.assertEmpty", "mesh_tensorflow.Mesh", "mesh_tensorflow.import_tf_tensor", "ops_test.MeshTensorFlowTest.assertLen", "ops_test.MeshTensorFlowTest.assertEmpty", "ops_test.MeshTensorFlowTest.assertEmpty", "mesh_tensorflow.get_variable", "ops_test.MeshTensorFlowTest.assertLen", "ops_test.MeshTensorFlowTest.assertLen", "ops_test.MeshTensorFlowTest.assertLen", "mesh_tensorflow.get_variable", "ops_test.MeshTensorFlowTest.assertLen", "ops_test.MeshTensorFlowTest.assertLen", "ops_test.MeshTensorFlowTest.assertLen", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "tensorflow.constant", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["", "def", "testGraph", "(", "self", ")", ":", "\n", "    ", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "assertEmpty", "(", "graph", ".", "operations", ")", "\n", "self", ".", "assertEmpty", "(", "graph", ".", "trainable_variables", ")", "\n", "self", ".", "assertEmpty", "(", "graph", ".", "all_variables", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"mesh_test\"", ")", "\n", "_", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "\n", "tf_tensor", "=", "tf", ".", "constant", "(", "0.", ")", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "]", ")", ")", "\n", "self", ".", "assertLen", "(", "graph", ".", "operations", ",", "1", ")", "\n", "self", ".", "assertEmpty", "(", "graph", ".", "trainable_variables", ")", "\n", "self", ".", "assertEmpty", "(", "graph", ".", "all_variables", ")", "\n", "_", "=", "mtf", ".", "get_variable", "(", "mesh", ",", "\"variable_0\"", ",", "mtf", ".", "Shape", "(", "[", "]", ")", ",", "trainable", "=", "True", ")", "\n", "self", ".", "assertLen", "(", "graph", ".", "operations", ",", "2", ")", "\n", "self", ".", "assertLen", "(", "graph", ".", "trainable_variables", ",", "1", ")", "\n", "self", ".", "assertLen", "(", "graph", ".", "all_variables", ",", "1", ")", "\n", "_", "=", "mtf", ".", "get_variable", "(", "mesh", ",", "\"variable_1\"", ",", "mtf", ".", "Shape", "(", "[", "]", ")", ",", "trainable", "=", "False", ")", "\n", "self", ".", "assertLen", "(", "graph", ".", "operations", ",", "3", ")", "\n", "self", ".", "assertLen", "(", "graph", ".", "trainable_variables", ",", "1", ")", "\n", "self", ".", "assertLen", "(", "graph", ".", "all_variables", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testGraphNames": [[125, 147], ["mesh_tensorflow.Graph", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "mesh_tensorflow.Graph", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "mesh_tensorflow.Graph", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "mesh_tensorflow.Graph", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "mesh_tensorflow.Graph.unique_name", "mesh_tensorflow.Graph.unique_name", "mesh_tensorflow.Graph.unique_name", "mesh_tensorflow.Graph.unique_name", "mesh_tensorflow.Graph.unique_name", "mesh_tensorflow.Graph.unique_name", "mesh_tensorflow.Graph.unique_name", "mesh_tensorflow.Graph.unique_name", "mesh_tensorflow.Graph.unique_name", "mesh_tensorflow.Graph.unique_name", "mesh_tensorflow.Graph.unique_name"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name"], ["", "def", "testGraphNames", "(", "self", ")", ":", "\n", "# Standard Usage.", "\n", "    ", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "unique_name", "(", "\"a\"", ")", ",", "\"a\"", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "unique_name", "(", "\"a\"", ")", ",", "\"a_1\"", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "unique_name", "(", "\"a\"", ")", ",", "\"a_2\"", ")", "\n", "\n", "# Edge cases, the user may choose the name \"a_1\".", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "unique_name", "(", "\"a\"", ")", ",", "\"a\"", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "unique_name", "(", "\"a\"", ")", ",", "\"a_1\"", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "unique_name", "(", "\"a_1\"", ")", ",", "\"a_1_1\"", ")", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "unique_name", "(", "\"a\"", ")", ",", "\"a\"", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "unique_name", "(", "\"a_1\"", ")", ",", "\"a_1\"", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "unique_name", "(", "\"a\"", ")", ",", "\"a_2\"", ")", "\n", "\n", "# Case insensitive.", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "unique_name", "(", "\"a\"", ")", ",", "\"a\"", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "unique_name", "(", "\"A\"", ")", ",", "\"A_1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testLowering": [[148, 167], ["tensorflow.python.framework.test_util.run_in_graph_and_eager_modes", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "ops_test.MeshTensorFlowTest.evaluate", "ops_test.MeshTensorFlowTest.assertEqual", "mesh_tensorflow.Lowering.copy_masters_to_slices", "mesh_tensorflow.Lowering.copy_slices_to_masters", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_slices_to_masters"], ["", "@", "test_util", ".", "run_in_graph_and_eager_modes", "(", ")", "\n", "def", "testLowering", "(", "self", ")", ":", "\n", "    ", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "inputs", "=", "tf", ".", "constant", "(", "0.", ")", "\n", "mtf_inputs", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "\n", "tf_tensor", "=", "inputs", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "]", ")", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "\n", "outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_inputs", ")", "\n", "inputs_value", ",", "outputs_value", "=", "self", ".", "evaluate", "(", "[", "inputs", ",", "outputs", "]", ")", "\n", "self", ".", "assertEqual", "(", "inputs_value", ",", "outputs_value", ")", "\n", "\n", "# Check that methods run without error.", "\n", "_", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "_", "=", "lowering", ".", "copy_slices_to_masters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testMesh": [[168, 172], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "ops_test.MeshTensorFlowTest.assertEqual"], "methods", ["None"], ["", "def", "testMesh", "(", "self", ")", ":", "\n", "    ", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "self", ".", "assertEqual", "(", "mesh", ".", "graph", ",", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testMeshImpl": [[173, 195], ["mesh_tensorflow.Shape", "mesh_tensorflow.LayoutRules", "mesh_tensorflow.MeshImpl", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertLen", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertTrue", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "ops_test.MeshTensorFlowTest.assertEqual", "mesh_tensorflow.MeshImpl.tensor_dimension_to_mesh_axis", "mesh_tensorflow.MeshImpl.tensor_dimension_to_mesh_axis", "mesh_tensorflow.MeshImpl.tensor_dimension_to_mesh_axis", "mesh_tensorflow.MeshImpl.tensor_layout", "mesh_tensorflow.TensorLayout", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout"], ["", "def", "testMeshImpl", "(", "self", ")", ":", "\n", "    ", "shape", "=", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "4", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"model\"", ",", "8", ")", "]", ")", "\n", "layout_rules", "=", "mtf", ".", "LayoutRules", "(", "[", "(", "\"batch\"", ",", "\"batch\"", ")", ",", "\n", "(", "\"d_ff\"", ",", "\"model\"", ")", ",", "\n", "(", "\"heads\"", ",", "\"model\"", ")", "]", ")", "\n", "mesh_impl", "=", "mtf", ".", "MeshImpl", "(", "shape", "=", "shape", ",", "layout_rules", "=", "layout_rules", ")", "\n", "self", ".", "assertEqual", "(", "mesh_impl", ".", "shape", ",", "shape", ")", "\n", "self", ".", "assertLen", "(", "shape", ",", "mesh_impl", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "mesh_impl", ".", "layout_rules", ",", "layout_rules", ")", "\n", "self", ".", "assertEqual", "(", "mesh_impl", ".", "size", ",", "shape", ".", "size", ")", "\n", "self", ".", "assertTrue", "(", "mesh_impl", ".", "supports_control_dependencies", ")", "\n", "\n", "batch", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "128", ")", "\n", "length", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "500", ")", "\n", "d_ff", "=", "mtf", ".", "Dimension", "(", "\"d_ff\"", ",", "2048", ")", "\n", "heads", "=", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "8", ")", "\n", "self", ".", "assertEqual", "(", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "batch", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "d_ff", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "heads", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "mesh_impl", ".", "tensor_layout", "(", "mtf", ".", "Shape", "(", "[", "batch", ",", "length", ",", "d_ff", "]", ")", ")", ",", "\n", "mtf", ".", "TensorLayout", "(", "[", "0", ",", "None", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testPoolTensor1d": [[196, 222], ["absl.testing.parameterized.parameters", "mesh_tensorflow.test_utils.NumpyConverter", "numpy.random.randn", "numpy.empty", "pool_fn", "pool_fn", "mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.pool_tensor_1d", "mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "ops_test.MeshTensorFlowTest.assertAllClose"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pool_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pool_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pool_tensor_1d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array"], ["", "@", "parameterized", ".", "parameters", "(", "{", "\n", "\"pool_fn\"", ":", "np", ".", "mean", ",", "\n", "\"pool_fn_mtf\"", ":", "mtf", ".", "reduce_mean", "\n", "}", ",", "{", "\n", "\"pool_fn\"", ":", "np", ".", "max", ",", "\n", "\"pool_fn_mtf\"", ":", "mtf", ".", "reduce_max", "\n", "}", ",", "{", "\n", "\"pool_fn\"", ":", "np", ".", "min", ",", "\n", "\"pool_fn_mtf\"", ":", "mtf", ".", "reduce_min", "\n", "}", ")", "\n", "def", "testPoolTensor1d", "(", "self", ",", "pool_fn", ",", "pool_fn_mtf", ")", ":", "\n", "    ", "converter", "=", "mtf_test_utils", ".", "NumpyConverter", "(", ")", "\n", "pool_size", "=", "2", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "4", ",", "5", ")", "\n", "expected", "=", "np", ".", "empty", "(", "shape", "=", "[", "2", ",", "3", ",", "2", ",", "5", "]", ")", "\n", "expected", "[", ":", ",", ":", ",", "0", ",", ":", "]", "=", "pool_fn", "(", "x", "[", ":", ",", ":", ",", "0", ":", "2", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "expected", "[", ":", ",", ":", ",", "1", ",", ":", "]", "=", "pool_fn", "(", "x", "[", ":", ",", ":", ",", "2", ":", "4", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "\n", "x_mtf", "=", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "x", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "pooled_mtf", "=", "mtf", ".", "pool_tensor_1d", "(", "\n", "x_mtf", ",", "\n", "pool_dim", "=", "x_mtf", ".", "shape", ".", "dims", "[", "2", "]", ",", "\n", "reduce_fn", "=", "pool_fn_mtf", ",", "\n", "pool_size", "=", "pool_size", ")", "\n", "actual", "=", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "pooled_mtf", ")", "\n", "self", ".", "assertAllClose", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testStrideTensor1d": [[223, 233], ["absl.testing.parameterized.parameters", "mesh_tensorflow.test_utils.NumpyConverter", "numpy.random.randint", "mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.stride_tensor_1d", "mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "ops_test.MeshTensorFlowTest.assertAllEqual", "range"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stride_tensor_1d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array"], ["", "@", "parameterized", ".", "parameters", "(", "{", "\"pool_size\"", ":", "2", "}", ",", "{", "\"pool_size\"", ":", "3", "}", ")", "\n", "def", "testStrideTensor1d", "(", "self", ",", "pool_size", ")", ":", "\n", "    ", "converter", "=", "mtf_test_utils", ".", "NumpyConverter", "(", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "100", ",", "size", "=", "[", "2", ",", "3", ",", "6", ",", "5", "]", ")", "\n", "x_mtf", "=", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "x", ")", "\n", "expected", "=", "x", "[", ":", ",", ":", ",", "range", "(", "0", ",", "x", ".", "shape", "[", "2", "]", ",", "pool_size", ")", ",", ":", "]", "\n", "strided_mtf", "=", "mtf", ".", "stride_tensor_1d", "(", "\n", "x_mtf", ",", "pool_dim", "=", "x_mtf", ".", "shape", ".", "dims", "[", "2", "]", ",", "pool_size", "=", "pool_size", ")", "\n", "actual", "=", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "strided_mtf", ")", "\n", "self", ".", "assertAllEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.MeshTensorFlowTest.testReduceFirst": [[234, 242], ["mesh_tensorflow.test_utils.NumpyConverter", "numpy.random.randint", "mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.reduce_first", "mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "ops_test.MeshTensorFlowTest.assertAllEqual"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_first", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array"], ["", "def", "testReduceFirst", "(", "self", ")", ":", "\n", "    ", "converter", "=", "mtf_test_utils", ".", "NumpyConverter", "(", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "100", ",", "size", "=", "[", "2", ",", "3", ",", "6", ",", "5", "]", ")", "\n", "x_mtf", "=", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "x", ")", "\n", "expected", "=", "x", "[", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "reduced_mtf", "=", "mtf", ".", "reduce_first", "(", "x_mtf", ",", "reduced_dim", "=", "x_mtf", ".", "shape", ".", "dims", "[", "2", "]", ")", "\n", "actual", "=", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "reduced_mtf", ")", "\n", "self", ".", "assertAllEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.setUp": [[246, 267], ["super().setUp", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.zeros", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.zeros"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "OperationSplittabilityTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "mesh", "=", "mtf", ".", "Mesh", "(", "self", ".", "graph", ",", "\"my_mesh\"", ")", "\n", "\n", "self", ".", "a_dim", "=", "mtf", ".", "Dimension", "(", "\"a\"", ",", "5", ")", "\n", "self", ".", "b_dim", "=", "mtf", ".", "Dimension", "(", "\"b\"", ",", "10", ")", "\n", "self", ".", "c_dim", "=", "mtf", ".", "Dimension", "(", "\"c\"", ",", "15", ")", "\n", "\n", "self", ".", "ab_shape", "=", "mtf", ".", "Shape", "(", "[", "self", ".", "a_dim", ",", "self", ".", "b_dim", "]", ")", "\n", "self", ".", "x", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "self", ".", "ab_shape", ")", "\n", "\n", "self", ".", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "100", ")", "\n", "self", ".", "grid_h_dim", "=", "mtf", ".", "Dimension", "(", "\"grid_h\"", ",", "10", ")", "\n", "self", ".", "grid_w_dim", "=", "mtf", ".", "Dimension", "(", "\"grid_w\"", ",", "10", ")", "\n", "self", ".", "filter_h_dim", "=", "mtf", ".", "Dimension", "(", "\"filter_h\"", ",", "5", ")", "\n", "self", ".", "filter_w_dim", "=", "mtf", ".", "Dimension", "(", "\"filter_w\"", ",", "5", ")", "\n", "self", ".", "in_dim", "=", "mtf", ".", "Dimension", "(", "\"in\"", ",", "10", ")", "\n", "self", ".", "out_dim", "=", "mtf", ".", "Dimension", "(", "\"out\"", ",", "10", ")", "\n", "self", ".", "image", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "[", "self", ".", "batch_dim", ",", "self", ".", "grid_h_dim", ",", "\n", "self", ".", "grid_w_dim", ",", "self", ".", "in_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testOperation": [[268, 291], ["mesh_tensorflow.Operation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertRaises", "mesh_tensorflow.Operation._initialize_all_dimensions_as_splittable", "mesh_tensorflow.Operation._initialize_splittable_and_unsplittable_dims", "mesh_tensorflow.Operation._initialize_splittable_and_unsplittable_dims", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["", "def", "testOperation", "(", "self", ")", ":", "\n", "    ", "operation", "=", "mtf", ".", "Operation", "(", "[", "self", ".", "x", "]", ",", "name", "=", "\"operation\"", ")", "\n", "\n", "# Everything is splittable.", "\n", "self", ".", "assertEqual", "(", "\n", "operation", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ",", "\n", "(", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ",", "frozenset", "(", ")", ")", ")", "\n", "\n", "# Everything is unsplittable.", "\n", "self", ".", "assertEqual", "(", "\n", "operation", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\"unsplittable\"", ")", ",", "\n", "(", "frozenset", "(", ")", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", ")", "\n", "\n", "# Everything is unsplittable except dimension \"b\".", "\n", "self", ".", "assertEqual", "(", "\n", "operation", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"unsplittable\"", ",", "[", "\"b\"", "]", ")", ",", "\n", "(", "frozenset", "(", "[", "\"b\"", "]", ")", ",", "frozenset", "(", "[", "\"a\"", "]", ")", ")", ")", "\n", "\n", "self", ".", "assertRaises", "(", "\n", "ValueError", ",", "\n", "operation", ".", "_initialize_splittable_and_unsplittable_dims", ",", "\n", "\"invalid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testSlicewiseOperationAndGenericGradOperation": [[292, 312], ["mesh_tensorflow.SlicewiseOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.GenericGradOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testSlicewiseOperationAndGenericGradOperation", "(", "self", ")", ":", "\n", "    ", "slicewise_operation", "=", "mtf", ".", "SlicewiseOperation", "(", "\n", "tf", ".", "exp", ",", "\n", "[", "self", ".", "x", "]", ",", "\n", "[", "self", ".", "x", ".", "shape", "]", ",", "\n", "[", "self", ".", "x", ".", "dtype", "]", ",", "\n", "splittable_dims", "=", "[", "self", ".", "a_dim", "]", ",", "# pretend only dim \"a\" can be split.", "\n", "grad_function", "=", "lambda", "op", ",", "dy", ":", "[", "dy", "*", "op", ".", "outputs", "[", "0", "]", "]", ",", "\n", "name", "=", "\"component-wise exp\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "slicewise_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "slicewise_operation", ".", "unsplittable_dims", ",", "frozenset", "(", "[", "\"b\"", "]", ")", ")", "\n", "\n", "generic_grad_operation", "=", "mtf", ".", "GenericGradOperation", "(", "slicewise_operation", ",", "\n", "[", "self", ".", "x", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "generic_grad_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "generic_grad_operation", ".", "unsplittable_dims", ",", "\n", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testScalarMultiplyOperationandScalarAddOperation": [[313, 324], ["mesh_tensorflow.ScalarMultiplyOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.ScalarAddOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testScalarMultiplyOperationandScalarAddOperation", "(", "self", ")", ":", "\n", "    ", "scalar", "=", "2.0", "\n", "scalar_multiply_operation", "=", "mtf", ".", "ScalarMultiplyOperation", "(", "self", ".", "x", ",", "scalar", ")", "\n", "self", ".", "assertEqual", "(", "scalar_multiply_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "scalar_multiply_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n", "scalar_add_operation", "=", "mtf", ".", "ScalarAddOperation", "(", "self", ".", "x", ",", "scalar", ")", "\n", "self", ".", "assertEqual", "(", "scalar_add_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "scalar_add_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testBinaryOpWithBroadcasting": [[325, 338], ["mesh_tensorflow.zeros", "mesh_tensorflow.BinaryOpWithBroadcasting", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "frozenset", "frozenset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["", "def", "testBinaryOpWithBroadcasting", "(", "self", ")", ":", "\n", "    ", "x2", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "mtf", ".", "Shape", "(", "[", "self", ".", "a_dim", ",", "self", ".", "c_dim", "]", ")", ")", "\n", "binary_op_with_broadcasting", "=", "mtf", ".", "BinaryOpWithBroadcasting", "(", "\n", "tf", ".", "less", ",", "\n", "self", ".", "x", ",", "\n", "x2", ",", "\n", "mtf", ".", "Shape", "(", "[", "self", ".", "a_dim", ",", "self", ".", "b_dim", ",", "self", ".", "c_dim", "]", ")", ",", "\n", "tf", ".", "bool", ",", "\n", "name", "=", "\"less with broadcasting\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "binary_op_with_broadcasting", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "binary_op_with_broadcasting", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testBroadcastOperation": [[339, 345], ["mesh_tensorflow.BroadcastOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.Shape", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testBroadcastOperation", "(", "self", ")", ":", "\n", "    ", "broadcast_operation", "=", "mtf", ".", "BroadcastOperation", "(", "\n", "self", ".", "x", ",", "mtf", ".", "Shape", "(", "[", "self", ".", "b_dim", ",", "self", ".", "c_dim", ",", "self", ".", "a_dim", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "broadcast_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "broadcast_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testReduceOperation": [[346, 351], ["mesh_tensorflow.ReduceOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.Shape", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testReduceOperation", "(", "self", ")", ":", "\n", "    ", "reduce_operation", "=", "mtf", ".", "ReduceOperation", "(", "self", ".", "x", ",", "mtf", ".", "Shape", "(", "[", "self", ".", "b_dim", "]", ")", ",", "\n", "\"sum\"", ")", "\n", "self", ".", "assertEqual", "(", "reduce_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "reduce_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testPoolOperation": [[352, 358], ["mesh_tensorflow.PoolOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testPoolOperation", "(", "self", ")", ":", "\n", "    ", "reduce_operation", "=", "mtf", ".", "PoolOperation", "(", "self", ".", "image", ",", "[", "2", ",", "2", "]", ",", "[", "2", ",", "2", "]", ",", "\"AVG_2D\"", ")", "\n", "self", ".", "assertEqual", "(", "reduce_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"batch\"", ",", "\"in\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "reduce_operation", ".", "unsplittable_dims", ",", "\n", "frozenset", "(", "[", "\"grid_h\"", ",", "\"grid_w\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testConcatOperation": [[359, 369], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.ConcatOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "frozenset", "frozenset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["", "def", "testConcatOperation", "(", "self", ")", ":", "\n", "    ", "concat_dim1", "=", "mtf", ".", "Dimension", "(", "\"concat\"", ",", "5", ")", "\n", "concat_dim2", "=", "mtf", ".", "Dimension", "(", "\"concat\"", ",", "7", ")", "\n", "\n", "x1", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "mtf", ".", "Shape", "(", "[", "self", ".", "a_dim", ",", "self", ".", "b_dim", ",", "concat_dim1", "]", ")", ")", "\n", "x2", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "mtf", ".", "Shape", "(", "[", "self", ".", "a_dim", ",", "self", ".", "b_dim", ",", "concat_dim2", "]", ")", ")", "\n", "\n", "concat_operation", "=", "mtf", ".", "ConcatOperation", "(", "[", "x1", ",", "x2", "]", ",", "\"concat\"", ")", "\n", "self", ".", "assertEqual", "(", "concat_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "concat_operation", ".", "unsplittable_dims", ",", "frozenset", "(", "[", "\"concat\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testSplitOperation": [[370, 374], ["mesh_tensorflow.SplitOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testSplitOperation", "(", "self", ")", ":", "\n", "    ", "split_operation", "=", "mtf", ".", "SplitOperation", "(", "self", ".", "x", ",", "self", ".", "b_dim", ",", "[", "3", ",", "7", "]", ")", "\n", "self", ".", "assertEqual", "(", "split_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "split_operation", ".", "unsplittable_dims", ",", "frozenset", "(", "[", "\"b\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testStackOperation": [[375, 379], ["mesh_tensorflow.StackOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testStackOperation", "(", "self", ")", ":", "\n", "    ", "stack_operation", "=", "mtf", ".", "StackOperation", "(", "[", "self", ".", "x", ",", "self", ".", "x", "]", ",", "\"stack\"", ",", "axis", "=", "0", ")", "\n", "self", ".", "assertEqual", "(", "stack_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "stack_operation", ".", "unsplittable_dims", ",", "frozenset", "(", "[", "\"stack\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testUnstackOperation": [[380, 384], ["mesh_tensorflow.UnstackOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testUnstackOperation", "(", "self", ")", ":", "\n", "    ", "unstack_operation", "=", "mtf", ".", "UnstackOperation", "(", "self", ".", "x", ",", "self", ".", "b_dim", ")", "\n", "self", ".", "assertEqual", "(", "unstack_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "unstack_operation", ".", "unsplittable_dims", ",", "frozenset", "(", "[", "\"b\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testEinsumOperation": [[385, 392], ["mesh_tensorflow.zeros", "mesh_tensorflow.EinsumOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "frozenset", "frozenset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["", "def", "testEinsumOperation", "(", "self", ")", ":", "\n", "    ", "x2", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "mtf", ".", "Shape", "(", "[", "self", ".", "a_dim", ",", "self", ".", "c_dim", "]", ")", ")", "\n", "einsum_operation", "=", "mtf", ".", "EinsumOperation", "(", "[", "self", ".", "x", ",", "x2", "]", ",", "\n", "mtf", ".", "Shape", "(", "[", "self", ".", "b_dim", ",", "self", ".", "c_dim", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "einsum_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "einsum_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testConv2dOperations": [[393, 430], ["mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.Conv2dOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.zeros", "mesh_tensorflow.Conv2or3dBackpropInputOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.Conv2or3dBackpropFilterOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["", "def", "testConv2dOperations", "(", "self", ")", ":", "\n", "    ", "conv_input", "=", "mtf", ".", "zeros", "(", "\n", "self", ".", "mesh", ",", "\n", "mtf", ".", "Shape", "(", "[", "self", ".", "batch_dim", ",", "self", ".", "grid_h_dim", ",", "self", ".", "grid_w_dim", ",", "\n", "self", ".", "in_dim", "]", ")", ")", "\n", "conv_filter", "=", "mtf", ".", "zeros", "(", "\n", "self", ".", "mesh", ",", "\n", "mtf", ".", "Shape", "(", "[", "self", ".", "filter_h_dim", ",", "self", ".", "filter_w_dim", ",", "self", ".", "in_dim", ",", "\n", "self", ".", "out_dim", "]", ")", ")", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "padding", "=", "\"SAME\"", "\n", "\n", "conv2d_operation", "=", "mtf", ".", "Conv2dOperation", "(", "conv_input", ",", "conv_filter", ",", "strides", ",", "\n", "padding", ")", "\n", "self", ".", "assertEqual", "(", "conv2d_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"batch\"", ",", "\"in\"", ",", "\"out\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "conv2d_operation", ".", "unsplittable_dims", ",", "\n", "frozenset", "(", "[", "\"filter_h\"", ",", "\"filter_w\"", ",", "\"grid_h\"", ",", "\"grid_w\"", "]", ")", ")", "\n", "\n", "output", "=", "conv2d_operation", ".", "outputs", "[", "0", "]", "\n", "d_output", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "output", ".", "shape", ")", "\n", "\n", "conv2d_backprop_input_operation", "=", "mtf", ".", "Conv2or3dBackpropInputOperation", "(", "\n", "2", ",", "False", ",", "conv_input", ".", "shape", ",", "conv_filter", ",", "d_output", ",", "strides", ",", "padding", ")", "\n", "self", ".", "assertEqual", "(", "conv2d_backprop_input_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"batch\"", ",", "\"filter_h\"", ",", "\"filter_w\"", ",", "\"grid_h\"", ",", "\n", "\"grid_w\"", ",", "\"in\"", ",", "\"out\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "conv2d_backprop_input_operation", ".", "unsplittable_dims", ",", "\n", "frozenset", "(", ")", ")", "\n", "\n", "conv2d_backprop_filter_operation", "=", "mtf", ".", "Conv2or3dBackpropFilterOperation", "(", "\n", "2", ",", "False", ",", "conv_input", ",", "conv_filter", ".", "shape", ",", "d_output", ",", "strides", ",", "padding", ")", "\n", "self", ".", "assertEqual", "(", "conv2d_backprop_filter_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"batch\"", ",", "\"filter_h\"", ",", "\"filter_w\"", ",", "\"grid_h\"", ",", "\n", "\"grid_w\"", ",", "\"in\"", ",", "\"out\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "conv2d_backprop_filter_operation", ".", "unsplittable_dims", ",", "\n", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testShiftOperation": [[431, 435], ["mesh_tensorflow.ShiftOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testShiftOperation", "(", "self", ")", ":", "\n", "    ", "shift_operation", "=", "mtf", ".", "ShiftOperation", "(", "self", ".", "x", ",", "-", "5", ",", "self", ".", "b_dim", ",", "wrap", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "shift_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "shift_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testSliceOperation": [[436, 441], ["mesh_tensorflow.SliceOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testSliceOperation", "(", "self", ")", ":", "\n", "    ", "slice_operation", "=", "mtf", ".", "SliceOperation", "(", "self", ".", "x", ",", "begin", "=", "3", ",", "size", "=", "4", ",", "\n", "slice_dim_name", "=", "\"b\"", ")", "\n", "self", ".", "assertEqual", "(", "slice_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "slice_operation", ".", "unsplittable_dims", ",", "frozenset", "(", "[", "\"b\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testPadOperation": [[442, 446], ["mesh_tensorflow.PadOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testPadOperation", "(", "self", ")", ":", "\n", "    ", "pad_operation", "=", "mtf", ".", "PadOperation", "(", "self", ".", "x", ",", "[", "7", ",", "2", "]", ",", "\"a\"", ")", "\n", "self", ".", "assertEqual", "(", "pad_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "pad_operation", ".", "unsplittable_dims", ",", "frozenset", "(", "[", "\"a\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testOneHotOperation": [[447, 453], ["mesh_tensorflow.zeros", "mesh_tensorflow.OneHotOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["", "def", "testOneHotOperation", "(", "self", ")", ":", "\n", "    ", "x", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "self", ".", "ab_shape", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "one_hot_operation", "=", "mtf", ".", "OneHotOperation", "(", "x", ",", "self", ".", "c_dim", ",", "1", ",", "0", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "self", ".", "assertEqual", "(", "one_hot_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "one_hot_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testImportOperation": [[454, 459], ["tensorflow.zeros", "mesh_tensorflow.ImportOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["", "def", "testImportOperation", "(", "self", ")", ":", "\n", "    ", "tf_x", "=", "tf", ".", "zeros", "(", "[", "5", ",", "10", "]", ")", "\n", "import_operation", "=", "mtf", ".", "ImportOperation", "(", "self", ".", "mesh", ",", "tf_x", ",", "self", ".", "ab_shape", ")", "\n", "self", ".", "assertEqual", "(", "import_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "import_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testImportLaidOutTensorOperation": [[460, 469], ["ops_test.LaidOutTensor", "mesh_tensorflow.ImportLaidOutTensorOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testImportLaidOutTensorOperation", "(", "self", ")", ":", "\n", "    ", "laid_out_x", "=", "LaidOutTensor", "(", "[", "self", ".", "x", "]", ")", "\n", "\n", "import_laid_out_tensor_operation", "=", "mtf", ".", "ImportLaidOutTensorOperation", "(", "\n", "self", ".", "mesh", ",", "laid_out_x", ",", "self", ".", "ab_shape", ")", "\n", "self", ".", "assertEqual", "(", "import_laid_out_tensor_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "import_laid_out_tensor_operation", ".", "unsplittable_dims", ",", "\n", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testVariableOperations": [[470, 492], ["mesh_tensorflow.Variable", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.ReadVariable", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.Assign", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.Depend", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.VariableDType", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset", "tensorflow.zeros_initializer"], "methods", ["None"], ["", "def", "testVariableOperations", "(", "self", ")", ":", "\n", "    ", "var", "=", "mtf", ".", "Variable", "(", "self", ".", "mesh", ",", "\n", "\"test_variable\"", ",", "\n", "self", ".", "ab_shape", ",", "\n", "mtf", ".", "VariableDType", "(", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ")", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "self", ".", "assertEqual", "(", "var", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "var", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n", "read_variable", "=", "mtf", ".", "ReadVariable", "(", "var", ")", "\n", "self", ".", "assertEqual", "(", "read_variable", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "read_variable", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n", "assign", "=", "mtf", ".", "Assign", "(", "[", "var", "]", ",", "[", "self", ".", "x", "]", ")", "\n", "self", ".", "assertEqual", "(", "assign", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "assign", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n", "depend", "=", "mtf", ".", "Depend", "(", "read_variable", ".", "outputs", "[", "0", "]", ",", "[", "assign", "]", ")", "\n", "self", ".", "assertEqual", "(", "depend", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "depend", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testConstant": [[493, 497], ["mesh_tensorflow.Constant", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testConstant", "(", "self", ")", ":", "\n", "    ", "constant", "=", "mtf", ".", "Constant", "(", "self", ".", "mesh", ",", "0", ",", "self", ".", "ab_shape", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "self", ".", "assertEqual", "(", "constant", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "constant", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testStopGradient": [[498, 502], ["mesh_tensorflow.StopGradient", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testStopGradient", "(", "self", ")", ":", "\n", "    ", "stop_gradient", "=", "mtf", ".", "StopGradient", "(", "self", ".", "x", ")", "\n", "self", ".", "assertEqual", "(", "stop_gradient", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "stop_gradient", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testPrintOperation": [[503, 507], ["mesh_tensorflow.PrintOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testPrintOperation", "(", "self", ")", ":", "\n", "    ", "print_operation", "=", "mtf", ".", "PrintOperation", "(", "self", ".", "x", ",", "[", "self", ".", "x", "]", ",", "\"Tensor x: \"", ")", "\n", "self", ".", "assertEqual", "(", "print_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "print_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testReshapeOperation": [[508, 514], ["mesh_tensorflow.ReshapeOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.Shape", "frozenset", "frozenset", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["None"], ["", "def", "testReshapeOperation", "(", "self", ")", ":", "\n", "    ", "reshape_operation", "=", "mtf", ".", "ReshapeOperation", "(", "\n", "self", ".", "x", ",", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"x\"", ",", "25", ")", ",", "mtf", ".", "Dimension", "(", "\"y\"", ",", "2", ")", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "reshape_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", ",", "\"x\"", ",", "\"y\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "reshape_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testRandomOperation": [[515, 520], ["mesh_tensorflow.RandomOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "testRandomOperation", "(", "self", ")", ":", "\n", "    ", "random_operation", "=", "mtf", ".", "RandomOperation", "(", "self", ".", "mesh", ",", "self", ".", "ab_shape", ",", "\n", "tf", ".", "random_uniform", ")", "\n", "self", ".", "assertEqual", "(", "random_operation", ".", "splittable_dims", ",", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "random_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.OperationSplittabilityTest.testWhileLoopOperation": [[521, 533], ["mesh_tensorflow.constant", "mesh_tensorflow.WhileLoopOperation", "ops_test.OperationSplittabilityTest.assertEqual", "ops_test.OperationSplittabilityTest.assertEqual", "mesh_tensorflow.Shape", "mesh_tensorflow.less", "frozenset", "frozenset", "mesh_tensorflow.add", "mesh_tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.multiply"], ["", "def", "testWhileLoopOperation", "(", "self", ")", ":", "\n", "# This test case implements the following:", "\n", "# for i in range(10):", "\n", "#   x = x * 2", "\n", "    ", "i", "=", "mtf", ".", "constant", "(", "self", ".", "mesh", ",", "0", ",", "mtf", ".", "Shape", "(", "[", "]", ")", ")", "\n", "cond_fn", "=", "lambda", "i", ",", "x", ":", "mtf", ".", "less", "(", "i", ",", "10", ")", "\n", "body_fn", "=", "lambda", "i", ",", "x", ":", "[", "mtf", ".", "add", "(", "i", ",", "1", ")", ",", "mtf", ".", "multiply", "(", "x", ",", "2", ")", "]", "\n", "\n", "while_loop_operation", "=", "mtf", ".", "WhileLoopOperation", "(", "cond_fn", ",", "body_fn", ",", "[", "i", ",", "self", ".", "x", "]", ")", "\n", "self", ".", "assertEqual", "(", "while_loop_operation", ".", "splittable_dims", ",", "\n", "frozenset", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "while_loop_operation", ".", "unsplittable_dims", ",", "frozenset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.NthSmallestTest.testNthLargest": [[537, 562], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.nth_largest_element", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "ops_test.NthSmallestTest.assertAllEqual", "ops_test.NthSmallestTest.evaluate", "ops_test.NthSmallestTest.evaluate", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.nth_largest_element", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], ["  ", "def", "testNthLargest", "(", "self", ")", ":", "\n", "    ", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "a_dim", "=", "mtf", ".", "Dimension", "(", "\"a\"", ",", "6", ")", "\n", "b_dim", "=", "mtf", ".", "Dimension", "(", "\"b\"", ",", "2", ")", "\n", "inputs", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "10", "]", ",", "\n", "[", "2", ",", "9", "]", ",", "\n", "[", "3", ",", "8", "]", ",", "\n", "[", "4", ",", "7", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "\n", "[", "6", ",", "5", "]", "]", ")", "\n", "n", "=", "1", "# find second largest element (since n is zero-indexed)", "\n", "reduced_dim", "=", "a_dim", "\n", "expected_outputs", "=", "tf", ".", "constant", "(", "[", "5", ",", "9", "]", ")", "\n", "\n", "mtf_inputs", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "inputs", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "a_dim", ",", "b_dim", "]", ")", ")", "\n", "mtf_outputs", "=", "mtf", ".", "nth_largest_element", "(", "\n", "mtf_inputs", ",", "n", ",", "reduced_dim", ",", "\"test_nth_largest\"", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "\"all:2\"", ",", "layout", "=", "\"a:all\"", ",", "devices", "=", "[", "\"\"", ",", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "self", ".", "assertAllEqual", "(", "self", ".", "evaluate", "(", "actual_outputs", ")", ",", "\n", "self", ".", "evaluate", "(", "expected_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.NthSmallestTest.testNthSmallestReduceSecondDim": [[563, 588], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.nth_smallest_element", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "ops_test.NthSmallestTest.assertAllEqual", "ops_test.NthSmallestTest.evaluate", "ops_test.NthSmallestTest.evaluate", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.nth_smallest_element", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], ["", "def", "testNthSmallestReduceSecondDim", "(", "self", ")", ":", "\n", "    ", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "a_dim", "=", "mtf", ".", "Dimension", "(", "\"a\"", ",", "6", ")", "\n", "b_dim", "=", "mtf", ".", "Dimension", "(", "\"b\"", ",", "2", ")", "\n", "inputs", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "10", "]", ",", "\n", "[", "2", ",", "9", "]", ",", "\n", "[", "3", ",", "8", "]", ",", "\n", "[", "4", ",", "7", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "\n", "[", "6", ",", "5", "]", "]", ")", "\n", "n", "=", "0", "# find smallest element (n is zero-indexed)", "\n", "reduced_dim", "=", "b_dim", "\n", "expected_outputs", "=", "tf", ".", "constant", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "5", "]", ")", "\n", "\n", "mtf_inputs", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "inputs", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "a_dim", ",", "b_dim", "]", ")", ")", "\n", "mtf_outputs", "=", "mtf", ".", "nth_smallest_element", "(", "\n", "mtf_inputs", ",", "n", ",", "reduced_dim", ",", "\"test_nth_smallest\"", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "\"all:2\"", ",", "layout", "=", "\"a:all\"", ",", "devices", "=", "[", "\"\"", ",", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "self", ".", "assertAllEqual", "(", "self", ".", "evaluate", "(", "actual_outputs", ")", ",", "\n", "self", ".", "evaluate", "(", "expected_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.TopKTest.testTopK": [[592, 641], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "mesh_tensorflow.Dimension", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "mesh_tensorflow.import_fully_replicated", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.top_k", "mesh_tensorflow.gradients", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.export_to_tf_tensor", "ops_test.TopKTest.assertAllEqual", "ops_test.TopKTest.assertAllEqual", "ops_test.TopKTest.assertAllEqual", "ops_test.TopKTest.assertAllEqual", "ops_test.TopKTest.evaluate", "ops_test.TopKTest.evaluate", "ops_test.TopKTest.evaluate", "ops_test.TopKTest.evaluate", "ops_test.TopKTest.evaluate", "ops_test.TopKTest.evaluate", "ops_test.TopKTest.evaluate", "ops_test.TopKTest.evaluate", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.import_fully_replicated", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], ["  ", "def", "testTopK", "(", "self", ")", ":", "\n", "    ", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "a_dim", "=", "mtf", ".", "Dimension", "(", "\"a\"", ",", "6", ")", "\n", "b_dim", "=", "mtf", ".", "Dimension", "(", "\"b\"", ",", "2", ")", "\n", "inputs", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "10", "]", ",", "\n", "[", "2", ",", "9", "]", ",", "\n", "[", "3", ",", "8", "]", ",", "\n", "[", "4", ",", "7", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "\n", "[", "6", ",", "5", "]", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "k_dim", "=", "mtf", ".", "Dimension", "(", "\"k\"", ",", "2", ")", "\n", "d_values", "=", "tf", ".", "constant", "(", "[", "[", "11", ",", "12", "]", ",", "[", "13", ",", "14", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "reduced_dim", "=", "a_dim", "\n", "expected_values", "=", "tf", ".", "constant", "(", "[", "[", "6", ",", "5", "]", ",", "[", "10", ",", "9", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "expected_indices", "=", "tf", ".", "constant", "(", "[", "[", "5", ",", "4", "]", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "expected_d_inputs", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "13", "]", ",", "\n", "[", "0", ",", "14", "]", ",", "\n", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", "]", ",", "\n", "[", "12", ",", "0", "]", ",", "\n", "[", "11", ",", "0", "]", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "mtf_inputs", "=", "mtf", ".", "import_fully_replicated", "(", "\n", "mesh", ",", "inputs", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "a_dim", ",", "b_dim", "]", ")", ")", "\n", "mtf_d_values", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "d_values", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "b_dim", ",", "k_dim", "]", ")", ")", "\n", "mtf_values", ",", "mtf_indices", "=", "mtf", ".", "top_k", "(", "mtf_inputs", ",", "\n", "reduced_dim", "=", "reduced_dim", ",", "\n", "k_dim", "=", "k_dim", ",", "\n", "name", "=", "\"test_nth_smallest\"", ")", "\n", "[", "mtf_d_inputs", "]", "=", "mtf", ".", "gradients", "(", "[", "mtf_values", "]", ",", "[", "mtf_inputs", "]", ",", "[", "mtf_d_values", "]", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "\"rows:2,cols:2\"", ",", "layout", "=", "\"a:rows,b:cols\"", ",", "devices", "=", "[", "\"\"", ",", "\"\"", ",", "\"\"", ",", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_values", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_values", ")", "\n", "actual_indices", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_indices", ")", "\n", "actual_d_inputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_d_inputs", ")", "\n", "actual_inputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_inputs", ")", "\n", "self", ".", "assertAllEqual", "(", "self", ".", "evaluate", "(", "actual_inputs", ")", ",", "\n", "self", ".", "evaluate", "(", "inputs", ")", ")", "\n", "self", ".", "assertAllEqual", "(", "self", ".", "evaluate", "(", "actual_values", ")", ",", "\n", "self", ".", "evaluate", "(", "expected_values", ")", ")", "\n", "self", ".", "assertAllEqual", "(", "self", ".", "evaluate", "(", "actual_indices", ")", ",", "\n", "self", ".", "evaluate", "(", "expected_indices", ")", ")", "\n", "self", ".", "assertAllEqual", "(", "self", ".", "evaluate", "(", "actual_d_inputs", ")", ",", "\n", "self", ".", "evaluate", "(", "expected_d_inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops_test.RecomputeGradTest.testRecomputeGrad": [[645, 672], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "tensorflow.constant", "tensorflow.constant", "mesh_tensorflow.Dimension", "tensorflow.constant", "tensorflow.constant", "mesh_tensorflow.import_fully_replicated", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.recompute_grad", "mesh_tensorflow.gradients", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.export_to_tf_tensor", "ops_test.RecomputeGradTest.assertAllEqual", "ops_test.RecomputeGradTest.assertAllEqual", "ops_test.RecomputeGradTest.evaluate", "ops_test.RecomputeGradTest.evaluate", "ops_test.RecomputeGradTest.evaluate", "ops_test.RecomputeGradTest.evaluate", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.import_fully_replicated", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.recompute_grad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], ["  ", "def", "testRecomputeGrad", "(", "self", ")", ":", "\n", "    ", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "# let's differentiate x^2 + x", "\n", "# dy/dx = 2x+1", "\n", "def", "x_squared_plus_x", "(", "x", ")", ":", "\n", "      ", "return", "x", "*", "x", "+", "x", "\n", "", "x", "=", "tf", ".", "constant", "(", "[", "5", ",", "10", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "dy", "=", "tf", ".", "constant", "(", "[", "2", ",", "3", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "two", "=", "mtf", ".", "Dimension", "(", "\"two\"", ",", "2", ")", "\n", "expected_y", "=", "tf", ".", "constant", "(", "[", "30", ",", "110", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "expected_dx", "=", "tf", ".", "constant", "(", "[", "22", ",", "63", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mtf_x", "=", "mtf", ".", "import_fully_replicated", "(", "\n", "mesh", ",", "x", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "two", "]", ")", ")", "\n", "mtf_dy", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "dy", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "two", "]", ")", ")", "\n", "mtf_y", "=", "mtf", ".", "recompute_grad", "(", "x_squared_plus_x", ",", "[", "mtf_x", "]", ")", "\n", "[", "mtf_dx", "]", "=", "mtf", ".", "gradients", "(", "[", "mtf_y", "]", ",", "[", "mtf_x", "]", ",", "[", "mtf_dy", "]", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "\"processors:2\"", ",", "layout", "=", "\"two:processors\"", ",", "devices", "=", "[", "\"\"", ",", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_y", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_y", ")", "\n", "actual_dx", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_dx", ")", "\n", "self", ".", "assertAllEqual", "(", "self", ".", "evaluate", "(", "actual_y", ")", ",", "\n", "self", ".", "evaluate", "(", "expected_y", ")", ")", "\n", "self", ".", "assertAllEqual", "(", "self", ".", "evaluate", "(", "actual_dx", ")", ",", "\n", "self", ".", "evaluate", "(", "expected_dx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.__init__": [[81, 93], ["ops.convert_to_dimension", "len", "len", "ValueError", "tuple", "set"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension"], ["def", "__init__", "(", "self", ",", "dims", ")", ":", "\n", "    ", "\"\"\"Constructs a shape for a Tensor or Mesh.\n\n    Args:\n      dims: List-like of Dimensions.\n\n    Raises:\n      ValueError: If Dimensions are repeated.\n    \"\"\"", "\n", "self", ".", "_dims", "=", "[", "convert_to_dimension", "(", "d", ")", "for", "d", "in", "tuple", "(", "dims", ")", "]", "\n", "if", "len", "(", "set", "(", "dims", ")", ")", "!=", "len", "(", "dims", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"Shape must not have repeated dimensions %s\"", "%", "dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.dims": [[94, 97], ["list"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "dims", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.ndims": [[98, 101], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "ndims", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.__repr__": [[102, 104], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "to_string", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.__eq__": [[105, 107], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "self", ".", "dims", "==", "other", ".", "dims", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.__ne__": [[108, 110], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "self", ".", "dims", "!=", "other", ".", "dims", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.__add__": [[111, 117], ["isinstance", "isinstance", "ops.Shape"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "isinstance", "(", "other", ",", "Shape", ")", ":", "\n", "      ", "other", "=", "other", ".", "dims", "\n", "", "if", "isinstance", "(", "other", ",", "Dimension", ")", ":", "\n", "      ", "other", "=", "[", "other", "]", "\n", "", "return", "Shape", "(", "self", ".", "dims", "+", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.__sub__": [[118, 131], ["isinstance", "isinstance", "ops.Shape", "ValueError"], "methods", ["None"], ["", "def", "__sub__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "other", "is", "None", ":", "\n", "      ", "return", "self", "\n", "", "if", "isinstance", "(", "other", ",", "Shape", ")", ":", "\n", "      ", "other", "=", "other", ".", "dims", "\n", "", "if", "isinstance", "(", "other", ",", "Dimension", ")", ":", "\n", "      ", "if", "other", "not", "in", "self", ".", "dims", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Subtracting a dimension from a shape requires that the shape\"", "\n", "\" contain that dimension.  Use shape - [dimension] for the case\"", "\n", "\" where the dimension may not be in the shape.\"", ")", "\n", "", "other", "=", "[", "other", "]", "\n", "", "return", "Shape", "(", "[", "d", "for", "d", "in", "self", ".", "dims", "if", "d", "not", "in", "other", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.__len__": [[132, 134], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.__getitem__": [[135, 137], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "    ", "return", "self", ".", "_dims", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.__iter__": [[138, 140], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "    ", "return", "iter", "(", "self", ".", "_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.to_integer_list": [[141, 144], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "to_integer_list", "(", "self", ")", ":", "\n", "    ", "return", "[", "d", ".", "size", "for", "d", "in", "self", ".", "dims", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.size": [[145, 148], ["ops.list_product"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "    ", "return", "list_product", "(", "self", ".", "to_integer_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.to_string": [[149, 153], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "to_string", "(", "self", ")", ":", "\n", "    ", "return", "\"Shape[%s]\"", "%", "\", \"", ".", "join", "(", "\n", "[", "\"%s=%d\"", "%", "(", "d", ".", "name", ",", "d", ".", "size", ")", "for", "d", "in", "self", ".", "dims", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.cumprod": [[154, 158], ["ops._cumprod"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._cumprod"], ["", "@", "property", "\n", "def", "cumprod", "(", "self", ")", ":", "\n", "    ", "\"\"\"Cumulative product (exclusive) of Dimension sizes.\"\"\"", "\n", "return", "_cumprod", "(", "self", ".", "to_integer_list", ")", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.cumprod_to_tensor_axis": [[159, 165], ["ops.Shape.cumprod[].index", "len"], "methods", ["None"], ["", "def", "cumprod_to_tensor_axis", "(", "self", ",", "cumprod", ")", ":", "\n", "    ", "\"\"\"Maximum tensor axis i such that self.cumprod[i] == cumprod, or None.\"\"\"", "\n", "try", ":", "\n", "      ", "return", "len", "(", "self", ")", "-", "1", "-", "self", ".", "cumprod", "[", ":", ":", "-", "1", "]", ".", "index", "(", "cumprod", ")", "\n", "", "except", "ValueError", ":", "\n", "      ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.dimension_names": [[166, 169], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "dimension_names", "(", "self", ")", ":", "\n", "    ", "return", "[", "d", ".", "name", "for", "d", "in", "self", ".", "dims", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.rename_dimension": [[170, 178], ["ops.Shape", "ValueError", "Dimension"], "methods", ["None"], ["", "def", "rename_dimension", "(", "self", ",", "old_name", ",", "new_name", ")", ":", "\n", "    ", "\"\"\"Returns a copy where one dimension is renamed.\"\"\"", "\n", "if", "old_name", "not", "in", "self", ".", "dimension_names", ":", "\n", "      ", "raise", "ValueError", "(", "\"Shape %s does not have dimension named %s\"", "\n", "%", "(", "self", ",", "old_name", ")", ")", "\n", "", "return", "Shape", "(", "\n", "[", "Dimension", "(", "new_name", ",", "d", ".", "size", ")", "if", "d", ".", "name", "==", "old_name", "else", "d", "\n", "for", "d", "in", "self", ".", "dims", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.resize_dimension": [[179, 187], ["ops.Shape", "ValueError", "Dimension"], "methods", ["None"], ["", "def", "resize_dimension", "(", "self", ",", "name", ",", "new_size", ")", ":", "\n", "    ", "\"\"\"Returns a copy where one dimension has a different size.\"\"\"", "\n", "if", "name", "not", "in", "self", ".", "dimension_names", ":", "\n", "      ", "raise", "ValueError", "(", "\"Shape %s does not have dimension named %s\"", "\n", "%", "(", "self", ",", "name", ")", ")", "\n", "", "return", "Shape", "(", "\n", "[", "Dimension", "(", "name", ",", "new_size", ")", "if", "d", ".", "name", "==", "name", "else", "d", "\n", "for", "d", "in", "self", ".", "dims", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name": [[188, 204], ["ValueError"], "methods", ["None"], ["", "def", "get_dim_by_name", "(", "self", ",", "name", ")", ":", "\n", "    ", "\"\"\"Get the Dimension with `name` from this shape.\n\n    Args:\n      name: a string, the name of the dimension we wish to get\n\n    Returns:\n      Dimension with `name`\n    Raises:\n      ValueError: if the shape does not contain a dimension with `name`\n    \"\"\"", "\n", "for", "d", "in", "self", ".", "dims", ":", "\n", "      ", "if", "d", ".", "name", "==", "name", ":", "\n", "        ", "return", "d", "\n", "", "", "raise", "ValueError", "(", "\"Dimension {} not found in {}.\"", ".", "format", "(", "\n", "name", ",", "self", ".", "to_string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LayoutRules.__init__": [[238, 245], ["set"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pairs", ")", ":", "\n", "    ", "\"\"\"Constructs a layout.\n\n    Args:\n      pairs: Set-like of string pairs (tensor_dim_name, mesh_dim_name).\n    \"\"\"", "\n", "self", ".", "_pairs", "=", "set", "(", "pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LayoutRules.__repr__": [[246, 248], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "\"LayoutRules%s\"", "%", "self", ".", "_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LayoutRules.tensor_dimension_to_mesh_axis": [[249, 270], ["len", "ValueError", "enumerate"], "methods", ["None"], ["", "def", "tensor_dimension_to_mesh_axis", "(", "self", ",", "tensor_dimension", ",", "mesh_shape", ")", ":", "\n", "    ", "\"\"\"Mesh axis associated with tensor dimension (or None).\n\n    Args:\n      tensor_dimension: Dimension.\n      mesh_shape: Shape.\n\n    Returns:\n      Integer or None.\n\n    Raises:\n      ValueError: If one Tensor dimension maps to two mesh dimensions.\n    \"\"\"", "\n", "val", "=", "[", "i", "for", "i", ",", "mesh_dimension", "in", "enumerate", "(", "mesh_shape", ")", "\n", "if", "(", "tensor_dimension", ".", "name", ",", "mesh_dimension", ".", "name", ")", "in", "self", ".", "_pairs", "]", "\n", "if", "len", "(", "val", ")", ">", "1", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Tensor dimension maps to multiple mesh dimensions\"", "\n", "\" tensor_dimension=%s mesh_shape=%s layout=%s\"", "\n", "%", "(", "tensor_dimension", ",", "mesh_shape", ",", "self", ".", "_pairs", ")", ")", "\n", "", "return", "val", "[", "0", "]", "if", "val", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LayoutRules.tensor_layout": [[271, 293], ["ops.TensorLayout", "ops.LayoutRules.tensor_dimension_to_mesh_axis", "len", "len", "ValueError", "set"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis"], ["", "def", "tensor_layout", "(", "self", ",", "tensor_shape", ",", "mesh_shape", ")", ":", "\n", "    ", "\"\"\"Computes TensorLayout given a Tensor Shape and a Mesh Shape.\n\n    Args:\n      tensor_shape: Shape.\n      mesh_shape: Shape.\n\n    Returns:\n      TensorLayout.\n\n    Raises:\n      ValueError: If two Tensor Dimensions map to the same Mesh Dimensions.\n    \"\"\"", "\n", "ret", "=", "[", "self", ".", "tensor_dimension_to_mesh_axis", "(", "d", ",", "mesh_shape", ")", "\n", "for", "d", "in", "tensor_shape", "]", "\n", "not_nones", "=", "[", "a", "for", "a", "in", "ret", "if", "a", "is", "not", "None", "]", "\n", "if", "len", "(", "not_nones", ")", "!=", "len", "(", "set", "(", "not_nones", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Two Tensor Dimensions may not map to the same Mesh Dimension:\"", "\n", "\" layout=%s tensor_shape=%s mesh_shape=%s \"", "%", "\n", "(", "self", ",", "tensor_shape", ",", "mesh_shape", ")", ")", "\n", "", "return", "TensorLayout", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LayoutRules.mesh_dimension_name_to_tensor_dimension_names": [[294, 296], ["None"], "methods", ["None"], ["", "def", "mesh_dimension_name_to_tensor_dimension_names", "(", "self", ",", "mesh_dimension_name", ")", ":", "\n", "    ", "return", "[", "tdn", "for", "tdn", ",", "mdn", "in", "self", ".", "_pairs", "if", "mdn", "==", "mesh_dimension_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.__init__": [[330, 337], ["tuple"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tensor_axis_to_mesh_axis", ")", ":", "\n", "    ", "\"\"\"Creates a TensorLayout.\n\n    Args:\n      tensor_axis_to_mesh_axis: List-like where each element is an int or None.\n    \"\"\"", "\n", "self", ".", "_tensor_axis_to_mesh_axis", "=", "tuple", "(", "tensor_axis_to_mesh_axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.__eq__": [[338, 340], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "self", ".", "tensor_axis_to_mesh_axis", "==", "other", ".", "tensor_axis_to_mesh_axis", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.__ne__": [[341, 343], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "self", ".", "tensor_axis_to_mesh_axis", "!=", "other", ".", "tensor_axis_to_mesh_axis", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.__repr__": [[344, 346], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "\"TensorLayout%s\"", "%", "(", "self", ".", "tensor_axis_to_mesh_axis", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.__len__": [[347, 349], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "_tensor_axis_to_mesh_axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.__getitem__": [[350, 352], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "    ", "return", "self", ".", "_tensor_axis_to_mesh_axis", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.__iter__": [[353, 355], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "    ", "return", "iter", "(", "self", ".", "_tensor_axis_to_mesh_axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.tensor_axis_to_mesh_axis": [[356, 360], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tensor_axis_to_mesh_axis", "(", "self", ")", ":", "\n", "    ", "\"\"\"Converts to a tuple of optional integers.\"\"\"", "\n", "return", "self", ".", "_tensor_axis_to_mesh_axis", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.is_fully_replicated": [[361, 365], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_fully_replicated", "(", "self", ")", ":", "\n", "    ", "\"\"\"Whether all tensor dimensions map to None.\"\"\"", "\n", "return", "self", ".", "tensor_axis_to_mesh_axis", "==", "(", "None", ",", ")", "*", "len", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.mesh_axis_to_tensor_axis": [[366, 379], ["tuple", "ta2ma.index", "six.moves.xrange"], "methods", ["None"], ["", "def", "mesh_axis_to_tensor_axis", "(", "self", ",", "mesh_ndims", ")", ":", "\n", "    ", "\"\"\"For each mesh axis, which Tensor axis maps to it.\n\n    Args:\n      mesh_ndims: int.\n\n    Returns:\n      Tuple of optional integers, with length mesh_ndims.\n    \"\"\"", "\n", "ta2ma", "=", "self", ".", "_tensor_axis_to_mesh_axis", "\n", "return", "tuple", "(", "\n", "[", "ta2ma", ".", "index", "(", "mesh_axis", ")", "if", "mesh_axis", "in", "ta2ma", "else", "None", "\n", "for", "mesh_axis", "in", "xrange", "(", "mesh_ndims", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.__init__": [[384, 392], ["tensorflow.get_variable_scope"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "_operations", "=", "[", "]", "\n", "self", ".", "_trainable_variables", "=", "[", "]", "\n", "self", ".", "_all_variables", "=", "[", "]", "\n", "# Maps a name used in the graph to the next id to use for that name.", "\n", "self", ".", "_names_in_use", "=", "{", "}", "\n", "self", ".", "name_to_variable", "=", "{", "}", "\n", "self", ".", "captured_variable_scope", "=", "tf", ".", "get_variable_scope", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.__repr__": [[393, 395], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "to_string", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.operations": [[396, 399], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "operations", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_operations", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.trainable_variables": [[400, 403], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_trainable_variables", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.all_variables": [[404, 407], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "all_variables", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_all_variables", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.to_string": [[408, 411], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "to_string", "(", "self", ")", ":", "\n", "    ", "return", "\"\\n\"", ".", "join", "(", "[", "op", ".", "to_string", "for", "op", "in", "self", ".", "operations", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name": [[412, 442], ["name.lower", "ops.Graph._names_in_use.get", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.lower", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get"], ["", "def", "unique_name", "(", "self", ",", "name", ",", "mark_as_used", "=", "True", ")", ":", "\n", "    ", "\"\"\"Like tf.Graph.unique_name, returns a unique operation name for `name`.\n\n    Args:\n      name: The name for an operation.\n      mark_as_used: whether to mark this name as being used.\n\n    Returns:\n      A string to use as the name for the operation.\n    \"\"\"", "\n", "scope_name", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "if", "scope_name", ":", "\n", "      ", "name", "=", "scope_name", "+", "\"/\"", "+", "name", "\n", "\n", "# As in TensorFlow, treat names as case insensitive when deciding whether", "\n", "# they are in use.", "\n", "", "name_key", "=", "name", ".", "lower", "(", ")", "\n", "i", "=", "self", ".", "_names_in_use", ".", "get", "(", "name_key", ",", "0", ")", "\n", "if", "mark_as_used", ":", "\n", "      ", "self", ".", "_names_in_use", "[", "name_key", "]", "=", "i", "+", "1", "\n", "", "if", "i", ">", "0", ":", "\n", "      ", "base_name_key", "=", "name_key", "\n", "while", "name_key", "in", "self", ".", "_names_in_use", ":", "\n", "        ", "name_key", "=", "\"%s_%d\"", "%", "(", "base_name_key", ",", "i", ")", "\n", "i", "+=", "1", "\n", "", "if", "mark_as_used", ":", "\n", "        ", "self", ".", "_names_in_use", "[", "name_key", "]", "=", "1", "\n", "", "name", "=", "\"%s_%d\"", "%", "(", "name", ",", "i", "-", "1", ")", "\n", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.rewrite_stack_variables": [[443, 561], ["collections.defaultdict", "collections.defaultdict", "isinstance", "str", "key_to_vars[].append", "isinstance", "ValueError", "isinstance", "str", "len", "max", "isinstance", "ops.Graph._operations.append", "min", "mesh_impl.slice_size", "min", "similar_vars.popleft", "ops.StackedVariable", "ops.unstack", "enumerate", "ops.Graph._operations.append", "ops.Graph._all_variables.append", "dict", "zip", "ops.Graph.rewrite_stack_variables.var_key"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slice_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.unstack"], ["", "@", "gin", ".", "configurable", "\n", "def", "rewrite_stack_variables", "(", "self", ",", "\n", "max_combined_variable_size", "=", "2", "**", "29", ",", "\n", "max_combined_slice_size", "=", "2", "**", "27", ",", "\n", "mesh_to_impl", "=", "None", ")", ":", "\n", "    ", "\"\"\"Rewrite the current graph to combine variables.\n\n    This helps speed up graph construction times in the case of large meshes\n    and large numbers of variables.\n\n    This function should be called after graph construction  (it is called by\n    default in the Lowering constuctor).\n\n    When we find a set of variables with the same shape/dtype/etc, we replace\n    them with one StackedVariable and an \"unstack\" operation.  The\n    StackedVariable has multiple master variables (so as to maintain checkpiont\n    compatibility), but only one slice variable per device.  We point the inputs\n    of later operations to the outputs of the \"unstack\" operations, instead of\n    the outputs of the defunct single variables.\n\n    In order for variables to be combinable, they must be set in the same Assign\n    operation(s) - so it is necessary to call mtf.grouped_assign() from the\n    optimizer instead of many separate calls to mtf.assign().  The assign\n    operations get rewritten to set the appropriate stacked variables.\n\n    TODO(noam): Combining to larger sizes seems to cause errors on TPU.\n      debug this.  Perhaps we should try to keep the combined master variables\n      on the same device.\n\n    Args:\n      max_combined_variable_size: an integer\n      max_combined_slice_size: an integer\n      mesh_to_impl: an optional dictionary from Mesh to MeshImpl\n    \"\"\"", "\n", "# pylint: disable=protected-access", "\n", "all_variables", "=", "self", ".", "_all_variables", "\n", "operations", "=", "self", ".", "_operations", "\n", "self", ".", "_operations", "=", "[", "]", "\n", "self", ".", "_all_variables", "=", "[", "]", "\n", "self", ".", "_trainable_variables", "=", "[", "]", "\n", "# We can only stack varaibles which share the same set of assignment", "\n", "# operations.", "\n", "var_to_assign_ops", "=", "collections", ".", "defaultdict", "(", "str", ")", "\n", "for", "op", "in", "operations", ":", "\n", "      ", "if", "isinstance", "(", "op", ",", "Assign", ")", ":", "\n", "        ", "for", "v", "in", "op", ".", "_variables", ":", "\n", "          ", "var_to_assign_ops", "[", "v", "]", "+=", "op", ".", "name", "+", "\", \"", "\n", "# Two variables with the same \"key\" can be stacked together.", "\n", "", "", "", "def", "var_key", "(", "v", ")", ":", "\n", "      ", "return", "str", "(", "[", "v", ".", "mesh", ",", "\n", "v", ".", "shape", ",", "\n", "str", "(", "v", ".", "dtype", ".", "__dict__", ")", ",", "\n", "v", ".", "trainable", ",", "\n", "var_to_assign_ops", "[", "v", "]", "]", ")", "\n", "", "key_to_vars", "=", "collections", ".", "defaultdict", "(", "collections", ".", "deque", ")", "\n", "for", "v", "in", "all_variables", ":", "\n", "      ", "key_to_vars", "[", "var_key", "(", "v", ")", "]", ".", "append", "(", "v", ")", "\n", "", "individual_to_stacked", "=", "{", "}", "\n", "for", "op", "in", "operations", ":", "\n", "      ", "if", "isinstance", "(", "op", ",", "StackedVariable", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"stack_variables() should not be called twice.\"", ")", "\n", "", "elif", "isinstance", "(", "op", ",", "Variable", ")", ":", "\n", "        ", "if", "op", ".", "name", "in", "individual_to_stacked", ":", "\n", "          ", "continue", "\n", "", "similar_vars", "=", "key_to_vars", "[", "var_key", "(", "op", ")", "]", "\n", "num_to_stack", "=", "len", "(", "similar_vars", ")", "\n", "if", "max_combined_variable_size", "is", "not", "None", ":", "\n", "          ", "num_to_stack", "=", "min", "(", "\n", "num_to_stack", ",", "max_combined_variable_size", "//", "op", ".", "shape", ".", "size", ")", "\n", "", "if", "mesh_to_impl", "is", "not", "None", ":", "\n", "          ", "mesh_impl", "=", "mesh_to_impl", "[", "op", ".", "mesh", "]", "\n", "if", "mesh_impl", ".", "size", "==", "1", ":", "\n", "            ", "num_to_stack", "=", "1", "# no point in stacking for single processors.", "\n", "", "slice_size", "=", "mesh_impl", ".", "slice_size", "(", "op", ".", "shape", ")", "\n", "num_to_stack", "=", "min", "(", "\n", "num_to_stack", ",", "max_combined_slice_size", "//", "slice_size", ")", "\n", "", "num_to_stack", "=", "max", "(", "1", ",", "num_to_stack", ")", "\n", "to_stack", "=", "[", "similar_vars", ".", "popleft", "(", ")", "for", "_", "in", "xrange", "(", "num_to_stack", ")", "]", "\n", "if", "num_to_stack", ">", "1", ":", "\n", "          ", "stacked_var", "=", "StackedVariable", "(", "to_stack", ")", "\n", "stack_dim", "=", "stacked_var", ".", "shape", ".", "dims", "[", "0", "]", "\n", "unstacked", "=", "unstack", "(", "stacked_var", ".", "outputs", "[", "0", "]", ",", "stack_dim", ")", "\n", "unstack_op", "=", "unstacked", "[", "0", "]", ".", "operation", "\n", "# replace the output Tensors of the unstack operation with the", "\n", "# Tensors which were the outputs of the original variable operations.", "\n", "# Later operations use these Tensors as inputs.", "\n", "unstack_op", ".", "_outputs", "=", "[", "v", ".", "outputs", "[", "0", "]", "for", "v", "in", "to_stack", "]", "\n", "for", "t", "in", "unstack_op", ".", "_outputs", ":", "\n", "            ", "t", ".", "_operation", "=", "unstack_op", "\n", "", "for", "idx", ",", "v", "in", "enumerate", "(", "to_stack", ")", ":", "\n", "            ", "individual_to_stacked", "[", "v", ".", "name", "]", "=", "stacked_var", ",", "idx", "\n", "", "", "else", ":", "\n", "          ", "assert", "op", "==", "to_stack", "[", "0", "]", "\n", "self", ".", "_operations", ".", "append", "(", "op", ")", "\n", "self", ".", "_all_variables", ".", "append", "(", "op", ")", "\n", "if", "op", ".", "trainable", ":", "\n", "            ", "self", ".", "_trainable_variables", ".", "append", "(", "op", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "op", ",", "Assign", ")", ":", "\n", "# Rewrite the grouped assignment to stack up the values and then", "\n", "# assign to the stacked variables.", "\n", "          ", "new_variables", "=", "[", "]", "\n", "new_values", "=", "[", "]", "\n", "var_to_val", "=", "dict", "(", "zip", "(", "[", "v", ".", "name", "for", "v", "in", "op", ".", "_variables", "]", ",", "op", ".", "_inputs", ")", ")", "\n", "for", "var", ",", "val", "in", "zip", "(", "op", ".", "_variables", ",", "op", ".", "_inputs", ")", ":", "\n", "            ", "if", "var", ".", "name", "in", "individual_to_stacked", ":", "\n", "              ", "stacked_var", ",", "pos", "=", "individual_to_stacked", "[", "var", ".", "name", "]", "\n", "if", "pos", "==", "0", ":", "\n", "                ", "vals", "=", "[", "var_to_val", "[", "n", "]", "for", "n", "in", "stacked_var", ".", "original_names", "]", "\n", "new_variables", ".", "append", "(", "stacked_var", ")", "\n", "new_values", ".", "append", "(", "\n", "stack", "(", "vals", ",", "stacked_var", ".", "shape", ".", "dims", "[", "0", "]", ".", "name", ",", "0", ")", ")", "\n", "", "", "else", ":", "\n", "              ", "new_variables", ".", "append", "(", "var", ")", "\n", "new_values", ".", "append", "(", "val", ")", "\n", "", "", "op", ".", "_variables", "=", "new_variables", "\n", "op", ".", "_inputs", "=", "new_values", "\n", "", "self", ".", "_operations", ".", "append", "(", "op", ")", "\n", "# pylint: enable=protected-access", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.combine_assignments": [[563, 597], ["collections.defaultdict", "set", "six.iteritems", "group_by_fn[].append", "ret.append", "isinstance", "ValueError", "variables.extend", "values.extend", "ops.Assign"], "methods", ["None"], ["", "", "", "def", "combine_assignments", "(", "self", ",", "assignments", ")", ":", "\n", "    ", "\"\"\"Rewrite the current graph to combine \"Assign\" operations.\n\n    Combine similar Assign operations into grouped Assign operations.\n    This is useful when using the rewrite_stack_variables() optimization,\n    since variables can only be stacked if they are present in the same set\n    of Assign operations.\n\n    This function takes a list of Assign operations and returns a possibly\n    shorter list of Assign operations.  The input Assignment operations\n    are removed from the graph and become invalid.\n\n    Args:\n      assignments: a list of Assign objects\n    Returns:\n      a list of Assign objects\n    \"\"\"", "\n", "group_by_fn", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "a", "in", "assignments", ":", "\n", "      ", "if", "not", "isinstance", "(", "a", ",", "Assign", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"ops should be instances of mtf.Assign\"", ")", "\n", "", "group_by_fn", "[", "a", ".", "assign_fn", "]", ".", "append", "(", "a", ")", "\n", "", "assignments_set", "=", "set", "(", "assignments", ")", "\n", "self", ".", "_operations", "=", "[", "\n", "op", "for", "op", "in", "self", ".", "_operations", "if", "op", "not", "in", "assignments_set", "]", "\n", "ret", "=", "[", "]", "\n", "for", "fn", ",", "ops", "in", "six", ".", "iteritems", "(", "group_by_fn", ")", ":", "\n", "      ", "variables", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "for", "a", "in", "ops", ":", "\n", "        ", "variables", ".", "extend", "(", "a", ".", "variables", ")", "\n", "values", ".", "extend", "(", "a", ".", "inputs", ")", "\n", "", "ret", ".", "append", "(", "Assign", "(", "variables", ",", "values", ",", "fn", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.make_variables_untrainable": [[598, 609], ["set"], "methods", ["None"], ["", "def", "make_variables_untrainable", "(", "self", ",", "variables", ")", ":", "\n", "    ", "\"\"\"Makes the variables untrainable.\n\n    Args:\n      variables: a list of Variable objects\n    \"\"\"", "\n", "variables", "=", "set", "(", "variables", ")", "\n", "for", "v", "in", "variables", ":", "\n", "      ", "v", ".", "_trainable", "=", "False", "# pylint: disable=protected-access", "\n", "", "self", ".", "_trainable_variables", "=", "[", "\n", "v", "for", "v", "in", "self", ".", "_trainable_variables", "if", "v", "not", "in", "variables", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.clone_operations": [[611, 662], ["copy.copy", "len", "isinstance", "isinstance", "copy.copy", "ops.Graph._operations.append", "enumerate", "tensorflow.logging.warning", "copy.copy.get", "ops.Tensor", "copy.copy._outputs.append", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get"], ["", "def", "clone_operations", "(", "self", ",", "ops", ",", "input_mapping", ")", ":", "\n", "    ", "\"\"\"Clone a portion of the graph, but with different inputs.\n\n    The differnt inputs are specified by the `input_mapping` dictionary, which\n    maps from input Tensor in the original operations to input Tensor in the\n    cloned operations.  If an original operation uses an external input that is\n    not in `input_mapping`, then the original input is used for the cloned\n    operation.\n\n    The function returns a list of cloned operations as well an\n    `extended_mapping` dictionary which consits of the union of the input\n    mapping and the map from original-operation-output to\n    cloned-operation-output.\n\n    Variables and Random operations are not cloned.\n\n    Args:\n      ops: a list of operations\n      input_mapping: a dictionary from Tensor to Tensor\n    Returns:\n      cloned_operations: a list of operations\n      extended_mapping: a dictionary from Tensor to Tensor\n    \"\"\"", "\n", "# pylint: disable=protected-access", "\n", "mapping", "=", "copy", ".", "copy", "(", "input_mapping", ")", "\n", "prev_num_operations", "=", "len", "(", "self", ".", "operations", ")", "\n", "for", "op", "in", "ops", ":", "\n", "      ", "if", "isinstance", "(", "op", ",", "Variable", ")", ":", "\n", "        ", "continue", "\n", "", "if", "isinstance", "(", "op", ",", "RandomOperation", ")", ":", "\n", "# The random values will be copied instead of recomputed.", "\n", "# TODO(noam): Use stateless_random to allow for recompute.", "\n", "        ", "tf", ".", "logging", ".", "warning", "(", "\n", "\"Not cloning random operation, so as to ensure the same values.\"", ")", "\n", "continue", "\n", "", "new_op", "=", "copy", ".", "copy", "(", "op", ")", "\n", "# new_op._name = self.unique_name(op.name)", "\n", "self", ".", "_operations", ".", "append", "(", "new_op", ")", "\n", "new_op", ".", "_inputs", "=", "[", "mapping", ".", "get", "(", "t", ",", "t", ")", "for", "t", "in", "op", ".", "_inputs", "]", "\n", "new_op", ".", "_outputs", "=", "[", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "op", ".", "outputs", ")", ":", "\n", "        ", "new_t", "=", "Tensor", "(", "new_op", ",", "t", ".", "shape", ",", "t", ".", "dtype", ",", "t", ".", "name", ",", "i", ")", "\n", "new_t", ".", "usable", "=", "True", "\n", "new_op", ".", "_outputs", ".", "append", "(", "new_t", ")", "\n", "if", "t", "in", "mapping", ":", "\n", "          ", "raise", "ValueError", "(", "\n", "\"input mapping should not contain any of the outputs\"", "\n", "\" of the cloned operations\"", ")", "\n", "", "mapping", "[", "t", "]", "=", "new_t", "\n", "# pylint: enable=protected-access", "\n", "", "", "return", "self", ".", "operations", "[", "prev_num_operations", ":", "]", ",", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.capture_operations": [[663, 675], ["len", "fn"], "methods", ["None"], ["", "def", "capture_operations", "(", "self", ",", "fn", ")", ":", "\n", "    ", "\"\"\"Run a function and capture the list of operations it generates.\n\n    Args:\n      fn: a function taking no arguments\n    Returns:\n      fn_output: the function output\n      captured_operations: a list of Operation\n    \"\"\"", "\n", "n", "=", "len", "(", "self", ".", "operations", ")", "\n", "y", "=", "fn", "(", ")", "\n", "return", "y", ",", "self", ".", "operations", "[", "n", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.__init__": [[701, 757], ["ops.Lowering.autostack", "ops.log_variable_sizes", "ops.log_variable_sizes", "ops._log_info_also_to_file", "ops.Lowering.__init__.log_info"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.autostack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log_variable_sizes", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log_variable_sizes", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._log_info_also_to_file"], ["def", "__init__", "(", "self", ",", "graph", ",", "mesh_to_impl", ",", "autostack", "=", "True", ",", "log_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates a Lowering of a Graph.\n\n    Args:\n      graph: Graph.\n      mesh_to_impl: {Mesh: MeshImpl}. Keys are the Mesh's in the graph and\n        their values are MeshImpl's, which map Tensor Dimension names to\n        Mesh Dimension names.\n      autostack: a boolean.  If True, then the graph gets rewritten to\n        reduce the number of variables (see rewrite_stack_variables()).\n        This is a helpful performance optimization for large meshes.\n        For more fine-grained control, you can call\n        graph.rewrite_stack_variables() yourself before creating the Lowering.\n      log_file: an optional string. If provided, information about the variables\n        and operations will also be logged to this file.\n    \"\"\"", "\n", "# tf.logging.info(\"LOWERING GRAPH:\\n%s\" % graph.to_string)", "\n", "self", ".", "mesh_to_impl", "=", "mesh_to_impl", "# {Mesh: MeshImpl}", "\n", "self", ".", "graph", "=", "graph", "\n", "if", "autostack", ":", "\n", "      ", "self", ".", "autostack", "(", ")", "\n", "", "self", ".", "_counters", "=", "[", "]", "\n", "self", ".", "tensors", "=", "{", "}", "# {Tensor: Mesh.LaidOutTensor}", "\n", "self", ".", "operations", "=", "{", "}", "# {Operation: tf.Operation}", "\n", "self", ".", "variables", "=", "{", "}", "# {Variable: LaidOutVariable}", "\n", "for", "op", "in", "graph", ".", "operations", ":", "\n", "# tf.logging.info(\"Lowering operation %s\" % op.to_string)", "\n", "      ", "with", "tf", ".", "name_scope", "(", "op", ".", "name", ")", ":", "\n", "        ", "op", ".", "lower", "(", "self", ")", "\n", "", "for", "out", "in", "op", ".", "outputs", ":", "\n", "        ", "self", ".", "add_counter", "(", "\n", "\"output/%s\"", "%", "type", "(", "op", ")", ".", "__name__", ",", "self", ".", "laid_out_size", "(", "out", ")", ")", "\n", "self", ".", "add_counter", "(", "\"output_unique/%s\"", "%", "type", "(", "op", ")", ".", "__name__", ",", "out", ".", "size", ")", "\n", "\n", "", "", "def", "log_info", "(", "f", "=", "None", ")", ":", "\n", "      ", "\"\"\"Log the variables and operations, possibly to file `f` as well.\"\"\"", "\n", "log_variable_sizes", "(", "\n", "graph", ".", "trainable_variables", ",", "\n", "\"Trainable Variables\"", ",", "\n", "verbose", "=", "True", ",", "\n", "mesh_to_impl", "=", "self", ".", "mesh_to_impl", ",", "\n", "log_file", "=", "f", ")", "\n", "log_variable_sizes", "(", "\n", "graph", ".", "all_variables", ",", "\n", "\"All Variables\"", ",", "\n", "verbose", "=", "False", ",", "\n", "mesh_to_impl", "=", "self", ".", "mesh_to_impl", ",", "\n", "log_file", "=", "f", ")", "\n", "_log_info_also_to_file", "(", "\n", "\"Counters:\\n\"", "+", "pretty_print_counters", "(", "self", ".", "_counters", ")", ",", "log_file", "=", "f", ")", "\n", "\n", "", "if", "log_file", ":", "\n", "      ", "with", "tf", ".", "io", ".", "gfile", ".", "GFile", "(", "log_file", ",", "mode", "=", "\"w\"", ")", "as", "f", ":", "\n", "        ", "log_info", "(", "f", ")", "\n", "", "", "else", ":", "\n", "      ", "log_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.mesh_impl": [[758, 762], ["isinstance"], "methods", ["None"], ["", "", "def", "mesh_impl", "(", "self", ",", "m", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "m", ",", "Mesh", ")", ":", "\n", "      ", "m", "=", "m", ".", "mesh", "\n", "", "return", "self", ".", "mesh_to_impl", "[", "m", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.export_to_tf_tensor": [[763, 775], ["ops.Lowering.mesh_impl", "ops.Lowering.export_to_tf_tensor", "ops.Lowering.tensors[].to_laid_out_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor"], ["", "def", "export_to_tf_tensor", "(", "self", ",", "x", ")", ":", "\n", "    ", "\"\"\"Turn a Tensor into a tf.Tensor.\n\n    Args:\n      x: Tensor.\n\n    Returns:\n      tf.Tensor.\n    \"\"\"", "\n", "mesh_impl", "=", "self", ".", "mesh_impl", "(", "x", ")", "\n", "return", "mesh_impl", ".", "export_to_tf_tensor", "(", "\n", "x", ",", "self", ".", "tensors", "[", "x", "]", ".", "to_laid_out_tensor", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.lowered_operation": [[776, 778], ["None"], "methods", ["None"], ["", "def", "lowered_operation", "(", "self", ",", "op", ")", ":", "\n", "    ", "return", "self", ".", "operations", "[", "op", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices": [[779, 788], ["os.environ.get", "tensorflow.group", "len", "six.itervalues", "six.itervalues"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get"], ["", "def", "copy_masters_to_slices", "(", "self", ")", ":", "\n", "    ", "if", "os", ".", "environ", ".", "get", "(", "\"MTF_SEQUENCE_MODE\"", ",", "\"\"", ")", "==", "\"1\"", ":", "\n", "      ", "mesh_impls", "=", "[", "impl", "for", "impl", "in", "six", ".", "itervalues", "(", "self", ".", "mesh_to_impl", ")", "]", "\n", "assert", "len", "(", "mesh_impls", ")", "==", "1", "\n", "mesh_impl", "=", "mesh_impls", "[", "0", "]", "\n", "return", "mesh_impl", ".", "copy_master_to_slice_ops", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "      ", "return", "tf", ".", "group", "(", "\n", "[", "v", ".", "copy_master_to_slices", "for", "v", "in", "six", ".", "itervalues", "(", "self", ".", "variables", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_slices_to_masters": [[789, 792], ["tensorflow.group", "six.itervalues"], "methods", ["None"], ["", "", "def", "copy_slices_to_masters", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "group", "(", "\n", "[", "v", ".", "copy_slices_to_master", "for", "v", "in", "six", ".", "itervalues", "(", "self", ".", "variables", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter": [[793, 796], ["isinstance", "ops.Lowering._counters.append"], "methods", ["None"], ["", "def", "add_counter", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "    ", "assert", "isinstance", "(", "value", ",", "int", ")", "\n", "self", ".", "_counters", ".", "append", "(", "(", "key", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.counters": [[797, 800], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "counters", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_counters", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.laid_out_size": [[801, 811], ["ops.Lowering.mesh_impl().laid_out_size", "ops.Lowering.mesh_impl"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl"], ["", "def", "laid_out_size", "(", "self", ",", "tensor", ")", ":", "\n", "    ", "\"\"\"Total size of all slices.\n\n    Args:\n      tensor: Tensor.\n\n    Returns:\n      int.\n    \"\"\"", "\n", "return", "self", ".", "mesh_impl", "(", "tensor", ")", ".", "laid_out_size", "(", "tensor", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering": [[812, 815], ["ops.Lowering.verify_slice_shapes"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.verify_slice_shapes"], ["", "def", "set_tensor_lowering", "(", "self", ",", "tensor", ",", "laid_out_tensor", ")", ":", "\n", "    ", "self", ".", "verify_slice_shapes", "(", "tensor", ",", "laid_out_tensor", ")", "\n", "self", ".", "tensors", "[", "tensor", "]", "=", "laid_out_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.verify_slice_shapes": [[816, 824], ["ops.Lowering.mesh_impl", "ops.Lowering.slice_shape", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape"], ["", "def", "verify_slice_shapes", "(", "self", ",", "tensor", ",", "laid_out_tensor", ")", ":", "\n", "    ", "mesh_impl", "=", "self", ".", "mesh_impl", "(", "tensor", ")", "\n", "correct_shape", "=", "mesh_impl", ".", "slice_shape", "(", "tensor", ".", "shape", ")", "\n", "actual_shape", "=", "laid_out_tensor", ".", "slice_shape", "\n", "if", "actual_shape", "!=", "correct_shape", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Wrong slice shape: correct_shape = %s actual shape = %s\"", "\n", "%", "(", "correct_shape", ",", "actual_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.autostack": [[825, 840], ["ops.Lowering.graph.rewrite_stack_variables"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.rewrite_stack_variables"], ["", "", "def", "autostack", "(", "self", ")", ":", "\n", "    ", "\"\"\"Rewrite graph to combine similarly-shaped variables (faster startup).\"\"\"", "\n", "num_slices", "=", "0", "\n", "for", "v", "in", "self", ".", "graph", ".", "all_variables", ":", "\n", "      ", "num_slices", "+=", "self", ".", "mesh_to_impl", "[", "v", ".", "mesh", "]", ".", "size", "\n", "", "if", "num_slices", ">=", "2", "**", "16", ":", "\n", "# Startup times are slow with lots of variable slices.", "\n", "# Perform more aggressive stacking", "\n", "      ", "max_combined_slice_size", "=", "2", "**", "27", "\n", "", "else", ":", "\n", "# Stacking hurts memory utilization - only stack small variables.", "\n", "      ", "max_combined_slice_size", "=", "2", "**", "16", "\n", "", "self", ".", "graph", ".", "rewrite_stack_variables", "(", "\n", "mesh_to_impl", "=", "self", ".", "mesh_to_impl", ",", "\n", "max_combined_slice_size", "=", "max_combined_slice_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Mesh.__init__": [[851, 855], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "graph", ",", "name", ",", "variable_placer", "=", "None", ")", ":", "\n", "    ", "self", ".", "_graph", "=", "graph", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_variable_placer", "=", "variable_placer", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Mesh.graph": [[856, 859], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "graph", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Mesh.variable_placer_fn": [[860, 866], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "variable_placer_fn", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_variable_placer", "is", "not", "None", ":", "\n", "      ", "return", "self", ".", "_variable_placer", ".", "device_function", "\n", "", "else", ":", "\n", "      ", "return", "\"cpu:0\"", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.__init__": [[886, 895], ["ops.convert_to_shape", "ops.convert_to_layout_rules"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules"], ["def", "__init__", "(", "self", ",", "shape", ",", "layout_rules", ")", ":", "\n", "    ", "\"\"\"Creates a mesh implementation.\n\n    Args:\n      shape: Shape.\n      layout_rules: LayoutRules.\n    \"\"\"", "\n", "self", ".", "_shape", "=", "convert_to_shape", "(", "shape", ")", "\n", "self", ".", "_layout_rules", "=", "convert_to_layout_rules", "(", "layout_rules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.shape": [[896, 899], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.ndims": [[900, 903], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "ndims", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.layout_rules": [[904, 907], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "layout_rules", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_layout_rules", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.size": [[908, 911], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "shape", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.supports_control_dependencies": [[912, 915], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_control_dependencies", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis": [[916, 927], ["ops.MeshImpl.layout_rules.tensor_dimension_to_mesh_axis"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis"], ["", "def", "tensor_dimension_to_mesh_axis", "(", "self", ",", "tensor_dimension", ")", ":", "\n", "    ", "\"\"\"Mesh axis associated with tensor dimension (or None).\n\n    Args:\n      tensor_dimension: Dimension.\n\n    Returns:\n      int or None.\n    \"\"\"", "\n", "return", "self", ".", "layout_rules", ".", "tensor_dimension_to_mesh_axis", "(", "\n", "tensor_dimension", ",", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout": [[928, 940], ["isinstance", "ops.MeshImpl.layout_rules.tensor_layout"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout"], ["", "def", "tensor_layout", "(", "self", ",", "arg", ")", ":", "\n", "    ", "\"\"\"Compute TensorLayout for a Tensor or a Shape.\n\n    Args:\n      arg: Tensor or Shape.\n\n    Returns:\n      TensorLayout.\n    \"\"\"", "\n", "if", "isinstance", "(", "arg", ",", "Tensor", ")", ":", "\n", "      ", "arg", "=", "arg", ".", "shape", "\n", "", "return", "self", ".", "layout_rules", ".", "tensor_layout", "(", "arg", ",", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.mesh_axis_to_cumprod": [[941, 954], ["ops.MeshImpl.tensor_layout", "ops.MeshImpl.mesh_axis_to_tensor_axis"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.mesh_axis_to_tensor_axis"], ["", "def", "mesh_axis_to_cumprod", "(", "self", ",", "tensor_shape", ")", ":", "\n", "    ", "\"\"\"For each mesh axis, give the product of previous tensor axes.\n\n    Args:\n      tensor_shape: Shape.\n\n    Returns:\n      list with length self.ndims where each element is an integer or None.\n    \"\"\"", "\n", "tensor_layout", "=", "self", ".", "tensor_layout", "(", "tensor_shape", ")", "\n", "ma2ta", "=", "tensor_layout", ".", "mesh_axis_to_tensor_axis", "(", "self", ".", "ndims", ")", "\n", "ta2cumprod", "=", "tensor_shape", ".", "cumprod", "\n", "return", "[", "None", "if", "ta", "is", "None", "else", "ta2cumprod", "[", "ta", "]", "for", "ta", "in", "ma2ta", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slice_shape": [[955, 983], ["ops.MeshImpl.tensor_layout", "zip", "ret.append", "ret.append", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout"], ["", "def", "slice_shape", "(", "self", ",", "tensor_shape", ")", ":", "\n", "    ", "\"\"\"Shape of each slice of the Tensor.\n\n    Args:\n      tensor_shape: Shape.\n\n    Returns:\n      list of integers with length tensor_shape.ndims.\n\n    Raises:\n      ValueError: If a Tensor dimension is not divisible by the corresponding\n        Mesh dimension.\n    \"\"\"", "\n", "tensor_layout", "=", "self", ".", "tensor_layout", "(", "tensor_shape", ")", "\n", "ret", "=", "[", "]", "\n", "for", "tensor_dim", ",", "mesh_axis", "in", "zip", "(", "\n", "tensor_shape", ",", "tensor_layout", ".", "tensor_axis_to_mesh_axis", ")", ":", "\n", "      ", "if", "mesh_axis", "is", "None", ":", "\n", "        ", "ret", ".", "append", "(", "tensor_dim", ".", "size", ")", "\n", "", "else", ":", "\n", "        ", "mesh_dim", "=", "self", ".", "shape", "[", "mesh_axis", "]", "\n", "if", "tensor_dim", ".", "size", "%", "mesh_dim", ".", "size", "!=", "0", ":", "\n", "          ", "raise", "ValueError", "(", "\n", "\"Tensor dimension size not divisible by mesh dimension size:\"", "\n", "\" tensor_shape=%s tensor_layout=%s\"", "\n", "%", "(", "tensor_shape", ",", "tensor_layout", ")", ")", "\n", "", "ret", ".", "append", "(", "tensor_dim", ".", "size", "//", "mesh_dim", ".", "size", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slice_begin": [[984, 1005], ["ops.MeshImpl.tensor_layout", "ops.pnum_to_processor_coordinates", "zip", "ret.append", "ret.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pnum_to_processor_coordinates"], ["", "def", "slice_begin", "(", "self", ",", "tensor_shape", ",", "pnum", ")", ":", "\n", "    ", "\"\"\"Begin position for the tensor slice for the given processor.\n\n    Args:\n      tensor_shape: Shape.\n      pnum: int <= self.size.\n\n    Returns:\n      list of integers with length tensor_shape.ndims.\n    \"\"\"", "\n", "tensor_layout", "=", "self", ".", "tensor_layout", "(", "tensor_shape", ")", "\n", "coordinates", "=", "pnum_to_processor_coordinates", "(", "self", ".", "shape", ",", "pnum", ")", "\n", "ret", "=", "[", "]", "\n", "for", "dim_size", ",", "mesh_axis", "in", "zip", "(", "\n", "tensor_shape", ".", "to_integer_list", ",", "tensor_layout", ".", "tensor_axis_to_mesh_axis", ")", ":", "\n", "      ", "if", "mesh_axis", "is", "None", ":", "\n", "        ", "ret", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "ret", ".", "append", "(", "\n", "dim_size", "//", "self", ".", "shape", "[", "mesh_axis", "]", ".", "size", "*", "coordinates", "[", "mesh_axis", "]", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slice_size": [[1006, 1008], ["ops.list_product", "ops.MeshImpl.slice_shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape"], ["", "def", "slice_size", "(", "self", ",", "tensor_shape", ")", ":", "\n", "    ", "return", "list_product", "(", "self", ".", "slice_shape", "(", "tensor_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size": [[1009, 1019], ["ops.list_product", "ops.MeshImpl.slice_shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape"], ["", "def", "laid_out_size", "(", "self", ",", "tensor_shape", ")", ":", "\n", "    ", "\"\"\"Total size of all slices.\n\n    Args:\n      tensor_shape: Shape.\n\n    Returns:\n      int.\n    \"\"\"", "\n", "return", "list_product", "(", "self", ".", "slice_shape", "(", "tensor_shape", ")", ")", "*", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slicewise": [[1020, 1032], ["NotImplementedError"], "methods", ["None"], ["", "def", "slicewise", "(", "self", ",", "fn", ",", "*", "inputs", ")", ":", "\n", "    ", "\"\"\"Executes a function in parallel on all slices.\n\n    Args:\n      fn: function from tf.Tensors to tf.Tensor or a tuple of tf.Tensors.\n      *inputs: list of inputs.  Each input is either a LaidOutTensor or\n        has a to_laid_out_tensor method or is convertible to a tf.Tensor.\n\n    Returns:\n      LaidOutTensor, or a tuple of LaidOutTensors if fn returns a tuple.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Slicewise not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slicewise_delay_allreduce": [[1033, 1053], ["ops.compatible_lazy_allreduce_sums", "ops.LazyAllreduceSum", "ops.MeshImpl.slicewise", "ops.MeshImpl.slicewise"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.compatible_lazy_allreduce_sums", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise"], ["", "def", "slicewise_delay_allreduce", "(", "self", ",", "fn", ",", "*", "inputs", ")", ":", "\n", "    ", "\"\"\"If all the arguments are compatible LazyAllreduceSums, then stay lazy.\n\n    Args:\n      fn: function from tf.Tensors to tf.Tensor or a tuple of tf.Tensors.\n      *inputs: list of inputs.  Each input is either a LaidOutTensor or\n        has a to_laid_out_tensor method or is convertibleto a tf.Tensor.\n\n    Returns:\n      LaidOutTensor or LazyAllreduceSum\n    \"\"\"", "\n", "if", "compatible_lazy_allreduce_sums", "(", "inputs", ")", ":", "\n", "      ", "return", "LazyAllreduceSum", "(", "\n", "self", ",", "\n", "self", ".", "slicewise", "(", "\n", "fn", ",", "*", "[", "x", ".", "laid_out_input", "for", "x", "in", "inputs", "]", ")", ",", "\n", "inputs", "[", "0", "]", ".", "mesh_axes", ",", "\n", "add_counter_fn", "=", "inputs", "[", "0", "]", ".", "add_counter_fn", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "slicewise", "(", "fn", ",", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.Print": [[1054, 1069], ["tensorflow.logging.warning"], "methods", ["None"], ["", "", "def", "Print", "(", "self", ",", "x", ",", "data", ",", "message", ",", "**", "kwargs", ")", ":", "# pylint: disable=invalid-name", "\n", "    ", "\"\"\"Calls tf.Print.\n\n    Args:\n      x: LaidOutTensor.\n      data: list of LaidOutTensor.\n      message: str.\n      **kwargs: keyword arguments to tf.print.\n\n    Returns:\n      LaidOutTensor.\n    \"\"\"", "\n", "del", "data", ",", "message", ",", "kwargs", "\n", "tf", ".", "logging", ".", "warning", "(", "\"Warning - mtf.Print not implemented for this mesh type\"", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.allreduce": [[1070, 1082], ["NotImplementedError"], "methods", ["None"], ["", "def", "allreduce", "(", "self", ",", "x", ",", "mesh_axes", ",", "reduction_fn_string", ")", ":", "\n", "    ", "\"\"\"Grouped allreduce, (summed across the given dimensions).\n\n    Args:\n      x: LaidOutTensor.\n      mesh_axes: list of integers, the mesh dimensions to be reduced.\n      reduction_fn_string: \"SUM\" or \"MAX\".\n\n    Returns:\n      LaidOutTensor.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Allreduce not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.allsplit": [[1083, 1111], ["ops.MeshImpl.slicewise", "ops.MeshImpl.laid_out_pcoord", "tensorflow.slice", "enumerate", "enumerate", "x.shape.as_list", "x.shape.as_list"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_pcoord", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice"], ["", "def", "allsplit", "(", "self", ",", "x", ",", "mesh_axis", ",", "split_axis", ",", "which", "=", "None", ")", ":", "\n", "    ", "\"\"\"Inverse of allconcat - split each slice and keep only one piece of it.\n\n    The number of ways to split is the number of processors in the group.\n    The part that is kept corresponds to the processor's index in the group.\n\n    Args:\n      x: LaidOutTensor.\n      mesh_axis: int, the mesh axis along which to split.\n      split_axis: int, the Tensor axis along which to split.\n      which: an optional LaidOutTensor of integer scalars. Selects the slice to\n        to keep, instead of the coordinate.\n\n    Returns:\n      LaidOutTensor.\n    \"\"\"", "\n", "if", "which", "is", "None", ":", "\n", "      ", "which", "=", "self", ".", "laid_out_pcoord", "(", "mesh_axis", ")", "\n", "", "num_splits", "=", "self", ".", "shape", "[", "mesh_axis", "]", ".", "size", "\n", "def", "my_fn", "(", "x", ",", "which", ")", ":", "\n", "      ", "slice_begin", "=", "[", "\n", "dimsize", "//", "num_splits", "*", "which", "if", "i", "==", "split_axis", "else", "0", "\n", "for", "i", ",", "dimsize", "in", "enumerate", "(", "x", ".", "shape", ".", "as_list", "(", ")", ")", "]", "\n", "slice_size", "=", "[", "\n", "dimsize", "//", "num_splits", "if", "i", "==", "split_axis", "else", "dimsize", "\n", "for", "i", ",", "dimsize", "in", "enumerate", "(", "x", ".", "shape", ".", "as_list", "(", ")", ")", "]", "\n", "return", "tf", ".", "slice", "(", "x", ",", "slice_begin", ",", "slice_size", ")", "\n", "", "return", "self", ".", "slicewise", "(", "my_fn", ",", "x", ",", "which", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.allconcat": [[1112, 1124], ["NotImplementedError"], "methods", ["None"], ["", "def", "allconcat", "(", "self", ",", "x", ",", "mesh_axis", ",", "concat_axis", ")", ":", "\n", "    ", "\"\"\"Grouped allconcat (like MPI allgather followed by concat).\n\n    Args:\n      x: LaidOutTensor.\n      mesh_axis: int, the mesh axis along which to group.\n      concat_axis: int, the Tensor axis along which to concatenate.\n\n    Returns:\n      LaidOutTensor.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Allconcat not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.alltoall": [[1125, 1138], ["NotImplementedError"], "methods", ["None"], ["", "def", "alltoall", "(", "self", ",", "x", ",", "mesh_axis", ",", "split_axis", ",", "concat_axis", ")", ":", "\n", "    ", "\"\"\"Grouped alltoall (like MPI alltoall with splitting and concatenation).\n\n    Args:\n      x: LaidOutTensor.\n      mesh_axis: int, the mesh axis along which to group.\n      split_axis: int, the Tensor axis along which to split.\n      concat_axis: int, the Tensor axis along which to concatenate.\n\n    Returns:\n      LaidOutTensor.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Alltoall not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.receive": [[1139, 1162], ["NotImplementedError"], "methods", ["None"], ["", "def", "receive", "(", "self", ",", "x", ",", "mesh_axis", ",", "source_pcoord", ")", ":", "\n", "    ", "\"\"\"Collective receive in groups.\n\n    Each group contains the processors that differ only in mesh_axis.\n\n    ```python\n    group_size = self.shape[mesh_axis].size\n    ```\n\n    Args:\n      x: a LaidOutTensor\n      mesh_axis: an integer\n      source_pcoord: a list of optional integers. Each element is either None\n        or an integer in [0, group_size). If source_pcoord[k] is None, then the\n        output for the k-th processor in each group is a zero tensor. If\n        source_pcoord[k] is not None, then the output for the k-th processor in\n        each group is equal to the input for the source_pcoord[k]-th processor\n        in that group.\n\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Receive not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.shift_by_n_processors": [[1163, 1186], ["six.moves.xrange", "ops.MeshImpl.receive", "source_pcoord.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.receive"], ["", "def", "shift_by_n_processors", "(", "self", ",", "x", ",", "mesh_axis", ",", "offset", ",", "wrap", ")", ":", "\n", "    ", "\"\"\"Receive the slice from processor pcoord - offset.\n\n    Args:\n      x: a LaidOutTensor\n      mesh_axis: an integer\n      offset: an integer\n      wrap: a boolean. If True, then wrap around. Otherwise, pad with zeros.\n\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "n", "=", "self", ".", "shape", "[", "mesh_axis", "]", ".", "size", "\n", "source_pcoord", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "n", ")", ":", "\n", "      ", "c", "=", "i", "-", "offset", "\n", "if", "c", "!=", "c", "%", "n", ":", "\n", "        ", "if", "wrap", ":", "\n", "          ", "c", "=", "c", "%", "n", "\n", "", "else", ":", "\n", "          ", "c", "=", "None", "\n", "", "", "source_pcoord", ".", "append", "(", "c", ")", "\n", "", "return", "self", ".", "receive", "(", "x", ",", "mesh_axis", ",", "source_pcoord", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_pnum": [[1187, 1194], ["NotImplementedError"], "methods", ["None"], ["", "def", "laid_out_pnum", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns a LaidOutTensor containing the processor number.\n\n    Returns:\n      LaidOutTensor where each slice is an integer scalar.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"laid_out_pnum not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_pcoord": [[1195, 1211], ["ops.list_product", "ops.MeshImpl.slicewise", "ops.MeshImpl.laid_out_pnum", "tensorflow.cast", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.laid_out_pnum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "laid_out_pcoord", "(", "self", ",", "mesh_axis", ")", ":", "\n", "    ", "\"\"\"Returns a LaidOutTensor containing the processor coordinate.\n\n    Args:\n      mesh_axis: int.\n\n    Returns:\n      LaidOutTensor where each slice is an integer scalar.\n    \"\"\"", "\n", "divisor", "=", "list_product", "(", "self", ".", "shape", ".", "to_integer_list", "[", "mesh_axis", "+", "1", ":", "]", ")", "\n", "modulus", "=", "self", ".", "shape", "[", "mesh_axis", "]", ".", "size", "\n", "def", "my_fn", "(", "pnum", ")", ":", "\n", "# TODO(noam): casting to float32 for the floordiv masks a bug.", "\n", "#  document and file the bug.", "\n", "      ", "return", "tf", ".", "cast", "(", "(", "tf", ".", "cast", "(", "pnum", ",", "tf", ".", "float32", ")", "//", "divisor", ")", ",", "tf", ".", "int32", ")", "%", "modulus", "\n", "", "return", "self", ".", "slicewise", "(", "my_fn", ",", "self", ".", "laid_out_pnum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_slice_num": [[1212, 1232], ["ops.MeshImpl.slicewise", "ops.MeshImpl.tensor_layout", "tensorflow.to_int32", "ops.MeshImpl.slicewise", "ops.MeshImpl.laid_out_pcoord"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_pcoord"], ["", "def", "laid_out_slice_num", "(", "self", ",", "tensor_shape", ")", ":", "\n", "    ", "\"\"\"A LaidOutTensor with an int32 scalar, identical for identical slices.\n\n    This is useful for synchronizing random operations.\n\n    Args:\n      tensor_shape: a TensorShape\n    Returns:\n      a LaidOutTensor where each slice is an integer scalar.\n    \"\"\"", "\n", "ret", "=", "self", ".", "slicewise", "(", "lambda", ":", "tf", ".", "to_int32", "(", "0", ")", ")", "\n", "tensor_layout", "=", "self", ".", "tensor_layout", "(", "tensor_shape", ")", "\n", "for", "mesh_axis", "in", "tensor_layout", ".", "tensor_axis_to_mesh_axis", ":", "\n", "      ", "if", "mesh_axis", "is", "not", "None", ":", "\n", "        ", "def", "my_fn", "(", "x", ",", "pcoord", ",", "mesh_dim_size", ")", ":", "\n", "          ", "return", "x", "*", "mesh_dim_size", "+", "pcoord", "\n", "", "ret", "=", "self", ".", "slicewise", "(", "\n", "my_fn", ",", "ret", ",", "self", ".", "laid_out_pcoord", "(", "mesh_axis", ")", ",", "\n", "self", ".", "shape", "[", "mesh_axis", "]", ".", "size", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.broadcast_impl": [[1233, 1249], ["ops.MeshImpl.slice_shape", "ops.MeshImpl.slicewise", "tensorflow.zeros", "ops._expand_dims"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._expand_dims"], ["", "def", "broadcast_impl", "(", "self", ",", "old_slices", ",", "old_shape", ",", "new_shape", ")", ":", "\n", "    ", "\"\"\"Implementation of a broadcast operation.\n\n    Args:\n      old_slices: LaidOutTensor.\n      old_shape: Shape.\n      new_shape: Shape.\n\n    Returns:\n      LaidOutTensor.\n    \"\"\"", "\n", "new_slice_shape", "=", "self", ".", "slice_shape", "(", "new_shape", ")", "\n", "def", "tf_fn", "(", "x", ")", ":", "\n", "      ", "return", "(", "tf", ".", "zeros", "(", "new_slice_shape", ",", "dtype", "=", "x", ".", "dtype", ")", "+", "\n", "_expand_dims", "(", "x", ",", "old_shape", ",", "new_shape", ")", ")", "\n", "", "return", "self", ".", "slicewise", "(", "tf_fn", ",", "old_slices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.make_slices": [[1250, 1271], ["ops.MeshImpl.tensor_layout", "ops.MeshImpl.slice_shape", "ops.parallel", "list", "ops.MeshImpl.slice_begin", "tensorflow.slice", "six.moves.xrange"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.parallel", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slice_begin", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice"], ["", "def", "make_slices", "(", "self", ",", "tf_tensor", ",", "tensor_shape", ")", ":", "\n", "    ", "\"\"\"Turns a single tf.Tensor into a list of slices, one for each processor.\n\n    Args:\n      tf_tensor: tf.Tensor.\n      tensor_shape: Shape.\n\n    Returns:\n      list of tf.tensor with length self.size.\n    \"\"\"", "\n", "tensor_layout", "=", "self", ".", "tensor_layout", "(", "tensor_shape", ")", "\n", "slice_shape", "=", "self", ".", "slice_shape", "(", "tensor_shape", ")", "\n", "def", "my_fn", "(", "pnum", ")", ":", "\n", "      ", "if", "tensor_layout", ".", "is_fully_replicated", ":", "\n", "        ", "return", "tf_tensor", "\n", "", "else", ":", "\n", "        ", "slice_begin", "=", "self", ".", "slice_begin", "(", "tensor_shape", ",", "pnum", ")", "\n", "return", "tf", ".", "slice", "(", "tf_tensor", ",", "slice_begin", ",", "slice_shape", ")", "\n", "\n", "", "", "return", "parallel", "(", "[", "tf_tensor", ".", "device", "]", "*", "self", ".", "size", ",", "my_fn", ",", "\n", "list", "(", "xrange", "(", "self", ".", "size", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.combine_slices": [[1272, 1307], ["ops.MeshImpl.tensor_layout", "zip", "ops.MeshImpl.mesh_axis_to_tensor_axis", "len", "len", "six.moves.xrange", "ops.parallel", "concat_inputs.append", "six.moves.xrange", "len", "six.moves.xrange"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TensorLayout.mesh_axis_to_tensor_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.parallel"], ["", "def", "combine_slices", "(", "self", ",", "slices", ",", "tensor_shape", ",", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"Turns a set of slices into a single tensor.\n\n    Args:\n      slices: list of tf.Tensor with length self.size.\n      tensor_shape: Shape.\n      device: optional str. If absent, we use the devices of the slices.\n\n    Returns:\n      tf.Tensor.\n    \"\"\"", "\n", "if", "tensor_shape", ".", "ndims", "==", "0", ":", "\n", "      ", "return", "slices", "[", "0", "]", "\n", "\n", "", "ret", "=", "slices", "[", ":", "]", "\n", "tensor_layout", "=", "self", ".", "tensor_layout", "(", "tensor_shape", ")", "\n", "for", "mesh_dim", ",", "tensor_axis", "in", "zip", "(", "\n", "self", ".", "shape", ",", "tensor_layout", ".", "mesh_axis_to_tensor_axis", "(", "self", ".", "ndims", ")", ")", ":", "\n", "      ", "slice_size", "=", "len", "(", "ret", ")", "//", "mesh_dim", ".", "size", "\n", "if", "tensor_axis", "is", "None", ":", "\n", "        ", "ret", "=", "ret", "[", ":", "slice_size", "]", "\n", "", "else", ":", "\n", "        ", "if", "device", ":", "\n", "          ", "devices", "=", "[", "device", "]", "*", "slice_size", "\n", "", "else", ":", "\n", "          ", "devices", "=", "[", "ret", "[", "i", "]", ".", "device", "for", "i", "in", "xrange", "(", "slice_size", ")", "]", "\n", "", "concat_inputs", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "slice_size", ")", ":", "\n", "          ", "concat_inputs", ".", "append", "(", "\n", "[", "ret", "[", "i", "+", "slice_size", "*", "j", "]", "for", "j", "in", "xrange", "(", "mesh_dim", ".", "size", ")", "]", ")", "\n", "", "ret", "=", "parallel", "(", "\n", "devices", ",", "tf", ".", "concat", ",", "concat_inputs", ",", "\n", "axis", "=", "[", "tensor_axis", "]", "*", "len", "(", "devices", ")", ")", "\n", "", "", "assert", "len", "(", "ret", ")", "==", "1", "\n", "return", "ret", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.export_to_tf_tensor": [[1308, 1319], ["NotImplementedError"], "methods", ["None"], ["", "def", "export_to_tf_tensor", "(", "self", ",", "x", ",", "laid_out_x", ")", ":", "\n", "    ", "\"\"\"Turns a Tensor into a tf.Tensor.\n\n    Args:\n      x: Tensor.\n      laid_out_x: LaidOutTensor.\n\n    Returns:\n      tf.Tensor.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"export_to_tf_tensor not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.import_tf_tensor": [[1320, 1331], ["NotImplementedError"], "methods", ["None"], ["", "def", "import_tf_tensor", "(", "self", ",", "x", ",", "tf_x", ")", ":", "\n", "    ", "\"\"\"Imports a tf.Tensor, producing a LaidOutTensor.\n\n    Args:\n      x: Tensor.\n      tf_x: tf.Tensor.\n\n    Returns:\n      LaidOutTensor.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Import not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.einsum": [[1332, 1342], ["tensorflow.einsum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "einsum", "(", "self", ",", "equation", ",", "*", "slices", ")", ":", "\n", "    ", "\"\"\"Override this for custom einsum implementation.\n\n    Args:\n      equation: a string\n      *slices: a list of tf.Tensor\n    Returns:\n      a Tensor\n    \"\"\"", "\n", "return", "tf", ".", "einsum", "(", "equation", ",", "*", "slices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyAllreduceSum.__init__": [[1351, 1372], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "mesh_impl", ",", "\n", "laid_out_input", ",", "\n", "mesh_axes", ",", "\n", "add_counter_fn", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create a LazyAllreduceSum.\n\n    Args:\n      mesh_impl: a mesh_impl\n      laid_out_input: a LaidOutTensor\n      mesh_axes: a list of mesh axes\n      add_counter_fn: a function taking no arguments which calls\n        lowering.add_counter if and when the allreduce executes.\n    Returns:\n      a LazyAllreduceSum\n    \"\"\"", "\n", "self", ".", "mesh_impl", "=", "mesh_impl", "\n", "self", ".", "laid_out_input", "=", "laid_out_input", "\n", "self", ".", "mesh_axes", "=", "mesh_axes", "\n", "self", ".", "add_counter_fn", "=", "add_counter_fn", "\n", "self", ".", "_reduced", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyAllreduceSum.to_laid_out_tensor": [[1373, 1380], ["ops.LazyAllreduceSum.mesh_impl.allreduce", "ops.LazyAllreduceSum.add_counter_fn"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.allreduce"], ["", "def", "to_laid_out_tensor", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "_reduced", ":", "\n", "      ", "self", ".", "_reduced", "=", "self", ".", "mesh_impl", ".", "allreduce", "(", "\n", "self", ".", "laid_out_input", ",", "self", ".", "mesh_axes", ",", "\"SUM\"", ")", "\n", "if", "self", ".", "add_counter_fn", ":", "\n", "        ", "self", ".", "add_counter_fn", "(", ")", "\n", "", "", "return", "self", ".", "_reduced", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyAllreduceSum.slice_shape": [[1381, 1384], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "slice_shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "laid_out_input", ".", "slice_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__init__": [[1427, 1451], ["isinstance", "ValueError", "isinstance", "ValueError", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "operation", ",", "shape", ",", "dtype", ",", "name", "=", "None", ",", "index", "=", "0", ")", ":", "\n", "    ", "\"\"\"Create a Tensor.\n\n    Args:\n      operation: the Operation that outputs this tensor\n      shape: a Shape\n      dtype: a tf.DType\n      name: an optional string\n      index: optional integer, the index among operation's output tensors\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "shape", ",", "Shape", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"shape must be a Shape got %s\"", "%", "shape", ".", "to_string", ")", "\n", "", "if", "not", "isinstance", "(", "dtype", ",", "tf", ".", "DType", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"dtype must be a tf.DType got %s\"", "%", "dtype", ")", "\n", "", "self", ".", "_mesh", "=", "operation", ".", "mesh", "\n", "self", ".", "_operation", "=", "operation", "\n", "self", ".", "_shape", "=", "shape", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "if", "name", "is", "None", ":", "\n", "      ", "name", "=", "self", ".", "operation", ".", "name", "+", "\":\"", "+", "str", "(", "index", ")", "\n", "", "self", ".", "_name", "=", "name", "\n", "# A flag that we can turn off to assert that no one uses the tensor", "\n", "#   as the input to an operation.", "\n", "self", ".", "usable", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.shape": [[1452, 1455], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.size": [[1456, 1459], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "shape", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.mesh": [[1460, 1463], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mesh", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.graph": [[1464, 1467], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "graph", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_mesh", ".", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.operation": [[1468, 1471], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "operation", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_operation", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.dtype": [[1472, 1475], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.name": [[1476, 1479], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__repr__": [[1480, 1482], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "to_string", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__add__": [[1483, 1485], ["ops.add"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "add", "(", "self", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__radd__": [[1486, 1488], ["ops.add"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add"], ["", "def", "__radd__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "add", "(", "self", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__sub__": [[1489, 1491], ["ops.sub"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sub"], ["", "def", "__sub__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "sub", "(", "self", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__rsub__": [[1492, 1494], ["ops.sub"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sub"], ["", "def", "__rsub__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "sub", "(", "other", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__mul__": [[1495, 1497], ["ops.multiply"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.multiply"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "multiply", "(", "self", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__rmul__": [[1498, 1500], ["ops.multiply"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.multiply"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "multiply", "(", "self", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__neg__": [[1501, 1503], ["ops.negative"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.negative"], ["", "def", "__neg__", "(", "self", ")", ":", "\n", "    ", "return", "negative", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__truediv__": [[1504, 1506], ["ops.divide"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.divide"], ["", "def", "__truediv__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "divide", "(", "self", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__rtruediv__": [[1507, 1509], ["ops.divide"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.divide"], ["", "def", "__rtruediv__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "divide", "(", "other", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__floordiv__": [[1510, 1512], ["ops.floordiv"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.floordiv"], ["", "def", "__floordiv__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "floordiv", "(", "self", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__rfloordiv__": [[1513, 1515], ["ops.floordiv"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.floordiv"], ["", "def", "__rfloordiv__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "floordiv", "(", "other", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__mod__": [[1516, 1518], ["ops.mod"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mod"], ["", "def", "__mod__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "mod", "(", "self", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.__rmod__": [[1519, 1521], ["ops.mod"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mod"], ["", "def", "__rmod__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "mod", "(", "other", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Tensor.to_string": [[1522, 1525], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "to_string", "(", "self", ")", ":", "\n", "    ", "return", "\"Tensor[%s, %s, %s]\"", "%", "(", "self", ".", "name", ",", "self", ".", "shape", ".", "to_string", ",", "self", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.__init__": [[1530, 1557], ["ops.Operation._initialize_all_dimensions_as_splittable", "mesh.graph.unique_name", "mesh.graph.operations.append", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.unique_name"], ["def", "__init__", "(", "self", ",", "inputs", ",", "mesh", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      inputs: a list of Tensor\n      mesh: an optional Mesh (if unspecified, will be inferred from first input)\n      name: a string, which will get uniquified (in TensorFlow style)\n\n    Raises:\n      ValueError: mesh was not provided and there were no inputs to infer from.\n    \"\"\"", "\n", "if", "mesh", "is", "None", ":", "\n", "      ", "if", "not", "inputs", ":", "\n", "        ", "raise", "ValueError", "(", "\"mesh must be specified if no inputs\"", ")", "\n", "", "mesh", "=", "inputs", "[", "0", "]", ".", "mesh", "\n", "", "self", ".", "_inputs", "=", "inputs", "[", ":", "]", "\n", "self", ".", "_outputs", "=", "[", "]", "\n", "self", ".", "_mesh", "=", "mesh", "\n", "# In a default operation, all dimensions are splittable.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "assert", "name", "is", "not", "None", "\n", "self", ".", "_name", "=", "mesh", ".", "graph", ".", "unique_name", "(", "name", ")", "\n", "mesh", ".", "graph", ".", "operations", ".", "append", "(", "self", ")", "\n", "for", "t", "in", "inputs", ":", "\n", "      ", "if", "not", "t", ".", "usable", ":", "\n", "        ", "raise", "ValueError", "(", "\"Operation %s has unusable input %s\"", "%", "(", "self", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.graph": [[1558, 1561], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "graph", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_mesh", ".", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.mesh": [[1562, 1565], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mesh", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.name": [[1566, 1569], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.inputs": [[1570, 1573], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inputs", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_inputs", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.outputs": [[1574, 1577], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "outputs", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_outputs", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.splittable_dims": [[1578, 1582], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "splittable_dims", "(", "self", ")", ":", "\n", "    ", "\"\"\"Frozenset of the names of dims safe to split when lowering this op.\"\"\"", "\n", "return", "self", ".", "_splittable_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.unsplittable_dims": [[1583, 1587], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unsplittable_dims", "(", "self", ")", ":", "\n", "    ", "\"\"\"Frozenset of the names of dims unsafe to split when lowering this op.\"\"\"", "\n", "return", "self", ".", "_unsplittable_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.to_string": [[1588, 1594], ["type"], "methods", ["None"], ["", "@", "property", "\n", "def", "to_string", "(", "self", ")", ":", "\n", "    ", "return", "\"%s[Inputs=(%s) Outputs=(%s)]\"", "%", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "\n", "\", \"", ".", "join", "(", "[", "t", ".", "to_string", "for", "t", "in", "self", ".", "inputs", "]", ")", ",", "\n", "\", \"", ".", "join", "(", "[", "t", ".", "to_string", "for", "t", "in", "self", ".", "outputs", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.has_gradient": [[1595, 1600], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_gradient", "(", "self", ")", ":", "\n", "    ", "return", "(", "\n", "[", "t", "for", "t", "in", "self", ".", "inputs", "if", "t", ".", "dtype", ".", "is_floating", "]", "and", "\n", "[", "t", "for", "t", "in", "self", ".", "outputs", "if", "t", ".", "dtype", ".", "is_floating", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.gradient": [[1601, 1603], ["NotImplementedError"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "unused_grad_ys", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\"Gradient not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation.lower": [[1604, 1606], ["NotImplementedError"], "methods", ["None"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\"Lower not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims": [[1607, 1646], ["set", "set", "itertools.chain", "set.update", "frozenset", "frozenset", "ValueError", "set.add", "frozenset", "frozenset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add"], ["", "def", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "self", ",", "default_splittability", ",", "exception_dims_iterable", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializer for splittable_dims and unsplittable_dims.\n\n    Helper method to categorize all dimensions in the input/output tensors as\n    either splittable or unsplittable.\n\n    Args:\n      default_splittability: a string which is either \"splittable\" or\n        \"unsplittable\".\n      exception_dims_iterable: an optional iterable of names of dimensions\n        which are exceptions to the default splittability.\n\n    Returns:\n      splittable_dims and unsplittable_dims, two frozensets of names of\n        dimensions (strings)\n\n    Raises:\n      ValueError: default_splittability is not one of \"splittable\" or\n        \"unsplittable\".\n    \"\"\"", "\n", "default_dims", "=", "set", "(", ")", "\n", "exception_dims", "=", "set", "(", ")", "\n", "if", "exception_dims_iterable", ":", "\n", "      ", "exception_dims", ".", "update", "(", "exception_dims_iterable", ")", "\n", "\n", "", "for", "t", "in", "itertools", ".", "chain", "(", "self", ".", "inputs", ",", "self", ".", "outputs", ")", ":", "\n", "      ", "for", "dim_name", "in", "t", ".", "shape", ".", "dimension_names", ":", "\n", "        ", "if", "dim_name", "not", "in", "exception_dims", ":", "\n", "          ", "default_dims", ".", "add", "(", "dim_name", ")", "\n", "\n", "", "", "", "if", "default_splittability", "==", "\"splittable\"", ":", "\n", "      ", "return", "frozenset", "(", "default_dims", ")", ",", "frozenset", "(", "exception_dims", ")", "\n", "", "elif", "default_splittability", "==", "\"unsplittable\"", ":", "\n", "      ", "return", "frozenset", "(", "exception_dims", ")", ",", "frozenset", "(", "default_dims", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"default_splittability should be either \\\"splittable\\\" \"", "\n", "\"or \\\"unsplittable\\\" but was {}\"", "\n", ".", "format", "(", "default_splittability", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable": [[1647, 1650], ["ops.Operation._initialize_splittable_and_unsplittable_dims"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["", "", "def", "_initialize_all_dimensions_as_splittable", "(", "self", ")", ":", "\n", "    ", "\"\"\"Helper init for the most common case: all dimensions may be split.\"\"\"", "\n", "return", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\"splittable\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.SlicewiseOperation.__init__": [[1665, 1699], ["ops.Operation.__init__", "ops.SlicewiseOperation._initialize_splittable_and_unsplittable_dims", "ops.Tensor", "zip"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "\n", "tf_fn", ",", "\n", "inputs", ",", "\n", "output_shapes", ",", "\n", "output_dtypes", ",", "\n", "splittable_dims", ",", "\n", "grad_function", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create a SlicewiseOperation.\n\n    grad_function is a python function taking this operation and a gradients\n    Tensor and producing input gradients tensors.\n    e.g.\n    def _square_grad(op, dy):\n      return [dy * op.inputs[0] * 2]\n\n    Args:\n      tf_fn: a function taking n tf.Tensors and returning a tf.Tensor\n      inputs: a list of n Tensors\n      output_shapes: a list of Shapes\n      output_dtypes: a list of dtypes\n      splittable_dims: a list of Dimensions which are ok to split\n      grad_function: an optional python function. Default to using tf.gradients\n        pass in the number 0 to indicate no gradient\n      name: an optional string\n    \"\"\"", "\n", "super", "(", "SlicewiseOperation", ",", "self", ")", ".", "__init__", "(", "inputs", ",", "name", "=", "name", "or", "\"slicewise\"", ")", "\n", "self", ".", "_tf_fn", "=", "tf_fn", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "shape", ",", "dtype", ")", "for", "(", "shape", ",", "dtype", ")", "\n", "in", "zip", "(", "output_shapes", ",", "output_dtypes", ")", "]", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"unsplittable\"", ",", "[", "dim", ".", "name", "for", "dim", "in", "splittable_dims", "]", ")", ")", "\n", "self", ".", "_grad_function", "=", "grad_function", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.SlicewiseOperation.has_gradient": [[1700, 1705], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_gradient", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_grad_function", "==", "0", ":", "\n", "      ", "return", "False", "\n", "", "return", "super", "(", "SlicewiseOperation", ",", "self", ")", ".", "has_gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.SlicewiseOperation.gradient": [[1706, 1710], ["ops.SlicewiseOperation._grad_function", "ops.GenericGradOperation"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "if", "self", ".", "_grad_function", "is", "not", "None", ":", "\n", "      ", "return", "self", ".", "_grad_function", "(", "self", ",", "*", "grad_ys", ")", "\n", "", "return", "GenericGradOperation", "(", "self", ",", "grad_ys", ")", ".", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.SlicewiseOperation.lower": [[1711, 1725], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "zip", "lowering.mesh_impl.tensor_layout", "zip", "len", "lowering.set_tensor_lowering", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "# Check that only splittable dims are split", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "for", "t", "in", "self", ".", "inputs", "+", "self", ".", "outputs", ":", "\n", "      ", "layout", "=", "mesh_impl", ".", "tensor_layout", "(", "t", ")", "\n", "for", "d", ",", "mesh_axis", "in", "zip", "(", "t", ".", "shape", ".", "dims", ",", "layout", ".", "tensor_axis_to_mesh_axis", ")", ":", "\n", "        ", "if", "mesh_axis", "is", "not", "None", "and", "d", ".", "name", "not", "in", "self", ".", "_splittable_dims", ":", "\n", "          ", "raise", "ValueError", "(", "\"dimension %s is not declared as splittable\"", "%", "d", ")", "\n", "", "", "", "values", "=", "mesh_impl", ".", "slicewise", "(", "\n", "self", ".", "_tf_fn", ",", "*", "[", "lowering", ".", "tensors", "[", "x", "]", "for", "x", "in", "self", ".", "inputs", "]", ")", "\n", "if", "len", "(", "self", ".", "outputs", ")", "==", "1", ":", "\n", "      ", "values", "=", "values", ",", "\n", "", "for", "output", ",", "value", "in", "zip", "(", "self", ".", "outputs", ",", "values", ")", ":", "\n", "      ", "lowering", ".", "set_tensor_lowering", "(", "output", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.GenericGradOperation.__init__": [[1978, 1988], ["ops.Operation.__init__", "ops.Tensor", "enumerate"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "forward_op", ",", "grad_ys", ",", "name", "=", "None", ")", ":", "\n", "# tf.logging.info(\"forward inp %s, operations %s, grad_ys: %s\",", "\n", "#                 forward_op.inputs, forward_op.outputs, grad_ys)", "\n", "    ", "super", "(", "GenericGradOperation", ",", "self", ")", ".", "__init__", "(", "\n", "forward_op", ".", "inputs", "+", "forward_op", ".", "outputs", "+", "grad_ys", ",", "\n", "name", "=", "name", "or", "\"generic_grad\"", ")", "\n", "self", ".", "_grad_ys", "=", "grad_ys", "\n", "self", ".", "_forward_op", "=", "forward_op", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "x", ".", "shape", ",", "x", ".", "dtype", ",", "index", "=", "i", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "forward_op", ".", "inputs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.GenericGradOperation.lower": [[1989, 2010], ["ops.transpose_list_of_lists", "ops.transpose_list_of_lists", "ops.transpose_list_of_lists", "ops.transpose_list_of_lists", "zip", "tensorflow.gradients", "lowering.set_tensor_lowering", "zip", "lowering.mesh_impl().LaidOutTensor.from_tensor_list", "lowering.mesh_impl"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose_list_of_lists", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose_list_of_lists", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose_list_of_lists", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose_list_of_lists", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "# lists of lists of tf.Tensor", "\n", "    ", "all_ys", "=", "transpose_list_of_lists", "(", "\n", "[", "lowering", ".", "tensors", "[", "y", "]", ".", "tensor_list", "for", "y", "in", "self", ".", "_forward_op", ".", "outputs", "]", ")", "\n", "all_xs", "=", "transpose_list_of_lists", "(", "\n", "[", "lowering", ".", "tensors", "[", "x", "]", ".", "tensor_list", "for", "x", "in", "self", ".", "_forward_op", ".", "inputs", "]", ")", "\n", "all_grad_ys", "=", "transpose_list_of_lists", "(", "\n", "[", "lowering", ".", "tensors", "[", "dy", "]", ".", "tensor_list", "for", "dy", "in", "self", ".", "_grad_ys", "]", ")", "\n", "all_grad_xs", "=", "[", "\n", "tf", ".", "gradients", "(", "# pylint: disable=g-complex-comprehension", "\n", "ys", "=", "ys", ",", "\n", "xs", "=", "xs", ",", "\n", "grad_ys", "=", "grad_ys", ",", "\n", "unconnected_gradients", "=", "tf", ".", "UnconnectedGradients", ".", "ZERO", ")", "\n", "for", "ys", ",", "xs", ",", "grad_ys", "in", "zip", "(", "all_ys", ",", "all_xs", ",", "all_grad_ys", ")", "\n", "]", "\n", "grad_xs", "=", "transpose_list_of_lists", "(", "all_grad_xs", ")", "\n", "for", "out", ",", "grad_x", "in", "zip", "(", "self", ".", "outputs", ",", "grad_xs", ")", ":", "\n", "      ", "lowering", ".", "set_tensor_lowering", "(", "\n", "out", ",", "\n", "lowering", ".", "mesh_impl", "(", "self", ")", ".", "LaidOutTensor", ".", "from_tensor_list", "(", "grad_x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ScalarMultiplyOperation.__init__": [[2015, 2020], ["ops.Operation.__init__", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "x", ",", "scalar", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "ScalarMultiplyOperation", ",", "self", ")", ".", "__init__", "(", "\n", "[", "x", "]", ",", "name", "=", "name", "or", "\"scalar_mul\"", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "x", ".", "shape", ",", "x", ".", "dtype", ")", "]", "\n", "self", ".", "_scalar", "=", "scalar", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ScalarMultiplyOperation.gradient": [[2021, 2024], ["None"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "dy", "=", "grad_ys", "[", "0", "]", "\n", "return", "[", "dy", "*", "self", ".", "_scalar", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ScalarMultiplyOperation.lower": [[2025, 2030], ["lowering.set_tensor_lowering", "lowering.mesh_impl().slicewise", "lowering.mesh_impl"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "lowering", ".", "set_tensor_lowering", "(", "\n", "self", ".", "outputs", "[", "0", "]", ",", "\n", "lowering", ".", "mesh_impl", "(", "self", ")", ".", "slicewise", "(", "\n", "lambda", "x", ":", "x", "*", "self", ".", "_scalar", ",", "lowering", ".", "tensors", "[", "self", ".", "inputs", "[", "0", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ScalarAddOperation.__init__": [[2035, 2039], ["ops.Operation.__init__", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "x", ",", "scalar", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "ScalarAddOperation", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "name", "=", "name", "or", "\"scalar_add\"", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "x", ".", "shape", ",", "x", ".", "dtype", ")", "]", "\n", "self", ".", "_scalar", "=", "scalar", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ScalarAddOperation.gradient": [[2040, 2042], ["None"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "return", "grad_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ScalarAddOperation.lower": [[2043, 2048], ["lowering.set_tensor_lowering", "lowering.mesh_impl().slicewise", "lowering.mesh_impl"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "lowering", ".", "set_tensor_lowering", "(", "\n", "self", ".", "outputs", "[", "0", "]", ",", "\n", "lowering", ".", "mesh_impl", "(", "self", ")", ".", "slicewise", "(", "\n", "lambda", "x", ":", "x", "+", "self", ".", "_scalar", ",", "lowering", ".", "tensors", "[", "self", ".", "inputs", "[", "0", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.BinaryOpWithBroadcasting.__init__": [[2053, 2068], ["ops.Operation.__init__", "isinstance", "ops.BinaryOpWithBroadcasting._initialize_all_dimensions_as_splittable", "ValueError", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable"], ["def", "__init__", "(", "self", ",", "tf_fn", ",", "x1", ",", "x2", ",", "output_shape", ",", "output_dtype", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "BinaryOpWithBroadcasting", ",", "self", ")", ".", "__init__", "(", "\n", "[", "x1", ",", "x2", "]", ",", "name", "=", "name", "or", "\"binary_op\"", ")", "\n", "if", "x1", ".", "dtype", "!=", "x2", ".", "dtype", ":", "\n", "# If there is ever a binary operation with different operand types, then", "\n", "# we should add an argument allow_different_operand_dtypes=False.", "\n", "      ", "raise", "ValueError", "(", "\"Dtypes must be equal- got %s and %s\"", "\n", "%", "(", "x1", ".", "dtype", ",", "x2", ".", "dtype", ")", ")", "\n", "", "assert", "isinstance", "(", "output_dtype", ",", "tf", ".", "DType", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "output_dtype", ")", "]", "\n", "self", ".", "_tf_fn", "=", "tf_fn", "\n", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.BinaryOpWithBroadcasting.gradient": [[2069, 2071], ["ValueError"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "unused_grad_ys", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"Gradient not implememnted\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.BinaryOpWithBroadcasting.lower": [[2072, 2091], ["lowering.mesh_impl", "lowering.set_tensor_lowering", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.slicewise_delay_allreduce", "lowering.mesh_impl.slicewise"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slicewise_delay_allreduce", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "x1", "=", "self", ".", "inputs", "[", "0", "]", "\n", "x2", "=", "self", ".", "inputs", "[", "1", "]", "\n", "output", "=", "self", ".", "outputs", "[", "0", "]", "\n", "laid_out_x1", "=", "lowering", ".", "tensors", "[", "x1", "]", "\n", "laid_out_x2", "=", "lowering", ".", "tensors", "[", "x2", "]", "\n", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "if", "x1", ".", "shape", "!=", "output", ".", "shape", ":", "\n", "      ", "laid_out_x1", "=", "mesh_impl", ".", "slicewise", "(", "\n", "_expand_dims", ",", "laid_out_x1", ",", "x1", ".", "shape", ",", "output", ".", "shape", ")", "\n", "", "if", "x2", ".", "shape", "!=", "output", ".", "shape", ":", "\n", "      ", "laid_out_x2", "=", "mesh_impl", ".", "slicewise", "(", "\n", "_expand_dims", ",", "laid_out_x2", ",", "x2", ".", "shape", ",", "output", ".", "shape", ")", "\n", "", "if", "self", ".", "_tf_fn", "==", "tf", ".", "add", ":", "\n", "      ", "out", "=", "mesh_impl", ".", "slicewise_delay_allreduce", "(", "\n", "self", ".", "_tf_fn", ",", "laid_out_x1", ",", "laid_out_x2", ")", "\n", "", "else", ":", "\n", "      ", "out", "=", "mesh_impl", ".", "slicewise", "(", "self", ".", "_tf_fn", ",", "laid_out_x1", ",", "laid_out_x2", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.AddOperation.__init__": [[2185, 2188], ["ops.BinaryOpWithBroadcasting.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "x1", ",", "x2", ",", "output_shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "AddOperation", ",", "self", ")", ".", "__init__", "(", "\n", "tf", ".", "add", ",", "x1", ",", "x2", ",", "output_shape", ",", "x1", ".", "dtype", ",", "name", "=", "name", "or", "\"add\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.AddOperation.gradient": [[2189, 2193], ["ops.reduce_sum", "ops.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "dy", "=", "grad_ys", "[", "0", "]", "\n", "return", "[", "reduce_sum", "(", "dy", ",", "output_shape", "=", "self", ".", "inputs", "[", "0", "]", ".", "shape", ")", ",", "\n", "reduce_sum", "(", "dy", ",", "output_shape", "=", "self", ".", "inputs", "[", "1", "]", ".", "shape", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MinMaxOperation.__init__": [[2198, 2201], ["ops.BinaryOpWithBroadcasting.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "tf_fn", ",", "x1", ",", "x2", ",", "output_shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "MinMaxOperation", ",", "self", ")", ".", "__init__", "(", "\n", "tf_fn", ",", "x1", ",", "x2", ",", "output_shape", ",", "x1", ".", "dtype", ",", "name", "=", "name", "or", "\"add\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MinMaxOperation.gradient": [[2202, 2206], ["ops.cast", "ops.cast", "ops.equal", "ops.equal"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "dy", "=", "grad_ys", "[", "0", "]", "\n", "return", "[", "dy", "*", "cast", "(", "equal", "(", "self", ".", "inputs", "[", "0", "]", ",", "self", ".", "outputs", "[", "0", "]", ")", ",", "dy", ".", "dtype", ")", ",", "\n", "dy", "*", "cast", "(", "equal", "(", "self", ".", "inputs", "[", "1", "]", ",", "self", ".", "outputs", "[", "0", "]", ")", ",", "dy", ".", "dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.BroadcastOperation.__init__": [[2249, 2255], ["ops.Operation.__init__", "ops.BroadcastOperation._initialize_all_dimensions_as_splittable", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable"], ["def", "__init__", "(", "self", ",", "x", ",", "output_shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "BroadcastOperation", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "name", "=", "name", "or", "\"broadcast\"", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "x", ".", "dtype", ")", "]", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.BroadcastOperation.gradient": [[2256, 2258], ["ops.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "return", "[", "reduce_sum", "(", "grad_ys", "[", "0", "]", ",", "output_shape", "=", "self", ".", "inputs", "[", "0", "]", ".", "shape", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.BroadcastOperation.lower": [[2259, 2264], ["lowering.mesh_impl().broadcast_impl", "lowering.set_tensor_lowering", "lowering.mesh_impl"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.broadcast_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "ret", "=", "lowering", ".", "mesh_impl", "(", "self", ")", ".", "broadcast_impl", "(", "\n", "lowering", ".", "tensors", "[", "self", ".", "inputs", "[", "0", "]", "]", ",", "self", ".", "inputs", "[", "0", "]", ".", "shape", ",", "\n", "self", ".", "outputs", "[", "0", "]", ".", "shape", ")", "\n", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ReduceOperation.__init__": [[2311, 2315], ["ops.Operation.__init__", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "x", ",", "output_shape", ",", "reduction_fn_string", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "ReduceOperation", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "name", "=", "name", "or", "\"reduce\"", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "x", ".", "dtype", ")", "]", "\n", "self", ".", "_reduction_fn_string", "=", "reduction_fn_string", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ReduceOperation.gradient": [[2316, 2325], ["ops.broadcast", "ValueError", "ops.cast", "ops.equal"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.broadcast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "if", "self", ".", "_reduction_fn_string", "==", "\"SUM\"", ":", "\n", "      ", "return", "[", "broadcast", "(", "grad_ys", "[", "0", "]", ",", "self", ".", "inputs", "[", "0", "]", ".", "shape", ")", "]", "\n", "", "elif", "(", "self", ".", "_reduction_fn_string", "==", "\"MAX\"", "or", "\n", "self", ".", "_reduction_fn_string", "==", "\"MIN\"", ")", ":", "\n", "      ", "return", "[", "cast", "(", "equal", "(", "self", ".", "inputs", "[", "0", "]", ",", "self", ".", "outputs", "[", "0", "]", ")", ",", "self", ".", "inputs", "[", "0", "]", ".", "dtype", ")", "\n", "*", "grad_ys", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Gradients to other reductions not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ReduceOperation.lower": [[2326, 2345], ["lowering.mesh_impl", "ops._reduce_helper", "lowering.mesh_impl.slicewise", "lowering.set_tensor_lowering", "lowering.mesh_impl.tensor_layout", "lowering.add_counter", "ops.LazyAllreduceSum", "lowering.mesh_impl.allreduce", "ops.ReduceOperation.lower.add_counter_fn"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._reduce_helper", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.allreduce"], ["", "", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "slicewise_fn", ",", "reduced_mesh_axes", "=", "_reduce_helper", "(", "\n", "self", ".", "inputs", "[", "0", "]", ".", "shape", ",", "self", ".", "outputs", "[", "0", "]", ".", "shape", ",", "\n", "mesh_impl", ".", "tensor_layout", "(", "self", ".", "inputs", "[", "0", "]", ")", ",", "\n", "self", ".", "_reduction_fn_string", ")", "\n", "y", "=", "mesh_impl", ".", "slicewise", "(", "slicewise_fn", ",", "lowering", ".", "tensors", "[", "self", ".", "inputs", "[", "0", "]", "]", ")", "\n", "if", "reduced_mesh_axes", ":", "\n", "      ", "def", "add_counter_fn", "(", ")", ":", "\n", "        ", "lowering", ".", "add_counter", "(", "\"allreduce/%s/reduce_op\"", "%", "reduced_mesh_axes", ",", "\n", "lowering", ".", "laid_out_size", "(", "self", ".", "outputs", "[", "0", "]", ")", ")", "\n", "", "if", "self", ".", "_reduction_fn_string", "==", "\"SUM\"", ":", "\n", "        ", "y", "=", "LazyAllreduceSum", "(", "\n", "mesh_impl", ",", "y", ",", "reduced_mesh_axes", ",", "add_counter_fn", "=", "add_counter_fn", ")", "\n", "", "else", ":", "\n", "        ", "y", "=", "mesh_impl", ".", "allreduce", "(", "\n", "y", ",", "reduced_mesh_axes", ",", "self", ".", "_reduction_fn_string", ")", "\n", "add_counter_fn", "(", ")", "\n", "", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.PoolOperation.__init__": [[2416, 2453], ["ops.Operation.__init__", "zip", "ops.Shape", "ops.PoolOperation._initialize_splittable_and_unsplittable_dims", "Dimension", "output_spatial_dims.append", "ops.Tensor", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "x", ",", "ksize", ",", "strides", ",", "pool_fn_string", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "PoolOperation", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "name", "=", "name", "or", "\"pool\"", ")", "\n", "assert", "ksize", "==", "strides", "\n", "if", "\"2D\"", "in", "pool_fn_string", ":", "\n", "      ", "assert", "len", "(", "ksize", ")", "==", "2", "\n", "", "else", ":", "\n", "      ", "assert", "\"3D\"", "in", "pool_fn_string", "\n", "assert", "len", "(", "ksize", ")", "==", "3", "\n", "\n", "", "self", ".", "_ksize", "=", "ksize", "\n", "self", ".", "_strides", "=", "strides", "\n", "self", ".", "_pool_fn_string", "=", "pool_fn_string", "\n", "\n", "if", "\"2D\"", "in", "pool_fn_string", ":", "\n", "      ", "batch_dims", "=", "x", ".", "shape", ".", "dims", "[", ":", "-", "3", "]", "\n", "spatial_dims", "=", "x", ".", "shape", ".", "dims", "[", "-", "3", ":", "-", "1", "]", "\n", "channel_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", "\n", "", "else", ":", "\n", "      ", "batch_dims", "=", "x", ".", "shape", ".", "dims", "[", ":", "-", "4", "]", "\n", "spatial_dims", "=", "x", ".", "shape", ".", "dims", "[", "-", "4", ":", "-", "1", "]", "\n", "channel_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", "\n", "\n", "# Compute output_shape and allocate output Tensor.", "\n", "", "output_spatial_dims", "=", "[", "]", "\n", "for", "spatial_dim", ",", "kernel_size", ",", "stride_size", "in", "zip", "(", "\n", "spatial_dims", ",", "ksize", ",", "strides", ")", ":", "\n", "      ", "output_dim_size", "=", "(", "spatial_dim", ".", "size", "-", "kernel_size", ")", "//", "stride_size", "+", "1", "\n", "output_spatial_dim", "=", "Dimension", "(", "spatial_dim", ".", "name", ",", "output_dim_size", ")", "\n", "output_spatial_dims", ".", "append", "(", "output_spatial_dim", ")", "\n", "\n", "", "output_shape", "=", "Shape", "(", "batch_dims", "+", "output_spatial_dims", "+", "channel_dim", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "x", ".", "dtype", ")", "]", "\n", "\n", "# Claim unsplittable dims.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "dim", ".", "name", "for", "dim", "in", "spatial_dims", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.PoolOperation.gradient": [[2454, 2462], ["ops.pool_backprop"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pool_backprop"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "\"\"\"Returns the gradient to input, for unoverlapping pooling.\"\"\"", "\n", "x", "=", "self", ".", "inputs", "[", "0", "]", "\n", "y", "=", "self", ".", "outputs", "[", "0", "]", "\n", "dy", "=", "grad_ys", "[", "0", "]", "\n", "dx", "=", "pool_backprop", "(", "x", ",", "y", ",", "dy", ",", "\n", "self", ".", "_ksize", ",", "self", ".", "_strides", ",", "self", ".", "_pool_fn_string", ")", "\n", "return", "[", "dx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.PoolOperation.lower": [[2463, 2472], ["lowering.mesh_impl", "ops._pool_helper", "lowering.mesh_impl.slicewise", "lowering.set_tensor_lowering"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._pool_helper", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "slicewise_fn", "=", "_pool_helper", "(", "\n", "self", ".", "_ksize", ",", "self", ".", "_strides", ",", "self", ".", "_pool_fn_string", ")", "\n", "\n", "x", "=", "lowering", ".", "tensors", "[", "self", ".", "inputs", "[", "0", "]", "]", "\n", "y", "=", "mesh_impl", ".", "slicewise", "(", "slicewise_fn", ",", "x", ")", "\n", "\n", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.PoolBackPropOperation.__init__": [[2481, 2496], ["ops.Operation.__init__", "ops.Tensor", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "x", ",", "y", ",", "dy", ",", "\n", "ksize", ",", "strides", ",", "pool_fn_string", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "PoolBackPropOperation", ",", "self", ")", ".", "__init__", "(", "\n", "[", "x", ",", "y", ",", "dy", "]", ",", "name", "=", "name", "or", "\"pool_backprop\"", ")", "\n", "assert", "ksize", "==", "strides", "\n", "if", "\"2D\"", "in", "pool_fn_string", ":", "\n", "      ", "assert", "len", "(", "ksize", ")", "==", "2", "\n", "", "else", ":", "\n", "      ", "assert", "\"3D\"", "in", "pool_fn_string", "\n", "assert", "len", "(", "ksize", ")", "==", "3", "\n", "\n", "", "self", ".", "_ksize", "=", "ksize", "\n", "self", ".", "_strides", "=", "strides", "\n", "self", ".", "_pool_fn_string", "=", "pool_fn_string", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "x", ".", "shape", ",", "dy", ".", "dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.PoolBackPropOperation.lower": [[2497, 2531], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "lowering.set_tensor_lowering", "ops._tf_upscale", "ops._tf_upscale", "tensorflow.cast", "ops._tf_upscale", "ops._tf_upscale", "tensorflow.equal", "tensorflow.cast", "ops._tf_upscale", "ValueError", "tensorflow.equal", "tensorflow.constant", "ops._tf_upscale", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_upscale", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_upscale", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_upscale", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_upscale", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_upscale", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_upscale", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "\"\"\"Returns the gradient to input, for unoverlapping pooling.\"\"\"", "\n", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "\n", "if", "self", ".", "_pool_fn_string", "==", "\"MAX_2D\"", ":", "\n", "      ", "def", "slicewise_fn", "(", "x", ",", "y", ",", "dy", ")", ":", "\n", "        ", "y_scaled_back", "=", "_tf_upscale", "(", "y", ",", "-", "3", ",", "-", "1", ",", "self", ".", "_strides", ")", "\n", "dy_scaled_back", "=", "_tf_upscale", "(", "dy", ",", "-", "3", ",", "-", "1", ",", "self", ".", "_strides", ")", "\n", "return", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "x", ",", "y_scaled_back", ")", ",", "x", ".", "dtype", ")", "*", "dy_scaled_back", "\n", "", "", "elif", "self", ".", "_pool_fn_string", "==", "\"MAX_3D\"", ":", "\n", "      ", "def", "slicewise_fn", "(", "x", ",", "y", ",", "dy", ")", ":", "\n", "        ", "y_scaled_back", "=", "_tf_upscale", "(", "y", ",", "-", "4", ",", "-", "1", ",", "self", ".", "_strides", ")", "\n", "dy_scaled_back", "=", "_tf_upscale", "(", "dy", ",", "-", "4", ",", "-", "1", ",", "self", ".", "_strides", ")", "\n", "return", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "x", ",", "y_scaled_back", ")", ",", "x", ".", "dtype", ")", "*", "dy_scaled_back", "\n", "", "", "elif", "self", ".", "_pool_fn_string", "==", "\"AVG_2D\"", ":", "\n", "      ", "def", "slicewise_fn", "(", "x", ",", "y", ",", "dy", ")", ":", "\n", "        ", "del", "y", "\n", "dy_scaled_back", "=", "_tf_upscale", "(", "dy", ",", "-", "3", ",", "-", "1", ",", "self", ".", "_strides", ")", "\n", "return", "dy_scaled_back", "/", "tf", ".", "constant", "(", "\n", "self", ".", "_strides", "[", "0", "]", "*", "self", ".", "_strides", "[", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "", "elif", "self", ".", "_pool_fn_string", "==", "\"AVG_3D\"", ":", "\n", "      ", "def", "slicewise_fn", "(", "x", ",", "y", ",", "dy", ")", ":", "\n", "        ", "del", "y", "\n", "dy_scaled_back", "=", "_tf_upscale", "(", "dy", ",", "-", "4", ",", "-", "1", ",", "self", ".", "_strides", ")", "\n", "return", "dy_scaled_back", "/", "tf", ".", "constant", "(", "\n", "self", ".", "_strides", "[", "0", "]", "*", "self", ".", "_strides", "[", "1", "]", "*", "self", ".", "_strides", "[", "2", "]", ",", "\n", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Pooling %s is not implemented.\"", "%", "self", ".", "_pool_fn_string", ")", "\n", "\n", "", "dx", "=", "mesh_impl", ".", "slicewise", "(", "\n", "slicewise_fn", ",", "*", "[", "lowering", ".", "tensors", "[", "x", "]", "for", "x", "in", "self", ".", "inputs", "]", ")", "\n", "\n", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "dx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ConcatOperation.__init__": [[2546, 2570], ["ops.Operation.__init__", "dim_names.index", "sum", "ops.ConcatOperation._initialize_splittable_and_unsplittable_dims", "ValueError", "x.shape.resize_dimension", "all", "ValueError", "ops.Tensor", "xs[].shape.resize_dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.resize_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.resize_dimension"], ["def", "__init__", "(", "self", ",", "xs", ",", "concat_dim_name", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "ConcatOperation", ",", "self", ")", ".", "__init__", "(", "xs", ",", "name", "=", "name", "or", "\"concat\"", ")", "\n", "# verify that the shapes are all compatible", "\n", "dim_names", "=", "[", "dim", ".", "name", "for", "dim", "in", "xs", "[", "0", "]", ".", "shape", ".", "dims", "]", "\n", "self", ".", "_concat_dim_name", "=", "concat_dim_name", "\n", "\n", "if", "concat_dim_name", "not", "in", "dim_names", ":", "\n", "      ", "raise", "ValueError", "(", "\"xs[0] does not contain a dimension named dim_name\"", ")", "\n", "", "self", ".", "_axis", "=", "dim_names", ".", "index", "(", "concat_dim_name", ")", "\n", "\n", "should_be_equal", "=", "[", "\n", "x", ".", "shape", ".", "resize_dimension", "(", "concat_dim_name", ",", "0", ")", "for", "x", "in", "xs", "]", "\n", "if", "not", "all", "(", "s", "==", "should_be_equal", "[", "0", "]", "for", "s", "in", "should_be_equal", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"shapes are not compatible %s\"", "%", "xs", ")", "\n", "\n", "", "self", ".", "_input_sizes", "=", "[", "x", ".", "shape", ".", "dims", "[", "self", ".", "_axis", "]", ".", "size", "for", "x", "in", "xs", "]", "\n", "output_size", "=", "sum", "(", "self", ".", "_input_sizes", ")", "\n", "self", ".", "_outputs", "=", "[", "\n", "Tensor", "(", "self", ",", "xs", "[", "0", "]", ".", "shape", ".", "resize_dimension", "(", "concat_dim_name", ",", "output_size", ")", ",", "\n", "xs", "[", "0", "]", ".", "dtype", ")", "]", "\n", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "concat_dim_name", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ConcatOperation.gradient": [[2571, 2574], ["ops.split"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "dy", "=", "grad_ys", "[", "0", "]", "\n", "return", "split", "(", "dy", ",", "self", ".", "outputs", "[", "0", "]", ".", "shape", ".", "dims", "[", "self", ".", "_axis", "]", ",", "self", ".", "_input_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ConcatOperation.lower": [[2575, 2585], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "lowering.set_tensor_lowering", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "tensorflow.concat", "Dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "\n", "Dimension", "(", "self", ".", "_concat_dim_name", ",", "0", ")", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't concat along split axis\"", ")", "\n", "", "def", "slicewise_fn", "(", "*", "args", ")", ":", "\n", "      ", "return", "tf", ".", "concat", "(", "args", ",", "axis", "=", "self", ".", "_axis", ",", "name", "=", "\"concat\"", ")", "\n", "", "y", "=", "mesh_impl", ".", "slicewise", "(", "\n", "slicewise_fn", ",", "*", "[", "lowering", ".", "tensors", "[", "x", "]", "for", "x", "in", "self", ".", "_inputs", "]", ")", "\n", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.SplitOperation.__init__": [[2610, 2637], ["ops.Operation.__init__", "x.shape.dims.index", "isinstance", "ops.SplitOperation._initialize_splittable_and_unsplittable_dims", "ValueError", "isinstance", "ops.Tensor", "sum", "ValueError", "x.shape.resize_dimension", "enumerate"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.resize_dimension"], ["def", "__init__", "(", "self", ",", "x", ",", "split_dim", ",", "num_or_size_splits", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "SplitOperation", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "name", "=", "name", "or", "\"split\"", ")", "\n", "\n", "self", ".", "_split_dim", "=", "split_dim", "\n", "if", "split_dim", "not", "in", "x", ".", "shape", ".", "dims", ":", "\n", "      ", "raise", "ValueError", "(", "\"%s does not contain dimension %s\"", "%", "(", "x", ",", "split_dim", ")", ")", "\n", "", "self", ".", "_axis", "=", "x", ".", "shape", ".", "dims", ".", "index", "(", "split_dim", ")", "\n", "\n", "if", "isinstance", "(", "num_or_size_splits", ",", "list", ")", ":", "\n", "      ", "self", ".", "_output_sizes", "=", "num_or_size_splits", "\n", "if", "sum", "(", "num_or_size_splits", ")", "!=", "split_dim", ".", "size", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Sizes do not add up %s %s\"", "%", "(", "num_or_size_splits", ",", "split_dim", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "assert", "isinstance", "(", "num_or_size_splits", ",", "int", ")", "\n", "assert", "split_dim", ".", "size", "%", "num_or_size_splits", "==", "0", "\n", "self", ".", "_output_sizes", "=", "(", "\n", "[", "split_dim", ".", "size", "//", "num_or_size_splits", "]", "*", "num_or_size_splits", ")", "\n", "\n", "", "self", ".", "_outputs", "=", "[", "\n", "Tensor", "(", "self", ",", "x", ".", "shape", ".", "resize_dimension", "(", "split_dim", ".", "name", ",", "output_size", ")", ",", "\n", "x", ".", "dtype", ",", "index", "=", "i", ")", "\n", "for", "i", ",", "output_size", "in", "enumerate", "(", "self", ".", "_output_sizes", ")", "]", "\n", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "split_dim", ".", "name", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.SplitOperation.gradient": [[2638, 2641], ["ops.concat", "ops.zeros_like", "zip"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "grad_ys", "=", "[", "g", "or", "zeros_like", "(", "o", ")", "for", "g", ",", "o", "in", "zip", "(", "grad_ys", ",", "self", ".", "_outputs", ")", "]", "\n", "return", "[", "concat", "(", "grad_ys", ",", "self", ".", "_split_dim", ".", "name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.SplitOperation.lower": [[2642, 2654], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "zip", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "tuple", "lowering.set_tensor_lowering", "tensorflow.split"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_split_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't split along split axis\"", ")", "\n", "", "def", "slicewise_fn", "(", "x", ")", ":", "\n", "# Since we return a tuple of tf.Tensor, slicewise will collate the", "\n", "# outputs and return a tuple of LaidOutTensors.", "\n", "      ", "return", "tuple", "(", "tf", ".", "split", "(", "x", ",", "self", ".", "_output_sizes", ",", "axis", "=", "self", ".", "_axis", ")", ")", "\n", "", "values", "=", "mesh_impl", ".", "slicewise", "(", "\n", "slicewise_fn", ",", "lowering", ".", "tensors", "[", "self", ".", "inputs", "[", "0", "]", "]", ")", "\n", "for", "t", ",", "v", "in", "zip", "(", "self", ".", "_outputs", ",", "values", ")", ":", "\n", "      ", "lowering", ".", "set_tensor_lowering", "(", "t", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackOperation.__init__": [[2674, 2690], ["ops.Operation.__init__", "Dimension", "ops.Shape", "ops.StackOperation._initialize_splittable_and_unsplittable_dims", "len", "ops.Tensor", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "xs", ",", "dim_name", ",", "axis", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "StackOperation", ",", "self", ")", ".", "__init__", "(", "xs", ",", "name", "=", "name", "or", "\"stack\"", ")", "\n", "self", ".", "_axis", "=", "axis", "\n", "self", ".", "_new_dim", "=", "Dimension", "(", "dim_name", ",", "len", "(", "xs", ")", ")", "\n", "input_shape", "=", "xs", "[", "0", "]", ".", "shape", "\n", "for", "x", "in", "xs", ":", "\n", "      ", "if", "x", ".", "shape", "!=", "xs", "[", "0", "]", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"inputs to stack must have the same shape, got %s\"", "%", "xs", ")", "\n", "", "", "output_shape", "=", "Shape", "(", "\n", "input_shape", ".", "dims", "[", ":", "axis", "]", "+", "[", "self", ".", "_new_dim", "]", "+", "input_shape", ".", "dims", "[", "axis", ":", "]", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "xs", "[", "0", "]", ".", "dtype", ")", "]", "\n", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "dim_name", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackOperation.gradient": [[2691, 2693], ["ops.unstack"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.unstack"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "return", "unstack", "(", "grad_ys", "[", "0", "]", ",", "self", ".", "_new_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackOperation.lower": [[2694, 2703], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "lowering.set_tensor_lowering", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "tensorflow.stack"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_new_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't stack along split axis\"", ")", "\n", "", "inputs", "=", "[", "lowering", ".", "tensors", "[", "t", "]", "for", "t", "in", "self", ".", "_inputs", "]", "\n", "def", "slicewise_fn", "(", "*", "args", ")", ":", "\n", "      ", "return", "tf", ".", "stack", "(", "args", ",", "axis", "=", "self", ".", "_axis", ")", "\n", "", "ret", "=", "mesh_impl", ".", "slicewise", "(", "slicewise_fn", ",", "*", "inputs", ")", "\n", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.UnstackOperation.__init__": [[2726, 2737], ["ops.Operation.__init__", "x.shape.dims.index", "ops.UnstackOperation._initialize_splittable_and_unsplittable_dims", "ops.Tensor", "six.moves.xrange"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "x", ",", "dim", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "UnstackOperation", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "name", "=", "name", "or", "\"unstack\"", ")", "\n", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_axis", "=", "x", ".", "shape", ".", "dims", ".", "index", "(", "dim", ")", "\n", "output_shape", "=", "x", ".", "shape", "-", "dim", "\n", "self", ".", "_outputs", "=", "[", "\n", "Tensor", "(", "self", ",", "output_shape", ",", "x", ".", "dtype", ",", "index", "=", "i", ")", "for", "i", "in", "xrange", "(", "dim", ".", "size", ")", "]", "\n", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "dim", ".", "name", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.UnstackOperation.gradient": [[2738, 2740], ["ops.stack"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "return", "[", "stack", "(", "grad_ys", ",", "self", ".", "_dim", ".", "name", ",", "self", ".", "_axis", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.UnstackOperation.lower": [[2741, 2751], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "zip", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "tuple", "list", "lowering.set_tensor_lowering", "tensorflow.unstack"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.unstack"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't unstack along split axis\"", ")", "\n", "", "def", "slicewise_fn", "(", "x", ")", ":", "\n", "      ", "return", "tuple", "(", "tf", ".", "unstack", "(", "x", ",", "num", "=", "self", ".", "_dim", ".", "size", ",", "axis", "=", "self", ".", "_axis", ")", ")", "\n", "", "output_values", "=", "mesh_impl", ".", "slicewise", "(", "\n", "slicewise_fn", ",", "lowering", ".", "tensors", "[", "self", ".", "_inputs", "[", "0", "]", "]", ")", "\n", "for", "t", ",", "v", "in", "zip", "(", "self", ".", "outputs", ",", "list", "(", "output_values", ")", ")", ":", "\n", "      ", "lowering", ".", "set_tensor_lowering", "(", "t", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.EinsumOperation.__init__": [[2842, 2851], ["ops.Operation.__init__", "ValueError", "ops.Tensor", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "inputs", ",", "output_shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "EinsumOperation", ",", "self", ")", ".", "__init__", "(", "inputs", ",", "name", "=", "name", "or", "\"einsum\"", ")", "\n", "if", "not", "inputs", ":", "\n", "      ", "raise", "ValueError", "(", "\"Einsum needs at least one input\"", ")", "\n", "", "for", "x", "in", "inputs", ":", "\n", "      ", "if", "x", ".", "dtype", "!=", "inputs", "[", "0", "]", ".", "dtype", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input dtypes must be equal got %s\"", "\n", "%", "(", "[", "y", ".", "dtype", "for", "y", "in", "inputs", "]", ",", ")", ")", "\n", "", "", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "inputs", "[", "0", "]", ".", "dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.EinsumOperation.gradient": [[2852, 2861], ["six.moves.xrange", "len", "ret.append", "ops.einsum", "six.moves.xrange", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "dy", "=", "grad_ys", "[", "0", "]", "\n", "xs", "=", "self", ".", "inputs", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "len", "(", "self", ".", "inputs", ")", ")", ":", "\n", "      ", "ret", ".", "append", "(", "\n", "einsum", "(", "[", "dy", "]", "+", "[", "xs", "[", "j", "]", "for", "j", "in", "xrange", "(", "len", "(", "xs", ")", ")", "if", "j", "!=", "i", "]", ",", "xs", "[", "i", "]", ".", "shape", ")", "\n", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.EinsumOperation.lower": [[2862, 2887], ["lowering.mesh_impl", "set", "ops.Shape", "ops._einsum_helper", "lowering.mesh_impl.slicewise", "lowering.set_tensor_lowering", "ops.Shape", "lowering.add_counter", "lowering.add_counter", "sum", "ops.LazyAllreduceSum", "lowering.mesh_impl.broadcast_impl", "list", "lowering.mesh_impl.laid_out_size", "lowering.add_counter", "lowering.mesh_impl.laid_out_size"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._einsum_helper", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.broadcast_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "xs", "=", "self", ".", "inputs", "\n", "input_shape_set", "=", "set", "(", "sum", "(", "[", "x", ".", "shape", ".", "dims", "for", "x", "in", "xs", "]", ",", "[", "]", ")", ")", "\n", "output_shape", "=", "self", ".", "outputs", "[", "0", "]", ".", "shape", "\n", "intersection_shape", "=", "Shape", "(", "\n", "[", "d", "for", "d", "in", "output_shape", ".", "dims", "if", "d", "in", "input_shape_set", "]", ")", "\n", "einsum_slice_fn", ",", "reduced_mesh_axes", "=", "_einsum_helper", "(", "\n", "[", "x", ".", "shape", "for", "x", "in", "self", ".", "inputs", "]", ",", "intersection_shape", ",", "mesh_impl", ")", "\n", "y", "=", "mesh_impl", ".", "slicewise", "(", "\n", "einsum_slice_fn", ",", "*", "[", "lowering", ".", "tensors", "[", "x", "]", "for", "x", "in", "self", ".", "inputs", "]", ")", "\n", "if", "reduced_mesh_axes", ":", "\n", "      ", "def", "add_counter_fn", "(", ")", ":", "\n", "        ", "lowering", ".", "add_counter", "(", "\n", "\"allreduce/%s/einsum_op\"", "%", "reduced_mesh_axes", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "intersection_shape", ")", ")", "\n", "", "y", "=", "LazyAllreduceSum", "(", "\n", "mesh_impl", ",", "y", ",", "reduced_mesh_axes", ",", "add_counter_fn", "=", "add_counter_fn", ")", "\n", "# broadcast from intersection_shape to output_shape", "\n", "", "if", "intersection_shape", "!=", "output_shape", ":", "\n", "      ", "y", "=", "mesh_impl", ".", "broadcast_impl", "(", "y", ",", "intersection_shape", ",", "output_shape", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "y", ")", "\n", "computation_shape", "=", "Shape", "(", "list", "(", "input_shape_set", ")", ")", "\n", "lowering", ".", "add_counter", "(", "\"einsum\"", ",", "mesh_impl", ".", "laid_out_size", "(", "computation_shape", ")", ")", "\n", "lowering", ".", "add_counter", "(", "\"einsum_unique\"", ",", "computation_shape", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv2dOperation.__init__": [[2900, 2932], ["ops.Operation.__init__", "Dimension", "Dimension", "ops.Shape", "ops.Conv2dOperation._initialize_splittable_and_unsplittable_dims", "ValueError", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "conv_input", ",", "conv_filter", ",", "strides", ",", "padding", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "Conv2dOperation", ",", "self", ")", ".", "__init__", "(", "\n", "[", "conv_input", ",", "conv_filter", "]", ",", "name", "=", "name", "or", "\"conv2d\"", ")", "\n", "self", ".", "_padding", "=", "padding", "\n", "self", ".", "_batch_dims", "=", "conv_input", ".", "shape", ".", "dims", "[", ":", "-", "3", "]", "\n", "self", ".", "_in_h_dim", ",", "self", ".", "_in_w_dim", ",", "self", ".", "_in_dim", "=", "conv_input", ".", "shape", ".", "dims", "[", "-", "3", ":", "]", "\n", "self", ".", "_fh_dim", ",", "self", ".", "_fw_dim", "=", "conv_filter", ".", "shape", ".", "dims", "[", ":", "2", "]", "\n", "f_in_dim", ",", "self", ".", "_out_dim", "=", "conv_filter", ".", "shape", ".", "dims", "[", "2", ":", "]", "\n", "if", "f_in_dim", "!=", "self", ".", "_in_dim", ":", "\n", "      ", "raise", "ValueError", "(", "\"Dimensions do not match input=%s filter=%s\"", "\n", "%", "(", "conv_input", ",", "conv_filter", ")", ")", "\n", "", "out_h", "=", "self", ".", "_in_h_dim", ".", "size", "\n", "out_w", "=", "self", ".", "_in_w_dim", ".", "size", "\n", "if", "padding", "==", "\"VALID\"", ":", "\n", "      ", "out_h", "-=", "(", "self", ".", "_fh_dim", ".", "size", "-", "1", ")", "\n", "out_w", "-=", "(", "self", ".", "_fw_dim", ".", "size", "-", "1", ")", "\n", "\n", "", "self", ".", "_strides", "=", "strides", "\n", "if", "strides", "is", "not", "None", ":", "\n", "      ", "out_h", "//=", "strides", "[", "1", "]", "\n", "out_w", "//=", "strides", "[", "2", "]", "\n", "", "self", ".", "_out_h_dim", "=", "Dimension", "(", "self", ".", "_in_h_dim", ".", "name", ",", "out_h", ")", "\n", "self", ".", "_out_w_dim", "=", "Dimension", "(", "self", ".", "_in_w_dim", ".", "name", ",", "out_w", ")", "\n", "output_shape", "=", "Shape", "(", "\n", "self", ".", "_batch_dims", "+", "[", "self", ".", "_out_h_dim", ",", "self", ".", "_out_w_dim", ",", "self", ".", "_out_dim", "]", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "conv_input", ".", "dtype", ")", "]", "\n", "\n", "unsplittable_dims", "=", "[", "self", ".", "_in_h_dim", ",", "self", ".", "_in_w_dim", ",", "self", ".", "_fh_dim", ",", "\n", "self", ".", "_fw_dim", "]", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "dim", ".", "name", "for", "dim", "in", "unsplittable_dims", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv2dOperation.gradient": [[2933, 2947], ["ops.conv2d_backprop_input", "ops.conv2d_backprop_filter"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv2d_backprop_input", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv2d_backprop_filter"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "dy", "=", "grad_ys", "[", "0", "]", "\n", "conv_input", ",", "conv_filter", "=", "self", ".", "inputs", "\n", "return", "[", "\n", "conv2d_backprop_input", "(", "self", ".", "_inputs", "[", "0", "]", ".", "shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "self", ".", "_strides", ",", "\n", "self", ".", "_padding", ")", ",", "\n", "conv2d_backprop_filter", "(", "conv_input", ",", "\n", "self", ".", "_inputs", "[", "1", "]", ".", "shape", ",", "\n", "dy", ",", "\n", "self", ".", "_strides", ",", "\n", "self", ".", "_padding", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv2dOperation.lower": [[2948, 2979], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "lowering.set_tensor_lowering", "ops._shape_union", "lowering.add_counter", "lowering.add_counter", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "tensorflow.nn.conv2d", "ops._tf_restore_batch_dims", "ops.LazyAllreduceSum", "lowering.mesh_impl.laid_out_size", "ops._tf_flatten_batch_dims", "lowering.add_counter", "lowering.mesh_impl.laid_out_size"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._shape_union", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_restore_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "conv_input", ",", "conv_filter", "=", "self", ".", "inputs", "\n", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_h_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension h\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_w_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension w\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_fh_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension fh\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_fw_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension fw\"", ")", "\n", "", "def", "tf_fn", "(", "tf_input", ",", "tf_filter", ")", ":", "\n", "      ", "output", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "_tf_flatten_batch_dims", "(", "tf_input", ",", "3", ")", ",", "\n", "tf_filter", ",", "self", ".", "_strides", ",", "self", ".", "_padding", ")", "\n", "return", "_tf_restore_batch_dims", "(", "output", ",", "3", ",", "tf_input", ")", "\n", "", "y", "=", "mesh_impl", ".", "slicewise", "(", "\n", "tf_fn", ",", "lowering", ".", "tensors", "[", "conv_input", "]", ",", "lowering", ".", "tensors", "[", "conv_filter", "]", ")", "\n", "# reducing out input channels - may need to allreduce", "\n", "in_mesh_axis", "=", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_dim", ")", "\n", "if", "in_mesh_axis", "is", "not", "None", ":", "\n", "      ", "def", "add_counter_fn", "(", ")", ":", "\n", "        ", "lowering", ".", "add_counter", "(", "\n", "\"allreduce/%s/conv2d_op\"", "%", "[", "in_mesh_axis", "]", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "self", ".", "outputs", "[", "0", "]", ".", "shape", ")", ")", "\n", "", "y", "=", "LazyAllreduceSum", "(", "mesh_impl", ",", "y", ",", "[", "in_mesh_axis", "]", ",", "add_counter_fn", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "y", ")", "\n", "computation_shape", "=", "_shape_union", "(", "[", "conv_filter", ".", "shape", ",", "self", ".", "outputs", "[", "0", "]", ".", "shape", "]", ")", "\n", "lowering", ".", "add_counter", "(", "\"conv2d/forward\"", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "computation_shape", ")", ")", "\n", "lowering", ".", "add_counter", "(", "\"conv2d_unique/forward\"", ",", "computation_shape", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv2or3dBackpropInputOperation.__init__": [[2984, 3003], ["ops.Operation.__init__", "ops.Conv2or3dBackpropInputOperation._initialize_all_dimensions_as_splittable", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable"], ["def", "__init__", "(", "self", ",", "conv_dimension", ",", "is_transpose", ",", "\n", "input_shape", ",", "conv_filter", ",", "dy", ",", "strides", ",", "padding", ",", "name", "=", "None", ")", ":", "\n", "    ", "assert", "conv_dimension", "in", "[", "2", ",", "3", "]", "\n", "self", ".", "_trans", "=", "\"_trans\"", "if", "is_transpose", "else", "\"\"", "\n", "default_name", "=", "\"conv%dd%s_backprop\"", "%", "(", "conv_dimension", ",", "self", ".", "_trans", ")", "\n", "super", "(", "Conv2or3dBackpropInputOperation", ",", "self", ")", ".", "__init__", "(", "\n", "[", "dy", ",", "conv_filter", "]", ",", "name", "=", "name", "or", "default_name", ")", "\n", "\n", "self", ".", "_conv_dimension", "=", "conv_dimension", "\n", "self", ".", "_is_transpose", "=", "is_transpose", "\n", "self", ".", "_padding", "=", "padding", "\n", "self", ".", "_strides", "=", "strides", "\n", "self", ".", "_input_shape", "=", "input_shape", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "input_shape", ",", "dy", ".", "dtype", ")", "]", "\n", "self", ".", "_num_nonbatch_dims", "=", "conv_dimension", "+", "1", "\n", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv2or3dBackpropInputOperation.lower": [[3004, 3058], ["lowering.mesh_impl", "lowering.mesh_impl.slice_shape", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "lowering.set_tensor_lowering", "ops._shape_union", "lowering.add_counter", "lowering.add_counter", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.slicewise", "ops.LazyAllreduceSum", "lowering.mesh_impl.laid_out_size", "ops.list_product", "ops._tf_restore_batch_dims", "ops._tf_restore_batch_dims", "lowering.add_counter", "backprop_fn", "backprop_fn", "lowering.mesh_impl.laid_out_size", "ops._tf_flatten_batch_dims", "ops._tf_flatten_batch_dims"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._shape_union", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_restore_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_restore_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "dy", ",", "conv_filter", "=", "self", ".", "inputs", "\n", "input_sizes", "=", "mesh_impl", ".", "slice_shape", "(", "self", ".", "outputs", "[", "0", "]", ".", "shape", ")", "\n", "input_sizes", "=", "[", "list_product", "(", "input_sizes", "[", ":", "-", "self", ".", "_num_nonbatch_dims", "]", ")", "]", "+", "(", "\n", "input_sizes", "[", "-", "self", ".", "_num_nonbatch_dims", ":", "]", ")", "\n", "\n", "if", "self", ".", "_is_transpose", ":", "\n", "      ", "if", "self", ".", "_conv_dimension", "==", "2", ":", "\n", "        ", "backprop_fn", "=", "tf", ".", "nn", ".", "conv2d", "\n", "", "else", ":", "\n", "        ", "backprop_fn", "=", "tf", ".", "nn", ".", "conv3d", "\n", "", "def", "tf_fn", "(", "tf_dy", ",", "tf_filter", ")", ":", "\n", "        ", "return", "_tf_restore_batch_dims", "(", "\n", "backprop_fn", "(", "\n", "_tf_flatten_batch_dims", "(", "tf_dy", ",", "self", ".", "_num_nonbatch_dims", ")", ",", "\n", "tf_filter", ",", "\n", "self", ".", "_strides", ",", "self", ".", "_padding", ")", ",", "\n", "self", ".", "_num_nonbatch_dims", ",", "tf_dy", ")", "\n", "", "dx", "=", "mesh_impl", ".", "slicewise", "(", "\n", "tf_fn", ",", "lowering", ".", "tensors", "[", "dy", "]", ",", "lowering", ".", "tensors", "[", "conv_filter", "]", ")", "\n", "\n", "", "else", ":", "# if not self._is_transpose:", "\n", "      ", "if", "self", ".", "_conv_dimension", "==", "2", ":", "\n", "        ", "backprop_fn", "=", "tf", ".", "nn", ".", "conv2d_backprop_input", "\n", "", "else", ":", "\n", "        ", "backprop_fn", "=", "conv3d_backprop_input_v2", "\n", "", "def", "tf_fn", "(", "tf_dy", ",", "tf_filter", ")", ":", "\n", "        ", "return", "_tf_restore_batch_dims", "(", "\n", "backprop_fn", "(", "\n", "input_sizes", ",", "tf_filter", ",", "\n", "_tf_flatten_batch_dims", "(", "tf_dy", ",", "self", ".", "_num_nonbatch_dims", ")", ",", "\n", "self", ".", "_strides", ",", "self", ".", "_padding", ")", ",", "\n", "self", ".", "_num_nonbatch_dims", ",", "tf_dy", ")", "\n", "", "dx", "=", "mesh_impl", ".", "slicewise", "(", "\n", "tf_fn", ",", "lowering", ".", "tensors", "[", "dy", "]", ",", "lowering", ".", "tensors", "[", "conv_filter", "]", ")", "\n", "\n", "# reducing out output channels - may need to allreduce", "\n", "", "out_mesh_axis", "=", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "dy", ".", "shape", ".", "dims", "[", "-", "1", "]", ")", "\n", "if", "out_mesh_axis", "is", "not", "None", ":", "\n", "      ", "def", "add_counter_fn", "(", ")", ":", "\n", "        ", "lowering", ".", "add_counter", "(", "\n", "\"allreduce/%s/conv%dd%s_op\"", "%", "(", "\n", "[", "out_mesh_axis", "]", ",", "self", ".", "_conv_dimension", ",", "self", ".", "_trans", ")", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "self", ".", "outputs", "[", "0", "]", ".", "shape", ")", ")", "\n", "", "dx", "=", "LazyAllreduceSum", "(", "mesh_impl", ",", "dx", ",", "[", "out_mesh_axis", "]", ",", "add_counter_fn", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "dx", ")", "\n", "computation_shape", "=", "_shape_union", "(", "[", "conv_filter", ".", "shape", ",", "dy", ".", "shape", "]", ")", "\n", "lowering", ".", "add_counter", "(", "\n", "\"conv%dd%s/backprop_input\"", "%", "(", "self", ".", "_conv_dimension", ",", "self", ".", "_trans", ")", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "computation_shape", ")", ")", "\n", "lowering", ".", "add_counter", "(", "\n", "\"conv%dd%s_unique/backprop_input\"", "%", "(", "self", ".", "_conv_dimension", ",", "self", ".", "_trans", ")", ",", "\n", "computation_shape", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv2or3dBackpropFilterOperation.__init__": [[3077, 3096], ["ops.Operation.__init__", "ops.Conv2or3dBackpropFilterOperation._initialize_all_dimensions_as_splittable", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable"], ["def", "__init__", "(", "self", ",", "conv_dimension", ",", "is_transpose", ",", "\n", "conv_input", ",", "filter_shape", ",", "dy", ",", "strides", ",", "padding", ",", "name", "=", "None", ")", ":", "\n", "    ", "assert", "conv_dimension", "in", "[", "2", ",", "3", "]", "\n", "self", ".", "_trans", "=", "\"_trans\"", "if", "is_transpose", "else", "\"\"", "\n", "default_name", "=", "\"conv%dd%s_backprop_filter\"", "%", "(", "conv_dimension", ",", "self", ".", "_trans", ")", "\n", "super", "(", "Conv2or3dBackpropFilterOperation", ",", "self", ")", ".", "__init__", "(", "\n", "[", "conv_input", ",", "dy", "]", ",", "name", "=", "name", "or", "default_name", ")", "\n", "\n", "self", ".", "_conv_dimension", "=", "conv_dimension", "\n", "self", ".", "_is_transpose", "=", "is_transpose", "\n", "self", ".", "_padding", "=", "padding", "\n", "self", ".", "_strides", "=", "strides", "\n", "self", ".", "_filter_shape", "=", "filter_shape", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "filter_shape", ",", "dy", ".", "dtype", ")", "]", "\n", "self", ".", "_num_nonbatch_dims", "=", "conv_dimension", "+", "1", "\n", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv2or3dBackpropFilterOperation.lower": [[3097, 3145], ["lowering.mesh_impl", "lowering.mesh_impl.slice_shape", "lowering.mesh_impl.slicewise", "lowering.set_tensor_lowering", "ops._shape_union", "lowering.add_counter", "lowering.add_counter", "backprop_fn", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ops.LazyAllreduceSum", "lowering.mesh_impl.laid_out_size", "ops._tf_flatten_batch_dims", "ops._tf_flatten_batch_dims", "lowering.add_counter", "lowering.mesh_impl.laid_out_size"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._shape_union", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "conv_input", ",", "dy", "=", "self", ".", "inputs", "\n", "filter_sizes", "=", "mesh_impl", ".", "slice_shape", "(", "self", ".", "outputs", "[", "0", "]", ".", "shape", ")", "\n", "\n", "if", "self", ".", "_conv_dimension", "==", "2", ":", "\n", "      ", "backprop_fn", "=", "tf", ".", "nn", ".", "conv2d_backprop_filter", "\n", "", "else", ":", "\n", "      ", "backprop_fn", "=", "conv3d_backprop_filter_v2", "\n", "\n", "", "def", "tf_fn", "(", "tf_input", ",", "tf_dy", ")", ":", "\n", "      ", "if", "self", ".", "_is_transpose", ":", "\n", "        ", "y", ",", "x", "=", "tf_input", ",", "tf_dy", "\n", "", "else", ":", "\n", "        ", "x", ",", "y", "=", "tf_input", ",", "tf_dy", "\n", "", "return", "backprop_fn", "(", "\n", "_tf_flatten_batch_dims", "(", "x", ",", "self", ".", "_num_nonbatch_dims", ")", ",", "\n", "filter_sizes", ",", "\n", "_tf_flatten_batch_dims", "(", "y", ",", "self", ".", "_num_nonbatch_dims", ")", ",", "\n", "self", ".", "_strides", ",", "\n", "self", ".", "_padding", ")", "\n", "\n", "", "df", "=", "mesh_impl", ".", "slicewise", "(", "\n", "tf_fn", ",", "lowering", ".", "tensors", "[", "conv_input", "]", ",", "lowering", ".", "tensors", "[", "dy", "]", ")", "\n", "\n", "# reducing out batch dimensions - may need to allreduce", "\n", "reduced_mesh_axes", "=", "[", "\n", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "d", ")", "\n", "for", "d", "in", "dy", ".", "shape", ".", "dims", "[", ":", "-", "self", ".", "_num_nonbatch_dims", "]", "]", "\n", "reduced_mesh_axes", "=", "[", "a", "for", "a", "in", "reduced_mesh_axes", "if", "a", "is", "not", "None", "]", "\n", "\n", "if", "reduced_mesh_axes", ":", "\n", "      ", "def", "add_counter_fn", "(", ")", ":", "\n", "        ", "lowering", ".", "add_counter", "(", "\n", "\"allreduce/%s/conv%dd%s_backprop_filter\"", "%", "(", "\n", "reduced_mesh_axes", ",", "self", ".", "_conv_dimension", ",", "self", ".", "_trans", ")", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "self", ".", "outputs", "[", "0", "]", ".", "shape", ")", ")", "\n", "", "df", "=", "LazyAllreduceSum", "(", "mesh_impl", ",", "df", ",", "reduced_mesh_axes", ",", "add_counter_fn", ")", "\n", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "df", ")", "\n", "computation_shape", "=", "_shape_union", "(", "[", "self", ".", "outputs", "[", "0", "]", ".", "shape", ",", "dy", ".", "shape", "]", ")", "\n", "lowering", ".", "add_counter", "(", "\"conv%dd%s/backprop_filter\"", "%", "(", "self", ".", "_conv_dimension", ",", "\n", "self", ".", "_trans", ")", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "computation_shape", ")", ")", "\n", "lowering", ".", "add_counter", "(", "\n", "\"conv%dd%s_unique/backprop_filter\"", "%", "(", "self", ".", "_conv_dimension", ",", "\n", "self", ".", "_trans", ")", ",", "\n", "computation_shape", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv3dOperation.__init__": [[3170, 3208], ["ops.Operation.__init__", "Dimension", "Dimension", "Dimension", "ops.Shape", "ops.Conv3dOperation._initialize_splittable_and_unsplittable_dims", "ValueError", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "conv_input", ",", "conv_filter", ",", "strides", ",", "padding", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "Conv3dOperation", ",", "self", ")", ".", "__init__", "(", "\n", "[", "conv_input", ",", "conv_filter", "]", ",", "name", "=", "name", "or", "\"conv3d\"", ")", "\n", "self", ".", "_padding", "=", "padding", "\n", "self", ".", "_batch_dims", "=", "conv_input", ".", "shape", ".", "dims", "[", ":", "-", "4", "]", "\n", "self", ".", "_in_d_dim", ",", "self", ".", "_in_h_dim", ",", "self", ".", "_in_w_dim", ",", "self", ".", "_in_dim", "=", "(", "\n", "conv_input", ".", "shape", ".", "dims", "[", "-", "4", ":", "]", ")", "\n", "self", ".", "_fd_dim", ",", "self", ".", "_fh_dim", ",", "self", ".", "_fw_dim", "=", "conv_filter", ".", "shape", ".", "dims", "[", ":", "3", "]", "\n", "f_in_dim", ",", "self", ".", "_out_dim", "=", "conv_filter", ".", "shape", ".", "dims", "[", "3", ":", "]", "\n", "if", "f_in_dim", "!=", "self", ".", "_in_dim", ":", "\n", "      ", "raise", "ValueError", "(", "\"Dimensions do not match input=%s filter=%s\"", "\n", "%", "(", "conv_input", ",", "conv_filter", ")", ")", "\n", "", "out_d", "=", "self", ".", "_in_d_dim", ".", "size", "\n", "out_h", "=", "self", ".", "_in_h_dim", ".", "size", "\n", "out_w", "=", "self", ".", "_in_w_dim", ".", "size", "\n", "if", "padding", "==", "\"VALID\"", ":", "\n", "      ", "out_d", "-=", "(", "self", ".", "_fd_dim", ".", "size", "-", "1", ")", "\n", "out_h", "-=", "(", "self", ".", "_fh_dim", ".", "size", "-", "1", ")", "\n", "out_w", "-=", "(", "self", ".", "_fw_dim", ".", "size", "-", "1", ")", "\n", "\n", "", "self", ".", "_strides", "=", "strides", "\n", "if", "strides", "is", "not", "None", ":", "\n", "      ", "out_d", "//=", "strides", "[", "1", "]", "\n", "out_h", "//=", "strides", "[", "2", "]", "\n", "out_w", "//=", "strides", "[", "3", "]", "\n", "", "self", ".", "_out_d_dim", "=", "Dimension", "(", "self", ".", "_in_d_dim", ".", "name", ",", "out_d", ")", "\n", "self", ".", "_out_h_dim", "=", "Dimension", "(", "self", ".", "_in_h_dim", ".", "name", ",", "out_h", ")", "\n", "self", ".", "_out_w_dim", "=", "Dimension", "(", "self", ".", "_in_w_dim", ".", "name", ",", "out_w", ")", "\n", "output_shape", "=", "Shape", "(", "\n", "self", ".", "_batch_dims", "+", "[", "self", ".", "_out_d_dim", ",", "self", ".", "_out_h_dim", ",", "\n", "self", ".", "_out_w_dim", ",", "self", ".", "_out_dim", "]", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "conv_input", ".", "dtype", ")", "]", "\n", "\n", "unsplittable_dims", "=", "[", "self", ".", "_in_d_dim", ",", "self", ".", "_in_h_dim", ",", "self", ".", "_in_w_dim", ",", "\n", "self", ".", "_fd_dim", ",", "self", ".", "_fh_dim", ",", "self", ".", "_fw_dim", "]", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "dim", ".", "name", "for", "dim", "in", "unsplittable_dims", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv3dOperation.gradient": [[3209, 3223], ["ops.conv3d_backprop_input", "ops.conv3d_backprop_filter"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv3d_backprop_input", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv3d_backprop_filter"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "dy", "=", "grad_ys", "[", "0", "]", "\n", "conv_input", ",", "conv_filter", "=", "self", ".", "inputs", "\n", "return", "[", "\n", "conv3d_backprop_input", "(", "self", ".", "_inputs", "[", "0", "]", ".", "shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "self", ".", "_strides", ",", "\n", "self", ".", "_padding", ")", ",", "\n", "conv3d_backprop_filter", "(", "conv_input", ",", "\n", "self", ".", "_inputs", "[", "1", "]", ".", "shape", ",", "\n", "dy", ",", "\n", "self", ".", "_strides", ",", "\n", "self", ".", "_padding", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv3dOperation.lower": [[3224, 3259], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "lowering.set_tensor_lowering", "ops._shape_union", "lowering.add_counter", "lowering.add_counter", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "tensorflow.nn.conv3d", "ops._tf_restore_batch_dims", "ops.LazyAllreduceSum", "lowering.mesh_impl.laid_out_size", "ops._tf_flatten_batch_dims", "lowering.add_counter", "lowering.mesh_impl.laid_out_size"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._shape_union", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_restore_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "conv_input", ",", "conv_filter", "=", "self", ".", "inputs", "\n", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_d_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension d\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_h_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension h\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_w_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension w\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_fd_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension fd\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_fh_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension fh\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_fw_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension fw\"", ")", "\n", "", "def", "tf_fn", "(", "tf_input", ",", "tf_filter", ")", ":", "\n", "      ", "output", "=", "tf", ".", "nn", ".", "conv3d", "(", "\n", "_tf_flatten_batch_dims", "(", "tf_input", ",", "4", ")", ",", "\n", "tf_filter", ",", "self", ".", "_strides", ",", "self", ".", "_padding", ")", "\n", "return", "_tf_restore_batch_dims", "(", "output", ",", "4", ",", "tf_input", ")", "\n", "", "y", "=", "mesh_impl", ".", "slicewise", "(", "\n", "tf_fn", ",", "lowering", ".", "tensors", "[", "conv_input", "]", ",", "lowering", ".", "tensors", "[", "conv_filter", "]", ")", "\n", "# reducing out input channels - may need to allreduce", "\n", "in_mesh_axis", "=", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_dim", ")", "\n", "if", "in_mesh_axis", "is", "not", "None", ":", "\n", "      ", "def", "add_counter_fn", "(", ")", ":", "\n", "        ", "lowering", ".", "add_counter", "(", "\n", "\"allreduce/%s/conv3d_op\"", "%", "[", "in_mesh_axis", "]", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "self", ".", "outputs", "[", "0", "]", ".", "shape", ")", ")", "\n", "", "y", "=", "LazyAllreduceSum", "(", "mesh_impl", ",", "y", ",", "[", "in_mesh_axis", "]", ",", "add_counter_fn", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "y", ")", "\n", "computation_shape", "=", "_shape_union", "(", "[", "conv_filter", ".", "shape", ",", "self", ".", "outputs", "[", "0", "]", ".", "shape", "]", ")", "\n", "lowering", ".", "add_counter", "(", "\"conv3d/forward\"", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "computation_shape", ")", ")", "\n", "lowering", ".", "add_counter", "(", "\"conv3d_unique/forward\"", ",", "computation_shape", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv2dTransposeOperation.__init__": [[3298, 3334], ["ops.Operation.__init__", "Dimension", "Dimension", "ops.Shape", "ops.Conv2dTransposeOperation._initialize_splittable_and_unsplittable_dims", "ValueError", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "conv_input", ",", "conv_filter", ",", "strides", ",", "padding", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "Conv2dTransposeOperation", ",", "self", ")", ".", "__init__", "(", "\n", "[", "conv_input", ",", "conv_filter", "]", ",", "name", "=", "name", "or", "\"conv2d_transpose\"", ")", "\n", "self", ".", "_padding", "=", "padding", "\n", "self", ".", "_batch_dims", "=", "conv_input", ".", "shape", ".", "dims", "[", ":", "-", "3", "]", "\n", "self", ".", "_in_h_dim", ",", "self", ".", "_in_w_dim", ",", "self", ".", "_in_dim", "=", "conv_input", ".", "shape", ".", "dims", "[", "-", "3", ":", "]", "\n", "self", ".", "_fh_dim", ",", "self", ".", "_fw_dim", "=", "conv_filter", ".", "shape", ".", "dims", "[", ":", "2", "]", "\n", "\n", "# Filter shape is transposed.", "\n", "self", ".", "_out_dim", ",", "f_in_dim", "=", "conv_filter", ".", "shape", ".", "dims", "[", "2", ":", "]", "\n", "if", "f_in_dim", "!=", "self", ".", "_in_dim", ":", "\n", "      ", "raise", "ValueError", "(", "\"Dimensions do not match input=%s filter=%s\"", "\n", "%", "(", "conv_input", ",", "conv_filter", ")", ")", "\n", "\n", "# compute output shape.", "\n", "# now we assume the padding doesn't change the output shape.", "\n", "# TODO(lehou): work out the output shape in general cases.", "\n", "", "out_h", "=", "self", ".", "_in_h_dim", ".", "size", "\n", "out_w", "=", "self", ".", "_in_w_dim", ".", "size", "\n", "self", ".", "_strides", "=", "strides", "\n", "if", "strides", "is", "not", "None", ":", "\n", "      ", "out_h", "*=", "strides", "[", "1", "]", "\n", "out_w", "*=", "strides", "[", "2", "]", "\n", "\n", "# name output shape.", "\n", "", "self", ".", "_out_h_dim", "=", "Dimension", "(", "self", ".", "_in_h_dim", ".", "name", ",", "out_h", ")", "\n", "self", ".", "_out_w_dim", "=", "Dimension", "(", "self", ".", "_in_w_dim", ".", "name", ",", "out_w", ")", "\n", "output_shape", "=", "Shape", "(", "self", ".", "_batch_dims", "+", "[", "\n", "self", ".", "_out_h_dim", ",", "self", ".", "_out_w_dim", ",", "self", ".", "_out_dim", "]", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "conv_input", ".", "dtype", ")", "]", "\n", "\n", "unsplittable_dims", "=", "[", "self", ".", "_in_h_dim", ",", "self", ".", "_in_w_dim", ",", "\n", "self", ".", "_fh_dim", ",", "self", ".", "_fw_dim", "]", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "dim", ".", "name", "for", "dim", "in", "unsplittable_dims", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv2dTransposeOperation.gradient": [[3335, 3349], ["ops.conv2d_transpose_backprop_input", "ops.conv2d_transpose_backprop_filter"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv2d_transpose_backprop_input", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv2d_transpose_backprop_filter"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "dy", "=", "grad_ys", "[", "0", "]", "\n", "conv_input", ",", "conv_filter", "=", "self", ".", "inputs", "\n", "return", "[", "\n", "conv2d_transpose_backprop_input", "(", "self", ".", "_inputs", "[", "0", "]", ".", "shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "self", ".", "_strides", ",", "\n", "self", ".", "_padding", ")", ",", "\n", "conv2d_transpose_backprop_filter", "(", "conv_input", ",", "\n", "self", ".", "_inputs", "[", "1", "]", ".", "shape", ",", "\n", "dy", ",", "\n", "self", ".", "_strides", ",", "\n", "self", ".", "_padding", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv2dTransposeOperation.lower": [[3350, 3398], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "lowering.set_tensor_lowering", "ops._shape_union", "lowering.add_counter", "lowering.add_counter", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "tensorflow.nn.conv2d_backprop_input", "ops._tf_restore_batch_dims", "ops.LazyAllreduceSum", "lowering.mesh_impl.laid_out_size", "ops._tf_flatten_batch_dims", "lowering.add_counter", "lowering.mesh_impl.laid_out_size"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._shape_union", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv2d_backprop_input", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_restore_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "conv_input", ",", "conv_filter", "=", "self", ".", "inputs", "\n", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_h_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension h\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_w_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension w\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_fh_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension fh\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_fw_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension fw\"", ")", "\n", "\n", "# run conv2d_transpose in each slice.", "\n", "", "def", "tf_fn", "(", "tf_input", ",", "tf_filter", ")", ":", "\n", "      ", "\"\"\"conv2d_transpose in tensorflow.\"\"\"", "\n", "# Get the output shape.", "\n", "# Here, we compute flattened batch size from tf_input, since there can be", "\n", "# split along batch dimensions.", "\n", "flattened_batch_size", "=", "1", "\n", "for", "dim", "in", "tf_input", ".", "shape", "[", ":", "-", "3", "]", ":", "\n", "        ", "flattened_batch_size", "*=", "dim", "\n", "", "flattened_output_shape", "=", "[", "\n", "flattened_batch_size", ",", "self", ".", "_out_h_dim", ".", "size", ",", "\n", "self", ".", "_out_w_dim", ".", "size", ",", "self", ".", "_out_dim", ".", "size", "]", "\n", "\n", "output", "=", "tf", ".", "nn", ".", "conv2d_backprop_input", "(", "\n", "flattened_output_shape", ",", "tf_filter", ",", "\n", "_tf_flatten_batch_dims", "(", "tf_input", ",", "3", ")", ",", "\n", "self", ".", "_strides", ",", "self", ".", "_padding", ")", "\n", "return", "_tf_restore_batch_dims", "(", "output", ",", "3", ",", "tf_input", ")", "\n", "\n", "", "y", "=", "mesh_impl", ".", "slicewise", "(", "\n", "tf_fn", ",", "lowering", ".", "tensors", "[", "conv_input", "]", ",", "lowering", ".", "tensors", "[", "conv_filter", "]", ")", "\n", "\n", "# reducing out input channels - may need to allreduce", "\n", "in_mesh_axis", "=", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_dim", ")", "\n", "if", "in_mesh_axis", "is", "not", "None", ":", "\n", "      ", "def", "add_counter_fn", "(", ")", ":", "\n", "        ", "lowering", ".", "add_counter", "(", "\n", "\"allreduce/%s/conv2d_transpose_op\"", "%", "[", "in_mesh_axis", "]", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "self", ".", "outputs", "[", "0", "]", ".", "shape", ")", ")", "\n", "", "y", "=", "LazyAllreduceSum", "(", "mesh_impl", ",", "y", ",", "[", "in_mesh_axis", "]", ",", "add_counter_fn", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "y", ")", "\n", "computation_shape", "=", "_shape_union", "(", "[", "conv_filter", ".", "shape", ",", "self", ".", "outputs", "[", "0", "]", ".", "shape", "]", ")", "\n", "lowering", ".", "add_counter", "(", "\"conv2d_transpose/forward\"", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "computation_shape", ")", ")", "\n", "lowering", ".", "add_counter", "(", "\"conv2d_transpose_unique/forward\"", ",", "\n", "computation_shape", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv3dTransposeOperation.__init__": [[3437, 3477], ["ops.Operation.__init__", "Dimension", "Dimension", "Dimension", "ops.Shape", "ops.Conv3dTransposeOperation._initialize_splittable_and_unsplittable_dims", "ValueError", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "conv_input", ",", "conv_filter", ",", "strides", ",", "padding", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "Conv3dTransposeOperation", ",", "self", ")", ".", "__init__", "(", "\n", "[", "conv_input", ",", "conv_filter", "]", ",", "name", "=", "name", "or", "\"conv3d_transpose\"", ")", "\n", "self", ".", "_padding", "=", "padding", "\n", "self", ".", "_batch_dims", "=", "conv_input", ".", "shape", ".", "dims", "[", ":", "-", "4", "]", "\n", "self", ".", "_in_d_dim", ",", "self", ".", "_in_h_dim", ",", "self", ".", "_in_w_dim", ",", "self", ".", "_in_dim", "=", "(", "\n", "conv_input", ".", "shape", ".", "dims", "[", "-", "4", ":", "]", ")", "\n", "self", ".", "_fd_dim", ",", "self", ".", "_fh_dim", ",", "self", ".", "_fw_dim", "=", "conv_filter", ".", "shape", ".", "dims", "[", ":", "3", "]", "\n", "\n", "# Filter shape is transposed.", "\n", "self", ".", "_out_dim", ",", "f_in_dim", "=", "conv_filter", ".", "shape", ".", "dims", "[", "3", ":", "]", "\n", "if", "f_in_dim", "!=", "self", ".", "_in_dim", ":", "\n", "      ", "raise", "ValueError", "(", "\"Dimensions do not match input=%s filter=%s\"", "\n", "%", "(", "conv_input", ",", "conv_filter", ")", ")", "\n", "\n", "# compute output shape.", "\n", "# now we assume the padding doesn't change the output shape.", "\n", "# TODO(lehou): work out the output shape in general cases.", "\n", "", "out_d", "=", "self", ".", "_in_d_dim", ".", "size", "\n", "out_h", "=", "self", ".", "_in_h_dim", ".", "size", "\n", "out_w", "=", "self", ".", "_in_w_dim", ".", "size", "\n", "self", ".", "_strides", "=", "strides", "\n", "if", "strides", "is", "not", "None", ":", "\n", "      ", "out_d", "*=", "strides", "[", "1", "]", "\n", "out_h", "*=", "strides", "[", "2", "]", "\n", "out_w", "*=", "strides", "[", "3", "]", "\n", "\n", "# name output shape.", "\n", "", "self", ".", "_out_d_dim", "=", "Dimension", "(", "self", ".", "_in_d_dim", ".", "name", ",", "out_d", ")", "\n", "self", ".", "_out_h_dim", "=", "Dimension", "(", "self", ".", "_in_h_dim", ".", "name", ",", "out_h", ")", "\n", "self", ".", "_out_w_dim", "=", "Dimension", "(", "self", ".", "_in_w_dim", ".", "name", ",", "out_w", ")", "\n", "output_shape", "=", "Shape", "(", "self", ".", "_batch_dims", "+", "[", "self", ".", "_out_d_dim", ",", "self", ".", "_out_h_dim", ",", "\n", "self", ".", "_out_w_dim", ",", "self", ".", "_out_dim", "]", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "conv_input", ".", "dtype", ")", "]", "\n", "\n", "unsplittable_dims", "=", "[", "self", ".", "_in_d_dim", ",", "self", ".", "_in_h_dim", ",", "self", ".", "_in_w_dim", ",", "\n", "self", ".", "_fd_dim", ",", "self", ".", "_fh_dim", ",", "self", ".", "_fw_dim", "]", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "dim", ".", "name", "for", "dim", "in", "unsplittable_dims", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv3dTransposeOperation.gradient": [[3478, 3492], ["ops.conv3d_transpose_backprop_input", "ops.conv3d_transpose_backprop_filter"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv3d_transpose_backprop_input", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv3d_transpose_backprop_filter"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "dy", "=", "grad_ys", "[", "0", "]", "\n", "conv_input", ",", "conv_filter", "=", "self", ".", "inputs", "\n", "return", "[", "\n", "conv3d_transpose_backprop_input", "(", "self", ".", "_inputs", "[", "0", "]", ".", "shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "self", ".", "_strides", ",", "\n", "self", ".", "_padding", ")", ",", "\n", "conv3d_transpose_backprop_filter", "(", "conv_input", ",", "\n", "self", ".", "_inputs", "[", "1", "]", ".", "shape", ",", "\n", "dy", ",", "\n", "self", ".", "_strides", ",", "\n", "self", ".", "_padding", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Conv3dTransposeOperation.lower": [[3493, 3545], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "lowering.set_tensor_lowering", "ops._shape_union", "lowering.add_counter", "lowering.add_counter", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "tensorflow.python.ops.gen_nn_ops.conv3d_backprop_input_v2", "ops._tf_restore_batch_dims", "ops.LazyAllreduceSum", "lowering.mesh_impl.laid_out_size", "ops._tf_flatten_batch_dims", "lowering.add_counter", "lowering.mesh_impl.laid_out_size"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._shape_union", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_restore_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "conv_input", ",", "conv_filter", "=", "self", ".", "inputs", "\n", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_d_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension d\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_h_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension h\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_w_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension w\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_fd_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension fd\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_fh_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension fh\"", ")", "\n", "", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_fw_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along dimension fw\"", ")", "\n", "\n", "# run conv3d_transpose in each slice.", "\n", "", "def", "tf_fn", "(", "tf_input", ",", "tf_filter", ")", ":", "\n", "      ", "\"\"\"conv3d_transpose in tensorflow.\"\"\"", "\n", "# Get the output shape.", "\n", "# Here, we compute flattened batch size from tf_input, since there can be", "\n", "# split along batch dimensions.", "\n", "flattened_batch_size", "=", "1", "\n", "for", "dim", "in", "tf_input", ".", "shape", "[", ":", "-", "4", "]", ":", "\n", "        ", "flattened_batch_size", "*=", "dim", "\n", "", "flattened_output_shape", "=", "[", "flattened_batch_size", ",", "\n", "self", ".", "_out_d_dim", ".", "size", ",", "self", ".", "_out_h_dim", ".", "size", ",", "\n", "self", ".", "_out_w_dim", ".", "size", ",", "self", ".", "_out_dim", ".", "size", "]", "\n", "\n", "output", "=", "conv3d_backprop_input_v2", "(", "\n", "flattened_output_shape", ",", "tf_filter", ",", "\n", "_tf_flatten_batch_dims", "(", "tf_input", ",", "4", ")", ",", "\n", "self", ".", "_strides", ",", "self", ".", "_padding", ")", "\n", "return", "_tf_restore_batch_dims", "(", "output", ",", "4", ",", "tf_input", ")", "\n", "\n", "", "y", "=", "mesh_impl", ".", "slicewise", "(", "\n", "tf_fn", ",", "lowering", ".", "tensors", "[", "conv_input", "]", ",", "lowering", ".", "tensors", "[", "conv_filter", "]", ")", "\n", "\n", "# reducing out input channels - may need to allreduce", "\n", "in_mesh_axis", "=", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_in_dim", ")", "\n", "if", "in_mesh_axis", "is", "not", "None", ":", "\n", "      ", "def", "add_counter_fn", "(", ")", ":", "\n", "        ", "lowering", ".", "add_counter", "(", "\n", "\"allreduce/%s/conv3d_transpose_op\"", "%", "[", "in_mesh_axis", "]", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "self", ".", "outputs", "[", "0", "]", ".", "shape", ")", ")", "\n", "", "y", "=", "LazyAllreduceSum", "(", "mesh_impl", ",", "y", ",", "[", "in_mesh_axis", "]", ",", "add_counter_fn", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "y", ")", "\n", "computation_shape", "=", "_shape_union", "(", "[", "conv_filter", ".", "shape", ",", "self", ".", "outputs", "[", "0", "]", ".", "shape", "]", ")", "\n", "lowering", ".", "add_counter", "(", "\"conv3d_transpose/forward\"", ",", "\n", "mesh_impl", ".", "laid_out_size", "(", "computation_shape", ")", ")", "\n", "lowering", ".", "add_counter", "(", "\"conv3d_transpose_unique/forward\"", ",", "\n", "computation_shape", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ShiftOperation.__init__": [[3578, 3598], ["ops.Operation.__init__", "x.shape.dims.index", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "x", ",", "offset", ",", "dim", ",", "wrap", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create a shift operation.\n\n    Shift x right by +offset in dimension dim.\n    If offset is negative, shift left.\n    If wrap is true then wrap-around.  Else, pad with zeros.\n\n    Args:\n      x: a Tensor\n      offset: an integer\n      dim: a Dimension of x\n      wrap: a boolean - whether to wrap or pad.\n      name: an optional string\n    \"\"\"", "\n", "super", "(", "ShiftOperation", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "name", "=", "name", "or", "\"shift\"", ")", "\n", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_axis", "=", "x", ".", "shape", ".", "dims", ".", "index", "(", "dim", ")", "\n", "self", ".", "_offset", "=", "offset", "\n", "self", ".", "_wrap", "=", "wrap", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "x", ".", "shape", ",", "x", ".", "dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ShiftOperation.gradient": [[3599, 3601], ["ops.shift"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "return", "[", "shift", "(", "grad_ys", "[", "0", "]", ",", "-", "self", ".", "_offset", ",", "self", ".", "_dim", ",", "self", ".", "_wrap", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ShiftOperation.lower": [[3602, 3669], ["lowering.mesh_impl", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "lowering.set_tensor_lowering", "lowering.set_tensor_lowering", "tensorflow.slice", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.laid_out_size", "abs", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.shift_by_n_processors", "lowering.add_counter", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.shift_by_n_processors", "lowering.add_counter", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.shift_by_n_processors", "lowering.mesh_impl.slicewise", "lowering.add_counter", "tensorflow.pad", "tensorflow.concat", "my_pad"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.shift_by_n_processors", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.shift_by_n_processors", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.shift_by_n_processors", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "mesh_axis", "=", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_dim", ")", "\n", "inputs", "=", "self", ".", "_inputs", "[", "0", "]", "\n", "ndims", "=", "self", ".", "_inputs", "[", "0", "]", ".", "shape", ".", "ndims", "\n", "axis", "=", "self", ".", "_axis", "\n", "dim", "=", "self", ".", "_dim", "\n", "lowered_x", "=", "lowering", ".", "tensors", "[", "inputs", "]", "\n", "if", "not", "self", ".", "_wrap", "and", "abs", "(", "self", ".", "_offset", ")", ">=", "dim", ".", "size", ":", "\n", "      ", "lowering", ".", "set_tensor_lowering", "(", "\n", "self", ".", "outputs", "[", "0", "]", ",", "\n", "mesh_impl", ".", "slicewise", "(", "tf", ".", "zeros_like", ",", "lowered_x", ")", ")", "\n", "return", "\n", "", "def", "my_slice", "(", "x", ",", "start", ",", "size", ")", ":", "\n", "      ", "assert", "size", ">=", "0", "\n", "begin", "=", "[", "0", "]", "*", "axis", "+", "[", "start", "]", "+", "[", "0", "]", "*", "(", "ndims", "-", "axis", "-", "1", ")", "\n", "size", "=", "[", "-", "1", "]", "*", "axis", "+", "[", "size", "]", "+", "[", "-", "1", "]", "*", "(", "ndims", "-", "axis", "-", "1", ")", "\n", "return", "tf", ".", "slice", "(", "x", ",", "begin", ",", "size", ")", "\n", "", "if", "mesh_axis", "is", "None", ":", "\n", "      ", "def", "slicewise_fn", "(", "x", ")", ":", "\n", "        ", "\"\"\"Slicewise function.\"\"\"", "\n", "def", "my_pad", "(", "s", ",", "begin_pad", ",", "end_pad", ")", ":", "\n", "          ", "paddings", "=", "(", "[", "[", "0", ",", "0", "]", "]", "*", "axis", "+", "[", "[", "begin_pad", ",", "end_pad", "]", "]", "\n", "+", "[", "[", "0", ",", "0", "]", "]", "*", "(", "ndims", "-", "axis", "-", "1", ")", ")", "\n", "return", "tf", ".", "pad", "(", "s", ",", "paddings", ")", "\n", "", "if", "self", ".", "_wrap", ":", "\n", "          ", "offset", "=", "self", ".", "_offset", "%", "dim", ".", "size", "\n", "return", "tf", ".", "concat", "(", "[", "my_slice", "(", "x", ",", "dim", ".", "size", "-", "offset", ",", "offset", ")", ",", "\n", "my_slice", "(", "x", ",", "0", ",", "dim", ".", "size", "-", "offset", ")", "]", ",", "axis", "=", "axis", ")", "\n", "", "elif", "self", ".", "_offset", ">", "0", ":", "\n", "          ", "return", "my_pad", "(", "\n", "my_slice", "(", "x", ",", "0", ",", "dim", ".", "size", "-", "self", ".", "_offset", ")", ",", "self", ".", "_offset", ",", "0", ")", "\n", "", "else", ":", "\n", "          ", "neg_offset", "=", "-", "self", ".", "_offset", "\n", "return", "my_pad", "(", "\n", "my_slice", "(", "x", ",", "neg_offset", ",", "dim", ".", "size", "-", "neg_offset", ")", ",", "0", ",", "neg_offset", ")", "\n", "", "", "lowered_y", "=", "mesh_impl", ".", "slicewise", "(", "slicewise_fn", ",", "lowered_x", ")", "\n", "", "else", ":", "\n", "      ", "mesh_dim_size", "=", "mesh_impl", ".", "shape", ".", "dims", "[", "mesh_axis", "]", ".", "size", "\n", "tensor_dim_size", "=", "self", ".", "_dim", ".", "size", "\n", "block_size", "=", "tensor_dim_size", "//", "mesh_dim_size", "\n", "odiv", "=", "self", ".", "_offset", "//", "block_size", "\n", "omod", "=", "self", ".", "_offset", "%", "block_size", "\n", "laid_out_size", "=", "mesh_impl", ".", "laid_out_size", "(", "inputs", ".", "shape", ")", "\n", "if", "omod", "==", "0", ":", "\n", "# shift by an integral number of processors.", "\n", "        ", "lowered_y", "=", "mesh_impl", ".", "shift_by_n_processors", "(", "\n", "lowered_x", ",", "mesh_axis", ",", "odiv", ",", "self", ".", "_wrap", ")", "\n", "lowering", ".", "add_counter", "(", "\"shift[%d]\"", "%", "odiv", ",", "laid_out_size", ")", "\n", "", "else", ":", "\n", "# shift by odiv processors + omod positions", "\n", "        ", "sliced", "=", "mesh_impl", ".", "slicewise", "(", "\n", "lambda", "x", ":", "my_slice", "(", "x", ",", "0", ",", "block_size", "-", "omod", ")", ",", "lowered_x", ")", "\n", "second_part", "=", "mesh_impl", ".", "shift_by_n_processors", "(", "\n", "sliced", ",", "mesh_axis", ",", "odiv", ",", "self", ".", "_wrap", ")", "\n", "lowering", ".", "add_counter", "(", "\n", "\"shift[%d]\"", "%", "odiv", ",", "\n", "laid_out_size", "*", "(", "block_size", "-", "omod", ")", "//", "block_size", ")", "\n", "sliced", "=", "mesh_impl", ".", "slicewise", "(", "\n", "lambda", "x", ":", "my_slice", "(", "x", ",", "block_size", "-", "omod", ",", "omod", ")", ",", "lowered_x", ")", "\n", "first_part", "=", "mesh_impl", ".", "shift_by_n_processors", "(", "\n", "sliced", ",", "mesh_axis", ",", "odiv", "+", "1", ",", "self", ".", "_wrap", ")", "\n", "lowered_y", "=", "mesh_impl", ".", "slicewise", "(", "\n", "lambda", "a", ",", "b", ":", "tf", ".", "concat", "(", "[", "a", ",", "b", "]", ",", "axis", ")", ",", "first_part", ",", "second_part", ")", "\n", "lowering", ".", "add_counter", "(", "\n", "\"shift[%d]\"", "%", "(", "odiv", "+", "1", ")", ",", "laid_out_size", "*", "omod", "//", "block_size", ")", "\n", "", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "lowered_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.SliceOperation.__init__": [[3729, 3742], ["ops.Operation.__init__", "dim_names.index", "Dimension", "ops.Shape", "ops.SliceOperation._initialize_splittable_and_unsplittable_dims", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "x", ",", "begin", ",", "size", ",", "slice_dim_name", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "SliceOperation", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "name", "=", "name", "or", "\"slice\"", ")", "\n", "dim_names", "=", "x", ".", "shape", ".", "dimension_names", "\n", "self", ".", "_axis", "=", "axis", "=", "dim_names", ".", "index", "(", "slice_dim_name", ")", "\n", "self", ".", "_begin", "=", "begin", "\n", "self", ".", "_slice_dim", "=", "Dimension", "(", "slice_dim_name", ",", "size", ")", "\n", "input_shape", "=", "self", ".", "_inputs", "[", "0", "]", ".", "shape", "\n", "output_shape", "=", "Shape", "(", "\n", "input_shape", ".", "dims", "[", ":", "axis", "]", "+", "[", "self", ".", "_slice_dim", "]", "+", "input_shape", ".", "dims", "[", "axis", "+", "1", ":", "]", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "x", ".", "dtype", ")", "]", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "slice_dim_name", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.SliceOperation.gradient": [[3743, 3749], ["ops.pad"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "actual_size", "=", "self", ".", "_inputs", "[", "0", "]", ".", "shape", ".", "dims", "[", "self", ".", "_axis", "]", ".", "size", "\n", "return", "[", "\n", "pad", "(", "grad_ys", "[", "0", "]", ",", "\n", "[", "self", ".", "_begin", ",", "actual_size", "-", "self", ".", "_slice_dim", ".", "size", "-", "self", ".", "_begin", "]", ",", "\n", "self", ".", "_slice_dim", ".", "name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.SliceOperation.lower": [[3750, 3765], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "lowering.set_tensor_lowering", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "tensorflow.slice"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_slice_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't slice along split axis\"", ")", "\n", "", "inputs", "=", "self", ".", "_inputs", "[", "0", "]", "\n", "ndims", "=", "self", ".", "_inputs", "[", "0", "]", ".", "shape", ".", "ndims", "\n", "axis", "=", "self", ".", "_axis", "\n", "begin", "=", "[", "0", "]", "*", "axis", "+", "[", "self", ".", "_begin", "]", "+", "[", "0", "]", "*", "(", "ndims", "-", "axis", "-", "1", ")", "\n", "size", "=", "[", "-", "1", "]", "*", "axis", "+", "[", "self", ".", "_slice_dim", ".", "size", "]", "+", "[", "-", "1", "]", "*", "(", "ndims", "-", "axis", "-", "1", ")", "\n", "\n", "def", "slicewise_fn", "(", "x", ",", "begin", ",", "size", ")", ":", "\n", "      ", "return", "tf", ".", "slice", "(", "x", ",", "begin", ",", "size", ",", "name", "=", "\"slice\"", ")", "\n", "", "y", "=", "mesh_impl", ".", "slicewise", "(", "\n", "slicewise_fn", ",", "lowering", ".", "tensors", "[", "inputs", "]", ",", "begin", ",", "size", ")", "\n", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.PadOperation.__init__": [[3775, 3793], ["ops.Operation.__init__", "dim_names.index", "Dimension", "ops.Shape", "ops.PadOperation._initialize_splittable_and_unsplittable_dims", "len", "ValueError", "sum", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "x", ",", "paddings", ",", "pad_dim_name", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "PadOperation", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "name", "=", "name", "or", "\"pad\"", ")", "\n", "assert", "len", "(", "paddings", ")", "==", "2", "\n", "input_shape", "=", "self", ".", "_inputs", "[", "0", "]", ".", "shape", "\n", "dim_names", "=", "[", "dim", ".", "name", "for", "dim", "in", "x", ".", "shape", ".", "dims", "]", "\n", "if", "pad_dim_name", "not", "in", "dim_names", ":", "\n", "      ", "raise", "ValueError", "(", "\"Padding dim name %s not found in input.\"", "%", "pad_dim_name", ")", "\n", "", "self", ".", "_paddings", "=", "paddings", "\n", "self", ".", "_axis", "=", "axis", "=", "dim_names", ".", "index", "(", "pad_dim_name", ")", "\n", "output_size", "=", "input_shape", ".", "dims", "[", "axis", "]", ".", "size", "+", "sum", "(", "paddings", ")", "\n", "self", ".", "_output_dim", "=", "Dimension", "(", "pad_dim_name", ",", "output_size", ")", "\n", "output_shape", "=", "Shape", "(", "\n", "input_shape", ".", "dims", "[", ":", "axis", "]", "+", "\n", "[", "self", ".", "_output_dim", "]", "+", "input_shape", ".", "dims", "[", "axis", "+", "1", ":", "]", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "x", ".", "dtype", ")", "]", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "pad_dim_name", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.PadOperation.gradient": [[3794, 3799], ["ops.mtf_slice"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_slice"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "slice_dim_name", "=", "self", ".", "_output_dim", ".", "name", "\n", "slice_size", "=", "self", ".", "_inputs", "[", "0", "]", ".", "shape", ".", "dims", "[", "self", ".", "_axis", "]", ".", "size", "\n", "return", "[", "mtf_slice", "(", "grad_ys", "[", "0", "]", ",", "self", ".", "_paddings", "[", "0", "]", ",", "\n", "slice_size", ",", "slice_dim_name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.PadOperation.lower": [[3800, 3814], ["lowering.mesh_impl", "lowering.mesh_impl.slicewise", "lowering.set_tensor_lowering", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "ValueError", "tensorflow.pad"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "if", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_output_dim", ")", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"can't pad along split axis\"", ")", "\n", "", "inputs", "=", "self", ".", "_inputs", "[", "0", "]", "\n", "ndims", "=", "self", ".", "_inputs", "[", "0", "]", ".", "shape", ".", "ndims", "\n", "axis", "=", "self", ".", "_axis", "\n", "paddings", "=", "[", "[", "0", ",", "0", "]", "]", "*", "axis", "+", "[", "self", ".", "_paddings", "]", "+", "[", "[", "0", ",", "0", "]", "]", "*", "(", "ndims", "-", "axis", "-", "1", ")", "\n", "\n", "def", "slicewise_fn", "(", "x", ",", "paddings", ")", ":", "\n", "      ", "return", "tf", ".", "pad", "(", "x", ",", "paddings", ",", "name", "=", "\"pad\"", ")", "\n", "", "y", "=", "mesh_impl", ".", "slicewise", "(", "\n", "slicewise_fn", ",", "lowering", ".", "tensors", "[", "inputs", "]", ",", "paddings", ")", "\n", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.OneHotOperation.__init__": [[3820, 3835], ["ops.Operation.__init__", "ops.Shape", "ops.OneHotOperation._initialize_all_dimensions_as_splittable", "ValueError", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable"], ["def", "__init__", "(", "self", ",", "indices", ",", "output_dim", ",", "on_value", ",", "off_value", ",", "dtype", ",", "\n", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "OneHotOperation", ",", "self", ")", ".", "__init__", "(", "[", "indices", "]", ",", "name", "=", "name", "or", "\"one_hot\"", ")", "\n", "if", "not", "indices", ".", "dtype", ".", "is_integer", ":", "\n", "      ", "raise", "ValueError", "(", "\"indices requires an integer dtype got %s\"", "%", "indices", ")", "\n", "", "self", ".", "_output_dim", "=", "output_dim", "\n", "self", ".", "_on_value", "=", "on_value", "\n", "self", ".", "_off_value", "=", "off_value", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "output_shape", "=", "Shape", "(", "indices", ".", "shape", ".", "dims", "+", "[", "output_dim", "]", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "dtype", ")", "]", "\n", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.OneHotOperation.lower": [[3836, 3858], ["lowering.mesh_impl", "lowering.mesh_impl.slice_shape", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "lowering.mesh_impl.slicewise", "lowering.set_tensor_lowering", "lowering.mesh_impl.slicewise", "tensorflow.one_hot", "lowering.mesh_impl.laid_out_pcoord", "tensorflow.cast", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_pcoord", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "indices", "=", "self", ".", "inputs", "[", "0", "]", "\n", "output_shape", "=", "self", ".", "outputs", "[", "0", "]", ".", "shape", "\n", "output_slice_shape", "=", "mesh_impl", ".", "slice_shape", "(", "output_shape", ")", "\n", "mesh_axis", "=", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "self", ".", "_output_dim", ")", "\n", "depth", "=", "output_slice_shape", "[", "-", "1", "]", "\n", "if", "mesh_axis", "is", "None", ":", "\n", "      ", "offset", "=", "0", "\n", "", "else", ":", "\n", "      ", "offset", "=", "mesh_impl", ".", "slicewise", "(", "\n", "tf", ".", "multiply", ",", "mesh_impl", ".", "laid_out_pcoord", "(", "mesh_axis", ")", ",", "depth", ")", "\n", "\n", "", "def", "slicewise_fn", "(", "indices_slice", ",", "offset", ")", ":", "\n", "      ", "return", "tf", ".", "one_hot", "(", "indices_slice", "-", "offset", ",", "\n", "depth", ",", "\n", "on_value", "=", "tf", ".", "cast", "(", "self", ".", "_on_value", ",", "self", ".", "_dtype", ")", ",", "\n", "off_value", "=", "tf", ".", "cast", "(", "self", ".", "_off_value", ",", "self", ".", "_dtype", ")", ",", "\n", "dtype", "=", "self", ".", "_dtype", ")", "\n", "", "y", "=", "mesh_impl", ".", "slicewise", "(", "\n", "slicewise_fn", ",", "lowering", ".", "tensors", "[", "indices", "]", ",", "offset", ")", "\n", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ImportOperation.__init__": [[3863, 3875], ["ops.Operation.__init__", "tensorflow.convert_to_tensor", "ops.ImportOperation._initialize_all_dimensions_as_splittable", "tensorflow.convert_to_tensor.shape.is_compatible_with", "ValueError", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable"], ["def", "__init__", "(", "self", ",", "mesh", ",", "tf_tensor", ",", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "ImportOperation", ",", "self", ")", ".", "__init__", "(", "[", "]", ",", "mesh", "=", "mesh", ",", "name", "=", "name", "or", "\"import\"", ")", "\n", "tf_tensor", "=", "tf", ".", "convert_to_tensor", "(", "tf_tensor", ")", "\n", "if", "not", "tf_tensor", ".", "shape", ".", "is_compatible_with", "(", "shape", ".", "to_integer_list", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"Incompatible Shape - trying to import %s with shape %s\"", "\n", "%", "(", "tf_tensor", ",", "shape", ")", ")", "\n", "", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "shape", ",", "tf_tensor", ".", "dtype", ")", "]", "\n", "self", ".", "_tf_tensor", "=", "tf_tensor", "\n", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ImportOperation.lower": [[3876, 3881], ["lowering.mesh_impl", "lowering.set_tensor_lowering", "lowering.mesh_impl.import_tf_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "lowering", ".", "set_tensor_lowering", "(", "\n", "self", ".", "outputs", "[", "0", "]", ",", "\n", "mesh_impl", ".", "import_tf_tensor", "(", "self", ".", "outputs", "[", "0", "]", ",", "self", ".", "_tf_tensor", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ImportLaidOutTensorOperation.__init__": [[3886, 3898], ["ops.Operation.__init__", "ops.ImportLaidOutTensorOperation._initialize_splittable_and_unsplittable_dims", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "mesh", ",", "laid_out_tensor", ",", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "ImportLaidOutTensorOperation", ",", "self", ")", ".", "__init__", "(", "[", "]", ",", "\n", "mesh", "=", "mesh", ",", "\n", "name", "=", "name", "or", "\"import\"", ")", "\n", "dtype", "=", "laid_out_tensor", ".", "tensor_list", "[", "0", "]", ".", "dtype", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "shape", ",", "dtype", ")", "]", "\n", "self", ".", "_laid_out_tensor", "=", "laid_out_tensor", "\n", "\n", "# For this operation, it doesn't make sense to talk about the splittability", "\n", "# of dimensions, because laid_out_tensor depends on a particular layout.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\"unsplittable\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ImportLaidOutTensorOperation.lower": [[3899, 3901], ["lowering.set_tensor_lowering"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "self", ".", "_laid_out_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.__init__": [[3955, 3958], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "to_laid_out_tensor_fn", ",", "slice_shape", ")", ":", "\n", "    ", "self", ".", "_to_laid_out_tensor_fn", "=", "to_laid_out_tensor_fn", "\n", "self", ".", "_slice_shape", "=", "slice_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor": [[3959, 3961], ["ops.LazyLaidOutTensor._to_laid_out_tensor_fn"], "methods", ["None"], ["", "def", "to_laid_out_tensor", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_to_laid_out_tensor_fn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape": [[3962, 3965], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "slice_shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_slice_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.VariableDType.__init__": [[3991, 3998], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "None", ",", "\n", "activation_dtype", "=", "None", ")", ":", "\n", "    ", "self", ".", "_master_dtype", "=", "master_dtype", "\n", "self", ".", "_slice_dtype", "=", "slice_dtype", "or", "master_dtype", "\n", "self", ".", "_activation_dtype", "=", "activation_dtype", "or", "master_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.VariableDType.master_dtype": [[3999, 4002], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "master_dtype", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_master_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.VariableDType.slice_dtype": [[4003, 4006], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "slice_dtype", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_slice_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.VariableDType.activation_dtype": [[4007, 4010], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "activation_dtype", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_activation_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.__init__": [[4015, 4041], ["ops.Operation.__init__", "ops.Variable._initialize_all_dimensions_as_splittable", "ops.Variable.graph.all_variables.append", "isinstance", "ValueError", "isinstance", "ops.Tensor", "ops.Variable.graph.trainable_variables.append", "tensorflow.device", "mesh_tensorflow.utils.outside_all_rewrites", "tensorflow.get_variable", "ops.Variable._master.name.find"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.outside_all_rewrites", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["def", "__init__", "(", "\n", "self", ",", "mesh", ",", "name", ",", "shape", ",", "dtype", ",", "initializer", ",", "trainable", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "Variable", ",", "self", ")", ".", "__init__", "(", "[", "]", ",", "mesh", ",", "name", "=", "\"name_will_be_set_later\"", ")", "\n", "if", "not", "isinstance", "(", "dtype", ",", "VariableDType", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"dtype must be a VariableDType got %s\"", "%", "dtype", ")", "\n", "", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_trainable", "=", "trainable", "\n", "if", "not", "isinstance", "(", "self", ",", "StackedVariable", ")", ":", "\n", "      ", "with", "tf", ".", "device", "(", "mesh", ".", "variable_placer_fn", ")", ",", "utils", ".", "outside_all_rewrites", "(", ")", ":", "\n", "        ", "self", ".", "_master", "=", "tf", ".", "get_variable", "(", "\n", "name", ",", "\n", "shape", ".", "to_integer_list", ",", "\n", "dtype", "=", "self", ".", "master_dtype", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "trainable", ",", "\n", "**", "kwargs", ")", "\n", "", "self", ".", "_name", "=", "self", ".", "_master", ".", "name", "[", ":", "self", ".", "_master", ".", "name", ".", "find", "(", "\":\"", ")", "]", "\n", "", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "shape", ",", "dtype", ".", "activation_dtype", ")", "]", "\n", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n", "self", ".", "graph", ".", "all_variables", ".", "append", "(", "self", ")", "\n", "if", "trainable", ":", "\n", "      ", "self", ".", "graph", ".", "trainable_variables", ".", "append", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.__repr__": [[4042, 4044], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "\"Variable(%s)\"", "%", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.lower": [[4045, 4058], ["lowering.mesh_impl", "lowering.set_tensor_lowering", "mesh_tensorflow.utils.outside_all_rewrites", "lowering.mesh_impl.LaidOutVariable", "lowering.mesh_impl.slicewise", "lowering.add_counter", "lowering.add_counter"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.outside_all_rewrites", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "with", "utils", ".", "outside_all_rewrites", "(", ")", ":", "\n", "      ", "sv", "=", "mesh_impl", ".", "LaidOutVariable", "(", "self", ",", "mesh_impl", ")", "\n", "", "lowering", ".", "variables", "[", "self", "]", "=", "sv", "\n", "lowering", ".", "set_tensor_lowering", "(", "\n", "self", ".", "outputs", "[", "0", "]", ",", "\n", "mesh_impl", ".", "slicewise", "(", "\n", "tf", ".", "cast", ",", "sv", ".", "laid_out_tensor", ",", "self", ".", "activation_dtype", ")", ")", "\n", "if", "self", ".", "_trainable", ":", "\n", "      ", "lowering", ".", "add_counter", "(", "\"variables/trainable\"", ",", "self", ".", "outputs", "[", "0", "]", ".", "size", ")", "\n", "", "else", ":", "\n", "      ", "lowering", ".", "add_counter", "(", "\"variables/untrainable\"", ",", "self", ".", "outputs", "[", "0", "]", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.value": [[4059, 4062], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.shape": [[4063, 4066], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "value", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.size": [[4067, 4070], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "shape", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.dtype": [[4071, 4074], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.master_dtype": [[4075, 4078], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "master_dtype", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_dtype", ".", "master_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.slice_dtype": [[4079, 4082], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "slice_dtype", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_dtype", ".", "slice_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.activation_dtype": [[4083, 4086], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "activation_dtype", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_dtype", ".", "activation_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.trainable": [[4087, 4090], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_trainable", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.master_device": [[4091, 4094], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "master_device", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_master", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.get_master": [[4095, 4097], ["None"], "methods", ["None"], ["", "def", "get_master", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_master", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.assign_to_master": [[4098, 4100], ["tensorflow.assign"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign"], ["", "def", "assign_to_master", "(", "self", ",", "val", ")", ":", "\n", "    ", "return", "tf", ".", "assign", "(", "self", ".", "_master", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackedVariable.__init__": [[4109, 4127], ["ops.Shape", "ops.Variable.__init__", "ops.StackedVariable._initialize_all_dimensions_as_splittable", "v.get_master", "Dimension", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackedVariable.get_master"], ["def", "__init__", "(", "self", ",", "vs", ")", ":", "\n", "    ", "\"\"\"Create a StackedVariable.\n\n    Args:\n      vs: a list of Variables\n    \"\"\"", "\n", "shape", "=", "Shape", "(", "[", "Dimension", "(", "\"stacked\"", ",", "len", "(", "vs", ")", ")", "]", "+", "vs", "[", "0", "]", ".", "shape", ".", "dims", ")", "\n", "name", "=", "\"stacked/\"", "+", "vs", "[", "0", "]", ".", "name", "\n", "# TODO(noam): verify that vs are the same shape, etc.", "\n", "super", "(", "StackedVariable", ",", "self", ")", ".", "__init__", "(", "\n", "vs", "[", "0", "]", ".", "mesh", ",", "name", ",", "shape", ",", "vs", "[", "0", "]", ".", "dtype", ",", "None", ",", "vs", "[", "0", "]", ".", "trainable", ")", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_masters", "=", "[", "v", ".", "get_master", "(", ")", "for", "v", "in", "vs", "]", "\n", "self", ".", "_original_names", "=", "[", "v", ".", "name", "for", "v", "in", "vs", "]", "\n", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackedVariable.original_names": [[4128, 4131], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "original_names", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_original_names", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackedVariable.master_device": [[4132, 4135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "master_device", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_masters", "[", "0", "]", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackedVariable.get_master": [[4136, 4139], ["tensorflow.device", "tensorflow.stack"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack"], ["", "def", "get_master", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "self", ".", "master_device", ")", ":", "\n", "      ", "return", "tf", ".", "stack", "(", "self", ".", "_masters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackedVariable.assign_to_master": [[4140, 4144], ["tensorflow.group", "tensorflow.assign", "zip", "tensorflow.unstack"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.unstack"], ["", "", "def", "assign_to_master", "(", "self", ",", "val", ")", ":", "\n", "    ", "return", "tf", ".", "group", "(", "[", "\n", "tf", ".", "assign", "(", "var_slice", ",", "val_slice", ")", "for", "var_slice", ",", "val_slice", "\n", "in", "zip", "(", "self", ".", "_masters", ",", "tf", ".", "unstack", "(", "val", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ReadVariable.__init__": [[4149, 4154], ["ops.Operation.__init__", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "var", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "ReadVariable", ",", "self", ")", ".", "__init__", "(", "\n", "var", ".", "outputs", ",", "name", "=", "name", "or", "\"read_variable\"", ")", "\n", "self", ".", "_var", "=", "var", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "var", ".", "shape", ",", "var", ".", "activation_dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ReadVariable.gradient": [[4155, 4157], ["None"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "return", "grad_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ReadVariable.lower": [[4158, 4164], ["lowering.mesh_impl", "lowering.set_tensor_lowering", "lowering.mesh_impl.slicewise"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "sv", "=", "lowering", ".", "variables", "[", "self", ".", "_var", "]", "\n", "lowering", ".", "set_tensor_lowering", "(", "\n", "self", ".", "outputs", "[", "0", "]", ",", "mesh_impl", ".", "slicewise", "(", "\n", "tf", ".", "cast", ",", "sv", ".", "laid_out_tensor", ",", "self", ".", "_var", ".", "activation_dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Assign.__init__": [[4240, 4246], ["ops.Operation.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "variables", ",", "new_values", ",", "assign_fn", "=", "assign_slice", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "Assign", ",", "self", ")", ".", "__init__", "(", "\n", "new_values", ",", "variables", "[", "0", "]", ".", "mesh", ",", "name", "=", "name", "or", "\"assign\"", ")", "\n", "self", ".", "_variables", "=", "variables", "\n", "self", ".", "_assign_fn", "=", "assign_fn", "\n", "self", ".", "_outputs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Assign.lower": [[4247, 4254], ["zip", "tensorflow.group", "ops.append", "lowering.variables[].assign_to_slices", "lowering.tensors[].to_laid_out_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "ops", "=", "[", "]", "\n", "for", "var", ",", "val", "in", "zip", "(", "self", ".", "_variables", ",", "self", ".", "inputs", ")", ":", "\n", "      ", "ops", ".", "append", "(", "lowering", ".", "variables", "[", "var", "]", ".", "assign_to_slices", "(", "\n", "self", ".", "_assign_fn", ",", "\n", "lowering", ".", "tensors", "[", "val", "]", ".", "to_laid_out_tensor", "(", ")", ".", "all_slices", ")", ")", "\n", "", "lowering", ".", "operations", "[", "self", "]", "=", "tf", ".", "group", "(", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Assign.assign_fn": [[4255, 4258], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "assign_fn", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_assign_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Assign.variables": [[4259, 4262], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "variables", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_variables", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Depend.__init__": [[4300, 4308], ["ops.Operation.__init__", "ops.Tensor", "ValueError", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "x", ",", "dependencies", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "Depend", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "x", ".", "mesh", ",", "name", "=", "name", "or", "\"depend\"", ")", "\n", "for", "d", "in", "dependencies", ":", "\n", "      ", "if", "not", "isinstance", "(", "d", ",", "Operation", ")", "and", "not", "isinstance", "(", "d", ",", "Tensor", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"dependencies must be mtf.Operations or mtf.Tensor.\"", "\n", "\"got %s\"", "%", "d", ")", "\n", "", "", "self", ".", "_dependencies", "=", "dependencies", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "x", ".", "shape", ",", "x", ".", "dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Depend.lower": [[4309, 4326], ["lowering.mesh_impl", "ValueError", "isinstance", "tensorflow.control_dependencies", "lowering.set_tensor_lowering", "control_inputs.append", "control_inputs.append", "tensorflow.nest.flatten", "lowering.mesh_impl.slicewise"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "if", "not", "mesh_impl", ".", "supports_control_dependencies", ":", "\n", "      ", "raise", "ValueError", "(", "\"Mesh does not suppport control dependencies.\"", ")", "\n", "\n", "", "control_inputs", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "_dependencies", ":", "\n", "      ", "if", "isinstance", "(", "d", ",", "Operation", ")", ":", "\n", "        ", "control_inputs", ".", "append", "(", "lowering", ".", "operations", "[", "d", "]", ")", "\n", "", "else", ":", "\n", "        ", "control_inputs", ".", "append", "(", "lowering", ".", "tensors", "[", "d", "]", ".", "tensor_list", ")", "\n", "\n", "", "", "with", "tf", ".", "control_dependencies", "(", "tf", ".", "nest", ".", "flatten", "(", "control_inputs", ")", ")", ":", "\n", "      ", "lowering", ".", "set_tensor_lowering", "(", "\n", "self", ".", "outputs", "[", "0", "]", ",", "\n", "mesh_impl", ".", "slicewise", "(", "tf", ".", "identity", ",", "\n", "lowering", ".", "tensors", "[", "self", ".", "inputs", "[", "0", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Depend.gradient": [[4327, 4329], ["None"], "methods", ["None"], ["", "", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "return", "grad_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Constant.__init__": [[4346, 4353], ["ops.Operation.__init__", "ops.Constant._initialize_all_dimensions_as_splittable", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable"], ["def", "__init__", "(", "self", ",", "mesh", ",", "value", ",", "shape", ",", "dtype", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "Constant", ",", "self", ")", ".", "__init__", "(", "[", "]", ",", "mesh", ",", "name", "=", "name", "or", "\"constant\"", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "shape", ",", "dtype", ")", "]", "\n", "self", ".", "_value", "=", "value", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Constant.lower": [[4354, 4362], ["lowering.mesh_impl", "lowering.mesh_impl.slice_shape", "lowering.set_tensor_lowering", "tensorflow.constant", "lowering.mesh_impl.slicewise"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "slice_shape", "=", "mesh_impl", ".", "slice_shape", "(", "self", ".", "outputs", "[", "0", "]", ".", "shape", ")", "\n", "def", "tf_fn", "(", ")", ":", "\n", "      ", "return", "tf", ".", "constant", "(", "value", "=", "self", ".", "_value", ",", "\n", "dtype", "=", "self", ".", "outputs", "[", "0", "]", ".", "dtype", ",", "\n", "shape", "=", "slice_shape", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "mesh_impl", ".", "slicewise", "(", "tf_fn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StopGradient.__init__": [[4390, 4394], ["ops.Operation.__init__", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "x", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "StopGradient", ",", "self", ")", ".", "__init__", "(", "\n", "[", "x", "]", ",", "x", ".", "mesh", ",", "name", "=", "name", "or", "\"stop_gradient\"", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "x", ".", "shape", ",", "x", ".", "dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StopGradient.lower": [[4395, 4398], ["lowering.set_tensor_lowering"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "\n", "lowering", ".", "tensors", "[", "self", ".", "inputs", "[", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StopGradient.has_gradient": [[4399, 4402], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_gradient", "(", "self", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ScalarSummaryOperation.__init__": [[4411, 4417], ["ops.Operation.__init__", "ValueError", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "x", ")", ":", "\n", "    ", "super", "(", "ScalarSummaryOperation", ",", "self", ")", ".", "__init__", "(", "\n", "[", "x", "]", ",", "x", ".", "mesh", ",", "name", "=", "name", ")", "\n", "if", "x", ".", "shape", ".", "dims", ":", "\n", "      ", "raise", "ValueError", "(", "\"ScalarSummaryOperation takes a scalar\"", ")", "\n", "", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "x", ".", "shape", ",", "x", ".", "dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ScalarSummaryOperation.lower": [[4418, 4424], ["lowering.tensors[].to_laid_out_tensor", "tensorflow.add_to_collection", "lowering.set_tensor_lowering"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "lowered_input", "=", "lowering", ".", "tensors", "[", "self", ".", "inputs", "[", "0", "]", "]", ".", "to_laid_out_tensor", "(", ")", "\n", "tf", ".", "add_to_collection", "(", "utils", ".", "SCALAR_SUMMARIES_COLLECTION_KEY", ",", "\n", "(", "self", ".", "name", ",", "lowered_input", ".", "tensor_list", "[", "0", "]", ")", ")", "\n", "lowering", ".", "set_tensor_lowering", "(", "\n", "self", ".", "outputs", "[", "0", "]", ",", "lowered_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ScalarSummaryOperation.gradient": [[4425, 4427], ["None"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "return", "grad_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.PrintOperation.__init__": [[4448, 4455], ["ops.Operation.__init__", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "x", ",", "data", ",", "message", ",", "name", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "PrintOperation", ",", "self", ")", ".", "__init__", "(", "\n", "[", "x", "]", ",", "x", ".", "mesh", ",", "name", "=", "name", "or", "\"Print\"", ")", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "x", ".", "shape", ",", "x", ".", "dtype", ")", "]", "\n", "self", ".", "_data", "=", "data", "\n", "self", ".", "_message", "=", "message", "\n", "self", ".", "_kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.PrintOperation.lower": [[4456, 4463], ["lowering.set_tensor_lowering", "lowering.mesh_impl().Print", "lowering.mesh_impl", "lowering.tensors[].to_laid_out_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.Print", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "lowering", ".", "set_tensor_lowering", "(", "\n", "self", ".", "outputs", "[", "0", "]", ",", "\n", "lowering", ".", "mesh_impl", "(", "self", ")", ".", "Print", "(", "\n", "lowering", ".", "tensors", "[", "self", ".", "inputs", "[", "0", "]", "]", ",", "\n", "[", "lowering", ".", "tensors", "[", "d", "]", ".", "to_laid_out_tensor", "(", ")", "for", "d", "in", "self", ".", "_data", "]", ",", "\n", "self", ".", "_message", ",", "**", "self", ".", "_kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.PrintOperation.gradient": [[4464, 4466], ["None"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "return", "grad_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ReshapeOperation.__init__": [[4486, 4496], ["ops.Operation.__init__", "ops.ReshapeOperation._initialize_all_dimensions_as_splittable", "ValueError", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable"], ["def", "__init__", "(", "self", ",", "x", ",", "new_shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "ReshapeOperation", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "x", ".", "mesh", ",", "name", "=", "name", "or", "\"reshape\"", ")", "\n", "if", "x", ".", "shape", ".", "size", "!=", "new_shape", ".", "size", ":", "\n", "      ", "raise", "ValueError", "(", "\"Cannot reshape Tensor %s to shape %s - sizes differ.\"", "\n", "%", "(", "x", ",", "new_shape", ")", ")", "\n", "", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "new_shape", ",", "x", ".", "dtype", ")", "]", "\n", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ReshapeOperation.lower": [[4497, 4584], ["lowering.mesh_impl", "lowering.mesh_impl.mesh_axis_to_cumprod", "lowering.mesh_impl.mesh_axis_to_cumprod", "enumerate", "lowering.mesh_impl.laid_out_size", "lowering.mesh_impl.slice_shape", "lowering.mesh_impl.slicewise_delay_allreduce", "lowering.set_tensor_lowering", "zip", "old_shape.cumprod_to_tensor_axis", "old_shape.cumprod_to_tensor_axis", "old_shape.cumprod_to_tensor_axis", "lowering.mesh_impl.alltoall", "lowering.add_counter", "old_shape.cumprod_to_tensor_axis", "lowering.mesh_impl.allconcat", "lowering.add_counter", "tensorflow.reshape", "lowering.mesh_impl.allsplit", "new_shape.cumprod_to_tensor_axis", "allsplit_after_reshape.append", "lowering.mesh_impl.allsplit", "NotImplementedError", "mesh_axes_allsplit.append", "mesh_axes_allconcat.append", "mesh_axes_alltoall.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.mesh_axis_to_cumprod", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.mesh_axis_to_cumprod", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slicewise_delay_allreduce", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.cumprod_to_tensor_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.cumprod_to_tensor_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.cumprod_to_tensor_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.alltoall", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.cumprod_to_tensor_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.allconcat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.add_counter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.allsplit", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.cumprod_to_tensor_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.allsplit"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "\"\"\"Lower the ReshapeOperation.\n\n    Reshaping can require collective communication between processors.\n    We haven't yet implemented all possible reshapes.  We try to handle the\n    common cases here - otherwise we raise a NotImplementedError.\n\n    Args:\n      lowering: a Lowering\n    Raises:\n      NotImplementedError: if we haven't covered this case\n    \"\"\"", "\n", "old_shape", "=", "self", ".", "inputs", "[", "0", "]", ".", "shape", "\n", "new_shape", "=", "self", ".", "outputs", "[", "0", "]", ".", "shape", "\n", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "slices", "=", "lowering", ".", "tensors", "[", "self", ".", "inputs", "[", "0", "]", "]", "\n", "mesh_axis_to_cumprod_old", "=", "mesh_impl", ".", "mesh_axis_to_cumprod", "(", "old_shape", ")", "\n", "mesh_axis_to_cumprod_new", "=", "mesh_impl", ".", "mesh_axis_to_cumprod", "(", "new_shape", ")", "\n", "# Figure out what needs to be done for different mesh-axes", "\n", "mesh_axes_allsplit", "=", "[", "]", "\n", "mesh_axes_allconcat", "=", "[", "]", "\n", "mesh_axes_alltoall", "=", "[", "]", "\n", "for", "mesh_axis", ",", "(", "old_cumprod", ",", "new_cumprod", ")", "in", "enumerate", "(", "\n", "zip", "(", "mesh_axis_to_cumprod_old", ",", "mesh_axis_to_cumprod_new", ")", ")", ":", "\n", "      ", "if", "new_cumprod", "!=", "old_cumprod", ":", "\n", "        ", "if", "old_cumprod", "is", "None", ":", "\n", "# split in new layout but not in old layout - we need an allsplit", "\n", "          ", "mesh_axes_allsplit", ".", "append", "(", "mesh_axis", ")", "\n", "", "elif", "new_cumprod", "is", "None", ":", "\n", "# split in old layout but not in new layout - we need an allconcat", "\n", "          ", "mesh_axes_allconcat", ".", "append", "(", "mesh_axis", ")", "\n", "", "else", ":", "\n", "# split differently in old and new layouts - we need an alltoall", "\n", "          ", "mesh_axes_alltoall", ".", "append", "(", "mesh_axis", ")", "\n", "\n", "", "", "", "laid_out_size", "=", "mesh_impl", ".", "laid_out_size", "(", "old_shape", ")", "\n", "\n", "# list of (mesh_axis, tensor_axis) pairs to allsplit after the reshape", "\n", "# typically we do the allsplit before the reshape, to save communication,", "\n", "# but sometimes we need to delay it.", "\n", "allsplit_after_reshape", "=", "[", "]", "\n", "for", "mesh_axis", "in", "mesh_axes_allsplit", ":", "\n", "      ", "tensor_axis", "=", "old_shape", ".", "cumprod_to_tensor_axis", "(", "\n", "mesh_axis_to_cumprod_new", "[", "mesh_axis", "]", ")", "\n", "if", "tensor_axis", "is", "None", ":", "\n", "# delay allsplit until after reshape", "\n", "        ", "tensor_axis", "=", "new_shape", ".", "cumprod_to_tensor_axis", "(", "\n", "mesh_axis_to_cumprod_new", "[", "mesh_axis", "]", ")", "\n", "allsplit_after_reshape", ".", "append", "(", "(", "mesh_axis", ",", "tensor_axis", ")", ")", "\n", "", "else", ":", "\n", "        ", "slices", "=", "mesh_impl", ".", "allsplit", "(", "slices", ",", "mesh_axis", ",", "tensor_axis", ")", "\n", "laid_out_size", "//=", "mesh_impl", ".", "shape", "[", "mesh_axis", "]", ".", "size", "\n", "", "", "for", "mesh_axis", "in", "mesh_axes_alltoall", ":", "\n", "      ", "split_tensor_axis", "=", "old_shape", ".", "cumprod_to_tensor_axis", "(", "\n", "mesh_axis_to_cumprod_new", "[", "mesh_axis", "]", ")", "\n", "if", "split_tensor_axis", "is", "None", ":", "\n", "# TODO(noam): try to handle this case", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Try first reshaping to insert a new tf dimension,\"", "\n", "\" then changing layout. input_shape=%s output_shape=%s\"", "\n", "%", "(", "self", ".", "inputs", "[", "0", "]", ".", "shape", ",", "self", ".", "outputs", "[", "0", "]", ".", "shape", ")", ")", "\n", "", "concat_tensor_axis", "=", "old_shape", ".", "cumprod_to_tensor_axis", "(", "\n", "mesh_axis_to_cumprod_old", "[", "mesh_axis", "]", ")", "\n", "assert", "concat_tensor_axis", "is", "not", "None", "\n", "slices", "=", "mesh_impl", ".", "alltoall", "(", "\n", "slices", ",", "mesh_axis", ",", "split_tensor_axis", ",", "concat_tensor_axis", ")", "\n", "lowering", ".", "add_counter", "(", "\n", "\"alltoall/%s/reshape_op\"", "%", "mesh_axis", ",", "laid_out_size", ")", "\n", "\n", "", "for", "mesh_axis", "in", "mesh_axes_allconcat", ":", "\n", "      ", "tensor_axis", "=", "old_shape", ".", "cumprod_to_tensor_axis", "(", "\n", "mesh_axis_to_cumprod_old", "[", "mesh_axis", "]", ")", "\n", "assert", "tensor_axis", "is", "not", "None", "\n", "slices", "=", "mesh_impl", ".", "allconcat", "(", "slices", ",", "mesh_axis", ",", "tensor_axis", ")", "\n", "laid_out_size", "*=", "mesh_impl", ".", "shape", "[", "mesh_axis", "]", ".", "size", "\n", "lowering", ".", "add_counter", "(", "\n", "\"allconcat/%s/reshape_op\"", "%", "mesh_axis", ",", "laid_out_size", ")", "\n", "# now reshape the slices", "\n", "", "new_slice_shape", "=", "mesh_impl", ".", "slice_shape", "(", "new_shape", ")", "\n", "for", "mesh_axis", ",", "tensor_axis", "in", "allsplit_after_reshape", ":", "\n", "      ", "new_slice_shape", "[", "tensor_axis", "]", "*=", "mesh_impl", ".", "shape", "[", "mesh_axis", "]", ".", "size", "\n", "", "def", "reshape_fn", "(", "x", ")", ":", "\n", "      ", "return", "tf", ".", "reshape", "(", "x", ",", "new_slice_shape", ")", "\n", "", "slices", "=", "mesh_impl", ".", "slicewise_delay_allreduce", "(", "reshape_fn", ",", "slices", ")", "\n", "for", "mesh_axis", ",", "tensor_axis", "in", "allsplit_after_reshape", ":", "\n", "      ", "slices", "=", "mesh_impl", ".", "allsplit", "(", "slices", ",", "mesh_axis", ",", "tensor_axis", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "slices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ReshapeOperation.gradient": [[4585, 4587], ["ops.reshape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "return", "[", "reshape", "(", "grad_ys", "[", "0", "]", ",", "self", ".", "inputs", "[", "0", "]", ".", "shape", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TopKOperation.__init__": [[4904, 4921], ["ops.Operation.__init__", "ops.TopKOperation._initialize_splittable_and_unsplittable_dims", "ValueError", "ValueError", "ops.Tensor", "ops.Tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_splittable_and_unsplittable_dims"], ["def", "__init__", "(", "self", ",", "x", ",", "reduced_dim", ",", "k_dim", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "TopKOperation", ",", "self", ")", ".", "__init__", "(", "[", "x", "]", ",", "name", "=", "name", "or", "\"top_k\"", ")", "\n", "self", ".", "_value_dtype", "=", "x", ".", "dtype", "\n", "if", "reduced_dim", "not", "in", "x", ".", "shape", ".", "dims", ":", "\n", "      ", "raise", "ValueError", "(", "\"reduced dim %s must be in x.shape %s\"", "\n", "%", "(", "reduced_dim", ",", "x", ".", "shape", ")", ")", "\n", "", "if", "k_dim", ".", "size", ">", "reduced_dim", ".", "size", ":", "\n", "      ", "raise", "ValueError", "(", "\"k_dim.size must be <= reduced_dim.size: %s vs %s\"", "\n", "%", "(", "k_dim", ",", "reduced_dim", ")", ")", "\n", "", "output_shape", "=", "x", ".", "shape", "-", "reduced_dim", "+", "k_dim", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "output_shape", ",", "x", ".", "dtype", ")", ",", "\n", "Tensor", "(", "self", ",", "output_shape", ",", "tf", ".", "int32", ")", ",", "]", "\n", "self", ".", "_reduced_dim", "=", "reduced_dim", "\n", "self", ".", "_k_dim", "=", "k_dim", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_splittable_and_unsplittable_dims", "(", "\n", "\"splittable\"", ",", "[", "self", ".", "_k_dim", ".", "name", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TopKOperation.gradient": [[4922, 4927], ["ops.one_hot", "ops.einsum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "dvalue", "=", "grad_ys", "[", "0", "]", "\n", "indices", "=", "self", ".", "outputs", "[", "1", "]", "\n", "mapping", "=", "one_hot", "(", "indices", ",", "self", ".", "_reduced_dim", ",", "dtype", "=", "self", ".", "_value_dtype", ")", "\n", "return", "[", "einsum", "(", "[", "dvalue", ",", "mapping", "]", ",", "output_shape", "=", "self", ".", "inputs", "[", "0", "]", ".", "shape", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.TopKOperation.lower": [[4928, 4968], ["lowering.mesh_impl", "x.shape.dims.index", "lowering.mesh_impl.tensor_dimension_to_mesh_axis", "lowering.mesh_impl.slicewise", "lowering.set_tensor_lowering", "lowering.set_tensor_lowering", "tensorflow.transpose", "lowering.mesh_impl.slicewise", "lowering.mesh_impl.allconcat", "lowering.mesh_impl.allconcat", "lowering.mesh_impl.slicewise", "tensorflow.math.top_k", "lowering.mesh_impl.laid_out_pcoord", "tensorflow.math.top_k", "tensorflow.expand_dims", "tensorflow.expand_dims", "min", "tensorflow.gather", "tensorflow.math.reduce_max", "tensorflow.cast", "range", "tensorflow.math.argmax"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.allconcat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.allconcat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_pcoord", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_max", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "x", "=", "self", ".", "inputs", "[", "0", "]", "\n", "ndims", "=", "x", ".", "shape", ".", "ndims", "\n", "reduced_axis", "=", "x", ".", "shape", ".", "dims", ".", "index", "(", "self", ".", "_reduced_dim", ")", "\n", "reduced_mesh_axis", "=", "mesh_impl", ".", "tensor_dimension_to_mesh_axis", "(", "\n", "self", ".", "_reduced_dim", ")", "\n", "if", "reduced_mesh_axis", "is", "not", "None", ":", "\n", "      ", "reduced_dim_per_shard", "=", "(", "\n", "self", ".", "_reduced_dim", ".", "size", "//", "mesh_impl", ".", "shape", "[", "reduced_mesh_axis", "]", ".", "size", ")", "\n", "", "else", ":", "\n", "      ", "reduced_dim_per_shard", "=", "self", ".", "_reduced_dim", ".", "size", "\n", "", "def", "_slicewise_top_k", "(", "t", ")", ":", "\n", "      ", "t", "=", "tf", ".", "transpose", "(", "\n", "t", ",", "[", "i", "for", "i", "in", "range", "(", "ndims", ")", "if", "i", "!=", "reduced_axis", "]", "+", "[", "reduced_axis", "]", ")", "\n", "if", "self", ".", "_k_dim", ".", "size", "==", "1", ":", "\n", "# top_k seems to be slow on TPU - use reduce_max and argmax instead", "\n", "        ", "return", "(", "tf", ".", "expand_dims", "(", "tf", ".", "math", ".", "reduce_max", "(", "t", ",", "-", "1", ")", ",", "-", "1", ")", ",", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "argmax", "(", "t", ",", "-", "1", ")", ",", "tf", ".", "int32", ")", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "math", ".", "top_k", "(", "t", ",", "min", "(", "self", ".", "_k_dim", ".", "size", ",", "reduced_dim_per_shard", ")", ")", "\n", "", "", "values", ",", "indices", "=", "mesh_impl", ".", "slicewise", "(", "_slicewise_top_k", ",", "lowering", ".", "tensors", "[", "x", "]", ")", "\n", "if", "reduced_mesh_axis", "is", "not", "None", ":", "\n", "# indices are now indices within a shard.  Make them global indices.", "\n", "      ", "indices", "=", "mesh_impl", ".", "slicewise", "(", "\n", "lambda", "idxs", ",", "pcoord", ":", "idxs", "+", "pcoord", "*", "reduced_dim_per_shard", ",", "\n", "indices", ",", "mesh_impl", ".", "laid_out_pcoord", "(", "reduced_mesh_axis", ")", ")", "\n", "# concatenate values and indices across processors,", "\n", "#   duplicating the result across mesh axis `reduced_mesh_axis`.", "\n", "values", "=", "mesh_impl", ".", "allconcat", "(", "values", ",", "reduced_mesh_axis", ",", "ndims", "-", "1", ")", "\n", "indices", "=", "mesh_impl", ".", "allconcat", "(", "indices", ",", "reduced_mesh_axis", ",", "ndims", "-", "1", ")", "\n", "# final reduction to find top k among all shards", "\n", "def", "_global_top_k", "(", "vals", ",", "global_indices", ")", ":", "\n", "        ", "vals", ",", "local_indices", "=", "tf", ".", "math", ".", "top_k", "(", "vals", ",", "self", ".", "_k_dim", ".", "size", ")", "\n", "return", "vals", ",", "tf", ".", "gather", "(", "global_indices", ",", "\n", "local_indices", ",", "\n", "batch_dims", "=", "ndims", "-", "1", ")", "\n", "", "values", ",", "indices", "=", "mesh_impl", ".", "slicewise", "(", "_global_top_k", ",", "values", ",", "indices", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "values", ")", "\n", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "1", "]", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.RangeOperation.__init__": [[5596, 5604], ["ops.Operation.__init__", "ops.convert_to_dimension", "ops.Tensor", "ops.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension"], ["def", "__init__", "(", "self", ",", "mesh", ",", "dim", ",", "dtype", ",", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "RangeOperation", ",", "self", ")", ".", "__init__", "(", "[", "]", ",", "mesh", ",", "name", "=", "name", "or", "\"range\"", ")", "\n", "dim", "=", "convert_to_dimension", "(", "dim", ")", "\n", "self", ".", "_mesh", "=", "mesh", "\n", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "Shape", "(", "[", "dim", "]", ")", ",", "dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.RangeOperation.lower": [[5605, 5617], ["lowering.mesh_impl", "tensorflow.variable_scope", "lowering.set_tensor_lowering", "tensorflow.cast", "tensorflow.range", "lowering.mesh_impl.import_tf_tensor", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "default_name", "=", "\"range\"", ")", ":", "\n", "      ", "if", "self", ".", "_dtype", "==", "tf", ".", "bfloat16", ":", "\n", "# tf.range(dtype=bfloat16) gives the wrong shape.", "\n", "# TODO(noam): report the bug.", "\n", "        ", "tf_range", "=", "tf", ".", "cast", "(", "tf", ".", "range", "(", "self", ".", "_dim", ".", "size", ")", ",", "tf", ".", "bfloat16", ")", "\n", "", "else", ":", "\n", "        ", "tf_range", "=", "tf", ".", "range", "(", "self", ".", "_dim", ".", "size", ",", "dtype", "=", "self", ".", "_dtype", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "\n", "self", ".", "outputs", "[", "0", "]", ",", "\n", "mesh_impl", ".", "import_tf_tensor", "(", "self", ".", "outputs", "[", "0", "]", ",", "tf_range", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MtfCheckpointSaverListener.__init__": [[5792, 5794], ["lowering.copy_slices_to_masters"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_slices_to_masters"], ["def", "__init__", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "self", ".", "_op", "=", "lowering", ".", "copy_slices_to_masters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MtfCheckpointSaverListener.begin": [[5795, 5798], ["tensorflow.logging.info"], "methods", ["None"], ["", "def", "begin", "(", "self", ")", ":", "\n", "# You can add ops to the graph here.", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Starting the session.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MtfCheckpointSaverListener.before_save": [[5799, 5804], ["tensorflow.logging.info", "session.run", "tensorflow.logging.info"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run"], ["", "def", "before_save", "(", "self", ",", "session", ",", "global_step_value", ")", ":", "\n", "# assigns", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Before Save.\"", ")", "\n", "session", ".", "run", "(", "self", ".", "_op", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"About to write a checkpoint\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MtfCheckpointSaverListener.after_save": [[5805, 5807], ["tensorflow.logging.info"], "methods", ["None"], ["", "def", "after_save", "(", "self", ",", "session", ",", "global_step_value", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Done writing checkpoint.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MtfCheckpointSaverListener.end": [[5808, 5810], ["tensorflow.logging.info"], "methods", ["None"], ["", "def", "end", "(", "self", ",", "session", ",", "global_step_value", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Done with the session.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MtfRestoreHook.__init__": [[5815, 5817], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "self", ".", "_lowering", "=", "lowering", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MtfRestoreHook.begin": [[5818, 5824], ["tensorflow.name_scope", "ops.MtfRestoreHook._lowering.copy_masters_to_slices"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "def", "begin", "(", "self", ")", ":", "\n", "# This namescope is useful in adding the hook operation when the graph is", "\n", "# constructed. It's also necessary to call the op when the exported model is", "\n", "# loaded in another session.", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"mtf_restore_hook\"", ")", ":", "\n", "      ", "self", ".", "_op", "=", "self", ".", "_lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MtfRestoreHook.after_create_session": [[5825, 5829], ["tensorflow.logging.info", "session.run", "tensorflow.logging.info"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run"], ["", "", "def", "after_create_session", "(", "self", ",", "session", ",", "coord", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Before copy master to slices.\"", ")", "\n", "session", ".", "run", "(", "self", ".", "_op", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Done with copy master to slices.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.RandomOperation.__init__": [[5834, 5843], ["ops.Operation.__init__", "ops.RandomOperation._initialize_all_dimensions_as_splittable", "ops.Tensor", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Operation._initialize_all_dimensions_as_splittable", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get"], ["def", "__init__", "(", "self", ",", "mesh", ",", "shape", ",", "tf_fn", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "RandomOperation", ",", "self", ")", ".", "__init__", "(", "\n", "[", "]", ",", "mesh", "=", "mesh", ",", "name", "=", "kwargs", ".", "get", "(", "\"name\"", ",", "\"random\"", ")", ")", "\n", "self", ".", "_tf_fn", "=", "tf_fn", "\n", "self", ".", "_kwargs", "=", "kwargs", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "shape", ",", "kwargs", ".", "get", "(", "\"dtype\"", ",", "tf", ".", "float32", ")", ")", "]", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.RandomOperation.lower": [[5844, 5849], ["lowering.mesh_impl", "lowering.set_tensor_lowering", "lowering.mesh_impl.random"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.random"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "output_shape", "=", "self", ".", "outputs", "[", "0", "]", ".", "shape", "\n", "lowering", ".", "set_tensor_lowering", "(", "self", ".", "outputs", "[", "0", "]", ",", "(", "\n", "mesh_impl", ".", "random", "(", "output_shape", ",", "self", ".", "_tf_fn", ",", "self", ".", "_kwargs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.WhileLoopOperation.__init__": [[6008, 6084], ["ops.Operation.__init__", "ops.pop", "len", "ops.WhileLoopOperation.__init__.make_placeholders"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "cond_fn", ",", "body_fn", ",", "inputs", ",", "\n", "tf_kwargs", "=", "None", ",", "has_accumulators", "=", "False", ",", "name", "=", "\"while_loop\"", ")", ":", "\n", "    ", "\"\"\"Create a WhileLoopOperation.\n\n    A few differences from tf.while_loop:\n\n    - gradients are not yet supported\n\n    - inputs must be a list of tensors, as opposed to an arbitrary nested\n      structure.  cond_fn and body_fn take an argument list\n\n    - we support optional \"accumulators\" which are additional outputs\n      returned by body_fn.  These are summed across all iterations and\n      retured as additional outputs of the while-loop.  To use accumulators,\n      the has_accumulators argument must be True.  For better performance,\n      we delay allreduce on the accumulators until after the loop, so that it\n      only needs to happen once.  This is useful, for example, if the\n      accumulators are summing gradients for many mini-batches.\n\n    Args:\n      cond_fn: a function from n mtf Tensors to mtf Scalar\n      body_fn: a function from n mtf Tensors to sequence of mtf Tensors\n      inputs: list of n mtf Tensors\n      tf_kwargs: a dictionary of arguments for tf.while_loop\n      has_accumulators: a boolean\n      name: a string\n    Returns:\n      a WhileLoopOperation\n    \"\"\"", "\n", "\n", "super", "(", "WhileLoopOperation", ",", "self", ")", ".", "__init__", "(", "\n", "inputs", ",", "mesh", "=", "inputs", "[", "0", "]", ".", "mesh", ",", "name", "=", "name", ")", "\n", "self", ".", "_cond_fn", "=", "cond_fn", "\n", "self", ".", "_body_fn", "=", "body_fn", "\n", "self", ".", "_tf_kwargs", "=", "tf_kwargs", "or", "{", "}", "\n", "assert", "not", "self", ".", "_tf_kwargs", ".", "get", "(", "\"back_prop\"", ",", "False", ")", "\n", "ops", "=", "self", ".", "graph", ".", "operations", "\n", "# remove self from the graph's operations", "\n", "ops", ".", "pop", "(", ")", "\n", "before", "=", "len", "(", "ops", ")", "\n", "def", "make_placeholders", "(", "name", ")", ":", "\n", "      ", "return", "[", "Tensor", "(", "self", ",", "t", ".", "shape", ",", "t", ".", "dtype", ",", "name", "=", "\"%s:%d\"", "%", "(", "name", ",", "i", ")", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "inputs", ")", "]", "\n", "", "self", ".", "_cond_inputs", "=", "make_placeholders", "(", "\"cond_input\"", ")", "\n", "self", ".", "_cond_output", "=", "self", ".", "_cond_fn", "(", "*", "self", ".", "_cond_inputs", ")", "\n", "self", ".", "_cond_ops", "=", "ops", "[", "before", ":", "]", "\n", "del", "ops", "[", "before", ":", "]", "\n", "self", ".", "_body_inputs", "=", "make_placeholders", "(", "\"body_input\"", ")", "\n", "self", ".", "_body_outputs", "=", "self", ".", "_body_fn", "(", "*", "self", ".", "_body_inputs", ")", "\n", "if", "len", "(", "self", ".", "_body_outputs", ")", "<", "len", "(", "inputs", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"body_fn produces fewer outputs than inputs\"", ")", "\n", "", "if", "len", "(", "self", ".", "_body_outputs", ")", ">", "len", "(", "inputs", ")", "and", "not", "has_accumulators", ":", "\n", "      ", "raise", "ValueError", "(", "\"body_fn produces more outputs than inputs\"", ")", "\n", "", "for", "(", "i", ",", "(", "inp", ",", "body_out", ")", ")", "in", "enumerate", "(", "\n", "zip", "(", "inputs", ",", "self", ".", "_body_outputs", "[", ":", "len", "(", "inputs", ")", "]", ")", ")", ":", "\n", "      ", "if", "inp", ".", "shape", "!=", "body_out", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"shape mismatch i=%d inp=%s body_out=%s\"", "%", "(", "i", ",", "inp", ",", "body_out", ")", ")", "\n", "# Pull new variables outside the loop.", "\n", "", "", "added_ops", "=", "ops", "[", "before", ":", "]", "\n", "del", "ops", "[", "before", ":", "]", "\n", "self", ".", "_body_ops", "=", "[", "]", "\n", "for", "op", "in", "added_ops", ":", "\n", "      ", "if", "isinstance", "(", "op", ",", "Variable", ")", ":", "\n", "        ", "ops", ".", "append", "(", "op", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "_body_ops", ".", "append", "(", "op", ")", "\n", "# re-add self to graph's operations", "\n", "", "", "ops", ".", "append", "(", "self", ")", "\n", "self", ".", "_outputs", "=", "[", "\n", "Tensor", "(", "self", ",", "t", ".", "shape", ",", "t", ".", "dtype", ",", "name", "=", "\"output:%d\"", "%", "i", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "self", ".", "_body_outputs", ")", "]", "\n", "\n", "# Rerun to take the new output into account.", "\n", "self", ".", "_splittable_dims", ",", "self", ".", "_unsplittable_dims", "=", "(", "\n", "self", ".", "_initialize_all_dimensions_as_splittable", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.WhileLoopOperation.lower": [[6085, 6154], ["lowering.mesh_impl", "tensorflow.while_loop", "enumerate", "zip", "len", "zip", "enumerate", "range", "lowered_inputs.append", "lowered_inputs.append", "zip", "lowering.mesh_impl.LaidOutTensor", "lowering.set_tensor_lowering", "lowering.mesh_impl.LaidOutTensor", "lowering.mesh_impl.LaidOutTensor", "isinstance", "len", "len", "len", "tensorflow.zeros", "ops.LazyAllreduceSum", "tensorflow.name_scope", "op.lower", "lowered_output.to_laid_out_tensor", "tensorflow.name_scope", "op.lower", "ret.append", "ret.append", "lowering.tensors[].to_laid_out_tensor", "lowering.mesh_impl.slice_shape", "lowering.mesh_impl.slicewise", "len", "len", "zip", "lowered_out.to_laid_out_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.while_loop", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.lower", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.lower", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "mesh_impl", "=", "lowering", ".", "mesh_impl", "(", "self", ")", "\n", "def", "tf_cond_fn", "(", "*", "tf_inputs", ")", ":", "\n", "      ", "for", "tf_inp", ",", "mtf_inp", "in", "zip", "(", "\n", "tf_inputs", "[", ":", "len", "(", "self", ".", "_cond_inputs", ")", "]", ",", "self", ".", "_cond_inputs", ")", ":", "\n", "        ", "lowering", ".", "tensors", "[", "mtf_inp", "]", "=", "mesh_impl", ".", "LaidOutTensor", "(", "tf_inp", ")", "\n", "", "for", "op", "in", "self", ".", "_cond_ops", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "op", ".", "name", ")", ":", "\n", "          ", "op", ".", "lower", "(", "lowering", ")", "\n", "", "", "lowered_output", "=", "lowering", ".", "tensors", "[", "self", ".", "_cond_output", "]", "\n", "ret", "=", "lowered_output", ".", "to_laid_out_tensor", "(", ")", ".", "tensor_list", "[", "0", "]", "\n", "return", "ret", "\n", "\n", "# This array keeps track of which lowered body-outputs have type", "\n", "# LazyAllreduceSum.  We treat these specially  - instead of", "\n", "# immediately converting to LaidOutTensor (executing the allreduce)", "\n", "# we sum across iterations first, then allreduce at the end.", "\n", "# When one of the body outputs is a LazyAllreduceSum, we put the", "\n", "#  LazyAllreduceSum object into this array for future reference.", "\n", "", "is_lazyallreducesum", "=", "[", "None", "]", "*", "len", "(", "self", ".", "_outputs", ")", "\n", "def", "tf_body_fn", "(", "*", "tf_inputs", ")", ":", "\n", "      ", "\"\"\"Body function for tf.while_loop.\n\n      Args:\n        *tf_inputs: a list of tf.Tensor\n      Returns:\n        a list of tf.Tensor\n      \"\"\"", "\n", "for", "tf_inp", ",", "mtf_inp", "in", "zip", "(", "\n", "tf_inputs", "[", ":", "len", "(", "self", ".", "_inputs", ")", "]", ",", "self", ".", "_body_inputs", ")", ":", "\n", "        ", "lowering", ".", "tensors", "[", "mtf_inp", "]", "=", "mesh_impl", ".", "LaidOutTensor", "(", "tf_inp", ")", "\n", "", "for", "op", "in", "self", ".", "_body_ops", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "op", ".", "name", ")", ":", "\n", "          ", "op", ".", "lower", "(", "lowering", ")", "\n", "", "", "ret", "=", "[", "]", "\n", "for", "i", ",", "mtf_out", "in", "enumerate", "(", "self", ".", "_body_outputs", ")", ":", "\n", "        ", "lowered_out", "=", "lowering", ".", "tensors", "[", "mtf_out", "]", "\n", "if", "isinstance", "(", "lowered_out", ",", "LazyAllreduceSum", ")", ":", "\n", "          ", "is_lazyallreducesum", "[", "i", "]", "=", "lowered_out", "\n", "ret", ".", "append", "(", "lowered_out", ".", "laid_out_input", ".", "tensor_list", ")", "\n", "", "else", ":", "\n", "          ", "ret", ".", "append", "(", "lowered_out", ".", "to_laid_out_tensor", "(", ")", ".", "tensor_list", ")", "\n", "# accumulators", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_inputs", ")", ",", "len", "(", "self", ".", "_outputs", ")", ")", ":", "\n", "        ", "ret", "[", "i", "]", "=", "[", "x", "+", "y", "for", "x", ",", "y", "in", "zip", "(", "ret", "[", "i", "]", ",", "tf_inputs", "[", "i", "]", ")", "]", "\n", "", "return", "ret", "\n", "\n", "", "lowered_inputs", "=", "[", "]", "\n", "for", "t", "in", "self", ".", "inputs", ":", "\n", "      ", "lowered_inputs", ".", "append", "(", "\n", "lowering", ".", "tensors", "[", "t", "]", ".", "to_laid_out_tensor", "(", ")", ".", "tensor_list", ")", "\n", "# accumulators get initial value 0", "\n", "", "for", "t", "in", "self", ".", "_body_outputs", "[", "len", "(", "self", ".", "inputs", ")", ":", "]", ":", "\n", "      ", "def", "slice_fn", "(", ")", ":", "\n", "        ", "return", "tf", ".", "zeros", "(", "mesh_impl", ".", "slice_shape", "(", "t", ".", "shape", ")", ",", "dtype", "=", "t", ".", "dtype", ")", "\n", "", "lowered_inputs", ".", "append", "(", "mesh_impl", ".", "slicewise", "(", "slice_fn", ")", ".", "tensor_list", ")", "\n", "\n", "", "tf_outs", "=", "tf", ".", "while_loop", "(", "tf_cond_fn", ",", "\n", "tf_body_fn", ",", "\n", "lowered_inputs", ",", "\n", "back_prop", "=", "False", ",", "\n", "**", "self", ".", "_tf_kwargs", ")", "\n", "for", "i", ",", "(", "tf_out", ",", "mtf_out", ")", "in", "enumerate", "(", "zip", "(", "tf_outs", ",", "self", ".", "_outputs", ")", ")", ":", "\n", "      ", "out", "=", "mesh_impl", ".", "LaidOutTensor", "(", "tf_out", ")", "\n", "lazy", "=", "is_lazyallreducesum", "[", "i", "]", "\n", "if", "lazy", ":", "\n", "        ", "out", "=", "LazyAllreduceSum", "(", "\n", "mesh_impl", ",", "out", ",", "lazy", ".", "mesh_axes", ",", "lazy", ".", "add_counter_fn", ")", "\n", "", "lowering", ".", "set_tensor_lowering", "(", "mtf_out", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.__init__": [[6220, 6236], ["ops.Operation.__init__", "ops.Tensor", "enumerate"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "\n", "explicit_inputs", ",", "\n", "all_inputs", ",", "\n", "fn_outputs", ",", "\n", "grad_fn", ",", "\n", "forward_operations", ",", "\n", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "CustomGradientOperation", ",", "self", ")", ".", "__init__", "(", "\n", "all_inputs", "+", "fn_outputs", ",", "name", "=", "name", "or", "\"custom_gradient\"", ")", "\n", "self", ".", "_explicit_inputs", "=", "explicit_inputs", "\n", "self", ".", "_all_inputs", "=", "all_inputs", "\n", "self", ".", "_grad_fn", "=", "grad_fn", "\n", "self", ".", "_fn_outputs", "=", "fn_outputs", "\n", "self", ".", "_outputs", "=", "[", "Tensor", "(", "self", ",", "x", ".", "shape", ",", "x", ".", "dtype", ",", "index", "=", "i", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "fn_outputs", ")", "]", "\n", "self", ".", "_forward_operations", "=", "forward_operations", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.lower": [[6237, 6242], ["zip", "lowering.set_tensor_lowering"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.set_tensor_lowering"], ["", "def", "lower", "(", "self", ",", "lowering", ")", ":", "\n", "    ", "for", "fn_output", ",", "output", "in", "zip", "(", "\n", "self", ".", "_fn_outputs", ",", "self", ".", "_outputs", ")", ":", "\n", "      ", "lowering", ".", "set_tensor_lowering", "(", "output", ",", "\n", "lowering", ".", "tensors", "[", "fn_output", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.gradient": [[6243, 6262], ["len", "ops.CustomGradientOperation._grad_fn", "len", "zip", "ValueError", "list", "tensorflow.logging.warning", "len"], "methods", ["None"], ["", "", "def", "gradient", "(", "self", ",", "grad_ys", ")", ":", "\n", "    ", "graph", "=", "self", ".", "_inputs", "[", "0", "]", ".", "graph", "\n", "old_num_vars", "=", "len", "(", "graph", ".", "all_variables", ")", "\n", "grads", "=", "self", ".", "_grad_fn", "(", "\n", "explicit_inputs", "=", "self", ".", "_explicit_inputs", ",", "\n", "all_inputs", "=", "self", ".", "_all_inputs", ",", "\n", "forward_operations", "=", "self", ".", "_forward_operations", ",", "\n", "outputs", "=", "self", ".", "_fn_outputs", ",", "\n", "output_grads", "=", "grad_ys", ")", "\n", "new_num_vars", "=", "len", "(", "graph", ".", "all_variables", ")", "\n", "if", "new_num_vars", "!=", "old_num_vars", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"new variables created by custom gradient.\"", "\n", "\"Maybe a problem with scope. %s\"", "%", "(", "\n", "graph", ".", "all_variables", "[", "old_num_vars", ":", "]", ",", ")", ")", "\n", "", "for", "g", ",", "t", "in", "zip", "(", "grads", ",", "self", ".", "_all_inputs", ")", ":", "\n", "      ", "if", "g", "is", "None", ":", "\n", "        ", "tf", ".", "logging", ".", "warning", "(", "\"No gradient on input %s\"", "%", "t", ")", "\n", "", "", "return", "list", "(", "grads", ")", "+", "[", "None", "]", "*", "len", "(", "self", ".", "_fn_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension": [[45, 68], ["isinstance", "isinstance", "isinstance", "Dimension", "ValueError", "ValueError", "isinstance", "isinstance"], "function", ["None"], ["def", "convert_to_dimension", "(", "d", ")", ":", "\n", "  ", "\"\"\"Converts input to a Dimension.\n\n  Args:\n    d: Dimension, tuple (string, int), or None.\n\n  Returns:\n    Dimension or None.\n\n  Raises:\n    ValueError: If d cannot be converted to a Dimension.\n  \"\"\"", "\n", "if", "d", "is", "None", ":", "\n", "    ", "return", "None", "\n", "", "if", "isinstance", "(", "d", ",", "Dimension", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "d", ".", "name", ",", "str", ")", "or", "not", "isinstance", "(", "d", ".", "size", ",", "int", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"Bad dimension %s\"", "%", "(", "d", ",", ")", ")", "\n", "", "return", "d", "\n", "", "name", ",", "size", "=", "d", "\n", "if", "isinstance", "(", "name", ",", "str", ")", "and", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "    ", "return", "Dimension", "(", "name", ",", "size", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"could not convert %s to Dimension\"", "%", "(", "d", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape": [[206, 225], ["isinstance", "isinstance", "ops.Shape", "ops._parse_string_to_list_of_pairs"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._parse_string_to_list_of_pairs"], ["", "", "def", "convert_to_shape", "(", "x", ")", ":", "\n", "  ", "\"\"\"Converts input to a Shape.\n\n  Args:\n    x: Shape, str, or None.\n\n  Returns:\n    Shape or None.\n\n  Raises:\n    ValueError: If x cannot be converted to a Shape.\n  \"\"\"", "\n", "if", "x", "is", "None", ":", "\n", "    ", "return", "None", "\n", "", "if", "isinstance", "(", "x", ",", "Shape", ")", ":", "\n", "    ", "return", "x", "\n", "", "if", "isinstance", "(", "x", ",", "str", ")", ":", "\n", "    ", "x", "=", "_parse_string_to_list_of_pairs", "(", "x", ",", "seconds_to_int", "=", "True", ")", "\n", "", "return", "Shape", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules": [[298, 312], ["isinstance", "isinstance", "ops.LayoutRules", "ops._parse_string_to_list_of_pairs"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._parse_string_to_list_of_pairs"], ["", "", "def", "convert_to_layout_rules", "(", "x", ")", ":", "\n", "  ", "\"\"\"Converts input to a LayoutRules.\n\n  Args:\n    x: LayoutRules, str, or set-like of string pairs.\n\n  Returns:\n    LayoutRules.\n  \"\"\"", "\n", "if", "isinstance", "(", "x", ",", "LayoutRules", ")", ":", "\n", "    ", "return", "x", "\n", "", "if", "isinstance", "(", "x", ",", "str", ")", ":", "\n", "    ", "x", "=", "_parse_string_to_list_of_pairs", "(", "x", ")", "\n", "", "return", "LayoutRules", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.compatible_lazy_allreduce_sums": [[1386, 1405], ["all", "isinstance"], "function", ["None"], ["", "", "def", "compatible_lazy_allreduce_sums", "(", "xs", ")", ":", "\n", "  ", "\"\"\"\"Are xs all compatible LazyAllreduceSum objects.\n\n  Args:\n    xs: a list\n  Returns:\n    a boolean\n  \"\"\"", "\n", "if", "not", "xs", ":", "\n", "    ", "return", "False", "\n", "", "if", "not", "all", "(", "[", "isinstance", "(", "x", ",", "LazyAllreduceSum", ")", "for", "x", "in", "xs", "]", ")", ":", "\n", "    ", "return", "False", "\n", "", "x", "=", "xs", "[", "0", "]", "\n", "for", "y", "in", "xs", "[", "1", ":", "]", ":", "\n", "    ", "if", "x", ".", "mesh_impl", "!=", "y", ".", "mesh_impl", ":", "\n", "      ", "return", "False", "\n", "", "if", "x", ".", "mesh_axes", "!=", "y", ".", "mesh_axes", ":", "\n", "      ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_args_to_laid_out_tensors": [[1407, 1422], ["hasattr", "ret.append", "ret.append", "x.to_laid_out_tensor"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor"], ["", "def", "convert_args_to_laid_out_tensors", "(", "xs", ")", ":", "\n", "  ", "\"\"\"Convert list elements to laid-out-tensors when possible.\n\n  Args:\n    xs: a list\n  Returns:\n    a list\n  \"\"\"", "\n", "ret", "=", "[", "]", "\n", "for", "x", "in", "xs", ":", "\n", "    ", "if", "hasattr", "(", "x", ",", "\"to_laid_out_tensor\"", ")", ":", "\n", "      ", "ret", ".", "append", "(", "x", ".", "to_laid_out_tensor", "(", ")", ")", "\n", "", "else", ":", "\n", "      ", "ret", ".", "append", "(", "x", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.slicewise": [[1727, 1765], ["isinstance", "ops.SlicewiseOperation", "tuple", "ops.convert_to_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "", "", "def", "slicewise", "(", "tf_fn", ",", "\n", "xs", ",", "\n", "output_shape", "=", "None", ",", "\n", "output_dtype", "=", "None", ",", "\n", "splittable_dims", "=", "None", ",", "\n", "grad_function", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Slice-wise call to any tensorflow function.\n\n  The output shape and dtype default to those of the first input.\n  splittable_dims is a list of Dimensions which can be split while keeping the\n  computation valid.\n\n  Args:\n    tf_fn: a function taking n tf.Tensors and returning a tf.Tensor\n    xs: a list of n Tensors\n    output_shape: a Shape (or list of shapes)\n    output_dtype: a dtype (or list of dtypes)\n    splittable_dims: a list of Dimensions which are ok to split\n    grad_function: an optional gradients function.  If None, use tf gradient.\n    name: an optional string\n\n  Returns:\n    a Tensor (or a tuple of Tensors)\n  \"\"\"", "\n", "multiple_outputs", "=", "isinstance", "(", "output_dtype", ",", "list", ")", "\n", "output_shapes", "=", "output_shape", "if", "multiple_outputs", "else", "[", "output_shape", "]", "\n", "output_dtypes", "=", "output_dtype", "if", "multiple_outputs", "else", "[", "output_dtype", "]", "\n", "\n", "op", "=", "SlicewiseOperation", "(", "\n", "tf_fn", ",", "\n", "xs", ",", "\n", "[", "convert_to_shape", "(", "shape", ")", "or", "xs", "[", "0", "]", ".", "shape", "for", "shape", "in", "output_shapes", "]", ",", "\n", "[", "dtype", "or", "xs", "[", "0", "]", ".", "dtype", "for", "dtype", "in", "output_dtypes", "]", ",", "\n", "splittable_dims", ",", "\n", "grad_function", ",", "\n", "name", "=", "name", ")", "\n", "return", "tuple", "(", "op", ".", "outputs", ")", "if", "multiple_outputs", "else", "op", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise": [[1767, 1784], ["ops.slicewise", "tensorflow.tf.identity", "tensorflow.tf.sin", "tensorflow.tf.cos", "tensorflow.tf.square", "tensorflow.tf.sqrt", "tensorflow.tf.math.rsqrt", "tensorflow.tf.math.log", "tensorflow.tf.exp", "tensorflow.tf.sigmoid", "tensorflow.tf.tanh", "tensorflow.tf.negative", "tensorflow.tf.logical_not", "tensorflow.tf.nn.elu", "tensorflow.tf.nn.selu", "tensorflow.tf.math.softplus", "tensorflow.tf.math.reciprocal", "tensorflow.tf.nn.relu", "tensorflow.tf.sign"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.identity", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sin", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cos", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.exp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sigmoid", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tanh", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.negative", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_not", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.elu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.selu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softplus", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reciprocal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sign"], ["", "def", "cwise", "(", "tf_fn", ",", "xs", ",", "output_dtype", "=", "None", ",", "grad_function", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Component-wise operation with no broadcasting.\n\n  Args:\n    tf_fn: a component-wise function taking n tf.Tensor inputs and producing\n      a tf.Tensor output\n    xs: n Tensors\n    output_dtype: an optional dtype\n    grad_function: an optional python function\n    name: an optional string\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "return", "slicewise", "(", "\n", "tf_fn", ",", "xs", ",", "output_dtype", "=", "output_dtype", ",", "splittable_dims", "=", "xs", "[", "0", "]", ".", "shape", ".", "dims", ",", "\n", "grad_function", "=", "grad_function", ",", "name", "=", "name", "or", "\"cwise\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.identity": [[1786, 1788], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "identity", "(", "x", ",", "name", "=", "\"identity\"", ")", ":", "\n", "  ", "return", "cwise", "(", "tf", ".", "identity", ",", "[", "x", "]", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sin": [[1790, 1792], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "sin", "(", "x", ",", "name", "=", "\"sin\"", ")", ":", "\n", "  ", "return", "cwise", "(", "tf", ".", "sin", ",", "[", "x", "]", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cos": [[1794, 1796], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "cos", "(", "x", ",", "name", "=", "\"cos\"", ")", ":", "\n", "  ", "return", "cwise", "(", "tf", ".", "cos", ",", "[", "x", "]", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square": [[1798, 1802], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "square", "(", "x", ",", "name", "=", "\"square\"", ")", ":", "\n", "  ", "return", "cwise", "(", "\n", "tf", ".", "square", ",", "[", "x", "]", ",", "name", "=", "name", ",", "\n", "grad_function", "=", "lambda", "op", ",", "dy", ":", "[", "dy", "*", "op", ".", "inputs", "[", "0", "]", "*", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sqrt": [[1804, 1808], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "sqrt", "(", "x", ",", "name", "=", "\"sqrt\"", ")", ":", "\n", "  ", "return", "cwise", "(", "\n", "tf", ".", "sqrt", ",", "[", "x", "]", ",", "name", "=", "name", ",", "\n", "grad_function", "=", "lambda", "op", ",", "dy", ":", "[", "dy", "*", "0.5", "/", "op", ".", "outputs", "[", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._rsqrt_grad": [[1810, 1812], ["None"], "function", ["None"], ["", "def", "_rsqrt_grad", "(", "op", ",", "dy", ")", ":", "\n", "  ", "return", "[", "dy", "*", "-", "0.5", "*", "op", ".", "outputs", "[", "0", "]", "*", "op", ".", "outputs", "[", "0", "]", "*", "op", ".", "outputs", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt": [[1814, 1817], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "rsqrt", "(", "x", ",", "name", "=", "\"rsqrt\"", ")", ":", "\n", "  ", "return", "cwise", "(", "\n", "tf", ".", "math", ".", "rsqrt", ",", "[", "x", "]", ",", "name", "=", "name", ",", "grad_function", "=", "_rsqrt_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log": [[1819, 1823], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "log", "(", "x", ",", "name", "=", "\"log\"", ")", ":", "\n", "  ", "return", "cwise", "(", "\n", "tf", ".", "math", ".", "log", ",", "[", "x", "]", ",", "name", "=", "name", ",", "\n", "grad_function", "=", "lambda", "op", ",", "dy", ":", "[", "dy", "/", "op", ".", "inputs", "[", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.exp": [[1825, 1828], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "exp", "(", "x", ",", "name", "=", "\"exp\"", ")", ":", "\n", "  ", "return", "cwise", "(", "tf", ".", "exp", ",", "[", "x", "]", ",", "name", "=", "name", ",", "\n", "grad_function", "=", "lambda", "op", ",", "dy", ":", "[", "dy", "*", "op", ".", "outputs", "[", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sigmoid": [[1830, 1835], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "sigmoid", "(", "x", ",", "name", "=", "\"sigmoid\"", ")", ":", "\n", "  ", "def", "grad_function", "(", "op", ",", "dy", ")", ":", "\n", "    ", "y", "=", "op", ".", "outputs", "[", "0", "]", "\n", "return", "[", "y", "*", "(", "1.0", "-", "y", ")", "*", "dy", "]", "\n", "", "return", "cwise", "(", "tf", ".", "sigmoid", ",", "[", "x", "]", ",", "name", "=", "name", ",", "grad_function", "=", "grad_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tanh": [[1837, 1842], ["ops.cwise", "ops.square"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square"], ["", "def", "tanh", "(", "x", ",", "name", "=", "\"tanh\"", ")", ":", "\n", "  ", "def", "grad_function", "(", "op", ",", "dy", ")", ":", "\n", "    ", "y", "=", "op", ".", "outputs", "[", "0", "]", "\n", "return", "[", "(", "1.0", "-", "square", "(", "y", ")", ")", "*", "dy", "]", "\n", "", "return", "cwise", "(", "tf", ".", "tanh", ",", "[", "x", "]", ",", "name", "=", "name", ",", "grad_function", "=", "grad_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_pow": [[1844, 1847], ["ops.exp", "ops.log"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.exp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log"], ["", "def", "mtf_pow", "(", "x", ",", "y", ")", ":", "\n", "  ", "\"\"\"Call externally as mtf.pow().\"\"\"", "\n", "return", "exp", "(", "log", "(", "x", ")", "*", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.negative": [[1849, 1852], ["ops.cwise", "ops.negative"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.negative"], ["", "def", "negative", "(", "x", ",", "name", "=", "\"negative\"", ")", ":", "\n", "  ", "return", "cwise", "(", "tf", ".", "negative", ",", "[", "x", "]", ",", "name", "=", "name", ",", "\n", "grad_function", "=", "lambda", "op", ",", "dy", ":", "[", "negative", "(", "dy", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_not": [[1854, 1856], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "logical_not", "(", "x", ",", "name", "=", "\"logical_not\"", ")", ":", "\n", "  ", "return", "cwise", "(", "tf", ".", "logical_not", ",", "[", "x", "]", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.swish": [[1858, 1861], ["ops.sigmoid"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sigmoid"], ["", "def", "swish", "(", "x", ")", ":", "\n", "  ", "\"\"\"Swish activation from https://arxiv.org/abs/1710.05941 .\"\"\"", "\n", "return", "x", "*", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gelu": [[1863, 1876], ["ops.tanh", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tanh", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sqrt"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "  ", "\"\"\"Gaussian Error Linear Unit.\n\n  This is a smoother version of the RELU.\n  Original paper: https://arxiv.org/abs/1606.08415\n  Args:\n    x: float Tensor to perform activation.\n\n  Returns:\n    `x` with the GELU activation applied.\n  \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tanh", "(", "(", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "x", "*", "x", "*", "x", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.elu": [[1878, 1890], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "elu", "(", "x", ")", ":", "\n", "  ", "\"\"\"Exponential Linear Unit.\n\n  This is a smoother version of the RELU.\n  Original paper: https://arxiv.org/abs/1511.07289\n  Args:\n    x: float Tensor to perform activation.\n\n  Returns:\n    'x' with the ELU activation applied.\n  \"\"\"", "\n", "return", "cwise", "(", "tf", ".", "nn", ".", "elu", ",", "[", "x", "]", ",", "name", "=", "\"elu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.selu": [[1892, 1904], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "selu", "(", "x", ")", ":", "\n", "  ", "\"\"\"Scaled Exponential Linear Unit.\n\n  This is a smoother version of the RELU.\n  Original paper: https://arxiv.org/abs/1706.02515\n  Args:\n    x: float Tensor to perform activation.\n\n  Returns:\n    'x' with the SELU activation applied.\n  \"\"\"", "\n", "return", "cwise", "(", "tf", ".", "nn", ".", "selu", ",", "[", "x", "]", ",", "name", "=", "\"selu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softplus": [[1906, 1909], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "softplus", "(", "x", ")", ":", "\n", "  ", "\"\"\"Softplus activation.\"\"\"", "\n", "return", "cwise", "(", "tf", ".", "math", ".", "softplus", ",", "[", "x", "]", ",", "name", "=", "\"softplus\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reciprocal": [[1911, 1915], ["ops.cwise", "ops.negative", "ops.square"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.negative", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square"], ["", "def", "reciprocal", "(", "x", ",", "name", "=", "\"reciprocal\"", ")", ":", "\n", "  ", "return", "cwise", "(", "\n", "tf", ".", "math", ".", "reciprocal", ",", "[", "x", "]", ",", "name", "=", "name", ",", "\n", "grad_function", "=", "lambda", "op", ",", "dy", ":", "[", "negative", "(", "dy", "*", "square", "(", "op", ".", "outputs", "[", "0", "]", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._relu_grad": [[1917, 1919], ["ops.cast", "ops.greater"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater"], ["", "def", "_relu_grad", "(", "op", ",", "dy", ")", ":", "\n", "  ", "return", "[", "dy", "*", "cast", "(", "greater", "(", "op", ".", "inputs", "[", "0", "]", ",", "0", ")", ",", "op", ".", "inputs", "[", "0", "]", ".", "dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu": [[1921, 1923], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "relu", "(", "x", ",", "name", "=", "\"relu\"", ")", ":", "\n", "  ", "return", "cwise", "(", "tf", ".", "nn", ".", "relu", ",", "[", "x", "]", ",", "name", "=", "name", ",", "grad_function", "=", "_relu_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.squared_relu": [[1925, 1928], ["ops.square", "ops.relu"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu"], ["", "def", "squared_relu", "(", "x", ")", ":", "\n", "  ", "\"\"\"Squared ReLU from Primer paper: https://arxiv.org/abs/2109.08668.\"\"\"", "\n", "return", "square", "(", "relu", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.leaky_relu": [[1930, 1939], ["ops.cwise", "tensorflow.nn.leaky_relu", "ops.cast", "ops.greater", "ops.cast", "ops.less_equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.leaky_relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less_equal"], ["", "def", "leaky_relu", "(", "x", ",", "alpha", "=", "0.2", ",", "name", "=", "\"leaky_relu\"", ")", ":", "\n", "  ", "def", "forward_function", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", ")", "\n", "\n", "", "def", "grad_function", "(", "op", ",", "dy", ")", ":", "\n", "    ", "return", "[", "dy", "*", "cast", "(", "greater", "(", "op", ".", "inputs", "[", "0", "]", ",", "0", ")", ",", "op", ".", "inputs", "[", "0", "]", ".", "dtype", ")", "+", "dy", "*", "cast", "(", "less_equal", "(", "op", ".", "inputs", "[", "0", "]", ",", "0", ")", ",", "op", ".", "inputs", "[", "0", "]", ".", "dtype", ")", "*", "alpha", "]", "\n", "\n", "", "return", "cwise", "(", "forward_function", ",", "[", "x", "]", ",", "name", "=", "name", ",", "grad_function", "=", "grad_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sign": [[1941, 1944], ["ops.cwise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise"], ["", "def", "sign", "(", "x", ",", "name", "=", "\"sign\"", ")", ":", "\n", "  ", "ret", "=", "cwise", "(", "tf", ".", "sign", ",", "[", "x", "]", ",", "name", "=", "name", ",", "grad_function", "=", "0", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_abs": [[1946, 1949], ["ops.sign"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sign"], ["", "def", "mtf_abs", "(", "x", ")", ":", "\n", "  ", "\"\"\"Call externally as mtf.abs().\"\"\"", "\n", "return", "x", "*", "sign", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast": [[1951, 1957], ["ops.cwise", "tensorflow.cast", "ops.cast", "tensorflow.tf.float32", "tensorflow.tf.bfloat16", "tensorflow.tf.int32", "tensorflow.tf.bool", "tensorflow.tf.bool", "tensorflow.tf.float32", "tensorflow.tf.bool"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "cast", "(", "x", ",", "dtype", ",", "name", "=", "\"cast\"", ")", ":", "\n", "  ", "if", "dtype", "==", "x", ".", "dtype", ":", "\n", "    ", "return", "x", "\n", "", "return", "cwise", "(", "\n", "lambda", "x", ":", "tf", ".", "cast", "(", "x", ",", "dtype", ")", ",", "[", "x", "]", ",", "output_dtype", "=", "dtype", ",", "name", "=", "name", ",", "\n", "grad_function", "=", "lambda", "op", ",", "dy", ":", "[", "cast", "(", "dy", ",", "op", ".", "inputs", "[", "0", "]", ".", "dtype", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float": [[1959, 1961], ["ops.cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "to_float", "(", "x", ",", "name", "=", "\"to_float\"", ")", ":", "\n", "  ", "return", "cast", "(", "x", ",", "tf", ".", "float32", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_bfloat16": [[1963, 1965], ["ops.cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "to_bfloat16", "(", "x", ",", "name", "=", "\"to_bfloat16\"", ")", ":", "\n", "  ", "return", "cast", "(", "x", ",", "tf", ".", "bfloat16", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32": [[1967, 1969], ["ops.cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "to_int32", "(", "x", ",", "name", "=", "\"to_int32\"", ")", ":", "\n", "  ", "return", "cast", "(", "x", ",", "tf", ".", "int32", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_arguments_to_tensors": [[2093, 2117], ["ValueError", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "ops.import_tf_tensor", "ops.import_tf_tensor", "tensorflow.convert_to_tensor", "ops.Shape", "tensorflow.convert_to_tensor", "ops.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor"], ["", "", "def", "binary_arguments_to_tensors", "(", "x1", ",", "x2", ")", ":", "\n", "  ", "\"\"\"Convert argument of a binary operation to Tensors.\n\n  Args:\n    x1: a Tensor or something convertible to a tf Scalar\n    x2: a Tensor or something convertible to a tf Scalar\n\n  Returns:\n    new_x1: a Tensor\n    new_x2: a Tensor\n\n  Raises:\n    ValueError: on failure\n  \"\"\"", "\n", "if", "not", "isinstance", "(", "x1", ",", "Tensor", ")", "and", "not", "isinstance", "(", "x2", ",", "Tensor", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"at least one of x1 and x2 must be an mtf Tensor\"", ")", "\n", "", "elif", "isinstance", "(", "x1", ",", "Tensor", ")", "and", "isinstance", "(", "x2", ",", "Tensor", ")", ":", "\n", "    ", "return", "x1", ",", "x2", "\n", "", "elif", "isinstance", "(", "x1", ",", "Tensor", ")", ":", "\n", "    ", "return", "x1", ",", "import_tf_tensor", "(", "\n", "x1", ".", "mesh", ",", "tf", ".", "convert_to_tensor", "(", "x2", ",", "dtype", "=", "x1", ".", "dtype", ")", ",", "Shape", "(", "[", "]", ")", ")", "\n", "", "else", ":", "\n", "    ", "return", "import_tf_tensor", "(", "x2", ".", "mesh", ",", "tf", ".", "convert_to_tensor", "(", "x1", ",", "dtype", "=", "x2", ".", "dtype", ")", ",", "\n", "Shape", "(", "[", "]", ")", ")", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_op_with_broadcasting": [[2119, 2128], ["ops.binary_arguments_to_tensors", "ops._infer_binary_broadcast_shape", "isinstance", "ops.BinaryOpWithBroadcasting", "ops.convert_to_shape", "tensorflow.tf.less", "tensorflow.tf.greater", "tensorflow.tf.less_equal", "tensorflow.tf.greater_equal", "tensorflow.tf.equal", "tensorflow.tf.not_equal", "tensorflow.tf.logical_and", "tensorflow.tf.logical_or", "tensorflow.tf.floordiv", "tensorflow.tf.mod"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_arguments_to_tensors", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._infer_binary_broadcast_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_and", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_or", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.floordiv", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mod"], ["", "", "def", "binary_op_with_broadcasting", "(", "\n", "tf_fn", ",", "x1", ",", "x2", ",", "output_shape", "=", "None", ",", "output_dtype", "=", "None", ")", ":", "\n", "  ", "x1", ",", "x2", "=", "binary_arguments_to_tensors", "(", "x1", ",", "x2", ")", "\n", "output_shape", "=", "_infer_binary_broadcast_shape", "(", "x1", ".", "shape", ",", "x2", ".", "shape", ",", "output_shape", ")", "\n", "output_dtype", "=", "output_dtype", "or", "x1", ".", "dtype", "\n", "assert", "isinstance", "(", "output_dtype", ",", "tf", ".", "DType", ")", "\n", "return", "BinaryOpWithBroadcasting", "(", "\n", "tf_fn", ",", "x1", ",", "x2", ",", "convert_to_shape", "(", "output_shape", ")", ",", "\n", "output_dtype", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less": [[2130, 2133], ["ops.binary_op_with_broadcasting"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_op_with_broadcasting"], ["", "def", "less", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "return", "binary_op_with_broadcasting", "(", "\n", "tf", ".", "less", ",", "x1", ",", "x2", ",", "output_dtype", "=", "tf", ".", "bool", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater": [[2135, 2138], ["ops.binary_op_with_broadcasting"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_op_with_broadcasting"], ["", "def", "greater", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "return", "binary_op_with_broadcasting", "(", "\n", "tf", ".", "greater", ",", "x1", ",", "x2", ",", "output_dtype", "=", "tf", ".", "bool", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less_equal": [[2140, 2143], ["ops.binary_op_with_broadcasting"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_op_with_broadcasting"], ["", "def", "less_equal", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "return", "binary_op_with_broadcasting", "(", "\n", "tf", ".", "less_equal", ",", "x1", ",", "x2", ",", "output_dtype", "=", "tf", ".", "bool", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal": [[2145, 2148], ["ops.binary_op_with_broadcasting"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_op_with_broadcasting"], ["", "def", "greater_equal", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "return", "binary_op_with_broadcasting", "(", "\n", "tf", ".", "greater_equal", ",", "x1", ",", "x2", ",", "output_dtype", "=", "tf", ".", "bool", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal": [[2150, 2153], ["ops.binary_op_with_broadcasting"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_op_with_broadcasting"], ["", "def", "equal", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "return", "binary_op_with_broadcasting", "(", "\n", "tf", ".", "equal", ",", "x1", ",", "x2", ",", "output_dtype", "=", "tf", ".", "bool", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal": [[2155, 2158], ["ops.binary_op_with_broadcasting"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_op_with_broadcasting"], ["", "def", "not_equal", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "return", "binary_op_with_broadcasting", "(", "\n", "tf", ".", "not_equal", ",", "x1", ",", "x2", ",", "output_dtype", "=", "tf", ".", "bool", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_and": [[2160, 2163], ["ops.binary_op_with_broadcasting"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_op_with_broadcasting"], ["", "def", "logical_and", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "return", "binary_op_with_broadcasting", "(", "\n", "tf", ".", "logical_and", ",", "x1", ",", "x2", ",", "output_dtype", "=", "tf", ".", "bool", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_or": [[2165, 2168], ["ops.binary_op_with_broadcasting"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_op_with_broadcasting"], ["", "def", "logical_or", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "return", "binary_op_with_broadcasting", "(", "\n", "tf", ".", "logical_or", ",", "x1", ",", "x2", ",", "output_dtype", "=", "tf", ".", "bool", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.floordiv": [[2170, 2174], ["ops.binary_op_with_broadcasting", "isinstance"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_op_with_broadcasting"], ["", "def", "floordiv", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "output_dtype", "=", "x1", ".", "dtype", "if", "isinstance", "(", "x1", ",", "Tensor", ")", "else", "x2", ".", "dtype", "\n", "return", "binary_op_with_broadcasting", "(", "\n", "tf", ".", "floordiv", ",", "x1", ",", "x2", ",", "output_dtype", "=", "output_dtype", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mod": [[2176, 2180], ["ops.binary_op_with_broadcasting", "isinstance"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_op_with_broadcasting"], ["", "def", "mod", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "output_dtype", "=", "x1", ".", "dtype", "if", "isinstance", "(", "x1", ",", "Tensor", ")", "else", "x2", ".", "dtype", "\n", "return", "binary_op_with_broadcasting", "(", "\n", "tf", ".", "mod", ",", "x1", ",", "x2", ",", "output_dtype", "=", "output_dtype", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum": [[2208, 2225], ["ops.convert_to_shape", "tensorflow.name_scope", "ops.binary_arguments_to_tensors", "ops.MinMaxOperation", "ops._infer_binary_broadcast_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_arguments_to_tensors", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._infer_binary_broadcast_shape"], ["", "", "def", "minimum", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Binary minimum with broadcsting.\n\n  Args:\n    x1: a Tensor\n    x2: a Tensor\n    output_shape: an optional Shape\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "with", "tf", ".", "name_scope", "(", "name", ",", "default_name", "=", "\"minimum\"", ")", ":", "\n", "    ", "x1", ",", "x2", "=", "binary_arguments_to_tensors", "(", "x1", ",", "x2", ")", "\n", "return", "MinMaxOperation", "(", "\n", "tf", ".", "minimum", ",", "x1", ",", "x2", ",", "output_shape", "=", "_infer_binary_broadcast_shape", "(", "\n", "x1", ".", "shape", ",", "x2", ".", "shape", ",", "output_shape", ")", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum": [[2227, 2244], ["ops.convert_to_shape", "tensorflow.name_scope", "ops.binary_arguments_to_tensors", "ops.MinMaxOperation", "ops._infer_binary_broadcast_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_arguments_to_tensors", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._infer_binary_broadcast_shape"], ["", "", "def", "maximum", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Binary maximum with broadcsting.\n\n  Args:\n    x1: a Tensor\n    x2: a Tensor\n    output_shape: an optional Shape\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "with", "tf", ".", "name_scope", "(", "name", ",", "default_name", "=", "\"maximum\"", ")", ":", "\n", "    ", "x1", ",", "x2", "=", "binary_arguments_to_tensors", "(", "x1", ",", "x2", ")", "\n", "return", "MinMaxOperation", "(", "\n", "tf", ".", "maximum", ",", "x1", ",", "x2", ",", "output_shape", "=", "_infer_binary_broadcast_shape", "(", "\n", "x1", ".", "shape", ",", "x2", ".", "shape", ",", "output_shape", ")", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.broadcast": [[2266, 2271], ["ops.convert_to_shape", "ops.BroadcastOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "", "def", "broadcast", "(", "x", ",", "new_shape", ")", ":", "\n", "  ", "new_shape", "=", "convert_to_shape", "(", "new_shape", ")", "\n", "if", "x", ".", "shape", "==", "new_shape", ":", "\n", "    ", "return", "x", "\n", "", "return", "BroadcastOperation", "(", "x", ",", "new_shape", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._reduce_helper": [[2273, 2306], ["ops.Shape", "ops.Shape.dims", "enumerate", "list", "tensorflow.transpose", "reduced_mesh_axes.append", "ops.reduction_fn", "six.moves.xrange", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduction_fn"], ["", "def", "_reduce_helper", "(", "input_shape", ",", "\n", "output_shape", ",", "\n", "input_tensor_layout", ",", "\n", "reduction_fn_string", "=", "\"SUM\"", ")", ":", "\n", "  ", "\"\"\"Returns slicewise function and reduced mesh dimensions.\n\n  Args:\n    input_shape: a Shape\n    output_shape: a Shape\n    input_tensor_layout: a TensorLayout\n    reduction_fn_string: \"SUM\" or \"MAX\"\n  Returns:\n    reduce_slice_fn: a function from tf.Tensor to tf.Tensor\n    reduced_mesh_axes: a list of integers\n  \"\"\"", "\n", "reduce_dims_indices", "=", "[", "\n", "i", "for", "i", ",", "d", "in", "enumerate", "(", "input_shape", ".", "dims", ")", "if", "d", "not", "in", "output_shape", ".", "dims", "]", "\n", "reduced_input_shape", "=", "Shape", "(", "[", "\n", "d", "for", "d", "in", "input_shape", ".", "dims", "if", "d", "in", "output_shape", ".", "dims", "]", ")", "\n", "perm", "=", "[", "reduced_input_shape", ".", "dims", ".", "index", "(", "d", ")", "for", "d", "in", "output_shape", ".", "dims", "]", "\n", "def", "reduce_slice_fn", "(", "xslice", ")", ":", "\n", "    ", "ret", "=", "xslice", "\n", "if", "reduce_dims_indices", ":", "\n", "      ", "ret", "=", "reduction_fn", "(", "reduction_fn_string", ")", "(", "xslice", ",", "reduce_dims_indices", ")", "\n", "", "if", "perm", "!=", "list", "(", "xrange", "(", "len", "(", "perm", ")", ")", ")", ":", "\n", "      ", "ret", "=", "tf", ".", "transpose", "(", "ret", ",", "perm", ")", "\n", "", "return", "ret", "\n", "", "reduced_mesh_axes", "=", "[", "]", "\n", "for", "i", "in", "reduce_dims_indices", ":", "\n", "    ", "mesh_axis", "=", "input_tensor_layout", "[", "i", "]", "\n", "if", "mesh_axis", "is", "not", "None", ":", "\n", "      ", "reduced_mesh_axes", ".", "append", "(", "mesh_axis", ")", "\n", "", "", "return", "reduce_slice_fn", ",", "reduced_mesh_axes", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._pool_helper": [[2347, 2363], ["ops.pool_fn"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pool_fn"], ["", "", "def", "_pool_helper", "(", "ksize", ",", "\n", "strides", ",", "\n", "pool_fn_string", "=", "\"MAX_2D\"", ")", ":", "\n", "  ", "\"\"\"Returns slicewise function and reduced mesh dimensions.\n\n  Args:\n    ksize: kernel size, a tuple or list.\n    strides: a tuple or list.\n    pool_fn_string: \"MAX\" or \"AVERAGE\"\n  Returns:\n    pool_slice_fn: a function from tf.Tensor to tf.Tensor\n  \"\"\"", "\n", "def", "pool_slice_fn", "(", "xslice", ")", ":", "\n", "    ", "ret", "=", "pool_fn", "(", "pool_fn_string", ")", "(", "xslice", ",", "ksize", ",", "strides", ",", "\"VALID\"", ")", "\n", "return", "ret", "\n", "", "return", "pool_slice_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_upscale": [[2365, 2407], ["list", "tf.reshape.get_shape().as_list", "tensorflow.reshape", "ops._tf_upscale._tf_upscale_one_trailing_dim"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "_tf_upscale", "(", "x", ",", "dim_idx_start", ",", "dim_idx_end", ",", "xscales", ")", ":", "\n", "  ", "\"\"\"Upscale the tf.Tensor x.\n\n  N-dimensional version of tf.image.resize_images with NEAREST interpolation.\n  Similar to: https://github.com/tensorflow/tensorflow/issues/2169\n\n  Args:\n    x: a tf.Tensor\n    dim_idx_start: the index of starting dimension\n    dim_idx_end: the index of ending dimension\n    xscales: an integer list of upscaling factors\n  Returns:\n    a tf Tensor. Dimensions in [dim_idx_start, dim_idx_end - 1] will be upscaled\n    xscales[i]-times.\n  \"\"\"", "\n", "\n", "xscales", "=", "list", "(", "xscales", ")", "\n", "if", "dim_idx_start", "<", "0", ":", "\n", "    ", "dim_idx_start", "+=", "len", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "", "def", "_tf_upscale_one_trailing_dim", "(", "x_1tdim", ")", ":", "\n", "    ", "\"\"\"Upscaling with dim_idx_end = -1.\"\"\"", "\n", "x_shape", "=", "x_1tdim", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "x_scaled_shape", "=", "[", "ori_size", "*", "scale", "for", "ori_size", ",", "scale", "in", "zip", "(", "x_shape", "[", "dim_idx_start", ":", "-", "1", "]", ",", "xscales", ")", "]", "\n", "\n", "dim_idx_len", "=", "len", "(", "x_shape", "[", "dim_idx_start", ":", "-", "1", "]", ")", "\n", "x_1tdim", "=", "tf", ".", "reshape", "(", "x_1tdim", ",", "[", "-", "1", "]", "+", "x_shape", "[", "-", "dim_idx_len", ":", "]", ")", "\n", "\n", "for", "dim_idx", "in", "range", "(", "dim_idx_len", ",", "0", ",", "-", "1", ")", ":", "\n", "      ", "x_1tdim", "=", "tf", ".", "concat", "(", "[", "x_1tdim", "]", "*", "xscales", ".", "pop", "(", ")", ",", "dim_idx", ")", "\n", "", "output_shape", "=", "x_shape", "[", ":", "dim_idx_start", "]", "+", "x_scaled_shape", "+", "x_shape", "[", "-", "1", ":", "]", "\n", "x_1tdim", "=", "tf", ".", "reshape", "(", "x_1tdim", ",", "output_shape", ")", "\n", "return", "x_1tdim", "\n", "\n", "", "x_shape", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "trailing_shape", "=", "x_shape", "[", "dim_idx_end", ":", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "x_shape", "[", ":", "dim_idx_end", "]", "+", "[", "-", "1", "]", ")", "\n", "x", "=", "_tf_upscale_one_trailing_dim", "(", "x", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "x", ".", "shape", ".", "as_list", "(", ")", "[", ":", "-", "1", "]", "+", "trailing_shape", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pool_backprop": [[2533, 2537], ["ops.PoolBackPropOperation"], "function", ["None"], ["", "", "def", "pool_backprop", "(", "x", ",", "y", ",", "dy", ",", "ksize", ",", "strides", ",", "pool_fn_string", ",", "name", "=", "None", ")", ":", "\n", "  ", "return", "PoolBackPropOperation", "(", "x", ",", "y", ",", "dy", ",", "\n", "ksize", ",", "strides", ",", "pool_fn_string", ",", "\n", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat": [[2587, 2602], ["ops.ConcatOperation"], "function", ["None"], ["", "", "def", "concat", "(", "xs", ",", "concat_dim_name", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Like tf.concat.\n\n  All inputs must have equal shape except for the sizes in the concatenated\n  dimension.  The dimension names should be the same, even that of the\n  concatenated dimension.\n\n  Args:\n    xs: a list of Tensors\n    concat_dim_name: a string\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "return", "ConcatOperation", "(", "xs", ",", "concat_dim_name", ",", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split": [[2656, 2669], ["ops.SplitOperation"], "function", ["None"], ["", "", "", "def", "split", "(", "x", ",", "split_dim", ",", "num_or_size_splits", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Like tf.split.\n\n  Args:\n    x: a Tensor\n    split_dim: a Dimension in x.shape.dims\n    num_or_size_splits: either an integer dividing split_dim.size\n       or a list of integers adding up to split_dim.size\n    name: an optional string\n  Returns:\n    a list of Tensors.\n  \"\"\"", "\n", "return", "SplitOperation", "(", "x", ",", "split_dim", ",", "num_or_size_splits", ",", "name", "=", "name", ")", ".", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack": [[2705, 2721], ["ops.StackOperation"], "function", ["None"], ["", "", "def", "stack", "(", "xs", ",", "dim_name", ",", "axis", "=", "0", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Stack multiple Tensors to make a new dimension.\n\n  Args:\n    xs: a list of Tensors with identical shapes.\n    dim_name: a string (name of the new dimension)\n    axis: an integer (index of the new dimension in the output shape)\n    name: an optional string\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "if", "axis", "<", "0", ":", "\n", "    ", "axis", "=", "xs", "[", "0", "]", ".", "shape", ".", "ndims", "+", "1", "+", "axis", "\n", "", "ret", "=", "StackOperation", "(", "xs", ",", "dim_name", ",", "axis", ",", "name", ")", ".", "outputs", "[", "0", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.unstack": [[2753, 2765], ["ops.UnstackOperation"], "function", ["None"], ["", "", "", "def", "unstack", "(", "x", ",", "dim", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Split into multiple Tensors, eliminating a dimension.\n\n  Args:\n    x: a Tensor\n    dim: a Dimension\n    name: an optional string\n\n  Returns:\n    a list of dim.size Tensors, each with shape (x.shape - dim)\n  \"\"\"", "\n", "return", "UnstackOperation", "(", "x", ",", "dim", ",", "name", ")", ".", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cumsum": [[2767, 2788], ["tensorflow.variable_scope", "Dimension", "x.shape.rename_dimension", "ops.cast", "ops.einsum", "ops.reshape", "comparator", "ops.mtf_range", "ops.mtf_range"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_range", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_range"], ["", "def", "cumsum", "(", "x", ",", "dim", ",", "exclusive", "=", "False", ")", ":", "\n", "  ", "\"\"\"Cumulative sum.\n\n  Args:\n    x: a Tensor\n    dim: a Dimension\n    exclusive: a boolean\n\n  Returns:\n    a Tensor with the same shape as x.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"cumsum\"", ")", ":", "\n", "    ", "new_name", "=", "\"tmp_dim_cumsum\"", "\n", "new_dim", "=", "Dimension", "(", "new_name", ",", "dim", ".", "size", ")", "\n", "new_shape", "=", "x", ".", "shape", ".", "rename_dimension", "(", "dim", ".", "name", ",", "new_name", ")", "\n", "comparator", "=", "less", "if", "exclusive", "else", "less_equal", "\n", "m", "=", "cast", "(", "\n", "comparator", "(", "mtf_range", "(", "x", ".", "mesh", ",", "dim", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "mtf_range", "(", "x", ".", "mesh", ",", "new_dim", ",", "dtype", "=", "tf", ".", "float32", ")", ")", ",", "x", ".", "dtype", ")", "\n", "ret", "=", "einsum", "(", "[", "x", ",", "m", "]", ",", "output_shape", "=", "new_shape", ")", "\n", "return", "reshape", "(", "ret", ",", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._einsum_helper": [[2790, 2830], ["ops._shape_union", "ops._reduce_helper", "mesh_impl.tensor_layout", "ops._reduce_helper.reduce_slice_fn", "ops._einsum_equation", "functools.reduce", "mesh_impl.einsum", "ops._einsum_helper.einsum_slice_fn_naive"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._shape_union", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._reduce_helper", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._einsum_equation", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "", "def", "_einsum_helper", "(", "input_shapes", ",", "output_shape", ",", "mesh_impl", ")", ":", "\n", "  ", "\"\"\"Returns slicewise function and reduced mesh dimensions.\n\n  Assumes the output shape contains no new dimensions.\n\n  Args:\n    input_shapes: a list of Shapes\n    output_shape: a Shape\n    mesh_impl: a MeshImpl\n  Returns:\n    einsum_slice_fn: a function from tf.Tensors to tf.Tensor\n    reduced_mesh_axes: a list of integers\n  \"\"\"", "\n", "input_shape_union", "=", "_shape_union", "(", "input_shapes", ")", "\n", "total_num_dims", "=", "input_shape_union", ".", "ndims", "\n", "# list of input shapes that contain all dimensions.", "\n", "full_shapes", "=", "[", "\n", "s", "for", "s", "in", "input_shapes", "+", "[", "output_shape", "]", "if", "s", ".", "ndims", "==", "total_num_dims", "]", "\n", "full_shape", "=", "full_shapes", "[", "0", "]", "if", "full_shapes", "else", "input_shape_union", "\n", "reduce_slice_fn", ",", "reduced_mesh_axes", "=", "_reduce_helper", "(", "\n", "full_shape", ",", "output_shape", ",", "mesh_impl", ".", "tensor_layout", "(", "full_shape", ")", ")", "\n", "def", "einsum_slice_fn_naive", "(", "*", "slices", ")", ":", "\n", "# naive einsum implementation where we broadcast all inputs to the full", "\n", "# shape, multiply componentwise, then reduce.", "\n", "    ", "return", "reduce_slice_fn", "(", "functools", ".", "reduce", "(", "tf", ".", "multiply", ",", "[", "\n", "_expand_dims", "(", "x", ",", "input_shape", ",", "full_shape", ")", "\n", "for", "x", ",", "input_shape", "in", "zip", "(", "slices", ",", "input_shapes", ")", "]", ")", ")", "\n", "", "if", "full_shapes", ":", "\n", "# it is not wasteful of space to broadcast fully and then reduce.", "\n", "# this helps to avoid some inefficient GPU implementations.", "\n", "    ", "einsum_slice_fn", "=", "einsum_slice_fn_naive", "\n", "", "else", ":", "\n", "# call tf.einsum", "\n", "    ", "equation", "=", "_einsum_equation", "(", "input_shapes", ",", "output_shape", ")", "\n", "def", "einsum_slice_fn", "(", "*", "slices", ")", ":", "\n", "      ", "if", "slices", "[", "0", "]", ".", "dtype", ".", "is_floating", ":", "\n", "        ", "return", "mesh_impl", ".", "einsum", "(", "equation", ",", "*", "slices", ")", "\n", "", "else", ":", "\n", "        ", "return", "einsum_slice_fn_naive", "(", "*", "slices", ")", "\n", "", "", "", "return", "einsum_slice_fn", ",", "reduced_mesh_axes", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv2d_backprop_input": [[3060, 3072], ["ops.Conv2or3dBackpropInputOperation"], "function", ["None"], ["", "", "def", "conv2d_backprop_input", "(", "input_shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "name", "=", "None", ")", ":", "\n", "  ", "return", "Conv2or3dBackpropInputOperation", "(", "2", ",", "False", ",", "\n", "input_shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "\n", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv2d_backprop_filter": [[3147, 3159], ["ops.Conv2or3dBackpropFilterOperation"], "function", ["None"], ["", "", "def", "conv2d_backprop_filter", "(", "conv_input", ",", "\n", "filter_shape", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "name", "=", "None", ")", ":", "\n", "  ", "return", "Conv2or3dBackpropFilterOperation", "(", "2", ",", "False", ",", "\n", "conv_input", ",", "\n", "filter_shape", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "\n", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv3d_backprop_input": [[3261, 3273], ["ops.Conv2or3dBackpropInputOperation"], "function", ["None"], ["", "", "def", "conv3d_backprop_input", "(", "input_shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "name", "=", "None", ")", ":", "\n", "  ", "return", "Conv2or3dBackpropInputOperation", "(", "3", ",", "False", ",", "\n", "input_shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "\n", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv3d_backprop_filter": [[3275, 3287], ["ops.Conv2or3dBackpropFilterOperation"], "function", ["None"], ["", "def", "conv3d_backprop_filter", "(", "conv_input", ",", "\n", "filter_shape", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "name", "=", "None", ")", ":", "\n", "  ", "return", "Conv2or3dBackpropFilterOperation", "(", "3", ",", "False", ",", "\n", "conv_input", ",", "\n", "filter_shape", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "\n", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv2d_transpose_backprop_input": [[3400, 3412], ["ops.Conv2or3dBackpropInputOperation"], "function", ["None"], ["", "", "def", "conv2d_transpose_backprop_input", "(", "input_shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "name", "=", "None", ")", ":", "\n", "  ", "return", "Conv2or3dBackpropInputOperation", "(", "2", ",", "True", ",", "\n", "input_shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "\n", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv2d_transpose_backprop_filter": [[3414, 3426], ["ops.Conv2or3dBackpropFilterOperation"], "function", ["None"], ["", "def", "conv2d_transpose_backprop_filter", "(", "conv_input", ",", "\n", "filter_shape", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "name", "=", "None", ")", ":", "\n", "  ", "return", "Conv2or3dBackpropFilterOperation", "(", "2", ",", "True", ",", "\n", "conv_input", ",", "\n", "filter_shape", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "\n", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv3d_transpose_backprop_input": [[3547, 3559], ["ops.Conv2or3dBackpropInputOperation"], "function", ["None"], ["", "", "def", "conv3d_transpose_backprop_input", "(", "input_shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "name", "=", "None", ")", ":", "\n", "  ", "return", "Conv2or3dBackpropInputOperation", "(", "3", ",", "True", ",", "\n", "input_shape", ",", "\n", "conv_filter", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "\n", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.conv3d_transpose_backprop_filter": [[3561, 3573], ["ops.Conv2or3dBackpropFilterOperation"], "function", ["None"], ["", "def", "conv3d_transpose_backprop_filter", "(", "conv_input", ",", "\n", "filter_shape", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "name", "=", "None", ")", ":", "\n", "  ", "return", "Conv2or3dBackpropFilterOperation", "(", "3", ",", "True", ",", "\n", "conv_input", ",", "\n", "filter_shape", ",", "\n", "dy", ",", "\n", "strides", ",", "\n", "padding", ",", "\n", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift": [[3671, 3687], ["ops.ShiftOperation"], "function", ["None"], ["", "", "def", "shift", "(", "x", ",", "offset", ",", "dim", ",", "wrap", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Shift operation.\n\n  Shift x right by +offset in dimension dim.\n\n  Args:\n    x: a Tensor\n    offset: an integer. If negative, shift left instead of right.\n    dim: a Dimension of x\n    wrap: a boolean - whether to wrap (True) or pad with zeros (False).\n    name: an optional string\n\n  Returns:\n    a Tensor with the same shape and dtype as x\n  \"\"\"", "\n", "return", "ShiftOperation", "(", "x", ",", "offset", ",", "dim", ",", "wrap", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dynamic_shift": [[3689, 3720], ["Dimension", "ops.replace_dimensions", "ops.mtf_range", "ops.mtf_range", "ops.cast", "ops.einsum", "ValueError", "ValueError", "ops.mod", "ops.equal", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_range", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_range", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mod", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal"], ["", "def", "dynamic_shift", "(", "x", ",", "offset", ",", "dim", ",", "wrap", ")", ":", "\n", "  ", "\"\"\"Shift with dynamic offset.\n\n  Shift x right by +offset in dimension dim.\n\n  Args:\n    x: a Tensor\n    offset: an Tensor whose shape is a subset of x.shape.dims - [dim]\n    dim: a Dimension of x\n    wrap: a boolean - whether to wrap (True) or pad with zeros (False).\n\n  Returns:\n    a Tensor with the same shape and dtype as x\n  \"\"\"", "\n", "if", "dim", "not", "in", "x", ".", "shape", ".", "dims", ":", "\n", "    ", "raise", "ValueError", "(", "\"dim must be a dimension of x\"", ")", "\n", "", "if", "dim", "in", "offset", ".", "shape", ".", "dims", ":", "\n", "    ", "raise", "ValueError", "(", "\"dim may not appear in offset\"", ")", "\n", "", "for", "d", "in", "offset", ".", "shape", ".", "dims", ":", "\n", "    ", "if", "d", "not", "in", "x", ".", "shape", ".", "dims", ":", "\n", "      ", "raise", "ValueError", "(", "\"offset.shape %s must be a subset of x.shape %s\"", "\n", "%", "(", "offset", ".", "shape", ",", "x", ".", "shape", ")", ")", "\n", "", "", "tmp_dim", "=", "Dimension", "(", "\"dynamic_shift_tmp\"", ",", "dim", ".", "size", ")", "\n", "x_reshaped", "=", "replace_dimensions", "(", "x", ",", "dim", ",", "tmp_dim", ")", "\n", "dim_range", "=", "mtf_range", "(", "x", ".", "mesh", ",", "dim", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "tmp_dim_range", "=", "mtf_range", "(", "x", ".", "mesh", ",", "tmp_dim", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "tmp_dim_range_offset", "=", "tmp_dim_range", "+", "offset", "\n", "if", "wrap", ":", "\n", "    ", "tmp_dim_range_offset", "=", "mod", "(", "tmp_dim_range_offset", ",", "dim", ".", "size", ")", "\n", "", "perm", "=", "cast", "(", "equal", "(", "dim_range", ",", "tmp_dim_range_offset", ")", ",", "x", ".", "dtype", ")", "\n", "return", "einsum", "(", "[", "x_reshaped", ",", "perm", "]", ",", "output_shape", "=", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymous_shape": [[3903, 3907], ["ops.convert_to_shape", "ops.Shape", "Dimension", "enumerate"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "", "def", "anonymous_shape", "(", "shape", ")", ":", "\n", "  ", "shape", "=", "convert_to_shape", "(", "shape", ")", "\n", "return", "Shape", "(", "[", "Dimension", "(", "\"_anonymous_%i\"", "%", "i", ",", "d", ".", "size", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "shape", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymize": [[3909, 3911], ["ops.reshape", "ops.anonymous_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymous_shape"], ["", "def", "anonymize", "(", "x", ")", ":", "\n", "  ", "return", "reshape", "(", "x", ",", "anonymous_shape", "(", "x", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.import_tf_tensor": [[3913, 3920], ["tensorflow.convert_to_tensor", "ops.Shape", "tf.convert_to_tensor.shape.as_list", "ops.ImportOperation", "ops.convert_to_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "def", "import_tf_tensor", "(", "mesh", ",", "tf_tensor", ",", "shape", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "tf_tensor", "=", "tf", ".", "convert_to_tensor", "(", "tf_tensor", ")", "\n", "if", "shape", "is", "None", ":", "\n", "    ", "shape", "=", "Shape", "(", "[", "]", ")", "\n", "assert", "not", "tf_tensor", ".", "shape", ".", "as_list", "(", ")", "\n", "", "return", "ImportOperation", "(", "\n", "mesh", ",", "tf_tensor", ",", "convert_to_shape", "(", "shape", ")", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.import_laid_out_tensor": [[3922, 3940], ["ops.ImportLaidOutTensorOperation", "ops.convert_to_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "def", "import_laid_out_tensor", "(", "mesh", ",", "laid_out_tensor", ",", "shape", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Import a laid_out_tensor.\n\n  For expert users.\n  The input must be laid out appropriately given the eventual MeshImpl,\n  and layout.\n\n  Args:\n    mesh: a Mesh\n    laid_out_tensor: a LaidOutTensor\n    shape: a mtf.Shape\n    name: an optional string\n\n  Returns:\n   a mtf.Tensor\n  \"\"\"", "\n", "return", "ImportLaidOutTensorOperation", "(", "\n", "mesh", ",", "laid_out_tensor", ",", "convert_to_shape", "(", "shape", ")", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.import_fully_replicated": [[3942, 3945], ["ops.reshape", "ops.import_tf_tensor", "ops.anonymous_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymous_shape"], ["", "def", "import_fully_replicated", "(", "mesh", ",", "tf_tensor", ",", "shape", ",", "name", "=", "None", ")", ":", "\n", "  ", "return", "reshape", "(", "import_tf_tensor", "(", "\n", "mesh", ",", "tf_tensor", ",", "anonymous_shape", "(", "shape", ")", ",", "name", ")", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable": [[4166, 4215], ["ops.VariableDType", "isinstance", "tensorflow.get_variable_scope", "tensorflow.logging.warning", "ops.Variable", "ops.VariableDType", "ops.convert_to_shape", "ValueError", "isinstance", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "", "def", "get_variable", "(", "mesh", ",", "name", ",", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "master_dtype", "=", "None", ",", "slice_dtype", "=", "None", ",", "activation_dtype", "=", "None", ",", "\n", "initializer", "=", "None", ",", "trainable", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Create a new variable or retrieve an already-created one.\n\n  Args:\n    mesh: a Mesh\n    name: a string (uses the existing tf.variable_scope())\n    shape: a Shape\n    dtype: a VariableDType or a tf.DType\n    master_dtype: an optional tf.DType (deprecated - use dtype arg)\n    slice_dtype: an optional tf.DType (deprecated - use dtype arg)\n    activation_dtype: an optional tf.DType (deprecated - use dtype arg)\n    initializer: an optional tf initializer function\n    trainable: a boolean\n    **kwargs: additional keyword arguments to tf.get_variable\n\n  Returns:\n    a Tensor with the given shape and dtype equal to dtype.activation_dtype\n  \"\"\"", "\n", "if", "dtype", "is", "None", ":", "\n", "    ", "dtype", "=", "VariableDType", "(", "master_dtype", ",", "slice_dtype", ",", "activation_dtype", ")", "\n", "", "elif", "isinstance", "(", "dtype", ",", "tf", ".", "DType", ")", ":", "\n", "    ", "dtype", "=", "VariableDType", "(", "\n", "master_dtype", "or", "dtype", ",", "slice_dtype", "or", "dtype", ",", "activation_dtype", "or", "dtype", ")", "\n", "", "elif", "not", "isinstance", "(", "dtype", ",", "VariableDType", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"dtype should be a tf.dtype or a mtf.VariableDType\"", ")", "\n", "", "scope_name", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "if", "scope_name", ":", "\n", "    ", "full_name", "=", "scope_name", "+", "\"/\"", "+", "name", "\n", "", "else", ":", "\n", "    ", "full_name", "=", "name", "\n", "", "if", "initializer", "is", "None", ":", "\n", "    ", "tf", ".", "logging", ".", "warning", "(", "\n", "\"Using default tf glorot_uniform_initializer for variable %s \"", "\n", "\" The initialzer will guess the input and output dimensions \"", "\n", "\" based on dimension order.\"", "%", "full_name", ")", "\n", "", "if", "full_name", "in", "mesh", ".", "graph", ".", "name_to_variable", ":", "\n", "    ", "var", "=", "mesh", ".", "graph", ".", "name_to_variable", "[", "full_name", "]", "\n", "", "else", ":", "\n", "    ", "var", "=", "Variable", "(", "\n", "mesh", ",", "name", ",", "convert_to_shape", "(", "shape", ")", ",", "dtype", ",", "initializer", ",", "trainable", ",", "\n", "**", "kwargs", ")", "\n", "if", "var", ".", "name", "!=", "full_name", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Expected var.name == full_name.  %s vs %s\"", "%", "(", "var", ".", "name", ",", "full_name", ")", ")", "\n", "", "mesh", ".", "graph", ".", "name_to_variable", "[", "full_name", "]", "=", "var", "\n", "", "return", "var", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.read_variable": [[4217, 4219], ["ops.ReadVariable"], "function", ["None"], ["", "def", "read_variable", "(", "var", ")", ":", "\n", "  ", "return", "ReadVariable", "(", "var", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.assign_slice": [[4221, 4225], ["tensorflow.assign", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "assign_slice", "(", "variable", ",", "slice_var", ",", "val", ")", ":", "\n", "  ", "return", "tf", ".", "assign", "(", "\n", "slice_var", ",", "\n", "tf", ".", "cast", "(", "val", ",", "variable", ".", "slice_dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.assign_add_slice": [[4227, 4230], ["tensorflow.cast", "tensorflow.assign"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign"], ["", "def", "assign_add_slice", "(", "variable", ",", "slice_var", ",", "val", ")", ":", "\n", "  ", "val", "=", "tf", ".", "cast", "(", "val", ",", "variable", ".", "slice_dtype", ")", "\n", "return", "tf", ".", "assign", "(", "slice_var", ",", "slice_var", "+", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.assign_sub_slice": [[4232, 4235], ["tensorflow.cast", "tensorflow.assign"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign"], ["", "def", "assign_sub_slice", "(", "variable", ",", "slice_var", ",", "val", ")", ":", "\n", "  ", "val", "=", "tf", ".", "cast", "(", "val", ",", "variable", ".", "slice_dtype", ")", "\n", "return", "tf", ".", "assign", "(", "slice_var", ",", "slice_var", "-", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.assign": [[4264, 4287], ["isinstance", "ops.Assign", "isinstance", "ValueError", "isinstance", "len"], "function", ["None"], ["", "", "def", "assign", "(", "var", ",", "new_val", ",", "assign_fn", "=", "assign_slice", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Assign a new value to a variable.\n\n  Args:\n    var: either a Variable operation or its output Tensor,\n      or the output of a chain of unary operations starting with a Variable.\n    new_val: a Tensor\n    assign_fn: a function from\n        (mtf.Variable, tf.Variable, tf.Tensor) -> tf.Operation\n    name: a string for the Assign op.\n  Returns:\n    an Operation\n  Raises:\n    ValueError: if var is not a Variable and var.operation is not a Variable\n  \"\"\"", "\n", "# find the original Variable operation.", "\n", "if", "isinstance", "(", "var", ",", "Tensor", ")", ":", "\n", "    ", "var", "=", "var", ".", "operation", "\n", "", "while", "not", "isinstance", "(", "var", ",", "Variable", ")", "and", "len", "(", "var", ".", "inputs", ")", "==", "1", ":", "\n", "    ", "var", "=", "var", ".", "inputs", "[", "0", "]", ".", "operation", "\n", "", "if", "not", "isinstance", "(", "var", ",", "Variable", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"var must be a mtf.Variable or its output Tensor.\"", ")", "\n", "", "return", "Assign", "(", "[", "var", "]", ",", "[", "new_val", "]", ",", "assign_fn", "=", "assign_fn", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.assign_add": [[4289, 4291], ["ops.assign"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign"], ["", "def", "assign_add", "(", "var", ",", "new_val", ")", ":", "\n", "  ", "return", "assign", "(", "var", ",", "new_val", ",", "assign_fn", "=", "assign_add_slice", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.assign_sub": [[4293, 4295], ["ops.assign"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign"], ["", "def", "assign_sub", "(", "var", ",", "new_val", ")", ":", "\n", "  ", "return", "assign", "(", "var", ",", "new_val", ",", "assign_fn", "=", "assign_sub_slice", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.depend": [[4331, 4341], ["ops.Depend"], "function", ["None"], ["", "", "def", "depend", "(", "x", ",", "dependencies", ")", ":", "\n", "  ", "\"\"\"Identity of Tensor x that depends on operation dependencies.\n\n  Args:\n    x: a Tensor\n    dependencies: a list of Operations or Tensors\n  Returns:\n    an tensor\n  \"\"\"", "\n", "return", "Depend", "(", "x", ",", "dependencies", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.constant": [[4364, 4369], ["ops.convert_to_shape", "ops.Constant", "ops.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "", "def", "constant", "(", "mesh", ",", "value", ",", "shape", "=", "None", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "  ", "shape", "=", "convert_to_shape", "(", "shape", ")", "\n", "return", "Constant", "(", "mesh", ",", "value", ",", "\n", "shape", "if", "shape", "is", "not", "None", "else", "Shape", "(", "[", "]", ")", ",", "\n", "dtype", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros": [[4371, 4373], ["ops.constant", "ops.convert_to_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "def", "zeros", "(", "mesh", ",", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "  ", "return", "constant", "(", "mesh", ",", "0", ",", "shape", "=", "convert_to_shape", "(", "shape", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like": [[4375, 4377], ["ops.zeros"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["", "def", "zeros_like", "(", "t", ")", ":", "\n", "  ", "return", "zeros", "(", "t", ".", "mesh", ",", "t", ".", "shape", ",", "dtype", "=", "t", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones": [[4379, 4381], ["ops.constant", "ops.convert_to_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "def", "ones", "(", "mesh", ",", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "  ", "return", "constant", "(", "mesh", ",", "1", ",", "shape", "=", "convert_to_shape", "(", "shape", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones_like": [[4383, 4385], ["ops.ones"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones"], ["", "def", "ones_like", "(", "t", ")", ":", "\n", "  ", "return", "ones", "(", "t", ".", "mesh", ",", "t", ".", "shape", ",", "dtype", "=", "t", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stop_gradient": [[4404, 4406], ["ops.StopGradient"], "function", ["None"], ["", "", "def", "stop_gradient", "(", "x", ")", ":", "\n", "  ", "return", "StopGradient", "(", "x", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary": [[4429, 4443], ["ops.ScalarSummaryOperation"], "function", ["None"], ["", "", "def", "scalar_summary", "(", "name", ",", "x", ")", ":", "\n", "  ", "\"\"\"Call tf.summary.scalar.\n\n  Caveat - summaries do not generally work on TPU - they need to be rewritten\n  into a host call.\n  TODO(noam): provide a pointer to code for this.\n\n  Args:\n    name: a string\n    x: a 0-dimensional Tensor\n  Returns:\n    a Tensor which is identical in value to x\n  \"\"\"", "\n", "return", "ScalarSummaryOperation", "(", "name", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Print": [[4468, 4481], ["ops.PrintOperation"], "function", ["None"], ["", "", "def", "Print", "(", "x", ",", "data", ",", "message", ",", "**", "kwargs", ")", ":", "# pylint: disable=invalid-name", "\n", "  ", "\"\"\"Call tf.Print.\n\n  Args:\n    x: a Tensor.\n    data: a list of Tensor\n    message: a string\n    **kwargs: keyword arguments to tf.Print\n  Returns:\n    a Tensor which is identical in value to x\n  \"\"\"", "\n", "message", "+=", "\" %s\"", "%", "data", "\n", "return", "PrintOperation", "(", "x", ",", "data", ",", "message", ",", "**", "kwargs", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape": [[4589, 4591], ["ops.ReshapeOperation", "ops.convert_to_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "", "def", "reshape", "(", "x", ",", "new_shape", ",", "name", "=", "\"reshape\"", ")", ":", "\n", "  ", "return", "ReshapeOperation", "(", "x", ",", "convert_to_shape", "(", "new_shape", ")", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose": [[4593, 4599], ["ops.convert_to_shape", "ops.einsum", "set", "set", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "transpose", "(", "x", ",", "new_shape", ",", "name", "=", "\"transpose\"", ")", ":", "\n", "  ", "new_shape", "=", "convert_to_shape", "(", "new_shape", ")", "\n", "if", "set", "(", "x", ".", "shape", ".", "dims", ")", "!=", "set", "(", "new_shape", ".", "dims", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"x must have the same dimensions as new_shape %s vs %s\"", "\n", "%", "(", "x", ",", "new_shape", ")", ")", "\n", "", "return", "einsum", "(", "[", "x", "]", ",", "output_shape", "=", "new_shape", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension": [[4601, 4613], ["ops.reshape", "x.shape.rename_dimension"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension"], ["", "def", "rename_dimension", "(", "x", ",", "old_name", ",", "new_name", ")", ":", "\n", "  ", "\"\"\"Reshape a Tensor, renaming one dimension.\n\n  Args:\n    x: a Tensor\n    old_name: a string\n    new_name: a string\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "return", "reshape", "(", "x", ",", "x", ".", "shape", ".", "rename_dimension", "(", "old_name", ",", "new_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions": [[4615, 4660], ["isinstance", "isinstance", "isinstance", "ops.Shape", "ops.reshape", "isinstance", "ValueError", "ValueError", "ValueError", "ops.replace_dimensions", "isinstance", "isinstance", "in_dims.index", "list", "ValueError", "ValueError", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions"], ["", "def", "replace_dimensions", "(", "tensor_or_shape", ",", "old_dim_or_dims", ",", "new_dim_or_dims", ")", ":", "\n", "  ", "\"\"\"Replace dimensions in a Tensor or Shape.\n\n  old_dim_or_dims consists of a single dimension or a list of dimensions\n  that must occur consecutively in the input shape.  They are replaced\n  by the dimensions in new_dim_or_dims.\n\n  Args:\n    tensor_or_shape: a Tensor or a Shape\n    old_dim_or_dims: a Dimension or a list of Dimensions\n    new_dim_or_dims: a Dimensions or a list of Dimensions\n  Returns:\n    a new Tensor or a Shape\n  \"\"\"", "\n", "if", "isinstance", "(", "tensor_or_shape", ",", "Tensor", ")", ":", "\n", "    ", "return", "reshape", "(", "tensor_or_shape", ",", "replace_dimensions", "(", "\n", "tensor_or_shape", ".", "shape", ",", "old_dim_or_dims", ",", "new_dim_or_dims", ")", ")", "\n", "", "if", "not", "isinstance", "(", "tensor_or_shape", ",", "Shape", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"tensor_or_shape must be a Tensor or Shape got %s\"", "%", "(", "tensor_or_shape", ",", ")", ")", "\n", "", "in_dims", "=", "tensor_or_shape", ".", "dims", "\n", "if", "isinstance", "(", "old_dim_or_dims", ",", "Dimension", ")", ":", "\n", "    ", "old_dim_or_dims", "=", "[", "old_dim_or_dims", "]", "\n", "", "if", "isinstance", "(", "new_dim_or_dims", ",", "Dimension", ")", ":", "\n", "    ", "new_dim_or_dims", "=", "[", "new_dim_or_dims", "]", "\n", "", "if", "not", "isinstance", "(", "old_dim_or_dims", ",", "list", ")", "or", "not", "old_dim_or_dims", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"old_dim_or_dims must be a Dimension or a list of Dimension got %s\"", "\n", "%", "(", "old_dim_or_dims", ",", ")", ")", "\n", "", "if", "not", "isinstance", "(", "new_dim_or_dims", ",", "list", ")", "or", "not", "new_dim_or_dims", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"new_dim_or_dims must be a Dimension or a list of Dimension got %s\"", "\n", "%", "(", "new_dim_or_dims", ",", ")", ")", "\n", "", "try", ":", "\n", "    ", "positions", "=", "[", "in_dims", ".", "index", "(", "d", ")", "for", "d", "in", "old_dim_or_dims", "]", "\n", "pos", "=", "positions", "[", "0", "]", "\n", "if", "positions", "!=", "list", "(", "range", "(", "pos", ",", "pos", "+", "len", "(", "positions", ")", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", ")", "\n", "", "", "except", "ValueError", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"old_dim_or_dims must be a subsequence of the input's dimensions\"", "\n", "\" old_dim_or_dims=%s input's dimensions=%s\"", "%", "\n", "(", "old_dim_or_dims", ",", "in_dims", ")", ")", "\n", "", "return", "Shape", "(", "in_dims", "[", ":", "pos", "]", "+", "new_dim_or_dims", "+", "\n", "in_dims", "[", "pos", "+", "len", "(", "old_dim_or_dims", ")", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.einsum": [[4662, 4727], ["ops.convert_to_shape", "collections.defaultdict", "ops.Shape", "ops.EinsumOperation", "input_dims.append", "isinstance", "ValueError", "set", "set", "ValueError", "six.iteritems"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "def", "einsum", "(", "xs", ",", "output_shape", "=", "None", ",", "reduced_dims", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Einstein summation.\n\n  einsum(xs, output_shape) is equivalent to broadcasting all inputs\n  to the union of all of their shapes, multiplying them componentwise,\n  and finally reduce_summing down to output_shape.\n\n  One common case of this is matrix multiplication:\n      x has shape [a, b]\n      y has shape [b, c]\n      matmul(x, y) == einsum([x, y], output_shape=[a, c])\n\n  We provide a few options for specifying the output shape:\n\n  If neither output_shape nor reduced_dims is specified, then the output\n  shape is set to the contain all dimensions that appear exactly once in the\n  inputs, in order of appearance.\n\n  If output_shape is not specified, then the output shape is set to the contain\n  all dimensions that appear in xs but not in reduced_dims, in the order\n  that they appear in xs.  If reduced_dims is also not specified, then\n  reduced_dims is set to the set of all dimensions that appear at least twice in\n  xs.\n\n  If both output_shape and reduced_dims are specified, then we check that\n  reduced_dims matches the set of dimensions present in xs but not in\n  output_shape, and throw an exception if it does not.  This helps to reduce\n  bugs.\n\n  Args:\n    xs: a list of Tensors\n    output_shape: an optional Shape.\n    reduced_dims: an optional list of Dimensions.\n    name: an optional string\n  Returns:\n    a Tensor\n  Raises:\n    ValueError: if reduced_dims contradicts output_shape\n  \"\"\"", "\n", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "input_dim_count", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "input_dims", "=", "[", "]", "\n", "for", "x", "in", "xs", ":", "\n", "    ", "for", "d", "in", "x", ".", "shape", ".", "dims", ":", "\n", "      ", "if", "d", "not", "in", "input_dim_count", ":", "\n", "        ", "input_dims", ".", "append", "(", "d", ")", "\n", "", "input_dim_count", "[", "d", "]", "+=", "1", "\n", "", "", "if", "reduced_dims", "is", "not", "None", ":", "\n", "    ", "for", "d", "in", "reduced_dims", ":", "\n", "      ", "if", "not", "isinstance", "(", "d", ",", "Dimension", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"reduced_dims must be a list of Dimensions.  Got %s.\"", "\n", "%", "(", "reduced_dims", ",", ")", ")", "\n", "", "", "", "if", "output_shape", "is", "None", ":", "\n", "    ", "if", "reduced_dims", "is", "None", ":", "\n", "      ", "reduced_dims", "=", "[", "d", "for", "d", ",", "c", "in", "six", ".", "iteritems", "(", "input_dim_count", ")", "if", "c", ">", "1", "]", "\n", "", "output_shape", "=", "Shape", "(", "[", "d", "for", "d", "in", "input_dims", "if", "d", "not", "in", "reduced_dims", "]", ")", "\n", "", "elif", "reduced_dims", "is", "not", "None", ":", "\n", "    ", "computed_reduced_dims", "=", "[", "\n", "d", "for", "d", "in", "input_dims", "if", "d", "not", "in", "output_shape", ".", "dims", "]", "\n", "if", "set", "(", "computed_reduced_dims", ")", "!=", "set", "(", "reduced_dims", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Specified reduced_dims and output_shape do not match.\"", "\n", "\" xs=%s output_shape=%s reduced_dims=%s \"", "%", "(", "\n", "xs", ",", "output_shape", ",", "reduced_dims", ")", ")", "\n", "", "", "return", "EinsumOperation", "(", "xs", ",", "output_shape", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul": [[4729, 4733], ["ops.einsum"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "matmul", "(", "a", ",", "b", ",", "output_shape", "=", "None", ",", "reduced_dims", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Alias for einsum([a, b]).\"\"\"", "\n", "return", "einsum", "(", "\n", "[", "a", ",", "b", "]", ",", "output_shape", "=", "output_shape", ",", "reduced_dims", "=", "reduced_dims", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._reduction_output_shape": [[4735, 4752], ["ops.Shape", "ValueError", "ValueError"], "function", ["None"], ["", "def", "_reduction_output_shape", "(", "x", ",", "output_shape", ",", "reduced_dim", ")", ":", "\n", "  ", "\"\"\"Helper function to reduce_sum, etc.\"\"\"", "\n", "if", "output_shape", "is", "None", ":", "\n", "    ", "if", "reduced_dim", "is", "None", ":", "\n", "      ", "return", "Shape", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "      ", "if", "reduced_dim", "not", "in", "x", ".", "shape", ".", "dims", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"reduced_dim=%s not in x.shape.dims=%s\"", "%", "(", "reduced_dim", ",", "x", ".", "shape", ")", ")", "\n", "", "return", "x", ".", "shape", "-", "reduced_dim", "\n", "", "", "if", "reduced_dim", "is", "not", "None", ":", "\n", "    ", "if", "[", "reduced_dim", "]", "!=", "[", "d", "for", "d", "in", "x", ".", "shape", ".", "dims", "if", "d", "not", "in", "output_shape", ".", "dims", "]", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"reduced_dim contradicts output_shape:\"", "\n", "\"x=%s output_shape=%s reduced_dim=%s\"", "%", "\n", "(", "x", ",", "output_shape", ",", "reduced_dim", ")", ")", "\n", "", "", "return", "output_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum": [[4754, 4782], ["ops.convert_to_shape", "ops.convert_to_dimension", "ops._reduction_output_shape", "ops.ReduceOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._reduction_output_shape"], ["", "def", "reduce_sum", "(", "x", ",", "\n", "disable_positional_args", "=", "None", ",", "\n", "output_shape", "=", "None", ",", "\n", "reduced_dim", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Reduction on 1 or more axes.\n\n  If reduced_dim is present, then only that dimension is reduced out.\n  Alternatively, specify output_shape.\n  Do not specify both reduced_dim and output_shape.\n  If neither is specified, then all dimensions are reduced out.\n\n  Args:\n    x: a Tensor\n    disable_positional_args: None\n    output_shape: an optional Shape.  Must be a subsequence of x.shape.\n    reduced_dim: a mtf.Dimension\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "reduced_dim", "=", "convert_to_dimension", "(", "reduced_dim", ")", "\n", "assert", "disable_positional_args", "is", "None", "\n", "output_shape", "=", "_reduction_output_shape", "(", "x", ",", "output_shape", ",", "reduced_dim", ")", "\n", "if", "output_shape", "==", "x", ".", "shape", ":", "\n", "    ", "return", "x", "\n", "", "return", "ReduceOperation", "(", "x", ",", "output_shape", ",", "\"SUM\"", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean": [[4784, 4815], ["ops.convert_to_shape", "ops.convert_to_dimension", "ops._reduction_output_shape", "tensorflow.variable_scope", "ops.reduce_sum"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._reduction_output_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum"], ["", "def", "reduce_mean", "(", "x", ",", "\n", "disable_positional_args", "=", "None", ",", "\n", "output_shape", "=", "None", ",", "\n", "reduced_dim", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Reduction on 1 or more axes.\n\n  If reduced_dim is present, then only that dimension is reduced out.\n  Alternatively, specify output_shape.\n  Do not specify both reduced_dim and output_shape.\n  If neither is specified, then all dimensions are reduced out.\n\n  Args:\n    x: a Tensor\n    disable_positional_args: None\n    output_shape: an optional Shape. Must be a subsequence of x.shape.\n    reduced_dim: a mtf.Dimension\n    name: an optional string\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "reduced_dim", "=", "convert_to_dimension", "(", "reduced_dim", ")", "\n", "assert", "disable_positional_args", "is", "None", "\n", "output_shape", "=", "_reduction_output_shape", "(", "x", ",", "output_shape", ",", "reduced_dim", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"reduce_mean\"", ")", ":", "\n", "    ", "if", "output_shape", "==", "x", ".", "shape", ":", "\n", "      ", "return", "x", "\n", "", "return", "reduce_sum", "(", "\n", "x", ",", "output_shape", "=", "output_shape", ")", "*", "(", "output_shape", ".", "size", "/", "x", ".", "shape", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_max": [[4817, 4843], ["ops.convert_to_shape", "ops.convert_to_dimension", "ops._reduction_output_shape", "ops.Shape", "ops.ReduceOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._reduction_output_shape"], ["", "", "def", "reduce_max", "(", "x", ",", "\n", "disable_positional_args", "=", "None", ",", "\n", "output_shape", "=", "None", ",", "\n", "reduced_dim", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Reduction on 1 or more axes.\n\n  Args:\n    x: a Tensor\n    disable_positional_args: None\n    output_shape: an optional Shape.  Must be a subsequence of x.shape.\n    reduced_dim: an optional Dimension\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "reduced_dim", "=", "convert_to_dimension", "(", "reduced_dim", ")", "\n", "assert", "disable_positional_args", "is", "None", "\n", "output_shape", "=", "_reduction_output_shape", "(", "x", ",", "output_shape", ",", "reduced_dim", ")", "\n", "if", "output_shape", "is", "None", ":", "\n", "    ", "output_shape", "=", "Shape", "(", "[", "]", ")", "\n", "", "if", "output_shape", "==", "x", ".", "shape", ":", "\n", "    ", "return", "x", "\n", "", "return", "ReduceOperation", "(", "\n", "x", ",", "output_shape", ",", "\"MAX\"", ",", "name", "=", "name", "or", "\"reduce_max\"", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_min": [[4845, 4871], ["ops.convert_to_shape", "ops.convert_to_dimension", "ops._reduction_output_shape", "ops.Shape", "ops.ReduceOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._reduction_output_shape"], ["", "def", "reduce_min", "(", "x", ",", "\n", "disable_positional_args", "=", "None", ",", "\n", "output_shape", "=", "None", ",", "\n", "reduced_dim", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Reduction on 1 or more axes.\n\n  Args:\n    x: a Tensor\n    disable_positional_args: None\n    output_shape: an optional Shape.  Must be a subsequence of x.shape.\n    reduced_dim: an optional Dimension\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "reduced_dim", "=", "convert_to_dimension", "(", "reduced_dim", ")", "\n", "assert", "disable_positional_args", "is", "None", "\n", "output_shape", "=", "_reduction_output_shape", "(", "x", ",", "output_shape", ",", "reduced_dim", ")", "\n", "if", "output_shape", "is", "None", ":", "\n", "    ", "output_shape", "=", "Shape", "(", "[", "]", ")", "\n", "", "if", "output_shape", "==", "x", ".", "shape", ":", "\n", "    ", "return", "x", "\n", "", "return", "ReduceOperation", "(", "\n", "x", ",", "output_shape", ",", "\"MIN\"", ",", "name", "=", "name", "or", "\"reduce_min\"", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_all": [[4873, 4885], ["ops.convert_to_shape", "ops.convert_to_dimension", "ops.cast", "ops.reduce_min", "ops.to_float"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_min", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float"], ["", "def", "reduce_all", "(", "x", ",", "\n", "disable_positional_args", "=", "None", ",", "\n", "output_shape", "=", "None", ",", "\n", "reduced_dim", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "reduced_dim", "=", "convert_to_dimension", "(", "reduced_dim", ")", "\n", "return", "cast", "(", "reduce_min", "(", "to_float", "(", "x", ")", ",", "\n", "disable_positional_args", "=", "disable_positional_args", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "reduced_dim", "=", "reduced_dim", ",", "\n", "name", "=", "name", "or", "\"reduce_all\"", ")", ",", "tf", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_any": [[4887, 4899], ["ops.convert_to_shape", "ops.convert_to_dimension", "ops.cast", "ops.reduce_max", "ops.to_float"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_max", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float"], ["", "def", "reduce_any", "(", "x", ",", "\n", "disable_positional_args", "=", "None", ",", "\n", "output_shape", "=", "None", ",", "\n", "reduced_dim", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "reduced_dim", "=", "convert_to_dimension", "(", "reduced_dim", ")", "\n", "return", "cast", "(", "reduce_max", "(", "to_float", "(", "x", ")", ",", "\n", "disable_positional_args", "=", "disable_positional_args", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "reduced_dim", "=", "reduced_dim", ",", "\n", "name", "=", "name", "or", "\"reduce_any\"", ")", ",", "tf", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k": [[4970, 4991], ["ops._iterative_top_k", "ops.TopKOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._iterative_top_k"], ["", "", "def", "top_k", "(", "x", ",", "reduced_dim", ",", "k_dim", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Like tf.math.top_k.\n\n  This operation returns two tensors with the same shape.  The output shape\n  is identical to the shape of x, except that reduced_dim is removed and\n  k_dim is inserted at the end.\n\n  Args:\n    x: a Tensor\n    reduced_dim: a Dimension in x.shape.dims.\n    k_dim: a Dimension.  The size determines k.\n    name: optional string.\n  Returns:\n    values: a Tensor with same type as x.\n    indices: a Tensor with dtype tf.int32\n  \"\"\"", "\n", "if", "k_dim", ".", "size", ">", "1", "and", "k_dim", ".", "size", "<", "5", ":", "\n", "    ", "return", "_iterative_top_k", "(", "x", ",", "reduced_dim", ",", "k_dim", ",", "name", "=", "name", ")", "\n", "", "else", ":", "\n", "    ", "op", "=", "TopKOperation", "(", "x", ",", "reduced_dim", ",", "k_dim", ",", "name", "=", "name", ")", "\n", "return", "op", ".", "outputs", "[", "0", "]", ",", "op", ".", "outputs", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._iterative_top_k": [[4993, 5022], ["ops.convert_to_dimension", "ops.convert_to_dimension", "tensorflow.name_scope", "six.moves.xrange", "ops.stack", "ops.stack", "ops.top_1", "indices.append", "values.append", "ops.one_hot"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_1", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot"], ["", "", "def", "_iterative_top_k", "(", "x", ",", "reduced_dim", ",", "k_dim", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Like tf.top_k.\n\n  Iterative implementation of top_k.\n  This is faster for small k on TPU for now, since the implementation of\n  tf.nn.top_k() seems to use sorting.\n\n  Args:\n    x: a Tensor\n    reduced_dim: a Dimension in x.shape.dims.\n    k_dim: a Dimension.  The size determines k.\n    name: optional string.\n  Returns:\n    values: a Tensor with same type as x.\n    indices: a Tensor with dtype tf.int32\n  \"\"\"", "\n", "reduced_dim", "=", "convert_to_dimension", "(", "reduced_dim", ")", "\n", "k_dim", "=", "convert_to_dimension", "(", "k_dim", ")", "\n", "indices", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "k", "=", "k_dim", ".", "size", "\n", "with", "tf", ".", "name_scope", "(", "name", ",", "default_name", "=", "\"top_k\"", ")", ":", "\n", "    ", "for", "i", "in", "xrange", "(", "k", ")", ":", "\n", "      ", "max_val", ",", "max_index", "=", "top_1", "(", "x", ",", "reduced_dim", ")", "\n", "indices", ".", "append", "(", "max_index", ")", "\n", "values", ".", "append", "(", "max_val", ")", "\n", "if", "i", "+", "1", "<", "k", ":", "\n", "        ", "x", "+=", "one_hot", "(", "max_index", ",", "reduced_dim", ",", "on_value", "=", "-", "1e9", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "", "", "return", "stack", "(", "values", ",", "k_dim", ".", "name", ",", "-", "1", ")", ",", "stack", "(", "indices", ",", "k_dim", ".", "name", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_1": [[5024, 5040], ["Dimension", "ops.top_k", "ops.reshape", "ops.reshape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "top_1", "(", "x", ",", "reduced_dim", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Max and Argmax.\n\n  Args:\n    x: a Tensor\n    reduced_dim: a Dimension in x.shape.dims\n    name: an optional string\n  Returns:\n    values: Tensor equal to mtf.reduce_max(x, reduced_dim=reduced_dim)\n    indices: a Tensor with dtype tf.int32\n  \"\"\"", "\n", "one_dim", "=", "Dimension", "(", "\"_one\"", ",", "1", ")", "\n", "values", ",", "indices", "=", "top_k", "(", "x", ",", "reduced_dim", ",", "one_dim", ",", "name", "=", "name", ")", "\n", "values", "=", "reshape", "(", "values", ",", "values", ".", "shape", "-", "one_dim", ")", "\n", "indices", "=", "reshape", "(", "indices", ",", "indices", ".", "shape", "-", "one_dim", ")", "\n", "return", "values", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax": [[5042, 5054], ["ops.convert_to_dimension", "ops.top_1"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_1"], ["", "def", "argmax", "(", "x", ",", "reduced_dim", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Compute argmax.\n\n  Args:\n    x: a Tensor\n    reduced_dim: a Dimension in x.shape.dims\n    name: an optional string\n  Returns:\n    A Tensor with shape x.shape - reduced_dim and dtype tf.int32.\n  \"\"\"", "\n", "reduced_dim", "=", "convert_to_dimension", "(", "reduced_dim", ")", "\n", "return", "top_1", "(", "x", ",", "reduced_dim", ",", "name", "=", "name", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sample_with_temperature": [[5056, 5093], ["ops.convert_to_dimension", "tensorflow.name_scope", "ops.argmax", "ops.cast", "ops.log", "ops.log", "ops.random_uniform"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_uniform"], ["", "def", "sample_with_temperature", "(", "logits", ",", "dim", ",", "temperature", "=", "1.0", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Sample from a probability distribution.\n\n  If temperature=0.0, then we compute argmax(logits, dim)\n  If temperature=1.0, then we sample with probability proportional to\n    exp(logits).  So you can pass in the log(probablity) as the logits.\n  `dim` is one the dimension of `logits` which represents the set of choices.\n  The other dimensions of `logits` are treated as batch-dimensions.\n\n  Args:\n    logits: a Tensor.\n    dim: a Dimension in logits.shape.dims\n    temperature: a float  0.0=argmax 1.0=random\n    name: an optional string\n\n  Returns:\n    a Tensor with type tf.int32 and shape (logits.shape - dim)\n  \"\"\"", "\n", "dim", "=", "convert_to_dimension", "(", "dim", ")", "\n", "with", "tf", ".", "name_scope", "(", "name", ",", "default_name", "=", "\"sample_with_temperature\"", ")", ":", "\n", "    ", "if", "temperature", "!=", "0.0", ":", "\n", "# gumbel trick.", "\n", "# Note: we don't want to generate 0 or 1 because:", "\n", "# * -log(-log(0)) is -infinity", "\n", "# * -log(-log(1)) is +infinity.", "\n", "# The numerics may be weird in bfloat16 - use float32.", "\n", "      ", "logits", "=", "cast", "(", "logits", ",", "tf", ".", "float32", ")", "\n", "tiny_val", "=", "1e-9", "\n", "g", "=", "-", "log", "(", "-", "log", "(", "\n", "random_uniform", "(", "\n", "logits", ".", "mesh", ",", "\n", "logits", ".", "shape", ",", "\n", "minval", "=", "tiny_val", ",", "\n", "maxval", "=", "1.", ",", "\n", "dtype", "=", "logits", ".", "dtype", ")", ")", ")", "\n", "logits", "+=", "g", "*", "temperature", "\n", "", "return", "argmax", "(", "logits", ",", "dim", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add": [[5095, 5114], ["ops.convert_to_shape", "isinstance", "tensorflow.name_scope", "ops.binary_arguments_to_tensors", "ops.ScalarAddOperation", "ops.AddOperation", "ops._infer_binary_broadcast_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_arguments_to_tensors", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._infer_binary_broadcast_shape"], ["", "", "def", "add", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Binary addition with broadcsting.\n\n  Args:\n    x1: a Tensor\n    x2: a Tensor\n    output_shape: an optional Shape\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "if", "not", "isinstance", "(", "x2", ",", "Tensor", ")", ":", "\n", "    ", "return", "ScalarAddOperation", "(", "x1", ",", "x2", ")", ".", "outputs", "[", "0", "]", "\n", "", "with", "tf", ".", "name_scope", "(", "name", ",", "default_name", "=", "\"add\"", ")", ":", "\n", "    ", "x1", ",", "x2", "=", "binary_arguments_to_tensors", "(", "x1", ",", "x2", ")", "\n", "return", "AddOperation", "(", "\n", "x1", ",", "x2", ",", "output_shape", "=", "_infer_binary_broadcast_shape", "(", "\n", "x1", ".", "shape", ",", "x2", ".", "shape", ",", "output_shape", ")", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n": [[5116, 5120], ["functools.reduce"], "function", ["None"], ["", "", "def", "add_n", "(", "xs", ")", ":", "\n", "  ", "if", "not", "xs", ":", "\n", "    ", "return", "0", "\n", "", "return", "functools", ".", "reduce", "(", "add", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sub": [[5122, 5139], ["ops.convert_to_shape", "isinstance", "tensorflow.name_scope", "ops.binary_arguments_to_tensors", "ops.add", "ops.negative", "ops.ScalarAddOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_arguments_to_tensors", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.negative"], ["", "def", "sub", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Binary subtraction with broadcsting.\n\n  Args:\n    x1: a Tensor\n    x2: a Tensor\n    output_shape: an optional Shape\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "if", "not", "isinstance", "(", "x2", ",", "Tensor", ")", ":", "\n", "    ", "return", "ScalarAddOperation", "(", "x1", ",", "-", "x2", ")", ".", "outputs", "[", "0", "]", "\n", "", "with", "tf", ".", "name_scope", "(", "name", ",", "default_name", "=", "\"sub\"", ")", ":", "\n", "    ", "x1", ",", "x2", "=", "binary_arguments_to_tensors", "(", "x1", ",", "x2", ")", "\n", "return", "add", "(", "x1", ",", "negative", "(", "x2", ")", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.multiply": [[5141, 5160], ["isinstance", "tensorflow.name_scope", "ops.binary_arguments_to_tensors", "ops.einsum", "ops.ScalarMultiplyOperation", "ops._infer_binary_broadcast_shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_arguments_to_tensors", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._infer_binary_broadcast_shape"], ["", "", "def", "multiply", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Binary multiplication with broadcasting.\n\n  Args:\n    x1: a Tensor\n    x2: a Tensor\n    output_shape: an optional Shape\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "if", "not", "isinstance", "(", "x2", ",", "Tensor", ")", ":", "\n", "    ", "return", "ScalarMultiplyOperation", "(", "x1", ",", "x2", ")", ".", "outputs", "[", "0", "]", "\n", "", "with", "tf", ".", "name_scope", "(", "name", ",", "default_name", "=", "\"mul\"", ")", ":", "\n", "    ", "x1", ",", "x2", "=", "binary_arguments_to_tensors", "(", "x1", ",", "x2", ")", "\n", "return", "einsum", "(", "\n", "[", "x1", ",", "x2", "]", ",", "\n", "output_shape", "=", "_infer_binary_broadcast_shape", "(", "\n", "x1", ".", "shape", ",", "x2", ".", "shape", ",", "output_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.divide": [[5162, 5179], ["ops.convert_to_shape", "isinstance", "tensorflow.name_scope", "ops.binary_arguments_to_tensors", "ops.multiply", "ops.reciprocal", "ops.ScalarMultiplyOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_arguments_to_tensors", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.multiply", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reciprocal"], ["", "", "def", "divide", "(", "x1", ",", "x2", ",", "output_shape", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Binary division with broadcasting.\n\n  Args:\n    x1: a Tensor\n    x2: a Tensor\n    output_shape: an optional Shape\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "if", "not", "isinstance", "(", "x2", ",", "Tensor", ")", ":", "\n", "    ", "return", "ScalarMultiplyOperation", "(", "x1", ",", "1.0", "/", "x2", ")", ".", "outputs", "[", "0", "]", "\n", "", "with", "tf", ".", "name_scope", "(", "name", ",", "default_name", "=", "\"divide\"", ")", ":", "\n", "    ", "x1", ",", "x2", "=", "binary_arguments_to_tensors", "(", "x1", ",", "x2", ")", "\n", "return", "multiply", "(", "x1", ",", "reciprocal", "(", "x2", ")", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_slice": [[5181, 5197], ["ops.SliceOperation"], "function", ["None"], ["", "", "def", "mtf_slice", "(", "x", ",", "begin", ",", "size", ",", "slice_dim_name", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Slice operation.\n\n  Call externally as mtf.slice()\n\n  Args:\n    x: a list of Tensors\n    begin: integer, where to begin slicing from along the axis\n    size: integer, size to slice from axis.\n    slice_dim_name: string, dimension name of slicing axis.\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "return", "SliceOperation", "(", "\n", "x", ",", "begin", ",", "size", ",", "slice_dim_name", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad": [[5199, 5212], ["ops.PadOperation"], "function", ["None"], ["", "def", "pad", "(", "x", ",", "paddings", ",", "dim_name", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Pad operation.\n\n  Args:\n    x: a Tensor\n    paddings: list of integers of size 2, padding size before and after for dim.\n    dim_name: string, name for the padding dim\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "return", "PadOperation", "(", "\n", "x", ",", "paddings", ",", "dim_name", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot": [[5214, 5235], ["ops.OneHotOperation"], "function", ["None"], ["", "def", "one_hot", "(", "indices", ",", "output_dim", ",", "on_value", "=", "1.0", ",", "\n", "off_value", "=", "0.0", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"One hot operation.\n\n  TODO(noam): Is there a good reason we need a special mtf.Operation here?\n  We could just use some code like this:\n  cast(equal(indices, mtf_range(indices.mesh, output_dim, dtype=indices.dtype)),\n       dtype)\n\n  Args:\n    indices: a Tensor\n    output_dim: a Dimension\n    on_value: Value taken when indices are on at a location, default 1\n    off_value: Value taken when indices are off at a location, default 0\n    dtype: a tf.DType\n    name: an optional string\n  Returns:\n    a Tensor with shape extended by output_dim for the last axis.\n  \"\"\"", "\n", "return", "OneHotOperation", "(", "\n", "indices", ",", "output_dim", ",", "on_value", ",", "off_value", ",", "dtype", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather": [[5237, 5258], ["ops.convert_to_dimension", "ops.convert_to_shape", "ops.einsum", "isinstance", "ops.constant", "ops.cast", "ops.gather", "ops.one_hot", "ops.to_float"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float"], ["", "def", "gather", "(", "weights", ",", "indices", ",", "dim", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "\"\"\"Shorthand for einsum([one_hot(indices, dim)], weights, reduced_dims=[dim]).\n\n  Args:\n    weights: a Tensor\n    indices: a Tensor with integer type\n    dim: a Dimension\n    output_shape: an optional mtf.Shape\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "dim", "=", "convert_to_dimension", "(", "dim", ")", "\n", "output_shape", "=", "convert_to_shape", "(", "output_shape", ")", "\n", "if", "not", "isinstance", "(", "indices", ",", "Tensor", ")", ":", "\n", "# TODO(noam): when `indices` is an integer, gather can be implemented", "\n", "#   more directly with mtf_slice() and reshape()", "\n", "    ", "indices", "=", "constant", "(", "weights", ".", "mesh", ",", "indices", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "", "if", "weights", ".", "dtype", "==", "tf", ".", "bool", ":", "\n", "    ", "return", "cast", "(", "gather", "(", "to_float", "(", "weights", ")", ",", "indices", ",", "dim", ",", "output_shape", ")", ",", "tf", ".", "bool", ")", "\n", "", "return", "einsum", "(", "[", "one_hot", "(", "indices", ",", "dim", ",", "dtype", "=", "weights", ".", "dtype", ")", ",", "weights", "]", ",", "\n", "reduced_dims", "=", "[", "dim", "]", ",", "output_shape", "=", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients": [[5260, 5298], ["set", "tensorflow.variable_scope", "tensor_to_gradient.get", "zip", "set", "set", "tensor_to_gradient.get", "any", "ops.Constant", "set", "tensorflow.variable_scope", "op.gradient", "zip"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.gradient"], ["", "def", "gradients", "(", "ys", ",", "xs", ",", "grad_ys", "=", "None", ",", "operations", "=", "None", ")", ":", "\n", "  ", "\"\"\"Compute gradients in dtf.\n\n  Args:\n    ys: a list of Tensors\n    xs: a list of Tensors\n    grad_ys: an optional list of Tensors\n    operations: list of operations through which to back-propagate gradients\n      defaults to ys[0].graph.operations\n\n  Returns:\n    grad_xs: a list of Tensors\n  \"\"\"", "\n", "if", "operations", "is", "None", ":", "\n", "    ", "operations", "=", "ys", "[", "0", "]", ".", "graph", ".", "operations", "\n", "", "if", "not", "grad_ys", ":", "\n", "    ", "grad_ys", "=", "[", "Constant", "(", "y", ".", "mesh", ",", "1.0", ",", "y", ".", "shape", ",", "y", ".", "dtype", ")", ".", "outputs", "[", "0", "]", "for", "y", "in", "ys", "]", "\n", "# figure out what Tensors are downstream of xs", "\n", "", "downstream", "=", "set", "(", "xs", ")", "\n", "for", "op", "in", "operations", ":", "\n", "    ", "if", "op", ".", "has_gradient", ":", "\n", "      ", "if", "set", "(", "op", ".", "inputs", ")", "&", "downstream", ":", "\n", "        ", "downstream", "|=", "set", "(", "op", ".", "outputs", ")", "\n", "", "", "", "tensor_to_gradient", "=", "{", "y", ":", "g", "for", "y", ",", "g", "in", "zip", "(", "ys", ",", "grad_ys", ")", "if", "g", "is", "not", "None", "}", "\n", "with", "tf", ".", "variable_scope", "(", "ys", "[", "0", "]", ".", "graph", ".", "captured_variable_scope", ")", ":", "\n", "    ", "for", "op", "in", "operations", "[", ":", ":", "-", "1", "]", ":", "\n", "      ", "grad_outputs", "=", "[", "tensor_to_gradient", ".", "get", "(", "out", ")", "for", "out", "in", "op", ".", "outputs", "]", "\n", "if", "(", "op", ".", "has_gradient", "and", "any", "(", "grad_outputs", ")", "\n", "and", "(", "set", "(", "op", ".", "inputs", ")", "&", "downstream", ")", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "op", ".", "name", "+", "\"/gradients\"", ")", ":", "\n", "          ", "input_grads", "=", "op", ".", "gradient", "(", "grad_outputs", ")", "\n", "for", "inp", ",", "grad", "in", "zip", "(", "op", ".", "inputs", ",", "input_grads", ")", ":", "\n", "            ", "if", "inp", "in", "downstream", "and", "grad", "is", "not", "None", ":", "\n", "              ", "if", "inp", "in", "tensor_to_gradient", ":", "\n", "                ", "tensor_to_gradient", "[", "inp", "]", "+=", "grad", "\n", "", "else", ":", "\n", "                ", "tensor_to_gradient", "[", "inp", "]", "=", "grad", "\n", "", "", "", "", "", "", "", "return", "[", "tensor_to_gradient", ".", "get", "(", "x", ",", "None", ")", "for", "x", "in", "xs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._infer_binary_broadcast_shape": [[5300, 5326], ["ops.convert_to_shape", "ops.convert_to_shape", "ops.convert_to_shape", "ops.is_subsequence", "ops.is_subsequence", "ops.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.is_subsequence", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.is_subsequence"], ["", "def", "_infer_binary_broadcast_shape", "(", "shape1", ",", "shape2", ",", "given_output_shape", "=", "None", ")", ":", "\n", "  ", "\"\"\"Infer shape of the output of a binary op with broadcasting.\n\n  If the output shape is not given with given_output_shape, then we check\n  to see if one of the shapes is a subsequence of the other one, and we\n  return the one that is the supersequence.  Otherwise, we list the dimensions\n  of shape1, followed by all new dimensions in shape2.\n\n  Args:\n    shape1: a Shape\n    shape2: a Shape\n    given_output_shape: an optional Shape\n  Returns:\n    a Shape\n  \"\"\"", "\n", "shape1", "=", "convert_to_shape", "(", "shape1", ")", "\n", "shape2", "=", "convert_to_shape", "(", "shape2", ")", "\n", "given_output_shape", "=", "convert_to_shape", "(", "given_output_shape", ")", "\n", "if", "given_output_shape", "is", "not", "None", ":", "\n", "    ", "return", "given_output_shape", "\n", "", "if", "is_subsequence", "(", "shape1", ".", "dims", ",", "shape2", ".", "dims", ")", ":", "\n", "    ", "return", "shape2", "\n", "", "if", "is_subsequence", "(", "shape2", ".", "dims", ",", "shape1", ".", "dims", ")", ":", "\n", "    ", "return", "shape1", "\n", "", "return", "Shape", "(", "\n", "shape1", ".", "dims", "+", "[", "d", "for", "d", "in", "shape2", ".", "dims", "if", "d", "not", "in", "shape1", ".", "dims", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._expand_dims": [[5328, 5350], ["ops.verify_no_new_dims", "tensorflow.transpose", "enumerate", "input_shape.dims.index", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.verify_no_new_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose"], ["", "def", "_expand_dims", "(", "x", ",", "input_shape", ",", "output_shape", ")", ":", "\n", "  ", "\"\"\"Expand dimensions and transpose if necessary.\n\n  Args:\n    x: a tf.Tensor\n    input_shape: a Shape\n    output_shape: a Shape whose dimensions are a superset of\n      those in input_shape\n\n  Returns:\n    a tf.Tensor\n  \"\"\"", "\n", "verify_no_new_dims", "(", "[", "output_shape", "]", ",", "input_shape", ")", "\n", "if", "input_shape", "==", "output_shape", "or", "input_shape", ".", "ndims", "==", "0", ":", "\n", "    ", "return", "x", "\n", "", "perm", "=", "[", "input_shape", ".", "dims", ".", "index", "(", "d", ")", "for", "d", "in", "output_shape", ".", "dims", "\n", "if", "d", "in", "input_shape", ".", "dims", "]", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "perm", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "output_shape", ".", "dims", ")", ":", "\n", "    ", "if", "d", "not", "in", "input_shape", ".", "dims", ":", "\n", "      ", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "i", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._einsum_equation": [[5352, 5378], ["ord", "enumerate", "len", "ret.append", "ret.append", "ret.append", "chr"], "function", ["None"], ["", "def", "_einsum_equation", "(", "input_shapes", ",", "output_shape", ")", ":", "\n", "  ", "\"\"\"Turn shapes into an einsum equation.\n\n  e.g. \"ij,jk->ik\"\n\n  Args:\n    input_shapes: a list of Shapes\n    output_shape: a Shape\n  Returns:\n    a string\n  \"\"\"", "\n", "ret", "=", "[", "]", "\n", "next_letter", "=", "ord", "(", "\"a\"", ")", "\n", "dim_to_letter", "=", "{", "}", "\n", "for", "shape_num", ",", "shape", "in", "enumerate", "(", "input_shapes", "+", "[", "output_shape", "]", ")", ":", "\n", "    ", "if", "shape_num", "==", "len", "(", "input_shapes", ")", ":", "\n", "      ", "ret", ".", "append", "(", "\"->\"", ")", "\n", "", "elif", "shape_num", ">", "0", ":", "\n", "      ", "ret", ".", "append", "(", "\",\"", ")", "\n", "", "for", "d", "in", "shape", ".", "dims", ":", "\n", "      ", "if", "d", "not", "in", "dim_to_letter", ":", "\n", "        ", "dim_to_letter", "[", "d", "]", "=", "chr", "(", "next_letter", ")", "\n", "next_letter", "+=", "1", "\n", "", "ret", ".", "append", "(", "dim_to_letter", "[", "d", "]", ")", "\n", "\n", "", "", "return", "\"\"", ".", "join", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.is_subsequence": [[5380, 5393], ["len", "len"], "function", ["None"], ["", "def", "is_subsequence", "(", "short_seq", ",", "long_seq", ")", ":", "\n", "  ", "\"\"\"Is short_seq a subsequence of long_seq.\"\"\"", "\n", "if", "not", "short_seq", ":", "\n", "    ", "return", "True", "\n", "", "pos", "=", "0", "\n", "for", "x", "in", "long_seq", ":", "\n", "    ", "if", "pos", "==", "len", "(", "short_seq", ")", ":", "\n", "      ", "return", "True", "\n", "", "if", "short_seq", "[", "pos", "]", "==", "x", ":", "\n", "      ", "pos", "+=", "1", "\n", "", "", "if", "pos", "==", "len", "(", "short_seq", ")", ":", "\n", "    ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.verify_no_new_dims": [[5395, 5411], ["set", "set", "sum", "set.issubset", "ValueError"], "function", ["None"], ["", "def", "verify_no_new_dims", "(", "input_shapes", ",", "output_shape", ")", ":", "\n", "  ", "\"\"\"Verifies that all dimensions in the output are in at least one input.\n\n  Args:\n    input_shapes: a list of Shapes\n    output_shape: a Shape\n  Raises:\n    ValueError: if there are new dimensions in the output.\n  \"\"\"", "\n", "all_input_dims", "=", "set", "(", "sum", "(", "[", "s", ".", "dims", "for", "s", "in", "input_shapes", "]", ",", "[", "]", ")", ")", "\n", "all_output_dims", "=", "set", "(", "output_shape", ".", "dims", ")", "\n", "if", "not", "all_output_dims", ".", "issubset", "(", "all_input_dims", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"No new dimensions allowed in output\"", "\n", "\" input_shapes = %s output_shape= %s\"", "\n", "%", "(", "[", "s", ".", "dims", "for", "s", "in", "input_shapes", "]", ",", "output_shape", ".", "dims", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pnum_to_processor_coordinates": [[5413, 5432], ["isinstance", "isinstance", "ValueError", "ret.append"], "function", ["None"], ["", "", "def", "pnum_to_processor_coordinates", "(", "mesh_shape", ",", "pnum", ")", ":", "\n", "  ", "\"\"\"Coordinates of a processor in the mesh.\n\n  Args:\n    mesh_shape: a Shape or a list of integers\n    pnum: an integer less than len(mesh_shape)\n\n  Returns:\n    a list of integers with length len(mesh_shape)\n  \"\"\"", "\n", "if", "isinstance", "(", "mesh_shape", ",", "Shape", ")", ":", "\n", "    ", "mesh_shape", "=", "mesh_shape", ".", "to_integer_list", "\n", "", "if", "not", "isinstance", "(", "mesh_shape", ",", "list", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"mesh_shape must be a Shape or a list of integers\"", ")", "\n", "", "ret", "=", "[", "]", "\n", "for", "dimsize", "in", "mesh_shape", "[", ":", ":", "-", "1", "]", ":", "\n", "    ", "ret", ".", "append", "(", "pnum", "%", "dimsize", ")", "\n", "pnum", "//=", "dimsize", "\n", "", "return", "ret", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.processor_coordinates_to_pnum": [[5434, 5454], ["isinstance", "zip", "isinstance", "ValueError"], "function", ["None"], ["", "def", "processor_coordinates_to_pnum", "(", "mesh_shape", ",", "coord", ")", ":", "\n", "  ", "\"\"\"Inverse of pnum_to_processor_coordinates.\n\n  Args:\n    mesh_shape: a Shape or a list of integers\n    coord: a list of integers with length len(mesh_shape)\n\n  Returns:\n    an integer less than len(mesh_shape)\n  \"\"\"", "\n", "if", "isinstance", "(", "mesh_shape", ",", "Shape", ")", ":", "\n", "    ", "mesh_shape", "=", "mesh_shape", ".", "to_integer_list", "\n", "", "if", "not", "isinstance", "(", "mesh_shape", ",", "list", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"mesh_shape must be a Shape or a list of integers\"", ")", "\n", "", "ret", "=", "0", "\n", "multiplier", "=", "1", "\n", "for", "c", ",", "d", "in", "zip", "(", "coord", "[", ":", ":", "-", "1", "]", ",", "mesh_shape", "[", ":", ":", "-", "1", "]", ")", ":", "\n", "    ", "ret", "+=", "multiplier", "*", "c", "\n", "multiplier", "*=", "d", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pnum_to_processor_coordinates_nd": [[5456, 5469], ["device_assignment.coordinates"], "function", ["None"], ["", "def", "pnum_to_processor_coordinates_nd", "(", "mesh_shape", ",", "pnum", ",", "device_assignment", ")", ":", "\n", "  ", "\"\"\"Coordinates of a processor number in the mesh with a device assignment.\n\n  Args:\n    mesh_shape: a Shape or a list of integers\n    pnum: an integer less than len(mesh_shape)\n    device_assignment: accelerator device assignment\n\n  Returns:\n    a list of integers with length len(mesh_shape)\n  \"\"\"", "\n", "del", "mesh_shape", "\n", "return", "device_assignment", ".", "coordinates", "(", "pnum", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.processor_coordinates_to_pnum_map_nd": [[5471, 5496], ["range", "range", "int", "coordinate_map.append", "device_assignment.coordinates"], "function", ["None"], ["", "def", "processor_coordinates_to_pnum_map_nd", "(", "mesh_shape", ",", "logical_to_physical", ",", "\n", "device_assignment", ")", ":", "\n", "  ", "\"\"\"Inverse map of pnum_to_processor_coordinates.\n\n  Args:\n    mesh_shape: a Shape or a list of integers\n    logical_to_physical: a list of coordinates with length len(mesh_shape)\n    device_assignment: accelerator device assignment\n\n  Returns:\n    A map of logical to physical pnums\n  \"\"\"", "\n", "coordinate_map", "=", "[", "]", "\n", "num_replicas", "=", "device_assignment", ".", "num_replicas", "\n", "hw_mesh_shape", "=", "[", "int", "(", "i", ")", "for", "i", "in", "device_assignment", ".", "topology", ".", "mesh_shape", "]", "\n", "for", "i", "in", "range", "(", "num_replicas", ")", ":", "\n", "    ", "coordinate_map", ".", "append", "(", "-", "1", ")", "\n", "", "for", "i", "in", "range", "(", "num_replicas", ")", ":", "\n", "    ", "coord", "=", "device_assignment", ".", "coordinates", "(", "i", ",", "0", ")", "\n", "logical_id", "=", "coord", "[", "0", "]", "+", "coord", "[", "1", "]", "*", "hw_mesh_shape", "[", "0", "]", "+", "coord", "[", "\n", "2", "]", "*", "hw_mesh_shape", "[", "0", "]", "*", "hw_mesh_shape", "[", "1", "]", "\n", "coordinate_map", "[", "logical_id", "]", "=", "i", "\n", "", "return", "[", "\n", "coordinate_map", "[", "coord", "[", "0", "]", "+", "coord", "[", "1", "]", "*", "mesh_shape", "[", "0", "]", "]", "\n", "for", "coord", "in", "logical_to_physical", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pnum_to_group": [[5499, 5515], ["ops.pnum_to_processor_coordinates", "ops.Shape", "ops.processor_coordinates_to_pnum", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pnum_to_processor_coordinates", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.processor_coordinates_to_pnum"], ["", "def", "pnum_to_group", "(", "mesh_shape", ",", "group_dims", ",", "pnum", ")", ":", "\n", "  ", "\"\"\"Group number for grouped allreduce.\n\n  Args:\n    mesh_shape: a Shape\n    group_dims: a list of integers (the dimensions reduced over)\n    pnum: an integer\n\n  Returns:\n    an integer\n  \"\"\"", "\n", "coord", "=", "pnum_to_processor_coordinates", "(", "mesh_shape", ",", "pnum", ")", "\n", "remaining_shape", "=", "Shape", "(", "\n", "[", "d", "for", "i", ",", "d", "in", "enumerate", "(", "mesh_shape", ")", "if", "i", "not", "in", "group_dims", "]", ")", "\n", "remaining_coord", "=", "[", "d", "for", "i", ",", "d", "in", "enumerate", "(", "coord", ")", "if", "i", "not", "in", "group_dims", "]", "\n", "return", "processor_coordinates_to_pnum", "(", "remaining_shape", ",", "remaining_coord", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.processor_groups": [[5517, 5536], ["enumerate", "ops.pnum_to_group", "ret[].append", "six.moves.xrange", "len", "ret.append"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pnum_to_group"], ["", "def", "processor_groups", "(", "mesh_shape", ",", "group_dims", ")", ":", "\n", "  ", "\"\"\"Groups of processors which differ only in the given dimensions.\n\n  Args:\n    mesh_shape: a Shape\n    group_dims: a list of integers\n\n  Returns:\n    a list of lists of integers (processor numbers)\n  \"\"\"", "\n", "group_numbers", "=", "[", "\n", "pnum_to_group", "(", "mesh_shape", ",", "group_dims", ",", "pnum", ")", "\n", "for", "pnum", "in", "xrange", "(", "mesh_shape", ".", "size", ")", "]", "\n", "ret", "=", "[", "]", "\n", "for", "pnum", ",", "g", "in", "enumerate", "(", "group_numbers", ")", ":", "\n", "    ", "while", "len", "(", "ret", ")", "<=", "g", ":", "\n", "      ", "ret", ".", "append", "(", "[", "]", ")", "\n", "", "ret", "[", "g", "]", ".", "append", "(", "pnum", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product": [[5538, 5540], ["functools.reduce"], "function", ["None"], ["", "def", "list_product", "(", "l", ")", ":", "\n", "  ", "return", "functools", ".", "reduce", "(", "operator", ".", "mul", ",", "l", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_logsumexp": [[5542, 5570], ["ops.convert_to_dimension", "tensorflow.variable_scope", "ops.reduce_max", "ops.exp", "ops.reduce_sum", "ops.stop_gradient", "isinstance", "ops.maximum", "ops.exp", "ops.log", "ops.stop_gradient"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_max", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.exp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stop_gradient", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.exp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stop_gradient"], ["", "def", "reduce_logsumexp", "(", "x", ",", "reduced_dim", ",", "extra_logit", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Numerically stable version of log(reduce_sum(exp(x))).\n\n  Unlike other reductions, the output has the same shape as the input.\n  Note: with a minor change, we could allow multiple reduced dimensions.\n\n  Args:\n    x: a Tensor\n    reduced_dim: a dimension in x\n    extra_logit: an optional Tensor broadcastable to (x.shape - reduced_dim)\n    name: an optional string\n  Returns:\n    a Tensor with the same shape and dtype as x.\n  \"\"\"", "\n", "reduced_dim", "=", "convert_to_dimension", "(", "reduced_dim", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"reduce_logsumexp\"", ")", ":", "\n", "    ", "reduced_shape", "=", "x", ".", "shape", "-", "reduced_dim", "\n", "max_logit", "=", "reduce_max", "(", "stop_gradient", "(", "x", ")", ",", "output_shape", "=", "reduced_shape", ")", "\n", "if", "extra_logit", "is", "not", "None", ":", "\n", "      ", "if", "isinstance", "(", "extra_logit", ",", "Tensor", ")", ":", "\n", "        ", "extra_logit", "=", "stop_gradient", "(", "extra_logit", ")", "\n", "", "max_logit", "=", "maximum", "(", "max_logit", ",", "extra_logit", ")", "\n", "", "x", "-=", "max_logit", "\n", "exp_x", "=", "exp", "(", "x", ")", "\n", "sum_exp_x", "=", "reduce_sum", "(", "exp_x", ",", "output_shape", "=", "reduced_shape", ")", "\n", "if", "extra_logit", "is", "not", "None", ":", "\n", "      ", "sum_exp_x", "+=", "exp", "(", "extra_logit", "-", "max_logit", ")", "\n", "", "return", "log", "(", "sum_exp_x", ")", "+", "max_logit", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log_softmax": [[5572, 5586], ["ops.reduce_logsumexp"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_logsumexp"], ["", "", "def", "log_softmax", "(", "x", ",", "reduced_dim", ",", "extra_logit", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"log(softmax(x)).\n\n  Args:\n    x: a Tensor whose shape contains vocab_dim\n    reduced_dim: a Dimension\n    extra_logit: an optional Tensor broadcastable to (x.shape - reduced_dim)\n    name: an optional string\n\n  Returns:\n    a Tensor with the same shape as x\n  \"\"\"", "\n", "return", "x", "-", "reduce_logsumexp", "(", "\n", "x", ",", "reduced_dim", ",", "extra_logit", "=", "extra_logit", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax": [[5588, 5591], ["tensorflow.variable_scope", "ops.exp", "ops.log_softmax"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.exp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log_softmax"], ["", "def", "softmax", "(", "x", ",", "reduced_dim", ",", "extra_logit", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"softmax\"", ")", ":", "\n", "    ", "return", "exp", "(", "log_softmax", "(", "x", ",", "reduced_dim", ",", "extra_logit", "=", "extra_logit", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_range": [[5619, 5634], ["ops.RangeOperation"], "function", ["None"], ["", "", "", "def", "mtf_range", "(", "mesh", ",", "dim", ",", "dtype", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Create a 1d mesh tensor with a range from [0, dim.size).\n\n  Call externally as mtf.range()\n\n  Args:\n    mesh: a Mesh\n    dim: a Dimension\n    dtype: a tf.DType\n    name: an optional string\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "return", "RangeOperation", "(", "mesh", ",", "dim", ",", "dtype", ",", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pretty_print_counters": [[5636, 5659], ["collections.defaultdict", "sorted", "six.iteritems", "parts.append", "six.moves.xrange", "name.count", "len"], "function", ["None"], ["", "def", "pretty_print_counters", "(", "counters", ")", ":", "\n", "  ", "\"\"\"print counters hierarchically.\n\n  Each counter is a pair of a string and a number.\n  The string can have slashes, meaning that the number also counts towards\n  each prefix.  e.g.  \"parameters/trainable\" counts towards both \"parameters\"\n  and \"parameters/trainable\".\n\n  Args:\n    counters: a list of (string, number) pairs\n\n  Returns:\n    a string\n  \"\"\"", "\n", "totals", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "for", "(", "name", ",", "val", ")", "in", "counters", ":", "\n", "    ", "prefixes", "=", "[", "name", "[", ":", "i", "]", "for", "i", "in", "xrange", "(", "len", "(", "name", ")", ")", "if", "name", "[", "i", "]", "==", "\"/\"", "]", "+", "[", "name", "]", "\n", "for", "p", "in", "prefixes", ":", "\n", "      ", "totals", "[", "p", "]", "+=", "val", "\n", "", "", "parts", "=", "[", "]", "\n", "for", "name", ",", "val", "in", "sorted", "(", "six", ".", "iteritems", "(", "totals", ")", ")", ":", "\n", "    ", "parts", ".", "append", "(", "\" \"", "*", "name", ".", "count", "(", "\"/\"", ")", "+", "\"%s: %.3g\"", "%", "(", "name", ",", "val", ")", ")", "\n", "", "return", "\"\\n\"", ".", "join", "(", "parts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._parse_string_to_list_of_pairs": [[5661, 5689], ["s.split", "re.sub().split", "len", "ValueError", "ret.append", "ret.append", "tuple", "re.sub", "int"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sub"], ["", "def", "_parse_string_to_list_of_pairs", "(", "s", ",", "seconds_to_int", "=", "False", ")", ":", "\n", "  ", "r\"\"\"Parses a string into a list of pairs.\n\n  In the input string, each pair is separated by a colon, and the delimiters\n  between pairs are any of \" ,.;\".\n\n  e.g. \"rows:32,cols:32\"\n\n  Args:\n    s: str to parse.\n    seconds_to_int: Boolean. If True, then the second elements are returned\n      as integers;  otherwise they are strings.\n\n  Returns:\n    List of tuple pairs.\n\n  Raises:\n    ValueError: Badly formatted string.\n  \"\"\"", "\n", "ret", "=", "[", "]", "\n", "for", "p", "in", "[", "s", ".", "split", "(", "\":\"", ")", "for", "s", "in", "re", ".", "sub", "(", "\"[,.;]\"", ",", "\" \"", ",", "s", ")", ".", "split", "(", ")", "]", ":", "\n", "    ", "if", "len", "(", "p", ")", "!=", "2", ":", "\n", "      ", "raise", "ValueError", "(", "\"bad input to _parse_string_to_list_of_pairs %s\"", "%", "s", ")", "\n", "", "if", "seconds_to_int", ":", "\n", "      ", "ret", ".", "append", "(", "(", "p", "[", "0", "]", ",", "int", "(", "p", "[", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "      ", "ret", ".", "append", "(", "tuple", "(", "p", ")", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.parallel": [[5691, 5719], ["enumerate", "isinstance", "ValueError", "list", "list", "six.itervalues", "ValueError", "tensorflow.device", "isinstance", "len", "len", "tensorflow.variable_scope", "ret.append", "six.iteritems", "tensorflow.tf.concat"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat"], ["", "def", "parallel", "(", "devices", ",", "fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Call a function once on each device.\n\n  Args:\n    devices: a list of n devices\n    fn: a function\n    *args: arguments, each of which is a list of length n\n    **kwargs: keyword-args, each of which is a list of length n\n  Returns:\n    a list of length n\n  Raises:\n    ValueError: if the arguments are not all lists of length n\n  \"\"\"", "\n", "if", "not", "isinstance", "(", "devices", ",", "list", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"devices must be a list\"", ")", "\n", "", "for", "x", "in", "list", "(", "args", ")", "+", "list", "(", "six", ".", "itervalues", "(", "kwargs", ")", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "x", ",", "list", ")", "or", "len", "(", "x", ")", "!=", "len", "(", "devices", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Argument not a list with same length as devices \"", "\n", "\"arg=%s devices=%s\"", "%", "(", "x", ",", "devices", ")", ")", "\n", "", "", "ret", "=", "[", "]", "\n", "for", "i", ",", "device", "in", "enumerate", "(", "devices", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "device", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "\"parallel_%d\"", "%", "i", ")", ":", "\n", "        ", "my_args", "=", "[", "x", "[", "i", "]", "for", "x", "in", "args", "]", "\n", "my_kwargs", "=", "{", "k", ":", "v", "[", "i", "]", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "kwargs", ")", "}", "\n", "ret", ".", "append", "(", "fn", "(", "*", "my_args", ",", "**", "my_kwargs", ")", ")", "\n", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose_list_of_lists": [[5721, 5734], ["ValueError", "list", "zip"], "function", ["None"], ["", "def", "transpose_list_of_lists", "(", "lol", ")", ":", "\n", "  ", "\"\"\"Transpose a list of equally-sized python lists.\n\n  Args:\n    lol: a list of lists\n  Returns:\n    a list of lists\n  Raises:\n    ValueError: if list is empty\n  \"\"\"", "\n", "if", "not", "lol", ":", "\n", "    ", "raise", "ValueError", "(", "\"cannot transpose the empty list\"", ")", "\n", "", "return", "[", "list", "(", "x", ")", "for", "x", "in", "zip", "(", "*", "lol", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_reduction_fn": [[5736, 5745], ["ValueError"], "function", ["None"], ["", "def", "binary_reduction_fn", "(", "reduction_fn_string", ")", ":", "\n", "  ", "if", "reduction_fn_string", "==", "\"SUM\"", ":", "\n", "    ", "return", "tf", ".", "add", "\n", "", "elif", "reduction_fn_string", "==", "\"MAX\"", ":", "\n", "    ", "return", "tf", ".", "maximum", "\n", "", "elif", "reduction_fn_string", "==", "\"MIN\"", ":", "\n", "    ", "return", "tf", ".", "minimum", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown reduction_fn_string %s\"", "%", "reduction_fn_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduction_fn": [[5747, 5756], ["ValueError"], "function", ["None"], ["", "", "def", "reduction_fn", "(", "reduction_fn_string", ")", ":", "\n", "  ", "if", "reduction_fn_string", "==", "\"SUM\"", ":", "\n", "    ", "return", "tf", ".", "reduce_sum", "\n", "", "elif", "reduction_fn_string", "==", "\"MAX\"", ":", "\n", "    ", "return", "tf", ".", "reduce_max", "\n", "", "elif", "reduction_fn_string", "==", "\"MIN\"", ":", "\n", "    ", "return", "tf", ".", "reduce_min", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown reduction_fn_string %s\"", "%", "reduction_fn_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pool_fn": [[5758, 5787], ["ops._tf_restore_batch_dims", "ops._tf_restore_batch_dims", "ops._tf_restore_batch_dims", "ops._tf_restore_batch_dims", "tensorflow.nn.avg_pool2d", "tensorflow.nn.avg_pool3d", "tensorflow.nn.max_pool2d", "tensorflow.nn.max_pool3d", "ops._tf_flatten_batch_dims", "ops._tf_flatten_batch_dims", "ops._tf_flatten_batch_dims", "ops._tf_flatten_batch_dims", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_restore_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_restore_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_restore_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_restore_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.avg_pool2d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.avg_pool3d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.max_pool2d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.max_pool3d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims"], ["", "", "def", "pool_fn", "(", "pool_fn_string", ")", ":", "\n", "  ", "\"\"\"Converts a string function name to actual function.\"\"\"", "\n", "def", "avg_pool2d_fn", "(", "x", ",", "ksize", ",", "strides", ",", "padding", ")", ":", "\n", "    ", "return", "_tf_restore_batch_dims", "(", "\n", "tf", ".", "nn", ".", "avg_pool2d", "(", "_tf_flatten_batch_dims", "(", "x", ",", "3", ")", ",", "ksize", ",", "strides", ",", "padding", ")", ",", "\n", "3", ",", "x", ")", "\n", "", "def", "avg_pool3d_fn", "(", "x", ",", "ksize", ",", "strides", ",", "padding", ")", ":", "\n", "    ", "return", "_tf_restore_batch_dims", "(", "\n", "tf", ".", "nn", ".", "avg_pool3d", "(", "_tf_flatten_batch_dims", "(", "x", ",", "4", ")", ",", "ksize", ",", "strides", ",", "padding", ")", ",", "\n", "4", ",", "x", ")", "\n", "", "def", "max_pool2d_fn", "(", "x", ",", "ksize", ",", "strides", ",", "padding", ")", ":", "\n", "    ", "return", "_tf_restore_batch_dims", "(", "\n", "tf", ".", "nn", ".", "max_pool2d", "(", "_tf_flatten_batch_dims", "(", "x", ",", "3", ")", ",", "ksize", ",", "strides", ",", "padding", ")", ",", "\n", "3", ",", "x", ")", "\n", "", "def", "max_pool3d_fn", "(", "x", ",", "ksize", ",", "strides", ",", "padding", ")", ":", "\n", "    ", "return", "_tf_restore_batch_dims", "(", "\n", "tf", ".", "nn", ".", "max_pool3d", "(", "_tf_flatten_batch_dims", "(", "x", ",", "4", ")", ",", "ksize", ",", "strides", ",", "padding", ")", ",", "\n", "4", ",", "x", ")", "\n", "\n", "", "if", "pool_fn_string", "==", "\"AVG_2D\"", ":", "\n", "    ", "return", "avg_pool2d_fn", "\n", "", "elif", "pool_fn_string", "==", "\"AVG_3D\"", ":", "\n", "    ", "return", "avg_pool3d_fn", "\n", "", "elif", "pool_fn_string", "==", "\"MAX_2D\"", ":", "\n", "    ", "return", "max_pool2d_fn", "\n", "", "elif", "pool_fn_string", "==", "\"MAX_3D\"", ":", "\n", "    ", "return", "max_pool3d_fn", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown pool_fn_string %s\"", "%", "pool_fn_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_uniform": [[5851, 5864], ["ops.convert_to_shape", "ops.RandomOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "", "def", "random_uniform", "(", "mesh", ",", "shape", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Random uniform.\n\n  Args:\n    mesh: a Mesh\n    shape: a Shape\n    **kwargs: keyword args for tf.random.uniform, except seed\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "shape", "=", "convert_to_shape", "(", "shape", ")", "\n", "return", "RandomOperation", "(", "mesh", ",", "shape", ",", "tf", ".", "random", ".", "uniform", ",", "**", "kwargs", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal": [[5866, 5879], ["ops.convert_to_shape", "ops.RandomOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "def", "random_normal", "(", "mesh", ",", "shape", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Random uniform.\n\n  Args:\n    mesh: a Mesh\n    shape: a Shape\n    **kwargs: keyword args for tf.random.normal, except seed\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "shape", "=", "convert_to_shape", "(", "shape", ")", "\n", "return", "RandomOperation", "(", "mesh", ",", "shape", ",", "tf", ".", "random", ".", "normal", ",", "**", "kwargs", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout": [[5881, 5922], ["ops.convert_to_shape", "ValueError", "tensorflow.variable_scope", "ops.cast", "ops.less", "ops.random_uniform"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_uniform"], ["", "def", "dropout", "(", "x", ",", "is_training", ",", "keep_prob", "=", "None", ",", "rate", "=", "None", ",", "noise_shape", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Randomly set some elements to 0 and scale up the rest.\n\n  Dropout rate should be specified in exactly one of two ways:\n    rate - the fraction to drop\n    keep_prob - the fraction to keep\n\n  If x has floating-point type, then kept values are scaled up by\n  a factor of (1.0 / keep_prob).  If x is has integer type, the kept values\n  are not scaled up.\n\n  Args:\n    x: a Tensor\n    is_training: a boolean, set to true while training, if false dropout becomes\n      an identity function.\n    keep_prob: a float between 0.0 and 1.0\n    rate: a float between 0.0 and 1.0\n    noise_shape: an optional Shape (a subset of x.shape)\n    name: an optional string\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "if", "(", "keep_prob", "is", "None", ")", "==", "(", "rate", "is", "None", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"exactly one of keep_prob and rate should be set\"", ")", "\n", "", "if", "keep_prob", "is", "None", ":", "\n", "    ", "keep_prob", "=", "1.0", "-", "rate", "\n", "", "noise_shape", "=", "convert_to_shape", "(", "noise_shape", ")", "\n", "if", "noise_shape", "is", "None", ":", "\n", "    ", "noise_shape", "=", "x", ".", "shape", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"dropout\"", ")", ":", "\n", "    ", "if", "keep_prob", "==", "1.0", "or", "not", "is_training", ":", "\n", "      ", "return", "x", "\n", "", "noise", "=", "cast", "(", "less", "(", "random_uniform", "(", "\n", "x", ".", "mesh", ",", "noise_shape", ",", "\n", "dtype", "=", "(", "x", ".", "dtype", "if", "x", ".", "dtype", ".", "is_floating", "else", "tf", ".", "float32", ")", ")", ",", "\n", "keep_prob", ")", ",", "x", ".", "dtype", ")", "\n", "if", "x", ".", "dtype", ".", "is_floating", ":", "\n", "      ", "noise", "/=", "keep_prob", "\n", "", "return", "x", "*", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._cumprod": [[5924, 5936], ["ret.append"], "function", ["None"], ["", "", "def", "_cumprod", "(", "l", ")", ":", "\n", "  ", "\"\"\"Cumulative product of a list.\n\n  Args:\n    l: a list of integers\n  Returns:\n    a list with one more element (starting with 1)\n  \"\"\"", "\n", "ret", "=", "[", "1", "]", "\n", "for", "item", "in", "l", ":", "\n", "    ", "ret", ".", "append", "(", "ret", "[", "-", "1", "]", "*", "item", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log_variable_sizes": [[5938, 5986], ["sorted", "ops._log_info_also_to_file", "list", "tag.ljust", "str().ljust", "str().ljust", "str().ljust", "mesh_to_impl[].slice_size", "ops._log_info_also_to_file", "isinstance", "v.name.ljust", "str().ljust", "str().ljust", "str().ljust", "str", "str", "str", "ops._log_info_also_to_file", "len", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._log_info_also_to_file", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slice_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._log_info_also_to_file", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._log_info_also_to_file"], ["", "def", "log_variable_sizes", "(", "var_list", ",", "\n", "tag", ",", "\n", "verbose", "=", "True", ",", "\n", "mesh_to_impl", "=", "None", ",", "\n", "log_file", "=", "None", ")", ":", "\n", "  ", "\"\"\"Log the sizes and shapes of variables, and the total size.\n\n  Args:\n    var_list: a list of variables; defaults to trainable_variables\n    tag: a string; defaults to \"Trainable Variables\"\n    verbose: bool, if True, log every weight; otherwise, log total size only.\n    mesh_to_impl: an optional map from Mesh to MeshImpl\n    log_file: an optional tf.io.gfile.GFile. If provided, information about\n      the variables will also be logged to this file.\n  \"\"\"", "\n", "if", "not", "var_list", ":", "\n", "    ", "return", "\n", "\n", "", "name_to_var", "=", "{", "v", ".", "name", ":", "v", "for", "v", "in", "var_list", "}", "\n", "total_size", "=", "0", "\n", "total_slice_size", "=", "0", "\n", "for", "v_name", "in", "sorted", "(", "list", "(", "name_to_var", ")", ")", ":", "\n", "    ", "v", "=", "name_to_var", "[", "v_name", "]", "\n", "v_size", "=", "v", ".", "shape", ".", "size", "\n", "if", "mesh_to_impl", "is", "not", "None", ":", "\n", "      ", "slice_size", "=", "mesh_to_impl", "[", "v", ".", "mesh", "]", ".", "slice_size", "(", "v", ".", "shape", ")", "\n", "", "else", ":", "\n", "      ", "slice_size", "=", "0", "\n", "", "total_slice_size", "+=", "slice_size", "\n", "if", "verbose", ":", "\n", "      ", "_log_info_also_to_file", "(", "\n", "\"Variable %s size %s slice_size %s %s\"", ",", "\n", "v", ".", "name", ".", "ljust", "(", "60", ")", ",", "\n", "str", "(", "v_size", ")", ".", "ljust", "(", "12", ")", ",", "\n", "str", "(", "slice_size", ")", ".", "ljust", "(", "12", ")", ",", "\n", "str", "(", "v", ".", "shape", ")", ".", "ljust", "(", "60", ")", ",", "\n", "log_file", "=", "log_file", ")", "\n", "if", "isinstance", "(", "v", ",", "StackedVariable", ")", ":", "\n", "        ", "for", "n", "in", "v", ".", "original_names", ":", "\n", "          ", "_log_info_also_to_file", "(", "\"    \"", "+", "n", ",", "log_file", "=", "log_file", ")", "\n", "", "", "", "total_size", "+=", "v_size", "\n", "", "_log_info_also_to_file", "(", "\n", "\"%s count: %s  Total size: %s  Total slice_size: %s\"", ",", "\n", "tag", ".", "ljust", "(", "30", ")", ",", "\n", "str", "(", "len", "(", "var_list", ")", ")", ".", "ljust", "(", "6", ")", ",", "\n", "str", "(", "total_size", ")", ".", "ljust", "(", "15", ")", ",", "\n", "str", "(", "total_slice_size", ")", ".", "ljust", "(", "15", ")", ",", "\n", "log_file", "=", "log_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._log_info_also_to_file": [[5988, 6003], ["tensorflow.logging.info", "kw_args.get", "kw_args.get.write", "kw_args.get.write"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get"], ["", "def", "_log_info_also_to_file", "(", "format_str", ",", "*", "args", ",", "**", "kw_args", ")", ":", "\n", "  ", "\"\"\"Logs at the info level and writes to file if one is provided.\n\n  Args:\n    format_str: a string; will be logged and can contain things such as %s.\n    *args: arguments to the format_str.\n    **kw_args: keyword arguments. May contain optional tf.io.gfile.GFile keyed\n      by \"log_file\", where the message will also be appended to this file. Other\n      arguments will be ignored.\n  \"\"\"", "\n", "tf", ".", "logging", ".", "info", "(", "format_str", ",", "*", "args", ")", "\n", "log_file", "=", "kw_args", ".", "get", "(", "\"log_file\"", ",", "None", ")", "\n", "if", "log_file", ":", "\n", "    ", "log_file", ".", "write", "(", "format_str", "%", "args", ")", "\n", "log_file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.while_loop": [[6156, 6212], ["enumerate", "tuple", "ops.depend", "tuple.append", "ops.serialize_training_step.cond_fn", "tuple", "ops.depend", "ops.WhileLoopOperation", "ops.WhileLoopOperation", "ops.get_variable", "ops.assign", "ops.serialize_training_step.body_fn", "zip", "ops.assign", "tensorflow.zeros_initializer", "zip"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.depend", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.depend", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign"], ["", "", "", "def", "while_loop", "(", "cond_fn", ",", "body_fn", ",", "inputs", ",", "num_loop_vars", "=", "None", ",", "\n", "has_accumulators", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"While Loop.\n\n  See comments above for WhileLoopOperation\n\n  num_loop_vars is a hack for the multi-gpu setup.  In this case, loops\n  are generally slow, as all loop variables are placed on device.  By setting\n  num_loop_vars=k, then all of the loop variables except for the first k\n  are handled as mtf Variables instead of loop variables, using explicit\n  updates and control dependencies.  In this case, we only return the\n  first num_loop_vars outputs.  Do not use this option on TPU, since it\n  is unnecessary and also produces incorrect results, since xla does not\n  respect control dependencies.\n\n  Args:\n    cond_fn: a function from n Tensors to scalar boolean Tensor\n    body_fn: a function from n Tensors to list of n Tensors\n    inputs: a list of n Tensors\n    num_loop_vars: an optional integer.\n    has_accumulators: a boolean\n    **kwargs: additional kwargs passed to tf.while_loop\n\n  Returns:\n    a list of n Tensors.\n  \"\"\"", "\n", "if", "num_loop_vars", "is", "None", ":", "\n", "    ", "return", "WhileLoopOperation", "(", "cond_fn", ",", "body_fn", ",", "inputs", ",", "tf_kwargs", "=", "kwargs", ",", "\n", "has_accumulators", "=", "has_accumulators", ")", ".", "outputs", "\n", "# Turn all loop vars except for the first ones into non-loop vars.", "\n", "# see comments in docstring.", "\n", "", "assert", "num_loop_vars", ">", "0", "\n", "extra_inputs", "=", "inputs", "[", "num_loop_vars", ":", "]", "\n", "my_vars", "=", "[", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "extra_inputs", ")", ":", "\n", "    ", "my_vars", ".", "append", "(", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\"loop_var_%d\"", "%", "i", ",", "\n", "x", ".", "shape", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "dtype", "=", "x", ".", "dtype", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "LOCAL_VARIABLES", "]", ")", ")", "\n", "", "my_vars", "=", "tuple", "(", "my_vars", ")", "\n", "first_input", "=", "depend", "(", "\n", "inputs", "[", "0", "]", ",", "[", "assign", "(", "var", ",", "x", ")", "for", "var", ",", "x", "in", "zip", "(", "my_vars", ",", "extra_inputs", ")", "]", ")", "\n", "inputs", "=", "[", "first_input", "]", "+", "inputs", "[", "1", ":", "num_loop_vars", "]", "\n", "def", "my_cond_fn", "(", "*", "inputs", ")", ":", "\n", "    ", "return", "cond_fn", "(", "*", "(", "inputs", "+", "my_vars", ")", ")", "\n", "", "def", "my_body_fn", "(", "*", "inputs", ")", ":", "\n", "    ", "outputs", "=", "tuple", "(", "body_fn", "(", "*", "(", "inputs", "+", "my_vars", ")", ")", ")", "\n", "extra_outputs", "=", "outputs", "[", "num_loop_vars", ":", "]", "\n", "first_output", "=", "depend", "(", "\n", "outputs", "[", "0", "]", ",", "[", "assign", "(", "var", ",", "x", ")", "for", "var", ",", "x", "in", "zip", "(", "my_vars", ",", "extra_outputs", ")", "]", ")", "\n", "outputs", "=", "(", "first_output", ",", ")", "+", "outputs", "[", "1", ":", "num_loop_vars", "]", "\n", "return", "outputs", "\n", "", "return", "WhileLoopOperation", "(", "\n", "my_cond_fn", ",", "my_body_fn", ",", "inputs", ",", "tf_kwargs", "=", "kwargs", ",", "\n", "has_accumulators", "=", "has_accumulators", ")", ".", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.custom_gradient": [[6264, 6317], ["graph.capture_operations", "isinstance", "set", "set", "list", "set.update", "ops.CustomGradientOperation", "set", "fn", "set", "isinstance", "set.update", "set", "list", "set"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.capture_operations"], ["", "", "def", "custom_gradient", "(", "fn", ",", "grad_fn", ",", "explicit_inputs", ")", ":", "\n", "  ", "\"\"\"Execute a function and call a custom gradient fn on the backward pass.\n\n  `fn` takes positional Tensor arguments and returns a Tensor or a tuple of\n  Tensors.\n\n  `explicit_inputs` is a list of tensors to be passed as positional arguments\n  to the function `fn`.\n\n  `grad_fn` has the following signature:\n    Args:\n      explicit_inputs: the list of Tensors passed to this function and to `fn`\n      all_inputs: a list of tensors beginning with explicit_inputs, but also\n        containing external Tensors used by fn.\n      forward_operations: a list of Operation. (the operations created on the\n        foward pass\n      outputs: the outputs of `fn` from the forward pass\n      output_grads: the gradient Tensors corresponding to those outputs.\n    Returns\n      a list of Tensor/None with the same length as `all_inputs`\n\n  Args:\n    fn: a function taking positional Tensor arguments\n    grad_fn: a function (see above)\n    explicit_inputs: list of Tensors\n  Returns:\n    a list of outputs\n  \"\"\"", "\n", "graph", "=", "explicit_inputs", "[", "0", "]", ".", "graph", "\n", "outputs", ",", "forward_operations", "=", "graph", ".", "capture_operations", "(", "\n", "lambda", ":", "fn", "(", "*", "explicit_inputs", ")", ")", "\n", "returns_tuple", "=", "isinstance", "(", "outputs", ",", "tuple", ")", "\n", "new_outputs", "=", "set", "(", ")", "\n", "new_inputs", "=", "set", "(", ")", "\n", "for", "op", "in", "forward_operations", ":", "\n", "    ", "new_inputs", ".", "update", "(", "set", "(", "op", ".", "inputs", ")", ")", "\n", "if", "not", "isinstance", "(", "op", ",", "Variable", ")", ":", "\n", "      ", "new_outputs", ".", "update", "(", "set", "(", "op", ".", "outputs", ")", ")", "\n", "", "", "external_inputs", "=", "list", "(", "new_inputs", "-", "new_outputs", "-", "set", "(", "explicit_inputs", ")", ")", "\n", "external_inputs", "=", "[", "t", "for", "t", "in", "external_inputs", "if", "t", ".", "dtype", ".", "is_floating", "]", "\n", "all_inputs", "=", "explicit_inputs", "+", "external_inputs", "\n", "if", "not", "returns_tuple", ":", "\n", "    ", "outputs", "=", "outputs", ",", "\n", "", "ret", "=", "CustomGradientOperation", "(", "explicit_inputs", ",", "\n", "all_inputs", ",", "\n", "list", "(", "outputs", ")", ",", "\n", "grad_fn", ",", "\n", "forward_operations", ")", ".", "outputs", "\n", "# Make sure no one uses the internals of this function, since the gradients", "\n", "#  will probably not work correctly.", "\n", "for", "t", "in", "new_outputs", "-", "set", "(", "outputs", ")", ":", "\n", "    ", "t", ".", "usable", "=", "False", "\n", "", "return", "ret", "if", "returns_tuple", "else", "ret", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._recompute_grad_grad": [[6319, 6347], ["graph.clone_operations", "ops.gradients", "zip", "ops.reduce_sum", "ValueError", "ops.cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.clone_operations", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "_recompute_grad_grad", "(", "explicit_inputs", ",", "\n", "all_inputs", ",", "\n", "forward_operations", ",", "\n", "outputs", ",", "\n", "output_grads", ",", "\n", "control_dependencies", ")", ":", "\n", "  ", "\"\"\"Gradient function used with recompute_grad.\"\"\"", "\n", "graph", "=", "forward_operations", "[", "0", "]", ".", "graph", "\n", "input_mapping", "=", "{", "t", ":", "t", "for", "t", "in", "all_inputs", "}", "\n", "if", "control_dependencies", ":", "\n", "# we need to outsmart XLA here to force a control dependency", "\n", "    ", "zero_with_control_dependency", "=", "reduce_sum", "(", "output_grads", "[", "0", "]", "*", "1e-30", ")", "\n", "for", "t", "in", "explicit_inputs", ":", "\n", "      ", "if", "t", ".", "dtype", ".", "is_floating", ":", "\n", "        ", "input_mapping", "[", "t", "]", "+=", "cast", "(", "zero_with_control_dependency", ",", "t", ".", "dtype", ")", "\n", "", "", "", "mapped_inputs", "=", "[", "input_mapping", "[", "t", "]", "for", "t", "in", "all_inputs", "]", "\n", "recomputed_operations", ",", "mapping", "=", "graph", ".", "clone_operations", "(", "\n", "forward_operations", ",", "input_mapping", ")", "\n", "recomputed_outputs", "=", "[", "mapping", "[", "t", "]", "for", "t", "in", "outputs", "]", "\n", "input_grads", "=", "gradients", "(", "\n", "ys", "=", "recomputed_outputs", ",", "\n", "xs", "=", "mapped_inputs", ",", "\n", "grad_ys", "=", "output_grads", ",", "\n", "operations", "=", "recomputed_operations", ")", "\n", "for", "x", ",", "g", "in", "zip", "(", "all_inputs", ",", "input_grads", ")", ":", "\n", "    ", "if", "x", ".", "dtype", ".", "is_floating", "and", "g", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"_recompute_grad_grad: no gradient for %s\"", "%", "x", ")", "\n", "", "", "return", "input_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.recompute_grad": [[6349, 6366], ["ops.custom_gradient", "functools.partial"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.custom_gradient"], ["", "def", "recompute_grad", "(", "fn", ",", "explicit_inputs", ",", "control_dependencies", "=", "True", ")", ":", "\n", "  ", "\"\"\"Execute a function and recompute it on the backwards pass.\n\n  Args:\n    fn: a function taking positional arguments and returning a Tensor or tuple\n      of Tensors.\n    explicit_inputs: inputs to the function\n    control_dependencies: a boolean - whether to force the recomputation to\n      happen after the output gradients.\n  Returns:\n    a Tensor or tuple of Tensors\n  \"\"\"", "\n", "return", "custom_gradient", "(", "\n", "fn", ",", "\n", "functools", ".", "partial", "(", "_recompute_grad_grad", ",", "\n", "control_dependencies", "=", "control_dependencies", ")", ",", "\n", "explicit_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where": [[6368, 6374], ["ops.multiply", "ops.multiply", "ops.cast", "ops.cast", "ops.logical_not"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.multiply", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.multiply", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_not"], ["", "def", "where", "(", "condition", ",", "if_true", ",", "if_false", ",", "output_shape", "=", "None", ")", ":", "\n", "  ", "dtype", "=", "if_true", ".", "dtype", "\n", "return", "(", "\n", "multiply", "(", "if_true", ",", "cast", "(", "condition", ",", "dtype", ")", ",", "output_shape", "=", "output_shape", ")", "+", "\n", "multiply", "(", "if_false", ",", "\n", "cast", "(", "logical_not", "(", "condition", ")", ",", "dtype", ")", ",", "output_shape", "=", "output_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._shape_union": [[6376, 6386], ["ops.Shape", "sorted", "list", "set", "sum"], "function", ["None"], ["", "def", "_shape_union", "(", "shapes", ")", ":", "\n", "  ", "\"\"\"A shape containing the union of all dimensions in the input shapes.\n\n  Args:\n    shapes: a list of Shapes\n\n  Returns:\n    a Shape\n  \"\"\"", "\n", "return", "Shape", "(", "sorted", "(", "list", "(", "set", "(", "sum", "(", "[", "s", ".", "dims", "for", "s", "in", "shapes", "]", ",", "[", "]", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_flatten_batch_dims": [[6388, 6405], ["tf.reshape.shape.as_list", "tensorflow.reshape", "ops.list_product"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product"], ["", "def", "_tf_flatten_batch_dims", "(", "x", ",", "num_nonbatch_dims", ")", ":", "\n", "  ", "\"\"\"Flatten all but last num_nonbatch_dims into one dimension.\n\n  Args:\n    x: a tf.Tensor:\n    num_nonbatch_dims: an integer\n\n  Returns:\n    a tf.Tensor with 1 + num_nonbatch_dims dimensions.\n  \"\"\"", "\n", "shape", "=", "x", ".", "shape", ".", "as_list", "(", ")", "\n", "assert", "None", "not", "in", "shape", "\n", "new_shape", "=", "(", "[", "list_product", "(", "shape", "[", ":", "-", "num_nonbatch_dims", "]", ")", "]", "\n", "+", "shape", "[", "-", "num_nonbatch_dims", ":", "]", ")", "\n", "if", "new_shape", "!=", "shape", ":", "\n", "    ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "new_shape", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops._tf_restore_batch_dims": [[6407, 6428], ["tf.reshape.shape.as_list", "tensorflow.reshape", "prototype.shape.as_list", "tf.reshape.shape.as_list"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "_tf_restore_batch_dims", "(", "x", ",", "num_nonbatch_dims", ",", "prototype", ")", ":", "\n", "  ", "\"\"\"Reverse op of _tf_flatten_batch_dims.\n\n  Un-flatten the first dimension of x to match all but the last\n  num_nonbatch_dims dimensions of prototype.\n\n  Args:\n    x: a tf.Tensor with 1 + num_nonbatch_dims dimensions\n    num_nonbatch_dims: an integer\n    prototype: a tf.Tensor\n\n  Returns:\n    a tf.Tensor\n  \"\"\"", "\n", "assert", "x", ".", "shape", ".", "ndims", "==", "1", "+", "num_nonbatch_dims", "\n", "new_shape", "=", "(", "\n", "prototype", ".", "shape", ".", "as_list", "(", ")", "[", ":", "-", "num_nonbatch_dims", "]", "+", "x", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "assert", "None", "not", "in", "new_shape", "\n", "if", "new_shape", "!=", "x", ".", "shape", ".", "as_list", "(", ")", ":", "\n", "    ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "new_shape", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.halo_exchange": [[6430, 6467], ["six.moves.xrange", "ops.concat", "ops.mtf_slice", "ops.mtf_slice", "ops.shift", "ops.shift", "ops.shift", "ops.shift"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift"], ["", "def", "halo_exchange", "(", "x", ",", "blocks_dim", ",", "block_size_dim", ",", "halo_size", ",", "wrap", "=", "False", ")", ":", "\n", "  ", "\"\"\"Concat each block with the margins of adjacent blocks.\n\n  Get left and right blocks_dim and concatenate along block_size_dim.\n\n  Args:\n    x: a Tensor.\n    blocks_dim: a Dimension in x.shape\n    block_size_dim: a Dimension in x.shape\n    halo_size: an integer\n    wrap: a boolean\n\n  Returns:\n    a Tensor with the same shape as x, other than in block_size_dim, whose\n    size is increased by 2*halo_size.\n  \"\"\"", "\n", "if", "halo_size", "==", "0", ":", "\n", "    ", "return", "x", "\n", "\n", "", "block_size", "=", "block_size_dim", ".", "size", "\n", "partial_size", "=", "halo_size", "%", "block_size", "\n", "num_complete_blocks", "=", "halo_size", "//", "block_size", "\n", "parts", "=", "[", "x", "]", "\n", "\n", "for", "i", "in", "xrange", "(", "1", ",", "num_complete_blocks", "+", "1", ")", ":", "\n", "    ", "parts", "=", "(", "[", "shift", "(", "x", ",", "i", ",", "blocks_dim", ",", "wrap", ")", "]", "+", "parts", "+", "\n", "[", "shift", "(", "x", ",", "-", "i", ",", "blocks_dim", ",", "wrap", ")", "]", ")", "\n", "", "if", "partial_size", ">", "0", ":", "\n", "    ", "left_margin", "=", "mtf_slice", "(", "x", ",", "0", ",", "partial_size", ",", "block_size_dim", ".", "name", ")", "\n", "right_margin", "=", "mtf_slice", "(", "\n", "x", ",", "block_size_dim", ".", "size", "-", "partial_size", ",", "partial_size", ",", "\n", "block_size_dim", ".", "name", ")", "\n", "parts", "=", "(", "\n", "[", "shift", "(", "right_margin", ",", "num_complete_blocks", "+", "1", ",", "blocks_dim", ",", "wrap", ")", "]", "\n", "+", "parts", "+", "\n", "[", "shift", "(", "left_margin", ",", "-", "(", "num_complete_blocks", "+", "1", ")", ",", "blocks_dim", ",", "wrap", ")", "]", ")", "\n", "", "return", "concat", "(", "parts", ",", "block_size_dim", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.left_halo_exchange": [[6469, 6502], ["six.moves.xrange", "ops.concat", "ops.mtf_slice", "ops.shift", "ops.shift"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift"], ["", "def", "left_halo_exchange", "(", "x", ",", "blocks_dim", ",", "block_size_dim", ",", "halo_size", ",", "wrap", "=", "False", ")", ":", "\n", "  ", "\"\"\"Concat each block with the margins of adjacent blocks from the left.\n\n  Get left blocks_dim and concatenate along block_size_dim.\n\n  Args:\n    x: a Tensor.\n    blocks_dim: a Dimension in x.shape\n    block_size_dim: a Dimension in x.shape\n    halo_size: an integer\n    wrap: a boolean\n\n  Returns:\n    a Tensor with the same shape as x, other than in block_size_dim, whose\n    size is increased by halo_size.\n  \"\"\"", "\n", "if", "halo_size", "==", "0", ":", "\n", "    ", "return", "x", "\n", "\n", "", "block_size", "=", "block_size_dim", ".", "size", "\n", "partial_size", "=", "halo_size", "%", "block_size", "\n", "num_complete_blocks", "=", "halo_size", "//", "block_size", "\n", "parts", "=", "[", "x", "]", "\n", "\n", "for", "i", "in", "xrange", "(", "1", ",", "num_complete_blocks", "+", "1", ")", ":", "\n", "    ", "parts", "=", "(", "[", "shift", "(", "x", ",", "i", ",", "blocks_dim", ",", "wrap", ")", "]", "+", "parts", ")", "\n", "", "if", "partial_size", ">", "0", ":", "\n", "    ", "right_margin", "=", "mtf_slice", "(", "\n", "x", ",", "block_size_dim", ".", "size", "-", "partial_size", ",", "partial_size", ",", "\n", "block_size_dim", ".", "name", ")", "\n", "parts", "=", "(", "[", "shift", "(", "right_margin", ",", "num_complete_blocks", "+", "1", ",", "blocks_dim", ",", "wrap", ")", "]", "\n", "+", "parts", ")", "\n", "", "return", "concat", "(", "parts", ",", "block_size_dim", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tensor_dim_to_mesh_dim_size": [[6504, 6526], ["ops.convert_to_layout_rules", "ops.convert_to_shape", "convert_to_layout_rules.tensor_dimension_to_mesh_axis"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis"], ["", "def", "tensor_dim_to_mesh_dim_size", "(", "layout", ",", "mesh_shape", ",", "tensor_dim", ")", ":", "\n", "  ", "\"\"\"How many ways does a tensor dimension get split.\n\n  This is used to \"cheat\" when building the mtf graph and peek at how a\n  tensor dimension will be split.  Returns 1 if the tensor dimension is not\n  split.\n\n  Args:\n    layout: an input to convert_to_layout_rules\n    mesh_shape: an input to convert_to_shape\n    tensor_dim: a Dimension\n\n  Returns:\n    an integer\n  \"\"\"", "\n", "layout_rules", "=", "convert_to_layout_rules", "(", "layout", ")", "\n", "mesh_shape", "=", "convert_to_shape", "(", "mesh_shape", ")", "\n", "mesh_axis", "=", "layout_rules", ".", "tensor_dimension_to_mesh_axis", "(", "tensor_dim", ",", "mesh_shape", ")", "\n", "if", "mesh_axis", "is", "None", ":", "\n", "    ", "return", "1", "\n", "", "else", ":", "\n", "    ", "return", "mesh_shape", ".", "dims", "[", "mesh_axis", "]", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tensor_dim_to_size_per_split": [[6528, 6534], ["ops.tensor_dim_to_mesh_dim_size", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tensor_dim_to_mesh_dim_size"], ["", "", "def", "tensor_dim_to_size_per_split", "(", "layout", ",", "mesh_shape", ",", "tensor_dim", ")", ":", "\n", "  ", "mesh_dim_size", "=", "tensor_dim_to_mesh_dim_size", "(", "layout", ",", "mesh_shape", ",", "tensor_dim", ")", "\n", "if", "tensor_dim", ".", "size", "%", "mesh_dim_size", ":", "\n", "    ", "raise", "ValueError", "(", "\"Mesh dimension (%s) must divide tensor dimension (%s)\"", "\n", "%", "(", "mesh_dim_size", ",", "tensor_dim", ")", ")", "\n", "", "return", "tensor_dim", ".", "size", "//", "mesh_dim_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.combined_dimension": [[6536, 6540], ["Dimension", "ValueError", "ops.Shape"], "function", ["None"], ["", "def", "combined_dimension", "(", "dims", ",", "name", "=", "None", ")", ":", "\n", "  ", "if", "not", "dims", ":", "\n", "    ", "raise", "ValueError", "(", "\"dims must be a list of one or more Dimensions\"", ")", "\n", "", "return", "Dimension", "(", "name", "or", "dims", "[", "0", "]", ".", "name", ",", "Shape", "(", "dims", ")", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.serialize_training_step": [[6542, 6636], ["features.values", "Dimension", "Dimension", "ops.while_loop", "len", "zip", "ops.gather", "ops.less", "six.iteritems", "model_fn", "ops.gradients", "model_fn.keys", "ret.append", "model_fn.values", "ret.extend", "ops.replace_dimensions", "ops.serialize_training_step.select"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.while_loop", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.model_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions"], ["", "def", "serialize_training_step", "(", "features", ",", "model_fn", ",", "batch_dim", ",", "num_splits", ")", ":", "\n", "  ", "\"\"\"Break the training batch into multiple microbatches.\n\n  Returns two structures:\n\n  grads - a list of Tensors corresponding to the gradients on\n     graph.trainable_variables.  These are summed across all microbatches\n\n  outputs - a dictionary of Tensors corresponding to the output dictionary of\n     model_fn.   Each value is either summed across all microbatches (if it\n     has no batch-dimension), or concatenated across all microbatches to\n     represent the original batch (if it does have a batch-dimension).\n\n  Args:\n    features: a dictionary of Tensors, each with a batch_dim dimension\n    model_fn: a function from feature dictionary to output dictionary\n      output_dictionary must contain \"loss\"\n    batch_dim: a Dimension\n    num_splits: an integer dividing batch_dim.size\n\n  Returns:\n    grads: a list of Tensors corresponding to the gradients on\n      graph.trainable_variables\n    outputs: dictionary of output Tensors summed across microbatches\n  \"\"\"", "\n", "for", "v", "in", "features", ".", "values", "(", ")", ":", "\n", "    ", "mesh", "=", "v", ".", "mesh", "\n", "graph", "=", "v", ".", "graph", "\n", "", "microbatch_dim", "=", "Dimension", "(", "\"microbatch\"", ",", "num_splits", ")", "\n", "smaller_batch_dim", "=", "Dimension", "(", "batch_dim", ".", "name", ",", "batch_dim", ".", "size", "//", "num_splits", ")", "\n", "cache", "=", "{", "}", "\n", "def", "select", "(", "t", ",", "microbatch_num", ")", ":", "\n", "    ", "return", "gather", "(", "\n", "replace_dimensions", "(", "t", ",", "batch_dim", ",", "[", "smaller_batch_dim", ",", "microbatch_dim", "]", ")", ",", "\n", "microbatch_num", ",", "microbatch_dim", ")", "\n", "", "def", "cond_fn", "(", "microbatch_num", ")", ":", "\n", "    ", "return", "less", "(", "microbatch_num", ",", "num_splits", ")", "\n", "", "def", "body_fn", "(", "microbatch_num", ")", ":", "\n", "    ", "\"\"\"Body function for mtf.while_loop.\n\n    Args:\n      microbatch_num: a mtf Scalar\n    Returns:\n      a list of mtf Tensors\n    \"\"\"", "\n", "my_features", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "features", ")", ":", "\n", "      ", "my_features", "[", "k", "]", "=", "select", "(", "v", ",", "microbatch_num", ")", "\n", "", "outputs", "=", "model_fn", "(", "my_features", ")", "\n", "grads", "=", "gradients", "(", "\n", "[", "outputs", "[", "\"loss\"", "]", "]", ",", "[", "v", ".", "outputs", "[", "0", "]", "for", "v", "in", "graph", ".", "trainable_variables", "]", ")", "\n", "if", "None", "in", "grads", ":", "\n", "      ", "for", "var", ",", "var_grad", "in", "zip", "(", "graph", ".", "trainable_variables", ",", "grads", ")", ":", "\n", "        ", "if", "var_grad", "is", "None", ":", "\n", "          ", "tf", ".", "logging", ".", "error", "(", "\n", "\"None gradient for trainable variable %s.\"", "%", "var", ".", "outputs", "[", "0", "]", ")", "\n", "", "", "raise", "ValueError", "(", "\"Fond trainable variable(s) with None gradient. \"", "\n", "\"Check if there are trainable variables(s) \"", "\n", "\"disconnected from the graph.\"", ")", "\n", "", "output_keys", "=", "outputs", ".", "keys", "(", ")", "\n", "cache", "[", "\"output_keys\"", "]", "=", "output_keys", "\n", "ret", "=", "[", "]", "\n", "ret", ".", "append", "(", "microbatch_num", "+", "1", ")", "\n", "# The rest of the returned values are \"accumulators\" that get summed", "\n", "# across all microbatches.", "\n", "for", "t", "in", "outputs", ".", "values", "(", ")", ":", "\n", "      ", "if", "smaller_batch_dim", "in", "t", ".", "shape", ":", "\n", "# The output contains a batch dimension, so we want to concatenate", "\n", "# across microbatches.", "\n", "# Here we pad the tensor for each microbatch - summing will complete", "\n", "#  the concatenation.", "\n", "        ", "t", "=", "einsum", "(", "\n", "[", "t", ",", "one_hot", "(", "microbatch_num", ",", "microbatch_dim", ",", "dtype", "=", "t", ".", "dtype", ")", "]", ",", "\n", "output_shape", "=", "replace_dimensions", "(", "\n", "t", ".", "shape", ",", "smaller_batch_dim", ",", "\n", "[", "smaller_batch_dim", ",", "microbatch_dim", "]", ")", ")", "\n", "t", "=", "replace_dimensions", "(", "\n", "t", ",", "[", "smaller_batch_dim", ",", "microbatch_dim", "]", ",", "batch_dim", ")", "\n", "ret", ".", "append", "(", "t", ")", "\n", "", "else", ":", "\n", "# There is no batch dimension.  Sum across all microbatches.", "\n", "        ", "ret", ".", "append", "(", "t", ")", "\n", "# we also want to sum the gradients.", "\n", "", "", "ret", ".", "extend", "(", "grads", ")", "\n", "return", "ret", "\n", "", "while_out", "=", "while_loop", "(", "\n", "cond_fn", ",", "body_fn", ",", "[", "constant", "(", "mesh", ",", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "]", ",", "\n", "has_accumulators", "=", "True", ")", "\n", "num_outputs", "=", "len", "(", "cache", "[", "\"output_keys\"", "]", ")", "\n", "combined_outputs", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "zip", "(", "cache", "[", "\"output_keys\"", "]", ",", "while_out", "[", "1", ":", "1", "+", "num_outputs", "]", ")", ":", "\n", "    ", "combined_outputs", "[", "k", "]", "=", "v", "\n", "", "combined_grads", "=", "while_out", "[", "1", "+", "num_outputs", ":", "]", "\n", "return", "combined_grads", ",", "combined_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.nth_largest_element": [[6638, 6655], ["Dimension", "ops.top_k", "ops.gather"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather"], ["", "def", "nth_largest_element", "(", "x", ",", "n", ",", "reduced_dim", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Nth-largest reduction on specified axis.\n\n  Note that n is zero-indexed.\n\n  Args:\n    x: a Tensor\n    n: an integer\n    reduced_dim: a Dimension\n    name: an optional string\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "# Compute the top k=n+1 values, then take the last one.", "\n", "k_dim", "=", "Dimension", "(", "\"_top_k_\"", ",", "n", "+", "1", ")", "\n", "values", ",", "_", "=", "top_k", "(", "x", ",", "reduced_dim", "=", "reduced_dim", ",", "k_dim", "=", "k_dim", ",", "name", "=", "name", ")", "\n", "return", "gather", "(", "values", ",", "n", ",", "k_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.nth_smallest_element": [[6657, 6659], ["ops.nth_largest_element"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.nth_largest_element"], ["", "def", "nth_smallest_element", "(", "x", ",", "n", ",", "reduced_dim", ",", "name", "=", "None", ")", ":", "\n", "  ", "return", "-", "nth_largest_element", "(", "-", "x", ",", "n", ",", "reduced_dim", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pool_tensor_1d": [[6661, 6691], ["Dimension", "Dimension", "ops.replace_dimensions", "reduce_fn"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions"], ["", "def", "pool_tensor_1d", "(", "tensor", ",", "pool_dim", ",", "reduce_fn", "=", "reduce_mean", ",", "pool_size", "=", "2", ")", ":", "\n", "  ", "\"\"\"Apply 1D pooling to a tensor.\n\n  There can be multiple batch dims and other dims. The only constraint is that\n  the pool_size is divisible by the pool_dim.size.\n\n  Here is an example with pool_size = 2 and reduce_fn = reduce_mean.\n  [2, 5, 9, 15] reshape -> [[2, 5], [9, 15]] reduce -> [3.5, 12.0]\n\n  Here is another example with pool_size = 2 and reduce_fn = reduce_first, which\n  selects the first sequence element and drop the rest.\n  [2, 5, 9, 15] reshape -> [[2, 5], [9, 15]] reduce -> [2, 9]\n\n  The input tensor is first reshaped and the reduce function is applied to the\n  temporary dim (`low_dim`).\n\n  Args:\n    tensor: a Tensor with shape [<batch_dims>, length_dim, <other_dims>]\n    pool_dim: a Dimension, the dimension along with to apply pooling.\n    reduce_fn: a callable, a reduce function with a signature `reudce_fn(tensor,\n      reduced_dim)` where reduced_dim is a keyword arg.\n    pool_size: an int specifying the pooling size.\n\n  Returns:\n    a Tensor with shape [<batch_dims>, pooled_length_dim, <other_dims>]\n  \"\"\"", "\n", "high_dim", "=", "Dimension", "(", "pool_dim", ".", "name", ",", "pool_dim", ".", "size", "//", "pool_size", ")", "\n", "low_dim", "=", "Dimension", "(", "\"_low\"", ",", "pool_size", ")", "\n", "reshaped", "=", "replace_dimensions", "(", "tensor", ",", "pool_dim", ",", "[", "high_dim", ",", "low_dim", "]", ")", "\n", "return", "reduce_fn", "(", "reshaped", ",", "reduced_dim", "=", "low_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stride_tensor_1d": [[6693, 6711], ["ops.pool_tensor_1d"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pool_tensor_1d"], ["", "def", "stride_tensor_1d", "(", "tensor", ",", "pool_dim", ",", "pool_size", "=", "2", ")", ":", "\n", "  ", "\"\"\"Apply 1D stride operation to a tensor.\n\n  1D stride operation is a special case of `pool_tensor_1d` with pool_fn =\n  reduce_first, which reduces a tensor to the first element along the\n  `pool_dim`. See the docstring of pool_tensor_1d for more detail and an\n  example.\n\n  Args:\n    tensor: a Tensor with shape [<batch_dims>, length_dim, <other_dims>]\n    pool_dim: a Dimension, the dimension along with to apply pooling.\n    pool_size: an int specifying the pooling size.\n\n  Returns:\n    a Tensor with shape [<batch_dims>, strided_length_dim, <other_dims>]\n  \"\"\"", "\n", "return", "pool_tensor_1d", "(", "\n", "tensor", ",", "pool_dim", ",", "reduce_fn", "=", "reduce_first", ",", "pool_size", "=", "pool_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_first": [[6713, 6729], ["ops.mtf_range", "ops.cast", "ops.reduce_sum", "ops.equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_range", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal"], ["", "def", "reduce_first", "(", "tensor", ",", "reduced_dim", ")", ":", "\n", "  ", "\"\"\"Reduce the tensor to the first element along the `reduce_dim`.\n\n  An example with `reduced_dim` corresponding to the dimension with axis=1\n  [[2, 5], [9, 15]] -> [2, 9]\n\n  Args:\n    tensor: a Tensor with shape [<batch_dims>, length_dim, <other_dims>]\n    reduced_dim: a Dimension, the dimension to be reduced.\n\n  Returns:\n    a Tensor with shape [<batch_dims>, <other_dims>]\n  \"\"\"", "\n", "r", "=", "mtf_range", "(", "tensor", ".", "mesh", ",", "reduced_dim", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "first_element_filter", "=", "cast", "(", "equal", "(", "r", ",", "0", ")", ",", "tensor", ".", "dtype", ")", "\n", "return", "reduce_sum", "(", "tensor", "*", "first_element_filter", ",", "reduced_dim", "=", "reduced_dim", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.__init__": [[73, 79], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "variables", ")", ":", "\n", "    ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_primary_var", "=", "variables", "[", "0", "]", "\n", "self", ".", "_vars", "=", "variables", "\n", "self", ".", "_cached_value", "=", "None", "\n", "self", ".", "_dtype", "=", "variables", "[", "0", "]", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.handle": [[80, 93], ["tpu_variables._enclosing_tpu_context", "_enclosing_tpu_context.get_replicated_var_handle", "_enclosing_tpu_context.get_replicated_var_handle", "inspect.signature"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables._enclosing_tpu_context"], ["", "@", "property", "\n", "def", "handle", "(", "self", ")", ":", "\n", "    ", "tpu_context", "=", "_enclosing_tpu_context", "(", ")", "\n", "if", "tpu_context", "is", "None", ":", "\n", "      ", "return", "self", ".", "_primary_var", ".", "handle", "\n", "\n", "# TODO(adarob): Remove backward-compatibility when TF 2.10 is released.", "\n", "", "if", "'handle_id'", "not", "in", "inspect", ".", "signature", "(", "\n", "tpu_context", ".", "get_replicated_var_handle", ")", ".", "parameters", ":", "\n", "      ", "return", "tpu_context", ".", "get_replicated_var_handle", "(", "\n", "name", "=", "self", ".", "_name", ",", "vars_", "=", "self", ".", "_vars", ")", "\n", "", "return", "tpu_context", ".", "get_replicated_var_handle", "(", "\n", "name", "=", "self", ".", "_name", ",", "handle_id", "=", "self", ".", "_name", ",", "vars_", "=", "self", ".", "_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._assign_dependencies": [[94, 108], ["tensorflow.python.framework.ops.control_dependencies"], "methods", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "_assign_dependencies", "(", "self", ")", ":", "\n", "    ", "\"\"\"Makes assignments depend on the cached value, if any.\n\n    This prevents undefined behavior with reads not ordered wrt writes.\n\n    Yields:\n      None.\n    \"\"\"", "\n", "if", "self", ".", "_cached_value", "is", "not", "None", ":", "\n", "      ", "with", "ops", ".", "control_dependencies", "(", "[", "self", ".", "_cached_value", "]", ")", ":", "\n", "        ", "yield", "\n", "", "", "else", ":", "\n", "      ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.initializer": [[109, 112], ["tensorflow.python.ops.control_flow_ops.group"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "initializer", "(", "self", ")", ":", "\n", "    ", "return", "control_flow_ops", ".", "group", "(", "[", "v", ".", "initializer", "for", "v", "in", "self", ".", "_vars", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.graph": [[113, 116], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "graph", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_primary_var", ".", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._shared_name": [[117, 120], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_shared_name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_common_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._unique_id": [[121, 124], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_unique_id", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_primary_var", ".", "_unique_id", "# pylint: disable=protected-access", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.name": [[125, 128], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.dtype": [[129, 132], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_primary_var", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.shape": [[133, 136], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_primary_var", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.get_shape": [[137, 139], ["tpu_variables.ReplicatedVariable._primary_var.get_shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.get_shape"], ["", "def", "get_shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_primary_var", ".", "get_shape", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.to_proto": [[140, 142], ["tpu_variables.ReplicatedVariable._primary_var.to_proto"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.to_proto"], ["", "def", "to_proto", "(", "self", ",", "export_scope", "=", "None", ")", ":", "\n", "    ", "return", "self", ".", "_primary_var", ".", "to_proto", "(", "export_scope", "=", "export_scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.constraint": [[143, 146], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "constraint", "(", "self", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.op": [[147, 150], ["tpu_variables.ReplicatedVariable.get"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get"], ["", "@", "property", "\n", "def", "op", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "get", "(", ")", ".", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._read_variable_op": [[151, 156], ["tensorflow.python.ops.gen_resource_variable_ops.read_variable_op", "tpu_variables._enclosing_tpu_context", "tpu_variables.ReplicatedVariable._primary_var.read_value"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables._enclosing_tpu_context", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.read_value"], ["", "def", "_read_variable_op", "(", "self", ")", ":", "\n", "    ", "if", "_enclosing_tpu_context", "(", ")", "is", "None", ":", "\n", "      ", "return", "self", ".", "_primary_var", ".", "read_value", "(", ")", "\n", "", "v", "=", "gen_resource_variable_ops", ".", "read_variable_op", "(", "self", ".", "handle", ",", "self", ".", "_dtype", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.read_value": [[157, 159], ["tpu_variables.ReplicatedVariable._read_variable_op"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._read_variable_op"], ["", "def", "read_value", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_read_variable_op", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign": [[160, 169], ["tpu_variables._handle_graph", "tpu_variables.ReplicatedVariable._assign_dependencies", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.ops.gen_resource_variable_ops.assign_variable_op", "tpu_variables.ReplicatedVariable._read_variable_op"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables._handle_graph", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._assign_dependencies", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._read_variable_op"], ["", "def", "assign", "(", "self", ",", "value", ",", "use_locking", "=", "None", ",", "name", "=", "None", ",", "read_value", "=", "False", ")", ":", "\n", "    ", "del", "use_locking", "\n", "with", "_handle_graph", "(", "self", ".", "handle", ")", ",", "self", ".", "_assign_dependencies", "(", ")", ":", "\n", "      ", "value_tensor", "=", "ops", ".", "convert_to_tensor", "(", "value", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "assign_op", "=", "gen_resource_variable_ops", ".", "assign_variable_op", "(", "\n", "self", ".", "handle", ",", "value_tensor", ",", "name", "=", "name", ")", "\n", "", "if", "read_value", ":", "\n", "      ", "return", "self", ".", "_read_variable_op", "(", ")", "\n", "", "return", "assign_op", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign_add": [[170, 180], ["tpu_variables._handle_graph", "tpu_variables.ReplicatedVariable._assign_dependencies", "tensorflow.python.ops.gen_resource_variable_ops.assign_add_variable_op", "tpu_variables.ReplicatedVariable._read_variable_op", "tensorflow.python.framework.ops.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables._handle_graph", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._assign_dependencies", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._read_variable_op"], ["", "def", "assign_add", "(", "self", ",", "delta", ",", "use_locking", "=", "None", ",", "name", "=", "None", ",", "read_value", "=", "True", ")", ":", "\n", "    ", "del", "use_locking", "\n", "with", "_handle_graph", "(", "self", ".", "handle", ")", ",", "self", ".", "_assign_dependencies", "(", ")", ":", "\n", "      ", "assign_add_op", "=", "gen_resource_variable_ops", ".", "assign_add_variable_op", "(", "\n", "self", ".", "handle", ",", "\n", "ops", ".", "convert_to_tensor", "(", "delta", ",", "dtype", "=", "self", ".", "dtype", ")", ",", "\n", "name", "=", "name", ")", "\n", "", "if", "read_value", ":", "\n", "      ", "return", "self", ".", "_read_variable_op", "(", ")", "\n", "", "return", "assign_add_op", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign_sub": [[181, 191], ["tpu_variables._handle_graph", "tpu_variables.ReplicatedVariable._assign_dependencies", "tensorflow.python.ops.gen_resource_variable_ops.assign_sub_variable_op", "tpu_variables.ReplicatedVariable._read_variable_op", "tensorflow.python.framework.ops.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables._handle_graph", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._assign_dependencies", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._read_variable_op"], ["", "def", "assign_sub", "(", "self", ",", "delta", ",", "use_locking", "=", "None", ",", "name", "=", "None", ",", "read_value", "=", "True", ")", ":", "\n", "    ", "del", "use_locking", "\n", "with", "_handle_graph", "(", "self", ".", "handle", ")", ",", "self", ".", "_assign_dependencies", "(", ")", ":", "\n", "      ", "assign_sub_op", "=", "gen_resource_variable_ops", ".", "assign_sub_variable_op", "(", "\n", "self", ".", "handle", ",", "\n", "ops", ".", "convert_to_tensor", "(", "delta", ",", "dtype", "=", "self", ".", "dtype", ")", ",", "\n", "name", "=", "name", ")", "\n", "", "if", "read_value", ":", "\n", "      ", "return", "self", ".", "_read_variable_op", "(", ")", "\n", "", "return", "assign_sub_op", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.get": [[192, 194], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_primary_var", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._in_graph_mode": [[195, 198], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_in_graph_mode", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_primary_var", ".", "_in_graph_mode", "# pylint: disable=protected-access", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._should_act_as_resource_variable": [[199, 202], ["None"], "methods", ["None"], ["", "def", "_should_act_as_resource_variable", "(", "self", ")", ":", "\n", "    ", "\"\"\"Pass resource_variable_ops.is_resource_variable check.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._dense_var_to_tensor": [[203, 218], ["tpu_variables._enclosing_tpu_context", "hasattr", "tpu_variables.ReplicatedVariable.read_value", "tpu_variables.ReplicatedVariable._primary_var._dense_var_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables._enclosing_tpu_context", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.read_value", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._dense_var_to_tensor"], ["", "def", "_dense_var_to_tensor", "(", "self", ",", "dtype", "=", "None", ",", "name", "=", "None", ",", "as_ref", "=", "False", ")", ":", "\n", "    ", "\"\"\"Converts a variable to a tensor.\"\"\"", "\n", "# pylint: disable=protected-access", "\n", "if", "_enclosing_tpu_context", "(", ")", "is", "None", ":", "\n", "      ", "if", "hasattr", "(", "self", ".", "_primary_var", ",", "'_dense_var_to_tensor'", ")", ":", "\n", "        ", "return", "self", ".", "_primary_var", ".", "_dense_var_to_tensor", "(", "dtype", ",", "name", ",", "as_ref", ")", "\n", "", "else", ":", "\n", "        ", "return", "ops", ".", "convert_to_tensor", "(", "self", ".", "_primary_var", ")", "\n", "# pylint: enable=protected-access", "\n", "", "", "if", "dtype", "is", "not", "None", "and", "dtype", "!=", "self", ".", "dtype", ":", "\n", "      ", "return", "NotImplemented", "\n", "", "if", "as_ref", ":", "\n", "      ", "return", "self", ".", "handle", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "read_value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables._handle_graph": [[43, 47], ["handle.graph.as_default"], "function", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "_handle_graph", "(", "handle", ")", ":", "\n", "  ", "with", "handle", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "    ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables._enclosing_tpu_context": [[49, 57], ["tensorflow.python.framework.ops.get_default_graph()._get_control_flow_context", "tensorflow.python.framework.ops.get_default_graph", "isinstance"], "function", ["None"], ["", "", "def", "_enclosing_tpu_context", "(", ")", ":", "\n", "# pylint: disable=protected-access", "\n", "  ", "context", "=", "ops", ".", "get_default_graph", "(", ")", ".", "_get_control_flow_context", "(", ")", "\n", "# pylint: enable=protected-access", "\n", "while", "context", "is", "not", "None", "and", "not", "isinstance", "(", "\n", "context", ",", "control_flow_ops", ".", "XLAControlFlowContext", ")", ":", "\n", "    ", "context", "=", "context", ".", "outer_context", "\n", "", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables._tensor_conversion": [[222, 224], ["var._dense_var_to_tensor"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable._dense_var_to_tensor"], ["", "", "", "def", "_tensor_conversion", "(", "var", ",", "dtype", "=", "None", ",", "name", "=", "None", ",", "as_ref", "=", "False", ")", ":", "\n", "  ", "return", "var", ".", "_dense_var_to_tensor", "(", "dtype", "=", "dtype", ",", "name", "=", "name", ",", "as_ref", "=", "as_ref", ")", "# pylint: disable=protected-access", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.__init__": [[52, 97], ["mesh_tensorflow.ops_with_redefined_builtins.MeshImpl.__init__", "tensorflow.logging.info", "tensorflow.logging.info", "enumerate", "tensorflow.logging.warning", "list", "sorted", "list", "ValueError", "range", "range"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "\n", "shape", ",", "\n", "layout", ",", "\n", "devices", "=", "None", ",", "\n", "device_assignment", "=", "None", ",", "\n", "logical_to_physical", "=", "None", ",", "\n", "allreduce_in_bfloat16_max_group_size", "=", "8", ")", ":", "\n", "    ", "\"\"\"Create a SimdMeshImpl.\n\n    Args:\n      shape: an input to mtf.convert_to_shape()\n      layout: an input to mtf.convert_to_layout_rules()\n      devices: deprecated\n      device_assignment: a tf.tpu.experimental.DeviceAssignment -\n        devices must be asssigned in lexicographic order\n      logical_to_physical: an optional permutation representing the mapping\n        from logical cores to \"physical\" cores, where the physical cores are\n        listed in lexicographic order in the physical mesh, and the logical\n        cores are listed in lexicographic order in the logical mesh.\n        Default is lexicographic order.\n      allreduce_in_bfloat16_max_group_size: an integer.  Allreduces of bfloat16\n        tensors are done in float32 if the group size exceeds this value.\n    \"\"\"", "\n", "super", "(", "SimdMeshImpl", ",", "self", ")", ".", "__init__", "(", "shape", ",", "layout", ")", "\n", "if", "devices", "is", "not", "None", ":", "\n", "      ", "tf", ".", "logging", ".", "warning", "(", "\"SimdMeshImpl ignoring devices %s\"", "%", "devices", ")", "\n", "", "self", ".", "_device_assignment", "=", "device_assignment", "\n", "tf", ".", "logging", ".", "info", "(", "\"SimdMeshImpl init: {0} {1}\"", ".", "format", "(", "shape", ",", "layout", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Device Assignment: {0}\"", ".", "format", "(", "device_assignment", ")", ")", "\n", "if", "logical_to_physical", "is", "None", ":", "\n", "# TODO(noam): maybe use auto_logical_to_physical_tpu() here", "\n", "      ", "logical_to_physical", "=", "list", "(", "range", "(", "self", ".", "size", ")", ")", "\n", "", "if", "sorted", "(", "logical_to_physical", ")", "!=", "list", "(", "range", "(", "self", ".", "size", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"logical_to_physical must be a permutation on range(shape.size)\"", "\n", "\" shape=%s logical_to_physical=%s\"", "%", "(", "shape", ",", "logical_to_physical", ")", ")", "\n", "", "self", ".", "_logical_to_physical", "=", "logical_to_physical", "\n", "self", ".", "_physical_to_logical", "=", "[", "None", "]", "*", "self", ".", "size", "\n", "for", "logical", ",", "physical", "in", "enumerate", "(", "self", ".", "_logical_to_physical", ")", ":", "\n", "      ", "self", ".", "_physical_to_logical", "[", "physical", "]", "=", "logical", "\n", "", "self", ".", "_pnum_tensor", "=", "None", "\n", "self", ".", "graph_device_function_stacks", "=", "[", "]", "\n", "self", ".", "copy_master_to_slice_ops", "=", "[", "]", "\n", "self", ".", "_allreduce_in_bfloat16_max_group_size", "=", "(", "\n", "allreduce_in_bfloat16_max_group_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.pnum_tensor": [[98, 107], ["mesh_tensorflow.utils.outside_all_rewrites", "tensorflow.logging.info", "tensorflow.python.tpu.ops.tpu_ops.tpu_replicated_input"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.outside_all_rewrites"], ["", "@", "property", "\n", "def", "pnum_tensor", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_pnum_tensor", "is", "not", "None", ":", "\n", "      ", "return", "self", ".", "_pnum_tensor", "\n", "", "with", "utils", ".", "outside_all_rewrites", "(", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Create pnum_tensor\"", ")", "\n", "self", ".", "_pnum_tensor", "=", "tpu_ops", ".", "tpu_replicated_input", "(", "\n", "self", ".", "_physical_to_logical", ",", "name", "=", "\"pnum_constants\"", ")", "\n", "return", "self", ".", "_pnum_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.l2p": [[108, 110], ["None"], "methods", ["None"], ["", "", "def", "l2p", "(", "self", ",", "logical_pnum", ")", ":", "\n", "    ", "return", "self", ".", "_logical_to_physical", "[", "logical_pnum", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.p2l": [[111, 113], ["None"], "methods", ["None"], ["", "def", "p2l", "(", "self", ",", "physical_pnum", ")", ":", "\n", "    ", "return", "self", ".", "_physical_to_logical", "[", "physical_pnum", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.laid_out_pnum": [[304, 311], ["simd_mesh_impl.SimdMeshImpl.LaidOutTensor"], "methods", ["None"], ["", "", "def", "laid_out_pnum", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns a LaidOutTensor containing the logical processor number.\n\n    Returns:\n      a LaidOutTensor where each slice is an integer scalar\n    \"\"\"", "\n", "return", "self", ".", "LaidOutTensor", "(", "[", "self", ".", "pnum_tensor", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl._create_group_assignment": [[312, 325], ["six.moves.xrange", "partitioning.items", "mesh_tensorflow.ops_with_redefined_builtins.pnum_to_group", "partitioning[].append", "group_assignment.append", "simd_mesh_impl.SimdMeshImpl.l2p"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pnum_to_group", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.l2p"], ["", "def", "_create_group_assignment", "(", "self", ",", "mesh_axes", ")", ":", "\n", "    ", "\"\"\"Create group assignment for XLA cross replica ops (physical pnums).\"\"\"", "\n", "\n", "partitioning", "=", "{", "}", "\n", "for", "logical_pnum", "in", "xrange", "(", "self", ".", "size", ")", ":", "\n", "      ", "group", "=", "mtf", ".", "pnum_to_group", "(", "self", ".", "shape", ",", "mesh_axes", ",", "logical_pnum", ")", "\n", "if", "group", "not", "in", "partitioning", ":", "\n", "        ", "partitioning", "[", "group", "]", "=", "[", "]", "\n", "", "partitioning", "[", "group", "]", ".", "append", "(", "self", ".", "l2p", "(", "logical_pnum", ")", ")", "\n", "", "group_assignment", "=", "[", "]", "\n", "for", "group", ",", "physical_pnums", "in", "partitioning", ".", "items", "(", ")", ":", "\n", "      ", "group_assignment", ".", "append", "(", "physical_pnums", ")", "\n", "", "return", "group_assignment", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.allreduce": [[326, 366], ["simd_mesh_impl.SimdMeshImpl.to_laid_out_tensor", "simd_mesh_impl.SimdMeshImpl._create_group_assignment", "len", "tensorflow.python.tpu.ops.tpu_ops.cross_replica_sum", "simd_mesh_impl.SimdMeshImpl.LaidOutTensor", "tensorflow.cast", "tensorflow.cast", "simd_mesh_impl.SimdMeshImpl.allconcat", "simd_mesh_impl.SimdMeshImpl.LaidOutTensor", "tensorflow.logging.info", "mesh_tensorflow.ops_with_redefined_builtins.reduction_fn"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl._create_group_assignment", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.allconcat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduction_fn"], ["", "def", "allreduce", "(", "self", ",", "x", ",", "mesh_axes", ",", "reduction_fn_string", ")", ":", "\n", "    ", "\"\"\"Grouped allreduce, (summed across the given dimensions).\n\n    Args:\n      x: a LaidOutTensor\n      mesh_axes: a list of integers\n      reduction_fn_string: \"SUM\"\n    Returns:\n      a LaidOutTensor\n    Raises:\n      ValueError: if the reduction is not yet implemented.\n    \"\"\"", "\n", "if", "not", "mesh_axes", ":", "\n", "      ", "return", "x", "\n", "", "x", "=", "x", ".", "to_laid_out_tensor", "(", ")", "\n", "if", "reduction_fn_string", "==", "\"SUM\"", ":", "\n", "      ", "group_assignment", "=", "self", ".", "_create_group_assignment", "(", "mesh_axes", ")", "\n", "group_size", "=", "len", "(", "group_assignment", "[", "0", "]", ")", "\n", "tf_in", "=", "x", ".", "one_slice", "\n", "dtype", "=", "tf_in", ".", "dtype", "\n", "if", "dtype", "==", "tf", ".", "float32", ":", "\n", "        ", "cast_to_float32", "=", "False", "\n", "", "elif", "dtype", "==", "tf", ".", "bfloat16", ":", "\n", "        ", "cast_to_float32", "=", "(", "\n", "group_size", ">", "self", ".", "_allreduce_in_bfloat16_max_group_size", ")", "\n", "", "else", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"Casting %s to float32 for allreduce\"", "%", "tf_in", ".", "dtype", ")", "\n", "cast_to_float32", "=", "True", "\n", "", "if", "cast_to_float32", ":", "\n", "        ", "tf_in", "=", "tf", ".", "cast", "(", "tf_in", ",", "tf", ".", "float32", ")", "\n", "", "tf_out", "=", "tpu_ops", ".", "cross_replica_sum", "(", "tf_in", ",", "group_assignment", ")", "\n", "if", "cast_to_float32", ":", "\n", "        ", "tf_out", "=", "tf", ".", "cast", "(", "tf_out", ",", "dtype", ")", "\n", "", "return", "self", ".", "LaidOutTensor", "(", "[", "tf_out", "]", ")", "\n", "", "else", ":", "\n", "      ", "for", "axis", "in", "mesh_axes", ":", "\n", "        ", "x", "=", "self", ".", "allconcat", "(", "x", ",", "axis", ",", "0", ",", "stack", "=", "True", ")", "\n", "x", "=", "self", ".", "LaidOutTensor", "(", "\n", "[", "mtf", ".", "reduction_fn", "(", "reduction_fn_string", ")", "(", "x", ".", "one_slice", ",", "0", ")", "]", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.allconcat": [[367, 395], ["x.to_laid_out_tensor.to_laid_out_tensor.to_laid_out_tensor", "simd_mesh_impl.SimdMeshImpl.laid_out_pcoord", "tensorflow.reshape.shape.as_list", "tensorflow.expand_dims", "tensorflow.reshape", "simd_mesh_impl.SimdMeshImpl.allreduce", "tensorflow.one_hot", "tensorflow.reshape", "simd_mesh_impl.SimdMeshImpl.LaidOutTensor", "six.moves.xrange", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_pcoord", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.allreduce", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "", "def", "allconcat", "(", "self", ",", "x", ",", "mesh_axis", ",", "concat_axis", ",", "stack", "=", "False", ")", ":", "\n", "    ", "\"\"\"Grouped allconcat (like MPI allgather followed by concat).\n\n    TODO(noam): inefficient - replace with a XLA allconcat when available\n\n    Args:\n      x: a LaidOutTensor\n      mesh_axis: an integer - the mesh axis along which to group\n      concat_axis: an integer (the Tensor axis along which to concatenate)\n      stack: a boolean - whether to stack instead of concat\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "x", "=", "x", ".", "to_laid_out_tensor", "(", ")", "\n", "coord", "=", "self", ".", "laid_out_pcoord", "(", "mesh_axis", ")", "\n", "t", "=", "x", ".", "one_slice", "\n", "old_shape", "=", "t", ".", "shape", ".", "as_list", "(", ")", "\n", "num_parts", "=", "self", ".", "shape", "[", "mesh_axis", "]", ".", "size", "\n", "t", "=", "tf", ".", "expand_dims", "(", "t", ",", "concat_axis", ")", "\n", "t", "*=", "tf", ".", "reshape", "(", "\n", "tf", ".", "one_hot", "(", "coord", ".", "one_slice", ",", "num_parts", ",", "dtype", "=", "t", ".", "dtype", ")", ",", "\n", "[", "num_parts", "if", "i", "==", "concat_axis", "else", "1", "\n", "for", "i", "in", "xrange", "(", "len", "(", "old_shape", ")", "+", "1", ")", "]", ")", "\n", "if", "not", "stack", ":", "\n", "      ", "new_shape", "=", "old_shape", "[", ":", "]", "\n", "new_shape", "[", "concat_axis", "]", "*=", "num_parts", "\n", "t", "=", "tf", ".", "reshape", "(", "t", ",", "new_shape", ")", "\n", "", "return", "self", ".", "allreduce", "(", "self", ".", "LaidOutTensor", "(", "[", "t", "]", ")", ",", "[", "mesh_axis", "]", ",", "\"SUM\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.alltoall": [[396, 425], ["simd_mesh_impl.SimdMeshImpl.to_laid_out_tensor", "simd_mesh_impl.SimdMeshImpl._create_group_assignment", "tensorflow.python.tpu.ops.tpu_ops.all_to_all", "tensorflow.cast", "simd_mesh_impl.SimdMeshImpl.LaidOutTensor", "tensorflow.to_bfloat16", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl._create_group_assignment", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_bfloat16"], ["", "def", "alltoall", "(", "self", ",", "x", ",", "mesh_axis", ",", "split_axis", ",", "concat_axis", ")", ":", "\n", "    ", "\"\"\"Grouped alltoall (like MPI alltoall with splitting and concatenation).\n\n    Args:\n      x: a LaidOutTensor\n      mesh_axis: an integer the mesh axis along which to group\n      split_axis: an integer (the Tensor axis along which to split)\n      concat_axis: an integer (the Tensor axis along which to concatenate)\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "x", "=", "x", ".", "to_laid_out_tensor", "(", ")", "\n", "t", "=", "x", ".", "one_slice", "\n", "group_assignment", "=", "self", ".", "_create_group_assignment", "(", "[", "mesh_axis", "]", ")", "\n", "dtype", "=", "t", ".", "dtype", "\n", "if", "dtype", "==", "tf", ".", "float32", ":", "\n", "# There seems to be a bug with float32 alltoall.", "\n", "# Do it in bfloat16 until the bug is fixed.", "\n", "# TODO(noam): file a bug", "\n", "      ", "t", "=", "tf", ".", "to_bfloat16", "(", "t", ")", "\n", "", "t", "=", "tpu_ops", ".", "all_to_all", "(", "\n", "t", ",", "\n", "concat_dimension", "=", "concat_axis", ",", "\n", "split_dimension", "=", "split_axis", ",", "\n", "split_count", "=", "len", "(", "group_assignment", "[", "0", "]", ")", ",", "\n", "group_assignment", "=", "group_assignment", ")", "\n", "t", "=", "tf", ".", "cast", "(", "t", ",", "dtype", ")", "\n", "x", "=", "self", ".", "LaidOutTensor", "(", "[", "t", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.receive": [[426, 472], ["x.to_laid_out_tensor.to_laid_out_tensor.to_laid_out_tensor", "six.moves.xrange", "simd_mesh_impl.SimdMeshImpl.LaidOutTensor", "mesh_tensorflow.ops_with_redefined_builtins.pnum_to_processor_coordinates", "tensorflow.zeros_like", "mesh_tensorflow.ops_with_redefined_builtins.processor_coordinates_to_pnum", "source_target_pairs.append", "tensorflow.python.tpu.ops.tpu_ops.collective_permute", "tensorflow.cast", "tensorflow.python.tpu.ops.tpu_ops.collective_permute", "simd_mesh_impl.SimdMeshImpl.l2p", "simd_mesh_impl.SimdMeshImpl.l2p", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pnum_to_processor_coordinates", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.processor_coordinates_to_pnum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.l2p", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.l2p", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "receive", "(", "self", ",", "x", ",", "mesh_axis", ",", "source_pcoord", ")", ":", "\n", "    ", "\"\"\"Collective receive in groups.\n\n    Each group contains the processors that differ only in mesh_axis.\n\n    ```python\n    group_size = self.shape[mesh_axis].size\n    ```\n\n    Args:\n      x: a LaidOutTensor\n      mesh_axis: an integer\n      source_pcoord: a list of optional integers. Each element is either None\n        or an integer in [0, group_size). If source_pcoord[k] is None, then the\n        output for the k-th processor in each group is a zero tensor. If\n        source_pcoord[k] is not None, then the output for the k-th processor in\n        each group is equal to the input for the source_pcoord[k]-th processor\n        in that group.\n\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "x", "=", "x", ".", "to_laid_out_tensor", "(", ")", "\n", "t", "=", "x", ".", "one_slice", "\n", "source_target_pairs", "=", "[", "]", "\n", "\n", "for", "pnum", "in", "xrange", "(", "self", ".", "size", ")", ":", "\n", "      ", "coord", "=", "mtf", ".", "pnum_to_processor_coordinates", "(", "self", ".", "shape", ",", "pnum", ")", "\n", "k", "=", "coord", "[", "mesh_axis", "]", "\n", "if", "source_pcoord", "[", "k", "]", "is", "not", "None", ":", "\n", "        ", "coord", "[", "mesh_axis", "]", "=", "source_pcoord", "[", "k", "]", "\n", "source_pnum", "=", "mtf", ".", "processor_coordinates_to_pnum", "(", "self", ".", "shape", ",", "coord", ")", "\n", "source_target_pairs", ".", "append", "(", "\n", "[", "self", ".", "l2p", "(", "source_pnum", ")", ",", "\n", "self", ".", "l2p", "(", "pnum", ")", "]", ")", "\n", "\n", "", "", "if", "not", "source_target_pairs", ":", "\n", "      ", "ret", "=", "tf", ".", "zeros_like", "(", "t", ",", "t", ".", "dtype", ")", "\n", "", "elif", "t", ".", "dtype", "in", "[", "tf", ".", "float32", ",", "tf", ".", "bfloat16", ",", "tf", ".", "int32", "]", ":", "\n", "      ", "ret", "=", "tpu_ops", ".", "collective_permute", "(", "t", ",", "source_target_pairs", ")", "\n", "", "else", ":", "\n", "# If t is not one of the allowed types, cast and cast back.", "\n", "      ", "ret", "=", "tf", ".", "cast", "(", "tpu_ops", ".", "collective_permute", "(", "\n", "tf", ".", "cast", "(", "t", ",", "tf", ".", "float32", ")", ",", "source_target_pairs", ")", ",", "t", ".", "dtype", ")", "\n", "\n", "", "return", "self", ".", "LaidOutTensor", "(", "[", "ret", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice": [[473, 489], ["simd_mesh_impl.SimdMeshImpl.tensor_layout", "simd_mesh_impl.SimdMeshImpl.LaidOutTensor", "simd_mesh_impl.SimdMeshImpl.slice_shape", "tensorflow.stack", "tensorflow.gather", "simd_mesh_impl.SimdMeshImpl.LaidOutTensor", "simd_mesh_impl.SimdMeshImpl.slice_begin", "six.moves.xrange", "tensorflow.slice"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slice_begin", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice"], ["", "def", "slice", "(", "self", ",", "tf_tensor", ",", "tensor_shape", ")", ":", "\n", "    ", "\"\"\"\"Slice out the corresponding part of tensor given the pnum variable.\"\"\"", "\n", "tensor_layout", "=", "self", ".", "tensor_layout", "(", "tensor_shape", ")", "\n", "\n", "if", "tensor_layout", ".", "is_fully_replicated", ":", "\n", "      ", "return", "self", ".", "LaidOutTensor", "(", "[", "tf_tensor", "]", ")", "\n", "", "else", ":", "\n", "      ", "slice_shape", "=", "self", ".", "slice_shape", "(", "tensor_shape", ")", "\n", "slice_begins", "=", "[", "\n", "self", ".", "slice_begin", "(", "tensor_shape", ",", "pnum", ")", "for", "pnum", "in", "xrange", "(", "self", ".", "size", ")", "\n", "]", "\n", "slice_begins_tensor", "=", "tf", ".", "stack", "(", "slice_begins", ")", "\n", "# slice on source device", "\n", "selected_slice_begin", "=", "tf", ".", "gather", "(", "slice_begins_tensor", ",", "self", ".", "pnum_tensor", ")", "\n", "return", "self", ".", "LaidOutTensor", "(", "\n", "[", "tf", ".", "slice", "(", "tf_tensor", ",", "selected_slice_begin", ",", "slice_shape", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slicewise": [[490, 509], ["mesh_tensorflow.ops_with_redefined_builtins.convert_args_to_laid_out_tensors", "fn", "isinstance", "tuple", "simd_mesh_impl.SimdMeshImpl.LaidOutTensor", "simd_mesh_impl.SimdMeshImpl.LaidOutTensor", "isinstance"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_args_to_laid_out_tensors"], ["", "", "def", "slicewise", "(", "self", ",", "fn", ",", "*", "inputs", ")", ":", "\n", "    ", "\"\"\"Execute a function in parallel on all slices.\n\n    Args:\n      fn: a function from tf.Tensors to tf.Tensor or a tuple of tf.Tensors.\n      *inputs: a list of inputs.  Each input is either a LaidOutTensor or\n        is convertible to a tf.Tensor.\n    Returns:\n      a LaidOutTensor, or a tuple of LaidOutTensors if fn returns a tuple.\n    \"\"\"", "\n", "# convert all inputs to LaidOutTensor where possible", "\n", "inputs", "=", "mtf", ".", "convert_args_to_laid_out_tensors", "(", "inputs", ")", "\n", "ret", "=", "fn", "(", "*", "[", "\n", "x", ".", "one_slice", "if", "isinstance", "(", "x", ",", "self", ".", "LaidOutTensor", ")", "else", "x", "\n", "for", "x", "in", "inputs", "]", ")", "\n", "if", "isinstance", "(", "ret", ",", "tuple", ")", ":", "\n", "      ", "return", "tuple", "(", "[", "self", ".", "LaidOutTensor", "(", "[", "t", "]", ")", "for", "t", "in", "ret", "]", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "LaidOutTensor", "(", "[", "ret", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.device_assignment": [[510, 513], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "device_assignment", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_device_assignment", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.devices": [[514, 517], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "devices", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_devices", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.random": [[518, 547], ["simd_mesh_impl.SimdMeshImpl.slice_shape", "tf_fn", "simd_mesh_impl.SimdMeshImpl.tensor_layout", "simd_mesh_impl.SimdMeshImpl.LaidOutTensor", "simd_mesh_impl.SimdMeshImpl.allreduce", "tensorflow.cast", "six.moves.xrange", "tensorflow.equal", "simd_mesh_impl.SimdMeshImpl.laid_out_pcoord"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.allreduce", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.laid_out_pcoord"], ["", "def", "random", "(", "self", ",", "shape", ",", "tf_fn", ",", "kwargs", ")", ":", "\n", "    ", "\"\"\"Call a random tf operation (e.g. random_uniform).\n\n    Args:\n      shape: a Shape\n      tf_fn: a function such as tf.random.uniform\n      kwargs: kwargs to pass to tf_fn, except for seed\n\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "# TODO(noam): can we make things better with stateless_random?", "\n", "slice_shape", "=", "self", ".", "slice_shape", "(", "shape", ")", "\n", "x", "=", "tf_fn", "(", "slice_shape", ",", "**", "kwargs", ")", "\n", "# TPU does not have seeds enabled.  Sync up the", "\n", "# random choices by zeroing out all but the first core per group of", "\n", "# identical slices, then allreducing by group.", "\n", "layout", "=", "self", ".", "tensor_layout", "(", "shape", ")", "\n", "# we need to sync across these axes.", "\n", "mesh_axes", "=", "[", "i", "for", "i", "in", "xrange", "(", "self", ".", "ndims", ")", "\n", "if", "i", "not", "in", "layout", ".", "tensor_axis_to_mesh_axis", "]", "\n", "multiplier", "=", "1.0", "\n", "for", "axis", "in", "mesh_axes", ":", "\n", "      ", "multiplier", "*=", "tf", ".", "cast", "(", "\n", "tf", ".", "equal", "(", "self", ".", "laid_out_pcoord", "(", "axis", ")", ".", "one_slice", ",", "0", ")", ",", "x", ".", "dtype", ")", "\n", "", "x", "*=", "multiplier", "\n", "x", "=", "self", ".", "LaidOutTensor", "(", "[", "x", "]", ")", "\n", "x", "=", "self", ".", "allreduce", "(", "x", ",", "mesh_axes", ",", "\"SUM\"", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.export_to_tf_tensor": [[548, 565], ["simd_mesh_impl.SimdMeshImpl.tensor_layout", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_layout"], ["", "def", "export_to_tf_tensor", "(", "self", ",", "x", ",", "laid_out_x", ")", ":", "\n", "    ", "\"\"\"Turn a Tensor into a tf.Tensor.\n\n    Args:\n      x: a Tensor\n      laid_out_x: a LaidOutTensor\n    Returns:\n      a tf.Tensor\n    \"\"\"", "\n", "tensor_layout", "=", "self", ".", "tensor_layout", "(", "x", ".", "shape", ")", "\n", "if", "not", "tensor_layout", ".", "is_fully_replicated", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\n", "\"SimdMeshImpl only supports export_to_tf_tensor of fully-replicated \"", "\n", "\"Tensors.  Try reshaping to new dimension names. \"", "\n", "\" x.shape = %s tensor_layout=%s\"", "\n", "%", "(", "x", ".", "shape", ",", "tensor_layout", ")", ")", "\n", "", "return", "laid_out_x", ".", "one_slice", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.import_tf_tensor": [[566, 576], ["simd_mesh_impl.SimdMeshImpl.slice"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice"], ["", "def", "import_tf_tensor", "(", "self", ",", "x", ",", "tf_x", ")", ":", "\n", "    ", "\"\"\"Import a tf.Tensor, producing a LaidOutTensor.\n\n    Args:\n      x: a Tensor\n      tf_x: a tf.Tensor\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "return", "self", ".", "slice", "(", "tf_x", ",", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.supports_control_dependencies": [[577, 580], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_control_dependencies", "(", "self", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum": [[581, 591], ["tensorflow.einsum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "einsum", "(", "self", ",", "equation", ",", "*", "slices", ")", ":", "\n", "    ", "\"\"\"Override this for custom einsum implementation.\n\n    Args:\n      equation: a string\n      *slices: a list of tf.Tensor\n    Returns:\n      a tf.Tensor\n    \"\"\"", "\n", "return", "tf", ".", "einsum", "(", "equation", ",", "*", "slices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.HierarchicalTiling.__init__": [[748, 796], ["len", "len", "reversed", "sizes_and_strides.reverse", "simd_mesh_impl._logical_to_physical_v1", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "list", "sizes_and_strides.append", "enumerate", "ValueError", "mesh_tensorflow.ops_with_redefined_builtins.processor_coordinates_to_pnum", "enumerate", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl._logical_to_physical_v1", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.processor_coordinates_to_pnum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product"], ["def", "__init__", "(", "self", ",", "spec", ",", "physical_shape", ")", ":", "\n", "    ", "\"\"\"Constructs a HierarchicalTiling.\n\n    spec is a list corresponding to the logical dimensions.\n\n    spec[i] corresponds to the i-th logical dimension and consists of a name\n      and a list of integers, the list being the shape of logical axis i when\n      it is physically projected to the physical mesh and then compacted.\n\n    Striding information is omitted.  By convention, the earlier dimensions\n      get more strided. so the axis corresponding to the last dimension always\n      gets projected to the tile specified by its shape.\n\n    Args:\n      spec: a list of (string, list-of-integers) pairs\n      physical_shape: a list of integers\n    \"\"\"", "\n", "self", ".", "_names", "=", "[", "p", "[", "0", "]", "for", "p", "in", "spec", "]", "\n", "logical_ndims", "=", "len", "(", "spec", ")", "\n", "physical_ndims", "=", "len", "(", "physical_shape", ")", "\n", "projected_shapes", "=", "[", "p", "[", "1", "]", "for", "p", "in", "spec", "]", "\n", "if", "logical_ndims", ">", "0", "and", "projected_shapes", "[", "0", "]", "is", "None", ":", "\n", "# fill in missing value", "\n", "      ", "projected_shapes", "[", "0", "]", "=", "list", "(", "physical_shape", ")", "\n", "for", "s", "in", "projected_shapes", "[", "1", ":", "]", ":", "\n", "        ", "for", "i", ",", "x", "in", "enumerate", "(", "s", ")", ":", "\n", "          ", "projected_shapes", "[", "0", "]", "[", "i", "]", "//=", "x", "\n", "# compute strides, and verify that the spec is valid.", "\n", "", "", "", "products", "=", "[", "1", "]", "*", "physical_ndims", "\n", "sizes_and_strides", "=", "[", "]", "\n", "for", "s", "in", "reversed", "(", "projected_shapes", ")", ":", "\n", "      ", "sizes_and_strides", ".", "append", "(", "\n", "[", "(", "size", ",", "stride", ")", "for", "size", ",", "stride", "in", "zip", "(", "s", ",", "products", ")", "]", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "s", ")", ":", "\n", "        ", "products", "[", "i", "]", "*=", "x", "\n", "", "", "if", "products", "!=", "physical_shape", ":", "\n", "      ", "raise", "ValueError", "(", "\"mesh spec multiplies to the wrong size\"", "\n", "\"spec=%s physical_shape=%s products=%s\"", "%", "\n", "(", "spec", ",", "physical_shape", ",", "products", ")", ")", "\n", "", "sizes_and_strides", ".", "reverse", "(", ")", "\n", "self", ".", "_physical_coordinates", "=", "_logical_to_physical_v1", "(", "\n", "sizes_and_strides", ",", "physical_shape", ")", "\n", "self", ".", "_logical_to_physical", "=", "[", "\n", "mtf", ".", "processor_coordinates_to_pnum", "(", "physical_shape", ",", "c", ")", "\n", "for", "c", "in", "self", ".", "_physical_coordinates", "]", "\n", "self", ".", "_mesh_shape", "=", "mtf", ".", "Shape", "(", "\n", "[", "mtf", ".", "Dimension", "(", "name", ",", "mtf", ".", "list_product", "(", "s", ")", ")", "\n", "for", "name", ",", "s", "in", "zip", "(", "self", ".", "_names", ",", "projected_shapes", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.HierarchicalTiling.logical_to_physical": [[797, 801], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "logical_to_physical", "(", "self", ")", ":", "\n", "    ", "\"\"\"List of physical processor numbers.\"\"\"", "\n", "return", "list", "(", "self", ".", "_logical_to_physical", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.HierarchicalTiling.mesh_shape": [[802, 805], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mesh_shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_mesh_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.HierarchicalTiling.spec_to_mesh_shape": [[806, 831], ["len", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "ValueError", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "zip"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product"], ["", "@", "classmethod", "\n", "def", "spec_to_mesh_shape", "(", "cls", ",", "spec", ",", "num_processors", ")", ":", "\n", "    ", "\"\"\"Compute mesh shape even without knowing the physical shape.\n\n    This is useful in cases where the mesh shape must be computed before\n    you know the physical_shape.\n\n    Args:\n      spec: a list of (string, list-of-integers) pairs\n      num_processors: an integer\n    Returns:\n      a mtf.Shape\n    \"\"\"", "\n", "logical_ndims", "=", "len", "(", "spec", ")", "\n", "names", "=", "[", "p", "[", "0", "]", "for", "p", "in", "spec", "]", "\n", "sizes", "=", "[", "p", "[", "1", "]", "for", "p", "in", "spec", "]", "\n", "sizes", "=", "[", "None", "if", "s", "is", "None", "else", "mtf", ".", "list_product", "(", "s", ")", "for", "s", "in", "sizes", "]", "\n", "if", "logical_ndims", ">", "0", "and", "sizes", "[", "0", "]", "is", "None", ":", "\n", "      ", "sizes", "[", "0", "]", "=", "num_processors", "//", "mtf", ".", "list_product", "(", "sizes", "[", "1", ":", "]", ")", "\n", "", "if", "mtf", ".", "list_product", "(", "sizes", ")", "!=", "num_processors", ":", "\n", "      ", "raise", "ValueError", "(", "\"product of spec must be num_processors\"", "\n", "\" spec=%s num_processors=%s\"", "\n", "%", "(", "spec", ",", "num_processors", ")", ")", "\n", "", "return", "mtf", ".", "Shape", "(", "\n", "[", "mtf", ".", "Dimension", "(", "name", ",", "s", ")", "for", "name", ",", "s", "in", "zip", "(", "names", ",", "sizes", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl._ring_2d": [[593, 628], ["range", "range", "tensorflow.logging.warning", "range", "range", "ret.append", "ret.append", "ret.append", "range", "range", "range"], "function", ["None"], ["", "", "def", "_ring_2d", "(", "m", ",", "n", ")", ":", "\n", "  ", "\"\"\"Ring-order of a mxn mesh.\n\n  If m and n are both even, then we generate a ring like this:\n\n     0 -- 1 -- 2 -- 3\n     |    |    |    |\n     15-- 6 -- 5 -- 4\n     |    |    |    |\n     14-- 7 -- 8 -- 9\n     |    |    |    |\n     13-- 12-- 11-- 10\n\n  Args:\n    m: an integer\n    n: an integer\n  Returns:\n    a list of mxn pairs\n  \"\"\"", "\n", "if", "m", "==", "1", ":", "\n", "    ", "return", "[", "(", "0", ",", "i", ")", "for", "i", "in", "range", "(", "n", ")", "]", "\n", "", "if", "n", "==", "1", ":", "\n", "    ", "return", "[", "(", "i", ",", "0", ")", "for", "i", "in", "range", "(", "m", ")", "]", "\n", "", "if", "m", "%", "2", "!=", "0", ":", "\n", "    ", "tf", ".", "logging", ".", "warning", "(", "\"Odd dimension\"", ")", "\n", "return", "[", "(", "i", "%", "m", ",", "i", "//", "m", ")", "for", "i", "in", "range", "(", "n", "*", "m", ")", "]", "\n", "", "ret", "=", "[", "(", "0", ",", "0", ")", "]", "\n", "for", "i", "in", "range", "(", "m", "//", "2", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "      ", "ret", ".", "append", "(", "(", "2", "*", "i", ",", "j", ")", ")", "\n", "", "for", "j", "in", "range", "(", "n", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "      ", "ret", ".", "append", "(", "(", "2", "*", "i", "+", "1", ",", "j", ")", ")", "\n", "", "", "for", "i", "in", "range", "(", "m", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "    ", "ret", ".", "append", "(", "(", "i", ",", "0", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl._logical_1d_to_physical_subspace_auto": [[630, 673], ["len", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "simd_mesh_impl._ring_2d", "range", "mesh_tensorflow.ops_with_redefined_builtins.pnum_to_processor_coordinates", "ret.append", "mesh_tensorflow.ops_with_redefined_builtins.pnum_to_processor_coordinates", "range", "zip", "list"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl._ring_2d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pnum_to_processor_coordinates", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pnum_to_processor_coordinates"], ["", "def", "_logical_1d_to_physical_subspace_auto", "(", "sizes_and_strides", ",", "physical_shape", ")", ":", "\n", "  ", "\"\"\"Maps logical 1d mesh to subspace of physical nd mesh.\n\n  We are mapping a 1d logical mesh to a subspace (a strided slice containing the\n  origin) of a n-dimensional physical mesh.\n\n  output[i] contains the coordinate-tuple in the physical mesh for the i-th\n  logical processor.\n\n  sizes_and_strides is a list of (size, stride) pairs specifying the dimensions\n  of the strided slice. For example,\n    sizes_and_strides=[(2, 16), (4, 1)] would represent the slice containing\n    [(0, 0), (0, 1), (0, 2), (0, 3),\n     (16, 0), (16, 1), (16, 2), (16, 3)]\n\n  This function heuristically picks an order, with the goal of optimizing\n  allreduce performance.\n\n  Args:\n    sizes_and_strides: a list of n (size, stride) pairs\n    physical_shape: ignored\n  Returns:\n    a list of coordinate-lists\n  \"\"\"", "\n", "del", "physical_shape", "\n", "ndims", "=", "len", "(", "sizes_and_strides", ")", "\n", "sizes", "=", "[", "p", "[", "0", "]", "for", "p", "in", "sizes_and_strides", "]", "\n", "strides", "=", "[", "p", "[", "1", "]", "for", "p", "in", "sizes_and_strides", "]", "\n", "n", "=", "mtf", ".", "list_product", "(", "sizes", ")", "\n", "if", "ndims", ">=", "2", "and", "sizes", "[", "0", "]", ">", "1", "and", "sizes", "[", "1", "]", ">", "1", ":", "\n", "    ", "ring", "=", "_ring_2d", "(", "sizes", "[", "0", "]", ",", "sizes", "[", "1", "]", ")", "\n", "ret", "=", "[", "]", "\n", "sizes_combined", "=", "[", "sizes", "[", "0", "]", "*", "sizes", "[", "1", "]", "]", "+", "sizes", "[", "2", ":", "]", "\n", "for", "logical_pnum", "in", "range", "(", "n", ")", ":", "\n", "      ", "logical_coord", "=", "mtf", ".", "pnum_to_processor_coordinates", "(", "\n", "sizes_combined", ",", "logical_pnum", ")", "\n", "ret", ".", "append", "(", "list", "(", "ring", "[", "logical_coord", "[", "0", "]", "]", ")", "+", "logical_coord", "[", "1", ":", "]", ")", "\n", "", "", "else", ":", "\n", "    ", "ret", "=", "[", "mtf", ".", "pnum_to_processor_coordinates", "(", "sizes", ",", "logical_pnum", ")", "\n", "for", "logical_pnum", "in", "range", "(", "n", ")", "]", "\n", "# multiply by strides", "\n", "", "ret", "=", "[", "[", "x", "*", "stride", "for", "x", ",", "stride", "in", "zip", "(", "pcoord", ",", "strides", ")", "]", "for", "pcoord", "in", "ret", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl._logical_to_physical_v1": [[675, 743], ["len", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "tensorflow.logging.info", "tensorflow.logging.info", "enumerate", "range", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "ValueError", "fn_1d", "tensorflow.logging.info", "mesh_tensorflow.ops_with_redefined_builtins.pnum_to_processor_coordinates", "enumerate", "ret.append", "mesh_tensorflow.ops_with_redefined_builtins.processor_coordinates_to_pnum", "sorted", "list", "ValueError", "range", "range"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pnum_to_processor_coordinates", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.processor_coordinates_to_pnum"], ["", "def", "_logical_to_physical_v1", "(", "\n", "sizes_and_strides", ",", "physical_shape", ",", "\n", "fn_1d", "=", "_logical_1d_to_physical_subspace_auto", ")", ":", "\n", "  ", "\"\"\"Maps logical m-dimensional mesh to physical n-dimensional mesh.\n\n  Also see comments to _logical_1d_to_physical_subspace_auto.\n\n  We are mapping a m-dimensonal logical mesh to a n-dimensional physical mesh.\n\n  output[i] contains the coordinate-tuple in the physical mesh for the i-th\n  logical processor (if the logical processors are ordered lexicographically).\n\n  sizes_and_strides is a list of m lists of n (size, stride) pairs.\n\n  sizes_and_strides[i] specifies the subspace (strided slice containing the\n  origin) of the physical mesh covered by axis i of the logical mesh.  See\n  comments to _logical_1d_to_physical_subspace_auto for more detail.\n\n  For example, say we have a physical mesh with shape [4, 4, 2] and a logical\n  mesh with shape [4, 8].  We want to divide the physical mesh into 4 tiles,\n  each with shape [2, 2, 2].  The first logical dimension corresponds to which\n  tile, and the second logical dimension corresponds to position within a tile.\n  This would correspond to:\n     physical_shape=[4, 4, 2]\n     sizes_and_strides=[[(2, 2), (2, 2), (1, 2)], [(2, 1), (2, 1), (2, 1)]]\n\n  physical_shape can be inferred from sizes_and_strides, but is passed in for\n  error checking.\n\n  Args:\n    sizes_and_strides: a list of m list of n (size, stride) pairs\n    physical_shape: a list of integers\n    fn_1d: a function like _logical_1d_to_physical_subspace_auto\n  Returns:\n    a list of coordinate-lists\n  \"\"\"", "\n", "pndims", "=", "len", "(", "physical_shape", ")", "\n", "logical_shape", "=", "[", "\n", "mtf", ".", "list_product", "(", "[", "p", "[", "0", "]", "for", "p", "in", "l", "]", ")", "for", "l", "in", "sizes_and_strides", "]", "\n", "n", "=", "mtf", ".", "list_product", "(", "physical_shape", ")", "\n", "if", "n", "!=", "mtf", ".", "list_product", "(", "logical_shape", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"logical size and physical size must match \"", "\n", "\"- got sizes_and_strides=%s physical_shape=%s\"", "\n", "%", "(", "sizes_and_strides", ",", "physical_shape", ")", ")", "\n", "", "dimension_layouts", "=", "[", "fn_1d", "(", "l", ",", "physical_shape", ")", "for", "l", "in", "sizes_and_strides", "]", "\n", "tf", ".", "logging", ".", "info", "(", "\"physical_shape: %s\"", "%", "physical_shape", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"sizes_and_strides: %s\"", "%", "sizes_and_strides", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "dimension_layouts", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"dimension_layout %s: %s\"", "%", "(", "i", ",", "l", ")", ")", "\n", "", "ret", "=", "[", "]", "\n", "for", "logical_pnum", "in", "range", "(", "n", ")", ":", "\n", "    ", "logical_coordinates", "=", "mtf", ".", "pnum_to_processor_coordinates", "(", "\n", "logical_shape", ",", "logical_pnum", ")", "\n", "physical_coordinates", "=", "[", "0", "]", "*", "pndims", "\n", "for", "logical_axis", ",", "logical_coord", "in", "enumerate", "(", "logical_coordinates", ")", ":", "\n", "      ", "for", "physical_axis", "in", "range", "(", "pndims", ")", ":", "\n", "        ", "physical_coordinates", "[", "physical_axis", "]", "+=", "(", "\n", "dimension_layouts", "[", "logical_axis", "]", "[", "logical_coord", "]", "[", "physical_axis", "]", ")", "\n", "", "", "ret", ".", "append", "(", "physical_coordinates", ")", "\n", "# verify that we have indeed covered all the processors", "\n", "", "l2p", "=", "[", "mtf", ".", "processor_coordinates_to_pnum", "(", "physical_shape", ",", "c", ")", "for", "c", "in", "ret", "]", "\n", "if", "sorted", "(", "l2p", ")", "!=", "list", "(", "range", "(", "n", ")", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"logical_to_physical produced something that was not a permutation.\"", "\n", "\" sizes_and_strides=%s physical_shape=%s ret=%s\"", "\n", "%", "(", "sizes_and_strides", ",", "physical_shape", ",", "ret", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.physical_shape_3d_from_topology_proto_4d": [[833, 846], ["len", "ValueError"], "function", ["None"], ["", "", "def", "physical_shape_3d_from_topology_proto_4d", "(", "mesh_shape", ")", ":", "\n", "  ", "\"\"\"Convert a 4d shape that we get from TPU estimator to a 3d shape.\n\n  Args:\n    mesh_shape: a list of length 4\n  Returns:\n    a list of length 3\n  \"\"\"", "\n", "if", "len", "(", "mesh_shape", ")", "!=", "4", ":", "\n", "    ", "raise", "ValueError", "(", "\"Expected a 4d shape [x, y, z, core]\"", ")", "\n", "", "return", "[", "mesh_shape", "[", "0", "]", "*", "\n", "mesh_shape", "[", "1", "]", ",", "mesh_shape", "[", "2", "]", ",", "mesh_shape", "[", "3", "]", "]", "if", "FLAGS", ".", "fold_xy", "else", "[", "\n", "mesh_shape", "[", "1", "]", "*", "mesh_shape", "[", "2", "]", ",", "mesh_shape", "[", "0", "]", ",", "mesh_shape", "[", "3", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.auto_logical_to_physical_tpu": [[849, 973], ["tensorflow.logging.info", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "tensorflow.logging.info", "len", "simd_mesh_impl.physical_shape_3d_from_topology_proto_4d", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "ValueError", "list", "len", "tensorflow.logging.warning", "simd_mesh_impl.auto_logical_to_physical_tpu._default_value"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.physical_shape_3d_from_topology_proto_4d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product"], ["", "def", "auto_logical_to_physical_tpu", "(", "logical_shape", ",", "\n", "physical_shape", ",", "\n", "return_coordinates", "=", "False", ",", "\n", "device_assignment", "=", "None", ")", ":", "\n", "  ", "\"\"\"Set up a mapping from logical to physical cores for TPU.\n\n  We will try to set up a mapping so that allreduce operations are relatively\n  fast, prioritizing the later dimensions in the mesh_shape.\n\n  Example:\n\n  auto_logical_to_physical_tpu(\n    logical_shape=[16, 8], physical_shape=[8, 8, 1, 2])\n\n  Heuristics in this function subject to change.\n\n  Args:\n    logical_shape: a list of integers\n    physical_shape: a list of integers - typically [X, Y, 1, cores]\n    return_coordinates: a boolean - return a list of integer lists (coordinates)\n       instead of a list of processor indices\n    device_assignment:  the tpu logical to physical device assignment\n\n  Returns:\n    logical_to_physical: a permutation of range(product(physical_shape)))\n  \"\"\"", "\n", "# Convert physical shape to 3d", "\n", "if", "len", "(", "physical_shape", ")", "==", "4", ":", "\n", "    ", "physical_shape", "=", "physical_shape_3d_from_topology_proto_4d", "(", "physical_shape", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"auto_logical_to_physical_tpu \"", "\n", "\"logical_shape=%s physical_shape=%s\"", "%", "\n", "(", "logical_shape", ",", "physical_shape", ")", ")", "\n", "if", "mtf", ".", "list_product", "(", "logical_shape", ")", "!=", "mtf", ".", "list_product", "(", "physical_shape", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"physical and logical shapes must have the same product \"", "\n", "\"physical_shape=%s logical_shape=%s\"", "%", "(", "physical_shape", ",", "logical_shape", ")", ")", "\n", "# drop logical dimensions of size 1", "\n", "", "logical_shape", "=", "[", "i", "for", "i", "in", "logical_shape", "if", "i", "!=", "1", "]", "\n", "num_cores", "=", "mtf", ".", "list_product", "(", "logical_shape", ")", "\n", "# For physical shapes different from what we are used to [2^a, 2^b, 2],", "\n", "#   return a simple default value (a lexicographic ordering)", "\n", "def", "_default_value", "(", ")", ":", "\n", "    ", "default", "=", "list", "(", "range", "(", "num_cores", ")", ")", "\n", "if", "return_coordinates", ":", "\n", "      ", "default", "=", "[", "mtf", ".", "pnum_to_processor_coordinates", "(", "i", ")", "for", "i", "in", "default", "]", "\n", "", "return", "default", "\n", "\n", "", "if", "len", "(", "physical_shape", ")", "!=", "3", ":", "\n", "    ", "tf", ".", "logging", ".", "warning", "(", "\"Unrecognized format for tpu physical shape\"", ")", "\n", "return", "_default_value", "(", ")", "\n", "# physical_shape is a triple of rows, cols, cores", "\n", "", "p0", ",", "p1", ",", "p2", "=", "physical_shape", "\n", "if", "p2", "!=", "FLAGS", ".", "logical_cores_per_chip", ":", "\n", "    ", "return", "_default_value", "\n", "", "for", "dimsize", "in", "[", "p0", ",", "p1", "]", ":", "\n", "# if dimsize not a power of 2, give up", "\n", "    ", "if", "dimsize", "&", "(", "dimsize", "-", "1", ")", ":", "\n", "      ", "return", "_default_value", "(", ")", "\n", "# At this point, the physical shape has at least 1x1x2=2 cores, so there", "\n", "#   must be at least one logical dimension.", "\n", "", "", "assert", "logical_shape", "\n", "if", "len", "(", "logical_shape", ")", "==", "1", ":", "\n", "# ring of p0 x p1 chips", "\n", "    ", "ring", "=", "_ring_2d", "(", "p0", ",", "p1", ")", "\n", "logical_to_physical", "=", "[", "]", "\n", "for", "logical_pnum", "in", "range", "(", "num_cores", ")", ":", "\n", "      ", "core_on_chip", "=", "logical_pnum", "%", "FLAGS", ".", "logical_cores_per_chip", "\n", "chip_num", "=", "logical_pnum", "//", "FLAGS", ".", "logical_cores_per_chip", "\n", "i", ",", "j", "=", "ring", "[", "chip_num", "]", "\n", "logical_to_physical", ".", "append", "(", "(", "i", ",", "j", ",", "core_on_chip", ")", ")", "\n", "", "", "else", ":", "\n", "# We have a p0 x p1 rectangle of chips, which we will tile with rectangular", "\n", "#   tiles.  The first logical dimension correspond to the number of tiles,", "\n", "#   and the other logical dimensions will correspond to position within a", "\n", "#   tile.", "\n", "    ", "num_tiles", "=", "logical_shape", "[", "0", "]", "\n", "tile_chips", "=", "num_cores", "//", "num_tiles", "//", "p2", "\n", "# If we can, we make each tile occupy exactly one row or column of chips.", "\n", "# Otherwise, we make each tile approximately square.", "\n", "if", "len", "(", "logical_shape", ")", "==", "2", "and", "tile_chips", "==", "p0", ":", "\n", "      ", "t0", ",", "t1", "=", "[", "tile_chips", ",", "1", "]", "\n", "", "elif", "len", "(", "logical_shape", ")", "==", "2", "and", "tile_chips", "==", "p1", ":", "\n", "      ", "t0", ",", "t1", "=", "[", "1", ",", "tile_chips", "]", "\n", "", "else", ":", "\n", "# try to make the tile approximately square", "\n", "      ", "lg_tile_chips", "=", "int", "(", "math", ".", "log", "(", "tile_chips", ",", "2", ")", ")", "\n", "t0", "=", "2", "**", "(", "lg_tile_chips", "//", "2", ")", "\n", "# make sure that the tile fits in the mesh - i.e.", "\n", "#   t0 <= p0", "\n", "#   t1 == tile_chips // t0 <= p1", "\n", "t0", "=", "min", "(", "t0", ",", "p0", ")", "\n", "t0", "=", "max", "(", "t0", ",", "tile_chips", "//", "p1", ")", "\n", "t1", "=", "tile_chips", "//", "t0", "\n", "# recursive call to find mapping for one tile", "\n", "", "tile_logical_to_physical", "=", "auto_logical_to_physical_tpu", "(", "\n", "logical_shape", "[", "1", ":", "]", ",", "[", "t0", ",", "t1", ",", "p2", "]", ",", "return_coordinates", "=", "True", ")", "\n", "tiles_ring", "=", "_ring_2d", "(", "p0", "//", "t0", ",", "p1", "//", "t1", ")", "\n", "logical_to_physical", "=", "[", "]", "\n", "for", "logical_pnum", "in", "range", "(", "num_cores", ")", ":", "\n", "      ", "logical_tile_num", "=", "logical_pnum", "//", "(", "t0", "*", "t1", "*", "p2", ")", "\n", "logical_pos_in_tile", "=", "logical_pnum", "%", "(", "t0", "*", "t1", "*", "p2", ")", "\n", "logical_to_physical", ".", "append", "(", "(", "\n", "tiles_ring", "[", "logical_tile_num", "]", "[", "0", "]", "*", "t0", "+", "\n", "tile_logical_to_physical", "[", "logical_pos_in_tile", "]", "[", "0", "]", ",", "\n", "tiles_ring", "[", "logical_tile_num", "]", "[", "1", "]", "*", "t1", "+", "\n", "tile_logical_to_physical", "[", "logical_pos_in_tile", "]", "[", "1", "]", ",", "\n", "tile_logical_to_physical", "[", "logical_pos_in_tile", "]", "[", "2", "]", ")", ")", "\n", "", "", "tf", ".", "logging", ".", "info", "(", "\"auto_logical_to_physical_tpu logical_to_physical = %s\"", "\n", "%", "logical_to_physical", ")", "\n", "if", "return_coordinates", ":", "\n", "    ", "return", "logical_to_physical", "\n", "", "else", ":", "\n", "    ", "if", "FLAGS", ".", "logical_cores_per_chip", ">", "1", ":", "\n", "      ", "return", "[", "\n", "mtf", ".", "processor_coordinates_to_pnum", "(", "physical_shape", ",", "coord", ")", "\n", "for", "coord", "in", "logical_to_physical", "\n", "]", "\n", "", "else", ":", "\n", "# check device_assignment", "\n", "      ", "if", "device_assignment", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"physical_shape or device_assignment unset\"", ")", "\n", "", "return", "mtf", ".", "processor_coordinates_to_pnum_map_nd", "(", "\n", "physical_shape", ",", "logical_to_physical", ",", "device_assignment", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.import_test.ImportTest.test_import": [[28, 30], ["None"], "methods", ["None"], ["  ", "def", "test_import", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils_test.TestUtilsTest.test_convert_mtf_tensor_to_np_array": [[28, 36], ["numpy.array", "mesh_tensorflow.test_utils.NumpyConverter", "mesh_tensorflow.Shape", "mesh_tensorflow.constant", "mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "test_utils_test.TestUtilsTest.assertAllEqual", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array"], ["  ", "@", "tf_test_util", ".", "run_in_graph_and_eager_modes", "\n", "def", "test_convert_mtf_tensor_to_np_array", "(", "self", ")", ":", "\n", "    ", "x_np", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "5", ",", "6", "]", "]", ")", "\n", "converter", "=", "test_utils", ".", "NumpyConverter", "(", ")", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"dim0\"", ",", "2", ")", ",", "mtf", ".", "Dimension", "(", "\"dim1\"", ",", "3", ")", "]", ")", "\n", "x_mtf", "=", "mtf", ".", "constant", "(", "converter", ".", "mesh", ",", "x_np", ",", "shape", "=", "shape", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "actual", "=", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "x_mtf", ")", "\n", "self", ".", "assertAllEqual", "(", "x_np", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils_test.TestUtilsTest.test_convert_mtf_tensor_to_np_array_with_trainable_variable": [[37, 49], ["mesh_tensorflow.test_utils.NumpyConverter", "mesh_tensorflow.Shape", "mesh_tensorflow.get_variable", "mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "test_utils_test.TestUtilsTest.assertAllClose", "numpy.zeros_like", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.zeros_initializer"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like"], ["", "@", "tf_test_util", ".", "run_in_graph_and_eager_modes", "\n", "def", "test_convert_mtf_tensor_to_np_array_with_trainable_variable", "(", "self", ")", ":", "\n", "    ", "converter", "=", "test_utils", ".", "NumpyConverter", "(", ")", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"dim0\"", ",", "2", ")", ",", "mtf", ".", "Dimension", "(", "\"dim1\"", ",", "3", ")", "]", ")", "\n", "x_mtf", "=", "mtf", ".", "get_variable", "(", "\n", "converter", ".", "mesh", ",", "\n", "name", "=", "\"x\"", ",", "\n", "shape", "=", "shape", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "actual", "=", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "x_mtf", ")", "\n", "self", ".", "assertAllClose", "(", "np", ".", "zeros_like", "(", "actual", ")", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils_test.TestUtilsTest.test_convert_mtf_tensor_to_tf_tensor": [[50, 58], ["numpy.array", "mesh_tensorflow.test_utils.NumpyConverter", "mesh_tensorflow.Shape", "mesh_tensorflow.constant", "mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_tf_tensor", "test_utils_test.TestUtilsTest.evaluate", "test_utils_test.TestUtilsTest.assertAllEqual", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_tf_tensor"], ["", "def", "test_convert_mtf_tensor_to_tf_tensor", "(", "self", ")", ":", "\n", "    ", "x_np", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "5", ",", "6", "]", "]", ")", "\n", "converter", "=", "test_utils", ".", "NumpyConverter", "(", ")", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"dim0\"", ",", "2", ")", ",", "mtf", ".", "Dimension", "(", "\"dim1\"", ",", "3", ")", "]", ")", "\n", "x_mtf", "=", "mtf", ".", "constant", "(", "converter", ".", "mesh", ",", "x_np", ",", "shape", "=", "shape", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "_", ",", "x_tf", "=", "converter", ".", "convert_mtf_tensor_to_tf_tensor", "(", "x_mtf", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "x_tf", ")", "\n", "self", ".", "assertAllEqual", "(", "x_np", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl_test.SimdMeshImplTest.testHierarchicalTiling": [[30, 50], ["absl.testing.parameterized.parameters", "mesh_tensorflow.simd_mesh_impl.HierarchicalTiling", "mesh_tensorflow.simd_mesh_impl.HierarchicalTiling.spec_to_mesh_shape", "simd_mesh_impl_test.SimdMeshImplTest.assertEqual", "simd_mesh_impl_test.SimdMeshImplTest.assertCountEqual", "list", "range"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.HierarchicalTiling.spec_to_mesh_shape"], ["  ", "@", "parameterized", ".", "parameters", "(", "\n", "(", "[", "8", ",", "8", ",", "2", "]", ",", "[", "(", "\"dp\"", ",", "None", ")", "]", ")", ",", "\n", "(", "[", "8", ",", "8", ",", "2", "]", ",", "[", "(", "\"dp\"", ",", "None", ")", ",", "(", "\"mp\"", ",", "[", "1", ",", "1", ",", "2", "]", ")", "]", ")", ",", "\n", "(", "[", "8", ",", "8", ",", "2", "]", ",", "[", "(", "\"dp\"", ",", "[", "8", ",", "8", ",", "1", "]", ")", ",", "(", "\"mp\"", ",", "[", "1", ",", "1", ",", "2", "]", ")", "]", ")", ",", "\n", "(", "[", "8", ",", "8", ",", "2", "]", ",", "[", "(", "\"dp\"", ",", "None", ")", ",", "(", "\"mp\"", ",", "[", "2", ",", "8", ",", "1", "]", ")", "]", ")", ",", "\n", "(", "[", "8", ",", "8", ",", "2", "]", ",", "[", "(", "\"dp\"", ",", "None", ")", ",", "(", "\"mp1\"", ",", "[", "1", ",", "8", ",", "1", "]", ")", ",", "(", "\"mp2\"", ",", "[", "8", ",", "1", ",", "2", "]", ")", "]", ")", ",", "\n", "(", "[", "8", ",", "8", ",", "2", "]", ",", "[", "(", "\"dp\"", ",", "None", ")", ",", "(", "\"mp1\"", ",", "[", "2", ",", "2", ",", "1", "]", ")", ",", "(", "\"mp2\"", ",", "[", "2", ",", "2", ",", "1", "]", ")", "]", ")", ",", "\n", "(", "[", "9", ",", "15", ",", "7", "]", ",", "[", "(", "\"d1\"", ",", "[", "3", ",", "5", ",", "1", "]", ")", ",", "(", "\"d2\"", ",", "[", "3", ",", "3", ",", "7", "]", ")", "]", ")", ",", "\n", ")", "\n", "def", "testHierarchicalTiling", "(", "self", ",", "physical_shape", ",", "spec", ")", ":", "\n", "    ", "hierarchical_tiling", "=", "mtf", ".", "simd_mesh_impl", ".", "HierarchicalTiling", "(", "\n", "spec", ",", "physical_shape", ")", "\n", "mesh_shape", "=", "hierarchical_tiling", ".", "mesh_shape", "\n", "logical_to_physical", "=", "hierarchical_tiling", ".", "logical_to_physical", "\n", "num_cores", "=", "physical_shape", "[", "0", "]", "*", "physical_shape", "[", "1", "]", "*", "physical_shape", "[", "2", "]", "\n", "expected_mesh_shape", "=", "(", "\n", "mtf", ".", "simd_mesh_impl", ".", "HierarchicalTiling", ".", "spec_to_mesh_shape", "(", "\n", "spec", ",", "num_cores", ")", ")", "\n", "self", ".", "assertEqual", "(", "mesh_shape", ",", "expected_mesh_shape", ")", "\n", "self", ".", "assertCountEqual", "(", "logical_to_physical", ",", "list", "(", "range", "(", "num_cores", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl_test.SimdMeshImplTest.testLogicalToPhysical": [[51, 63], ["absl.testing.parameterized.parameters", "mesh_tensorflow.simd_mesh_impl.auto_logical_to_physical_tpu", "simd_mesh_impl_test.SimdMeshImplTest.assertCountEqual", "list", "range", "mesh_tensorflow.list_product"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.auto_logical_to_physical_tpu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "[", "128", "]", ",", "[", "8", ",", "8", ",", "2", "]", ")", ",", "\n", "(", "[", "8", ",", "16", "]", ",", "[", "8", ",", "8", ",", "2", "]", ")", ",", "\n", "(", "[", "32", ",", "4", "]", ",", "[", "8", ",", "8", ",", "2", "]", ")", ",", "\n", "(", "[", "2", ",", "32", ",", "4", "]", ",", "[", "256", "]", ")", ",", "\n", "(", "[", "4", ",", "4", ",", "8", "]", ",", "[", "8", ",", "8", ",", "2", "]", ")", ",", "\n", ")", "\n", "def", "testLogicalToPhysical", "(", "self", ",", "physical_shape", ",", "logical_shape", ")", ":", "\n", "    ", "logical_to_physical", "=", "mtf", ".", "simd_mesh_impl", ".", "auto_logical_to_physical_tpu", "(", "\n", "physical_shape", ",", "logical_shape", ")", "\n", "self", ".", "assertCountEqual", "(", "\n", "logical_to_physical", ",", "list", "(", "range", "(", "mtf", ".", "list_product", "(", "physical_shape", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.__init__": [[34, 38], ["mesh_tensorflow.ops_with_redefined_builtins.MeshImpl.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "shape", ",", "layout", ",", "devices", ")", ":", "\n", "    ", "super", "(", "PlacementMeshImpl", ",", "self", ")", ".", "__init__", "(", "shape", ",", "layout", ")", "\n", "self", ".", "_devices", "=", "devices", "\n", "self", ".", "copy_master_to_slice_ops", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise": [[159, 179], ["mesh_tensorflow.ops_with_redefined_builtins.convert_args_to_laid_out_tensors", "mesh_tensorflow.ops_with_redefined_builtins.parallel", "isinstance", "mesh_tensorflow.ops_with_redefined_builtins.transpose_list_of_lists", "tuple", "placement_mesh_impl.PlacementMeshImpl.LaidOutTensor", "isinstance", "len", "placement_mesh_impl.PlacementMeshImpl.LaidOutTensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_args_to_laid_out_tensors", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.parallel", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose_list_of_lists"], ["", "", "def", "slicewise", "(", "self", ",", "fn", ",", "*", "inputs", ")", ":", "\n", "    ", "\"\"\"Execute a function in parallel on all slices.\n\n    Args:\n      fn: a function from tf.Tensors to tf.Tensor or a tuple of tf.Tensors.\n      *inputs: a list of inputs.  Each input is either a LaidOutTensor or\n        is convertible to a tf.Tensor.\n    Returns:\n      a LaidOutTensor, or a tuple of LaidOutTensors if fn returns a tuple.\n    \"\"\"", "\n", "# convert all inputs to LaidOutTensor where possible", "\n", "inputs", "=", "mtf", ".", "convert_args_to_laid_out_tensors", "(", "inputs", ")", "\n", "inputs", "=", "[", "x", ".", "tensor_list", "if", "isinstance", "(", "x", ",", "self", ".", "LaidOutTensor", ")", "\n", "else", "[", "x", "]", "*", "len", "(", "self", ".", "devices", ")", "for", "x", "in", "inputs", "]", "\n", "ret", "=", "mtf", ".", "parallel", "(", "self", ".", "devices", ",", "fn", ",", "*", "inputs", ")", "\n", "if", "isinstance", "(", "ret", "[", "0", "]", ",", "tuple", ")", ":", "\n", "      ", "ret", "=", "mtf", ".", "transpose_list_of_lists", "(", "ret", ")", "\n", "return", "tuple", "(", "[", "self", ".", "LaidOutTensor", "(", "t", ")", "for", "t", "in", "ret", "]", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "LaidOutTensor", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.Print": [[180, 199], ["tensorflow.logging.info", "x.to_laid_out_tensor.to_laid_out_tensor.to_laid_out_tensor", "placement_mesh_impl.PlacementMeshImpl.LaidOutTensor", "tensorflow.device", "tensorflow.Print"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.Print"], ["", "", "def", "Print", "(", "self", ",", "x", ",", "data", ",", "message", ",", "**", "kwargs", ")", ":", "# pylint: disable=invalid-name", "\n", "    ", "\"\"\"call tf.Print.\n\n    Args:\n      x: a LaidOutTensor\n      data: a list of LaidOutTensor\n      message: a string\n      **kwargs: keyword arguments to tf.print\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "tf", ".", "logging", ".", "info", "(", "\"PlacementMeshImpl::Print\"", ")", "\n", "x", "=", "x", ".", "to_laid_out_tensor", "(", ")", "\n", "new_slices", "=", "x", ".", "tensor_list", "[", ":", "]", "\n", "with", "tf", ".", "device", "(", "self", ".", "_devices", "[", "0", "]", ")", ":", "\n", "      ", "new_slices", "[", "0", "]", "=", "tf", ".", "Print", "(", "\n", "new_slices", "[", "0", "]", ",", "[", "t", "for", "d", "in", "data", "for", "t", "in", "d", ".", "tensor_list", "]", ",", "\n", "message", ",", "**", "kwargs", ")", "\n", "", "return", "self", ".", "LaidOutTensor", "(", "new_slices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.allreduce": [[200, 213], ["placement_mesh_impl.PlacementMeshImpl._collective_with_groups", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl._collective_with_groups"], ["", "def", "allreduce", "(", "self", ",", "x", ",", "mesh_axes", ",", "reduction_fn_string", ")", ":", "\n", "    ", "\"\"\"Grouped allreduce, (across the given dimensions).\n\n    Args:\n      x: a LaidOutTensor\n      mesh_axes: a list of integers - the mesh dimensions to be reduced\n      reduction_fn_string: \"SUM\" or \"MAX\"\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "return", "self", ".", "_collective_with_groups", "(", "\n", "x", ",", "mesh_axes", ",", "functools", ".", "partial", "(", "\n", "allreduce_ring", ",", "reduction_fn_string", "=", "reduction_fn_string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.allconcat": [[214, 227], ["placement_mesh_impl.PlacementMeshImpl._collective_with_groups", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl._collective_with_groups"], ["", "def", "allconcat", "(", "self", ",", "x", ",", "mesh_axis", ",", "concat_axis", ")", ":", "\n", "    ", "\"\"\"Grouped allconcat (like MPI allgather followed by concat).\n\n    Args:\n      x: a LaidOutTensor\n      mesh_axis: an integer - the mesh axis along which to group\n      concat_axis: an integer (the Tensor axis along which to concatenate)\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "return", "self", ".", "_collective_with_groups", "(", "\n", "x", ",", "[", "mesh_axis", "]", ",", "\n", "functools", ".", "partial", "(", "allconcat_ring", ",", "concat_axis", "=", "concat_axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.alltoall": [[228, 243], ["placement_mesh_impl.PlacementMeshImpl._collective_with_groups", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl._collective_with_groups"], ["", "def", "alltoall", "(", "self", ",", "x", ",", "mesh_axis", ",", "split_axis", ",", "concat_axis", ")", ":", "\n", "    ", "\"\"\"Grouped alltoall.\n\n    Args:\n      x: a LaidOutTensor\n      mesh_axis: an integer the mesh axis along which to group\n      split_axis: an integer (the Tensor axis along which to split)\n      concat_axis: an integer (the Tensor axis along which to concatenate)\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "return", "self", ".", "_collective_with_groups", "(", "\n", "x", ",", "[", "mesh_axis", "]", ",", "\n", "functools", ".", "partial", "(", "\n", "alltoall_ring", ",", "split_axis", "=", "split_axis", ",", "concat_axis", "=", "concat_axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.receive": [[244, 280], ["x.to_laid_out_tensor.to_laid_out_tensor.to_laid_out_tensor", "placement_mesh_impl.PlacementMeshImpl._collective_with_groups", "enumerate", "tensorflow.device", "ret.append", "ret.append", "tensorflow.zeros", "tensorflow.identity"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl._collective_with_groups", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.identity"], ["", "def", "receive", "(", "self", ",", "x", ",", "mesh_axis", ",", "source_pcoord", ")", ":", "\n", "    ", "\"\"\"Collective receive in groups.\n\n    Each group contains the processors that differ only in mesh_axis.\n\n    ```python\n    group_size = self.shape[mesh_axis].size\n    ```\n\n    Args:\n      x: a LaidOutTensor\n      mesh_axis: an integer\n      source_pcoord: a list of optional integers. Each element is either None\n        or an integer in [0, group_size). If source_pcoord[k] is None, then the\n        output for the k-th processor in each group is a zero tensor. If\n        source_pcoord[k] is not None, then the output for the k-th processor in\n        each group is equal to the input for the source_pcoord[k]-th processor\n        in that group.\n\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "x", "=", "x", ".", "to_laid_out_tensor", "(", ")", "\n", "shape", "=", "x", ".", "tensor_list", "[", "0", "]", ".", "shape", "\n", "dtype", "=", "x", ".", "tensor_list", "[", "0", "]", ".", "dtype", "\n", "def", "_collective_receive", "(", "tensor_list", ",", "device_list", ")", ":", "\n", "      ", "ret", "=", "[", "]", "\n", "for", "pcoord", ",", "device", "in", "enumerate", "(", "device_list", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "device", ")", ":", "\n", "          ", "if", "source_pcoord", "[", "pcoord", "]", "is", "None", ":", "\n", "            ", "ret", ".", "append", "(", "tf", ".", "zeros", "(", "shape", ",", "dtype", ")", ")", "\n", "", "else", ":", "\n", "            ", "ret", ".", "append", "(", "tf", ".", "identity", "(", "tensor_list", "[", "source_pcoord", "[", "pcoord", "]", "]", ")", ")", "\n", "", "", "", "return", "ret", "\n", "", "return", "self", ".", "_collective_with_groups", "(", "\n", "x", ",", "[", "mesh_axis", "]", ",", "_collective_receive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl._collective_with_groups": [[281, 306], ["x.to_laid_out_tensor.to_laid_out_tensor.to_laid_out_tensor", "len", "placement_mesh_impl.PlacementMeshImpl.LaidOutTensor", "mesh_tensorflow.ops_with_redefined_builtins.processor_groups", "placement_mesh_impl.PlacementMeshImpl.LaidOutTensor", "collective", "collective", "zip"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.to_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.processor_groups"], ["", "def", "_collective_with_groups", "(", "self", ",", "x", ",", "mesh_axes", ",", "collective", ")", ":", "\n", "    ", "\"\"\"Grouped collective, (across the given dimensions).\n\n    Args:\n      x: a LaidOutTensor\n      mesh_axes: a list of integers - the mesh dimensions to be reduced\n      collective: fn from list(tf.Tensor), list(device) -> list(tf.Tensor)\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "if", "not", "mesh_axes", ":", "\n", "      ", "return", "x", "\n", "", "x", "=", "x", ".", "to_laid_out_tensor", "(", ")", "\n", "if", "len", "(", "mesh_axes", ")", "==", "self", ".", "ndims", ":", "\n", "      ", "return", "self", ".", "LaidOutTensor", "(", "collective", "(", "x", ".", "tensor_list", ",", "self", ".", "_devices", ")", ")", "\n", "", "else", ":", "\n", "      ", "groups", "=", "mtf", ".", "processor_groups", "(", "self", ".", "shape", ",", "mesh_axes", ")", "\n", "ret", "=", "[", "None", "]", "*", "self", ".", "size", "\n", "for", "g", "in", "groups", ":", "\n", "        ", "inputs", "=", "[", "x", ".", "tensor_list", "[", "pnum", "]", "for", "pnum", "in", "g", "]", "\n", "devices", "=", "[", "self", ".", "_devices", "[", "pnum", "]", "for", "pnum", "in", "g", "]", "\n", "reduced", "=", "collective", "(", "inputs", ",", "devices", ")", "\n", "for", "pnum", ",", "y", "in", "zip", "(", "g", ",", "reduced", ")", ":", "\n", "          ", "ret", "[", "pnum", "]", "=", "y", "\n", "", "", "return", "self", ".", "LaidOutTensor", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.random": [[307, 326], ["placement_mesh_impl.PlacementMeshImpl.slice_shape", "random.random", "placement_mesh_impl.PlacementMeshImpl.slicewise", "hash", "tf_fn", "placement_mesh_impl.PlacementMeshImpl.laid_out_pnum", "placement_mesh_impl.PlacementMeshImpl.slice_begin"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.random", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.slicewise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.laid_out_pnum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slice_begin"], ["", "", "def", "random", "(", "self", ",", "shape", ",", "tf_fn", ",", "kwargs", ")", ":", "\n", "    ", "\"\"\"Call a random tf operation (e.g. tf.random.uniform).\n\n    Args:\n      shape: a Shape\n      tf_fn: a function such as tf.random.uniform\n      kwargs: kwargs to pass to tf_fn, except for seed\n\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "slice_shape", "=", "self", ".", "slice_shape", "(", "shape", ")", "\n", "op_seed", "=", "random", ".", "random", "(", ")", "\n", "def", "my_fn", "(", "pnum", ")", ":", "\n", "# seeds are necessary to make sure that slices that should have the", "\n", "# same values actually do have the same values.", "\n", "      ", "seed", "=", "hash", "(", "\"%s,%s\"", "%", "(", "op_seed", ",", "self", ".", "slice_begin", "(", "shape", ",", "pnum", ")", ")", ")", "\n", "return", "tf_fn", "(", "slice_shape", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "", "return", "self", ".", "slicewise", "(", "my_fn", ",", "self", ".", "laid_out_pnum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.laid_out_pnum": [[327, 330], ["placement_mesh_impl.PlacementMeshImpl.LaidOutTensor", "list", "range"], "methods", ["None"], ["", "def", "laid_out_pnum", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns a LaidOutTensor containing the processor number.\"\"\"", "\n", "return", "self", ".", "LaidOutTensor", "(", "list", "(", "range", "(", "self", ".", "size", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.devices": [[331, 334], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "devices", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_devices", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor": [[335, 345], ["placement_mesh_impl.PlacementMeshImpl.combine_slices"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.combine_slices"], ["", "def", "export_to_tf_tensor", "(", "self", ",", "x", ",", "laid_out_x", ")", ":", "\n", "    ", "\"\"\"Turn a Tensor into a tf.Tensor.\n\n    Args:\n      x: a Tensor\n      laid_out_x: a LaidOutTensor\n    Returns:\n      a tf.Tensor\n    \"\"\"", "\n", "return", "self", ".", "combine_slices", "(", "laid_out_x", ".", "all_slices", ",", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor": [[346, 356], ["placement_mesh_impl.PlacementMeshImpl.LaidOutTensor", "placement_mesh_impl.PlacementMeshImpl.make_slices"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.make_slices"], ["", "def", "import_tf_tensor", "(", "self", ",", "x", ",", "tf_x", ")", ":", "\n", "    ", "\"\"\"Import a tf.Tensor, producing a LaidOutTensor.\n\n    Args:\n      x: a Tensor\n      tf_x: a tf.Tensor\n    Returns:\n      a LaidOutTensor\n    \"\"\"", "\n", "return", "self", ".", "LaidOutTensor", "(", "self", ".", "make_slices", "(", "tf_x", ",", "x", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.allreduce_ring_single_shard": [[358, 405], ["len", "mesh_tensorflow.ops_with_redefined_builtins.binary_reduction_fn", "six.moves.xrange", "reversed", "reversed", "six.moves.xrange", "len", "six.moves.xrange", "tensorflow.device", "mtf.binary_reduction_fn.", "six.moves.xrange", "tensorflow.device", "mtf.binary_reduction_fn.", "tensorflow.device", "mtf.binary_reduction_fn.", "tensorflow.device", "mtf.binary_reduction_fn.", "tensorflow.device", "tensorflow.identity", "tensorflow.device", "tensorflow.identity"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.binary_reduction_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.identity", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.identity"], ["", "", "def", "allreduce_ring_single_shard", "(", "xs", ",", "devices", ",", "reduction_fn_string", "=", "\"SUM\"", ")", ":", "\n", "  ", "\"\"\"Compute the reduction of all Tensors and put the result everywhere.\n\n  Performance-optimized for a ring of devices.\n\n  Args:\n    xs: a list of n tf.Tensors\n    devices: a list of strings\n    reduction_fn_string: \"SUM\" or \"MAX\"\n\n  Returns:\n    a list of n Tensors\n  Raises:\n    ValueError: if devices is not a list of n strings\n  \"\"\"", "\n", "n", "=", "len", "(", "xs", ")", "\n", "binary_reduction", "=", "mtf", ".", "binary_reduction_fn", "(", "reduction_fn_string", ")", "\n", "assert", "len", "(", "devices", ")", "==", "n", ",", "\"devices must be a list of length len(xs)\"", "\n", "if", "n", "==", "1", ":", "\n", "    ", "return", "xs", "\n", "", "result", "=", "[", "None", "]", "*", "n", "\n", "if", "n", "%", "2", "==", "0", ":", "\n", "    ", "left_center", "=", "n", "//", "2", "-", "1", "\n", "right_center", "=", "left_center", "+", "1", "\n", "", "else", ":", "\n", "    ", "left_center", "=", "n", "//", "2", "\n", "right_center", "=", "left_center", "\n", "", "left_sum", "=", "xs", "[", "0", "]", "\n", "for", "i", "in", "xrange", "(", "1", ",", "left_center", "+", "1", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "devices", "[", "i", "]", ")", ":", "\n", "      ", "left_sum", "=", "binary_reduction", "(", "left_sum", ",", "xs", "[", "i", "]", ")", "\n", "", "", "right_sum", "=", "xs", "[", "n", "-", "1", "]", "\n", "for", "i", "in", "reversed", "(", "xrange", "(", "left_center", "+", "1", ",", "n", "-", "1", ")", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "devices", "[", "i", "]", ")", ":", "\n", "      ", "right_sum", "=", "binary_reduction", "(", "xs", "[", "i", "]", ",", "right_sum", ")", "\n", "", "", "with", "tf", ".", "device", "(", "devices", "[", "left_center", "]", ")", ":", "\n", "    ", "result", "[", "left_center", "]", "=", "binary_reduction", "(", "left_sum", ",", "right_sum", ")", "\n", "", "if", "n", "%", "2", "==", "0", ":", "\n", "    ", "with", "tf", ".", "device", "(", "devices", "[", "right_center", "]", ")", ":", "\n", "      ", "result", "[", "right_center", "]", "=", "binary_reduction", "(", "left_sum", ",", "right_sum", ")", "\n", "", "", "for", "i", "in", "reversed", "(", "xrange", "(", "left_center", ")", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "devices", "[", "i", "]", ")", ":", "\n", "      ", "result", "[", "i", "]", "=", "tf", ".", "identity", "(", "result", "[", "i", "+", "1", "]", ")", "\n", "", "", "for", "i", "in", "xrange", "(", "right_center", "+", "1", ",", "n", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "devices", "[", "i", "]", ")", ":", "\n", "      ", "result", "[", "i", "]", "=", "tf", ".", "identity", "(", "result", "[", "i", "-", "1", "]", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.allreduce_ring": [[407, 456], ["len", "xs[].shape.as_list", "mesh_tensorflow.ops_with_redefined_builtins.parallel", "mesh_tensorflow.ops_with_redefined_builtins.transpose_list_of_lists", "six.moves.xrange", "mesh_tensorflow.ops_with_redefined_builtins.transpose_list_of_lists", "mesh_tensorflow.ops_with_redefined_builtins.parallel", "len", "ValueError", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "placement_mesh_impl.allreduce_ring_single_shard", "len", "tensorflow.split", "tensorflow.reshape", "placement_mesh_impl.allreduce_ring._circular_shift"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.parallel", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose_list_of_lists", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose_list_of_lists", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.parallel", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.allreduce_ring_single_shard", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "allreduce_ring", "(", "xs", ",", "devices", ",", "reduction_fn_string", "=", "\"SUM\"", ")", ":", "\n", "  ", "\"\"\"Compute the reduction of all Tensors and put the result everywhere.\n\n  Performance-optimized for a ring of devices.\n\n  Args:\n    xs: a list of n tf.Tensors\n    devices: a list of strings\n    reduction_fn_string: \"SUM\" or \"MAX\"\n\n  Returns:\n    a list of n Tensors\n  Raises:\n    ValueError: if devices is not a list of n strings\n  \"\"\"", "\n", "n", "=", "len", "(", "xs", ")", "\n", "if", "len", "(", "devices", ")", "!=", "n", ":", "\n", "    ", "raise", "ValueError", "(", "\"devices must be a list of length len(xs)\"", ")", "\n", "", "if", "n", "==", "1", ":", "\n", "    ", "return", "xs", "\n", "", "shape", "=", "xs", "[", "0", "]", ".", "shape", ".", "as_list", "(", ")", "\n", "# tf.logging.info(\"allreduce_ring shape = %s\" % shape)", "\n", "size", "=", "None", "if", "None", "in", "shape", "else", "mtf", ".", "list_product", "(", "shape", ")", "\n", "if", "size", "is", "None", "or", "size", "<", "1024", "or", "size", "%", "n", "!=", "0", ":", "\n", "    ", "return", "allreduce_ring_single_shard", "(", "xs", ",", "devices", ",", "reduction_fn_string", ")", "\n", "\n", "", "def", "_circular_shift", "(", "l", ",", "n", ")", ":", "\n", "    ", "n", "%=", "len", "(", "l", ")", "\n", "return", "l", "[", "-", "n", ":", "]", "+", "l", "[", ":", "-", "n", "]", "\n", "", "def", "_flatten_and_split", "(", "x", ")", ":", "\n", "# tf.reshape treats [-1] as a special value denoting 1D flattening.", "\n", "    ", "return", "tf", ".", "split", "(", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", ",", "n", ")", "\n", "", "def", "_concat_and_reshape", "(", "xs", ")", ":", "\n", "    ", "return", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "xs", ",", "0", ")", ",", "shape", ")", "\n", "\n", "# [device, shard]", "\n", "", "x_split", "=", "mtf", ".", "parallel", "(", "devices", ",", "_flatten_and_split", ",", "xs", ")", "\n", "x_split_t", "=", "mtf", ".", "transpose_list_of_lists", "(", "x_split", ")", "\n", "\n", "y_split_t", "=", "[", "]", "\n", "for", "shard", "in", "xrange", "(", "n", ")", ":", "\n", "    ", "shard_xs", "=", "_circular_shift", "(", "x_split_t", "[", "shard", "]", ",", "shard", ")", "\n", "shard_devices", "=", "_circular_shift", "(", "devices", ",", "shard", ")", "\n", "shard_ys", "=", "allreduce_ring_single_shard", "(", "\n", "shard_xs", ",", "shard_devices", ",", "reduction_fn_string", ")", "\n", "y_split_t", ".", "append", "(", "_circular_shift", "(", "shard_ys", ",", "-", "shard", ")", ")", "\n", "", "y_split", "=", "mtf", ".", "transpose_list_of_lists", "(", "y_split_t", ")", "\n", "ys", "=", "mtf", ".", "parallel", "(", "devices", ",", "_concat_and_reshape", ",", "y_split", ")", "\n", "return", "ys", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.allconcat_ring": [[458, 488], ["len", "six.moves.xrange", "mesh_tensorflow.ops_with_redefined_builtins.parallel", "six.moves.xrange", "six.moves.xrange", "six.moves.xrange", "tensorflow.device", "tensorflow.identity", "tensorflow.device", "tensorflow.identity"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.parallel", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.identity", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.identity"], ["", "def", "allconcat_ring", "(", "xs", ",", "devices", ",", "concat_axis", ")", ":", "\n", "  ", "\"\"\"Concatenate all Tensors everywhere.\n\n  Performance-optimized for a ring of devices.\n\n  Args:\n    xs: a list of n tf.Tensors\n    devices: a list of n strings\n    concat_axis: an integer\n\n  Returns:\n    a list of n Tensors\n  \"\"\"", "\n", "n", "=", "len", "(", "xs", ")", "\n", "if", "n", "==", "1", ":", "\n", "    ", "return", "xs", "\n", "# [target, source]", "\n", "", "parts", "=", "[", "[", "xs", "[", "target", "]", "if", "target", "==", "source", "else", "None", "for", "source", "in", "xrange", "(", "n", ")", "]", "\n", "for", "target", "in", "xrange", "(", "n", ")", "]", "\n", "for", "distance", "in", "xrange", "(", "1", ",", "n", "//", "2", "+", "1", ")", ":", "\n", "    ", "for", "target", "in", "xrange", "(", "n", ")", ":", "\n", "      ", "source", "=", "(", "target", "+", "distance", ")", "%", "n", "\n", "if", "parts", "[", "target", "]", "[", "source", "]", "is", "None", ":", "\n", "        ", "with", "tf", ".", "device", "(", "devices", "[", "target", "]", ")", ":", "\n", "          ", "parts", "[", "target", "]", "[", "source", "]", "=", "tf", ".", "identity", "(", "parts", "[", "(", "target", "+", "1", ")", "%", "n", "]", "[", "source", "]", ")", "\n", "", "", "source", "=", "(", "target", "-", "distance", ")", "%", "n", "\n", "if", "parts", "[", "target", "]", "[", "source", "]", "is", "None", ":", "\n", "        ", "with", "tf", ".", "device", "(", "devices", "[", "target", "]", ")", ":", "\n", "          ", "parts", "[", "target", "]", "[", "source", "]", "=", "tf", ".", "identity", "(", "parts", "[", "(", "target", "-", "1", ")", "%", "n", "]", "[", "source", "]", ")", "\n", "", "", "", "", "return", "mtf", ".", "parallel", "(", "devices", ",", "tf", ".", "concat", ",", "parts", ",", "axis", "=", "[", "concat_axis", "]", "*", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.alltoall_pointtwise": [[490, 511], ["len", "mesh_tensorflow.ops_with_redefined_builtins.transpose_list_of_lists", "mesh_tensorflow.ops_with_redefined_builtins.parallel", "mesh_tensorflow.ops_with_redefined_builtins.parallel"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose_list_of_lists", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.parallel", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.parallel"], ["", "def", "alltoall_pointtwise", "(", "xs", ",", "devices", ",", "split_axis", ",", "concat_axis", ")", ":", "\n", "  ", "\"\"\"MPI alltoall operation.\n\n  Implementation of alltoall using pointwise communication.\n\n  Args:\n    xs: a list of n tf.Tensors\n    devices: a list of n strings\n    split_axis: an integer\n    concat_axis: an integer\n\n  Returns:\n    a list of n Tensors\n  \"\"\"", "\n", "n", "=", "len", "(", "xs", ")", "\n", "if", "n", "==", "1", ":", "\n", "    ", "return", "xs", "\n", "# [target, source]", "\n", "", "parts", "=", "mtf", ".", "transpose_list_of_lists", "(", "\n", "mtf", ".", "parallel", "(", "devices", ",", "tf", ".", "split", ",", "xs", ",", "[", "n", "]", "*", "n", ",", "axis", "=", "[", "split_axis", "]", "*", "n", ")", ")", "\n", "return", "mtf", ".", "parallel", "(", "devices", ",", "tf", ".", "concat", ",", "parts", ",", "axis", "=", "[", "concat_axis", "]", "*", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.alltoall_ring": [[513, 572], ["len", "six.moves.xrange", "six.moves.xrange", "mesh_tensorflow.ops_with_redefined_builtins.parallel", "tensorflow.split", "six.moves.xrange", "six.moves.xrange", "tensorflow.shape", "sum", "tensorflow.device", "max", "placement_mesh_impl.alltoall_ring.my_split"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.parallel", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.shape"], ["", "def", "alltoall_ring", "(", "xs", ",", "devices", ",", "split_axis", ",", "concat_axis", ")", ":", "\n", "  ", "\"\"\"MPI alltoall operation.\n\n  Performance-optimized for a ring of devices.\n\n  Args:\n    xs: a list of n tf.Tensors\n    devices: a list of n strings\n    split_axis: an integer\n    concat_axis: an integer\n\n  Returns:\n    a list of n Tensors\n  \"\"\"", "\n", "n", "=", "len", "(", "xs", ")", "\n", "if", "n", "==", "1", ":", "\n", "    ", "return", "xs", "\n", "# set up", "\n", "# [target, source]", "\n", "", "parts", "=", "[", "[", "None", "]", "*", "n", "for", "i", "in", "xrange", "(", "n", ")", "]", "\n", "def", "my_split", "(", "x", ",", "size_splits", ")", ":", "\n", "    ", "total_size", "=", "tf", ".", "shape", "(", "x", ")", "[", "split_axis", "]", "\n", "part_size", "=", "total_size", "//", "sum", "(", "size_splits", ")", "\n", "return", "tf", ".", "split", "(", "x", ",", "[", "s", "*", "part_size", "for", "s", "in", "size_splits", "]", ",", "axis", "=", "split_axis", ")", "\n", "", "forward_message_size", "=", "(", "n", "-", "1", ")", "//", "2", "\n", "backward_message_size", "=", "(", "n", "-", "1", ")", "-", "forward_message_size", "\n", "forward_messages", "=", "[", "None", "]", "*", "n", "\n", "backward_messages", "=", "[", "None", "]", "*", "n", "\n", "for", "i", "in", "xrange", "(", "n", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "devices", "[", "i", "]", ")", ":", "\n", "      ", "if", "i", ">=", "backward_message_size", ":", "\n", "        ", "a", ",", "b", ",", "c", ",", "d", "=", "my_split", "(", "\n", "xs", "[", "i", "]", ",", "[", "i", "-", "backward_message_size", ",", "\n", "backward_message_size", ",", "1", ",", "n", "-", "i", "-", "1", "]", ")", "\n", "backward_messages", "[", "i", "]", "=", "b", "\n", "parts", "[", "i", "]", "[", "i", "]", "=", "c", "\n", "forward_messages", "[", "i", "]", "=", "tf", ".", "concat", "(", "[", "d", ",", "a", "]", ",", "axis", "=", "split_axis", ")", "\n", "", "else", ":", "\n", "        ", "a", ",", "b", ",", "c", ",", "d", "=", "my_split", "(", "\n", "xs", "[", "i", "]", ",", "[", "i", ",", "1", ",", "forward_message_size", ",", "backward_message_size", "-", "i", "]", ")", "\n", "backward_messages", "[", "i", "]", "=", "tf", ".", "concat", "(", "[", "d", ",", "a", "]", ",", "axis", "=", "split_axis", ")", "\n", "parts", "[", "i", "]", "[", "i", "]", "=", "b", "\n", "forward_messages", "[", "i", "]", "=", "c", "\n", "", "", "", "for", "step", "in", "xrange", "(", "1", ",", "max", "(", "forward_message_size", ",", "backward_message_size", ")", "+", "1", ")", ":", "\n", "    ", "new_forward_messages", "=", "[", "None", "]", "*", "n", "\n", "new_backward_messages", "=", "[", "None", "]", "*", "n", "\n", "for", "i", "in", "xrange", "(", "n", ")", ":", "\n", "      ", "with", "tf", ".", "device", "(", "devices", "[", "i", "]", ")", ":", "\n", "        ", "if", "forward_message_size", ">", "0", ":", "\n", "          ", "parts", "[", "i", "]", "[", "(", "i", "-", "step", ")", "%", "n", "]", ",", "new_forward_messages", "[", "i", "]", "=", "my_split", "(", "\n", "forward_messages", "[", "(", "i", "-", "1", ")", "%", "n", "]", ",", "[", "1", ",", "forward_message_size", "-", "1", "]", ")", "\n", "", "if", "backward_message_size", ">", "0", ":", "\n", "          ", "new_backward_messages", "[", "i", "]", ",", "parts", "[", "i", "]", "[", "(", "i", "+", "step", ")", "%", "n", "]", "=", "my_split", "(", "\n", "backward_messages", "[", "(", "i", "+", "1", ")", "%", "n", "]", ",", "[", "backward_message_size", "-", "1", ",", "1", "]", ")", "\n", "", "", "", "forward_message_size", "-=", "1", "\n", "backward_message_size", "-=", "1", "\n", "forward_messages", "=", "new_forward_messages", "\n", "backward_messages", "=", "new_backward_messages", "\n", "", "return", "mtf", ".", "parallel", "(", "devices", ",", "tf", ".", "concat", ",", "parts", ",", "axis", "=", "[", "concat_axis", "]", "*", "n", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.DenseInitializer.__call__": [[305, 307], ["NotImplementedError"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "reduced_dims", ",", "new_dims", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\"not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.VarianceScalingInitializer.__init__": [[333, 339], ["mode.lower", "distribution.lower"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.lower", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.lower"], ["def", "__init__", "(", "self", ",", "scale", "=", "1.0", ",", "\n", "mode", "=", "\"fan_in\"", ",", "\n", "distribution", "=", "\"normal\"", ")", ":", "\n", "    ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "mode", "=", "mode", ".", "lower", "(", ")", "\n", "self", ".", "distribution", "=", "distribution", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.VarianceScalingInitializer.__call__": [[340, 370], ["mesh_tensorflow.ops_with_redefined_builtins.list_product", "mesh_tensorflow.ops_with_redefined_builtins.list_product", "tensorflow.truncated_normal_initializer", "layers.unit_scaling_convention", "max", "layers.unit_scaling_convention", "max", "tensorflow.random_uniform_initializer", "ValueError", "ValueError", "layers.unit_scaling_convention", "max", "ValueError", "ValueError", "float"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.list_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention"], ["", "def", "__call__", "(", "self", ",", "reduced_dims", ",", "new_dims", ")", ":", "\n", "    ", "fan_in", "=", "mtf", ".", "list_product", "(", "d", ".", "size", "for", "d", "in", "reduced_dims", ")", "\n", "fan_out", "=", "mtf", ".", "list_product", "(", "d", ".", "size", "for", "d", "in", "new_dims", ")", "\n", "scale", "=", "self", ".", "scale", "\n", "if", "self", ".", "mode", "==", "\"fan_in\"", ":", "\n", "      ", "if", "not", "unit_scaling_convention", "(", ")", ":", "\n", "        ", "scale", "/=", "max", "(", "1.", ",", "fan_in", ")", "\n", "", "", "elif", "self", ".", "mode", "==", "\"fan_out\"", ":", "\n", "      ", "if", "unit_scaling_convention", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unit scaling convention only works with \\\"fan_in\\\"\"", ")", "\n", "", "scale", "/=", "max", "(", "1.", ",", "fan_out", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"fan_avg\"", ":", "\n", "      ", "if", "unit_scaling_convention", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unit scaling convention only works with \\\"fan_in\\\"\"", ")", "\n", "", "scale", "/=", "max", "(", "1.", ",", "float", "(", "fan_in", "+", "fan_out", ")", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Invalid `mode` argument: \"", "\n", "\"expected on of {\\\"fan_in\\\", \\\"fan_out\\\", \\\"fan_avg\\\"} \"", "\n", "\"but got %s\"", "%", "(", "self", ".", "mode", ",", ")", ")", "\n", "", "stddev", "=", "scale", "**", "0.5", "\n", "if", "self", ".", "distribution", "==", "\"normal\"", ":", "\n", "      ", "return", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "", "elif", "self", ".", "distribution", "==", "\"uniform\"", ":", "\n", "      ", "limit", "=", "stddev", "*", "3.", "**", "0.5", "\n", "return", "tf", ".", "random_uniform_initializer", "(", "minval", "=", "-", "limit", ",", "maxval", "=", "limit", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Invalid `distribution` argument: \"", "\n", "\"expected one of {\\\"normal\\\", \\\"uniform\\\"} \"", "\n", "\"but got %s\"", "%", "(", "self", ".", "distribution", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.summary_for_clip_activation_gradient": [[30, 44], ["mesh_tensorflow.ops_with_redefined_builtins.scalar_summary", "mesh_tensorflow.ops_with_redefined_builtins.scalar_summary", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.reduce_max", "mesh_tensorflow.ops_with_redefined_builtins.sqrt", "mesh_tensorflow.ops_with_redefined_builtins.scalar_summary", "mesh_tensorflow.ops_with_redefined_builtins.scalar_summary", "mesh_tensorflow.ops_with_redefined_builtins.scalar_summary", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.reduce_max", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.square", "mesh_tensorflow.ops_with_redefined_builtins.square", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_max", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_max", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean"], ["def", "summary_for_clip_activation_gradient", "(", "t", ",", "name", "=", "None", ",", "batch_dims", "=", "None", ")", ":", "\n", "  ", "\"\"\"Summary for clip activation gradient.\"\"\"", "\n", "\n", "mtf", ".", "scalar_summary", "(", "\"mean/\"", ",", "mtf", ".", "reduce_mean", "(", "t", ")", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"max/\"", ",", "mtf", ".", "reduce_max", "(", "t", ")", ")", "\n", "\n", "if", "batch_dims", ":", "\n", "    ", "rms_batch", "=", "mtf", ".", "sqrt", "(", "\n", "mtf", ".", "reduce_mean", "(", "mtf", ".", "square", "(", "t", ")", ",", "output_shape", "=", "batch_dims", ")", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"rms_mean/%s\"", "%", "name", ",", "mtf", ".", "reduce_mean", "(", "rms_batch", ")", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"rms_max/%s\"", "%", "name", ",", "mtf", ".", "reduce_max", "(", "rms_batch", ")", ")", "\n", "mtf", ".", "scalar_summary", "(", "\n", "\"rms_var/%s\"", "%", "name", ",", "\n", "mtf", ".", "reduce_mean", "(", "mtf", ".", "square", "(", "rms_batch", "-", "mtf", ".", "reduce_mean", "(", "rms_batch", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention": [[46, 106], ["None"], "function", ["None"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "unit_scaling_convention", "(", "value", "=", "False", ")", ":", "\n", "  ", "\"\"\"Turn this on with gin to enable the unit-scaling convention.\n\n  TODO(noam): turn this comment into a position paper and post to arxiv\n\n  Under the unit-scaling convention, all weights are initialized with unit\n  variance, and the outputs of most contractions (matmul/einsum operations) are\n  divided by the square-root of the sizes of the contracting dimensions.\n\n  This differs from the typical inverse-square-root weight-initalization\n  convention often attributed to\n  http://proceedings.mlr.press/v9/glorot10a.html\n  in which weights are typically initialized according to a distribution with\n  mean zero and standard-deviation equal to the inverse-square-root of the\n  contracting dimension(s).\n\n  Under both conventions, the purpose of the inverse-square-root scaling is so\n  that activations in a layer should be scaled similarly to the activations in\n  the previous layer.  (Typically, models are initialized so that activations in\n  all layers should have RMS=O(1)).\n\n  The difference between the two conventions is whether this scaling happens in\n  the parameters (their way), or as an explicit multiplier on the activations\n  (our way).\n\n  In our opinion, parameter-scaling (their way) has three main disadvantages:\n\n  1. Optimizers need to be aware of differently-scaled parameters.  This is\n  because the learning-rates of adaptive optimizers represent target step-sizes\n  for the parameters.  The desired step size for a parameter logically depends\n  on the scale of the parameter itself, and so one typically needs to lower the\n  learning-rate when the layers get bigger and the parameters get consequently\n  smaller.  Under the unit-scaling convention, this is unnecessary, since all\n  parameters are on the same unit scale.\n\n  2. It is often unwieldy from an engineering standpoint to communicate to both\n  the variable initializers and to the optimizer what the scale of the variable\n  should be.  Typically, the variable initializer guesses this by inferring from\n  the dimension order which dimension of the variable might represent\n  contracting dimensions.  This is highly error-prone.\n\n  3. Sometimes contractions happen without being associated with parameters, as\n  in neural attention.  It may be important here too to divide by the square\n  root of the contracting dimensions, in order to maintain activation scale.\n  See the discussion in section 3.2.1 of https://arxiv.org/abs/1706.03762\n  Being in the habit of scaling the outputs of contractions in this way makes\n  it more likely to remember to do the same thing in these circumstances.\n\n  Note: When switching to the unit-scaling convention, it is probably necessary\n  to raise the learning rate, since larger parameters need larger updates.  An\n  exception is when using Adafactor, which by default scales the updates\n  relative to the scale of the current parameter values.\n\n  Args:\n    value: a boolean\n  Returns:\n    a boolean\n  \"\"\"", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum": [[108, 127], ["mesh_tensorflow.ops_with_redefined_builtins.einsum", "layers.unit_scaling_convention", "set", "sum", "mesh_tensorflow.ops_with_redefined_builtins.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention"], ["", "def", "us_einsum", "(", "xs", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Einsum with optional unit-scaling convention.\n\n  If the unit-scaling convention is enabled, then divide the output by\n  the square-root of the product of the contracting dimensions.\n\n  Args:\n    xs: a list of mtf.Tensor\n    *args: arguments to mtf.einsum\n    **kwargs: keyword arguments to mtf.einsum\n  Returns:\n    a mtf.Tensor\n  \"\"\"", "\n", "y", "=", "mtf", ".", "einsum", "(", "xs", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "unit_scaling_convention", "(", ")", ":", "\n", "    ", "all_input_dims", "=", "set", "(", "sum", "(", "[", "x", ".", "shape", ".", "dims", "for", "x", "in", "xs", "]", ",", "[", "]", ")", ")", "\n", "reduced_dims", "=", "[", "d", "for", "d", "in", "all_input_dims", "if", "d", "not", "in", "y", ".", "shape", ".", "dims", "]", "\n", "y", "*=", "mtf", ".", "Shape", "(", "reduced_dims", ")", ".", "size", "**", "-", "0.5", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense": [[129, 209], ["range", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "isinstance", "mesh_tensorflow.ops_with_redefined_builtins.VariableDType", "tensorflow.logging.warning", "len", "layers.get_dense_kernel_weights", "tensorflow.variable_scope", "layers.us_einsum", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.rename_dimension", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "activation", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "tensorflow.get_variable_scope", "tensorflow.zeros_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.get_dense_kernel_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["", "def", "dense", "(", "x", ",", "\n", "new_dims", ",", "\n", "reduced_dims", "=", "None", ",", "\n", "expert_dims", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation", "=", "None", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ",", "\n", "variable_dtype", "=", "None", ",", "\n", "kernel_initializer", "=", "None", ",", "\n", "kernel_weights", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Dense layer doing (kernel*x + bias) computation.\n\n  Args:\n    x: a mtf.Tensor of shape [..., reduced_dims].\n    new_dims: a list of mtf.Dimension.\n    reduced_dims: a list of mtf.Dimensions of x to be reduced.\n      If omitted (deprecated interface), we reduce the last dimension.\n    expert_dims: an optional list of mtf.Dimension which represent different\n      experts. Different experts get different weights.\n    use_bias: a boolean, whether to add bias.\n    activation: an optional function from mtf.Tensor to mtf.Tensor\n    master_dtype: a tf.dtype (deprecated - use variable_dtype)\n    slice_dtype: a tf.dtype (deprecated - use variable_dtype)\n    variable_dtype: a mtf.VariableDType\n    kernel_initializer: an initializer for kernel variable.\n    kernel_weights: mtf.Tensor weights matrix to use for dense computation\n    name: a string used for tf.variable_scope.\n\n  Returns:\n    a mtf.Tensor of shape [..., new_dims].\n  \"\"\"", "\n", "if", "not", "isinstance", "(", "new_dims", ",", "list", ")", ":", "\n", "    ", "new_dims", "=", "[", "new_dims", "]", "\n", "\n", "", "if", "variable_dtype", "is", "None", ":", "\n", "    ", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "master_dtype", ",", "slice_dtype", ",", "x", ".", "dtype", ")", "\n", "\n", "", "if", "expert_dims", "is", "None", ":", "\n", "    ", "expert_dims", "=", "[", "]", "\n", "", "if", "reduced_dims", "is", "None", ":", "\n", "    ", "tf", ".", "logging", ".", "warning", "(", "\n", "\"Deprecation warning - it is recommended to pass reduced_dims \"", "\n", "\"explicitly to mtf.layers.dense() so as not to depend on dimension \"", "\n", "\"order. To silence this warning, explicitly pass \"", "\n", "\"reduced_dims=x.shape.dims[-1:] (in scope %s)\"", "\n", "%", "tf", ".", "get_variable_scope", "(", ")", ".", "name", ")", "\n", "reduced_dims", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", "\n", "# if any reduced dims have the same names as new dims, first change these", "\n", "#  dimension names in the input so as to avoid name conflict in the weight", "\n", "#  matrix.", "\n", "", "reduced_dims", "=", "reduced_dims", "[", ":", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "reduced_dims", ")", ")", ":", "\n", "    ", "if", "reduced_dims", "[", "i", "]", "in", "new_dims", ":", "\n", "      ", "original_name", "=", "reduced_dims", "[", "i", "]", ".", "name", "\n", "tmp_name", "=", "\"_\"", "+", "original_name", "\n", "reduced_dims", "[", "i", "]", "=", "mtf", ".", "Dimension", "(", "tmp_name", ",", "reduced_dims", "[", "i", "]", ".", "size", ")", "\n", "x", "=", "mtf", ".", "rename_dimension", "(", "x", ",", "original_name", ",", "tmp_name", ")", "\n", "", "", "output_shape", "=", "mtf", ".", "Shape", "(", "[", "d", "for", "d", "in", "x", ".", "shape", ".", "dims", "if", "d", "not", "in", "reduced_dims", "]", "+", "\n", "new_dims", ")", "\n", "if", "not", "kernel_weights", ":", "\n", "    ", "kernel_weights", "=", "get_dense_kernel_weights", "(", "x", ",", "new_dims", ",", "reduced_dims", ",", "\n", "expert_dims", ",", "kernel_initializer", ",", "\n", "name", ",", "variable_dtype", ",", "\n", "master_dtype", ",", "slice_dtype", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"dense\"", ")", ":", "\n", "    ", "y", "=", "us_einsum", "(", "[", "x", ",", "kernel_weights", "]", ",", "output_shape", ")", "\n", "if", "use_bias", ":", "\n", "      ", "b", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\n", "\"bias\"", ",", "\n", "mtf", ".", "Shape", "(", "expert_dims", "+", "new_dims", ")", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "dtype", "=", "variable_dtype", ")", "\n", "y", "+=", "b", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "      ", "y", "=", "activation", "(", "y", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.get_dense_kernel_weights": [[211, 254], ["mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.VariableDType", "tensorflow.variable_scope", "isinstance", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.cast", "layers.VarianceScalingInitializer", "kernel_initializer."], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "", "def", "get_dense_kernel_weights", "(", "x", ",", "\n", "new_dims", ",", "\n", "reduced_dims", ",", "\n", "expert_dims", ",", "\n", "kernel_initializer", ",", "\n", "name", "=", "None", ",", "\n", "variable_dtype", "=", "None", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ")", ":", "\n", "  ", "\"\"\"Create w matrix variable.\n\n  Args:\n    x: a mtf.Tensor.\n    new_dims: a list of mtf.Dimension.\n    reduced_dims: a list of mtf.Dimensions of x to be reduced.\n    expert_dims: an optional list of mtf.Dimension which represent different\n      experts. Different experts get different weights.\n    kernel_initializer: an initializer for kernel variable.\n    name: a string used for tf.variable_scope.\n    variable_dtype: a mtf.VariableDType\n    master_dtype: a tf.dtype (deprecated - use variable_dtype)\n    slice_dtype: a tf.dtype (deprecated - use variable_dtype)\n\n  Returns:\n    a mtf.Tensor.\n  \"\"\"", "\n", "if", "variable_dtype", "is", "None", ":", "\n", "    ", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "master_dtype", ",", "slice_dtype", ",", "x", ".", "dtype", ")", "\n", "", "w_shape", "=", "mtf", ".", "Shape", "(", "expert_dims", "+", "reduced_dims", "+", "new_dims", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"dense\"", ")", ":", "\n", "    ", "if", "kernel_initializer", "is", "None", ":", "\n", "      ", "kernel_initializer", "=", "VarianceScalingInitializer", "(", ")", "\n", "", "if", "isinstance", "(", "kernel_initializer", ",", "DenseInitializer", ")", ":", "\n", "      ", "kernel_initializer", "=", "kernel_initializer", "(", "reduced_dims", ",", "new_dims", ")", "\n", "", "w", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\n", "\"kernel\"", ",", "\n", "w_shape", ",", "\n", "initializer", "=", "kernel_initializer", ",", "\n", "dtype", "=", "variable_dtype", ")", "\n", "w", "=", "mtf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense_product": [[256, 296], ["len", "enumerate", "functools.reduce", "isinstance", "factors.append", "isinstance", "layers.dense", "getattr"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["", "def", "dense_product", "(", "x", ",", "\n", "reduced_dims", ",", "\n", "new_dims", ",", "\n", "activation_functions", "=", "None", ",", "\n", "name", "=", "\"dense_product\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Component-wise product of multiple dense layers.\n\n  e.g. if activation_functions=[\"linear\", \"sigmoid\"], then this implements\n  Gated Linear Units https://arxiv.org/pdf/1612.08083.pdf\n\n  Args:\n    x: a Tensor\n    reduced_dims: a list of Dimensions.\n    new_dims: a list of Dimensions.\n    activation_functions: a list of activation functions (or a singleton)\n      Each can be a either:\n        - a callable function from Tensor to Tensor\n        - a string function name from namespace mtf)\n        - None or \"linear\", meaning no activation function\n    name: an optional string\n    **kwargs: additional kwargs for mtf.layers.dense()\n  \"\"\"", "\n", "if", "not", "isinstance", "(", "activation_functions", ",", "list", ")", ":", "\n", "    ", "activation_functions", "=", "[", "activation_functions", "]", "\n", "", "num_factors", "=", "len", "(", "activation_functions", ")", "\n", "factors", "=", "[", "]", "\n", "for", "i", ",", "activation", "in", "enumerate", "(", "activation_functions", ")", ":", "\n", "    ", "if", "activation", "==", "\"linear\"", ":", "\n", "      ", "activation", "=", "None", "\n", "", "elif", "isinstance", "(", "activation", ",", "str", ")", ":", "\n", "      ", "activation", "=", "getattr", "(", "mtf", ",", "activation", ")", "\n", "", "factors", ".", "append", "(", "\n", "dense", "(", "x", ",", "\n", "reduced_dims", "=", "reduced_dims", ",", "\n", "new_dims", "=", "new_dims", ",", "\n", "activation", "=", "activation", ",", "\n", "name", "=", "\"%s_%d\"", "%", "(", "name", ",", "i", ")", "if", "num_factors", ">", "1", "else", "name", ",", "\n", "**", "kwargs", ")", ")", "\n", "", "return", "functools", ".", "reduce", "(", "mtf", ".", "multiply", ",", "factors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv1d": [[372, 414], ["mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.reshape", "layers.conv2d", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.reshape", "mesh_tensorflow.ops_with_redefined_builtins.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "", "", "def", "conv1d", "(", "x", ",", "output_dim", ",", "filter_size", "=", "3", ",", "stride", "=", "1", ",", "**", "kw_args", ")", ":", "\n", "  ", "\"\"\"1D Convolution.\n\n  x can have multiple batch dims. The last dimension is considered the channel\n  dimension and the second-last dimension is the width dimension.\n\n  This function supports either \"SAME\" padding or \"VALID\" padding. The padding\n  type is specified by kwarg `padding` to conv2d, which transform the input\n  tensor x as follows:\n\n  padding=\"SAME\"\n  [batch, fake_height, length, d_model]\n    -> [batch, fake_height, length, output_dim]\n\n  padding=\"VALID\"\n  [batch, fake_height, length, d_model]\n    -> [batch, fake_height, output_length, output_dim]\n\n  Args:\n    x: a mtf.Tensor of format NWC where N can be multiple batch dimensions.\n    output_dim: a mtf.Dimension, indicating the output channel dimension.\n    filter_size: a positive integer, the filter width.\n    stride: a positive integer, the stride.\n    **kw_args: optional keyword arguments to mtf.layers.conv2d.\n\n  Returns:\n    a mtf.Tensor of format NWO, where O is the output dimension.\n  \"\"\"", "\n", "fake_height_dim", "=", "mtf", ".", "Dimension", "(", "\"fake_height\"", ",", "1", ")", "\n", "x", "=", "mtf", ".", "reshape", "(", "\n", "x", ",", "mtf", ".", "Shape", "(", "x", ".", "shape", ".", "dims", "[", ":", "-", "2", "]", "+", "[", "fake_height_dim", "]", "+", "x", ".", "shape", ".", "dims", "[", "-", "2", ":", "]", ")", ")", "\n", "output", "=", "conv2d", "(", "\n", "x", ",", "\n", "output_dim", ",", "\n", "filter_size", "=", "(", "1", ",", "filter_size", ")", ",", "\n", "strides", "=", "(", "1", ",", "stride", ")", ",", "\n", "**", "kw_args", ")", "\n", "\n", "output_length_dim", "=", "output", ".", "shape", ".", "dims", "[", "-", "2", "]", "\n", "output_shape", "=", "output", ".", "shape", ".", "dims", "[", ":", "-", "3", "]", "+", "[", "output_length_dim", "]", "+", "[", "output_dim", "]", "\n", "output_shape", "=", "mtf", ".", "Shape", "(", "output_shape", ")", "\n", "return", "mtf", ".", "reshape", "(", "output", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers._depthwise_conv1d_hack": [[416, 465], ["tensorflow.variable_scope", "range", "mesh_tensorflow.ops_with_redefined_builtins.shift", "layers.dense", "layers.VarianceScalingInitializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["", "def", "_depthwise_conv1d_hack", "(", "x", ",", "\n", "depth_dim", ",", "\n", "length_dim", ",", "\n", "min_relative_pos", "=", "-", "1", ",", "\n", "max_relative_pos", "=", "1", ",", "\n", "name", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "initializer_scale", "=", "1.0", ",", "\n", "kernel_depth_weights", "=", "None", ")", ":", "\n", "  ", "\"\"\"Hacky version of a 1d depthwise convolution.\n\n  Args:\n    x: a mtf.Tensor\n    depth_dim: mtf.Dimension,\n    length_dim: mtf.Dimension,\n    min_relative_pos: int, min relative position,\n    max_relative_pos: int, max relative position,\n    name: str, variable_scope name,\n    use_bias: Bool, whether to use bias,\n    initializer_scale: int, initalizer scale,\n    kernel_depth_weights: an optional list of kernel weight tensors. The list\n    contains one element for each relative position in the kernel. Each element\n    has a width equal to the depth over which the separable conv operation is\n    being \"separated\"\n\n  Returns:\n    an mtf.Tensor\n  \"\"\"", "\n", "\n", "ret", "=", "0", "\n", "kernel_size", "=", "max_relative_pos", "-", "min_relative_pos", "+", "1", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"depthwise_conv_hack\"", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "kernel_size", ")", ":", "\n", "      ", "relative_pos", "=", "min_relative_pos", "+", "i", "\n", "shifted_input", "=", "mtf", ".", "shift", "(", "x", ",", "-", "relative_pos", ",", "length_dim", ",", "wrap", "=", "False", ")", "\n", "ret", "+=", "dense", "(", "\n", "shifted_input", ",", "\n", "new_dims", "=", "[", "]", ",", "\n", "reduced_dims", "=", "[", "]", ",", "\n", "expert_dims", "=", "[", "depth_dim", "]", ",", "\n", "kernel_weights", "=", "kernel_depth_weights", "[", "i", "]", "\n", "if", "kernel_depth_weights", "else", "None", ",", "\n", "name", "=", "\"depthwise_dense_%d\"", "%", "i", ",", "\n", "use_bias", "=", "use_bias", "and", "(", "i", "==", "0", ")", ",", "\n", "kernel_initializer", "=", "VarianceScalingInitializer", "(", "\n", "scale", "=", "initializer_scale", "/", "kernel_size", ")", ")", "\n", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.separable_conv1d": [[467, 523], ["tensorflow.variable_scope", "layers._depthwise_conv1d_hack", "layers.dense", "layers.VarianceScalingInitializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers._depthwise_conv1d_hack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["", "def", "separable_conv1d", "(", "x", ",", "\n", "output_dim", ",", "\n", "min_relative_pos", "=", "-", "1", ",", "\n", "max_relative_pos", "=", "1", ",", "\n", "depthwise_filter_initializer_scale", "=", "1.0", ",", "\n", "pointwise_filter_initializer_scale", "=", "1.0", ",", "\n", "name", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_depth_weights", "=", "None", ")", ":", "\n", "  ", "\"\"\"1-D convolution with separable filters.\n\n  The filter size will be `max_relative_pos - min_relative_pos + 1`.\n\n  Args:\n    x: a mtf.Tensor of format NWC.\n    output_dim: a mtf.Dimension, indicating the output channel dimension.\n    min_relative_pos: an integer, the inclusive minimum relative positive of the\n      depthwise filter, where a relative position of zero means the left end of\n      the filter aligns with the left end of the input.\n    max_relative_pos: an integer, the inclusive maximum relative position of the\n      depthwise filter, where a relative position of zero means the right end of\n      the filter aligns with the right end of the input.\n    depthwise_filter_initializer_scale: a positive float, the scale of the\n      initializer for the depthwise filter.\n    pointwise_filter_initializer_scale: a positive float, the scale of the\n      initializer for the pointwise filter.\n    name: a string used for tf.variable_scope.\n    use_bias: a bool, whether to use bias in the convolutions.\n    kernel_depth_weights: an optional list of kernel weight tensors. The list\n    contains one element for each relative position in the kernel. Each element\n    has a width equal to the dimension over which the separable conv operation\n    is being \"separated\"\n\n  Returns:\n    a mtf.Tensor of format NWO, where O is the output dimension.\n  \"\"\"", "\n", "depth_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "length_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "2", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"separable_conv1d\"", ")", ":", "\n", "    ", "depthwise", "=", "_depthwise_conv1d_hack", "(", "\n", "x", ",", "\n", "depth_dim", "=", "depth_dim", ",", "\n", "length_dim", "=", "length_dim", ",", "\n", "min_relative_pos", "=", "min_relative_pos", ",", "\n", "max_relative_pos", "=", "max_relative_pos", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "initializer_scale", "=", "depthwise_filter_initializer_scale", ",", "\n", "kernel_depth_weights", "=", "kernel_depth_weights", ")", "\n", "return", "dense", "(", "\n", "depthwise", ",", "\n", "new_dims", "=", "[", "output_dim", "]", ",", "\n", "reduced_dims", "=", "[", "depth_dim", "]", ",", "\n", "name", "=", "\"pointwise_dense\"", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "VarianceScalingInitializer", "(", "\n", "scale", "=", "pointwise_filter_initializer_scale", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d": [[525, 556], ["mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.VariableDType", "list", "mesh_tensorflow.ops_with_redefined_builtins.Conv2dOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["", "", "def", "conv2d", "(", "x", ",", "output_dim", ",", "filter_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"SAME\"", ",", "filter_initializer", "=", "None", ",", "\n", "variable_dtype", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"2D Convolution.\n\n  Args:\n    x: a mtf.Tensor of format NHWC.\n    output_dim: a mtf.Dimension, indicating the output channel dimension.\n    filter_size: a list or tuple in format [filter_height, filter_width].\n    strides: a list or tuple in format [stride_height, stride_width].\n    padding: either \"SAME\" or \"VALID\".\n    filter_initializer: the initializer for tf.get_variable.\n    variable_dtype: a mtf.VariableDType\n    name: a string used for tf.variable_scope.\n\n  Returns:\n    a mtf.Tensor.\n  \"\"\"", "\n", "fh_dim", "=", "mtf", ".", "Dimension", "(", "\"fh\"", ",", "filter_size", "[", "0", "]", ")", "\n", "fw_dim", "=", "mtf", ".", "Dimension", "(", "\"fw\"", ",", "filter_size", "[", "1", "]", ")", "\n", "input_dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"conv2d\"", ")", ":", "\n", "    ", "if", "variable_dtype", "is", "None", ":", "\n", "      ", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "activation_dtype", "=", "x", ".", "dtype", ")", "\n", "", "conv_filter", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\"kernel\"", ",", "[", "fh_dim", ",", "fw_dim", ",", "input_dim", ",", "output_dim", "]", ",", "\n", "initializer", "=", "filter_initializer", ",", "dtype", "=", "variable_dtype", ")", "\n", "# Pad stride in batch and channel dimensions.", "\n", "strides", "=", "[", "1", "]", "+", "list", "(", "strides", ")", "+", "[", "1", "]", "\n", "\n", "return", "mtf", ".", "Conv2dOperation", "(", "x", ",", "conv_filter", ",", "strides", ",", "padding", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d_with_blocks": [[558, 618], ["layers.conv2d", "layers.conv2d", "NotImplementedError", "mesh_tensorflow.ops_with_redefined_builtins.halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.pad"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad"], ["", "", "def", "conv2d_with_blocks", "(", "\n", "x", ",", "output_dim", ",", "filter_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"SAME\"", ",", "\n", "h_blocks_dim", "=", "None", ",", "w_blocks_dim", "=", "None", ",", "filter_initializer", "=", "None", ",", "\n", "variable_dtype", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"2D Convolution with spatial partitioning.\n\n  Spatial partitioning is implemented by decomposing the image into blocks.\n  Block dimensions represented as h_blocks_dim and w_blocks_dim can be split\n  along the mesh axis. If split, then we do a halo exchange where each block\n  receives the part of the image from its left and right neighbors necessary to\n  do the convolution. Exchange can involve complete or partial blocks depending\n  on the filter height and width.\n\n  Currently, only \"SAME\" padding with dilation rate of 1 is supported.\n\n  Args:\n    x: a Tensor of shape\n        [batch, h_blocks_dim, w_blocks_dim, h_dim, w_dim, in_channels_dim]\n    output_dim: a mtf.Dimension, indicating the output channel dimension.\n    filter_size: a list or tuple in format [filter_height, filter_width].\n    strides: a list or tuple in format [stride_height, stride_width].\n    padding: string, \"SAME\". The type of padding algorithm to use.\n        \"Valid\" is not currently supported.\n    h_blocks_dim: Dimension representing number of height blocks.\n    w_blocks_dim: Dimension representing number of witdh blocks.\n    filter_initializer: the initializer for tf.get_variable.\n    variable_dtype: a mtf.VariableDType\n    name: a name for the operation (optional).\n\n  Returns:\n    A Tensor of shape\n      [batch, h_blocks_dim, w_blocks_dim, h_dim, w_dim, out_channels_dim]\n  \"\"\"", "\n", "# If h_blocks_dim and w_blocks_dim are not split, directly call conv2d.", "\n", "if", "h_blocks_dim", "is", "None", "and", "w_blocks_dim", "is", "None", ":", "\n", "    ", "return", "conv2d", "(", "x", ",", "output_dim", ",", "\n", "filter_size", ",", "strides", ",", "padding", ",", "filter_initializer", ",", "\n", "variable_dtype", ",", "name", ")", "\n", "\n", "", "assert", "filter_size", "[", "0", "]", "%", "2", "==", "1", "\n", "assert", "filter_size", "[", "1", "]", "%", "2", "==", "1", "\n", "\n", "# Padding 'VALID' is not supported yet.", "\n", "if", "padding", "!=", "\"SAME\"", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\"conv2d_with_blocks requires padding=SAME\"", ")", "\n", "\n", "# Halo exchange for h_blocks and w_blocks.", "\n", "", "h_dim", ",", "w_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "3", ":", "-", "1", "]", "\n", "for", "blocks_dim", ",", "block_size_dim", ",", "halo_size", "in", "[", "\n", "(", "h_blocks_dim", ",", "h_dim", ",", "filter_size", "[", "0", "]", "//", "2", ")", ",", "\n", "(", "w_blocks_dim", ",", "w_dim", ",", "filter_size", "[", "1", "]", "//", "2", ")", "]", ":", "\n", "    ", "if", "halo_size", ">", "0", ":", "\n", "      ", "if", "blocks_dim", "is", "not", "None", ":", "\n", "        ", "x", "=", "mtf", ".", "halo_exchange", "(", "x", ",", "blocks_dim", ",", "block_size_dim", ",", "halo_size", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "mtf", ".", "pad", "(", "x", ",", "[", "halo_size", ",", "halo_size", "]", ",", "block_size_dim", ".", "name", ")", "\n", "", "", "", "return", "conv2d", "(", "x", ",", "output_dim", ",", "\n", "filter_size", ",", "strides", ",", "\"VALID\"", ",", "filter_initializer", ",", "\n", "variable_dtype", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d_transpose": [[620, 655], ["mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.VariableDType", "list", "mesh_tensorflow.ops_with_redefined_builtins.Conv2dTransposeOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["", "def", "conv2d_transpose", "(", "x", ",", "output_dim", ",", "\n", "filter_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "\"SAME\"", ",", "filter_initializer", "=", "None", ",", "\n", "variable_dtype", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"2D Transposed Convolution.\n\n  Args:\n    x: a mtf.Tensor of format NHWC.\n    output_dim: a mtf.Dimension, indicating the output channel dimension.\n    filter_size: a list or tuple in format\n        [filter_height, filter_width]. Only filter_size of (2, 2) is tested.\n    strides: a list or tuple in format\n        [stride_height, stride_width]. Only strides of (2, 2) is tested.\n    padding: either \"SAME\" or \"VALID\".\n    filter_initializer: the initializer for tf.get_variable.\n    variable_dtype: a mtf.VariableDType\n    name: a string used for tf.variable_scope.\n\n  Returns:\n    a mtf.Tensor.\n  \"\"\"", "\n", "fh_dim", "=", "mtf", ".", "Dimension", "(", "\"fh\"", ",", "filter_size", "[", "0", "]", ")", "\n", "fw_dim", "=", "mtf", ".", "Dimension", "(", "\"fw\"", ",", "filter_size", "[", "1", "]", ")", "\n", "input_dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"conv2d_transpose\"", ")", ":", "\n", "    ", "if", "variable_dtype", "is", "None", ":", "\n", "      ", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "activation_dtype", "=", "x", ".", "dtype", ")", "\n", "", "conv_filter", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\"kernel\"", ",", "[", "fh_dim", ",", "fw_dim", ",", "output_dim", ",", "input_dim", "]", ",", "\n", "initializer", "=", "filter_initializer", ",", "dtype", "=", "variable_dtype", ")", "\n", "# Pad stride in batch and channel dimensions.", "\n", "strides", "=", "[", "1", "]", "+", "list", "(", "strides", ")", "+", "[", "1", "]", "\n", "\n", "return", "mtf", ".", "Conv2dTransposeOperation", "(", "\n", "x", ",", "conv_filter", ",", "strides", ",", "padding", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d_transpose_with_blocks": [[657, 724], ["layers.conv2d_transpose", "layers.conv2d_transpose", "NotImplementedError", "mesh_tensorflow.ops_with_redefined_builtins.halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.pad"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d_transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d_transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad"], ["", "", "def", "conv2d_transpose_with_blocks", "(", "\n", "x", ",", "output_dim", ",", "filter_size", "=", "(", "2", ",", "2", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "\n", "h_blocks_dim", "=", "None", ",", "w_blocks_dim", "=", "None", ",", "filter_initializer", "=", "None", ",", "\n", "variable_dtype", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"2D Transposed Convolution with spatial partitioning.\n\n  Spatial partitioning is implemented by decomposing the image into blocks.\n  Block dimensions represented as h_blocks_dim and w_blocks_dim can be split\n  along the mesh axis. If split, then we do a halo exchange where each block\n  receives the part of the image from its left and right neighbors necessary to\n  do the convolution. Exchange can involve complete or partial blocks depending\n  on the filter depth and height.\n\n  Currently, only \"SAME\" padding with dilation rate of 1 is supported. Only\n  splitting along the depth and height dimensions are supported.\n\n  Args:\n    x: a Tensor of shape\n        [batch, h_blocks_dim, w_blocks_dim, h_dim, w_dim, in_channel_dim]\n    output_dim: a mtf.Dimension, indicating the output channel dimension.\n    filter_size: a list or tuple in format\n        [filter_height, filter_width]. Only filter_size of (2, 2) is tested.\n    strides: a list or tuple in format\n        [stride_height, stride_width]. Only strides of (2, 2) is tested.\n    padding: string, \"SAME\". The type of padding algorithm to use.\n        \"Valid\" is not currently supported.\n    h_blocks_dim: Dimension representing number of height blocks.\n    w_blocks_dim: Dimension representing number of width blocks.\n    filter_initializer: the initializer for tf.get_variable.\n    variable_dtype: a mtf.VariableDType\n    name: a name for the operation (optional).\n\n  Returns:\n    A Tensor of shape\n      [batch, h_blocks_dim, w_blocks_dim, h_dim, w_dim, out_channels_dim]\n  \"\"\"", "\n", "# If h_blocks_dim and w_blocks_dim are not split, directly call conv2d_trans.", "\n", "if", "h_blocks_dim", "is", "None", "and", "w_blocks_dim", "is", "None", ":", "\n", "    ", "return", "conv2d_transpose", "(", "\n", "x", ",", "output_dim", ",", "filter_size", ",", "strides", ",", "padding", ",", "filter_initializer", ",", "\n", "variable_dtype", ",", "name", ")", "\n", "\n", "# Now only supports even-sized filters.", "\n", "", "assert", "filter_size", "[", "0", "]", "%", "2", "==", "0", "\n", "assert", "filter_size", "[", "1", "]", "%", "2", "==", "0", "\n", "\n", "# Padding 'VALID' is not supported yet.", "\n", "if", "padding", "!=", "\"SAME\"", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\n", "\"conv2d_transpose_with_blocks requires padding=SAME\"", ")", "\n", "\n", "# Halo exchange for h_blocks and w_blocks.", "\n", "# TODO(lehou): figure out the halo_size in general cases.", "\n", "", "h_dim", ",", "w_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "3", ":", "-", "1", "]", "\n", "for", "blocks_dim", ",", "block_size_dim", ",", "halo_size", "in", "[", "\n", "(", "h_blocks_dim", ",", "h_dim", ",", "filter_size", "[", "0", "]", "//", "2", "-", "1", ")", ",", "\n", "(", "w_blocks_dim", ",", "w_dim", ",", "filter_size", "[", "1", "]", "//", "2", "-", "1", ")", "]", ":", "\n", "    ", "if", "halo_size", ">", "0", ":", "\n", "      ", "if", "blocks_dim", "is", "not", "None", ":", "\n", "        ", "x", "=", "mtf", ".", "halo_exchange", "(", "x", ",", "blocks_dim", ",", "block_size_dim", ",", "halo_size", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "mtf", ".", "pad", "(", "x", ",", "[", "halo_size", ",", "halo_size", "]", ",", "block_size_dim", ".", "name", ")", "\n", "\n", "", "", "", "return", "conv2d_transpose", "(", "\n", "x", ",", "output_dim", ",", "filter_size", ",", "strides", ",", "\"VALID\"", ",", "filter_initializer", ",", "\n", "variable_dtype", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d": [[726, 761], ["mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.VariableDType", "list", "mesh_tensorflow.ops_with_redefined_builtins.Conv3dOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["", "def", "conv3d", "(", "x", ",", "output_dim", ",", "filter_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "\"SAME\"", ",", "\n", "filter_initializer", "=", "None", ",", "\n", "variable_dtype", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"3D Convolution.\n\n  Args:\n    x: a mtf.Tensor of format NDHWC.\n    output_dim: a mtf.Dimension, indicating the output channel dimension.\n    filter_size: a list or tuple in format\n        [filter_depth, filter_height, filter_width].\n    strides: a list or tuple in format\n        [stride_depth, stride_height, stride_width].\n    padding: either \"SAME\" or \"VALID\".\n    filter_initializer: the initializer for tf.get_variable.\n    variable_dtype: a mtf.VariableDType\n    name: a string used for tf.variable_scope.\n\n  Returns:\n    a mtf.Tensor.\n  \"\"\"", "\n", "fd_dim", "=", "mtf", ".", "Dimension", "(", "\"fd\"", ",", "filter_size", "[", "0", "]", ")", "\n", "fh_dim", "=", "mtf", ".", "Dimension", "(", "\"fh\"", ",", "filter_size", "[", "1", "]", ")", "\n", "fw_dim", "=", "mtf", ".", "Dimension", "(", "\"fw\"", ",", "filter_size", "[", "2", "]", ")", "\n", "input_dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"conv3d\"", ")", ":", "\n", "    ", "if", "variable_dtype", "is", "None", ":", "\n", "      ", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "activation_dtype", "=", "x", ".", "dtype", ")", "\n", "", "conv_filter", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\"kernel\"", ",", "[", "fd_dim", ",", "fh_dim", ",", "fw_dim", ",", "input_dim", ",", "output_dim", "]", ",", "\n", "initializer", "=", "filter_initializer", ",", "dtype", "=", "variable_dtype", ")", "\n", "# Pad stride in batch and channel dimensions.", "\n", "strides", "=", "[", "1", "]", "+", "list", "(", "strides", ")", "+", "[", "1", "]", "\n", "\n", "return", "mtf", ".", "Conv3dOperation", "(", "x", ",", "conv_filter", ",", "strides", ",", "padding", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d_with_blocks": [[763, 832], ["mesh_tensorflow.ops_with_redefined_builtins.pad", "layers.conv3d", "layers.conv3d", "NotImplementedError", "mesh_tensorflow.ops_with_redefined_builtins.halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.pad"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad"], ["", "", "def", "conv3d_with_blocks", "(", "\n", "x", ",", "output_dim", ",", "filter_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "\"SAME\"", ",", "\n", "d_blocks_dim", "=", "None", ",", "h_blocks_dim", "=", "None", ",", "filter_initializer", "=", "None", ",", "\n", "variable_dtype", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"3D Convolution with spatial partitioning.\n\n  Spatial partitioning is implemented by decomposing the image into blocks.\n  Block dimensions represented as d_blocks_dim and h_blocks_dim can be split\n  along the mesh axis. If split, then we do a halo exchange where each block\n  receives the part of the image from its left and right neighbors necessary to\n  do the convolution. Exchange can involve complete or partial blocks depending\n  on the filter depth and height.\n\n  Currently, only \"SAME\" padding with dilation rate of 1 is supported. Only\n  splitting along the depth and height dimensions are supported.\n\n  Args:\n    x: a Tensor of shape\n        [batch, d_blocks_dim, h_blocks_dim, d_dim, h_dim, w_dim, in_channel_dim]\n    output_dim: a mtf.Dimension, indicating the output channel dimension.\n    filter_size: a list or tuple in format\n        [filter_depth, filter_height, filter_width].\n    strides: a list or tuple in format\n        [stride_depth, stride_height, stride_width].\n    padding: string, \"SAME\". The type of padding algorithm to use.\n        \"Valid\" is not currently supported.\n    d_blocks_dim: Dimension representing number of depth blocks.\n    h_blocks_dim: Dimension representing number of height blocks.\n    filter_initializer: the initializer for tf.get_variable.\n    variable_dtype: a mtf.VariableDType\n    name: a name for the operation (optional).\n\n  Returns:\n    A Tensor of shape\n      [batch, d_blocks_dim, h_blocks_dim, w_blocks_dim,\n       d_dim, h_dim, w_dim, out_channels_dim]\n  \"\"\"", "\n", "# If d_blocks_dim and h_blocks_dim are not split, directly call conv3d.", "\n", "if", "d_blocks_dim", "is", "None", "and", "h_blocks_dim", "is", "None", ":", "\n", "    ", "return", "conv3d", "(", "x", ",", "output_dim", ",", "\n", "filter_size", ",", "strides", ",", "padding", ",", "filter_initializer", ",", "\n", "variable_dtype", ",", "name", ")", "\n", "\n", "", "assert", "filter_size", "[", "0", "]", "%", "2", "==", "1", "\n", "assert", "filter_size", "[", "1", "]", "%", "2", "==", "1", "\n", "assert", "filter_size", "[", "2", "]", "%", "2", "==", "1", "\n", "\n", "# Padding 'VALID' is not supported yet.", "\n", "if", "padding", "!=", "\"SAME\"", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\"conv3d_with_blocks requires padding=SAME\"", ")", "\n", "\n", "# Halo exchange for d_blocks and h_blocks.", "\n", "", "d_dim", ",", "h_dim", ",", "w_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "4", ":", "-", "1", "]", "\n", "for", "blocks_dim", ",", "block_size_dim", ",", "halo_size", "in", "[", "\n", "(", "d_blocks_dim", ",", "d_dim", ",", "filter_size", "[", "0", "]", "//", "2", ")", ",", "\n", "(", "h_blocks_dim", ",", "h_dim", ",", "filter_size", "[", "1", "]", "//", "2", ")", "]", ":", "\n", "    ", "if", "halo_size", ">", "0", ":", "\n", "      ", "if", "blocks_dim", "is", "not", "None", ":", "\n", "        ", "x", "=", "mtf", ".", "halo_exchange", "(", "x", ",", "blocks_dim", ",", "block_size_dim", ",", "halo_size", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "mtf", ".", "pad", "(", "x", ",", "[", "halo_size", ",", "halo_size", "]", ",", "block_size_dim", ".", "name", ")", "\n", "\n", "# Pad w dimension with zeros.", "\n", "", "", "", "x", "=", "mtf", ".", "pad", "(", "x", ",", "[", "filter_size", "[", "2", "]", "//", "2", ",", "filter_size", "[", "2", "]", "//", "2", "]", ",", "\n", "dim_name", "=", "w_dim", ".", "name", ",", "name", "=", "\"conv3d_pad_w_dim\"", ")", "\n", "return", "conv3d", "(", "x", ",", "output_dim", ",", "\n", "filter_size", ",", "strides", ",", "\"VALID\"", ",", "filter_initializer", ",", "\n", "variable_dtype", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d_transpose": [[834, 872], ["mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.VariableDType", "list", "mesh_tensorflow.ops_with_redefined_builtins.Conv3dTransposeOperation"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["", "def", "conv3d_transpose", "(", "x", ",", "output_dim", ",", "\n", "filter_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "\"SAME\"", ",", "filter_initializer", "=", "None", ",", "\n", "variable_dtype", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"3D Transposed Convolution.\n\n  Args:\n    x: a mtf.Tensor of format NDHWC.\n    output_dim: a mtf.Dimension, indicating the output channel dimension.\n    filter_size: a list or tuple in format\n        [filter_depth, filter_height, filter_width].\n        Only filter_size of (2, 2, 2) is tested.\n    strides: a list or tuple in format\n        [stride_depth, stride_height, stride_width].\n        Only strides of (2, 2, 2) is tested.\n    padding: either \"SAME\" or \"VALID\".\n    filter_initializer: the initializer for tf.get_variable.\n    variable_dtype: a mtf.VariableDType\n    name: a string used for tf.variable_scope.\n\n  Returns:\n    a mtf.Tensor.\n  \"\"\"", "\n", "fd_dim", "=", "mtf", ".", "Dimension", "(", "\"fd\"", ",", "filter_size", "[", "0", "]", ")", "\n", "fh_dim", "=", "mtf", ".", "Dimension", "(", "\"fh\"", ",", "filter_size", "[", "1", "]", ")", "\n", "fw_dim", "=", "mtf", ".", "Dimension", "(", "\"fw\"", ",", "filter_size", "[", "2", "]", ")", "\n", "input_dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"conv3d_transpose\"", ")", ":", "\n", "    ", "if", "variable_dtype", "is", "None", ":", "\n", "      ", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "activation_dtype", "=", "x", ".", "dtype", ")", "\n", "", "conv_filter", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\"kernel\"", ",", "[", "fd_dim", ",", "fh_dim", ",", "fw_dim", ",", "output_dim", ",", "input_dim", "]", ",", "\n", "initializer", "=", "filter_initializer", ",", "dtype", "=", "variable_dtype", ")", "\n", "# Pad stride in batch and channel dimensions.", "\n", "strides", "=", "[", "1", "]", "+", "list", "(", "strides", ")", "+", "[", "1", "]", "\n", "\n", "return", "mtf", ".", "Conv3dTransposeOperation", "(", "\n", "x", ",", "conv_filter", ",", "strides", ",", "padding", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d_transpose_with_blocks": [[874, 948], ["mesh_tensorflow.ops_with_redefined_builtins.pad", "layers.conv3d_transpose", "layers.conv3d_transpose", "NotImplementedError", "mesh_tensorflow.ops_with_redefined_builtins.halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.pad"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d_transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d_transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad"], ["", "", "def", "conv3d_transpose_with_blocks", "(", "\n", "x", ",", "output_dim", ",", "filter_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "\n", "d_blocks_dim", "=", "None", ",", "h_blocks_dim", "=", "None", ",", "filter_initializer", "=", "None", ",", "\n", "variable_dtype", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"3D Transposed Convolution with spatial partitioning.\n\n  Spatial partitioning is implemented by decomposing the image into blocks.\n  Block dimensions represented as d_blocks_dim and h_blocks_dim can be split\n  along the mesh axis. If split, then we do a halo exchange where each block\n  receives the part of the image from its left and right neighbors necessary to\n  do the convolution. Exchange can involve complete or partial blocks depending\n  on the filter depth and height.\n\n  Currently, only \"SAME\" padding with dilation rate of 1 is supported. Only\n  splitting along the depth and height dimensions are supported.\n\n  Args:\n    x: a Tensor of shape\n        [batch, d_blocks_dim, h_blocks_dim, d_dim, h_dim, w_dim, in_channel_dim]\n    output_dim: a mtf.Dimension, indicating the output channel dimension.\n    filter_size: a list or tuple in format\n        [filter_depth, filter_height, filter_width].\n        Only filter_size of (2, 2, 2) is tested.\n    strides: a list or tuple in format\n        [stride_depth, stride_height, stride_width].\n        Only strides of (2, 2, 2) is tested.\n    padding: string, \"SAME\". The type of padding algorithm to use.\n        \"Valid\" is not currently supported.\n    d_blocks_dim: Dimension representing number of depth blocks.\n    h_blocks_dim: Dimension representing number of height blocks.\n    filter_initializer: the initializer for tf.get_variable.\n    variable_dtype: a mtf.VariableDType\n    name: a name for the operation (optional).\n\n  Returns:\n    A Tensor of shape\n      [batch, d_blocks_dim, h_blocks_dim, w_blocks_dim,\n       d_dim, h_dim, w_dim, out_channels_dim]\n  \"\"\"", "\n", "# If d_blocks_dim and h_blocks_dim are not split, directly call conv3d_trans.", "\n", "if", "d_blocks_dim", "is", "None", "and", "h_blocks_dim", "is", "None", ":", "\n", "    ", "return", "conv3d_transpose", "(", "\n", "x", ",", "output_dim", ",", "filter_size", ",", "strides", ",", "padding", ",", "filter_initializer", ",", "\n", "variable_dtype", ",", "name", ")", "\n", "\n", "# Now only supports even-sized filters.", "\n", "", "assert", "filter_size", "[", "0", "]", "%", "2", "==", "0", "\n", "assert", "filter_size", "[", "1", "]", "%", "2", "==", "0", "\n", "assert", "filter_size", "[", "2", "]", "%", "2", "==", "0", "\n", "\n", "# Padding 'VALID' is not supported yet.", "\n", "if", "padding", "!=", "\"SAME\"", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\n", "\"conv3d_transpose_with_blocks requires padding=SAME\"", ")", "\n", "\n", "# Halo exchange for d_blocks and h_blocks.", "\n", "# TODO(lehou): figure out the halo_size in general cases.", "\n", "", "d_dim", ",", "h_dim", ",", "w_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "4", ":", "-", "1", "]", "\n", "for", "blocks_dim", ",", "block_size_dim", ",", "halo_size", "in", "[", "\n", "(", "d_blocks_dim", ",", "d_dim", ",", "filter_size", "[", "0", "]", "//", "2", "-", "1", ")", ",", "\n", "(", "h_blocks_dim", ",", "h_dim", ",", "filter_size", "[", "1", "]", "//", "2", "-", "1", ")", "]", ":", "\n", "    ", "if", "halo_size", ">", "0", ":", "\n", "      ", "if", "blocks_dim", "is", "not", "None", ":", "\n", "        ", "x", "=", "mtf", ".", "halo_exchange", "(", "x", ",", "blocks_dim", ",", "block_size_dim", ",", "halo_size", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "mtf", ".", "pad", "(", "x", ",", "[", "halo_size", ",", "halo_size", "]", ",", "block_size_dim", ".", "name", ")", "\n", "\n", "# Pad w dimension with zeros.", "\n", "", "", "", "x", "=", "mtf", ".", "pad", "(", "x", ",", "[", "filter_size", "[", "2", "]", "//", "2", "-", "1", ",", "filter_size", "[", "2", "]", "//", "2", "-", "1", "]", ",", "\n", "dim_name", "=", "w_dim", ".", "name", ",", "name", "=", "\"conv3d_trans_pad_w_dim\"", ")", "\n", "return", "conv3d_transpose", "(", "\n", "x", ",", "output_dim", ",", "filter_size", ",", "strides", ",", "\"VALID\"", ",", "filter_initializer", ",", "\n", "variable_dtype", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.corr": [[950, 981], ["tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.rename_dimension", "mesh_tensorflow.ops_with_redefined_builtins.rename_dimension", "variance", "variance", "mesh_tensorflow.ops_with_redefined_builtins.matmul", "mesh_tensorflow.ops_with_redefined_builtins.matmul", "mesh_tensorflow.ops_with_redefined_builtins.sqrt", "mesh_tensorflow.ops_with_redefined_builtins.reduce_sum", "mesh_tensorflow.ops_with_redefined_builtins.square"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square"], ["", "def", "corr", "(", "x", ",", "dim", ",", "epsilon", "=", "1e-20", ",", "name", "=", "\"pearson_correlation\"", ")", ":", "\n", "  ", "\"\"\"Compute correlation along dimension dim, equiv to tfp.stats.correlation.\n\n  It treats the dim Dimension as the random event axis, and all the other dims\n  as the sample axis. Pearson correlation is computed between random events in\n  dim Dimension, and marginalized over the other dims.\n\n  Example usage:\n    inputs = tf.random_normal([batch, channels])\n    mtf_inputs = mtf.import_tf_tensor(\n        mesh, inputs, shape=mtf.Shape([batch_dim, channels_dim]))\n    correlation = corr(mtf_inputs, dim=channels_dim)\n\n  Args:\n    x: a mtf.Tensor whose shape contains dim.\n    dim: a mtf.Dimension.\n    epsilon: a small floating point number for numerical stability.\n    name: a string used for tf.variable_scope.\n\n  Returns:\n    a mtf.Tensor with the shape of [dim, dim].\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "    ", "mean", "=", "mtf", ".", "reduce_mean", "(", "x", ",", "output_shape", "=", "[", "dim", "]", ")", "\n", "dim_name", "=", "dim", ".", "name", "\n", "x1", "=", "mtf", ".", "rename_dimension", "(", "x", "-", "mean", ",", "dim_name", ",", "f\"{dim_name}_1\"", ")", "\n", "x2", "=", "mtf", ".", "rename_dimension", "(", "x", "-", "mean", ",", "dim_name", ",", "f\"{dim_name}_2\"", ")", "\n", "variance", "=", "lambda", "z", ":", "mtf", ".", "sqrt", "(", "# pylint: disable=g-long-lambda", "\n", "mtf", ".", "reduce_sum", "(", "mtf", ".", "square", "(", "z", ")", ",", "output_shape", "=", "z", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ")", ")", "+", "epsilon", "\n", "v1", ",", "v2", "=", "variance", "(", "x1", ")", ",", "variance", "(", "x2", ")", "\n", "return", "mtf", ".", "matmul", "(", "x1", ",", "x2", ")", "/", "mtf", ".", "matmul", "(", "v1", ",", "v2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.layer_norm": [[983, 1013], ["tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.square", "mesh_tensorflow.ops_with_redefined_builtins.rsqrt", "tensorflow.ones_initializer", "tensorflow.zeros_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt"], ["", "", "def", "layer_norm", "(", "x", ",", "dim", ",", "epsilon", "=", "1e-6", ",", "name", "=", "\"layer_prepostprocess\"", ")", ":", "\n", "  ", "\"\"\"Layer normalization over dimension dim.\n\n  Args:\n    x: a mtf.Tensor whose shape contains dim.\n    dim: a mtf.Dimension\n    epsilon: a floating point number\n    name: a string used for tf.variable_scope.\n\n  Returns:\n    a mtf.Tensor with same shape as x.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", "+", "\"/layer_norm\"", ")", ":", "\n", "    ", "scale", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\n", "\"layer_norm_scale\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "dim", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "\n", "activation_dtype", "=", "x", ".", "dtype", ")", "\n", "bias", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\n", "\"layer_norm_bias\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "dim", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "activation_dtype", "=", "x", ".", "dtype", ")", "\n", "reduced_shape", "=", "x", ".", "shape", "-", "dim", "\n", "mean", "=", "mtf", ".", "reduce_mean", "(", "x", ",", "output_shape", "=", "reduced_shape", ")", "\n", "variance", "=", "mtf", ".", "reduce_mean", "(", "mtf", ".", "square", "(", "x", "-", "mean", ")", ",", "output_shape", "=", "reduced_shape", ")", "\n", "norm_x", "=", "(", "x", "-", "mean", ")", "*", "mtf", ".", "rsqrt", "(", "variance", "+", "epsilon", ")", "\n", "return", "norm_x", "*", "scale", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.batch_norm": [[1015, 1093], ["tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "bn_stats_update_ops.append", "bn_stats_update_ops.append", "tensorflow.zeros_initializer", "tensorflow.random_normal_initializer", "tensorflow.ones_initializer", "mesh_tensorflow.ops_with_redefined_builtins.square", "mesh_tensorflow.ops_with_redefined_builtins.rsqrt", "mesh_tensorflow.ops_with_redefined_builtins.assign", "mesh_tensorflow.ops_with_redefined_builtins.assign", "mesh_tensorflow.ops_with_redefined_builtins.rsqrt"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt"], ["", "", "def", "batch_norm", "(", "x", ",", "is_training", ",", "momentum", ",", "epsilon", "=", "1e-9", ",", "\n", "dims_idx_start", "=", "0", ",", "dims_idx_end", "=", "-", "1", ",", "\n", "init_zero", "=", "False", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Batch normalization.\n\n  Args:\n    x: a mtf.Tensor whose shape contains [batch_dim, ..., dim]\n    is_training: a boolean, whether mode is training.\n    momentum: a floating point number, specifying batch norm decay value.\n    epsilon: a floating point number.\n    dims_idx_start: an integer. Dimension with indices in\n      [dims_idx_start, dims_idx_end - 1] will be normalized.\n    dims_idx_end: an integer. Dimension with indices in\n      [dims_idx_start, dims_idx_end - 1] will be normalized.\n    init_zero: a boolean, whether to initialize scale with 0's or 1's.\n    name: a string used for tf.variable_scope.\n\n  Returns:\n    a mtf.Tensor with same shape as x.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"batch_norm\"", ",", "values", "=", "[", "x", "]", ")", ":", "\n", "    ", "if", "init_zero", ":", "\n", "      ", "gamma_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", "\n", "", "else", ":", "\n", "      ", "gamma_initializer", "=", "tf", ".", "ones_initializer", "(", ")", "\n", "\n", "", "norm_dim", "=", "x", ".", "shape", ".", "dims", "[", "dims_idx_start", ":", "dims_idx_end", "]", "\n", "reduced_shape", "=", "x", ".", "shape", "-", "norm_dim", "\n", "\n", "scale", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\n", "\"batch_norm_scale\"", ",", "\n", "reduced_shape", ",", "\n", "initializer", "=", "gamma_initializer", ",", "\n", "activation_dtype", "=", "x", ".", "dtype", ")", "\n", "bias", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\n", "\"batch_norm_bias\"", ",", "\n", "reduced_shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "activation_dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "moving_mean", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\"bn_moving_mean\"", ",", "reduced_shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1.0", ")", ",", "\n", "activation_dtype", "=", "x", ".", "dtype", ",", "\n", "trainable", "=", "False", ")", "\n", "moving_variance", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\"bn_moving_variance\"", ",", "\n", "reduced_shape", ",", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "\n", "activation_dtype", "=", "x", ".", "dtype", ",", "\n", "trainable", "=", "False", ")", "\n", "\n", "# At training time, calculate mean and variance and normalize across batch", "\n", "# dim.", "\n", "if", "is_training", ":", "\n", "      ", "mean", "=", "mtf", ".", "reduce_mean", "(", "x", ",", "output_shape", "=", "reduced_shape", ")", "\n", "variance", "=", "mtf", ".", "reduce_mean", "(", "\n", "mtf", ".", "square", "(", "x", "-", "mean", ")", ",", "output_shape", "=", "reduced_shape", ")", "\n", "\n", "norm_x", "=", "(", "x", "-", "mean", ")", "*", "mtf", ".", "rsqrt", "(", "variance", "+", "epsilon", ")", "\n", "\n", "# Update running mean and running variance.", "\n", "# TODO(lehou): do not return update_ops; handle them inside MTF.", "\n", "bn_stats_update_ops", "=", "[", "]", "\n", "bn_stats_update_ops", ".", "append", "(", "mtf", ".", "assign", "(", "\n", "moving_mean", ",", "momentum", "*", "moving_mean", "+", "(", "1", "-", "momentum", ")", "*", "mean", ",", "\n", "name", "=", "\"{}/bn_mean_update\"", ".", "format", "(", "name", ")", ")", ")", "\n", "bn_stats_update_ops", ".", "append", "(", "mtf", ".", "assign", "(", "\n", "moving_variance", ",", "\n", "momentum", "*", "moving_variance", "+", "(", "1", "-", "momentum", ")", "*", "variance", ",", "\n", "name", "=", "\"{}/bn_var_update\"", ".", "format", "(", "name", ")", ")", ")", "\n", "", "else", ":", "\n", "# At eval and test time, use the running mean and variance.", "\n", "      ", "norm_x", "=", "(", "x", "-", "moving_mean", ")", "*", "mtf", ".", "rsqrt", "(", "moving_variance", "+", "epsilon", ")", "\n", "bn_stats_update_ops", "=", "[", "]", "\n", "\n", "", "return", "(", "norm_x", "*", "scale", ")", "+", "bias", ",", "bn_stats_update_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.softmax_cross_entropy_with_logits": [[1095, 1151], ["mesh_tensorflow.ops_with_redefined_builtins.reduce_logsumexp", "mesh_tensorflow.ops_with_redefined_builtins.negative", "mesh_tensorflow.ops_with_redefined_builtins.one_hot", "ValueError", "mesh_tensorflow.ops_with_redefined_builtins.reduce_sum", "set", "set().difference", "ValueError", "set", "set", "ValueError", "mesh_tensorflow.ops_with_redefined_builtins.square", "set"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_logsumexp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.negative", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square"], ["", "", "def", "softmax_cross_entropy_with_logits", "(", "logits", ",", "targets", ",", "vocab_dim", ",", "z_loss", "=", "0.0", ")", ":", "\n", "  ", "\"\"\"Per-example softmax loss.\n\n  `logits` is a Tensor with floating-point dtype, containing the predicted\n  relative log probabilities of the classes.\n\n  Either hard targets or soft targets are supported.\n\n  In the case of hard targets, `targets` is a Tensor with integer dtype whose\n  values are in the range [0, vocab_dim.size).  `targets` should have the same\n  set of dimensions as `logits`, but without `vocab_dim`.\n\n  In the case of soft targets, `targets` is a Tensor with floating point dtype\n  and the same dimensions as `logits.  Reducing `targets` along `vocab_dim`\n  should result in all ones.\n\n  if z_loss is nonzero, we add a loss equal to z_loss*log(z)^2, where z is the\n  partition function.  Example value: z_loss=1e-4.  Two uses of z_loss are:\n  - To keep the logits from drifting too far from zero, which can cause\n     unacceptable roundoff errors in bfloat16.\n  - To encourage the logits to be normalized log-probabilities.\n\n  Args:\n    logits: a mtf.Tensor whose shape contains vocab_dim\n    targets: a mtf.Tensor representing hard or soft targets (see comments)\n    vocab_dim: a mtf.Dimension\n    z_loss: a float\n\n  Returns:\n    a mtf.Tensor whose shape is equal to logits.shape - vocab_dim\n\n  Raises:\n    ValueError: if the shapes do not match.\n  \"\"\"", "\n", "if", "targets", ".", "dtype", ".", "is_integer", ":", "\n", "# hard targets", "\n", "    ", "if", "(", "set", "(", "targets", ".", "shape", ".", "dims", ")", "\n", "!=", "set", "(", "logits", ".", "shape", ".", "dims", ")", ".", "difference", "(", "[", "vocab_dim", "]", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"softmax_cross_entropy_with_logits with hard targets \"", "\n", "\"dims in targets=%s should be dims in logits=%s other than \"", "\n", "\"vocab_dim=%s\"", "%", "(", "targets", ",", "logits", ",", "vocab_dim", ")", ")", "\n", "", "targets", "=", "mtf", ".", "one_hot", "(", "targets", ",", "vocab_dim", ",", "dtype", "=", "logits", ".", "dtype", ")", "\n", "", "elif", "set", "(", "targets", ".", "shape", ".", "dims", ")", "!=", "set", "(", "logits", ".", "shape", ".", "dims", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"softmax_cross_entropy_with_logits with soft targets \"", "\n", "\"dims in targets=%s should be dims in logits=%s\"", "%", "(", "targets", ",", "logits", ")", ")", "\n", "", "if", "vocab_dim", "not", "in", "logits", ".", "shape", ".", "dims", ":", "\n", "    ", "raise", "ValueError", "(", "\"vocab_dim must be in logits.shape.dims\"", ")", "\n", "", "log_z", "=", "mtf", ".", "reduce_logsumexp", "(", "logits", ",", "vocab_dim", ")", "\n", "log_softmax", "=", "logits", "-", "log_z", "\n", "loss", "=", "mtf", ".", "negative", "(", "\n", "mtf", ".", "reduce_sum", "(", "log_softmax", "*", "targets", ",", "reduced_dim", "=", "vocab_dim", ")", ")", "\n", "if", "z_loss", "!=", "0", ":", "\n", "    ", "loss", "+=", "z_loss", "*", "mtf", ".", "square", "(", "log_z", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.sigmoid_cross_entropy_with_logits": [[1153, 1173], ["ValueError", "mesh_tensorflow.ops_with_redefined_builtins.log", "mesh_tensorflow.ops_with_redefined_builtins.relu", "mesh_tensorflow.ops_with_redefined_builtins.exp", "mesh_tensorflow.ops_with_redefined_builtins.abs"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.exp"], ["", "def", "sigmoid_cross_entropy_with_logits", "(", "logits", ",", "targets", ")", ":", "\n", "  ", "\"\"\"Sigmoid cross-entropy loss.\n\n  Args:\n    logits: a mtf.Tensor\n    targets: a mtf.Tensor with the same shape as logits\n\n  Returns:\n    a mtf.Tensor whose shape is equal to logits.shape\n\n  Raises:\n    ValueError: if the shapes do not match.\n  \"\"\"", "\n", "if", "logits", ".", "shape", "!=", "targets", ".", "shape", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"logits shape must equal targets shape\"", "\n", "\"logits=%s targets=%s\"", "%", "(", "logits", ".", "to_string", ",", "targets", ".", "to_string", ")", ")", "\n", "", "x", "=", "logits", "\n", "z", "=", "targets", "\n", "return", "mtf", ".", "relu", "(", "x", ")", "-", "x", "*", "z", "+", "mtf", ".", "log", "(", "1", "+", "mtf", ".", "exp", "(", "-", "mtf", ".", "abs", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.weights_nonzero": [[1175, 1179], ["mesh_tensorflow.ops_with_redefined_builtins.cwise", "tensorflow.cast", "tensorflow.not_equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cwise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal"], ["", "def", "weights_nonzero", "(", "targets", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "  ", "def", "my_fn", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "x", ",", "0", ")", ",", "dtype", ")", "\n", "", "return", "mtf", ".", "cwise", "(", "my_fn", ",", "[", "targets", "]", ",", "output_dtype", "=", "dtype", ",", "name", "=", "\"weights_nonzero\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense_relu_dense": [[1181, 1215], ["tensorflow.variable_scope", "layers.dense", "mesh_tensorflow.ops_with_redefined_builtins.dropout", "layers.dense"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["", "def", "dense_relu_dense", "(", "x", ",", "\n", "hidden_channels", ",", "\n", "is_training", ",", "\n", "dropout", "=", "0.0", ",", "\n", "dropout_broadcast_dims", "=", "None", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Hidden layer with ReLU activation followed by linear projection.\n\n  The output has the same number of channels as the input.\n\n  Args:\n    x: a mtf.Tensor\n    hidden_channels: a mtf.Dimension - channels in the hidden layer\n    is_training: a boolean, set to true while training\n    dropout: an optional float\n    dropout_broadcast_dims: an optional list of mtf.Dimension\n    master_dtype: a tf.dtype\n    slice_dtype: a tf.dtype\n    name: an optional string\n\n  Returns:\n    a mtf.Tensor with the same shape as x.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"dense_relu_dense\"", ")", ":", "\n", "    ", "io_channels", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "h", "=", "dense", "(", "x", ",", "hidden_channels", ",", "\n", "use_bias", "=", "False", ",", "activation", "=", "mtf", ".", "relu", ",", "\n", "master_dtype", "=", "master_dtype", ",", "slice_dtype", "=", "slice_dtype", ",", "name", "=", "\"wi\"", ")", "\n", "h", "=", "mtf", ".", "dropout", "(", "h", ",", "is_training", ",", "1.0", "-", "dropout", ",", "\n", "noise_shape", "=", "h", ".", "shape", "-", "dropout_broadcast_dims", ")", "\n", "return", "dense", "(", "h", ",", "io_channels", ",", "use_bias", "=", "False", ",", "activation", "=", "None", ",", "\n", "master_dtype", "=", "master_dtype", ",", "slice_dtype", "=", "slice_dtype", ",", "\n", "name", "=", "\"wo\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.local_1d_halo_exchange": [[1217, 1234], ["mesh_tensorflow.ops_with_redefined_builtins.left_halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.left_halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.pad", "mesh_tensorflow.ops_with_redefined_builtins.pad", "mesh_tensorflow.ops_with_redefined_builtins.pad", "mesh_tensorflow.ops_with_redefined_builtins.pad"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.left_halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.left_halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad"], ["", "", "def", "local_1d_halo_exchange", "(", "k", ",", "v", ",", "num_w_blocks", ",", "w_dim", ",", "mask_right", ")", ":", "\n", "  ", "\"\"\"Halo exchange for keys and values for Local 1D attention.\"\"\"", "\n", "if", "num_w_blocks", "is", "not", "None", ":", "\n", "    ", "if", "mask_right", ":", "\n", "      ", "k", "=", "mtf", ".", "left_halo_exchange", "(", "k", ",", "num_w_blocks", ",", "w_dim", ",", "w_dim", ".", "size", ")", "\n", "v", "=", "mtf", ".", "left_halo_exchange", "(", "v", ",", "num_w_blocks", ",", "w_dim", ",", "w_dim", ".", "size", ")", "\n", "", "else", ":", "\n", "      ", "k", "=", "mtf", ".", "halo_exchange", "(", "k", ",", "num_w_blocks", ",", "w_dim", ",", "w_dim", ".", "size", ")", "\n", "v", "=", "mtf", ".", "halo_exchange", "(", "v", ",", "num_w_blocks", ",", "w_dim", ",", "w_dim", ".", "size", ")", "\n", "", "", "else", ":", "\n", "    ", "if", "mask_right", ":", "\n", "      ", "k", "=", "mtf", ".", "pad", "(", "k", ",", "[", "w_dim", ",", "None", "]", ",", "w_dim", ".", "name", ")", "\n", "v", "=", "mtf", ".", "pad", "(", "v", ",", "[", "w_dim", ",", "None", "]", ",", "w_dim", ".", "name", ")", "\n", "", "else", ":", "\n", "      ", "k", "=", "mtf", ".", "pad", "(", "k", ",", "[", "w_dim", ",", "w_dim", "]", ",", "w_dim", ".", "name", ")", "\n", "v", "=", "mtf", ".", "pad", "(", "v", ",", "[", "w_dim", ",", "w_dim", "]", ",", "w_dim", ".", "name", ")", "\n", "", "", "return", "k", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.local_self_attention_spatial_blocks": [[1236, 1314], ["tensorflow.variable_scope", "layers.multihead_attention_vars", "mesh_tensorflow.ops_with_redefined_builtins.rename_dimension", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "layers.local_1d_halo_exchange", "layers.dot_product_attention", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "layers.attention_bias_local_block", "mesh_tensorflow.ops_with_redefined_builtins.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention_vars", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.local_1d_halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dot_product_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.attention_bias_local_block"], ["", "def", "local_self_attention_spatial_blocks", "(", "\n", "query_antecedent", ",", "\n", "kv_channels", ",", "\n", "heads", ",", "\n", "is_training", ",", "\n", "memory_w_dim", "=", "None", ",", "\n", "mask_right", "=", "False", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Attention to the source position and a neighborhood to the left or right.\n\n  The sequence is divided into blocks of length block_size.\n  Attention for a given query position can only see memory positions\n  less than or equal to the query position, in the corresponding block\n  and the previous block.\n\n  Args:\n    query_antecedent: a mtf.Tensor with shape\n      [batch, num_h_blocks, num_w_blocks, h_dim, w_dim, io_channels]\n      must have the same size as query_length, but a different name.\n    kv_channels: a mtf.Dimension (the size of the key and value vectors)\n    heads: a mtf.Dimension (the number of heads)\n    is_training: a bool, is true if training, else false.\n    memory_w_dim: mtf Dimension, for the memory width block.\n    mask_right: bool, flag specifying whether we mask out attention to the right\n      for the decoder.\n    master_dtype: a tf.dtype\n    slice_dtype: a tf.dtype\n    name: an optional string.\n\n  Returns:\n    a Tensor of shape\n        [batch, num_h_blocks, num_w_blocks, h_dim, w_dim, io_channels]\n\n  Raises:\n    ValueError: if channels or depth don't match.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"multihead_attention\"", ",", "\n", "values", "=", "[", "query_antecedent", "]", ")", ":", "\n", "\n", "    ", "w_dim", ",", "io_channels", "=", "query_antecedent", ".", "shape", ".", "dims", "[", "-", "2", ":", "]", "\n", "batch", ",", "num_w_blocks", "=", "query_antecedent", ".", "shape", ".", "dims", "[", ":", "2", "]", "\n", "wq", ",", "wk", ",", "wv", ",", "wo", "=", "multihead_attention_vars", "(", "\n", "query_antecedent", ".", "mesh", ",", "heads", ",", "io_channels", ",", "kv_channels", ",", "\n", "master_dtype", ",", "slice_dtype", ",", "query_antecedent", ".", "dtype", ")", "\n", "\n", "# Rename dimensions for the memory height and width.", "\n", "memory_antecedent", "=", "mtf", ".", "rename_dimension", "(", "\n", "query_antecedent", ",", "w_dim", ".", "name", ",", "\"memory_\"", "+", "w_dim", ".", "name", ")", "\n", "memory_w_dim", "=", "memory_antecedent", ".", "shape", ".", "dims", "[", "-", "2", "]", "\n", "\n", "# Call einsum over the query and memory to get query q, keys k and values v.", "\n", "q", "=", "mtf", ".", "einsum", "(", "\n", "[", "query_antecedent", ",", "wq", "]", ",", "\n", "mtf", ".", "Shape", "(", "[", "batch", ",", "heads", ",", "num_w_blocks", ",", "w_dim", ",", "kv_channels", "]", ")", ")", "\n", "k", "=", "mtf", ".", "einsum", "(", "\n", "[", "memory_antecedent", ",", "wk", "]", ",", "\n", "mtf", ".", "Shape", "(", "[", "batch", ",", "heads", ",", "num_w_blocks", ",", "memory_w_dim", ",", "kv_channels", "]", ")", ")", "\n", "v", "=", "mtf", ".", "einsum", "(", "\n", "[", "memory_antecedent", ",", "wv", "]", ",", "\n", "mtf", ".", "Shape", "(", "[", "batch", ",", "heads", ",", "num_w_blocks", ",", "memory_w_dim", ",", "kv_channels", "]", ")", ")", "\n", "\n", "# Halo exchange for memory blocks.", "\n", "k", ",", "v", "=", "local_1d_halo_exchange", "(", "k", ",", "v", ",", "num_w_blocks", ",", "memory_w_dim", ",", "mask_right", ")", "\n", "\n", "# Calculate the causal mask to avoid peeking into the future. We compute", "\n", "# this once and reuse it for all blocks since the block_size is known.", "\n", "mask", "=", "None", "\n", "if", "mask_right", ":", "\n", "      ", "mask", "=", "attention_bias_local_block", "(", "\n", "query_antecedent", ".", "mesh", ",", "w_dim", ",", "memory_w_dim", ")", "\n", "\n", "", "output", "=", "dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ",", "is_training", "=", "is_training", ")", "\n", "\n", "return", "mtf", ".", "einsum", "(", "\n", "[", "output", ",", "wo", "]", ",", "mtf", ".", "Shape", "(", "[", "batch", ",", "num_w_blocks", ",", "w_dim", ",", "io_channels", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.masked_local_attention_1d": [[1316, 1411], ["tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "max", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.reshape", "mesh_tensorflow.ops_with_redefined_builtins.reshape", "mesh_tensorflow.ops_with_redefined_builtins.reshape", "mesh_tensorflow.ops_with_redefined_builtins.left_halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.left_halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.range", "layers.dot_product_attention", "mesh_tensorflow.ops_with_redefined_builtins.reshape", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "layers.multihead_attention_vars", "return_kv.extend", "mesh_tensorflow.ops_with_redefined_builtins.range", "mesh_tensorflow.ops_with_redefined_builtins.cast", "mesh_tensorflow.ops_with_redefined_builtins.cast", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.greater", "mesh_tensorflow.ops_with_redefined_builtins.less_equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.left_halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.left_halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dot_product_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention_vars", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less_equal"], ["", "", "def", "masked_local_attention_1d", "(", "x", ",", "\n", "kv_channels", ",", "\n", "heads", ",", "\n", "is_training", ",", "\n", "window_size", "=", "128", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ",", "\n", "length_per_split", "=", "None", ",", "\n", "return_kv", "=", "None", ",", "\n", "params", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Attention to the source position and a neighborhood to the left of it.\n\n  Attention for a given query position p can only see memory positions\n  in the range (p - window_size, p].\n\n  Args:\n    x: a mtf.Tensor with shape batch_dims + [length, io_channels]\n    kv_channels: a mtf.Dimension (the size of the key and value vectors)\n    heads: a mtf.Dimension (the number of heads)\n    is_training: a bool, is True if training else False.\n    window_size: an integer\n    master_dtype: a tf.dtype (deprecated - use params arg)\n    slice_dtype: a tf.dtype (deprecated - use params arg)\n    length_per_split: an optional integer indicating the part of the length\n      dimension per processor.  You can omit if the length dimension is not\n      split.\n    return_kv: an optional list onto which to append the computed k and v.\n    params: an optional quadruple of Tensors (see multihead_attention_params())\n    name: an optional string.\n\n  Returns:\n    a Tensor with the same shape as x\n\n  Raises:\n    ValueError: if channels or depth don't match.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"masked_local_attention_1d\"", ",", "values", "=", "[", "x", "]", ")", ":", "\n", "\n", "    ", "batch_dims", "=", "x", ".", "shape", ".", "dims", "[", ":", "-", "2", "]", "\n", "length", ",", "io_channels", "=", "x", ".", "shape", ".", "dims", "[", "-", "2", ":", "]", "\n", "if", "params", "is", "None", ":", "\n", "      ", "wq", ",", "wk", ",", "wv", ",", "wo", "=", "multihead_attention_vars", "(", "\n", "x", ".", "mesh", ",", "heads", ",", "io_channels", ",", "kv_channels", ",", "\n", "master_dtype", ",", "slice_dtype", ",", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "      ", "wq", ",", "wk", ",", "wv", ",", "wo", "=", "params", "\n", "\n", "# Get query q, keys k and values v.", "\n", "", "qkv_shape", "=", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "length", ",", "kv_channels", "]", ")", "\n", "q", "=", "mtf", ".", "einsum", "(", "[", "x", ",", "wq", "]", ",", "qkv_shape", ")", "\n", "k", "=", "mtf", ".", "einsum", "(", "[", "x", ",", "wk", "]", ",", "qkv_shape", ")", "\n", "v", "=", "mtf", ".", "einsum", "(", "[", "x", ",", "wv", "]", ",", "qkv_shape", ")", "\n", "if", "return_kv", "is", "not", "None", ":", "\n", "      ", "return_kv", ".", "extend", "(", "[", "k", ",", "v", "]", ")", "\n", "\n", "# Choose a suitable block size.", "\n", "# We choose the greatest divisor of length_per_split less than or equal", "\n", "# to max(window_size, 128)", "\n", "", "if", "length_per_split", "is", "None", ":", "\n", "      ", "length_per_split", "=", "length", ".", "size", "\n", "", "block_length", "=", "max", "(", "window_size", ",", "128", ")", "\n", "while", "length_per_split", "%", "block_length", "!=", "0", ":", "\n", "      ", "block_length", "-=", "1", "\n", "\n", "", "query_block_length", "=", "mtf", ".", "Dimension", "(", "\"query_block_length\"", ",", "block_length", ")", "\n", "memory_block_length", "=", "mtf", ".", "Dimension", "(", "\"memory_block_length\"", ",", "block_length", ")", "\n", "# The num_blocks dimension gets the same name as the length dimension,", "\n", "# so it will be split in the same way.", "\n", "num_blocks", "=", "mtf", ".", "Dimension", "(", "length", ".", "name", ",", "length", ".", "size", "//", "block_length", ")", "\n", "q_shape", "=", "batch_dims", "+", "[", "heads", ",", "num_blocks", ",", "query_block_length", ",", "kv_channels", "]", "\n", "kv_shape", "=", "batch_dims", "+", "[", "\n", "heads", ",", "num_blocks", ",", "memory_block_length", ",", "kv_channels", "]", "\n", "q", "=", "mtf", ".", "reshape", "(", "q", ",", "q_shape", ")", "\n", "k", "=", "mtf", ".", "reshape", "(", "k", ",", "kv_shape", ")", "\n", "v", "=", "mtf", ".", "reshape", "(", "v", ",", "kv_shape", ")", "\n", "# augment the keys and values for each block with keys and values for", "\n", "# the previous window_size timesteps.", "\n", "k", "=", "mtf", ".", "left_halo_exchange", "(", "k", ",", "num_blocks", ",", "memory_block_length", ",", "window_size", ")", "\n", "v", "=", "mtf", ".", "left_halo_exchange", "(", "v", ",", "num_blocks", ",", "memory_block_length", ",", "window_size", ")", "\n", "padded_memory_block_length", "=", "mtf", ".", "Dimension", "(", "\n", "\"memory_block_length\"", ",", "window_size", "+", "block_length", ")", "\n", "mpos", "=", "mtf", ".", "range", "(", "x", ".", "mesh", ",", "padded_memory_block_length", ",", "tf", ".", "float32", ")", "\n", "qpos", "=", "mtf", ".", "range", "(", "x", ".", "mesh", ",", "query_block_length", ",", "tf", ".", "float32", ")", "+", "window_size", "\n", "# prevent looking forward", "\n", "mask", "=", "mtf", ".", "cast", "(", "mtf", ".", "greater", "(", "mpos", ",", "qpos", ")", ",", "x", ".", "dtype", ")", "*", "-", "1e9", "\n", "# prevent looking >=block_length timesteps backward", "\n", "mask", "+=", "mtf", ".", "cast", "(", "mtf", ".", "less_equal", "(", "mpos", ",", "qpos", "-", "block_length", ")", ",", "x", ".", "dtype", ")", "*", "-", "1e9", "\n", "# Note: The first window_size-1 positions can see back into pre-time", "\n", "# where all the keys and values are zero.  We could mask this out, but we", "\n", "# don't.", "\n", "o", "=", "dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ",", "is_training", "=", "is_training", ")", "\n", "o", "=", "mtf", ".", "reshape", "(", "o", ",", "batch_dims", "+", "[", "heads", ",", "length", ",", "kv_channels", "]", ")", "\n", "return", "mtf", ".", "einsum", "(", "[", "o", ",", "wo", "]", ",", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "length", ",", "io_channels", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.masked_local_attention_1d_incremental": [[1413, 1468], ["tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.equal", "mesh_tensorflow.ops_with_redefined_builtins.where", "mesh_tensorflow.ops_with_redefined_builtins.where", "layers.dot_product_attention", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "layers.multihead_attention_vars", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.range", "mesh_tensorflow.ops_with_redefined_builtins.mod"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dot_product_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention_vars", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mod"], ["", "", "def", "masked_local_attention_1d_incremental", "(", "x", ",", "\n", "prev_k", ",", "\n", "prev_v", ",", "\n", "step_num", ",", "\n", "master_dtype", "=", "None", ",", "\n", "slice_dtype", "=", "None", ",", "\n", "params", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Incremental local self-attention (one decode step).\n\n  Incremental version of masked_local_attention_1d()\n\n  Args:\n    x: a mtf.Tensor with shape [batch..., io_channels]\n    prev_k: mtf.Tensor with shape\n       [batch..., heads, window_length, kv_channels]\n    prev_v: mtf.Tensor with shape\n       [batch..., heads, window_length, kv_channels]\n    step_num: mtf Scalar with dtype tf.int32\n    master_dtype: a tf.dtype (deprecated)\n    slice_dtype: a tf.dtype (deprecated)\n    params: a quadruple of Tensors (see multihead_attention_params())\n    name: an optional string.\n\n  Returns:\n    y: A mtf.Tensor with shape [batch..., io_channels]\n    new_k: mtf.Tensor with shape\n       [batch..., heads, window_length, kv_channels]\n    new_v: mtf.Tensor with shape\n       [batch..., heads, window_length, kv_channels]\n\n  Raises:\n    ValueError: if the dimensions do not match.\n  \"\"\"", "\n", "batch_dims", "=", "x", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "\n", "io_channels", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "heads", ",", "window_length", ",", "kv_channels", "=", "prev_k", ".", "shape", ".", "dims", "[", "-", "3", ":", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"masked_local_attention_1d\"", ")", ":", "\n", "    ", "if", "params", "is", "None", ":", "\n", "      ", "wq", ",", "wk", ",", "wv", ",", "wo", "=", "multihead_attention_vars", "(", "\n", "x", ".", "mesh", ",", "heads", ",", "io_channels", ",", "kv_channels", ",", "\n", "master_dtype", ",", "slice_dtype", ",", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "      ", "wq", ",", "wk", ",", "wv", ",", "wo", "=", "params", "\n", "", "q", "=", "mtf", ".", "einsum", "(", "[", "x", ",", "wq", "]", ",", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "kv_channels", "]", ")", ")", "\n", "k", "=", "mtf", ".", "einsum", "(", "[", "x", ",", "wk", "]", ",", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "kv_channels", "]", ")", ")", "\n", "v", "=", "mtf", ".", "einsum", "(", "[", "x", ",", "wv", "]", ",", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "kv_channels", "]", ")", ")", "\n", "current_position", "=", "mtf", ".", "equal", "(", "\n", "mtf", ".", "range", "(", "x", ".", "mesh", ",", "window_length", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "mtf", ".", "mod", "(", "step_num", ",", "window_length", ".", "size", ")", ")", "\n", "k", "=", "mtf", ".", "where", "(", "current_position", ",", "k", ",", "prev_k", ",", "output_shape", "=", "prev_k", ".", "shape", ")", "\n", "v", "=", "mtf", ".", "where", "(", "current_position", ",", "v", ",", "prev_v", ",", "output_shape", "=", "prev_v", ".", "shape", ")", "\n", "o", "=", "dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ",", "is_training", "=", "False", ")", "\n", "y", "=", "mtf", ".", "einsum", "(", "[", "o", ",", "wo", "]", ",", "x", ".", "shape", ")", "\n", "return", "y", ",", "k", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.local_2d_halo_exchange": [[1470, 1493], ["mesh_tensorflow.ops_with_redefined_builtins.left_halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.left_halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.halo_exchange", "mesh_tensorflow.ops_with_redefined_builtins.pad", "mesh_tensorflow.ops_with_redefined_builtins.pad", "mesh_tensorflow.ops_with_redefined_builtins.pad", "mesh_tensorflow.ops_with_redefined_builtins.pad"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.left_halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.left_halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad"], ["", "", "def", "local_2d_halo_exchange", "(", "k", ",", "v", ",", "num_h_blocks", ",", "h_dim", ",", "\n", "num_w_blocks", ",", "w_dim", ",", "mask_right", ")", ":", "\n", "  ", "\"\"\"Halo exchange for keys and values for Local 2D attention.\"\"\"", "\n", "for", "blocks_dim", ",", "block_size_dim", ",", "halo_size", "in", "[", "\n", "(", "num_h_blocks", ",", "h_dim", ",", "h_dim", ".", "size", ")", ",", "\n", "(", "num_w_blocks", ",", "w_dim", ",", "w_dim", ".", "size", ")", "]", ":", "\n", "# shape of k is [num_h_blocks, num_w_blocks, h_dim, w_dim, kv_channels]", "\n", "    ", "if", "halo_size", ">", "0", ":", "\n", "      ", "if", "blocks_dim", "is", "not", "None", ":", "\n", "        ", "if", "mask_right", ":", "\n", "          ", "k", "=", "mtf", ".", "left_halo_exchange", "(", "k", ",", "blocks_dim", ",", "block_size_dim", ",", "halo_size", ")", "\n", "v", "=", "mtf", ".", "left_halo_exchange", "(", "v", ",", "blocks_dim", ",", "block_size_dim", ",", "halo_size", ")", "\n", "", "else", ":", "\n", "          ", "k", "=", "mtf", ".", "halo_exchange", "(", "k", ",", "blocks_dim", ",", "block_size_dim", ",", "halo_size", ")", "\n", "v", "=", "mtf", ".", "halo_exchange", "(", "v", ",", "blocks_dim", ",", "block_size_dim", ",", "halo_size", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "mask_right", ":", "\n", "          ", "k", "=", "mtf", ".", "pad", "(", "k", ",", "[", "halo_size", ",", "None", "]", ",", "block_size_dim", ".", "name", ")", "\n", "v", "=", "mtf", ".", "pad", "(", "v", ",", "[", "halo_size", ",", "None", "]", ",", "block_size_dim", ".", "name", ")", "\n", "", "else", ":", "\n", "          ", "k", "=", "mtf", ".", "pad", "(", "k", ",", "[", "halo_size", ",", "halo_size", "]", ",", "block_size_dim", ".", "name", ")", "\n", "v", "=", "mtf", ".", "pad", "(", "v", ",", "[", "halo_size", ",", "halo_size", "]", ",", "block_size_dim", ".", "name", ")", "\n", "", "", "", "", "return", "k", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.local_2d_self_attention_spatial_blocks": [[1495, 1580], ["tensorflow.variable_scope", "layers.multihead_attention_vars", "mesh_tensorflow.ops_with_redefined_builtins.rename_dimension", "mesh_tensorflow.ops_with_redefined_builtins.rename_dimension", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "layers.local_2d_halo_exchange", "layers.dot_product_attention", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "layers.attention_bias_local_2d_block", "mesh_tensorflow.ops_with_redefined_builtins.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention_vars", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.local_2d_halo_exchange", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dot_product_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.attention_bias_local_2d_block"], ["", "def", "local_2d_self_attention_spatial_blocks", "(", "query_antecedent", ",", "\n", "kv_channels", ",", "\n", "heads", ",", "\n", "is_training", ",", "\n", "memory_h_dim", "=", "None", ",", "\n", "memory_w_dim", "=", "None", ",", "\n", "mask_right", "=", "False", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Attention to the source position and a neighborhood to the left or right.\n\n  The sequence is divided into blocks of length block_size.\n  Attention for a given query position can only see memory positions\n  less than or equal to the query position, in the corresponding block\n  and the previous block.\n\n  Args:\n    query_antecedent: a mtf.Tensor with shape [batch, num_h_blocks,\n      num_w_blocks, h_dim, w_dim, io_channels] must have the same size as\n      query_length, but a different name.\n    kv_channels: a mtf.Dimension (the size of the key and value vectors)\n    heads: a mtf.Dimension (the number of heads)\n    is_training: a bool, is True while training else False.\n    memory_h_dim: mtf Dimension, for the memory height block.\n    memory_w_dim: mtf Dimension, for the memory width block.\n    mask_right: bool, flag specifying whether we mask out attention to the right\n      for the decoder.\n    master_dtype: a tf.dtype\n    slice_dtype: a tf.dtype\n    name: an optional string.\n\n  Returns:\n    a Tensor of shape\n        [batch, num_h_blocks, num_w_blocks, h_dim, w_dim, io_channels]\n\n  Raises:\n    ValueError: if channels or depth don't match.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"multihead_attention\"", ",", "values", "=", "[", "query_antecedent", "]", ")", ":", "\n", "\n", "    ", "h_dim", ",", "w_dim", ",", "io_channels", "=", "query_antecedent", ".", "shape", ".", "dims", "[", "-", "3", ":", "]", "\n", "batch", ",", "num_h_blocks", ",", "num_w_blocks", "=", "query_antecedent", ".", "shape", ".", "dims", "[", ":", "3", "]", "\n", "wq", ",", "wk", ",", "wv", ",", "wo", "=", "multihead_attention_vars", "(", "\n", "query_antecedent", ".", "mesh", ",", "heads", ",", "io_channels", ",", "kv_channels", ",", "\n", "master_dtype", ",", "slice_dtype", ",", "query_antecedent", ".", "dtype", ")", "\n", "\n", "# Rename dimensions for the memory height and width.", "\n", "memory_antecedent", "=", "mtf", ".", "rename_dimension", "(", "query_antecedent", ",", "h_dim", ".", "name", ",", "\n", "\"memory_\"", "+", "h_dim", ".", "name", ")", "\n", "memory_antecedent", "=", "mtf", ".", "rename_dimension", "(", "memory_antecedent", ",", "w_dim", ".", "name", ",", "\n", "\"memory_\"", "+", "w_dim", ".", "name", ")", "\n", "memory_h_dim", ",", "memory_w_dim", "=", "memory_antecedent", ".", "shape", ".", "dims", "[", "-", "3", ":", "-", "1", "]", "\n", "\n", "# Call einsum over the query and memory to get query q, keys k and values v.", "\n", "q", "=", "mtf", ".", "einsum", "(", "[", "query_antecedent", ",", "wq", "]", ",", "\n", "mtf", ".", "Shape", "(", "[", "\n", "batch", ",", "heads", ",", "num_h_blocks", ",", "num_w_blocks", ",", "h_dim", ",", "w_dim", ",", "\n", "kv_channels", "\n", "]", ")", ")", "\n", "k", "=", "mtf", ".", "einsum", "(", "[", "memory_antecedent", ",", "wk", "]", ",", "\n", "mtf", ".", "Shape", "(", "[", "batch", ",", "heads", ",", "num_h_blocks", ",", "num_w_blocks", ",", "\n", "memory_h_dim", ",", "memory_w_dim", ",", "kv_channels", "]", ")", ")", "\n", "v", "=", "mtf", ".", "einsum", "(", "[", "memory_antecedent", ",", "wv", "]", ",", "\n", "mtf", ".", "Shape", "(", "[", "batch", ",", "heads", ",", "num_h_blocks", ",", "num_w_blocks", ",", "\n", "memory_h_dim", ",", "memory_w_dim", ",", "kv_channels", "]", ")", ")", "\n", "\n", "# Halo exchange for memory blocks.", "\n", "k", ",", "v", "=", "local_2d_halo_exchange", "(", "k", ",", "v", ",", "num_h_blocks", ",", "memory_h_dim", ",", "\n", "num_w_blocks", ",", "memory_w_dim", ",", "mask_right", ")", "\n", "\n", "# Calculate the causal mask to avoid peeking into the future. We compute", "\n", "# this once and reuse it for all blocks since the block_size is known.", "\n", "mask", "=", "None", "\n", "if", "mask_right", ":", "\n", "      ", "mask", "=", "attention_bias_local_2d_block", "(", "query_antecedent", ".", "mesh", ",", "h_dim", ",", "w_dim", ",", "\n", "memory_h_dim", ",", "memory_w_dim", ")", "\n", "\n", "", "output", "=", "dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ",", "is_training", "=", "is_training", ")", "\n", "\n", "return", "mtf", ".", "einsum", "(", "\n", "[", "output", ",", "wo", "]", ",", "\n", "mtf", ".", "Shape", "(", "\n", "[", "batch", ",", "num_h_blocks", ",", "num_w_blocks", ",", "h_dim", ",", "w_dim", ",", "io_channels", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.rename_length_to_memory_length": [[1582, 1585], ["mesh_tensorflow.ops_with_redefined_builtins.rename_dimension"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension"], ["", "", "def", "rename_length_to_memory_length", "(", "\n", "x", ",", "length_name", "=", "\"length\"", ",", "memory_length_name", "=", "\"memory_length\"", ")", ":", "\n", "  ", "return", "mtf", ".", "rename_dimension", "(", "x", ",", "length_name", ",", "memory_length_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention_vars": [[1587, 1595], ["layers.multihead_attention_params", "mesh_tensorflow.ops_with_redefined_builtins.VariableDType"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention_params"], ["", "def", "multihead_attention_vars", "(", "\n", "mesh", ",", "heads", ",", "io_channels", ",", "kv_channels", ",", "\n", "master_dtype", ",", "slice_dtype", ",", "activation_dtype", ")", ":", "\n", "  ", "\"\"\"Deprecated version of multihead_attention_params with combine=True.\"\"\"", "\n", "return", "multihead_attention_params", "(", "\n", "mesh", ",", "heads", ",", "io_channels", ",", "kv_channels", ",", "\n", "mtf", ".", "VariableDType", "(", "master_dtype", ",", "slice_dtype", ",", "activation_dtype", ")", ",", "\n", "combine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention_params": [[1597, 1645], ["mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.unstack", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "tensorflow.random_normal", "tensorflow.reshape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "zip", "tensorflow.cast", "tensorflow.random_normal_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.unstack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "multihead_attention_params", "(", "mesh", ",", "heads", ",", "io_channels", ",", "kv_channels", ",", "\n", "variable_dtype", ",", "combine", "=", "False", ")", ":", "\n", "  ", "\"\"\"Create Parameters for Multihead Attention.\n\n  If the combine flag is set to True, then we create only one variable\n  which stacks together all of the parameters.  Otherwise, we create four\n  separate variables.\n\n  Args:\n    mesh: a Mesh\n    heads: a Dimension\n    io_channels: a Dimension\n    kv_channels: a Dimension\n    variable_dtype: a mtf.VariableDType\n    combine: a boolean\n\n  Returns:\n    wq: a Tensor with shape [heads, io_channels, kv_channels]\n    wk: a Tensor with shape [heads, io_channels, kv_channels]\n    wv: a Tensor with shape [heads, io_channels, kv_channels]\n    wo: a Tensor with shape [heads, io_channels, kv_channels]\n  \"\"\"", "\n", "qkvo", "=", "mtf", ".", "Dimension", "(", "\"qkvo\"", ",", "4", ")", "\n", "qk_stddev", "=", "(", "io_channels", ".", "size", "**", "-", "0.5", ")", "*", "(", "kv_channels", ".", "size", "**", "-", "0.25", ")", "\n", "v_stddev", "=", "io_channels", ".", "size", "**", "-", "0.5", "\n", "# TODO(noam): should be: o_stddev = (kv_channels.size * heads.size) ** -0.5", "\n", "#   verify that this still works and change it.", "\n", "o_stddev", "=", "(", "io_channels", ".", "size", "*", "heads", ".", "size", ")", "**", "-", "0.5", "\n", "if", "combine", ":", "\n", "    ", "def", "qkvo_initializer", "(", "shape", ",", "\n", "dtype", "=", "None", ",", "\n", "partition_info", "=", "None", ",", "\n", "verify_shape", "=", "None", ")", ":", "\n", "      ", "del", "partition_info", ",", "verify_shape", "\n", "return", "tf", ".", "random_normal", "(", "shape", ",", "dtype", "=", "dtype", ")", "*", "tf", ".", "reshape", "(", "\n", "tf", ".", "cast", "(", "[", "qk_stddev", ",", "qk_stddev", ",", "v_stddev", ",", "o_stddev", "]", ",", "\n", "dtype", "or", "tf", ".", "float32", ")", ",", "[", "4", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "", "var", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\"qkvo\"", ",", "mtf", ".", "Shape", "(", "[", "qkvo", ",", "heads", ",", "io_channels", ",", "kv_channels", "]", ")", ",", "\n", "initializer", "=", "qkvo_initializer", ",", "dtype", "=", "variable_dtype", ")", "\n", "return", "mtf", ".", "unstack", "(", "var", ",", "qkvo", ")", "\n", "", "else", ":", "\n", "    ", "return", "[", "mtf", ".", "get_variable", "(", "# pylint: disable=g-complex-comprehension", "\n", "mesh", ",", "name", ",", "mtf", ".", "Shape", "(", "[", "heads", ",", "io_channels", ",", "kv_channels", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", ",", "\n", "dtype", "=", "variable_dtype", ")", "for", "name", ",", "stddev", "in", "zip", "(", "\n", "[", "\"q\"", ",", "\"k\"", ",", "\"v\"", ",", "\"o\"", "]", ",", "\n", "[", "qk_stddev", ",", "qk_stddev", ",", "v_stddev", ",", "o_stddev", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dot_product_attention": [[1647, 1686], ["mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.softmax", "mesh_tensorflow.ops_with_redefined_builtins.dropout", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.einsum"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "", "def", "dot_product_attention", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "mask", ",", "\n", "is_training", ",", "\n", "dropout", "=", "0.0", ",", "\n", "dropout_broadcast_dims", "=", "None", ",", "\n", "extra_logit", "=", "None", ")", ":", "\n", "  ", "\"\"\"Dot-product attention.\n\n  Args:\n    q: Tensor with shape [...., length_q, depth_k]. Typically leading dimensions\n      are [batch, heads].\n    k: Tensor with shape [..., length_kv, depth_k]. Leading dimensions must\n      match with q.\n    v: Tensor with shape [..., length_kv, depth_v] Leading dimensions must\n      match with q.\n    mask: mask Tensor (see attention_mask())\n    is_training: a boolean, set to true while training\n    dropout: a float.\n    dropout_broadcast_dims: an optional list of mtf.Dimension\n    extra_logit: an optional scalar or tensor\n\n  Returns:\n    Tensor with shape [..., length_q, depth_v].\n  \"\"\"", "\n", "length_kv", "=", "k", ".", "shape", ".", "dims", "[", "-", "2", "]", "\n", "logits_shape", "=", "mtf", ".", "Shape", "(", "q", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "+", "[", "length_kv", "]", ")", "\n", "logits", "=", "mtf", ".", "einsum", "(", "[", "q", ",", "k", "]", ",", "logits_shape", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "    ", "logits", "+=", "mask", "\n", "", "weights", "=", "mtf", ".", "softmax", "(", "logits", ",", "length_kv", ",", "extra_logit", "=", "extra_logit", ")", "\n", "weights", "=", "mtf", ".", "dropout", "(", "\n", "weights", ",", "is_training", ",", "1.0", "-", "dropout", ",", "\n", "noise_shape", "=", "weights", ".", "shape", "-", "dropout_broadcast_dims", ")", "\n", "depth_v", "=", "v", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "outputs_shape", "=", "mtf", ".", "Shape", "(", "q", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "+", "[", "depth_v", "]", ")", "\n", "outputs", "=", "mtf", ".", "einsum", "(", "[", "weights", ",", "v", "]", ",", "outputs_shape", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention": [[1688, 1757], ["tensorflow.variable_scope", "layers.multihead_attention_vars", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "layers.dot_product_attention", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "layers.rename_length_to_memory_length", "ValueError", "ValueError", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention_vars", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dot_product_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length"], ["", "def", "multihead_attention", "(", "query_antecedent", ",", "\n", "memory_antecedent", ",", "\n", "mask", ",", "\n", "kv_channels", ",", "\n", "heads", ",", "\n", "is_training", ",", "\n", "dropout", "=", "0.0", ",", "\n", "dropout_broadcast_dims", "=", "None", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "\"multihead_attention\"", ")", ":", "\n", "  ", "\"\"\"Multihead scaled-dot-product attention with input/output transformations.\n\n  In order to use only one variable containing the four weight matrices\n  packed together, we insist that the query and memory antecedents have the\n  same dimensionality (io_channels) and that the keys and values have the\n  same dimensionality (kv_channels).\n\n  Args:\n    query_antecedent: a mtf.Tensor with shape\n      [<batch_dims>, query_length, io_channels]\n    memory_antecedent: a mtf.Tensor with shape\n      [batch, memory_length, io_channels] (optional)\n    mask: mask Tensor (see attention_mask())\n    kv_channels: a mtf.Dimension (the size of the key and value vectors)\n    heads: a mtf.Dimension (the number of heads)\n    is_training: a bool, is True while training, false otherwise.\n    dropout: a floating point value\n    dropout_broadcast_dims: an optional list of mtf.Dimension\n    master_dtype: a tf.dtype\n    slice_dtype: a tf.dtype\n    name: an optional string.\n\n  Returns:\n    A mtf.Tensor with shape [batch, query_length, io_channels]\n\n  Raises:\n    ValueError: if the dimensions do not match.\n  \"\"\"", "\n", "batch_dims", "=", "query_antecedent", ".", "shape", ".", "dims", "[", ":", "-", "2", "]", "\n", "query_length", ",", "io_channels", "=", "query_antecedent", ".", "shape", ".", "dims", "[", "-", "2", ":", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "\n", "default_name", "=", "\"multihead_attention\"", ",", "\n", "values", "=", "[", "query_antecedent", ",", "memory_antecedent", "]", ")", ":", "\n", "    ", "wq", ",", "wk", ",", "wv", ",", "wo", "=", "multihead_attention_vars", "(", "\n", "query_antecedent", ".", "mesh", ",", "heads", ",", "io_channels", ",", "kv_channels", ",", "\n", "master_dtype", ",", "slice_dtype", ",", "query_antecedent", ".", "dtype", ")", "\n", "if", "memory_antecedent", "is", "None", ":", "\n", "      ", "memory_antecedent", "=", "rename_length_to_memory_length", "(", "\n", "query_antecedent", ",", "query_length", ".", "name", ")", "\n", "", "memory_batch_dims", "=", "memory_antecedent", ".", "shape", ".", "dims", "[", ":", "-", "2", "]", "\n", "memory_length", ",", "memory_channels", "=", "memory_antecedent", ".", "shape", ".", "dims", "[", "-", "2", ":", "]", "\n", "if", "memory_batch_dims", "!=", "batch_dims", ":", "\n", "      ", "raise", "ValueError", "(", "\"memory batch must equal query batch\"", ")", "\n", "", "if", "memory_channels", "!=", "io_channels", ":", "\n", "      ", "raise", "ValueError", "(", "\"memory channels must equal query channels\"", ")", "\n", "", "q", "=", "mtf", ".", "einsum", "(", "\n", "[", "query_antecedent", ",", "wq", "]", ",", "\n", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "query_length", ",", "kv_channels", "]", ")", ")", "\n", "k", "=", "mtf", ".", "einsum", "(", "\n", "[", "memory_antecedent", ",", "wk", "]", ",", "\n", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "memory_length", ",", "kv_channels", "]", ")", ")", "\n", "v", "=", "mtf", ".", "einsum", "(", "\n", "[", "memory_antecedent", ",", "wv", "]", ",", "\n", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "memory_length", ",", "kv_channels", "]", ")", ")", "\n", "o", "=", "dot_product_attention", "(", "\n", "q", ",", "k", ",", "v", ",", "mask", ",", "is_training", ",", "dropout", ",", "dropout_broadcast_dims", ")", "\n", "return", "mtf", ".", "einsum", "(", "\n", "[", "o", ",", "wo", "]", ",", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "query_length", ",", "io_channels", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_self_attention_incremental": [[1759, 1821], ["tensorflow.variable_scope", "layers.multihead_attention_vars", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "layers.dot_product_attention", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.multiply", "mesh_tensorflow.ops_with_redefined_builtins.multiply", "mesh_tensorflow.ops_with_redefined_builtins.cast", "mesh_tensorflow.ops_with_redefined_builtins.one_hot", "mesh_tensorflow.ops_with_redefined_builtins.one_hot", "mesh_tensorflow.ops_with_redefined_builtins.greater", "mesh_tensorflow.ops_with_redefined_builtins.range"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention_vars", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dot_product_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.multiply", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.multiply", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater"], ["", "", "def", "multihead_self_attention_incremental", "(", "query_antecedent", ",", "\n", "prev_k", ",", "\n", "prev_v", ",", "\n", "step_num", ",", "\n", "master_dtype", ",", "\n", "slice_dtype", ",", "\n", "name", "=", "\"multihead_attention\"", ")", ":", "\n", "  ", "\"\"\"Incremental self-attention (one decode step).\n\n  In order to use only one variable containing the four weight matrices\n  packed together, we insist that the query and memory antecedents have the\n  same dimensionality (io_channels) and that the keys and values have the\n  same dimensionality (kv_channels).\n\n  Args:\n    query_antecedent: a mtf.Tensor with shape [batch..., io_channels]\n    prev_k: mtf.Tensor with shape [batch..., heads, memory_length, kv_channels]\n    prev_v: mtf.Tensor with shape [batch..., heads, memory_length, kv_channels]\n    step_num: mtf Scalar with dtype tf.int32\n    master_dtype: a tf.dtype\n    slice_dtype: a tf.dtype\n    name: an optional string.\n\n  Returns:\n    y: A mtf.Tensor with shape [batch..., io_channels]\n    new_k: mtf.Tensor with shape [batch..., heads, memory_length, kv_channels]\n    new_v: mtf.Tensor with shape [batch..., heads, memory_length, kv_channels]\n\n  Raises:\n    ValueError: if the dimensions do not match.\n  \"\"\"", "\n", "batch_dims", "=", "query_antecedent", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "\n", "io_channels", "=", "query_antecedent", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "heads", ",", "memory_length", ",", "kv_channels", "=", "prev_k", ".", "shape", ".", "dims", "[", "-", "3", ":", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"multihead_attention\"", ")", ":", "\n", "    ", "wq", ",", "wk", ",", "wv", ",", "wo", "=", "multihead_attention_vars", "(", "\n", "query_antecedent", ".", "mesh", ",", "heads", ",", "io_channels", ",", "kv_channels", ",", "\n", "master_dtype", ",", "slice_dtype", ",", "query_antecedent", ".", "dtype", ")", "\n", "memory_antecedent", "=", "query_antecedent", "\n", "q", "=", "mtf", ".", "einsum", "(", "\n", "[", "query_antecedent", ",", "wq", "]", ",", "\n", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "kv_channels", "]", ")", ")", "\n", "k", "=", "mtf", ".", "einsum", "(", "\n", "[", "memory_antecedent", ",", "wk", "]", ",", "\n", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "kv_channels", "]", ")", ")", "\n", "v", "=", "mtf", ".", "einsum", "(", "\n", "[", "memory_antecedent", ",", "wv", "]", ",", "\n", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "kv_channels", "]", ")", ")", "\n", "k", "=", "prev_k", "+", "mtf", ".", "multiply", "(", "\n", "k", ",", "mtf", ".", "one_hot", "(", "step_num", ",", "memory_length", ",", "dtype", "=", "prev_k", ".", "dtype", ")", ",", "\n", "output_shape", "=", "prev_k", ".", "shape", ")", "\n", "v", "=", "prev_v", "+", "mtf", ".", "multiply", "(", "\n", "v", ",", "mtf", ".", "one_hot", "(", "step_num", ",", "memory_length", ",", "dtype", "=", "prev_v", ".", "dtype", ")", ",", "\n", "output_shape", "=", "prev_v", ".", "shape", ")", "\n", "\n", "mask", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "greater", "(", "mtf", ".", "range", "(", "\n", "query_antecedent", ".", "mesh", ",", "memory_length", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "step_num", ")", ",", "\n", "q", ".", "dtype", ")", "*", "-", "1e9", "\n", "o", "=", "dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "is_training", "=", "False", ")", "\n", "y", "=", "mtf", ".", "einsum", "(", "[", "o", ",", "wo", "]", ",", "query_antecedent", ".", "shape", ")", "\n", "return", "y", ",", "k", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_encdec_attention_incremental": [[1823, 1856], ["tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "layers.dot_product_attention", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dot_product_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "", "def", "multihead_encdec_attention_incremental", "(", "query_antecedent", ",", "\n", "wq", ",", "wo", ",", "k", ",", "v", ",", "\n", "mask", ",", "\n", "name", "=", "\"multihead_attention\"", ")", ":", "\n", "  ", "\"\"\"Incremental attention over encoder (one decode step).\n\n  In order to use only one variable containing the four weight matrices\n  packed together, we insist that the query and memory antecedents have the\n  same dimensionality (io_channels) and that the keys and values have the\n  same dimensionality (kv_channels).\n\n  memory_dims is a subset of query_dims\n\n  Args:\n    query_antecedent: a mtf.Tensor with shape query_dims + [io_channels]\n    wq: a mtf.Tensor with shape [heads, io_channels, kv_channels]\n    wo: a mtf.Tensor with shape [heads, io_channels, kv_channels]\n    k: memory_dims + [heads, memory_length, kv_channels]\n    v: memory_dims + [heads, memory_length, kv_channels]\n    mask: mask Tensor (see attention_mask())\n    name: an optional string.\n\n  Returns:\n    A mtf.Tensor with shape [batch, qlen, io_channels]\n  \"\"\"", "\n", "heads", ",", "_", ",", "kv_channels", "=", "k", ".", "shape", ".", "dims", "[", "-", "3", ":", "]", "\n", "query_dims", "=", "query_antecedent", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"multihead_attention\"", ")", ":", "\n", "    ", "q", "=", "mtf", ".", "einsum", "(", "\n", "[", "query_antecedent", ",", "wq", "]", ",", "\n", "mtf", ".", "Shape", "(", "query_dims", "+", "[", "heads", ",", "kv_channels", "]", ")", ")", "\n", "o", "=", "dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "is_training", "=", "False", ")", "\n", "return", "mtf", ".", "einsum", "(", "[", "o", ",", "wo", "]", ",", "query_antecedent", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.attention_mask_ignore_padding": [[1858, 1870], ["layers.rename_length_to_memory_length", "mesh_tensorflow.ops_with_redefined_builtins.cast", "mesh_tensorflow.ops_with_redefined_builtins.equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal"], ["", "", "def", "attention_mask_ignore_padding", "(", "inputs", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "  ", "\"\"\"Bias for encoder-decoder attention.\n\n  Args:\n    inputs: a mtf.Tensor with shape [..., length_dim]\n    dtype: a tf.dtype\n\n  Returns:\n    a mtf.Tensor with shape [..., memory_length_dim]\n  \"\"\"", "\n", "inputs", "=", "rename_length_to_memory_length", "(", "inputs", ")", "\n", "return", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "inputs", ",", "0", ")", ",", "dtype", ")", "*", "-", "1e9", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.attention_mask_autoregressive": [[1872, 1884], ["layers.rename_length_to_memory_length", "mesh_tensorflow.ops_with_redefined_builtins.cast", "mesh_tensorflow.ops_with_redefined_builtins.less"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less"], ["", "def", "attention_mask_autoregressive", "(", "query_pos", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "  ", "\"\"\"Bias for self-attention where attention to the right is disallowed.\n\n  Args:\n    query_pos: a mtf.Tensor with shape [..., length_dim]\n    dtype: a tf.dtype\n\n  Returns:\n    a mtf.Tensor with shape [..., length_dim, memory_length_dim]\n  \"\"\"", "\n", "memory_pos", "=", "rename_length_to_memory_length", "(", "query_pos", ")", "\n", "return", "mtf", ".", "cast", "(", "mtf", ".", "less", "(", "query_pos", ",", "memory_pos", ")", ",", "dtype", ")", "*", "-", "1e9", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.attention_mask_same_segment": [[1886, 1901], ["layers.rename_length_to_memory_length", "mesh_tensorflow.ops_with_redefined_builtins.cast", "mesh_tensorflow.ops_with_redefined_builtins.not_equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal"], ["", "def", "attention_mask_same_segment", "(", "\n", "query_segment", ",", "memory_segment", "=", "None", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "  ", "\"\"\"Bias for attention where attention between segments is disallowed.\n\n  Args:\n    query_segment: a mtf.Tensor with shape [..., length_dim]\n    memory_segment: a mtf.Tensor with shape [..., memory_length_dim]\n    dtype: a tf.dtype\n\n  Returns:\n    a mtf.Tensor with shape [..., length_dim, memory_length_dim]\n  \"\"\"", "\n", "memory_segment", "=", "rename_length_to_memory_length", "(", "\n", "memory_segment", "or", "query_segment", ")", "\n", "return", "mtf", ".", "cast", "(", "mtf", ".", "not_equal", "(", "query_segment", ",", "memory_segment", ")", ",", "dtype", ")", "*", "-", "1e9", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.attention_bias_local_block": [[1903, 1930], ["mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.zeros", "mesh_tensorflow.ops_with_redefined_builtins.cast", "mesh_tensorflow.ops_with_redefined_builtins.less", "mesh_tensorflow.ops_with_redefined_builtins.cast", "mesh_tensorflow.ops_with_redefined_builtins.range", "mesh_tensorflow.ops_with_redefined_builtins.range", "mesh_tensorflow.ops_with_redefined_builtins.concat"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat"], ["", "def", "attention_bias_local_block", "(", "mesh", ",", "block_length", ",", "memory_length", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", ":", "\n", "  ", "\"\"\"Bias for attention for local blocks where attention to right is disallowed.\n\n  Create the bias matrix by using two separate masks, one for the memory part\n  which doesn't overlap with the query and second which interacts with the query\n  and should be disallowed to look to the right of the current query position.\n\n  Args:\n    mesh: a MeshTensorflow object\n    block_length: a mtf.Dimension\n    memory_length: a mtf.Dimension\n    dtype: a tf.dtype\n\n  Returns:\n    a mtf.Tensor with shape [block_length, memory_length]\n  \"\"\"", "\n", "memory_length", "=", "mtf", ".", "Dimension", "(", "memory_length", ".", "name", ",", "block_length", ".", "size", ")", "\n", "memory_mask", "=", "mtf", ".", "zeros", "(", "mesh", ",", "[", "block_length", ",", "memory_length", "]", ",", "dtype", "=", "dtype", ")", "\n", "\n", "mask", "=", "mtf", ".", "cast", "(", "mtf", ".", "less", "(", "mtf", ".", "range", "(", "mesh", ",", "block_length", ",", "dtype", "=", "dtype", ")", ",", "\n", "mtf", ".", "range", "(", "mesh", ",", "memory_length", ",", "dtype", "=", "dtype", ")", ")", ",", "\n", "dtype", "=", "dtype", ")", "\n", "mask", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "concat", "(", "[", "memory_mask", ",", "mask", "]", ",", "memory_length", ".", "name", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "*", "-", "1e9", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.attention_bias_local_2d_block": [[1932, 1967], ["mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.zeros", "mesh_tensorflow.ops_with_redefined_builtins.zeros", "mesh_tensorflow.ops_with_redefined_builtins.greater", "mesh_tensorflow.ops_with_redefined_builtins.concat", "mesh_tensorflow.ops_with_redefined_builtins.range", "mesh_tensorflow.ops_with_redefined_builtins.range", "mesh_tensorflow.ops_with_redefined_builtins.cast", "mesh_tensorflow.ops_with_redefined_builtins.concat"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat"], ["", "def", "attention_bias_local_2d_block", "(", "mesh", ",", "\n", "h_dim", ",", "\n", "w_dim", ",", "\n", "memory_h_dim", ",", "\n", "memory_w_dim", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", ":", "\n", "  ", "\"\"\"Bias for attention for local blocks where attention to right is disallowed.\n\n  Create the bias matrix by using two separate masks, one for the memory part\n  which doesn't overlap with the query and second which interacts with the query\n  and should be disallowed to look to the right of the current query position.\n\n  Args:\n    mesh: a MeshTensorflow object\n    h_dim: a mtf.Dimension\n    w_dim: a mtf.Dimension\n    memory_h_dim: a mtf.Dimension\n    memory_w_dim: a mtf.Dimension\n    dtype: a tf.dtype\n\n  Returns:\n    a mtf.Tensor with shape [block_length, memory_length]\n  \"\"\"", "\n", "memory_height", "=", "mtf", ".", "Dimension", "(", "memory_h_dim", ".", "name", ",", "h_dim", ".", "size", ")", "\n", "memory_width", "=", "mtf", ".", "Dimension", "(", "memory_w_dim", ".", "name", ",", "w_dim", ".", "size", ")", "\n", "mask_top_visible", "=", "mtf", ".", "zeros", "(", "mesh", ",", "[", "h_dim", ",", "memory_height", "]", ",", "dtype", "=", "dtype", ")", "\n", "mask_left_visible", "=", "mtf", ".", "zeros", "(", "mesh", ",", "[", "w_dim", ",", "memory_width", "]", ",", "dtype", "=", "dtype", ")", "\n", "mask_query", "=", "mtf", ".", "greater", "(", "\n", "mtf", ".", "range", "(", "mesh", ",", "memory_height", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "mtf", ".", "range", "(", "mesh", ",", "memory_width", ",", "dtype", "=", "dtype", ")", ")", "\n", "width_mask", "=", "mtf", ".", "concat", "(", "[", "mask_left_visible", ",", "mask_query", "]", ",", "memory_width", ".", "name", ")", "\n", "mask", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "concat", "(", "[", "mask_top_visible", ",", "width_mask", "]", ",", "memory_height", ".", "name", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "*", "-", "1e9", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multiplicative_jitter": [[1969, 1986], ["mesh_tensorflow.ops_with_redefined_builtins.random_uniform"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_uniform"], ["", "def", "multiplicative_jitter", "(", "x", ",", "epsilon", "=", "1e-2", ")", ":", "\n", "  ", "\"\"\"Multiply values by a random number between 1-epsilon and 1+epsilon.\n\n  Makes models more resilient to rounding errors introduced by bfloat16.\n  This seems particularly important for logits.\n\n  Args:\n    x: a mtf.Tensor\n    epsilon: a floating point value\n\n  Returns:\n    a mtf.Tensor with the same type and shape as x.\n  \"\"\"", "\n", "if", "epsilon", "==", "0", ":", "\n", "    ", "return", "x", "\n", "", "return", "x", "*", "mtf", ".", "random_uniform", "(", "\n", "x", ".", "mesh", ",", "x", ".", "shape", ",", "minval", "=", "1.0", "-", "epsilon", ",", "maxval", "=", "1.0", "+", "epsilon", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_self_attention_memory_compressed": [[1988, 2057], ["tensorflow.variable_scope", "layers.multihead_attention_vars", "layers.compress_mean", "layers.rename_length_to_memory_length", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "layers.dot_product_attention", "mesh_tensorflow.ops_with_redefined_builtins.einsum", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.range", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "mesh_tensorflow.ops_with_redefined_builtins.cast", "mesh_tensorflow.ops_with_redefined_builtins.range", "mesh_tensorflow.ops_with_redefined_builtins.greater"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention_vars", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.compress_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dot_product_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater"], ["", "def", "multihead_self_attention_memory_compressed", "(", "x", ",", "\n", "mask_right", ",", "\n", "compression_factor", ",", "\n", "kv_channels", ",", "\n", "heads", ",", "\n", "is_training", ",", "\n", "dropout", "=", "0.0", ",", "\n", "dropout_broadcast_dims", "=", "None", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "\"multihead_attention\"", ")", ":", "\n", "  ", "\"\"\"Memory-compressed self-attention.\n\n  The memory is first average-pooled (strided) to make it shorter by\n  a factor of compression_factor.\n\n  Args:\n    x: a mtf.Tensor with shape\n      [<batch_dims>, query_length, io_channels]\n    mask_right: a boolean\n    compression_factor: an integer\n    kv_channels: a mtf.Dimension (the size of the key and value vectors)\n    heads: a mtf.Dimension (the number of heads)\n    is_training: a boolean, set to true while training\n    dropout: a floating point value\n    dropout_broadcast_dims: an optional list of mtf.Dimension\n    master_dtype: a tf.dtype\n    slice_dtype: a tf.dtype\n    name: an optional string.\n\n  Returns:\n    A mtf.Tensor with shape [batch, query_length, io_channels]\n\n  Raises:\n    ValueError: if the dimensions do not match.\n  \"\"\"", "\n", "batch_dims", "=", "x", ".", "shape", ".", "dims", "[", ":", "-", "2", "]", "\n", "length", ",", "io_channels", "=", "x", ".", "shape", ".", "dims", "[", "-", "2", ":", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "\n", "default_name", "=", "\"compressed_attention\"", ",", "\n", "values", "=", "[", "x", "]", ")", ":", "\n", "    ", "wq", ",", "wk", ",", "wv", ",", "wo", "=", "multihead_attention_vars", "(", "\n", "x", ".", "mesh", ",", "heads", ",", "io_channels", ",", "kv_channels", ",", "\n", "master_dtype", ",", "slice_dtype", ",", "x", ".", "dtype", ")", "\n", "memory_antecedent", "=", "compress_mean", "(", "x", ",", "length", ",", "compression_factor", ")", "\n", "memory_antecedent", "=", "rename_length_to_memory_length", "(", "memory_antecedent", ")", "\n", "memory_length", "=", "memory_antecedent", ".", "shape", ".", "dims", "[", "-", "2", "]", "\n", "q", "=", "mtf", ".", "einsum", "(", "\n", "[", "x", ",", "wq", "]", ",", "\n", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "length", ",", "kv_channels", "]", ")", ")", "\n", "k", "=", "mtf", ".", "einsum", "(", "\n", "[", "memory_antecedent", ",", "wk", "]", ",", "\n", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "memory_length", ",", "kv_channels", "]", ")", ")", "\n", "v", "=", "mtf", ".", "einsum", "(", "\n", "[", "memory_antecedent", ",", "wv", "]", ",", "\n", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "heads", ",", "memory_length", ",", "kv_channels", "]", ")", ")", "\n", "if", "mask_right", ":", "\n", "      ", "query_pos", "=", "mtf", ".", "range", "(", "x", ".", "mesh", ",", "length", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "memory_pos", "=", "(", "\n", "mtf", ".", "range", "(", "x", ".", "mesh", ",", "memory_length", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "compression_factor", "\n", "+", "(", "compression_factor", "-", "1", ")", ")", "\n", "mask", "=", "mtf", ".", "cast", "(", "mtf", ".", "greater", "(", "memory_pos", ",", "query_pos", ")", ",", "x", ".", "dtype", ")", "*", "-", "1e9", "\n", "", "else", ":", "\n", "      ", "mask", "=", "None", "\n", "", "o", "=", "dot_product_attention", "(", "\n", "q", ",", "k", ",", "v", ",", "mask", ",", "is_training", ",", "dropout", ",", "dropout_broadcast_dims", ",", "\n", "extra_logit", "=", "0.0", ")", "\n", "return", "mtf", ".", "einsum", "(", "\n", "[", "o", ",", "wo", "]", ",", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "length", ",", "io_channels", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.compress_mean": [[2059, 2080], ["dims.index", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.Dimension", "mesh_tensorflow.ops_with_redefined_builtins.reshape", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean"], ["", "", "def", "compress_mean", "(", "x", ",", "dim", ",", "compression_factor", ")", ":", "\n", "  ", "\"\"\"Compress by taking group means.\n\n  Args:\n    x: a Tensor\n    dim: a dimension in x.shape\n    compression_factor: an integer\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "dims", "=", "x", ".", "shape", ".", "dims", "\n", "pos", "=", "dims", ".", "index", "(", "dim", ")", "\n", "compressed_dim", "=", "mtf", ".", "Dimension", "(", "dim", ".", "name", ",", "dim", ".", "size", "//", "compression_factor", ")", "\n", "compression_factor_dim", "=", "mtf", ".", "Dimension", "(", "\n", "\"compression_factor\"", ",", "compression_factor", ")", "\n", "new_shape", "=", "(", "\n", "dims", "[", ":", "pos", "]", "+", "[", "compressed_dim", ",", "compression_factor_dim", "]", "+", "dims", "[", "pos", "+", "1", ":", "]", ")", "\n", "x", "=", "mtf", ".", "reshape", "(", "x", ",", "new_shape", ")", "\n", "x", "=", "mtf", ".", "reduce_mean", "(", "x", ",", "reduced_dim", "=", "compression_factor_dim", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights": [[2082, 2100], ["mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.Shape", "tensorflow.random_normal_initializer", "isinstance"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["", "def", "embedding_weights", "(", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", ",", "\n", "variable_dtype", ",", "\n", "name", "=", "\"embedding\"", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "initializer", "=", "None", ")", ":", "\n", "  ", "\"\"\"Embedding weights.\"\"\"", "\n", "if", "not", "ensemble_dim", ":", "\n", "    ", "ensemble_dim", "=", "[", "]", "\n", "", "elif", "not", "isinstance", "(", "ensemble_dim", ",", "list", ")", ":", "\n", "    ", "ensemble_dim", "=", "[", "ensemble_dim", "]", "\n", "", "shape", "=", "mtf", ".", "Shape", "(", "ensemble_dim", ")", "+", "[", "vocab_dim", ",", "output_dim", "]", "\n", "if", "initializer", "is", "None", ":", "\n", "    ", "initializer", "=", "tf", ".", "random_normal_initializer", "(", ")", "\n", "", "ret", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "name", ",", "shape", ",", "dtype", "=", "variable_dtype", ",", "initializer", "=", "initializer", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding": [[2102, 2107], ["layers.embedding_weights", "mesh_tensorflow.ops_with_redefined_builtins.gather"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather"], ["", "def", "embedding", "(", "indices", ",", "vocab_dim", ",", "output_dim", ",", "variable_dtype", ",", "name", "=", "\"embedding\"", ")", ":", "\n", "  ", "\"\"\"Embedding layer.\"\"\"", "\n", "weights", "=", "embedding_weights", "(", "\n", "indices", ".", "mesh", ",", "vocab_dim", ",", "output_dim", ",", "variable_dtype", ",", "name", ")", "\n", "return", "mtf", ".", "gather", "(", "weights", ",", "indices", ",", "vocab_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.max_pool2d": [[2109, 2127], ["tuple", "mesh_tensorflow.ops_with_redefined_builtins.PoolOperation"], "function", ["None"], ["", "def", "max_pool2d", "(", "x", ",", "ksize", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"max_pool2d\"", ")", ":", "\n", "  ", "\"\"\"2D max pooling.\n\n  Pooling is applied on the HW dimensions. We assume the dimensions of x is\n  [NHWC]. There can be multiple batch dimensions, e.g., [10, 4, 4, 10, 10, 3].\n  Currently we only support unoverlapping pooling: strides == ksize. Also the\n  input HW dimensions must be divisible by ksize.\n\n  Args:\n    x: a Tensor\n    ksize: kernel size. A list or tuple\n    name: an optional string\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "return", "x", "if", "tuple", "(", "ksize", ")", "==", "(", "1", ",", "1", ")", "else", "mtf", ".", "PoolOperation", "(", "\n", "x", ",", "ksize", ",", "strides", "=", "ksize", ",", "pool_fn_string", "=", "\"MAX_2D\"", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.max_pool3d": [[2129, 2148], ["tuple", "mesh_tensorflow.ops_with_redefined_builtins.PoolOperation"], "function", ["None"], ["", "def", "max_pool3d", "(", "x", ",", "ksize", "=", "(", "2", ",", "2", ",", "2", ")", ",", "name", "=", "\"max_pool3d\"", ")", ":", "\n", "  ", "\"\"\"3D max pooling.\n\n  Pooling is applied on the DHW dimensions. We assume the dimensions of x is\n  [NDHWC]. There can be multiple batch dimensions, e.g.,\n  [10, 4, 4, 10, 10, 10, 3].\n  Currently we only support unoverlapping pooling: strides == ksize. Also the\n  input DHW dimensions must be divisible by ksize.\n\n  Args:\n    x: a Tensor\n    ksize: kernel size. A list or tuple\n    name: an optional string\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "return", "x", "if", "tuple", "(", "ksize", ")", "==", "(", "1", ",", "1", ",", "1", ")", "else", "mtf", ".", "PoolOperation", "(", "\n", "x", ",", "ksize", ",", "strides", "=", "ksize", ",", "pool_fn_string", "=", "\"MAX_3D\"", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.avg_pool2d": [[2150, 2168], ["tuple", "mesh_tensorflow.ops_with_redefined_builtins.PoolOperation"], "function", ["None"], ["", "def", "avg_pool2d", "(", "x", ",", "ksize", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"avg_pool2d\"", ")", ":", "\n", "  ", "\"\"\"2D average pooling.\n\n  Pooling is applied on the HW dimensions. We assume the dimensions of x is\n  [NHWC]. There can be multiple batch dimensions, e.g., [10, 4, 4, 10, 10, 3].\n  Currently we only support unoverlapping pooling: strides == ksize. Also the\n  input HW dimensions must be divisible by ksize.\n\n  Args:\n    x: a Tensor\n    ksize: kernel size. A list or tuple\n    name: an optional string\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "return", "x", "if", "tuple", "(", "ksize", ")", "==", "(", "1", ",", "1", ")", "else", "mtf", ".", "PoolOperation", "(", "\n", "x", ",", "ksize", ",", "strides", "=", "ksize", ",", "pool_fn_string", "=", "\"AVG_2D\"", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.avg_pool3d": [[2170, 2189], ["tuple", "mesh_tensorflow.ops_with_redefined_builtins.PoolOperation"], "function", ["None"], ["", "def", "avg_pool3d", "(", "x", ",", "ksize", "=", "(", "2", ",", "2", ",", "2", ")", ",", "name", "=", "\"avg_pool3d\"", ")", ":", "\n", "  ", "\"\"\"3D average pooling.\n\n  Pooling is applied on the DHW dimensions. We assume the dimensions of x is\n  [NDHWC]. There can be multiple batch dimensions, e.g.,\n  [10, 4, 4, 10, 10, 10, 3].\n  Currently we only support unoverlapping pooling: strides == ksize. Also the\n  input DHW dimensions must be divisible by ksize.\n\n  Args:\n    x: a Tensor\n    ksize: kernel size. A list or tuple\n    name: an optional string\n\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "return", "x", "if", "tuple", "(", "ksize", ")", "==", "(", "1", ",", "1", ",", "1", ")", "else", "mtf", ".", "PoolOperation", "(", "\n", "x", ",", "ksize", ",", "strides", "=", "ksize", ",", "pool_fn_string", "=", "\"AVG_3D\"", ",", "name", "=", "name", ")", ".", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers._reversible_half_residual_grad": [[2191, 2218], ["graph.clone_operations", "mesh_tensorflow.ops_with_redefined_builtins.gradients", "isinstance", "ValueError", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.clone_operations", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients"], ["", "def", "_reversible_half_residual_grad", "(", "\n", "explicit_inputs", ",", "all_inputs", ",", "forward_operations", ",", "outputs", ",", "output_grads", ")", ":", "\n", "  ", "\"\"\"Backpropagation function for a revnet.\"\"\"", "\n", "x1", ",", "_", ",", "x2", ",", "_", "=", "explicit_inputs", "\n", "extra_inputs", "=", "all_inputs", "[", "len", "(", "explicit_inputs", ")", ":", "]", "\n", "_", ",", "_", ",", "y1", ",", "_", "=", "outputs", "\n", "dy2", ",", "dy2_backwards", ",", "dy1", ",", "dy1_backwards", "=", "output_grads", "\n", "# last operation should be an addition to produce y1", "\n", "if", "not", "isinstance", "(", "forward_operations", "[", "-", "1", "]", ",", "mtf", ".", "AddOperation", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"expected an addition here\"", ")", "\n", "", "f_ops", "=", "forward_operations", "[", ":", "-", "1", "]", "\n", "orig_fx2", "=", "f_ops", "[", "-", "1", "]", ".", "outputs", "[", "0", "]", "\n", "orig_x2", "=", "x2", "\n", "if", "dy2_backwards", "is", "not", "None", ":", "\n", "    ", "x2", "=", "dy2_backwards", "\n", "", "if", "dy1_backwards", "is", "not", "None", ":", "\n", "    ", "y1", "=", "dy1_backwards", "\n", "", "graph", "=", "all_inputs", "[", "0", "]", ".", "graph", "\n", "f_again_ops", ",", "mapping", "=", "graph", ".", "clone_operations", "(", "f_ops", ",", "{", "orig_x2", ":", "x2", "}", ")", "\n", "fx2", "=", "mapping", "[", "orig_fx2", "]", "\n", "x1", "=", "y1", "-", "fx2", "\n", "grads", "=", "mtf", ".", "gradients", "(", "ys", "=", "[", "fx2", "]", ",", "xs", "=", "[", "x2", "]", "+", "extra_inputs", ",", "grad_ys", "=", "[", "dy1", "]", ",", "\n", "operations", "=", "f_again_ops", ")", "\n", "dx2", "=", "dy2", "+", "grads", "[", "0", "]", "\n", "extra_inputs_grads", "=", "grads", "[", "1", ":", "]", "\n", "dx1", "=", "dy1", "\n", "return", "[", "dx1", ",", "x1", ",", "dx2", ",", "x2", "]", "+", "extra_inputs_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers._half_residual_and_swap": [[2220, 2222], ["f"], "function", ["None"], ["", "def", "_half_residual_and_swap", "(", "x1", ",", "x1_backwards", ",", "x2", ",", "x2_backwards", ",", "f", "=", "None", ")", ":", "\n", "  ", "return", "x2", ",", "x2_backwards", ",", "x1", "+", "f", "(", "x2", ")", ",", "x1_backwards", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.reversible_half_residual_and_swap": [[2224, 2275], ["mesh_tensorflow.ops_with_redefined_builtins.custom_gradient", "layers._half_residual_and_swap", "mesh_tensorflow.ops_with_redefined_builtins.zeros_like", "mesh_tensorflow.ops_with_redefined_builtins.zeros_like", "functools.partial"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.custom_gradient", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers._half_residual_and_swap", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like"], ["", "def", "reversible_half_residual_and_swap", "(", "x1", ",", "\n", "x1_backwards", ",", "\n", "x2", ",", "\n", "x2_backwards", ",", "\n", "f", ",", "\n", "recompute_grads", "=", "True", ")", ":", "\n", "  ", "\"\"\"Building block of a revnet.\n\n  https://arxiv.org/abs/1707.04585\n\n  All the inputs and output Tensors have the same shape and dtype.\n\n  The forward computation is:\n    y1 = x1 + f(x2)\n    y2 = x2\n\n  The x1_backwards and x2_backwards tensors are used by backpropagation.\n  None should be passed for the first layer, then the outputs of each layer\n  should be passed to the next.\n\n  Example usage:\n  x1, x1_backwards, x2, x2_backwards = x, None, x, None\n  for f in my_functions:\n    x1, x1_backwards, x2, x2_backwards = mtf.layers.reversible_half_residual(\n      x1, x1_backwards, x2, x2_backwards)\n  y = (x1 + x2) / 2\n\n  Args:\n    x1: a Tensor\n    x1_backwards: a Tensor or None\n    x2: a Tensor\n    x2_backwards: a Tensor or None\n    f: a function from Tensor to Tensor\n    recompute_grads: a boolean\n  Returns:\n    y2: a Tensor\n    y2_backwards: a Tensor\n    y1: a Tensor\n    y1_backwards: a Tensor\n  \"\"\"", "\n", "if", "recompute_grads", ":", "\n", "    ", "if", "x1_backwards", "is", "None", ":", "\n", "      ", "x1_backwards", "=", "mtf", ".", "zeros_like", "(", "x1", ")", "\n", "", "if", "x2_backwards", "is", "None", ":", "\n", "      ", "x2_backwards", "=", "mtf", ".", "zeros_like", "(", "x2", ")", "\n", "", "return", "mtf", ".", "custom_gradient", "(", "\n", "functools", ".", "partial", "(", "_half_residual_and_swap", ",", "f", "=", "f", ")", ",", "\n", "_reversible_half_residual_grad", ",", "\n", "[", "x1", ",", "x1_backwards", ",", "x2", ",", "x2_backwards", "]", ")", "\n", "", "else", ":", "\n", "    ", "return", "_half_residual_and_swap", "(", "x1", ",", "x1_backwards", ",", "x2", ",", "x2_backwards", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.clip_activation_gradient": [[2277, 2308], ["tensorflow.logging.info", "mesh_tensorflow.ops_with_redefined_builtins.custom_gradient", "mesh_tensorflow.ops_with_redefined_builtins.sqrt", "layers.summary_for_clip_activation_gradient", "mesh_tensorflow.ops_with_redefined_builtins.identity", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.square", "layers.clip_activation_gradient._reduce_rms"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.custom_gradient", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.summary_for_clip_activation_gradient", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.identity", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "clip_activation_gradient", "(", "x", ",", "clip_rms_norm", "=", "None", ")", ":", "\n", "  ", "\"\"\"Clip activation gradients by rms-norm.\"\"\"", "\n", "tf", ".", "logging", ".", "info", "(", "\"clip_activation_gradient.clip_rms_norm: {}\"", ".", "format", "(", "\n", "clip_rms_norm", ")", ")", "\n", "\n", "def", "_reduce_rms", "(", "t", ")", ":", "\n", "    ", "return", "mtf", ".", "sqrt", "(", "mtf", ".", "reduce_mean", "(", "mtf", ".", "square", "(", "t", ")", ")", ")", "\n", "\n", "", "def", "forward_fn", "(", "x", ")", ":", "\n", "    ", "\"\"\"Identity forward pass.\"\"\"", "\n", "summary_for_clip_activation_gradient", "(", "x", ",", "\"forward_act\"", ",", "x", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "return", "mtf", ".", "identity", "(", "x", ")", "\n", "\n", "", "def", "grad_fn", "(", "explicit_inputs", ",", "all_inputs", ",", "forward_operations", ",", "outputs", ",", "\n", "output_grads", ")", ":", "\n", "    ", "del", "explicit_inputs", ",", "all_inputs", ",", "outputs", ",", "forward_operations", "\n", "\n", "grad_ys", "=", "output_grads", "\n", "if", "clip_rms_norm", ":", "\n", "      ", "clipped_grad_ys", "=", "[", "]", "\n", "for", "g", "in", "grad_ys", ":", "\n", "        ", "rms_norm", "=", "_reduce_rms", "(", "g", ")", "\n", "clipping_denom", "=", "mtf", ".", "maximum", "(", "1.0", ",", "rms_norm", "/", "clip_rms_norm", ")", "\n", "clipped_grad_ys", ".", "append", "(", "g", "/", "clipping_denom", ")", "\n", "", "return", "clipped_grad_ys", "\n", "", "return", "grad_ys", "\n", "\n", "", "explicit_inputs", "=", "[", "x", "]", "\n", "\n", "return", "mtf", ".", "custom_gradient", "(", "forward_fn", ",", "grad_fn", ",", "explicit_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.annealed_dropout": [[2310, 2338], ["tensorflow.train.get_or_create_global_step", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.minimum", "tensorflow.cast", "mesh_tensorflow.ops_with_redefined_builtins.convert_to_shape", "tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.cast", "mesh_tensorflow.ops_with_redefined_builtins.less", "mesh_tensorflow.ops_with_redefined_builtins.random_uniform"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_uniform"], ["", "def", "annealed_dropout", "(", "x", ",", "is_training", ",", "start_step", ",", "end_step", ",", "\n", "init_rate", "=", "None", ",", "noise_shape", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Linearly anneal the dropout rate between start_step and end_step.\"\"\"", "\n", "cur_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "cur_step", "=", "tf", ".", "cast", "(", "cur_step", ",", "tf", ".", "float32", ")", "\n", "start_step", "=", "tf", ".", "cast", "(", "start_step", ",", "tf", ".", "float32", ")", "\n", "end_step", "=", "tf", ".", "cast", "(", "end_step", ",", "tf", ".", "float32", ")", "\n", "fraction_complete", "=", "(", "cur_step", "-", "start_step", ")", "/", "(", "end_step", "-", "start_step", ")", "\n", "annealed_prob", "=", "(", "1.0", "-", "init_rate", ")", "+", "fraction_complete", "*", "init_rate", "\n", "keep_prob", "=", "tf", ".", "minimum", "(", "annealed_prob", ",", "1.0", ")", "\n", "keep_prob", "=", "tf", ".", "cast", "(", "keep_prob", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "noise_shape", "=", "mtf", ".", "convert_to_shape", "(", "noise_shape", ")", "\n", "if", "noise_shape", "is", "None", ":", "\n", "    ", "noise_shape", "=", "x", ".", "shape", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"dropout\"", ")", ":", "\n", "    ", "if", "keep_prob", "==", "1.0", "or", "not", "is_training", ":", "\n", "      ", "return", "x", "\n", "", "noise", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "less", "(", "\n", "mtf", ".", "random_uniform", "(", "\n", "x", ".", "mesh", ",", "\n", "noise_shape", ",", "\n", "dtype", "=", "(", "x", ".", "dtype", "if", "x", ".", "dtype", ".", "is_floating", "else", "tf", ".", "float32", ")", ")", ",", "\n", "keep_prob", ")", ",", "x", ".", "dtype", ")", "\n", "if", "x", ".", "dtype", ".", "is_floating", ":", "\n", "      ", "noise", "/=", "keep_prob", "\n", "", "return", "x", "*", "noise", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.__init__": [[25, 29], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "tensorflow.Session"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "_graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "_mesh", "=", "mtf", ".", "Mesh", "(", "self", ".", "_graph", ",", "\"mtf_mesh\"", ")", "\n", "self", ".", "_session", "=", "tf", ".", "Session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor": [[30, 42], ["zip", "mesh_tensorflow.Shape", "mesh_tensorflow.constant", "dims.append", "mesh_tensorflow.Dimension", "range", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["", "def", "convert_np_array_to_mtf_tensor", "(", "self", ",", "x", ",", "dim_names", "=", "None", ",", "dtype", "=", "tf", ".", "int32", ")", ":", "\n", "    ", "\"\"\"Convert a numpy array to an equivalent mtf.Tensor.\"\"\"", "\n", "dim_sizes", "=", "x", ".", "shape", "\n", "if", "not", "dim_names", ":", "\n", "      ", "dim_names", "=", "[", "f\"dim{i}\"", "for", "i", "in", "range", "(", "len", "(", "dim_sizes", ")", ")", "]", "\n", "\n", "", "dims", "=", "[", "]", "\n", "for", "dim_size", ",", "dim_name", "in", "zip", "(", "dim_sizes", ",", "dim_names", ")", ":", "\n", "      ", "dims", ".", "append", "(", "mtf", ".", "Dimension", "(", "dim_name", ",", "dim_size", ")", ")", "\n", "", "shape", "=", "mtf", ".", "Shape", "(", "dims", ")", "\n", "x_mtf", "=", "mtf", ".", "constant", "(", "self", ".", "mesh", ",", "x", ",", "shape", "=", "shape", ",", "dtype", "=", "dtype", ")", "\n", "return", "x_mtf", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array": [[43, 51], ["test_utils.NumpyConverter.convert_mtf_tensor_to_tf_tensor", "tensorflow.executing_eagerly", "x_tf.numpy", "test_utils.NumpyConverter.session.run", "x_tf.eval", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run"], ["", "def", "convert_mtf_tensor_to_np_array", "(", "self", ",", "x_mtf", ")", ":", "\n", "    ", "\"\"\"Convert an mtf.Tensor to a numpy array.\"\"\"", "\n", "_", ",", "x_tf", "=", "self", ".", "convert_mtf_tensor_to_tf_tensor", "(", "x_mtf", ")", "\n", "if", "tf", ".", "executing_eagerly", "(", ")", ":", "\n", "      ", "return", "x_tf", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "session", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "return", "x_tf", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_tf_tensor": [[52, 58], ["mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], ["", "", "def", "convert_mtf_tensor_to_tf_tensor", "(", "self", ",", "mtf_tensor", ")", ":", "\n", "    ", "\"\"\"Convert an mtf.Tensor to a tf.Tensor.\"\"\"", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "return", "lowering", ",", "lowering", ".", "export_to_tf_tensor", "(", "mtf_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.graph": [[59, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "graph", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.mesh": [[63, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mesh", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.session": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "session", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_session", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils_test.UtilsTest.test_variable_placer": [[30, 50], ["tensorflow.Graph().as_default", "mesh_tensorflow.utils.BalancedVariablePlacer", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "six.moves.xrange", "six.moves.xrange", "mesh_tensorflow.get_variable", "g.get_tensor_by_name", "utils_test.UtilsTest.assertEqual", "tensorflow.Graph", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["  ", "def", "test_variable_placer", "(", "self", ")", ":", "\n", "    ", "sizes", "=", "[", "100", ",", "0", ",", "0", ",", "0", "]", "\n", "device_list", "=", "[", "'cpu:0'", ",", "'cpu:1'", ",", "'cpu:2'", ",", "'cpu:3'", "]", "\n", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "g", ":", "\n", "      ", "var_placer", "=", "mtf", ".", "utils", ".", "BalancedVariablePlacer", "(", "device_list", ",", "sizes", ")", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "'my_mesh'", ",", "var_placer", ")", "\n", "\n", "hidden_dim", "=", "mtf", ".", "Dimension", "(", "'hidden'", ",", "10", ")", "\n", "output_dim", "=", "mtf", ".", "Dimension", "(", "'output_feature'", ",", "10", ")", "\n", "\n", "for", "i", "in", "xrange", "(", "5", ")", ":", "\n", "# Each variable takes 400 Bytes, and will be placed from cpu:1.", "\n", "        ", "mtf", ".", "get_variable", "(", "mesh", ",", "'w{}'", ".", "format", "(", "i", ")", ",", "[", "hidden_dim", ",", "output_dim", "]", ")", "\n", "\n", "", "for", "i", "in", "xrange", "(", "5", ")", ":", "\n", "        ", "var", "=", "g", ".", "get_tensor_by_name", "(", "'w{}:0'", ".", "format", "(", "i", ")", ")", "\n", "device", "=", "(", "i", "+", "1", ")", "%", "len", "(", "device_list", ")", "\n", "self", ".", "assertEqual", "(", "'cpu:{}'", ".", "format", "(", "device", ")", ",", "var", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.Optimizer.apply_grads": [[47, 66], ["zip", "variables[].graph.combine_assignments", "ops.extend", "optimize.Optimizer.apply_grad"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.combine_assignments", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWithMultiLRSchedule.apply_grad"], ["def", "apply_grads", "(", "self", ",", "grads", ",", "variables", ")", ":", "\n", "    ", "\"\"\"Apply gradients to variables.\n\n    Call this function externally instead of apply_grad().  This causes the\n    operations to be combined, which is necessary for stacking variables\n    see mtf.rewrite_stack_variables().\n\n    Args:\n      grads: a list of Tensor\n      variables: a list of Variables\n    Returns:\n      a list of Operations\n    \"\"\"", "\n", "ops", "=", "[", "]", "\n", "for", "grad", ",", "var", "in", "zip", "(", "grads", ",", "variables", ")", ":", "\n", "      ", "ops", ".", "extend", "(", "self", ".", "apply_grad", "(", "grad", ",", "var", ")", ")", "\n", "", "if", "not", "ops", ":", "\n", "      ", "return", "ops", "\n", "", "return", "variables", "[", "0", "]", ".", "graph", ".", "combine_assignments", "(", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.Optimizer.apply_grad": [[67, 77], ["ValueError"], "methods", ["None"], ["", "def", "apply_grad", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "    ", "\"\"\"Update variable and accumulators.\n\n    Args:\n      grad: a Tensor\n      var: a Variablle\n    Returns:\n      a list of Operations\n    \"\"\"", "\n", "raise", "ValueError", "(", "\"apply_grad not implemented %s %s\"", "%", "(", "grad", ",", "var", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.SgdOptimizer.__init__": [[83, 85], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "learning_rate", ")", ":", "\n", "    ", "self", ".", "_lr", "=", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.SgdOptimizer.lr": [[86, 89], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "lr", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.SgdOptimizer.apply_grad": [[90, 98], ["tensorflow.logging.warning", "mesh_tensorflow.ops_with_redefined_builtins.assign_sub"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign_sub"], ["", "def", "apply_grad", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "    ", "if", "grad", "is", "None", ":", "\n", "      ", "tf", ".", "logging", ".", "warning", "(", "\"Gradient is None for variable %s\"", ",", "var", ".", "name", ")", "\n", "return", "[", "]", "\n", "# It is critical to use assign_sub instead of mtf.assign(var - ...)", "\n", "#  for the case of bfloat16 activations, so as to avoid repeatedly rounding", "\n", "#  the slice value, which results in poor quality.", "\n", "", "return", "[", "mtf", ".", "assign_sub", "(", "var", ",", "grad", "*", "self", ".", "lr", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.MomentumOptimizer.__init__": [[104, 107], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "learning_rate", ",", "momentum", ")", ":", "\n", "    ", "self", ".", "_lr", "=", "learning_rate", "\n", "self", ".", "_momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.MomentumOptimizer.lr": [[108, 111], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "lr", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.MomentumOptimizer.momentum": [[112, 115], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "momentum", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.MomentumOptimizer.apply_grad": [[116, 131], ["mesh_tensorflow.ops_with_redefined_builtins.get_variable", "tensorflow.logging.warning", "tensorflow.variable_scope", "updates.append", "updates.append", "tensorflow.zeros_initializer", "mesh_tensorflow.ops_with_redefined_builtins.assign", "mesh_tensorflow.ops_with_redefined_builtins.assign_sub"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign_sub"], ["", "def", "apply_grad", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "    ", "if", "grad", "is", "None", ":", "\n", "      ", "tf", ".", "logging", ".", "warning", "(", "\"Gradient is None for variable %s\"", ",", "var", ".", "name", ")", "\n", "return", "[", "]", "\n", "\n", "", "updates", "=", "[", "]", "\n", "v", "=", "mtf", ".", "get_variable", "(", "\n", "var", ".", "mesh", ",", "var", ".", "name", "+", "\"_momentum_v\"", ",", "var", ".", "shape", ",", "\n", "dtype", "=", "var", ".", "dtype", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "var", ".", "name", "+", "\"/sgd_momentum\"", ")", ":", "\n", "      ", "updates", ".", "append", "(", "mtf", ".", "assign", "(", "v", ",", "grad", "*", "self", ".", "lr", "+", "v", "*", "self", ".", "momentum", ")", ")", "\n", "updates", ".", "append", "(", "mtf", ".", "assign_sub", "(", "var", ",", "v", ")", ")", "\n", "\n", "", "return", "updates", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWeightDecayOptimizer.__init__": [[137, 152], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "learning_rate", ",", "\n", "weight_decay_rate", "=", "0.0", ",", "\n", "beta_1", "=", "0.9", ",", "\n", "beta_2", "=", "0.999", ",", "\n", "epsilon", "=", "1e-6", ",", "\n", "exclude_from_weight_decay", "=", "None", ")", ":", "\n", "    ", "\"\"\"Constructs a AdamWeightDecayOptimizer.\"\"\"", "\n", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "weight_decay_rate", "=", "weight_decay_rate", "\n", "self", ".", "beta_1", "=", "beta_1", "\n", "self", ".", "beta_2", "=", "beta_2", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "exclude_from_weight_decay", "=", "exclude_from_weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWeightDecayOptimizer.apply_grad": [[153, 195], ["mesh_tensorflow.ops_with_redefined_builtins.to_float", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "optimize.AdamWeightDecayOptimizer._do_use_weight_decay", "mesh_tensorflow.ops_with_redefined_builtins.assign_sub", "assignments.extend", "tensorflow.logging.warning", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "mesh_tensorflow.ops_with_redefined_builtins.square", "mesh_tensorflow.ops_with_redefined_builtins.sqrt", "mesh_tensorflow.ops_with_redefined_builtins.assign", "mesh_tensorflow.ops_with_redefined_builtins.assign"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWeightDecayOptimizer._do_use_weight_decay", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign_sub", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign"], ["", "def", "apply_grad", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "if", "grad", "is", "None", ":", "\n", "      ", "tf", ".", "logging", ".", "warning", "(", "\"Gradient is None for variable %s\"", ",", "var", ".", "name", ")", "\n", "return", "[", "]", "\n", "", "grad", "=", "mtf", ".", "to_float", "(", "grad", ")", "\n", "\n", "assignments", "=", "[", "]", "\n", "\n", "m", "=", "mtf", ".", "get_variable", "(", "\n", "var", ".", "mesh", ",", "var", ".", "name", "+", "\"/adam_m\"", ",", "var", ".", "shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "v", "=", "mtf", ".", "get_variable", "(", "\n", "var", ".", "mesh", ",", "var", ".", "name", "+", "\"/adam_v\"", ",", "var", ".", "shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "# Standard Adam update.", "\n", "next_m", "=", "self", ".", "beta_1", "*", "m", "+", "(", "1.0", "-", "self", ".", "beta_1", ")", "*", "grad", "\n", "next_v", "=", "self", ".", "beta_2", "*", "v", "+", "(", "1.0", "-", "self", ".", "beta_2", ")", "*", "mtf", ".", "square", "(", "grad", ")", "\n", "\n", "update", "=", "next_m", "/", "(", "mtf", ".", "sqrt", "(", "next_v", ")", "+", "self", ".", "epsilon", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want ot decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "if", "self", ".", "_do_use_weight_decay", "(", "var", ".", "name", ")", ":", "\n", "      ", "update", "+=", "self", ".", "weight_decay_rate", "*", "var", ".", "value", "\n", "\n", "", "update_with_lr", "=", "self", ".", "learning_rate", "*", "update", "\n", "\n", "var_update", "=", "mtf", ".", "assign_sub", "(", "var", ",", "update_with_lr", ")", "\n", "\n", "assignments", ".", "extend", "(", "\n", "[", "var_update", ",", "\n", "mtf", ".", "assign", "(", "m", ",", "next_m", ")", ",", "\n", "mtf", ".", "assign", "(", "v", ",", "next_v", ")", "]", ")", "\n", "return", "assignments", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWeightDecayOptimizer._do_use_weight_decay": [[196, 205], ["re.search"], "methods", ["None"], ["", "def", "_do_use_weight_decay", "(", "self", ",", "param_name", ")", ":", "\n", "    ", "\"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"", "\n", "if", "not", "self", ".", "weight_decay_rate", ":", "\n", "      ", "return", "False", "\n", "", "if", "self", ".", "exclude_from_weight_decay", ":", "\n", "      ", "for", "r", "in", "self", ".", "exclude_from_weight_decay", ":", "\n", "        ", "if", "re", ".", "search", "(", "r", ",", "param_name", ")", "is", "not", "None", ":", "\n", "          ", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorOptimizer.__init__": [[211, 264], ["optimize.AdafactorOptimizer._learning_rate_default", "optimize.AdafactorOptimizer._decay_rate_default"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorOptimizer._learning_rate_default", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorOptimizer._decay_rate_default"], ["def", "__init__", "(", "self", ",", "\n", "multiply_by_parameter_scale", "=", "True", ",", "\n", "learning_rate", "=", "None", ",", "\n", "decay_rate", "=", "None", ",", "\n", "beta1", "=", "0.0", ",", "\n", "clipping_threshold", "=", "1.0", ",", "\n", "factored", "=", "True", ",", "\n", "epsilon1", "=", "1e-30", ",", "\n", "epsilon2", "=", "1e-3", ",", "\n", "min_dim_size_to_factor", "=", "128", ",", "\n", "stacked_dim_names", "=", "None", ",", "\n", "exclude_from_parameter_scale", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Construct a new Adafactor optimizer.\n\n    See class comment.\n\n    Args:\n      multiply_by_parameter_scale: a boolean\n      learning_rate: an optional Scalar.\n      decay_rate: an optional Scalar.\n      beta1: a float value between 0 and 1\n      clipping_threshold: an optional float >= 1\n      factored: a boolean - whether to use factored second-moment estimator\n        for 2d variables\n      epsilon1: Regularization constant for squared gradient.\n      epsilon2: Regularization constant for parameter scale.\n      min_dim_size_to_factor: only factor accumulator if two tensor dimensions\n        are at least this size.\n      stacked_dim_names: an optional list of dimension names never to be\n        factored or reduced over.\n      exclude_from_parameter_scale: an optional list of strings of parameter\n        names to exclude from updating proportion to its parameter scale.\n\n    Raises:\n      ValueError: if absolute_update_scale and relative_update_scale_fn are both\n        present or both absent.\n    \"\"\"", "\n", "self", ".", "_multiply_by_parameter_scale", "=", "multiply_by_parameter_scale", "\n", "if", "learning_rate", "is", "None", ":", "\n", "      ", "learning_rate", "=", "self", ".", "_learning_rate_default", "(", "multiply_by_parameter_scale", ")", "\n", "", "self", ".", "_learning_rate", "=", "learning_rate", "\n", "if", "decay_rate", "is", "None", ":", "\n", "      ", "decay_rate", "=", "self", ".", "_decay_rate_default", "(", ")", "\n", "", "self", ".", "_decay_rate", "=", "decay_rate", "\n", "self", ".", "_beta1", "=", "beta1", "\n", "self", ".", "_clipping_threshold", "=", "clipping_threshold", "\n", "self", ".", "_factored", "=", "factored", "\n", "self", ".", "_epsilon1", "=", "epsilon1", "\n", "self", ".", "_epsilon2", "=", "epsilon2", "\n", "self", ".", "_min_dim_size_to_factor", "=", "min_dim_size_to_factor", "\n", "self", ".", "_stacked_dim_names", "=", "stacked_dim_names", "or", "[", "]", "\n", "self", ".", "_exclude_from_parameter_scale", "=", "exclude_from_parameter_scale", "or", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorOptimizer._factored_dims": [[265, 288], ["sorted", "len"], "methods", ["None"], ["", "def", "_factored_dims", "(", "self", ",", "shape", ")", ":", "\n", "    ", "\"\"\"Should we use a factored second moment estimator.\n\n    Based on the shape of the variable.\n    If we factor the accumulator, then this function returns a list of two\n    mtf.Dimensions to reduce over.  We always pick the two largest dimensions.\n    If there are not two dimensions of size >= min_dim_size_to_factor, then we\n    do not factor.\n\n    Args:\n      shape: a Shape\n    Returns:\n      either a list of 2 Dimensions or None\n    \"\"\"", "\n", "if", "not", "self", ".", "_factored", ":", "\n", "      ", "return", "None", "\n", "", "dims", "=", "[", "d", "for", "d", "in", "shape", ".", "dims", "if", "d", ".", "name", "not", "in", "self", ".", "_stacked_dim_names", "]", "\n", "if", "len", "(", "dims", ")", "<", "2", ":", "\n", "      ", "return", "None", "\n", "", "sorted_dims", "=", "sorted", "(", "dims", ",", "key", "=", "lambda", "d", ":", "-", "d", ".", "size", ")", "\n", "if", "sorted_dims", "[", "1", "]", ".", "size", "<", "self", ".", "_min_dim_size_to_factor", ":", "\n", "      ", "return", "None", "\n", "", "return", "sorted_dims", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorOptimizer._parameter_scale": [[289, 307], ["mesh_tensorflow.ops_with_redefined_builtins.maximum", "optimize.reduce_rms"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.reduce_rms"], ["", "def", "_parameter_scale", "(", "self", ",", "var", ")", ":", "\n", "    ", "\"\"\"Estimate the scale of the parameters from the current values.\n\n    We include a minimum value of 0.001 to give it a chance to escape 0\n    if it was zero-initialized.\n\n    Instead of using the value, we could impute the scale from the shape,\n    as initializers do.\n\n    Args:\n      var: a variable or Tensor.\n    Returns:\n      a Scalar\n    \"\"\"", "\n", "output_shape", "=", "[", "\n", "d", "for", "d", "in", "var", ".", "shape", ".", "dims", "if", "d", ".", "name", "in", "self", ".", "_stacked_dim_names", "]", "\n", "return", "mtf", ".", "maximum", "(", "\n", "reduce_rms", "(", "var", ",", "output_shape", "=", "output_shape", ")", ",", "self", ".", "_epsilon2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorOptimizer.apply_grad": [[308, 380], ["mesh_tensorflow.ops_with_redefined_builtins.to_float", "optimize.AdafactorOptimizer._factored_dims", "tensorflow.logging.warning", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "mesh_tensorflow.ops_with_redefined_builtins.get_variable", "tensorflow.variable_scope", "mesh_tensorflow.ops_with_redefined_builtins.to_float", "mesh_tensorflow.ops_with_redefined_builtins.assign_sub", "updates.append", "mesh_tensorflow.ops_with_redefined_builtins.square", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.assign", "mesh_tensorflow.ops_with_redefined_builtins.assign", "updates.extend", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.rsqrt", "mesh_tensorflow.ops_with_redefined_builtins.rsqrt", "mesh_tensorflow.ops_with_redefined_builtins.assign", "updates.append", "mesh_tensorflow.ops_with_redefined_builtins.maximum", "updates.append", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "any", "optimize.AdafactorOptimizer._parameter_scale", "mesh_tensorflow.ops_with_redefined_builtins.rsqrt", "mesh_tensorflow.ops_with_redefined_builtins.assign", "optimize.reduce_rms", "tensorflow.constant", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorOptimizer._factored_dims", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign_sub", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorOptimizer._parameter_scale", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.reduce_rms", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["", "def", "apply_grad", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "    ", "if", "grad", "is", "None", ":", "\n", "      ", "tf", ".", "logging", ".", "warning", "(", "\"Gradient is None for variable %s\"", ",", "var", ".", "name", ")", "\n", "return", "[", "]", "\n", "# create slots", "\n", "", "grad", "=", "mtf", ".", "to_float", "(", "grad", ")", "\n", "factored_dims", "=", "self", ".", "_factored_dims", "(", "var", ".", "shape", ")", "\n", "if", "factored_dims", ":", "\n", "      ", "d0", ",", "d1", "=", "factored_dims", "\n", "vr_shape", "=", "var", ".", "shape", "-", "d0", "\n", "vc_shape", "=", "var", ".", "shape", "-", "d1", "\n", "vr", "=", "mtf", ".", "get_variable", "(", "\n", "var", ".", "mesh", ",", "var", ".", "name", "+", "\"_slot_vr\"", ",", "vr_shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "trainable", "=", "False", ")", "\n", "vc", "=", "mtf", ".", "get_variable", "(", "\n", "var", ".", "mesh", ",", "var", ".", "name", "+", "\"_slot_vc\"", ",", "vc_shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "trainable", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "v", "=", "mtf", ".", "get_variable", "(", "\n", "var", ".", "mesh", ",", "var", ".", "name", "+", "\"_slot_v\"", ",", "var", ".", "shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "trainable", "=", "False", ")", "\n", "", "if", "self", ".", "_beta1", ":", "\n", "      ", "m", "=", "mtf", ".", "get_variable", "(", "\n", "var", ".", "mesh", ",", "var", ".", "name", "+", "\"_slot_m\"", ",", "var", ".", "shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "var", ".", "name", "+", "\"/adafactor\"", ")", ":", "\n", "      ", "grad_squared", "=", "mtf", ".", "square", "(", "grad", ")", "+", "self", ".", "_epsilon1", "\n", "decay_rate", "=", "self", ".", "_decay_rate", "\n", "old_val", "=", "mtf", ".", "to_float", "(", "var", ".", "value", ")", "\n", "if", "self", ".", "_multiply_by_parameter_scale", "and", "not", "any", "(", "[", "\n", "s", "in", "var", ".", "name", "for", "s", "in", "self", ".", "_exclude_from_parameter_scale", "]", ")", ":", "\n", "        ", "update_scale", "=", "self", ".", "_parameter_scale", "(", "old_val", ")", "*", "self", ".", "_learning_rate", "\n", "", "else", ":", "\n", "        ", "update_scale", "=", "self", ".", "_learning_rate", "\n", "", "mixing_rate", "=", "1.0", "-", "decay_rate", "\n", "updates", "=", "[", "]", "\n", "if", "factored_dims", ":", "\n", "        ", "grad_squared_row_mean", "=", "mtf", ".", "reduce_mean", "(", "\n", "grad_squared", ",", "output_shape", "=", "vr_shape", ")", "\n", "grad_squared_col_mean", "=", "mtf", ".", "reduce_mean", "(", "\n", "grad_squared", ",", "output_shape", "=", "vc_shape", ")", "\n", "new_vr", "=", "vr", "*", "decay_rate", "+", "grad_squared_row_mean", "*", "mixing_rate", "\n", "new_vc", "=", "vc", "*", "decay_rate", "+", "grad_squared_col_mean", "*", "mixing_rate", "\n", "vr_update", "=", "mtf", ".", "assign", "(", "vr", ",", "new_vr", ")", "\n", "vc_update", "=", "mtf", ".", "assign", "(", "vc", ",", "new_vc", ")", "\n", "updates", ".", "extend", "(", "[", "vr_update", ",", "vc_update", "]", ")", "\n", "long_term_mean", "=", "mtf", ".", "reduce_mean", "(", "new_vr", ",", "reduced_dim", "=", "d1", ")", "\n", "r_factor", "=", "mtf", ".", "rsqrt", "(", "new_vr", "/", "long_term_mean", ")", "\n", "c_factor", "=", "mtf", ".", "rsqrt", "(", "new_vc", ")", "\n", "x", "=", "grad", "*", "r_factor", "*", "c_factor", "\n", "", "else", ":", "\n", "        ", "new_v", "=", "v", "*", "decay_rate", "+", "grad_squared", "*", "mixing_rate", "\n", "v_update", "=", "mtf", ".", "assign", "(", "v", ",", "new_v", ")", "\n", "updates", ".", "append", "(", "v_update", ")", "\n", "x", "=", "grad", "*", "mtf", ".", "rsqrt", "(", "new_v", ")", "\n", "", "if", "self", ".", "_clipping_threshold", "is", "not", "None", ":", "\n", "        ", "clipping_denom", "=", "mtf", ".", "maximum", "(", "\n", "1.0", ",", "reduce_rms", "(", "x", ")", "/", "self", ".", "_clipping_threshold", ")", "\n", "x", "/=", "clipping_denom", "\n", "", "subtrahend", "=", "x", "*", "update_scale", "\n", "if", "self", ".", "_beta1", ":", "\n", "        ", "new_m", "=", "(", "m", "*", "tf", ".", "constant", "(", "self", ".", "_beta1", ")", "\n", "+", "subtrahend", "*", "tf", ".", "constant", "(", "1.0", "-", "self", ".", "_beta1", ")", ")", "\n", "subtrahend", "=", "new_m", "\n", "updates", ".", "append", "(", "mtf", ".", "assign", "(", "m", ",", "new_m", ")", ")", "\n", "# It is critical to use assign_sub instead of mtf.assign(var - subtrahend)", "\n", "#  for the case of bfloat16 activations, so as to avoid repeatedly", "\n", "#  rounding the slice value, which results in poor quality.", "\n", "", "var_update", "=", "mtf", ".", "assign_sub", "(", "var", ",", "subtrahend", ")", "\n", "updates", ".", "append", "(", "var_update", ")", "\n", "return", "updates", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorOptimizer._decay_rate_default": [[381, 383], ["optimize.adafactor_decay_rate_pow"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.adafactor_decay_rate_pow"], ["", "", "def", "_decay_rate_default", "(", "self", ")", ":", "\n", "    ", "return", "adafactor_decay_rate_pow", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorOptimizer._learning_rate_default": [[384, 391], ["tensorflow.cast", "tensorflow.minimum", "tensorflow.train.get_or_create_global_step", "tensorflow.math.rsqrt", "mesh_tensorflow.layers.unit_scaling_convention"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention"], ["", "def", "_learning_rate_default", "(", "self", ",", "multiply_by_parameter_scale", ")", ":", "\n", "    ", "step_num", "=", "tf", ".", "cast", "(", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", ",", "tf", ".", "float32", ")", "\n", "learning_rate", "=", "tf", ".", "minimum", "(", "tf", ".", "math", ".", "rsqrt", "(", "step_num", "+", "1.0", ")", ",", "0.01", ")", "\n", "if", "(", "not", "multiply_by_parameter_scale", "\n", "and", "not", "layers", ".", "unit_scaling_convention", "(", ")", ")", ":", "\n", "      ", "learning_rate", "*=", "0.05", "\n", "", "return", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorWithMultiLRSchedule.__init__": [[513, 536], ["optimize.AdafactorOptimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "\n", "variable_search", "=", "None", ",", "\n", "alt_lr_schedules", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Construct a new Adafactor optimizer.\n\n    See class comment.\n\n    Args:\n      variable_search: list of regex strings to use alt learning rate.\n      alt_lr_schedules: list of learning_rate_schedules\n      **kwargs: Adafactor keyword args\n\n    Raises:\n      ValueError: if absolute_update_scale and relative_update_scale_fn are both\n        present or both absent.\n    \"\"\"", "\n", "super", "(", "AdafactorWithMultiLRSchedule", ",", "self", ")", ".", "__init__", "(", "\n", "**", "kwargs", "\n", ")", "\n", "self", ".", "variable_search", "=", "variable_search", "\n", "self", ".", "alt_lr_schedules", "=", "alt_lr_schedules", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdafactorWithMultiLRSchedule.apply_grad": [[537, 558], ["optimize.compute_lr_for_step", "enumerate", "optimize.AdafactorOptimizer.apply_grad", "re.search", "optimize.AdafactorOptimizer.apply_grad", "optimize.AdafactorOptimizer.apply_grad"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.compute_lr_for_step", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWithMultiLRSchedule.apply_grad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWithMultiLRSchedule.apply_grad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWithMultiLRSchedule.apply_grad"], ["", "def", "apply_grad", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "    ", "if", "self", ".", "alt_lr_schedules", "is", "None", "or", "self", ".", "variable_search", "is", "None", ":", "\n", "      ", "return", "super", "(", "AdafactorWithMultiLRSchedule", ",", "self", ")", ".", "apply_grad", "(", "grad", ",", "var", ")", "\n", "\n", "", "actual_lr_rates", "=", "compute_lr_for_step", "(", "self", ".", "alt_lr_schedules", ",", "\n", "self", ".", "_learning_rate", ",", "\n", ")", "\n", "# Modify learning rate for exception variables", "\n", "for", "idx", ",", "variable_search", "in", "enumerate", "(", "self", ".", "variable_search", ")", ":", "\n", "      ", "if", "re", ".", "search", "(", "variable_search", ",", "var", ".", "name", ")", "is", "not", "None", ":", "\n", "# finds variable in LR schedule", "\n", "        ", "old_lr", "=", "self", ".", "_learning_rate", "\n", "# get n-th learning rate schedule", "\n", "self", ".", "_learning_rate", "=", "actual_lr_rates", "[", "idx", "]", "\n", "assignments", "=", "super", "(", "AdafactorWithMultiLRSchedule", ",", "\n", "self", ")", ".", "apply_grad", "(", "grad", ",", "var", ")", "\n", "self", ".", "_learning_rate", "=", "old_lr", "\n", "", "else", ":", "\n", "        ", "assignments", "=", "super", "(", "AdafactorWithMultiLRSchedule", ",", "\n", "self", ")", ".", "apply_grad", "(", "grad", ",", "var", ")", "\n", "", "", "return", "assignments", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWithMultiLRSchedule.__init__": [[575, 592], ["optimize.AdamWeightDecayOptimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "\n", "variable_search", "=", "None", ",", "\n", "alt_lr_schedules", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Adam LR with multi LR schedule.\n\n    Args:\n      variable_search: list of regex strings to use alt learning rate.\n      alt_lr_schedules: list of learning_rate_schedules\n      **kwargs: Adam keyword args\n    \"\"\"", "\n", "super", "(", "AdamWithMultiLRSchedule", ",", "self", ")", ".", "__init__", "(", "\n", "**", "kwargs", "\n", ")", "\n", "self", ".", "variable_search", "=", "variable_search", "\n", "self", ".", "alt_lr_schedules", "=", "alt_lr_schedules", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWithMultiLRSchedule.apply_grad": [[593, 615], ["optimize.compute_lr_for_step", "enumerate", "optimize.AdamWeightDecayOptimizer.apply_grad", "re.search", "optimize.AdamWeightDecayOptimizer.apply_grad", "optimize.AdamWeightDecayOptimizer.apply_grad"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.compute_lr_for_step", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWithMultiLRSchedule.apply_grad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWithMultiLRSchedule.apply_grad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.AdamWithMultiLRSchedule.apply_grad"], ["", "def", "apply_grad", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "    ", "if", "self", ".", "alt_lr_schedules", "is", "None", "or", "self", ".", "variable_search", "is", "None", ":", "\n", "      ", "return", "super", "(", "AdamWithMultiLRSchedule", ",", "self", ")", ".", "apply_grad", "(", "grad", ",", "var", ")", "\n", "\n", "", "actual_lr_rates", "=", "compute_lr_for_step", "(", "self", ".", "alt_lr_schedules", ",", "\n", "self", ".", "learning_rate", "\n", ")", "\n", "\n", "# Modify learning rate for exception variables", "\n", "for", "idx", ",", "variable_search", "in", "enumerate", "(", "self", ".", "variable_search", ")", ":", "\n", "      ", "if", "re", ".", "search", "(", "variable_search", ",", "var", ".", "name", ")", "is", "not", "None", ":", "\n", "# finds variable in LR schedule", "\n", "        ", "old_lr", "=", "self", ".", "learning_rate", "\n", "# get n-th learning rate schedule", "\n", "self", ".", "learning_rate", "=", "actual_lr_rates", "[", "idx", "]", "\n", "assignments", "=", "super", "(", "AdamWithMultiLRSchedule", ",", "\n", "self", ")", ".", "apply_grad", "(", "grad", ",", "var", ")", "\n", "self", ".", "learning_rate", "=", "old_lr", "\n", "", "else", ":", "\n", "        ", "assignments", "=", "super", "(", "AdamWithMultiLRSchedule", ",", "\n", "self", ")", ".", "apply_grad", "(", "grad", ",", "var", ")", "\n", "", "", "return", "assignments", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.make_optimizer": [[32, 39], ["optimize.SgdOptimizer", "optimize.adafactor_optimizer_from_hparams", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.adafactor_optimizer_from_hparams"], ["def", "make_optimizer", "(", "hparams", ",", "lr", ")", ":", "\n", "  ", "if", "hparams", ".", "optimizer", "==", "\"SGD\"", ":", "\n", "    ", "return", "SgdOptimizer", "(", "lr", ")", "\n", "", "elif", "hparams", ".", "optimizer", "==", "\"Adafactor\"", ":", "\n", "    ", "return", "adafactor_optimizer_from_hparams", "(", "hparams", ",", "lr", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown Optimizer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.adafactor_decay_rate_adam": [[393, 404], ["tensorflow.cast", "tensorflow.train.get_or_create_global_step", "tensorflow.pow", "tensorflow.pow"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "", "def", "adafactor_decay_rate_adam", "(", "beta2", ")", ":", "\n", "  ", "\"\"\"Second-moment decay rate like Adam, subsuming the correction factor.\n\n  Args:\n    beta2: a float between 0 and 1\n  Returns:\n    a scalar\n  \"\"\"", "\n", "t", "=", "tf", ".", "cast", "(", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", ",", "tf", ".", "float32", ")", "+", "1.0", "\n", "decay", "=", "beta2", "*", "(", "1.0", "-", "tf", ".", "pow", "(", "beta2", ",", "t", "-", "1.0", ")", ")", "/", "(", "1.0", "-", "tf", ".", "pow", "(", "beta2", ",", "t", ")", ")", "\n", "return", "decay", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.adafactor_decay_rate_pow": [[406, 421], ["tensorflow.cast", "tensorflow.pow", "tensorflow.train.get_or_create_global_step"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "@", "gin", ".", "configurable", "\n", "def", "adafactor_decay_rate_pow", "(", "exponent", "=", "0.8", ",", "offset", "=", "0", ")", ":", "\n", "  ", "\"\"\"Second moment decay rate where memory-length grows as step_num^exponent.\n\n  For fine-tuning, you may want to gin-configure offset to equal the starting\n  step-number for the fine-tuning phase.\n\n  Args:\n    exponent: a float between 0 and 1\n    offset: an integer (the starting step number)\n  Returns:\n    a scalar\n  \"\"\"", "\n", "step_num", "=", "tf", ".", "cast", "(", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "-", "offset", ",", "tf", ".", "float32", ")", "\n", "return", "1.0", "-", "tf", ".", "pow", "(", "(", "step_num", "+", "1.0", ")", ",", "-", "exponent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.adafactor_optimizer_from_hparams": [[423, 450], ["optimize.AdafactorOptimizer", "optimize.adafactor_decay_rate_adam", "optimize.adafactor_decay_rate_pow", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.adafactor_decay_rate_adam", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.adafactor_decay_rate_pow"], ["", "def", "adafactor_optimizer_from_hparams", "(", "hparams", ",", "lr", ")", ":", "\n", "  ", "\"\"\"Create an Adafactor optimizer based on model hparams.\n\n  Args:\n    hparams: model hyperparameters\n    lr: learning rate scalar.\n  Returns:\n    an AdafactorOptimizer\n  Raises:\n    ValueError: on illegal values\n  \"\"\"", "\n", "if", "hparams", ".", "optimizer_adafactor_decay_type", "==", "\"Adam\"", ":", "\n", "    ", "decay_rate", "=", "adafactor_decay_rate_adam", "(", "\n", "hparams", ".", "optimizer_adafactor_beta2", ")", "\n", "", "elif", "hparams", ".", "optimizer_adafactor_decay_type", "==", "\"pow\"", ":", "\n", "    ", "decay_rate", "=", "adafactor_decay_rate_pow", "(", "\n", "hparams", ".", "optimizer_adafactor_memory_exponent", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"unknown optimizer_adafactor_decay_type\"", ")", "\n", "", "return", "AdafactorOptimizer", "(", "\n", "multiply_by_parameter_scale", "=", "(", "\n", "hparams", ".", "optimizer_adafactor_multiply_by_parameter_scale", ")", ",", "\n", "learning_rate", "=", "lr", ",", "\n", "decay_rate", "=", "decay_rate", ",", "\n", "beta1", "=", "hparams", ".", "optimizer_adafactor_beta1", ",", "\n", "clipping_threshold", "=", "hparams", ".", "optimizer_adafactor_clipping_threshold", ",", "\n", "factored", "=", "hparams", ".", "optimizer_adafactor_factored", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.reduce_rms": [[452, 454], ["mesh_tensorflow.ops_with_redefined_builtins.sqrt", "mesh_tensorflow.ops_with_redefined_builtins.reduce_mean", "mesh_tensorflow.ops_with_redefined_builtins.square"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square"], ["", "def", "reduce_rms", "(", "x", ",", "**", "kwargs", ")", ":", "\n", "  ", "return", "mtf", ".", "sqrt", "(", "mtf", ".", "reduce_mean", "(", "mtf", ".", "square", "(", "x", ")", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.product_learning_rate": [[458, 484], ["callable", "f"], "function", ["None"], ["", "@", "gin", ".", "configurable", "\n", "def", "product_learning_rate", "(", "step", ",", "\n", "total_train_steps", ",", "\n", "factors", "=", "gin", ".", "REQUIRED", ",", "\n", "offset", "=", "0", ")", ":", "\n", "  ", "\"\"\"Learning rate is the product of one or more factors.\n\n  Takes a list of factors which are either numbers or learning-rate functions\n  each taking step and total_train_step arguments.\n\n  If `offset` is nonzero, then subtract offset from the step and from\n  total_train_steps before computing the learning rate.\n\n  Args:\n    step: a tf.Scalar\n    total_train_steps: a number\n    factors: a list of numbers and/or functions\n    offset: an optional float\n\n  Returns:\n    a tf.Scalar, the learning rate for the step.\n  \"\"\"", "\n", "ret", "=", "1.0", "\n", "for", "f", "in", "factors", ":", "\n", "    ", "ret", "*=", "f", "(", "step", "-", "offset", ",", "total_train_steps", "-", "offset", ")", "if", "callable", "(", "f", ")", "else", "f", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.compute_lr_for_step": [[486, 507], ["actual_lr_rates.append", "functools.partial", "functools.partial", "callable", "actual_lr_rates.append", "mesh_tensorflow.ops_with_redefined_builtins.utils.outside_all_rewrites", "converted_schedule.", "tensorflow.summary.scalar", "tensorflow.train.get_global_step"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.outside_all_rewrites"], ["", "@", "gin", ".", "configurable", "\n", "def", "compute_lr_for_step", "(", "schedules", ",", "learning_rate", ",", "\n", "train_steps", "=", "524288", ")", ":", "\n", "  ", "\"\"\"Get actual LR for step.\"\"\"", "\n", "actual_lr_rates", "=", "[", "]", "\n", "for", "lr_schedule", "in", "schedules", ":", "\n", "    ", "if", "lr_schedule", "is", "None", ":", "\n", "      ", "actual_lr_rates", ".", "append", "(", "learning_rate", ")", "\n", "", "else", ":", "\n", "      ", "converted_schedule", "=", "functools", ".", "partial", "(", "\n", "product_learning_rate", ",", "factors", "=", "lr_schedule", ")", "\n", "converted_schedule", "=", "functools", ".", "partial", "(", "\n", "converted_schedule", ",", "total_train_steps", "=", "train_steps", ")", "\n", "if", "callable", "(", "converted_schedule", ")", ":", "\n", "# the following happens on CPU since TPU can't handle summaries.", "\n", "        ", "with", "mtf", ".", "utils", ".", "outside_all_rewrites", "(", ")", ":", "\n", "          ", "converted_schedule", "=", "converted_schedule", "(", "\n", "step", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"alt_learning_rate\"", ",", "converted_schedule", ")", "\n", "", "", "actual_lr_rates", ".", "append", "(", "converted_schedule", ")", "\n", "", "", "return", "actual_lr_rates", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testDense": [[49, 87], ["absl.testing.parameterized.parameters", "tensorflow.random_normal", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.layers.dense", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.copy_masters_to_slices", "tensorflow.global_variables_initializer", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertEqual", "tensorflow.keras.layers.Dense", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["  ", "@", "parameterized", ".", "parameters", "(", "\n", "(", "4", ",", "True", ",", "\"not_channels\"", ")", ",", "\n", "(", "8", ",", "False", ",", "\"channels\"", ")", ",", "\n", ")", "\n", "def", "testDense", "(", "self", ",", "units", ",", "use_bias", ",", "new_dim_name", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "channels", "=", "3", "\n", "inputs", "=", "tf", ".", "random_normal", "(", "[", "batch", ",", "channels", "]", ")", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "channels_dim", "=", "mtf", ".", "Dimension", "(", "\"channels\"", ",", "channels", ")", "\n", "new_dim", "=", "mtf", ".", "Dimension", "(", "new_dim_name", ",", "units", ")", "\n", "\n", "mtf_inputs", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "inputs", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "channels_dim", "]", ")", ")", "\n", "mtf_outputs", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "mtf_inputs", ",", "\n", "new_dims", "=", "new_dim", ",", "\n", "reduced_dims", "=", "[", "channels_dim", "]", ",", "\n", "activation", "=", "mtf", ".", "relu", ",", "\n", "use_bias", "=", "use_bias", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "\n", "expected_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "units", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "use_bias", "=", "use_bias", ")", "(", "inputs", ")", "\n", "tf_group", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "evaluate", "(", "init", ")", "\n", "self", ".", "evaluate", "(", "tf_group", ")", "\n", "actual", ",", "expected", "=", "self", ".", "evaluate", "(", "[", "actual_outputs", ",", "expected_outputs", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ".", "shape", ",", "expected", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testCorr2DInput": [[88, 117], ["tensorflow.python.framework.test_util.run_in_graph_and_eager_modes", "tensorflow.random_normal", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.layers.corr", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "tensorflow_probability.stats.correlation", "mesh_tensorflow.Lowering.copy_masters_to_slices", "tensorflow.global_variables_initializer", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertEqual", "layers_test.LayersTest.assertAllClose", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.corr", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "@", "test_util", ".", "run_in_graph_and_eager_modes", "(", ")", "\n", "def", "testCorr2DInput", "(", "self", ")", ":", "\n", "    ", "batch", "=", "4", "\n", "channels", "=", "3", "\n", "inputs", "=", "tf", ".", "random_normal", "(", "[", "batch", ",", "channels", "]", ")", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "channels_dim", "=", "mtf", ".", "Dimension", "(", "\"channels\"", ",", "channels", ")", "\n", "\n", "mtf_inputs", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "inputs", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "channels_dim", "]", ")", ")", "\n", "mtf_outputs", "=", "mtf", ".", "layers", ".", "corr", "(", "mtf_inputs", ",", "dim", "=", "channels_dim", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "\n", "expected_outputs", "=", "tfp", ".", "stats", ".", "correlation", "(", "\n", "inputs", ",", "sample_axis", "=", "0", ",", "event_axis", "=", "1", ")", "\n", "tf_group", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "evaluate", "(", "init", ")", "\n", "self", ".", "evaluate", "(", "tf_group", ")", "\n", "actual", ",", "expected", "=", "self", ".", "evaluate", "(", "[", "actual_outputs", ",", "expected_outputs", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ".", "shape", ",", "expected", ".", "shape", ")", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testCorr3DInput": [[118, 149], ["tensorflow.python.framework.test_util.run_in_graph_and_eager_modes", "tensorflow.random_normal", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.layers.corr", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "tensorflow_probability.stats.correlation", "mesh_tensorflow.Lowering.copy_masters_to_slices", "tensorflow.global_variables_initializer", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertEqual", "layers_test.LayersTest.assertAllClose", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.corr", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "@", "test_util", ".", "run_in_graph_and_eager_modes", "(", ")", "\n", "def", "testCorr3DInput", "(", "self", ")", ":", "\n", "    ", "batch", "=", "4", "\n", "sequence", "=", "5", "\n", "channels", "=", "3", "\n", "inputs", "=", "tf", ".", "random_normal", "(", "[", "batch", ",", "sequence", ",", "channels", "]", ")", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "seq_dim", "=", "mtf", ".", "Dimension", "(", "\"seq\"", ",", "sequence", ")", "\n", "channels_dim", "=", "mtf", ".", "Dimension", "(", "\"channels\"", ",", "channels", ")", "\n", "\n", "mtf_inputs", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "inputs", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "seq_dim", ",", "channels_dim", "]", ")", ")", "\n", "mtf_outputs", "=", "mtf", ".", "layers", ".", "corr", "(", "mtf_inputs", ",", "dim", "=", "channels_dim", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "\n", "expected_outputs", "=", "tfp", ".", "stats", ".", "correlation", "(", "\n", "inputs", ",", "sample_axis", "=", "[", "0", ",", "1", "]", ",", "event_axis", "=", "2", ")", "\n", "tf_group", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "evaluate", "(", "init", ")", "\n", "self", ".", "evaluate", "(", "tf_group", ")", "\n", "actual", ",", "expected", "=", "self", ".", "evaluate", "(", "[", "actual_outputs", ",", "expected_outputs", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ".", "shape", ",", "expected", ".", "shape", ")", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testLayerNorm": [[150, 178], ["tensorflow.python.framework.test_util.run_in_graph_and_eager_modes", "tensorflow.random_normal", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.layers.layer_norm", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.copy_masters_to_slices", "tensorflow.global_variables_initializer", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertEqual", "tensorflow.keras.layers.LayerNormalization", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.layer_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "@", "test_util", ".", "run_in_graph_and_eager_modes", "(", ")", "\n", "def", "testLayerNorm", "(", "self", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "channels", "=", "3", "\n", "inputs", "=", "tf", ".", "random_normal", "(", "[", "batch", ",", "channels", "]", ")", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "channels_dim", "=", "mtf", ".", "Dimension", "(", "\"channels\"", ",", "channels", ")", "\n", "\n", "mtf_inputs", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "inputs", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "channels_dim", "]", ")", ")", "\n", "mtf_outputs", "=", "mtf", ".", "layers", ".", "layer_norm", "(", "mtf_inputs", ",", "\n", "dim", "=", "channels_dim", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "\n", "expected_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", ")", "(", "inputs", ")", "\n", "tf_group", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "evaluate", "(", "init", ")", "\n", "self", ".", "evaluate", "(", "tf_group", ")", "\n", "actual", ",", "expected", "=", "self", ".", "evaluate", "(", "[", "actual_outputs", ",", "expected_outputs", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ".", "shape", ",", "expected", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testBatchNorm": [[179, 218], ["tensorflow.python.framework.test_util.run_in_graph_and_eager_modes", "tensorflow.constant", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.layers.batch_norm", "mesh_tensorflow.layers.batch_norm", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.copy_masters_to_slices", "tensorflow.global_variables_initializer", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "numpy.array", "layers_test.LayersTest.assertAllClose", "layers_test.LayersTest.assertAllClose", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.batch_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.batch_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "@", "test_util", ".", "run_in_graph_and_eager_modes", "(", ")", "\n", "def", "testBatchNorm", "(", "self", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "channels", "=", "3", "\n", "inputs", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "4", ",", "5", ",", "6", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "channels_dim", "=", "mtf", ".", "Dimension", "(", "\"channels\"", ",", "channels", ")", "\n", "\n", "mtf_inputs", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "inputs", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "channels_dim", "]", ")", ")", "\n", "\n", "mtf_outputs_0", ",", "_", "=", "mtf", ".", "layers", ".", "batch_norm", "(", "\n", "mtf_inputs", ",", "\n", "is_training", "=", "True", ",", "momentum", "=", "0.95", ",", "epsilon", "=", "1e-6", ",", "\n", "dims_idx_start", "=", "0", ",", "dims_idx_end", "=", "1", ",", "name", "=", "\"bn0\"", ")", "\n", "mtf_outputs_1", ",", "_", "=", "mtf", ".", "layers", ".", "batch_norm", "(", "\n", "mtf_outputs_0", "*", "2", "+", "1", ",", "\n", "is_training", "=", "True", ",", "momentum", "=", "0.95", ",", "epsilon", "=", "1e-6", ",", "\n", "dims_idx_start", "=", "0", ",", "dims_idx_end", "=", "1", ",", "name", "=", "\"bn1\"", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "\n", "actual_outputs_0", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs_0", ")", "\n", "actual_outputs_1", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs_1", ")", "\n", "\n", "tf_group", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "evaluate", "(", "init", ")", "\n", "self", ".", "evaluate", "(", "tf_group", ")", "\n", "[", "actual_0", ",", "actual_1", "]", "=", "self", ".", "evaluate", "(", "[", "actual_outputs_0", ",", "actual_outputs_1", "]", ")", "\n", "\n", "expected", "=", "np", ".", "array", "(", "[", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ",", "[", "1", ",", "1", ",", "1", "]", "]", ")", "\n", "self", ".", "assertAllClose", "(", "actual_0", ",", "expected", ")", "\n", "self", ".", "assertAllClose", "(", "actual_1", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testWeightsNonzero": [[219, 242], ["tensorflow.python.framework.test_util.run_in_graph_and_eager_modes", "tensorflow.constant", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.layers.weights_nonzero", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "tensorflow.cast", "mesh_tensorflow.Lowering.copy_masters_to_slices", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertAllEqual", "tensorflow.not_equal", "tensorflow.constant.shape.as_list", "tensorflow.constant.shape.as_list", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.weights_nonzero", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal"], ["", "@", "test_util", ".", "run_in_graph_and_eager_modes", "(", ")", "\n", "def", "testWeightsNonzero", "(", "self", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "constant", "(", "[", "[", "3", ",", "1", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", "]", "]", ")", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "inputs", ".", "shape", ".", "as_list", "(", ")", "[", "0", "]", ")", "\n", "channels_dim", "=", "mtf", ".", "Dimension", "(", "\"channels\"", ",", "inputs", ".", "shape", ".", "as_list", "(", ")", "[", "1", "]", ")", "\n", "\n", "mtf_inputs", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "inputs", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "channels_dim", "]", ")", ")", "\n", "mtf_outputs", "=", "mtf", ".", "layers", ".", "weights_nonzero", "(", "mtf_inputs", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "\n", "expected_outputs", "=", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "inputs", ",", "0", ")", ",", "tf", ".", "float32", ")", "\n", "tf_group", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "self", ".", "evaluate", "(", "tf_group", ")", "\n", "actual", ",", "expected", "=", "self", ".", "evaluate", "(", "[", "actual_outputs", ",", "expected_outputs", "]", ")", "\n", "\n", "self", ".", "assertAllEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testDenseReluDense": [[243, 273], ["tensorflow.python.framework.test_util.run_in_graph_and_eager_modes", "tensorflow.random_normal", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.layers.dense_relu_dense", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.copy_masters_to_slices", "tensorflow.global_variables_initializer", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertEqual", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense_relu_dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "@", "test_util", ".", "run_in_graph_and_eager_modes", "(", ")", "\n", "def", "testDenseReluDense", "(", "self", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "channels", "=", "3", "\n", "hidden", "=", "5", "\n", "inputs", "=", "tf", ".", "random_normal", "(", "[", "batch", ",", "channels", "]", ")", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "channels_dim", "=", "mtf", ".", "Dimension", "(", "\"channels\"", ",", "channels", ")", "\n", "hidden_dim", "=", "mtf", ".", "Dimension", "(", "\"hidden\"", ",", "hidden", ")", "\n", "\n", "mtf_inputs", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "inputs", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "channels_dim", "]", ")", ")", "\n", "mtf_outputs", "=", "mtf", ".", "layers", ".", "dense_relu_dense", "(", "mtf_inputs", ",", "\n", "hidden_channels", "=", "hidden_dim", ",", "\n", "is_training", "=", "False", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "\n", "tf_group", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "evaluate", "(", "init", ")", "\n", "self", ".", "evaluate", "(", "tf_group", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "actual_outputs", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ".", "shape", ",", "inputs", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testMaskedLocalAttention1D": [[274, 312], ["absl.testing.parameterized.parameters", "tensorflow.random_normal", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.layers.masked_local_attention_1d", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.copy_masters_to_slices", "tensorflow.global_variables_initializer", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertEqual", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.masked_local_attention_1d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "2", ",", "16", ",", "3", ",", "4", ",", "2", ",", "2", ")", ",", "\n", "(", "1", ",", "8", ",", "5", ",", "3", ",", "1", ",", "4", ")", ",", "\n", ")", "\n", "def", "testMaskedLocalAttention1D", "(", "self", ",", "batch", ",", "length", ",", "io_channels", ",", "kv_channels", ",", "\n", "heads", ",", "window_size", ")", ":", "\n", "    ", "length_q", "=", "length", "\n", "query", "=", "tf", ".", "random_normal", "(", "[", "batch", ",", "length_q", ",", "io_channels", "]", ")", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "length_q_dim", "=", "mtf", ".", "Dimension", "(", "\"length_q\"", ",", "length_q", ")", "\n", "io_channels_dim", "=", "mtf", ".", "Dimension", "(", "\"io_channels\"", ",", "io_channels", ")", "\n", "kv_channels_dim", "=", "mtf", ".", "Dimension", "(", "\"kv_channels\"", ",", "kv_channels", ")", "\n", "heads_dim", "=", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "heads", ")", "\n", "\n", "mtf_query", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "query", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "length_q_dim", ",", "io_channels_dim", "]", ")", ")", "\n", "mtf_outputs", "=", "mtf", ".", "layers", ".", "masked_local_attention_1d", "(", "\n", "mtf_query", ",", "\n", "kv_channels", "=", "kv_channels_dim", ",", "\n", "heads", "=", "heads_dim", ",", "\n", "is_training", "=", "False", ",", "\n", "window_size", "=", "window_size", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "\n", "tf_group", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "evaluate", "(", "init", ")", "\n", "self", ".", "evaluate", "(", "tf_group", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "actual_outputs", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ".", "shape", ",", "(", "batch", ",", "length_q", ",", "io_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testDotProductAttention": [[313, 361], ["absl.testing.parameterized.parameters", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.layers.dot_product_attention", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.copy_masters_to_slices", "tensorflow.global_variables_initializer", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertEqual", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dot_product_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "2", ",", "4", ",", "5", ",", "7", ",", "3", ",", "1", ")", ",", "\n", ")", "\n", "def", "testDotProductAttention", "(", "\n", "self", ",", "batch", ",", "heads", ",", "length_q", ",", "length_kv", ",", "depth_k", ",", "depth_v", ")", ":", "\n", "    ", "query", "=", "tf", ".", "random_normal", "(", "[", "batch", ",", "heads", ",", "length_q", ",", "depth_k", "]", ")", "\n", "key", "=", "tf", ".", "random_normal", "(", "[", "batch", ",", "heads", ",", "length_kv", ",", "depth_k", "]", ")", "\n", "value", "=", "tf", ".", "random_normal", "(", "[", "batch", ",", "heads", ",", "length_kv", ",", "depth_v", "]", ")", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "heads_dim", "=", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "heads", ")", "\n", "length_q_dim", "=", "mtf", ".", "Dimension", "(", "\"length_q\"", ",", "length_q", ")", "\n", "length_kv_dim", "=", "mtf", ".", "Dimension", "(", "\"length_kv\"", ",", "length_kv", ")", "\n", "depth_k_dim", "=", "mtf", ".", "Dimension", "(", "\"depth_k\"", ",", "depth_k", ")", "\n", "depth_v_dim", "=", "mtf", ".", "Dimension", "(", "\"depth_v\"", ",", "depth_v", ")", "\n", "\n", "mtf_query", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "query", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "\n", "[", "batch_dim", ",", "heads_dim", ",", "length_q_dim", ",", "depth_k_dim", "]", ")", ")", "\n", "mtf_key", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "key", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "\n", "[", "batch_dim", ",", "heads_dim", ",", "length_kv_dim", ",", "depth_k_dim", "]", ")", ")", "\n", "mtf_value", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "value", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "\n", "[", "batch_dim", ",", "heads_dim", ",", "length_kv_dim", ",", "depth_v_dim", "]", ")", ")", "\n", "mtf_outputs", "=", "mtf", ".", "layers", ".", "dot_product_attention", "(", "\n", "mtf_query", ",", "\n", "mtf_key", ",", "\n", "mtf_value", ",", "\n", "mask", "=", "None", ",", "\n", "is_training", "=", "False", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "\n", "tf_group", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "evaluate", "(", "init", ")", "\n", "self", ".", "evaluate", "(", "tf_group", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "actual_outputs", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ".", "shape", ",", "(", "batch", ",", "heads", ",", "length_q", ",", "depth_v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testMultiheadAttention": [[362, 402], ["absl.testing.parameterized.parameters", "tensorflow.random_normal", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.layers.multihead_attention", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.copy_masters_to_slices", "tensorflow.global_variables_initializer", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertEqual", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multihead_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "16", ",", "4", ")", ",", "\n", "(", "32", ",", "8", ")", ",", "\n", ")", "\n", "def", "testMultiheadAttention", "(", "self", ",", "kv_channels", ",", "heads", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "length", "=", "8", "\n", "channels", "=", "3", "\n", "query", "=", "tf", ".", "random_normal", "(", "[", "batch", ",", "length", ",", "channels", "]", ")", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "length", ")", "\n", "channels_dim", "=", "mtf", ".", "Dimension", "(", "\"channels\"", ",", "channels", ")", "\n", "kv_channels_dim", "=", "mtf", ".", "Dimension", "(", "\"kv_channels\"", ",", "kv_channels", ")", "\n", "heads_dim", "=", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "heads", ")", "\n", "\n", "mtf_query", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "query", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "length_dim", ",", "channels_dim", "]", ")", ")", "\n", "mtf_outputs", "=", "mtf", ".", "layers", ".", "multihead_attention", "(", "\n", "mtf_query", ",", "\n", "memory_antecedent", "=", "None", ",", "\n", "mask", "=", "None", ",", "\n", "kv_channels", "=", "kv_channels_dim", ",", "\n", "heads", "=", "heads_dim", ",", "\n", "is_training", "=", "False", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "\n", "tf_group", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "evaluate", "(", "init", ")", "\n", "self", ".", "evaluate", "(", "tf_group", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "actual_outputs", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ".", "shape", ",", "query", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testPool": [[403, 500], ["absl.testing.parameterized.parameters", "tensorflow.random.set_random_seed", "tensorflow.random_normal", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.export_to_tf_tensor", "mesh_tensorflow.Lowering.copy_masters_to_slices", "tensorflow.global_variables_initializer", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertAllClose", "layers_test.LayersTest.evaluate", "mesh_tensorflow.layers.max_pool2d", "tensorflow.reshape", "tensorflow.reshape", "mesh_tensorflow.gradients", "layers_test.LayersTest.assertEqual", "mesh_tensorflow.Shape", "tensorflow.keras.layers.MaxPooling2D", "mesh_tensorflow.layers.avg_pool2d", "tensorflow.reshape", "tensorflow.reshape", "numpy.count_nonzero", "layers_test.LayersTest.assertAllClose", "int", "int", "tensorflow.keras.layers.AveragePooling2D", "mesh_tensorflow.layers.max_pool3d", "layers_test.LayersTest.assertEqual", "int", "int", "tensorflow.keras.layers.MaxPooling3D", "mesh_tensorflow.layers.avg_pool3d", "numpy.ones", "numpy.count_nonzero", "layers_test.LayersTest.assertAllClose", "tensorflow.keras.layers.AveragePooling3D", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.max_pool2d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.avg_pool2d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.max_pool3d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.avg_pool3d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "\"MAX_2D\"", ",", ")", ",", "(", "\"AVG_2D\"", ",", ")", ",", "(", "\"MAX_3D\"", ",", ")", ",", "(", "\"AVG_3D\"", ",", ")", ",", "\n", ")", "\n", "def", "testPool", "(", "self", ",", "pooling_method", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "depth", "=", "3", "\n", "height", "=", "4", "\n", "width", "=", "6", "\n", "channels", "=", "3", "\n", "tf", ".", "random", ".", "set_random_seed", "(", "1234", ")", "\n", "inputs", "=", "tf", ".", "random_normal", "(", "[", "batch", ",", "depth", ",", "height", ",", "width", ",", "channels", "]", ")", "\n", "\n", "stride_d", "=", "3", "\n", "stride_h", "=", "2", "\n", "stride_w", "=", "3", "\n", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "depth_dim", "=", "mtf", ".", "Dimension", "(", "\"depth\"", ",", "depth", ")", "\n", "height_dim", "=", "mtf", ".", "Dimension", "(", "\"height\"", ",", "height", ")", "\n", "width_dim", "=", "mtf", ".", "Dimension", "(", "\"width\"", ",", "width", ")", "\n", "channels_dim", "=", "mtf", ".", "Dimension", "(", "\"channels\"", ",", "channels", ")", "\n", "\n", "mtf_inputs", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "inputs", ",", "shape", "=", "mtf", ".", "Shape", "(", "\n", "[", "batch_dim", ",", "depth_dim", ",", "height_dim", ",", "width_dim", ",", "channels_dim", "]", ")", ")", "\n", "\n", "if", "pooling_method", "==", "\"MAX_2D\"", ":", "\n", "      ", "mtf_outputs", "=", "mtf", ".", "layers", ".", "max_pool2d", "(", "\n", "mtf_inputs", ",", "ksize", "=", "(", "stride_h", ",", "stride_w", ")", ")", "\n", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "batch", "*", "depth", ",", "height", ",", "width", ",", "channels", "]", ")", "\n", "expected_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "MaxPooling2D", "(", "\n", "(", "stride_h", ",", "stride_w", ")", ")", "(", "inputs", ")", "\n", "expected_outputs", "=", "tf", ".", "reshape", "(", "\n", "expected_outputs", ",", "\n", "[", "batch", ",", "depth", ",", "int", "(", "height", "/", "stride_h", ")", ",", "\n", "int", "(", "width", "/", "stride_w", ")", ",", "channels", "]", ")", "\n", "\n", "", "elif", "pooling_method", "==", "\"AVG_2D\"", ":", "\n", "      ", "mtf_outputs", "=", "mtf", ".", "layers", ".", "avg_pool2d", "(", "\n", "mtf_inputs", ",", "ksize", "=", "(", "stride_h", ",", "stride_w", ")", ")", "\n", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "batch", "*", "depth", ",", "height", ",", "width", ",", "channels", "]", ")", "\n", "expected_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "AveragePooling2D", "(", "\n", "(", "stride_h", ",", "stride_w", ")", ")", "(", "inputs", ")", "\n", "expected_outputs", "=", "tf", ".", "reshape", "(", "\n", "expected_outputs", ",", "\n", "[", "batch", ",", "depth", ",", "int", "(", "height", "/", "stride_h", ")", ",", "\n", "int", "(", "width", "/", "stride_w", ")", ",", "channels", "]", ")", "\n", "\n", "", "elif", "pooling_method", "==", "\"MAX_3D\"", ":", "\n", "      ", "mtf_outputs", "=", "mtf", ".", "layers", ".", "max_pool3d", "(", "\n", "mtf_inputs", ",", "ksize", "=", "[", "stride_d", ",", "stride_h", ",", "stride_w", "]", ")", "\n", "expected_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "MaxPooling3D", "(", "\n", "[", "stride_d", ",", "stride_h", ",", "stride_w", "]", ")", "(", "inputs", ")", "\n", "\n", "", "elif", "pooling_method", "==", "\"AVG_3D\"", ":", "\n", "      ", "mtf_outputs", "=", "mtf", ".", "layers", ".", "avg_pool3d", "(", "\n", "mtf_inputs", ",", "ksize", "=", "[", "stride_d", ",", "stride_h", ",", "stride_w", "]", ")", "\n", "expected_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "AveragePooling3D", "(", "\n", "[", "stride_d", ",", "stride_h", ",", "stride_w", "]", ")", "(", "inputs", ")", "\n", "\n", "", "mtf_gradient", "=", "mtf", ".", "gradients", "(", "[", "mtf_outputs", "]", ",", "[", "mtf_inputs", "]", ")", "[", "0", "]", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_outputs", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_outputs", ")", "\n", "actual_gradient", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_gradient", ")", "\n", "\n", "tf_group", "=", "lowering", ".", "copy_masters_to_slices", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "evaluate", "(", "init", ")", "\n", "self", ".", "evaluate", "(", "tf_group", ")", "\n", "actual", ",", "expected", "=", "self", ".", "evaluate", "(", "[", "actual_outputs", ",", "expected_outputs", "]", ")", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n", "actual", "=", "self", ".", "evaluate", "(", "actual_gradient", ")", "\n", "if", "pooling_method", "==", "\"MAX_2D\"", ":", "\n", "      ", "expected_non_zeros", "=", "batch", "*", "depth", "*", "height", "*", "width", "*", "channels", "/", "(", "\n", "stride_h", "*", "stride_w", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "count_nonzero", "(", "actual", ")", ",", "expected_non_zeros", ")", "\n", "\n", "", "elif", "pooling_method", "==", "\"AVG_2D\"", ":", "\n", "      ", "expected", "=", "np", ".", "ones", "(", "(", "batch", ",", "depth", ",", "height", ",", "width", ",", "channels", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "/", "stride_h", "/", "stride_w", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n", "", "elif", "pooling_method", "==", "\"MAX_3D\"", ":", "\n", "      ", "expected_non_zeros", "=", "batch", "*", "depth", "*", "height", "*", "width", "*", "channels", "/", "(", "\n", "stride_d", "*", "stride_h", "*", "stride_w", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "count_nonzero", "(", "actual", ")", ",", "expected_non_zeros", ")", "\n", "\n", "", "elif", "pooling_method", "==", "\"AVG_3D\"", ":", "\n", "      ", "expected", "=", "np", ".", "ones", "(", "(", "batch", ",", "depth", ",", "height", ",", "width", ",", "channels", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "/", "stride_d", "/", "stride_h", "/", "stride_w", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testConv1d": [[501, 537], ["tensorflow.python.framework.test_util.run_in_graph_and_eager_modes", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "mock.MagicMock", "layers_test.initialize_by_shape", "mesh_tensorflow.layers.conv1d", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertAllClose", "tensorflow.global_variables_initializer", "mesh_tensorflow.Lowering.copy_masters_to_slices", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv1d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "", "@", "test_util", ".", "run_in_graph_and_eager_modes", "(", ")", "\n", "def", "testConv1d", "(", "self", ")", ":", "\n", "    ", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "\n", "filter_size", "=", "3", "\n", "depth_dim", "=", "mtf", ".", "Dimension", "(", "\"depth\"", ",", "2", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "4", ")", "\n", "output_dim", "=", "mtf", ".", "Dimension", "(", "\"output\"", ",", "2", ")", "\n", "\n", "x", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "2", ",", "1", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mtf_x", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "x", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", ",", "depth_dim", "]", ")", ")", "\n", "\n", "initializer_mock", "=", "mock", ".", "MagicMock", "(", ")", "\n", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "(", "1", ",", "3", ",", "2", ",", "2", ")", ":", "[", "[", "[", "[", "1", ",", "-", "1", "]", ",", "[", "0", ",", "0", "]", "]", ",", "[", "[", "2", ",", "-", "2", "]", ",", "[", "-", "1", ",", "1", "]", "]", ",", "[", "[", "3", ",", "-", "3", "]", ",", "\n", "[", "-", "2", ",", "2", "]", "]", "]", "]", ",", "\n", "}", ")", "\n", "\n", "mtf_output", "=", "mtf", ".", "layers", ".", "conv1d", "(", "\n", "mtf_x", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "filter_size", "=", "filter_size", ",", "\n", "filter_initializer", "=", "initializer_mock", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_output", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_output", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "actual_output", ")", "\n", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", "]", ",", "[", "5", ",", "-", "5", "]", ",", "[", "4", ",", "-", "4", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testConv1dValidPadding": [[538, 571], ["mesh_tensorflow.test_utils.NumpyConverter", "numpy.random.randn", "mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "numpy.random.randn", "mesh_tensorflow.layers.conv1d", "mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "numpy.empty", "numpy.einsum().reshape", "numpy.einsum().reshape", "layers_test.LayersTest.assertAllClose", "mesh_tensorflow.Dimension", "numpy.einsum", "numpy.einsum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv1d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "testConv1dValidPadding", "(", "self", ")", ":", "\n", "    ", "converter", "=", "test_utils", ".", "NumpyConverter", "(", ")", "\n", "batch", "=", "2", "\n", "d_model", "=", "6", "\n", "d_out", "=", "1", "\n", "length", "=", "4", "\n", "filter_size", "=", "3", "\n", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "length", ",", "d_model", ")", "\n", "x_mtf", "=", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"length\"", ",", "\"d_model\"", "]", ")", "\n", "\n", "conv_filter", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "filter_size", ",", "d_model", ",", "d_out", ")", "\n", "initializer", "=", "lambda", "shape", ",", "dtype", ",", "**", "kwargs", ":", "conv_filter", "\n", "output_mtf", "=", "mtf", ".", "layers", ".", "conv1d", "(", "\n", "x_mtf", ",", "\n", "output_dim", "=", "mtf", ".", "Dimension", "(", "\"output_dim\"", ",", "d_out", ")", ",", "\n", "filter_size", "=", "filter_size", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "filter_initializer", "=", "initializer", ")", "\n", "actual", "=", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "output_mtf", ")", "\n", "\n", "# Expected length is 2.", "\n", "expected", "=", "np", ".", "empty", "(", "shape", "=", "(", "batch", ",", "2", ",", "d_out", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# [filter_size, d_model]", "\n", "current_filter", "=", "conv_filter", "[", "0", ",", ":", ",", ":", ",", "0", "]", "\n", "# b: batch, k: filter_size, d: d_model.", "\n", "expected", "[", ":", ",", "0", "]", "=", "np", ".", "einsum", "(", "\"bkd,kd->b\"", ",", "x", "[", ":", ",", ":", "filter_size", ",", ":", "]", ",", "\n", "current_filter", ")", ".", "reshape", "(", "batch", ",", "1", ")", "\n", "expected", "[", ":", ",", "1", "]", "=", "np", ".", "einsum", "(", "\"bkd,kd->b\"", ",", "x", "[", ":", ",", "1", ":", ",", ":", "]", ",", "\n", "current_filter", ")", ".", "reshape", "(", "batch", ",", "1", ")", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testConv1dValidPaddingMultipleBatchDims": [[572, 608], ["mesh_tensorflow.test_utils.NumpyConverter", "numpy.random.randn", "mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "numpy.random.randn", "mesh_tensorflow.layers.conv1d", "mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "numpy.empty", "numpy.einsum().reshape", "numpy.einsum().reshape", "layers_test.LayersTest.assertAllClose", "mesh_tensorflow.Dimension", "numpy.einsum", "numpy.einsum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv1d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "testConv1dValidPaddingMultipleBatchDims", "(", "self", ")", ":", "\n", "    ", "converter", "=", "test_utils", ".", "NumpyConverter", "(", ")", "\n", "batch", "=", "2", "\n", "outer_batch", "=", "3", "\n", "d_model", "=", "6", "\n", "d_out", "=", "1", "\n", "length", "=", "4", "\n", "filter_size", "=", "3", "\n", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "outer_batch", ",", "batch", ",", "length", ",", "d_model", ")", "\n", "x_mtf", "=", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "dim_names", "=", "[", "\"outer_batch\"", ",", "\"batch\"", ",", "\"length\"", ",", "\"d_model\"", "]", ")", "\n", "\n", "conv_filter", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "filter_size", ",", "d_model", ",", "d_out", ")", "\n", "initializer", "=", "lambda", "shape", ",", "dtype", ",", "**", "kwargs", ":", "conv_filter", "\n", "output_mtf", "=", "mtf", ".", "layers", ".", "conv1d", "(", "\n", "x_mtf", ",", "\n", "output_dim", "=", "mtf", ".", "Dimension", "(", "\"output_dim\"", ",", "d_out", ")", ",", "\n", "filter_size", "=", "filter_size", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "filter_initializer", "=", "initializer", ")", "\n", "actual", "=", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "output_mtf", ")", "\n", "\n", "# Expected length is 2.", "\n", "expected", "=", "np", ".", "empty", "(", "shape", "=", "(", "outer_batch", ",", "batch", ",", "2", ",", "d_out", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Effective filter: [filter_size, d_model]", "\n", "f", "=", "conv_filter", "[", "0", ",", ":", ",", ":", ",", "0", "]", "\n", "# o: outer_batch, b: batch, k: filter_size, d: d_model.", "\n", "expected", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "einsum", "(", "\"obkd,kd->ob\"", ",", "x", "[", ":", ",", ":", ",", ":", "filter_size", ",", ":", "]", ",", "\n", "f", ")", ".", "reshape", "(", "outer_batch", ",", "batch", ",", "1", ")", "\n", "expected", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "einsum", "(", "\"obkd,kd->ob\"", ",", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ",", "\n", "f", ")", ".", "reshape", "(", "outer_batch", ",", "batch", ",", "1", ")", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.LayersTest.testSeparableConv1d": [[609, 647], ["mock.patch.object", "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "mock.MagicMock", "layers_test.initialize_by_shape", "mesh_tensorflow.layers.separable_conv1d", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.evaluate", "layers_test.LayersTest.assertAllClose", "tensorflow.global_variables_initializer", "mesh_tensorflow.Lowering.copy_masters_to_slices", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.separable_conv1d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "@", "mock", ".", "patch", ".", "object", "(", "tf", ",", "\"truncated_normal_initializer\"", ",", "autospec", "=", "True", ")", "\n", "@", "test_util", ".", "run_in_graph_and_eager_modes", "(", ")", "\n", "def", "testSeparableConv1d", "(", "self", ",", "random_normal_initializer_mock", ")", ":", "\n", "    ", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "\n", "depth_dim", "=", "mtf", ".", "Dimension", "(", "\"depth\"", ",", "2", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "4", ")", "\n", "output_dim", "=", "mtf", ".", "Dimension", "(", "\"output\"", ",", "2", ")", "\n", "\n", "x", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "2", ",", "1", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mtf_x", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "x", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", ",", "depth_dim", "]", ")", ")", "\n", "\n", "initializer_mock", "=", "mock", ".", "MagicMock", "(", ")", "\n", "random_normal_initializer_mock", ".", "return_value", "=", "initializer_mock", "\n", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "(", "2", ",", ")", ":", "[", "1", ",", "2", "]", ",", "\n", "(", "2", ",", "2", ")", ":", "[", "[", "1", ",", "0", "]", ",", "[", "1", ",", "-", "1", "]", "]", ",", "\n", "}", ")", "\n", "\n", "mtf_output", "=", "mtf", ".", "layers", ".", "separable_conv1d", "(", "\n", "mtf_x", ",", "\n", "output_dim", ",", "\n", "min_relative_pos", "=", "-", "1", ",", "\n", "max_relative_pos", "=", "1", ",", "\n", "use_bias", "=", "True", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_output", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_output", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "actual_output", ")", "\n", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "[", "[", "3", ",", "-", "2", "]", ",", "[", "6", ",", "-", "4", "]", ",", "[", "9", ",", "-", "6", "]", ",", "[", "7", ",", "-", "4", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers_test.initialize_by_shape": [[33, 45], ["tuple", "tensorflow.reshape", "ValueError", "tensorflow.constant", "tuple"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["def", "initialize_by_shape", "(", "shape_to_value", ")", ":", "\n", "  ", "\"\"\"Create an initializer with values specified by tensor shape.\"\"\"", "\n", "\n", "def", "initialize", "(", "shape", ",", "dtype", ",", "**", "unused_kwargs", ")", ":", "\n", "    ", "shape", "=", "tuple", "(", "shape", ")", "\n", "if", "shape", "not", "in", "shape_to_value", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Shape {} not found in shape to value map.\"", ".", "format", "(", "shape", ")", ")", "\n", "", "return", "tf", ".", "reshape", "(", "\n", "tf", ".", "constant", "(", "shape_to_value", "[", "tuple", "(", "shape", ")", "]", ",", "dtype", "=", "dtype", ")", ",", "shape", ")", "\n", "\n", "", "return", "initialize", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.BalancedVariablePlacer.__init__": [[41, 47], ["list", "heapq.heapify", "len", "len", "zip", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "devices", ",", "init_usage", "=", "None", ")", ":", "\n", "    ", "init_usage", "=", "init_usage", "if", "init_usage", "else", "[", "0", "]", "*", "len", "(", "devices", ")", "\n", "assert", "len", "(", "devices", ")", "==", "len", "(", "init_usage", ")", "\n", "self", ".", "_mem_device_heap", "=", "list", "(", "zip", "(", "init_usage", ",", "devices", ")", ")", "\n", "heapq", ".", "heapify", "(", "self", ".", "_mem_device_heap", ")", "\n", "self", ".", "_last_device", "=", "devices", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.BalancedVariablePlacer.device_function": [[48, 74], ["tensorflow.TensorShape", "tensorflow.TensorShape", "heapq.heappop", "heapq.heappush", "tensorflow.logging.debug", "tensorflow.logging.debug", "tensorflow.logging.debug", "tensorflow.logging.debug", "var.get_attr", "tensorflow.TensorShape.num_elements", "var.get_attr", "tensorflow.TensorShape.num_elements"], "methods", ["None"], ["", "def", "device_function", "(", "self", ",", "var", ")", ":", "\n", "    ", "\"\"\"Choose a device for the input variable.\n\n    Args:\n      var: an Variable.\n\n    Returns:\n      The device for placing the var.\n    \"\"\"", "\n", "if", "var", ".", "type", "not", "in", "(", "'Variable'", ",", "'VariableV2'", ",", "'VarHandleOp'", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "debug", "(", "'Place {} on last device: {}.'", ".", "format", "(", "\n", "var", ".", "name", ",", "self", ".", "_last_device", ")", ")", "\n", "return", "self", ".", "_last_device", "\n", "\n", "", "shape", "=", "tf", ".", "TensorShape", "(", "var", ".", "get_attr", "(", "'shape'", ")", ")", "\n", "assert", "shape", ".", "num_elements", "(", ")", "is", "not", "None", "\n", "\n", "size", "=", "var", ".", "get_attr", "(", "'dtype'", ")", ".", "size", "\n", "mem", ",", "device", "=", "heapq", ".", "heappop", "(", "self", ".", "_mem_device_heap", ")", "\n", "mem", "+=", "shape", ".", "num_elements", "(", ")", "*", "size", "\n", "heapq", ".", "heappush", "(", "self", ".", "_mem_device_heap", ",", "(", "mem", ",", "device", ")", ")", "\n", "tf", ".", "logging", ".", "debug", "(", "'Place variable {} on {} and consumes {} Bytes.'", ".", "format", "(", "\n", "var", ".", "name", ",", "device", ",", "mem", ")", ")", "\n", "self", ".", "_last_device", "=", "device", "\n", "\n", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.outside_all_rewrites": [[32, 36], ["tensorflow.python.framework.ops.control_dependencies"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "outside_all_rewrites", "(", ")", ":", "\n", "  ", "with", "ops", ".", "control_dependencies", "(", "None", ")", ":", "\n", "    ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.create_host_call": [[79, 133], ["tensorflow.get_default_graph", "tf.get_default_graph.get_collection", "tensorflow.reshape", "tensor.shape.is_compatible_with", "tensorflow.reshape", "tensorflow.cast", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.cast", "utils.create_host_call.maybe_cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["def", "create_host_call", "(", "model_dir", ")", ":", "\n", "  ", "\"\"\"Construct a host_call writing scalar summaries.\n\n  Borrowed from t2t.\n  TODO(noam): remove this code once there is a better way to get summaries on\n  TPU.\n\n  Args:\n    model_dir: String containing path to train\n\n  Returns:\n    (fn, args) Pair to be called by TPUEstimator as the host_call.\n  \"\"\"", "\n", "graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "# a list of (name, lowered tensor) tuples", "\n", "summaries", "=", "graph", ".", "get_collection", "(", "SCALAR_SUMMARIES_COLLECTION_KEY", ")", "\n", "\n", "def", "maybe_cast", "(", "tensor", ")", ":", "\n", "    ", "assert", "tensor", ".", "shape", ".", "is_compatible_with", "(", "[", "]", ")", ",", "tensor", ".", "name", "\n", "if", "tensor", ".", "dtype", "==", "tf", ".", "int64", ":", "\n", "      ", "return", "tf", ".", "to_int32", "(", "tensor", ")", "\n", "", "if", "tensor", ".", "dtype", "==", "tf", ".", "bfloat16", ":", "\n", "      ", "return", "tf", ".", "cast", "(", "tensor", ",", "tf", ".", "float32", ")", "\n", "", "return", "tensor", "\n", "\n", "", "reshaped_tensors", "=", "[", "tf", ".", "reshape", "(", "maybe_cast", "(", "t", ")", ",", "[", "1", "]", ")", "for", "_", ",", "t", "in", "summaries", "]", "\n", "\n", "# When no supported summaries are found, don't create host_call. Otherwise,", "\n", "# TPU outfeed queue would enqueue global_step while host_call doesn't dequeue", "\n", "# it, eventually causing hang.", "\n", "if", "not", "reshaped_tensors", ":", "\n", "    ", "return", "None", "\n", "\n", "", "def", "host_call_fn", "(", "global_step", ",", "*", "args", ")", ":", "\n", "    ", "\"\"\"Training host call. Creates scalar summaries for training metrics.\"\"\"", "\n", "# This function is executed on the CPU and should not directly reference", "\n", "# any Tensors in the rest of the `model_fn`. To pass Tensors from the", "\n", "# model to the `model_fn`, provide as part of the `host_call`.", "\n", "global_step", "=", "tf", ".", "cast", "(", "global_step", "[", "0", "]", ",", "tf", ".", "int64", ")", "\n", "with", "tf2", ".", "summary", ".", "create_file_writer", "(", "model_dir", ")", ".", "as_default", "(", ")", ":", "\n", "# We cannot directly use any tensor from summaries, because each", "\n", "# tensor here must be a concat of multiple tensors from all shards.", "\n", "# Therefore, we rely on the assumption that args wil have the same", "\n", "# length as summaries, and all tensors in args will have the same", "\n", "# order of self._tup_summaries.", "\n", "      ", "assert", "len", "(", "args", ")", "==", "len", "(", "summaries", ")", "\n", "for", "i", ",", "tensor", "in", "enumerate", "(", "args", ")", ":", "\n", "        ", "name", "=", "summaries", "[", "i", "]", "[", "0", "]", "\n", "tf2", ".", "summary", ".", "scalar", "(", "\n", "name", ",", "tf", ".", "reduce_mean", "(", "tensor", ")", ",", "step", "=", "global_step", ")", "\n", "", "return", "tf", ".", "summary", ".", "all_v2_summary_ops", "(", ")", "\n", "\n", "", "", "global_step_t", "=", "tf", ".", "reshape", "(", "tf", ".", "to_int32", "(", "tf", ".", "train", ".", "get_global_step", "(", ")", ")", ",", "[", "1", "]", ")", "\n", "return", "host_call_fn", ",", "[", "global_step_t", "]", "+", "reshaped_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.topology_rank": [[135, 145], ["isinstance", "len", "tensorflow.python.tpu.topology.Topology", "isinstance", "ValueError", "type"], "function", ["None"], ["", "def", "topology_rank", "(", "topology", ")", ":", "\n", "# Deserialize the Topology proto, if it is a string.", "\n", "  ", "if", "isinstance", "(", "topology", ",", "bytes", ")", ":", "\n", "    ", "topology", "=", "Topology", "(", "serialized", "=", "topology", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "topology", ",", "Topology", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'`topology` is not a Topology object; got {}'", ".", "format", "(", "\n", "type", "(", "topology", ")", ")", ")", "\n", "\n", "", "return", "len", "(", "topology", ".", "mesh_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.remove_summaries": [[147, 154], ["tensorflow.get_default_graph", "tensorflow.logging.debug", "tf.get_default_graph.get_collection_ref", "tf.get_default_graph.get_collection", "str", "tf.get_default_graph.get_collection"], "function", ["None"], ["", "def", "remove_summaries", "(", ")", ":", "\n", "  ", "\"\"\"Remove summaries from the default graph.\"\"\"", "\n", "g", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "key", "=", "'mtf_scalar_summaries'", "\n", "tf", ".", "logging", ".", "debug", "(", "'Remove summaries %s'", "%", "str", "(", "g", ".", "get_collection", "(", "key", ")", ")", ")", "\n", "del", "g", ".", "get_collection_ref", "(", "key", ")", "[", ":", "]", "\n", "assert", "not", "g", ".", "get_collection", "(", "key", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.PostProcessor.__init__": [[312, 316], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "_area_int", "=", "[", "]", "\n", "self", ".", "_area_sum", "=", "[", "]", "\n", "self", ".", "_instance_i", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.PostProcessor.record": [[317, 373], ["unet.PostProcessor._area_int.append", "unet.PostProcessor._area_sum.append", "tensorflow.gfile.IsDirectory", "tensorflow.gfile.MakeDirs", "unet.PostProcessor._reshape_to_cubes", "enumerate", "unet.PostProcessor._reshape_to_cubes", "enumerate", "len", "tensorflow.gfile.Open", "numpy.save", "tensorflow.gfile.Open", "numpy.save", "unet.PostProcessor._reshape_to_cubes", "enumerate", "os.path.join", "os.path.join", "tensorflow.gfile.Open", "numpy.save", "tensorflow.gfile.Open", "numpy.save", "tensorflow.gfile.Open", "numpy.save", "os.path.join", "os.path.join", "os.path.join", "tensorflow.gfile.Open", "numpy.save", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.PostProcessor._reshape_to_cubes", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.PostProcessor._reshape_to_cubes", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.PostProcessor._reshape_to_cubes"], ["", "def", "record", "(", "self", ",", "results", ",", "pred_output_dir", ")", ":", "\n", "    ", "\"\"\"Do whatever to the results returned by unet_with_spatial_partition.\"\"\"", "\n", "if", "FLAGS", ".", "output_ground_truth", ":", "\n", "      ", "pred_liver", ",", "pred_lesion", ",", "label", ",", "area_int", ",", "area_sum", ",", "_", ",", "global_step", "=", "(", "\n", "results", ")", "\n", "", "else", ":", "\n", "      ", "pred_liver", ",", "pred_lesion", ",", "area_int", ",", "area_sum", ",", "_", ",", "global_step", "=", "results", "\n", "\n", "", "if", "not", "tf", ".", "gfile", ".", "IsDirectory", "(", "pred_output_dir", ")", ":", "\n", "      ", "tf", ".", "gfile", ".", "MakeDirs", "(", "pred_output_dir", ")", "\n", "\n", "", "if", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "      ", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "\n", "pred_output_dir", ",", "'pred_liver_{}_{}.npy'", ".", "format", "(", "\n", "global_step", ",", "self", ".", "_instance_i", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "np", ".", "save", "(", "f", ",", "pred_liver", ")", "\n", "\n", "", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "\n", "pred_output_dir", ",", "'pred_lesion_{}_{}.npy'", ".", "format", "(", "\n", "global_step", ",", "self", ".", "_instance_i", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "np", ".", "save", "(", "f", ",", "pred_lesion", ")", "\n", "\n", "", "if", "FLAGS", ".", "output_ground_truth", ":", "\n", "        ", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "\n", "pred_output_dir", ",", "'label_{}_{}.npy'", ".", "format", "(", "\n", "global_step", ",", "self", ".", "_instance_i", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "          ", "np", ".", "save", "(", "f", ",", "label", ")", "\n", "\n", "", "", "self", ".", "_instance_i", "+=", "1", "\n", "", "else", ":", "\n", "      ", "pred_liver", "=", "self", ".", "_reshape_to_cubes", "(", "pred_liver", ")", "\n", "for", "ins_i", ",", "pred_liver_instance", "in", "enumerate", "(", "pred_liver", ")", ":", "\n", "        ", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "\n", "pred_output_dir", ",", "'pred_liver_{}_{}.npy'", ".", "format", "(", "\n", "global_step", ",", "self", ".", "_instance_i", "+", "ins_i", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "          ", "np", ".", "save", "(", "f", ",", "pred_liver_instance", ")", "\n", "\n", "", "", "pred_lesion", "=", "self", ".", "_reshape_to_cubes", "(", "pred_lesion", ")", "\n", "for", "ins_i", ",", "pred_lesion_instance", "in", "enumerate", "(", "pred_lesion", ")", ":", "\n", "        ", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "\n", "pred_output_dir", ",", "'pred_lesion_{}_{}.npy'", ".", "format", "(", "\n", "global_step", ",", "self", ".", "_instance_i", "+", "ins_i", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "          ", "np", ".", "save", "(", "f", ",", "pred_lesion_instance", ")", "\n", "\n", "", "", "if", "FLAGS", ".", "output_ground_truth", ":", "\n", "        ", "label", "=", "self", ".", "_reshape_to_cubes", "(", "label", ")", "\n", "for", "ins_i", ",", "label_instance", "in", "enumerate", "(", "label", ")", ":", "\n", "          ", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "\n", "pred_output_dir", ",", "'label_{}_{}.npy'", ".", "format", "(", "\n", "global_step", ",", "self", ".", "_instance_i", "+", "ins_i", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "np", ".", "save", "(", "f", ",", "label_instance", ")", "\n", "\n", "", "", "", "self", ".", "_instance_i", "+=", "len", "(", "pred_liver", ")", "\n", "\n", "", "self", ".", "_area_int", ".", "append", "(", "area_int", ")", "\n", "self", ".", "_area_sum", ".", "append", "(", "area_sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.PostProcessor.finish": [[374, 393], ["numpy.concatenate", "numpy.concatenate", "tensorflow.logging.info", "area_int.sum.sum.reshape", "area_int.sum.sum.sum", "area_sum.sum.sum.reshape", "area_sum.sum.sum.sum", "area_int.sum.sum.sum", "area_sum.sum.sum.sum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "finish", "(", "self", ")", ":", "\n", "    ", "\"\"\"Merge the results and compute final dice scores.\"\"\"", "\n", "area_int", "=", "np", ".", "concatenate", "(", "self", ".", "_area_int", ")", "\n", "area_sum", "=", "np", ".", "concatenate", "(", "self", ".", "_area_sum", ")", "\n", "\n", "if", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "# Merge the results on 2d slices.", "\n", "      ", "assert", "area_int", ".", "size", "%", "(", "FLAGS", ".", "ct_resolution", "-", "FLAGS", ".", "image_c", "+", "1", ")", "==", "0", ",", "(", "\n", "'Wrong number of results: {}'", ".", "format", "(", "area_int", ".", "shape", ")", ")", "\n", "area_int", "=", "area_int", ".", "reshape", "(", "[", "-", "1", ",", "FLAGS", ".", "ct_resolution", "-", "FLAGS", ".", "image_c", "+", "1", "]", ")", "\n", "area_int", "=", "area_int", ".", "sum", "(", "axis", "=", "1", ")", "\n", "area_sum", "=", "area_sum", ".", "reshape", "(", "[", "-", "1", ",", "FLAGS", ".", "ct_resolution", "-", "FLAGS", ".", "image_c", "+", "1", "]", ")", "\n", "area_sum", "=", "area_sum", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n", "", "dice_per_case", "=", "(", "2", "*", "area_int", "/", "(", "area_sum", "+", "0.001", ")", ")", ".", "mean", "(", ")", "\n", "dice_global", "=", "2", "*", "area_int", ".", "sum", "(", ")", "/", "(", "area_sum", ".", "sum", "(", ")", "+", "0.001", ")", "\n", "# pylint: disable=logging-format-interpolation", "\n", "tf", ".", "logging", ".", "info", "(", "'dice_per_case: {}, dice_global: {}'", ".", "format", "(", "\n", "dice_per_case", ",", "dice_global", ")", ")", "\n", "# pylint: enable=logging-format-interpolation", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.PostProcessor._reshape_to_cubes": [[395, 400], ["numpy.transpose", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "_reshape_to_cubes", "(", "self", ",", "data", ")", ":", "\n", "    ", "reso", "=", "FLAGS", ".", "ct_resolution", "//", "FLAGS", ".", "pred_downsample", "\n", "data", "=", "np", ".", "transpose", "(", "data", ",", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ")", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "(", "data", ".", "shape", "[", "0", "]", ",", "reso", ",", "reso", ",", "reso", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.get_layout": [[114, 116], ["mesh_tensorflow.convert_to_layout_rules"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules"], ["def", "get_layout", "(", ")", ":", "\n", "  ", "return", "mtf", ".", "convert_to_layout_rules", "(", "FLAGS", ".", "layout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.get_dataset_creator": [[118, 277], ["FLAGS.train_file_pattern.format", "FLAGS.eval_file_pattern.format", "functools.partial", "tensorflow.data.Dataset.list_files().repeat", "six.moves.range", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.parse_single_example", "tensorflow.decode_raw", "tensorflow.decode_raw", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.one_hot", "tensorflow.as_dtype", "tensorflow.cast", "tensorflow.cast", "dataset.unbatch.apply", "dataset.unbatch.apply", "dataset.unbatch.shuffle().map", "dataset.unbatch.map", "dataset.unbatch.unbatch", "tensorflow.slice", "tensorflow.slice", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.one_hot", "tensorflow.as_dtype", "tensorflow.cast", "tensorflow.cast", "image_stack.append", "label_stack.append", "tensorflow.stack", "tensorflow.stack", "tensorflow.clip_by_value", "_get_stacked_2d_slices"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack"], ["", "def", "get_dataset_creator", "(", "dataset_str", ")", ":", "\n", "  ", "\"\"\"Returns a function that creates an unbatched dataset.\"\"\"", "\n", "if", "dataset_str", "==", "'train'", ":", "\n", "    ", "data_file_pattern", "=", "FLAGS", ".", "train_file_pattern", ".", "format", "(", "FLAGS", ".", "ct_resolution", ")", "\n", "shuffle", "=", "True", "\n", "interleave", "=", "True", "\n", "", "else", ":", "\n", "    ", "assert", "dataset_str", "==", "'eval'", "\n", "data_file_pattern", "=", "FLAGS", ".", "eval_file_pattern", ".", "format", "(", "FLAGS", ".", "ct_resolution", ")", "\n", "shuffle", "=", "False", "\n", "interleave", "=", "False", "\n", "\n", "", "def", "_dataset_creator", "(", ")", ":", "\n", "    ", "\"\"\"Returns an unbatch dataset.\"\"\"", "\n", "\n", "def", "_get_stacked_2d_slices", "(", "image_3d", ",", "label_3d", ")", ":", "\n", "      ", "\"\"\"Return 2d slices of the 3d scan.\"\"\"", "\n", "image_stack", "=", "[", "]", "\n", "label_stack", "=", "[", "]", "\n", "\n", "for", "begin_idx", "in", "range", "(", "0", ",", "FLAGS", ".", "ct_resolution", "-", "FLAGS", ".", "image_c", "+", "1", ")", ":", "\n", "        ", "slice_begin", "=", "[", "0", ",", "0", ",", "begin_idx", "]", "\n", "slice_size", "=", "[", "FLAGS", ".", "ct_resolution", ",", "FLAGS", ".", "ct_resolution", ",", "FLAGS", ".", "image_c", "]", "\n", "image", "=", "tf", ".", "slice", "(", "image_3d", ",", "slice_begin", ",", "slice_size", ")", "\n", "\n", "slice_begin", "=", "[", "0", ",", "0", ",", "begin_idx", "+", "FLAGS", ".", "image_c", "//", "2", "]", "\n", "slice_size", "=", "[", "FLAGS", ".", "ct_resolution", ",", "FLAGS", ".", "ct_resolution", ",", "1", "]", "\n", "label", "=", "tf", ".", "slice", "(", "label_3d", ",", "slice_begin", ",", "slice_size", ")", "\n", "\n", "spatial_dims_w_blocks", "=", "[", "FLAGS", ".", "image_nx_block", ",", "\n", "FLAGS", ".", "ct_resolution", "//", "FLAGS", ".", "image_nx_block", ",", "\n", "FLAGS", ".", "image_ny_block", ",", "\n", "FLAGS", ".", "ct_resolution", "//", "FLAGS", ".", "image_ny_block", "]", "\n", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "spatial_dims_w_blocks", "+", "[", "FLAGS", ".", "image_c", "]", ")", "\n", "label", "=", "tf", ".", "reshape", "(", "label", ",", "spatial_dims_w_blocks", ")", "\n", "\n", "label", "=", "tf", ".", "cast", "(", "label", ",", "tf", ".", "int32", ")", "\n", "label", "=", "tf", ".", "one_hot", "(", "label", ",", "FLAGS", ".", "label_c", ")", "\n", "\n", "data_dtype", "=", "tf", ".", "as_dtype", "(", "FLAGS", ".", "mtf_dtype", ")", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "data_dtype", ")", "\n", "label", "=", "tf", ".", "cast", "(", "label", ",", "data_dtype", ")", "\n", "\n", "image_stack", ".", "append", "(", "image", ")", "\n", "label_stack", ".", "append", "(", "label", ")", "\n", "\n", "", "return", "tf", ".", "stack", "(", "image_stack", ")", ",", "tf", ".", "stack", "(", "label_stack", ")", "\n", "\n", "", "def", "_parser_fn", "(", "serialized_example", ")", ":", "\n", "      ", "\"\"\"Parses a single tf.Example into image and label tensors.\"\"\"", "\n", "features", "=", "{", "}", "\n", "features", "[", "'image/ct_image'", "]", "=", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "\n", "features", "[", "'image/label'", "]", "=", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "\n", "parsed", "=", "tf", ".", "parse_single_example", "(", "serialized_example", ",", "features", "=", "features", ")", "\n", "\n", "spatial_dims", "=", "[", "FLAGS", ".", "ct_resolution", "]", "*", "3", "\n", "if", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "        ", "noise_shape", "=", "[", "FLAGS", ".", "ct_resolution", "]", "*", "2", "+", "[", "FLAGS", ".", "image_c", "]", "\n", "", "else", ":", "\n", "        ", "noise_shape", "=", "[", "FLAGS", ".", "ct_resolution", "]", "*", "3", "\n", "\n", "", "image", "=", "tf", ".", "decode_raw", "(", "parsed", "[", "'image/ct_image'", "]", ",", "tf", ".", "float32", ")", "\n", "label", "=", "tf", ".", "decode_raw", "(", "parsed", "[", "'image/label'", "]", ",", "tf", ".", "float32", ")", "\n", "\n", "if", "dataset_str", "!=", "'train'", ":", "\n", "# Preprocess intensity, clip to 0 ~ 1.", "\n", "# The training set is already preprocessed.", "\n", "        ", "image", "=", "tf", ".", "clip_by_value", "(", "image", "/", "1024.0", "+", "0.5", ",", "0", ",", "1", ")", "\n", "\n", "", "image", "=", "tf", ".", "reshape", "(", "image", ",", "spatial_dims", ")", "\n", "label", "=", "tf", ".", "reshape", "(", "label", ",", "spatial_dims", ")", "\n", "\n", "if", "dataset_str", "==", "'eval'", "and", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "        ", "return", "_get_stacked_2d_slices", "(", "image", ",", "label", ")", "\n", "\n", "", "if", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "# Take random slices of images and label", "\n", "        ", "begin_idx", "=", "tf", ".", "random_uniform", "(", "\n", "shape", "=", "[", "]", ",", "minval", "=", "0", ",", "\n", "maxval", "=", "FLAGS", ".", "ct_resolution", "-", "FLAGS", ".", "image_c", "+", "1", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "slice_begin", "=", "[", "0", ",", "0", ",", "begin_idx", "]", "\n", "slice_size", "=", "[", "FLAGS", ".", "ct_resolution", ",", "FLAGS", ".", "ct_resolution", ",", "FLAGS", ".", "image_c", "]", "\n", "\n", "image", "=", "tf", ".", "slice", "(", "image", ",", "slice_begin", ",", "slice_size", ")", "\n", "label", "=", "tf", ".", "slice", "(", "label", ",", "slice_begin", ",", "slice_size", ")", "\n", "\n", "", "if", "dataset_str", "==", "'train'", ":", "\n", "        ", "for", "flip_axis", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "          ", "image", ",", "label", "=", "data_aug_lib", ".", "maybe_flip", "(", "image", ",", "label", ",", "flip_axis", ")", "\n", "", "image", ",", "label", "=", "data_aug_lib", ".", "maybe_rot180", "(", "image", ",", "label", ",", "static_axis", "=", "2", ")", "\n", "image", "=", "data_aug_lib", ".", "intensity_shift", "(", "\n", "image", ",", "label", ",", "\n", "FLAGS", ".", "per_class_intensity_scale", ",", "FLAGS", ".", "per_class_intensity_shift", ")", "\n", "image", "=", "data_aug_lib", ".", "image_corruption", "(", "\n", "image", ",", "label", ",", "FLAGS", ".", "ct_resolution", ",", "\n", "FLAGS", ".", "image_corrupt_ratio_mean", ",", "FLAGS", ".", "image_corrupt_ratio_stddev", ")", "\n", "image", "=", "data_aug_lib", ".", "maybe_add_noise", "(", "\n", "image", ",", "noise_shape", ",", "1", ",", "4", ",", "\n", "FLAGS", ".", "image_noise_probability", ",", "FLAGS", ".", "image_noise_ratio", ")", "\n", "image", ",", "label", "=", "data_aug_lib", ".", "projective_transform", "(", "\n", "image", ",", "label", ",", "FLAGS", ".", "ct_resolution", ",", "\n", "FLAGS", ".", "image_translate_ratio", ",", "FLAGS", ".", "image_transform_ratio", ",", "\n", "FLAGS", ".", "sampled_2d_slices", ")", "\n", "\n", "", "if", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "# Only get the center slice of label.", "\n", "        ", "label", "=", "tf", ".", "slice", "(", "label", ",", "[", "0", ",", "0", ",", "FLAGS", ".", "image_c", "//", "2", "]", ",", "\n", "[", "FLAGS", ".", "ct_resolution", ",", "FLAGS", ".", "ct_resolution", ",", "1", "]", ")", "\n", "\n", "", "spatial_dims_w_blocks", "=", "[", "FLAGS", ".", "image_nx_block", ",", "\n", "FLAGS", ".", "ct_resolution", "//", "FLAGS", ".", "image_nx_block", ",", "\n", "FLAGS", ".", "image_ny_block", ",", "\n", "FLAGS", ".", "ct_resolution", "//", "FLAGS", ".", "image_ny_block", "]", "\n", "if", "not", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "        ", "spatial_dims_w_blocks", "+=", "[", "FLAGS", ".", "ct_resolution", "]", "\n", "\n", "", "image", "=", "tf", ".", "reshape", "(", "image", ",", "spatial_dims_w_blocks", "+", "[", "FLAGS", ".", "image_c", "]", ")", "\n", "label", "=", "tf", ".", "reshape", "(", "label", ",", "spatial_dims_w_blocks", ")", "\n", "\n", "label", "=", "tf", ".", "cast", "(", "label", ",", "tf", ".", "int32", ")", "\n", "label", "=", "tf", ".", "one_hot", "(", "label", ",", "FLAGS", ".", "label_c", ")", "\n", "\n", "data_dtype", "=", "tf", ".", "as_dtype", "(", "FLAGS", ".", "mtf_dtype", ")", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "data_dtype", ")", "\n", "label", "=", "tf", ".", "cast", "(", "label", ",", "data_dtype", ")", "\n", "return", "image", ",", "label", "\n", "\n", "", "dataset_fn", "=", "functools", ".", "partial", "(", "tf", ".", "data", ".", "TFRecordDataset", ",", "\n", "compression_type", "=", "'GZIP'", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "list_files", "(", "data_file_pattern", ",", "\n", "shuffle", "=", "shuffle", ")", ".", "repeat", "(", ")", "\n", "\n", "if", "interleave", ":", "\n", "      ", "dataset", "=", "dataset", ".", "apply", "(", "\n", "tf", ".", "data", ".", "experimental", ".", "parallel_interleave", "(", "\n", "lambda", "file_name", ":", "dataset_fn", "(", "file_name", ")", ".", "prefetch", "(", "1", ")", ",", "\n", "cycle_length", "=", "FLAGS", ".", "n_dataset_read_interleave", ",", "\n", "sloppy", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "      ", "dataset", "=", "dataset", ".", "apply", "(", "\n", "tf", ".", "data", ".", "experimental", ".", "parallel_interleave", "(", "\n", "lambda", "file_name", ":", "dataset_fn", "(", "file_name", ")", ".", "prefetch", "(", "1", ")", ",", "\n", "cycle_length", "=", "1", ",", "\n", "sloppy", "=", "False", ")", ")", "\n", "\n", "", "if", "shuffle", ":", "\n", "      ", "dataset", "=", "dataset", ".", "shuffle", "(", "FLAGS", ".", "n_dataset_processes", ")", ".", "map", "(", "\n", "_parser_fn", ",", "num_parallel_calls", "=", "FLAGS", ".", "n_dataset_processes", ")", "\n", "", "else", ":", "\n", "      ", "dataset", "=", "dataset", ".", "map", "(", "_parser_fn", ")", "\n", "\n", "", "if", "dataset_str", "==", "'eval'", "and", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "# When evaluating on slices, unbatch slices that belong to one CT scan.", "\n", "      ", "dataset", "=", "dataset", ".", "unbatch", "(", ")", "\n", "\n", "", "return", "dataset", "\n", "\n", "", "return", "_dataset_creator", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.get_input_mtf_shapes": [[279, 307], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "function", ["None"], ["", "def", "get_input_mtf_shapes", "(", "dataset_str", ")", ":", "\n", "  ", "\"\"\"Returns a list of mtf.Shapes of input tensors.\"\"\"", "\n", "if", "dataset_str", "==", "'train'", ":", "\n", "    ", "batch_dim", "=", "mtf", ".", "Dimension", "(", "'batch'", ",", "FLAGS", ".", "batch_size_train", ")", "\n", "", "else", ":", "\n", "    ", "assert", "dataset_str", "==", "'eval'", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "'batch'", ",", "FLAGS", ".", "batch_size_eval", ")", "\n", "", "image_nx_dim", "=", "mtf", ".", "Dimension", "(", "'image_nx_block'", ",", "FLAGS", ".", "image_nx_block", ")", "\n", "image_ny_dim", "=", "mtf", ".", "Dimension", "(", "'image_ny_block'", ",", "FLAGS", ".", "image_ny_block", ")", "\n", "image_sx_dim", "=", "mtf", ".", "Dimension", "(", "'image_sx_block'", ",", "\n", "FLAGS", ".", "ct_resolution", "//", "FLAGS", ".", "image_nx_block", ")", "\n", "image_sy_dim", "=", "mtf", ".", "Dimension", "(", "'image_sy_block'", ",", "\n", "FLAGS", ".", "ct_resolution", "//", "FLAGS", ".", "image_ny_block", ")", "\n", "\n", "batch_spatial_dims", "=", "[", "batch_dim", ",", "\n", "image_nx_dim", ",", "image_sx_dim", ",", "\n", "image_ny_dim", ",", "image_sy_dim", "]", "\n", "if", "not", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "    ", "image_sz_dim", "=", "mtf", ".", "Dimension", "(", "'image_sz_block'", ",", "FLAGS", ".", "ct_resolution", ")", "\n", "batch_spatial_dims", "+=", "[", "image_sz_dim", "]", "\n", "\n", "", "image_c_dim", "=", "mtf", ".", "Dimension", "(", "'image_c'", ",", "FLAGS", ".", "image_c", ")", "\n", "mtf_image_shape", "=", "mtf", ".", "Shape", "(", "batch_spatial_dims", "+", "[", "image_c_dim", "]", ")", "\n", "\n", "label_c_dim", "=", "mtf", ".", "Dimension", "(", "'label_c'", ",", "FLAGS", ".", "label_c", ")", "\n", "mtf_label_shape", "=", "mtf", ".", "Shape", "(", "batch_spatial_dims", "+", "[", "label_c_dim", "]", ")", "\n", "\n", "return", "[", "mtf_image_shape", ",", "mtf_label_shape", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.conv_with_spatial_partition": [[402, 434], ["mesh_tensorflow.leaky_relu", "mesh_tensorflow.dropout", "mesh_tensorflow.layers.conv2d_with_blocks", "mesh_tensorflow.layers.conv3d_with_blocks", "mesh_tensorflow.layers.batch_norm", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.leaky_relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d_with_blocks", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d_with_blocks", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.batch_norm"], ["", "", "def", "conv_with_spatial_partition", "(", "\n", "x", ",", "sampled_2d_slices", ",", "image_nx_dim", ",", "image_ny_dim", ",", "n_filters", ",", "\n", "keep_p", ",", "with_batch_norm", ",", "is_training", ",", "odim_name", ",", "variable_dtype", ",", "name", ")", ":", "\n", "  ", "\"\"\"Conv with spatial partition, batch_noram and activation.\"\"\"", "\n", "if", "sampled_2d_slices", ":", "\n", "    ", "x", "=", "mtf", ".", "layers", ".", "conv2d_with_blocks", "(", "\n", "x", ",", "mtf", ".", "Dimension", "(", "odim_name", ",", "n_filters", ")", ",", "\n", "filter_size", "=", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'SAME'", ",", "\n", "h_blocks_dim", "=", "image_nx_dim", ",", "w_blocks_dim", "=", "image_ny_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "name", ",", "\n", ")", "\n", "", "else", ":", "\n", "    ", "x", "=", "mtf", ".", "layers", ".", "conv3d_with_blocks", "(", "\n", "x", ",", "mtf", ".", "Dimension", "(", "odim_name", ",", "n_filters", ")", ",", "\n", "filter_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "'SAME'", ",", "\n", "d_blocks_dim", "=", "image_nx_dim", ",", "h_blocks_dim", "=", "image_ny_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "name", ",", "\n", ")", "\n", "\n", "", "if", "with_batch_norm", ":", "\n", "    ", "x", ",", "bn_update_ops", "=", "mtf", ".", "layers", ".", "batch_norm", "(", "\n", "x", ",", "is_training", ",", "momentum", "=", "0.90", ",", "epsilon", "=", "0.000001", ",", "\n", "dims_idx_start", "=", "0", ",", "dims_idx_end", "=", "-", "1", ",", "name", "=", "name", ")", "\n", "", "else", ":", "\n", "    ", "bn_update_ops", "=", "[", "]", "\n", "\n", "", "x", "=", "mtf", ".", "leaky_relu", "(", "x", ",", "0.1", ")", "\n", "x", "=", "mtf", ".", "dropout", "(", "x", ",", "is_training", ",", "keep_p", ")", "\n", "\n", "return", "x", ",", "bn_update_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.deconv_with_spatial_partition": [[436, 461], ["mesh_tensorflow.dropout", "mesh_tensorflow.layers.conv2d_transpose_with_blocks", "mesh_tensorflow.layers.conv3d_transpose_with_blocks", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d_transpose_with_blocks", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d_transpose_with_blocks"], ["", "def", "deconv_with_spatial_partition", "(", "\n", "x", ",", "sampled_2d_slices", ",", "image_nx_dim", ",", "image_ny_dim", ",", "n_filters", ",", "keep_p", ",", "\n", "is_training", ",", "\n", "odim_name", ",", "variable_dtype", ",", "name", ")", ":", "\n", "  ", "\"\"\"Deconvolution with spatial partition.\"\"\"", "\n", "if", "sampled_2d_slices", ":", "\n", "    ", "x", "=", "mtf", ".", "layers", ".", "conv2d_transpose_with_blocks", "(", "\n", "x", ",", "mtf", ".", "Dimension", "(", "odim_name", ",", "n_filters", ")", ",", "\n", "filter_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'SAME'", ",", "\n", "h_blocks_dim", "=", "image_nx_dim", ",", "w_blocks_dim", "=", "image_ny_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "name", ",", "\n", ")", "\n", "", "else", ":", "\n", "    ", "x", "=", "mtf", ".", "layers", ".", "conv3d_transpose_with_blocks", "(", "\n", "x", ",", "mtf", ".", "Dimension", "(", "odim_name", ",", "n_filters", ")", ",", "\n", "filter_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "'SAME'", ",", "\n", "d_blocks_dim", "=", "image_nx_dim", ",", "h_blocks_dim", "=", "image_ny_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "name", ",", "\n", ")", "\n", "\n", "", "x", "=", "mtf", ".", "dropout", "(", "x", ",", "is_training", ",", "keep_p", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.unet_with_spatial_partition": [[463, 705], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "unet.get_input_mtf_shapes", "tensorflow.as_dtype", "mesh_tensorflow.VariableDType", "mesh_tensorflow.import_laid_out_tensor", "mesh_tensorflow.cast", "mesh_tensorflow.import_laid_out_tensor", "mesh_tensorflow.cast", "six.moves.range", "mesh_tensorflow.argmax", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.argmax", "mesh_tensorflow.cast", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.softmax", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.slice", "mesh_tensorflow.slice", "preds.extend", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_impl.LaidOutTensor", "mesh_impl.LaidOutTensor", "mesh_tensorflow.transpose", "mesh_tensorflow.transpose", "mesh_tensorflow.transpose", "mesh_tensorflow.transpose", "six.moves.range", "levels.append", "six.moves.range", "unet.deconv_with_spatial_partition", "mesh_tensorflow.concat", "six.moves.range", "mesh_tensorflow.layers.conv2d_with_blocks", "mesh_tensorflow.layers.conv3d_with_blocks", "mesh_tensorflow.constant", "mesh_tensorflow.equal", "mesh_tensorflow.equal", "mesh_tensorflow.equal", "mesh_tensorflow.cast", "mesh_tensorflow.slice", "unet.unet_with_spatial_partition.scalar"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.get_input_mtf_shapes", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.import_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.import_laid_out_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.deconv_with_spatial_partition", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d_with_blocks", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d_with_blocks", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice"], ["", "def", "unet_with_spatial_partition", "(", "mesh", ",", "mesh_impl", ",", "dataset_str", ",", "images", ",", "labels", ")", ":", "\n", "  ", "\"\"\"Builds the UNet model graph, train op and eval metrics.\n\n  Args:\n    mesh: a MeshTensorflow.mesh object.\n    mesh_impl: a mesh implementation, such as SimdMeshImpl and\n      PlacementMeshImpl.\n    dataset_str: a string of either train or eval. This is used for batch_norm.\n    images: a laid out Tensor with shape [batch, x, y, num_channels]\n      or [batch, x, y, z, num_channels].\n    labels: a laid out Tensor with shape [batch, x, y, num_classes]\n      or [batch, x, y, z, num_classes].\n\n  Returns:\n    Prediction and loss.\n  \"\"\"", "\n", "\n", "is_training", "=", "(", "dataset_str", "==", "'train'", ")", "\n", "if", "dataset_str", "==", "'train'", ":", "\n", "    ", "batch_dim", "=", "mtf", ".", "Dimension", "(", "'batch'", ",", "FLAGS", ".", "batch_size_train", ")", "\n", "", "else", ":", "\n", "    ", "assert", "dataset_str", "==", "'eval'", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "'batch'", ",", "FLAGS", ".", "batch_size_eval", ")", "\n", "", "image_nx_dim", "=", "mtf", ".", "Dimension", "(", "'image_nx_block'", ",", "FLAGS", ".", "image_nx_block", ")", "\n", "image_ny_dim", "=", "mtf", ".", "Dimension", "(", "'image_ny_block'", ",", "FLAGS", ".", "image_ny_block", ")", "\n", "image_sx_dim", "=", "mtf", ".", "Dimension", "(", "'image_sx_block'", ",", "\n", "FLAGS", ".", "ct_resolution", "//", "FLAGS", ".", "image_nx_block", ")", "\n", "image_sy_dim", "=", "mtf", ".", "Dimension", "(", "'image_sy_block'", ",", "\n", "FLAGS", ".", "ct_resolution", "//", "FLAGS", ".", "image_ny_block", ")", "\n", "image_sz_dim", "=", "mtf", ".", "Dimension", "(", "'image_sz_block'", ",", "FLAGS", ".", "ct_resolution", ")", "\n", "image_c_dim", "=", "mtf", ".", "Dimension", "(", "'image_c'", ",", "FLAGS", ".", "image_c", ")", "\n", "label_c_dim", "=", "mtf", ".", "Dimension", "(", "'label_c'", ",", "FLAGS", ".", "label_c", ")", "\n", "mtf_images_shape", ",", "mtf_labels_shape", "=", "get_input_mtf_shapes", "(", "dataset_str", ")", "\n", "\n", "mtf_dtype", "=", "tf", ".", "as_dtype", "(", "FLAGS", ".", "mtf_dtype", ")", "\n", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "mtf_dtype", ",", "mtf_dtype", ",", "mtf_dtype", ")", "\n", "\n", "# Import input features.", "\n", "x", "=", "mtf", ".", "import_laid_out_tensor", "(", "\n", "mesh", ",", "\n", "mesh_impl", ".", "LaidOutTensor", "(", "images", ")", ",", "\n", "mtf_images_shape", ")", "\n", "x", "=", "mtf", ".", "cast", "(", "x", ",", "mtf_dtype", ")", "\n", "\n", "# Import ground truth labels.", "\n", "t", "=", "mtf", ".", "import_laid_out_tensor", "(", "\n", "mesh", ",", "\n", "mesh_impl", ".", "LaidOutTensor", "(", "labels", ")", ",", "\n", "mtf_labels_shape", ")", "\n", "t", "=", "mtf", ".", "cast", "(", "t", ",", "mtf_dtype", ")", "\n", "\n", "# Transpose the blocks.", "\n", "if", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "    ", "x", "=", "mtf", ".", "transpose", "(", "x", ",", "[", "batch_dim", ",", "\n", "image_nx_dim", ",", "image_ny_dim", ",", "\n", "image_sx_dim", ",", "image_sy_dim", ",", "\n", "image_c_dim", "]", ")", "\n", "\n", "t", "=", "mtf", ".", "transpose", "(", "t", ",", "[", "batch_dim", ",", "\n", "image_nx_dim", ",", "image_ny_dim", ",", "\n", "image_sx_dim", ",", "image_sy_dim", ",", "\n", "label_c_dim", "]", ")", "\n", "", "else", ":", "\n", "    ", "x", "=", "mtf", ".", "transpose", "(", "x", ",", "[", "batch_dim", ",", "\n", "image_nx_dim", ",", "image_ny_dim", ",", "\n", "image_sx_dim", ",", "image_sy_dim", ",", "\n", "image_sz_dim", ",", "image_c_dim", "]", ")", "\n", "\n", "t", "=", "mtf", ".", "transpose", "(", "t", ",", "[", "batch_dim", ",", "\n", "image_nx_dim", ",", "image_ny_dim", ",", "\n", "image_sx_dim", ",", "image_sy_dim", ",", "\n", "image_sz_dim", ",", "label_c_dim", "]", ")", "\n", "\n", "# Network.", "\n", "", "levels", "=", "[", "]", "\n", "all_bn_update_ops", "=", "[", "]", "\n", "# add levels with convolution or down-sampling", "\n", "for", "depth", "in", "range", "(", "FLAGS", ".", "network_depth", ")", ":", "\n", "    ", "for", "n_conv", "in", "range", "(", "FLAGS", ".", "n_conv_per_block", ")", ":", "\n", "      ", "if", "depth", "==", "0", "and", "n_conv", "==", "0", ":", "\n", "# no dropout in 1st layer.", "\n", "        ", "dropout_keep_p", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "dropout_keep_p", "=", "FLAGS", ".", "dropout_keep_p", "\n", "", "x", ",", "bn_update_ops", "=", "conv_with_spatial_partition", "(", "\n", "x", ",", "FLAGS", ".", "sampled_2d_slices", ",", "\n", "image_nx_dim", ",", "image_ny_dim", ",", "\n", "FLAGS", ".", "n_base_filters", "*", "(", "2", "**", "depth", ")", ",", "\n", "dropout_keep_p", ",", "\n", "FLAGS", ".", "with_batch_norm", ",", "\n", "is_training", ",", "\n", "'conv_{}_{}'", ".", "format", "(", "depth", ",", "n_conv", ")", ",", "\n", "variable_dtype", ",", "\n", "'conv_down_{}_{}'", ".", "format", "(", "depth", ",", "n_conv", ")", ")", "\n", "all_bn_update_ops", ".", "extend", "(", "bn_update_ops", ")", "\n", "", "levels", ".", "append", "(", "x", ")", "\n", "\n", "if", "depth", "<", "FLAGS", ".", "network_depth", "-", "1", ":", "\n", "      ", "if", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "        ", "x", "=", "mtf", ".", "layers", ".", "max_pool2d", "(", "x", ",", "ksize", "=", "(", "2", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "mtf", ".", "layers", ".", "max_pool3d", "(", "x", ",", "ksize", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "# add levels with up-convolution or up-sampling", "\n", "", "", "", "for", "depth", "in", "range", "(", "FLAGS", ".", "network_depth", "-", "1", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "    ", "x", "=", "deconv_with_spatial_partition", "(", "\n", "x", ",", "FLAGS", ".", "sampled_2d_slices", ",", "image_nx_dim", ",", "image_ny_dim", ",", "\n", "FLAGS", ".", "n_base_filters", "*", "(", "2", "**", "depth", ")", ",", "\n", "FLAGS", ".", "dropout_keep_p", ",", "\n", "is_training", ",", "\n", "'conv_{}_{}'", ".", "format", "(", "depth", ",", "FLAGS", ".", "n_conv_per_block", "-", "1", ")", ",", "\n", "variable_dtype", ",", "'deconv_{}_0'", ".", "format", "(", "depth", ")", ")", "\n", "x", "=", "mtf", ".", "concat", "(", "\n", "[", "x", ",", "levels", "[", "depth", "]", "]", ",", "\n", "concat_dim_name", "=", "'conv_{}_{}'", ".", "format", "(", "depth", ",", "FLAGS", ".", "n_conv_per_block", "-", "1", ")", ")", "\n", "\n", "for", "n_conv", "in", "range", "(", "FLAGS", ".", "n_conv_per_block", ")", ":", "\n", "      ", "x", ",", "bn_update_ops", "=", "conv_with_spatial_partition", "(", "\n", "x", ",", "FLAGS", ".", "sampled_2d_slices", ",", "\n", "image_nx_dim", ",", "image_ny_dim", ",", "\n", "FLAGS", ".", "n_base_filters", "*", "(", "2", "**", "depth", ")", ",", "\n", "FLAGS", ".", "dropout_keep_p", ",", "\n", "FLAGS", ".", "with_batch_norm", ",", "\n", "is_training", ",", "\n", "'conv_{}_{}'", ".", "format", "(", "depth", ",", "n_conv", ")", ",", "\n", "variable_dtype", ",", "\n", "'conv_up_{}_{}'", ".", "format", "(", "depth", ",", "n_conv", ")", ")", "\n", "all_bn_update_ops", ".", "extend", "(", "bn_update_ops", ")", "\n", "\n", "# no dropout in the final layer.", "\n", "", "", "if", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "    ", "y", "=", "mtf", ".", "layers", ".", "conv2d_with_blocks", "(", "\n", "x", ",", "mtf", ".", "Dimension", "(", "'label_c'", ",", "FLAGS", ".", "label_c", ")", ",", "\n", "filter_size", "=", "(", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'SAME'", ",", "\n", "h_blocks_dim", "=", "image_nx_dim", ",", "w_blocks_dim", "=", "image_ny_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "'final_conv_{}'", ".", "format", "(", "FLAGS", ".", "label_c", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "    ", "y", "=", "mtf", ".", "layers", ".", "conv3d_with_blocks", "(", "\n", "x", ",", "mtf", ".", "Dimension", "(", "'label_c'", ",", "FLAGS", ".", "label_c", ")", ",", "\n", "filter_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "'SAME'", ",", "\n", "d_blocks_dim", "=", "image_nx_dim", ",", "h_blocks_dim", "=", "image_ny_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "'final_conv_{}'", ".", "format", "(", "FLAGS", ".", "label_c", ")", ",", "\n", ")", "\n", "\n", "# use mtf.constant to make sure there is no CPU-side constants.", "\n", "", "def", "scalar", "(", "v", ",", "dtype", ")", ":", "\n", "    ", "return", "mtf", ".", "constant", "(", "mesh", ",", "v", ",", "shape", "=", "[", "]", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "argmax_t", "=", "mtf", ".", "argmax", "(", "t", ",", "label_c_dim", ")", "\n", "liver_t", "=", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "argmax_t", ",", "scalar", "(", "1", ",", "tf", ".", "int32", ")", ")", ",", "mtf_dtype", ")", "\n", "lesion_t", "=", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "argmax_t", ",", "scalar", "(", "2", ",", "tf", ".", "int32", ")", ")", ",", "mtf_dtype", ")", "\n", "\n", "argmax_y", "=", "mtf", ".", "argmax", "(", "y", ",", "label_c_dim", ")", "\n", "lesion_y", "=", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "argmax_y", ",", "scalar", "(", "2", ",", "tf", ".", "int32", ")", ")", ",", "mtf_dtype", ")", "\n", "\n", "# summary of class ratios.", "\n", "lesion_pred_ratio", "=", "mtf", ".", "reduce_mean", "(", "lesion_y", ")", "\n", "lesion_label_ratio", "=", "mtf", ".", "reduce_mean", "(", "lesion_t", ")", "\n", "\n", "# summary of accuracy.", "\n", "accuracy", "=", "mtf", ".", "reduce_mean", "(", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "argmax_y", ",", "argmax_t", ")", ",", "mtf_dtype", ")", ")", "\n", "\n", "# Cross-entropy loss. Up-weight the liver region.", "\n", "pixel_loss", "=", "mtf", ".", "layers", ".", "softmax_cross_entropy_with_logits", "(", "y", ",", "t", ",", "label_c_dim", ")", "\n", "pixel_weight", "=", "scalar", "(", "1", ",", "mtf_dtype", ")", "+", "liver_t", "*", "scalar", "(", "FLAGS", ".", "xen_liver_weight", "-", "1", ",", "mtf_dtype", ")", "+", "lesion_t", "*", "scalar", "(", "FLAGS", ".", "xen_lesion_weight", "-", "FLAGS", ".", "xen_liver_weight", ",", "\n", "mtf_dtype", ")", "\n", "loss_xen", "=", "mtf", ".", "reduce_mean", "(", "pixel_loss", "*", "pixel_weight", ")", "\n", "\n", "# Dice loss", "\n", "y_prob", "=", "mtf", ".", "softmax", "(", "y", ",", "reduced_dim", "=", "label_c_dim", ")", "\n", "lesion_prob", "=", "mtf", ".", "reduce_sum", "(", "mtf", ".", "slice", "(", "y_prob", ",", "2", ",", "1", ",", "'label_c'", ")", ",", "\n", "reduced_dim", "=", "mtf", ".", "Dimension", "(", "'label_c'", ",", "1", ")", ")", "\n", "prob_intersect", "=", "mtf", ".", "reduce_sum", "(", "lesion_prob", "*", "lesion_t", ",", "\n", "output_shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", "]", ")", ")", "\n", "prob_area_sum", "=", "mtf", ".", "reduce_sum", "(", "lesion_prob", "+", "lesion_t", ",", "\n", "output_shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", "]", ")", ")", "\n", "loss_dice_per_case", "=", "mtf", ".", "reduce_mean", "(", "\n", "scalar", "(", "-", "2", ",", "mtf_dtype", ")", "*", "prob_intersect", "/", "(", "\n", "prob_area_sum", "+", "scalar", "(", "FLAGS", ".", "dice_epsilon", ",", "mtf_dtype", ")", ")", ")", "\n", "loss_dice_global", "=", "scalar", "(", "-", "2", ",", "mtf_dtype", ")", "*", "mtf", ".", "reduce_sum", "(", "prob_intersect", ")", "/", "(", "\n", "mtf", ".", "reduce_sum", "(", "prob_area_sum", ")", "+", "scalar", "(", "FLAGS", ".", "dice_epsilon", ",", "mtf_dtype", ")", ")", "\n", "\n", "loss_dice", "=", "(", "loss_dice_per_case", "+", "loss_dice_global", ")", "*", "scalar", "(", "0.5", ",", "mtf_dtype", ")", "\n", "\n", "loss", "=", "scalar", "(", "FLAGS", ".", "dice_loss_weight", ",", "mtf_dtype", ")", "*", "loss_dice", "+", "scalar", "(", "\n", "1", "-", "FLAGS", ".", "dice_loss_weight", ",", "mtf_dtype", ")", "*", "loss_xen", "\n", "\n", "intersect", "=", "mtf", ".", "reduce_sum", "(", "lesion_y", "*", "lesion_t", ",", "\n", "output_shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", "]", ")", ")", "\n", "area_sum", "=", "mtf", ".", "reduce_sum", "(", "lesion_y", "+", "lesion_t", ",", "\n", "output_shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", "]", ")", ")", "\n", "# summary of dice.", "\n", "dice_per_case", "=", "mtf", ".", "reduce_mean", "(", "scalar", "(", "2", ",", "mtf_dtype", ")", "*", "intersect", "/", "(", "\n", "area_sum", "+", "scalar", "(", "0.000001", ",", "mtf_dtype", ")", ")", ")", "\n", "dice_global", "=", "scalar", "(", "2", ",", "mtf_dtype", ")", "*", "mtf", ".", "reduce_sum", "(", "intersect", ")", "/", "(", "\n", "mtf", ".", "reduce_sum", "(", "area_sum", ")", "+", "scalar", "(", "0.000001", ",", "mtf_dtype", ")", ")", "\n", "\n", "eval_metrics", "=", "{", "\n", "'lesion_pred_ratio'", ":", "lesion_pred_ratio", ",", "\n", "'lesion_label_ratio'", ":", "lesion_label_ratio", ",", "\n", "'accuracy_of_all_classes'", ":", "accuracy", ",", "\n", "'lesion_dice_per_case'", ":", "dice_per_case", ",", "\n", "'lesion_dice_global'", ":", "dice_global", ",", "\n", "'loss_xen'", ":", "loss_xen", ",", "\n", "'loss_dice'", ":", "loss_dice", ",", "\n", "'loss_dice_per_case'", ":", "loss_dice_per_case", ",", "\n", "'loss_dice_global'", ":", "loss_dice_global", ",", "\n", "}", "\n", "\n", "if", "FLAGS", ".", "sampled_2d_slices", ":", "\n", "    ", "y_prob_downsampled", "=", "mtf", ".", "layers", ".", "avg_pool2d", "(", "\n", "y_prob", ",", "ksize", "=", "(", "FLAGS", ".", "pred_downsample", ",", ")", "*", "2", ")", "\n", "if", "FLAGS", ".", "output_ground_truth", ":", "\n", "      ", "lesion_gt_downsampled", "=", "mtf", ".", "layers", ".", "avg_pool2d", "(", "\n", "mtf", ".", "slice", "(", "t", ",", "2", ",", "1", ",", "'label_c'", ")", ",", "ksize", "=", "(", "FLAGS", ".", "pred_downsample", ",", ")", "*", "2", ")", "\n", "", "", "else", ":", "\n", "    ", "y_prob_downsampled", "=", "mtf", ".", "layers", ".", "avg_pool3d", "(", "\n", "y_prob", ",", "ksize", "=", "(", "FLAGS", ".", "pred_downsample", ",", ")", "*", "3", ")", "\n", "if", "FLAGS", ".", "output_ground_truth", ":", "\n", "      ", "lesion_gt_downsampled", "=", "mtf", ".", "layers", ".", "avg_pool3d", "(", "\n", "mtf", ".", "slice", "(", "t", ",", "2", ",", "1", ",", "'label_c'", ")", ",", "ksize", "=", "(", "FLAGS", ".", "pred_downsample", ",", ")", "*", "3", ")", "\n", "\n", "", "", "liver_prob_downsampled", "=", "mtf", ".", "slice", "(", "y_prob_downsampled", ",", "1", ",", "1", ",", "'label_c'", ")", "\n", "lesion_prob_downsampled", "=", "mtf", ".", "slice", "(", "y_prob_downsampled", ",", "2", ",", "1", ",", "'label_c'", ")", "\n", "preds", "=", "[", "\n", "mtf", ".", "reduce_sum", "(", "liver_prob_downsampled", ",", "\n", "reduced_dim", "=", "mtf", ".", "Dimension", "(", "'label_c'", ",", "1", ")", ")", ",", "\n", "mtf", ".", "reduce_sum", "(", "lesion_prob_downsampled", ",", "\n", "reduced_dim", "=", "mtf", ".", "Dimension", "(", "'label_c'", ",", "1", ")", ")", "]", "\n", "\n", "if", "FLAGS", ".", "output_ground_truth", ":", "\n", "    ", "preds", ".", "append", "(", "mtf", ".", "reduce_sum", "(", "\n", "lesion_gt_downsampled", ",", "reduced_dim", "=", "mtf", ".", "Dimension", "(", "'label_c'", ",", "1", ")", ")", ")", "\n", "\n", "", "preds", ".", "extend", "(", "[", "intersect", ",", "area_sum", "]", ")", "\n", "\n", "return", "preds", ",", "loss", ",", "eval_metrics", ",", "all_bn_update_ops", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._truncated_normal": [[31, 35], ["tensorflow.random.normal", "tensorflow.clip_by_value"], "function", ["None"], ["def", "_truncated_normal", "(", "mean", ",", "stddev", ")", ":", "\n", "  ", "v", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "[", "]", ",", "mean", "=", "mean", ",", "stddev", "=", "stddev", ")", "\n", "v", "=", "tf", ".", "clip_by_value", "(", "v", ",", "-", "2", "*", "stddev", "+", "mean", ",", "2", "*", "stddev", "+", "mean", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._rand_noise": [[37, 54], ["tensorflow.random.normal", "tensorflow.clip_by_value", "tensorflow.image.resize_images", "tensorflow.transpose", "tensorflow.image.resize_images", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose"], ["", "def", "_rand_noise", "(", "noise_mean", ",", "noise_dev", ",", "scale", ",", "shape", ")", ":", "\n", "  ", "\"\"\"Generate random noise given a particular scale and shape.\"\"\"", "\n", "noise_shape", "=", "[", "x", "//", "scale", "for", "x", "in", "shape", "]", "\n", "noise_shape", "=", "[", "1", "if", "x", "==", "0", "else", "x", "for", "x", "in", "noise_shape", "]", "\n", "noise", "=", "tf", ".", "random", ".", "normal", "(", "\n", "shape", "=", "noise_shape", ",", "mean", "=", "noise_mean", ",", "stddev", "=", "noise_dev", ")", "\n", "noise", "=", "tf", ".", "clip_by_value", "(", "\n", "noise", ",", "noise_mean", "-", "2.0", "*", "noise_dev", ",", "noise_mean", "+", "2.0", "*", "noise_dev", ")", "\n", "\n", "if", "scale", "!=", "1", ":", "\n", "    ", "noise", "=", "tf", ".", "image", ".", "resize_images", "(", "\n", "noise", ",", "[", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "]", ")", "\n", "noise", "=", "tf", ".", "transpose", "(", "noise", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "noise", "=", "tf", ".", "image", ".", "resize_images", "(", "\n", "noise", ",", "[", "shape", "[", "0", "]", ",", "shape", "[", "2", "]", "]", ")", "\n", "noise", "=", "tf", ".", "transpose", "(", "noise", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "", "return", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.projective_transform": [[56, 98], ["data_aug_lib._truncated_normal", "data_aug_lib._truncated_normal", "data_aug_lib._truncated_normal", "data_aug_lib._truncated_normal", "data_aug_lib._truncated_normal", "data_aug_lib._truncated_normal", "data_aug_lib._truncated_normal", "data_aug_lib._truncated_normal", "data_aug_lib.projective_transform._projective_transform"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._truncated_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._truncated_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._truncated_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._truncated_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._truncated_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._truncated_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._truncated_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._truncated_normal"], ["", "def", "projective_transform", "(", "\n", "image", ",", "label", ",", "reso", ",", "image_translate_ratio", ",", "image_transform_ratio", ",", "\n", "sampled_2d_slices", "=", "False", ")", ":", "\n", "  ", "\"\"\"Apply projective transformation on image and label.\"\"\"", "\n", "\n", "if", "image_translate_ratio", "<", "0.000001", "and", "(", "\n", "image_transform_ratio", "<", "0.000001", ")", ":", "\n", "    ", "return", "image", ",", "label", "\n", "\n", "", "def", "_projective_transform", "(", "data", ",", "proj_matrix", ",", "static_axis", ",", "interpolation", ")", ":", "\n", "    ", "\"\"\"Apply projective transformation.\"\"\"", "\n", "if", "static_axis", "==", "2", ":", "\n", "      ", "data", "=", "contrib_image", ".", "transform", "(", "data", ",", "proj_matrix", ",", "interpolation", ")", "\n", "", "elif", "static_axis", "==", "1", ":", "\n", "      ", "data", "=", "tf", ".", "transpose", "(", "data", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "data", "=", "contrib_image", ".", "transform", "(", "data", ",", "proj_matrix", ",", "interpolation", ")", "\n", "data", "=", "tf", ".", "transpose", "(", "data", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "      ", "data", "=", "tf", ".", "transpose", "(", "data", ",", "[", "2", ",", "1", ",", "0", "]", ")", "\n", "data", "=", "contrib_image", ".", "transform", "(", "data", ",", "proj_matrix", ",", "interpolation", ")", "\n", "data", "=", "tf", ".", "transpose", "(", "data", ",", "[", "2", ",", "1", ",", "0", "]", ")", "\n", "", "return", "data", "\n", "\n", "", "for", "static_axis", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "    ", "if", "sampled_2d_slices", "and", "static_axis", "!=", "2", ":", "\n", "      ", "continue", "\n", "", "a0", "=", "_truncated_normal", "(", "1.0", ",", "image_transform_ratio", ")", "\n", "a1", "=", "_truncated_normal", "(", "0.0", ",", "image_transform_ratio", ")", "\n", "a2", "=", "_truncated_normal", "(", "\n", "0.0", ",", "image_translate_ratio", "*", "reso", ")", "\n", "b0", "=", "_truncated_normal", "(", "0.0", ",", "image_transform_ratio", ")", "\n", "b1", "=", "_truncated_normal", "(", "1.0", ",", "image_transform_ratio", ")", "\n", "b2", "=", "_truncated_normal", "(", "\n", "0.0", ",", "image_translate_ratio", "*", "reso", ")", "\n", "c0", "=", "_truncated_normal", "(", "0.0", ",", "image_transform_ratio", ")", "\n", "c1", "=", "_truncated_normal", "(", "0.0", ",", "image_transform_ratio", ")", "\n", "proj_matrix", "=", "[", "a0", ",", "a1", ",", "a2", ",", "b0", ",", "b1", ",", "b2", ",", "c0", ",", "c1", "]", "\n", "\n", "image", "=", "_projective_transform", "(", "image", ",", "proj_matrix", ",", "static_axis", ",", "'BILINEAR'", ")", "\n", "label", "=", "_projective_transform", "(", "label", ",", "proj_matrix", ",", "static_axis", ",", "'NEAREST'", ")", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.maybe_add_noise": [[100, 122], ["tensorflow.greater", "tensorflow.cond", "tensorflow.cond", "tensorflow.random.uniform", "noise_list.append", "tensorflow.random.uniform", "data_aug_lib._rand_noise"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._rand_noise"], ["", "def", "maybe_add_noise", "(", "image", ",", "noise_shape", ",", "scale0", ",", "scale1", ",", "\n", "image_noise_probability", ",", "image_noise_ratio", ")", ":", "\n", "  ", "\"\"\"Add noise at two scales.\"\"\"", "\n", "\n", "if", "image_noise_probability", "<", "0.000001", "or", "(", "\n", "image_noise_ratio", "<", "0.000001", ")", ":", "\n", "    ", "return", "image", "\n", "\n", "", "noise_list", "=", "[", "]", "\n", "for", "scale", "in", "[", "scale0", ",", "scale1", "]", ":", "\n", "    ", "rand_image_noise_ratio", "=", "tf", ".", "random", ".", "uniform", "(", "\n", "shape", "=", "[", "]", ",", "minval", "=", "0.0", ",", "maxval", "=", "image_noise_ratio", ")", "\n", "noise_list", ".", "append", "(", "\n", "_rand_noise", "(", "0.0", ",", "rand_image_noise_ratio", ",", "scale", ",", "noise_shape", ")", ")", "\n", "\n", "", "skip_noise", "=", "tf", ".", "greater", "(", "tf", ".", "random", ".", "uniform", "(", "[", "]", ")", ",", "image_noise_probability", ")", "\n", "image", "=", "tf", ".", "cond", "(", "skip_noise", ",", "\n", "lambda", ":", "image", ",", "lambda", ":", "image", "+", "noise_list", "[", "0", "]", ")", "\n", "image", "=", "tf", ".", "cond", "(", "skip_noise", ",", "\n", "lambda", ":", "image", ",", "lambda", ":", "image", "+", "noise_list", "[", "1", "]", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._gen_rand_mask": [[124, 150], ["max", "tensorflow.random.normal", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.cast", "data_aug_lib._rand_noise", "tensorflow_probability.stats.percentile", "tensorflow.less", "tensorflow.expand_dims", "tensorflow.nn.conv3d", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.clip_by_value", "tensorflow.expand_dims", "tensorflow.ones", "int", "tensorflow.contrib.image.shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._rand_noise", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.shape"], ["", "def", "_gen_rand_mask", "(", "ratio_mean", ",", "ratio_stddev", ",", "scale", ",", "shape", ",", "smoothness", "=", "0", ")", ":", "\n", "  ", "\"\"\"Generate a binary mask.\"\"\"", "\n", "scale", "=", "max", "(", "scale", ",", "1", ")", "\n", "\n", "ratio", "=", "tf", ".", "random", ".", "normal", "(", "\n", "shape", "=", "[", "]", ",", "mean", "=", "ratio_mean", ",", "stddev", "=", "ratio_stddev", ")", "\n", "low_bound", "=", "tf", ".", "maximum", "(", "0.0", ",", "ratio_mean", "-", "2", "*", "ratio_stddev", ")", "\n", "up_bound", "=", "tf", ".", "minimum", "(", "1.0", ",", "ratio_mean", "+", "2", "*", "ratio_stddev", ")", "\n", "percentil_q", "=", "tf", ".", "cast", "(", "\n", "100.0", "*", "tf", ".", "clip_by_value", "(", "ratio", ",", "low_bound", ",", "up_bound", ")", ",", "\n", "tf", ".", "int32", ")", "\n", "\n", "pattern", "=", "_rand_noise", "(", "0.0", ",", "1.0", ",", "scale", ",", "shape", ")", "\n", "if", "smoothness", ">", "0", ":", "\n", "    ", "smoothness", "=", "int", "(", "smoothness", ")", "//", "2", "*", "2", "+", "1", "\n", "pattern", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "pattern", ",", "0", ")", ",", "-", "1", ")", "\n", "pattern", "=", "tf", ".", "nn", ".", "conv3d", "(", "\n", "pattern", ",", "filter", "=", "tf", ".", "ones", "(", "[", "smoothness", ",", "smoothness", ",", "smoothness", ",", "1", ",", "1", "]", ")", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ",", "dilations", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "pattern", "=", "tf", ".", "reduce_sum", "(", "pattern", ",", "0", ")", "\n", "pattern", "=", "tf", ".", "reduce_sum", "(", "pattern", ",", "-", "1", ")", "\n", "\n", "", "thres", "=", "tfp", ".", "stats", ".", "percentile", "(", "pattern", ",", "q", "=", "percentil_q", ")", "\n", "rand_mask", "=", "tf", ".", "less", "(", "pattern", ",", "thres", ")", "\n", "\n", "return", "rand_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.maybe_gen_fake_data_based_on_real_data": [[152, 219], ["tensorflow.random_uniform", "tensorflow.less", "tensorflow.greater", "tensorflow.logical_not", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.cond", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.clip_by_value", "tensorflow.logical_and", "tensorflow.logical_not", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.logical_or", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.is_nan", "data_aug_lib._gen_rand_mask", "tensorflow.logical_not", "tensorflow.logical_or", "tensorflow.nn.conv3d", "tensorflow.nn.conv3d", "tensorflow.greater", "tensorflow.greater", "tensorflow.greater", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.ones", "tensorflow.cast", "tensorflow.ones", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_uniform", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_not", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_and", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_not", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_or", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._gen_rand_mask", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_not", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_or", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv3d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "maybe_gen_fake_data_based_on_real_data", "(", "\n", "image", ",", "label", ",", "reso", ",", "min_fake_lesion_ratio", ",", "gen_fake_probability", ")", ":", "\n", "  ", "\"\"\"Remove real lesion and synthesize lesion.\"\"\"", "\n", "# TODO(lehou): Replace magic numbers with flag variables.", "\n", "gen_prob_indicator", "=", "tf", ".", "random_uniform", "(", "\n", "shape", "=", "[", "]", ",", "minval", "=", "0.0", ",", "maxval", "=", "1.0", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "background_mask", "=", "tf", ".", "less", "(", "label", ",", "0.5", ")", "\n", "lesion_mask", "=", "tf", ".", "greater", "(", "label", ",", "1.5", ")", "\n", "liver_mask", "=", "tf", ".", "logical_not", "(", "tf", ".", "logical_or", "(", "background_mask", ",", "lesion_mask", ")", ")", "\n", "\n", "liver_intensity", "=", "tf", ".", "boolean_mask", "(", "image", ",", "liver_mask", ")", "\n", "lesion_intensity", "=", "tf", ".", "boolean_mask", "(", "image", ",", "lesion_mask", ")", "\n", "\n", "intensity_diff", "=", "tf", ".", "reduce_mean", "(", "liver_intensity", ")", "-", "(", "\n", "tf", ".", "reduce_mean", "(", "lesion_intensity", ")", ")", "\n", "intensity_diff", "*=", "1.15", "\n", "intensity_diff", "=", "tf", ".", "cond", "(", "tf", ".", "is_nan", "(", "intensity_diff", ")", ",", "\n", "lambda", ":", "0.0", ",", "lambda", ":", "intensity_diff", ")", "\n", "\n", "lesion_liver_ratio", "=", "0.0", "\n", "lesion_liver_ratio", "+=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "[", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.01", ")", "\n", "lesion_liver_ratio", "+=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "[", "]", ",", "mean", "=", "0.0", ",", "stddev", "=", "0.05", ")", "\n", "lesion_liver_ratio", "=", "tf", ".", "clip_by_value", "(", "\n", "lesion_liver_ratio", ",", "min_fake_lesion_ratio", ",", "min_fake_lesion_ratio", "+", "0.20", ")", "\n", "\n", "fake_lesion_mask", "=", "tf", ".", "logical_and", "(", "\n", "_gen_rand_mask", "(", "ratio_mean", "=", "lesion_liver_ratio", ",", "ratio_stddev", "=", "0.0", ",", "\n", "scale", "=", "reso", "//", "32", ",", "shape", "=", "label", ".", "shape", ",", "\n", "smoothness", "=", "reso", "//", "32", ")", ",", "\n", "tf", ".", "logical_not", "(", "background_mask", ")", ")", "\n", "liver_mask", "=", "tf", ".", "logical_not", "(", "tf", ".", "logical_or", "(", "background_mask", ",", "fake_lesion_mask", ")", ")", "\n", "\n", "# Blur the masks", "\n", "lesion_mask_blur", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "conv3d", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "tf", ".", "cast", "(", "lesion_mask", ",", "tf", ".", "float32", ")", ",", "-", "1", ")", ",", "0", ")", ",", "\n", "filter", "=", "tf", ".", "ones", "(", "[", "reso", "//", "32", "]", "*", "3", "+", "[", "1", ",", "1", "]", ",", "tf", ".", "float32", ")", "/", "(", "reso", "//", "32", ")", "**", "3", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ")", ")", "\n", "fake_lesion_mask_blur", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "conv3d", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "cast", "(", "fake_lesion_mask", ",", "tf", ".", "float32", ")", ",", "-", "1", ")", ",", "0", ")", ",", "\n", "filter", "=", "tf", ".", "ones", "(", "[", "reso", "//", "32", "]", "*", "3", "+", "[", "1", ",", "1", "]", ",", "tf", ".", "float32", ")", "/", "(", "reso", "//", "32", ")", "**", "3", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ")", ")", "\n", "\n", "# Remove real lesion and add fake lesion.", "\n", "# If the intensitify is too small (maybe no liver or lesion region labeled),", "\n", "# do not generate fake data.", "\n", "gen_prob_indicator", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "greater", "(", "intensity_diff", ",", "0.0001", ")", ",", "\n", "lambda", ":", "gen_prob_indicator", ",", "lambda", ":", "0.0", ")", "\n", "# pylint: disable=g-long-lambda", "\n", "image", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "greater", "(", "gen_prob_indicator", ",", "1", "-", "gen_fake_probability", ")", ",", "\n", "lambda", ":", "image", "+", "intensity_diff", "*", "lesion_mask_blur", "-", "intensity_diff", "*", "fake_lesion_mask_blur", ",", "\n", "lambda", ":", "image", ")", "\n", "label", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "greater", "(", "gen_prob_indicator", ",", "1", "-", "gen_fake_probability", ")", ",", "\n", "lambda", ":", "tf", ".", "cast", "(", "background_mask", ",", "tf", ".", "float32", ")", "*", "0", "+", "tf", ".", "cast", "(", "liver_mask", ",", "tf", ".", "float32", ")", "*", "1", "+", "tf", ".", "cast", "(", "fake_lesion_mask", ",", "tf", ".", "float32", ")", "*", "2", ",", "\n", "lambda", ":", "label", ")", "\n", "# pylint: enable=g-long-lambda", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.maybe_flip": [[221, 249], ["tensorflow.greater", "tensorflow.random_uniform", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "data_aug_lib.maybe_flip._maybe_flip"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_uniform"], ["", "def", "maybe_flip", "(", "image", ",", "label", ",", "flip_axis", ",", "flip_indicator", "=", "None", ")", ":", "\n", "  ", "\"\"\"Randomly flip the image.\"\"\"", "\n", "if", "flip_indicator", "is", "None", ":", "\n", "    ", "flip_indicator", "=", "tf", ".", "random_uniform", "(", "shape", "=", "[", "]", ")", "\n", "", "flip_or_not", "=", "tf", ".", "greater", "(", "flip_indicator", ",", "0.5", ")", "\n", "\n", "def", "_maybe_flip", "(", "data", ")", ":", "\n", "    ", "\"\"\"Flip or not according to flip_or_not.\"\"\"", "\n", "data", "=", "tf", ".", "cond", "(", "tf", ".", "logical_and", "(", "flip_or_not", ",", "tf", ".", "equal", "(", "flip_axis", ",", "1", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "transpose", "(", "data", ",", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "lambda", ":", "data", ")", "\n", "data", "=", "tf", ".", "cond", "(", "tf", ".", "logical_and", "(", "flip_or_not", ",", "tf", ".", "equal", "(", "flip_axis", ",", "2", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "transpose", "(", "data", ",", "[", "2", ",", "1", ",", "0", "]", ")", ",", "\n", "lambda", ":", "data", ")", "\n", "\n", "data", "=", "tf", ".", "cond", "(", "flip_or_not", ",", "\n", "lambda", ":", "tf", ".", "image", ".", "flip_up_down", "(", "data", ")", ",", "\n", "lambda", ":", "data", ")", "\n", "\n", "data", "=", "tf", ".", "cond", "(", "tf", ".", "logical_and", "(", "flip_or_not", ",", "tf", ".", "equal", "(", "flip_axis", ",", "1", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "transpose", "(", "data", ",", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "lambda", ":", "data", ")", "\n", "data", "=", "tf", ".", "cond", "(", "tf", ".", "logical_and", "(", "flip_or_not", ",", "tf", ".", "equal", "(", "flip_axis", ",", "2", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "transpose", "(", "data", ",", "[", "2", ",", "1", ",", "0", "]", ")", ",", "\n", "lambda", ":", "data", ")", "\n", "return", "data", "\n", "\n", "", "return", "_maybe_flip", "(", "image", ")", ",", "_maybe_flip", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.maybe_rot180": [[251, 280], ["tensorflow.not_equal", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "data_aug_lib.maybe_rot180._maybe_rot180"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal"], ["", "def", "maybe_rot180", "(", "image", ",", "label", ",", "static_axis", ",", "rot180_k", "=", "None", ")", ":", "\n", "  ", "\"\"\"Randomly rotate the image 180 degrees.\"\"\"", "\n", "if", "rot180_k", "is", "None", ":", "\n", "    ", "rot180_k", "=", "2", "*", "tf", ".", "random_uniform", "(", "\n", "shape", "=", "[", "]", ",", "minval", "=", "0", ",", "maxval", "=", "2", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "", "rot_or_not", "=", "tf", ".", "not_equal", "(", "rot180_k", ",", "0", ")", "\n", "\n", "def", "_maybe_rot180", "(", "data", ")", ":", "\n", "    ", "\"\"\"Rotate or not according to rot_or_not.\"\"\"", "\n", "data", "=", "tf", ".", "cond", "(", "tf", ".", "logical_and", "(", "rot_or_not", ",", "tf", ".", "equal", "(", "static_axis", ",", "0", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "transpose", "(", "data", ",", "[", "2", ",", "1", ",", "0", "]", ")", ",", "\n", "lambda", ":", "data", ")", "\n", "data", "=", "tf", ".", "cond", "(", "tf", ".", "logical_and", "(", "rot_or_not", ",", "tf", ".", "equal", "(", "static_axis", ",", "1", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "transpose", "(", "data", ",", "[", "0", ",", "2", ",", "1", "]", ")", ",", "\n", "lambda", ":", "data", ")", "\n", "\n", "data", "=", "tf", ".", "cond", "(", "rot_or_not", ",", "\n", "lambda", ":", "tf", ".", "image", ".", "rot90", "(", "data", ",", "k", "=", "rot180_k", ")", ",", "\n", "lambda", ":", "data", ")", "\n", "\n", "data", "=", "tf", ".", "cond", "(", "tf", ".", "logical_and", "(", "rot_or_not", ",", "tf", ".", "equal", "(", "static_axis", ",", "0", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "transpose", "(", "data", ",", "[", "2", ",", "1", ",", "0", "]", ")", ",", "\n", "lambda", ":", "data", ")", "\n", "data", "=", "tf", ".", "cond", "(", "tf", ".", "logical_and", "(", "rot_or_not", ",", "tf", ".", "equal", "(", "static_axis", ",", "1", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "transpose", "(", "data", ",", "[", "0", ",", "2", ",", "1", "]", ")", ",", "\n", "lambda", ":", "data", ")", "\n", "return", "data", "\n", "\n", "", "return", "_maybe_rot180", "(", "image", ")", ",", "_maybe_rot180", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.intensity_shift": [[282, 303], ["data_aug_lib._truncated_normal", "data_aug_lib._truncated_normal", "tensorflow.cast", "tensorflow.cast", "tensorflow.greater", "tensorflow.less"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._truncated_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._truncated_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less"], ["", "def", "intensity_shift", "(", "\n", "image", ",", "label", ",", "per_class_intensity_scale", ",", "per_class_intensity_shift", ")", ":", "\n", "  ", "\"\"\"Perturb intensity in lesion and non-lesion regions.\"\"\"", "\n", "\n", "if", "per_class_intensity_scale", "<", "0.000001", "and", "(", "\n", "per_class_intensity_shift", "<", "0.000001", ")", ":", "\n", "    ", "return", "image", "\n", "\n", "# Randomly change (mostly increase) intensity of non-lesion region.", "\n", "", "per_class_noise", "=", "_truncated_normal", "(", "\n", "per_class_intensity_shift", ",", "per_class_intensity_scale", ")", "\n", "image", "=", "image", "+", "per_class_noise", "*", "(", "\n", "image", "*", "tf", ".", "cast", "(", "tf", ".", "greater", "(", "label", ",", "1.5", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "# Randomly change (mostly decrease) intensity of lesion region.", "\n", "per_class_noise", "=", "_truncated_normal", "(", "\n", "-", "per_class_intensity_shift", ",", "per_class_intensity_scale", ")", "\n", "image", "=", "image", "+", "per_class_noise", "*", "(", "\n", "image", "*", "tf", ".", "cast", "(", "tf", ".", "less", "(", "label", ",", "1.5", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.image_corruption": [[305, 323], ["data_aug_lib._gen_rand_mask", "tensorflow.logical_or", "tensorflow.cast", "tensorflow.greater"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib._gen_rand_mask", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_or", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater"], ["", "def", "image_corruption", "(", "\n", "image", ",", "label", ",", "reso", ",", "image_corrupt_ratio_mean", ",", "image_corrupt_ratio_stddev", ")", ":", "\n", "  ", "\"\"\"Randomly drop non-lesion pixels.\"\"\"", "\n", "\n", "if", "image_corrupt_ratio_mean", "<", "0.000001", "and", "(", "\n", "image_corrupt_ratio_stddev", "<", "0.000001", ")", ":", "\n", "    ", "return", "image", "\n", "\n", "# Corrupt non-lesion region according to keep_mask.", "\n", "", "keep_mask", "=", "_gen_rand_mask", "(", "\n", "1", "-", "image_corrupt_ratio_mean", ",", "\n", "image_corrupt_ratio_stddev", ",", "\n", "reso", "//", "3", ",", "image", ".", "shape", ")", "\n", "\n", "keep_mask", "=", "tf", ".", "logical_or", "(", "tf", ".", "greater", "(", "label", ",", "1.5", ")", ",", "keep_mask", ")", "\n", "image", "*=", "tf", ".", "cast", "(", "keep_mask", ",", "tf", ".", "float32", ")", "\n", "\n", "return", "image", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.offline_data_aug._dataset_creator": [[55, 87], ["tensorflow.data.Dataset.list_files().repeat", "dataset.shuffle().map.apply", "dataset.shuffle().map.shuffle().map", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.parse_single_example", "tensorflow.decode_raw", "tensorflow.decode_raw", "tensorflow.clip_by_value", "tensorflow.reshape", "tensorflow.reshape", "mesh_tensorflow.experimental.data_aug_lib.maybe_gen_fake_data_based_on_real_data", "functools.partial", "tensorflow.data.Dataset.list_files", "dataset.shuffle().map.shuffle"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.maybe_gen_fake_data_based_on_real_data"], ["def", "_dataset_creator", "(", ")", ":", "\n", "  ", "\"\"\"Returns an unbatched dataset.\"\"\"", "\n", "def", "_parser_fn", "(", "serialized_example", ")", ":", "\n", "    ", "\"\"\"Parses a single tf.Example into image and label tensors.\"\"\"", "\n", "features", "=", "{", "}", "\n", "features", "[", "'image/ct_image'", "]", "=", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "\n", "features", "[", "'image/label'", "]", "=", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "\n", "parsed", "=", "tf", ".", "parse_single_example", "(", "serialized_example", ",", "features", "=", "features", ")", "\n", "\n", "image", "=", "tf", ".", "decode_raw", "(", "parsed", "[", "'image/ct_image'", "]", ",", "tf", ".", "float32", ")", "\n", "label", "=", "tf", ".", "decode_raw", "(", "parsed", "[", "'image/label'", "]", ",", "tf", ".", "float32", ")", "\n", "\n", "# Preprocess color, clip to 0 ~ 1.", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "image", "/", "1024.0", "+", "0.5", ",", "0", ",", "1", ")", "\n", "\n", "spatial_dims", "=", "[", "FLAGS", ".", "ct_resolution", "]", "*", "3", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "spatial_dims", ")", "\n", "label", "=", "tf", ".", "reshape", "(", "label", ",", "spatial_dims", ")", "\n", "\n", "image", ",", "label", "=", "data_aug_lib", ".", "maybe_gen_fake_data_based_on_real_data", "(", "\n", "image", ",", "label", ",", "FLAGS", ".", "ct_resolution", ",", "\n", "FLAGS", ".", "min_fake_lesion_ratio", ",", "FLAGS", ".", "gen_fake_probability", ")", "\n", "\n", "return", "image", ",", "label", "\n", "\n", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "list_files", "(", "\n", "FLAGS", ".", "input_file_pattern", ",", "shuffle", "=", "True", ")", ".", "repeat", "(", ")", "\n", "dataset", "=", "dataset", ".", "apply", "(", "functools", ".", "partial", "(", "\n", "tf", ".", "data", ".", "TFRecordDataset", ",", "compression_type", "=", "'GZIP'", ")", ")", "\n", "dataset", "=", "dataset", ".", "shuffle", "(", "2", ")", ".", "map", "(", "_parser_fn", ",", "num_parallel_calls", "=", "2", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.offline_data_aug.save_to_tfrecord": [[89, 108], ["tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.Example", "tf.train.Example.SerializeToString", "os.path.join", "tensorflow.python_io.TFRecordOptions", "tensorflow.python_io.TFRecordWriter", "w.write", "tensorflow.train.BytesList", "tensorflow.train.BytesList", "tensorflow.train.Features", "image.reshape().tobytes", "label.reshape().tobytes", "image.reshape", "label.reshape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "save_to_tfrecord", "(", "image", ",", "label", ",", "process_no", ",", "idx", ",", "\n", "output_path", ",", "output_file_prefix", ")", ":", "\n", "  ", "\"\"\"Save to TFRecord.\"\"\"", "\n", "d_feature", "=", "{", "}", "\n", "d_feature", "[", "'image/ct_image'", "]", "=", "tf", ".", "train", ".", "Feature", "(", "\n", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "image", ".", "reshape", "(", "[", "-", "1", "]", ")", ".", "tobytes", "(", ")", "]", ")", ")", "\n", "d_feature", "[", "'image/label'", "]", "=", "tf", ".", "train", ".", "Feature", "(", "\n", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "label", ".", "reshape", "(", "[", "-", "1", "]", ")", ".", "tobytes", "(", ")", "]", ")", ")", "\n", "\n", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "d_feature", ")", ")", "\n", "serialized", "=", "example", ".", "SerializeToString", "(", ")", "\n", "\n", "result_file", "=", "os", ".", "path", ".", "join", "(", "\n", "output_path", ",", "\n", "'{}-{}-{}.tfrecords'", ".", "format", "(", "output_file_prefix", ",", "process_no", ",", "idx", ")", ")", "\n", "options", "=", "tf", ".", "python_io", ".", "TFRecordOptions", "(", "\n", "tf", ".", "python_io", ".", "TFRecordCompressionType", ".", "GZIP", ")", "\n", "with", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "result_file", ",", "options", "=", "options", ")", "as", "w", ":", "\n", "    ", "w", ".", "write", "(", "serialized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.offline_data_aug.apply_data_aug": [[110, 127], ["offline_data_aug._dataset_creator", "_dataset_creator.make_initializable_iterator", "dataset.make_initializable_iterator.get_next", "tensorflow.gfile.IsDirectory", "tensorflow.gfile.MakeDirs", "tensorflow.Session", "sess.run", "six.moves.range", "sess.run", "offline_data_aug.save_to_tfrecord"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.offline_data_aug._dataset_creator", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.offline_data_aug.save_to_tfrecord"], ["", "", "def", "apply_data_aug", "(", ")", ":", "\n", "  ", "\"\"\"Apply data augmentation and save augmented results.\"\"\"", "\n", "if", "not", "tf", ".", "gfile", ".", "IsDirectory", "(", "FLAGS", ".", "output_folder", ")", ":", "\n", "    ", "tf", ".", "gfile", ".", "MakeDirs", "(", "FLAGS", ".", "output_folder", ")", "\n", "\n", "", "dataset", "=", "_dataset_creator", "(", ")", "\n", "ds_iterator", "=", "dataset", ".", "make_initializable_iterator", "(", ")", "\n", "image", ",", "label", "=", "ds_iterator", ".", "get_next", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "sess", ".", "run", "(", "ds_iterator", ".", "initializer", ")", "\n", "for", "idx", "in", "range", "(", "FLAGS", ".", "num_data_aug", ")", ":", "\n", "      ", "image_np", ",", "label_np", "=", "sess", ".", "run", "(", "[", "image", ",", "label", "]", ")", "\n", "save_to_tfrecord", "(", "\n", "image_np", ",", "label_np", ",", "FLAGS", ".", "process_no", ",", "idx", ",", "\n", "FLAGS", ".", "output_folder", ",", "FLAGS", ".", "output_file_prefix", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.offline_data_aug.main": [[129, 132], ["offline_data_aug.apply_data_aug"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.offline_data_aug.apply_data_aug"], ["", "def", "main", "(", "argv", ")", ":", "\n", "  ", "del", "argv", "\n", "apply_data_aug", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader_test.MtfInputReaderTest.initialize_system": [[36, 44], ["tensorflow.core.protobuf.tpu.topology_pb2.TopologyProto", "sess.run", "tensorflow.core.protobuf.tpu.topology_pb2.TopologyProto.ParseFromString", "tensorflow.tpu.initialize_system"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader_test.MtfInputReaderTest.initialize_system"], ["  ", "def", "initialize_system", "(", "self", ",", "sess", ")", ":", "\n", "    ", "\"\"\"Run tpu.initialize_system and return the number of TPU devices.\"\"\"", "\n", "topology_object", "=", "topology_pb2", ".", "TopologyProto", "(", ")", "\n", "topology", "=", "sess", ".", "run", "(", "tf", ".", "tpu", ".", "initialize_system", "(", ")", ")", "\n", "topology_object", ".", "ParseFromString", "(", "topology", ")", "\n", "num_cores", "=", "topology_object", ".", "num_tasks", "*", "(", "\n", "topology_object", ".", "num_tpu_devices_per_task", ")", "\n", "return", "topology", ",", "num_cores", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader_test.MtfInputReaderTest.test_get_laidout_tensors": [[45, 124], ["absl.testing.parameterized.parameters", "tensorflow.Session", "input_reader_test.MtfInputReaderTest.initialize_system", "tensorflow.python.tpu.device_assignment.device_assignment", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_layout_rules", "mesh_tensorflow.convert_to_layout_rules", "mesh_tensorflow.simd_mesh_impl.SimdMeshImpl", "mesh_tensorflow.simd_mesh_impl.SimdMeshImpl", "mesh_tensorflow.SimdMeshImplInputReader", "mesh_tensorflow.SimdMeshImplInputReader", "tensorflow.python.tpu.tpu.replicate", "mesh_tensorflow.SimdMeshImplInputReader.start_infeed_thread", "sess.run", "print", "print", "print", "sess.run", "tensorflow.eye", "tensorflow.slice", "tensorflow.data.Dataset.from_tensors().repeat().unbatch", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "input_reader_test.MtfInputReaderTest.assertAllClose", "input_reader_test.MtfInputReaderTest.assertAllClose", "input_reader_test.MtfInputReaderTest.assertAllClose", "input_reader_test.MtfInputReaderTest.assertAllClose", "tensorflow.tpu.shutdown_system", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "mesh_tensorflow.utils.topology_rank", "mesh_tensorflow.utils.topology_rank", "tensorflow.data.Dataset.from_tensors().repeat", "tensorflow.data.Dataset.from_tensors"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader_test.MtfInputReaderTest.initialize_system", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.device_assignment", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader.start_infeed_thread", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.topology_rank", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.topology_rank"], ["", "@", "parameterized", ".", "parameters", "(", "(", "True", ",", ")", ",", "(", "False", ",", ")", ")", "\n", "def", "test_get_laidout_tensors", "(", "self", ",", "is_eval_mode", ")", ":", "\n", "    ", "mesh_shape", "=", "\"mesh_x:2, mesh_y:1\"", "\n", "layout", "=", "\"batch:mesh_x, io:mesh_y\"", "\n", "batch_io_dim", "=", "4", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "topology", ",", "num_cores", "=", "self", ".", "initialize_system", "(", "sess", ")", "\n", "\n", "# Get a device_assignment object for mtf.", "\n", "d_assignment", "=", "device_assignment", ".", "device_assignment", "(", "\n", "topology", ",", "\n", "computation_shape", "=", "[", "1", ",", "]", "*", "mtf", ".", "utils", ".", "topology_rank", "(", "topology", ")", ",", "\n", "num_replicas", "=", "num_cores", ")", "\n", "\n", "# Hacked dataset creator: creates different datasets for the first and", "\n", "# second call, in order to test SimdMeshImplInputReader.", "\n", "self", ".", "sub_batch_created_times", "=", "0", "\n", "def", "stateful_ds_creator", "(", ")", ":", "\n", "        ", "whole_batch", "=", "tf", ".", "eye", "(", "batch_io_dim", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "sub_batch", "=", "tf", ".", "slice", "(", "whole_batch", ",", "\n", "[", "self", ".", "sub_batch_created_times", "*", "2", ",", "0", "]", ",", "\n", "[", "2", ",", "4", "]", ")", "\n", "self", ".", "sub_batch_created_times", "+=", "1", "\n", "return", "tf", ".", "data", ".", "Dataset", ".", "from_tensors", "(", "sub_batch", ")", ".", "repeat", "(", ")", ".", "unbatch", "(", ")", "\n", "\n", "", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch_io_dim", ")", "\n", "io_dim", "=", "mtf", ".", "Dimension", "(", "\"io\"", ",", "batch_io_dim", ")", "\n", "mtf_input_shapes", "=", "[", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "io_dim", "]", ")", "]", "\n", "\n", "# Get mesh_impl.", "\n", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "mesh_shape", ")", "\n", "layout_rules", "=", "mtf", ".", "convert_to_layout_rules", "(", "layout", ")", "\n", "mesh_impl", "=", "mtf", ".", "simd_mesh_impl", ".", "SimdMeshImpl", "(", "\n", "mesh_shape", ",", "layout_rules", ",", "None", ",", "d_assignment", ")", "\n", "\n", "simd_input_reader", "=", "input_reader", ".", "SimdMeshImplInputReader", "(", "\n", "mesh_impl", ",", "stateful_ds_creator", ",", "mtf_input_shapes", ",", "\n", "external_worker", "=", "False", ",", "\n", "is_eval_mode", "=", "is_eval_mode", ")", "\n", "\n", "def", "model_fn", "(", "features", ")", ":", "\n", "        ", "return", "features", "\n", "\n", "", "replicated_computation", "=", "tpu", ".", "replicate", "(", "\n", "computation", "=", "model_fn", ",", "\n", "inputs", "=", "[", "[", "]", "]", "*", "num_cores", ",", "\n", "infeed_queue", "=", "simd_input_reader", ".", "infeed_queue", ",", "\n", "device_assignment", "=", "d_assignment", ")", "\n", "\n", "simd_input_reader", ".", "start_infeed_thread", "(", "sess", ",", "1", ")", "\n", "results", "=", "sess", ".", "run", "(", "replicated_computation", ")", "\n", "print", "(", "\"results: {}\"", ".", "format", "(", "results", ")", ")", "\n", "\n", "core_0_data", "=", "results", "[", "0", "]", "[", "0", "]", "\n", "core_1_data", "=", "results", "[", "1", "]", "[", "0", "]", "\n", "print", "(", "\"core_0_data: {}\"", ".", "format", "(", "core_0_data", ")", ")", "\n", "print", "(", "\"core_1_data: {}\"", ".", "format", "(", "core_1_data", ")", ")", "\n", "\n", "if", "is_eval_mode", ":", "\n", "# If there is only one dataset object, then the stateful_ds_creator()", "\n", "# should be called only once.", "\n", "        ", "self", ".", "assertAllClose", "(", "\n", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "core_0_data", ")", "\n", "self", ".", "assertAllClose", "(", "\n", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "core_1_data", ")", "\n", "", "else", ":", "\n", "# If there are two dataset objects, then the stateful_ds_creator()", "\n", "# should be called twice.", "\n", "        ", "self", ".", "assertAllClose", "(", "\n", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "core_0_data", ")", "\n", "self", ".", "assertAllClose", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "core_1_data", ")", "\n", "\n", "", "sess", ".", "run", "(", "tf", ".", "tpu", ".", "shutdown_system", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib_test.MtfUnetDataAugTest.constant_3d_image": [[28, 31], ["tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["  ", "def", "constant_3d_image", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "constant", "(", "\n", "[", "[", "[", "-", "100", ",", "2", "]", ",", "[", "2", ",", "3", "]", "]", ",", "[", "[", "4", ",", "35", "]", ",", "[", "-", "1024", ",", "7", "]", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib_test.MtfUnetDataAugTest.constant_3d_label": [[32, 35], ["tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["", "def", "constant_3d_label", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "constant", "(", "\n", "[", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", "]", ",", "[", "[", "1", ",", "1", "]", ",", "[", "2", ",", "2", "]", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib_test.MtfUnetDataAugTest.test_flip": [[36, 59], ["tensorflow.Session", "data_aug_lib_test.MtfUnetDataAugTest.constant_3d_image", "sess.run", "mesh_tensorflow.maybe_flip", "sess.run", "data_aug_lib_test.MtfUnetDataAugTest.assertAllClose", "mesh_tensorflow.maybe_flip", "sess.run", "data_aug_lib_test.MtfUnetDataAugTest.assertAllClose", "tensorflow.zeros_like", "tensorflow.zeros_like"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib_test.MtfUnetDataAugTest.constant_3d_image", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.maybe_flip", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.maybe_flip", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like"], ["", "def", "test_flip", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "image_3d", "=", "self", ".", "constant_3d_image", "(", ")", "\n", "image_3d_np", "=", "sess", ".", "run", "(", "image_3d", ")", "\n", "\n", "for", "flip_axis", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "        ", "image_3d_flip", ",", "_", "=", "data_aug_lib", ".", "maybe_flip", "(", "\n", "image_3d", ",", "tf", ".", "zeros_like", "(", "image_3d", ")", ",", "flip_axis", ",", "0.0", ")", "\n", "image_3d_flip_np", "=", "sess", ".", "run", "(", "image_3d_flip", ")", "\n", "self", ".", "assertAllClose", "(", "image_3d_flip_np", ",", "image_3d_np", ")", "\n", "\n", "", "image_3d_flip", "=", "image_3d", "\n", "for", "flip_axis", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "        ", "if", "flip_axis", "==", "0", ":", "\n", "          ", "image_3d_np", "=", "image_3d_np", "[", ":", ":", "-", "1", ",", "...", "]", "\n", "", "elif", "flip_axis", "==", "1", ":", "\n", "          ", "image_3d_np", "=", "image_3d_np", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "else", ":", "\n", "          ", "image_3d_np", "=", "image_3d_np", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "", "image_3d_flip", ",", "_", "=", "data_aug_lib", ".", "maybe_flip", "(", "\n", "image_3d_flip", ",", "tf", ".", "zeros_like", "(", "image_3d_flip", ")", ",", "flip_axis", ",", "1.0", ")", "\n", "image_3d_flip_np", "=", "sess", ".", "run", "(", "image_3d_flip", ")", "\n", "self", ".", "assertAllClose", "(", "image_3d_flip_np", ",", "image_3d_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib_test.MtfUnetDataAugTest.test_rot180": [[60, 72], ["tensorflow.Session", "data_aug_lib_test.MtfUnetDataAugTest.constant_3d_image", "sess.run", "mesh_tensorflow.maybe_rot180", "mesh_tensorflow.maybe_rot180", "sess.run", "data_aug_lib_test.MtfUnetDataAugTest.assertAllClose", "tensorflow.zeros_like", "tensorflow.zeros_like"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib_test.MtfUnetDataAugTest.constant_3d_image", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.maybe_rot180", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.maybe_rot180", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like"], ["", "", "", "def", "test_rot180", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "image_3d", "=", "self", ".", "constant_3d_image", "(", ")", "\n", "image_3d_np", "=", "sess", ".", "run", "(", "image_3d", ")", "\n", "\n", "for", "constant_axis", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "        ", "image_3d_rot360", ",", "_", "=", "data_aug_lib", ".", "maybe_rot180", "(", "\n", "image_3d", ",", "tf", ".", "zeros_like", "(", "image_3d", ")", ",", "constant_axis", ",", "2", ")", "\n", "image_3d_rot360", ",", "_", "=", "data_aug_lib", ".", "maybe_rot180", "(", "\n", "image_3d_rot360", ",", "tf", ".", "zeros_like", "(", "image_3d_rot360", ")", ",", "constant_axis", ",", "2", ")", "\n", "image_3d_rot360_np", "=", "sess", ".", "run", "(", "image_3d_rot360", ")", "\n", "self", ".", "assertAllClose", "(", "image_3d_rot360_np", ",", "image_3d_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib_test.MtfUnetDataAugTest.test_gen_fake_data": [[73, 89], ["tensorflow.Session", "data_aug_lib_test.MtfUnetDataAugTest.constant_3d_image", "data_aug_lib_test.MtfUnetDataAugTest.constant_3d_label", "sess.run", "sess.run", "mesh_tensorflow.maybe_gen_fake_data_based_on_real_data", "sess.run", "sess.run", "data_aug_lib_test.MtfUnetDataAugTest.assertAllClose", "data_aug_lib_test.MtfUnetDataAugTest.assertAllClose"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib_test.MtfUnetDataAugTest.constant_3d_image", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib_test.MtfUnetDataAugTest.constant_3d_label", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.data_aug_lib.maybe_gen_fake_data_based_on_real_data", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run"], ["", "", "", "def", "test_gen_fake_data", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "image_3d", "=", "self", ".", "constant_3d_image", "(", ")", "\n", "label_3d", "=", "self", ".", "constant_3d_label", "(", ")", "\n", "image_3d_np", "=", "sess", ".", "run", "(", "image_3d", ")", "\n", "label_3d_np", "=", "sess", ".", "run", "(", "label_3d", ")", "\n", "\n", "image_3d_aug", ",", "label_3d_aug", "=", "data_aug_lib", ".", "maybe_gen_fake_data_based_on_real_data", "(", "\n", "image_3d", ",", "label_3d", ",", "reso", "=", "32", ",", "\n", "min_fake_lesion_ratio", "=", "0.0", ",", "gen_fake_probability", "=", "0.0", ")", "\n", "\n", "image_3d_aug_np", "=", "sess", ".", "run", "(", "image_3d_aug", ")", "\n", "label_3d_aug_np", "=", "sess", ".", "run", "(", "label_3d_aug", ")", "\n", "self", ".", "assertAllClose", "(", "image_3d_aug_np", ",", "image_3d_np", ")", "\n", "self", ".", "assertAllClose", "(", "label_3d_aug_np", ",", "label_3d_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.__init__": [[83, 86], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "_object", "=", "None", "\n", "self", ".", "_captured", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.capture": [[87, 94], ["RuntimeError"], "methods", ["None"], ["", "def", "capture", "(", "self", ",", "o", ")", ":", "\n", "    ", "if", "self", ".", "_captured", ":", "\n", "      ", "raise", "RuntimeError", "(", "\n", "'InternalError: Object can capture only once. Please file bug.'", ")", "\n", "\n", "", "self", ".", "_captured", "=", "True", "\n", "self", ".", "_object", "=", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get": [[95, 101], ["RuntimeError"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "_captured", ":", "\n", "      ", "raise", "RuntimeError", "(", "\n", "'InternalError: Object is not captured properly before `get`. '", "\n", "'Please file bug.'", ")", "\n", "", "return", "self", ".", "_object", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CkptLoaderHook.after_create_session": [[106, 114], ["tensorflow.get_collection", "tensorflow.train.latest_checkpoint", "saver.restore"], "methods", ["None"], ["def", "after_create_session", "(", "self", ",", "session", ",", "coord", ")", ":", "\n", "# pylint: disable=protected-access", "\n", "    ", "saver_collection", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SAVERS", ")", "\n", "if", "saver_collection", ":", "\n", "      ", "saver", "=", "saver_collection", "[", "0", "]", "\n", "check_point", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "FLAGS", ".", "checkpoint_dir", ")", "\n", "if", "check_point", ":", "\n", "        ", "saver", ".", "restore", "(", "session", ",", "check_point", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.__init__": [[119, 150], ["object.__init__", "mesh_tensorflow.convert_to_shape", "model_executor.MeshContext._list_cpu_gpu_devices", "sess.run", "tensorflow.contrib.tpu.Topology", "int", "int", "int", "tensorflow.contrib.tpu.python.tpu.device_assignment.device_assignment", "mesh_tensorflow.simd_mesh_impl.SimdMeshImpl", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "tensorflow.contrib.tpu.initialize_system", "numpy.prod", "int", "mesh_tensorflow.utils.topology_rank"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext._list_cpu_gpu_devices", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.device_assignment", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader_test.MtfInputReaderTest.initialize_system", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.topology_rank"], ["def", "__init__", "(", "self", ",", "sess", ",", "use_tpu", ",", "mesh_shape", ",", "layout_rules", ")", ":", "\n", "    ", "super", "(", "MeshContext", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_use_tpu", "=", "use_tpu", "\n", "self", ".", "_mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "mesh_shape", ")", "\n", "self", ".", "_layout_rules", "=", "layout_rules", "\n", "\n", "self", ".", "_d_assignment", "=", "None", "\n", "self", ".", "_num_hosts", "=", "None", "\n", "self", ".", "_num_cores", "=", "None", "\n", "\n", "self", ".", "_cpu_devices", ",", "self", ".", "_gpu_devices", "=", "self", ".", "_list_cpu_gpu_devices", "(", "sess", ")", "\n", "\n", "if", "self", ".", "_use_tpu", ":", "\n", "      ", "topology", "=", "sess", ".", "run", "(", "tpu", ".", "initialize_system", "(", ")", ")", "\n", "topo_object", "=", "tpu", ".", "Topology", "(", "serialized", "=", "topology", ")", "\n", "self", ".", "_num_cores", "=", "int", "(", "np", ".", "prod", "(", "topo_object", ".", "mesh_shape", ")", ")", "\n", "self", ".", "_num_hosts", "=", "int", "(", "topo_object", ".", "num_tasks", ")", "\n", "num_cores_per_host", "=", "int", "(", "self", ".", "_num_cores", "//", "self", ".", "_num_hosts", ")", "\n", "assert", "num_cores_per_host", "==", "int", "(", "topo_object", ".", "num_tpus_per_task", ")", "\n", "\n", "# Get a device_assignment object for mtf.", "\n", "self", ".", "_d_assignment", "=", "device_assignment", ".", "device_assignment", "(", "\n", "topology", ",", "\n", "computation_shape", "=", "[", "1", ",", "]", "*", "mtf", ".", "utils", ".", "topology_rank", "(", "topology", ")", ",", "\n", "num_replicas", "=", "self", ".", "_num_cores", ")", "\n", "\n", "self", ".", "_mesh_impl", "=", "mtf", ".", "simd_mesh_impl", ".", "SimdMeshImpl", "(", "\n", "self", ".", "_mesh_shape", ",", "self", ".", "_layout_rules", ",", "None", ",", "self", ".", "_d_assignment", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "_mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "self", ".", "_mesh_shape", ",", "self", ".", "_layout_rules", ",", "self", ".", "_gpu_devices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.create_graph_mesh_and_mesh_impl": [[151, 181], ["mesh_tensorflow.Graph", "mesh_tensorflow.utils.BalancedVariablePlacer", "mesh_tensorflow.Mesh", "mesh_tensorflow.simd_mesh_impl.SimdMeshImpl", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl"], "methods", ["None"], ["", "", "def", "create_graph_mesh_and_mesh_impl", "(", "self", ")", ":", "\n", "    ", "\"\"\"Creates mtf graph, mesh, and mesh impl.\n\n    This function can be called inside model_fn, which might be tpu_rewritten.\n\n    Returns:\n      graph, mesh, mesh_impl\n    \"\"\"", "\n", "\n", "if", "self", ".", "_use_tpu", ":", "\n", "      ", "assert", "self", ".", "_d_assignment", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "\n", "# Worker 0 caches all the TPU binaries.", "\n", "replica_cache_size", "=", "300", "*", "1024", "*", "1024", "# 300M per replica.", "\n", "worker0_mem", "=", "replica_cache_size", "*", "8", "*", "self", ".", "_num_hosts", "\n", "devices_memory_usage", "=", "[", "worker0_mem", "]", "+", "[", "0", "]", "*", "(", "self", ".", "_num_hosts", "-", "1", ")", "\n", "var_placer", "=", "mtf", ".", "utils", ".", "BalancedVariablePlacer", "(", "self", ".", "_cpu_devices", ",", "\n", "devices_memory_usage", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "'my_mesh'", ",", "var_placer", ")", "\n", "mesh_impl", "=", "mtf", ".", "simd_mesh_impl", ".", "SimdMeshImpl", "(", "\n", "self", ".", "_mesh_shape", ",", "self", ".", "_layout_rules", ",", "None", ",", "self", ".", "_d_assignment", ")", "\n", "return", "graph", ",", "mesh", ",", "mesh_impl", "\n", "\n", "", "else", ":", "\n", "      ", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "'my_mesh'", ",", "None", ")", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "self", ".", "_mesh_shape", ",", "self", ".", "_layout_rules", ",", "self", ".", "_gpu_devices", ")", "\n", "return", "graph", ",", "mesh", ",", "mesh_impl", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.device_assignment": [[182, 185], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "device_assignment", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_d_assignment", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.num_hosts": [[186, 189], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hosts", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_num_hosts", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.num_cores": [[190, 193], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_cores", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_num_cores", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.num_cores_per_host": [[194, 197], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_cores_per_host", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_num_cores", "//", "self", ".", "_num_hosts", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.mesh_impl": [[198, 201], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mesh_impl", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_mesh_impl", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext._list_cpu_gpu_devices": [[202, 231], ["sess.list_devices", "model_executor.MeshContext._list_cpu_gpu_devices._sort_device_name"], "methods", ["None"], ["", "def", "_list_cpu_gpu_devices", "(", "self", ",", "sess", ")", ":", "\n", "    ", "\"\"\"Return the list of CPU and GPU (if any) devices in legacy name.\"\"\"", "\n", "def", "_convert_to_legacy_name", "(", "n", ")", ":", "\n", "      ", "n", "=", "re", ".", "sub", "(", "'device:CPU'", ",", "'cpu'", ",", "n", ")", "\n", "n", "=", "re", ".", "sub", "(", "'device:GPU'", ",", "'gpu'", ",", "n", ")", "\n", "return", "n", "\n", "\n", "", "def", "_sort_device_name", "(", "devices", ")", ":", "\n", "      ", "parsed", "=", "[", "]", "\n", "for", "d", "in", "devices", ":", "\n", "        ", "m", "=", "re", ".", "match", "(", "'/job:(.*)/replica:(.*)/task:(.*)/.*'", ",", "d", ")", "\n", "parsed", ".", "append", "(", "(", "m", ".", "group", "(", "1", ")", ",", "int", "(", "m", ".", "group", "(", "2", ")", ")", ",", "int", "(", "m", ".", "group", "(", "3", ")", ")", ",", "d", ")", ")", "\n", "", "return", "[", "_", "[", "3", "]", "for", "_", "in", "sorted", "(", "parsed", ")", "]", "\n", "\n", "", "all_devices", "=", "sess", ".", "list_devices", "(", ")", "\n", "\n", "cpus", "=", "[", "]", "\n", "for", "d", "in", "all_devices", ":", "\n", "      ", "if", "d", ".", "device_type", "==", "'CPU'", ":", "\n", "        ", "cpus", "+=", "[", "_convert_to_legacy_name", "(", "d", ".", "name", ")", "]", "\n", "", "", "cpus", "=", "[", "n", "for", "n", "in", "_sort_device_name", "(", "cpus", ")", "if", "'coordinator'", "not", "in", "n", "]", "\n", "\n", "gpus", "=", "[", "]", "\n", "for", "d", "in", "all_devices", ":", "\n", "      ", "if", "d", ".", "device_type", "==", "'GPU'", ":", "\n", "        ", "gpus", "+=", "[", "_convert_to_legacy_name", "(", "d", ".", "name", ")", "]", "\n", "", "", "gpus", "=", "_sort_device_name", "(", "gpus", ")", "\n", "\n", "return", "cpus", ",", "gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._get_model_fn": [[233, 358], ["model_executor._CapturedObject", "model_executor._CapturedObject", "tensorflow.train.get_or_create_global_step", "mesh_context.create_graph_mesh_and_mesh_impl", "tensorflow.cast", "mesh_tensorflow.MtfRestoreHook", "isinstance", "isinstance", "scalars.keys", "mesh_tensorflow.utils.outside_all_rewrites", "mesh_tensorflow.experimental.unet.unet_with_spatial_partition", "mesh_tensorflow.gradients", "mesh_tensorflow.optimize.AdafactorOptimizer", "mtf.optimize.AdafactorOptimizer.apply_grads", "mesh_tensorflow.Lowering", "tf_update_ops.append", "tf_update_ops.extend", "mesh_tensorflow.Lowering", "mtf.Lowering.export_to_tf_tensor", "_add_summary"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.MeshContext.create_graph_mesh_and_mesh_impl", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.outside_all_rewrites", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.unet_with_spatial_partition", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.Optimizer.apply_grads", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], ["", "", "def", "_get_model_fn", "(", "train_or_eval", ",", "mesh_context", ")", ":", "\n", "  ", "\"\"\"Returns _model_fn.\"\"\"", "\n", "captured_hooks", "=", "_CapturedObject", "(", ")", "\n", "captured_output_dtypes_shapes", "=", "_CapturedObject", "(", ")", "\n", "assert", "train_or_eval", "in", "[", "'train'", ",", "'eval'", "]", "\n", "\n", "def", "_model_fn", "(", "input_fea", ",", "input_lab", ")", ":", "\n", "    ", "\"\"\"Creates a model, add summary, modes (train or eval), and hooks.\"\"\"", "\n", "\n", "# input_fea and input_lab should be a list (laid_out_tensors).", "\n", "if", "not", "isinstance", "(", "input_fea", ",", "list", ")", ":", "\n", "      ", "input_fea", "=", "[", "input_fea", "]", "\n", "", "if", "not", "isinstance", "(", "input_lab", ",", "list", ")", ":", "\n", "      ", "input_lab", "=", "[", "input_lab", "]", "\n", "\n", "", "def", "_add_summary", "(", "lowering", ",", "train_or_eval", ",", "tf_loss", ",", "scalars", ",", "global_step", ")", ":", "\n", "      ", "\"\"\"Add all summaries.\"\"\"", "\n", "for", "k", "in", "scalars", ".", "keys", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "scalars", "[", "k", "]", ",", "tf", ".", "Tensor", ")", ":", "\n", "          ", "scalars", "[", "k", "]", "=", "tf", ".", "cast", "(", "\n", "lowering", ".", "export_to_tf_tensor", "(", "scalars", "[", "k", "]", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "", "", "def", "_host_loss_summary", "(", "global_step", ",", "tf_loss", ",", "**", "scalars", ")", ":", "\n", "        ", "\"\"\"Add summary.scalar in host side.\"\"\"", "\n", "gs", "=", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "int64", ")", "\n", "sum_loss", "=", "contrib_summary", ".", "scalar", "(", "\n", "'{}_loss'", ".", "format", "(", "train_or_eval", ")", ",", "tf_loss", ",", "step", "=", "gs", ")", "\n", "sum_ops", "=", "[", "sum_loss", ".", "op", "]", "\n", "for", "description", ",", "tf_metric", "in", "six", ".", "iteritems", "(", "scalars", ")", ":", "\n", "          ", "sum_metric", "=", "contrib_summary", ".", "scalar", "(", "\n", "'{}_{}'", ".", "format", "(", "train_or_eval", ",", "description", ")", ",", "tf_metric", ",", "step", "=", "gs", ")", "\n", "sum_ops", ".", "append", "(", "sum_metric", ")", "\n", "", "with", "tf", ".", "control_dependencies", "(", "sum_ops", ")", ":", "\n", "          ", "return", "tf", ".", "identity", "(", "tf_loss", ")", "\n", "\n", "", "", "if", "FLAGS", ".", "use_tpu", ":", "\n", "# Cast the global step to tf.int32, since", "\n", "# outside_compilation does not support tf.int64.", "\n", "        ", "tf_loss", "=", "tpu", ".", "outside_compilation", "(", "\n", "_host_loss_summary", ",", "\n", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "int32", ")", ",", "\n", "tf_loss", ",", "\n", "**", "scalars", ")", "\n", "", "else", ":", "\n", "        ", "tf_loss", "=", "_host_loss_summary", "(", "\n", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "int32", ")", ",", "\n", "tf_loss", ",", "\n", "**", "scalars", ")", "\n", "\n", "", "return", "tf_loss", "\n", "\n", "", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "graph", ",", "mesh", ",", "mesh_impl", "=", "mesh_context", ".", "create_graph_mesh_and_mesh_impl", "(", ")", "\n", "\n", "with", "mtf", ".", "utils", ".", "outside_all_rewrites", "(", ")", ":", "\n", "# Do not tpu_rewrite this part. Inside this unet, If you use Tensorflow,", "\n", "# instead of Mesh-Tensorflor, it will cause host to tpu send/rec.", "\n", "      ", "preds", ",", "loss", ",", "scalars", ",", "bn_update_ops", "=", "(", "\n", "unet", ".", "unet_with_spatial_partition", "(", "\n", "mesh", ",", "mesh_impl", ",", "train_or_eval", ",", "input_fea", ",", "input_lab", ")", ")", "\n", "\n", "", "if", "train_or_eval", "==", "'train'", ":", "\n", "      ", "var_grads", "=", "mtf", ".", "gradients", "(", "\n", "[", "loss", "]", ",", "[", "v", ".", "outputs", "[", "0", "]", "for", "v", "in", "graph", ".", "trainable_variables", "]", ")", "\n", "\n", "lr", "=", "FLAGS", ".", "lr", "*", "tf", ".", "pow", "(", "\n", "FLAGS", ".", "lr_drop_rate", ",", "\n", "tf", ".", "floor", "(", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "float32", ")", "/", "FLAGS", ".", "lr_drop_steps", ")", ")", "\n", "scalars", "[", "'learning_rate'", "]", "=", "lr", "\n", "\n", "optimizer", "=", "mtf", ".", "optimize", ".", "AdafactorOptimizer", "(", "learning_rate", "=", "lr", ")", "\n", "update_ops", "=", "optimizer", ".", "apply_grads", "(", "var_grads", ",", "graph", ".", "trainable_variables", ")", "\n", "\n", "# This is where the actual tf graph got built.", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "\n", "tf_update_ops", "=", "[", "lowering", ".", "lowered_operation", "(", "op", ")", "for", "op", "in", "update_ops", "]", "\n", "tf_update_ops", ".", "append", "(", "tf", ".", "assign_add", "(", "global_step", ",", "1", ")", ")", "\n", "tf_update_ops", ".", "extend", "(", "\n", "[", "lowering", ".", "lowered_operation", "(", "op", ")", "for", "op", "in", "bn_update_ops", "]", ")", "\n", "\n", "", "else", ":", "# train_or_eval == 'eval':", "\n", "      ", "preds", "=", "[", "mtf", ".", "anonymize", "(", "pred", ")", "for", "pred", "in", "preds", "]", "\n", "\n", "# This is where the actual tf graph got built.", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "\n", "tf_preds", "=", "[", "tf", ".", "cast", "(", "\n", "lowering", ".", "export_to_tf_tensor", "(", "pred", ")", ",", "tf", ".", "float32", ")", "for", "pred", "in", "preds", "]", "\n", "\n", "", "tf_loss", "=", "tf", ".", "cast", "(", "lowering", ".", "export_to_tf_tensor", "(", "loss", ")", ",", "tf", ".", "float32", ")", "\n", "if", "FLAGS", ".", "write_summary", ":", "\n", "      ", "tf_loss", "=", "_add_summary", "(", "\n", "lowering", ",", "train_or_eval", ",", "tf_loss", ",", "scalars", ",", "global_step", ")", "\n", "", "master_to_slice_hook", "=", "mtf", ".", "MtfRestoreHook", "(", "lowering", ")", "\n", "\n", "if", "train_or_eval", "==", "'train'", ":", "\n", "      ", "with", "mtf", ".", "utils", ".", "outside_all_rewrites", "(", ")", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ",", "\n", "save_relative_paths", "=", "True", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "SAVERS", ",", "saver", ")", "\n", "saver_listener", "=", "mtf", ".", "MtfCheckpointSaverListener", "(", "lowering", ")", "\n", "slice_to_master_hook", "=", "tf", ".", "train", ".", "CheckpointSaverHook", "(", "\n", "FLAGS", ".", "checkpoint_dir", ",", "\n", "save_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "saver", "=", "saver", ",", "listeners", "=", "[", "saver_listener", "]", ")", "\n", "captured_hooks", ".", "capture", "(", "[", "master_to_slice_hook", ",", "slice_to_master_hook", "]", ")", "\n", "return", "tf", ".", "group", "(", "[", "tf_loss", "]", "+", "tf_update_ops", ")", "\n", "\n", "", "", "else", ":", "# train_or_eval == 'eval':", "\n", "      ", "if", "FLAGS", ".", "use_tpu", ":", "\n", "        ", "tf_preds", ".", "extend", "(", "[", "tf_loss", ",", "global_step", "]", ")", "\n", "tf_preds_dtypes", "=", "[", "tf_pred", ".", "dtype", "for", "tf_pred", "in", "tf_preds", "]", "\n", "tf_preds_shapes", "=", "[", "tf_pred", ".", "shape", "for", "tf_pred", "in", "tf_preds", "]", "\n", "captured_hooks", ".", "capture", "(", "[", "master_to_slice_hook", ",", "None", "]", ")", "\n", "captured_output_dtypes_shapes", ".", "capture", "(", "\n", "[", "tf_preds_dtypes", ",", "tf_preds_shapes", "]", ")", "\n", "return", "tpu_ops", ".", "outfeed_enqueue_tuple", "(", "tf_preds", ")", "\n", "\n", "", "else", ":", "\n", "        ", "tf_preds", ".", "extend", "(", "[", "tf_loss", ",", "global_step", "]", ")", "\n", "captured_hooks", ".", "capture", "(", "[", "master_to_slice_hook", ",", "None", "]", ")", "\n", "return", "tf_preds", "\n", "\n", "", "", "", "return", "_model_fn", ",", "captured_hooks", ",", "captured_output_dtypes_shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._get_scaffold": [[360, 369], ["tensorflow.train.Scaffold", "tensorflow.python.ops.control_flow_ops.group", "tensorflow.group", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.train.Scaffold.default_local_init_op"], "function", ["None"], ["", "def", "_get_scaffold", "(", "additional_initializers", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Scaffold", "(", "\n", "init_op", "=", "control_flow_ops", ".", "group", "(", "\n", "tf", ".", "global_variables_initializer", "(", ")", ",", "\n", "*", "additional_initializers", ")", ",", "\n", "local_init_op", "=", "tf", ".", "group", "(", "\n", "tf", ".", "local_variables_initializer", "(", ")", ",", "\n", "tf", ".", "train", ".", "Scaffold", ".", "default_local_init_op", "(", ")", ",", "\n", "*", "additional_initializers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._print_variable_values": [[371, 380], ["numpy.set_printoptions", "tensorflow.logging.info", "tensorflow.logging.info", "sess.run", "six.moves.zip", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.logging.info", "tensorflow.logging.info", "numpy.array().flatten", "numpy.array"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.trainable_variables", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.trainable_variables"], ["", "def", "_print_variable_values", "(", "sess", ")", ":", "\n", "  ", "\"\"\"May give `Protocol buffer too large` error.\"\"\"", "\n", "np", ".", "set_printoptions", "(", "precision", "=", "4", ",", "linewidth", "=", "1000", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Printing variables.'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'==================='", ")", "\n", "values", "=", "sess", ".", "run", "(", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "for", "variable", ",", "value", "in", "zip", "(", "tf", ".", "trainable_variables", "(", ")", ",", "values", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "'{}, {}'", ".", "format", "(", "variable", ".", "name", ",", "value", ".", "shape", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'{}'", ".", "format", "(", "np", ".", "array", "(", "value", ")", ".", "flatten", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._train_phase": [[382, 452], ["mesh_tensorflow.experimental.unet.get_dataset_creator", "mesh_tensorflow.experimental.unet.get_input_mtf_shapes", "model_executor._get_model_fn", "train_hooks.get", "model_executor._CkptLoaderHook", "tensorflow.train.StepCounterHook", "tensorflow.Graph().as_default", "mesh_tensorflow.experimental.input_reader.SimdMeshImplInputReader", "tensorflow.contrib.tpu.replicate", "mesh_tensorflow.experimental.input_reader.PlacementMeshImplInputReader", "input_reader.PlacementMeshImplInputReader.gpu_placement", "tensorflow.contrib.summary.flush", "tensorflow.train.MonitoredTrainingSession", "six.moves.range", "tensorflow.contrib.summary.create_file_writer", "model_executor._train_phase._run_train_phase"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.get_dataset_creator", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.get_input_mtf_shapes", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._get_model_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.PlacementMeshImplInputReader.gpu_placement"], ["", "", "def", "_train_phase", "(", "mesh_context", ",", "config", ",", "master", ")", ":", "\n", "  ", "\"\"\"Handles input pipeline and trains the network.\"\"\"", "\n", "if", "FLAGS", ".", "num_train_iterations_per_loop", "<=", "0", ":", "\n", "    ", "return", "\n", "\n", "", "def", "_run_train_phase", "(", ")", ":", "\n", "    ", "\"\"\"The real function that runs the training phase.\"\"\"", "\n", "# Setup input pipeline.", "\n", "ds_creator", "=", "unet", ".", "get_dataset_creator", "(", "'train'", ")", "\n", "mtf_shapes", "=", "unet", ".", "get_input_mtf_shapes", "(", "'train'", ")", "\n", "\n", "model_train_fn", ",", "train_hooks", ",", "_", "=", "_get_model_fn", "(", "'train'", ",", "mesh_context", ")", "\n", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "      ", "assert", "mesh_context", ".", "device_assignment", "\n", "assert", "mesh_context", ".", "num_cores", "\n", "simd_input_reader", "=", "input_reader", ".", "SimdMeshImplInputReader", "(", "\n", "mesh_context", ".", "mesh_impl", ",", "ds_creator", ",", "mtf_shapes", ",", "\n", "external_worker", "=", "(", "not", "FLAGS", ".", "on_gcp", ")", ",", "is_eval_mode", "=", "False", ")", "\n", "train_computation", "=", "tpu", ".", "replicate", "(", "\n", "computation", "=", "model_train_fn", ",", "\n", "inputs", "=", "[", "[", "]", "]", "*", "mesh_context", ".", "num_cores", ",", "\n", "infeed_queue", "=", "simd_input_reader", ".", "infeed_queue", ",", "\n", "device_assignment", "=", "mesh_context", ".", "device_assignment", ")", "\n", "\n", "", "else", ":", "\n", "      ", "placement_input_reader", "=", "input_reader", ".", "PlacementMeshImplInputReader", "(", "\n", "mesh_context", ".", "mesh_impl", ",", "ds_creator", ",", "mtf_shapes", ",", "is_eval_mode", "=", "False", ")", "\n", "train_computation", "=", "placement_input_reader", ".", "gpu_placement", "(", "model_train_fn", ")", "\n", "\n", "###########################################################", "\n", "# Training.", "\n", "", "master_to_slice_hook", ",", "slice_to_master_hook", "=", "train_hooks", ".", "get", "(", ")", "\n", "ckpt_loader_hook", "=", "_CkptLoaderHook", "(", ")", "\n", "step_counter_hook", "=", "tf", ".", "train", ".", "StepCounterHook", "(", "every_n_steps", "=", "10", ")", "\n", "all_hooks", "=", "[", "ckpt_loader_hook", ",", "master_to_slice_hook", ",", "\n", "slice_to_master_hook", ",", "step_counter_hook", "]", "\n", "\n", "if", "FLAGS", ".", "write_summary", ":", "\n", "      ", "flush_summary", "=", "contrib_summary", ".", "flush", "(", ")", "\n", "\n", "", "with", "tf", ".", "train", ".", "MonitoredTrainingSession", "(", "\n", "master", "=", "master", ",", "\n", "scaffold", "=", "_get_scaffold", "(", "additional_initializers", "=", "[", "]", ")", ",", "\n", "hooks", "=", "all_hooks", ",", "\n", "config", "=", "config", ")", "as", "sess", ":", "\n", "\n", "      ", "if", "FLAGS", ".", "write_summary", ":", "\n", "        ", "contrib_summary", ".", "initialize", "(", "session", "=", "sess", ")", "\n", "\n", "", "if", "FLAGS", ".", "use_tpu", ":", "\n", "        ", "simd_input_reader", ".", "start_infeed_thread", "(", "\n", "sess", ",", "FLAGS", ".", "num_train_iterations_per_loop", ")", "\n", "", "else", ":", "\n", "        ", "placement_input_reader", ".", "initialize", "(", "sess", ")", "\n", "\n", "", "for", "step", "in", "range", "(", "FLAGS", ".", "num_train_iterations_per_loop", ")", ":", "\n", "        ", "sess", ".", "run", "(", "train_computation", ")", "\n", "if", "FLAGS", ".", "write_summary", ":", "\n", "          ", "sess", ".", "run", "(", "flush_summary", ")", "\n", "", "tf", ".", "logging", ".", "info", "(", "'train steps: {}'", ".", "format", "(", "step", ")", ")", "\n", "\n", "", "", "", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "    ", "if", "FLAGS", ".", "write_summary", ":", "\n", "      ", "summary_writer", "=", "contrib_summary", ".", "create_file_writer", "(", "FLAGS", ".", "summary_dir", ")", "\n", "with", "summary_writer", ".", "as_default", "(", ")", ",", "(", "\n", "contrib_summary", ".", "always_record_summaries", "(", ")", ")", ":", "\n", "        ", "_run_train_phase", "(", ")", "\n", "", "", "else", ":", "\n", "      ", "_run_train_phase", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._eval_phase": [[454, 553], ["mesh_tensorflow.experimental.unet.get_dataset_creator", "mesh_tensorflow.experimental.unet.get_input_mtf_shapes", "model_executor._get_model_fn", "eval_hooks.get", "model_executor._CkptLoaderHook", "tensorflow.Graph().as_default", "mesh_tensorflow.experimental.input_reader.SimdMeshImplInputReader", "tensorflow.contrib.tpu.replicate", "output_dtypes_shapes.get", "six.moves.range", "mesh_tensorflow.experimental.input_reader.PlacementMeshImplInputReader", "input_reader.PlacementMeshImplInputReader.gpu_placement", "tensorflow.contrib.summary.flush", "tensorflow.train.MonitoredSession", "mesh_tensorflow.experimental.unet.PostProcessor", "six.moves.range", "unet.PostProcessor.finish", "tensorflow.contrib.summary.create_file_writer", "model_executor._eval_phase._run_eval_phase"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.get_dataset_creator", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.get_input_mtf_shapes", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._get_model_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.PlacementMeshImplInputReader.gpu_placement", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.PostProcessor.finish"], ["", "", "", "def", "_eval_phase", "(", "mesh_context", ",", "config", ",", "master", ")", ":", "\n", "  ", "\"\"\"Handles input pipeline and evaluates the network.\"\"\"", "\n", "if", "FLAGS", ".", "num_eval_iterations_per_loop", "<=", "0", ":", "\n", "    ", "return", "\n", "\n", "", "def", "_run_eval_phase", "(", ")", ":", "\n", "    ", "\"\"\"The real function that runs the evaluation phase.\"\"\"", "\n", "# Setup input pipeline.", "\n", "ds_creator", "=", "unet", ".", "get_dataset_creator", "(", "'eval'", ")", "\n", "mtf_shapes", "=", "unet", ".", "get_input_mtf_shapes", "(", "'eval'", ")", "\n", "\n", "model_eval_fn", ",", "eval_hooks", ",", "output_dtypes_shapes", "=", "_get_model_fn", "(", "\n", "'eval'", ",", "mesh_context", ")", "\n", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "      ", "assert", "mesh_context", ".", "device_assignment", "\n", "assert", "mesh_context", ".", "num_cores", "\n", "simd_input_reader", "=", "input_reader", ".", "SimdMeshImplInputReader", "(", "\n", "mesh_context", ".", "mesh_impl", ",", "ds_creator", ",", "mtf_shapes", ",", "\n", "external_worker", "=", "(", "not", "FLAGS", ".", "on_gcp", ")", ",", "is_eval_mode", "=", "True", ")", "\n", "eval_computation", "=", "tpu", ".", "replicate", "(", "\n", "computation", "=", "model_eval_fn", ",", "\n", "inputs", "=", "[", "[", "]", "]", "*", "mesh_context", ".", "num_cores", ",", "\n", "infeed_queue", "=", "simd_input_reader", ".", "infeed_queue", ",", "\n", "device_assignment", "=", "mesh_context", ".", "device_assignment", ")", "\n", "\n", "output_dtypes", ",", "output_shapes", "=", "output_dtypes_shapes", ".", "get", "(", ")", "\n", "outfeed_dequeue_ops", "=", "[", "]", "\n", "\n", "# Create outfeed_dequeue_ops.", "\n", "for", "host_id", "in", "range", "(", "mesh_context", ".", "num_hosts", ")", ":", "\n", "# pylint: disable=protected-access", "\n", "        ", "with", "ops", ".", "device", "(", "input_reader", ".", "_host_id_to_tf_device", "(", "\n", "host_id", ",", "external_worker", "=", "(", "not", "FLAGS", ".", "on_gcp", ")", ")", ")", ":", "\n", "          ", "for", "device_ordinal", "in", "range", "(", "mesh_context", ".", "num_cores_per_host", ")", ":", "\n", "            ", "outfeed_dequeue_op", "=", "tpu_ops", ".", "outfeed_dequeue_tuple", "(", "\n", "dtypes", "=", "output_dtypes", ",", "\n", "shapes", "=", "output_shapes", ",", "\n", "device_ordinal", "=", "device_ordinal", ")", "\n", "\n", "# We don't need output other than from core 0.", "\n", "if", "outfeed_dequeue_ops", ":", "\n", "              ", "outfeed_dequeue_ops", ".", "append", "(", "\n", "[", "tf", ".", "reduce_mean", "(", "x", ")", "for", "x", "in", "outfeed_dequeue_op", "]", ")", "\n", "", "else", ":", "\n", "              ", "outfeed_dequeue_ops", ".", "append", "(", "outfeed_dequeue_op", ")", "\n", "\n", "", "", "", "", "", "else", ":", "\n", "      ", "placement_input_reader", "=", "input_reader", ".", "PlacementMeshImplInputReader", "(", "\n", "mesh_context", ".", "mesh_impl", ",", "ds_creator", ",", "mtf_shapes", ",", "is_eval_mode", "=", "False", ")", "\n", "eval_computation", "=", "placement_input_reader", ".", "gpu_placement", "(", "model_eval_fn", ")", "\n", "\n", "###########################################################", "\n", "# Evaluation.", "\n", "", "master_to_slice_hook", ",", "_", "=", "eval_hooks", ".", "get", "(", ")", "\n", "ckpt_loader_hook", "=", "_CkptLoaderHook", "(", ")", "\n", "all_hooks", "=", "[", "ckpt_loader_hook", ",", "master_to_slice_hook", "]", "\n", "\n", "if", "FLAGS", ".", "write_summary", ":", "\n", "      ", "flush_summary", "=", "contrib_summary", ".", "flush", "(", ")", "\n", "\n", "", "with", "tf", ".", "train", ".", "MonitoredSession", "(", "\n", "session_creator", "=", "tf", ".", "train", ".", "ChiefSessionCreator", "(", "\n", "master", "=", "master", ",", "\n", "config", "=", "config", ")", ",", "\n", "hooks", "=", "all_hooks", ")", "as", "sess", ":", "\n", "\n", "      ", "if", "FLAGS", ".", "write_summary", ":", "\n", "        ", "contrib_summary", ".", "initialize", "(", "session", "=", "sess", ")", "\n", "\n", "", "if", "FLAGS", ".", "use_tpu", ":", "\n", "        ", "simd_input_reader", ".", "start_infeed_thread", "(", "\n", "sess", ",", "FLAGS", ".", "num_eval_iterations_per_loop", ")", "\n", "", "else", ":", "\n", "        ", "placement_input_reader", ".", "initialize", "(", "sess", ")", "\n", "\n", "", "pprocessor", "=", "unet", ".", "PostProcessor", "(", ")", "\n", "for", "step", "in", "range", "(", "FLAGS", ".", "num_eval_iterations_per_loop", ")", ":", "\n", "# Only get results from the 0-th core.", "\n", "        ", "if", "FLAGS", ".", "use_tpu", ":", "\n", "          ", "sess", ".", "run", "(", "eval_computation", ")", "\n", "results", "=", "sess", ".", "run", "(", "outfeed_dequeue_ops", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "          ", "results", "=", "sess", ".", "run", "(", "eval_computation", ")", "\n", "", "pprocessor", ".", "record", "(", "results", ",", "FLAGS", ".", "pred_output_dir", ")", "\n", "\n", "if", "FLAGS", ".", "write_summary", ":", "\n", "          ", "sess", ".", "run", "(", "flush_summary", ")", "\n", "", "tf", ".", "logging", ".", "info", "(", "'eval steps: {}'", ".", "format", "(", "step", ")", ")", "\n", "", "pprocessor", ".", "finish", "(", ")", "\n", "\n", "", "", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "    ", "if", "FLAGS", ".", "write_summary", ":", "\n", "      ", "summary_writer", "=", "contrib_summary", ".", "create_file_writer", "(", "FLAGS", ".", "summary_dir", ")", "\n", "with", "summary_writer", ".", "as_default", "(", ")", ",", "(", "\n", "contrib_summary", ".", "always_record_summaries", "(", ")", ")", ":", "\n", "        ", "_run_eval_phase", "(", ")", "\n", "", "", "else", ":", "\n", "      ", "_run_eval_phase", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.train_and_eval": [[555, 583], ["tensorflow.logging.info", "tensorflow.distribute.cluster_resolver.TPUClusterResolver", "tensorflow.ConfigProto", "tf.distribute.cluster_resolver.TPUClusterResolver.cluster_spec", "six.moves.range", "tensorflow.logging.info", "tf.ConfigProto.cluster_def.CopyFrom", "tensorflow.Session", "tensorflow.tpu.experimental.initialize_tpu_system", "model_executor.MeshContext", "model_executor._train_phase", "model_executor._eval_phase", "resolver.cluster_spec.as_cluster_def", "mesh_tensorflow.experimental.unet.get_layout", "tf.distribute.cluster_resolver.TPUClusterResolver.get_master", "tf.distribute.cluster_resolver.TPUClusterResolver.get_master", "tensorflow.Session", "sess.run", "tf.distribute.cluster_resolver.TPUClusterResolver.master", "tensorflow.contrib.tpu.shutdown_system", "tf.distribute.cluster_resolver.TPUClusterResolver.get_master"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._train_phase", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._eval_phase", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.unet.get_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackedVariable.get_master", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackedVariable.get_master", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.StackedVariable.get_master"], ["", "", "", "def", "train_and_eval", "(", ")", ":", "\n", "  ", "\"\"\"Trains and evaluates MeshTensorflow model without TPUEstimator.\n\n  TODO(lehou): Pack everything nicely as a set of APIs.\n  \"\"\"", "\n", "\n", "mesh_context", "=", "None", "\n", "tf", ".", "logging", ".", "info", "(", "'FLAGS.master: {}'", ".", "format", "(", "FLAGS", ".", "master", ")", ")", "\n", "resolver", "=", "tf", ".", "distribute", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "FLAGS", ".", "master", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "cluster_spec", "=", "resolver", ".", "cluster_spec", "(", ")", "\n", "if", "cluster_spec", ":", "\n", "    ", "config", ".", "cluster_def", ".", "CopyFrom", "(", "cluster_spec", ".", "as_cluster_def", "(", ")", ")", "\n", "", "with", "tf", ".", "Session", "(", "target", "=", "resolver", ".", "master", "(", ")", ",", "config", "=", "config", ")", "as", "sess", ":", "\n", "    ", "tf", ".", "tpu", ".", "experimental", ".", "initialize_tpu_system", "(", "resolver", ")", "\n", "mesh_context", "=", "MeshContext", "(", "\n", "sess", ",", "FLAGS", ".", "use_tpu", ",", "FLAGS", ".", "mesh_shape", ",", "unet", ".", "get_layout", "(", ")", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "FLAGS", ".", "num_training_loops", ")", ":", "\n", "    ", "_train_phase", "(", "mesh_context", ",", "config", ",", "resolver", ".", "get_master", "(", ")", ")", "\n", "_eval_phase", "(", "mesh_context", ",", "config", ",", "resolver", ".", "get_master", "(", ")", ")", "\n", "\n", "", "if", "FLAGS", ".", "use_tpu", ":", "\n", "    ", "with", "tf", ".", "Session", "(", "target", "=", "resolver", ".", "get_master", "(", ")", ",", "config", "=", "config", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tpu", ".", "shutdown_system", "(", ")", ")", "\n", "\n", "", "", "tf", ".", "logging", ".", "info", "(", "'finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.main": [[585, 587], ["model_executor.train_and_eval"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor.train_and_eval"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "train_and_eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SubBatchSlicer.__init__": [[99, 113], ["input_reader.SubBatchSlicer._validate_args", "tensorflow.python.framework.ops.device", "sub_batch_ds_creator().make_initializable_iterator", "input_reader._host_id_to_tf_device", "sub_batch_ds_creator"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SubBatchSlicer._validate_args", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader._host_id_to_tf_device"], ["def", "__init__", "(", "self", ",", "sub_batch_ds_creator", ",", "host_id", ",", "all_sub_batch_pnums", ",", "\n", "simd_mesh_impl", ",", "mtf_input_shapes", ",", "external_worker", ",", "global_batch", ")", ":", "\n", "    ", "self", ".", "_host_id", "=", "host_id", "\n", "self", ".", "_all_sub_batch_pnums", "=", "all_sub_batch_pnums", "\n", "self", ".", "_simd_mesh_impl", "=", "simd_mesh_impl", "\n", "self", ".", "_mtf_input_shapes", "=", "mtf_input_shapes", "\n", "self", ".", "_external_worker", "=", "external_worker", "\n", "self", ".", "_global_batch", "=", "global_batch", "\n", "\n", "self", ".", "_validate_args", "(", ")", "\n", "\n", "with", "ops", ".", "device", "(", "_host_id_to_tf_device", "(", "self", ".", "_host_id", ",", "\n", "self", ".", "_external_worker", ")", ")", ":", "\n", "      ", "self", ".", "_ds_iterator", "=", "sub_batch_ds_creator", "(", ")", ".", "make_initializable_iterator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SubBatchSlicer.initializer": [[114, 117], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "initializer", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_ds_iterator", ".", "initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SubBatchSlicer.get_slices": [[118, 145], ["tensorflow.python.framework.ops.device", "input_reader.SubBatchSlicer._ds_iterator.get_next", "isinstance", "six.moves.range", "input_reader._host_id_to_tf_device", "len", "len", "len", "input_reader.SubBatchSlicer._init_slice_cache", "input_reader.SubBatchSlicer._slice_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader._host_id_to_tf_device", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SubBatchSlicer._init_slice_cache", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SubBatchSlicer._slice_tensor"], ["", "def", "get_slices", "(", "self", ")", ":", "\n", "    ", "\"\"\"Yields sliced tensors and which remote pnums they should go to.\n\n    Yields:\n      tf_tensor: The sliced tensor.\n      pnum: Which process number the tf_tensor should to go.\n      input_i: The input ordinal of the tf_tensor.\n    \"\"\"", "\n", "with", "ops", ".", "device", "(", "_host_id_to_tf_device", "(", "self", ".", "_host_id", ",", "\n", "self", ".", "_external_worker", ")", ")", ":", "\n", "      ", "all_input_tensors", "=", "self", ".", "_ds_iterator", ".", "get_next", "(", ")", "\n", "if", "isinstance", "(", "all_input_tensors", ",", "tf", ".", "Tensor", ")", ":", "\n", "        ", "all_input_tensors", "=", "[", "all_input_tensors", "]", "\n", "", "assert", "len", "(", "all_input_tensors", ")", "==", "len", "(", "self", ".", "_all_sub_batch_pnums", ")", "\n", "\n", "for", "input_i", "in", "range", "(", "len", "(", "all_input_tensors", ")", ")", ":", "\n", "        ", "input_tensor", "=", "all_input_tensors", "[", "input_i", "]", "\n", "sub_batch_pnums", "=", "self", ".", "_all_sub_batch_pnums", "[", "input_i", "]", "\n", "mtf_input_shape", "=", "self", ".", "_mtf_input_shapes", "[", "input_i", "]", "\n", "\n", "# Initialize the cache for each input_i", "\n", "self", ".", "_init_slice_cache", "(", ")", "\n", "\n", "for", "pnum", "in", "sub_batch_pnums", ":", "\n", "# TODO(lehou): tf.slice is kinda slow. Use tf.split instead.", "\n", "          ", "input_slice", "=", "self", ".", "_slice_tensor", "(", "input_tensor", ",", "mtf_input_shape", ",", "pnum", ")", "\n", "yield", "input_slice", ",", "pnum", ",", "input_i", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SubBatchSlicer._validate_args": [[146, 152], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "", "", "", "def", "_validate_args", "(", "self", ")", ":", "\n", "    ", "assert", "isinstance", "(", "self", ".", "_all_sub_batch_pnums", ",", "list", ")", "\n", "assert", "isinstance", "(", "self", ".", "_mtf_input_shapes", ",", "list", ")", "\n", "assert", "self", ".", "_all_sub_batch_pnums", "\n", "assert", "self", ".", "_mtf_input_shapes", "\n", "assert", "len", "(", "self", ".", "_all_sub_batch_pnums", ")", "==", "len", "(", "self", ".", "_mtf_input_shapes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SubBatchSlicer._init_slice_cache": [[153, 156], ["collections.defaultdict"], "methods", ["None"], ["", "def", "_init_slice_cache", "(", "self", ")", ":", "\n", "# Cache for tensor slices", "\n", "    ", "self", ".", "_slice_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SubBatchSlicer._slice_tensor": [[157, 172], ["input_reader.SubBatchSlicer._simd_mesh_impl.slice_begin", "input_reader.SubBatchSlicer._simd_mesh_impl.slice_shape", "tensorflow.slice", "tuple", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slice_begin", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice"], ["", "def", "_slice_tensor", "(", "self", ",", "input_tensor", ",", "mtf_input_shape", ",", "pnum", ")", ":", "\n", "    ", "\"\"\"Slice input_tensor according to mtf_input_shape and pnum.\"\"\"", "\n", "s_begin", "=", "self", ".", "_simd_mesh_impl", ".", "slice_begin", "(", "mtf_input_shape", ",", "pnum", ")", "\n", "if", "not", "self", ".", "_global_batch", ":", "\n", "# Always slice from 0 in the first dimension (batch dimension), since", "\n", "# input_tensor a sub-batch tensor.", "\n", "      ", "s_begin", "[", "0", "]", "=", "0", "\n", "", "if", "tuple", "(", "s_begin", ")", "in", "self", ".", "_slice_dict", ":", "\n", "      ", "return", "self", ".", "_slice_dict", "[", "tuple", "(", "s_begin", ")", "]", "\n", "\n", "", "s_shape", "=", "self", ".", "_simd_mesh_impl", ".", "slice_shape", "(", "mtf_input_shape", ")", "\n", "input_slice", "=", "tf", ".", "slice", "(", "input_tensor", ",", "s_begin", ",", "s_shape", ")", "\n", "\n", "self", ".", "_slice_dict", "[", "tuple", "(", "s_begin", ")", "]", "=", "input_slice", "\n", "return", "input_slice", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.ProcessDevices.__init__": [[177, 215], ["collections.defaultdict", "six.moves.range", "len", "tensorflow.logging.info", "simd_mesh_impl.l2p", "input_reader.ProcessDevices._ordered_ordinals.append", "d_assignment.tpu_device", "d_assignment.host_device", "input_reader._host_device_to_id", "input_reader.ProcessDevices._ordered_tpus.append", "input_reader.ProcessDevices._ordered_hosts.append", "input_reader.ProcessDevices._ordered_host_ids.append", "input_reader.ProcessDevices._host_id_to_its_pnums[].append", "set", "d_assignment.tpu_ordinal"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.l2p", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader._host_device_to_id"], ["def", "__init__", "(", "self", ",", "simd_mesh_impl", ")", ":", "\n", "    ", "\"\"\"Init tpu and host devices in logical order.\"\"\"", "\n", "self", ".", "_num_cores", "=", "simd_mesh_impl", ".", "device_assignment", ".", "num_replicas", "\n", "\n", "self", ".", "_ordered_ordinals", "=", "[", "]", "\n", "self", ".", "_ordered_tpus", "=", "[", "]", "\n", "self", ".", "_ordered_hosts", "=", "[", "]", "\n", "self", ".", "_ordered_host_ids", "=", "[", "]", "\n", "self", ".", "_host_id_to_its_pnums", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "d_assignment", "=", "simd_mesh_impl", ".", "device_assignment", "\n", "\n", "for", "pnum", "in", "range", "(", "self", ".", "num_cores", ")", ":", "\n", "      ", "physical_pnum", "=", "simd_mesh_impl", ".", "l2p", "(", "pnum", ")", "\n", "\n", "# For MTF, there's always 1 core per replica. So logical_core=0.", "\n", "self", ".", "_ordered_ordinals", ".", "append", "(", "\n", "d_assignment", ".", "tpu_ordinal", "(", "replica", "=", "physical_pnum", ",", "logical_core", "=", "0", ")", ")", "\n", "tpu_device", "=", "d_assignment", ".", "tpu_device", "(", "replica", "=", "physical_pnum", ")", "\n", "host_device", "=", "d_assignment", ".", "host_device", "(", "replica", "=", "physical_pnum", ")", "\n", "host_id", "=", "_host_device_to_id", "(", "host_device", ")", "\n", "self", ".", "_ordered_tpus", ".", "append", "(", "tpu_device", ")", "\n", "self", ".", "_ordered_hosts", ".", "append", "(", "host_device", ")", "\n", "self", ".", "_ordered_host_ids", ".", "append", "(", "host_id", ")", "\n", "self", ".", "_host_id_to_its_pnums", "[", "host_id", "]", ".", "append", "(", "pnum", ")", "\n", "\n", "", "self", ".", "_num_hosts", "=", "len", "(", "set", "(", "self", ".", "_ordered_hosts", ")", ")", "\n", "self", ".", "_num_cores_per_host", "=", "self", ".", "num_cores", "//", "self", ".", "_num_hosts", "\n", "assert", "self", ".", "num_cores", "==", "self", ".", "_num_hosts", "*", "self", ".", "_num_cores_per_host", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"Process Devices \"", "\n", "\"ordered_ordinals: {}, \"", "\n", "\"ordered_tpus: {}, \"", "\n", "\"ordered_hosts: {}, \"", "\n", "\"host_id_to_its_pnums: {}.\"", ".", "format", "(", "\n", "self", ".", "ordered_ordinals", ",", "\n", "self", ".", "ordered_tpus", ",", "\n", "self", ".", "ordered_hosts", ",", "\n", "self", ".", "host_id_to_its_pnums", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.ProcessDevices.ordered_ordinals": [[216, 219], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ordered_ordinals", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_ordered_ordinals", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.ProcessDevices.ordered_tpus": [[220, 223], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ordered_tpus", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_ordered_tpus", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.ProcessDevices.ordered_hosts": [[224, 227], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ordered_hosts", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_ordered_hosts", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.ProcessDevices.ordered_host_ids": [[228, 231], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ordered_host_ids", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_ordered_host_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.ProcessDevices.host_id_to_its_pnums": [[232, 235], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "host_id_to_its_pnums", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_host_id_to_its_pnums", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.ProcessDevices.num_cores": [[236, 239], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_cores", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_num_cores", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.ProcessDevices.num_hosts": [[240, 243], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hosts", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_num_hosts", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.ProcessDevices.num_cores_per_host": [[244, 247], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_cores_per_host", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_num_cores_per_host", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader.__init__": [[252, 325], ["object.__init__", "isinstance", "input_reader.ProcessDevices", "input_reader.SimdMeshImplInputReader._gen_infeed_queue"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader._gen_infeed_queue"], ["def", "__init__", "(", "self", ",", "\n", "simd_mesh_impl", ",", "\n", "ds_creator", ",", "\n", "mtf_input_shapes", ",", "\n", "ds_prefetch_size", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ",", "\n", "external_worker", "=", "True", ",", "\n", "is_eval_mode", "=", "False", ")", ":", "\n", "    ", "\"\"\"Input pipeline for the SIMD implementation of MeshTensorflow.\n\n    Args:\n      simd_mesh_impl: A mtf.simd_mesh_impl.SimdMeshImpl object.\n      ds_creator: A function that creates a dataset.\n      mtf_input_shapes: A list of mtf.Shape. Then length of it must be equal\n        to the number of elements generated by the ds_creator. NOTE, we assume:\n          1. The 0-th dimension is the batch dimension.\n          2. The batch dimension is consistent across all input shapes in\n             mtf_input_shapes.\n      ds_prefetch_size: The buffer size for prefetching\n        (default tf.data.experimental.AUTOTUNE).\n      external_worker: Whether you have an external tpu_worker or not. Set it to\n        False if you run the program locally, for example, during local unit\n        test.\n      is_eval_mode: In evaluation mode, only one dataset object will be created,\n        as opposed to one dataset for each sub-batch. Default is False. Set it\n        to True during evaluation, to ensure that one evaluation instance will\n        be used once and only once.\n    Note:\n      1. The efficiency is optimized according to the shape of the 0-th tensor:\n         mtf_input_shapes[0]. We recommand you to put the largest tensor as the\n         0-th input.\n      2. You need to call start_infeed_thread() before your train ops.\n    Example:\n        simd_mesh_impl = mtf.simd_mesh_impl.SimdMeshImpl(...)\n        # ds_creator is function that creates a tf.data.Dataset.\n        # This Dataset must return single examples (no batch dimension).\n        def ds_creator():\n          return tf.data.Dataset.from_tensors(x)\n        # mtf_input_shapes is a list of Shapes of all input tensors given by the\n        # dataset. All shapes must begin with the same batch dimension.\n        simd_input_reader = SimdMeshImplInputReader(simd_mesh_impl,\n                                                    ds_creator,\n                                                    mtf_input_shapes)\n\n        batch_dim = mtf.Dimension('batch', FLAGS.batch_size)\n        io_dim = mtf.Dimension('io', FLAGS.io_size)\n        mtf_input_shapes = [mtf.Shape([batch_dim, io_dim])]\n\n        infeed_queue = simd_input_reader.infeed_queue\n        tpu_train_computation = tpu.replicate(\n            computation=model_fn,\n            inputs=[[]] * num_cores,\n            infeed_queue=infeed_queue, ...)\n\n        with tf.Session() as sess:\n          simd_input_reader.start_infeed_thread(sess,\n                                                number_steps=num_training_steps)\n          for _ in range(num_training_steps):\n            sess.run(tpu_train_computation)\n    \"\"\"", "\n", "super", "(", "SimdMeshImplInputReader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "mtf_input_shapes", "\n", "assert", "isinstance", "(", "mtf_input_shapes", ",", "list", ")", "\n", "\n", "# TODO(lehou): Support nested structures for ds_creator, mtf_input_shapes.", "\n", "self", ".", "_simd_mesh_impl", "=", "simd_mesh_impl", "\n", "self", ".", "_p_dev", "=", "ProcessDevices", "(", "simd_mesh_impl", ")", "\n", "self", ".", "_ds_creator", "=", "ds_creator", "\n", "self", ".", "_mtf_input_shapes", "=", "mtf_input_shapes", "\n", "self", ".", "_ds_prefetch_size", "=", "ds_prefetch_size", "\n", "self", ".", "_external_worker", "=", "external_worker", "\n", "self", ".", "_is_eval_mode", "=", "is_eval_mode", "\n", "\n", "self", ".", "_gen_infeed_queue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader.infeed_queue": [[326, 329], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "infeed_queue", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_infeed_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader.start_infeed_thread": [[330, 352], ["sess.run", "threading.Thread", "input_reader.SimdMeshImplInputReader._infeed_thread.start", "time.sleep", "six.moves.range", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run"], ["", "def", "start_infeed_thread", "(", "self", ",", "sess", ",", "number_steps", "=", "-", "1", ",", "initial_wait_sec", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Start running enqueue ops in a thread.\n\n    Args:\n      sess: A tf.Session.\n      number_steps: Number of times to call sess.run(enqueue_ops).\n        default is -1 (forever).\n      initial_wait_sec: Number of seconds to wait before starting the enqueue\n        loop. Default is 0.5.\n    \"\"\"", "\n", "def", "_thread_fn", "(", ")", ":", "\n", "      ", "time", ".", "sleep", "(", "initial_wait_sec", ")", "\n", "if", "number_steps", ">", "0", ":", "\n", "        ", "for", "_", "in", "range", "(", "number_steps", ")", ":", "\n", "          ", "sess", ".", "run", "(", "self", ".", "_enqueue_ops", ")", "\n", "", "", "else", ":", "\n", "        ", "while", "True", ":", "\n", "          ", "sess", ".", "run", "(", "self", ".", "_enqueue_ops", ")", "\n", "\n", "", "", "", "sess", ".", "run", "(", "self", ".", "_input_initializers", ")", "\n", "self", ".", "_infeed_thread", "=", "threading", ".", "Thread", "(", "target", "=", "_thread_fn", ")", "\n", "self", ".", "_infeed_thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader._gen_infeed_queue": [[353, 425], ["tensorflow.logging.info", "enumerate", "pnum_maps.append", "input_reader.SimdMeshImplInputReader._get_hosts_to_hold_ds", "len", "input_reader.SimdMeshImplInputReader._ds_creator().batch().prefetch", "sub_batch_slicer.get_slices", "tensorflow.python.framework.ops.device", "input_reader.SimdMeshImplInputReader._enqueue_laidout_tensors", "input_reader.SimdMeshImplInputReader._get_pnum_map", "len", "sub_batch_slicer_list.append", "sub_batch_slicer_list.append", "len", "six.moves.range", "input_reader._host_id_to_tf_device", "input_reader.SimdMeshImplInputReader._ds_creator().batch", "pnum_map.flatten().tolist", "input_reader.SubBatchSlicer", "pnum_map[].flatten().tolist", "all_sub_batch_pnums.append", "input_reader.SubBatchSlicer", "input_reader.SimdMeshImplInputReader._ds_creator", "pnum_map.flatten", "pnum_map[].flatten"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader._get_hosts_to_hold_ds", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SubBatchSlicer.get_slices", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader._enqueue_laidout_tensors", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader._get_pnum_map", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader._host_id_to_tf_device"], ["", "def", "_gen_infeed_queue", "(", "self", ")", ":", "\n", "    ", "\"\"\"Generates _infeed_queue, _enqueue_ops, _input_initializers.\"\"\"", "\n", "pnum_maps", "=", "[", "]", "\n", "batch_size", "=", "self", ".", "_mtf_input_shapes", "[", "0", "]", ".", "to_integer_list", "[", "0", "]", "\n", "for", "mtf_shape", "in", "self", ".", "_mtf_input_shapes", ":", "\n", "# Make sure that the batch size is the same across all input tensors.", "\n", "      ", "assert", "batch_size", "==", "mtf_shape", ".", "to_integer_list", "[", "0", "]", "\n", "pnum_maps", ".", "append", "(", "self", ".", "_get_pnum_map", "(", "mtf_shape", ")", ")", "\n", "\n", "# For each sub-batch, we need to know which host should read it.", "\n", "", "if", "self", ".", "_is_eval_mode", ":", "\n", "# There should be just one dataset-holding host. Make the last host do it.", "\n", "      ", "hosts_to_hold_ds", "=", "[", "self", ".", "_p_dev", ".", "num_hosts", "-", "1", "]", "\n", "", "else", ":", "\n", "      ", "hosts_to_hold_ds", "=", "self", ".", "_get_hosts_to_hold_ds", "(", "pnum_maps", "[", "0", "]", ")", "\n", "", "sub_batch_size", "=", "batch_size", "//", "len", "(", "hosts_to_hold_ds", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"MTF sub_batch_size: {}\"", ".", "format", "(", "sub_batch_size", ")", ")", "\n", "assert", "sub_batch_size", "*", "len", "(", "hosts_to_hold_ds", ")", "==", "batch_size", "\n", "\n", "def", "sub_batch_ds_creator", "(", ")", ":", "\n", "      ", "return", "self", ".", "_ds_creator", "(", ")", ".", "batch", "(", "\n", "sub_batch_size", ",", "drop_remainder", "=", "True", ")", ".", "prefetch", "(", "\n", "self", ".", "_ds_prefetch_size", ")", "\n", "\n", "", "sub_batch_slicer_list", "=", "[", "]", "\n", "# For each sub-batch, create a SubBatchSlicer object.", "\n", "for", "sub_batch_i", ",", "host_id", "in", "enumerate", "(", "hosts_to_hold_ds", ")", ":", "\n", "# Get the list of pnums for each input.", "\n", "      ", "if", "self", ".", "_is_eval_mode", ":", "\n", "        ", "all_sub_batch_pnums", "=", "[", "\n", "pnum_map", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "for", "pnum_map", "in", "pnum_maps", "]", "\n", "\n", "sub_batch_slicer_list", ".", "append", "(", "SubBatchSlicer", "(", "sub_batch_ds_creator", ",", "\n", "host_id", ",", "\n", "all_sub_batch_pnums", ",", "\n", "self", ".", "_simd_mesh_impl", ",", "\n", "self", ".", "_mtf_input_shapes", ",", "\n", "self", ".", "_external_worker", ",", "\n", "global_batch", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "        ", "all_sub_batch_pnums", "=", "[", "]", "\n", "for", "pnum_map", "in", "pnum_maps", ":", "\n", "          ", "sub_batch_pnums", "=", "pnum_map", "[", "sub_batch_i", ",", "...", "]", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "all_sub_batch_pnums", ".", "append", "(", "sub_batch_pnums", ")", "\n", "\n", "", "sub_batch_slicer_list", ".", "append", "(", "SubBatchSlicer", "(", "sub_batch_ds_creator", ",", "\n", "host_id", ",", "\n", "all_sub_batch_pnums", ",", "\n", "self", ".", "_simd_mesh_impl", ",", "\n", "self", ".", "_mtf_input_shapes", ",", "\n", "self", ".", "_external_worker", ",", "\n", "global_batch", "=", "False", ")", ")", "\n", "\n", "# Slots for all laidout tensors.", "\n", "", "", "all_laidout_tensors", "=", "[", "[", "_NO_DATA", "]", "*", "len", "(", "self", ".", "_mtf_input_shapes", ")", "for", "_", "in", "range", "(", "self", ".", "_p_dev", ".", "num_cores", ")", "]", "\n", "\n", "# Read tf_tensors, put them in slots.", "\n", "for", "sub_batch_slicer", "in", "sub_batch_slicer_list", ":", "\n", "      ", "for", "tf_tensor", ",", "pnum", ",", "input_i", "in", "sub_batch_slicer", ".", "get_slices", "(", ")", ":", "\n", "        ", "all_laidout_tensors", "[", "pnum", "]", "[", "input_i", "]", "=", "tf_tensor", "\n", "\n", "# Make sure that there are no Nones in all_laidout_tensors.", "\n", "", "", "for", "laidout_tensors", "in", "all_laidout_tensors", ":", "\n", "      ", "assert", "_NO_DATA", "not", "in", "laidout_tensors", "\n", "\n", "", "with", "ops", ".", "device", "(", "_host_id_to_tf_device", "(", "hosts_to_hold_ds", "[", "0", "]", ",", "\n", "self", ".", "_external_worker", ")", ")", ":", "\n", "      ", "self", ".", "_infeed_queue", ",", "self", ".", "_enqueue_ops", "=", "self", ".", "_enqueue_laidout_tensors", "(", "\n", "all_laidout_tensors", ")", "\n", "\n", "", "self", ".", "_input_initializers", "=", "[", "s", ".", "initializer", "for", "s", "in", "sub_batch_slicer_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader._get_pnum_map": [[426, 462], ["input_reader.SimdMeshImplInputReader._simd_mesh_impl.slice_shape", "numpy.empty", "six.moves.range", "tensorflow.logging.info", "numpy.prod", "input_reader.SimdMeshImplInputReader._simd_mesh_impl.slice_begin", "enumerate", "six.moves.zip", "numpy.prod", "six.moves.zip", "tuple"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LazyLaidOutTensor.slice_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.slice_begin"], ["", "def", "_get_pnum_map", "(", "self", ",", "mtf_shape", ")", ":", "\n", "    ", "\"\"\"Returns the pnum_map according to mtf_shape.\n\n    Args:\n      mtf_shape: A mtf.Shape object.\n    Returns:\n      A numpy array pnum_map. For the i-th sub-batch, pnum_map[i] is a numpy\n      array containing all pnums that tensor slices of the i-th sub-batch\n      will be send to.\n    \"\"\"", "\n", "s_shape", "=", "self", ".", "_simd_mesh_impl", ".", "slice_shape", "(", "mtf_shape", ")", "\n", "shape_list", "=", "[", "dim_size", "//", "s_dim_size", "for", "dim_size", ",", "s_dim_size", "in", "zip", "(", "\n", "mtf_shape", ".", "to_integer_list", ",", "s_shape", ")", "]", "\n", "\n", "pnum_map_shape", "=", "shape_list", "+", "[", "\n", "self", ".", "_p_dev", ".", "num_cores", "//", "np", ".", "prod", "(", "shape_list", ")", "]", "\n", "assert", "np", ".", "prod", "(", "pnum_map_shape", ")", "==", "self", ".", "_p_dev", ".", "num_cores", "\n", "\n", "# Initialize the pnum_map to _NONE_PNUM.", "\n", "pnum_map", "=", "np", ".", "empty", "(", "pnum_map_shape", ",", "dtype", "=", "object", ")", "\n", "pnum_map", "[", ":", "]", "=", "_NONE_PNUM", "\n", "\n", "for", "pnum", "in", "range", "(", "self", ".", "_p_dev", ".", "num_cores", ")", ":", "\n", "      ", "s_begin", "=", "self", ".", "_simd_mesh_impl", ".", "slice_begin", "(", "mtf_shape", ",", "pnum", ")", "\n", "coord", "=", "[", "dim_size", "//", "s_dim_size", "for", "dim_size", ",", "s_dim_size", "in", "zip", "(", "\n", "s_begin", ",", "s_shape", ")", "]", "\n", "# put pnum in pnum_map[coord]", "\n", "pnum_array_ref", "=", "pnum_map", "[", "tuple", "(", "coord", ")", "]", "\n", "for", "idx", ",", "value", "in", "enumerate", "(", "pnum_array_ref", ")", ":", "\n", "        ", "if", "value", "is", "_NONE_PNUM", ":", "\n", "          ", "pnum_array_ref", "[", "idx", "]", "=", "pnum", "\n", "break", "\n", "\n", "", "", "", "tf", ".", "logging", ".", "info", "(", "\"MTF pnum_map: {}\"", ".", "format", "(", "pnum_map", ")", ")", "\n", "assert", "_NONE_PNUM", "not", "in", "pnum_map", "\n", "return", "pnum_map", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader._get_hosts_to_hold_ds": [[463, 498], ["sub_batch_pnum_map.flatten", "max", "input_reader.SimdMeshImplInputReader._get_hosts_to_hold_ds._get_num_pnums_per_host"], "methods", ["None"], ["", "def", "_get_hosts_to_hold_ds", "(", "self", ",", "pnum_map", ")", ":", "\n", "    ", "\"\"\"Finds which host should read which sub-batch.\"\"\"", "\n", "assert", "_NONE_PNUM", "not", "in", "pnum_map", "\n", "\n", "# This records how many datasets (ds) are already stored on each host.", "\n", "num_dss_per_host", "=", "[", "0", "]", "*", "self", ".", "_p_dev", ".", "num_hosts", "\n", "\n", "# A list of host_ids that holds datasets (ds).", "\n", "hosts_to_hold_ds", "=", "[", "]", "\n", "\n", "def", "_get_num_pnums_per_host", "(", "sub_batch_pnum_map", ")", ":", "\n", "      ", "num_pnums_per_host", "=", "[", "0", "]", "*", "self", ".", "_p_dev", ".", "num_hosts", "\n", "for", "pnum", "in", "sub_batch_pnum_map", ".", "flatten", "(", ")", ":", "\n", "        ", "num_pnums_per_host", "[", "self", ".", "_p_dev", ".", "ordered_host_ids", "[", "pnum", "]", "]", "+=", "1", "\n", "", "return", "num_pnums_per_host", "\n", "\n", "", "def", "_find_host_id_with_most_pnums_and_least_ds", "(", "num_pnums_per_host", ",", "\n", "num_dss_per_host", ")", ":", "\n", "      ", "host_metics", "=", "[", "(", "\n", "host_id", ",", "num_pnums_per_host", "[", "host_id", "]", ",", "\n", "num_dss_per_host", "[", "host_id", "]", ")", "for", "host_id", "in", "range", "(", "self", ".", "_p_dev", ".", "num_hosts", ")", "]", "\n", "# Major max key: num_pnums", "\n", "# Minor max key: -num_dss. We need to find a relatively spare host.", "\n", "host_id", ",", "_", ",", "_", "=", "max", "(", "host_metics", ",", "key", "=", "lambda", "keys", ":", "(", "keys", "[", "1", "]", ",", "-", "keys", "[", "2", "]", ")", ")", "\n", "return", "host_id", "\n", "\n", "", "for", "sub_batch_pnum_map", "in", "pnum_map", ":", "\n", "      ", "num_pnums_per_host", "=", "_get_num_pnums_per_host", "(", "sub_batch_pnum_map", ")", "\n", "host_id", "=", "_find_host_id_with_most_pnums_and_least_ds", "(", "num_pnums_per_host", ",", "\n", "num_dss_per_host", ")", "\n", "num_dss_per_host", "[", "host_id", "]", "+=", "1", "\n", "hosts_to_hold_ds", ".", "append", "(", "host_id", ")", "\n", "\n", "", "return", "hosts_to_hold_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SimdMeshImplInputReader._enqueue_laidout_tensors": [[499, 519], ["tensorflow.python.tpu.tpu_feed.InfeedQueue", "tensorflow.python.tpu.tpu_feed.InfeedQueue.generate_enqueue_ops", "len"], "methods", ["None"], ["", "def", "_enqueue_laidout_tensors", "(", "self", ",", "all_laidout_tensors", ")", ":", "\n", "    ", "\"\"\"Generate enqueue ops to enqueue all_laidout_tensors.\"\"\"", "\n", "\n", "def", "_tpu_ordinal_function_impl", "(", "pnum", ")", ":", "\n", "      ", "return", "self", ".", "_p_dev", ".", "ordered_ordinals", "[", "pnum", "]", "\n", "\n", "", "def", "_placement_function_impl", "(", "pnum", ")", ":", "\n", "      ", "return", "self", ".", "_p_dev", ".", "ordered_hosts", "[", "pnum", "]", "\n", "\n", "", "laidout_tensors0", "=", "all_laidout_tensors", "[", "0", "]", "\n", "infeed_queue", "=", "tpu_feed", ".", "InfeedQueue", "(", "\n", "number_of_tuple_elements", "=", "len", "(", "laidout_tensors0", ")", ",", "\n", "tuple_types", "=", "[", "x", ".", "dtype", "for", "x", "in", "laidout_tensors0", "]", ",", "\n", "tuple_shapes", "=", "[", "x", ".", "shape", "for", "x", "in", "laidout_tensors0", "]", ")", "\n", "enqueue_ops", "=", "infeed_queue", ".", "generate_enqueue_ops", "(", "\n", "all_laidout_tensors", ",", "\n", "tpu_ordinal_function", "=", "_tpu_ordinal_function_impl", ",", "\n", "placement_function", "=", "_placement_function_impl", ")", "\n", "\n", "return", "infeed_queue", ",", "enqueue_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.PlacementMeshImplInputReader.__init__": [[524, 543], ["ds_creator().batch().prefetch.make_initializable_iterator", "ds_creator().batch().prefetch", "ds_creator().batch().prefetch", "ds_creator().batch", "ds_creator().batch", "ds_creator", "ds_creator"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "placement_mesh_impl", ",", "\n", "ds_creator", ",", "\n", "mtf_input_shapes", ",", "\n", "ds_prefetch_size", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ",", "\n", "is_eval_mode", "=", "False", ")", ":", "\n", "\n", "    ", "self", ".", "_placement_mesh_impl", "=", "placement_mesh_impl", "\n", "self", ".", "_mtf_input_shapes", "=", "mtf_input_shapes", "\n", "\n", "batch_size", "=", "mtf_input_shapes", "[", "0", "]", ".", "dims", "[", "0", "]", ".", "size", "\n", "if", "is_eval_mode", ":", "\n", "      ", "ds", "=", "ds_creator", "(", ")", ".", "batch", "(", "\n", "batch_size", ",", "drop_remainder", "=", "False", ")", ".", "prefetch", "(", "ds_prefetch_size", ")", "\n", "", "else", ":", "\n", "      ", "ds", "=", "ds_creator", "(", ")", ".", "batch", "(", "\n", "batch_size", ",", "drop_remainder", "=", "True", ")", ".", "prefetch", "(", "ds_prefetch_size", ")", "\n", "", "self", ".", "_ds_iterator", "=", "ds", ".", "make_initializable_iterator", "(", ")", "\n", "self", ".", "_input_initializers", "=", "[", "self", ".", "_ds_iterator", ".", "initializer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.PlacementMeshImplInputReader.initialize": [[544, 546], ["sess.run"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run"], ["", "def", "initialize", "(", "self", ",", "sess", ")", ":", "\n", "    ", "sess", ".", "run", "(", "self", ".", "_input_initializers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.PlacementMeshImplInputReader.gpu_placement": [[547, 556], ["input_reader.PlacementMeshImplInputReader._ds_iterator.get_next", "input_reader.PlacementMeshImplInputReader._placement_mesh_impl.make_slices", "input_reader.PlacementMeshImplInputReader._placement_mesh_impl.make_slices", "model_fn"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.make_slices", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.make_slices", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.model_fn"], ["", "def", "gpu_placement", "(", "self", ",", "model_fn", ")", ":", "\n", "    ", "image", ",", "label", "=", "self", ".", "_ds_iterator", ".", "get_next", "(", ")", "\n", "image_laid_out", "=", "self", ".", "_placement_mesh_impl", ".", "make_slices", "(", "\n", "image", ",", "self", ".", "_mtf_input_shapes", "[", "0", "]", ")", "\n", "label_laid_out", "=", "self", ".", "_placement_mesh_impl", ".", "make_slices", "(", "\n", "label", ",", "self", ".", "_mtf_input_shapes", "[", "1", "]", ")", "\n", "computation", "=", "model_fn", "(", "image_laid_out", ",", "label_laid_out", ")", "\n", "\n", "return", "computation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader._host_device_to_id": [[80, 86], ["isinstance", "int", "[].split", "str", "device_str.lower().split", "device_str.lower"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.lower"], ["def", "_host_device_to_id", "(", "device_str", ")", ":", "\n", "  ", "assert", "isinstance", "(", "device_str", ",", "str", ")", "\n", "id_string", "=", "device_str", ".", "lower", "(", ")", ".", "split", "(", "\"/task:\"", ")", "[", "1", "]", ".", "split", "(", "\"/device:\"", ")", "[", "0", "]", "\n", "id_int", "=", "int", "(", "id_string", ")", "\n", "assert", "str", "(", "id_int", ")", "==", "id_string", "\n", "return", "id_int", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader._host_id_to_tf_device": [[88, 94], ["isinstance"], "function", ["None"], ["", "def", "_host_id_to_tf_device", "(", "host_id", ",", "external_worker", ")", ":", "\n", "  ", "assert", "isinstance", "(", "host_id", ",", "int", ")", "\n", "if", "external_worker", ":", "\n", "    ", "return", "\"/job:tpu_worker/task:{}/device:CPU:0\"", ".", "format", "(", "host_id", ")", "\n", "", "else", ":", "\n", "    ", "return", "\"/task:{}/device:CPU:0\"", ".", "format", "(", "host_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.VariableNamesTest.testGlobalVarName": [[31, 34], ["layout_optimizer_test.VariableNamesTest.assertEqual", "mesh_tensorflow.auto_mtf.layout_optimizer._global_var_name"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._global_var_name"], ["  ", "def", "testGlobalVarName", "(", "self", ")", ":", "\n", "    ", "self", ".", "assertEqual", "(", "\"x_(cake:lie)\"", ",", "\n", "layout_optimizer", ".", "_global_var_name", "(", "\"cake\"", ",", "\"lie\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.VariableNamesTest.testLocalVarName": [[35, 45], ["layout_optimizer_test.VariableNamesTest.assertEqual", "layout_optimizer_test.VariableNamesTest.assertEqual", "layout_optimizer_test.VariableNamesTest.assertEqual", "mesh_tensorflow.auto_mtf.layout_optimizer._local_var_name", "mesh_tensorflow.auto_mtf.layout_optimizer._local_var_name", "mesh_tensorflow.auto_mtf.layout_optimizer._local_var_name", "frozenset", "frozenset", "frozenset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._local_var_name", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._local_var_name", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._local_var_name"], ["", "def", "testLocalVarName", "(", "self", ")", ":", "\n", "    ", "self", ".", "assertEqual", "(", "\"y_()\"", ",", "layout_optimizer", ".", "_local_var_name", "(", "frozenset", "(", ")", ",", "{", "}", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "\"y_(channel:y,hidden:x)\"", ",", "\n", "layout_optimizer", ".", "_local_var_name", "(", "frozenset", "(", "[", "\"channel\"", ",", "\"hidden\"", "]", ")", ",", "\n", "{", "\"hidden\"", ":", "\"x\"", ",", "\"channel\"", ":", "\"y\"", "}", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "\"y_(channel:y,hidden)\"", ",", "\n", "layout_optimizer", ".", "_local_var_name", "(", "frozenset", "(", "[", "\"channel\"", ",", "\"hidden\"", "]", ")", ",", "\n", "{", "\"channel\"", ":", "\"y\"", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.AssignmentsTest.testGenerateAssignments": [[49, 65], ["mesh_tensorflow.auto_mtf.layout_optimizer._generate_assignments", "layout_optimizer_test.AssignmentsTest.assertIn", "layout_optimizer_test.AssignmentsTest.assertIn", "layout_optimizer_test.AssignmentsTest.assertIn", "layout_optimizer_test.AssignmentsTest.assertNotIn", "layout_optimizer_test.AssignmentsTest.assertLen"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._generate_assignments"], ["  ", "def", "testGenerateAssignments", "(", "self", ")", ":", "\n", "    ", "splittable_dims", "=", "{", "\"s1\"", ",", "\"s2\"", ",", "\"s3\"", "}", "\n", "mesh_dims", "=", "{", "\"m1\"", ":", "4", ",", "\"m2\"", ":", "8", "}", "\n", "\n", "assignments", "=", "layout_optimizer", ".", "_generate_assignments", "(", "splittable_dims", ",", "\n", "mesh_dims", ")", "\n", "# Check that some valid assignments of various sizes are included", "\n", "self", ".", "assertIn", "(", "{", "}", ",", "assignments", ")", "\n", "self", ".", "assertIn", "(", "{", "\"s3\"", ":", "\"m2\"", "}", ",", "assignments", ")", "\n", "self", ".", "assertIn", "(", "{", "\"s1\"", ":", "\"m2\"", ",", "\"s2\"", ":", "\"m1\"", "}", ",", "assignments", ")", "\n", "# Not allowed to map two splittable dimensions to the same mesh dimension.", "\n", "self", ".", "assertNotIn", "(", "{", "\"s1\"", ":", "\"m2\"", ",", "\"s3\"", ":", "\"m2\"", "}", ",", "assignments", ")", "\n", "# Check the total number of assignments returned. We are looking for", "\n", "# thirteen because one assignment has no entries, six assignments have one", "\n", "# entry, and six assignments have two entries.", "\n", "self", ".", "assertLen", "(", "assignments", ",", "13", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.OptimizeLayoutTest.setUp": [[69, 74], ["super().setUp", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.convert_to_shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "OptimizeLayoutTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "mtf_graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "mesh", "=", "mtf", ".", "Mesh", "(", "self", ".", "mtf_graph", ",", "\"my_mesh\"", ")", "\n", "self", ".", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "\"m1:4,m2:2\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.OptimizeLayoutTest.get_layout_optimizer": [[75, 78], ["mesh_tensorflow.auto_mtf.layout_optimizer.LayoutOptimizer", "mesh_tensorflow.auto_mtf.memory_estimator.MemoryEstimator"], "methods", ["None"], ["", "def", "get_layout_optimizer", "(", "self", ")", ":", "\n", "    ", "return", "layout_optimizer", ".", "LayoutOptimizer", "(", "memory_estimator", ".", "MemoryEstimator", "(", "\n", "self", ".", "mtf_graph", ",", "self", ".", "mesh_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.OptimizeLayoutTest.testOptimizeLayout": [[79, 97], ["mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.einsum", "layout_optimizer_test.OptimizeLayoutTest.get_layout_optimizer", "layout_optimizer_test.OptimizeLayoutTest.solve", "layout_optimizer_test.OptimizeLayoutTest.assertEqual", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.assertLessEqual", "layout_optimizer_test.OptimizeLayoutTest.assertLessEqual", "layout_optimizer_test.OptimizeLayoutTest.assertLessEqual", "layout_optimizer_test.OptimizeLayoutTest.assertLessEqual", "layout_optimizer_test.OptimizeLayoutTest.assertLessEqual", "layout_optimizer_test.OptimizeLayoutTest.assertEqual", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.OptimizeLayoutTest.get_layout_optimizer", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.solve", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout"], ["", "def", "testOptimizeLayout", "(", "self", ")", ":", "\n", "    ", "x1", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "\"a:10,b:5\"", ")", "\n", "x2", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "\"b:5,c:20\"", ")", "\n", "mtf", ".", "einsum", "(", "[", "x1", ",", "x2", "]", ",", "\"a:10,c:20\"", ")", "\n", "optimizer", "=", "self", ".", "get_layout_optimizer", "(", ")", "\n", "\n", "# Cut dimensions to make them equally sized.", "\n", "layout", "=", "optimizer", ".", "solve", "(", ")", "\n", "self", ".", "assertEqual", "(", "layout", ",", "\"a:m2;c:m1\"", ")", "\n", "\n", "# This optimal layout should have the lowest value.", "\n", "layout_value", "=", "optimizer", ".", "evaluate_layout", "(", "layout", ")", "\n", "self", ".", "assertLessEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"a:m1;b:m2\"", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"a:m1;c:m2\"", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"b:m1;a:m2\"", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"b:m1;c:m2\"", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"c:m1;b:m2\"", ")", ")", "\n", "self", ".", "assertEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"c:m1;a:m2\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.OptimizeLayoutTest.testOptimizeLayoutRepetition": [[98, 119], ["mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "six.moves.xrange", "layout_optimizer_test.OptimizeLayoutTest.get_layout_optimizer", "layout_optimizer_test.OptimizeLayoutTest.assertGreaterEqual", "layout_optimizer_test.OptimizeLayoutTest.assertLessEqual", "layout_optimizer_test.OptimizeLayoutTest.solve", "layout_optimizer_test.OptimizeLayoutTest.assertEqual", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.assertLessEqual", "layout_optimizer_test.OptimizeLayoutTest.assertLessEqual", "layout_optimizer_test.OptimizeLayoutTest.assertLessEqual", "layout_optimizer_test.OptimizeLayoutTest.assertLessEqual", "layout_optimizer_test.OptimizeLayoutTest.assertLessEqual", "layout_optimizer_test.OptimizeLayoutTest.assertEqual", "mesh_tensorflow.einsum", "len", "len", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "layout_optimizer_test.OptimizeLayoutTest.evaluate_layout", "list", "layout_optimizer_test.OptimizeLayoutTest._graph.get_all_operation_names", "layout_optimizer_test.OptimizeLayoutTest._model.Proto"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.OptimizeLayoutTest.get_layout_optimizer", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.solve", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_operation_names"], ["", "def", "testOptimizeLayoutRepetition", "(", "self", ")", ":", "\n", "    ", "x1", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "\"a:10,b:5\"", ")", "\n", "x2", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "\"b:5,c:20\"", ")", "\n", "for", "_", "in", "six", ".", "moves", ".", "xrange", "(", "100", ")", ":", "\n", "      ", "mtf", ".", "einsum", "(", "[", "x1", ",", "x2", "]", ",", "\"a:10,c:20\"", ")", "\n", "", "optimizer", "=", "self", ".", "get_layout_optimizer", "(", ")", "\n", "\n", "self", ".", "assertGreaterEqual", "(", "len", "(", "list", "(", "\n", "optimizer", ".", "_graph", ".", "get_all_operation_names", "(", ")", ")", ")", ",", "50", ")", "\n", "self", ".", "assertLessEqual", "(", "len", "(", "optimizer", ".", "_model", ".", "Proto", "(", ")", ".", "variables", ")", ",", "50", ")", "\n", "\n", "# Same checks.", "\n", "layout", "=", "optimizer", ".", "solve", "(", ")", "\n", "self", ".", "assertEqual", "(", "layout", ",", "\"a:m2;c:m1\"", ")", "\n", "layout_value", "=", "optimizer", ".", "evaluate_layout", "(", "layout", ")", "\n", "self", ".", "assertLessEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"a:m1;b:m2\"", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"a:m1;c:m2\"", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"b:m1;a:m2\"", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"b:m1;c:m2\"", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"c:m1;b:m2\"", ")", ")", "\n", "self", ".", "assertEqual", "(", "layout_value", ",", "optimizer", ".", "evaluate_layout", "(", "\"c:m1;a:m2\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.OptimizeLayoutTest.testOptimizeLayoutUnsplittable": [[120, 130], ["mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.UnstackOperation", "mesh_tensorflow.UnstackOperation", "layout_optimizer_test.OptimizeLayoutTest.get_layout_optimizer", "layout_optimizer_test.OptimizeLayoutTest.assertEqual", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "layout_optimizer_test.OptimizeLayoutTest.solve"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.OptimizeLayoutTest.get_layout_optimizer", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.solve"], ["", "def", "testOptimizeLayoutUnsplittable", "(", "self", ")", ":", "\n", "    ", "x1", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "\"a:10,b:5\"", ")", "\n", "x2", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "\"b:5,c:20\"", ")", "\n", "mtf", ".", "UnstackOperation", "(", "x1", ",", "mtf", ".", "Dimension", "(", "\"a\"", ",", "10", ")", ")", "\n", "mtf", ".", "UnstackOperation", "(", "x2", ",", "mtf", ".", "Dimension", "(", "\"c\"", ",", "20", ")", ")", "\n", "optimizer", "=", "self", ".", "get_layout_optimizer", "(", ")", "\n", "\n", "# No dimensions can be split, because a and c are unstack dimensions and", "\n", "# b has size 5 (so there are divisiblity issues).", "\n", "self", ".", "assertEqual", "(", "optimizer", ".", "solve", "(", ")", ",", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.OptimizeLayoutTest.testOptimizeLayoutTiebreak": [[131, 140], ["mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.einsum", "mesh_tensorflow.convert_to_shape", "layout_optimizer_test.OptimizeLayoutTest.get_layout_optimizer", "layout_optimizer_test.OptimizeLayoutTest.solve", "layout_optimizer_test.OptimizeLayoutTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer_test.OptimizeLayoutTest.get_layout_optimizer", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.solve"], ["", "def", "testOptimizeLayoutTiebreak", "(", "self", ")", ":", "\n", "    ", "x1", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "\"a:10,b:5\"", ")", "\n", "x2", "=", "mtf", ".", "zeros", "(", "self", ".", "mesh", ",", "\"b:5,c:20\"", ")", "\n", "mtf", ".", "einsum", "(", "[", "x1", ",", "x2", "]", ",", "\"a:10,c:20\"", ")", "\n", "# Rewrite mesh_shape to have a dummy dimension.", "\n", "self", ".", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "\"m1:4,m2:2,m3:1\"", ")", "\n", "optimizer", "=", "self", ".", "get_layout_optimizer", "(", ")", "\n", "layout", "=", "optimizer", ".", "solve", "(", ")", "\n", "self", ".", "assertEqual", "(", "layout", ",", "\"a:m2;b:m3;c:m1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api_test.LayoutTest.testLayout": [[30, 53], ["mesh_tensorflow.Graph", "mesh_tensorflow.Graph", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Mesh", "mesh_tensorflow.Mesh", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.einsum", "mesh_tensorflow.einsum", "mesh_tensorflow.einsum", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.auto_mtf.layout", "mesh_tensorflow.auto_mtf.layout", "mesh_tensorflow.auto_mtf.layout", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "api_test.LayoutTest.assertEqual", "api_test.LayoutTest.assertIsNone", "api_test.LayoutTest.assertEqual", "mesh_tensorflow.auto_mtf.layout.tensor_dimension_to_mesh_axis", "mesh_tensorflow.auto_mtf.layout.tensor_dimension_to_mesh_axis", "mesh_tensorflow.auto_mtf.layout.tensor_dimension_to_mesh_axis"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api.layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api.layout", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api.layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis"], ["  ", "def", "testLayout", "(", "self", ")", ":", "\n", "# Construct a Mesh TensorFlow graph and mesh.", "\n", "    ", "mtf_graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "mtf_graph", ",", "\"my_mesh\"", ")", "\n", "x", "=", "mtf", ".", "zeros", "(", "mesh", ",", "\"a:10,b:5\"", ")", "\n", "y", "=", "mtf", ".", "zeros", "(", "mesh", ",", "\"b:5,c:20\"", ")", "\n", "z", "=", "mtf", ".", "einsum", "(", "[", "x", ",", "y", "]", ",", "\"a:10,c:20\"", ")", "\n", "\n", "# Decide on a mesh shape.", "\n", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "\"m1:4,m2:2\"", ")", "\n", "\n", "# Compute a layout based on the graph and mesh.", "\n", "# Note that knowing the identity of the outputs is important to the", "\n", "# optimization since they cannot be freed.", "\n", "layout", "=", "mtf", ".", "auto_mtf", ".", "layout", "(", "mtf_graph", ",", "mesh_shape", ",", "[", "z", "]", ")", "\n", "\n", "a_dim", "=", "mtf", ".", "convert_to_dimension", "(", "(", "\"a\"", ",", "10", ")", ")", "\n", "b_dim", "=", "mtf", ".", "convert_to_dimension", "(", "(", "\"b\"", ",", "5", ")", ")", "\n", "c_dim", "=", "mtf", ".", "convert_to_dimension", "(", "(", "\"c\"", ",", "20", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "layout", ".", "tensor_dimension_to_mesh_axis", "(", "a_dim", ",", "mesh_shape", ")", ",", "1", ")", "\n", "self", ".", "assertIsNone", "(", "layout", ".", "tensor_dimension_to_mesh_axis", "(", "b_dim", ",", "mesh_shape", ")", ")", "\n", "self", ".", "assertEqual", "(", "layout", ".", "tensor_dimension_to_mesh_axis", "(", "c_dim", ",", "mesh_shape", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api_test.LayoutTest.testLayoutAndMeshShape": [[54, 84], ["mesh_tensorflow.Graph", "mesh_tensorflow.Graph", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Mesh", "mesh_tensorflow.Mesh", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.einsum", "mesh_tensorflow.einsum", "mesh_tensorflow.einsum", "mesh_tensorflow.auto_mtf.layout_and_mesh_shape", "mesh_tensorflow.auto_mtf.layout_and_mesh_shape", "mesh_tensorflow.auto_mtf.layout_and_mesh_shape", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "api_test.LayoutTest.assertEqual", "api_test.LayoutTest.assertIsNone", "api_test.LayoutTest.assertEqual", "api_test.LayoutTest.assertCountEqual", "mesh_tensorflow.auto_mtf.layout_and_mesh_shape", "mesh_tensorflow.auto_mtf.layout_and_mesh_shape", "mesh_tensorflow.auto_mtf.layout_and_mesh_shape", "api_test.LayoutTest.assertIsNone", "api_test.LayoutTest.assertIsNone", "api_test.LayoutTest.assertIsNone", "api_test.LayoutTest.assertCountEqual", "layout.tensor_dimension_to_mesh_axis", "layout.tensor_dimension_to_mesh_axis", "layout.tensor_dimension_to_mesh_axis", "layout.tensor_dimension_to_mesh_axis", "layout.tensor_dimension_to_mesh_axis", "layout.tensor_dimension_to_mesh_axis", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api.layout_and_mesh_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api.layout_and_mesh_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api.layout_and_mesh_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api.layout_and_mesh_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api.layout_and_mesh_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api.layout_and_mesh_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.MeshImpl.tensor_dimension_to_mesh_axis"], ["", "def", "testLayoutAndMeshShape", "(", "self", ")", ":", "\n", "# Same as previous test, but don't specify a 4x2 mesh.", "\n", "    ", "mtf_graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "mtf_graph", ",", "\"my_mesh\"", ")", "\n", "x", "=", "mtf", ".", "zeros", "(", "mesh", ",", "\"a:10,b:5\"", ")", "\n", "y", "=", "mtf", ".", "zeros", "(", "mesh", ",", "\"b:5,c:20\"", ")", "\n", "z", "=", "mtf", ".", "einsum", "(", "[", "x", ",", "y", "]", ",", "\"a:10,c:20\"", ")", "\n", "\n", "layout", ",", "mesh_shape", "=", "mtf", ".", "auto_mtf", ".", "layout_and_mesh_shape", "(", "mtf_graph", ",", "8", ",", "[", "z", "]", ")", "\n", "\n", "a_dim", "=", "mtf", ".", "convert_to_dimension", "(", "(", "\"a\"", ",", "10", ")", ")", "\n", "b_dim", "=", "mtf", ".", "convert_to_dimension", "(", "(", "\"b\"", ",", "5", ")", ")", "\n", "c_dim", "=", "mtf", ".", "convert_to_dimension", "(", "(", "\"c\"", ",", "20", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "layout", ".", "tensor_dimension_to_mesh_axis", "(", "a_dim", ",", "mesh_shape", ")", ",", "1", ")", "\n", "self", ".", "assertIsNone", "(", "layout", ".", "tensor_dimension_to_mesh_axis", "(", "b_dim", ",", "mesh_shape", ")", ")", "\n", "self", ".", "assertEqual", "(", "layout", ".", "tensor_dimension_to_mesh_axis", "(", "c_dim", ",", "mesh_shape", ")", ",", "0", ")", "\n", "\n", "self", ".", "assertCountEqual", "(", "mesh_shape", ".", "dims", ",", "\n", "[", "mtf", ".", "Dimension", "(", "\"mesh_0\"", ",", "4", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"mesh_1\"", ",", "2", ")", "]", ")", "\n", "\n", "layout", ",", "mesh_shape", "=", "mtf", ".", "auto_mtf", ".", "layout_and_mesh_shape", "(", "\n", "mtf_graph", ",", "8", ",", "[", "z", "]", ",", "1", ")", "\n", "\n", "self", ".", "assertIsNone", "(", "layout", ".", "tensor_dimension_to_mesh_axis", "(", "a_dim", ",", "mesh_shape", ")", ")", "\n", "self", ".", "assertIsNone", "(", "layout", ".", "tensor_dimension_to_mesh_axis", "(", "b_dim", ",", "mesh_shape", ")", ")", "\n", "self", ".", "assertIsNone", "(", "layout", ".", "tensor_dimension_to_mesh_axis", "(", "c_dim", ",", "mesh_shape", ")", ")", "\n", "\n", "self", ".", "assertCountEqual", "(", "mesh_shape", ".", "dims", ",", "[", "mtf", ".", "Dimension", "(", "\"mesh_0\"", ",", "8", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api_test.LayoutTest.testMeshShapeIterator": [[85, 135], ["api_test.LayoutTest.assertCountEqual", "api_test.LayoutTest.assertCountEqual", "api_test.LayoutTest.assertCountEqual", "api_test.LayoutTest.assertCountEqual", "api_test.LayoutTest.assertCountEqual", "api_test.LayoutTest.assertCountEqual", "api_test.LayoutTest.assertCountEqual", "list", "list", "list", "list", "list", "list", "list", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator", "mesh_tensorflow.auto_mtf.api._mesh_shape_iterator"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator"], ["", "def", "testMeshShapeIterator", "(", "self", ")", ":", "\n", "    ", "self", ".", "assertCountEqual", "(", "\n", "list", "(", "mesh_tensorflow", ".", "auto_mtf", ".", "api", ".", "_mesh_shape_iterator", "(", "1", ")", ")", ",", "[", "[", "1", "]", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "\n", "list", "(", "mesh_tensorflow", ".", "auto_mtf", ".", "api", ".", "_mesh_shape_iterator", "(", "2", ")", ")", ",", "[", "[", "2", "]", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "\n", "list", "(", "mesh_tensorflow", ".", "auto_mtf", ".", "api", ".", "_mesh_shape_iterator", "(", "4", ")", ")", ",", "\n", "[", "[", "4", "]", ",", "[", "2", ",", "2", "]", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "\n", "list", "(", "mesh_tensorflow", ".", "auto_mtf", ".", "api", ".", "_mesh_shape_iterator", "(", "8", ")", ")", ",", "\n", "[", "[", "8", "]", ",", "[", "4", ",", "2", "]", ",", "[", "2", ",", "2", ",", "2", "]", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "\n", "list", "(", "mesh_tensorflow", ".", "auto_mtf", ".", "api", ".", "_mesh_shape_iterator", "(", "512", ")", ")", ",", "\n", "[", "[", "512", "]", ",", "\n", "[", "256", ",", "2", "]", ",", "\n", "[", "128", ",", "4", "]", ",", "\n", "[", "128", ",", "2", ",", "2", "]", ",", "\n", "[", "64", ",", "8", "]", ",", "\n", "[", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "64", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "32", ",", "16", "]", ",", "\n", "[", "32", ",", "8", ",", "2", "]", ",", "\n", "[", "32", ",", "4", ",", "4", "]", ",", "\n", "[", "32", ",", "4", ",", "2", ",", "2", "]", ",", "\n", "[", "32", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "16", ",", "16", ",", "2", "]", ",", "\n", "[", "16", ",", "8", ",", "4", "]", ",", "\n", "[", "16", ",", "8", ",", "2", ",", "2", "]", ",", "\n", "[", "16", ",", "4", ",", "4", ",", "2", "]", ",", "\n", "[", "16", ",", "4", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "16", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "8", ",", "8", ",", "8", "]", ",", "\n", "[", "8", ",", "8", ",", "4", ",", "2", "]", ",", "\n", "[", "8", ",", "8", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "8", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "[", "8", ",", "4", ",", "4", ",", "2", ",", "2", "]", ",", "\n", "[", "8", ",", "4", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "8", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "4", ",", "4", ",", "4", ",", "4", ",", "2", "]", ",", "\n", "[", "4", ",", "4", ",", "4", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "4", ",", "4", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "4", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", "]", ")", "\n", "\n", "self", ".", "assertCountEqual", "(", "\n", "list", "(", "mesh_tensorflow", ".", "auto_mtf", ".", "api", ".", "_mesh_shape_iterator", "(", "512", ",", "1", ")", ")", ",", "\n", "[", "[", "512", "]", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "\n", "list", "(", "mesh_tensorflow", ".", "auto_mtf", ".", "api", ".", "_mesh_shape_iterator", "(", "512", ",", "2", ")", ")", ",", "\n", "[", "[", "512", "]", ",", "[", "256", ",", "2", "]", ",", "[", "128", ",", "4", "]", ",", "[", "64", ",", "8", "]", ",", "[", "32", ",", "16", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.print_cp_model_solution.print_solution": [[32, 85], ["model.Proto", "solver.ResponseProto", "model.Proto.HasField", "len", "range", "print", "print", "print", "range", "variable_assignments.append", "len", "solver.ObjectiveValue", "variables_in_objective.append", "variables_in_objective.append"], "function", ["None"], ["def", "print_solution", "(", "model", ",", "solver", ")", ":", "\n", "  ", "\"\"\"Prints the solution associated with solver.\n\n  If solver has already had Solve() called on it, prints the solution. This\n  includes each variable and its assignment, along with the objective function\n  and its optimal value.\n  If solver has not had Solve() called on it, or there is no feasible solution,\n  this will probably crash.\n\n  Args:\n    model: A pywrapcp.CpModel object.\n    solver: A pywrapcp.CpSolver object.\n\n  Returns:\n    Nothing, but prints the solution associated with solver.\n  \"\"\"", "\n", "model_proto", "=", "model", ".", "Proto", "(", ")", "\n", "response_proto", "=", "solver", ".", "ResponseProto", "(", ")", "\n", "variables_in_objective_map", "=", "{", "}", "\n", "maximization", "=", "False", "\n", "if", "model_proto", ".", "HasField", "(", "'objective'", ")", ":", "\n", "    ", "objective", "=", "model_proto", ".", "objective", "\n", "for", "i", "in", "range", "(", "len", "(", "objective", ".", "vars", ")", ")", ":", "\n", "      ", "variables_in_objective_map", "[", "objective", ".", "vars", "[", "i", "]", "]", "=", "objective", ".", "coeffs", "[", "i", "]", "\n", "", "if", "objective", ".", "scaling_factor", "<", "0.0", ":", "\n", "      ", "maximization", "=", "True", "\n", "", "", "variable_assignments", "=", "[", "]", "\n", "variables_in_objective", "=", "[", "]", "\n", "num_vars", "=", "len", "(", "model_proto", ".", "variables", ")", "\n", "for", "var_index", "in", "range", "(", "num_vars", ")", ":", "\n", "    ", "if", "not", "model_proto", ".", "variables", "[", "var_index", "]", ".", "name", ":", "\n", "      ", "continue", "\n", "", "variable_name", "=", "model_proto", ".", "variables", "[", "var_index", "]", ".", "name", "\n", "if", "var_index", "in", "variables_in_objective_map", ":", "\n", "      ", "coefficient", "=", "variables_in_objective_map", "[", "var_index", "]", "\n", "if", "coefficient", ":", "\n", "        ", "if", "maximization", ":", "\n", "          ", "coefficient", "*=", "-", "1", "\n", "", "if", "coefficient", "<", "0", ":", "\n", "          ", "variables_in_objective", ".", "append", "(", "' - {} * {}'", ".", "format", "(", "\n", "-", "coefficient", ",", "variable_name", ")", ")", "\n", "", "elif", "coefficient", ">", "0", ":", "\n", "          ", "variables_in_objective", ".", "append", "(", "' + {} * {}'", ".", "format", "(", "\n", "coefficient", ",", "variable_name", ")", ")", "\n", "", "", "", "variable_assignments", ".", "append", "(", "'  {} = {}\\n'", ".", "format", "(", "\n", "variable_name", ",", "response_proto", ".", "solution", "[", "var_index", "]", ")", ")", "\n", "", "print", "(", "''", ".", "join", "(", "variable_assignments", ")", ",", "end", "=", "''", ")", "\n", "# Strip the leading '+' if it exists.", "\n", "if", "variables_in_objective", "and", "variables_in_objective", "[", "0", "]", "[", "1", "]", "==", "'+'", ":", "\n", "    ", "variables_in_objective", "[", "0", "]", "=", "variables_in_objective", "[", "0", "]", "[", "2", ":", "]", "\n", "", "print", "(", "'{}:{}'", ".", "format", "(", "'Maximize'", "if", "maximization", "else", "'Minimize'", ",", "\n", "''", ".", "join", "(", "variables_in_objective", ")", ")", ")", "\n", "print", "(", "'Objective value: {}\\n'", ".", "format", "(", "solver", ".", "ObjectiveValue", "(", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator_test.MemoryEstimatorTest.setUp": [[29, 49], ["super().setUp", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.auto_mtf.memory_estimator.MemoryEstimator", "mesh_tensorflow.Constant", "mesh_tensorflow.Constant", "mesh_tensorflow.EinsumOperation", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "MemoryEstimatorTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "mtf_graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "mtf_graph", ",", "'lowering_context_mesh'", ")", "\n", "\n", "a_dim", "=", "mtf", ".", "Dimension", "(", "'a'", ",", "3", ")", "\n", "b_dim", "=", "mtf", ".", "Dimension", "(", "'b'", ",", "4", ")", "\n", "c_dim", "=", "mtf", ".", "Dimension", "(", "'c'", ",", "5", ")", "\n", "\n", "x", "=", "(", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "mtf", ".", "Shape", "(", "[", "a_dim", ",", "b_dim", "]", ")", ",", "tf", ".", "int32", ",", "'X'", ")", "\n", ".", "outputs", "[", "0", "]", ")", "\n", "y", "=", "(", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "mtf", ".", "Shape", "(", "[", "b_dim", ",", "c_dim", "]", ")", ",", "tf", ".", "int32", ",", "'Y'", ")", "\n", ".", "outputs", "[", "0", "]", ")", "\n", "z", "=", "(", "mtf", ".", "EinsumOperation", "(", "[", "x", ",", "y", "]", ",", "mtf", ".", "Shape", "(", "[", "a_dim", ",", "c_dim", "]", ")", ",", "name", "=", "'Z'", ")", "\n", ".", "outputs", "[", "0", "]", ")", "\n", "\n", "mesh_shape", "=", "mtf", ".", "Shape", "(", "[", "(", "'m1'", ",", "4", ")", ",", "(", "'m2'", ",", "3", ")", "]", ")", "\n", "\n", "self", ".", "estimator", "=", "memory_estimator", ".", "MemoryEstimator", "(", "\n", "mtf_graph", ",", "mesh_shape", ",", "[", "z", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator_test.MemoryEstimatorTest.test_LayoutValidator": [[50, 56], ["memory_estimator_test.MemoryEstimatorTest.estimator.get_layout_validator", "memory_estimator_test.MemoryEstimatorTest.assertCountEqual", "memory_estimator_test.MemoryEstimatorTest.assertFalse", "memory_estimator_test.MemoryEstimatorTest.assertTrue", "memory_estimator_test.MemoryEstimatorTest.is_valid_assignment", "memory_estimator_test.MemoryEstimatorTest.is_valid_assignment"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator.MemoryEstimator.get_layout_validator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.is_valid_assignment", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.is_valid_assignment"], ["", "def", "test_LayoutValidator", "(", "self", ")", ":", "\n", "    ", "validator", "=", "self", ".", "estimator", ".", "get_layout_validator", "(", ")", "\n", "self", ".", "assertCountEqual", "(", "validator", ".", "splittable_mtf_dimension_names", ",", "\n", "[", "'a'", ",", "'b'", ",", "'c'", "]", ")", "\n", "self", ".", "assertFalse", "(", "validator", ".", "is_valid_assignment", "(", "'a'", ",", "'m1'", ")", ")", "\n", "self", ".", "assertTrue", "(", "validator", ".", "is_valid_assignment", "(", "'a'", ",", "'m2'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator_test.MemoryEstimatorTest.test_GraphInterface": [[57, 66], ["memory_estimator_test.MemoryEstimatorTest.estimator.get_graph_interface", "memory_estimator_test.MemoryEstimatorTest.assertCountEqual", "memory_estimator_test.MemoryEstimatorTest.assertEqual", "memory_estimator_test.MemoryEstimatorTest.assertEqual", "memory_estimator_test.MemoryEstimatorTest.assertFalse", "memory_estimator_test.MemoryEstimatorTest.assertTrue", "list", "memory_estimator_test.MemoryEstimatorTest.get_tensor_shape", "tensorflow.TensorShape", "memory_estimator_test.MemoryEstimatorTest.get_tensor_shape", "tensorflow.TensorShape", "memory_estimator_test.MemoryEstimatorTest.is_tensor_final", "memory_estimator_test.MemoryEstimatorTest.is_tensor_final", "memory_estimator_test.MemoryEstimatorTest.get_all_operation_names"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator.MemoryEstimator.get_graph_interface", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_operation_names"], ["", "def", "test_GraphInterface", "(", "self", ")", ":", "\n", "    ", "graph", "=", "self", ".", "estimator", ".", "get_graph_interface", "(", ")", "\n", "self", ".", "assertCountEqual", "(", "list", "(", "graph", ".", "get_all_operation_names", "(", ")", ")", ",", "\n", "[", "'X'", ",", "'Y'", ",", "'Z'", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_shape", "(", "'X:0'", ")", ",", "tf", ".", "TensorShape", "(", "[", "3", ",", "4", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_shape", "(", "'Z:0'", ")", ",", "tf", ".", "TensorShape", "(", "[", "3", ",", "5", "]", ")", ")", "\n", "self", ".", "assertFalse", "(", "graph", ".", "is_tensor_final", "(", "'Y:0'", ")", ")", "\n", "self", ".", "assertTrue", "(", "graph", ".", "is_tensor_final", "(", "'Z:0'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.__init__": [[60, 74], ["valid_layouts.LayoutValidator._initialize_splittable_dimensions", "valid_layouts.LayoutValidator._initialize_mtf_dimension_name_to_size_gcd", "valid_layouts.LayoutValidator._initialize_mesh_dimension_name_to_size"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator._initialize_splittable_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator._initialize_mtf_dimension_name_to_size_gcd", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator._initialize_mesh_dimension_name_to_size"], ["def", "__init__", "(", "self", ",", "mtf_graph", ",", "mesh_shape", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      mtf_graph: an mtf.Graph, representing the Mesh TensorFlow computation of\n          interest.\n      mesh_shape: an mtf.Shape, representing the mesh of interest.\n    \"\"\"", "\n", "self", ".", "_splittable_mtf_dimension_names", "=", "self", ".", "_initialize_splittable_dimensions", "(", "\n", "mtf_graph", ")", "\n", "self", ".", "_mtf_dimension_name_to_size_gcd", "=", "(", "\n", "self", ".", "_initialize_mtf_dimension_name_to_size_gcd", "(", "mtf_graph", ")", ")", "\n", "self", ".", "_mesh_dimension_name_to_size", "=", "self", ".", "_initialize_mesh_dimension_name_to_size", "(", "\n", "mesh_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.splittable_mtf_dimension_names": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "splittable_mtf_dimension_names", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_splittable_mtf_dimension_names", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.mesh_dimension_name_to_size": [[79, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mesh_dimension_name_to_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_mesh_dimension_name_to_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.is_valid_assignment": [[83, 96], ["None"], "methods", ["None"], ["", "def", "is_valid_assignment", "(", "self", ",", "mtf_dimension_name", ",", "mesh_dimension_name", ")", ":", "\n", "    ", "\"\"\"Whether this MTF dimension may be assigned to this mesh dimension.\n\n    Args:\n      mtf_dimension_name: string, the name of a Mesh TensorFlow dimension.\n      mesh_dimension_name: string, the name of a mesh dimension.\n\n    Returns:\n      A boolean indicating whether the assignment is valid.\n    \"\"\"", "\n", "return", "(", "(", "mtf_dimension_name", "in", "self", ".", "_splittable_mtf_dimension_names", ")", "and", "\n", "(", "self", ".", "_mtf_dimension_name_to_size_gcd", "[", "mtf_dimension_name", "]", "%", "\n", "self", ".", "_mesh_dimension_name_to_size", "[", "mesh_dimension_name", "]", "==", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator._initialize_splittable_dimensions": [[97, 119], ["set", "set", "set.update", "re.match", "set.add"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add"], ["", "def", "_initialize_splittable_dimensions", "(", "self", ",", "mtf_graph", ")", ":", "\n", "    ", "\"\"\"Initializer for self._splittable_mtf_dimension_names.\n\n    Args:\n      mtf_graph: an mtf.Graph.\n\n    Returns:\n      A set(string) of the names of Mesh TensorFlow dimensions that may be\n      assigned in a layout.\n    \"\"\"", "\n", "all_mtf_dimension_names", "=", "set", "(", ")", "# set(string)", "\n", "for", "mtf_operation", "in", "mtf_graph", ".", "operations", ":", "\n", "      ", "for", "mtf_tensor", "in", "mtf_operation", ".", "outputs", ":", "\n", "        ", "for", "mtf_dimension", "in", "mtf_tensor", ".", "shape", ".", "dims", ":", "\n", "          ", "if", "not", "re", ".", "match", "(", "r\"_anonymous_\\d*\"", ",", "mtf_dimension", ".", "name", ")", ":", "\n", "            ", "all_mtf_dimension_names", ".", "add", "(", "mtf_dimension", ".", "name", ")", "\n", "\n", "", "", "", "", "unsplittable_mtf_dimension_names", "=", "set", "(", ")", "# set(string)", "\n", "for", "mtf_operation", "in", "mtf_graph", ".", "operations", ":", "\n", "      ", "unsplittable_mtf_dimension_names", ".", "update", "(", "mtf_operation", ".", "unsplittable_dims", ")", "\n", "\n", "", "return", "all_mtf_dimension_names", "-", "unsplittable_mtf_dimension_names", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator._initialize_mtf_dimension_name_to_size_gcd": [[120, 141], ["math.gcd", "mtf_dimension_name_to_size_gcd.get"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get"], ["", "def", "_initialize_mtf_dimension_name_to_size_gcd", "(", "self", ",", "mtf_graph", ")", ":", "\n", "    ", "\"\"\"Initializer for self._mtf_dimension_name_to_size_gcd.\n\n    Args:\n      mtf_graph: an mtf.Graph.\n\n    Returns:\n      A {string: int}, mapping the name of an MTF dimension to the greatest\n      common divisor of all the sizes it has. All these sizes being evenly\n      divisible by some x is equivalent to the GCD being divisible by x.\n    \"\"\"", "\n", "mtf_dimension_name_to_size_gcd", "=", "{", "}", "\n", "for", "mtf_operation", "in", "mtf_graph", ".", "operations", ":", "\n", "      ", "for", "mtf_tensor", "in", "mtf_operation", ".", "outputs", ":", "\n", "        ", "for", "mtf_dimension", "in", "mtf_tensor", ".", "shape", ".", "dims", ":", "\n", "          ", "mtf_dimension_name_to_size_gcd", "[", "mtf_dimension", ".", "name", "]", "=", "math", ".", "gcd", "(", "\n", "mtf_dimension_name_to_size_gcd", ".", "get", "(", "mtf_dimension", ".", "name", ",", "\n", "mtf_dimension", ".", "size", ")", ",", "\n", "mtf_dimension", ".", "size", ")", "\n", "\n", "", "", "", "return", "mtf_dimension_name_to_size_gcd", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator._initialize_mesh_dimension_name_to_size": [[142, 155], ["None"], "methods", ["None"], ["", "def", "_initialize_mesh_dimension_name_to_size", "(", "self", ",", "mesh_shape", ")", ":", "\n", "    ", "\"\"\"Initializer for self._mesh_dimension_name_to_size.\n\n    Args:\n      mesh_shape: an mtf.Shape.\n\n    Returns:\n      A {string: int} mapping mesh dimension names to their sizes.\n    \"\"\"", "\n", "mesh_dimension_name_to_size", "=", "{", "}", "# {string: int}", "\n", "for", "mesh_dimension", "in", "mesh_shape", ".", "dims", ":", "\n", "      ", "mesh_dimension_name_to_size", "[", "mesh_dimension", ".", "name", "]", "=", "mesh_dimension", ".", "size", "\n", "", "return", "mesh_dimension_name_to_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.__init__": [[61, 75], ["graph_interface.GraphInterface._initialize_operations", "graph_interface.GraphInterface._initialize_operation_name_to_id", "graph_interface.GraphInterface._initialize_tensor_name_to_ids", "set"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._initialize_operations", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._initialize_operation_name_to_id", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._initialize_tensor_name_to_ids"], ["def", "__init__", "(", "self", ",", "graph", ",", "canonical_device", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      graph: either a tf.Graph or mtf.Graph.\n      canonical_device: optional string, the name of the canonical device for\n          IsTensoronCanonicalDevice.\n    \"\"\"", "\n", "self", ".", "_graph", "=", "graph", "\n", "self", ".", "canonical_device", "=", "canonical_device", "\n", "self", ".", "_operations", "=", "self", ".", "_initialize_operations", "(", ")", "\n", "self", ".", "_operation_name_to_id", "=", "self", ".", "_initialize_operation_name_to_id", "(", ")", "\n", "self", ".", "_tensor_name_to_ids", "=", "self", ".", "_initialize_tensor_name_to_ids", "(", ")", "\n", "self", ".", "_final_tensors", "=", "set", "(", ")", "# set(tf.Tensor or mtf.Tensor)", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_num_operations": [[76, 83], ["len"], "methods", ["None"], ["", "def", "get_num_operations", "(", "self", ")", ":", "\n", "    ", "\"\"\"The number of operations in the graph.\n\n    Returns:\n      an integer, the number of operations.\n    \"\"\"", "\n", "return", "len", "(", "self", ".", "_operations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_operation_names": [[84, 92], ["None"], "methods", ["None"], ["", "def", "get_all_operation_names", "(", "self", ")", ":", "\n", "    ", "\"\"\"Generates the names of all operations in the graph.\n\n    Yields:\n      a string, the name of an operation.\n    \"\"\"", "\n", "for", "operation", "in", "self", ".", "_operations", ":", "\n", "      ", "yield", "operation", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names": [[93, 104], ["graph_interface.GraphInterface._name_to_operation"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._name_to_operation"], ["", "", "def", "get_operation_input_names", "(", "self", ",", "operation_name", ")", ":", "\n", "    ", "\"\"\"Generates the names of all input tensors of an operation.\n\n    Args:\n      operation_name: a string, the name of an operation in the graph.\n\n    Yields:\n      a string, the name of an input tensor.\n    \"\"\"", "\n", "for", "input_tensor", "in", "self", ".", "_name_to_operation", "(", "operation_name", ")", ".", "inputs", ":", "\n", "      ", "yield", "input_tensor", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_output_names": [[105, 116], ["graph_interface.GraphInterface._name_to_operation"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._name_to_operation"], ["", "", "def", "get_operation_output_names", "(", "self", ",", "operation_name", ")", ":", "\n", "    ", "\"\"\"Generates the names of all output tensors of an operation.\n\n    Args:\n      operation_name: a string, the name of an operation in the graph.\n\n    Yields:\n      a string, the name of an output tensor.\n    \"\"\"", "\n", "for", "output_tensor", "in", "self", ".", "_name_to_operation", "(", "operation_name", ")", ".", "outputs", ":", "\n", "      ", "yield", "output_tensor", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_tensor_names": [[117, 125], ["graph_interface.GraphInterface._get_tensors"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._get_tensors"], ["", "", "def", "get_all_tensor_names", "(", "self", ")", ":", "\n", "    ", "\"\"\"Generates the names of all tensors in the graph.\n\n    Yields:\n      a string, the name of a tensor.\n    \"\"\"", "\n", "for", "tensor", "in", "self", ".", "_get_tensors", "(", ")", ":", "\n", "      ", "yield", "tensor", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_dtype": [[126, 136], ["graph_interface.GraphInterface._name_to_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._name_to_tensor"], ["", "", "def", "get_tensor_dtype", "(", "self", ",", "tensor_name", ")", ":", "\n", "    ", "\"\"\"The tf.Dtype of a tensor.\n\n    Args:\n      tensor_name: string, the name of a tensor in the graph.\n\n    Returns:\n      a tf.DType\n    \"\"\"", "\n", "return", "self", ".", "_name_to_tensor", "(", "tensor_name", ")", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_shape": [[137, 152], ["graph_interface.GraphInterface._name_to_tensor", "isinstance", "tensorflow.TensorShape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._name_to_tensor"], ["", "def", "get_tensor_shape", "(", "self", ",", "tensor_name", ")", ":", "\n", "    ", "\"\"\"The tf.TensorShape of a tensor.\n\n    Args:\n      tensor_name: string, the name of a tensor in the graph.\n\n    Returns:\n      a tf.TensorShape\n    \"\"\"", "\n", "tensor", "=", "self", ".", "_name_to_tensor", "(", "tensor_name", ")", "\n", "\n", "if", "isinstance", "(", "tensor", ",", "mtf", ".", "Tensor", ")", ":", "\n", "      ", "return", "tf", ".", "TensorShape", "(", "tensor", ".", "shape", ".", "to_integer_list", ")", "\n", "", "else", ":", "# tf.Tensor", "\n", "      ", "return", "tensor", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_num_entries": [[153, 188], ["graph_interface.GraphInterface.get_tensor_shape", "graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "int", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names"], ["", "", "def", "get_tensor_num_entries", "(", "self", ",", "tensor_name", ",", "partial_layout", "=", "None", ",", "\n", "mesh_dimension_to_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"The number of entries in a tensor.\n\n    If partial_layout is specified, then mesh_dimension_to_size must also be. In\n    this case, the number of entries on a single device is returned.\n\n    Args:\n      tensor_name: a string, name of a tensor in the graph.\n      partial_layout: an optional {string: string}, from MTF dimension name to\n          mesh dimension name.\n      mesh_dimension_to_size: an optional {string: int}, from mesh dimension\n          name to size.\n\n    Returns:\n      an integer\n    \"\"\"", "\n", "shape", "=", "self", ".", "get_tensor_shape", "(", "tensor_name", ")", "\n", "# We don't have to worry about divisiblity issues because Mesh TensorFlow", "\n", "# only allows evenly divisible assignments.", "\n", "num_entries", "=", "1", "\n", "for", "dim", "in", "shape", ".", "dims", ":", "\n", "      ", "num_entries", "=", "num_entries", "*", "dim", ".", "value", "\n", "\n", "", "if", "not", "partial_layout", ":", "\n", "      ", "return", "num_entries", "\n", "\n", "", "for", "mtf_dimension_name", "in", "self", ".", "get_tensor_mtf_dimension_names", "(", "tensor_name", ")", ":", "\n", "      ", "if", "mtf_dimension_name", "not", "in", "partial_layout", ":", "\n", "        ", "continue", "\n", "", "mesh_dimension_name", "=", "partial_layout", "[", "mtf_dimension_name", "]", "\n", "mesh_dimension_size", "=", "mesh_dimension_to_size", "[", "mesh_dimension_name", "]", "\n", "num_entries", "=", "int", "(", "math", ".", "ceil", "(", "num_entries", "/", "mesh_dimension_size", ")", ")", "\n", "\n", "", "return", "num_entries", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_size": [[189, 209], ["graph_interface.GraphInterface.get_tensor_num_entries", "graph_interface.GraphInterface.get_tensor_dtype"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_num_entries", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_dtype"], ["", "def", "get_tensor_size", "(", "self", ",", "tensor_name", ",", "partial_layout", "=", "None", ",", "\n", "mesh_dimension_to_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"The size of a tensor in bytes.\n\n    If partial_layout is specified, then mesh_dimension_to_size must also be. In\n    this case, the size on a single device is returned.\n\n    Args:\n      tensor_name: a string, name of a tensor in the graph.\n      partial_layout: an optional {string: string}, from MTF dimension name to\n          mesh dimension name.\n      mesh_dimension_to_size: an optional {string: int}, from mesh dimension\n          name to size.\n\n    Returns:\n      an integer\n    \"\"\"", "\n", "return", "(", "self", ".", "get_tensor_dtype", "(", "tensor_name", ")", ".", "size", "*", "\n", "self", ".", "get_tensor_num_entries", "(", "tensor_name", ",", "partial_layout", ",", "\n", "mesh_dimension_to_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_device": [[210, 226], ["graph_interface.GraphInterface._name_to_tensor", "isinstance"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._name_to_tensor"], ["", "def", "get_tensor_device", "(", "self", ",", "tensor_name", ")", ":", "\n", "    ", "\"\"\"The device of a tensor.\n\n    Note that only tf tensors have device assignments.\n\n    Args:\n      tensor_name: a string, name of a tensor in the graph.\n\n    Returns:\n      a string or None, representing the device name.\n    \"\"\"", "\n", "tensor", "=", "self", ".", "_name_to_tensor", "(", "tensor_name", ")", "\n", "if", "isinstance", "(", "tensor", ",", "tf", ".", "Tensor", ")", ":", "\n", "      ", "return", "tensor", ".", "device", "\n", "", "else", ":", "# mtf.Tensor", "\n", "      ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device": [[227, 241], ["graph_interface.GraphInterface.get_tensor_device"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_device"], ["", "", "def", "is_tensor_on_canonical_device", "(", "self", ",", "tensor_name", ")", ":", "\n", "    ", "\"\"\"Whether the tensor is on the first (canonical) device.\n\n    Tensors not assigned to a device are assumed to be on all devices, including\n    the canonical device.\n\n    Args:\n      tensor_name: a string, name of a tensor in the graph.\n\n    Returns:\n      a boolean indicating whether the tensor is on the first device.\n    \"\"\"", "\n", "device", "=", "self", ".", "get_tensor_device", "(", "tensor_name", ")", "\n", "return", "not", "device", "or", "device", "==", "self", ".", "canonical_device", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_device": [[242, 258], ["graph_interface.GraphInterface._name_to_operation", "isinstance"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._name_to_operation"], ["", "def", "get_operation_device", "(", "self", ",", "operation_name", ")", ":", "\n", "    ", "\"\"\"The device of an operation.\n\n    Note that only tf operations have device assignments.\n\n    Args:\n      operation_name: a string, name of an operation in the graph.\n\n    Returns:\n      a string or None, representing the device name.\n    \"\"\"", "\n", "operation", "=", "self", ".", "_name_to_operation", "(", "operation_name", ")", "\n", "if", "isinstance", "(", "operation", ",", "tf", ".", "Operation", ")", ":", "\n", "      ", "return", "operation", ".", "device", "\n", "", "else", ":", "# mtf.Operation", "\n", "      ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names": [[259, 273], ["graph_interface.GraphInterface._name_to_tensor", "isinstance"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._name_to_tensor"], ["", "", "def", "get_tensor_mtf_dimension_names", "(", "self", ",", "tensor_name", ")", ":", "\n", "    ", "\"\"\"The Mesh TensorFlow dimensions associated with a tensor.\n\n    Args:\n      tensor_name: a string, name of a tensor in the graph.\n\n    Returns:\n      a [string], the names of Mesh TensorFlow dimensions.\n    \"\"\"", "\n", "tensor", "=", "self", ".", "_name_to_tensor", "(", "tensor_name", ")", "\n", "if", "isinstance", "(", "tensor", ",", "mtf", ".", "Tensor", ")", ":", "\n", "      ", "return", "tensor", ".", "shape", ".", "dimension_names", "\n", "", "else", ":", "# tf.Tensor", "\n", "      ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names": [[274, 291], ["set", "graph_interface.GraphInterface.get_operation_input_names", "graph_interface.GraphInterface.get_operation_output_names", "set.update", "set.update", "graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "graph_interface.GraphInterface.get_tensor_mtf_dimension_names"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_output_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names"], ["", "", "def", "get_operation_mtf_dimension_names", "(", "self", ",", "operation_name", ")", ":", "\n", "    ", "\"\"\"The Mesh TensorFlow dimensions associated with an operation.\n\n    Args:\n      operation_name: a string, name of an operation in the graph.\n\n    Returns:\n      a set(string), the names of Mesh TensorFlow dimensions.\n    \"\"\"", "\n", "mtf_dimension_names", "=", "set", "(", ")", "\n", "for", "tensor_name", "in", "self", ".", "get_operation_input_names", "(", "operation_name", ")", ":", "\n", "      ", "mtf_dimension_names", ".", "update", "(", "self", ".", "get_tensor_mtf_dimension_names", "(", "\n", "tensor_name", ")", ")", "\n", "", "for", "tensor_name", "in", "self", ".", "get_operation_output_names", "(", "operation_name", ")", ":", "\n", "      ", "mtf_dimension_names", ".", "update", "(", "self", ".", "get_tensor_mtf_dimension_names", "(", "\n", "tensor_name", ")", ")", "\n", "", "return", "mtf_dimension_names", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.set_tensor_final": [[292, 300], ["graph_interface.GraphInterface._name_to_tensor", "graph_interface.GraphInterface._final_tensors.add"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._name_to_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add"], ["", "def", "set_tensor_final", "(", "self", ",", "tensor_name", ")", ":", "\n", "    ", "\"\"\"Denotes a tensor as a final output of the computation.\n\n    Args:\n      tensor_name: a string, name of a tensor in the graph.\n    \"\"\"", "\n", "tensor", "=", "self", ".", "_name_to_tensor", "(", "tensor_name", ")", "\n", "self", ".", "_final_tensors", ".", "add", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_final": [[301, 312], ["graph_interface.GraphInterface._name_to_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._name_to_tensor"], ["", "def", "is_tensor_final", "(", "self", ",", "tensor_name", ")", ":", "\n", "    ", "\"\"\"Whether a tensor is a final output of the computation.\n\n    Args:\n      tensor_name: a string, name of a tensor in the graph.\n\n    Returns:\n      a boolean indicating whether the tensor was a final output.\n    \"\"\"", "\n", "tensor", "=", "self", ".", "_name_to_tensor", "(", "tensor_name", ")", "\n", "return", "tensor", "in", "self", ".", "_final_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.compute_cost_graph": [[313, 366], ["tensorflow.core.framework.cost_graph_pb2.CostGraphDef", "enumerate", "graph_interface.GraphInterface.get_all_operation_names", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.node.add", "graph_interface.GraphInterface.get_operation_input_names", "graph_interface.GraphInterface.get_operation_output_names", "cost_graph_pb2.CostGraphDef.node.add.input_info.add", "graph_interface.GraphInterface.get_tensor_device", "graph_interface.GraphInterface.is_tensor_final", "graph_interface.GraphInterface.get_operation_device", "cost_graph_pb2.CostGraphDef.node.add.output_info.add", "cost_graph_pb2.CostGraphDef.node.add.output_info.add", "graph_interface.GraphInterface.get_tensor_size", "graph_interface.GraphInterface.get_tensor_shape().as_proto", "graph_interface.GraphInterface.get_tensor_dtype", "graph_interface.GraphInterface.get_tensor_dtype", "graph_interface.GraphInterface.get_tensor_shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_operation_names", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_output_names", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_device", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_size", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_dtype", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_dtype", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_shape"], ["", "def", "compute_cost_graph", "(", "self", ",", "devices", "=", "None", ")", ":", "\n", "    ", "\"\"\"Computes a CostGraphDef protobuf based on this graph.\n\n    Defined in tensorflow/core/framework/cost_graph.proto.\n\n    Args:\n      devices: optional [string], the names of devices to consider. If\n          specified, any tensor on a device not listed is given a size of zero.\n          Any device-less tensor (e.g. Mesh TensorFlow tensor) is not affected.\n\n    Returns:\n      a CostGraphDef protobuf with a Node for every operation in the graph, each\n      of which is populated with size/dtype information for its inputs and\n      outputs (which match the input/output order of the operation).\n    \"\"\"", "\n", "cost_graph_def", "=", "cost_graph_pb2", ".", "CostGraphDef", "(", ")", "\n", "\n", "for", "i", ",", "operation_name", "in", "enumerate", "(", "self", ".", "get_all_operation_names", "(", ")", ")", ":", "\n", "      ", "node", "=", "cost_graph_def", ".", "node", ".", "add", "(", "\n", "name", "=", "operation_name", ",", "\n", "device", "=", "self", ".", "get_operation_device", "(", "operation_name", ")", ",", "\n", "id", "=", "i", ")", "\n", "for", "input_name", "in", "self", ".", "get_operation_input_names", "(", "operation_name", ")", ":", "\n", "        ", "id1", ",", "id2", "=", "self", ".", "_tensor_name_to_ids", "[", "input_name", "]", "\n", "node", ".", "input_info", ".", "add", "(", "preceding_node", "=", "id1", ",", "preceding_port", "=", "id2", ")", "\n", "\n", "", "for", "output_name", "in", "self", ".", "get_operation_output_names", "(", "operation_name", ")", ":", "\n", "        ", "tensor_device", "=", "self", ".", "get_tensor_device", "(", "output_name", ")", "\n", "# devices = [] is not the same as None, and tensor_device = '' is also", "\n", "# not the same as None.", "\n", "if", "devices", "is", "None", "or", "tensor_device", "is", "None", "or", "tensor_device", "in", "devices", ":", "\n", "          ", "node", ".", "output_info", ".", "add", "(", "\n", "size", "=", "self", ".", "get_tensor_size", "(", "output_name", ")", ",", "\n", "alias_input_port", "=", "-", "1", ",", "\n", "dtype", "=", "self", ".", "get_tensor_dtype", "(", "output_name", ")", ".", "as_datatype_enum", ",", "\n", "shape", "=", "self", ".", "get_tensor_shape", "(", "output_name", ")", ".", "as_proto", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "          ", "node", ".", "output_info", ".", "add", "(", "\n", "size", "=", "0", ",", "\n", "alias_input_port", "=", "-", "1", ",", "\n", "dtype", "=", "self", ".", "get_tensor_dtype", "(", "output_name", ")", ".", "as_datatype_enum", ",", "\n", ")", "\n", "\n", "# NOTE(joshuawang): Unfortunately, the CostGraphDef protobuf has final", "\n", "# operations, not tensors. As a result, we have to declare any operation", "\n", "# that outputs a final tensor as final, which may expand the final set", "\n", "# of tensors to keep in memory. This issue also arises in the scheduler", "\n", "# code we will interface with.", "\n", "", "if", "self", ".", "is_tensor_final", "(", "output_name", ")", ":", "\n", "          ", "node", ".", "is_final", "=", "True", "\n", "\n", "", "", "", "return", "cost_graph_def", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.compute_memory_contents_under_schedule": [[367, 408], ["graph_interface.GraphInterface._compute_initial_out_degree", "set", "graph_interface.GraphInterface.get_operation_output_names", "memory_contents_for_each_operation.append", "graph_interface.GraphInterface.get_operation_output_names", "graph_interface.GraphInterface.get_operation_input_names", "set.add", "frozenset", "set.remove", "set.remove"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._compute_initial_out_degree", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_output_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_output_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add"], ["", "def", "compute_memory_contents_under_schedule", "(", "self", ",", "schedule", ")", ":", "\n", "    ", "\"\"\"The in-memory tensors present when executing each operation in schedule.\n\n    Simulates running operations in the order given by a schedule. Keeps track\n    of the tensors in memory at every point in time, and outputs a list (one\n    entry for each point in time) of all sets of all memory contents (i.e. a\n    frozenset of strings) ever seen in this execution.\n\n    It is assumed (but not checked) that schedule is a valid topological sort of\n    the operations in this graph.\n\n    Args:\n      schedule: A list of integer ids; the order to run operations in.\n\n    Returns:\n      a list of frozenset of strings, where the ith entry describes the tensors\n      in memory when executing operation i (where schedule[i] is an index into\n      get_all_operation_names()).\n    \"\"\"", "\n", "out_degree", "=", "self", ".", "_compute_initial_out_degree", "(", ")", "\n", "\n", "curr_memory_contents", "=", "set", "(", ")", "\n", "memory_contents_for_each_operation", "=", "[", "]", "\n", "\n", "for", "operation_id", "in", "schedule", ":", "\n", "      ", "operation_name", "=", "self", ".", "_operations", "[", "operation_id", "]", ".", "name", "\n", "# Allocate new memory to perform the computation at this node.", "\n", "for", "output_name", "in", "self", ".", "get_operation_output_names", "(", "operation_name", ")", ":", "\n", "        ", "curr_memory_contents", ".", "add", "(", "output_name", ")", "\n", "", "memory_contents_for_each_operation", ".", "append", "(", "frozenset", "(", "curr_memory_contents", ")", ")", "\n", "\n", "# Free any tensors which are no longer needed.", "\n", "for", "output_name", "in", "self", ".", "get_operation_output_names", "(", "operation_name", ")", ":", "\n", "        ", "if", "out_degree", "[", "output_name", "]", "==", "0", ":", "\n", "          ", "curr_memory_contents", ".", "remove", "(", "output_name", ")", "\n", "", "", "for", "input_name", "in", "self", ".", "get_operation_input_names", "(", "operation_name", ")", ":", "\n", "        ", "out_degree", "[", "input_name", "]", "-=", "1", "\n", "if", "out_degree", "[", "input_name", "]", "==", "0", ":", "\n", "          ", "curr_memory_contents", ".", "remove", "(", "input_name", ")", "\n", "\n", "", "", "", "return", "memory_contents_for_each_operation", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._initialize_operations": [[409, 425], ["isinstance", "graph_interface.GraphInterface._graph.get_operations", "isinstance", "TypeError", "type"], "methods", ["None"], ["", "def", "_initialize_operations", "(", "self", ")", ":", "\n", "    ", "\"\"\"Initializer for _operations.\n\n    Raises:\n      TypeError: _graph is not a tf.Graph or mtf.Graph.\n\n    Returns:\n      a list of (tf.Operation or mtf.Operation)\n    \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "_graph", ",", "tf", ".", "Graph", ")", ":", "\n", "      ", "return", "self", ".", "_graph", ".", "get_operations", "(", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "_graph", ",", "mtf", ".", "Graph", ")", ":", "\n", "      ", "return", "self", ".", "_graph", ".", "operations", "\n", "", "else", ":", "\n", "      ", "raise", "TypeError", "(", "'Graph is not tf.Graph or mtf.Graph: {}'", "\n", ".", "format", "(", "type", "(", "self", ".", "_graph", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._initialize_operation_name_to_id": [[426, 436], ["enumerate"], "methods", ["None"], ["", "", "def", "_initialize_operation_name_to_id", "(", "self", ")", ":", "\n", "    ", "\"\"\"Initializer for _operation_name_to_id.\n\n    Returns:\n      a {string: int}, mapping operation names to their index in _operations.\n    \"\"\"", "\n", "operation_name_to_id", "=", "{", "}", "\n", "for", "i", ",", "operation", "in", "enumerate", "(", "self", ".", "_operations", ")", ":", "\n", "      ", "operation_name_to_id", "[", "operation", ".", "name", "]", "=", "i", "\n", "", "return", "operation_name_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._initialize_tensor_name_to_ids": [[437, 449], ["enumerate", "enumerate"], "methods", ["None"], ["", "def", "_initialize_tensor_name_to_ids", "(", "self", ")", ":", "\n", "    ", "\"\"\"Initializer for _tensor_name_to_ids.\n\n    Returns:\n      a {string: (int, int)}, mapping the name of tensor T to the index of T's\n          operation in _operations and T's index in T's operation's outputs.\n    \"\"\"", "\n", "tensor_name_to_ids", "=", "{", "}", "\n", "for", "i", ",", "operation", "in", "enumerate", "(", "self", ".", "_operations", ")", ":", "\n", "      ", "for", "j", ",", "tensor", "in", "enumerate", "(", "operation", ".", "outputs", ")", ":", "\n", "        ", "tensor_name_to_ids", "[", "tensor", ".", "name", "]", "=", "(", "i", ",", "j", ")", "\n", "", "", "return", "tensor_name_to_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._get_tensors": [[450, 459], ["None"], "methods", ["None"], ["", "def", "_get_tensors", "(", "self", ")", ":", "\n", "    ", "\"\"\"Generator for all tensors.\n\n    Yields:\n      a tf.Tensor or mtf.Tensor\n    \"\"\"", "\n", "for", "operation", "in", "self", ".", "_operations", ":", "\n", "      ", "for", "tensor", "in", "operation", ".", "outputs", ":", "\n", "        ", "yield", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._name_to_operation": [[460, 470], ["None"], "methods", ["None"], ["", "", "", "def", "_name_to_operation", "(", "self", ",", "operation_name", ")", ":", "\n", "    ", "\"\"\"The operation with the given name.\n\n    Args:\n      operation_name: a string, name of a operation in the graph.\n\n    Returns:\n      a tf.Operation or mtf.Operation\n    \"\"\"", "\n", "return", "self", ".", "_operations", "[", "self", ".", "_operation_name_to_id", "[", "operation_name", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._name_to_tensor": [[471, 482], ["None"], "methods", ["None"], ["", "def", "_name_to_tensor", "(", "self", ",", "tensor_name", ")", ":", "\n", "    ", "\"\"\"The tensor with the given name.\n\n    Args:\n      tensor_name: a string, name of a tensor in the graph.\n\n    Returns:\n      a tf.Tensor or mtf.Tensor\n    \"\"\"", "\n", "id1", ",", "id2", "=", "self", ".", "_tensor_name_to_ids", "[", "tensor_name", "]", "\n", "return", "self", ".", "_operations", "[", "id1", "]", ".", "outputs", "[", "id2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface._compute_initial_out_degree": [[483, 503], ["collections.defaultdict", "graph_interface.GraphInterface.get_all_tensor_names", "graph_interface.GraphInterface.get_all_operation_names", "graph_interface.GraphInterface.is_tensor_final", "graph_interface.GraphInterface.get_operation_input_names"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_tensor_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_operation_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names"], ["", "def", "_compute_initial_out_degree", "(", "self", ")", ":", "\n", "    ", "\"\"\"The number of operations which use each tensor as input.\n\n    Returns:\n      a {string, int} mapping tensor name to the number of operations which use\n      it as input, or one plus that quantity if the tensor is final.\n    \"\"\"", "\n", "out_degree", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "\n", "# Pretend that final tensors have an additional degree so they are not", "\n", "# freed.", "\n", "for", "tensor_name", "in", "self", ".", "get_all_tensor_names", "(", ")", ":", "\n", "      ", "if", "self", ".", "is_tensor_final", "(", "tensor_name", ")", ":", "\n", "        ", "out_degree", "[", "tensor_name", "]", "=", "1", "\n", "\n", "", "", "for", "operation_name", "in", "self", ".", "get_all_operation_names", "(", ")", ":", "\n", "      ", "for", "input_name", "in", "self", ".", "get_operation_input_names", "(", "operation_name", ")", ":", "\n", "        ", "out_degree", "[", "input_name", "]", "+=", "1", "\n", "\n", "", "", "return", "out_degree", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api.layout": [[45, 62], ["mesh_tensorflow.convert_to_shape", "mesh_tensorflow.auto_mtf.memory_estimator.MemoryEstimator", "mesh_tensorflow.auto_mtf.layout_optimizer.LayoutOptimizer", "mesh_tensorflow.convert_to_layout_rules", "layout_optimizer.LayoutOptimizer.solve"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.solve"], ["def", "layout", "(", "mtf_graph", ",", "mesh_shape", ",", "mtf_outputs", "=", "(", ")", ")", ":", "\n", "  ", "\"\"\"Compute layout rules based on a computational graph and mesh shape.\n\n  Args:\n    mtf_graph: a mtf.Graph.\n    mesh_shape: an mtf.Shape, str, or listlike of mtf.Dimension.\n    mtf_outputs: an optional iterable of mtf.Tensor, representing the outputs\n        of the computation.\n\n  Returns:\n    a mtf.LayoutRules\n  \"\"\"", "\n", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "mesh_shape", ")", "\n", "estimator", "=", "memory_estimator", ".", "MemoryEstimator", "(", "mtf_graph", ",", "mesh_shape", ",", "\n", "mtf_outputs", ")", "\n", "optimizer", "=", "layout_optimizer", ".", "LayoutOptimizer", "(", "estimator", ")", "\n", "return", "mtf", ".", "convert_to_layout_rules", "(", "optimizer", ".", "solve", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api.layout_and_mesh_shape": [[64, 105], ["api._mesh_shape_iterator", "mesh_tensorflow.Shape", "tensorflow.logging.info", "mesh_tensorflow.auto_mtf.memory_estimator.MemoryEstimator", "mesh_tensorflow.auto_mtf.layout_optimizer.LayoutOptimizer", "layout_optimizer.LayoutOptimizer.solve", "layout_optimizer.LayoutOptimizer.evaluate_layout", "mesh_tensorflow.Dimension", "mesh_tensorflow.convert_to_layout_rules", "enumerate"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.solve", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules"], ["", "def", "layout_and_mesh_shape", "(", "mtf_graph", ",", "num_machines", ",", "mtf_outputs", "=", "(", ")", ",", "\n", "max_mesh_shape_dimensions", "=", "2", ")", ":", "\n", "  ", "\"\"\"Compute layout rules and mesh shape based on computational graph.\n\n  Brute-forces over all possible mesh shapes to find a (layout, mesh_shape)\n  pair. Note that the layout optimizer is more efficient when the mesh_shape has\n  fewer dimensions, so a smaller max_mesh_shape_dimensions makes this call\n  faster.\n\n  Args:\n    mtf_graph: a mtf.Graph.\n    num_machines: integer, a power of two, the number of machines available.\n    mtf_outputs: an optional iterable of mtf.Tensor, representing the outputs\n        of the computation.\n    max_mesh_shape_dimensions: optional integer, the maximum number of\n        dimensions to consider in any layout. For example, num_machines=1024 and\n        max_mesh_shape_dimensions=2 results in testing the mesh shapes\n        \"mesh_0:1024\", \"mesh_0:512;mesh_1:2\", \"mesh_0:256;mesh_1:4\",\n        \"mesh_0:128;mesh_1:8\", \"mesh_0:64;mesh_1:16\", and \"mesh_0:32;mesh_1:32\".\n        If set to None, there is no maximum.\n\n  Returns:\n    a (mtf.LayoutRules, mtf.Shape) tuple.\n  \"\"\"", "\n", "best_layout_and_mesh_shape", "=", "(", "None", ",", "None", ")", "\n", "best_value", "=", "None", "\n", "for", "mesh_shape_list", "in", "_mesh_shape_iterator", "(", "num_machines", ",", "\n", "max_mesh_shape_dimensions", ")", ":", "\n", "    ", "mesh_shape", "=", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"mesh_{}\"", ".", "format", "(", "i", ")", ",", "size", ")", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "mesh_shape_list", ")", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Computing layout for mesh shape: {}\"", ".", "format", "(", "mesh_shape", ")", ")", "\n", "estimator", "=", "memory_estimator", ".", "MemoryEstimator", "(", "mtf_graph", ",", "mesh_shape", ",", "\n", "mtf_outputs", ")", "\n", "optimizer", "=", "layout_optimizer", ".", "LayoutOptimizer", "(", "estimator", ")", "\n", "layout_string", "=", "optimizer", ".", "solve", "(", ")", "\n", "value", "=", "optimizer", ".", "evaluate_layout", "(", "layout_string", ")", "\n", "if", "best_value", "is", "None", "or", "value", "<", "best_value", ":", "\n", "      ", "best_value", "=", "value", "\n", "best_layout_and_mesh_shape", "=", "(", "mtf", ".", "convert_to_layout_rules", "(", "layout_string", ")", ",", "\n", "mesh_shape", ")", "\n", "", "", "return", "best_layout_and_mesh_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.api._mesh_shape_iterator": [[107, 137], ["mesh_shape.pop", "mesh_shape.append", "len", "list", "min"], "function", ["None"], ["", "def", "_mesh_shape_iterator", "(", "num_machines", ",", "max_mesh_shape_dimensions", "=", "None", ")", ":", "\n", "  ", "\"\"\"Iterable of mesh shapes that use a certain number of machines.\n\n  Args:\n    num_machines: integer, a power of two, the number of machines available.\n    max_mesh_shape_dimensions: optional integer, the maximum number of\n        dimensions to consider in any layout.\n\n  Yields:\n    [int], the dimension sizes of a mesh shape.\n  \"\"\"", "\n", "if", "num_machines", "==", "1", ":", "\n", "    ", "yield", "[", "1", "]", "\n", "return", "\n", "\n", "", "current_product", "=", "num_machines", "\n", "mesh_shape", "=", "[", "num_machines", "]", "\n", "while", "True", ":", "\n", "    ", "if", "(", "max_mesh_shape_dimensions", "is", "None", "\n", "or", "len", "(", "mesh_shape", ")", "<=", "max_mesh_shape_dimensions", ")", ":", "\n", "      ", "yield", "list", "(", "mesh_shape", ")", "\n", "", "while", "mesh_shape", "[", "-", "1", "]", "==", "2", ":", "\n", "      ", "current_product", "//=", "mesh_shape", ".", "pop", "(", ")", "\n", "if", "not", "mesh_shape", ":", "\n", "        ", "return", "\n", "", "", "mesh_shape", "[", "-", "1", "]", "//=", "2", "\n", "current_product", "//=", "2", "\n", "while", "current_product", "<", "num_machines", ":", "\n", "      ", "mesh_shape", ".", "append", "(", "min", "(", "mesh_shape", "[", "-", "1", "]", ",", "num_machines", "//", "current_product", ")", ")", "\n", "current_product", "*=", "mesh_shape", "[", "-", "1", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler.minimize_peak_memory": [[35, 53], ["scheduler._minimize_peak_memory_naive", "scheduler._minimize_peak_memory_list", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler._minimize_peak_memory_naive", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler._minimize_peak_memory_list"], ["def", "minimize_peak_memory", "(", "graph", ",", "scheduler_alg", ")", ":", "\n", "  ", "\"\"\"Computes a schedule to minimize peak memory.\n\n  Args:\n    graph: an mtf.auto_mtf.graph_interface.GraphInterface.\n    scheduler_alg: a string, one of 'NAIVE' or 'LIST'\n\n  Returns:\n    an iterable of integers representing the schedule.\n  \"\"\"", "\n", "if", "scheduler_alg", "==", "'NAIVE'", ":", "\n", "    ", "return", "_minimize_peak_memory_naive", "(", "graph", ")", "\n", "", "elif", "scheduler_alg", "==", "'LIST'", ":", "\n", "    ", "return", "_minimize_peak_memory_list", "(", "graph", ")", "\n", "", "else", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'{} is not a scheduler algorithm. It should be '", "\n", "'one of NAIVE or LIST.'", "\n", ".", "format", "(", "scheduler_alg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler._minimize_peak_memory_naive": [[55, 65], ["six.moves.range", "graph.get_num_operations"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_num_operations"], ["", "", "def", "_minimize_peak_memory_naive", "(", "graph", ")", ":", "\n", "  ", "\"\"\"Computes the naive schedule [0, 1, 2, ...].\n\n  Args:\n    graph: an mtf.auto_mtf.graph_interface.GraphInterface.\n\n  Returns:\n    an iterable of integers representing the schedule.\n  \"\"\"", "\n", "return", "six", ".", "moves", ".", "range", "(", "graph", ".", "get_num_operations", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler._minimize_peak_memory_list": [[67, 155], ["collections.defaultdict", "collections.defaultdict", "enumerate", "graph.get_all_operation_names", "graph.get_all_operation_names", "graph.get_all_operation_names", "graph.get_operation_input_names", "graph.get_operation_input_names", "graph.get_operation_output_names", "heapq.heappop", "schedule.append", "graph.get_operation_output_names", "graph.get_operation_input_names", "users_of[].add", "heapq.heappush", "users_of[].remove", "graph.get_tensor_size", "heapq.heappush", "graph.get_tensor_size", "graph.is_tensor_final", "graph.get_tensor_size", "graph.is_tensor_final", "len", "graph.is_tensor_final", "heapq.heappush", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_operation_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_operation_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_operation_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_output_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_output_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_size", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_size", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_size", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_final"], ["", "def", "_minimize_peak_memory_list", "(", "graph", ")", ":", "\n", "  ", "\"\"\"Computes schedule according to the greedy list heuristic.\n\n  Greedy list heuristic: schedule the operation which results in the most bytes\n  of memory being (immediately) freed.\n  TODO(joshuawang): Experiment with tiebreaking by preferring more successors.\n\n  Args:\n    graph: an mtf.auto_mtf.graph_interface.GraphInterface.\n\n  Returns:\n    an iterable of integers representing the schedule.\n  \"\"\"", "\n", "schedule", "=", "[", "]", "\n", "bytes_freed", "=", "{", "}", "# {operation_name: bytes freed}", "\n", "users_of", "=", "collections", ".", "defaultdict", "(", "set", ")", "# {tensor_name: set(operation_name)}", "\n", "in_degree", "=", "collections", ".", "defaultdict", "(", "int", ")", "# {operation_name: in degree}", "\n", "operation_id", "=", "{", "}", "# {operation_name: id}", "\n", "# We want an updatable priority queue, so we use the following workaround:", "\n", "# docs.python.org/2/library/heapq.html#priority-queue-implementation-notes", "\n", "priority_queue", "=", "[", "]", "# (negative bytes freed, operation name)", "\n", "\n", "# Set up the (greedy) topological sort.", "\n", "for", "i", ",", "operation_name", "in", "enumerate", "(", "graph", ".", "get_all_operation_names", "(", ")", ")", ":", "\n", "    ", "operation_id", "[", "operation_name", "]", "=", "i", "\n", "\n", "for", "input_name", "in", "graph", ".", "get_operation_input_names", "(", "operation_name", ")", ":", "\n", "# Note that in _HybridGraphInterface, an operation may use a tensor twice,", "\n", "# but we deduplicate (with respect to in_degree) so that we can later use", "\n", "# users_of to decrement in_degree.", "\n", "      ", "if", "operation_name", "in", "users_of", "[", "input_name", "]", ":", "\n", "        ", "continue", "\n", "", "users_of", "[", "input_name", "]", ".", "add", "(", "operation_name", ")", "\n", "in_degree", "[", "operation_name", "]", "+=", "1", "\n", "\n", "", "", "for", "operation_name", "in", "graph", ".", "get_all_operation_names", "(", ")", ":", "\n", "    ", "bytes_freed", "[", "operation_name", "]", "=", "0", "\n", "# For each input, this operation frees memory if it is the final consumer.", "\n", "for", "input_name", "in", "graph", ".", "get_operation_input_names", "(", "operation_name", ")", ":", "\n", "      ", "if", "len", "(", "users_of", "[", "input_name", "]", ")", "==", "1", "and", "not", "graph", ".", "is_tensor_final", "(", "\n", "input_name", ")", ":", "\n", "        ", "bytes_freed", "[", "operation_name", "]", "+=", "graph", ".", "get_tensor_size", "(", "input_name", ")", "\n", "# For each output, this operation will require additional bytes of memory", "\n", "# (hence negative bytes freed).", "\n", "", "", "for", "output_name", "in", "graph", ".", "get_operation_output_names", "(", "operation_name", ")", ":", "\n", "# If the output is used (or is final), then it eats memory.", "\n", "      ", "if", "users_of", "[", "output_name", "]", "or", "graph", ".", "is_tensor_final", "(", "output_name", ")", ":", "\n", "        ", "bytes_freed", "[", "operation_name", "]", "-=", "graph", ".", "get_tensor_size", "(", "output_name", ")", "\n", "\n", "", "", "", "for", "operation_name", "in", "graph", ".", "get_all_operation_names", "(", ")", ":", "\n", "    ", "if", "in_degree", "[", "operation_name", "]", "==", "0", ":", "\n", "      ", "heapq", ".", "heappush", "(", "priority_queue", ",", "\n", "(", "-", "bytes_freed", "[", "operation_name", "]", ",", "operation_name", ")", ")", "\n", "\n", "# Do the (greedy) topological sort.", "\n", "", "", "while", "priority_queue", ":", "\n", "    ", "neg_bytes_freed", ",", "operation_name", "=", "heapq", ".", "heappop", "(", "priority_queue", ")", "\n", "if", "bytes_freed", "[", "operation_name", "]", "!=", "-", "neg_bytes_freed", ":", "\n", "      ", "continue", "\n", "", "schedule", ".", "append", "(", "operation_id", "[", "operation_name", "]", ")", "\n", "bytes_freed", "[", "operation_name", "]", "=", "None", "\n", "\n", "for", "output_name", "in", "graph", ".", "get_operation_output_names", "(", "operation_name", ")", ":", "\n", "      ", "for", "other_operation_name", "in", "users_of", "[", "output_name", "]", ":", "\n", "        ", "in_degree", "[", "other_operation_name", "]", "-=", "1", "\n", "if", "in_degree", "[", "other_operation_name", "]", "==", "0", ":", "\n", "          ", "heapq", ".", "heappush", "(", "priority_queue", ",", "\n", "(", "-", "bytes_freed", "[", "other_operation_name", "]", ",", "\n", "other_operation_name", ")", ")", "\n", "\n", "", "", "", "for", "input_name", "in", "graph", ".", "get_operation_input_names", "(", "operation_name", ")", ":", "\n", "      ", "if", "operation_name", "not", "in", "users_of", "[", "input_name", "]", ":", "\n", "# Used twice by this operation and hence already removed.", "\n", "        ", "continue", "\n", "", "users_of", "[", "input_name", "]", ".", "remove", "(", "operation_name", ")", "\n", "if", "len", "(", "users_of", "[", "input_name", "]", ")", "!=", "1", "or", "graph", ".", "is_tensor_final", "(", "output_name", ")", ":", "\n", "        ", "continue", "\n", "", "(", "other_operation_name", ",", ")", "=", "users_of", "[", "input_name", "]", "\n", "bytes_freed", "[", "other_operation_name", "]", "+=", "graph", ".", "get_tensor_size", "(", "\n", "input_name", ")", "\n", "if", "in_degree", "[", "other_operation_name", "]", ">", "0", ":", "\n", "        ", "continue", "\n", "# Push another copy into the priority queue with our updated value.", "\n", "# The original copy will be ignored since it does not match bytes_freed.", "\n", "", "heapq", ".", "heappush", "(", "priority_queue", ",", "(", "-", "bytes_freed", "[", "other_operation_name", "]", ",", "\n", "other_operation_name", ")", ")", "\n", "\n", "", "", "return", "schedule", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface_test.GraphInterfaceTest.setUp": [[32, 141], ["super().setUp", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef", "graph_interface_test.GraphInterfaceTest.StripCostGraphDef", "graph_interface_test.GraphInterfaceTest.StripCostGraphDef", "graph_interface_test.GraphInterfaceTest._cost_graph.SerializeToString", "graph_interface_test.GraphInterfaceTest._sizeless_cost_graph.SerializeToString", "graph_interface_test.GraphInterfaceTest._deviceless_cost_graph.SerializeToString", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node.OutputInfo", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node.OutputInfo", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node.InputInfo", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node.InputInfo", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node.OutputInfo", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node.InputInfo", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node.InputInfo", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.Node.OutputInfo", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto.Dim", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto.Dim", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto.Dim", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto.Dim", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto.Dim", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto.Dim", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto.Dim", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto.Dim"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface_test.GraphInterfaceTest.StripCostGraphDef", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface_test.GraphInterfaceTest.StripCostGraphDef"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "GraphInterfaceTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "_cost_graph", "=", "cost_graph_pb2", ".", "CostGraphDef", "(", "\n", "node", "=", "[", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", "(", "\n", "name", "=", "\"X\"", ",", "\n", "device", "=", "\"/device:CPU:0\"", ",", "\n", "id", "=", "0", ",", "\n", "output_info", "=", "[", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", ".", "OutputInfo", "(", "\n", "size", "=", "48", ",", "\n", "alias_input_port", "=", "-", "1", ",", "\n", "dtype", "=", "types_pb2", ".", "DT_INT32", ",", "\n", "shape", "=", "tensor_shape_pb2", ".", "TensorShapeProto", "(", "\n", "dim", "=", "[", "\n", "tensor_shape_pb2", ".", "TensorShapeProto", ".", "Dim", "(", "size", "=", "3", ")", ",", "\n", "tensor_shape_pb2", ".", "TensorShapeProto", ".", "Dim", "(", "size", "=", "4", ")", ",", "\n", "]", "\n", ")", "\n", ")", ",", "\n", "]", ",", "\n", ")", ",", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", "(", "\n", "name", "=", "\"Y\"", ",", "\n", "device", "=", "\"/device:CPU:0\"", ",", "\n", "id", "=", "1", ",", "\n", "output_info", "=", "[", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", ".", "OutputInfo", "(", "\n", "size", "=", "80", ",", "\n", "alias_input_port", "=", "-", "1", ",", "\n", "dtype", "=", "types_pb2", ".", "DT_INT32", ",", "\n", "shape", "=", "tensor_shape_pb2", ".", "TensorShapeProto", "(", "\n", "dim", "=", "[", "\n", "tensor_shape_pb2", ".", "TensorShapeProto", ".", "Dim", "(", "size", "=", "4", ")", ",", "\n", "tensor_shape_pb2", ".", "TensorShapeProto", ".", "Dim", "(", "size", "=", "5", ")", ",", "\n", "]", "\n", ")", "\n", ")", ",", "\n", "]", ",", "\n", ")", ",", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", "(", "\n", "name", "=", "\"Z1\"", ",", "\n", "device", "=", "\"/device:CPU:0\"", ",", "\n", "id", "=", "2", ",", "\n", "input_info", "=", "[", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", ".", "InputInfo", "(", "\n", "preceding_node", "=", "0", ",", "\n", "preceding_port", "=", "0", ",", "\n", ")", ",", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", ".", "InputInfo", "(", "\n", "preceding_node", "=", "1", ",", "\n", "preceding_port", "=", "0", ",", "\n", ")", ",", "\n", "]", ",", "\n", "output_info", "=", "[", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", ".", "OutputInfo", "(", "\n", "size", "=", "60", ",", "\n", "alias_input_port", "=", "-", "1", ",", "\n", "dtype", "=", "types_pb2", ".", "DT_INT32", ",", "\n", "shape", "=", "tensor_shape_pb2", ".", "TensorShapeProto", "(", "\n", "dim", "=", "[", "\n", "tensor_shape_pb2", ".", "TensorShapeProto", ".", "Dim", "(", "size", "=", "3", ")", ",", "\n", "tensor_shape_pb2", ".", "TensorShapeProto", ".", "Dim", "(", "size", "=", "5", ")", ",", "\n", "]", "\n", ")", "\n", ")", ",", "\n", "]", ",", "\n", "is_final", "=", "True", ",", "\n", ")", ",", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", "(", "\n", "name", "=", "\"Z2\"", ",", "\n", "device", "=", "\"/device:CPU:0\"", ",", "\n", "id", "=", "3", ",", "\n", "input_info", "=", "[", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", ".", "InputInfo", "(", "\n", "preceding_node", "=", "0", ",", "\n", "preceding_port", "=", "0", ",", "\n", ")", ",", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", ".", "InputInfo", "(", "\n", "preceding_node", "=", "1", ",", "\n", "preceding_port", "=", "0", ",", "\n", ")", ",", "\n", "]", ",", "\n", "output_info", "=", "[", "\n", "cost_graph_pb2", ".", "CostGraphDef", ".", "Node", ".", "OutputInfo", "(", "\n", "size", "=", "60", ",", "\n", "alias_input_port", "=", "-", "1", ",", "\n", "dtype", "=", "types_pb2", ".", "DT_INT32", ",", "\n", "shape", "=", "tensor_shape_pb2", ".", "TensorShapeProto", "(", "\n", "dim", "=", "[", "\n", "tensor_shape_pb2", ".", "TensorShapeProto", ".", "Dim", "(", "size", "=", "3", ")", ",", "\n", "tensor_shape_pb2", ".", "TensorShapeProto", ".", "Dim", "(", "size", "=", "5", ")", ",", "\n", "]", "\n", ")", "\n", ")", ",", "\n", "]", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "_sizeless_cost_graph", "=", "self", ".", "StripCostGraphDef", "(", "\n", "self", ".", "_cost_graph", ",", "\"SIZES\"", ")", "\n", "self", ".", "_deviceless_cost_graph", "=", "self", ".", "StripCostGraphDef", "(", "\n", "self", ".", "_cost_graph", ",", "\"DEVICES\"", ")", "\n", "\n", "self", ".", "_cost_graph_string", "=", "self", ".", "_cost_graph", ".", "SerializeToString", "(", ")", "\n", "self", ".", "_sizeless_cost_graph_string", "=", "(", "\n", "self", ".", "_sizeless_cost_graph", ".", "SerializeToString", "(", ")", ")", "\n", "self", ".", "_deviceless_cost_graph_string", "=", "(", "\n", "self", ".", "_deviceless_cost_graph", ".", "SerializeToString", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface_test.GraphInterfaceTest.StripCostGraphDef": [[142, 165], ["tensorflow.core.framework.cost_graph_pb2.CostGraphDef", "tensorflow.core.framework.cost_graph_pb2.CostGraphDef.CopyFrom", "node.ClearField", "output_info.ClearField"], "methods", ["None"], ["", "def", "StripCostGraphDef", "(", "self", ",", "cost_graph", ",", "to_strip", ")", ":", "\n", "    ", "\"\"\"Removes fields from a CostGraphDef protobuf.\n\n    Helper method to reduce the initialization of CostGraphDef(s).\n\n    Args:\n      cost_graph: a CostGraphDef to strip.\n      to_strip: a string, either \"SIZES\" or \"DEVICES\".\n\n    Returns:\n      a new CostGraphDef with either size information or device information\n          stripped, as appropriate.\n    \"\"\"", "\n", "new_cost_graph", "=", "cost_graph_pb2", ".", "CostGraphDef", "(", ")", "\n", "new_cost_graph", ".", "CopyFrom", "(", "cost_graph", ")", "\n", "for", "node", "in", "new_cost_graph", ".", "node", ":", "\n", "      ", "if", "to_strip", "==", "\"SIZES\"", ":", "\n", "        ", "for", "output_info", "in", "node", ".", "output_info", ":", "\n", "          ", "output_info", ".", "size", "=", "0", "\n", "output_info", ".", "ClearField", "(", "\"shape\"", ")", "\n", "", "", "if", "to_strip", "==", "\"DEVICES\"", ":", "\n", "        ", "node", ".", "ClearField", "(", "\"device\"", ")", "\n", "", "", "return", "new_cost_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface_test.GraphInterfaceTest.VerifyGraphInterface": [[166, 210], ["graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph.set_tensor_final", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list", "graph.get_tensor_dtype", "graph.get_tensor_dtype", "graph.get_tensor_dtype", "graph.get_tensor_dtype", "graph.get_tensor_shape", "tensorflow.TensorShape", "graph.get_tensor_shape", "tensorflow.TensorShape", "graph.get_tensor_shape", "tensorflow.TensorShape", "graph.get_tensor_shape", "tensorflow.TensorShape", "graph.get_tensor_num_entries", "graph.get_tensor_num_entries", "graph.get_tensor_num_entries", "graph.get_tensor_num_entries", "graph.compute_memory_contents_under_schedule", "graph.compute_memory_contents_under_schedule", "graph.get_all_operation_names", "graph.get_operation_input_names", "graph.get_operation_input_names", "graph.get_operation_input_names", "graph.get_operation_input_names", "graph.get_operation_output_names", "graph.get_operation_output_names", "graph.get_operation_output_names", "graph.get_operation_output_names", "graph.get_all_tensor_names", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset", "frozenset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_dtype", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_dtype", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_dtype", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_dtype", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_num_entries", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_num_entries", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_num_entries", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_num_entries", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.compute_memory_contents_under_schedule", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.compute_memory_contents_under_schedule", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_operation_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_input_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_output_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_output_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_output_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_output_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_tensor_names"], ["", "def", "VerifyGraphInterface", "(", "self", ",", "graph", ")", ":", "\n", "    ", "self", ".", "assertEqual", "(", "list", "(", "graph", ".", "get_all_operation_names", "(", ")", ")", ",", "\n", "[", "\"X\"", ",", "\"Y\"", ",", "\"Z1\"", ",", "\"Z2\"", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "list", "(", "graph", ".", "get_operation_input_names", "(", "\"X\"", ")", ")", ",", "[", "]", ")", "\n", "self", ".", "assertEqual", "(", "list", "(", "graph", ".", "get_operation_input_names", "(", "\"Y\"", ")", ")", ",", "[", "]", ")", "\n", "self", ".", "assertEqual", "(", "list", "(", "graph", ".", "get_operation_input_names", "(", "\"Z1\"", ")", ")", ",", "\n", "[", "\"X:0\"", ",", "\"Y:0\"", "]", ")", "\n", "self", ".", "assertEqual", "(", "list", "(", "graph", ".", "get_operation_input_names", "(", "\"Z2\"", ")", ")", ",", "\n", "[", "\"X:0\"", ",", "\"Y:0\"", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "list", "(", "graph", ".", "get_operation_output_names", "(", "\"X\"", ")", ")", ",", "[", "\"X:0\"", "]", ")", "\n", "self", ".", "assertEqual", "(", "list", "(", "graph", ".", "get_operation_output_names", "(", "\"Y\"", ")", ")", ",", "[", "\"Y:0\"", "]", ")", "\n", "self", ".", "assertEqual", "(", "list", "(", "graph", ".", "get_operation_output_names", "(", "\"Z1\"", ")", ")", ",", "[", "\"Z1:0\"", "]", ")", "\n", "self", ".", "assertEqual", "(", "list", "(", "graph", ".", "get_operation_output_names", "(", "\"Z2\"", ")", ")", ",", "[", "\"Z2:0\"", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "list", "(", "graph", ".", "get_all_tensor_names", "(", ")", ")", ",", "\n", "[", "\"X:0\"", ",", "\"Y:0\"", ",", "\"Z1:0\"", ",", "\"Z2:0\"", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_dtype", "(", "\"X:0\"", ")", ",", "tf", ".", "int32", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_dtype", "(", "\"Y:0\"", ")", ",", "tf", ".", "int32", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_dtype", "(", "\"Z1:0\"", ")", ",", "tf", ".", "int32", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_dtype", "(", "\"Z2:0\"", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_shape", "(", "\"X:0\"", ")", ",", "tf", ".", "TensorShape", "(", "[", "3", ",", "4", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_shape", "(", "\"Y:0\"", ")", ",", "tf", ".", "TensorShape", "(", "[", "4", ",", "5", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_shape", "(", "\"Z1:0\"", ")", ",", "tf", ".", "TensorShape", "(", "[", "3", ",", "5", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_shape", "(", "\"Z2:0\"", ")", ",", "tf", ".", "TensorShape", "(", "[", "3", ",", "5", "]", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_num_entries", "(", "\"X:0\"", ")", ",", "12", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_num_entries", "(", "\"Y:0\"", ")", ",", "20", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_num_entries", "(", "\"Z1:0\"", ")", ",", "15", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_num_entries", "(", "\"Z2:0\"", ")", ",", "15", ")", "\n", "\n", "graph", ".", "set_tensor_final", "(", "\"Z1:0\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "graph", ".", "compute_memory_contents_under_schedule", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", ",", "\n", "[", "frozenset", "(", "[", "\"X:0\"", "]", ")", ",", "frozenset", "(", "[", "\"X:0\"", ",", "\"Y:0\"", "]", ")", ",", "\n", "frozenset", "(", "[", "\"X:0\"", ",", "\"Y:0\"", ",", "\"Z1:0\"", "]", ")", ",", "\n", "frozenset", "(", "[", "\"X:0\"", ",", "\"Y:0\"", ",", "\"Z1:0\"", ",", "\"Z2:0\"", "]", ")", "]", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "compute_memory_contents_under_schedule", "(", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", ",", "\n", "[", "frozenset", "(", "[", "\"X:0\"", "]", ")", ",", "frozenset", "(", "[", "\"X:0\"", ",", "\"Y:0\"", "]", ")", ",", "\n", "frozenset", "(", "[", "\"X:0\"", ",", "\"Y:0\"", ",", "\"Z2:0\"", "]", ")", ",", "\n", "frozenset", "(", "[", "\"X:0\"", ",", "\"Y:0\"", ",", "\"Z1:0\"", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface_test.GraphInterfaceTest.testTensorFlowGraph": [[211, 251], ["tensorflow.Graph", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface", "graph_interface_test.GraphInterfaceTest.VerifyGraphInterface", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertTrue", "graph_interface_test.GraphInterfaceTest.assertTrue", "graph_interface_test.GraphInterfaceTest.assertTrue", "graph_interface_test.GraphInterfaceTest.assertTrue", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "tensorflow.Graph.as_default", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.compute_cost_graph().SerializeToString", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.compute_cost_graph().SerializeToString", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.compute_cost_graph().SerializeToString", "tensorflow.device", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.matmul", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.compute_cost_graph", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.compute_cost_graph", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.compute_cost_graph"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface_test.GraphInterfaceTest.VerifyGraphInterface", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.compute_cost_graph", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.compute_cost_graph", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.compute_cost_graph"], ["", "def", "testTensorFlowGraph", "(", "self", ")", ":", "\n", "    ", "tf_graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "tf_graph", ".", "as_default", "(", ")", ":", "\n", "      ", "with", "tf", ".", "device", "(", "\"/device:CPU:0\"", ")", ":", "\n", "        ", "x", "=", "tf", ".", "zeros", "(", "[", "3", ",", "4", "]", ",", "dtype", "=", "tf", ".", "int32", ",", "name", "=", "\"X\"", ")", "\n", "y", "=", "tf", ".", "zeros", "(", "[", "4", ",", "5", "]", ",", "dtype", "=", "tf", ".", "int32", ",", "name", "=", "\"Y\"", ")", "\n", "tf", ".", "matmul", "(", "x", ",", "y", ",", "name", "=", "\"Z1\"", ")", "\n", "tf", ".", "matmul", "(", "x", ",", "y", ",", "name", "=", "\"Z2\"", ")", "\n", "\n", "", "", "graph", "=", "graph_interface", ".", "GraphInterface", "(", "tf_graph", ",", "\n", "canonical_device", "=", "\"/device:CPU:0\"", ")", "\n", "self", ".", "VerifyGraphInterface", "(", "graph", ")", "\n", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_operation_mtf_dimension_names", "(", "\"X\"", ")", ",", "[", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_operation_mtf_dimension_names", "(", "\"Y\"", ")", ",", "[", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_operation_mtf_dimension_names", "(", "\"Z1\"", ")", ",", "[", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_operation_mtf_dimension_names", "(", "\"Z2\"", ")", ",", "[", "]", ")", "\n", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_tensor_mtf_dimension_names", "(", "\"X:0\"", ")", ",", "[", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_tensor_mtf_dimension_names", "(", "\"Y:0\"", ")", ",", "[", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_tensor_mtf_dimension_names", "(", "\"Z1:0\"", ")", ",", "[", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_tensor_mtf_dimension_names", "(", "\"Z2:0\"", ")", ",", "[", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_device", "(", "\"X:0\"", ")", ",", "\"/device:CPU:0\"", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_device", "(", "\"Y:0\"", ")", ",", "\"/device:CPU:0\"", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_device", "(", "\"Z1:0\"", ")", ",", "\"/device:CPU:0\"", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "get_tensor_device", "(", "\"Z2:0\"", ")", ",", "\"/device:CPU:0\"", ")", "\n", "\n", "self", ".", "assertTrue", "(", "graph", ".", "is_tensor_on_canonical_device", "(", "\"X:0\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "graph", ".", "is_tensor_on_canonical_device", "(", "\"Y:0\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "graph", ".", "is_tensor_on_canonical_device", "(", "\"Z1:0\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "graph", ".", "is_tensor_on_canonical_device", "(", "\"Z2:0\"", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "graph", ".", "compute_cost_graph", "(", ")", ".", "SerializeToString", "(", ")", ",", "\n", "self", ".", "_cost_graph_string", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "compute_cost_graph", "(", "devices", "=", "[", "\"/device:CPU:0\"", "]", ")", "\n", ".", "SerializeToString", "(", ")", ",", "\n", "self", ".", "_cost_graph_string", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "compute_cost_graph", "(", "devices", "=", "[", "]", ")", ".", "SerializeToString", "(", ")", ",", "\n", "self", ".", "_sizeless_cost_graph_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface_test.GraphInterfaceTest.testMeshTensorFlowGraph": [[252, 301], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.EinsumOperation", "mesh_tensorflow.EinsumOperation", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface", "graph_interface_test.GraphInterfaceTest.VerifyGraphInterface", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertCountEqual", "graph_interface_test.GraphInterfaceTest.assertIsNone", "graph_interface_test.GraphInterfaceTest.assertIsNone", "graph_interface_test.GraphInterfaceTest.assertIsNone", "graph_interface_test.GraphInterfaceTest.assertIsNone", "graph_interface_test.GraphInterfaceTest.assertTrue", "graph_interface_test.GraphInterfaceTest.assertTrue", "graph_interface_test.GraphInterfaceTest.assertTrue", "graph_interface_test.GraphInterfaceTest.assertTrue", "graph_interface_test.GraphInterfaceTest.assertEqual", "graph_interface_test.GraphInterfaceTest.assertEqual", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.compute_cost_graph().SerializeToString", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.compute_cost_graph().SerializeToString", "mesh_tensorflow.Constant", "mesh_tensorflow.Constant", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.compute_cost_graph", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.compute_cost_graph", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface_test.GraphInterfaceTest.VerifyGraphInterface", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.compute_cost_graph", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.compute_cost_graph", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "def", "testMeshTensorFlowGraph", "(", "self", ")", ":", "\n", "    ", "mtf_graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "mtf_graph", ",", "\"my_mesh\"", ")", "\n", "x", "=", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "\n", "shape", "=", "mtf", ".", "convert_to_shape", "(", "\"a:3,b:4\"", ")", ",", "\n", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "\"X\"", ")", ".", "outputs", "[", "0", "]", "\n", "y", "=", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "\n", "shape", "=", "mtf", ".", "convert_to_shape", "(", "\"b:4,c:5\"", ")", ",", "\n", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "\"Y\"", ")", ".", "outputs", "[", "0", "]", "\n", "mtf", ".", "EinsumOperation", "(", "[", "x", ",", "y", "]", ",", "mtf", ".", "convert_to_shape", "(", "\"a:3,c:5\"", ")", ",", "name", "=", "\"Z1\"", ")", "\n", "mtf", ".", "EinsumOperation", "(", "[", "x", ",", "y", "]", ",", "mtf", ".", "convert_to_shape", "(", "\"a:3,c:5\"", ")", ",", "name", "=", "\"Z2\"", ")", "\n", "\n", "graph", "=", "graph_interface", ".", "GraphInterface", "(", "mtf_graph", ")", "\n", "self", ".", "VerifyGraphInterface", "(", "graph", ")", "\n", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_operation_mtf_dimension_names", "(", "\"X\"", ")", ",", "\n", "[", "\"a\"", ",", "\"b\"", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_operation_mtf_dimension_names", "(", "\"Y\"", ")", ",", "\n", "[", "\"b\"", ",", "\"c\"", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_operation_mtf_dimension_names", "(", "\"Z1\"", ")", ",", "\n", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_operation_mtf_dimension_names", "(", "\"Z2\"", ")", ",", "\n", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", "]", ")", "\n", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_tensor_mtf_dimension_names", "(", "\"X:0\"", ")", ",", "\n", "[", "\"a\"", ",", "\"b\"", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_tensor_mtf_dimension_names", "(", "\"Y:0\"", ")", ",", "\n", "[", "\"b\"", ",", "\"c\"", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_tensor_mtf_dimension_names", "(", "\"Z1:0\"", ")", ",", "\n", "[", "\"a\"", ",", "\"c\"", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "graph", ".", "get_tensor_mtf_dimension_names", "(", "\"Z1:0\"", ")", ",", "\n", "[", "\"a\"", ",", "\"c\"", "]", ")", "\n", "\n", "self", ".", "assertIsNone", "(", "graph", ".", "get_tensor_device", "(", "\"X:0\"", ")", ")", "\n", "self", ".", "assertIsNone", "(", "graph", ".", "get_tensor_device", "(", "\"Y:0\"", ")", ")", "\n", "self", ".", "assertIsNone", "(", "graph", ".", "get_tensor_device", "(", "\"Z1:0\"", ")", ")", "\n", "self", ".", "assertIsNone", "(", "graph", ".", "get_tensor_device", "(", "\"Z2:0\"", ")", ")", "\n", "\n", "self", ".", "assertTrue", "(", "graph", ".", "is_tensor_on_canonical_device", "(", "\"X:0\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "graph", ".", "is_tensor_on_canonical_device", "(", "\"Y:0\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "graph", ".", "is_tensor_on_canonical_device", "(", "\"Z1:0\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "graph", ".", "is_tensor_on_canonical_device", "(", "\"Z2:0\"", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "graph", ".", "compute_cost_graph", "(", ")", ".", "SerializeToString", "(", ")", ",", "\n", "self", ".", "_deviceless_cost_graph_string", ")", "\n", "self", ".", "assertEqual", "(", "graph", ".", "compute_cost_graph", "(", "devices", "=", "[", "]", ")", ".", "SerializeToString", "(", ")", ",", "\n", "self", ".", "_deviceless_cost_graph_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface_test.GraphInterfaceTest.testNotAGraph": [[302, 304], ["graph_interface_test.GraphInterfaceTest.assertRaises"], "methods", ["None"], ["", "def", "testNotAGraph", "(", "self", ")", ":", "\n", "    ", "self", ".", "assertRaises", "(", "TypeError", ",", "graph_interface", ".", "GraphInterface", ",", "\"hello\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator.MemoryEstimator.__init__": [[51, 66], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mtf_graph", ",", "mesh_shape", ",", "mtf_outputs", "=", "(", ")", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      mtf_graph: a mtf.Graph.\n      mesh_shape: an mtf.Shape.\n      mtf_outputs: an optional iterable of mtf.Tensor, representing the outputs\n          of the computation.\n    \"\"\"", "\n", "self", ".", "mtf_graph", "=", "mtf_graph", "\n", "self", ".", "mesh_shape", "=", "mesh_shape", "\n", "self", ".", "mtf_outputs", "=", "mtf_outputs", "\n", "\n", "self", ".", "_layout_validator", "=", "None", "# valid_layouts.LayoutValidator", "\n", "self", ".", "_graph_interface", "=", "None", "# graph_interface.GraphInterface", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator.MemoryEstimator.get_layout_validator": [[67, 76], ["memory_estimator.MemoryEstimator._compute_layout_validator"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator.MemoryEstimator._compute_layout_validator"], ["", "def", "get_layout_validator", "(", "self", ")", ":", "\n", "    ", "\"\"\"LayoutValidator for the model and mesh_shape.\n\n    Returns:\n      a valid_layouts.LayoutValidator\n    \"\"\"", "\n", "if", "self", ".", "_layout_validator", "is", "None", ":", "\n", "      ", "self", ".", "_compute_layout_validator", "(", ")", "\n", "", "return", "self", ".", "_layout_validator", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator.MemoryEstimator.get_graph_interface": [[77, 86], ["memory_estimator.MemoryEstimator._compute_graph_interface"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator.MemoryEstimator._compute_graph_interface"], ["", "def", "get_graph_interface", "(", "self", ")", ":", "\n", "    ", "\"\"\"GraphInterface representation of the model's computation graph.\n\n    Returns:\n      a graph_interface.GraphInterface\n    \"\"\"", "\n", "if", "self", ".", "_graph_interface", "is", "None", ":", "\n", "      ", "self", ".", "_compute_graph_interface", "(", ")", "\n", "", "return", "self", ".", "_graph_interface", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator.MemoryEstimator._compute_layout_validator": [[87, 91], ["mesh_tensorflow.auto_mtf.valid_layouts.LayoutValidator"], "methods", ["None"], ["", "def", "_compute_layout_validator", "(", "self", ")", ":", "\n", "    ", "\"\"\"Computes self._layout_validator.\"\"\"", "\n", "self", ".", "_layout_validator", "=", "valid_layouts", ".", "LayoutValidator", "(", "self", ".", "mtf_graph", ",", "\n", "self", ".", "mesh_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator.MemoryEstimator._compute_graph_interface": [[92, 97], ["mesh_tensorflow.auto_mtf.graph_interface.GraphInterface", "memory_estimator.MemoryEstimator._graph_interface.set_tensor_final"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.set_tensor_final"], ["", "def", "_compute_graph_interface", "(", "self", ")", ":", "\n", "    ", "\"\"\"Computes self._graph_interface.\"\"\"", "\n", "self", ".", "_graph_interface", "=", "graph_interface", ".", "GraphInterface", "(", "self", ".", "mtf_graph", ")", "\n", "for", "mtf_output", "in", "self", ".", "mtf_outputs", ":", "\n", "      ", "self", ".", "_graph_interface", ".", "set_tensor_final", "(", "mtf_output", ".", "name", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler_test.SchedulerTest.testReturnsTopoSort": [[31, 53], ["absl.testing.parameterized.parameters", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.EinsumOperation", "mesh_tensorflow.EinsumOperation", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "list", "scheduler_test.SchedulerTest.assertCountEqual", "scheduler_test.SchedulerTest.assertCountEqual", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.auto_mtf.scheduler.minimize_peak_memory", "mesh_tensorflow.Constant", "mesh_tensorflow.Constant", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler.minimize_peak_memory", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["  ", "@", "parameterized", ".", "parameters", "(", "'NAIVE'", ",", "'LIST'", ")", "\n", "def", "testReturnsTopoSort", "(", "self", ",", "scheduler_alg", ")", ":", "\n", "    ", "mtf_graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "mtf_graph", ",", "'my_mesh'", ")", "\n", "x", "=", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "\n", "shape", "=", "mtf", ".", "convert_to_shape", "(", "'a:3,b:4'", ")", ",", "\n", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "'X'", ")", ".", "outputs", "[", "0", "]", "\n", "y", "=", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "\n", "shape", "=", "mtf", ".", "convert_to_shape", "(", "'b:4,c:5'", ")", ",", "\n", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "'Y'", ")", ".", "outputs", "[", "0", "]", "\n", "mtf", ".", "EinsumOperation", "(", "[", "x", ",", "y", "]", ",", "mtf", ".", "convert_to_shape", "(", "'a:3,c:5'", ")", ",", "name", "=", "'Z1'", ")", "\n", "mtf", ".", "EinsumOperation", "(", "[", "x", ",", "y", "]", ",", "mtf", ".", "convert_to_shape", "(", "'a:3,c:5'", ")", ",", "name", "=", "'Z2'", ")", "\n", "\n", "graph", "=", "graph_interface", ".", "GraphInterface", "(", "mtf_graph", ")", "\n", "graph", ".", "set_tensor_final", "(", "'Z1:0'", ")", "\n", "graph", ".", "set_tensor_final", "(", "'Z2:0'", ")", "\n", "schedule", "=", "list", "(", "scheduler", ".", "minimize_peak_memory", "(", "graph", ",", "scheduler_alg", ")", ")", "\n", "\n", "self", ".", "assertCountEqual", "(", "schedule", "[", "0", ":", "2", "]", ",", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "assertCountEqual", "(", "schedule", "[", "2", ":", "4", "]", ",", "[", "2", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler_test.SchedulerTest.testMinimizePeakMemoryList": [[54, 89], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.EinsumOperation", "mesh_tensorflow.BroadcastOperation", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "list", "scheduler_test.SchedulerTest.assertEqual", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.auto_mtf.scheduler.minimize_peak_memory", "mesh_tensorflow.Constant", "mesh_tensorflow.Constant", "mesh_tensorflow.EinsumOperation", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler.minimize_peak_memory", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "def", "testMinimizePeakMemoryList", "(", "self", ")", ":", "\n", "    ", "mtf_graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "mtf_graph", ",", "'my_mesh'", ")", "\n", "x", "=", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "\n", "shape", "=", "mtf", ".", "convert_to_shape", "(", "'a:3,b:4'", ")", ",", "\n", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "'X'", ")", ".", "outputs", "[", "0", "]", "\n", "y", "=", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "\n", "shape", "=", "mtf", ".", "convert_to_shape", "(", "'b:4,c:5'", ")", ",", "\n", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "'Y'", ")", ".", "outputs", "[", "0", "]", "\n", "mtf", ".", "EinsumOperation", "(", "[", "x", ",", "y", "]", ",", "mtf", ".", "convert_to_shape", "(", "'a:3,b:4,c:5'", ")", ",", "name", "=", "'Z'", ")", "\n", "w", "=", "mtf", ".", "EinsumOperation", "(", "[", "x", ",", "y", "]", ",", "mtf", ".", "convert_to_shape", "(", "'a:3,c:5'", ")", ",", "\n", "name", "=", "'W'", ")", ".", "outputs", "[", "0", "]", "\n", "mtf", ".", "BroadcastOperation", "(", "w", ",", "mtf", ".", "convert_to_shape", "(", "'a:3,b:4,c:5'", ")", ",", "name", "=", "'V'", ")", "\n", "\n", "graph", "=", "graph_interface", ".", "GraphInterface", "(", "mtf_graph", ")", "\n", "graph", ".", "set_tensor_final", "(", "'Z:0'", ")", "\n", "graph", ".", "set_tensor_final", "(", "'V:0'", ")", "\n", "schedule", "=", "list", "(", "scheduler", ".", "minimize_peak_memory", "(", "graph", ",", "'LIST'", ")", ")", "\n", "\n", "# List Scheduler prefers to schedule things that free the most memory.", "\n", "# When nothing is scheduled:", "\n", "#   X frees -12 entries.", "\n", "#   Y frees -20 entries.", "\n", "# After [X] scheduled:", "\n", "#   Y frees -20 entries.", "\n", "# After [X, Y] scheduled:", "\n", "#   Z frees -60 entries.", "\n", "#   W frees -15 entries.", "\n", "# After [X, Y, W] scheduled:", "\n", "#   Z frees -28 entries.", "\n", "#   V frees -45 entries.", "\n", "# Hence the schedule should be [X, Y, W, Z, V].", "\n", "self", ".", "assertEqual", "(", "schedule", ",", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler_test.SchedulerTest.testMinimizePeakMemoryList_SingleUseTensor": [[90, 111], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Constant", "mesh_tensorflow.BroadcastOperation", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "list", "scheduler_test.SchedulerTest.assertEqual", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.auto_mtf.scheduler.minimize_peak_memory", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.Constant", "mesh_tensorflow.convert_to_shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.set_tensor_final", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler.minimize_peak_memory", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "def", "testMinimizePeakMemoryList_SingleUseTensor", "(", "self", ")", ":", "\n", "    ", "mtf_graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "mtf_graph", ",", "'my_mesh'", ")", "\n", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "shape", "=", "mtf", ".", "convert_to_shape", "(", "'a:4'", ")", ",", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "'X'", ")", "\n", "y", "=", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "shape", "=", "mtf", ".", "convert_to_shape", "(", "'b:3'", ")", ",", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "'Y'", ")", ".", "outputs", "[", "0", "]", "\n", "mtf", ".", "BroadcastOperation", "(", "y", ",", "mtf", ".", "convert_to_shape", "(", "'b:3,c:2'", ")", ",", "name", "=", "'Z'", ")", "\n", "\n", "graph", "=", "graph_interface", ".", "GraphInterface", "(", "mtf_graph", ")", "\n", "graph", ".", "set_tensor_final", "(", "'X:0'", ")", "\n", "graph", ".", "set_tensor_final", "(", "'Z:0'", ")", "\n", "schedule", "=", "list", "(", "scheduler", ".", "minimize_peak_memory", "(", "graph", ",", "'LIST'", ")", ")", "\n", "# When nothing is scheduled:", "\n", "#   X frees -4 entries", "\n", "#   Y frees -3 entries", "\n", "# After [Y] scheduled:", "\n", "#   X frees -4 entries", "\n", "#   Z frees -3 entries", "\n", "# Hence the schedule should be [Y, Z, X].", "\n", "self", ".", "assertEqual", "(", "schedule", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler_test.SchedulerTest.testMinimizePeakMemoryList_ZeroUseTensor": [[112, 128], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Constant", "mesh_tensorflow.BroadcastOperation", "mesh_tensorflow.auto_mtf.graph_interface.GraphInterface", "list", "scheduler_test.SchedulerTest.assertEqual", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.auto_mtf.scheduler.minimize_peak_memory", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.Constant", "mesh_tensorflow.convert_to_shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler.minimize_peak_memory", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape"], ["", "def", "testMinimizePeakMemoryList_ZeroUseTensor", "(", "self", ")", ":", "\n", "    ", "mtf_graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "mtf_graph", ",", "'my_mesh'", ")", "\n", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "shape", "=", "mtf", ".", "convert_to_shape", "(", "'a:4'", ")", ",", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "'X'", ")", "\n", "y", "=", "mtf", ".", "Constant", "(", "mesh", ",", "0", ",", "shape", "=", "mtf", ".", "convert_to_shape", "(", "'b:3'", ")", ",", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "'Y'", ")", ".", "outputs", "[", "0", "]", "\n", "mtf", ".", "BroadcastOperation", "(", "y", ",", "mtf", ".", "convert_to_shape", "(", "'b:3,c:2'", ")", ",", "name", "=", "'Z'", ")", "\n", "\n", "graph", "=", "graph_interface", ".", "GraphInterface", "(", "mtf_graph", ")", "\n", "schedule", "=", "list", "(", "scheduler", ".", "minimize_peak_memory", "(", "graph", ",", "'LIST'", ")", ")", "\n", "# When nothing is scheduled:", "\n", "#   X frees 0 entries", "\n", "#   Y frees -3 entries", "\n", "# Hence the schedule should be [X, Y, Z].", "\n", "self", ".", "assertEqual", "(", "schedule", ",", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts_test.LayoutValidatorTest.setUp": [[29, 50], ["super().setUp", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.ConcatOperation", "mesh_tensorflow.zeros", "mesh_tensorflow.Shape", "mesh_tensorflow.auto_mtf.valid_layouts.LayoutValidator", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.anonymous_shape", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymous_shape"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "LayoutValidatorTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "\n", "a_dim", "=", "mtf", ".", "Dimension", "(", "\"a\"", ",", "5", ")", "\n", "b_dim", "=", "mtf", ".", "Dimension", "(", "\"b\"", ",", "10", ")", "\n", "concat_dim1", "=", "mtf", ".", "Dimension", "(", "\"concat\"", ",", "15", ")", "\n", "concat_dim2", "=", "mtf", ".", "Dimension", "(", "\"concat\"", ",", "20", ")", "\n", "\n", "x1", "=", "mtf", ".", "zeros", "(", "mesh", ",", "mtf", ".", "Shape", "(", "[", "a_dim", ",", "b_dim", ",", "concat_dim1", "]", ")", ")", "\n", "x2", "=", "mtf", ".", "zeros", "(", "mesh", ",", "mtf", ".", "Shape", "(", "[", "a_dim", ",", "b_dim", ",", "concat_dim2", "]", ")", ")", "\n", "mtf", ".", "ConcatOperation", "(", "[", "x1", ",", "x2", "]", ",", "\"concat\"", ")", "\n", "\n", "# We add a tensor with anonymous shape, which is supposed to be", "\n", "# unsplittable (i.e. none of its dimensions show up during", "\n", "# test_SplittableMtfDimensionNames).", "\n", "_", "=", "mtf", ".", "zeros", "(", "mesh", ",", "mtf", ".", "anonymous_shape", "(", "mtf", ".", "Shape", "(", "[", "a_dim", ",", "b_dim", "]", ")", ")", ")", "\n", "\n", "mesh_shape", "=", "mtf", ".", "Shape", "(", "[", "(", "\"m1\"", ",", "4", ")", ",", "(", "\"m2\"", ",", "2", ")", "]", ")", "\n", "self", ".", "valid_layouts", "=", "valid_layouts", ".", "LayoutValidator", "(", "graph", ",", "mesh_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts_test.LayoutValidatorTest.test_SplittableMtfDimensionNames": [[51, 54], ["valid_layouts_test.LayoutValidatorTest.assertEqual", "set"], "methods", ["None"], ["", "def", "test_SplittableMtfDimensionNames", "(", "self", ")", ":", "\n", "    ", "self", ".", "assertEqual", "(", "self", ".", "valid_layouts", ".", "splittable_mtf_dimension_names", ",", "\n", "set", "(", "[", "\"a\"", ",", "\"b\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts_test.LayoutValidatorTest.test_MeshDimensionNameToSize": [[55, 58], ["valid_layouts_test.LayoutValidatorTest.assertEqual"], "methods", ["None"], ["", "def", "test_MeshDimensionNameToSize", "(", "self", ")", ":", "\n", "    ", "self", ".", "assertEqual", "(", "self", ".", "valid_layouts", ".", "mesh_dimension_name_to_size", ",", "\n", "{", "\"m1\"", ":", "4", ",", "\"m2\"", ":", "2", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts_test.LayoutValidatorTest.test_is_valid_assignment": [[59, 69], ["valid_layouts_test.LayoutValidatorTest.assertFalse", "valid_layouts_test.LayoutValidatorTest.assertFalse", "valid_layouts_test.LayoutValidatorTest.assertFalse", "valid_layouts_test.LayoutValidatorTest.assertTrue", "valid_layouts_test.LayoutValidatorTest.assertFalse", "valid_layouts_test.LayoutValidatorTest.assertFalse", "valid_layouts_test.LayoutValidatorTest.valid_layouts.is_valid_assignment", "valid_layouts_test.LayoutValidatorTest.valid_layouts.is_valid_assignment", "valid_layouts_test.LayoutValidatorTest.valid_layouts.is_valid_assignment", "valid_layouts_test.LayoutValidatorTest.valid_layouts.is_valid_assignment", "valid_layouts_test.LayoutValidatorTest.valid_layouts.is_valid_assignment", "valid_layouts_test.LayoutValidatorTest.valid_layouts.is_valid_assignment"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.is_valid_assignment", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.is_valid_assignment", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.is_valid_assignment", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.is_valid_assignment", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.is_valid_assignment", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.is_valid_assignment"], ["", "def", "test_is_valid_assignment", "(", "self", ")", ":", "\n", "# Due to divisibility, the a dimension cannot be assigned to m1 or m2.", "\n", "    ", "self", ".", "assertFalse", "(", "self", ".", "valid_layouts", ".", "is_valid_assignment", "(", "\"a\"", ",", "\"m1\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "self", ".", "valid_layouts", ".", "is_valid_assignment", "(", "\"a\"", ",", "\"m2\"", ")", ")", "\n", "# The b dimension can only be assigned to m2.", "\n", "self", ".", "assertFalse", "(", "self", ".", "valid_layouts", ".", "is_valid_assignment", "(", "\"b\"", ",", "\"m1\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "valid_layouts", ".", "is_valid_assignment", "(", "\"b\"", ",", "\"m2\"", ")", ")", "\n", "# Due to ConcatOperation, the concat dimension may not be assigned.", "\n", "self", ".", "assertFalse", "(", "self", ".", "valid_layouts", ".", "is_valid_assignment", "(", "\"concat\"", ",", "\"m1\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "self", ".", "valid_layouts", ".", "is_valid_assignment", "(", "\"concat\"", ",", "\"m2\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.__init__": [[106, 126], ["layout_optimizer.LayoutOptimizer._estimator.get_layout_validator", "layout_optimizer.LayoutOptimizer._estimator.get_graph_interface", "ortools.sat.python.cp_model.CpModel", "layout_optimizer.LayoutOptimizer._preprocess_input", "layout_optimizer.LayoutOptimizer._initialize_variables", "layout_optimizer.LayoutOptimizer._add_constraints", "layout_optimizer.LayoutOptimizer._build_objective_function"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator.MemoryEstimator.get_layout_validator", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.memory_estimator.MemoryEstimator.get_graph_interface", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer._preprocess_input", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer._initialize_variables", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer._add_constraints", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer._build_objective_function"], ["def", "__init__", "(", "self", ",", "memory_estimator", ",", "scheduler_alg", "=", "\"LIST\"", ")", ":", "\n", "    ", "\"\"\"Uses a auto_mtf.memory_estimator to set up the integer program.\n\n    Args:\n      memory_estimator: a memory_estimator.MemoryEstimator.\n      scheduler_alg: an optional string, see scheduler.minimize_peak_memory.\n    \"\"\"", "\n", "self", ".", "_estimator", "=", "memory_estimator", "\n", "self", ".", "_scheduler_alg", "=", "scheduler_alg", "\n", "self", ".", "_layout_validator", "=", "self", ".", "_estimator", ".", "get_layout_validator", "(", ")", "\n", "self", ".", "_graph", "=", "self", ".", "_estimator", ".", "get_graph_interface", "(", ")", "\n", "self", ".", "_memory_contents", "=", "None", "# [frozenset(string)]", "\n", "\n", "# Initialize the model.", "\n", "self", ".", "_model", "=", "cp_model", ".", "CpModel", "(", ")", "\n", "\n", "self", ".", "_preprocess_input", "(", ")", "\n", "self", ".", "_initialize_variables", "(", ")", "\n", "self", ".", "_add_constraints", "(", ")", "\n", "self", ".", "_build_objective_function", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer._preprocess_input": [[127, 157], ["layout_optimizer.LayoutOptimizer._graph.get_all_operation_names", "layout_optimizer.LayoutOptimizer._graph.get_all_tensor_names", "set", "frozenset", "frozenset", "layout_optimizer.LayoutOptimizer._operation_name_to_mtf_dimension_set.values", "set", "layout_optimizer._generate_assignments", "set().intersection", "set().intersection", "layout_optimizer.LayoutOptimizer._tensor_name_to_mtf_dimension_set.values", "set", "set", "layout_optimizer.LayoutOptimizer._graph.get_operation_mtf_dimension_names", "layout_optimizer.LayoutOptimizer._graph.get_tensor_mtf_dimension_names"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_operation_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_tensor_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._generate_assignments", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_operation_mtf_dimension_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_mtf_dimension_names"], ["", "def", "_preprocess_input", "(", "self", ")", ":", "\n", "    ", "\"\"\"Computing useful input data structures to ease IP construction.\"\"\"", "\n", "# Compute the sets of MTF dimensions used in operations/tensors.", "\n", "\n", "# a {string: frozenset(string)}, mapping operation name to MTF dimension", "\n", "# names.", "\n", "self", ".", "_operation_name_to_mtf_dimension_set", "=", "{", "}", "\n", "# a {string: frozenset(string)}, mapping tensor name to MTF dimension names.", "\n", "self", ".", "_tensor_name_to_mtf_dimension_set", "=", "{", "}", "\n", "\n", "for", "operation_name", "in", "self", ".", "_graph", ".", "get_all_operation_names", "(", ")", ":", "\n", "      ", "self", ".", "_operation_name_to_mtf_dimension_set", "[", "operation_name", "]", "=", "frozenset", "(", "\n", "set", "(", "self", ".", "_graph", ".", "get_operation_mtf_dimension_names", "(", "\n", "operation_name", ")", ")", ".", "intersection", "(", "\n", "self", ".", "_layout_validator", ".", "splittable_mtf_dimension_names", ")", ")", "\n", "", "for", "tensor_name", "in", "self", ".", "_graph", ".", "get_all_tensor_names", "(", ")", ":", "\n", "      ", "self", ".", "_tensor_name_to_mtf_dimension_set", "[", "tensor_name", "]", "=", "frozenset", "(", "\n", "set", "(", "self", ".", "_graph", ".", "get_tensor_mtf_dimension_names", "(", "tensor_name", ")", ")", "\n", ".", "intersection", "(", "self", ".", "_layout_validator", ".", "splittable_mtf_dimension_names", ")", ")", "\n", "\n", "", "self", ".", "_operation_mtf_dimension_sets", "=", "set", "(", "\n", "self", ".", "_operation_name_to_mtf_dimension_set", ".", "values", "(", ")", ")", "\n", "self", ".", "_mtf_dimension_sets", "=", "self", ".", "_operation_mtf_dimension_sets", "|", "set", "(", "\n", "self", ".", "_tensor_name_to_mtf_dimension_set", ".", "values", "(", ")", ")", "\n", "\n", "# Compute possible assignments for each set of MTF dimensions.", "\n", "self", ".", "_assignments", "=", "{", "}", "# indexed by MTF dimension set", "\n", "for", "mtf_dimension_set", "in", "self", ".", "_mtf_dimension_sets", ":", "\n", "      ", "self", ".", "_assignments", "[", "mtf_dimension_set", "]", "=", "_generate_assignments", "(", "\n", "mtf_dimension_set", ",", "self", ".", "_layout_validator", ".", "mesh_dimension_name_to_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer._initialize_variables": [[158, 192], ["layout_optimizer.LayoutOptimizer._graph.get_all_tensor_names", "layout_optimizer.LayoutOptimizer._model.NewIntVar", "layout_optimizer.LayoutOptimizer._graph.is_tensor_on_canonical_device", "layout_optimizer._global_var_name", "layout_optimizer.LayoutOptimizer._model.NewBoolVar", "layout_optimizer._local_var_name", "layout_optimizer.LayoutOptimizer._model.NewBoolVar", "int", "layout_optimizer.LayoutOptimizer._graph.get_tensor_size"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_tensor_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._global_var_name", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._local_var_name", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_size"], ["", "", "def", "_initialize_variables", "(", "self", ")", ":", "\n", "    ", "\"\"\"Initializing the variables of the IP.\"\"\"", "\n", "# Initialize global variables.", "\n", "self", ".", "_global_vars", "=", "{", "}", "# Indexed by (MTF dimension, mesh dimension)", "\n", "for", "mtf_dimension_name", "in", "(", "\n", "self", ".", "_layout_validator", ".", "splittable_mtf_dimension_names", ")", ":", "\n", "      ", "for", "mesh_dimension_name", "in", "(", "\n", "self", ".", "_layout_validator", ".", "mesh_dimension_name_to_size", ")", ":", "\n", "        ", "name", "=", "_global_var_name", "(", "mtf_dimension_name", ",", "mesh_dimension_name", ")", "\n", "self", ".", "_global_vars", "[", "(", "mtf_dimension_name", ",", "mesh_dimension_name", ")", "]", "=", "(", "\n", "self", ".", "_model", ".", "NewBoolVar", "(", "name", ")", ")", "\n", "\n", "# Initialize local variables.", "\n", "", "", "self", ".", "_local_vars", "=", "{", "}", "# Indexed by (tensorflow dimension set), then name of", "\n", "# assignment.", "\n", "for", "mtf_dimension_set", "in", "self", ".", "_mtf_dimension_sets", ":", "\n", "      ", "self", ".", "_local_vars", "[", "mtf_dimension_set", "]", "=", "{", "}", "\n", "for", "assignment", "in", "self", ".", "_assignments", "[", "mtf_dimension_set", "]", ":", "\n", "# TODO(joshuawang): Avoid hash collision no matter what dimension names", "\n", "# are; don't hash by this local var name, swap to using a tuple encoding", "\n", "# of the full assignment instead.", "\n", "        ", "name", "=", "_local_var_name", "(", "mtf_dimension_set", ",", "assignment", ")", "\n", "self", ".", "_local_vars", "[", "mtf_dimension_set", "]", "[", "name", "]", "=", "(", "\n", "self", ".", "_model", ".", "NewBoolVar", "(", "name", ")", ")", "\n", "\n", "# Initialize memory variable. We need a crude upper bound on memory, so we", "\n", "# use the total size of all tensors under the empty assignment.", "\n", "# NOTE(joshuawang): This bound could be improved by factoring in the", "\n", "# schedule.", "\n", "", "", "memory_upper_bound", "=", "0", "\n", "for", "tensor_name", "in", "self", ".", "_graph", ".", "get_all_tensor_names", "(", ")", ":", "\n", "      ", "if", "self", ".", "_graph", ".", "is_tensor_on_canonical_device", "(", "tensor_name", ")", ":", "\n", "        ", "memory_upper_bound", "+=", "int", "(", "self", ".", "_graph", ".", "get_tensor_size", "(", "tensor_name", ")", ")", "\n", "", "", "self", ".", "_memory_var", "=", "self", ".", "_model", ".", "NewIntVar", "(", "0", ",", "memory_upper_bound", ",", "\"z\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer._add_constraints": [[193, 267], ["layout_optimizer.LayoutOptimizer._graph.get_all_tensor_names", "layout_optimizer.LayoutOptimizer._get_memory_contents", "layout_optimizer.LayoutOptimizer._model.Add", "layout_optimizer.LayoutOptimizer._model.Add", "layout_optimizer.LayoutOptimizer._model.Add", "layout_optimizer.LayoutOptimizer._model.Add", "layout_optimizer._local_var_name", "layout_optimizer.LayoutOptimizer._graph.is_tensor_on_canonical_device", "layout_optimizer.LayoutOptimizer._graph.get_tensor_size", "layout_optimizer._local_var_name", "sum", "layout_optimizer.LayoutOptimizer._layout_validator.is_valid_assignment", "layout_optimizer.LayoutOptimizer._model.Add", "sum", "sum", "sum", "layout_optimizer.LayoutOptimizer._model.AddImplication", "layout_optimizer.LayoutOptimizer._model.AddImplication", "[].Not", "layout_optimizer._local_var_name"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_tensor_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer._get_memory_contents", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._local_var_name", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_size", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._local_var_name", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.valid_layouts.LayoutValidator.is_valid_assignment", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._local_var_name"], ["", "def", "_add_constraints", "(", "self", ")", ":", "\n", "    ", "\"\"\"Adding constraints to the IP.\"\"\"", "\n", "# Add operation constraints.", "\n", "for", "mesh_dimension_name", "in", "(", "\n", "self", ".", "_layout_validator", ".", "mesh_dimension_name_to_size", ")", ":", "\n", "      ", "for", "mtf_dimension_set", "in", "self", ".", "_operation_mtf_dimension_sets", ":", "\n", "        ", "self", ".", "_model", ".", "Add", "(", "\n", "sum", "(", "self", ".", "_global_vars", "[", "(", "mtf_dimension_name", ",", "mesh_dimension_name", ")", "]", "\n", "for", "mtf_dimension_name", "in", "mtf_dimension_set", ")", "<=", "1", ")", "\n", "\n", "# Add global constraints.", "\n", "", "", "for", "mtf_dimension_name", "in", "(", "\n", "self", ".", "_layout_validator", ".", "splittable_mtf_dimension_names", ")", ":", "\n", "      ", "self", ".", "_model", ".", "Add", "(", "\n", "sum", "(", "self", ".", "_global_vars", "[", "(", "mtf_dimension_name", ",", "mesh_dimension_name", ")", "]", "\n", "for", "mesh_dimension_name", "in", "(", "\n", "self", ".", "_layout_validator", ".", "mesh_dimension_name_to_size", ")", ")", "<=", "1", ")", "\n", "\n", "# Add divisibility constraints.", "\n", "", "for", "mtf_dimension_name", "in", "(", "\n", "self", ".", "_layout_validator", ".", "splittable_mtf_dimension_names", ")", ":", "\n", "      ", "for", "mesh_dimension_name", "in", "(", "\n", "self", ".", "_layout_validator", ".", "mesh_dimension_name_to_size", ")", ":", "\n", "        ", "if", "not", "self", ".", "_layout_validator", ".", "is_valid_assignment", "(", "mtf_dimension_name", ",", "\n", "mesh_dimension_name", ")", ":", "\n", "          ", "self", ".", "_model", ".", "Add", "(", "self", ".", "_global_vars", "[", "(", "mtf_dimension_name", ",", "\n", "mesh_dimension_name", ")", "]", "==", "0", ")", "\n", "\n", "# Add local constraints.", "\n", "", "", "", "for", "mtf_dimension_set", "in", "self", ".", "_mtf_dimension_sets", ":", "\n", "      ", "self", ".", "_model", ".", "Add", "(", "\n", "sum", "(", "self", ".", "_local_vars", "[", "mtf_dimension_set", "]", "[", "_local_var_name", "(", "\n", "mtf_dimension_set", ",", "assignment", ")", "]", "\n", "for", "assignment", "in", "self", ".", "_assignments", "[", "mtf_dimension_set", "]", ")", "==", "1", ")", "\n", "\n", "# Add local-to-global constraints.", "\n", "", "for", "mtf_dimension_set", "in", "self", ".", "_mtf_dimension_sets", ":", "\n", "      ", "for", "assignment", "in", "self", ".", "_assignments", "[", "mtf_dimension_set", "]", ":", "\n", "        ", "name", "=", "_local_var_name", "(", "mtf_dimension_set", ",", "assignment", ")", "\n", "for", "mtf_dimension_name", "in", "mtf_dimension_set", ":", "\n", "          ", "if", "mtf_dimension_name", "in", "assignment", ":", "\n", "            ", "mesh_dimension_name", "=", "assignment", "[", "mtf_dimension_name", "]", "\n", "self", ".", "_model", ".", "AddImplication", "(", "\n", "self", ".", "_local_vars", "[", "mtf_dimension_set", "]", "[", "name", "]", ",", "\n", "self", ".", "_global_vars", "[", "(", "mtf_dimension_name", ",", "mesh_dimension_name", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "for", "mesh_dimension_name", "in", "(", "\n", "self", ".", "_layout_validator", ".", "mesh_dimension_name_to_size", ")", ":", "\n", "              ", "self", ".", "_model", ".", "AddImplication", "(", "\n", "self", ".", "_global_vars", "[", "(", "mtf_dimension_name", ",", "mesh_dimension_name", ")", "]", ",", "\n", "self", ".", "_local_vars", "[", "mtf_dimension_set", "]", "[", "name", "]", ".", "Not", "(", ")", ")", "\n", "\n", "# Add memory constraints.", "\n", "", "", "", "", "", "tensor_memory_sum", "=", "{", "}", "\n", "for", "tensor_name", "in", "self", ".", "_graph", ".", "get_all_tensor_names", "(", ")", ":", "\n", "      ", "tensor_memory_sum", "[", "tensor_name", "]", "=", "0", "\n", "mtf_dimension_set", "=", "self", ".", "_tensor_name_to_mtf_dimension_set", "[", "tensor_name", "]", "\n", "\n", "if", "not", "self", ".", "_graph", ".", "is_tensor_on_canonical_device", "(", "tensor_name", ")", ":", "\n", "        ", "continue", "\n", "\n", "", "for", "assignment", "in", "self", ".", "_assignments", "[", "mtf_dimension_set", "]", ":", "\n", "        ", "size_under_assignment", "=", "self", ".", "_graph", ".", "get_tensor_size", "(", "\n", "tensor_name", ",", "assignment", ",", "\n", "self", ".", "_layout_validator", ".", "mesh_dimension_name_to_size", ")", "\n", "\n", "name", "=", "_local_var_name", "(", "mtf_dimension_set", ",", "assignment", ")", "\n", "tensor_memory_sum", "[", "tensor_name", "]", "+=", "(", "\n", "size_under_assignment", "*", "self", ".", "_local_vars", "[", "mtf_dimension_set", "]", "[", "name", "]", ")", "\n", "\n", "", "", "for", "tensor_names", "in", "self", ".", "_get_memory_contents", "(", ")", ":", "\n", "      ", "self", ".", "_model", ".", "Add", "(", "\n", "sum", "(", "tensor_memory_sum", "[", "tensor_name", "]", "\n", "for", "tensor_name", "in", "tensor_names", ")", "<=", "self", ".", "_memory_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer._build_objective_function": [[268, 275], ["layout_optimizer.LayoutOptimizer._model.Minimize", "len", "sum", "six.itervalues"], "methods", ["None"], ["", "", "def", "_build_objective_function", "(", "self", ")", ":", "\n", "    ", "\"\"\"Builds the objective function of the IP.\"\"\"", "\n", "# Break ties in favor of more assignments.", "\n", "scale", "=", "len", "(", "self", ".", "_layout_validator", ".", "splittable_mtf_dimension_names", ")", "+", "1", "\n", "objective", "=", "scale", "*", "self", ".", "_memory_var", "-", "sum", "(", "six", ".", "itervalues", "(", "\n", "self", ".", "_global_vars", ")", ")", "\n", "self", ".", "_model", ".", "Minimize", "(", "objective", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer._get_memory_contents": [[276, 292], ["mesh_tensorflow.auto_mtf.scheduler.minimize_peak_memory", "layout_optimizer.LayoutOptimizer._graph.compute_memory_contents_under_schedule"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.scheduler.minimize_peak_memory", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.compute_memory_contents_under_schedule"], ["", "def", "_get_memory_contents", "(", "self", ")", ":", "\n", "    ", "\"\"\"Runs the scheduler to determine memory contents at every point in time.\n\n    Returns:\n      a list of frozenset of strings, where the ith entry describes the tensors\n      in memory when executing operation i (where schedule[i] is an index into\n      GetAllOperationNames()).\n    \"\"\"", "\n", "if", "self", ".", "_memory_contents", "is", "not", "None", ":", "\n", "      ", "return", "self", ".", "_memory_contents", "\n", "\n", "", "schedule", "=", "scheduler", ".", "minimize_peak_memory", "(", "self", ".", "_graph", ",", "self", ".", "_scheduler_alg", ")", "\n", "self", ".", "_memory_contents", "=", "self", ".", "_graph", ".", "compute_memory_contents_under_schedule", "(", "\n", "schedule", ")", "\n", "\n", "return", "self", ".", "_memory_contents", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.solve": [[293, 335], ["ortools.sat.python.cp_model.CpSolver", "layout_optimizer.LayoutOptimizer._cp_solver.Solve", "layout.sort", "mesh_tensorflow.auto_mtf.print_cp_model_solution.print_solution", "absl.logging.warning", "absl.logging.error", "layout_optimizer.SolverError", "layout_optimizer.LayoutOptimizer._cp_solver.Value", "layout.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.print_cp_model_solution.print_solution"], ["", "def", "solve", "(", "self", ",", "print_solution", "=", "False", ")", ":", "\n", "    ", "\"\"\"Solves the current integer program and returns the computed layout.\n\n    Args:\n      print_solution: An optional boolean indicating whether to print the full\n        solution in human-readable format.\n\n    Returns:\n      The computed layout (as a string).\n\n    Raises:\n      SolverError: the internal solver could not find a solution, or the\n          solution found is infeasible.\n    \"\"\"", "\n", "# Solve and see how well the solver did.", "\n", "self", ".", "_cp_solver", "=", "cp_model", ".", "CpSolver", "(", ")", "\n", "status", "=", "self", ".", "_cp_solver", ".", "Solve", "(", "self", ".", "_model", ")", "\n", "if", "status", "!=", "cp_model", ".", "OPTIMAL", ":", "\n", "      ", "if", "status", "==", "cp_model", ".", "FEASIBLE", ":", "\n", "        ", "logging", ".", "warning", "(", "\"A potentially suboptimal solution was found.\"", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "error", "(", "\"Solver returned status %d.\"", ",", "status", ")", "\n", "raise", "SolverError", "(", "\"The solver could not solve the problem and returned \"", "\n", "\"status {}.\"", ".", "format", "(", "status", ")", ")", "\n", "\n", "# TODO(joshuawang): Verify the solver's solution.", "\n", "", "", "if", "print_solution", ":", "\n", "      ", "print_cp_model_solution", ".", "print_solution", "(", "self", ".", "_model", ",", "self", ".", "_cp_solver", ")", "\n", "\n", "# Reconstruct layout from solution.", "\n", "", "layout", "=", "[", "]", "\n", "for", "mtf_dimension_name", "in", "(", "\n", "self", ".", "_layout_validator", ".", "splittable_mtf_dimension_names", ")", ":", "\n", "      ", "for", "mesh_dimension_name", "in", "(", "\n", "self", ".", "_layout_validator", ".", "mesh_dimension_name_to_size", ")", ":", "\n", "        ", "value", "=", "self", ".", "_cp_solver", ".", "Value", "(", "self", ".", "_global_vars", "[", "(", "mtf_dimension_name", ",", "\n", "mesh_dimension_name", ")", "]", ")", "\n", "if", "value", ":", "# Value is integer.", "\n", "          ", "layout", ".", "append", "(", "mtf_dimension_name", "+", "\":\"", "+", "mesh_dimension_name", ")", "\n", "\n", "", "", "", "layout", ".", "sort", "(", ")", "\n", "return", "\";\"", ".", "join", "(", "layout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer.evaluate_layout": [[336, 376], ["layout_optimizer.LayoutOptimizer._graph.get_all_tensor_names", "layout_optimizer.LayoutOptimizer._get_memory_contents", "layout.split", "layout_optimizer.LayoutOptimizer._graph.is_tensor_on_canonical_device", "max", "pair.split", "layout_optimizer.LayoutOptimizer._graph.get_tensor_size", "absl.logging.warning"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_all_tensor_names", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer.LayoutOptimizer._get_memory_contents", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.is_tensor_on_canonical_device", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.graph_interface.GraphInterface.get_tensor_size"], ["", "def", "evaluate_layout", "(", "self", ",", "layout", ")", ":", "\n", "    ", "\"\"\"The current objective value for the given layout.\n\n    TODO(joshuawang): The current function does not check that the given\n    layout is valid.\n\n    Args:\n      layout: a string, representing a layout to evaluate (e.g.\n          \"d_ff:m1;heads:m2\").\n\n    Returns:\n      A float, the objective value.\n    \"\"\"", "\n", "layout_dict", "=", "{", "}", "\n", "if", "layout", ":", "\n", "      ", "for", "pair", "in", "layout", ".", "split", "(", "\";\"", ")", ":", "\n", "        ", "mtf_dimension_name", ",", "mesh_dimension_name", "=", "pair", ".", "split", "(", "\":\"", ",", "1", ")", "\n", "if", "(", "mtf_dimension_name", "in", "\n", "self", ".", "_layout_validator", ".", "splittable_mtf_dimension_names", ")", ":", "\n", "          ", "layout_dict", "[", "mtf_dimension_name", "]", "=", "mesh_dimension_name", "\n", "", "else", ":", "\n", "          ", "logging", ".", "warning", "(", "\"Skipping unsplittable dimension %s.\"", ",", "\n", "mtf_dimension_name", ")", "\n", "\n", "", "", "", "tensor_memory", "=", "{", "}", "# {string: float}, size of each tensor under our layout", "\n", "for", "tensor_name", "in", "self", ".", "_graph", ".", "get_all_tensor_names", "(", ")", ":", "\n", "      ", "if", "self", ".", "_graph", ".", "is_tensor_on_canonical_device", "(", "tensor_name", ")", ":", "\n", "        ", "tensor_memory", "[", "tensor_name", "]", "=", "self", ".", "_graph", ".", "get_tensor_size", "(", "\n", "tensor_name", ",", "layout_dict", ",", "\n", "self", ".", "_layout_validator", ".", "mesh_dimension_name_to_size", ")", "\n", "", "else", ":", "\n", "        ", "tensor_memory", "[", "tensor_name", "]", "=", "0.0", "\n", "\n", "", "", "peak_memory_usage", "=", "0.0", "\n", "for", "tensor_names", "in", "self", ".", "_get_memory_contents", "(", ")", ":", "\n", "      ", "memory_usage", "=", "0.0", "\n", "for", "tensor_name", "in", "tensor_names", ":", "\n", "        ", "memory_usage", "+=", "tensor_memory", "[", "tensor_name", "]", "\n", "", "peak_memory_usage", "=", "max", "(", "peak_memory_usage", ",", "memory_usage", ")", "\n", "", "return", "peak_memory_usage", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._global_var_name": [[378, 389], ["None"], "function", ["None"], ["", "", "def", "_global_var_name", "(", "splittable_dimension", ",", "mesh_dimension", ")", ":", "\n", "  ", "\"\"\"Name for a global variable.\n\n  Args:\n    splittable_dimension: the name of a splittable dimension (string)\n    mesh_dimension: the name of a mesh dimension (string)\n\n  Returns:\n    A string, the variable name.\n  \"\"\"", "\n", "return", "\"x_({}:{})\"", ".", "format", "(", "splittable_dimension", ",", "mesh_dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._local_var_name": [[391, 410], ["sorted", "assignment_string.append", "assignment_string.append"], "function", ["None"], ["", "def", "_local_var_name", "(", "splittable_dimensions", ",", "assignment", ")", ":", "\n", "  ", "\"\"\"Name for a local variable.\n\n  Args:\n    splittable_dimensions: frozenset of names of splittable dimensions.\n    assignment: dict from names of splittable dimensions to names of mesh\n      dimensions.\n\n  Returns:\n    A string, the variable name.\n  \"\"\"", "\n", "assignment_string", "=", "[", "]", "\n", "for", "splittable", "in", "sorted", "(", "splittable_dimensions", ")", ":", "\n", "    ", "if", "splittable", "in", "assignment", ":", "\n", "      ", "assignment_string", ".", "append", "(", "\"{}:{}\"", ".", "format", "(", "splittable", ",", "\n", "assignment", "[", "splittable", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "assignment_string", ".", "append", "(", "\"{}\"", ".", "format", "(", "splittable", ")", ")", "\n", "", "", "return", "\"y_(\"", "+", "\",\"", ".", "join", "(", "assignment_string", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.auto_mtf.layout_optimizer._generate_assignments": [[412, 432], ["six.moves.xrange", "itertools.combinations", "min", "itertools.permutations", "len", "len", "assignments.append", "dict", "zip"], "function", ["None"], ["", "def", "_generate_assignments", "(", "splittable_dimensions", ",", "mesh_dimension_to_size", ")", ":", "\n", "  ", "\"\"\"Generates all ways to map splittable dimensions to mesh dimensions.\n\n  Args:\n    splittable_dimensions: a frozenset of the names of splittable dimensions.\n    mesh_dimension_to_size: a dictionary from mesh dimension name to size.\n\n  Returns:\n    A list of the valid assignments. Each assignment is a dict keyed by every\n        splittable dimension, whose value is either a mesh dimension or None.\n  \"\"\"", "\n", "assignments", "=", "[", "]", "\n", "for", "assignment_size", "in", "six", ".", "moves", ".", "xrange", "(", "\n", "1", "+", "min", "(", "len", "(", "splittable_dimensions", ")", ",", "len", "(", "mesh_dimension_to_size", ")", ")", ")", ":", "\n", "    ", "for", "s_dims_chosen", "in", "itertools", ".", "combinations", "(", "splittable_dimensions", ",", "\n", "assignment_size", ")", ":", "\n", "      ", "for", "m_dims_chosen", "in", "itertools", ".", "permutations", "(", "mesh_dimension_to_size", ",", "\n", "assignment_size", ")", ":", "\n", "        ", "assignments", ".", "append", "(", "dict", "(", "zip", "(", "s_dims_chosen", ",", "m_dims_chosen", ")", ")", ")", "\n", "", "", "", "return", "assignments", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.FactorizedVocabEmbeddingTest.setUp": [[46, 57], ["super().setUp", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.VariableDType", "vocab_embeddings_test.FactorizedVocabEmbeddingTest.addCleanup", "mock.MagicMock", "mock.patch.object().start", "mock.patch.object"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "FactorizedVocabEmbeddingTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "mesh", "=", "mtf", ".", "Mesh", "(", "self", ".", "graph", ",", "'mtf_mesh'", ")", "\n", "self", ".", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "activation_dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "addCleanup", "(", "mock", ".", "patch", ".", "stopall", ")", "\n", "self", ".", "initializer_mock", "=", "mock", ".", "MagicMock", "(", ")", "\n", "random_normal_initializer_mock", "=", "mock", ".", "patch", ".", "object", "(", "\n", "tf", ",", "'random_normal_initializer'", ")", ".", "start", "(", ")", "\n", "random_normal_initializer_mock", ".", "return_value", "=", "self", ".", "initializer_mock", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.FactorizedVocabEmbeddingTest.test_ids_to_embedding_correctlyEmbeds": [[58, 98], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.transformer.vocab_embeddings.FactorizedVocabEmbedding", "mesh_tensorflow.transformer.vocab_embeddings.FactorizedVocabEmbedding.ids_to_embedding", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "vocab_embeddings_test.FactorizedVocabEmbeddingTest.evaluate", "vocab_embeddings_test.FactorizedVocabEmbeddingTest.evaluate", "vocab_embeddings_test.FactorizedVocabEmbeddingTest.assertAllClose", "tensorflow.reshape", "tensorflow.global_variables_initializer", "mesh_tensorflow.Lowering.copy_masters_to_slices", "vocab_embeddings_test.FactorizedVocabEmbeddingTest.evaluate", "mesh_tensorflow.Shape", "tensorflow.range", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.ids_to_embedding", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "def", "test_ids_to_embedding_correctlyEmbeds", "(", "self", ")", ":", "\n", "    ", "seq_len", "=", "4", "\n", "vocab_size", "=", "3", "\n", "model_size", "=", "2", "\n", "inner_dimension_size", "=", "1", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "ids", "=", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "2", ",", "1", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "mtf_ids", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "ids", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", "]", ")", ")", "\n", "\n", "def", "initialize", "(", "shape", ",", "dtype", ")", ":", "\n", "      ", "return", "tf", ".", "reshape", "(", "1", "+", "tf", ".", "range", "(", "np", ".", "prod", "(", "shape", ")", ",", "dtype", "=", "dtype", ")", ",", "shape", ")", "\n", "\n", "", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize", "\n", "\n", "vocab_embedding", "=", "vocab_embeddings", ".", "FactorizedVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "inner_dimension_size", "=", "inner_dimension_size", ")", "\n", "\n", "mtf_embedding", "=", "vocab_embedding", ".", "ids_to_embedding", "(", "mtf_ids", ",", "context", "=", "None", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "''", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_embedding", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_embedding", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "[", "actual_embedding", "]", ")", "[", "0", "]", "\n", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "[", "[", "1", ",", "2", "]", ",", "[", "2", ",", "4", "]", ",", "[", "3", ",", "6", "]", ",", "[", "2", ",", "4", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.FactorizedVocabEmbeddingTest.test_hidden_to_logits_computesLogitsCorrectly": [[99, 141], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.transformer.vocab_embeddings.FactorizedVocabEmbedding", "mesh_tensorflow.transformer.vocab_embeddings.FactorizedVocabEmbedding.hidden_to_logits", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "vocab_embeddings_test.FactorizedVocabEmbeddingTest.evaluate", "vocab_embeddings_test.FactorizedVocabEmbeddingTest.evaluate", "vocab_embeddings_test.FactorizedVocabEmbeddingTest.assertAllClose", "tensorflow.reshape", "tensorflow.global_variables_initializer", "mesh_tensorflow.Lowering.copy_masters_to_slices", "vocab_embeddings_test.FactorizedVocabEmbeddingTest.evaluate", "mesh_tensorflow.Shape", "numpy.array", "tensorflow.range", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "def", "test_hidden_to_logits_computesLogitsCorrectly", "(", "self", ")", ":", "\n", "    ", "seq_len", "=", "4", "\n", "vocab_size", "=", "3", "\n", "model_size", "=", "2", "\n", "inner_dimension_size", "=", "1", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "embeddings", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "2", ",", "1", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mtf_embeddings", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "embeddings", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", ",", "model_dim", "]", ")", ")", "\n", "\n", "def", "initialize", "(", "shape", ",", "dtype", ")", ":", "\n", "      ", "return", "tf", ".", "reshape", "(", "1", "+", "tf", ".", "range", "(", "np", ".", "prod", "(", "shape", ")", ",", "dtype", "=", "dtype", ")", ",", "shape", ")", "\n", "\n", "", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize", "\n", "\n", "vocab_embedding", "=", "vocab_embeddings", ".", "FactorizedVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "inner_dimension_size", "=", "inner_dimension_size", ")", "\n", "\n", "mtf_logits", "=", "vocab_embedding", ".", "hidden_to_logits", "(", "mtf_embeddings", ",", "context", "=", "None", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "''", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_logits", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_logits", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "[", "actual_logits", "]", ")", "[", "0", "]", "\n", "\n", "self", ".", "assertAllClose", "(", "\n", "actual", ",", "model_size", "**", "-", "0.5", "*", "\n", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "2", ",", "4", ",", "6", "]", ",", "[", "3", ",", "6", ",", "9", "]", ",", "[", "4", ",", "8", ",", "12", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.AdaptiveVocabEmbeddingTest.setUp": [[145, 156], ["super().setUp", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.VariableDType", "vocab_embeddings_test.AdaptiveVocabEmbeddingTest.addCleanup", "mock.MagicMock", "mock.patch.object().start", "mock.patch.object"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "AdaptiveVocabEmbeddingTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "mesh", "=", "mtf", ".", "Mesh", "(", "self", ".", "graph", ",", "'mtf_mesh'", ")", "\n", "self", ".", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "activation_dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "addCleanup", "(", "mock", ".", "patch", ".", "stopall", ")", "\n", "self", ".", "initializer_mock", "=", "mock", ".", "MagicMock", "(", ")", "\n", "random_normal_initializer_mock", "=", "mock", ".", "patch", ".", "object", "(", "\n", "tf", ",", "'random_normal_initializer'", ")", ".", "start", "(", ")", "\n", "random_normal_initializer_mock", ".", "return_value", "=", "self", ".", "initializer_mock", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.AdaptiveVocabEmbeddingTest.test_constructor_tokenCountsDontSumToVocabSize_raisesValueError": [[157, 175], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "vocab_embeddings_test.AdaptiveVocabEmbeddingTest.assertRaises", "mesh_tensorflow.transformer.vocab_embeddings.AdaptiveVocabEmbedding"], "methods", ["None"], ["", "def", "test_constructor_tokenCountsDontSumToVocabSize_raisesValueError", "(", "self", ")", ":", "\n", "    ", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "5", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "2", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "vocab_embeddings", ".", "AdaptiveVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "clusters", "=", "[", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "2", "\n", "}", ",", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "1", "\n", "}", "]", ")", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.AdaptiveVocabEmbeddingTest.test_ids_to_embedding_correctlyEmbeds": [[177, 224], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "vocab_embeddings_test.initialize_by_shape", "mesh_tensorflow.transformer.vocab_embeddings.AdaptiveVocabEmbedding", "mesh_tensorflow.transformer.vocab_embeddings.AdaptiveVocabEmbedding.ids_to_embedding", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "vocab_embeddings_test.AdaptiveVocabEmbeddingTest.evaluate", "vocab_embeddings_test.AdaptiveVocabEmbeddingTest.evaluate", "vocab_embeddings_test.AdaptiveVocabEmbeddingTest.assertAllClose", "tensorflow.global_variables_initializer", "mesh_tensorflow.Lowering.copy_masters_to_slices", "vocab_embeddings_test.AdaptiveVocabEmbeddingTest.evaluate", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.ids_to_embedding", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "", "def", "test_ids_to_embedding_correctlyEmbeds", "(", "self", ")", ":", "\n", "    ", "seq_len", "=", "6", "\n", "vocab_size", "=", "5", "\n", "model_size", "=", "2", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "ids", "=", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "0", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "mtf_ids", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "ids", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", "]", ")", ")", "\n", "\n", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "(", "2", ",", "2", ")", ":", "[", "[", "0", ",", "1", "]", ",", "[", "2", ",", "0", "]", "]", ",", "\n", "(", "3", ",", "1", ")", ":", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", "]", ",", "\n", "(", "1", ",", "2", ")", ":", "[", "[", "1", "]", ",", "[", "2", "]", "]", ",", "\n", "}", ")", "\n", "\n", "vocab_embedding", "=", "vocab_embeddings", ".", "AdaptiveVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "clusters", "=", "[", "{", "\n", "'token_count'", ":", "2", ",", "\n", "'embedding_size'", ":", "2", "\n", "}", ",", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "1", "\n", "}", "]", ")", "\n", "\n", "mtf_embedding", "=", "vocab_embedding", ".", "ids_to_embedding", "(", "mtf_ids", ",", "context", "=", "None", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "''", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_embedding", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_embedding", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "[", "actual_embedding", "]", ")", "[", "0", "]", "\n", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "\n", "[", "[", "0", ",", "1", "]", ",", "[", "2", ",", "0", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "4", "]", ",", "[", "3", ",", "6", "]", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.AdaptiveVocabEmbeddingTest.test_hidden_to_logits_computesLogitsCorrectly": [[225, 274], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "vocab_embeddings_test.initialize_by_shape", "mesh_tensorflow.transformer.vocab_embeddings.AdaptiveVocabEmbedding", "mesh_tensorflow.transformer.vocab_embeddings.AdaptiveVocabEmbedding.hidden_to_logits", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "vocab_embeddings_test.AdaptiveVocabEmbeddingTest.evaluate", "vocab_embeddings_test.AdaptiveVocabEmbeddingTest.evaluate", "vocab_embeddings_test.AdaptiveVocabEmbeddingTest.assertAllClose", "tensorflow.global_variables_initializer", "mesh_tensorflow.Lowering.copy_masters_to_slices", "vocab_embeddings_test.AdaptiveVocabEmbeddingTest.evaluate", "mesh_tensorflow.Shape", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "def", "test_hidden_to_logits_computesLogitsCorrectly", "(", "self", ")", ":", "\n", "    ", "seq_len", "=", "4", "\n", "vocab_size", "=", "5", "\n", "model_size", "=", "2", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "embeddings", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "2", ",", "1", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mtf_embeddings", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "embeddings", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", ",", "model_dim", "]", ")", ")", "\n", "\n", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "(", "2", ",", "2", ")", ":", "[", "[", "0", ",", "1", "]", ",", "[", "2", ",", "0", "]", "]", ",", "\n", "(", "3", ",", "1", ")", ":", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", "]", ",", "\n", "(", "1", ",", "2", ")", ":", "[", "[", "1", "]", ",", "[", "2", "]", "]", ",", "\n", "}", ")", "\n", "\n", "vocab_embedding", "=", "vocab_embeddings", ".", "AdaptiveVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "clusters", "=", "[", "{", "\n", "'token_count'", ":", "2", ",", "\n", "'embedding_size'", ":", "2", "\n", "}", ",", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "1", "\n", "}", "]", ")", "\n", "\n", "mtf_logits", "=", "vocab_embedding", ".", "hidden_to_logits", "(", "mtf_embeddings", ",", "context", "=", "None", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "''", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_logits", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_logits", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "[", "actual_logits", "]", ")", "[", "0", "]", "\n", "\n", "self", ".", "assertAllClose", "(", "\n", "actual", ",", "\n", "model_size", "**", "-", "0.5", "*", "np", ".", "array", "(", "[", "[", "0", ",", "2", ",", "1", ",", "2", ",", "3", "]", ",", "[", "1", ",", "0", ",", "2", ",", "4", ",", "6", "]", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "6", ",", "9", "]", ",", "[", "1", ",", "4", ",", "4", ",", "8", ",", "12", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.MixtureOfSoftmaxesTest.setUp": [[278, 289], ["super().setUp", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.VariableDType", "vocab_embeddings_test.MixtureOfSoftmaxesTest.addCleanup", "mock.MagicMock", "mock.patch.object().start", "mock.patch.object"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "MixtureOfSoftmaxesTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "mesh", "=", "mtf", ".", "Mesh", "(", "self", ".", "graph", ",", "'mtf_mesh'", ")", "\n", "self", ".", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "activation_dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "addCleanup", "(", "mock", ".", "patch", ".", "stopall", ")", "\n", "self", ".", "initializer_mock", "=", "mock", ".", "MagicMock", "(", ")", "\n", "random_normal_initializer_mock", "=", "mock", ".", "patch", ".", "object", "(", "\n", "tf", ",", "'random_normal_initializer'", ")", ".", "start", "(", ")", "\n", "random_normal_initializer_mock", ".", "return_value", "=", "self", ".", "initializer_mock", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.MixtureOfSoftmaxesTest.test_ids_to_embedding_correctlyEmbeds": [[290, 334], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "vocab_embeddings_test.initialize_by_shape", "mesh_tensorflow.transformer.vocab_embeddings.MixtureOfSoftmaxes", "mesh_tensorflow.transformer.vocab_embeddings.MixtureOfSoftmaxes.ids_to_embedding", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "vocab_embeddings_test.MixtureOfSoftmaxesTest.evaluate", "vocab_embeddings_test.MixtureOfSoftmaxesTest.evaluate", "vocab_embeddings_test.MixtureOfSoftmaxesTest.assertAllClose", "tensorflow.global_variables_initializer", "mesh_tensorflow.Lowering.copy_masters_to_slices", "vocab_embeddings_test.MixtureOfSoftmaxesTest.evaluate", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.ids_to_embedding", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "def", "test_ids_to_embedding_correctlyEmbeds", "(", "self", ")", ":", "\n", "    ", "seq_len", "=", "4", "\n", "vocab_size", "=", "4", "\n", "model_size", "=", "3", "\n", "num_softmaxes", "=", "1", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "ids", "=", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "mtf_ids", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "ids", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", "]", ")", ")", "\n", "\n", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "# Embedding weights.", "\n", "(", "4", ",", "3", ")", ":", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "2", "]", "]", ",", "\n", "# Mixture weights.", "\n", "(", "1", ",", "3", ")", ":", "[", "[", "1", ",", "0", ",", "0", "]", "]", ",", "\n", "# Context weights", "\n", "(", "1", ",", "3", ",", "3", ")", ":", "[", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "]", ",", "\n", "}", ")", "\n", "\n", "vocab_embedding", "=", "vocab_embeddings", ".", "MixtureOfSoftmaxes", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "num_softmaxes", "=", "num_softmaxes", ")", "\n", "\n", "mtf_embedding", "=", "vocab_embedding", ".", "ids_to_embedding", "(", "mtf_ids", ",", "context", "=", "None", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "''", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_embedding", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_embedding", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "[", "actual_embedding", "]", ")", "[", "0", "]", "\n", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.MixtureOfSoftmaxesTest.test_hidden_to_logits_computesLogitsCorrectly": [[335, 391], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "vocab_embeddings_test.initialize_by_shape", "mesh_tensorflow.transformer.vocab_embeddings.MixtureOfSoftmaxes", "mesh_tensorflow.transformer.vocab_embeddings.MixtureOfSoftmaxes.hidden_to_logits", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "vocab_embeddings_test.MixtureOfSoftmaxesTest.evaluate", "vocab_embeddings_test.MixtureOfSoftmaxesTest.evaluate", "vocab_embeddings_test.MixtureOfSoftmaxesTest.evaluate", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "numpy.log", "vocab_embeddings_test.MixtureOfSoftmaxesTest.assertAllClose", "tensorflow.global_variables_initializer", "mesh_tensorflow.Lowering.copy_masters_to_slices", "numpy.tanh", "numpy.tanh", "numpy.array", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tanh", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tanh"], ["", "def", "test_hidden_to_logits_computesLogitsCorrectly", "(", "self", ")", ":", "\n", "    ", "seq_len", "=", "1", "\n", "vocab_size", "=", "4", "\n", "model_size", "=", "3", "\n", "num_softmaxes", "=", "2", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "embeddings", "=", "tf", ".", "constant", "(", "\n", "np", ".", "array", "(", "[", "[", "1.0", ",", "1.0", ",", "2.0", "]", "]", ")", "/", "model_size", "**", "-", "0.5", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mtf_embeddings", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "embeddings", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", ",", "model_dim", "]", ")", ")", "\n", "\n", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "# Embedding weights.", "\n", "(", "4", ",", "3", ")", ":", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "\n", "# Mixture weights.", "\n", "(", "2", ",", "3", ")", ":", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "1", "]", "]", ",", "\n", "# Context weights", "\n", "(", "2", ",", "3", ",", "3", ")", ":", "[", "\n", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "\n", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", "]", "]", ",", "\n", "]", ",", "\n", "}", ")", "\n", "\n", "vocab_embedding", "=", "vocab_embeddings", ".", "MixtureOfSoftmaxes", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "num_softmaxes", "=", "num_softmaxes", ")", "\n", "\n", "mtf_logits", "=", "vocab_embedding", ".", "hidden_to_logits", "(", "mtf_embeddings", ",", "context", "=", "None", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "''", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_logits", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_logits", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual", ",", "=", "self", ".", "evaluate", "(", "[", "actual_logits", "]", ")", "\n", "\n", "expected_priors", "=", "scipy", ".", "special", ".", "softmax", "(", "[", "1", ",", "3", "]", ")", "\n", "expected_probs_1", "=", "scipy", ".", "special", ".", "softmax", "(", "np", ".", "tanh", "(", "[", "1", ",", "1", ",", "2", ",", "2", "]", ")", ")", "\n", "expected_probs_2", "=", "scipy", ".", "special", ".", "softmax", "(", "np", ".", "tanh", "(", "[", "2", ",", "1", ",", "1", ",", "1", "]", ")", ")", "\n", "expected_probs", "=", "(", "\n", "expected_priors", "[", "0", "]", "*", "expected_probs_1", "+", "\n", "expected_priors", "[", "1", "]", "*", "expected_probs_2", ")", "\n", "expected_logits", "=", "np", ".", "log", "(", "expected_probs", ")", "\n", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "[", "expected_logits", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.MixtapeTest.setUp": [[395, 406], ["super().setUp", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.VariableDType", "vocab_embeddings_test.MixtapeTest.addCleanup", "mock.MagicMock", "mock.patch.object().start", "mock.patch.object"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "MixtapeTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "mesh", "=", "mtf", ".", "Mesh", "(", "self", ".", "graph", ",", "'mtf_mesh'", ")", "\n", "self", ".", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "activation_dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "addCleanup", "(", "mock", ".", "patch", ".", "stopall", ")", "\n", "self", ".", "initializer_mock", "=", "mock", ".", "MagicMock", "(", ")", "\n", "random_normal_initializer_mock", "=", "mock", ".", "patch", ".", "object", "(", "\n", "tf", ",", "'random_normal_initializer'", ")", ".", "start", "(", ")", "\n", "random_normal_initializer_mock", ".", "return_value", "=", "self", ".", "initializer_mock", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.MixtapeTest.test_ids_to_embedding_correctlyEmbeds": [[407, 462], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mock.MagicMock", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "vocab_embeddings_test.initialize_by_shape", "mesh_tensorflow.transformer.vocab_embeddings.Mixtape", "mesh_tensorflow.transformer.vocab_embeddings.Mixtape.ids_to_embedding", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "vocab_embeddings_test.MixtapeTest.evaluate", "vocab_embeddings_test.MixtapeTest.evaluate", "vocab_embeddings_test.MixtapeTest.assertAllClose", "tensorflow.global_variables_initializer", "mesh_tensorflow.Lowering.copy_masters_to_slices", "vocab_embeddings_test.MixtapeTest.evaluate", "numpy.reshape", "mesh_tensorflow.Shape", "list", "list", "list", "list", "list", "list", "list", "range", "range", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.ids_to_embedding", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "test_ids_to_embedding_correctlyEmbeds", "(", "self", ")", ":", "\n", "    ", "seq_len", "=", "5", "\n", "vocab_size", "=", "5", "\n", "model_size", "=", "2", "\n", "gate_embedding_size", "=", "1", "\n", "frequent_token_fraction", "=", "0.4", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "context", "=", "mock", ".", "MagicMock", "(", ")", "\n", "context", ".", "train", "=", "False", "\n", "\n", "ids", "=", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "mtf_ids", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "ids", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", "]", ")", ")", "\n", "\n", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "# Embedding weights.", "\n", "(", "5", ",", "2", ")", ":", "list", "(", "range", "(", "10", ")", ")", ",", "\n", "# Context weights.", "\n", "(", "4", ",", "2", ",", "2", ")", ":", "list", "(", "range", "(", "16", ")", ")", ",", "\n", "# Prior weights.", "\n", "(", "3", ",", "1", ",", "2", ")", ":", "list", "(", "range", "(", "6", ")", ")", ",", "\n", "# Prior vocab vector.", "\n", "(", "2", ",", "1", ")", ":", "list", "(", "range", "(", "2", ")", ")", ",", "\n", "# Prior gates vector.", "\n", "(", "3", ",", "2", ")", ":", "list", "(", "range", "(", "6", ")", ")", ",", "\n", "# Prior bias.", "\n", "(", "2", ",", "3", ")", ":", "list", "(", "range", "(", "6", ")", ")", ",", "\n", "}", ")", "\n", "\n", "vocab_embedding", "=", "vocab_embeddings", ".", "Mixtape", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "gate_embedding_size", "=", "gate_embedding_size", ",", "\n", "frequent_token_fraction", "=", "frequent_token_fraction", ")", "\n", "\n", "mtf_embedding", "=", "vocab_embedding", ".", "ids_to_embedding", "(", "mtf_ids", ",", "context", "=", "None", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "''", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_embedding", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_embedding", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual", "=", "self", ".", "evaluate", "(", "[", "actual_embedding", "]", ")", "[", "0", "]", "\n", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "np", ".", "reshape", "(", "list", "(", "range", "(", "10", ")", ")", ",", "(", "5", ",", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.MixtapeTest.test_hidden_to_logits_computesLogitsCorrectly": [[463, 535], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mock.MagicMock", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "vocab_embeddings_test.initialize_by_shape", "mesh_tensorflow.transformer.vocab_embeddings.Mixtape", "mesh_tensorflow.transformer.vocab_embeddings.Mixtape.hidden_to_logits", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "vocab_embeddings_test.MixtapeTest.evaluate", "vocab_embeddings_test.MixtapeTest.evaluate", "vocab_embeddings_test.MixtapeTest.evaluate", "vocab_embeddings_test.MixtapeTest.assertAllClose", "tensorflow.global_variables_initializer", "mesh_tensorflow.Lowering.copy_masters_to_slices", "numpy.array", "mesh_tensorflow.Shape", "list", "range"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "def", "test_hidden_to_logits_computesLogitsCorrectly", "(", "self", ")", ":", "\n", "    ", "seq_len", "=", "1", "\n", "vocab_size", "=", "5", "\n", "model_size", "=", "2", "\n", "gate_embedding_size", "=", "1", "\n", "frequent_token_fraction", "=", "0.4", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "context", "=", "mock", ".", "MagicMock", "(", ")", "\n", "context", ".", "train", "=", "False", "\n", "\n", "embeddings", "=", "tf", ".", "constant", "(", "\n", "np", ".", "array", "(", "[", "[", "1.0", ",", "2.0", "]", "]", ")", "/", "model_size", "**", "-", "0.5", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mtf_embeddings", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "embeddings", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", ",", "model_dim", "]", ")", ")", "\n", "\n", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "# Embedding weights.", "\n", "(", "5", ",", "2", ")", ":", "list", "(", "range", "(", "10", ")", ")", ",", "\n", "# Context weights.", "\n", "(", "4", ",", "2", ",", "2", ")", ":", "[", "\n", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", "]", ",", "\n", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ",", "\n", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ",", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", "]", ",", "\n", "]", ",", "\n", "# Prior weights.", "\n", "(", "3", ",", "1", ",", "2", ")", ":", "[", "\n", "[", "[", "1", ",", "0", "]", "]", ",", "\n", "[", "[", "0", ",", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", "]", ",", "\n", "]", ",", "\n", "# Prior vocab vector.", "\n", "(", "2", ",", "1", ")", ":", "[", "[", "1", "]", ",", "[", "1", "]", "]", ",", "\n", "# Prior gates vector.", "\n", "(", "3", ",", "2", ")", ":", "[", "\n", "[", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", "]", ",", "\n", "]", ",", "\n", "# Prior bias.", "\n", "(", "2", ",", "3", ")", ":", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "3", ",", "4", ",", "5", "]", "]", ",", "\n", "}", ")", "\n", "\n", "vocab_embedding", "=", "vocab_embeddings", ".", "Mixtape", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "gate_embedding_size", "=", "gate_embedding_size", ",", "\n", "frequent_token_fraction", "=", "frequent_token_fraction", ",", "\n", "noise_std_dev", "=", "0.0", ")", "\n", "\n", "mtf_logits", "=", "vocab_embedding", ".", "hidden_to_logits", "(", "\n", "mtf_embeddings", ",", "context", "=", "context", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "''", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_logits", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_logits", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual", ",", "=", "self", ".", "evaluate", "(", "[", "actual_logits", "]", ")", "\n", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "\n", "[", "[", "0.905462", ",", "4.390559", ",", "6.575162", ",", "9.513036", ",", "12.450909", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings_test.initialize_by_shape": [[30, 42], ["tuple", "tensorflow.reshape", "ValueError", "tensorflow.constant", "tuple"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["def", "initialize_by_shape", "(", "shape_to_value", ")", ":", "\n", "  ", "\"\"\"Create an initializer with values specified by tensor shape.\"\"\"", "\n", "\n", "def", "initialize", "(", "shape", ",", "dtype", ")", ":", "\n", "    ", "shape", "=", "tuple", "(", "shape", ")", "\n", "if", "shape", "not", "in", "shape_to_value", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'Shape {} not found in shape to value map.'", ".", "format", "(", "shape", ")", ")", "\n", "", "return", "tf", ".", "reshape", "(", "\n", "tf", ".", "constant", "(", "shape_to_value", "[", "tuple", "(", "shape", ")", "]", ",", "dtype", "=", "dtype", ")", ",", "shape", ")", "\n", "\n", "", "return", "initialize", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset_test.DatasetTest.assert_dataset": [[32, 41], ["list", "dataset_test.DatasetTest.assertLen", "zip", "tensorflow_datasets.as_numpy", "len", "dataset_test.DatasetTest.assertCountEqual", "actual.items", "list", "list", "numpy.testing.assert_array_equal", "actual.keys", "expected.keys", "dataset_test.DatasetTest.assertEqual"], "methods", ["None"], ["def", "assert_dataset", "(", "self", ",", "ds", ",", "expected_ds", ",", "expected_dtypes", ")", ":", "\n", "    ", "actual_ds", "=", "list", "(", "tfds", ".", "as_numpy", "(", "ds", ")", ")", "\n", "self", ".", "assertLen", "(", "actual_ds", ",", "len", "(", "expected_ds", ")", ")", "\n", "for", "actual", ",", "expected", "in", "zip", "(", "actual_ds", ",", "expected_ds", ")", ":", "\n", "      ", "self", ".", "assertCountEqual", "(", "list", "(", "actual", ".", "keys", "(", ")", ")", ",", "list", "(", "expected", ".", "keys", "(", ")", ")", ")", "\n", "for", "k", ",", "v", "in", "actual", ".", "items", "(", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_array_equal", "(", "v", ",", "expected", "[", "k", "]", ")", "\n", "if", "k", "in", "expected_dtypes", ":", "\n", "          ", "self", ".", "assertEqual", "(", "v", ".", "dtype", ".", "type", ",", "expected_dtypes", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset_test.DatasetTest.test_pack_dataset": [[42, 63], ["absl.testing.parameterized.parameters", "dataset_test.create_default_dataset", "mesh_tensorflow.transformer.dataset.pack_dataset", "dataset_test.DatasetTest.assert_dataset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset_test.create_default_dataset", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pack_dataset", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset_test.DatasetTest.assert_dataset"], ["", "", "", "", "@", "parameterized", ".", "parameters", "(", "*", "_PACK_PARAMETERS", ")", "\n", "def", "test_pack_dataset", "(", "self", ",", "use_custom_ops", ")", ":", "\n", "    ", "x", "=", "[", "{", "\"inputs\"", ":", "[", "7", ",", "8", ",", "5", ",", "1", "]", ",", "\"targets\"", ":", "[", "3", ",", "9", ",", "1", "]", ",", "\"idx\"", ":", "[", "0", "]", "}", ",", "\n", "{", "\"inputs\"", ":", "[", "8", ",", "4", ",", "9", ",", "3", ",", "1", "]", ",", "\"targets\"", ":", "[", "4", ",", "1", "]", ",", "\"idx\"", ":", "[", "1", "]", "}", "]", "\n", "ds", "=", "create_default_dataset", "(", "x", ",", "feature_names", "=", "(", "\"inputs\"", ",", "\"targets\"", ",", "\"idx\"", ")", ")", "\n", "packed_ds", "=", "dataset", ".", "pack_dataset", "(", "\n", "ds", ",", "\n", "length", "=", "{", "\"inputs\"", ":", "10", ",", "\"targets\"", ":", "7", "}", ",", "\n", "keys", "=", "(", "\"inputs\"", ",", "\"targets\"", ")", ",", "\n", "use_custom_ops", "=", "use_custom_ops", ")", "\n", "\n", "expected", "=", "[", "{", "\n", "\"inputs\"", ":", "[", "7", ",", "8", ",", "5", ",", "1", ",", "8", ",", "4", ",", "9", ",", "3", ",", "1", ",", "0", "]", ",", "\n", "\"inputs_segmentation\"", ":", "[", "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "0", "]", ",", "\n", "\"inputs_position\"", ":", "[", "0", ",", "1", ",", "2", ",", "3", ",", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "0", "]", ",", "\n", "\"targets\"", ":", "[", "3", ",", "9", ",", "1", ",", "4", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "\"targets_position\"", ":", "[", "0", ",", "1", ",", "2", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "\"targets_segmentation\"", ":", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "0", ",", "0", "]", ",", "\n", "}", "]", "\n", "self", ".", "assert_dataset", "(", "\n", "packed_ds", ",", "expected", ",", "{", "\"inputs\"", ":", "tf", ".", "int32", ",", "\"targets\"", ":", "tf", ".", "int32", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset_test.DatasetTest.test_pack_dataset_no_eos": [[64, 85], ["absl.testing.parameterized.parameters", "dataset_test.create_default_dataset", "mesh_tensorflow.transformer.dataset.pack_dataset", "dataset_test.DatasetTest.assert_dataset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset_test.create_default_dataset", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pack_dataset", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset_test.DatasetTest.assert_dataset"], ["", "@", "parameterized", ".", "parameters", "(", "*", "_PACK_PARAMETERS", ")", "\n", "def", "test_pack_dataset_no_eos", "(", "self", ",", "use_custom_ops", ")", ":", "\n", "    ", "x", "=", "[", "{", "\"inputs\"", ":", "[", "7", ",", "8", ",", "5", "]", ",", "\"targets\"", ":", "[", "3", ",", "9", "]", "}", ",", "\n", "{", "\"inputs\"", ":", "[", "8", ",", "4", ",", "9", ",", "3", "]", ",", "\"targets\"", ":", "[", "4", "]", "}", "]", "\n", "ds", "=", "create_default_dataset", "(", "x", ")", "\n", "packed_ds", "=", "dataset", ".", "pack_dataset", "(", "\n", "ds", ",", "\n", "length", "=", "{", "\"inputs\"", ":", "8", ",", "\"targets\"", ":", "5", "}", ",", "\n", "use_custom_ops", "=", "use_custom_ops", ")", "\n", "\n", "# Packing still works without the eos.", "\n", "expected", "=", "[", "{", "\n", "\"inputs\"", ":", "[", "7", ",", "8", ",", "5", ",", "8", ",", "4", ",", "9", ",", "3", ",", "0", "]", ",", "\n", "\"inputs_segmentation\"", ":", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "0", "]", ",", "\n", "\"inputs_position\"", ":", "[", "0", ",", "1", ",", "2", ",", "0", ",", "1", ",", "2", ",", "3", ",", "0", "]", ",", "\n", "\"targets\"", ":", "[", "3", ",", "9", ",", "4", ",", "0", ",", "0", "]", ",", "\n", "\"targets_position\"", ":", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "\"targets_segmentation\"", ":", "[", "1", ",", "1", ",", "2", ",", "0", ",", "0", "]", ",", "\n", "}", "]", "\n", "self", ".", "assert_dataset", "(", "\n", "packed_ds", ",", "expected", ",", "{", "\"inputs\"", ":", "tf", ".", "int32", ",", "\"targets\"", ":", "tf", ".", "int32", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset_test.DatasetTest.test_pack_dataset_long_seq": [[86, 113], ["absl.testing.parameterized.parameters", "dataset_test.create_default_dataset", "mesh_tensorflow.transformer.dataset.pack_dataset", "dataset_test.DatasetTest.assert_dataset"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset_test.create_default_dataset", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pack_dataset", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset_test.DatasetTest.assert_dataset"], ["", "@", "parameterized", ".", "parameters", "(", "*", "_PACK_PARAMETERS", ")", "\n", "def", "test_pack_dataset_long_seq", "(", "self", ",", "use_custom_ops", ")", ":", "\n", "    ", "x", "=", "[", "{", "\"inputs\"", ":", "[", "7", ",", "8", ",", "5", ",", "6", ",", "9", ",", "4", ",", "1", "]", ",", "\"targets\"", ":", "[", "3", ",", "9", ",", "1", "]", "}", ",", "\n", "{", "\"inputs\"", ":", "[", "8", ",", "4", ",", "9", ",", "3", ",", "5", ",", "7", ",", "9", ",", "1", "]", ",", "\"targets\"", ":", "[", "4", ",", "1", "]", "}", "]", "\n", "ds", "=", "create_default_dataset", "(", "x", ")", "\n", "packed_ds", "=", "dataset", ".", "pack_dataset", "(", "\n", "ds", ",", "\n", "length", "=", "{", "\"inputs\"", ":", "7", ",", "\"targets\"", ":", "3", "}", ",", "\n", "use_custom_ops", "=", "use_custom_ops", ")", "\n", "expected", "=", "[", "{", "\n", "\"inputs\"", ":", "[", "7", ",", "8", ",", "5", ",", "6", ",", "9", ",", "4", ",", "1", "]", ",", "\n", "\"inputs_segmentation\"", ":", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "\"inputs_position\"", ":", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "\"targets\"", ":", "[", "3", ",", "9", ",", "1", "]", ",", "\n", "\"targets_position\"", ":", "[", "0", ",", "1", ",", "2", "]", ",", "\n", "\"targets_segmentation\"", ":", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "}", ",", "{", "\n", "# EOS is trimmed", "\n", "\"inputs\"", ":", "[", "8", ",", "4", ",", "9", ",", "3", ",", "5", ",", "7", ",", "9", "]", ",", "\n", "\"inputs_segmentation\"", ":", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "\"inputs_position\"", ":", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "\"targets\"", ":", "[", "4", ",", "1", ",", "0", "]", ",", "\n", "\"targets_position\"", ":", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "\"targets_segmentation\"", ":", "[", "1", ",", "1", ",", "0", "]", ",", "\n", "}", "]", "\n", "self", ".", "assert_dataset", "(", "\n", "packed_ds", ",", "expected", ",", "{", "\"inputs\"", ":", "tf", ".", "int32", ",", "\"targets\"", ":", "tf", ".", "int32", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset_test.create_default_dataset": [[115, 122], ["tensorflow.data.Dataset.from_generator"], "function", ["None"], ["", "", "def", "create_default_dataset", "(", "x", ",", "feature_names", "=", "(", "\"inputs\"", ",", "\"targets\"", ")", ")", ":", "\n", "  ", "output_types", "=", "{", "feature_name", ":", "tf", ".", "int32", "for", "feature_name", "in", "feature_names", "}", "\n", "output_shapes", "=", "{", "feature_name", ":", "[", "None", "]", "for", "feature_name", "in", "feature_names", "}", "\n", "\n", "ds", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "lambda", ":", "x", ",", "output_types", "=", "output_types", ",", "output_shapes", "=", "output_shapes", ")", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocabulary.Vocabulary.vocab_size": [[35, 43], ["NotImplementedError"], "methods", ["None"], ["@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"Number of ids (including 0=PAD and 1=EOS).\n\n    Returns:\n      an integer\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocabulary.Vocabulary.encode": [[44, 53], ["NotImplementedError"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "s", ")", ":", "\n", "    ", "\"\"\"Encode a python string as a list of integers.\n\n    Args:\n      s: a string\n    Returns:\n      a list of integers (not terminated by EOS)\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocabulary.Vocabulary.decode": [[54, 63], ["NotImplementedError"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "ids", ")", ":", "\n", "    ", "\"\"\"Decode a list of integers to a python string.\n\n    Args:\n      ids: a list of integers (not terminated by EOS)\n    Returns:\n      a string\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocabulary.Vocabulary.encode_tf": [[64, 75], ["NotImplementedError"], "methods", ["None"], ["", "def", "encode_tf", "(", "self", ",", "s", ")", ":", "\n", "    ", "\"\"\"Encode a tf.Scalar string to a tf.Tensor.\n\n    This will be necessary for on-the-fly tokenization.\n\n    Args:\n      s: a tf.Scalar with dtype tf.string\n    Returns:\n      a 1d tf.Tensor with dtype tf.int32\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocabulary.Vocabulary.decode_tf": [[76, 88], ["NotImplementedError"], "methods", ["None"], ["", "def", "decode_tf", "(", "self", ",", "ids", ")", ":", "\n", "    ", "\"\"\"Decode in TensorFlow.\n\n    I don't know when we will use this, but it seems logical to\n    have if we can.\n\n    Args:\n      ids: a 1d tf.Tensor with dtype tf.int32\n    Returns:\n      a tf Scalar with dtype tf.string\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocabulary.TFDSVocabulary.__init__": [[97, 99], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tfds_encoder", ")", ":", "\n", "    ", "self", ".", "_tfds_encoder", "=", "tfds_encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocabulary.TFDSVocabulary.vocab_size": [[100, 108], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"Number of ids (including 0=PAD and 1=EOS).\n\n    Returns:\n      an integer\n    \"\"\"", "\n", "return", "self", ".", "_tfds_encoder", ".", "vocab_size", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocabulary.TFDSVocabulary.encode": [[109, 119], ["vocabulary.TFDSVocabulary._tfds_encoder.encode"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode"], ["", "def", "encode", "(", "self", ",", "s", ")", ":", "\n", "    ", "\"\"\"Encode a python string as a list of integers.\n\n    Args:\n      s: a string\n    Returns:\n      a list of integers (not terminated by EOS)\n    \"\"\"", "\n", "# shift IDs up by 1 to make room for EOS=1 (see class docstring)", "\n", "return", "[", "i", "+", "1", "for", "i", "in", "self", ".", "_tfds_encoder", ".", "encode", "(", "s", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocabulary.TFDSVocabulary.decode": [[120, 129], ["vocabulary.TFDSVocabulary._tfds_encoder.decode"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode"], ["", "def", "decode", "(", "self", ",", "ids", ")", ":", "\n", "    ", "\"\"\"Decode a list of integers to a python string.\n\n    Args:\n      ids: a list of integers (not terminated by EOS)\n    Returns:\n      a string\n    \"\"\"", "\n", "return", "self", ".", "_tfds_encoder", ".", "decode", "(", "[", "i", "-", "1", "for", "i", "in", "ids", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocabulary.get_tfds_vocabulary": [[131, 137], ["vocabulary.TFDSVocabulary", "tensorflow_datasets.builder"], "function", ["None"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "get_tfds_vocabulary", "(", "dataset_name", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "  ", "info", "=", "tfds", ".", "builder", "(", "dataset_name", ")", ".", "info", "\n", "# this assumes that either there are no inputs, or that the", "\n", "# inputs and targets have the same vocabulary.", "\n", "return", "TFDSVocabulary", "(", "info", ".", "features", "[", "info", ".", "supervised_keys", "[", "1", "]", "]", ".", "encoder", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.DenseReluDense.__init__": [[39, 54], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "hidden_size", "=", "4096", ",", "dropout_rate", "=", "0.0", ",", "activation", "=", "\"relu\"", ",", "\n", "use_bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"Create a DenseReluDense.\n\n    Args:\n      hidden_size: an integer - size of the hidden layer\n      dropout_rate: a floating-point number\n      activation: an activation function or a list of activation functions.\n        see documentation for mtf.layers.dense_product()\n      use_bias: a boolean, whether to use bias in the dense layers.\n    \"\"\"", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.DenseReluDense.call": [[55, 77], ["mesh_tensorflow.Dimension", "mesh_tensorflow.layers.dense_product", "mesh_tensorflow.layers.dense", "mesh_tensorflow.dropout"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "io_channels", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "hidden_channels", "=", "mtf", ".", "Dimension", "(", "\"d_ff\"", ",", "self", ".", "hidden_size", ")", "\n", "h", "=", "mtf", ".", "layers", ".", "dense_product", "(", "x", ",", "\n", "reduced_dims", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "new_dims", "=", "hidden_channels", ",", "\n", "activation_functions", "=", "self", ".", "activation", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"wi\"", ",", "\n", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ")", "\n", "if", "context", ".", "train", "and", "self", ".", "dropout_rate", "!=", "0.0", ":", "\n", "      ", "h", "=", "mtf", ".", "dropout", "(", "h", ",", "context", ".", "train", ",", "keep_prob", "=", "1.0", "-", "self", ".", "dropout_rate", ",", "\n", "noise_shape", "=", "h", ".", "shape", "-", "context", ".", "length_dim", ")", "\n", "", "return", "mtf", ".", "layers", ".", "dense", "(", "h", ",", "io_channels", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "activation", "=", "None", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "reduced_dims", "=", "h", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "name", "=", "\"wo\"", ",", "\n", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.__init__": [[156, 230], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "num_heads", "=", "8", ",", "\n", "num_memory_heads", "=", "0", ",", "\n", "key_value_size", "=", "128", ",", "\n", "shared_kv", "=", "False", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "attention_kwargs", "=", "None", ",", "\n", "relative_attention_type", "=", "None", ",", "\n", "relative_attention_num_buckets", "=", "32", ",", "\n", "attention_func", "=", "None", ",", "\n", "combine_dims", "=", "True", ",", "\n", "keep_query_heads_dims", "=", "False", ",", "\n", "fold_scaling_into_initializer", "=", "True", ",", "\n", "z_loss_coeff", "=", "None", ",", "\n", "use_hyperprompt", "=", "False", ",", "\n", "hyperprompt_mtlshare", "=", "False", ",", "\n", "hyperprompt_length_encoder", "=", "None", ",", "\n", "hyperprompt_length_decoder", "=", "None", ",", "\n", "hyperprompt_hidden_dim", "=", "None", ",", "\n", "hyperprompt_task_num", "=", "8", ")", ":", "\n", "    ", "\"\"\"Create a SelfAttention Layer.\n\n    Args:\n      num_heads: an integer\n      num_memory_heads: an optional integer\n      key_value_size: an integer\n      shared_kv: a boolean\n      dropout_rate: a float\n      attention_kwargs: a dictionary of kwargs for attention.attention\n      relative_attention_type: an optional string - one of\n        (None, \"bias\", \"bias_shared\", \"contextual\")\n      relative_attention_num_buckets: an integer\n      attention_func: attention function: None/'hybrid'.\n      combine_dims: a boolean\n      keep_query_heads_dims: a boolean\n      fold_scaling_into_initializer: a boolean\n      z_loss_coeff: a float, if z_loss_coeff is not None then add an auxiliary\n        loss to push the attention logits closer to zero. This helps to\n        stabilize model training.\n      use_hyperprompt: a boolean, whether to use hypernetwork to enable the info\n        sharing among task-prompts. Otherwise, MTL-Prompt is enabled if either\n        hyperprompt_length_encoder or hyperprompt_length_decoder is not None.\n      hyperprompt_mtlshare: a boolean, whether to share MTL-Prompt project\n        networks among tasks if MTL-Prompt is activate. Otherwise, each task has\n        its own project network (MTL-Prompt-Sep).\n      hyperprompt_length_encoder: an integer, the length of task embeddings\n        prepended to the keys and values in encoder. If it is None, prompts are\n        not prepended in the encoder.\n      hyperprompt_length_decoder: aan integer, the length of task embeddings\n        prepended to the keys and values in decoder. If it is None, prompts are\n        not prepended in the decoder.\n      hyperprompt_hidden_dim: the bottleneck dimension in MLPs to generate\n        hyper-prompts.\n      hyperprompt_task_num: an integer, # of tasks in hyperprompt mode.\n    \"\"\"", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "num_memory_heads", "=", "num_memory_heads", "\n", "self", ".", "key_value_size", "=", "key_value_size", "\n", "self", ".", "shared_kv", "=", "shared_kv", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "attention_kwargs", "=", "attention_kwargs", "or", "{", "}", "\n", "self", ".", "relative_attention_type", "=", "relative_attention_type", "\n", "self", ".", "relative_attention_num_buckets", "=", "relative_attention_num_buckets", "\n", "self", ".", "attention_func", "=", "attention_func", "\n", "self", ".", "combine_dims", "=", "combine_dims", "\n", "self", ".", "keep_query_heads_dims", "=", "keep_query_heads_dims", "\n", "self", ".", "fold_scaling_into_initializer", "=", "fold_scaling_into_initializer", "\n", "self", ".", "z_loss_coeff", "=", "z_loss_coeff", "\n", "self", ".", "use_hyperprompt", "=", "use_hyperprompt", "\n", "self", ".", "hyperprompt_mtlshare", "=", "hyperprompt_mtlshare", "\n", "self", ".", "hyperprompt_length_encoder", "=", "hyperprompt_length_encoder", "\n", "self", ".", "hyperprompt_length_decoder", "=", "hyperprompt_length_decoder", "\n", "self", ".", "hyperprompt_hidden_dim", "=", "hyperprompt_hidden_dim", "\n", "self", ".", "hyperprompt_task_num", "=", "hyperprompt_task_num", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.layer_output_from_attention_output": [[231, 234], ["None"], "methods", ["None"], ["", "def", "layer_output_from_attention_output", "(", "self", ",", "context", ",", "attention_output", ",", "\n", "losses", ")", ":", "\n", "    ", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.expected_attention_output_shape": [[235, 239], ["mesh_tensorflow.Shape"], "methods", ["None"], ["", "def", "expected_attention_output_shape", "(", "self", ",", "x", ",", "params", ")", ":", "\n", "    ", "if", "self", ".", "keep_query_heads_dims", ":", "\n", "      ", "return", "mtf", ".", "Shape", "(", "x", ".", "shape", "[", ":", "-", "1", "]", "+", "params", ".", "query_heads_dims", "+", "x", ".", "shape", "[", "-", "1", ":", "]", ")", "\n", "", "return", "x", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.attention_kwargs_from_context": [[240, 246], ["copy.copy"], "methods", ["None"], ["", "def", "attention_kwargs_from_context", "(", "self", ",", "context", ")", ":", "\n", "    ", "kwargs", "=", "copy", ".", "copy", "(", "self", ".", "attention_kwargs", ")", "\n", "kwargs", "[", "\"dropout_rate\"", "]", "=", "self", ".", "dropout_rate", "if", "context", ".", "train", "else", "0.0", "\n", "if", "\"dropout_broadcast_dims\"", "not", "in", "kwargs", ":", "\n", "      ", "kwargs", "[", "\"dropout_broadcast_dims\"", "]", "=", "[", "context", ".", "length_dim", "]", "\n", "", "return", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.make_params": [[247, 257], ["transformer_layers.attention_params"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.attention_params"], ["", "def", "make_params", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "attention_params", "(", "\n", "context", "=", "context", ",", "\n", "kv_dim", "=", "self", ".", "kv_dim", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "num_memory_heads", "=", "self", ".", "num_memory_heads", ",", "\n", "shared_kv", "=", "self", ".", "shared_kv", ",", "\n", "combine_dims", "=", "self", ".", "combine_dims", ",", "\n", "keep_query_heads_dims", "=", "self", ".", "keep_query_heads_dims", ",", "\n", "fold_scaling_into_initializer", "=", "self", ".", "fold_scaling_into_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.call": [[258, 352], ["transformer_layers.SelfAttention.make_params", "transformer_layers.SelfAttention.compute_q", "transformer_layers.SelfAttention.memory_length", "transformer_layers.SelfAttention.attention_fn", "transformer_layers.SelfAttention.expected_attention_output_shape", "transformer_layers.SelfAttention.compute_output", "transformer_layers.SelfAttention.layer_output_from_attention_output", "mesh_tensorflow.replace_dimensions", "transformer_layers.SelfAttention.compute_kv", "transformer_layers.SelfAttention.compute_k", "transformer_layers.SelfAttention.compute_v", "mesh_tensorflow.one_hot", "mesh_tensorflow.range", "transformer_layers.SelfAttention.rename_length_to_memory_length", "context.record_new_states", "tensorflow.get_variable_scope().name.split", "mesh_tensorflow.transformer.attention.concat_hyper_prompts_kv", "mesh_tensorflow.transformer.attention.concat_hyper_prompts_kv", "context.get_states", "context.get_states", "transformer_layers.SelfAttention.compute_bias", "transformer_layers.SelfAttention.attention_kwargs_from_context", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.SelfAttentionFixup.make_params", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_q", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.EncDecAttention.attention_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.expected_attention_output_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.compute_output", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.BranchedSelfAttention.layer_output_from_attention_output", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_kv", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_k", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_v", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_new_states", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.concat_hyper_prompts_kv", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.concat_hyper_prompts_kv", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_states", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_states", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.compute_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.attention_kwargs_from_context"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "params", "=", "self", ".", "make_params", "(", "context", ")", "\n", "q", "=", "params", ".", "compute_q", "(", "x", ")", "\n", "memory_length", "=", "self", ".", "memory_length", "(", "context", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "m", "=", "x", "\n", "", "else", ":", "\n", "      ", "m", "=", "mtf", ".", "replace_dimensions", "(", "x", ",", "context", ".", "length_dim", ",", "memory_length", ")", "\n", "", "if", "self", ".", "shared_kv", ":", "\n", "      ", "kv", "=", "params", ".", "compute_kv", "(", "m", ")", "\n", "", "else", ":", "\n", "      ", "k", "=", "params", ".", "compute_k", "(", "m", ")", "\n", "v", "=", "params", ".", "compute_v", "(", "m", ")", "\n", "", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "one_hot", "=", "mtf", ".", "one_hot", "(", "\n", "context", ".", "position", ",", "memory_length", ",", "dtype", "=", "context", ".", "activation_dtype", ")", "\n", "inv_one_hot", "=", "1.0", "-", "one_hot", "\n", "if", "self", ".", "shared_kv", ":", "\n", "        ", "old_kv", ",", "=", "context", ".", "get_states", "(", "1", ")", "\n", "kv", "=", "old_kv", "*", "inv_one_hot", "+", "kv", "*", "one_hot", "\n", "", "else", ":", "\n", "        ", "old_k", ",", "old_v", "=", "context", ".", "get_states", "(", "2", ")", "\n", "k", "=", "old_k", "*", "inv_one_hot", "+", "k", "*", "one_hot", "\n", "v", "=", "old_v", "*", "inv_one_hot", "+", "v", "*", "one_hot", "\n", "", "memory_position", "=", "mtf", ".", "range", "(", "context", ".", "mesh", ",", "memory_length", ",", "tf", ".", "int32", ")", "\n", "", "else", ":", "\n", "      ", "memory_position", "=", "self", ".", "rename_length_to_memory_length", "(", "\n", "context", ".", "position", ",", "context", ")", "\n", "", "if", "context", ".", "mode", "==", "\"incremental\"", "or", "context", ".", "mode", "==", "\"first_part\"", ":", "\n", "      ", "context", ".", "record_new_states", "(", "[", "kv", "]", "if", "self", ".", "shared_kv", "else", "[", "k", ",", "v", "]", ")", "\n", "", "if", "self", ".", "shared_kv", ":", "\n", "      ", "k", "=", "kv", "\n", "v", "=", "kv", "\n", "\n", "# Inject hyper-prompts into k and v, skipped when prompt length is None.", "\n", "", "scope_encoder_or_decoder", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "use_prompt_kv", "=", "None", "\n", "if", "self", ".", "hyperprompt_length_encoder", "and", "scope_encoder_or_decoder", "==", "\"encoder\"", ":", "\n", "      ", "k", ",", "v", ",", "memory_position", ",", "memory_length", "=", "attention", ".", "concat_hyper_prompts_kv", "(", "\n", "k", ",", "\n", "v", ",", "\n", "scope_encoder_or_decoder", ",", "\n", "self", ".", "use_hyperprompt", ",", "\n", "memory_length", ",", "\n", "self", ".", "hyperprompt_task_num", ",", "\n", "self", ".", "num_heads", ",", "\n", "self", ".", "hyperprompt_hidden_dim", ",", "\n", "self", ".", "kv_dim", ",", "\n", "context", ",", "\n", "self", ".", "hyperprompt_mtlshare", ",", "\n", "self", ".", "dropout_rate", ",", "\n", "prompt_length", "=", "self", ".", "hyperprompt_length_encoder", ")", "\n", "use_prompt_kv", "=", "\"encoder_prompts\"", "\n", "\n", "", "if", "self", ".", "hyperprompt_length_decoder", "and", "scope_encoder_or_decoder", "==", "\"decoder\"", ":", "\n", "      ", "k", ",", "v", ",", "memory_position", ",", "memory_length", "=", "attention", ".", "concat_hyper_prompts_kv", "(", "\n", "k", ",", "\n", "v", ",", "\n", "scope_encoder_or_decoder", ",", "\n", "self", ".", "use_hyperprompt", ",", "\n", "memory_length", ",", "\n", "self", ".", "hyperprompt_task_num", ",", "\n", "self", ".", "num_heads", ",", "\n", "self", ".", "hyperprompt_hidden_dim", ",", "\n", "self", ".", "kv_dim", ",", "\n", "context", ",", "\n", "self", ".", "hyperprompt_mtlshare", ",", "\n", "self", ".", "dropout_rate", ",", "\n", "prompt_length", "=", "self", ".", "hyperprompt_length_decoder", ")", "\n", "use_prompt_kv", "=", "\"decoder_prompts\"", "\n", "\n", "", "o", "=", "self", ".", "attention_fn", "(", "\n", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "context", "=", "context", ",", "\n", "memory_length_dim", "=", "memory_length", ",", "\n", "key_dim", "=", "self", ".", "kv_dim", ",", "\n", "value_dim", "=", "self", ".", "kv_dim", ",", "\n", "bias", "=", "self", ".", "compute_bias", "(", "\n", "context", ",", "\n", "memory_position", ",", "\n", "x", ",", "\n", "params", ".", "query_heads_dims", ",", "\n", "q", ",", "\n", "use_prompt_kv", "=", "use_prompt_kv", ")", ",", "\n", "z_loss_coeff", "=", "self", ".", "z_loss_coeff", ",", "\n", "**", "self", ".", "attention_kwargs_from_context", "(", "context", ")", ")", "\n", "attention_output_shape", "=", "self", ".", "expected_attention_output_shape", "(", "x", ",", "params", ")", "\n", "attention_output", "=", "params", ".", "compute_output", "(", "\n", "o", ",", "output_shape", "=", "attention_output_shape", ")", "\n", "return", "self", ".", "layer_output_from_attention_output", "(", "context", ",", "attention_output", ",", "\n", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.compute_bias": [[353, 476], ["transformer_layers.SelfAttention.min_relative_position", "transformer_layers.SelfAttention.max_relative_position", "isinstance", "mesh_tensorflow.greater_equal", "biases.append", "mesh_tensorflow.less_equal", "biases.append", "biases.append", "isinstance", "biases.append", "mesh_tensorflow.Dimension", "transformer_layers._relative_position_bucket", "biases.append", "mesh_tensorflow.add_n", "mesh_tensorflow.transformer.attention.visibility_mask_to_attention_bias", "mesh_tensorflow.transformer.attention.visibility_mask_to_attention_bias", "mesh_tensorflow.Dimension", "mesh_tensorflow.concat", "mesh_tensorflow.greater_equal", "mesh_tensorflow.greater_equal", "mesh_tensorflow.transformer.attention.visibility_mask_to_attention_bias", "mesh_tensorflow.ones", "mesh_tensorflow.equal", "mesh_tensorflow.equal", "mesh_tensorflow.transformer.attention.visibility_mask_to_attention_bias", "mesh_tensorflow.gather", "mesh_tensorflow.ones", "mesh_tensorflow.layers.rename_length_to_memory_length", "mesh_tensorflow.layers.rename_length_to_memory_length", "mesh_tensorflow.Dimension", "transformer_layers.SelfAttention.rename_length_to_memory_length", "mesh_tensorflow.get_variable", "mesh_tensorflow.layers.dense", "ValueError", "mesh_tensorflow.Dimension", "tuple"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.LocalSelfAttention.min_relative_position", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.LocalSelfAttention.max_relative_position", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert._relative_position_bucket", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.visibility_mask_to_attention_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.visibility_mask_to_attention_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.visibility_mask_to_attention_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.visibility_mask_to_attention_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["", "def", "compute_bias", "(", "self", ",", "\n", "context", ",", "\n", "memory_position", ",", "\n", "x", ",", "\n", "heads_dims", ",", "\n", "q", ",", "\n", "use_prompt_kv", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute attention bias.\n\n    Args:\n      context: a transformer.Context\n      memory_position: an int32 tensor containing memory_length dimension.\n      x: a Tensor - the query antecedent - required for relative attention\n      heads_dims: a list of dimensions\n      q: a Tensor - the queries - required for contextual relative attention\n      use_prompt_kv: a string, \"encoder_prompts\" is to add prompts in encoder\n        \"decoder_prompts\" is to add prompt in decoder, which affects biases.\n\n    Returns:\n      a Tensor or None\n    \"\"\"", "\n", "min_relative_position", "=", "self", ".", "min_relative_position", "(", "context", ")", "# pylint: disable=assignment-from-none", "\n", "max_relative_position", "=", "self", ".", "max_relative_position", "(", "context", ")", "# pylint: disable=assignment-from-none", "\n", "biases", "=", "[", "]", "\n", "relative_position", "=", "memory_position", "-", "context", ".", "position", "\n", "if", "use_prompt_kv", "==", "\"encoder_prompts\"", ":", "\n", "      ", "relative_position", "-=", "self", ".", "hyperprompt_length_encoder", "\n", "", "elif", "use_prompt_kv", "==", "\"decoder_prompts\"", ":", "\n", "      ", "relative_position", "-=", "self", ".", "hyperprompt_length_decoder", "\n", "\n", "", "if", "min_relative_position", "is", "not", "None", ":", "\n", "      ", "visible", "=", "mtf", ".", "greater_equal", "(", "relative_position", ",", "min_relative_position", ")", "\n", "biases", ".", "append", "(", "attention", ".", "visibility_mask_to_attention_bias", "(", "\n", "visible", ",", "context", ".", "activation_dtype", ")", ")", "\n", "", "if", "max_relative_position", "is", "not", "None", ":", "\n", "      ", "visible", "=", "mtf", ".", "less_equal", "(", "relative_position", ",", "max_relative_position", ")", "\n", "biases", ".", "append", "(", "attention", ".", "visibility_mask_to_attention_bias", "(", "\n", "visible", ",", "context", ".", "activation_dtype", ")", ")", "\n", "", "if", "context", ".", "read_priority", "is", "not", "None", ":", "\n", "      ", "if", "use_prompt_kv", "==", "\"decoder_prompts\"", ":", "\n", "        ", "prompt_length_dim", "=", "mtf", ".", "Dimension", "(", "context", ".", "length_dim", ".", "name", ",", "\n", "self", ".", "hyperprompt_length_decoder", ")", "\n", "write_priority_memory", "=", "mtf", ".", "ones", "(", "\n", "x", ".", "mesh", ",", "shape", "=", "[", "prompt_length_dim", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "-", "1", "\n", "write_priority", "=", "mtf", ".", "concat", "(", "\n", "[", "write_priority_memory", ",", "context", ".", "write_priority", "]", ",", "\n", "concat_dim_name", "=", "context", ".", "length_dim", ".", "name", ")", "\n", "visible", "=", "mtf", ".", "greater_equal", "(", "\n", "context", ".", "read_priority", ",", "\n", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "write_priority", ")", ")", "\n", "", "else", ":", "\n", "        ", "visible", "=", "mtf", ".", "greater_equal", "(", "\n", "context", ".", "read_priority", ",", "\n", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "context", ".", "write_priority", ")", ")", "\n", "", "biases", ".", "append", "(", "attention", ".", "visibility_mask_to_attention_bias", "(", "\n", "visible", ",", "context", ".", "activation_dtype", ")", ")", "\n", "\n", "", "sequence_id", "=", "None", "\n", "# Subsequence id should only be set if we are in the decoder and have", "\n", "# multiple targets per input. This will allow each sub-target to only attend", "\n", "# to itself.", "\n", "if", "isinstance", "(", "context", ".", "subsequence_id", ",", "mtf", ".", "Tensor", ")", ":", "\n", "      ", "sequence_id", "=", "context", ".", "subsequence_id", "\n", "", "elif", "isinstance", "(", "context", ".", "sequence_id", ",", "mtf", ".", "Tensor", ")", ":", "\n", "      ", "sequence_id", "=", "context", ".", "sequence_id", "\n", "", "if", "(", "sequence_id", "is", "not", "None", "and", "context", ".", "length_dim", "in", "sequence_id", ".", "shape", ")", ":", "\n", "      ", "if", "use_prompt_kv", ":", "\n", "        ", "if", "use_prompt_kv", "==", "\"decoder_prompts\"", ":", "\n", "          ", "memory_length", "=", "mtf", ".", "Dimension", "(", "\n", "\"memory_length\"", ",", "\n", "context", ".", "length_dim", ".", "size", "+", "self", ".", "hyperprompt_length_decoder", ")", "\n", "", "elif", "use_prompt_kv", "==", "\"encoder_prompts\"", ":", "\n", "          ", "memory_length", "=", "mtf", ".", "Dimension", "(", "\n", "\"memory_length\"", ",", "\n", "context", ".", "length_dim", ".", "size", "+", "self", ".", "hyperprompt_length_encoder", ")", "\n", "", "memory_sequence_id", "=", "mtf", ".", "ones", "(", "\n", "x", ".", "mesh", ",", "shape", "=", "[", "x", ".", "shape", ".", "dims", "[", "0", "]", ",", "memory_length", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "visible", "=", "mtf", ".", "equal", "(", "sequence_id", ",", "memory_sequence_id", ")", "\n", "", "else", ":", "\n", "        ", "visible", "=", "mtf", ".", "equal", "(", "\n", "sequence_id", ",", "\n", "self", ".", "rename_length_to_memory_length", "(", "sequence_id", ",", "context", ")", ")", "\n", "", "biases", ".", "append", "(", "attention", ".", "visibility_mask_to_attention_bias", "(", "\n", "visible", ",", "context", ".", "activation_dtype", ")", ")", "\n", "", "if", "self", ".", "relative_attention_type", "is", "not", "None", ":", "\n", "      ", "buckets_dim", "=", "mtf", ".", "Dimension", "(", "\n", "\"buckets\"", ",", "self", ".", "relative_attention_num_buckets", ")", "\n", "bidirectional", "=", "not", "context", ".", "model", ".", "fully_autoregressive", "\n", "rp_bucket", "=", "_relative_position_bucket", "(", "\n", "relative_position", ",", "\n", "bidirectional", "=", "bidirectional", ",", "\n", "num_buckets", "=", "buckets_dim", ".", "size", ")", "\n", "if", "(", "self", ".", "relative_attention_type", "==", "\"bias\"", "or", "\n", "self", ".", "relative_attention_type", "==", "\"bias_shared\"", ")", ":", "\n", "        ", "bias_shape", "=", "context", ".", "model", ".", "ensemble_dims", "+", "heads_dims", "+", "[", "buckets_dim", "]", "\n", "values", "=", "None", "\n", "cache", "=", "self", ".", "relative_attention_type", "==", "\"bias_shared\"", "\n", "if", "cache", ":", "\n", "          ", "cache_key", "=", "(", "\"self_attention_bias\"", ",", "\n", "min_relative_position", ",", "\n", "max_relative_position", ",", "\n", "tuple", "(", "heads_dims", ")", ")", "\n", "if", "cache_key", "in", "context", ".", "cache", ":", "\n", "            ", "values", "=", "context", ".", "cache", "[", "cache_key", "]", "\n", "", "", "if", "values", "is", "None", ":", "\n", "          ", "values", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\"relative_attention_bias\"", ",", "\n", "bias_shape", ",", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "", "if", "cache", ":", "\n", "          ", "context", ".", "cache", "[", "cache_key", "]", "=", "values", "\n", "", "", "elif", "self", ".", "relative_attention_type", "==", "\"contextual\"", ":", "\n", "        ", "values", "=", "layers", ".", "dense", "(", "\n", "q", ",", "reduced_dims", "=", "[", "self", ".", "kv_dim", "]", ",", "\n", "new_dims", "=", "[", "buckets_dim", "]", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"relative_attention_ak\"", ",", "\n", "use_bias", "=", "False", ",", "\n", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", "+", "heads_dims", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unrecognized relative_attention_type \\\"%s\\\"\"", "%", "\n", "self", ".", "relative_attention_type", ")", "\n", "", "biases", ".", "append", "(", "mtf", ".", "gather", "(", "values", ",", "rp_bucket", ",", "buckets_dim", ")", ")", "\n", "", "return", "mtf", ".", "add_n", "(", "biases", ")", "if", "biases", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.kv_dim": [[477, 480], ["mesh_tensorflow.Dimension"], "methods", ["None"], ["", "@", "property", "\n", "def", "kv_dim", "(", "self", ")", ":", "\n", "    ", "return", "mtf", ".", "Dimension", "(", "\"d_kv\"", ",", "self", ".", "key_value_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.memory_length": [[481, 483], ["mesh_tensorflow.Dimension"], "methods", ["None"], ["", "def", "memory_length", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "mtf", ".", "Dimension", "(", "\"memory_length\"", ",", "context", ".", "length_dim", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length": [[484, 487], ["mesh_tensorflow.replace_dimensions", "transformer_layers.SelfAttention.memory_length"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.memory_length"], ["", "def", "rename_length_to_memory_length", "(", "self", ",", "x", ",", "context", ")", ":", "\n", "    ", "return", "mtf", ".", "replace_dimensions", "(", "\n", "x", ",", "context", ".", "length_dim", ",", "self", ".", "memory_length", "(", "context", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.min_relative_position": [[488, 490], ["None"], "methods", ["None"], ["", "def", "min_relative_position", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.max_relative_position": [[491, 493], ["None"], "methods", ["None"], ["", "def", "max_relative_position", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.attention_fn": [[494, 500], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "attention_fn", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "attention_func", "==", "\"hybrid\"", ":", "\n", "      ", "return", "attention", ".", "hybrid_attention", "\n", "", "else", ":", "\n", "      ", "return", "attention", ".", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.ExpertsSelfAttention.__init__": [[506, 544], ["transformer_layers.SelfAttention.__init__", "mesh_tensorflow.transformer.moe.HParams"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_experts", "=", "16", ",", "\n", "loss_coef", "=", "1e-2", ",", "\n", "group_size", "=", "1024", ",", "\n", "capacity_factor_train", "=", "1.25", ",", "\n", "capacity_factor_eval", "=", "2.0", ",", "\n", "moe_gating", "=", "\"switch\"", ",", "\n", "min_expert_capacity", "=", "4", ",", "\n", "switch_policy_train", "=", "\"input_jitter\"", ",", "\n", "switch_policy_eval", "=", "\"input_jitter\"", ",", "\n", "switch_dropout", "=", "0.0", ",", "\n", "switch_temperature", "=", "1.0", ",", "\n", "switch_jitter", "=", "1e-2", ",", "\n", "ntlb_top_k", "=", "4", ",", "\n", "hidden_size", "=", "3072", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", "z_loss", "=", "None", ",", "\n", "expert_computation", "=", "\"qkv\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "ExpertsSelfAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "expert_computation", "=", "expert_computation", "\n", "self", ".", "_hparams", "=", "mtf", ".", "transformer", ".", "moe", ".", "HParams", "(", "\n", "moe_gating", "=", "moe_gating", ",", "\n", "num_experts", "=", "num_experts", ",", "\n", "loss_coef", "=", "loss_coef", ",", "\n", "group_size", "=", "group_size", ",", "\n", "min_expert_capacity", "=", "min_expert_capacity", ",", "\n", "capacity_factor_train", "=", "capacity_factor_train", ",", "\n", "capacity_factor_eval", "=", "capacity_factor_eval", ",", "\n", "switch_policy_train", "=", "switch_policy_train", ",", "\n", "switch_policy_eval", "=", "switch_policy_eval", ",", "\n", "switch_dropout", "=", "switch_dropout", ",", "\n", "switch_temperature", "=", "switch_temperature", ",", "\n", "switch_jitter", "=", "switch_jitter", ",", "\n", "ntlb_top_k", "=", "ntlb_top_k", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "activation", "=", "activation", ",", "\n", "z_loss", "=", "z_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.ExpertsSelfAttention.make_params": [[545, 583], ["mesh_tensorflow.transformer.attention.ExpertsAttentionParams", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "ValueError", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["None"], ["", "def", "make_params", "(", "self", ",", "context", ")", ":", "\n", "    ", "num_heads", "=", "self", ".", "num_heads", "\n", "num_memory_heads", "=", "self", ".", "num_memory_heads", "\n", "if", "num_heads", "==", "1", ":", "\n", "      ", "query_heads_dims", "=", "None", "\n", "memory_heads_dims", "=", "None", "\n", "", "elif", "num_memory_heads", "==", "0", ":", "\n", "      ", "query_heads_dims", "=", "[", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_heads", ")", "]", "\n", "memory_heads_dims", "=", "query_heads_dims", "\n", "", "elif", "num_memory_heads", "==", "1", ":", "\n", "      ", "query_heads_dims", "=", "[", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_heads", ")", "]", "\n", "memory_heads_dims", "=", "None", "\n", "", "else", ":", "\n", "      ", "if", "num_heads", "%", "num_memory_heads", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"num_memory_heads must divide num_heads\"", ")", "\n", "", "memory_heads_dims", "=", "[", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_memory_heads", ")", "]", "\n", "query_heads_dims", "=", "memory_heads_dims", "+", "[", "\n", "mtf", ".", "Dimension", "(", "\"query_heads\"", ",", "num_heads", "//", "num_memory_heads", ")", "]", "\n", "\n", "", "return", "attention", ".", "ExpertsAttentionParams", "(", "\n", "context", ".", "mesh", ",", "\n", "query_input_dim", "=", "context", ".", "model", ".", "model_dim", ",", "\n", "memory_input_dim", "=", "context", ".", "model", ".", "model_dim", ",", "\n", "output_dim", "=", "context", ".", "model", ".", "model_dim", ",", "\n", "key_dim", "=", "self", ".", "kv_dim", ",", "\n", "value_dim", "=", "self", ".", "kv_dim", ",", "\n", "query_heads_dims", "=", "query_heads_dims", ",", "\n", "memory_heads_dims", "=", "memory_heads_dims", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "shared_kv", "=", "self", ".", "shared_kv", ",", "\n", "no_query", "=", "False", ",", "\n", "ensemble_dim", "=", "context", ".", "model", ".", "ensemble_dim", ",", "\n", "combine_dims", "=", "self", ".", "combine_dims", ",", "\n", "keep_query_heads_dims", "=", "self", ".", "keep_query_heads_dims", ",", "\n", "fold_scaling_into_initializer", "=", "self", ".", "fold_scaling_into_initializer", ",", "\n", "context", "=", "context", ",", "\n", "experts_hparams", "=", "self", ".", "_hparams", ",", "\n", "expert_computation", "=", "self", ".", "expert_computation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.ExpertsEncDecAttention.__init__": [[589, 592], ["transformer_layers.ExpertsSelfAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "relative_attention_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "ExpertsEncDecAttention", ",", "self", ")", ".", "__init__", "(", "\n", "relative_attention_type", "=", "relative_attention_type", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.ExpertsEncDecAttention._get_memory_antecedent": [[593, 595], ["None"], "methods", ["None"], ["", "def", "_get_memory_antecedent", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "context", ".", "encoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.ExpertsEncDecAttention.call": [[596, 600], ["transformer_layers.enc_dec_attention", "transformer_layers.ExpertsEncDecAttention._get_memory_antecedent"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.enc_dec_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.EncDecAttentionFixup._get_memory_antecedent"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "return", "enc_dec_attention", "(", "self", ",", "self", ".", "_get_memory_antecedent", "(", "context", ")", ",", "\n", "context", ",", "x", ",", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Synthesizer.__init__": [[606, 665], ["transformer_layers.SelfAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_heads", "=", "8", ",", "\n", "num_memory_heads", "=", "0", ",", "\n", "key_value_size", "=", "128", ",", "\n", "shared_kv", "=", "False", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "attention_kwargs", "=", "None", ",", "\n", "relative_attention_type", "=", "None", ",", "\n", "relative_attention_num_buckets", "=", "32", ",", "\n", "attention_func", "=", "None", ",", "\n", "combine_dims", "=", "True", ",", "\n", "keep_query_heads_dims", "=", "False", ",", "\n", "synthesize_mode", "=", "\"random_plus_alpha\"", ",", "\n", "fold_scaling_into_initializer", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Create a Synthesizer Layer.\n\n    Args:\n      num_heads: an integer\n      num_memory_heads: an optional integer\n      key_value_size: an integer\n      shared_kv: a boolean\n      dropout_rate: a float\n      attention_kwargs: a dictionary of kwargs for attention.attention\n      relative_attention_type: an optional string - one of\n        (None, \"bias\", \"bias_shared\", \"contextual\")\n      relative_attention_num_buckets: an integer\n      attention_func: attention function: None/'hybrid'.\n      combine_dims: a boolean\n      keep_query_heads_dims: a boolean\n      synthesize_mode: a string to select synthesizer variant\n      fold_scaling_into_initializer: a boolean\n      **kwargs: additional constructor params\n    \"\"\"", "\n", "super", "(", "Synthesizer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "num_memory_heads", "=", "num_memory_heads", "\n", "self", ".", "key_value_size", "=", "key_value_size", "\n", "self", ".", "shared_kv", "=", "shared_kv", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "attention_kwargs", "=", "attention_kwargs", "or", "{", "}", "\n", "self", ".", "relative_attention_type", "=", "relative_attention_type", "\n", "self", ".", "relative_attention_num_buckets", "=", "relative_attention_num_buckets", "\n", "self", ".", "attention_func", "=", "attention_func", "\n", "self", ".", "combine_dims", "=", "combine_dims", "\n", "self", ".", "keep_query_heads_dims", "=", "keep_query_heads_dims", "\n", "self", ".", "synthesize_mode", "=", "synthesize_mode", "\n", "self", ".", "fold_scaling_into_initializer", "=", "fold_scaling_into_initializer", "\n", "self", ".", "no_query", "=", "False", "\n", "if", "\"plus\"", "in", "self", ".", "synthesize_mode", ":", "\n", "      ", "self", ".", "shared_kv", "=", "False", "\n", "self", ".", "no_query", "=", "False", "\n", "", "elif", "\"minus\"", "in", "self", ".", "synthesize_mode", ":", "\n", "# We still keep the query as first projection", "\n", "      ", "self", ".", "shared_kv", "=", "True", "\n", "self", ".", "no_query", "=", "False", "\n", "", "else", ":", "\n", "      ", "self", ".", "shared_kv", "=", "True", "\n", "self", ".", "no_query", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Synthesizer.make_params": [[666, 675], ["transformer_layers.attention_params"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.attention_params"], ["", "", "def", "make_params", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "attention_params", "(", "\n", "context", "=", "context", ",", "\n", "kv_dim", "=", "self", ".", "kv_dim", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "num_memory_heads", "=", "self", ".", "num_memory_heads", ",", "\n", "shared_kv", "=", "self", ".", "shared_kv", ",", "\n", "no_query", "=", "self", ".", "no_query", ",", "\n", "fold_scaling_into_initializer", "=", "self", ".", "fold_scaling_into_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Synthesizer.call": [[676, 728], ["transformer_layers.Synthesizer.make_params", "transformer_layers.Synthesizer.memory_length", "mesh_tensorflow.transformer.attention.synthetic_attention", "transformer_layers.Synthesizer.expected_attention_output_shape", "transformer_layers.Synthesizer.compute_output", "transformer_layers.Synthesizer.layer_output_from_attention_output", "mesh_tensorflow.replace_dimensions", "transformer_layers.Synthesizer.compute_kv", "transformer_layers.Synthesizer.compute_k", "transformer_layers.Synthesizer.compute_v", "transformer_layers.Synthesizer.compute_q", "mesh_tensorflow.one_hot", "context.get_states", "mesh_tensorflow.range", "transformer_layers.Synthesizer.rename_length_to_memory_length", "context.record_new_states", "transformer_layers.Synthesizer.compute_bias", "transformer_layers.Synthesizer.attention_kwargs_from_context"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.SelfAttentionFixup.make_params", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.synthetic_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.expected_attention_output_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.compute_output", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.BranchedSelfAttention.layer_output_from_attention_output", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_kv", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_k", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_v", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_q", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_states", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_new_states", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.compute_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.attention_kwargs_from_context"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "params", "=", "self", ".", "make_params", "(", "context", ")", "\n", "memory_length", "=", "self", ".", "memory_length", "(", "context", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "m", "=", "x", "\n", "", "else", ":", "\n", "      ", "m", "=", "mtf", ".", "replace_dimensions", "(", "x", ",", "context", ".", "length_dim", ",", "memory_length", ")", "\n", "", "if", "self", ".", "shared_kv", ":", "\n", "      ", "kv", "=", "params", ".", "compute_kv", "(", "m", ")", "\n", "", "else", ":", "\n", "      ", "k", "=", "params", ".", "compute_k", "(", "m", ")", "\n", "v", "=", "params", ".", "compute_v", "(", "m", ")", "\n", "", "if", "self", ".", "no_query", ":", "\n", "# we don't use q for some synthesizer modes that don't use QKV at all.", "\n", "      ", "q", "=", "x", "\n", "", "else", ":", "\n", "      ", "q", "=", "params", ".", "compute_q", "(", "x", ")", "\n", "", "if", "self", ".", "shared_kv", ":", "\n", "      ", "k", "=", "kv", "\n", "v", "=", "kv", "\n", "", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "one_hot", "=", "mtf", ".", "one_hot", "(", "\n", "context", ".", "position", ",", "memory_length", ",", "dtype", "=", "context", ".", "activation_dtype", ")", "\n", "inv_one_hot", "=", "1.0", "-", "one_hot", "\n", "old_k", ",", "old_v", "=", "context", ".", "get_states", "(", "2", ")", "\n", "k", "=", "old_k", "*", "inv_one_hot", "+", "k", "*", "one_hot", "\n", "v", "=", "old_v", "*", "inv_one_hot", "+", "v", "*", "one_hot", "\n", "memory_position", "=", "mtf", ".", "range", "(", "context", ".", "mesh", ",", "memory_length", ",", "tf", ".", "int32", ")", "\n", "", "else", ":", "\n", "      ", "memory_position", "=", "self", ".", "rename_length_to_memory_length", "(", "\n", "context", ".", "position", ",", "context", ")", "\n", "", "if", "context", ".", "mode", "==", "\"incremental\"", "or", "context", ".", "mode", "==", "\"first_part\"", ":", "\n", "      ", "context", ".", "record_new_states", "(", "[", "k", ",", "v", "]", ")", "\n", "\n", "", "o", "=", "attention", ".", "synthetic_attention", "(", "q", ",", "k", ",", "v", ",", "memory_length", ",", "\n", "self", ".", "kv_dim", ",", "self", ".", "kv_dim", ",", "\n", "self", ".", "compute_bias", "(", "context", ",", "\n", "memory_position", ",", "\n", "x", ",", "\n", "params", ".", "query_heads_dims", ",", "\n", "q", ")", ",", "\n", "synthesize", "=", "True", ",", "\n", "synthesize_mode", "=", "self", ".", "synthesize_mode", ",", "\n", "context", "=", "context", ",", "\n", "**", "self", ".", "attention_kwargs_from_context", "(", "\n", "context", ")", ")", "\n", "attention_output_shape", "=", "self", ".", "expected_attention_output_shape", "(", "x", ",", "params", ")", "\n", "attention_output", "=", "params", ".", "compute_output", "(", "\n", "o", ",", "output_shape", "=", "attention_output_shape", ")", "\n", "return", "self", ".", "layer_output_from_attention_output", "(", "context", ",", "attention_output", ",", "\n", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.EncDecAttention.__init__": [[892, 895], ["transformer_layers.SelfAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "relative_attention_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "EncDecAttention", ",", "self", ")", ".", "__init__", "(", "\n", "relative_attention_type", "=", "relative_attention_type", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.EncDecAttention._get_memory_antecedent": [[896, 898], ["None"], "methods", ["None"], ["", "def", "_get_memory_antecedent", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "context", ".", "encoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.EncDecAttention.call": [[899, 905], ["transformer_layers.enc_dec_attention", "transformer_layers.EncDecAttention._get_memory_antecedent"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.enc_dec_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.EncDecAttentionFixup._get_memory_antecedent"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "return", "enc_dec_attention", "(", "self", ",", "self", ".", "_get_memory_antecedent", "(", "context", ")", ",", "\n", "context", ",", "x", ",", "losses", ",", "\n", "attention_fn", "=", "self", ".", "attention_fn", ",", "\n", "z_loss_coeff", "=", "self", ".", "z_loss_coeff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.EncDecAttention.attention_fn": [[906, 909], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "attention_fn", "(", "self", ")", ":", "\n", "    ", "return", "attention", ".", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TransparentEncDecAttention.__init__": [[915, 943], ["transformer_layers.EncDecAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "\n", "layers_per_encoder_module", "=", "gin", ".", "REQUIRED", ",", "\n", "layers_per_decoder_module", "=", "gin", ".", "REQUIRED", ",", "\n", "encoder_num_modules", "=", "gin", ".", "REQUIRED", ",", "\n", "decoder_num_modules", "=", "gin", ".", "REQUIRED", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Create a transparent attention EncDec Layer.\n\n    Args:\n      layers_per_encoder_module: positive integer telling how many layer are in\n        each repeated module in the encoder\n      layers_per_decoder_module: positive integer telling how many layer are in\n        each repeated module in the decoder\n      encoder_num_modules: positive integer of how many repeated modules there\n        are in the encoder\n      decoder_num_modules: positive integer of how many repeated modules there\n        are in the decoder\n      dropout_rate: positive float, the dropout rate for the matrix relating\n        encoder outputs to decoder inputs\n      **kwargs: additional constructor params\n    \"\"\"", "\n", "super", "(", "TransparentEncDecAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "layers_per_encoder_module", "=", "layers_per_encoder_module", "\n", "self", ".", "layers_per_decoder_module", "=", "layers_per_decoder_module", "\n", "self", ".", "encoder_num_modules", "=", "encoder_num_modules", "\n", "self", ".", "decoder_num_modules", "=", "decoder_num_modules", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TransparentEncDecAttention._get_memory_antecedent": [[944, 948], ["transformer_layers.TransparentEncDecAttention._get_decoder_inputs"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TransparentEncDecAttention._get_decoder_inputs"], ["", "def", "_get_memory_antecedent", "(", "self", ",", "context", ")", ":", "\n", "    ", "decoder_module_index", "=", "context", ".", "layer_index", "//", "self", ".", "layers_per_decoder_module", "\n", "decoder_inputs", "=", "self", ".", "_get_decoder_inputs", "(", "context", ")", "\n", "return", "decoder_inputs", "[", "decoder_module_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TransparentEncDecAttention._get_decoder_inputs": [[949, 1001], ["hasattr", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.stack", "mesh_tensorflow.get_variable", "mesh_tensorflow.dropout", "mesh_tensorflow.softmax", "mesh_tensorflow.layers.us_einsum", "mesh_tensorflow.split", "mesh_tensorflow.layers.rename_length_to_memory_length", "mesh_tensorflow.layers.unit_scaling_convention", "mesh_tensorflow.Shape", "mesh_tensorflow.reshape", "tensorflow.random_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "_get_decoder_inputs", "(", "self", ",", "context", ")", ":", "\n", "    ", "\"\"\"Computes the inputs to the decoder when using transparent attention.\n\n    We must cache on the context in order to ensure that we are not replicating\n    variables when the layer's call function is called in different tf variable\n    scopes.\n\n    Args:\n      context: a Context\n\n    Returns:\n      a list containing `self.num_decoder_modules` of tensors with shape\n        [<batch_dims>, length_dim, output_vocab_dim]\n    \"\"\"", "\n", "if", "hasattr", "(", "context", ",", "\"decoder_layers_per_module\"", ")", ":", "\n", "      ", "return", "context", ".", "decoder_layers_per_module", "\n", "\n", "", "encoder_layer_outputs", "=", "[", "\n", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "output", ")", "\n", "for", "output", "in", "context", ".", "encoder_layer_outputs", "\n", "]", "\n", "\n", "layers_per_module", "=", "self", ".", "layers_per_encoder_module", "\n", "encoder_module_outputs_dim", "=", "mtf", ".", "Dimension", "(", "\n", "\"encoder_module_outputs\"", ",", "size", "=", "self", ".", "encoder_num_modules", "+", "1", ")", "\n", "decoder_module_inputs_dim", "=", "mtf", ".", "Dimension", "(", "\n", "\"decoder_module_inputs\"", ",", "size", "=", "self", ".", "decoder_num_modules", ")", "\n", "encoder_module_outputs", "=", "mtf", ".", "stack", "(", "\n", "[", "encoder_layer_outputs", "[", "0", "]", "]", "+", "\n", "encoder_layer_outputs", "[", "layers_per_module", ":", ":", "layers_per_module", "]", ",", "\n", "dim_name", "=", "\"encoder_module_outputs\"", ")", "\n", "stddev", "=", "1.0", "\n", "if", "not", "mtf", ".", "layers", ".", "unit_scaling_convention", "(", ")", ":", "\n", "      ", "stddev", "*=", "encoder_module_outputs_dim", ".", "size", "**", "-", "0.5", "\n", "", "w", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "\"w\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "encoder_module_outputs_dim", ",", "decoder_module_inputs_dim", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "w", "=", "mtf", ".", "dropout", "(", "w", ",", "context", ".", "train", ",", "1.0", "-", "self", ".", "dropout_rate", ")", "\n", "s", "=", "mtf", ".", "softmax", "(", "w", ",", "reduced_dim", "=", "encoder_module_outputs_dim", ")", "\n", "z", "=", "mtf", ".", "layers", ".", "us_einsum", "(", "[", "s", ",", "encoder_module_outputs", "]", ",", "\n", "reduced_dims", "=", "[", "encoder_module_outputs_dim", "]", ")", "\n", "input_per_decoder", "=", "mtf", ".", "split", "(", "\n", "z", ",", "\n", "split_dim", "=", "decoder_module_inputs_dim", ",", "\n", "num_or_size_splits", "=", "decoder_module_inputs_dim", ".", "size", ")", "\n", "context", ".", "decoder_layers_per_module", "=", "[", "\n", "mtf", ".", "reshape", "(", "inpt", ",", "z", ".", "shape", ".", "dims", "[", "1", ":", "]", ")", "for", "inpt", "in", "input_per_decoder", "\n", "]", "\n", "return", "context", ".", "decoder_layers_per_module", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.LocalSelfAttention.__init__": [[1007, 1023], ["transformer_layers.SelfAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "\n", "radius", "=", "128", ",", "\n", "num_heads", "=", "8", ",", "\n", "num_memory_heads", "=", "0", ",", "\n", "key_value_size", "=", "128", ",", "\n", "shared_kv", "=", "False", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "attention_kwargs", "=", "None", ",", ")", ":", "\n", "    ", "super", "(", "LocalSelfAttention", ",", "self", ")", ".", "__init__", "(", "\n", "num_heads", ",", "\n", "num_memory_heads", ",", "\n", "key_value_size", ",", "\n", "shared_kv", ",", "\n", "dropout_rate", ",", "\n", "attention_kwargs", ")", "\n", "self", ".", "radius", "=", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.LocalSelfAttention.call": [[1024, 1116], ["transformer_layers.LocalSelfAttention.make_params", "transformer_layers.LocalSelfAttention.compute_q", "transformer_layers.LocalSelfAttention.compute_output", "transformer_layers.LocalSelfAttention.compute_kv", "transformer_layers.LocalSelfAttention.compute_k", "transformer_layers.LocalSelfAttention.compute_v", "mesh_tensorflow.equal", "mesh_tensorflow.range", "mesh_tensorflow.greater_equal", "mesh_tensorflow.transformer.attention.visibility_mask_to_attention_bias", "mesh_tensorflow.transformer.attention.attention", "mesh_tensorflow.range", "mesh_tensorflow.range", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.einsum", "context.new_states.append", "context.get_states", "context.get_states", "mesh_tensorflow.range", "mesh_tensorflow.mod", "mesh_tensorflow.where", "context.record_new_states", "mesh_tensorflow.where", "mesh_tensorflow.where", "context.record_new_states", "max", "transformer_layers.LocalSelfAttention.rename_length_to_memory_length", "mesh_tensorflow.transformer.attention.attention", "mesh_tensorflow.transformer.attention.local_attention_1d", "mesh_tensorflow.equal", "mesh_tensorflow.less", "mesh_tensorflow.greater_equal", "mesh_tensorflow.einsum", "context.new_states.append", "transformer_layers.LocalSelfAttention.compute_k", "transformer_layers.LocalSelfAttention.compute_v", "transformer_layers.LocalSelfAttention.attention_kwargs_from_context", "transformer_layers.LocalSelfAttention.rename_length_to_memory_length", "transformer_layers.LocalSelfAttention.rename_length_to_memory_length", "transformer_layers.LocalSelfAttention.memory_length", "transformer_layers.LocalSelfAttention.compute_bias", "mesh_tensorflow.mod", "transformer_layers.LocalSelfAttention.attention_kwargs_from_context", "transformer_layers.LocalSelfAttention.attention_kwargs_from_context"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.SelfAttentionFixup.make_params", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_q", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.compute_output", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_kv", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_k", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_v", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.visibility_mask_to_attention_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.attention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_states", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_states", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mod", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_new_states", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_new_states", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.attention", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.local_attention_1d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_k", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_v", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.attention_kwargs_from_context", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.compute_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mod", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.attention_kwargs_from_context", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.attention_kwargs_from_context"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "params", "=", "self", ".", "make_params", "(", "context", ")", "\n", "q", "=", "params", ".", "compute_q", "(", "x", ")", "\n", "if", "self", ".", "shared_kv", ":", "\n", "      ", "kv", "=", "params", ".", "compute_kv", "(", "x", ")", "\n", "k", "=", "kv", "\n", "v", "=", "kv", "\n", "", "else", ":", "\n", "      ", "k", "=", "params", ".", "compute_k", "(", "x", ")", "\n", "v", "=", "params", ".", "compute_v", "(", "x", ")", "\n", "", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "if", "self", ".", "shared_kv", ":", "\n", "        ", "prev_kv", ",", "=", "context", ".", "get_states", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "prev_k", ",", "prev_v", "=", "context", ".", "get_states", "(", "2", ")", "\n", "", "current_position", "=", "mtf", ".", "equal", "(", "\n", "mtf", ".", "range", "(", "context", ".", "mesh", ",", "self", ".", "window_dim", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "mtf", ".", "mod", "(", "context", ".", "position", ",", "self", ".", "radius", ")", ")", "\n", "if", "self", ".", "shared_kv", ":", "\n", "        ", "kv", "=", "mtf", ".", "where", "(", "current_position", ",", "kv", ",", "prev_kv", ",", "\n", "output_shape", "=", "prev_kv", ".", "shape", ")", "\n", "k", "=", "kv", "\n", "v", "=", "kv", "\n", "context", ".", "record_new_states", "(", "[", "kv", "]", ")", "\n", "", "else", ":", "\n", "        ", "k", "=", "mtf", ".", "where", "(", "current_position", ",", "params", ".", "compute_k", "(", "x", ")", ",", "prev_k", ",", "\n", "output_shape", "=", "prev_k", ".", "shape", ")", "\n", "v", "=", "mtf", ".", "where", "(", "current_position", ",", "params", ".", "compute_v", "(", "x", ")", ",", "prev_v", ",", "\n", "output_shape", "=", "prev_v", ".", "shape", ")", "\n", "context", ".", "record_new_states", "(", "[", "k", ",", "v", "]", ")", "\n", "", "window_pos", "=", "mtf", ".", "range", "(", "context", ".", "mesh", ",", "self", ".", "window_dim", ",", "tf", ".", "int32", ")", "\n", "visible", "=", "mtf", ".", "greater_equal", "(", "context", ".", "position", ",", "window_pos", ")", "\n", "bias", "=", "attention", ".", "visibility_mask_to_attention_bias", "(", "\n", "visible", ",", "context", ".", "activation_dtype", ")", "\n", "o", "=", "attention", ".", "attention", "(", "\n", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "self", ".", "window_dim", ",", "\n", "self", ".", "kv_dim", ",", "\n", "self", ".", "kv_dim", ",", "\n", "bias", ",", "\n", "**", "self", ".", "attention_kwargs_from_context", "(", "context", ")", ")", "\n", "", "elif", "context", ".", "length_dim", ".", "size", "<=", "max", "(", "256", ",", "self", ".", "radius", "*", "4", ")", ":", "\n", "# nothing fancy - just do full attention and mask", "\n", "      ", "memory_length", "=", "self", ".", "rename_length_to_memory_length", "(", "\n", "context", ".", "position", ",", "context", ")", "\n", "o", "=", "attention", ".", "attention", "(", "\n", "q", ",", "self", ".", "rename_length_to_memory_length", "(", "k", ",", "context", ")", ",", "\n", "self", ".", "rename_length_to_memory_length", "(", "v", ",", "context", ")", ",", "\n", "self", ".", "memory_length", "(", "context", ")", ",", "self", ".", "kv_dim", ",", "self", ".", "kv_dim", ",", "\n", "self", ".", "compute_bias", "(", "context", ",", "memory_length", ",", "x", ",", "params", ".", "query_heads_dims", ",", "\n", "q", ")", ",", "**", "self", ".", "attention_kwargs_from_context", "(", "context", ")", ")", "\n", "", "else", ":", "\n", "# fancy local attention algorithm", "\n", "      ", "o", "=", "attention", ".", "local_attention_1d", "(", "\n", "q", "=", "q", ",", "\n", "k", "=", "k", ",", "\n", "v", "=", "None", "if", "self", ".", "shared_kv", "else", "v", ",", "\n", "length_dim", "=", "context", ".", "length_dim", ",", "\n", "key_dim", "=", "self", ".", "kv_dim", ",", "\n", "value_dim", "=", "self", ".", "kv_dim", ",", "\n", "length_dim_num_splits", "=", "1", ",", "# TODO(noam): look at the layout", "\n", "autoregressive", "=", "context", ".", "model", ".", "fully_autoregressive", ",", "\n", "radius", "=", "self", ".", "radius", ",", "\n", "sequence_id", "=", "context", ".", "sequence_id", ",", "\n", "write_priority", "=", "context", ".", "write_priority", ",", "\n", "read_priority", "=", "context", ".", "read_priority", ",", "\n", "attention_kwargs", "=", "self", ".", "attention_kwargs_from_context", "(", "context", ")", ")", "\n", "", "if", "context", ".", "mode", "==", "\"first_part\"", ":", "\n", "      ", "window_pos", "=", "mtf", ".", "range", "(", "context", ".", "mesh", ",", "self", ".", "window_dim", ",", "tf", ".", "int32", ")", "\n", "pos", "=", "mtf", ".", "range", "(", "context", ".", "mesh", ",", "context", ".", "length_dim", ",", "tf", ".", "int32", ")", "\n", "select_recent", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "equal", "(", "mtf", ".", "mod", "(", "pos", ",", "self", ".", "radius", ")", ",", "window_pos", ")", ",", "x", ".", "dtype", ")", "\n", "select_recent", "*=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "less", "(", "pos", ",", "context", ".", "initial_position", ")", ",", "x", ".", "dtype", ")", "\n", "select_recent", "*=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "greater_equal", "(", "\n", "pos", ",", "context", ".", "initial_position", "-", "self", ".", "radius", ")", ",", "x", ".", "dtype", ")", "\n", "state_shape", "=", "(", "k", ".", "shape", "-", "[", "context", ".", "length_dim", ",", "self", ".", "kv_dim", "]", "\n", "+", "[", "self", ".", "window_dim", ",", "self", ".", "kv_dim", "]", ")", "\n", "k_state", "=", "mtf", ".", "einsum", "(", "\n", "[", "k", ",", "select_recent", "]", ",", "output_shape", "=", "state_shape", ",", "\n", "reduced_dims", "=", "[", "context", ".", "length_dim", "]", ")", "\n", "context", ".", "new_states", ".", "append", "(", "k_state", ")", "\n", "if", "not", "self", ".", "shared_kv", ":", "\n", "        ", "v_state", "=", "mtf", ".", "einsum", "(", "\n", "[", "v", ",", "select_recent", "]", ",", "output_shape", "=", "state_shape", ",", "\n", "reduced_dims", "=", "[", "context", ".", "length_dim", "]", ")", "\n", "context", ".", "new_states", ".", "append", "(", "v_state", ")", "\n", "", "", "return", "params", ".", "compute_output", "(", "o", ",", "output_shape", "=", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.LocalSelfAttention.min_relative_position": [[1117, 1119], ["None"], "methods", ["None"], ["", "def", "min_relative_position", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "1", "-", "self", ".", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.LocalSelfAttention.max_relative_position": [[1120, 1122], ["None"], "methods", ["None"], ["", "def", "max_relative_position", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "None", "if", "context", ".", "model", ".", "fully_autoregressive", "else", "self", ".", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.LocalSelfAttention.window_dim": [[1123, 1126], ["mesh_tensorflow.Dimension"], "methods", ["None"], ["", "@", "property", "\n", "def", "window_dim", "(", "self", ")", ":", "\n", "    ", "return", "mtf", ".", "Dimension", "(", "\"window\"", ",", "self", ".", "radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsSelfAttention.__init__": [[1258, 1299], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension", "mesh_tensorflow.convert_to_dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension"], ["def", "__init__", "(", "self", ",", "# pylint: disable=super-init-not-called", "\n", "key_heads_dims", "=", "(", "(", "\"heads\"", ",", "12", ")", ",", ")", ",", "\n", "softmax_heads_dims", "=", "(", "(", "\"heads\"", ",", "12", ")", ",", ")", ",", "\n", "value_heads_dims", "=", "(", "(", "\"heads\"", ",", "12", ")", ",", ")", ",", "\n", "key_size", "=", "64", ",", "\n", "value_size", "=", "64", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "relative_attention_type", "=", "None", ",", "\n", "relative_attention_num_buckets", "=", "32", ",", "\n", "dynamic_projections", "=", "None", ",", "\n", "dynamic_projections_init_scale", "=", "1e-2", ")", ":", "\n", "    ", "\"\"\"Create a SelfAttention Layer.\n\n    Args:\n      key_heads_dims: a list of mtf.Dimension or (name, size) pairs\n      softmax_heads_dims: a list of mtf.Dimension or (name, size) pairs\n      value_heads_dims: a list of mtf.Dimension or (name, size) pairs\n      key_size: an integer\n      value_size: an integer\n      dropout_rate: a float\n      relative_attention_type: an optional string - one of\n        (None, \"bias\", \"bias_shared\", \"contextual\")\n      relative_attention_num_buckets: an integer\n      dynamic_projections: an optional sequence containing a subset of\n        [\"x2l\", \"m2l\", \"x2w\", \"m2w\"] (see class comments)\n      dynamic_projections_init_scale: a float - initializer variance scaling\n        factor for these dynamic projections.  We have observed learning\n        difficulties when this value is too large.\n    \"\"\"", "\n", "self", ".", "key_heads_dims", "=", "[", "mtf", ".", "convert_to_dimension", "(", "d", ")", "for", "d", "in", "key_heads_dims", "]", "\n", "self", ".", "softmax_heads_dims", "=", "[", "\n", "mtf", ".", "convert_to_dimension", "(", "d", ")", "for", "d", "in", "softmax_heads_dims", "]", "\n", "self", ".", "value_heads_dims", "=", "[", "\n", "mtf", ".", "convert_to_dimension", "(", "d", ")", "for", "d", "in", "value_heads_dims", "]", "\n", "self", ".", "key_dim", "=", "mtf", ".", "Dimension", "(", "\"d_k\"", ",", "key_size", ")", "\n", "self", ".", "value_dim", "=", "mtf", ".", "Dimension", "(", "\"d_v\"", ",", "value_size", ")", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "relative_attention_type", "=", "relative_attention_type", "\n", "self", ".", "relative_attention_num_buckets", "=", "relative_attention_num_buckets", "\n", "self", ".", "dynamic_projections", "=", "dynamic_projections", "or", "[", "]", "\n", "self", ".", "dynamic_projections_init_scale", "=", "dynamic_projections_init_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsSelfAttention.compute_q": [[1300, 1314], ["mesh_tensorflow.layers.VarianceScalingInitializer", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.unit_scaling_convention"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention"], ["", "def", "compute_q", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "# Scale the initializer variance by 1.0/d_k", "\n", "# This scales the initializer by rsqrt(d_k)", "\n", "    ", "init_scale", "=", "1.0", "\n", "if", "not", "mtf", ".", "layers", ".", "unit_scaling_convention", "(", ")", ":", "\n", "      ", "init_scale", "/=", "self", ".", "key_dim", ".", "size", "\n", "", "kernel_initializer", "=", "mtf", ".", "layers", ".", "VarianceScalingInitializer", "(", "init_scale", ")", "\n", "return", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "self", ".", "key_heads_dims", "+", "[", "self", ".", "key_dim", "]", ",", "\n", "use_bias", "=", "False", ",", "activation", "=", "None", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"q\"", ",", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsSelfAttention.compute_k": [[1315, 1322], ["mesh_tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["", "def", "compute_k", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "    ", "return", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "self", ".", "key_heads_dims", "+", "[", "self", ".", "key_dim", "]", ",", "\n", "use_bias", "=", "False", ",", "activation", "=", "None", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"k\"", ",", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsSelfAttention.compute_v": [[1323, 1330], ["mesh_tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["", "def", "compute_v", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "    ", "return", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "self", ".", "value_heads_dims", "+", "[", "self", ".", "value_dim", "]", ",", "\n", "use_bias", "=", "False", ",", "activation", "=", "None", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"v\"", ",", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsSelfAttention.compute_y": [[1331, 1338], ["mesh_tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["", "def", "compute_y", "(", "self", ",", "context", ",", "u", ")", ":", "\n", "    ", "return", "mtf", ".", "layers", ".", "dense", "(", "\n", "u", ",", "reduced_dims", "=", "self", ".", "value_heads_dims", "+", "[", "self", ".", "value_dim", "]", ",", "\n", "new_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "use_bias", "=", "False", ",", "activation", "=", "None", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"y\"", ",", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsSelfAttention.call": [[1339, 1365], ["transformer_layers.TalkingHeadsSelfAttention.memory_length", "transformer_layers.TalkingHeadsSelfAttention.compute_q", "transformer_layers.TalkingHeadsSelfAttention.compute_k", "transformer_layers.TalkingHeadsSelfAttention.compute_v", "transformer_layers.TalkingHeadsSelfAttention.compute_bias", "transformer_layers.TalkingHeadsSelfAttention.attention_internal", "mesh_tensorflow.replace_dimensions", "mesh_tensorflow.one_hot", "context.get_states", "mesh_tensorflow.range", "transformer_layers.TalkingHeadsSelfAttention.rename_length_to_memory_length", "context.record_new_states"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_q", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_k", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_v", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.compute_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearSelfAttention.attention_internal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_states", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_new_states"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "memory_length", "=", "self", ".", "memory_length", "(", "context", ")", "\n", "q", "=", "self", ".", "compute_q", "(", "context", ",", "x", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "m", "=", "x", "\n", "", "else", ":", "\n", "      ", "m", "=", "mtf", ".", "replace_dimensions", "(", "x", ",", "context", ".", "length_dim", ",", "memory_length", ")", "\n", "", "k", "=", "self", ".", "compute_k", "(", "context", ",", "m", ")", "\n", "v", "=", "self", ".", "compute_v", "(", "context", ",", "m", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "one_hot", "=", "mtf", ".", "one_hot", "(", "\n", "context", ".", "position", ",", "memory_length", ",", "dtype", "=", "context", ".", "activation_dtype", ")", "\n", "inv_one_hot", "=", "1.0", "-", "one_hot", "\n", "old_k", ",", "old_v", "=", "context", ".", "get_states", "(", "2", ")", "\n", "k", "=", "old_k", "*", "inv_one_hot", "+", "k", "*", "one_hot", "\n", "v", "=", "old_v", "*", "inv_one_hot", "+", "v", "*", "one_hot", "\n", "memory_position", "=", "mtf", ".", "range", "(", "context", ".", "mesh", ",", "memory_length", ",", "tf", ".", "int32", ")", "\n", "", "else", ":", "\n", "      ", "memory_position", "=", "self", ".", "rename_length_to_memory_length", "(", "\n", "context", ".", "position", ",", "context", ")", "\n", "", "if", "context", ".", "mode", "==", "\"incremental\"", "or", "context", ".", "mode", "==", "\"first_part\"", ":", "\n", "      ", "context", ".", "record_new_states", "(", "[", "k", ",", "v", "]", ")", "\n", "", "bias", "=", "self", ".", "compute_bias", "(", "context", ",", "memory_position", ",", "x", ",", "\n", "self", ".", "softmax_heads_dims", ",", "q", ")", "\n", "return", "self", ".", "attention_internal", "(", "context", ",", "x", ",", "m", ",", "q", ",", "k", ",", "v", ",", "memory_length", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsSelfAttention.attention_internal": [[1366, 1388], ["mesh_tensorflow.layers.us_einsum", "transformer_layers.TalkingHeadsSelfAttention.talking_heads", "mesh_tensorflow.softmax", "transformer_layers.TalkingHeadsSelfAttention.talking_heads", "mesh_tensorflow.dropout", "mesh_tensorflow.einsum", "transformer_layers.TalkingHeadsSelfAttention.compute_y"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsSelfAttention.talking_heads", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsSelfAttention.talking_heads", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearSelfAttention.compute_y"], ["", "def", "attention_internal", "(", "self", ",", "context", ",", "x", ",", "m", ",", "q", ",", "k", ",", "v", ",", "memory_length", ",", "bias", ")", ":", "\n", "    ", "p", "=", "mtf", ".", "layers", ".", "us_einsum", "(", "[", "q", ",", "k", "]", ",", "reduced_dims", "=", "[", "self", ".", "key_dim", "]", ")", "\n", "logits", "=", "self", ".", "talking_heads", "(", "\n", "context", ",", "p", ",", "\"logits\"", ",", "self", ".", "key_heads_dims", ",", "self", ".", "softmax_heads_dims", ",", "\n", "dynamic_projections_from", "=", "(", "\n", "(", "[", "x", "]", "if", "\"x2l\"", "in", "self", ".", "dynamic_projections", "else", "[", "]", ")", "+", "\n", "(", "[", "m", "]", "if", "\"m2l\"", "in", "self", ".", "dynamic_projections", "else", "[", "]", ")", ")", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "      ", "logits", "+=", "bias", "\n", "", "h", "=", "mtf", ".", "softmax", "(", "logits", ",", "memory_length", ")", "\n", "weights", "=", "self", ".", "talking_heads", "(", "\n", "context", ",", "h", ",", "\"weights\"", ",", "self", ".", "softmax_heads_dims", ",", "self", ".", "value_heads_dims", ",", "\n", "dynamic_projections_from", "=", "(", "\n", "(", "[", "x", "]", "if", "\"x2w\"", "in", "self", ".", "dynamic_projections", "else", "[", "]", ")", "+", "\n", "(", "[", "m", "]", "if", "\"m2w\"", "in", "self", ".", "dynamic_projections", "else", "[", "]", ")", ")", ")", "\n", "# TODO(noam): make dropout_broadcast_dims configurable", "\n", "dropout_broadcast_dims", "=", "[", "context", ".", "length_dim", "]", "\n", "weights", "=", "mtf", ".", "dropout", "(", "\n", "weights", ",", "context", ".", "train", ",", "rate", "=", "self", ".", "dropout_rate", ",", "\n", "noise_shape", "=", "weights", ".", "shape", "-", "dropout_broadcast_dims", ")", "\n", "u", "=", "mtf", ".", "einsum", "(", "[", "weights", ",", "v", "]", ",", "reduced_dims", "=", "[", "memory_length", "]", ")", "\n", "return", "self", ".", "compute_y", "(", "context", ",", "u", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsSelfAttention.talking_heads": [[1389, 1447], ["mesh_tensorflow.layers.dense", "tensorflow.variable_scope", "mesh_tensorflow.get_variable", "enumerate", "mesh_tensorflow.add_n", "mesh_tensorflow.layers.VarianceScalingInitializer", "mesh_tensorflow.layers.VarianceScalingInitializer", "ps.append", "mesh_tensorflow.layers.unit_scaling_convention", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.us_einsum", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum"], ["", "def", "talking_heads", "(", "\n", "self", ",", "context", ",", "inp", ",", "name", ",", "input_heads_dims", ",", "output_heads_dims", ",", "\n", "dynamic_projections_from", "=", "None", ")", ":", "\n", "    ", "shared_dims", "=", "[", "d", "for", "d", "in", "input_heads_dims", "if", "d", "in", "output_heads_dims", "]", "\n", "reduced_dims", "=", "[", "d", "for", "d", "in", "input_heads_dims", "if", "d", "not", "in", "output_heads_dims", "]", "\n", "new_dims", "=", "[", "d", "for", "d", "in", "output_heads_dims", "if", "d", "not", "in", "input_heads_dims", "]", "\n", "if", "not", "(", "reduced_dims", "or", "new_dims", ")", ":", "\n", "# Output dimensions are same as input dimensions.  Return the input", "\n", "      ", "return", "inp", "\n", "", "elif", "dynamic_projections_from", ":", "\n", "# There are one or more dynamic talking-heads-projections", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# static projection - this is the same as the static projection in the", "\n", "# \"else\" case below.  We create the weight matrix with get_variable", "\n", "# instead of calling mtf.layers.dense() so that we can fold the", "\n", "# static projection into one of the dynamic projections.", "\n", "        ", "static_p_initializer", "=", "mtf", ".", "layers", ".", "VarianceScalingInitializer", "(", ")", "(", "\n", "reduced_dims", ",", "new_dims", ")", "\n", "static_p_shape", "=", "(", "\n", "context", ".", "model", ".", "ensemble_dims", "+", "shared_dims", "+", "reduced_dims", "+", "new_dims", ")", "\n", "static_p", "=", "mtf", ".", "get_variable", "(", "inp", ".", "mesh", ",", "\n", "\"kernel\"", ",", "\n", "static_p_shape", ",", "\n", "initializer", "=", "static_p_initializer", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "ps", "=", "[", "]", "\n", "for", "i", ",", "dp_from", "in", "enumerate", "(", "dynamic_projections_from", ")", ":", "\n", "          ", "init_scale", "=", "self", ".", "dynamic_projections_init_scale", "\n", "if", "not", "mtf", ".", "layers", ".", "unit_scaling_convention", "(", ")", ":", "\n", "            ", "init_scale", "/=", "mtf", ".", "Shape", "(", "reduced_dims", ")", ".", "size", "\n", "", "kernel_initializer", "=", "mtf", ".", "layers", ".", "VarianceScalingInitializer", "(", "\n", "init_scale", ")", "\n", "ps", ".", "append", "(", "\n", "mtf", ".", "layers", ".", "dense", "(", "\n", "dp_from", ",", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "shared_dims", "+", "reduced_dims", "+", "new_dims", ",", "\n", "use_bias", "=", "False", ",", "activation", "=", "None", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"%s_dynamic_%d\"", "%", "(", "name", ",", "i", ")", ",", "\n", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ")", ")", "\n", "# Fold the static projection into one of the static projections.", "\n", "# Mathematically, we could add all the dynamic projections together", "\n", "#   here, but it would create a very large tensor which contained", "\n", "#   both the query-length and memory-length dimensions, and would", "\n", "#   probably be slower in practice.", "\n", "", "ps", "[", "0", "]", "+=", "static_p", "\n", "return", "mtf", ".", "add_n", "(", "\n", "[", "mtf", ".", "layers", ".", "us_einsum", "(", "[", "inp", ",", "p", "]", ",", "reduced_dims", "=", "reduced_dims", ")", "\n", "for", "p", "in", "ps", "]", ")", "\n", "", "", "else", ":", "\n", "# No dynamic projections.  Static talking-heads projection only", "\n", "      ", "return", "mtf", ".", "layers", ".", "dense", "(", "\n", "inp", ",", "reduced_dims", "=", "reduced_dims", ",", "\n", "new_dims", "=", "new_dims", ",", "\n", "use_bias", "=", "False", ",", "activation", "=", "None", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "name", ",", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", "+", "shared_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsEncDecAttention.__init__": [[1456, 1459], ["transformer_layers.TalkingHeadsSelfAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "relative_attention_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "TalkingHeadsEncDecAttention", ",", "self", ")", ".", "__init__", "(", "\n", "relative_attention_type", "=", "relative_attention_type", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsEncDecAttention._get_memory_antecedent": [[1460, 1462], ["None"], "methods", ["None"], ["", "def", "_get_memory_antecedent", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "context", ".", "encoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.TalkingHeadsEncDecAttention.call": [[1463, 1483], ["transformer_layers.TalkingHeadsEncDecAttention._get_memory_antecedent", "transformer_layers.TalkingHeadsEncDecAttention.compute_q", "transformer_layers.enc_dec_attention_bias", "transformer_layers.TalkingHeadsEncDecAttention.attention_internal", "NotImplementedError", "context.get_constant_state", "transformer_layers.TalkingHeadsEncDecAttention.compute_k", "transformer_layers.TalkingHeadsEncDecAttention.compute_v", "context.record_constant_state"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.EncDecAttentionFixup._get_memory_antecedent", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_q", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.enc_dec_attention_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearSelfAttention.attention_internal", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_constant_state", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_k", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_v", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_constant_state"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "m", "=", "self", ".", "_get_memory_antecedent", "(", "context", ")", "\n", "memory_input_dim", "=", "m", ".", "shape", "[", "-", "1", "]", "\n", "if", "memory_input_dim", "!=", "context", ".", "model", ".", "model_dim", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\n", "\"TODO(noam): support different model_dim in encoder and decoder.\"", ")", "\n", "", "q", "=", "self", ".", "compute_q", "(", "context", ",", "x", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "k", ",", "v", ",", "memory_length", "=", "context", ".", "get_constant_state", "(", ")", "\n", "", "else", ":", "\n", "      ", "k", "=", "self", ".", "compute_k", "(", "context", ",", "m", ")", "\n", "v", "=", "self", ".", "compute_v", "(", "context", ",", "m", ")", "\n", "memory_length", ",", "=", "[", "d", "for", "d", "in", "m", ".", "shape", ".", "dims", "if", "d", ".", "name", "==", "\"memory_length\"", "]", "\n", "if", "context", ".", "mode", "==", "\"first_part\"", ":", "\n", "        ", "context", ".", "record_constant_state", "(", "(", "k", ",", "v", ",", "memory_length", ")", ")", "\n", "", "", "bias", "=", "enc_dec_attention_bias", "(", "self", ",", "\n", "context", ",", "\n", "self", ".", "softmax_heads_dims", ")", "\n", "return", "self", ".", "attention_internal", "(", "context", ",", "x", ",", "m", ",", "q", ",", "k", ",", "v", ",", "memory_length", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearSelfAttention.__init__": [[1497, 1516], ["mesh_tensorflow.convert_to_dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_dimension"], ["def", "__init__", "(", "self", ",", "# pylint: disable=super-init-not-called", "\n", "heads_dims", "=", "(", "(", "\"heads\"", ",", "12", ")", ",", ")", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "relative_attention_type", "=", "None", ",", "\n", "relative_attention_num_buckets", "=", "32", ")", ":", "\n", "    ", "\"\"\"Create a GeneralBilinearSelfAttention Layer.\n\n    Args:\n      heads_dims: a list of mtf.Dimension or (name, size) pairs\n      dropout_rate: a float\n      relative_attention_type: an optional string - one of\n        (None, \"bias\", \"bias_shared\", \"contextual\")\n      relative_attention_num_buckets: an integer\n    \"\"\"", "\n", "self", ".", "heads_dims", "=", "[", "\n", "mtf", ".", "convert_to_dimension", "(", "d", ")", "for", "d", "in", "heads_dims", "]", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "relative_attention_type", "=", "relative_attention_type", "\n", "self", ".", "relative_attention_num_buckets", "=", "relative_attention_num_buckets", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearSelfAttention.compute_q": [[1517, 1530], ["mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.unit_scaling_convention", "mesh_tensorflow.layers.VarianceScalingInitializer"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention"], ["", "def", "compute_q", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "# Scale the initializer variance by 1.0/d_k", "\n", "# This scales the initializer by rsqrt(d_k)", "\n", "    ", "init_scale", "=", "1.0", "\n", "if", "not", "mtf", ".", "layers", ".", "unit_scaling_convention", "(", ")", ":", "\n", "      ", "init_scale", "/=", "context", ".", "model", ".", "model_dim", ".", "size", "\n", "", "return", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "self", ".", "heads_dims", "+", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "use_bias", "=", "False", ",", "activation", "=", "None", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"q\"", ",", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ",", "\n", "kernel_initializer", "=", "mtf", ".", "layers", ".", "VarianceScalingInitializer", "(", "init_scale", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearSelfAttention.compute_y": [[1531, 1538], ["mesh_tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["", "def", "compute_y", "(", "self", ",", "context", ",", "u", ")", ":", "\n", "    ", "return", "mtf", ".", "layers", ".", "dense", "(", "\n", "u", ",", "reduced_dims", "=", "self", ".", "heads_dims", "+", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "use_bias", "=", "False", ",", "activation", "=", "None", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"y\"", ",", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearSelfAttention.call": [[1539, 1561], ["transformer_layers.GeneralBilinearSelfAttention.memory_length", "transformer_layers.GeneralBilinearSelfAttention.compute_q", "transformer_layers.GeneralBilinearSelfAttention.compute_bias", "transformer_layers.GeneralBilinearSelfAttention.attention_internal", "mesh_tensorflow.replace_dimensions", "mesh_tensorflow.one_hot", "context.get_states", "mesh_tensorflow.range", "transformer_layers.GeneralBilinearSelfAttention.rename_length_to_memory_length", "context.record_new_states"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_q", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.compute_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearSelfAttention.attention_internal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_states", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_new_states"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "memory_length", "=", "self", ".", "memory_length", "(", "context", ")", "\n", "q", "=", "self", ".", "compute_q", "(", "context", ",", "x", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "m", "=", "x", "\n", "", "else", ":", "\n", "      ", "m", "=", "mtf", ".", "replace_dimensions", "(", "x", ",", "context", ".", "length_dim", ",", "memory_length", ")", "\n", "", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "one_hot", "=", "mtf", ".", "one_hot", "(", "\n", "context", ".", "position", ",", "memory_length", ",", "dtype", "=", "context", ".", "activation_dtype", ")", "\n", "inv_one_hot", "=", "1.0", "-", "one_hot", "\n", "old_m", ",", "=", "context", ".", "get_states", "(", "1", ")", "\n", "m", "=", "old_m", "*", "inv_one_hot", "+", "one_hot", "*", "m", "\n", "memory_position", "=", "mtf", ".", "range", "(", "context", ".", "mesh", ",", "memory_length", ",", "tf", ".", "int32", ")", "\n", "", "else", ":", "\n", "      ", "memory_position", "=", "self", ".", "rename_length_to_memory_length", "(", "\n", "context", ".", "position", ",", "context", ")", "\n", "", "if", "context", ".", "mode", "==", "\"incremental\"", "or", "context", ".", "mode", "==", "\"first_part\"", ":", "\n", "      ", "context", ".", "record_new_states", "(", "[", "m", "]", ")", "\n", "", "bias", "=", "self", ".", "compute_bias", "(", "context", ",", "memory_position", ",", "x", ",", "self", ".", "heads_dims", ",", "q", ")", "\n", "return", "self", ".", "attention_internal", "(", "context", ",", "q", ",", "m", ",", "memory_length", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearSelfAttention.attention_internal": [[1562, 1576], ["mesh_tensorflow.layers.us_einsum", "mesh_tensorflow.softmax", "mesh_tensorflow.dropout", "mesh_tensorflow.einsum", "transformer_layers.GeneralBilinearSelfAttention.compute_y"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearSelfAttention.compute_y"], ["", "def", "attention_internal", "(", "self", ",", "context", ",", "q", ",", "m", ",", "memory_length", ",", "bias", ")", ":", "\n", "    ", "logits", "=", "mtf", ".", "layers", ".", "us_einsum", "(", "\n", "[", "q", ",", "m", "]", ",", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "      ", "logits", "+=", "bias", "\n", "", "weights", "=", "mtf", ".", "softmax", "(", "logits", ",", "memory_length", ")", "\n", "# TODO(noam): make dropout_broadcast_dims configurable", "\n", "dropout_broadcast_dims", "=", "[", "context", ".", "length_dim", "]", "\n", "weights", "=", "mtf", ".", "dropout", "(", "\n", "weights", ",", "context", ".", "train", ",", "\n", "rate", "=", "self", ".", "dropout_rate", ",", "\n", "noise_shape", "=", "weights", ".", "shape", "-", "dropout_broadcast_dims", ")", "\n", "u", "=", "mtf", ".", "einsum", "(", "[", "weights", ",", "m", "]", ",", "reduced_dims", "=", "[", "memory_length", "]", ")", "\n", "return", "self", ".", "compute_y", "(", "context", ",", "u", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearEncDecAttention.__init__": [[1585, 1588], ["transformer_layers.GeneralBilinearSelfAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "relative_attention_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "GeneralBilinearEncDecAttention", ",", "self", ")", ".", "__init__", "(", "\n", "relative_attention_type", "=", "relative_attention_type", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearEncDecAttention._get_memory_antecedent": [[1589, 1591], ["None"], "methods", ["None"], ["", "def", "_get_memory_antecedent", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "context", ".", "encoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearEncDecAttention.call": [[1592, 1611], ["transformer_layers.GeneralBilinearEncDecAttention._get_memory_antecedent", "transformer_layers.GeneralBilinearEncDecAttention.compute_q", "transformer_layers.enc_dec_attention_bias", "transformer_layers.GeneralBilinearEncDecAttention.attention_internal", "NotImplementedError", "context.get_constant_state", "context.record_constant_state"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.EncDecAttentionFixup._get_memory_antecedent", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_q", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.enc_dec_attention_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.GeneralBilinearSelfAttention.attention_internal", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_constant_state", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_constant_state"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "memory_antecedent", "=", "self", ".", "_get_memory_antecedent", "(", "context", ")", "\n", "memory_input_dim", "=", "memory_antecedent", ".", "shape", "[", "-", "1", "]", "\n", "if", "memory_input_dim", "!=", "context", ".", "model", ".", "model_dim", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\n", "\"TODO(noam): support different model_dim in encoder and decoder.\"", ")", "\n", "", "q", "=", "self", ".", "compute_q", "(", "context", ",", "x", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "m", ",", "memory_length", "=", "context", ".", "get_constant_state", "(", ")", "\n", "", "else", ":", "\n", "      ", "m", "=", "memory_antecedent", "\n", "memory_length", ",", "=", "[", "d", "for", "d", "in", "m", ".", "shape", ".", "dims", "if", "d", ".", "name", "==", "\"memory_length\"", "]", "\n", "if", "context", ".", "mode", "==", "\"first_part\"", ":", "\n", "        ", "context", ".", "record_constant_state", "(", "(", "m", ",", "memory_length", ")", ")", "\n", "", "", "bias", "=", "enc_dec_attention_bias", "(", "self", ",", "\n", "context", ",", "\n", "self", ".", "heads_dims", ")", "\n", "return", "self", ".", "attention_internal", "(", "context", ",", "q", ",", "m", ",", "memory_length", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.BranchedSelfAttention.__init__": [[1617, 1627], ["transformer_layers.SelfAttention.__init__", "transformer_layers.DenseReluDense", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "BranchedSelfAttention", ",", "self", ")", ".", "__init__", "(", "\n", "combine_dims", "=", "False", ",", "keep_query_heads_dims", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "num_memory_heads", "!=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\"Set num_memory_heads to 0 for branched attention.\"", ")", "\n", "\n", "", "self", ".", "dense_layer", "=", "DenseReluDense", "(", ")", "\n", "self", ".", "kappa_init", "=", "tf", ".", "random_uniform_initializer", "(", "minval", "=", "0.0", ",", "maxval", "=", "1.0", ")", "\n", "self", ".", "alpha_init", "=", "tf", ".", "random_uniform_initializer", "(", "minval", "=", "0.0", ",", "maxval", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.BranchedSelfAttention._constraint": [[1628, 1632], ["mesh_tensorflow.relu", "mesh_tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum"], ["", "def", "_constraint", "(", "self", ",", "z", ")", ":", "\n", "    ", "\"\"\"Keep z non-negative and summing to 1.\"\"\"", "\n", "z", "=", "mtf", ".", "relu", "(", "z", ")", "\n", "return", "z", "/", "mtf", ".", "reduce_sum", "(", "z", "+", "10", "**", "-", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.BranchedSelfAttention.layer_output_from_attention_output": [[1633, 1660], ["mesh_tensorflow.Dimension", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.einsum", "transformer_layers.BranchedSelfAttention.dense_layer.call", "mesh_tensorflow.einsum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum"], ["", "def", "layer_output_from_attention_output", "(", "self", ",", "context", ",", "attention_output", ",", "\n", "losses", ")", ":", "\n", "    ", "heads_dim", "=", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "self", ".", "num_heads", ")", "\n", "\n", "kappa", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "\"kappa\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "heads_dim", "]", ")", ",", "\n", "initializer", "=", "self", ".", "kappa_init", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ",", "\n", "constraint", "=", "self", ".", "_constraint", ")", "\n", "\n", "alpha", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "\"alpha\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "heads_dim", "]", ")", ",", "\n", "initializer", "=", "self", ".", "alpha_init", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ",", "\n", "constraint", "=", "self", ".", "_constraint", ")", "\n", "\n", "o", "=", "mtf", ".", "einsum", "(", "[", "attention_output", ",", "kappa", "]", ",", "\n", "output_shape", "=", "attention_output", ".", "shape", ")", "\n", "o", "=", "self", ".", "dense_layer", ".", "call", "(", "context", ",", "o", ",", "losses", ")", "\n", "o", "=", "mtf", ".", "einsum", "(", "[", "o", ",", "alpha", "]", ",", "output_shape", "=", "o", ".", "shape", ")", "\n", "o", "=", "mtf", ".", "reduce_sum", "(", "o", ",", "reduced_dim", "=", "heads_dim", ")", "\n", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.BranchedEncDecAttention.__init__": [[1666, 1669], ["transformer_layers.BranchedSelfAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "relative_attention_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "BranchedEncDecAttention", ",", "self", ")", ".", "__init__", "(", "\n", "relative_attention_type", "=", "relative_attention_type", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.BranchedEncDecAttention._get_memory_antecedent": [[1670, 1672], ["None"], "methods", ["None"], ["", "def", "_get_memory_antecedent", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "context", ".", "encoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.BranchedEncDecAttention.call": [[1673, 1677], ["transformer_layers.enc_dec_attention", "transformer_layers.BranchedEncDecAttention._get_memory_antecedent"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.enc_dec_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.EncDecAttentionFixup._get_memory_antecedent"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "return", "enc_dec_attention", "(", "self", ",", "self", ".", "_get_memory_antecedent", "(", "context", ")", ",", "\n", "context", ",", "x", ",", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.record_states_first_part_mode": [[1690, 1752], ["mesh_tensorflow.Dimension", "mesh_tensorflow.range", "mesh_tensorflow.Shape", "mesh_tensorflow.shift", "mesh_tensorflow.gather", "context.record_new_states"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_new_states"], ["def", "record_states_first_part_mode", "(", "self", ",", "\n", "context", ",", "\n", "x", ",", "\n", "filter_size", ",", "\n", "length_dim_name", "=", "\"length\"", ")", ":", "\n", "    ", "\"\"\"Record the states during the first part mode.\n\n    l: current layer index\n    k: convolution filter size\n    x(l): input tensor to layer `l` for the first_part mode with the shape\n      [<batch_dims>, length, d_model].\n\n    The first_part mode is called once before the incremental mode is called for\n    the actual decoding process. The purpose is to set the recurrent states in\n    context.states, which are accessed during the incremental mode via\n    context.get_states. There are two cases depending on partial sequences are\n    present or not.\n\n    1) with partial sequences\n    When partial sequences are present, we decode from the position after the\n    partial sequence, but we need to use the information contained in the\n    partial sequence.\n\n    x(l) = [x1, x2, 0, 0, 0]\n    context.initial_position = 2 (the actual decoding should start from index\n    2).\n    Then we record the state = [0, x1, x2]. If partial sequences are shorter\n    than the filter size, we zero pad from the left.\n\n    2) Without partial sequences\n    x(l) = [0, 0, 0, 0, 0]\n    context.initial_position = 0\n    Then we record the state = [0, 0, 0]\n\n    These two cases can be handled with the following pseudocode. Let\n    i = context.initial_position.\n    state = x[:, i-filter_size:i, :] and store this as state.\n\n    Equivalently we can shift x by filter_size and slice\n    shifted_x = shift(x, length_dim)\n    state = shifted_x[:, i:i + filter_size, :]\n\n    Args:\n      context: a transformer.Context.\n      x: a Tensor.\n      filter_size: an intger - convolution filter size.\n      length_dim_name: a string - a dimension name for the length mtf.Dimension.\n    \"\"\"", "\n", "length_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "2", "]", "\n", "\n", "# Slice shifted_x[:, i:i + self.filter_size, :]", "\n", "filter_dim", "=", "mtf", ".", "Dimension", "(", "length_dim_name", ",", "filter_size", ")", "\n", "indices", "=", "mtf", ".", "range", "(", "x", ".", "mesh", ",", "filter_dim", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "indices", "=", "context", ".", "initial_position", "+", "indices", "\n", "\n", "# Assumes that x.shape = [<batch_dims>, length_dim, model_dim]", "\n", "output_shape", "=", "mtf", ".", "Shape", "(", "x", ".", "shape", ".", "dims", "[", ":", "-", "2", "]", "+", "[", "filter_dim", "]", "+", "\n", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ")", "\n", "shifted_x", "=", "mtf", ".", "shift", "(", "x", ",", "filter_size", ",", "length_dim", ",", "wrap", "=", "False", ")", "\n", "state", "=", "mtf", ".", "gather", "(", "\n", "shifted_x", ",", "indices", ",", "length_dim", ",", "output_shape", "=", "output_shape", ")", "\n", "context", ".", "record_new_states", "(", "[", "state", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.record_states_incremental_mode": [[1753, 1803], ["mesh_tensorflow.Dimension", "mesh_tensorflow.constant", "transformer_layers.Conv1D.update_state", "context.record_new_states", "context.get_states", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.update_state", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_new_states", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_states"], ["", "def", "record_states_incremental_mode", "(", "self", ",", "context", ",", "x", ",", "filter_size", ",", "\n", "length_dim_name", "=", "\"length\"", ")", ":", "\n", "    ", "\"\"\"Record the states during the first part mode.\n\n    l: current layer index\n    t: current decoding time step\n    k: convolution filter size\n    x(l, t): input vector to layer `l` at time step `t` for the incremental\n      mode with the shape [<batch_dims>, d_model].\n\n    During the incremental mode, the input to the conv layer x(l, t) does not\n    have the length dim because the input vector x corresponds to the current\n    decoding time step. We want to restore the input to the current layer in the\n    previous time steps (stored in the context.states) and combine with the\n    input at the current time step. This method does the following.\n\n    1) Restore the states: [x(l, t-k), ..., x(l, t-1)]\n    2) Combine with the current input: [x(l, t-k+1), ..., x(l, t-1), x(l, t)]\n    3) Store the new state and return it to be used as an input to the conv\n    layer.\n\n    It is important to note that the state being recorded is not used by the\n    next layer; it is used by the same layer but at the future time steps.\n\n    Args:\n      context: a transformer.Context.\n      x: a Tensor.\n      filter_size: an intger - convolution filter size.\n      length_dim_name: a string - a dimension name for the length mtf.Dimension.\n\n    Returns:\n      x: a Tensor of shape [<batch_dims>, filter_size, d_model].\n    \"\"\"", "\n", "# Augment x with the states", "\n", "filter_dim", "=", "mtf", ".", "Dimension", "(", "length_dim_name", ",", "filter_size", ")", "\n", "input_state", "=", "context", ".", "get_states", "(", "1", ")", "[", "0", "]", "\n", "\n", "position", "=", "mtf", ".", "constant", "(", "\n", "x", ".", "mesh", ",", "\n", "filter_size", "-", "1", ",", "# Always use the last position.", "\n", "shape", "=", "mtf", ".", "Shape", "(", "x", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", ")", ",", "# Pick out batch dims.", "\n", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "# [batch, d_model] -> [batch, filter, d_model]", "\n", "x", "=", "self", ".", "update_state", "(", "\n", "input_state", ",", "x", ",", "position", ",", "filter_dim", ",", "dtype", "=", "context", ".", "activation_dtype", ")", "\n", "\n", "# new state include the input for [t-filter, ..., t] steps.", "\n", "context", ".", "record_new_states", "(", "[", "x", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.update_state": [[1804, 1830], ["mesh_tensorflow.shift", "mesh_tensorflow.one_hot"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot"], ["", "def", "update_state", "(", "self", ",", "old_state", ",", "x", ",", "position", ",", "filter_dim", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"Augment the current input to the old state.\n\n    [x(l, t-k), ..., x(l, t-1)], x(l, t) ->\n    [x(l, t-k+1), ..., x(l, t-1), x(l, t)]\n\n    Args:\n      old_state: a Tensor of shape [<batch_dims>, filter_size, d_model]\n      x: a Tensor of shape [<batch_dims>, d_model]\n      position: a Tensor of shape [<batch_dims>]\n      filter_dim: an mtf.Dimension corresponding to the filter size.\n      dtype: a mtf.VariableDType\n\n    Returns:\n      new_state: a Tensor of shape [<batch_dims>, filter_size, d_model].\n    \"\"\"", "\n", "# [<batch_dims>, length, d_model]", "\n", "shifted_state", "=", "mtf", ".", "shift", "(", "old_state", ",", "-", "1", ",", "filter_dim", ",", "wrap", "=", "False", ")", "\n", "\n", "# [<batch_dims>, length]", "\n", "one_hot", "=", "mtf", ".", "one_hot", "(", "position", ",", "filter_dim", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# [<batch_dims>, length, d_model]", "\n", "shifted_x", "=", "one_hot", "*", "x", "\n", "new_state", "=", "shifted_state", "+", "shifted_x", "\n", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1DLayer.__init__": [[1840, 1853], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "filter_size", ",", "output_size", ",", "activation", "=", "\"linear\"", ")", ":", "# pylint: disable=super-init-not-called", "\n", "    ", "\"\"\"Create a Conv1DLayer.\n\n    Args:\n      filter_size: a positive integer, the size of convolutional kernel.\n      output_size: a positive integer, the number of channels in the output.\n      activation: an optional string function name from namespace mtf, a\n        function to be applied to the layer output. If not provided or set to\n        \"linear\", then no function will be applied.\n    \"\"\"", "\n", "self", ".", "_filter_size", "=", "filter_size", "\n", "self", ".", "_output_size", "=", "output_size", "\n", "self", ".", "_activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1DLayer.call": [[1854, 1892], ["mesh_tensorflow.Dimension", "mesh_tensorflow.replace_dimensions", "mesh_tensorflow.Dimension", "mesh_tensorflow.layers.conv1d", "transformer_layers.Conv1DLayer.record_states_first_part_mode", "transformer_layers.Conv1DLayer.record_states_incremental_mode", "mesh_tensorflow.cast", "mesh_tensorflow.Dimension", "mesh_tensorflow.reduce_sum", "getattr", "getattr.", "mesh_tensorflow.not_equal", "tensorflow.glorot_uniform_initializer", "mesh_tensorflow.Dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv1d", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.record_states_first_part_mode", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.record_states_incremental_mode", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "if", "context", ".", "mode", "==", "\"first_part\"", ":", "\n", "      ", "self", ".", "record_states_first_part_mode", "(", "context", ",", "x", ",", "self", ".", "filter_size", ")", "\n", "\n", "", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "x", "=", "self", ".", "record_states_incremental_mode", "(", "context", ",", "x", ",", "self", ".", "filter_size", ")", "\n", "padding", "=", "\"VALID\"", "\n", "", "else", ":", "\n", "# The first_part mode also needs masking because it may have partial", "\n", "# sequences.", "\n", "      ", "mask", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "not_equal", "(", "context", ".", "inputs", ",", "0", ")", ",", "context", ".", "activation_dtype", ")", "\n", "x", "*=", "mask", "\n", "padding", "=", "\"SAME\"", "\n", "\n", "", "model_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "input_dim", "=", "mtf", ".", "Dimension", "(", "\"input_dim\"", ",", "model_dim", ".", "size", ")", "\n", "x", "=", "mtf", ".", "replace_dimensions", "(", "x", ",", "model_dim", ",", "input_dim", ")", "\n", "output_dim", "=", "mtf", ".", "Dimension", "(", "model_dim", ".", "name", ",", "self", ".", "_output_size", ")", "\n", "output", "=", "mtf", ".", "layers", ".", "conv1d", "(", "\n", "x", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "filter_size", "=", "self", ".", "_filter_size", ",", "\n", "padding", "=", "padding", ",", "\n", "filter_initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", "\n", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "filter_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "self", ".", "filter_size", ")", "\n", "\n", "# [batch_dims, 1, output_dim] -> [batch_dims, output_dim]", "\n", "output", "=", "mtf", ".", "reduce_sum", "(", "\n", "output", ",", "reduced_dim", "=", "mtf", ".", "Dimension", "(", "filter_dim", ".", "name", ",", "1", ")", ")", "\n", "\n", "", "if", "self", ".", "_activation", "!=", "\"linear\"", ":", "\n", "      ", "activation_fn", "=", "getattr", "(", "mtf", ",", "self", ".", "_activation", ")", "\n", "output", "=", "activation_fn", "(", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1DLayer.filter_size": [[1893, 1896], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "filter_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_filter_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SeparableConv1DLayer.__init__": [[1906, 1939], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "# pylint: disable=super-init-not-called", "\n", "min_relative_pos", ",", "\n", "max_relative_pos", ",", "\n", "output_size", ",", "\n", "depthwise_filter_initializer_scale", "=", "1.0", ",", "\n", "pointwise_filter_initializer_scale", "=", "1.0", ",", "\n", "activation", "=", "\"linear\"", ")", ":", "\n", "    ", "\"\"\"Create a SeparableConv1DLayer.\n\n    The filter size will be `max_relative_pos - min_relative_pos + 1`.\n\n    Args:\n      min_relative_pos: an integer, the inclusive minimum relative positive of\n        the depthwise filter, where a relative position of zero means the left\n        end of the filter aligns with the left end of the input.\n      max_relative_pos: an integer, the inclusive maximum relative position of\n        the depthwise filter, where a relative position of zero means the right\n        end of the filter aligns with the right end of the input.\n      output_size: a positive integer, the number of channels in the output.\n      depthwise_filter_initializer_scale: a positive interger, the scale for the\n        initializer for the depthwise filter.\n      pointwise_filter_initializer_scale: a positive interger, the scale for the\n        initializer for the pointwise filter.\n      activation: an optional string function name from namespace mtf, a\n        function to be applied to the layer output. If not provided or set to\n        \"linear\", then no function will be applied.\n    \"\"\"", "\n", "self", ".", "_min_relative_pos", "=", "min_relative_pos", "\n", "self", ".", "_max_relative_pos", "=", "max_relative_pos", "\n", "self", ".", "_output_size", "=", "output_size", "\n", "self", ".", "_depthwise_filter_initializer_scale", "=", "depthwise_filter_initializer_scale", "\n", "self", ".", "_pointwise_filter_initializer_scale", "=", "pointwise_filter_initializer_scale", "\n", "self", ".", "_activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SeparableConv1DLayer.call": [[1940, 1982], ["mesh_tensorflow.Dimension", "mesh_tensorflow.layers.separable_conv1d", "transformer_layers.SeparableConv1DLayer.record_states_first_part_mode", "transformer_layers.SeparableConv1DLayer.record_states_incremental_mode", "mesh_tensorflow.cast", "mesh_tensorflow.Dimension", "mesh_tensorflow.gather", "getattr", "getattr.", "mesh_tensorflow.not_equal"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.separable_conv1d", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.record_states_first_part_mode", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.record_states_incremental_mode", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ",", "all_kernel_wts", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "\n", "if", "context", ".", "mode", "==", "\"first_part\"", ":", "\n", "      ", "self", ".", "record_states_first_part_mode", "(", "context", ",", "x", ",", "self", ".", "filter_size", ")", "\n", "\n", "", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "x", "=", "self", ".", "record_states_incremental_mode", "(", "context", ",", "x", ",", "self", ".", "filter_size", ")", "\n", "", "else", ":", "\n", "# Mask padding.", "\n", "# TODO(karishmamalkan): Change the inputs_for_mask_creation to use decoder", "\n", "# when using with decoder", "\n", "      ", "inputs_for_mask_creation", "=", "context", ".", "inputs", "\n", "mask", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "not_equal", "(", "inputs_for_mask_creation", ",", "0", ")", ",", "context", ".", "activation_dtype", ")", "\n", "x", "*=", "mask", "\n", "\n", "", "model_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "output_dim", "=", "mtf", ".", "Dimension", "(", "model_dim", ".", "name", ",", "self", ".", "_output_size", ")", "\n", "\n", "output", "=", "mtf", ".", "layers", ".", "separable_conv1d", "(", "\n", "x", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "min_relative_pos", "=", "self", ".", "_min_relative_pos", ",", "\n", "max_relative_pos", "=", "self", ".", "_max_relative_pos", ",", "\n", "depthwise_filter_initializer_scale", "=", "self", "\n", ".", "_depthwise_filter_initializer_scale", ",", "\n", "pointwise_filter_initializer_scale", "=", "self", "\n", ".", "_pointwise_filter_initializer_scale", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_depth_weights", "=", "all_kernel_wts", ")", "\n", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "      ", "filter_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "self", ".", "filter_size", ")", "\n", "# Drop unnecessary portion [batch, length, d_model] -> [batch, d_model]", "\n", "# Only the last sequence position is relevant.", "\n", "output", "=", "mtf", ".", "gather", "(", "output", ",", "[", "self", ".", "filter_size", "-", "1", "]", ",", "filter_dim", ")", "\n", "\n", "", "if", "self", ".", "_activation", "!=", "\"linear\"", ":", "\n", "      ", "activation_fn", "=", "getattr", "(", "mtf", ",", "self", ".", "_activation", ")", "\n", "output", "=", "activation_fn", "(", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SeparableConv1DLayer.filter_size": [[1983, 1986], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "filter_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_max_relative_pos", "-", "self", ".", "_min_relative_pos", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1DLocalAttn.__init__": [[1997, 2040], ["transformer_layers.SeparableConv1DLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "\n", "min_relative_pos", ",", "\n", "max_relative_pos", ",", "\n", "output_size", ",", "\n", "depthwise_filter_initializer_scale", "=", "1.0", ",", "\n", "pointwise_filter_initializer_scale", "=", "1.0", ",", "\n", "activation", "=", "\"linear\"", ",", "\n", "num_unique_depth_filters", "=", "1", ")", ":", "\n", "    ", "\"\"\"Create a LightweightConv1DLayer.\n\n    The filter size will be `max_relative_pos - min_relative_pos + 1`\n    The value of the Filter is depthwise separable, and the filter is tied and\n    repeats at every \"num_unique_depth_filters\" elements.\n\n    Args:\n      min_relative_pos: an integer, the inclusive minimum relative positive of\n        the depthwise filter, where a relative position of zero means the left\n        end of the filter aligns with the left end of the input.\n      max_relative_pos: an integer, the inclusive maximum relative position of\n        the depthwise filter, where a relative position of zero means the right\n        end of the filter aligns with the right end of the input.\n      output_size: a positive integer, the number of channels in the output.\n      depthwise_filter_initializer_scale: a positive interger, the scale for the\n        initializer for the depthwise filter.\n      pointwise_filter_initializer_scale: a positive interger, the scale for the\n        initializer for the pointwise filter.\n      activation: an optional string function name from namespace mtf, a\n        function to be applied to the layer output. If not provided or set to\n        \"linear\", then no function will be applied.\n      num_unique_depth_filters: The number of unique depth filter values. The\n        unique filter is repeated along the depth dim every\n        num_unique_depth_filters elements.\n    \"\"\"", "\n", "super", "(", "Conv1DLocalAttn", ",", "\n", "self", ")", ".", "__init__", "(", "min_relative_pos", ",", "max_relative_pos", ",", "output_size", ",", "\n", "depthwise_filter_initializer_scale", ",", "\n", "pointwise_filter_initializer_scale", ",", "activation", ")", "\n", "self", ".", "_num_unique_depth_filters", "=", "num_unique_depth_filters", "\n", "assert", "(", "self", ".", "_output_size", "%", "self", ".", "_num_unique_depth_filters", "==", "0", ")", ",", "(", "\n", "\"The number of elements in the unique depth filter should exactly \"", "\n", "\"divide the number of output channels. You set \"", "\n", "\"num_unique_depth_filters=%d, output_size(num_output_channels)=%d\"", ")", "%", "(", "\n", "self", ".", "_num_unique_depth_filters", ",", "self", ".", "_output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1DLocalAttn.call": [[2041, 2086], ["mesh_tensorflow.layers.VarianceScalingInitializer", "range", "mesh_tensorflow.stack", "mesh_tensorflow.softmax", "mesh_tensorflow.unstack", "transformer_layers.SeparableConv1DLayer.call", "mesh_tensorflow.Dimension", "transformer_layers.Conv1DLocalAttn.get_kernel_wt", "mesh_tensorflow.concat", "mesh_tensorflow.rename_dimension", "all_kernel_wts.append", "int"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.unstack", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.DynamicConv1DLocalAttn.get_kernel_wt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "\n", "depth_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "initializer_scale", "=", "self", ".", "_depthwise_filter_initializer_scale", "or", "1.0", "\n", "kernel_size", "=", "self", ".", "_max_relative_pos", "-", "self", ".", "_min_relative_pos", "+", "1", "\n", "kernel_initializer", "=", "mtf", ".", "layers", ".", "VarianceScalingInitializer", "(", "\n", "scale", "=", "initializer_scale", "/", "kernel_size", ")", "\n", "repeated_kernel_dim", "=", "[", "\n", "mtf", ".", "Dimension", "(", "\n", "\"repeated_kernel_dim\"", ",", "\n", "size", "=", "int", "(", "depth_dim", ".", "size", "/", "self", ".", "_num_unique_depth_filters", ")", ")", "\n", "]", "\n", "\n", "all_kernel_wts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "kernel_size", ")", ":", "\n", "# get a kernel variable of size num_unique_depth_filters, and replicate it", "\n", "# to span the size of the complete depth(d_model) of x", "\n", "      ", "kernel_wt", "=", "self", ".", "get_kernel_wt", "(", "\n", "x", ",", "\n", "repeated_kernel_dim", "=", "repeated_kernel_dim", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "i", "=", "i", ",", "\n", "context", "=", "context", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ")", "\n", "repeated_kernel_wts", "=", "[", "kernel_wt", "]", "*", "self", ".", "_num_unique_depth_filters", "\n", "repeated_kernel_wts_concat", "=", "mtf", ".", "concat", "(", "\n", "repeated_kernel_wts", ",", "concat_dim_name", "=", "\"repeated_kernel_dim\"", ")", "\n", "repeated_kernel_wts_concat", "=", "mtf", ".", "rename_dimension", "(", "\n", "repeated_kernel_wts_concat", ",", "\"repeated_kernel_dim\"", ",", "\"d_model\"", ")", "\n", "all_kernel_wts", ".", "append", "(", "repeated_kernel_wts_concat", ")", "\n", "\n", "# modify the kernel weights, such that they are softmaxed over the width of", "\n", "# the kernel. We do this by stacking the individual kernel positions,", "\n", "# performing the softmax, and then re-separating the stack.", "\n", "", "stacked_kernel_weights", "=", "mtf", ".", "stack", "(", "all_kernel_wts", ",", "\"new_stack_dim\"", ")", "\n", "softmaxed_kernel_weights", "=", "mtf", ".", "softmax", "(", "\n", "stacked_kernel_weights", ",", "reduced_dim", "=", "stacked_kernel_weights", ".", "shape", "[", "0", "]", "\n", ")", "# the softmax is calculated over the new_stack_dim we created", "\n", "unstacked_kernel_weights", "=", "mtf", ".", "unstack", "(", "softmaxed_kernel_weights", ",", "\n", "stacked_kernel_weights", ".", "shape", "[", "0", "]", ")", "\n", "return", "super", "(", "Conv1DLocalAttn", ",", "self", ")", ".", "call", "(", "context", ",", "x", ",", "losses", ",", "\n", "unstacked_kernel_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.LightweightConv1DLocalAttn.get_kernel_wt": [[2097, 2117], ["mesh_tensorflow.layers.get_dense_kernel_weights"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.get_dense_kernel_weights"], ["def", "get_kernel_wt", "(", "self", ",", "\n", "x", ",", "\n", "repeated_kernel_dim", ",", "\n", "kernel_initializer", ",", "\n", "i", ",", "\n", "context", ",", "\n", "variable_dtype", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "kernel_wt", "=", "mtf", ".", "layers", ".", "get_dense_kernel_weights", "(", "\n", "x", ",", "\n", "new_dims", "=", "[", "]", ",", "\n", "reduced_dims", "=", "[", "]", ",", "\n", "expert_dims", "=", "repeated_kernel_dim", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "name", "=", "\"lightwt_depthwise_dense_%d\"", "%", "(", "i", ")", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ")", "\n", "return", "kernel_wt", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.DynamicConv1DLocalAttn.get_kernel_wt": [[2128, 2148], ["mesh_tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["def", "get_kernel_wt", "(", "self", ",", "\n", "x", ",", "\n", "repeated_kernel_dim", ",", "\n", "kernel_initializer", ",", "\n", "i", ",", "\n", "context", ",", "\n", "variable_dtype", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "kernel_wt", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "\n", "new_dims", "=", "repeated_kernel_dim", ",", "\n", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "expert_dims", "=", "[", "]", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "name", "=", "\"dyn_conv_depthwise_dense_%d\"", "%", "(", "i", ")", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "master_dtype", "=", "tf", ".", "float32", ",", "\n", "slice_dtype", "=", "tf", ".", "float32", ")", "\n", "return", "kernel_wt", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.LocalConvAttnBlock.__init__": [[2158, 2205], ["transformer_layers.LightweightConv1DLocalAttn", "transformer_layers.DynamicConv1DLocalAttn", "NotImplementedError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "min_relative_pos", ",", "\n", "max_relative_pos", ",", "\n", "output_size", ",", "\n", "depthwise_filter_initializer_scale", "=", "1.0", ",", "\n", "pointwise_filter_initializer_scale", "=", "1.0", ",", "\n", "activation", "=", "\"linear\"", ",", "\n", "num_unique_depth_filters", "=", "1", ",", "\n", "attention_type", "=", "\"lightweight_conv\"", ")", ":", "\n", "    ", "\"\"\"Create a LightweightConv1DAttnBlock.\n\n    The filter size will be `max_relative_pos - min_relative_pos + 1`\n    The value of the Filter is depthwise separable, and the filter is tied and\n    repeats at every \"num_unique_depth_filters\" elements.\n\n    Args:\n      min_relative_pos: an integer, the inclusive minimum relative positive of\n        the depthwise filter, where a relative position of zero means the left\n        end of the filter aligns with the left end of the input.\n      max_relative_pos: an integer, the inclusive maximum relative position of\n        the depthwise filter, where a relative position of zero means the right\n        end of the filter aligns with the right end of the input.\n      output_size: a positive integer, the number of channels in the output.\n      depthwise_filter_initializer_scale: a positive interger, the scale for the\n        initializer for the depthwise filter.\n      pointwise_filter_initializer_scale: a positive interger, the scale for the\n        initializer for the pointwise filter.\n      activation: an optional string function name from namespace mtf, a\n        function to be applied to the layer output. If not provided or set to\n        \"linear\", then no function will be applied.\n      num_unique_depth_filters: The number of unique depth filter values. The\n        unique filter is repeated along the depth dim every\n        num_unique_depth_filters elements.\n      attention_type: Type of conv attn -\"lightweight_conv\"/\"dynamic_conv\"\n    \"\"\"", "\n", "if", "attention_type", "==", "\"lightweight_conv\"", ":", "\n", "      ", "self", ".", "conv_local_attn_layer", "=", "LightweightConv1DLocalAttn", "(", "\n", "min_relative_pos", ",", "max_relative_pos", ",", "output_size", ",", "\n", "depthwise_filter_initializer_scale", ",", "\n", "pointwise_filter_initializer_scale", ",", "activation", ")", "\n", "", "elif", "attention_type", "==", "\"dynamic_conv\"", ":", "\n", "      ", "self", ".", "conv_local_attn_layer", "=", "DynamicConv1DLocalAttn", "(", "\n", "min_relative_pos", ",", "max_relative_pos", ",", "output_size", ",", "\n", "depthwise_filter_initializer_scale", ",", "\n", "pointwise_filter_initializer_scale", ",", "activation", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\"This attention type not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.LocalConvAttnBlock.call": [[2206, 2228], ["mesh_tensorflow.layers.dense_product", "transformer_layers.LocalConvAttnBlock.conv_local_attn_layer.call", "mesh_tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense_product", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["", "", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "\n", "gated_ip", "=", "mtf", ".", "layers", ".", "dense_product", "(", "\n", "x", ",", "\n", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "activation_functions", "=", "[", "\"linear\"", ",", "\"sigmoid\"", "]", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"local_conv_inp\"", ")", "\n", "\n", "attn_output", "=", "self", ".", "conv_local_attn_layer", ".", "call", "(", "context", ",", "gated_ip", ",", "losses", ")", "\n", "\n", "op_projection", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "attn_output", ",", "\n", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "activation", "=", "None", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"local_conv_attn_op_projection\"", ")", "\n", "\n", "return", "op_projection", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.ParallelLayer.__init__": [[2237, 2249], ["l"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "layer_classes", "=", "(", "DenseReluDense", ",", "SelfAttention", ")", ",", "\n", "use_scope", "=", "True", ")", ":", "\n", "    ", "\"\"\"Create a ParallelLayer.\n\n    Args:\n      layer_classes: a list of TransformerLayer classes\n      use_scope: boolean, default True, which indicates whether to use unique\n        variable names for each parallel_layer. Here for backward compatibility.\n    \"\"\"", "\n", "self", ".", "layer_classes", "=", "[", "l", "(", ")", "for", "l", "in", "layer_classes", "]", "\n", "self", ".", "use_scope", "=", "use_scope", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.ParallelLayer.call": [[2250, 2265], ["enumerate", "mesh_tensorflow.add_n", "l.call", "len", "tensorflow.variable_scope", "l.call", "layer_outputs.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "layer_outputs", "=", "[", "]", "\n", "\n", "if", "self", ".", "use_scope", ":", "\n", "# Provide unique variable name scopes to avoid overwriting.", "\n", "      ", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "layer_classes", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"parallel_layer_%d\"", "%", "i", ")", ":", "\n", "          ", "layer_output", "=", "l", ".", "call", "(", "context", ",", "x", ",", "losses", "=", "losses", ")", "\n", "layer_outputs", ".", "append", "(", "layer_output", ")", "\n", "", "", "", "else", ":", "\n", "      ", "layer_outputs", "=", "[", "\n", "l", ".", "call", "(", "context", ",", "x", ",", "losses", "=", "losses", ")", "for", "l", "in", "self", ".", "layer_classes", "\n", "]", "\n", "", "return", "mtf", ".", "add_n", "(", "layer_outputs", ")", "*", "(", "len", "(", "self", ".", "layer_classes", ")", "**", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.attention_params": [[79, 150], ["mesh_tensorflow.transformer.attention.AttentionParams", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "ValueError", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "function", ["None"], ["", "", "def", "attention_params", "(", "context", ",", "\n", "kv_dim", ",", "\n", "num_heads", ",", "\n", "num_memory_heads", "=", "0", ",", "\n", "shared_kv", "=", "False", ",", "\n", "no_query", "=", "False", ",", "\n", "combine_dims", "=", "True", ",", "\n", "keep_query_heads_dims", "=", "False", ",", "\n", "fold_scaling_into_initializer", "=", "True", ")", ":", "\n", "  ", "\"\"\"Attention Parameters for Transformer Layers.\n\n  The num_heads argument indicates the number of read-heads.\n\n  For the familiar behavior described in \"Attention Is All You Need\", set\n  num_memory_heads=0.\n\n  If num_memory_heads==1, then there is only a single write-head, and multiple\n  read-heads.  This leads to faster incremental decoding, since the\n  recurrent state is smaller\n\n  If num_memory_heads > 1, then num_memory_heads indicates the number of\n  write-heads.  A fraction of the read-heads read each write-head.\n  num_memory_heads must divide num_heads. This behavior has not yet been tested.\n\n  no query flag is set to true when we do not want to create parameters\n  for query params (for synthesizer model).\n\n  Args:\n    context: a transformer.Context\n    kv_dim: a dimension (for key and value channels)\n    num_heads: an integer\n    num_memory_heads: an optional integer\n    shared_kv: a boolean\n    no_query: a boolean\n    combine_dims: a boolean\n    keep_query_heads_dims: a boolean\n    fold_scaling_into_initializer: a boolean\n  Returns:\n    an attention.AttentionParams object\n  \"\"\"", "\n", "if", "num_heads", "==", "1", ":", "\n", "    ", "query_heads_dims", "=", "None", "\n", "memory_heads_dims", "=", "None", "\n", "", "elif", "num_memory_heads", "==", "0", ":", "\n", "    ", "query_heads_dims", "=", "[", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_heads", ")", "]", "\n", "memory_heads_dims", "=", "query_heads_dims", "\n", "", "elif", "num_memory_heads", "==", "1", ":", "\n", "    ", "query_heads_dims", "=", "[", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_heads", ")", "]", "\n", "memory_heads_dims", "=", "None", "\n", "", "else", ":", "\n", "    ", "if", "num_heads", "%", "num_memory_heads", "!=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\"num_memory_heads must divide num_heads\"", ")", "\n", "", "memory_heads_dims", "=", "[", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_memory_heads", ")", "]", "\n", "query_heads_dims", "=", "memory_heads_dims", "+", "[", "\n", "mtf", ".", "Dimension", "(", "\"query_heads\"", ",", "num_heads", "//", "num_memory_heads", ")", "]", "\n", "", "return", "attention", ".", "AttentionParams", "(", "\n", "context", ".", "mesh", ",", "\n", "query_input_dim", "=", "context", ".", "model", ".", "model_dim", ",", "\n", "memory_input_dim", "=", "context", ".", "model", ".", "model_dim", ",", "\n", "output_dim", "=", "context", ".", "model", ".", "model_dim", ",", "\n", "key_dim", "=", "kv_dim", ",", "\n", "value_dim", "=", "kv_dim", ",", "\n", "query_heads_dims", "=", "query_heads_dims", ",", "\n", "memory_heads_dims", "=", "memory_heads_dims", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "shared_kv", "=", "shared_kv", ",", "\n", "no_query", "=", "no_query", ",", "\n", "ensemble_dim", "=", "context", ".", "model", ".", "ensemble_dim", ",", "\n", "combine_dims", "=", "combine_dims", ",", "\n", "keep_query_heads_dims", "=", "keep_query_heads_dims", ",", "\n", "fold_scaling_into_initializer", "=", "fold_scaling_into_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.relative_position_spans": [[730, 795], ["mesh_tensorflow.range", "transformer_layers.relative_position_spans.sentinel_mask"], "function", ["None"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "relative_position_spans", "(", "context", ",", "num_sentinels", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "  ", "\"\"\"Compute relative positions between inputs and targets.\n\n  Used by enc_dec_attention_bias.\n\n  Assumes that inputs and targets were generated by a span-filling objective:\n  The inputs consist of the original text with some spans removed and replaced\n  by single sentinels.\n  The targets consist of the dropped spans, each preceded by a single sentinel.\n  Sentinels are the last tokens in the vocabulary.\n\n  e.g.\n  inputs:  A B C <S> F G H <S>\n  shifted-targets: <BOS> <S> D E <S> I J K\n\n  Relative positions are computed by identifying a target token with the\n  corresponding sentinel in the input and returning the distance between these\n  two tokens in the input.\n\n  Target tokens which precede all sentinels get identified with the beginning of\n  the input.  So if we apply this to a problem with no sentinels, all target\n  tokens will be indentified with the beginning of the input.  We assume this is\n  the case during incremental decoding, so this code will not work properly to\n  incrementally decode a problem with sentinels.  This may not be an issue,\n  since the span-filling objective is primarily used for unsupervised\n  pre-training.\n\n  Args:\n    context: a Context\n    num_sentinels: an integer.  Should have the same value as\n       SentencePieceVocabulary.extra_ids\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "decoder_id", "=", "context", ".", "inputs", "\n", "encoder_id", "=", "context", ".", "encoder_inputs", "\n", "decoder_length", "=", "context", ".", "length_dim", "\n", "encoder_length", "=", "context", ".", "encoder_length_dim", "\n", "mesh", "=", "encoder_id", ".", "mesh", "\n", "encoder_pos", "=", "mtf", ".", "range", "(", "mesh", ",", "encoder_length", ",", "tf", ".", "int32", ")", "\n", "if", "decoder_length", "not", "in", "decoder_id", ".", "shape", ".", "dims", ":", "\n", "# we are doing incremental decoding.", "\n", "# Map the target token to the beginning of the input.", "\n", "    ", "dec_to_enc_pos", "=", "0", "\n", "", "else", ":", "\n", "    ", "vocab_size", "=", "context", ".", "model", ".", "input_vocab_size_unpadded", "\n", "def", "sentinel_mask", "(", "t", ")", ":", "\n", "      ", "return", "mtf", ".", "cast", "(", "mtf", ".", "greater_equal", "(", "\n", "t", ",", "vocab_size", "-", "num_sentinels", ")", ",", "tf", ".", "int32", ")", "\n", "", "decoder_is_sentinel", "=", "sentinel_mask", "(", "decoder_id", ")", "\n", "encoder_is_sentinel", "=", "sentinel_mask", "(", "encoder_id", ")", "\n", "encoder_segment_id", "=", "mtf", ".", "cumsum", "(", "encoder_is_sentinel", ",", "encoder_length", ")", "\n", "decoder_segment_id", "=", "mtf", ".", "cumsum", "(", "decoder_is_sentinel", ",", "decoder_length", ")", "\n", "encoder_sequence_id", "=", "context", ".", "encoder_sequence_id", "\n", "decoder_sequence_id", "=", "context", ".", "sequence_id", "\n", "if", "encoder_sequence_id", "is", "not", "None", ":", "\n", "# distinguish segments from different sequences", "\n", "      ", "multiplier", "=", "max", "(", "encoder_length", ".", "size", ",", "decoder_length", ".", "size", ")", "\n", "encoder_segment_id", "+=", "encoder_sequence_id", "*", "multiplier", "\n", "decoder_segment_id", "+=", "decoder_sequence_id", "*", "multiplier", "\n", "", "dec_to_enc_pos", "=", "mtf", ".", "reduce_sum", "(", "\n", "mtf", ".", "cast", "(", "mtf", ".", "less", "(", "encoder_segment_id", ",", "decoder_segment_id", ")", ",", "tf", ".", "int32", ")", ",", "\n", "reduced_dim", "=", "encoder_length", ")", "\n", "", "return", "dec_to_enc_pos", "-", "encoder_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.enc_dec_attention_bias": [[797, 844], ["mesh_tensorflow.equal", "biases.append", "mesh_tensorflow.Dimension", "relative_position_fn", "transformer_layers._relative_position_bucket", "biases.append", "mesh_tensorflow.add_n", "mesh_tensorflow.transformer.attention.visibility_mask_to_attention_bias", "mesh_tensorflow.get_variable", "mesh_tensorflow.gather", "ValueError", "tuple"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert._relative_position_bucket", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.visibility_mask_to_attention_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather"], ["", "@", "gin", ".", "configurable", "\n", "def", "enc_dec_attention_bias", "(", "layer", ",", "\n", "context", ",", "\n", "heads_dims", ",", "\n", "relative_position_fn", "=", "relative_position_spans", ")", ":", "\n", "  ", "\"\"\"Compute bias term for encoder-decoder attention.\n\n  Args:\n    layer: a TransformerLayer\n    context: a Context\n    heads_dims: a list of Dimension\n    relative_position_fn: an optional function\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "biases", "=", "[", "]", "\n", "if", "context", ".", "encoder_sequence_id", "and", "context", ".", "sequence_id", ":", "\n", "    ", "visible", "=", "mtf", ".", "equal", "(", "context", ".", "sequence_id", ",", "context", ".", "encoder_sequence_id", ")", "\n", "biases", ".", "append", "(", "attention", ".", "visibility_mask_to_attention_bias", "(", "\n", "visible", ",", "context", ".", "activation_dtype", ")", ")", "\n", "", "if", "(", "layer", ".", "relative_attention_type", "==", "\"bias\"", "or", "\n", "layer", ".", "relative_attention_type", "==", "\"bias_shared\"", ")", ":", "\n", "    ", "buckets_dim", "=", "mtf", ".", "Dimension", "(", "\n", "\"buckets\"", ",", "layer", ".", "relative_attention_num_buckets", ")", "\n", "bias_shape", "=", "context", ".", "model", ".", "ensemble_dims", "+", "heads_dims", "+", "[", "buckets_dim", "]", "\n", "values", "=", "None", "\n", "cache", "=", "layer", ".", "relative_attention_type", "==", "\"bias_shared\"", "\n", "if", "cache", ":", "\n", "      ", "cache_key", "=", "(", "\"enc_dec_relative_attention_bias\"", ",", "tuple", "(", "heads_dims", ")", ")", "\n", "if", "cache_key", "in", "context", ".", "cache", ":", "\n", "        ", "values", "=", "context", ".", "cache", "[", "cache_key", "]", "\n", "", "", "if", "values", "is", "None", ":", "\n", "      ", "values", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\"enc_dec_relative_attention_bias\"", ",", "\n", "bias_shape", ",", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "", "if", "cache", ":", "\n", "      ", "context", ".", "cache", "[", "cache_key", "]", "=", "values", "\n", "", "rel_pos", "=", "relative_position_fn", "(", "context", ")", "\n", "rp_bucket", "=", "_relative_position_bucket", "(", "\n", "rel_pos", ",", "\n", "bidirectional", "=", "True", ",", "\n", "num_buckets", "=", "buckets_dim", ".", "size", ")", "\n", "biases", ".", "append", "(", "mtf", ".", "gather", "(", "values", ",", "rp_bucket", ",", "buckets_dim", ")", ")", "\n", "", "elif", "layer", ".", "relative_attention_type", "is", "not", "None", ":", "\n", "    ", "raise", "ValueError", "(", "\"unrecognized relative_attention_type \\\"%s\\\"\"", "%", "\n", "layer", ".", "relative_attention_type", ")", "\n", "", "return", "mtf", ".", "add_n", "(", "biases", ")", "if", "biases", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.enc_dec_attention": [[846, 886], ["transformer_layers..make_params", "transformer_layers..compute_q", "transformer_layers.enc_dec_attention_bias", "attention_fn", "transformer_layers..expected_attention_output_shape", "transformer_layers..compute_output", "transformer_layers..layer_output_from_attention_output", "NotImplementedError", "context.get_constant_state", "transformer_layers..compute_kv", "transformer_layers..compute_k", "transformer_layers..compute_v", "context.record_constant_state", "transformer_layers..attention_kwargs_from_context"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.SelfAttentionFixup.make_params", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_q", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.enc_dec_attention_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.EncDecAttention.attention_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.expected_attention_output_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.compute_output", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.BranchedSelfAttention.layer_output_from_attention_output", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_constant_state", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_kv", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_k", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_v", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_constant_state", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.attention_kwargs_from_context"], ["", "@", "gin", ".", "configurable", "\n", "def", "enc_dec_attention", "(", "self_attention_layer", ",", "memory_antecedent", ",", "context", ",", "x", ",", "\n", "losses", ",", "attention_fn", "=", "attention", ".", "attention", ",", "\n", "z_loss_coeff", "=", "None", ")", ":", "\n", "  ", "\"\"\"Multi-head attention over the encoder outputs.\"\"\"", "\n", "memory_input_dim", "=", "memory_antecedent", ".", "shape", "[", "-", "1", "]", "\n", "if", "memory_input_dim", "!=", "context", ".", "model", ".", "model_dim", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\n", "\"TODO(noam): support different model_dim in encoder and decoder.\"", ")", "\n", "", "params", "=", "self_attention_layer", ".", "make_params", "(", "context", ")", "\n", "q", "=", "params", ".", "compute_q", "(", "x", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "    ", "k", ",", "v", ",", "memory_length", "=", "context", ".", "get_constant_state", "(", ")", "\n", "", "else", ":", "\n", "    ", "m", "=", "memory_antecedent", "\n", "if", "self_attention_layer", ".", "shared_kv", ":", "\n", "      ", "kv", "=", "params", ".", "compute_kv", "(", "m", ")", "\n", "k", "=", "kv", "\n", "v", "=", "kv", "\n", "", "else", ":", "\n", "      ", "k", "=", "params", ".", "compute_k", "(", "m", ")", "\n", "v", "=", "params", ".", "compute_v", "(", "m", ")", "\n", "", "memory_length", ",", "=", "[", "d", "for", "d", "in", "m", ".", "shape", ".", "dims", "if", "d", ".", "name", "==", "\"memory_length\"", "]", "\n", "if", "context", ".", "mode", "==", "\"first_part\"", ":", "\n", "      ", "context", ".", "record_constant_state", "(", "(", "k", ",", "v", ",", "memory_length", ")", ")", "\n", "", "", "bias", "=", "enc_dec_attention_bias", "(", "self_attention_layer", ",", "\n", "context", ",", "\n", "params", ".", "query_heads_dims", ")", "\n", "a", "=", "attention_fn", "(", "\n", "q", ",", "k", ",", "v", ",", "memory_length", ",", "self_attention_layer", ".", "kv_dim", ",", "\n", "self_attention_layer", ".", "kv_dim", ",", "bias", ",", "\n", "context", "=", "context", ",", "\n", "z_loss_coeff", "=", "z_loss_coeff", ",", "\n", "**", "self_attention_layer", ".", "attention_kwargs_from_context", "(", "context", ")", ")", "\n", "attention_output_shape", "=", "self_attention_layer", ".", "expected_attention_output_shape", "(", "\n", "x", ",", "params", ")", "\n", "attention_output", "=", "params", ".", "compute_output", "(", "\n", "a", ",", "output_shape", "=", "attention_output_shape", ")", "\n", "return", "self_attention_layer", ".", "layer_output_from_attention_output", "(", "\n", "context", ",", "attention_output", ",", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers._relative_position_bucket": [[1128, 1171], ["mesh_tensorflow.less", "mesh_tensorflow.minimum", "mesh_tensorflow.where", "mesh_tensorflow.abs", "mesh_tensorflow.maximum", "mesh_tensorflow.to_int32", "mesh_tensorflow.to_int32", "mesh_tensorflow.less", "mesh_tensorflow.log", "math.log", "mesh_tensorflow.to_float"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float"], ["", "", "def", "_relative_position_bucket", "(", "relative_position", ",", "\n", "bidirectional", "=", "True", ",", "\n", "num_buckets", "=", "32", ",", "\n", "max_distance", "=", "128", ")", ":", "\n", "  ", "\"\"\"Translate relative position to a bucket number for relative attention.\n\n  The relative position is defined as memory_position - query_position, i.e.\n  the distance in tokens from the attending position to the attended-to\n  position.  If bidirectional=False, then positive relative positions are\n  invalid.\n\n  We use smaller buckets for small absolute relative_position and larger buckets\n  for larger absolute relative_positions.  All relative positions >=max_distance\n  map to the same bucket.  All relative positions <=-max_distance map to the\n  same bucket.  This should allow for more graceful generalization to longer\n  sequences than the model has been trained on.\n\n  Args:\n    relative_position: an int32 Tensor\n    bidirectional: a boolean - whether the attention is bidirectional\n    num_buckets: an integer\n    max_distance: an integer\n  Returns:\n    a Tensor with the same shape as relative_position, containing int32\n      values in the range [0, num_buckets)\n  \"\"\"", "\n", "ret", "=", "0", "\n", "n", "=", "-", "relative_position", "\n", "if", "bidirectional", ":", "\n", "    ", "num_buckets", "//=", "2", "\n", "ret", "+=", "mtf", ".", "to_int32", "(", "mtf", ".", "less", "(", "n", ",", "0", ")", ")", "*", "num_buckets", "\n", "n", "=", "mtf", ".", "abs", "(", "n", ")", "\n", "", "else", ":", "\n", "    ", "n", "=", "mtf", ".", "maximum", "(", "n", ",", "0", ")", "\n", "# now n is in the range [0, inf)", "\n", "", "max_exact", "=", "num_buckets", "//", "2", "\n", "is_small", "=", "mtf", ".", "less", "(", "n", ",", "max_exact", ")", "\n", "val_if_large", "=", "max_exact", "+", "mtf", ".", "to_int32", "(", "\n", "mtf", ".", "log", "(", "mtf", ".", "to_float", "(", "n", ")", "/", "max_exact", ")", "\n", "/", "math", ".", "log", "(", "max_distance", "/", "max_exact", ")", "*", "(", "num_buckets", "-", "max_exact", ")", ")", "\n", "val_if_large", "=", "mtf", ".", "minimum", "(", "val_if_large", ",", "num_buckets", "-", "1", ")", "\n", "ret", "+=", "mtf", ".", "where", "(", "is_small", ",", "n", ",", "val_if_large", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer.GatedLinearUnitLayer.call": [[36, 46], ["mesh_tensorflow.layers.dense_product"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense_product"], ["def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "return", "mtf", ".", "layers", ".", "dense_product", "(", "\n", "x", ",", "\n", "reduced_dims", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "new_dims", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "activation_functions", "=", "[", "\"linear\"", ",", "\"sigmoid\"", "]", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"glu\"", ",", "\n", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer.EncoderConvolutionalLayer.__init__": [[59, 83], ["mesh_tensorflow.transformer.transformer_layers.Conv1DLayer", "mesh_tensorflow.transformer.transformer_layers.SeparableConv1DLayer", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "d_model", ",", "\n", "dropout_rate", ",", "\n", "initializer_scale", "=", "1.0", ",", "\n", "norm_epsilon", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Create an EncoderConvolutionalLayer.\n\n    Args:\n      d_model: a positive integer, the dimension of the model dim.\n      dropout_rate: a float between 0 and 1.\n      initializer_scale: a positive float, the scale for the initializers of the\n        separable convolutional filters.\n      norm_epsilon: a small positive float, the epsilon for the layer norm.\n    \"\"\"", "\n", "self", ".", "_dropout_rate", "=", "dropout_rate", "\n", "self", ".", "_norm_epsilon", "=", "norm_epsilon", "\n", "self", ".", "_conv3x1", "=", "transformer_layers", ".", "Conv1DLayer", "(", "\n", "filter_size", "=", "3", ",", "output_size", "=", "int", "(", "d_model", "/", "2", ")", ",", "activation", "=", "\"relu\"", ")", "\n", "self", ".", "_sep_conv9x1", "=", "transformer_layers", ".", "SeparableConv1DLayer", "(", "\n", "min_relative_pos", "=", "-", "4", ",", "\n", "max_relative_pos", "=", "4", ",", "\n", "output_size", "=", "int", "(", "d_model", "/", "2", ")", ",", "\n", "depthwise_filter_initializer_scale", "=", "initializer_scale", ",", "\n", "pointwise_filter_initializer_scale", "=", "initializer_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer.EncoderConvolutionalLayer.call": [[84, 116], ["mesh_tensorflow.layers.layer_norm", "tensorflow.variable_scope", "mesh_tensorflow.Dimension", "mesh_tensorflow.layers.dense", "evolved_transformer._dropout", "tensorflow.variable_scope", "evolved_transformer.EncoderConvolutionalLayer._conv3x1.call", "evolved_transformer._dropout", "evolved_transformer._pad_channels_dim", "tensorflow.variable_scope", "evolved_transformer.EncoderConvolutionalLayer._sep_conv9x1.call", "evolved_transformer._dropout", "evolved_transformer._pad_channels_dim"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.layer_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer._pad_channels_dim", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer._pad_channels_dim"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "model_dim", "=", "context", ".", "model", ".", "model_dim", "\n", "\n", "# Note that the left output dim can also be thought of the hidden dimension", "\n", "# in the feedforward network.", "\n", "with", "tf", ".", "variable_scope", "(", "\"conv1x1\"", ")", ":", "\n", "      ", "hidden_dim", "=", "mtf", ".", "Dimension", "(", "model_dim", ".", "name", ",", "4", "*", "model_dim", ".", "size", ")", "\n", "left_state", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "\n", "reduced_dims", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "new_dims", "=", "[", "hidden_dim", "]", ",", "\n", "activation", "=", "mtf", ".", "relu", ",", "\n", "use_bias", "=", "False", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ")", "\n", "left_state", "=", "_dropout", "(", "left_state", ",", "context", ",", "self", ".", "_dropout_rate", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"conv3x1\"", ")", ":", "\n", "      ", "right_state", "=", "self", ".", "_conv3x1", ".", "call", "(", "context", ",", "x", ",", "losses", ")", "\n", "right_state", "=", "_dropout", "(", "right_state", ",", "context", ",", "self", ".", "_dropout_rate", ")", "\n", "right_state", "=", "_pad_channels_dim", "(", "right_state", ",", "hidden_dim", ".", "size", ")", "\n", "\n", "", "hidden_state", "=", "left_state", "+", "right_state", "\n", "hidden_state", "=", "mtf", ".", "layers", ".", "layer_norm", "(", "\n", "hidden_state", ",", "\n", "epsilon", "=", "self", ".", "_norm_epsilon", ",", "\n", "dim", "=", "hidden_state", ".", "shape", ".", "dims", "[", "-", "1", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"sep_conv9x1\"", ")", ":", "\n", "      ", "output", "=", "self", ".", "_sep_conv9x1", ".", "call", "(", "context", ",", "hidden_state", ",", "losses", ")", "\n", "output", "=", "_dropout", "(", "output", ",", "context", ",", "self", ".", "_dropout_rate", ")", "\n", "return", "_pad_channels_dim", "(", "output", ",", "model_dim", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer.DecoderAttentionLayer.__init__": [[126, 137], ["mesh_tensorflow.transformer.transformer_layers.SelfAttention", "mesh_tensorflow.transformer.transformer_layers.EncDecAttention"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_num_heads", ")", ":", "\n", "    ", "\"\"\"Create an DecoderAttentionLayer.\n\n    Args:\n      base_num_heads: a positive integer, the base number of heads the attention\n        layers are using.\n    \"\"\"", "\n", "self", ".", "_self_attention", "=", "transformer_layers", ".", "SelfAttention", "(", "num_heads", "=", "2", "*", "\n", "base_num_heads", ")", "\n", "self", ".", "_enc_dec_attention", "=", "transformer_layers", ".", "EncDecAttention", "(", "\n", "num_heads", "=", "base_num_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer.DecoderAttentionLayer.call": [[138, 145], ["tensorflow.variable_scope", "evolved_transformer.DecoderAttentionLayer._self_attention.call", "tensorflow.variable_scope", "evolved_transformer.DecoderAttentionLayer._enc_dec_attention.call"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"self_attention\"", ")", ":", "\n", "      ", "left_state", "=", "self", ".", "_self_attention", ".", "call", "(", "context", ",", "x", ",", "losses", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"enc_dec_attention\"", ")", ":", "\n", "      ", "right_state", "=", "self", ".", "_enc_dec_attention", ".", "call", "(", "context", ",", "x", ",", "losses", ")", "\n", "", "return", "left_state", "+", "right_state", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer.DecoderConvolutionalLayer.__init__": [[158, 194], ["mesh_tensorflow.transformer.transformer_layers.SeparableConv1DLayer", "mesh_tensorflow.transformer.transformer_layers.SeparableConv1DLayer", "mesh_tensorflow.transformer.transformer_layers.SeparableConv1DLayer", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "d_model", ",", "\n", "dropout_rate", ",", "\n", "initializer_scale", "=", "1.0", ",", "\n", "norm_epsilon", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Create an DecoderConvolutionalLayer.\n\n    Args:\n      d_model: a positive integer, the dimension of the model dim.\n      dropout_rate: a float between 0 and 1.\n      initializer_scale: a positive float, the scale for the initializers of the\n        separable convolutional filters.\n      norm_epsilon: a small positive float, the epsilon for the layer norm.\n    \"\"\"", "\n", "self", ".", "_d_model", "=", "d_model", "\n", "self", ".", "_dropout_rate", "=", "dropout_rate", "\n", "self", ".", "_norm_epsilon", "=", "norm_epsilon", "\n", "self", ".", "_sep_conv11x1", "=", "transformer_layers", ".", "SeparableConv1DLayer", "(", "\n", "min_relative_pos", "=", "-", "10", ",", "\n", "max_relative_pos", "=", "0", ",", "\n", "output_size", "=", "int", "(", "2", "*", "d_model", ")", ",", "\n", "depthwise_filter_initializer_scale", "=", "initializer_scale", ",", "\n", "pointwise_filter_initializer_scale", "=", "initializer_scale", ",", "\n", "activation", "=", "\"relu\"", ")", "\n", "self", ".", "_sep_conv7x1_1", "=", "transformer_layers", ".", "SeparableConv1DLayer", "(", "\n", "min_relative_pos", "=", "-", "6", ",", "\n", "max_relative_pos", "=", "0", ",", "\n", "output_size", "=", "int", "(", "d_model", "/", "2", ")", ",", "\n", "depthwise_filter_initializer_scale", "=", "initializer_scale", ",", "\n", "pointwise_filter_initializer_scale", "=", "initializer_scale", ")", "\n", "self", ".", "_sep_conv7x1_2", "=", "transformer_layers", ".", "SeparableConv1DLayer", "(", "\n", "min_relative_pos", "=", "-", "6", ",", "\n", "max_relative_pos", "=", "0", ",", "\n", "output_size", "=", "d_model", ",", "\n", "depthwise_filter_initializer_scale", "=", "initializer_scale", ",", "\n", "pointwise_filter_initializer_scale", "=", "initializer_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer.DecoderConvolutionalLayer.call": [[195, 216], ["mesh_tensorflow.layers.layer_norm", "tensorflow.variable_scope", "evolved_transformer.DecoderConvolutionalLayer._sep_conv11x1.call", "evolved_transformer._dropout", "tensorflow.variable_scope", "evolved_transformer.DecoderConvolutionalLayer._sep_conv7x1_1.call", "evolved_transformer._dropout", "evolved_transformer._pad_channels_dim", "tensorflow.variable_scope", "evolved_transformer.DecoderConvolutionalLayer._sep_conv7x1_2.call", "evolved_transformer._dropout"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.layer_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer._pad_channels_dim", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"sep_conv11x1\"", ")", ":", "\n", "      ", "left_state", "=", "self", ".", "_sep_conv11x1", ".", "call", "(", "context", ",", "x", ",", "losses", ")", "\n", "left_state", "=", "_dropout", "(", "left_state", ",", "context", ",", "self", ".", "_dropout_rate", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"sep_conv7x1_1\"", ")", ":", "\n", "      ", "right_state", "=", "self", ".", "_sep_conv7x1_1", ".", "call", "(", "context", ",", "x", ",", "losses", ")", "\n", "right_state", "=", "_dropout", "(", "right_state", ",", "context", ",", "self", ".", "_dropout_rate", ")", "\n", "right_state", "=", "_pad_channels_dim", "(", "right_state", ",", "\n", "left_state", ".", "shape", ".", "dims", "[", "-", "1", "]", ".", "size", ")", "\n", "\n", "", "hidden_state", "=", "left_state", "+", "right_state", "\n", "hidden_state", "=", "mtf", ".", "layers", ".", "layer_norm", "(", "\n", "hidden_state", ",", "\n", "epsilon", "=", "self", ".", "_norm_epsilon", ",", "\n", "dim", "=", "hidden_state", ".", "shape", ".", "dims", "[", "-", "1", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"sep_conv7x1_2\"", ")", ":", "\n", "      ", "output", "=", "self", ".", "_sep_conv7x1_2", ".", "call", "(", "context", ",", "hidden_state", ",", "losses", ")", "\n", "return", "_dropout", "(", "output", ",", "context", ",", "self", ".", "_dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer._pad_channels_dim": [[218, 227], ["ValueError", "mesh_tensorflow.pad"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad"], ["", "", "", "def", "_pad_channels_dim", "(", "tensor", ",", "size", ")", ":", "\n", "  ", "channels_dim", "=", "tensor", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "if", "channels_dim", ".", "size", ">", "size", ":", "\n", "    ", "raise", "ValueError", "(", "\"Cannot pad to size of {} when the original size \"", "\n", "\"of {} is bigger\"", ".", "format", "(", "size", ",", "channels_dim", ".", "size", ")", ")", "\n", "", "elif", "channels_dim", ".", "size", "==", "size", ":", "\n", "    ", "return", "tensor", "\n", "", "else", ":", "\n", "    ", "return", "mtf", ".", "pad", "(", "tensor", ",", "[", "0", ",", "size", "-", "channels_dim", ".", "size", "]", ",", "channels_dim", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.evolved_transformer._dropout": [[229, 237], ["mesh_tensorflow.dropout", "mesh_tensorflow.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout"], ["", "", "def", "_dropout", "(", "x", ",", "context", ",", "dropout_rate", ")", ":", "\n", "  ", "if", "context", ".", "train", "and", "dropout_rate", ">", "0", ":", "\n", "    ", "return", "mtf", ".", "dropout", "(", "\n", "x", ",", "context", ".", "train", ",", "\n", "rate", "=", "dropout_rate", ",", "\n", "noise_shape", "=", "mtf", ".", "Shape", "(", "context", ".", "batch_dims", "+", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "    ", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.main.main": [[74, 96], ["tensorflow.io.gfile.makedirs", "os.path.join", "tensorflow.io.gfile.exists", "mesh_tensorflow.transformer.utils.parse_gin_defaults_and_flags", "mesh_tensorflow.transformer.utils.run", "os.path.join", "tensorflow.io.gfile.GFile", "f.write", "importlib.import_module"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.parse_gin_defaults_and_flags", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run"], ["def", "main", "(", "_", ")", ":", "\n", "  ", "if", "FLAGS", ".", "module_import", ":", "\n", "    ", "for", "module", "in", "FLAGS", ".", "module_import", ":", "\n", "      ", "importlib", ".", "import_module", "(", "module", ")", "\n", "\n", "", "", "tf", ".", "io", ".", "gfile", ".", "makedirs", "(", "FLAGS", ".", "model_dir", ")", "\n", "suffix", "=", "0", "\n", "command_filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "model_dir", ",", "\"command\"", ")", "\n", "while", "tf", ".", "io", ".", "gfile", ".", "exists", "(", "command_filename", ")", ":", "\n", "    ", "suffix", "+=", "1", "\n", "command_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "FLAGS", ".", "model_dir", ",", "\"command.{}\"", ".", "format", "(", "suffix", ")", ")", "\n", "", "with", "tf", ".", "io", ".", "gfile", ".", "GFile", "(", "command_filename", ",", "\"w\"", ")", "as", "f", ":", "\n", "    ", "f", ".", "write", "(", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "\n", "", "utils", ".", "parse_gin_defaults_and_flags", "(", ")", "\n", "utils", ".", "run", "(", "\n", "tpu_job_name", "=", "FLAGS", ".", "tpu_job_name", ",", "\n", "tpu", "=", "FLAGS", ".", "tpu", ",", "\n", "gcp_project", "=", "FLAGS", ".", "gcp_project", ",", "\n", "tpu_zone", "=", "FLAGS", ".", "tpu_zone", ",", "\n", "model_dir", "=", "FLAGS", ".", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.MoE1D.__init__": [[40, 100], ["moe.HParams"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "num_experts", "=", "16", ",", "\n", "loss_coef", "=", "1e-2", ",", "\n", "hidden_size", "=", "4096", ",", "\n", "group_size", "=", "1024", ",", "\n", "capacity_factor_train", "=", "1.25", ",", "\n", "capacity_factor_eval", "=", "2.0", ",", "\n", "use_second_place_loss", "=", "False", ",", "\n", "second_policy_train", "=", "\"random\"", ",", "\n", "second_policy_eval", "=", "\"random\"", ",", "\n", "second_threshold_train", "=", "0.2", ",", "\n", "second_threshold_eval", "=", "0.2", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", "moe_gating", "=", "\"top_2\"", ",", "\n", "min_expert_capacity", "=", "4", ",", "\n", "switch_policy_train", "=", "\"input_jitter\"", ",", "\n", "switch_policy_eval", "=", "\"input_jitter\"", ",", "\n", "switch_dropout", "=", "0.1", ",", "\n", "switch_temperature", "=", "1.0", ",", "\n", "switch_jitter", "=", "1e-2", ",", "\n", "ntlb_top_k", "=", "4", ",", "\n", "output_dim", "=", "None", ",", "\n", "use_experts_attention", "=", "False", ",", "\n", "z_loss", "=", "None", ",", "\n", "word_embed_mode", "=", "None", ",", "\n", "use_second_place_expert_prob", "=", "None", ",", "\n", "use_second_place_expert_prob_temp", "=", "None", ",", "\n", "top_n_num_experts_per_token", "=", "3", ")", ":", "\n", "    ", "self", ".", "_hparams", "=", "HParams", "(", "\n", "moe_gating", "=", "moe_gating", ",", "\n", "moe_num_experts", "=", "num_experts", ",", "\n", "moe_loss_coef", "=", "loss_coef", ",", "\n", "moe_hidden_size", "=", "hidden_size", ",", "\n", "moe_group_size", "=", "group_size", ",", "\n", "moe_min_expert_capacity", "=", "min_expert_capacity", ",", "\n", "moe_capacity_factor_train", "=", "capacity_factor_train", ",", "\n", "moe_capacity_factor_eval", "=", "capacity_factor_eval", ",", "\n", "moe_use_second_place_loss", "=", "use_second_place_loss", ",", "\n", "moe_second_policy_train", "=", "second_policy_train", ",", "\n", "moe_second_policy_eval", "=", "second_policy_eval", ",", "\n", "moe_second_threshold_train", "=", "second_threshold_train", ",", "\n", "moe_second_threshold_eval", "=", "second_threshold_eval", ",", "\n", "moe_dropout_rate", "=", "dropout_rate", ",", "\n", "moe_switch_policy_train", "=", "switch_policy_train", ",", "\n", "moe_switch_policy_eval", "=", "switch_policy_eval", ",", "\n", "moe_switch_dropout", "=", "switch_dropout", ",", "\n", "moe_switch_temperature", "=", "switch_temperature", ",", "\n", "moe_switch_jitter", "=", "switch_jitter", ",", "\n", "moe_output_dim", "=", "output_dim", ",", "\n", "moe_ntlb_top_k", "=", "ntlb_top_k", ",", "\n", "moe_use_experts_attention", "=", "use_experts_attention", ",", "\n", "moe_z_loss", "=", "z_loss", ",", "\n", "moe_word_embed_mode", "=", "word_embed_mode", ",", "\n", "moe_use_second_place_expert_prob", "=", "(", "\n", "use_second_place_expert_prob", ")", ",", "\n", "moe_use_second_place_expert_prob_temp", "=", "(", "\n", "use_second_place_expert_prob_temp", ")", ",", "\n", "moe_top_n_num_experts_per_token", "=", "top_n_num_experts_per_token", ")", "\n", "self", ".", "_activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.MoE1D.call": [[101, 140], ["moe.transformer_moe_layer_v1", "NotImplementedError", "mesh_tensorflow.Shape", "mesh_tensorflow.reshape", "context.losses.append", "mesh_tensorflow.reshape", "mesh_tensorflow.reshape", "mesh_tensorflow.Dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.heterogeneous_moe.transformer_moe_layer_v1", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "if", "context", ".", "model", ".", "ensemble_dim", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\"MoE not yet implemented with ensembles\"", ")", "\n", "\n", "", "has_length_dim", "=", "context", ".", "length_dim", "in", "x", ".", "shape", ".", "dims", "\n", "if", "not", "has_length_dim", ":", "\n", "      ", "x_shape", "=", "x", ".", "shape", "\n", "shape_with_length", "=", "mtf", ".", "Shape", "(", "\n", "x_shape", ".", "dims", "[", ":", "-", "1", "]", "+", "[", "mtf", ".", "Dimension", "(", "\"length\"", ",", "1", ")", "]", "\n", "+", "x_shape", ".", "dims", "[", "-", "1", ":", "]", ")", "\n", "x", "=", "mtf", ".", "reshape", "(", "x", ",", "shape_with_length", ")", "\n", "\n", "# Extract the MoE output dimension", "\n", "", "if", "self", ".", "_hparams", ".", "moe_output_dim", "is", "not", "None", ":", "\n", "      ", "output_dim", "=", "self", ".", "_hparams", ".", "moe_output_dim", "\n", "", "else", ":", "\n", "      ", "output_dim", "=", "context", ".", "model", ".", "model_dim", "\n", "", "y", ",", "loss", "=", "transformer_moe_layer_v1", "(", "\n", "x", ",", "\n", "output_dim", ",", "\n", "self", ".", "_hparams", ",", "\n", "context", ".", "train", ",", "\n", "context", ".", "variable_dtype", ",", "\n", "layout", "=", "context", ".", "model", ".", "layout", ",", "\n", "mesh_shape", "=", "context", ".", "model", ".", "mesh_shape", ",", "\n", "nonpadding", "=", "context", ".", "nonpadding", ",", "\n", "activation", "=", "self", ".", "_activation", ",", "\n", "num_microbatches", "=", "context", ".", "num_microbatches", ",", "\n", "token_embeddings", "=", "context", ".", "input_embeddings", ")", "\n", "if", "context", ".", "losses", "is", "not", "None", ":", "\n", "      ", "context", ".", "losses", ".", "append", "(", "loss", ")", "\n", "", "if", "not", "has_length_dim", ":", "\n", "      ", "if", "self", ".", "_hparams", ".", "moe_use_experts_attention", ":", "\n", "        ", "y_reshape", "=", "[", "mtf", ".", "reshape", "(", "y_out", ",", "x_shape", ")", "for", "y_out", "in", "y", "]", "\n", "y", "=", "y_reshape", "\n", "", "else", ":", "\n", "        ", "y", "=", "mtf", ".", "reshape", "(", "y", ",", "x_shape", ")", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.MoE2D.__init__": [[145, 173], ["moe.HParams"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "expert_x", "=", "8", ",", "\n", "expert_y", "=", "8", ",", "\n", "loss_coef", "=", "1e-2", ",", "\n", "hidden_size", "=", "4096", ",", "\n", "group_size", "=", "1024", ",", "\n", "capacity_factor_train", "=", "1.25", ",", "\n", "capacity_factor_eval", "=", "2.0", ",", "\n", "capacity_factor_second_level", "=", "1.0", ",", "\n", "use_second_place_loss", "=", "False", ",", "\n", "second_policy_train", "=", "\"random\"", ",", "\n", "second_policy_eval", "=", "\"random\"", ",", "\n", "second_threshold_train", "=", "0.2", ",", "\n", "second_threshold_eval", "=", "0.2", ")", ":", "\n", "    ", "self", ".", "_hparams", "=", "HParams", "(", "\n", "moe_gating", "=", "\"top_2\"", ",", "\n", "moe_num_experts", "=", "[", "expert_x", ",", "expert_y", "]", ",", "\n", "moe_loss_coef", "=", "loss_coef", ",", "\n", "moe_hidden_size", "=", "hidden_size", ",", "\n", "moe_group_size", "=", "group_size", ",", "\n", "moe_capacity_factor_train", "=", "capacity_factor_train", ",", "\n", "moe_capacity_factor_eval", "=", "capacity_factor_eval", ",", "\n", "moe_capacity_factor_second_level", "=", "capacity_factor_second_level", ",", "\n", "moe_use_second_place_loss", "=", "use_second_place_loss", ",", "\n", "moe_second_policy_train", "=", "second_policy_train", ",", "\n", "moe_second_policy_eval", "=", "second_policy_eval", ",", "\n", "moe_second_threshold_train", "=", "second_threshold_train", ",", "\n", "moe_second_threshold_eval", "=", "second_threshold_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.MoE2D.call": [[174, 200], ["moe.transformer_moe_layer_v2", "NotImplementedError", "mesh_tensorflow.Shape", "mesh_tensorflow.reshape", "context.losses.append", "mesh_tensorflow.reshape", "mesh_tensorflow.Dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.transformer_moe_layer_v2", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "if", "context", ".", "model", ".", "ensemble_dim", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\"MoE not yet implemented with ensembles\"", ")", "\n", "", "has_length_dim", "=", "context", ".", "length_dim", "in", "x", ".", "shape", ".", "dims", "\n", "if", "not", "has_length_dim", ":", "\n", "      ", "x_shape", "=", "x", ".", "shape", "\n", "shape_with_length", "=", "mtf", ".", "Shape", "(", "\n", "x_shape", ".", "dims", "[", ":", "-", "1", "]", "+", "[", "mtf", ".", "Dimension", "(", "\"length\"", ",", "1", ")", "]", "\n", "+", "x_shape", ".", "dims", "[", "-", "1", ":", "]", ")", "\n", "x", "=", "mtf", ".", "reshape", "(", "x", ",", "shape_with_length", ")", "\n", "", "y", ",", "loss", "=", "transformer_moe_layer_v2", "(", "\n", "x", ",", "\n", "context", ".", "model", ".", "model_dim", ",", "\n", "self", ".", "_hparams", ",", "\n", "context", ".", "train", ",", "\n", "context", ".", "variable_dtype", ",", "\n", "layout", "=", "context", ".", "model", ".", "layout", ",", "\n", "mesh_shape", "=", "context", ".", "model", ".", "mesh_shape", ",", "\n", "nonpadding", "=", "context", ".", "nonpadding", ",", "\n", "num_microbatches", "=", "context", ".", "num_microbatches", ")", "\n", "if", "context", ".", "losses", "is", "not", "None", ":", "\n", "      ", "context", ".", "losses", ".", "append", "(", "loss", ")", "\n", "", "if", "not", "has_length_dim", ":", "\n", "      ", "y", "=", "mtf", ".", "reshape", "(", "y", ",", "x_shape", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.__init__": [[2054, 2057], ["kwargs.items", "setattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam": [[2058, 2060], ["setattr"], "methods", ["None"], ["", "", "def", "add_hparam", "(", "self", ",", "k", ",", "v", ")", ":", "\n", "    ", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.transformer_moe_layer_v1": [[202, 566], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.tensor_dim_to_mesh_dim_size", "moe._split_into_groups", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.reshape", "min", "max", "tensorflow.logging.info", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.einsum", "mesh_tensorflow.Dimension", "mesh_tensorflow.reshape", "mesh_tensorflow.reshape", "mesh_tensorflow.layers.dense_product", "mesh_tensorflow.cast", "int", "mesh_tensorflow.reshape", "moe._top_2_gating", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.dropout", "mesh_tensorflow.layers.dense", "mesh_tensorflow.Dimension", "mesh_tensorflow.reshape", "mesh_tensorflow.reshape", "mesh_tensorflow.einsum", "mesh_tensorflow.reshape", "moe.transformer_moe_layer_v1._compute_output"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tensor_dim_to_mesh_dim_size", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._split_into_groups", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._top_2_gating", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "", "def", "transformer_moe_layer_v1", "(", "\n", "inputs", ",", "output_dim", ",", "hparams", ",", "train", ",", "variable_dtype", ",", "\n", "layout", "=", "None", ",", "mesh_shape", "=", "None", ",", "nonpadding", "=", "None", ",", "activation", "=", "mtf", ".", "relu", ",", "\n", "num_microbatches", "=", "None", ",", "token_embeddings", "=", "None", ")", ":", "\n", "  ", "\"\"\"Local mixture of experts that works well on TPU.\n\n  Adapted from the paper https://arxiv.org/abs/1701.06538\n\n  Note: until the algorithm and inferface solidify, we pass in a hyperparameters\n  dictionary in order not to complicate the interface in mtf_transformer.py .\n  Once this code moves out of \"research\", we should pass the hyperparameters\n  separately.\n\n  Hyperparameters used:\n    hparams.moe_num_experts: number of experts\n    hparams.moe_hidden_size: size of hidden layer in each expert\n    hparams.moe_group_size: size of each \"group\" for gating purposes\n    hparams.moe_capacity_factor_train: a float\n    hparams.moe_capacity_factor_eval: a float\n    hparams.moe_gating: a string\n    + all hyperparmeters used by _top_2_gating()\n\n  The number of parameters in the gating network is:\n    (input_dim.size * hparams.num_experts) +\n\n  The number of parameters in the experts themselves is:\n    (hparams.num_experts\n     * (input_dim.size + output_dim.size)\n     * hparams.moe_hidden_size)\n\n  The input is n-dimensional: [<batch_and_length_dims>, input_dim], consisting\n  of the representations of all positions in a batch of sequences.\n\n  Each position of each sequence is sent to 0-2 experts.  The expert\n  choices and the combination weights are determined by a learned gating\n  function.\n\n  This function returns a small auxiliary loss that should be added to the\n  training loss of the model.  This loss helps to balance expert usage.\n  Without the loss, it is very likely that a few experts will be trained and\n  the rest will starve.\n\n  Several hacks are necessary to get around current TPU limitations:\n\n  - To ensure static shapes, we enforce (by truncation/padding)\n    that each sequence send the same number of elements to each expert.\n\n    It would make more sense to enforce this equality over the entire batch,\n    but due to our hacked-up gather-by-matmul implementation, we need to divide\n    the batch into \"groups\".  For each group, the same number of elements\n    are sent to each expert.\n\n  TODO(noam): Factor this code better.  We want to be able to substitute\n  different code for the experts themselves.\n\n  Dimensions cheat sheet:\n  B: batch dim(s)\n  L: original sequence length\n  M: input depth\n  N: output depth\n  G: number of groups\n  S: group size\n  E: number of experts\n  C: expert capacity\n\n  Args:\n    inputs: a mtf.Tensor with shape [batch_dim(s), length_dim, input_dim]\n    output_dim: a mtf.Dimension (for Transformer, this is input_dim)\n    hparams: model hyperparameters\n    train: a boolean\n    variable_dtype: a mtf.VariableDType\n    layout: optional - an input to mtf.convert_to_layout_rules\n    mesh_shape: optional - an input to mtf.convert_to_shape\n    nonpadding: an optional Tensor with shape [batch_dim(s), length_dim]\n      and the same dtype as inputs, consisting of ones(nonpadding)\n      and zeros(padding).\n    activation: a function.\n    num_microbatches: number of microbatches.\n    token_embeddings: a mtf.Tensor with shape\n      [batch_dim(s), length_dim, input_dim]. These are the word embeddings for\n      that correspond to the inputs. These can optionally be used to make\n      routing decisions.\n\n  Returns:\n    outputs: a Tensor with shape [batch_dim(s), length_dim, output_dim]\n    loss: a mtf scalar\n\n  Raises:\n    ValueError: on unrecognized hparams.moe_gating\n  \"\"\"", "\n", "# pylint: disable=line-too-long", "\n", "#", "\n", "# O outer_batch dimension can be used for expert replication, e.g.", "\n", "# outer_batch=4 for placing 128 experts on 512 cores with 4 replicas of each", "\n", "# expert.", "\n", "#", "\n", "# E.g. 16x16 basic example:", "\n", "#   moe_num_experts=512, num_groups=1024, batch=4096, length=256, d_model=1024", "\n", "# ---", "\n", "# Below ` indicates common way of splitting along mesh dimension.", "\n", "#", "\n", "# orig_inputs      OB`LM Tensor", "\n", "#                  Shape[outer_batch=1, batch=4096, length=256, d_model=1024]", "\n", "#                  v (reshaped)", "\n", "# inputs           OG`SM", "\n", "#                  Shape[outer_batch=1, batch=1024, group=1024, d_model=1024]", "\n", "#", "\n", "# combine_tensor,", "\n", "# dispatch_tensor  OG`SEC", "\n", "#                  Shape[outer_batch=1, batch=1024, group=1024, expert_unsplit=512, expert_capacity=4]", "\n", "#", "\n", "# (dispatched inputs)", "\n", "# expert_inputs    OEG`CM", "\n", "#                  Shape[outer_batch=1, expert_unsplit=512, batch=1024, expert_capacity=4, d_model=1024]", "\n", "#                  v (re-split via ReshapeOperation)", "\n", "#                  OE`GCM", "\n", "#                  Shape[outer_batch=1, experts=512, batch_unsplit=1024, expert_capacity=4, d_model=1024]", "\n", "#", "\n", "# (hidden representation)", "\n", "# h                OE`GCH", "\n", "#                  Shape[outer_batch=1, experts=512, batch_unsplit=1024, expert_capacity=4, expert_hidden=8192]", "\n", "#", "\n", "# expert_output    OE`GCM", "\n", "#                  Shape[outer_batch=1, experts=512, batch_unsplit=1024, expert_capacity=4, d_model=1024]", "\n", "#                  v (re-split via ReshapeOperation)", "\n", "#                  OEG`CM", "\n", "#                  Shape[outer_batch=1, expert_unsplit=512, batch=1024, expert_capacity=4, d_model=1024]", "\n", "#", "\n", "# (combined expert_output)", "\n", "# output           OG`SM", "\n", "#                  Shape[outer_batch=1, batch=1024, group=1024, d_model=1024", "\n", "#                  v (reshape)", "\n", "#                  OB`LM", "\n", "#                  Shape[outer_batch=1, batch=4096, length=256, d_model=1024]", "\n", "#", "\n", "# pylint: enable=line-too-long", "\n", "orig_inputs", "=", "inputs", "\n", "hidden_dim", "=", "mtf", ".", "Dimension", "(", "\"expert_hidden\"", ",", "hparams", ".", "moe_hidden_size", ")", "\n", "experts_dim", "=", "mtf", ".", "Dimension", "(", "\"experts\"", ",", "hparams", ".", "moe_num_experts", ")", "\n", "\n", "# We \"cheat\" here and look at the mesh shape and layout. This is to ensure", "\n", "# that the number of groups is a multiple of the mesh dimension", "\n", "# over which those groups are split.", "\n", "batch_and_length_dims", ",", "input_dim", "=", "(", "orig_inputs", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", ",", "\n", "orig_inputs", ".", "shape", ".", "dims", "[", "-", "1", "]", ")", "\n", "# Hack: we assume that", "\n", "#   \"outer_batch\" == replication of experts", "\n", "#   mesh_dim_size can be derived from mesh_shape and orig_batch_dim", "\n", "#", "\n", "# We then reqire num_groups to be a multiple of mesh_dim_size.", "\n", "if", "orig_inputs", ".", "shape", ".", "dims", "[", "0", "]", ".", "name", "==", "\"outer_batch\"", ":", "\n", "    ", "outer_batch_dim", ",", "orig_batch_dim", "=", "orig_inputs", ".", "shape", ".", "dims", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "    ", "outer_batch_dim", ",", "orig_batch_dim", "=", "(", "mtf", ".", "Dimension", "(", "\"outer_batch\"", ",", "1", ")", ",", "\n", "orig_inputs", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "\n", "# Number of MoE inputs (total number of position across batch_and_length_dims", "\n", "# per replica.", "\n", "", "n", "=", "1", "\n", "for", "d", "in", "batch_and_length_dims", ":", "\n", "    ", "n", "*=", "d", ".", "size", "\n", "\n", "", "n", "=", "n", "//", "outer_batch_dim", ".", "size", "\n", "\n", "mesh_dim_size", "=", "mtf", ".", "tensor_dim_to_mesh_dim_size", "(", "layout", ",", "mesh_shape", ",", "\n", "orig_batch_dim", ")", "\n", "num_groups", ",", "group_size", "=", "_split_into_groups", "(", "n", ",", "hparams", ".", "moe_group_size", ",", "\n", "mesh_dim_size", ")", "\n", "\n", "group_size_dim", "=", "mtf", ".", "Dimension", "(", "\"group\"", ",", "group_size", ")", "\n", "num_groups_dim", "=", "mtf", ".", "Dimension", "(", "orig_batch_dim", ".", "name", ",", "num_groups", ")", "\n", "\n", "moe_input_dims", "=", "[", "outer_batch_dim", ",", "num_groups_dim", ",", "group_size_dim", ",", "input_dim", "]", "\n", "# OGSM Tensor", "\n", "inputs", "=", "mtf", ".", "reshape", "(", "inputs", ",", "moe_input_dims", ")", "\n", "\n", "# Token embeddings that can be optionally used in the router for determining", "\n", "# where to send tokens.", "\n", "if", "hparams", ".", "moe_word_embed_mode", "is", "not", "None", ":", "\n", "    ", "token_embeddings", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "reshape", "(", "token_embeddings", ",", "moe_input_dims", ")", ",", "inputs", ".", "dtype", ")", "\n", "\n", "# Each sequence sends expert_capacity positions to each expert.", "\n", "", "if", "train", ":", "\n", "    ", "capacity_factor", "=", "hparams", ".", "moe_capacity_factor_train", "\n", "", "else", ":", "\n", "    ", "capacity_factor", "=", "hparams", ".", "moe_capacity_factor_eval", "\n", "", "expert_capacity", "=", "min", "(", "\n", "group_size_dim", ".", "size", ",", "\n", "int", "(", "(", "group_size_dim", ".", "size", "*", "capacity_factor", ")", "/", "experts_dim", ".", "size", ")", ")", "\n", "expert_capacity", "=", "max", "(", "expert_capacity", ",", "hparams", ".", "moe_min_expert_capacity", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"expert_capacity: %d\"", "%", "expert_capacity", ")", "\n", "expert_capacity_dim", "=", "mtf", ".", "Dimension", "(", "\"expert_capacity\"", ",", "expert_capacity", ")", "\n", "experts_dim_unsplit", "=", "mtf", ".", "Dimension", "(", "\"expert_unsplit\"", ",", "experts_dim", ".", "size", ")", "\n", "batch_dim_unsplit", "=", "mtf", ".", "Dimension", "(", "\"batch_unsplit\"", ",", "num_groups_dim", ".", "size", ")", "\n", "if", "nonpadding", "is", "not", "None", ":", "\n", "    ", "nonpadding", "=", "mtf", ".", "zeros", "(", "\n", "inputs", ".", "mesh", ",", "batch_and_length_dims", ",", "dtype", "=", "inputs", ".", "dtype", ")", "+", "nonpadding", "\n", "nonpadding", "=", "mtf", ".", "reshape", "(", "nonpadding", ",", "moe_input_dims", "[", ":", "-", "1", "]", ")", "\n", "", "if", "hparams", ".", "moe_gating", "==", "\"top_2\"", ":", "\n", "# combine_tensor,", "\n", "# dispatch_tensor  OG`SEC Tensors", "\n", "# (G is generally split along mesh dim)", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "_top_2_gating", "(", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "elif", "hparams", ".", "moe_gating", "==", "\"top_n\"", ":", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "_top_n_gating", "(", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "elif", "hparams", ".", "moe_gating", "==", "\"switch\"", ":", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "_switch_gating", "(", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "elif", "hparams", ".", "moe_gating", "==", "\"ntlb\"", ":", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "_ntlb_gating", "(", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "elif", "hparams", ".", "moe_gating", "==", "\"switch_max\"", ":", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "_switch_max_gating", "(", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "elif", "hparams", ".", "moe_gating", "==", "\"expert_selection\"", ":", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "_expert_selection_gating", "(", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "group_size_dim", "=", "group_size_dim", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "name", "=", "\"expert_selection_gating\"", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"unknown hparams.moe_gating=%s\"", "%", "hparams", ".", "moe_gating", ")", "\n", "\n", "", "expert_inputs", "=", "mtf", ".", "einsum", "(", "[", "inputs", ",", "dispatch_tensor", "]", ",", "\n", "mtf", ".", "Shape", "(", "[", "\n", "outer_batch_dim", ",", "experts_dim_unsplit", ",", "\n", "num_groups_dim", ",", "expert_capacity_dim", ",", "input_dim", "\n", "]", ")", ")", "\n", "\n", "# Extra reshape reduces communication cost for model-parallel versions.", "\n", "# For model-parallel versions, this reshape causes an mtf.slice and for non-", "\n", "# model-parallel versions, this has no effect.", "\n", "d_model_split_dim", "=", "mtf", ".", "Dimension", "(", "\"d_model_split\"", ",", "input_dim", ".", "size", ")", "\n", "expert_inputs", "=", "mtf", ".", "reshape", "(", "\n", "expert_inputs", ",", "\n", "mtf", ".", "Shape", "(", "[", "\n", "outer_batch_dim", ",", "experts_dim", ",", "batch_dim_unsplit", ",", "expert_capacity_dim", ",", "\n", "d_model_split_dim", "\n", "]", ")", ")", "\n", "\n", "# Split over batch -> split over experts", "\n", "expert_inputs", "=", "mtf", ".", "reshape", "(", "\n", "expert_inputs", ",", "\n", "mtf", ".", "Shape", "(", "[", "\n", "outer_batch_dim", ",", "experts_dim", ",", "batch_dim_unsplit", ",", "expert_capacity_dim", ",", "\n", "input_dim", "\n", "]", ")", ")", "\n", "\n", "# Now feed the expert inputs through the experts.", "\n", "h", "=", "mtf", ".", "layers", ".", "dense_product", "(", "\n", "expert_inputs", ",", "\n", "reduced_dims", "=", "expert_inputs", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "new_dims", "=", "[", "hidden_dim", "]", ",", "\n", "expert_dims", "=", "[", "experts_dim", "]", ",", "\n", "activation_functions", "=", "activation", ",", "use_bias", "=", "False", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "name", "=", "\"wi\"", ")", "\n", "\n", "if", "hparams", ".", "moe_dropout_rate", "!=", "0.0", ":", "\n", "    ", "h", "=", "mtf", ".", "dropout", "(", "h", ",", "is_training", "=", "train", ",", "\n", "keep_prob", "=", "1.0", "-", "hparams", ".", "moe_dropout_rate", ")", "\n", "\n", "", "def", "_compute_output", "(", "hidden", ",", "layer_name", ")", ":", "\n", "    ", "\"\"\"Compute the output of the attention layer from the hidden vector.\"\"\"", "\n", "expert_output", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "hidden", ",", "output_dim", ",", "expert_dims", "=", "[", "experts_dim", "]", ",", "use_bias", "=", "False", ",", "\n", "reduced_dims", "=", "hidden", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "layer_name", ")", "\n", "\n", "# Extra reshape reduces communication cost for model-parallel versions.", "\n", "# For model-parallel versions, this reshape causes an mtf.slice and for non-", "\n", "# model-parallel versions, this has no effect.", "\n", "d_model_split_dim", "=", "mtf", ".", "Dimension", "(", "\n", "\"d_model_split\"", ",", "expert_output", ".", "shape", "[", "-", "1", "]", ".", "size", ")", "\n", "expert_output", "=", "mtf", ".", "reshape", "(", "\n", "expert_output", ",", "\n", "mtf", ".", "Shape", "(", "[", "\n", "outer_batch_dim", ",", "experts_dim_unsplit", ",", "num_groups_dim", ",", "\n", "expert_capacity_dim", ",", "d_model_split_dim", "\n", "]", ")", ")", "\n", "\n", "# Split over experts -> split over batch", "\n", "expert_output", "=", "mtf", ".", "reshape", "(", "\n", "expert_output", ",", "\n", "mtf", ".", "Shape", "(", "[", "\n", "outer_batch_dim", ",", "\n", "experts_dim_unsplit", ",", "\n", "num_groups_dim", ",", "\n", "expert_capacity_dim", ",", "\n", "output_dim", ",", "\n", "]", ")", ")", "\n", "moe_output_dims", "=", "moe_input_dims", "[", ":", "-", "1", "]", "+", "[", "output_dim", "]", "\n", "output", "=", "mtf", ".", "einsum", "(", "[", "expert_output", ",", "combine_tensor", "]", ",", "\n", "mtf", ".", "Shape", "(", "moe_output_dims", ")", ")", "\n", "output", "=", "mtf", ".", "reshape", "(", "output", ",", "batch_and_length_dims", "+", "[", "output_dim", "]", ")", "\n", "return", "output", "\n", "\n", "", "if", "hparams", ".", "moe_use_experts_attention", ":", "\n", "# We share k_h and v_h with no degradation in performance", "\n", "    ", "q_h", ",", "k_h", "=", "h", ",", "h", "\n", "outputs", "=", "[", "]", "\n", "q", "=", "_compute_output", "(", "q_h", ",", "layer_name", "=", "\"q_wo\"", ")", "\n", "k", "=", "_compute_output", "(", "k_h", ",", "layer_name", "=", "\"k_wo\"", ")", "\n", "outputs", ".", "append", "(", "q", ")", "\n", "outputs", ".", "append", "(", "k", ")", "\n", "return", "outputs", ",", "loss", "*", "hparams", ".", "moe_loss_coef", "\n", "", "else", ":", "\n", "    ", "output", "=", "_compute_output", "(", "h", ",", "layer_name", "=", "\"wo\"", ")", "\n", "return", "output", ",", "loss", "*", "hparams", ".", "moe_loss_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.transformer_moe_layer_v2": [[568, 842], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "moe._split_into_groups", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "min", "max", "mesh_tensorflow.Dimension", "moe._split_into_groups", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "min", "max", "mesh_tensorflow.Dimension", "mesh_tensorflow.reshape", "mesh_tensorflow.einsum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reshape", "mesh_tensorflow.reshape", "mesh_tensorflow.reshape", "mesh_tensorflow.reshape", "mesh_tensorflow.einsum", "mesh_tensorflow.reshape", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.reshape", "mesh_tensorflow.einsum", "mesh_tensorflow.reshape", "mesh_tensorflow.reshape", "mesh_tensorflow.einsum", "mesh_tensorflow.reshape", "len", "mesh_tensorflow.reshape", "len", "mesh_tensorflow.tensor_dim_to_mesh_dim_size", "int", "mesh_tensorflow.tensor_dim_to_mesh_dim_size", "int", "mesh_tensorflow.reshape", "moe._top_2_gating", "ValueError", "mesh_tensorflow.Shape", "moe._top_2_gating", "ValueError", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.reshape", "mesh_tensorflow.zeros", "mesh_tensorflow.to_float", "mesh_tensorflow.to_float", "mesh_tensorflow.greater", "mesh_tensorflow.greater", "mesh_tensorflow.Dimension"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._split_into_groups", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._split_into_groups", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tensor_dim_to_mesh_dim_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tensor_dim_to_mesh_dim_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._top_2_gating", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._top_2_gating", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater"], ["", "", "def", "transformer_moe_layer_v2", "(", "\n", "inputs", ",", "output_dim", ",", "hparams", ",", "train", ",", "variable_dtype", ",", "\n", "layout", "=", "None", ",", "mesh_shape", "=", "None", ",", "nonpadding", "=", "None", ",", "num_microbatches", "=", "None", ")", ":", "\n", "  ", "\"\"\"2-level mixture of experts.\n\n  Adapted from the paper https://arxiv.org/abs/1701.06538\n\n  Note: until the algorithm and inferface solidify, we pass in a hyperparameters\n  dictionary in order not to complicate the interface in mtf_transformer.py .\n  Once this code moves out of \"research\", we should pass the hyperparameters\n  separately.\n\n  Hyperparameters used:\n    hparams.moe_num_experts: number of experts\n    hparams.moe_hidden_size: size of hidden layer in each expert\n    hparams.moe_group_size: size of each \"group\" for gating purposes\n    hparams.moe_capacity_factor_train: a float\n    hparams.moe_capacity_factor_eval: a float\n    hparams.moe_capacity_factor_second_level: a float\n    hparams.moe_gating: a string\n    + all hyperparmeters used by _top_2_gating()\n\n  One set of params for experts in first level and different of hparams\n  per expert in the second level.\n  The number of parameters in the gating network is:\n    (input_dim.size * (hparams.num_experts) +\n      (moe_hidden_size * hparams.num_experts) * hparams.num_experts\n\n\n  The number of parameters in the experts themselves is:\n    (hparams.num_experts\n     * (input_dim.size + output_dim.size)\n     * hparams.moe_hidden_size)\n\n  The input is n-dimensional: [<batch_and_length_dims>, input_dim], consisting\n  of the representations of all positions in a batch of sequences.\n\n  Each position of each sequence is sent to 0-3 experts.  The expert\n  choices and the combination weights are determined by a learned gating\n  function.\n\n  This function returns a small auxiliary loss that should be added to the\n  training loss of the model.  This loss helps to balance expert usage.\n  Without the loss, it is very likely that a few experts will be trained and\n  the rest will starve.\n\n  Several hacks are necessary to get around current TPU limitations:\n\n  - To ensure static shapes, we enforce (by truncation/padding)\n    that each sequence send the same number of elements to each expert.\n\n    It would make more sense to enforce this equality over the entire batch,\n    but due to our hacked-up gather-by-matmul implementation, we need to divide\n    the batch into \"groups\".  For each group, the same number of elements\n    are sent to each expert.\n\n  TODO(noam): Factor this code better.  We want to be able to substitute\n  different code for the experts themselves.\n\n  Dimensions cheat sheet:\n  a, b: batch size\n  l: original sequence length\n  m: input depth\n  n: output depth\n  g, h: number of groups\n  s, t: group size\n  x, y: number of experts\n  c, d: expert capacity\n\n  input: [a0, b1, l, m]\n  input: [a0, g1, s, m]\n  dispatch_tensor_x: [a0, g1, s, x, c]\n  expert_input: [a0, g1, x, c, m]\n  alltoall: [a0, g, x1, c, m]\n  alltoall: [a0, g, x1, c, m]\n  transpose: [x1, a0, g, c, m]\n  reshape: [x1, h0, s, m]\n  assignment2: [x1, h0, t, y, d]\n  expert_input2: [x1, h0, y, d, m]\n  alltoall: [x1, h, y0, d, m]\n  ...\n  reverse of that\n\n  gating params 0: [m, x]\n  gating params 1: [x1, m, y]\n\n  expert params:\n     [x1, y0, m, hidden]\n     [x1, y0, hidden, n]\n\n  Args:\n    inputs: a mtf.Tensor with shape [a, b, l, m]\n    output_dim: a mtf.Dimension (for Transformer, this is input_dim)\n    hparams: model hyperparameters\n    train: a boolean\n    variable_dtype: a mtf.VariableDType\n    layout: optional - an input to mtf.convert_to_layout_rules\n    mesh_shape: optional - an input to mtf.convert_to_shape\n    nonpadding: an optional mtf.Tensor with shape [a, b, l]\n      and the same dtype as inputs, consisting of ones(nonpadding)\n      and zeros(padding).\n    num_microbatches: number of microbatches.\n\n  Returns:\n    outputs: a Tensor with shape [a, b, l, n]\n    loss: a mtf scalar\n\n  Raises:\n    ValueError: on unrecognized hparams.moe_gating\n  \"\"\"", "\n", "if", "nonpadding", "is", "not", "None", ":", "\n", "    ", "nonpadding", "=", "mtf", ".", "zeros", "(", "inputs", ".", "mesh", ",", "inputs", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", ",", "\n", "dtype", "=", "inputs", ".", "dtype", ")", "+", "nonpadding", "\n", "", "insert_outer_batch_dim", "=", "(", "len", "(", "inputs", ".", "shape", ".", "dims", ")", "==", "3", ")", "\n", "if", "insert_outer_batch_dim", ":", "\n", "    ", "inputs", "=", "mtf", ".", "reshape", "(", "\n", "inputs", ",", "[", "mtf", ".", "Dimension", "(", "\"outer_batch\"", ",", "1", ")", "]", "+", "inputs", ".", "shape", ".", "dims", ")", "\n", "\n", "", "assert", "len", "(", "hparams", ".", "moe_num_experts", ")", "==", "2", "\n", "a0", ",", "b1", ",", "l", ",", "m", "=", "inputs", ".", "shape", ".", "dims", "\n", "hidden_dim", "=", "mtf", ".", "Dimension", "(", "\"expert_hidden\"", ",", "hparams", ".", "moe_hidden_size", ")", "\n", "x1", "=", "mtf", ".", "Dimension", "(", "\"expert_x\"", ",", "hparams", ".", "moe_num_experts", "[", "0", "]", ")", "\n", "y0", "=", "mtf", ".", "Dimension", "(", "\"expert_y\"", ",", "hparams", ".", "moe_num_experts", "[", "1", "]", ")", "\n", "x", "=", "mtf", ".", "Dimension", "(", "\"expert_x_unsplit\"", ",", "hparams", ".", "moe_num_experts", "[", "0", "]", ")", "\n", "y", "=", "mtf", ".", "Dimension", "(", "\"expert_y_unsplit\"", ",", "hparams", ".", "moe_num_experts", "[", "1", "]", ")", "\n", "n", "=", "output_dim", "\n", "\n", "# We \"cheat\" here and look at the mesh shape and layout. This is to ensure", "\n", "# that the number of groups (g.size) is a multiple of the mesh dimension", "\n", "# over which those groups are split.", "\n", "num_groups", ",", "group_size", "=", "_split_into_groups", "(", "\n", "b1", ".", "size", "*", "l", ".", "size", ",", "hparams", ".", "moe_group_size", ",", "\n", "mtf", ".", "tensor_dim_to_mesh_dim_size", "(", "layout", ",", "mesh_shape", ",", "b1", ")", ")", "\n", "g1", "=", "mtf", ".", "Dimension", "(", "b1", ".", "name", ",", "num_groups", ")", "\n", "g", "=", "mtf", ".", "Dimension", "(", "b1", ".", "name", "+", "\"_unsplit\"", ",", "g1", ".", "size", ")", "\n", "s", "=", "mtf", ".", "Dimension", "(", "\"group_size_x\"", ",", "group_size", ")", "\n", "\n", "# Each sequence sends (at most?) expert_capacity positions to each expert.", "\n", "# Static expert_capacity dimension is needed for expert batch sizes", "\n", "if", "train", ":", "\n", "    ", "capacity_factor", "=", "hparams", ".", "moe_capacity_factor_train", "\n", "", "else", ":", "\n", "    ", "capacity_factor", "=", "hparams", ".", "moe_capacity_factor_eval", "\n", "", "expert_capacity", "=", "min", "(", "s", ".", "size", ",", "int", "(", "(", "s", ".", "size", "*", "capacity_factor", ")", "/", "x", ".", "size", ")", ")", "\n", "expert_capacity", "=", "max", "(", "expert_capacity", ",", "hparams", ".", "moe_min_expert_capacity", ")", "\n", "c", "=", "mtf", ".", "Dimension", "(", "\"expert_capacity_x\"", ",", "expert_capacity", ")", "\n", "\n", "# We \"cheat\" here and look at the mesh shape and layout. This is to ensure", "\n", "# that the number of groups (h.size) is a multiple of the mesh dimension", "\n", "# over which those groups are split.", "\n", "num_groups", ",", "group_size", "=", "_split_into_groups", "(", "\n", "a0", ".", "size", "*", "g", ".", "size", "*", "c", ".", "size", ",", "\n", "hparams", ".", "moe_group_size", ",", "\n", "mtf", ".", "tensor_dim_to_mesh_dim_size", "(", "layout", ",", "mesh_shape", ",", "a0", ")", ")", "\n", "t", "=", "mtf", ".", "Dimension", "(", "\"group_size_y\"", ",", "group_size", ")", "\n", "h0", "=", "mtf", ".", "Dimension", "(", "a0", ".", "name", ",", "num_groups", ")", "\n", "h", "=", "mtf", ".", "Dimension", "(", "a0", ".", "name", "+", "\"_unsplit\"", ",", "h0", ".", "size", ")", "\n", "\n", "expert_capacity", "=", "min", "(", "\n", "t", ".", "size", ",", "\n", "int", "(", "(", "t", ".", "size", "*", "hparams", ".", "moe_capacity_factor_second_level", ")", "/", "y", ".", "size", ")", ")", "\n", "expert_capacity", "=", "max", "(", "expert_capacity", ",", "hparams", ".", "moe_min_expert_capacity", ")", "\n", "d", "=", "mtf", ".", "Dimension", "(", "\"expert_capacity_y\"", ",", "expert_capacity", ")", "\n", "\n", "# First level of expert routing", "\n", "# Reshape the inner batch size to a multiple of group_dim g1 and", "\n", "# group_size_dim s.", "\n", "inputs", "=", "mtf", ".", "reshape", "(", "inputs", ",", "[", "a0", ",", "g1", ",", "s", ",", "m", "]", ")", "\n", "if", "nonpadding", "is", "not", "None", ":", "\n", "    ", "nonpadding", "=", "mtf", ".", "reshape", "(", "nonpadding", ",", "[", "a0", ",", "g1", ",", "s", "]", ")", "\n", "\n", "# Get the assignments for the first level.", "\n", "# dispatch_tensor_x has shape [a0, g1, s, x, c]", "\n", "", "if", "hparams", ".", "moe_gating", "==", "\"top_2\"", ":", "\n", "    ", "dispatch_tensor_x", ",", "combine_tensor_x", ",", "loss_outer", "=", "_top_2_gating", "(", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "x", ",", "\n", "expert_capacity_dim", "=", "c", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"outer_gating\"", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "num_microbatches", "=", "num_microbatches", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"unknown hparams.moe_gating=%s\"", "%", "hparams", ".", "moe_gating", ")", "\n", "\n", "# Now create expert_inputs based on the assignments.", "\n", "# put num_experts dimension first to make split easier in alltoall", "\n", "", "expert_inputs_x", "=", "mtf", ".", "einsum", "(", "[", "inputs", ",", "dispatch_tensor_x", "]", ",", "[", "x", ",", "a0", ",", "g1", ",", "c", ",", "m", "]", ")", "\n", "\n", "# we construct an \"importance\" Tensor for the inputs to the second-level", "\n", "# gating.  The importance of an input is 1.0 if it represents the", "\n", "# first-choice expert-group and 0.5 if it represents the second-choice expert", "\n", "# group.  This is used by the second-level gating.", "\n", "importance", "=", "mtf", ".", "reduce_sum", "(", "combine_tensor_x", ",", "output_shape", "=", "[", "x", ",", "a0", ",", "g1", ",", "c", "]", ")", "\n", "importance", "=", "0.5", "*", "(", "\n", "mtf", ".", "to_float", "(", "mtf", ".", "greater", "(", "importance", ",", "0.5", ")", ")", "+", "\n", "mtf", ".", "to_float", "(", "mtf", ".", "greater", "(", "importance", ",", "0.0", ")", ")", ")", "\n", "\n", "# First level, all to all. Here we change the split dimension from g1 to x1.", "\n", "expert_inputs_x", "=", "mtf", ".", "reshape", "(", "expert_inputs_x", ",", "mtf", ".", "Shape", "(", "\n", "[", "x1", ",", "a0", ",", "g", ",", "c", ",", "m", "]", ")", ")", "\n", "importance", "=", "mtf", ".", "reshape", "(", "importance", ",", "[", "x1", ",", "a0", ",", "g", ",", "c", "]", ")", "\n", "\n", "# Second level of expert routing", "\n", "# Reshape the expert_inputs outer batch dim to be a multiple of group_dim h0", "\n", "# and group_size_dim t.", "\n", "inputs_y", "=", "mtf", ".", "reshape", "(", "expert_inputs_x", ",", "[", "x1", ",", "h0", ",", "t", ",", "m", "]", ")", "\n", "importance", "=", "mtf", ".", "reshape", "(", "importance", ",", "[", "x1", ",", "h0", ",", "t", "]", ")", "\n", "\n", "# Get the assignments for the second level.", "\n", "# dispatch_tensor_y has shape [x1, h0, t, y, d]", "\n", "if", "hparams", ".", "moe_gating", "==", "\"top_2\"", ":", "\n", "    ", "dispatch_tensor_y", ",", "combine_tensor_y", ",", "loss_inner", "=", "_top_2_gating", "(", "\n", "inputs", "=", "inputs_y", ",", "\n", "outer_expert_dims", "=", "[", "x1", "]", ",", "\n", "experts_dim", "=", "y", ",", "\n", "expert_capacity_dim", "=", "d", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "importance", ",", "\n", "name", "=", "\"inner_gating\"", ",", "\n", "num_microbatches", "=", "num_microbatches", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"unknown hparams.moe_gating=%s\"", "%", "hparams", ".", "moe_gating", ")", "\n", "\n", "# Now create expert_inputs based on the assignments.", "\n", "# put num_experts dimension first to make split easier in alltoall", "\n", "", "expert_inputs_y", "=", "mtf", ".", "einsum", "(", "[", "inputs_y", ",", "dispatch_tensor_y", "]", ",", "[", "y", ",", "x1", ",", "h0", ",", "d", ",", "m", "]", ")", "\n", "\n", "# Second level, all to all. Here we change the split dimension from h0 to y0.", "\n", "expert_inputs_y", "=", "mtf", ".", "reshape", "(", "expert_inputs_y", ",", "mtf", ".", "Shape", "(", "\n", "[", "y0", ",", "x1", ",", "h", ",", "d", ",", "m", "]", ")", ")", "\n", "\n", "hidden_output", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "expert_inputs_y", ",", "hidden_dim", ",", "expert_dims", "=", "[", "y0", ",", "x1", "]", ",", "\n", "reduced_dims", "=", "expert_inputs_y", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "activation", "=", "mtf", ".", "relu", ",", "use_bias", "=", "False", ",", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"wi\"", ")", "\n", "expert_output", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "hidden_output", ",", "output_dim", ",", "expert_dims", "=", "[", "y0", ",", "x1", "]", ",", "\n", "reduced_dims", "=", "hidden_output", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "use_bias", "=", "False", ",", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"wo\"", ")", "\n", "\n", "# NOW COMBINE EXPERT OUTPUTS (reversing everything we have done)", "\n", "# expert_output has shape [y0, x1, h, d, n]", "\n", "\n", "# alltoall", "\n", "expert_output", "=", "mtf", ".", "reshape", "(", "expert_output", ",", "mtf", ".", "Shape", "(", "\n", "[", "y", ",", "x1", ",", "h0", ",", "d", ",", "n", "]", ")", ")", "\n", "\n", "# combine results from inner level", "\n", "output_y", "=", "mtf", ".", "einsum", "(", "[", "expert_output", ",", "combine_tensor_y", "]", ",", "[", "x1", ",", "h0", ",", "t", ",", "n", "]", ")", "\n", "\n", "# Reshape the combined tensor from inner level to now contain outer_batch_dim", "\n", "# a0 and group_dim g", "\n", "output", "=", "mtf", ".", "reshape", "(", "output_y", ",", "[", "x1", ",", "a0", ",", "g", ",", "c", ",", "n", "]", ")", "\n", "\n", "# alltoall from expert_dim x to group_dim g1", "\n", "expert_output_x", "=", "mtf", ".", "reshape", "(", "output", ",", "mtf", ".", "Shape", "(", "[", "x", ",", "a0", ",", "g1", ",", "c", ",", "n", "]", ")", ")", "\n", "\n", "# combine results from outer level", "\n", "output_x", "=", "mtf", ".", "einsum", "(", "[", "expert_output_x", ",", "combine_tensor_x", "]", ",", "[", "a0", ",", "g1", ",", "s", ",", "n", "]", ")", "\n", "\n", "# Reshape the combined tensor to now contain inner_batch_dim", "\n", "# b1 and the original sequence length", "\n", "output", "=", "mtf", ".", "reshape", "(", "output_x", ",", "[", "a0", ",", "b1", ",", "l", ",", "n", "]", ")", "\n", "if", "insert_outer_batch_dim", ":", "\n", "    ", "output", "=", "mtf", ".", "reshape", "(", "output", ",", "[", "b1", ",", "l", ",", "n", "]", ")", "\n", "", "return", "output", ",", "(", "loss_outer", "+", "loss_inner", ")", "*", "hparams", ".", "moe_loss_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._stochastically_use_non_top_expert": [[844, 878], ["tensorflow.logging.info", "mesh_tensorflow.top_1", "mesh_tensorflow.one_hot", "mesh_tensorflow.cast", "mesh_tensorflow.less", "tensorflow.logging.info", "mesh_tensorflow.sample_with_temperature", "mesh_tensorflow.one_hot", "mesh_tensorflow.random_uniform"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_1", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sample_with_temperature", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_uniform"], ["", "def", "_stochastically_use_non_top_expert", "(", "gate_logits", ",", "experts_dim", ",", "hparams", ")", ":", "\n", "  ", "\"\"\"With a specified probability use the second place or lower experts.\"\"\"", "\n", "# With the specified probability use the second place expert in place of the", "\n", "# top expert.", "\n", "tf", ".", "logging", ".", "info", "(", "\"Using second place expert with prob: {}\"", ".", "format", "(", "\n", "hparams", ".", "moe_use_second_place_expert_prob", ")", ")", "\n", "_", ",", "top_expert_index", "=", "mtf", ".", "top_1", "(", "gate_logits", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "top_expert_mask", "=", "mtf", ".", "one_hot", "(", "\n", "top_expert_index", ",", "experts_dim", ",", "dtype", "=", "gate_logits", ".", "dtype", ")", "\n", "\n", "# With probability moe_expert_use_second_place_expert_prob send the token to", "\n", "# the non-top expert.", "\n", "use_second_place_expert", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "less", "(", "\n", "mtf", ".", "random_uniform", "(", "gate_logits", ".", "mesh", ",", "gate_logits", ".", "shape", "[", ":", "-", "1", "]", ")", ",", "\n", "hparams", ".", "moe_use_second_place_expert_prob", ")", ",", "gate_logits", ".", "dtype", ")", "\n", "# Mask out the top logit.", "\n", "second_place_gate_logits", "=", "-", "1e9", "*", "top_expert_mask", "+", "gate_logits", "\n", "\n", "# If a temperature is specified sample from the remaining N-1 experts.", "\n", "if", "hparams", ".", "moe_use_second_place_expert_prob_temp", "is", "not", "None", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Expert second place temp: {}\"", ".", "format", "(", "\n", "hparams", ".", "moe_use_second_place_expert_prob_temp", ")", ")", "\n", "# What expert should be used.", "\n", "second_expert_index", "=", "mtf", ".", "sample_with_temperature", "(", "\n", "second_place_gate_logits", ",", "experts_dim", ",", "\n", "temperature", "=", "hparams", ".", "moe_use_second_place_expert_prob_temp", ")", "\n", "second_expert_mask", "=", "mtf", ".", "one_hot", "(", "\n", "second_expert_index", ",", "experts_dim", ",", "dtype", "=", "gate_logits", ".", "dtype", ")", "\n", "# Set all logits to -inf that are not the sampled expert", "\n", "second_place_gate_logits", "+=", "(", "1", "-", "second_expert_mask", ")", "*", "-", "1e9", "\n", "", "gate_logits", "=", "(", "use_second_place_expert", "*", "second_place_gate_logits", "+", "\n", "(", "1", "-", "use_second_place_expert", ")", "*", "gate_logits", ")", "\n", "return", "gate_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._ntlb_gating": [[880, 1040], ["mesh_tensorflow.to_float", "mesh_tensorflow.layers.dense", "mesh_tensorflow.softmax", "mesh_tensorflow.to_float", "mesh_tensorflow.Dimension", "mesh_tensorflow.top_k", "mesh_tensorflow.one_hot", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.split", "mesh_tensorflow.split", "mesh_tensorflow.split", "mesh_tensorflow.constant", "mesh_tensorflow.constant", "mesh_tensorflow.constant", "float", "zip", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.layers.multiplicative_jitter", "moe._add_token_emb_to_gate_inputs", "moe._stochastically_use_non_top_expert", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.reduce_mean", "float", "tensorflow.logging.info", "tensorflow.logging.info", "moe._router_z_loss", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.to_float", "mesh_tensorflow.split", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reshape", "mesh_tensorflow.to_float", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.cast", "mesh_tensorflow.equal", "mesh_tensorflow.equal", "mesh_tensorflow.equal", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.cumsum", "mesh_tensorflow.less_equal", "mesh_tensorflow.one_hot", "mesh_tensorflow.log", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.one_hot", "mesh_tensorflow.to_int32", "fraction.name.replace"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multiplicative_jitter", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._add_token_emb_to_gate_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._stochastically_use_non_top_expert", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._router_z_loss", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cumsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32"], ["", "def", "_ntlb_gating", "(", "inputs", ",", "\n", "outer_expert_dims", ",", "\n", "experts_dim", ",", "\n", "expert_capacity_dim", ",", "\n", "hparams", ",", "\n", "train", ",", "\n", "variable_dtype", ",", "\n", "importance", "=", "None", ",", "\n", "name", "=", "\"ntlb_gating\"", ",", "\n", "num_microbatches", "=", "None", ",", "\n", "token_embeddings", "=", "None", ")", ":", "\n", "  ", "\"\"\"Compute Switch gating with no-token-left behind (NTLB) behavior.\"\"\"", "\n", "# SELECT EXPERT", "\n", "if", "train", ":", "\n", "    ", "policy", "=", "hparams", ".", "moe_switch_policy_train", "\n", "", "else", ":", "\n", "    ", "policy", "=", "hparams", ".", "moe_switch_policy_eval", "\n", "\n", "# The internals of this function run in float32.", "\n", "# bfloat16 seems to reduce quality.", "\n", "", "gate_inputs", "=", "mtf", ".", "to_float", "(", "inputs", ")", "\n", "\n", "# Input perturbations", "\n", "if", "train", "and", "policy", "==", "\"input_jitter\"", ":", "\n", "    ", "gate_inputs", "=", "mtf", ".", "layers", ".", "multiplicative_jitter", "(", "\n", "gate_inputs", ",", "hparams", ".", "moe_switch_jitter", ")", "\n", "\n", "", "if", "hparams", ".", "moe_word_embed_mode", "is", "not", "None", ":", "\n", "    ", "gate_inputs", "=", "_add_token_emb_to_gate_inputs", "(", "\n", "gate_inputs", ",", "token_embeddings", ",", "hparams", ".", "moe_word_embed_mode", ")", "\n", "\n", "", "gate_logits", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "gate_inputs", ",", "\n", "experts_dim", ",", "\n", "use_bias", "=", "False", ",", "\n", "expert_dims", "=", "outer_expert_dims", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "name", ")", "\n", "\n", "if", "hparams", ".", "moe_use_second_place_expert_prob", "is", "not", "None", "and", "train", ":", "\n", "    ", "gate_logits", "=", "_stochastically_use_non_top_expert", "(", "\n", "gate_logits", ",", "experts_dim", ",", "hparams", ")", "\n", "\n", "", "raw_gates", "=", "mtf", ".", "softmax", "(", "gate_logits", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "\n", "# The internals of this function run in float32.", "\n", "#   bfloat16 seems to reduce quality.", "\n", "raw_gates", "=", "mtf", ".", "to_float", "(", "raw_gates", ")", "\n", "\n", "# Top-k operation", "\n", "k_dim", "=", "mtf", ".", "Dimension", "(", "\"k\"", ",", "hparams", ".", "moe_ntlb_top_k", ")", "\n", "expert_gate", ",", "expert_index", "=", "mtf", ".", "top_k", "(", "\n", "raw_gates", ",", "reduced_dim", "=", "experts_dim", ",", "k_dim", "=", "k_dim", ")", "\n", "expert_mask", "=", "mtf", ".", "one_hot", "(", "expert_index", ",", "experts_dim", ")", "\n", "\n", "# LOAD BALANCING LOSS", "\n", "outer_batch_dim", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "batch_dim", "=", "inputs", ".", "shape", "[", "1", "]", "\n", "group_size_dim", "=", "inputs", ".", "shape", "[", "-", "2", "]", "\n", "density_1", "=", "mtf", ".", "reduce_mean", "(", "expert_mask", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "density_1_proxy", "=", "mtf", ".", "reduce_mean", "(", "raw_gates", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "if", "importance", "is", "not", "None", ":", "\n", "    ", "expert_mask", "*=", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "expert_gate", "*=", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "density_1_proxy", "*=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "", "loss", "=", "(", "\n", "mtf", ".", "reduce_mean", "(", "density_1_proxy", "*", "density_1", ")", "*", "\n", "float", "(", "experts_dim", ".", "size", "*", "experts_dim", ".", "size", ")", ")", "\n", "if", "num_microbatches", "and", "num_microbatches", ">", "1", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Dividing load-balance loss by num_microbatches={}\"", ".", "format", "(", "\n", "num_microbatches", ")", ")", "\n", "loss", "/=", "num_microbatches", "\n", "\n", "# Add in the z_loss for router.", "\n", "", "if", "train", "and", "hparams", ".", "moe_z_loss", "is", "not", "None", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Using z_loss: {}\"", ".", "format", "(", "hparams", ".", "moe_z_loss", ")", ")", "\n", "z_loss", "=", "_router_z_loss", "(", "gate_logits", ",", "experts_dim", ",", "num_microbatches", ",", "\n", "importance", ")", "\n", "mtf", ".", "scalar_summary", "(", "name", "+", "\"/z_loss\"", ",", "z_loss", ")", "\n", "loss", "+=", "(", "hparams", ".", "moe_z_loss", "*", "z_loss", ")", "\n", "\n", "# Logging", "\n", "", "if", "train", ":", "\n", "    ", "entropy", "=", "mtf", ".", "reduce_sum", "(", "\n", "-", "raw_gates", "*", "mtf", ".", "log", "(", "raw_gates", "+", "1e-9", ")", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "batch_entropy", "=", "mtf", ".", "reduce_mean", "(", "entropy", ")", "\n", "mtf", ".", "scalar_summary", "(", "name", "+", "\"/entropy\"", ",", "batch_entropy", ")", "\n", "\n", "mask_count_experts", "=", "mtf", ".", "reduce_sum", "(", "expert_mask", ",", "output_shape", "=", "[", "experts_dim", "]", ")", "\n", "total_routed", "=", "mtf", ".", "reduce_sum", "(", "mask_count_experts", ")", "\n", "expert_fraction", "=", "mtf", ".", "to_float", "(", "mask_count_experts", "/", "total_routed", ")", "\n", "split_fractions", "=", "mtf", ".", "split", "(", "\n", "expert_fraction", ",", "\n", "split_dim", "=", "experts_dim", ",", "\n", "num_or_size_splits", "=", "experts_dim", ".", "size", ")", "\n", "for", "fraction", "in", "split_fractions", ":", "\n", "      ", "mtf", ".", "scalar_summary", "(", "\"experts/\"", "+", "fraction", ".", "name", ".", "replace", "(", "\":\"", ",", "\"/\"", ")", ",", "\n", "mtf", ".", "reduce_mean", "(", "fraction", ")", ")", "\n", "", "mtf", ".", "scalar_summary", "(", "\"aux_loss\"", ",", "mtf", ".", "reduce_mean", "(", "loss", ")", ")", "\n", "\n", "# COMPUTE ASSIGNMENT TO EXPERT", "\n", "# Iteratively route tokens (no-token-left-behind). The idea is to route as", "\n", "# many tokens as possible to top-i before then trying top-(i+1).", "\n", "", "top_k_masks", "=", "mtf", ".", "split", "(", "\n", "expert_mask", ",", "split_dim", "=", "k_dim", ",", "num_or_size_splits", "=", "k_dim", ".", "size", ")", "\n", "top_k_gates", "=", "mtf", ".", "split", "(", "\n", "expert_gate", ",", "split_dim", "=", "k_dim", ",", "num_or_size_splits", "=", "k_dim", ".", "size", ")", "\n", "top_k_indices", "=", "mtf", ".", "split", "(", "\n", "expert_index", ",", "split_dim", "=", "k_dim", ",", "num_or_size_splits", "=", "k_dim", ".", "size", ")", "\n", "\n", "# Tensors cumulative values over the iterative process.", "\n", "combine_tensor", "=", "mtf", ".", "constant", "(", "\n", "inputs", ".", "mesh", ",", "\n", "value", "=", "0", ",", "\n", "shape", "=", "[", "outer_batch_dim", ",", "batch_dim", ",", "experts_dim", ",", "expert_capacity_dim", "]", ")", "\n", "cum_tokens", "=", "mtf", ".", "constant", "(", "\n", "inputs", ".", "mesh", ",", "value", "=", "0", ",", "shape", "=", "[", "outer_batch_dim", ",", "batch_dim", ",", "experts_dim", "]", ")", "\n", "tokens_left_to_route", "=", "mtf", ".", "constant", "(", "\n", "inputs", ".", "mesh", ",", "value", "=", "1.", ",", "shape", "=", "[", "outer_batch_dim", ",", "batch_dim", ",", "group_size_dim", "]", ")", "\n", "\n", "expert_capacity_float", "=", "float", "(", "expert_capacity_dim", ".", "size", ")", "\n", "for", "(", "top_i_mask", ",", "top_i_gate", ",", "top_i_index", ")", "in", "zip", "(", "top_k_masks", ",", "top_k_gates", ",", "\n", "top_k_indices", ")", ":", "\n", "    ", "top_i_mask", "=", "mtf", ".", "reshape", "(", "\n", "top_i_mask", ",", "\n", "new_shape", "=", "[", "outer_batch_dim", ",", "batch_dim", ",", "group_size_dim", ",", "experts_dim", "]", ")", "\n", "# Operate only on the unrouted tokens.", "\n", "top_i_mask", "*=", "tokens_left_to_route", "\n", "\n", "# Record cumulative number of tokens to each expert across iterations.", "\n", "cumulative_tokens_in_expert", "=", "cum_tokens", "+", "mtf", ".", "cumsum", "(", "\n", "top_i_mask", ",", "group_size_dim", ")", "\n", "\n", "expert_overflow", "=", "mtf", ".", "to_float", "(", "\n", "mtf", ".", "less_equal", "(", "cumulative_tokens_in_expert", ",", "expert_capacity_float", ")", ")", "\n", "output_i_tokens", "=", "top_i_mask", "*", "expert_overflow", "\n", "\n", "# Update the cumulative tokens routed to each expert.", "\n", "cum_tokens", "+=", "mtf", ".", "reduce_sum", "(", "output_i_tokens", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "tokens_left_to_route", "-=", "(", "\n", "mtf", ".", "reduce_sum", "(", "output_i_tokens", ",", "reduced_dim", "=", "experts_dim", ")", ")", "\n", "\n", "# Combine-tensor for this iteration", "\n", "output_i_tokens_flat", "=", "mtf", ".", "reduce_sum", "(", "\n", "output_i_tokens", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "position_in_expert", "=", "cumulative_tokens_in_expert", "-", "1", "\n", "top_i_combine_tensor", "=", "(", "\n", "top_i_gate", "*", "output_i_tokens_flat", "*", "\n", "mtf", ".", "one_hot", "(", "top_i_index", ",", "experts_dim", ")", "*", "\n", "mtf", ".", "one_hot", "(", "mtf", ".", "to_int32", "(", "position_in_expert", ")", ",", "expert_capacity_dim", ")", ")", "\n", "combine_tensor", "+=", "top_i_combine_tensor", "\n", "\n", "# Match the inputs dtype.", "\n", "", "combine_tensor", "=", "mtf", ".", "cast", "(", "combine_tensor", ",", "inputs", ".", "dtype", ")", "\n", "loss", "=", "mtf", ".", "cast", "(", "loss", ",", "inputs", ".", "dtype", ")", "\n", "dispatch_tensor", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "cast", "(", "combine_tensor", ",", "tf", ".", "bool", ")", ",", "combine_tensor", ".", "dtype", ")", "\n", "\n", "return", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._switch_max_gating": [[1042, 1170], ["mesh_tensorflow.to_float", "mesh_tensorflow.layers.dense", "mesh_tensorflow.softmax", "mesh_tensorflow.one_hot", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.top_k", "mesh_tensorflow.one_hot", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.dropout", "moe._add_token_emb_to_gate_inputs", "moe._stochastically_use_non_top_expert", "mesh_tensorflow.top_1", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.reduce_mean", "float", "tensorflow.logging.info", "tensorflow.logging.info", "moe._router_z_loss", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.to_float", "mesh_tensorflow.split", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.cast", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.cast", "mesh_tensorflow.layers.multiplicative_jitter", "mesh_tensorflow.sample_with_temperature", "mesh_tensorflow.gather", "ValueError", "mesh_tensorflow.equal", "mesh_tensorflow.equal", "mesh_tensorflow.equal", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.cast", "mesh_tensorflow.log", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.greater", "mesh_tensorflow.reduce_sum", "fraction.name.replace"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._add_token_emb_to_gate_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._stochastically_use_non_top_expert", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_1", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._router_z_loss", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multiplicative_jitter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sample_with_temperature", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum"], ["", "def", "_switch_max_gating", "(", "\n", "inputs", ",", "outer_expert_dims", ",", "experts_dim", ",", "expert_capacity_dim", ",", "\n", "hparams", ",", "train", ",", "variable_dtype", ",", "importance", "=", "None", ",", "name", "=", "\"switch_max_gating\"", ",", "\n", "num_microbatches", "=", "None", ",", "token_embeddings", "=", "None", ")", ":", "\n", "  ", "\"\"\"Compute Switch gating.\"\"\"", "\n", "# TODO(barretzoph,liamfedus): Refactor switch_max, switch and ntlb to limit", "\n", "# code resuse.", "\n", "# SELECT EXPERT", "\n", "if", "train", ":", "\n", "    ", "policy", "=", "hparams", ".", "moe_switch_policy_train", "\n", "", "else", ":", "\n", "    ", "policy", "=", "hparams", ".", "moe_switch_policy_eval", "\n", "\n", "# The internals of this function run in float32.", "\n", "#   bfloat16 seems to reduce quality.", "\n", "", "gate_inputs", "=", "mtf", ".", "to_float", "(", "inputs", ")", "\n", "\n", "# Input perturbations", "\n", "if", "policy", "==", "\"input_dropout\"", ":", "\n", "    ", "gate_inputs", "=", "mtf", ".", "dropout", "(", "\n", "gate_inputs", ",", "is_training", "=", "train", ",", "\n", "keep_prob", "=", "1.0", "-", "hparams", ".", "moe_switch_dropout", ")", "\n", "", "elif", "train", "and", "policy", "==", "\"input_jitter\"", ":", "\n", "    ", "gate_inputs", "=", "mtf", ".", "layers", ".", "multiplicative_jitter", "(", "gate_inputs", ",", "\n", "hparams", ".", "moe_switch_jitter", ")", "\n", "\n", "", "if", "hparams", ".", "moe_word_embed_mode", "is", "not", "None", ":", "\n", "    ", "gate_inputs", "=", "_add_token_emb_to_gate_inputs", "(", "\n", "gate_inputs", ",", "token_embeddings", ",", "hparams", ".", "moe_word_embed_mode", ")", "\n", "\n", "", "gate_logits", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "gate_inputs", ",", "\n", "experts_dim", ",", "\n", "use_bias", "=", "False", ",", "\n", "expert_dims", "=", "outer_expert_dims", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "name", ")", "\n", "\n", "if", "hparams", ".", "moe_use_second_place_expert_prob", "is", "not", "None", "and", "train", ":", "\n", "    ", "gate_logits", "=", "_stochastically_use_non_top_expert", "(", "\n", "gate_logits", ",", "experts_dim", ",", "hparams", ")", "\n", "\n", "", "raw_gates", "=", "mtf", ".", "softmax", "(", "gate_logits", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "\n", "if", "policy", "==", "\"argmax\"", "or", "policy", "==", "\"input_dropout\"", "or", "policy", "==", "\"input_jitter\"", ":", "\n", "    ", "expert_gate", ",", "expert_index", "=", "mtf", ".", "top_1", "(", "raw_gates", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "", "elif", "policy", "==", "\"sample\"", ":", "\n", "    ", "expert_index", "=", "mtf", ".", "sample_with_temperature", "(", "\n", "gate_logits", ",", "experts_dim", ",", "temperature", "=", "hparams", ".", "moe_switch_temperature", ")", "\n", "expert_gate", "=", "mtf", ".", "gather", "(", "raw_gates", ",", "expert_index", ",", "dim", "=", "experts_dim", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown Switch gating policy %s\"", "%", "policy", ")", "\n", "\n", "", "expert_mask", "=", "mtf", ".", "one_hot", "(", "expert_index", ",", "experts_dim", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "\n", "# LOAD BALANCING LOSS", "\n", "group_size_dim", "=", "inputs", ".", "shape", "[", "-", "2", "]", "\n", "density_1", "=", "mtf", ".", "reduce_mean", "(", "expert_mask", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "density_1_proxy", "=", "mtf", ".", "reduce_mean", "(", "raw_gates", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "if", "importance", "is", "not", "None", ":", "\n", "    ", "expert_mask", "*=", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "expert_gate", "*=", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "density_1_proxy", "*=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "", "loss", "=", "(", "\n", "mtf", ".", "reduce_mean", "(", "density_1_proxy", "*", "density_1", ")", "*", "\n", "float", "(", "experts_dim", ".", "size", "*", "experts_dim", ".", "size", ")", ")", "\n", "if", "num_microbatches", "and", "num_microbatches", ">", "1", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Dividing load-balance loss by num_microbatches={}\"", ".", "format", "(", "\n", "num_microbatches", ")", ")", "\n", "loss", "/=", "num_microbatches", "\n", "\n", "# Add in the z_loss for router.", "\n", "", "if", "train", "and", "hparams", ".", "moe_z_loss", "is", "not", "None", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Using z_loss: {}\"", ".", "format", "(", "hparams", ".", "moe_z_loss", ")", ")", "\n", "z_loss", "=", "_router_z_loss", "(", "gate_logits", ",", "experts_dim", ",", "num_microbatches", ",", "\n", "importance", ")", "\n", "mtf", ".", "scalar_summary", "(", "name", "+", "\"/z_loss\"", ",", "z_loss", ")", "\n", "loss", "+=", "(", "hparams", ".", "moe_z_loss", "*", "z_loss", ")", "\n", "\n", "# Logging", "\n", "", "if", "train", ":", "\n", "    ", "entropy", "=", "mtf", ".", "reduce_sum", "(", "-", "raw_gates", "*", "mtf", ".", "log", "(", "raw_gates", "+", "1e-9", ")", ",", "\n", "reduced_dim", "=", "experts_dim", ")", "\n", "batch_entropy", "=", "mtf", ".", "reduce_mean", "(", "entropy", ")", "\n", "mtf", ".", "scalar_summary", "(", "name", "+", "\"/entropy\"", ",", "batch_entropy", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"expert_gate\"", ",", "mtf", ".", "reduce_mean", "(", "expert_gate", ")", ")", "\n", "\n", "mask_count_experts", "=", "mtf", ".", "reduce_sum", "(", "expert_mask", ",", "output_shape", "=", "[", "experts_dim", "]", ")", "\n", "total_routed", "=", "mtf", ".", "reduce_sum", "(", "mask_count_experts", ")", "\n", "expert_fraction", "=", "mtf", ".", "to_float", "(", "mask_count_experts", "/", "total_routed", ")", "\n", "split_fractions", "=", "mtf", ".", "split", "(", "\n", "expert_fraction", ",", "\n", "split_dim", "=", "experts_dim", ",", "\n", "num_or_size_splits", "=", "experts_dim", ".", "size", ")", "\n", "for", "fraction", "in", "split_fractions", ":", "\n", "      ", "mtf", ".", "scalar_summary", "(", "\"experts/\"", "+", "fraction", ".", "name", ".", "replace", "(", "\":\"", ",", "\"/\"", ")", ",", "\n", "mtf", ".", "reduce_mean", "(", "fraction", ")", ")", "\n", "", "mtf", ".", "scalar_summary", "(", "\"aux_loss\"", ",", "mtf", ".", "reduce_mean", "(", "loss", ")", ")", "\n", "\n", "# Instead of doing the normal cumulative sum we want to take the top", "\n", "# `expert_capacity` tokens. If there are less than `expert_capacity_dim`", "\n", "# tokens getting routed to an expert then the combine_tensor will zero these", "\n", "# out", "\n", "# expert_mask shape: [outer_batch, batch, group_size, experts_unsplit]", "\n", "# expert_gate shape: [outer_batch, batch, group_size]", "\n", "", "expert_masked_probs", "=", "expert_mask", "*", "expert_gate", "\n", "expert_gate_probs", ",", "expert_gate_indices", "=", "mtf", ".", "top_k", "(", "\n", "expert_masked_probs", ",", "reduced_dim", "=", "group_size_dim", ",", "\n", "k_dim", "=", "expert_capacity_dim", ")", "\n", "dispatch_tensor", "=", "mtf", ".", "one_hot", "(", "\n", "expert_gate_indices", ",", "group_size_dim", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "combine_tensor", "=", "dispatch_tensor", "*", "expert_gate_probs", "\n", "\n", "if", "train", ":", "\n", "    ", "total_routed", "=", "mtf", ".", "reduce_sum", "(", "mtf", ".", "cast", "(", "mtf", ".", "greater", "(", "combine_tensor", ",", "0.0", ")", ",", "\n", "dtype", "=", "raw_gates", ".", "dtype", ")", ")", "\n", "importance", "=", "mtf", ".", "cast", "(", "importance", ",", "dtype", "=", "total_routed", ".", "dtype", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"fraction_routed\"", ",", "\n", "total_routed", "/", "mtf", ".", "reduce_sum", "(", "importance", ")", ")", "\n", "\n", "# Match the inputs dtype.", "\n", "", "combine_tensor", "=", "mtf", ".", "cast", "(", "combine_tensor", ",", "inputs", ".", "dtype", ")", "\n", "loss", "=", "mtf", ".", "cast", "(", "loss", ",", "inputs", ".", "dtype", ")", "\n", "dispatch_tensor", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "cast", "(", "combine_tensor", ",", "tf", ".", "bool", ")", ",", "combine_tensor", ".", "dtype", ")", "\n", "\n", "return", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._expert_selection_gating": [[1172, 1301], ["mesh_tensorflow.to_float", "mesh_tensorflow.layers.dense", "mesh_tensorflow.softmax", "mesh_tensorflow.top_k", "mesh_tensorflow.one_hot", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.dropout", "moe._add_token_emb_to_gate_inputs", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.maximum", "mesh_tensorflow.cast", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_mean", "float", "tensorflow.logging.info", "tensorflow.logging.info", "moe._router_z_loss", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.split", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.cast", "mesh_tensorflow.layers.multiplicative_jitter", "mesh_tensorflow.cast", "mesh_tensorflow.equal", "mesh_tensorflow.reduce_sum", "float", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.equal", "mesh_tensorflow.log", "mesh_tensorflow.reduce_sum", "fraction.name.replace"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._add_token_emb_to_gate_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._router_z_loss", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multiplicative_jitter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum"], ["", "def", "_expert_selection_gating", "(", "\n", "inputs", ",", "outer_expert_dims", ",", "experts_dim", ",", "group_size_dim", ",", "\n", "expert_capacity_dim", ",", "hparams", ",", "train", ",", "variable_dtype", ",", "importance", "=", "None", ",", "\n", "name", "=", "\"expert_selection_gating\"", ",", "num_microbatches", "=", "None", ",", "\n", "normalize_by_num_experts_routed", "=", "True", ",", "token_embeddings", "=", "None", ")", ":", "\n", "  ", "\"\"\"Compute gating where each expert chooses what tokens it wants.\"\"\"", "\n", "# Select the randomization policy.", "\n", "if", "train", ":", "\n", "    ", "policy", "=", "hparams", ".", "moe_switch_policy_train", "\n", "", "else", ":", "\n", "    ", "policy", "=", "hparams", ".", "moe_switch_policy_eval", "\n", "\n", "# The internals of this function run in float32 otherwise instabilities", "\n", "# can occur.", "\n", "", "gate_inputs", "=", "mtf", ".", "to_float", "(", "inputs", ")", "\n", "\n", "# Input perturbations for exploration.", "\n", "if", "policy", "==", "\"input_dropout\"", ":", "\n", "    ", "gate_inputs", "=", "mtf", ".", "dropout", "(", "gate_inputs", ",", "is_training", "=", "train", ",", "\n", "keep_prob", "=", "1.0", "-", "hparams", ".", "moe_switch_dropout", ")", "\n", "", "elif", "train", "and", "policy", "==", "\"input_jitter\"", ":", "\n", "    ", "gate_inputs", "=", "mtf", ".", "layers", ".", "multiplicative_jitter", "(", "gate_inputs", ",", "\n", "hparams", ".", "moe_switch_jitter", ")", "\n", "\n", "", "if", "hparams", ".", "moe_word_embed_mode", "is", "not", "None", ":", "\n", "    ", "gate_inputs", "=", "_add_token_emb_to_gate_inputs", "(", "\n", "gate_inputs", ",", "token_embeddings", ",", "hparams", ".", "moe_word_embed_mode", ")", "\n", "\n", "# Compute expert logits for each token.", "\n", "# gate_logits shape: [outer_batch, batch, group, expert_unsplit]", "\n", "", "gate_logits", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "gate_inputs", ",", "\n", "experts_dim", ",", "\n", "use_bias", "=", "False", ",", "\n", "expert_dims", "=", "outer_expert_dims", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "name", ")", "\n", "\n", "# Set tokens to -inf before softmax if importance is zero as softmax is", "\n", "# normalized over all tokens in the group.", "\n", "if", "importance", "is", "not", "None", ":", "\n", "    ", "gate_logits", "+=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "equal", "(", "importance", ",", "0.0", ")", ",", "dtype", "=", "gate_logits", ".", "dtype", ")", "*", "-", "1e9", "\n", "", "raw_gates", "=", "mtf", ".", "softmax", "(", "gate_logits", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "\n", "# expert_gate_probs shape:", "\n", "# [outer_batch, batch, expert_unsplit, expert_capacity]", "\n", "# expert_gate_indices shape:", "\n", "# [outer_batch, batch, expert_unsplit, expert_capacity]", "\n", "expert_gate_probs", ",", "expert_gate_indices", "=", "mtf", ".", "top_k", "(", "\n", "raw_gates", ",", "reduced_dim", "=", "group_size_dim", ",", "k_dim", "=", "expert_capacity_dim", ")", "\n", "\n", "# dispatch_tensor shape:", "\n", "# [outer_batch, batch, expert_unsplit, expert_capacity, group]", "\n", "dispatch_tensor", "=", "mtf", ".", "one_hot", "(", "\n", "expert_gate_indices", ",", "group_size_dim", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "\n", "# combine_tensor shape:", "\n", "# [outer_batch, batch, expert_unsplit, expert_capacity, group]", "\n", "combine_tensor", "=", "dispatch_tensor", "*", "expert_gate_probs", "\n", "\n", "# Tokens will be aggregated across many experts and will not", "\n", "# be normalized. This could be an issue, so might want to normalize by the", "\n", "# number of experts each token is sent to.", "\n", "if", "normalize_by_num_experts_routed", ":", "\n", "    ", "num_experts_routed", "=", "mtf", ".", "reduce_sum", "(", "\n", "dispatch_tensor", ",", "\n", "output_shape", "=", "(", "dispatch_tensor", ".", "shape", "[", ":", "2", "]", "+", "[", "group_size_dim", "]", ")", ")", "\n", "combine_tensor", "/=", "mtf", ".", "maximum", "(", "num_experts_routed", ",", "1.0", ")", "\n", "\n", "################### Compute the load balancing loss ###################", "\n", "# Push `aggregated_group_probs` of size `group` (which sums to num_experts)", "\n", "# to be uniform.", "\n", "# aggregated_group_probs shape: [outer_batch, batch, group]", "\n", "# importance shape: [outer_batch, batch, group]", "\n", "", "aggregated_group_probs", "=", "mtf", ".", "reduce_mean", "(", "raw_gates", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "if", "importance", "is", "not", "None", ":", "\n", "    ", "aggregated_group_probs", "*=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "\n", "# Scale loss by group_size to keep loss constant across different group_sizes.", "\n", "# true_group_size is number of tokens per group that are not masked out.", "\n", "", "true_group_size", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "reduce_sum", "(", "importance", ",", "reduced_dim", "=", "group_size_dim", ")", ",", "\n", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "loss", "=", "(", "mtf", ".", "reduce_mean", "(", "\n", "aggregated_group_probs", "*", "aggregated_group_probs", "*", "true_group_size", ")", "*", "\n", "float", "(", "group_size_dim", ".", "size", ")", ")", "\n", "\n", "if", "num_microbatches", "and", "num_microbatches", ">", "1", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Dividing load-balance loss by num_microbatches={}\"", ".", "format", "(", "\n", "num_microbatches", ")", ")", "\n", "loss", "/=", "num_microbatches", "\n", "\n", "# Add in the z_loss for router.", "\n", "", "if", "train", "and", "hparams", ".", "moe_z_loss", "is", "not", "None", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Using z_loss: {}\"", ".", "format", "(", "hparams", ".", "moe_z_loss", ")", ")", "\n", "z_loss", "=", "_router_z_loss", "(", "gate_logits", ",", "experts_dim", ",", "num_microbatches", ",", "\n", "importance", ")", "\n", "mtf", ".", "scalar_summary", "(", "name", "+", "\"/z_loss\"", ",", "z_loss", ")", "\n", "loss", "+=", "(", "hparams", ".", "moe_z_loss", "*", "z_loss", ")", "\n", "\n", "################### Logging ###################", "\n", "", "if", "train", ":", "\n", "    ", "entropy", "=", "mtf", ".", "reduce_sum", "(", "-", "raw_gates", "*", "mtf", ".", "log", "(", "raw_gates", "+", "1e-9", ")", ",", "\n", "reduced_dim", "=", "group_size_dim", ")", "\n", "batch_entropy", "=", "mtf", ".", "reduce_mean", "(", "entropy", ")", "\n", "mtf", ".", "scalar_summary", "(", "name", "+", "\"/entropy\"", ",", "batch_entropy", ")", "\n", "\n", "# Log for each token in the group how many experts it gets sent to.", "\n", "num_experts_sent_per_token", "=", "(", "\n", "mtf", ".", "reduce_sum", "(", "dispatch_tensor", ",", "output_shape", "=", "[", "group_size_dim", "]", ")", "*", "\n", "float", "(", "experts_dim", ".", "size", "*", "expert_capacity_dim", ".", "size", ")", ")", "\n", "split_fractions", "=", "mtf", ".", "split", "(", "\n", "num_experts_sent_per_token", ",", "\n", "split_dim", "=", "group_size_dim", ",", "\n", "num_or_size_splits", "=", "group_size_dim", ".", "size", ")", "\n", "for", "fraction", "in", "split_fractions", ":", "\n", "      ", "mtf", ".", "scalar_summary", "(", "\"group_token/\"", "+", "fraction", ".", "name", ".", "replace", "(", "\":\"", ",", "\"/\"", ")", ",", "\n", "mtf", ".", "reduce_sum", "(", "fraction", ")", ")", "\n", "", "mtf", ".", "scalar_summary", "(", "\"aux_loss\"", ",", "mtf", ".", "reduce_mean", "(", "loss", ")", ")", "\n", "\n", "#################### Match the inputs dtype ###################", "\n", "", "combine_tensor", "=", "mtf", ".", "cast", "(", "combine_tensor", ",", "inputs", ".", "dtype", ")", "\n", "loss", "=", "mtf", ".", "cast", "(", "loss", ",", "inputs", ".", "dtype", ")", "\n", "dispatch_tensor", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "cast", "(", "dispatch_tensor", ",", "tf", ".", "bool", ")", ",", "combine_tensor", ".", "dtype", ")", "\n", "\n", "return", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._switch_gating": [[1303, 1440], ["mesh_tensorflow.to_float", "mesh_tensorflow.layers.dense", "mesh_tensorflow.softmax", "mesh_tensorflow.one_hot", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.cast", "float", "mesh_tensorflow.cast", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.dropout", "moe._add_token_emb_to_gate_inputs", "moe._stochastically_use_non_top_expert", "mesh_tensorflow.top_1", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.reduce_mean", "float", "tensorflow.logging.info", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.to_float", "mesh_tensorflow.split", "mesh_tensorflow.scalar_summary", "tensorflow.logging.info", "moe._router_z_loss", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.cumsum", "mesh_tensorflow.less", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.cast", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.one_hot", "mesh_tensorflow.cast", "mesh_tensorflow.layers.multiplicative_jitter", "mesh_tensorflow.sample_with_temperature", "mesh_tensorflow.gather", "ValueError", "mesh_tensorflow.equal", "mesh_tensorflow.equal", "mesh_tensorflow.equal", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.one_hot", "mesh_tensorflow.to_int32", "mesh_tensorflow.log", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_sum", "fraction.name.replace"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._add_token_emb_to_gate_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._stochastically_use_non_top_expert", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_1", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._router_z_loss", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cumsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.multiplicative_jitter", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sample_with_temperature", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum"], ["", "def", "_switch_gating", "(", "\n", "inputs", ",", "outer_expert_dims", ",", "experts_dim", ",", "expert_capacity_dim", ",", "\n", "hparams", ",", "train", ",", "variable_dtype", ",", "importance", "=", "None", ",", "name", "=", "\"switch_gating\"", ",", "\n", "num_microbatches", "=", "None", ",", "token_embeddings", "=", "None", ")", ":", "\n", "  ", "\"\"\"Compute Switch gating.\"\"\"", "\n", "# SELECT EXPERT", "\n", "if", "train", ":", "\n", "    ", "policy", "=", "hparams", ".", "moe_switch_policy_train", "\n", "", "else", ":", "\n", "    ", "policy", "=", "hparams", ".", "moe_switch_policy_eval", "\n", "\n", "# The internals of this function run in float32.", "\n", "#   bfloat16 seems to reduce quality.", "\n", "", "gate_inputs", "=", "mtf", ".", "to_float", "(", "inputs", ")", "\n", "\n", "# Input perturbations", "\n", "if", "policy", "==", "\"input_dropout\"", ":", "\n", "    ", "gate_inputs", "=", "mtf", ".", "dropout", "(", "\n", "gate_inputs", ",", "\n", "is_training", "=", "train", ",", "\n", "keep_prob", "=", "1.0", "-", "hparams", ".", "moe_switch_dropout", ")", "\n", "", "elif", "train", "and", "policy", "==", "\"input_jitter\"", ":", "\n", "    ", "gate_inputs", "=", "mtf", ".", "layers", ".", "multiplicative_jitter", "(", "gate_inputs", ",", "\n", "hparams", ".", "moe_switch_jitter", ")", "\n", "\n", "", "if", "hparams", ".", "moe_word_embed_mode", "is", "not", "None", ":", "\n", "    ", "gate_inputs", "=", "_add_token_emb_to_gate_inputs", "(", "\n", "gate_inputs", ",", "token_embeddings", ",", "hparams", ".", "moe_word_embed_mode", ")", "\n", "\n", "", "gate_logits", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "gate_inputs", ",", "\n", "experts_dim", ",", "\n", "use_bias", "=", "False", ",", "\n", "expert_dims", "=", "outer_expert_dims", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "name", ")", "\n", "\n", "if", "hparams", ".", "moe_use_second_place_expert_prob", "is", "not", "None", "and", "train", ":", "\n", "    ", "gate_logits", "=", "_stochastically_use_non_top_expert", "(", "\n", "gate_logits", ",", "experts_dim", ",", "hparams", ")", "\n", "\n", "", "raw_gates", "=", "mtf", ".", "softmax", "(", "gate_logits", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "\n", "if", "policy", "==", "\"argmax\"", "or", "policy", "==", "\"input_dropout\"", "or", "policy", "==", "\"input_jitter\"", ":", "\n", "    ", "expert_gate", ",", "expert_index", "=", "mtf", ".", "top_1", "(", "raw_gates", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "", "elif", "policy", "==", "\"sample\"", ":", "\n", "    ", "expert_index", "=", "mtf", ".", "sample_with_temperature", "(", "\n", "gate_logits", ",", "experts_dim", ",", "temperature", "=", "hparams", ".", "moe_switch_temperature", ")", "\n", "expert_gate", "=", "mtf", ".", "gather", "(", "raw_gates", ",", "expert_index", ",", "dim", "=", "experts_dim", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown Switch gating policy %s\"", "%", "policy", ")", "\n", "\n", "", "expert_mask", "=", "mtf", ".", "one_hot", "(", "expert_index", ",", "experts_dim", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "\n", "# LOAD BALANCING LOSS", "\n", "group_size_dim", "=", "inputs", ".", "shape", "[", "-", "2", "]", "\n", "density_1", "=", "mtf", ".", "reduce_mean", "(", "expert_mask", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "density_1_proxy", "=", "mtf", ".", "reduce_mean", "(", "raw_gates", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "if", "importance", "is", "not", "None", ":", "\n", "    ", "expert_mask", "*=", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "expert_gate", "*=", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "density_1_proxy", "*=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "", "loss", "=", "(", "\n", "mtf", ".", "reduce_mean", "(", "density_1_proxy", "*", "density_1", ")", "*", "\n", "float", "(", "experts_dim", ".", "size", "*", "experts_dim", ".", "size", ")", ")", "\n", "if", "num_microbatches", "and", "num_microbatches", ">", "1", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Dividing load-balance loss by num_microbatches={}\"", ".", "format", "(", "\n", "num_microbatches", ")", ")", "\n", "loss", "/=", "num_microbatches", "\n", "\n", "# Logging", "\n", "", "if", "train", ":", "\n", "    ", "entropy", "=", "mtf", ".", "reduce_sum", "(", "-", "raw_gates", "*", "mtf", ".", "log", "(", "raw_gates", "+", "1e-9", ")", ",", "\n", "reduced_dim", "=", "experts_dim", ")", "\n", "batch_entropy", "=", "mtf", ".", "reduce_mean", "(", "entropy", ")", "\n", "mtf", ".", "scalar_summary", "(", "name", "+", "\"/entropy\"", ",", "batch_entropy", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"expert_gate\"", ",", "mtf", ".", "reduce_mean", "(", "expert_gate", ")", ")", "\n", "\n", "mask_count_experts", "=", "mtf", ".", "reduce_sum", "(", "expert_mask", ",", "output_shape", "=", "[", "experts_dim", "]", ")", "\n", "total_routed", "=", "mtf", ".", "reduce_sum", "(", "mask_count_experts", ")", "\n", "expert_fraction", "=", "mtf", ".", "to_float", "(", "mask_count_experts", "/", "total_routed", ")", "\n", "split_fractions", "=", "mtf", ".", "split", "(", "\n", "expert_fraction", ",", "\n", "split_dim", "=", "experts_dim", ",", "\n", "num_or_size_splits", "=", "experts_dim", ".", "size", ")", "\n", "for", "fraction", "in", "split_fractions", ":", "\n", "      ", "mtf", ".", "scalar_summary", "(", "\"experts/\"", "+", "fraction", ".", "name", ".", "replace", "(", "\":\"", ",", "\"/\"", ")", ",", "\n", "mtf", ".", "reduce_mean", "(", "fraction", ")", ")", "\n", "", "mtf", ".", "scalar_summary", "(", "\"aux_loss\"", ",", "mtf", ".", "reduce_mean", "(", "loss", ")", ")", "\n", "\n", "# Add in the z_loss for router.", "\n", "", "if", "train", "and", "hparams", ".", "moe_z_loss", "is", "not", "None", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Using z_loss: {}\"", ".", "format", "(", "hparams", ".", "moe_z_loss", ")", ")", "\n", "z_loss", "=", "_router_z_loss", "(", "gate_logits", ",", "experts_dim", ",", "num_microbatches", ",", "\n", "importance", ")", "\n", "mtf", ".", "scalar_summary", "(", "name", "+", "\"/z_loss\"", ",", "z_loss", ")", "\n", "loss", "+=", "(", "hparams", ".", "moe_z_loss", "*", "z_loss", ")", "\n", "\n", "# COMPUTE ASSIGNMENT TO EXPERT", "\n", "# Experts have a limited capacity, ensure we do not exceed it. Construct", "\n", "# the batch indices, to each expert, with position_in_expert", "\n", "", "position_in_expert", "=", "mtf", ".", "cumsum", "(", "\n", "expert_mask", ",", "group_size_dim", ",", "exclusive", "=", "True", ")", "*", "expert_mask", "\n", "position_in_expert", "=", "mtf", ".", "cast", "(", "position_in_expert", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "# Keep only tokens that fit within expert_capacity.", "\n", "expert_capacity_float", "=", "float", "(", "expert_capacity_dim", ".", "size", ")", "\n", "expert_mask", "*=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "less", "(", "position_in_expert", ",", "expert_capacity_float", ")", ",", "\n", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "expert_mask_flat", "=", "mtf", ".", "reduce_sum", "(", "expert_mask", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "\n", "if", "train", ":", "\n", "    ", "total_routed", "=", "mtf", ".", "reduce_sum", "(", "expert_mask_flat", ")", "\n", "importance", "=", "mtf", ".", "cast", "(", "importance", ",", "dtype", "=", "total_routed", ".", "dtype", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"fraction_routed\"", ",", "\n", "total_routed", "/", "mtf", ".", "reduce_sum", "(", "importance", ")", ")", "\n", "\n", "# Mask out the experts that have overflowed expert capacity. Sparsify the", "\n", "# expert_gate.", "\n", "", "expert_gate", "*=", "expert_mask_flat", "\n", "\n", "combine_tensor", "=", "(", "\n", "expert_gate", "*", "expert_mask_flat", "*", "\n", "mtf", ".", "one_hot", "(", "expert_index", ",", "experts_dim", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "*", "\n", "mtf", ".", "one_hot", "(", "\n", "mtf", ".", "to_int32", "(", "position_in_expert", ")", ",", "\n", "expert_capacity_dim", ",", "\n", "dtype", "=", "raw_gates", ".", "dtype", ")", ")", "\n", "\n", "# Match the inputs dtype.", "\n", "combine_tensor", "=", "mtf", ".", "cast", "(", "combine_tensor", ",", "inputs", ".", "dtype", ")", "\n", "loss", "=", "mtf", ".", "cast", "(", "loss", ",", "inputs", ".", "dtype", ")", "\n", "dispatch_tensor", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "cast", "(", "combine_tensor", ",", "tf", ".", "bool", ")", ",", "combine_tensor", ".", "dtype", ")", "\n", "\n", "return", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._top_2_gating": [[1442, 1708], ["mesh_tensorflow.to_float", "mesh_tensorflow.layers.dense", "mesh_tensorflow.softmax", "float", "mesh_tensorflow.top_1", "mesh_tensorflow.one_hot", "mesh_tensorflow.top_1", "mesh_tensorflow.one_hot", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.to_float", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.to_float", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "moe._add_token_emb_to_gate_inputs", "mesh_tensorflow.to_float", "mesh_tensorflow.to_float", "mesh_tensorflow.to_float", "mesh_tensorflow.to_float", "mesh_tensorflow.reduce_mean", "float", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_mean", "tensorflow.logging.info", "tensorflow.logging.info", "moe._router_z_loss", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.cumsum", "mesh_tensorflow.less", "mesh_tensorflow.cumsum", "mesh_tensorflow.less", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.cast", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.scalar_summary", "moe._top_2_gating._log_per_expert_fraction"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_1", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_1", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._add_token_emb_to_gate_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._router_z_loss", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cumsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cumsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary"], ["", "def", "_top_2_gating", "(", "\n", "inputs", ",", "outer_expert_dims", ",", "experts_dim", ",", "expert_capacity_dim", ",", "\n", "hparams", ",", "train", ",", "variable_dtype", ",", "importance", "=", "None", ",", "name", "=", "\"top_2_gating\"", ",", "\n", "num_microbatches", "=", "None", ",", "token_embeddings", "=", "None", ")", ":", "\n", "  ", "\"\"\"Compute gating for mixture-of-experts in TensorFlow.\n\n  Note: until the algorithm and inferface solidify, we pass in a hyperparameters\n  dictionary in order not to complicate the interface in mtf_transformer.py .\n  Once this code moves out of \"research\", we should pass the hyperparameters\n  separately.\n\n  Hyperparameters used:\n    hparams.moe_use_second_place_loss: a boolean\n    hparams.moe_second_policy_train: a string\n    hparams.moe_second_policy_eval: a string\n    hparams.moe_second_threshold: a float\n\n  The returned forward assignment is a tensor used to map (via einsum) from the\n  inputs to the expert_inputs.  Likewise, the returned combine_tensor is\n  used to map (via einsum) from the expert outputs to the outputs.  Both the\n  forward and backward assignments are mostly zeros.  The shapes of the tensors\n  are as follows.\n\n  inputs: [<batch_dims>, group_size_dim, input_dim]\n  importance: [<batch_dims>, group_size_dim]\n  dispatch_tensor:\n    [<batch_dims>, group_size_dim, experts_dim, expert_capacity_dim]\n  expert_inputs:\n    [<batch_dims>, experts_dim, expert_capacity_dim, input_dim]\n\n  expert_outputs: [<batch_dims>, experts_dim, expert_capacity_dim, output_dim]\n  combine_tensor:\n    [<batch_dims>, group_size_dim, experts_dim, expert_capacity_dim]\n  outputs: [<batch_dims>, group_size_dim, output_dim]\n\n  \"importance\" is an optional tensor with one floating-point value for each\n  input vector.  If the importance of an input is 1.0, then we send it to\n  up to 2 experts.  If 0.0 < importance < 1.0, then we send it to at most\n  one expert.  If importance == 0.0, then we send it to no experts.\n\n  We use \"importance\" at the second-level gating function of a hierarchical\n  mixture of experts.  Inputs to the first-choice expert-group get importance\n  1.0.  Inputs to the second-choice expert group get importance 0.5.\n  Inputs that represent padding get importance 0.0.\n\n  Args:\n    inputs: a mtf.Tensor with shape [<batch_dims>, group_size_dim, input_dim]\n    outer_expert_dims: an optional list of dimensions.  This is for the case\n      where we are at an inner level of a hierarchical MoE.\n    experts_dim: a Dimension (the number of experts)\n    expert_capacity_dim: a Dimension (number of examples per group per expert)\n    hparams: model hyperparameters.\n    train: a boolean\n    variable_dtype: a mtf.VariableDType\n    importance: an optional tensor with shape [<batch_dims>, group_size_dim]\n    name: an optional string\n    num_microbatches: number of microbatches.\n    token_embeddings: an optional tensor with shape\n      [<batch_dims>, group_size_dim, input_dim] that is the input\n      word embeddings.\n\n  Returns:\n    dispatch_tensor: a Tensor with shape\n      [<batch_dims>, group_size_dim, experts_dim, expert_capacity_dim]\n    combine_tensor: a Tensor with shape\n      [<batch_dims>, group_size_dim, experts_dim, expert_capacity_dim]\n    loss: a mtf scalar\n\n  Raises:\n    ValueError: on illegal hyperparameters\n  \"\"\"", "\n", "group_size_dim", ",", "unused_input_dim", "=", "inputs", ".", "shape", ".", "dims", "[", "-", "2", ":", "]", "\n", "\n", "# The internals of this function run in float32.", "\n", "# bfloat16 seems to reduce quality.", "\n", "gate_inputs", "=", "mtf", ".", "to_float", "(", "inputs", ")", "\n", "\n", "if", "hparams", ".", "moe_word_embed_mode", "is", "not", "None", ":", "\n", "    ", "gate_inputs", "=", "_add_token_emb_to_gate_inputs", "(", "\n", "gate_inputs", ",", "token_embeddings", ",", "hparams", ".", "moe_word_embed_mode", ")", "\n", "\n", "", "gate_logits", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "gate_inputs", ",", "experts_dim", ",", "use_bias", "=", "False", ",", "\n", "expert_dims", "=", "outer_expert_dims", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "name", ")", "\n", "raw_gates", "=", "mtf", ".", "softmax", "(", "gate_logits", ",", "experts_dim", ")", "\n", "\n", "expert_capacity_f", "=", "float", "(", "expert_capacity_dim", ".", "size", ")", "\n", "\n", "# FIND TOP 2 EXPERTS PER POSITON", "\n", "# Find the top expert for each position. shape=[batch, group]", "\n", "gate_1", ",", "index_1", "=", "mtf", ".", "top_1", "(", "raw_gates", ",", "experts_dim", ")", "\n", "# [batch, group, experts]", "\n", "mask_1", "=", "mtf", ".", "one_hot", "(", "index_1", ",", "experts_dim", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "density_1_proxy", "=", "raw_gates", "\n", "if", "importance", "is", "not", "None", ":", "\n", "    ", "mask_1", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ")", "\n", "gate_1", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ")", "\n", "density_1_proxy", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ")", "\n", "", "gates_without_top_1", "=", "raw_gates", "*", "(", "1.0", "-", "mask_1", ")", "\n", "# [batch, group]", "\n", "gate_2", ",", "index_2", "=", "mtf", ".", "top_1", "(", "gates_without_top_1", ",", "experts_dim", ")", "\n", "# [batch, group, experts]", "\n", "mask_2", "=", "mtf", ".", "one_hot", "(", "index_2", ",", "experts_dim", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "if", "importance", "is", "not", "None", ":", "\n", "    ", "mask_2", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "greater", "(", "importance", ",", "0.0", ")", ")", "\n", "\n", "", "denom", "=", "gate_1", "+", "gate_2", "+", "1e-9", "\n", "gate_1", "/=", "denom", "\n", "gate_2", "/=", "denom", "\n", "\n", "# BALANCING LOSSES", "\n", "# shape = [batch, experts]", "\n", "# We want to equalize the fraction of the batch assigned to each expert", "\n", "density_1", "=", "mtf", ".", "reduce_mean", "(", "mask_1", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "# Something continuous that is correlated with what we want to equalize.", "\n", "density_1_proxy", "=", "mtf", ".", "reduce_mean", "(", "density_1_proxy", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "loss", "=", "(", "mtf", ".", "reduce_mean", "(", "density_1_proxy", "*", "density_1", ")", "\n", "*", "float", "(", "experts_dim", ".", "size", "*", "experts_dim", ".", "size", ")", ")", "\n", "\n", "if", "hparams", ".", "moe_use_second_place_loss", ":", "\n", "# Also add a loss to encourage all experts to be used equally also as the", "\n", "# second-place expert.  Experimentally, this seems to be a wash.", "\n", "# We want to equalize the fraction of the batch assigned to each expert:", "\n", "    ", "density_2", "=", "mtf", ".", "reduce_mean", "(", "mask_2", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "# As a proxy for density_2, we renormalize the raw gates after the top one", "\n", "# has been removed.", "\n", "normalized", "=", "gates_without_top_1", "/", "(", "\n", "mtf", ".", "reduce_sum", "(", "gates_without_top_1", ",", "reduced_dim", "=", "experts_dim", ")", "+", "1e-9", ")", "\n", "density_2_proxy", "=", "mtf", ".", "reduce_mean", "(", "normalized", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "loss_2", "=", "(", "mtf", ".", "reduce_mean", "(", "density_2_proxy", "*", "density_2", ")", "\n", "*", "float", "(", "experts_dim", ".", "size", "*", "experts_dim", ".", "size", ")", ")", "\n", "loss", "+=", "loss_2", "*", "0.5", "\n", "", "if", "num_microbatches", "and", "num_microbatches", ">", "1", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Dividing load-balance loss by num_microbatches={}\"", ".", "format", "(", "\n", "num_microbatches", ")", ")", "\n", "loss", "/=", "num_microbatches", "\n", "\n", "# Add in the z_loss for router.", "\n", "", "if", "train", "and", "hparams", ".", "moe_z_loss", "is", "not", "None", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Using z_loss: {}\"", ".", "format", "(", "hparams", ".", "moe_z_loss", ")", ")", "\n", "z_loss", "=", "_router_z_loss", "(", "gate_logits", ",", "experts_dim", ",", "num_microbatches", ",", "\n", "importance", ")", "\n", "mtf", ".", "scalar_summary", "(", "name", "+", "\"/z_loss\"", ",", "z_loss", ")", "\n", "loss", "+=", "(", "hparams", ".", "moe_z_loss", "*", "z_loss", ")", "\n", "\n", "# Depending on the policy in the hparams, we may drop out some of the", "\n", "# second-place experts.", "\n", "", "if", "train", ":", "\n", "    ", "policy", "=", "hparams", ".", "moe_second_policy_train", "\n", "threshold", "=", "hparams", ".", "moe_second_threshold_train", "\n", "", "else", ":", "\n", "    ", "policy", "=", "hparams", ".", "moe_second_policy_eval", "\n", "threshold", "=", "hparams", ".", "moe_second_threshold_eval", "\n", "", "if", "policy", "==", "\"all\"", ":", "\n", "# Use second-place experts for all examples.", "\n", "    ", "pass", "\n", "", "elif", "policy", "==", "\"none\"", ":", "\n", "# Never use second-place experts for all examples.", "\n", "    ", "mask_2", "=", "mtf", ".", "zeros_like", "(", "mask_2", ")", "\n", "", "elif", "policy", "==", "\"threshold\"", ":", "\n", "# Use second-place experts if gate_2 > threshold.", "\n", "    ", "mask_2", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "greater", "(", "gate_2", ",", "threshold", ")", ")", "\n", "", "elif", "policy", "==", "\"random\"", ":", "\n", "# Use second-place experts with probablity min(1.0, gate_2 / threshold).", "\n", "    ", "mask_2", "*=", "mtf", ".", "to_float", "(", "\n", "mtf", ".", "less", "(", "mtf", ".", "random_uniform", "(", "gate_2", ".", "mesh", ",", "gate_2", ".", "shape", ")", ",", "\n", "gate_2", "/", "max", "(", "threshold", ",", "1e-9", ")", ")", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown policy %s\"", "%", "policy", ")", "\n", "\n", "# COMPUTE ASSIGNMENT TO EXPERTS", "\n", "# [batch, group, experts]", "\n", "# This is the position within the expert's mini-batch for this sequence", "\n", "", "position_in_expert_1", "=", "mtf", ".", "cumsum", "(", "\n", "mask_1", ",", "group_size_dim", ",", "exclusive", "=", "True", ")", "*", "mask_1", "\n", "# Remove the elements that don't fit. [batch, group, experts]", "\n", "mask_1", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "less", "(", "position_in_expert_1", ",", "expert_capacity_f", ")", ")", "\n", "# [batch, experts]", "\n", "# How many examples in this sequence go to this expert", "\n", "mask_1_count", "=", "mtf", ".", "reduce_sum", "(", "mask_1", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "# [batch, group] - mostly ones, but zeros where something didn't fit", "\n", "mask_1_flat", "=", "mtf", ".", "reduce_sum", "(", "mask_1", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "# [batch, group]", "\n", "position_in_expert_1", "=", "mtf", ".", "reduce_sum", "(", "\n", "position_in_expert_1", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "# Weight assigned to first expert.  [batch, group]", "\n", "gate_1", "*=", "mask_1_flat", "\n", "\n", "# [batch, group, experts]", "\n", "position_in_expert_2", "=", "(", "\n", "mtf", ".", "cumsum", "(", "mask_2", ",", "group_size_dim", ",", "exclusive", "=", "True", ")", "+", "mask_1_count", ")", "\n", "position_in_expert_2", "*=", "mask_2", "\n", "mask_2", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "less", "(", "position_in_expert_2", ",", "expert_capacity_f", ")", ")", "\n", "# mask_2_count = mtf.reduce_sum(mask_2, reduced_dim=experts_dim)", "\n", "mask_2_flat", "=", "mtf", ".", "reduce_sum", "(", "mask_2", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "gate_2", "*=", "mask_2_flat", "\n", "position_in_expert_2", "=", "mtf", ".", "reduce_sum", "(", "\n", "position_in_expert_2", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "\n", "if", "train", ":", "\n", "# Gate entropy.", "\n", "    ", "if", "importance", "is", "not", "None", ":", "\n", "      ", "raw_gates", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "greater", "(", "importance", ",", "0.0", ")", ")", "\n", "", "entropy", "=", "mtf", ".", "reduce_sum", "(", "-", "raw_gates", "*", "mtf", ".", "log", "(", "raw_gates", "+", "1e-9", ")", ",", "\n", "reduced_dim", "=", "experts_dim", ")", "\n", "batch_entropy", "=", "mtf", ".", "reduce_mean", "(", "entropy", ")", "\n", "mtf", ".", "scalar_summary", "(", "name", "+", "\"/entropy\"", ",", "batch_entropy", ")", "\n", "\n", "# Mean top-1 and top-2 normalized gate probabilities.", "\n", "if", "importance", "is", "not", "None", ":", "\n", "      ", "gate_2", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "greater", "(", "importance", ",", "0.0", ")", ")", "\n", "", "mtf", ".", "scalar_summary", "(", "\"top1_gate_normalized\"", ",", "mtf", ".", "reduce_mean", "(", "gate_1", ")", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"top2_gate_normalized\"", ",", "mtf", ".", "reduce_mean", "(", "gate_2", ")", ")", "\n", "top1_routed", "=", "mtf", ".", "reduce_sum", "(", "mask_1_flat", ")", "\n", "top2_routed", "=", "mtf", ".", "reduce_sum", "(", "mask_2_flat", ")", "\n", "importance", "=", "mtf", ".", "cast", "(", "importance", ",", "dtype", "=", "top1_routed", ".", "dtype", ")", "\n", "\n", "# What fraction of the top-1 and top-2 tokens are being routed to any", "\n", "# expert.", "\n", "mtf", ".", "scalar_summary", "(", "\"top1_fraction_routed\"", ",", "\n", "top1_routed", "/", "mtf", ".", "reduce_sum", "(", "importance", ")", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"top2_fraction_routed\"", ",", "\n", "top2_routed", "/", "mtf", ".", "reduce_sum", "(", "importance", ")", ")", "\n", "# One or zero if that token got routed anywhere.", "\n", "total_routed", "=", "mtf", ".", "reduce_sum", "(", "mtf", ".", "minimum", "(", "\n", "mask_1_flat", "+", "mask_2_flat", ",", "mtf", ".", "ones_like", "(", "top1_routed", ")", ")", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"all_fraction_routed\"", ",", "\n", "total_routed", "/", "mtf", ".", "reduce_sum", "(", "importance", ")", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"aux_loss\"", ",", "mtf", ".", "reduce_mean", "(", "loss", ")", ")", "\n", "\n", "# Log what fraction of tokens are going to each expert.", "\n", "def", "_log_per_expert_fraction", "(", "mask", ",", "name", ")", ":", "\n", "# mask: [batch, group, experts]", "\n", "      ", "tokens_per_expert", "=", "mtf", ".", "reduce_sum", "(", "mask", ",", "output_shape", "=", "[", "experts_dim", "]", ")", "\n", "total_routed", "=", "mtf", ".", "reduce_sum", "(", "tokens_per_expert", ")", "\n", "expert_fraction", "=", "mtf", ".", "to_float", "(", "tokens_per_expert", "/", "total_routed", ")", "\n", "split_fractions", "=", "mtf", ".", "split", "(", "\n", "expert_fraction", ",", "\n", "split_dim", "=", "experts_dim", ",", "\n", "num_or_size_splits", "=", "experts_dim", ".", "size", ")", "\n", "for", "fraction", "in", "split_fractions", ":", "\n", "        ", "mtf", ".", "scalar_summary", "(", "name", "+", "\"_experts/\"", "+", "fraction", ".", "name", ".", "replace", "(", "\":\"", ",", "\"/\"", ")", ",", "\n", "mtf", ".", "reduce_mean", "(", "fraction", ")", ")", "\n", "\n", "", "", "_log_per_expert_fraction", "(", "mask_1", ",", "\"top1\"", ")", "\n", "_log_per_expert_fraction", "(", "mask_2", ",", "\"top2\"", ")", "\n", "_log_per_expert_fraction", "(", "mask_1", "+", "mask_2", ",", "\"all\"", ")", "\n", "\n", "# [batch, group, experts, expert_capacity]", "\n", "", "combine_tensor", "=", "(", "\n", "gate_1", "*", "mask_1_flat", "\n", "*", "mtf", ".", "one_hot", "(", "index_1", ",", "experts_dim", ")", "\n", "*", "mtf", ".", "one_hot", "(", "mtf", ".", "to_int32", "(", "position_in_expert_1", ")", ",", "expert_capacity_dim", ")", "+", "\n", "gate_2", "*", "mask_2_flat", "\n", "*", "mtf", ".", "one_hot", "(", "index_2", ",", "experts_dim", ")", "\n", "*", "mtf", ".", "one_hot", "(", "mtf", ".", "to_int32", "(", "position_in_expert_2", ")", ",", "expert_capacity_dim", ")", ")", "\n", "\n", "combine_tensor", "=", "mtf", ".", "cast", "(", "combine_tensor", ",", "inputs", ".", "dtype", ")", "\n", "loss", "=", "mtf", ".", "cast", "(", "loss", ",", "inputs", ".", "dtype", ")", "\n", "\n", "dispatch_tensor", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "cast", "(", "combine_tensor", ",", "tf", ".", "bool", ")", ",", "combine_tensor", ".", "dtype", ")", "\n", "\n", "return", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._top_n_gating": [[1710, 1930], ["mesh_tensorflow.to_float", "mesh_tensorflow.layers.dense", "mesh_tensorflow.softmax", "float", "range", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_mean", "range", "zip", "mesh_tensorflow.add_n", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "moe._add_token_emb_to_gate_inputs", "mesh_tensorflow.to_float", "mesh_tensorflow.top_1", "mesh_tensorflow.one_hot", "gates.append", "masks.append", "indexes.append", "len", "mesh_tensorflow.reduce_mean", "float", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_mean", "tensorflow.logging.info", "tensorflow.logging.info", "moe._router_z_loss", "mesh_tensorflow.scalar_summary", "len", "moe._top_n_gating._update_mask_based_on_gate_value"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._add_token_emb_to_gate_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_1", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._router_z_loss", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary"], ["", "def", "_top_n_gating", "(", "\n", "inputs", ",", "outer_expert_dims", ",", "experts_dim", ",", "expert_capacity_dim", ",", "\n", "hparams", ",", "train", ",", "variable_dtype", ",", "importance", "=", "None", ",", "name", "=", "\"top_n_gating\"", ",", "\n", "num_microbatches", "=", "None", ",", "token_embeddings", "=", "None", ")", ":", "\n", "  ", "\"\"\"Compute generalization of top-2 gating for mixture-of-experts.\n\n  Hyperparameters used:\n    hparams.moe_use_second_place_loss: a boolean\n    hparams.moe_second_policy_train: a string\n    hparams.moe_second_policy_eval: a string\n    hparams.moe_second_threshold: a float\n    hparams.moe_top_n_num_experts_per_token: an int\n\n  Tensor shapes are largely the same as in top_2 gating, so see that docstring\n  for more details.\n\n  Args:\n    inputs: a mtf.Tensor with shape [<batch_dims>, group_size_dim, input_dim]\n    outer_expert_dims: an optional list of dimensions.  This is for the case\n      where we are at an inner level of a hierarchical MoE.\n    experts_dim: a Dimension (the number of experts)\n    expert_capacity_dim: a Dimension (number of examples per group per expert)\n    hparams: model hyperparameters.\n    train: a boolean\n    variable_dtype: a mtf.VariableDType\n    importance: an optional tensor with shape [<batch_dims>, group_size_dim]\n    name: an optional string\n    num_microbatches: number of microbatches.\n    token_embeddings: an optional tensor with shape\n      [<batch_dims>, group_size_dim, input_dim] that is the input\n      word embeddings.\n\n  Returns:\n    dispatch_tensor: a Tensor with shape\n      [<batch_dims>, group_size_dim, experts_dim, expert_capacity_dim]\n    combine_tensor: a Tensor with shape\n      [<batch_dims>, group_size_dim, experts_dim, expert_capacity_dim]\n    loss: a mtf scalar\n\n  Raises:\n    ValueError: on illegal hyperparameters\n  \"\"\"", "\n", "\n", "group_size_dim", ",", "unused_input_dim", "=", "inputs", ".", "shape", ".", "dims", "[", "-", "2", ":", "]", "\n", "\n", "# The internals of this function run in float32.", "\n", "# bfloat16 seems to reduce quality.", "\n", "gate_inputs", "=", "mtf", ".", "to_float", "(", "inputs", ")", "\n", "\n", "if", "hparams", ".", "moe_word_embed_mode", "is", "not", "None", ":", "\n", "    ", "gate_inputs", "=", "_add_token_emb_to_gate_inputs", "(", "\n", "gate_inputs", ",", "token_embeddings", ",", "hparams", ".", "moe_word_embed_mode", ")", "\n", "\n", "", "gate_logits", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "gate_inputs", ",", "experts_dim", ",", "use_bias", "=", "False", ",", "\n", "expert_dims", "=", "outer_expert_dims", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "name", ")", "\n", "raw_gates", "=", "mtf", ".", "softmax", "(", "gate_logits", ",", "experts_dim", ")", "\n", "\n", "expert_capacity_f", "=", "float", "(", "expert_capacity_dim", ".", "size", ")", "\n", "\n", "# Used for aux loss.", "\n", "density_1_proxy", "=", "raw_gates", "\n", "if", "importance", "is", "not", "None", ":", "\n", "    ", "density_1_proxy", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ")", "\n", "\n", "# Loop over the get the top-n tokens and their masks.", "\n", "", "gates", "=", "[", "]", "\n", "masks", "=", "[", "]", "\n", "indexes", "=", "[", "]", "\n", "# Tensor that contains all but the top-n highest experts for each token.", "\n", "gates_without_top_n", "=", "raw_gates", "\n", "gates_without_top_1", "=", "None", "# Used for second place loss", "\n", "for", "n", "in", "range", "(", "hparams", ".", "moe_top_n_num_experts_per_token", ")", ":", "\n", "# [batch, group]", "\n", "    ", "gate_n", ",", "index_n", "=", "mtf", ".", "top_1", "(", "gates_without_top_n", ",", "experts_dim", ")", "\n", "# [batch, group, experts]", "\n", "mask_n", "=", "mtf", ".", "one_hot", "(", "index_n", ",", "experts_dim", ",", "dtype", "=", "raw_gates", ".", "dtype", ")", "\n", "if", "importance", "is", "not", "None", ":", "\n", "      ", "mask_n", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "greater", "(", "importance", ",", "0.0", ")", ")", "\n", "gate_n", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "greater", "(", "importance", ",", "0.0", ")", ")", "\n", "", "gates_without_top_n", "*=", "(", "1.0", "-", "mask_n", ")", "\n", "# Used for second place loss.", "\n", "if", "n", "==", "1", ":", "\n", "      ", "gates_without_top_1", "=", "gates_without_top_n", "\n", "", "gates", ".", "append", "(", "gate_n", ")", "\n", "masks", ".", "append", "(", "mask_n", ")", "\n", "indexes", ".", "append", "(", "index_n", ")", "\n", "\n", "", "if", "len", "(", "gates", ")", ">", "1", ":", "\n", "# All gates probs are normalized over the top-n tokens.", "\n", "    ", "denom", "=", "mtf", ".", "add_n", "(", "gates", ")", "+", "1e-9", "\n", "gates", "=", "[", "gate", "/", "denom", "for", "gate", "in", "gates", "]", "\n", "\n", "# BALANCING LOSSES", "\n", "# shape = [batch, experts]", "\n", "# We want to equalize the fraction of the batch assigned to each expert.", "\n", "", "mask_1", "=", "masks", "[", "0", "]", "# Mask for top-1 token.", "\n", "density_1", "=", "mtf", ".", "reduce_mean", "(", "mask_1", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "# Something continuous that is correlated with what we want to equalize.", "\n", "density_1_proxy", "=", "mtf", ".", "reduce_mean", "(", "density_1_proxy", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "loss", "=", "(", "mtf", ".", "reduce_mean", "(", "density_1_proxy", "*", "density_1", ")", "\n", "*", "float", "(", "experts_dim", ".", "size", "*", "experts_dim", ".", "size", ")", ")", "\n", "# TODO(barretzoph): Add in options for aux losses for n > 2.", "\n", "if", "hparams", ".", "moe_use_second_place_loss", ":", "\n", "    ", "pass", "\n", "# Also add a loss to encourage all experts to be used equally also as the", "\n", "# second-place expert.  Experimentally, this seems to be a wash.", "\n", "# We want to equalize the fraction of the batch assigned to each expert:", "\n", "density_2", "=", "mtf", ".", "reduce_mean", "(", "masks", "[", "2", "]", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "# As a proxy for density_2, we renormalize the raw gates after the top one", "\n", "# has been removed.", "\n", "normalized", "=", "gates_without_top_1", "/", "(", "\n", "mtf", ".", "reduce_sum", "(", "gates_without_top_1", ",", "reduced_dim", "=", "experts_dim", ")", "+", "1e-9", ")", "\n", "density_2_proxy", "=", "mtf", ".", "reduce_mean", "(", "normalized", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "loss_2", "=", "(", "mtf", ".", "reduce_mean", "(", "density_2_proxy", "*", "density_2", ")", "\n", "*", "float", "(", "experts_dim", ".", "size", "*", "experts_dim", ".", "size", ")", ")", "\n", "loss", "+=", "loss_2", "*", "0.5", "\n", "", "if", "num_microbatches", "and", "num_microbatches", ">", "1", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Dividing load-balance loss by num_microbatches={}\"", ".", "format", "(", "\n", "num_microbatches", ")", ")", "\n", "loss", "/=", "num_microbatches", "\n", "\n", "# Add in the z_loss for router.", "\n", "", "if", "train", "and", "hparams", ".", "moe_z_loss", "is", "not", "None", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Using z_loss: {}\"", ".", "format", "(", "hparams", ".", "moe_z_loss", ")", ")", "\n", "z_loss", "=", "_router_z_loss", "(", "gate_logits", ",", "experts_dim", ",", "num_microbatches", ",", "\n", "importance", ")", "\n", "mtf", ".", "scalar_summary", "(", "name", "+", "\"/z_loss\"", ",", "z_loss", ")", "\n", "loss", "+=", "(", "hparams", ".", "moe_z_loss", "*", "z_loss", ")", "\n", "\n", "# Depending on the policy in the hparams, we may drop out some of the", "\n", "# second-place experts.", "\n", "", "def", "_update_mask_based_on_gate_value", "(", "gate_n", ",", "mask_n", ")", ":", "\n", "    ", "\"\"\"Update the mask based in the policy and the threshold for n>1.\n\n    Args:\n      gate_n: normalized router probability for the nth highest expert.\n      mask_n: boolean one-hot tensor that keeps track of the nth expert to\n        send to each toke. This also masks away tokens that will not be routed.\n\n    Returns:\n      An altered mask_n that will mask out any top-n token that doesn't follow\n      the second_policy method and threshold.\n    \"\"\"", "\n", "if", "train", ":", "\n", "      ", "policy", "=", "hparams", ".", "moe_second_policy_train", "\n", "threshold", "=", "hparams", ".", "moe_second_threshold_train", "\n", "", "else", ":", "\n", "      ", "policy", "=", "hparams", ".", "moe_second_policy_eval", "\n", "threshold", "=", "hparams", ".", "moe_second_threshold_eval", "\n", "", "if", "policy", "==", "\"all\"", ":", "\n", "# Use nth-place experts for all examples.", "\n", "      ", "pass", "\n", "", "elif", "policy", "==", "\"none\"", ":", "\n", "# Never use nth-place experts for all examples.", "\n", "      ", "mask_n", "=", "mtf", ".", "zeros_like", "(", "mask_n", ")", "\n", "", "elif", "policy", "==", "\"threshold\"", ":", "\n", "# Use nth-place experts if gate_n > threshold.", "\n", "      ", "mask_n", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "greater", "(", "gate_n", ",", "threshold", ")", ")", "\n", "", "elif", "policy", "==", "\"random\"", ":", "\n", "# Use nth-place experts with probablity min(1.0, gate_n / threshold).", "\n", "      ", "mask_n", "*=", "mtf", ".", "to_float", "(", "\n", "mtf", ".", "less", "(", "mtf", ".", "random_uniform", "(", "gate_n", ".", "mesh", ",", "gate_n", ".", "shape", ")", ",", "\n", "gate_n", "/", "max", "(", "threshold", ",", "1e-9", ")", ")", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unknown policy %s\"", "%", "policy", ")", "\n", "", "return", "mask_n", "\n", "\n", "# Now update masks for n>1 to reflect how these additional tokens should be", "\n", "# routed according to their corresponding policies.", "\n", "# Only update for n>1 as we always want to route the top-1 token.", "\n", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "masks", ")", ")", ":", "\n", "    ", "masks", "[", "i", "]", "=", "_update_mask_based_on_gate_value", "(", "gates", "[", "i", "]", ",", "masks", "[", "i", "]", ")", "\n", "\n", "", "def", "_compute_top_n_mask", "(", "gate_n", ",", "mask_n", ",", "index_n", ",", "prev_mask_count", ")", ":", "\n", "# This is the position within the expert's mini-batch for this sequence.", "\n", "    ", "position_in_expert_n", "=", "(", "\n", "mtf", ".", "cumsum", "(", "mask_n", ",", "group_size_dim", ",", "exclusive", "=", "True", ")", "+", "prev_mask_count", ")", "\n", "# Mask out tokens that should not be routed.", "\n", "position_in_expert_n", "*=", "mask_n", "\n", "# Remove the elements that don't fit. [batch, group, experts]", "\n", "mask_n", "*=", "mtf", ".", "to_float", "(", "mtf", ".", "less", "(", "position_in_expert_n", ",", "expert_capacity_f", ")", ")", "\n", "# [batch, experts]", "\n", "# How many examples in this sequence go to this expert.", "\n", "mask_n_count", "=", "mtf", ".", "reduce_sum", "(", "mask_n", ",", "reduced_dim", "=", "group_size_dim", ")", "\n", "# Keep running sum of total tokens sent to each expert.", "\n", "prev_mask_count", "+=", "mask_n_count", "\n", "\n", "# [batch, group] - mostly ones, but zeros where something didn't fit.", "\n", "mask_n_flat", "=", "mtf", ".", "reduce_sum", "(", "mask_n", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "# Weight assigned to nth expert.  [batch, group]", "\n", "gate_n", "*=", "mask_n_flat", "\n", "# [batch, group]", "\n", "position_in_expert_n", "=", "mtf", ".", "reduce_sum", "(", "\n", "position_in_expert_n", ",", "reduced_dim", "=", "experts_dim", ")", "\n", "partial_combine_tensor", "=", "(", "\n", "gate_n", "*", "mask_n_flat", "\n", "*", "mtf", ".", "one_hot", "(", "index_n", ",", "experts_dim", ")", "\n", "*", "mtf", ".", "one_hot", "(", "mtf", ".", "to_int32", "(", "position_in_expert_n", ")", ",", "expert_capacity_dim", ")", ")", "\n", "return", "prev_mask_count", ",", "partial_combine_tensor", "\n", "\n", "# [batch, experts]", "\n", "# How many examples in this group go to each expert. This starts at zero.", "\n", "", "prev_mask_count", "=", "0.0", "\n", "partial_combine_tensors", "=", "[", "]", "\n", "for", "gate_n", ",", "mask_n", ",", "index_n", "in", "zip", "(", "gates", ",", "masks", ",", "indexes", ")", ":", "\n", "    ", "prev_mask_count", ",", "partial_combine_tensor", "=", "_compute_top_n_mask", "(", "\n", "gate_n", ",", "mask_n", ",", "index_n", ",", "prev_mask_count", ")", "\n", "partial_combine_tensors", ".", "append", "(", "partial_combine_tensor", ")", "\n", "", "combine_tensor", "=", "mtf", ".", "add_n", "(", "partial_combine_tensors", ")", "\n", "\n", "combine_tensor", "=", "mtf", ".", "cast", "(", "combine_tensor", ",", "inputs", ".", "dtype", ")", "\n", "loss", "=", "mtf", ".", "cast", "(", "loss", ",", "inputs", ".", "dtype", ")", "\n", "\n", "dispatch_tensor", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "cast", "(", "combine_tensor", ",", "tf", ".", "bool", ")", ",", "combine_tensor", ".", "dtype", ")", "\n", "\n", "return", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._add_token_emb_to_gate_inputs": [[1932, 1954], ["mesh_tensorflow.to_float", "mesh_tensorflow.concat", "mesh_tensorflow.stop_gradient", "mesh_tensorflow.concat", "mesh_tensorflow.stop_gradient", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stop_gradient", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stop_gradient"], ["", "def", "_add_token_emb_to_gate_inputs", "(", "\n", "gate_inputs", ",", "token_embeddings", ",", "moe_word_embed_mode", ")", ":", "\n", "  ", "\"\"\"Add token_embeddings to gate_inputs based on moe_word_embed_mode.\"\"\"", "\n", "\n", "token_embeddings", "=", "mtf", ".", "to_float", "(", "token_embeddings", ")", "\n", "if", "moe_word_embed_mode", "==", "\"concat\"", ":", "\n", "    ", "gate_inputs", "=", "mtf", ".", "concat", "(", "\n", "[", "gate_inputs", ",", "token_embeddings", "]", ",", "gate_inputs", ".", "shape", ".", "dims", "[", "-", "1", "]", ".", "name", ")", "\n", "", "elif", "moe_word_embed_mode", "==", "\"concat_stop_grad\"", ":", "\n", "    ", "token_embeddings", "=", "mtf", ".", "stop_gradient", "(", "token_embeddings", ")", "\n", "gate_inputs", "=", "mtf", ".", "concat", "(", "\n", "[", "gate_inputs", ",", "token_embeddings", "]", ",", "gate_inputs", ".", "shape", ".", "dims", "[", "-", "1", "]", ".", "name", ")", "\n", "", "elif", "moe_word_embed_mode", "==", "\"add\"", ":", "\n", "    ", "gate_inputs", "+=", "token_embeddings", "\n", "", "elif", "moe_word_embed_mode", "==", "\"add_stop_grad\"", ":", "\n", "    ", "gate_inputs", "+=", "mtf", ".", "stop_gradient", "(", "token_embeddings", ")", "\n", "", "elif", "moe_word_embed_mode", "==", "\"embed_only\"", ":", "\n", "    ", "gate_inputs", "=", "token_embeddings", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unimplemented moe word embed mode: {}\"", ".", "format", "(", "\n", "moe_word_embed_mode", ")", ")", "\n", "", "return", "gate_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._router_z_loss": [[1956, 1977], ["mesh_tensorflow.reduce_logsumexp", "mesh_tensorflow.square", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.equal", "mesh_tensorflow.equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_logsumexp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal"], ["", "def", "_router_z_loss", "(", "logits", ",", "experts_dim", ",", "num_microbatches", ",", "importance", "=", "None", ")", ":", "\n", "  ", "\"\"\"Loss that encourages router logits to remain small and improves stability.\n\n  Args:\n    logits: a tensor with shape [<batch_dims>, experts_dim]\n    experts_dim: a Dimension (the number of experts)\n    num_microbatches: number of microbatches\n    importance: an optional tensor with shape [<batch_dims>, group_size_dim]\n\n  Returns:\n    z_loss: scalar loss only applied by non-padded tokens and normalized by\n      num_microbatches.\n  \"\"\"", "\n", "log_z", "=", "mtf", ".", "reduce_logsumexp", "(", "logits", ",", "experts_dim", ")", "\n", "z_loss", "=", "mtf", ".", "square", "(", "log_z", ")", "\n", "if", "importance", "is", "not", "None", ":", "\n", "    ", "z_loss", "*=", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "z_loss", ".", "dtype", ")", "\n", "", "denom", "=", "mtf", ".", "reduce_sum", "(", "\n", "mtf", ".", "cast", "(", "mtf", ".", "equal", "(", "importance", ",", "1.0", ")", ",", "dtype", "=", "z_loss", ".", "dtype", ")", ")", "\n", "z_loss", "=", "mtf", ".", "reduce_sum", "(", "z_loss", ")", "/", "(", "denom", "*", "num_microbatches", ")", "\n", "return", "z_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.set_default_moe_hparams": [[1979, 2010], ["hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe.HParams.add_hparam"], ["", "def", "set_default_moe_hparams", "(", "hparams", ")", ":", "\n", "  ", "\"\"\"Add necessary hyperparameters for mixture-of-experts.\"\"\"", "\n", "hparams", ".", "moe_num_experts", "=", "16", "\n", "hparams", ".", "moe_loss_coef", "=", "1e-2", "\n", "hparams", ".", "add_hparam", "(", "\"moe_gating\"", ",", "\"top_2\"", ")", "\n", "# Experts have fixed capacity per batch.  We need some extra capacity", "\n", "# in case gating is not perfectly balanced.", "\n", "# moe_capacity_factor_* should be set to a value >=1.", "\n", "hparams", ".", "add_hparam", "(", "\"moe_capacity_factor_train\"", ",", "1.25", ")", "\n", "hparams", ".", "add_hparam", "(", "\"moe_capacity_factor_eval\"", ",", "2.0", ")", "\n", "hparams", ".", "add_hparam", "(", "\"moe_capacity_factor_second_level\"", ",", "1.0", ")", "\n", "# Each expert has a hidden layer with this size.", "\n", "hparams", ".", "add_hparam", "(", "\"moe_hidden_size\"", ",", "4096", ")", "\n", "# For gating, divide inputs into groups of this size before gating.", "\n", "# Each group sends the same number of inputs to each expert.", "\n", "# Ideally, the group size would be the whole batch, but this is expensive", "\n", "# due to our use of matrix multiplication for reordering.", "\n", "hparams", ".", "add_hparam", "(", "\"moe_group_size\"", ",", "1024", ")", "\n", "# For top_2 gating, whether to impose an additional loss in order to make", "\n", "# the experts equally used as the second-place expert.", "\n", "hparams", ".", "add_hparam", "(", "\"moe_use_second_place_loss\"", ",", "0", ")", "\n", "# In top_2 gating, policy for whether to use a second-place expert.", "\n", "# Legal values are:", "\n", "#    \"all\": always", "\n", "#    \"none\": never", "\n", "#    \"threshold\": if gate value > the given threshold", "\n", "#    \"random\": if gate value > threshold*random_uniform(0,1)", "\n", "hparams", ".", "add_hparam", "(", "\"moe_second_policy_train\"", ",", "\"random\"", ")", "\n", "hparams", ".", "add_hparam", "(", "\"moe_second_policy_eval\"", ",", "\"random\"", ")", "\n", "hparams", ".", "add_hparam", "(", "\"moe_second_threshold_train\"", ",", "0.2", ")", "\n", "hparams", ".", "add_hparam", "(", "\"moe_second_threshold_eval\"", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._split_into_groups": [[2012, 2046], ["max", "tensorflow.logging.info", "ValueError"], "function", ["None"], ["", "def", "_split_into_groups", "(", "n", ",", "max_group_size", ",", "mesh_dim_size", ")", ":", "\n", "  ", "\"\"\"Helper function for figuring out how to split a dimension into groups.\n\n  We have a dimension with size n and we want to split it into\n  two dimensions: n = num_groups * group_size\n\n  group_size should be the largest possible value meeting the constraints:\n    group_size <= max_group_size\n    (num_groups = n/group_size) is a multiple of mesh_dim_size\n\n  Args:\n    n: an integer\n    max_group_size: an integer\n    mesh_dim_size: an integer\n\n  Returns:\n    num_groups: an integer\n    group_size: an integer\n\n  Raises:\n    ValueError: if n is not a multiple of mesh_dim_size\n  \"\"\"", "\n", "if", "n", "%", "mesh_dim_size", "!=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"n=%d is not a multiple of mesh_dim_size=%d\"", "%", "(", "n", ",", "mesh_dim_size", ")", ")", "\n", "", "num_groups", "=", "max", "(", "1", ",", "n", "//", "max_group_size", ")", "\n", "while", "(", "num_groups", "%", "mesh_dim_size", "!=", "0", "or", "n", "%", "num_groups", "!=", "0", ")", ":", "\n", "    ", "num_groups", "+=", "1", "\n", "", "group_size", "=", "n", "//", "num_groups", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"_split_into_groups(n=%d, max_group_size=%d, mesh_dim_size=%d)\"", "\n", "\" = (num_groups=%d group_size=%d)\"", "%", "\n", "(", "n", ",", "max_group_size", ",", "mesh_dim_size", ",", "num_groups", ",", "group_size", ")", ")", "\n", "return", "num_groups", ",", "group_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.heterogeneous_moe.HeterogeneousMoE1D.__init__": [[39, 101], ["mesh_tensorflow.transformer.moe.HParams"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "num_experts", "=", "16", ",", "\n", "loss_coef", "=", "1e-2", ",", "\n", "hidden_size", "=", "4096", ",", "\n", "group_size", "=", "1024", ",", "\n", "capacity_factor_train", "=", "1.25", ",", "\n", "capacity_factor_eval", "=", "2.0", ",", "\n", "use_second_place_loss", "=", "False", ",", "\n", "second_policy_train", "=", "\"random\"", ",", "\n", "second_policy_eval", "=", "\"random\"", ",", "\n", "second_threshold_train", "=", "0.2", ",", "\n", "second_threshold_eval", "=", "0.2", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", "moe_gating", "=", "\"top_2\"", ",", "\n", "min_expert_capacity", "=", "4", ",", "\n", "switch_policy_train", "=", "\"input_jitter\"", ",", "\n", "switch_policy_eval", "=", "\"input_jitter\"", ",", "\n", "switch_dropout", "=", "0.1", ",", "\n", "switch_temperature", "=", "1.0", ",", "\n", "switch_jitter", "=", "1e-2", ",", "\n", "ntlb_top_k", "=", "4", ",", "\n", "output_dim", "=", "None", ",", "\n", "z_loss", "=", "None", ",", "\n", "word_embed_mode", "=", "None", ",", "\n", "use_second_place_expert_prob", "=", "None", ",", "\n", "use_second_place_expert_prob_temp", "=", "None", ",", "\n", "moe_num_layers", "=", "1", ",", "\n", "heterogeneous_mask_info", "=", "None", ",", "\n", "top_n_num_experts_per_token", "=", "3", ")", ":", "\n", "    ", "self", ".", "_hparams", "=", "moe", ".", "HParams", "(", "\n", "moe_gating", "=", "moe_gating", ",", "\n", "moe_num_experts", "=", "num_experts", ",", "\n", "moe_loss_coef", "=", "loss_coef", ",", "\n", "moe_hidden_size", "=", "hidden_size", ",", "\n", "moe_group_size", "=", "group_size", ",", "\n", "moe_min_expert_capacity", "=", "min_expert_capacity", ",", "\n", "moe_capacity_factor_train", "=", "capacity_factor_train", ",", "\n", "moe_capacity_factor_eval", "=", "capacity_factor_eval", ",", "\n", "moe_use_second_place_loss", "=", "use_second_place_loss", ",", "\n", "moe_second_policy_train", "=", "second_policy_train", ",", "\n", "moe_second_policy_eval", "=", "second_policy_eval", ",", "\n", "moe_second_threshold_train", "=", "second_threshold_train", ",", "\n", "moe_second_threshold_eval", "=", "second_threshold_eval", ",", "\n", "moe_dropout_rate", "=", "dropout_rate", ",", "\n", "moe_switch_policy_train", "=", "switch_policy_train", ",", "\n", "moe_switch_policy_eval", "=", "switch_policy_eval", ",", "\n", "moe_switch_dropout", "=", "switch_dropout", ",", "\n", "moe_switch_temperature", "=", "switch_temperature", ",", "\n", "moe_switch_jitter", "=", "switch_jitter", ",", "\n", "moe_output_dim", "=", "output_dim", ",", "\n", "moe_ntlb_top_k", "=", "ntlb_top_k", ",", "\n", "moe_z_loss", "=", "z_loss", ",", "\n", "moe_word_embed_mode", "=", "word_embed_mode", ",", "\n", "moe_use_second_place_expert_prob", "=", "(", "\n", "use_second_place_expert_prob", ")", ",", "\n", "moe_use_second_place_expert_prob_temp", "=", "(", "\n", "use_second_place_expert_prob_temp", ")", ",", "\n", "moe_top_n_num_experts_per_token", "=", "top_n_num_experts_per_token", ",", "\n", "moe_num_layers", "=", "moe_num_layers", ",", "\n", "moe_heterogeneous_mask_info", "=", "heterogeneous_mask_info", ")", "\n", "self", ".", "_activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.heterogeneous_moe.HeterogeneousMoE1D.call": [[102, 138], ["heterogeneous_moe.transformer_moe_layer_v1", "NotImplementedError", "mesh_tensorflow.Shape", "mesh_tensorflow.reshape", "context.losses.append", "mesh_tensorflow.reshape", "mesh_tensorflow.Dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.heterogeneous_moe.transformer_moe_layer_v1", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "if", "context", ".", "model", ".", "ensemble_dim", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\"MoE not yet implemented with ensembles\"", ")", "\n", "\n", "", "has_length_dim", "=", "context", ".", "length_dim", "in", "x", ".", "shape", ".", "dims", "\n", "if", "not", "has_length_dim", ":", "\n", "      ", "x_shape", "=", "x", ".", "shape", "\n", "shape_with_length", "=", "mtf", ".", "Shape", "(", "\n", "x_shape", ".", "dims", "[", ":", "-", "1", "]", "+", "[", "mtf", ".", "Dimension", "(", "\"length\"", ",", "1", ")", "]", "\n", "+", "x_shape", ".", "dims", "[", "-", "1", ":", "]", ")", "\n", "x", "=", "mtf", ".", "reshape", "(", "x", ",", "shape_with_length", ")", "\n", "\n", "# Extract the MoE output dimension", "\n", "", "if", "self", ".", "_hparams", ".", "moe_output_dim", "is", "not", "None", ":", "\n", "      ", "output_dim", "=", "self", ".", "_hparams", ".", "moe_output_dim", "\n", "", "else", ":", "\n", "      ", "output_dim", "=", "context", ".", "model", ".", "model_dim", "\n", "", "y", ",", "loss", "=", "transformer_moe_layer_v1", "(", "\n", "x", ",", "\n", "output_dim", ",", "\n", "self", ".", "_hparams", ",", "\n", "context", ".", "train", ",", "\n", "context", ".", "variable_dtype", ",", "\n", "layout", "=", "context", ".", "model", ".", "layout", ",", "\n", "mesh_shape", "=", "context", ".", "model", ".", "mesh_shape", ",", "\n", "nonpadding", "=", "context", ".", "nonpadding", ",", "\n", "activation", "=", "self", ".", "_activation", ",", "\n", "num_microbatches", "=", "context", ".", "num_microbatches", ",", "\n", "token_embeddings", "=", "context", ".", "input_embeddings", ",", "\n", "context", "=", "context", ")", "\n", "if", "context", ".", "losses", "is", "not", "None", ":", "\n", "      ", "context", ".", "losses", ".", "append", "(", "loss", ")", "\n", "", "if", "not", "has_length_dim", ":", "\n", "      ", "y", "=", "mtf", ".", "reshape", "(", "y", ",", "x_shape", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.heterogeneous_moe.transformer_moe_layer_v1": [[140, 459], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.tensor_dim_to_mesh_dim_size", "mesh_tensorflow.transformer.moe._split_into_groups", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.reshape", "min", "max", "tensorflow.logging.info", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.einsum", "mesh_tensorflow.Dimension", "mesh_tensorflow.reshape", "mesh_tensorflow.reshape", "range", "mesh_tensorflow.reshape", "mesh_tensorflow.reshape", "mesh_tensorflow.einsum", "mesh_tensorflow.reshape", "tensorflow.logging.info", "heterogeneous_moe.generate_heterogeneous_expert_masks", "mesh_tensorflow.cast", "int", "mesh_tensorflow.reshape", "mesh_tensorflow.transformer.moe._top_2_gating", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Dimension", "mesh_tensorflow.reshape", "mesh_tensorflow.zeros", "mesh_tensorflow.transformer.moe._top_n_gating", "tensorflow.variable_scope", "mesh_tensorflow.layers.dense_product", "mesh_tensorflow.layers.dense", "mesh_tensorflow.transformer.moe._switch_gating", "mesh_tensorflow.transformer.transformer.sublayer_rms_norm", "mesh_tensorflow.dropout", "mesh_tensorflow.slice", "mesh_tensorflow.reshape", "mesh_tensorflow.cast", "mesh_tensorflow.transformer.transformer.sublayer_dropout", "mesh_tensorflow.transformer.moe._ntlb_gating", "mesh_tensorflow.transformer.moe._switch_max_gating", "mesh_tensorflow.transformer.moe._expert_selection_gating", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tensor_dim_to_mesh_dim_size", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._split_into_groups", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.heterogeneous_moe.generate_heterogeneous_expert_masks", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._top_2_gating", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._top_n_gating", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense_product", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._switch_gating", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_rms_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._ntlb_gating", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._switch_max_gating", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.moe._expert_selection_gating"], ["", "", "def", "transformer_moe_layer_v1", "(", "\n", "inputs", ",", "output_dim", ",", "hparams", ",", "train", ",", "variable_dtype", ",", "\n", "layout", "=", "None", ",", "mesh_shape", "=", "None", ",", "nonpadding", "=", "None", ",", "activation", "=", "mtf", ".", "relu", ",", "\n", "num_microbatches", "=", "None", ",", "token_embeddings", "=", "None", ",", "context", "=", "None", ")", ":", "\n", "  ", "\"\"\"Local heterogenous mixture of experts.\n\n  See transformer_moe_layer_v1 in moe.py for a more detailed explanation for\n  a generic moe layer.\n\n  The heterogeneous mask outputted by generate_heterogeneous_expert_masks has\n  dimension [maximum hidden size, maximum # layers, # experts] and its shape\n  will overwrite the parameters moe_num_layers and moe_hidden_size in hparams.\n  The layer-specific mask slice is applied at each expert layer to the\n  activation which is [expert width, # experts]. If the heterogeneous_mask_info\n  is None, there is no mask applied and the code is equivalent to the\n  homogeneous case.\n\n\n  The input is n-dimensional: [<batch_and_length_dims>, input_dim], consisting\n  of the representations of all positions in a batch of sequences.\n\n  Each position of each sequence is sent to 0-2 experts.  The expert\n  choices and the combination weights are determined by a learned gating\n  function.\n\n  This function returns a small auxiliary loss that should be added to the\n  training loss of the model.  This loss helps to balance expert usage.\n  Without the loss, it is very likely that a few experts will be trained and\n  the rest will starve.\n\n  Dimensions cheat sheet:\n  B: batch dim(s)\n  L: original sequence length\n  M: input depth\n  N: output depth\n  G: number of groups\n  S: group size\n  E: number of experts\n  C: expert capacity\n\n  Args:\n    inputs: a mtf.Tensor with shape [batch_dim(s), length_dim, input_dim]\n    output_dim: a mtf.Dimension (for Transformer, this is input_dim)\n    hparams: model hyperparameters\n    train: a boolean\n    variable_dtype: a mtf.VariableDType\n    layout: optional - an input to mtf.convert_to_layout_rules\n    mesh_shape: optional - an input to mtf.convert_to_shape\n    nonpadding: an optional Tensor with shape [batch_dim(s), length_dim]\n      and the same dtype as inputs, consisting of ones(nonpadding)\n      and zeros(padding).\n    activation: a function.\n    num_microbatches: number of microbatches.\n    token_embeddings: a mtf.Tensor with shape\n      [batch_dim(s), length_dim, input_dim]. These are the word embeddings for\n      that correspond to the inputs. These can optionally be used to make\n      routing decisions.\n    context: a Context.\n\n  Returns:\n    outputs: a Tensor with shape [batch_dim(s), length_dim, output_dim]\n    loss: a mtf scalar\n\n  Raises:\n    ValueError: on unrecognized hparams.moe_gating\n  \"\"\"", "\n", "orig_inputs", "=", "inputs", "\n", "\n", "experts_dim", "=", "mtf", ".", "Dimension", "(", "\"experts\"", ",", "hparams", ".", "moe_num_experts", ")", "\n", "\n", "if", "hparams", ".", "moe_heterogeneous_mask_info", "is", "not", "None", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"moe_heterogeneous_mask_info: {}\"", ".", "format", "(", "\n", "hparams", ".", "moe_heterogeneous_mask_info", ")", ")", "\n", "heterogeneous_mask", "=", "generate_heterogeneous_expert_masks", "(", "\n", "hparams", ".", "moe_heterogeneous_mask_info", ",", "\n", "hparams", ".", "moe_num_experts", ",", "\n", "experts_dim", ",", "\n", "mesh", "=", "inputs", ".", "mesh", ",", "\n", "expert_width", "=", "hparams", ".", "moe_hidden_size", ")", "\n", "# overwrite depth and width with the mask maximum dimension", "\n", "hparams", ".", "moe_num_layers", "=", "heterogeneous_mask", ".", "shape", "[", "1", "]", ".", "size", "\n", "hparams", ".", "moe_hidden_size", "=", "heterogeneous_mask", ".", "shape", "[", "0", "]", ".", "size", "\n", "", "hidden_dim", "=", "mtf", ".", "Dimension", "(", "\"expert_hidden\"", ",", "hparams", ".", "moe_hidden_size", ")", "\n", "\n", "# We \"cheat\" here and look at the mesh shape and layout. This is to ensure", "\n", "# that the number of groups is a multiple of the mesh dimension", "\n", "# over which those groups are split.", "\n", "batch_and_length_dims", ",", "input_dim", "=", "(", "orig_inputs", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", ",", "\n", "orig_inputs", ".", "shape", ".", "dims", "[", "-", "1", "]", ")", "\n", "# Hack: we assume that", "\n", "#   \"outer_batch\" == replication of experts", "\n", "#   mesh_dim_size can be derived from mesh_shape and orig_batch_dim", "\n", "#", "\n", "# We then reqire num_groups to be a multiple of mesh_dim_size.", "\n", "if", "orig_inputs", ".", "shape", ".", "dims", "[", "0", "]", ".", "name", "==", "\"outer_batch\"", ":", "\n", "    ", "outer_batch_dim", ",", "orig_batch_dim", "=", "orig_inputs", ".", "shape", ".", "dims", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "    ", "outer_batch_dim", ",", "orig_batch_dim", "=", "(", "mtf", ".", "Dimension", "(", "\"outer_batch\"", ",", "1", ")", ",", "\n", "orig_inputs", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "\n", "# Number of MoE inputs (total number of position across batch_and_length_dims", "\n", "# per replica.", "\n", "", "n", "=", "1", "\n", "for", "d", "in", "batch_and_length_dims", ":", "\n", "    ", "n", "*=", "d", ".", "size", "\n", "\n", "", "n", "=", "n", "//", "outer_batch_dim", ".", "size", "\n", "\n", "mesh_dim_size", "=", "mtf", ".", "tensor_dim_to_mesh_dim_size", "(", "layout", ",", "mesh_shape", ",", "\n", "orig_batch_dim", ")", "\n", "num_groups", ",", "group_size", "=", "moe", ".", "_split_into_groups", "(", "# pylint: disable=protected-access", "\n", "n", ",", "hparams", ".", "moe_group_size", ",", "mesh_dim_size", ")", "\n", "# TODO(barretzoph): implementation without pylint calls?", "\n", "\n", "group_size_dim", "=", "mtf", ".", "Dimension", "(", "\"group\"", ",", "group_size", ")", "\n", "num_groups_dim", "=", "mtf", ".", "Dimension", "(", "orig_batch_dim", ".", "name", ",", "num_groups", ")", "\n", "\n", "moe_input_dims", "=", "[", "outer_batch_dim", ",", "num_groups_dim", ",", "group_size_dim", ",", "input_dim", "]", "\n", "# OGSM Tensor", "\n", "inputs", "=", "mtf", ".", "reshape", "(", "inputs", ",", "moe_input_dims", ")", "\n", "\n", "# Token embeddings that can be optionally used in the router for determining", "\n", "# where to send tokens.", "\n", "if", "hparams", ".", "moe_word_embed_mode", "is", "not", "None", ":", "\n", "    ", "token_embeddings", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "reshape", "(", "token_embeddings", ",", "moe_input_dims", ")", ",", "inputs", ".", "dtype", ")", "\n", "\n", "# Each sequence sends expert_capacity positions to each expert.", "\n", "", "if", "train", ":", "\n", "    ", "capacity_factor", "=", "hparams", ".", "moe_capacity_factor_train", "\n", "", "else", ":", "\n", "    ", "capacity_factor", "=", "hparams", ".", "moe_capacity_factor_eval", "\n", "", "expert_capacity", "=", "min", "(", "\n", "group_size_dim", ".", "size", ",", "\n", "int", "(", "(", "group_size_dim", ".", "size", "*", "capacity_factor", ")", "/", "experts_dim", ".", "size", ")", ")", "\n", "expert_capacity", "=", "max", "(", "expert_capacity", ",", "hparams", ".", "moe_min_expert_capacity", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"expert_capacity: %d\"", "%", "expert_capacity", ")", "\n", "expert_capacity_dim", "=", "mtf", ".", "Dimension", "(", "\"expert_capacity\"", ",", "expert_capacity", ")", "\n", "experts_dim_unsplit", "=", "mtf", ".", "Dimension", "(", "\"expert_unsplit\"", ",", "experts_dim", ".", "size", ")", "\n", "batch_dim_unsplit", "=", "mtf", ".", "Dimension", "(", "\"batch_unsplit\"", ",", "num_groups_dim", ".", "size", ")", "\n", "if", "nonpadding", "is", "not", "None", ":", "\n", "    ", "nonpadding", "=", "mtf", ".", "zeros", "(", "\n", "inputs", ".", "mesh", ",", "batch_and_length_dims", ",", "dtype", "=", "inputs", ".", "dtype", ")", "+", "nonpadding", "\n", "nonpadding", "=", "mtf", ".", "reshape", "(", "nonpadding", ",", "moe_input_dims", "[", ":", "-", "1", "]", ")", "\n", "", "if", "hparams", ".", "moe_gating", "==", "\"top_2\"", ":", "\n", "# combine_tensor,", "\n", "# dispatch_tensor  OG`SEC Tensors", "\n", "# (G is generally split along mesh dim)", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "moe", ".", "_top_2_gating", "(", "# pylint: disable=protected-access", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "elif", "hparams", ".", "moe_gating", "==", "\"top_n\"", ":", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "moe", ".", "_top_n_gating", "(", "# pylint: disable=protected-access", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "elif", "hparams", ".", "moe_gating", "==", "\"switch\"", ":", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "moe", ".", "_switch_gating", "(", "# pylint: disable=protected-access", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "elif", "hparams", ".", "moe_gating", "==", "\"ntlb\"", ":", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "moe", ".", "_ntlb_gating", "(", "# pylint: disable=protected-access", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "elif", "hparams", ".", "moe_gating", "==", "\"switch_max\"", ":", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "moe", ".", "_switch_max_gating", "(", "# pylint: disable=protected-access", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "elif", "hparams", ".", "moe_gating", "==", "\"expert_selection\"", ":", "\n", "    ", "dispatch_tensor", ",", "combine_tensor", ",", "loss", "=", "moe", ".", "_expert_selection_gating", "(", "# pylint: disable=protected-access", "\n", "inputs", "=", "inputs", ",", "\n", "outer_expert_dims", "=", "None", ",", "\n", "experts_dim", "=", "experts_dim_unsplit", ",", "\n", "group_size_dim", "=", "group_size_dim", ",", "\n", "expert_capacity_dim", "=", "expert_capacity_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "train", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "importance", "=", "nonpadding", ",", "\n", "name", "=", "\"expert_selection_gating\"", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "token_embeddings", "=", "token_embeddings", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"unknown hparams.moe_gating=%s\"", "%", "hparams", ".", "moe_gating", ")", "\n", "\n", "", "expert_inputs", "=", "mtf", ".", "einsum", "(", "[", "inputs", ",", "dispatch_tensor", "]", ",", "\n", "mtf", ".", "Shape", "(", "[", "\n", "outer_batch_dim", ",", "experts_dim_unsplit", ",", "\n", "num_groups_dim", ",", "expert_capacity_dim", ",", "input_dim", "\n", "]", ")", ")", "\n", "\n", "# Extra reshape reduces communication cost for model-parallel versions.", "\n", "# For model-parallel versions, this reshape causes an mtf.slice and for non-", "\n", "# model-parallel versions, this has no effect.", "\n", "d_model_split_dim", "=", "mtf", ".", "Dimension", "(", "\"d_model_split\"", ",", "input_dim", ".", "size", ")", "\n", "expert_inputs", "=", "mtf", ".", "reshape", "(", "\n", "expert_inputs", ",", "\n", "mtf", ".", "Shape", "(", "[", "\n", "outer_batch_dim", ",", "experts_dim", ",", "batch_dim_unsplit", ",", "expert_capacity_dim", ",", "\n", "d_model_split_dim", "\n", "]", ")", ")", "\n", "\n", "# Split over batch -> split over experts", "\n", "expert_inputs", "=", "mtf", ".", "reshape", "(", "\n", "expert_inputs", ",", "\n", "mtf", ".", "Shape", "(", "[", "\n", "outer_batch_dim", ",", "experts_dim", ",", "batch_dim_unsplit", ",", "expert_capacity_dim", ",", "\n", "input_dim", "\n", "]", ")", ")", "\n", "\n", "# Pretend we have heterogeneous_mask with shape [moe_num_layers, num_experts]", "\n", "for", "layer_idx", "in", "range", "(", "hparams", ".", "moe_num_layers", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"expert_layer_{}\"", ".", "format", "(", "layer_idx", ")", ")", ":", "\n", "      ", "res_h", "=", "0.0", "\n", "if", "layer_idx", ">", "0", ":", "\n", "        ", "res_h", "=", "expert_inputs", "\n", "expert_inputs", "=", "transformer", ".", "sublayer_rms_norm", "(", "\n", "expert_inputs", ",", "None", ",", "context", ")", "\n", "\n", "# Now feed the expert inputs through the experts.", "\n", "", "h", "=", "mtf", ".", "layers", ".", "dense_product", "(", "\n", "expert_inputs", ",", "\n", "reduced_dims", "=", "expert_inputs", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "new_dims", "=", "[", "hidden_dim", "]", ",", "\n", "expert_dims", "=", "[", "experts_dim", "]", ",", "\n", "activation_functions", "=", "activation", ",", "use_bias", "=", "False", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "name", "=", "\"wi\"", ")", "\n", "\n", "# apply dropout", "\n", "if", "hparams", ".", "moe_dropout_rate", "!=", "0.0", ":", "\n", "        ", "h", "=", "mtf", ".", "dropout", "(", "h", ",", "is_training", "=", "train", ",", "\n", "keep_prob", "=", "1.0", "-", "hparams", ".", "moe_dropout_rate", ")", "\n", "# only if heterogeneous", "\n", "", "if", "hparams", ".", "moe_heterogeneous_mask_info", "is", "not", "None", ":", "\n", "# Get mask for current layer by slicing heterogeneous mask", "\n", "        ", "heterogeneous_mask_slice", "=", "mtf", ".", "slice", "(", "\n", "heterogeneous_mask", ",", "layer_idx", ",", "1", ",", "\"num_expert_layers\"", ")", "\n", "\n", "# Get rid of the expert layers dimension.", "\n", "heterogeneous_mask_slice", "=", "mtf", ".", "reshape", "(", "\n", "heterogeneous_mask_slice", ",", "\n", "[", "heterogeneous_mask_slice", ".", "shape", "[", "0", "]", ",", "\n", "heterogeneous_mask_slice", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "h", "*=", "mtf", ".", "cast", "(", "heterogeneous_mask_slice", ",", "h", ".", "dtype", ")", "\n", "", "expert_output", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "h", ",", "output_dim", ",", "expert_dims", "=", "[", "experts_dim", "]", ",", "use_bias", "=", "False", ",", "\n", "reduced_dims", "=", "h", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"wo\"", ")", "\n", "\n", "if", "layer_idx", "<", "(", "hparams", ".", "moe_num_layers", "-", "1", ")", ":", "\n", "        ", "expert_output", "=", "transformer", ".", "sublayer_dropout", "(", "\n", "expert_output", ",", "None", ",", "context", ")", "\n", "", "expert_output", "+=", "res_h", "\n", "expert_inputs", "=", "expert_output", "\n", "\n", "# Extra reshape reduces communication cost for model-parallel versions.", "\n", "# For model-parallel versions, this reshape causes an mtf.slice and for non-", "\n", "# model-parallel versions, this has no effect.", "\n", "", "", "expert_output", "=", "mtf", ".", "reshape", "(", "\n", "expert_output", ",", "\n", "mtf", ".", "Shape", "(", "[", "\n", "outer_batch_dim", ",", "experts_dim_unsplit", ",", "num_groups_dim", ",", "\n", "expert_capacity_dim", ",", "d_model_split_dim", "\n", "]", ")", ")", "\n", "\n", "# Split over experts -> split over batch", "\n", "expert_output", "=", "mtf", ".", "reshape", "(", "\n", "expert_output", ",", "\n", "mtf", ".", "Shape", "(", "[", "\n", "outer_batch_dim", ",", "\n", "experts_dim_unsplit", ",", "\n", "num_groups_dim", ",", "\n", "expert_capacity_dim", ",", "\n", "output_dim", ",", "\n", "]", ")", ")", "\n", "moe_output_dims", "=", "moe_input_dims", "[", ":", "-", "1", "]", "+", "[", "output_dim", "]", "\n", "output", "=", "mtf", ".", "einsum", "(", "[", "expert_output", ",", "combine_tensor", "]", ",", "\n", "mtf", ".", "Shape", "(", "moe_output_dims", ")", ")", "\n", "output", "=", "mtf", ".", "reshape", "(", "output", ",", "batch_and_length_dims", "+", "[", "output_dim", "]", ")", "\n", "return", "output", ",", "loss", "*", "hparams", ".", "moe_loss_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.heterogeneous_moe.generate_heterogeneous_expert_masks": [[461, 517], ["max", "max", "numpy.zeros", "enumerate", "tensorflow.logging.info", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.convert_to_tensor", "mesh_tensorflow.import_tf_tensor", "numpy.zeros", "numpy.concatenate", "int", "int", "len", "tensorflow.logging.info", "int", "int"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["", "def", "generate_heterogeneous_expert_masks", "(", "\n", "mask_info", ",", "num_experts", ",", "experts_dim", ",", "mesh", ",", "expert_width", ")", ":", "\n", "  ", "\"\"\"Generates the heterogeous expert masks.\n\n  Example mask_info format:\n    mask_info = [{'percent_number': .5, 'layers': 1, 'width':1},\n                 {'percent_number': .5, 'layers': 2, 'width':2}]\n\n  Args:\n    mask_info: list of dicts.\n    num_experts: number of experts in the model\n    experts_dim: mtf dimension for experts (partitioned)\n    mesh: mesh object\n    expert_width: int, default expert width which will be modified by the mask\n\n  Returns:\n    mask of shape [moe_num_layers, num_experts, hidden_size].\n  \"\"\"", "\n", "# Get max num layers", "\n", "max_layers", "=", "max", "(", "[", "m", "[", "\"layers\"", "]", "for", "m", "in", "mask_info", "]", ")", "\n", "# Get max width", "\n", "max_width", "=", "max", "(", "[", "m", "[", "\"width\"", "]", "for", "m", "in", "mask_info", "]", ")", "\n", "# Will be shape [max_width, max_layers, num_experts]", "\n", "expert_mask", "=", "np", ".", "zeros", "(", "[", "max_width", ",", "max_layers", ",", "0", "]", ")", "\n", "for", "idx", ",", "mask_i", "in", "enumerate", "(", "mask_info", ")", ":", "\n", "    ", "if", "mask_i", "[", "\"percent_number\"", "]", "<", "1.0", ":", "\n", "      ", "num_experts_in_mask", "=", "int", "(", "num_experts", "*", "mask_i", "[", "\"percent_number\"", "]", ")", "\n", "", "else", ":", "\n", "      ", "num_experts_in_mask", "=", "int", "(", "mask_i", "[", "\"percent_number\"", "]", ")", "\n", "# if percent_number=1 either because homogeneous experts or just 1 expert", "\n", "# in which case num_experts_in_mask will be reset to num_experts", "\n", "# creating one homogeneous group", "\n", "", "if", "idx", "==", "(", "len", "(", "mask_info", ")", "-", "1", ")", ":", "# Last position", "\n", "      ", "num_experts_in_mask_tmp", "=", "num_experts", "-", "expert_mask", ".", "shape", "[", "2", "]", "\n", "if", "num_experts_in_mask_tmp", "!=", "num_experts_in_mask", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\n", "\"Expert layer probabilities do not evenly divide \"", "\n", "\"the number of experts: {} {}\"", ".", "format", "(", "\n", "num_experts_in_mask", ",", "num_experts_in_mask_tmp", ")", ")", "\n", "num_experts_in_mask", "=", "num_experts_in_mask_tmp", "\n", "", "", "mask", "=", "np", ".", "zeros", "(", "[", "int", "(", "max_width", ")", ",", "int", "(", "max_layers", ")", ",", "\n", "num_experts_in_mask", "]", ")", "\n", "# Zero out the last layers of the experts.", "\n", "mask", "[", ":", "(", "mask_i", "[", "\"width\"", "]", "*", "expert_width", ")", ",", ":", "mask_i", "[", "\"layers\"", "]", ",", ":", "]", "=", "1", "\n", "expert_mask", "=", "np", ".", "concatenate", "(", "[", "expert_mask", ",", "mask", "]", ",", "axis", "=", "2", ")", "# expert dim", "\n", "", "assert", "expert_mask", ".", "shape", "[", "2", "]", "==", "num_experts", "\n", "tf", ".", "logging", ".", "info", "(", "\"heterogeneous mask: {}\"", ".", "format", "(", "expert_mask", ")", ")", "\n", "\n", "# Now import the numpy mask into Mesh TF.", "\n", "layers_dim", "=", "mtf", ".", "Dimension", "(", "\"num_expert_layers\"", ",", "max_layers", ")", "\n", "width_dim", "=", "mtf", ".", "Dimension", "(", "\"expert_hidden\"", ",", "max_width", ")", "\n", "expert_mask_tf", "=", "tf", ".", "convert_to_tensor", "(", "expert_mask", ")", "\n", "expert_mask_mtf", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "tf_tensor", "=", "expert_mask_tf", ",", "\n", "shape", "=", "[", "width_dim", ",", "layers_dim", ",", "experts_dim", "]", ")", "\n", "return", "expert_mask_mtf", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.__init__": [[42, 66], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "embedding", ",", "start_token_id", ",", "end_token_id", ",", "\n", "length_projection_factor", ",", "vocab_dim", ")", ":", "\n", "    ", "\"\"\"Cluster constructor.\n\n    Args:\n      embedding: a FactorizedVocabEmbedding or transformer.VocabEmbedding, the\n        vocab embedding to use for the cluster.\n      start_token_id: an integer, the inclusive id of the first token in the\n        cluster.\n      end_token_id: an integer, the exclusive id of the last token in the\n        cluster.\n      length_projection_factor: a float between 0 and 1, the sequence length\n        dimension will be projected down to this number times the sequence\n        length dimension to contain the elements in this cluster. If the input\n        contains too many tokens in the cluster, tokens later in the input will\n        be ignored.\n      vocab_dim: an mtf.Dimension, the dimension the embedding uses as its\n        vocab.\n    \"\"\"", "\n", "self", ".", "_embedding", "=", "embedding", "\n", "self", ".", "_start_token_id", "=", "start_token_id", "\n", "self", ".", "_end_token_id", "=", "end_token_id", "\n", "self", ".", "_length_projection_factor", "=", "length_projection_factor", "\n", "self", ".", "_vocab_dim", "=", "vocab_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.end_token_id": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "end_token_id", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_end_token_id", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.length_projection_factor": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "length_projection_factor", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_length_projection_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.ids_to_embedding": [[75, 91], ["mesh_tensorflow.where", "mesh_tensorflow.where", "adaptive_softmax._Cluster._embedding.ids_to_embedding", "mesh_tensorflow.greater_equal", "mesh_tensorflow.less"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.ids_to_embedding", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less"], ["", "def", "ids_to_embedding", "(", "self", ",", "ids", ",", "context", ")", ":", "\n", "    ", "\"\"\"Ids to embeddings with ids not in cluster mapped to the zero vector.\"\"\"", "\n", "ids", "-=", "self", ".", "_start_token_id", "\n", "# The mtf.gather in the embedding's ids_to_embedding implementation will", "\n", "# cause the one hot representations of tokens greater than cluster vocab", "\n", "# dimension size to be the zero vector. Thus the embeddings for those tokens", "\n", "# will be the zero vector.", "\n", "ids", "=", "mtf", ".", "where", "(", "mtf", ".", "greater_equal", "(", "ids", ",", "0", ")", ",", "ids", ",", "self", ".", "_vocab_dim", ".", "size", ")", "\n", "# Handle the case of the head cluster where we will have entries at the end", "\n", "# corresponding to the tail clusters.", "\n", "ids", "=", "mtf", ".", "where", "(", "\n", "mtf", ".", "less", "(", "ids", ",", "self", ".", "_end_token_id", "-", "self", ".", "_start_token_id", ")", ",", "\n", "ids", ",", "\n", "self", ".", "_vocab_dim", ".", "size", ",", "\n", ")", "\n", "return", "self", ".", "_embedding", ".", "ids_to_embedding", "(", "ids", ",", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.get_cluster_mask": [[92, 97], ["mesh_tensorflow.logical_and", "mesh_tensorflow.greater_equal", "mesh_tensorflow.less"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_and", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less"], ["", "def", "get_cluster_mask", "(", "self", ",", "targets", ")", ":", "\n", "    ", "\"\"\"Computes mask over the targets masking out tokens not in the cluster.\"\"\"", "\n", "return", "mtf", ".", "logical_and", "(", "\n", "mtf", ".", "greater_equal", "(", "targets", ",", "self", ".", "_start_token_id", ")", ",", "\n", "mtf", ".", "less", "(", "targets", ",", "self", ".", "_end_token_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.get_cluster_length_dim": [[98, 102], ["math.ceil", "mesh_tensorflow.Dimension", "int"], "methods", ["None"], ["", "def", "get_cluster_length_dim", "(", "self", ",", "length_dim", ")", ":", "\n", "    ", "\"\"\"Returns dimension used instead of sequence length for the cluster.\"\"\"", "\n", "cluster_length", "=", "math", ".", "ceil", "(", "self", ".", "_length_projection_factor", "*", "length_dim", ".", "size", ")", "\n", "return", "mtf", ".", "Dimension", "(", "length_dim", ".", "name", ",", "int", "(", "cluster_length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.get_project_to_cluster_length": [[103, 111], ["cluster_mask.shape.get_dim_by_name", "adaptive_softmax._Cluster.get_cluster_length_dim", "mesh_tensorflow.cast", "mesh_tensorflow.one_hot", "mesh_tensorflow.cumsum", "mesh_tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.get_cluster_length_dim", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cumsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "get_project_to_cluster_length", "(", "self", ",", "cluster_mask", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"Returns projection from length dim to the shorter cluster length dim.\"\"\"", "\n", "seq_length_dim", "=", "cluster_mask", ".", "shape", ".", "get_dim_by_name", "(", "\"length\"", ")", "\n", "cluster_length_dim", "=", "self", ".", "get_cluster_length_dim", "(", "seq_length_dim", ")", "\n", "return", "mtf", ".", "cast", "(", "cluster_mask", ",", "dtype", ")", "*", "mtf", ".", "one_hot", "(", "\n", "mtf", ".", "cumsum", "(", "mtf", ".", "cast", "(", "cluster_mask", ",", "tf", ".", "int32", ")", ",", "seq_length_dim", ")", "-", "1", ",", "\n", "output_dim", "=", "cluster_length_dim", ",", "\n", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.compute_loss": [[112, 127], ["adaptive_softmax._Cluster._embedding.hidden_to_logits", "mesh_tensorflow.one_hot", "mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "mesh_tensorflow.layers.weights_nonzero", "mesh_tensorflow.reduce_sum", "decoder.loss_denominator"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.weights_nonzero", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer.loss_denominator"], ["", "def", "compute_loss", "(", "self", ",", "decoder", ",", "hidden", ",", "targets", ",", "context", ")", ":", "\n", "    ", "\"\"\"Computes the loss during training.\"\"\"", "\n", "logits", "=", "self", ".", "_embedding", ".", "hidden_to_logits", "(", "hidden", ",", "context", "=", "context", ")", "\n", "soft_targets", "=", "mtf", ".", "one_hot", "(", "\n", "targets", "-", "self", ".", "_start_token_id", ",", "\n", "self", ".", "_vocab_dim", ",", "\n", "dtype", "=", "context", ".", "activation_dtype", ")", "\n", "loss", "=", "mtf", ".", "layers", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", ",", "soft_targets", ",", "self", ".", "_vocab_dim", ",", "z_loss", "=", "decoder", ".", "z_loss", ")", "\n", "\n", "padding_mask", "=", "mtf", ".", "layers", ".", "weights_nonzero", "(", "\n", "targets", ",", "dtype", "=", "context", ".", "activation_dtype", ")", "\n", "\n", "return", "(", "mtf", ".", "reduce_sum", "(", "loss", "*", "padding_mask", ")", "/", "\n", "decoder", ".", "loss_denominator", "(", "targets", ",", "context", ".", "num_microbatches", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.compute_log_softmax": [[128, 132], ["adaptive_softmax._Cluster._embedding.hidden_to_logits", "mesh_tensorflow.log_softmax"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log_softmax"], ["", "def", "compute_log_softmax", "(", "self", ",", "hidden", ",", "context", ")", ":", "\n", "    ", "\"\"\"Returns the log softmax of logits computed from the hidden state.\"\"\"", "\n", "logits", "=", "self", ".", "_embedding", ".", "hidden_to_logits", "(", "hidden", ",", "context", "=", "context", ")", "\n", "return", "mtf", ".", "log_softmax", "(", "logits", ",", "reduced_dim", "=", "self", ".", "_vocab_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.get_log_softmax_prefix": [[133, 144], ["mesh_tensorflow.Dimension", "mesh_tensorflow.mtf_range", "mesh_tensorflow.where", "mesh_tensorflow.one_hot", "mesh_tensorflow.einsum", "mesh_tensorflow.less"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_range", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less"], ["", "def", "get_log_softmax_prefix", "(", "self", ",", "log_softmax", ",", "end_index", ")", ":", "\n", "    ", "\"\"\"Returns first end_index entries in log_softmax along the vocab dim.\"\"\"", "\n", "prefix_dim", "=", "mtf", ".", "Dimension", "(", "self", ".", "_vocab_dim", ".", "name", ",", "end_index", ")", "\n", "\n", "indices", "=", "mtf", ".", "mtf_range", "(", "\n", "log_softmax", ".", "mesh", ",", "dim", "=", "self", ".", "_vocab_dim", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "prefix_indices", "=", "mtf", ".", "where", "(", "mtf", ".", "less", "(", "indices", ",", "end_index", ")", ",", "indices", ",", "-", "1", ")", "\n", "projection", "=", "mtf", ".", "one_hot", "(", "\n", "prefix_indices", ",", "prefix_dim", ",", "dtype", "=", "log_softmax", ".", "dtype", ")", "\n", "\n", "return", "mtf", ".", "einsum", "(", "[", "log_softmax", ",", "projection", "]", ",", "reduced_dims", "=", "[", "self", ".", "_vocab_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.get_log_softmax_value": [[145, 148], ["mesh_tensorflow.gather"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather"], ["", "def", "get_log_softmax_value", "(", "self", ",", "log_softmax", ",", "index", ")", ":", "\n", "    ", "\"\"\"Returns the entry at index of the log_softmax along the vocab dim.\"\"\"", "\n", "return", "mtf", ".", "gather", "(", "log_softmax", ",", "index", ",", "dim", "=", "self", ".", "_vocab_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding.__init__": [[182, 262], ["len", "enumerate", "sum", "ValueError", "adaptive_softmax.AdaptiveSoftmaxVocabEmbedding._create_cluster", "adaptive_softmax.AdaptiveSoftmaxVocabEmbedding._tail_clusters.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding._create_cluster"], ["def", "__init__", "(", "self", ",", "\n", "mesh", ":", "mtf", ".", "Mesh", ",", "\n", "vocab_dim", ":", "mtf", ".", "Dimension", ",", "\n", "output_dim", ":", "mtf", ".", "Dimension", ",", "\n", "variable_dtype", ":", "mtf", ".", "VariableDType", ",", "\n", "name", ":", "str", ",", "\n", "ensemble_dim", ":", "mtf", ".", "Dimension", ",", "\n", "clusters", ":", "Sequence", "[", "Dict", "[", "str", ",", "Union", "[", "int", ",", "float", "]", "]", "]", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "    ", "\"\"\"Configurable embedding for the vocabulary.\n\n    Most of the arguments get passed to `mtf.layers.embedding_weights`.\n\n    The clustering parameters are specified by the `clusters` argument. It is a\n    list of dicts with keys:\n      - token_count: The number of tokens in the cluster.\n      - embedding_size: (optional) The hidden dimension size of the cluster's\n        embedding. Defaults to the model dimension size.\n      - length_projection_factor: (optional) Since MTF can't handle variable\n        length dimensions, we project from the sequence length dimension to a\n        dimension of size length_projection_factor * sequence_length during\n        training. This can save compute time and resources if the cluster has\n        many tokens that appear infrequently. If all of the tokens belonging to\n        the cluster cannot fit within this reduced dimension, some will be\n        discarded and ignored for the purposes of computing loss. Defaults 1.\n        Ignored for the head (first) cluster and not during training.\n\n    The first cluster will become the head cluster.\n\n    For example, let's say we have a vocab size of 500k and pass as clusters:\n      [\n        {\"token_count\": 50000,  \"embedding_size\": 1024},\n        {\"token_count\": 100000, \"embedding_size\": 256},\n        {\"token_count\": 350000, \"embedding_size\": 64},\n      ]\n    Then tokens with ids 0 (inclusive) to 50k (exclusive) will be in the first\n    cluster with embedding size of 1024, tokens with ids 50k to 150k will be in\n    the second cluster with embedding size of 256, and tokens with ids 150k to\n    500k will be in the third cluster with embedding size of 64.\n\n    Args:\n      mesh: a mtf.Mesh, the mesh used to layout the tensors.\n      vocab_dim: a mtf.Dimension, the dimension corresponding to vocabulary.\n      output_dim: a mtf.Dimension, the dimension corresponding to the model\n        hidden states.\n      variable_dtype: a mtf.VariableDType, the datatype information for the\n        variables used in the embedding tensors.\n      name: a string, a name to base variable names off of.\n      ensemble_dim: a mtf.Dimension, the dimension used for ensembling.\n        Absolutely no guarantees that this code will work with ensembling.\n      clusters: a list(dict), specification of the clusters. See above for more\n        information.\n\n    Raises:\n      ValueError: The sum of the token counts across the clusters does not equal\n        the vocabulary size or a length_projection_factor is not in the range\n        (0, 1].\n    \"\"\"", "\n", "self", ".", "_mesh", "=", "mesh", "\n", "self", ".", "_variable_dtype", "=", "variable_dtype", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_ensemble_dim", "=", "ensemble_dim", "\n", "self", ".", "_vocab_dim", "=", "vocab_dim", "\n", "self", ".", "_output_dim", "=", "output_dim", "\n", "self", ".", "_num_clusters", "=", "len", "(", "clusters", ")", "\n", "\n", "token_counts", "=", "[", "cluster", "[", "\"token_count\"", "]", "for", "cluster", "in", "clusters", "]", "\n", "if", "sum", "(", "token_counts", ")", "!=", "vocab_dim", ".", "size", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"The cluster token counts {} do not sum to the vocab size {}.\"", ".", "format", "(", "\n", "token_counts", ",", "vocab_dim", ".", "size", ")", ")", "\n", "\n", "", "self", ".", "_tail_clusters", "=", "[", "]", "\n", "start_token_id", "=", "0", "\n", "for", "i", ",", "cluster_spec", "in", "enumerate", "(", "clusters", ")", ":", "\n", "      ", "cluster", "=", "self", ".", "_create_cluster", "(", "cluster_spec", ",", "i", ",", "start_token_id", ")", "\n", "if", "i", "==", "0", ":", "\n", "        ", "self", ".", "_head_cluster", "=", "cluster", "\n", "", "else", ":", "\n", "        ", "self", ".", "_tail_clusters", ".", "append", "(", "cluster", ")", "\n", "", "start_token_id", "+=", "cluster_spec", "[", "\"token_count\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding._create_cluster": [[263, 305], ["cluster_spec.get", "cluster_spec.get", "adaptive_softmax._Cluster", "ValueError", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.transformer.transformer.VocabEmbedding", "mesh_tensorflow.transformer.vocab_embeddings.FactorizedVocabEmbedding"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get"], ["", "", "def", "_create_cluster", "(", "self", ",", "cluster_spec", ",", "index", ",", "start_token_id", ")", ":", "\n", "    ", "\"\"\"Creates a cluster given its spec.\"\"\"", "\n", "token_count", "=", "cluster_spec", "[", "\"token_count\"", "]", "\n", "embedding_size", "=", "cluster_spec", ".", "get", "(", "\"embedding_size\"", ",", "self", ".", "_output_dim", ".", "size", ")", "\n", "length_projection_factor", "=", "cluster_spec", ".", "get", "(", "\"length_projection_factor\"", ",", "1", ")", "\n", "if", "length_projection_factor", "<=", "0", "or", "length_projection_factor", ">", "1", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Invalid length_projection_factor of {}. Must be in range (0, 1]\"", "\n", ".", "format", "(", "length_projection_factor", ")", ")", "\n", "\n", "", "if", "index", "==", "0", ":", "\n", "# Include the entries for the tail clusters in the head cluster \"vocab\".", "\n", "      ", "cluster_vocab_dim", "=", "mtf", ".", "Dimension", "(", "self", ".", "_vocab_dim", ".", "name", ",", "\n", "token_count", "+", "self", ".", "_num_clusters", "-", "1", ")", "\n", "", "else", ":", "\n", "      ", "cluster_vocab_dim", "=", "mtf", ".", "Dimension", "(", "self", ".", "_vocab_dim", ".", "name", ",", "token_count", ")", "\n", "\n", "", "if", "embedding_size", "==", "self", ".", "_output_dim", ".", "size", ":", "\n", "# In this case we don't need to up project from the embedding space to", "\n", "# the model state space.", "\n", "      ", "cluster_embedding", "=", "transformer", ".", "VocabEmbedding", "(", "\n", "mesh", "=", "self", ".", "_mesh", ",", "\n", "vocab_dim", "=", "cluster_vocab_dim", ",", "\n", "output_dim", "=", "self", ".", "_output_dim", ",", "\n", "variable_dtype", "=", "self", ".", "_variable_dtype", ",", "\n", "name", "=", "\"{}_{}\"", ".", "format", "(", "self", ".", "_name", ",", "index", ")", ",", "\n", "ensemble_dim", "=", "self", ".", "_ensemble_dim", ")", "\n", "", "else", ":", "\n", "      ", "cluster_embedding", "=", "vocab_embeddings", ".", "FactorizedVocabEmbedding", "(", "\n", "mesh", "=", "self", ".", "_mesh", ",", "\n", "vocab_dim", "=", "cluster_vocab_dim", ",", "\n", "output_dim", "=", "self", ".", "_output_dim", ",", "\n", "variable_dtype", "=", "self", ".", "_variable_dtype", ",", "\n", "name", "=", "\"{}_{}\"", ".", "format", "(", "self", ".", "_name", ",", "index", ")", ",", "\n", "ensemble_dim", "=", "self", ".", "_ensemble_dim", ",", "\n", "inner_dimension_size", "=", "embedding_size", ")", "\n", "", "return", "_Cluster", "(", "\n", "embedding", "=", "cluster_embedding", ",", "\n", "start_token_id", "=", "start_token_id", ",", "\n", "end_token_id", "=", "start_token_id", "+", "token_count", ",", "\n", "length_projection_factor", "=", "length_projection_factor", ",", "\n", "vocab_dim", "=", "cluster_vocab_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding.ids_to_embedding": [[306, 312], ["sum", "cluster.ids_to_embedding"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.ids_to_embedding"], ["", "def", "ids_to_embedding", "(", "self", ",", "ids", ":", "mtf", ".", "Tensor", ",", "context", ")", "->", "mtf", ".", "Tensor", ":", "\n", "    ", "all_clusters", "=", "self", ".", "_tail_clusters", "+", "[", "self", ".", "_head_cluster", "]", "\n", "# Ids not in each cluster will be mapped to the zero vector. Since clusters", "\n", "# are disjoint, this sum is correct.", "\n", "return", "sum", "(", "\n", "cluster", ".", "ids_to_embedding", "(", "ids", ",", "context", ")", "for", "cluster", "in", "all_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding.hidden_to_logits": [[313, 337], ["adaptive_softmax.AdaptiveSoftmaxVocabEmbedding._hidden_to_logits"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding._hidden_to_logits"], ["", "def", "hidden_to_logits", "(", "self", ",", "hidden", ":", "mtf", ".", "Tensor", ",", "\n", "context", ":", "transformer", ".", "Context", ")", "->", "mtf", ".", "Tensor", ":", "\n", "    ", "\"\"\"Function called by mtf transformer to get the logits.\n\n    The benefit from the adaptive softmax comes from not having to compute the\n    logits over all of the vocab during training. Thus, we use the somewhat\n    hacky solution of returning the hidden states during training and then using\n    them to compute the loss in a custom loss function.\n\n    When not training, this method will be true to its name as return the\n    logits corresponding to the hidden state.\n\n    Args:\n      hidden: an mtf.Tensor, hidden model states of the final decoder layer.\n      context: a transformer.Context, the context used for the call to the\n        transformer.\n\n    Returns:\n      an mtf.Tensor\n    \"\"\"", "\n", "if", "context", ".", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "return", "hidden", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_hidden_to_logits", "(", "hidden", ",", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding._hidden_to_logits": [[338, 353], ["adaptive_softmax.AdaptiveSoftmaxVocabEmbedding._head_cluster.compute_log_softmax", "enumerate", "mesh_tensorflow.concat", "adaptive_softmax.AdaptiveSoftmaxVocabEmbedding._head_cluster.get_log_softmax_prefix", "cluster.compute_log_softmax", "adaptive_softmax.AdaptiveSoftmaxVocabEmbedding._head_cluster.get_log_softmax_value", "logits.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.compute_log_softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.get_log_softmax_prefix", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.compute_log_softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.get_log_softmax_value"], ["", "", "def", "_hidden_to_logits", "(", "self", ",", "hidden", ",", "context", ")", ":", "\n", "    ", "\"\"\"Actually compute the logits over the entire vocab.\"\"\"", "\n", "head_size", "=", "self", ".", "_head_cluster", ".", "end_token_id", "\n", "# Note that computing the log softmax is equivalent to computing the logits.", "\n", "head_log_softmax", "=", "self", ".", "_head_cluster", ".", "compute_log_softmax", "(", "hidden", ",", "context", ")", "\n", "logits", "=", "[", "\n", "self", ".", "_head_cluster", ".", "get_log_softmax_prefix", "(", "head_log_softmax", ",", "head_size", ")", "\n", "]", "\n", "\n", "for", "i", ",", "cluster", "in", "enumerate", "(", "self", ".", "_tail_clusters", ")", ":", "\n", "      ", "tail_log_softmax", "=", "cluster", ".", "compute_log_softmax", "(", "hidden", ",", "context", ")", "\n", "cluster_softmax", "=", "self", ".", "_head_cluster", ".", "get_log_softmax_value", "(", "\n", "head_log_softmax", ",", "head_size", "+", "i", ")", "\n", "logits", ".", "append", "(", "cluster_softmax", "+", "tail_log_softmax", ")", "\n", "", "return", "mtf", ".", "concat", "(", "logits", ",", "concat_dim_name", "=", "self", ".", "_vocab_dim", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding.compute_loss": [[354, 395], ["mesh_tensorflow.Dimension", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.where", "adaptive_softmax.AdaptiveSoftmaxVocabEmbedding._head_cluster.compute_loss", "cluster.get_cluster_mask", "tail_cluster_masks.append", "cluster.compute_loss", "len", "mesh_tensorflow.stack", "mesh_tensorflow.cast", "mesh_tensorflow.where", "mesh_tensorflow.where", "cluster.get_project_to_cluster_length", "mesh_tensorflow.einsum", "mesh_tensorflow.einsum", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "enumerate", "targets.shape.get_dim_by_name", "hidden.shape.get_dim_by_name"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding.compute_loss", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.get_cluster_mask", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding.compute_loss", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax._Cluster.get_project_to_cluster_length", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name"], ["", "def", "compute_loss", "(", "self", ",", "decoder", ":", "transformer", ".", "Unitransformer", ",", "\n", "hidden", ":", "mtf", ".", "Tensor", ",", "targets", ":", "mtf", ".", "Tensor", ",", "\n", "context", ":", "transformer", ".", "Context", ")", "->", "mtf", ".", "Tensor", ":", "\n", "    ", "\"\"\"Returns the loss without computing a softmax over the entire vocab.\"\"\"", "\n", "loss", "=", "0", "\n", "tail_cluster_masks", "=", "[", "]", "\n", "for", "cluster", "in", "self", ".", "_tail_clusters", ":", "\n", "      ", "cluster_mask", "=", "cluster", ".", "get_cluster_mask", "(", "targets", ")", "\n", "tail_cluster_masks", ".", "append", "(", "cluster_mask", ")", "\n", "\n", "if", "cluster", ".", "length_projection_factor", "==", "1", ":", "\n", "        ", "targets_in_cluster", "=", "mtf", ".", "where", "(", "cluster_mask", ",", "targets", ",", "0", ")", "\n", "hidden_in_cluster", "=", "mtf", ".", "where", "(", "cluster_mask", ",", "hidden", ",", "0", ")", "\n", "", "else", ":", "\n", "# TODO(mmatena): Unfold the batch dim to get a super long sequence dim", "\n", "# to reduce the risk of overflowing the projection.", "\n", "        ", "proj_to_cluster_len", "=", "cluster", ".", "get_project_to_cluster_length", "(", "\n", "cluster_mask", ",", "dtype", "=", "targets", ".", "dtype", ")", "\n", "targets_in_cluster", "=", "mtf", ".", "einsum", "(", "\n", "[", "proj_to_cluster_len", ",", "targets", "]", ",", "\n", "reduced_dims", "=", "[", "targets", ".", "shape", ".", "get_dim_by_name", "(", "\"length\"", ")", "]", ")", "\n", "hidden_in_cluster", "=", "mtf", ".", "einsum", "(", "\n", "[", "mtf", ".", "cast", "(", "proj_to_cluster_len", ",", "hidden", ".", "dtype", ")", ",", "hidden", "]", ",", "\n", "reduced_dims", "=", "[", "hidden", ".", "shape", ".", "get_dim_by_name", "(", "\"length\"", ")", "]", ")", "\n", "\n", "", "loss", "+=", "cluster", ".", "compute_loss", "(", "decoder", ",", "hidden_in_cluster", ",", "\n", "targets_in_cluster", ",", "context", ")", "\n", "\n", "", "tail_clusters_dim", "=", "mtf", ".", "Dimension", "(", "\"tail_clusters\"", ",", "len", "(", "tail_cluster_masks", ")", ")", "\n", "tail_node_targets", "=", "mtf", ".", "reduce_sum", "(", "\n", "mtf", ".", "stack", "(", "[", "(", "self", ".", "_head_cluster", ".", "end_token_id", "+", "i", ")", "*", "\n", "mtf", ".", "cast", "(", "mask", ",", "targets", ".", "dtype", ")", "\n", "for", "i", ",", "mask", "in", "enumerate", "(", "tail_cluster_masks", ")", "]", ",", "\n", "tail_clusters_dim", ".", "name", ")", ",", "\n", "reduced_dim", "=", "tail_clusters_dim", ")", "\n", "head_targets", "=", "mtf", ".", "where", "(", "\n", "mtf", ".", "cast", "(", "tail_node_targets", ",", "tf", ".", "bool", ")", ",", "tail_node_targets", ",", "targets", ")", "\n", "loss", "+=", "self", ".", "_head_cluster", ".", "compute_loss", "(", "decoder", ",", "hidden", ",", "head_targets", ",", "\n", "context", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.adaptive_softmax_loss_fn": [[397, 424], ["vocab_embedding.compute_loss"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding.compute_loss"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "adaptive_softmax_loss_fn", "(", "decoder", ":", "transformer", ".", "Unitransformer", ",", "\n", "context", ":", "transformer", ".", "Context", ",", "logits", ":", "mtf", ".", "Tensor", ",", "\n", "targets", ":", "mtf", ".", "Tensor", ",", "\n", "output_vocab_dim", ":", "mtf", ".", "Dimension", ")", "->", "mtf", ".", "Tensor", ":", "\n", "  ", "\"\"\"Custom loss to use when training with an adaptive softmax.\n\n  Embedding and softmax weights must be shared in order for this function to\n  work. Note that label smoothing and loss_on_targets_only is not supported and\n  will be silently ignored.\n\n  Args:\n    decoder: a transformer.Unitransformer\n    context: a transformer.Context\n    logits: an mtf.Tensor, note that this will actually be the hidden state of\n      the final decoder layer\n    targets: an mtf.Tensor\n    output_vocab_dim: an mtf.Dimension\n\n  Returns:\n    the loss\n  \"\"\"", "\n", "del", "output_vocab_dim", "\n", "hidden", "=", "logits", "\n", "vocab_embedding", "=", "context", ".", "shared_params", "[", "\"embedding\"", "]", "\n", "return", "vocab_embedding", ".", "compute_loss", "(", "\n", "decoder", ",", "hidden", "=", "hidden", ",", "targets", "=", "targets", ",", "context", "=", "context", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.memory_layers.ProductKeyValueMemory.__init__": [[32, 43], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "key_size", ":", "int", "=", "gin", ".", "REQUIRED", ",", "\n", "n_keys", ":", "int", "=", "gin", ".", "REQUIRED", ",", "\n", "n_heads", ":", "int", "=", "gin", ".", "REQUIRED", ",", "\n", "knn", ":", "int", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "    ", "\"\"\"Creates a ProductKeyValueMemory layer.\"\"\"", "\n", "self", ".", "key_size", "=", "key_size", "\n", "self", ".", "n_keys", "=", "n_keys", "\n", "self", ".", "n_values", "=", "n_keys", "**", "2", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "knn", "=", "knn", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.memory_layers.ProductKeyValueMemory.call": [[44, 89], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.get_variable", "mesh_tensorflow.layers.embedding_weights", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.layer_norm", "memory_layers.ProductKeyValueMemory.get_indices", "mesh_tensorflow.softmax", "mesh_tensorflow.gather", "mesh_tensorflow.einsum", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.layer_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.memory_layers.ProductKeyValueMemory.get_indices", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ":", "mtf", ".", "Tensor", ")", "->", "mtf", ".", "Tensor", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "# Initialize Memory Keys and Values", "\n", "n_key_dim", "=", "mtf", ".", "Dimension", "(", "\"n_keys\"", ",", "self", ".", "n_keys", ")", "\n", "n_value_dim", "=", "mtf", ".", "Dimension", "(", "\"n_values\"", ",", "self", ".", "n_values", ")", "\n", "key_dim", "=", "mtf", ".", "Dimension", "(", "\"key\"", ",", "self", ".", "key_size", "//", "2", ")", "\n", "value_dim", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "head_dim", "=", "mtf", ".", "Dimension", "(", "\"n_heads\"", ",", "self", ".", "n_heads", ")", "\n", "product_dim", "=", "mtf", ".", "Dimension", "(", "\"product_key\"", ",", "2", ")", "\n", "keys", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "name", "=", "\"keys\"", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "head_dim", ",", "product_dim", ",", "n_key_dim", ",", "key_dim", "]", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "values", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "context", ".", "mesh", ",", "\n", "vocab_dim", "=", "n_value_dim", ",", "\n", "output_dim", "=", "value_dim", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"values\"", ")", "\n", "\n", "# Compute query", "\n", "new_dims", "=", "[", "head_dim", ",", "product_dim", ",", "key_dim", "]", "\n", "reduce_dims", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", "\n", "query", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "\n", "new_dims", ",", "\n", "reduced_dims", "=", "reduce_dims", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"query\"", ")", "# [b, l, h, 2, k]", "\n", "\n", "# Note: We use layer norm instead of batch norm to normalize queries.", "\n", "# The main advantage is that layer norm works well with the codebase", "\n", "# whereas the implementation of batch norm requires handling of tf ops.", "\n", "query", "=", "mtf", ".", "layers", ".", "layer_norm", "(", "query", ",", "query", ".", "shape", ".", "dims", "[", "-", "1", "]", ")", "\n", "\n", "# Retrieve indices and scores", "\n", "scores", ",", "indices", "=", "self", ".", "get_indices", "(", "keys", ",", "query", ")", "# [b, l, h, k]", "\n", "scores", "=", "mtf", ".", "softmax", "(", "scores", ",", "reduced_dim", "=", "scores", ".", "shape", ".", "dims", "[", "-", "1", "]", ")", "\n", "top_values", "=", "mtf", ".", "gather", "(", "values", ",", "indices", ",", "n_value_dim", ")", "# [b, l, h, k, v]", "\n", "out_values", "=", "mtf", ".", "einsum", "(", "[", "top_values", ",", "scores", "]", ",", "\n", "reduced_dims", "=", "scores", ".", "shape", ".", "dims", "[", "-", "2", ":", "]", ")", "# [b, l, v]", "\n", "return", "out_values", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.memory_layers.ProductKeyValueMemory.get_indices": [[90, 119], ["mesh_tensorflow.Shape", "mesh_tensorflow.einsum", "mesh_tensorflow.Dimension", "mesh_tensorflow.top_k", "mesh_tensorflow.Dimension", "mesh_tensorflow.unstack", "mesh_tensorflow.rename_dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.add", "mesh_tensorflow.replace_dimensions", "mesh_tensorflow.unstack", "mesh_tensorflow.multiply", "mesh_tensorflow.rename_dimension", "mesh_tensorflow.add", "mesh_tensorflow.replace_dimensions", "mesh_tensorflow.top_k", "mesh_tensorflow.gather"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.unstack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.unstack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.multiply", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.top_k", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather"], ["", "def", "get_indices", "(", "self", ",", "keys", ":", "mtf", ".", "Tensor", ",", "\n", "query", ":", "mtf", ".", "Tensor", ")", "->", "Tuple", "[", "mtf", ".", "Tensor", ",", "mtf", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"Generate score and indices for the query.\"\"\"", "\n", "score_shape", "=", "mtf", ".", "Shape", "(", "query", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "+", "keys", ".", "shape", ".", "dims", "[", "2", ":", "3", "]", ")", "\n", "scores", "=", "mtf", ".", "einsum", "(", "[", "query", ",", "keys", "]", ",", "\n", "output_shape", "=", "score_shape", ")", "# [b, l, h, 2, n_keys]", "\n", "knn_dim", "=", "mtf", ".", "Dimension", "(", "\"knn\"", ",", "self", ".", "knn", ")", "\n", "scores", ",", "indices", "=", "mtf", ".", "top_k", "(", "scores", ",", "score_shape", ".", "dims", "[", "-", "1", "]", ",", "\n", "knn_dim", ")", "# [b, l, h, 2, knn]", "\n", "\n", "# Computes the top cartesian products and their indices", "\n", "knn_square_dim", "=", "mtf", ".", "Dimension", "(", "\"knn_square_dim\"", ",", "self", ".", "knn", "**", "2", ")", "\n", "scores1", ",", "scores2", "=", "mtf", ".", "unstack", "(", "scores", ",", "scores", ".", "shape", ".", "dims", "[", "-", "2", "]", ")", "\n", "scores2", "=", "mtf", ".", "rename_dimension", "(", "scores2", ",", "\"knn\"", ",", "\"knn2\"", ")", "\n", "out_shape", "=", "mtf", ".", "Shape", "(", "scores1", ".", "shape", ".", "dims", "+", "scores2", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ")", "\n", "all_scores", "=", "mtf", ".", "add", "(", "scores1", ",", "scores2", ",", "output_shape", "=", "out_shape", ")", "\n", "all_scores", "=", "mtf", ".", "replace_dimensions", "(", "all_scores", ",", "out_shape", "[", "-", "2", ":", "]", ",", "\n", "knn_square_dim", ")", "\n", "\n", "indices1", ",", "indices2", "=", "mtf", ".", "unstack", "(", "indices", ",", "indices", ".", "shape", ".", "dims", "[", "-", "2", "]", ")", "\n", "indices1", "=", "mtf", ".", "multiply", "(", "indices1", ",", "self", ".", "n_keys", ")", "\n", "indices2", "=", "mtf", ".", "rename_dimension", "(", "indices2", ",", "\"knn\"", ",", "\"knn2\"", ")", "\n", "all_indices", "=", "mtf", ".", "add", "(", "indices1", ",", "indices2", ",", "output_shape", "=", "out_shape", ")", "\n", "all_indices", "=", "mtf", ".", "replace_dimensions", "(", "all_indices", ",", "out_shape", "[", "-", "2", ":", "]", ",", "\n", "knn_square_dim", ")", "\n", "\n", "scores", ",", "best_indices", "=", "mtf", ".", "top_k", "(", "all_scores", ",", "all_scores", ".", "shape", ".", "dims", "[", "-", "1", "]", ",", "\n", "knn_dim", ")", "\n", "return", "scores", ",", "mtf", ".", "gather", "(", "all_indices", ",", "best_indices", ",", "knn_square_dim", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.__init__": [[35, 49], ["text_encoder.SubwordTextEncoder"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "filepath", ")", ":", "\n", "    ", "\"\"\"Create a T2tVocabulary.\n\n    Args:\n      filepath: a string\n    \"\"\"", "\n", "# Only import tensor2tensor if necessary.", "\n", "from", "tensor2tensor", ".", "data_generators", "import", "text_encoder", "# pylint: disable=g-import-not-at-top", "\n", "from", "tensor2tensor", ".", "data_generators", ".", "ops", "import", "subword_text_encoder_ops", "# pylint: disable=g-import-not-at-top", "\n", "\n", "self", ".", "_filepath", "=", "filepath", "\n", "self", ".", "_subword_text_encoder", "=", "text_encoder", ".", "SubwordTextEncoder", "(", "filepath", ")", "\n", "self", ".", "_subword_text_encoder_encode", "=", "(", "\n", "subword_text_encoder_ops", ".", "subword_text_encoder_encode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.vocab_size": [[50, 58], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"Number of ids (including 0=PAD and 1=EOS).\n\n    Returns:\n      an integer\n    \"\"\"", "\n", "return", "self", ".", "_subword_text_encoder", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode": [[59, 68], ["t2t_vocabulary.T2tVocabulary._subword_text_encoder.encode"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode"], ["", "def", "encode", "(", "self", ",", "s", ")", ":", "\n", "    ", "\"\"\"Encode a python string as a list of integers.\n\n    Args:\n      s: a string\n    Returns:\n      a list of integers (not terminated by EOS)\n    \"\"\"", "\n", "return", "self", ".", "_subword_text_encoder", ".", "encode", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.decode": [[69, 78], ["t2t_vocabulary.T2tVocabulary._subword_text_encoder.decode"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode"], ["", "def", "decode", "(", "self", ",", "ids", ")", ":", "\n", "    ", "\"\"\"Decode a list of integers to a python string.\n\n    Args:\n      ids: a list of integers (not terminated by EOS)\n    Returns:\n      a string\n    \"\"\"", "\n", "return", "self", ".", "_subword_text_encoder", ".", "decode", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode_tf": [[79, 92], ["t2t_vocabulary.T2tVocabulary._subword_text_encoder_encode"], "methods", ["None"], ["", "def", "encode_tf", "(", "self", ",", "s", ")", ":", "\n", "    ", "\"\"\"Encode a tf.Scalar string to a tf.Tensor.\n\n    This will be necessary for on-the-fly tokenization.\n\n    Args:\n      s: a tf.Scalar with dtype tf.string\n    Returns:\n      a 1d tf.Tensor with dtype tf.int32\n    \"\"\"", "\n", "ids", "=", "self", ".", "_subword_text_encoder_encode", "(", "s", ",", "self", ".", "_filepath", ")", "\n", "# the c++ op apppends 1=EOS - drop it.", "\n", "return", "ids", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.get_t2t_vocabulary": [[94, 98], ["t2t_vocabulary.T2tVocabulary", "os.path.join"], "function", ["None"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "get_t2t_vocabulary", "(", "data_dir", "=", "gin", ".", "REQUIRED", ",", "\n", "vocabulary_filename", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "  ", "return", "T2tVocabulary", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "vocabulary_filename", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pack_or_pad": [[97, 133], ["set", "dataset.trim_and_pad_dataset", "dataset.pack_dataset", "dataset.ensure_dataset_eos", "tensorflow.data.get_output_shapes().keys", "isinstance", "tensorflow.data.get_output_shapes"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.trim_and_pad_dataset", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pack_dataset", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.ensure_dataset_eos"], ["@", "gin", ".", "configurable", "\n", "def", "pack_or_pad", "(", "\n", "dataset", ",", "length", ",", "pack", "=", "True", ",", "feature_keys", "=", "None", ",", "ensure_eos", "=", "False", ")", ":", "\n", "  ", "\"\"\"Creates a 'packed' version of a dataset or pads examples with zeros.\n\n  If pack=True, then multiple examples concatenated to form one combined\n  example with the given length.\n\n  If pack=False, then examples are padded with zeros to 'length'.\n\n  Args:\n    dataset: a tf.data.Dataset\n    length: an integer or a dict from feature-key to integer\n    pack: a boolean, whether to pack (True) or pad (False).\n    feature_keys: (optional) collection of strings, the feature names to limit\n      packing or padding to. Packing will filter out other features whereas\n      padding will pass them through unchanged. Defaults to all features.\n    ensure_eos: a boolean or collection of strings, whether to replace the final\n      token with EOS=1 if it is not PAD=0. If True, will be applied to all keys\n      in `feature_keys`. If False, will be applied to none. If a collection of\n      strings, will only be applied to these features in the collection.\n  Returns:\n    a tf.data.Dataset where all features have fixed shape [length].\n  \"\"\"", "\n", "feature_keys", "=", "set", "(", "feature_keys", "or", "tf", ".", "data", ".", "get_output_shapes", "(", "dataset", ")", ".", "keys", "(", ")", ")", "\n", "\n", "if", "pack", ":", "\n", "    ", "dataset", "=", "pack_dataset", "(", "dataset", ",", "length", "=", "length", ",", "keys", "=", "feature_keys", ")", "\n", "# Pad/trim length of each example to length.", "\n", "", "dataset", "=", "trim_and_pad_dataset", "(", "\n", "dataset", ",", "length", "=", "length", ",", "feature_keys", "=", "feature_keys", ")", "\n", "if", "ensure_eos", ":", "\n", "    ", "eos_keys", "=", "feature_keys", "if", "isinstance", "(", "ensure_eos", ",", "bool", ")", "else", "ensure_eos", "\n", "dataset", "=", "ensure_dataset_eos", "(", "dataset", ",", "eos_keys", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.ensure_dataset_eos": [[135, 153], ["dataset.map", "set", "tensorflow.concat", "tensorflow.data.get_output_shapes().keys", "tensorflow.clip_by_value", "dataset.ensure_dataset_eos._ensure_eos"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat"], ["", "def", "ensure_dataset_eos", "(", "dataset", ",", "feature_keys", "=", "None", ")", ":", "\n", "  ", "\"\"\"Replaces the final token of features with EOS=1 if it is not PAD=0.\n\n  Args:\n    dataset: a tf.data.Dataset\n    feature_keys: (optional) collection of strings, the feature names to ensure\n      end with EOS or padding. Defaults to all features.\n  Returns:\n    a tf.data.Dataset where all specified features end with PAD=0 or EOS=1.\n  \"\"\"", "\n", "feature_keys", "=", "feature_keys", "or", "set", "(", "tf", ".", "data", ".", "get_output_shapes", "(", "dataset", ")", ".", "keys", "(", ")", ")", "\n", "def", "_ensure_eos", "(", "k", ",", "v", ")", ":", "\n", "    ", "if", "k", "not", "in", "feature_keys", ":", "\n", "      ", "return", "v", "\n", "", "return", "tf", ".", "concat", "(", "[", "v", "[", "0", ":", "-", "1", "]", ",", "tf", ".", "clip_by_value", "(", "v", "[", "-", "1", ":", "]", ",", "0", ",", "1", ")", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "dataset", ".", "map", "(", "\n", "lambda", "ex", ":", "{", "k", ":", "_ensure_eos", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "ex", ".", "items", "(", ")", "}", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.encode_dataset": [[155, 167], ["dataset.map", "vocabulary.encode_tf", "features.items"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode_tf"], ["", "def", "encode_dataset", "(", "dataset", ",", "vocabulary", ")", ":", "\n", "  ", "\"\"\"Encode from strings to token ids.\n\n  Args:\n    dataset: a tf.data.Dataset with string values.\n    vocabulary: a mesh_tensorflow.transformer.Vocabulary\n  Returns:\n    a tf.data.Dataset with integer-vector values ending in EOS=1\n  \"\"\"", "\n", "def", "encode", "(", "features", ")", ":", "\n", "    ", "return", "{", "k", ":", "vocabulary", ".", "encode_tf", "(", "v", ")", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "}", "\n", "", "return", "dataset", ".", "map", "(", "encode", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pretokenized_tfds_dataset": [[169, 214], ["tensorflow_datasets.load", "dataset.shuffle.map", "dataset.pack_or_pad", "dataset.shuffle.repeat", "dataset.shuffle.shuffle", "tensorflow.concat", "dataset.pretokenized_tfds_dataset.shift_and_append_eos"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pack_or_pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat"], ["", "@", "gin", ".", "configurable", "\n", "def", "pretokenized_tfds_dataset", "(", "dataset_name", "=", "gin", ".", "REQUIRED", ",", "\n", "text2self", "=", "gin", ".", "REQUIRED", ",", "\n", "tfds_data_dir", "=", "gin", ".", "REQUIRED", ",", "\n", "dataset_split", "=", "gin", ".", "REQUIRED", ",", "\n", "batch_size", "=", "None", ",", "\n", "sequence_length", "=", "gin", ".", "REQUIRED", ",", "\n", "vocabulary", "=", "None", ")", ":", "\n", "  ", "\"\"\"Reads a tensorflow_datasets dataset.\n\n  Args:\n    dataset_name: a string\n    text2self: a boolean\n    tfds_data_dir: a boolean\n    dataset_split: a string\n    batch_size: an integer, DEPRECATED\n    sequence_length: an integer\n    vocabulary: ignored\n  Returns:\n    a tf.data.Dataset of batches\n  \"\"\"", "\n", "del", "batch_size", "\n", "del", "vocabulary", "\n", "dataset", "=", "tfds", ".", "load", "(", "\n", "dataset_name", ",", "\n", "split", "=", "dataset_split", ",", "\n", "as_supervised", "=", "True", ",", "\n", "data_dir", "=", "tfds_data_dir", ",", "\n", "shuffle_files", "=", "dataset_split", "==", "\"train\"", ")", "\n", "if", "dataset_split", "==", "\"train\"", ":", "\n", "    ", "dataset", "=", "dataset", ".", "repeat", "(", ")", "\n", "dataset", "=", "dataset", ".", "shuffle", "(", "1000", ")", "\n", "", "def", "shift_and_append_eos", "(", "t", ")", ":", "\n", "# tfds encoder does not reserve an EOS token, so we need to shift", "\n", "# in order to do so.  We also append EOS=1.", "\n", "    ", "return", "tf", ".", "concat", "(", "[", "t", "+", "1", ",", "[", "1", "]", "]", ",", "0", ")", "\n", "", "def", "feature_map", "(", "inputs", ",", "targets", ")", ":", "\n", "    ", "if", "text2self", ":", "\n", "      ", "return", "{", "\"targets\"", ":", "shift_and_append_eos", "(", "targets", ")", "}", "\n", "", "else", ":", "\n", "      ", "return", "{", "\"inputs\"", ":", "shift_and_append_eos", "(", "inputs", ")", ",", "\n", "\"targets\"", ":", "shift_and_append_eos", "(", "targets", ")", "}", "\n", "", "", "dataset", "=", "dataset", ".", "map", "(", "feature_map", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "return", "pack_or_pad", "(", "dataset", ",", "sequence_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.sample_from_text_line_datasets": [[216, 227], ["zip", "tensorflow.data.experimental.sample_from_datasets", "tensorflow.data.TextLineDataset().repeat().shuffle().prefetch", "tensorflow.data.TextLineDataset().repeat().shuffle", "tensorflow.data.TextLineDataset().repeat", "tensorflow.data.TextLineDataset", "tensorflow.gfile.Glob"], "function", ["None"], ["", "@", "gin", ".", "configurable", "\n", "def", "sample_from_text_line_datasets", "(", "glob_weight_list", ",", "\n", "shuffle_buffer_size", "=", "100000", ",", "\n", "prefetch", "=", "1000", ")", ":", "# pylint: disable=missing-docstring", "\n", "  ", "globs", ",", "weights", "=", "zip", "(", "*", "glob_weight_list", ")", "\n", "datasets", "=", "[", "\n", "tf", ".", "data", ".", "TextLineDataset", "(", "tf", ".", "gfile", ".", "Glob", "(", "g", ")", ")", ".", "repeat", "(", ")", ".", "shuffle", "(", "\n", "shuffle_buffer_size", ")", ".", "prefetch", "(", "prefetch", ")", "for", "g", "in", "globs", "\n", "]", "\n", "return", "tf", ".", "data", ".", "experimental", ".", "sample_from_datasets", "(", "\n", "datasets", "=", "datasets", ",", "weights", "=", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.make_text_line_dataset": [[229, 232], ["dataset.sample_from_text_line_datasets"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.sample_from_text_line_datasets"], ["", "@", "gin", ".", "configurable", "\n", "def", "make_text_line_dataset", "(", "glob", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "  ", "return", "sample_from_text_line_datasets", "(", "[", "(", "glob", ",", "1.0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.simple_text_line_dataset": [[234, 238], ["tensorflow.data.TextLineDataset().shuffle", "tensorflow.data.TextLineDataset", "tensorflow.gfile.Glob"], "function", ["None"], ["", "@", "gin", ".", "configurable", "\n", "def", "simple_text_line_dataset", "(", "glob", "=", "gin", ".", "REQUIRED", ",", "shuffle_buffer_size", "=", "100000", ")", ":", "\n", "  ", "return", "tf", ".", "data", ".", "TextLineDataset", "(", "\n", "tf", ".", "gfile", ".", "Glob", "(", "glob", ")", ")", ".", "shuffle", "(", "shuffle_buffer_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.packed_parallel_tsv_dataset": [[240, 290], ["dataset.filter.map", "dataset.filter.map", "dataset.pack_or_pad", "tensorflow.decode_csv", "inputs_vocabulary.encode_tf", "targets_vocabulary.encode_tf", "tensorflow.less_equal", "tensorflow.logging.info", "dataset.filter.filter", "isinstance", "isinstance", "tensorflow.concat", "tensorflow.concat", "tensorflow.reduce_max", "tensorflow.stack", "tensorflow.cast", "tensorflow.cast", "tensorflow.size", "features.values"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pack_or_pad", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode_tf", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode_tf", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_max", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stack", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Variable.size"], ["", "@", "gin", ".", "configurable", "\n", "def", "packed_parallel_tsv_dataset", "(", "dataset", "=", "gin", ".", "REQUIRED", ",", "\n", "dataset_split", "=", "gin", ".", "REQUIRED", ",", "\n", "batch_size", "=", "None", ",", "\n", "sequence_length", "=", "gin", ".", "REQUIRED", ",", "\n", "vocabulary", "=", "gin", ".", "REQUIRED", ",", "\n", "append_eos", "=", "True", ",", "\n", "eos_id", "=", "1", ",", "\n", "max_encoded_len", "=", "0", ")", ":", "\n", "  ", "\"\"\"Reads parallel tab-separated text file. One example per line.\"\"\"", "\n", "del", "batch_size", "\n", "del", "dataset_split", "\n", "\n", "def", "_parse_fn", "(", "record", ")", ":", "# pylint: disable=missing-docstring", "\n", "    ", "tokens", "=", "tf", ".", "decode_csv", "(", "\n", "record", ",", "\n", "record_defaults", "=", "[", "\"\"", "]", "*", "2", ",", "\n", "field_delim", "=", "\"\\t\"", ",", "\n", "use_quote_delim", "=", "False", ")", "\n", "return", "{", "\"inputs\"", ":", "tokens", "[", "0", "]", ",", "\"targets\"", ":", "tokens", "[", "1", "]", "}", "\n", "\n", "", "def", "_encode_fn", "(", "features", ")", ":", "# pylint: disable=missing-docstring", "\n", "    ", "inputs_vocabulary", "=", "vocabulary", "[", "0", "]", "if", "isinstance", "(", "vocabulary", ",", "\n", "tuple", ")", "else", "vocabulary", "\n", "targets_vocabulary", "=", "vocabulary", "[", "1", "]", "if", "isinstance", "(", "vocabulary", ",", "\n", "tuple", ")", "else", "vocabulary", "\n", "inputs_enc", "=", "inputs_vocabulary", ".", "encode_tf", "(", "features", "[", "\"inputs\"", "]", ")", "\n", "targets_enc", "=", "targets_vocabulary", ".", "encode_tf", "(", "features", "[", "\"targets\"", "]", ")", "\n", "if", "append_eos", ":", "\n", "      ", "inputs_enc", "=", "tf", ".", "concat", "(", "[", "tf", ".", "cast", "(", "inputs_enc", ",", "tf", ".", "int64", ")", ",", "[", "eos_id", "]", "]", ",", "0", ")", "\n", "targets_enc", "=", "tf", ".", "concat", "(", "[", "tf", ".", "cast", "(", "targets_enc", ",", "tf", ".", "int64", ")", ",", "[", "eos_id", "]", "]", ",", "0", ")", "\n", "", "return", "{", "\"inputs\"", ":", "inputs_enc", ",", "\"targets\"", ":", "targets_enc", "}", "\n", "\n", "", "dataset", "=", "dataset", ".", "map", "(", "\n", "_parse_fn", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "dataset", "=", "dataset", ".", "map", "(", "\n", "_encode_fn", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n", "def", "_filter_fn", "(", "features", ")", ":", "# pylint: disable=missing-docstring", "\n", "    ", "return", "tf", ".", "less_equal", "(", "\n", "tf", ".", "reduce_max", "(", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "size", "(", "v", ")", "for", "v", "in", "features", ".", "values", "(", ")", "]", ",", "axis", "=", "0", ")", ")", ",", "\n", "max_encoded_len", ")", "\n", "\n", "", "if", "max_encoded_len", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Filtering encoded examples longer than %d\"", "%", "\n", "max_encoded_len", ")", "\n", "dataset", "=", "dataset", ".", "filter", "(", "_filter_fn", ")", "\n", "\n", "", "return", "pack_or_pad", "(", "dataset", ",", "sequence_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.untokenized_tfds_dataset": [[292, 331], ["tensorflow_datasets.load", "dataset.encode_all_features", "dataset.pack_or_pad", "supervised_to_dict.repeat", "supervised_to_dict.shuffle", "dataset.supervised_to_dict"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.encode_all_features", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pack_or_pad", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.supervised_to_dict"], ["", "@", "gin", ".", "configurable", "\n", "def", "untokenized_tfds_dataset", "(", "dataset_name", "=", "gin", ".", "REQUIRED", ",", "\n", "text2self", "=", "gin", ".", "REQUIRED", ",", "\n", "tfds_data_dir", "=", "gin", ".", "REQUIRED", ",", "\n", "dataset_split", "=", "gin", ".", "REQUIRED", ",", "\n", "batch_size", "=", "None", ",", "\n", "sequence_length", "=", "gin", ".", "REQUIRED", ",", "\n", "vocabulary", "=", "gin", ".", "REQUIRED", ",", "\n", "pack", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "  ", "\"\"\"Reads a tensorflow_datasets dataset.\n\n  Returns a tf.data.Dataset containing single tokenized examples where each\n  feature ends in EOS=1.\n\n  Args:\n    dataset_name: a string\n    text2self: a boolean, if true, run unsupervised LM-style training. if false,\n      the dataset must support supervised mode.\n    tfds_data_dir: a boolean\n    dataset_split: a string\n    batch_size: an integer\n    sequence_length: an integer\n    vocabulary: a vocabulary.Vocabulary\n    pack: if True, multiple examples emitted by load_internal() are concatenated\n        to form one combined example.\n  Returns:\n    a tf.data.Dataset of batches\n  \"\"\"", "\n", "del", "batch_size", "\n", "dataset", "=", "tfds", ".", "load", "(", "\n", "dataset_name", ",", "split", "=", "dataset_split", ",", "\n", "as_supervised", "=", "not", "text2self", ",", "data_dir", "=", "tfds_data_dir", ")", "\n", "if", "dataset_split", "==", "\"train\"", ":", "\n", "    ", "dataset", "=", "dataset", ".", "repeat", "(", ")", "\n", "dataset", "=", "dataset", ".", "shuffle", "(", "1000", ")", "\n", "", "if", "not", "text2self", ":", "\n", "    ", "dataset", "=", "supervised_to_dict", "(", "dataset", ",", "text2self", ")", "\n", "", "dataset", "=", "encode_all_features", "(", "dataset", ",", "vocabulary", ")", "\n", "return", "pack_or_pad", "(", "dataset", ",", "sequence_length", ",", "pack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.supervised_to_dict": [[333, 351], ["dataset.map"], "function", ["None"], ["", "def", "supervised_to_dict", "(", "dataset", ",", "text2self", ")", ":", "\n", "  ", "\"\"\"Turns a supervised dataset into a dataset with a feature dictionary.\n\n  if text2self, then the features dictionary contains a \"targets\" key.\n  else, the features dictionary contains \"inputs\" and \"targets\" keys.\n\n  Args:\n    dataset: a tf.data.Dataset\n    text2self: a boolean\n  Returns:\n    a tf.data.Dataset\n  \"\"\"", "\n", "def", "my_fn", "(", "inputs", ",", "targets", ")", ":", "\n", "    ", "if", "text2self", ":", "\n", "      ", "return", "{", "\"targets\"", ":", "targets", "}", "\n", "", "else", ":", "\n", "      ", "return", "{", "\"inputs\"", ":", "inputs", ",", "\"targets\"", ":", "targets", "}", "\n", "", "", "return", "dataset", ".", "map", "(", "my_fn", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.encode_all_features": [[353, 381], ["dataset.map", "features.items", "vocabulary.encode_tf", "tensorflow.concat", "tensorflow.logging.info", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode_tf", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "encode_all_features", "(", "dataset", ",", "vocabulary", ")", ":", "\n", "  ", "\"\"\"Encode all features.\n\n  Args:\n    dataset: a tf.data.Dataset\n    vocabulary: a vocabulary.Vocabulary\n  Returns:\n    a tf.data.Dataset\n  \"\"\"", "\n", "def", "my_fn", "(", "features", ")", ":", "\n", "    ", "\"\"\"Encode all features that are strings and return a dictionary.\n\n    Args:\n      features: a dictionary\n    Returns:\n      a dictionary\n    \"\"\"", "\n", "ret", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", ":", "\n", "      ", "if", "v", ".", "dtype", "==", "tf", ".", "string", ":", "\n", "        ", "v", "=", "vocabulary", ".", "encode_tf", "(", "v", ")", "\n", "v", "=", "tf", ".", "concat", "(", "[", "tf", ".", "cast", "(", "v", ",", "tf", ".", "int64", ")", ",", "[", "1", "]", "]", ",", "0", ")", "\n", "ret", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\n", "\"encode_all_features: skipping non-string feature %s:%s\"", ",", "k", ",", "v", ")", "\n", "", "", "return", "ret", "\n", "", "return", "dataset", ".", "map", "(", "my_fn", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pretokenized_tfrecord_dataset": [[383, 430], ["tensorflow.data.TFRecordDataset", "dataset.repeat.map", "dataset.pack_or_pad", "dataset.repeat.repeat", "tensorflow.io.parse_example", "tf.io.parse_example.items", "tensorflow.concat", "tensorflow.VarLenFeature", "tf.io.parse_example.items", "tf.io.parse_example.items"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pack_or_pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat"], ["", "def", "pretokenized_tfrecord_dataset", "(", "filenames", ",", "\n", "text2self", ",", "\n", "eos_included", ",", "\n", "repeat", ",", "\n", "batch_size", ",", "\n", "sequence_length", ",", "\n", "vocab_shift", "=", "0", ")", ":", "\n", "  ", "\"\"\"Reads tensor2tensor-style data files.\n\n  The dataset is defined by sets of TFRecord files of TFExample protos.\n  There should be a \"targets\" feature (a 1d tensor of integers)\n  If not text2self, there should also be an \"inputs\" feature.\n  Other features get ignored.\n\n  eos_included specifies whether the inputs and targets were written with an\n  EOS token, as in tensor2tensor\n\n  Args:\n    filenames: a list of strings\n    text2self: a boolean\n    eos_included: a boolean\n    repeat: a boolean\n    batch_size: an integer, DEPRECATED\n    sequence_length: an integer\n    vocab_shift: an optional integer - add this value to all ids\n  Returns:\n    A tf.data.Dataset of batches\n  \"\"\"", "\n", "del", "batch_size", "\n", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "filenames", ",", "buffer_size", "=", "64", "*", "1024", "*", "1024", ")", "\n", "if", "repeat", ":", "\n", "    ", "dataset", "=", "dataset", ".", "repeat", "(", ")", "\n", "", "keys", "=", "[", "\"targets\"", "]", "if", "text2self", "else", "[", "\"inputs\"", ",", "\"targets\"", "]", "\n", "def", "decode_example", "(", "serialized_example", ")", ":", "\n", "    ", "\"\"\"Return a dict of Tensors from a serialized tensorflow.Example.\"\"\"", "\n", "decoded", "=", "tf", ".", "io", ".", "parse_example", "(", "\n", "serialized", "=", "[", "serialized_example", "]", ",", "\n", "features", "=", "{", "k", ":", "tf", ".", "VarLenFeature", "(", "tf", ".", "int64", ")", "for", "k", "in", "keys", "}", ")", "\n", "decoded", "=", "{", "k", ":", "v", ".", "values", "for", "k", ",", "v", "in", "decoded", ".", "items", "(", ")", "}", "\n", "if", "vocab_shift", ":", "\n", "      ", "decoded", "=", "{", "k", ":", "v", "+", "vocab_shift", "for", "k", ",", "v", "in", "decoded", ".", "items", "(", ")", "}", "\n", "", "if", "not", "eos_included", ":", "\n", "      ", "decoded", "=", "{", "k", ":", "tf", ".", "concat", "(", "[", "v", ",", "[", "1", "]", "]", ",", "0", ")", "for", "k", ",", "v", "in", "decoded", ".", "items", "(", ")", "}", "\n", "", "return", "decoded", "\n", "", "dataset", "=", "dataset", ".", "map", "(", "decode_example", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "return", "pack_or_pad", "(", "dataset", ",", "sequence_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pretokenized_t2t_dataset": [[432, 476], ["os.path.join", "tensorflow.gfile.Glob", "tensorflow.logging.info", "dataset.pretokenized_tfrecord_dataset", "ValueError", "dataset.shuffle.shuffle", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pretokenized_tfrecord_dataset"], ["", "@", "gin", ".", "configurable", "\n", "def", "pretokenized_t2t_dataset", "(", "dataset_name", "=", "gin", ".", "REQUIRED", ",", "\n", "text2self", "=", "False", ",", "\n", "data_dir", "=", "gin", ".", "REQUIRED", ",", "\n", "dataset_split", "=", "\"train\"", ",", "\n", "batch_size", "=", "None", ",", "\n", "sequence_length", "=", "gin", ".", "REQUIRED", ",", "\n", "vocabulary", "=", "None", ",", "\n", "eos_included", "=", "True", ",", "\n", "vocab_shift", "=", "0", ")", ":", "\n", "  ", "\"\"\"Loads the Tensor2tensor dataset specified by dataset_name.\n\n  Args:\n    dataset_name: TensorFlow Datasets dataset name.\n    text2self: a boolean\n    data_dir: string, data_dir for TensorFlow Datasets\n    dataset_split: a string - \"train\" or \"dev\"\n    batch_size: an integer, DEPRECATED\n    sequence_length: an integer\n    vocabulary: ignored\n    eos_included: a boolean\n    vocab_shift: an optional integer - add this value to all ids read\n\n  Returns:\n    A tf.data.Dataset of batches\n  \"\"\"", "\n", "del", "vocabulary", "\n", "filepattern", "=", "os", ".", "path", ".", "join", "(", "\n", "data_dir", ",", "dataset_name", "+", "\"-\"", "+", "dataset_split", "+", "\"-*\"", ")", "\n", "filenames", "=", "tf", ".", "gfile", ".", "Glob", "(", "filepattern", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Found %s files matching %s\"", "%", "(", "len", "(", "filenames", ")", ",", "filepattern", ")", ")", "\n", "if", "not", "filenames", ":", "\n", "    ", "raise", "ValueError", "(", "\"No matching files found\"", ")", "\n", "", "dataset", "=", "pretokenized_tfrecord_dataset", "(", "\n", "filenames", "=", "filenames", ",", "\n", "text2self", "=", "text2self", ",", "\n", "eos_included", "=", "eos_included", ",", "\n", "repeat", "=", "dataset_split", "==", "\"train\"", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "vocab_shift", "=", "vocab_shift", ")", "\n", "if", "dataset_split", "==", "\"train\"", ":", "\n", "    ", "dataset", "=", "dataset", ".", "shuffle", "(", "1000", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pack_dataset": [[478, 561], ["tensorflow.data.get_output_shapes", "_pack_with_tf_ops.map", "max", "_pack_with_tf_ops.padded_batch", "_pack_with_tf_ops.map", "list", "length.values", "dataset._pack_with_custom_ops", "dataset._pack_with_tf_ops", "tf.data.get_output_shapes.keys", "ValueError", "shapes[].is_compatible_with", "ValueError", "len", "tensorflow.reshape", "tensorflow.TensorShape", "isinstance", "x.items", "tf.data.get_output_shapes.keys"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset._pack_with_custom_ops", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset._pack_with_tf_ops", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "@", "gin", ".", "configurable", "\n", "def", "pack_dataset", "(", "dataset", ",", "length", ",", "keys", "=", "None", ",", "use_custom_ops", "=", "False", ")", ":", "\n", "  ", "\"\"\"Creates a 'packed' version of a dataset on-the-fly.\n\n  Borrowed from the tensor2tensor library.\n  TODO(noam): make this faster\n\n  This is meant to replace the irritation of having to create a separate\n  \"packed\" version of a dataset to train efficiently on TPU.\n\n  Each example in the output dataset represents several examples in the\n  input dataset.\n\n  For each key in the input dataset, two additional keys are created:\n  <key>_segmentation: an int32 tensor identifying the parts\n     representing the original example.\n  <key>_position: an int32 tensor identifying the position within the original\n     example.\n\n  Example:\n  Two input examples get combined to form an output example.\n  The input examples are:\n  {\"inputs\": [8, 7, 1, 0], \"targets\":[4, 1, 0]}\n  {\"inputs\": [2, 3, 4, 1], \"targets\":[5, 6, 1]}\n  The output example is:\n  {\n                 \"inputs\": [8, 7, 1, 2, 3, 4, 1, 0, 0, 0]\n    \"inputs_segmentation\": [1, 1, 1, 2, 2, 2, 2, 0, 0, 0]\n        \"inputs_position\": [0, 1, 2, 0, 1, 2, 3, 0, 0, 0]\n                \"targets\": [4, 1, 5, 6, 1, 0, 0, 0, 0, 0]\n   \"targets_segmentation\": [1, 1, 2, 2, 2, 0, 0, 0, 0, 0]\n       \"targets_position\": [0, 1, 0, 1, 2, 0, 0, 0, 0, 0]\n  }\n\n  0 represents padding in both the inputs and the outputs.\n\n  Sequences in the incoming examples are truncated to length \"length\", and the\n  sequences in the output examples all have fixed (padded) length \"length\".\n\n  Args:\n    dataset: a tf.data.Dataset\n    length: an integer, or a dict from feature-key to integer\n    keys: a collection of strings (e.g. [\"inputs\", \"targets\"])\n    use_custom_ops: a boolean - custom ops are faster but require a custom-built\n      binary, which is not currently possible on cloud-tpu.\n\n  Returns:\n    a tf.data.Dataset\n  \"\"\"", "\n", "shapes", "=", "tf", ".", "data", ".", "get_output_shapes", "(", "dataset", ")", "\n", "if", "keys", "is", "None", ":", "\n", "    ", "keys", "=", "list", "(", "shapes", ".", "keys", "(", ")", ")", "\n", "", "for", "k", "in", "keys", ":", "\n", "    ", "if", "k", "not", "in", "shapes", ":", "\n", "      ", "raise", "ValueError", "(", "\"Key %s not found in dataset.  Available keys are %s\"", "\n", "%", "(", "k", ",", "shapes", ".", "keys", "(", ")", ")", ")", "\n", "", "if", "not", "shapes", "[", "k", "]", ".", "is_compatible_with", "(", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"Tensors to be packed must be one-dimensional.\"", ")", "\n", "# make sure that the length dictionary contains all keys as well as the", "\n", "# keys suffixed by \"_segmentation\" and \"_position\"", "\n", "", "", "length_dict", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "    ", "for", "suffix", "in", "[", "\"\"", ",", "\"_segmentation\"", ",", "\"_position\"", "]", ":", "\n", "      ", "length_dict", "[", "k", "+", "suffix", "]", "=", "length", "if", "isinstance", "(", "length", ",", "int", ")", "else", "length", "[", "k", "]", "\n", "", "", "length", "=", "length_dict", "\n", "\n", "# trim to length", "\n", "dataset", "=", "dataset", ".", "map", "(", "lambda", "x", ":", "{", "k", ":", "x", "[", "k", "]", "[", ":", "length", "[", "k", "]", "]", "for", "k", "in", "keys", "}", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "# Setting batch_size=length ensures that the concatenated sequences (if they", "\n", "# have length >=1) are sufficient to fill at least one packed example.", "\n", "batch_size", "=", "max", "(", "length", ".", "values", "(", ")", ")", "\n", "dataset", "=", "dataset", ".", "padded_batch", "(", "\n", "batch_size", ",", "padded_shapes", "=", "{", "k", ":", "[", "-", "1", "]", "for", "k", "in", "keys", "}", ")", "\n", "if", "use_custom_ops", "and", "len", "(", "keys", ")", "<=", "2", ":", "\n", "    ", "dataset", "=", "_pack_with_custom_ops", "(", "dataset", ",", "keys", ",", "length", ")", "\n", "", "else", ":", "\n", "    ", "dataset", "=", "_pack_with_tf_ops", "(", "dataset", ",", "keys", ",", "length", ")", "\n", "\n", "# Set the Tensor shapes correctly since they get lost in the process.", "\n", "", "def", "my_fn", "(", "x", ")", ":", "\n", "    ", "return", "{", "k", ":", "tf", ".", "reshape", "(", "v", ",", "[", "length", "[", "k", "]", "]", ")", "for", "k", ",", "v", "in", "x", ".", "items", "(", ")", "}", "\n", "", "return", "dataset", ".", "map", "(", "my_fn", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset._pack_with_tf_ops": [[563, 674], ["empty_example.keys", "dataset.map.map", "dataset.map.unbatch", "tensorflow.zeros", "tensorflow.zeros", "empty_example.copy", "empty_example.copy", "tensorflow.zeros", "tensorflow.while_loop", "dataset._pack_with_tf_ops.write_packed_example"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.while_loop"], ["", "def", "_pack_with_tf_ops", "(", "dataset", ",", "keys", ",", "length", ")", ":", "\n", "  ", "\"\"\"Helper-function for packing a dataset which has already been batched.\n\n  See pack_dataset()\n\n  Uses tf.while_loop.  Slow.\n\n  Args:\n    dataset: a dataset containing padded batches of examples.\n    keys: a collection of strings\n    length: an dict from feature-key to integer\n\n  Returns:\n    a dataset.\n  \"\"\"", "\n", "empty_example", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "    ", "empty_example", "[", "k", "]", "=", "tf", ".", "zeros", "(", "[", "0", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "empty_example", "[", "k", "+", "\"_position\"", "]", "=", "tf", ".", "zeros", "(", "[", "0", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "", "keys_etc", "=", "empty_example", ".", "keys", "(", ")", "\n", "\n", "def", "write_packed_example", "(", "partial", ",", "outputs", ")", ":", "\n", "    ", "new_partial", "=", "empty_example", ".", "copy", "(", ")", "\n", "new_outputs", "=", "{", "}", "\n", "for", "k", "in", "keys_etc", ":", "\n", "      ", "new_outputs", "[", "k", "]", "=", "outputs", "[", "k", "]", ".", "write", "(", "\n", "outputs", "[", "k", "]", ".", "size", "(", ")", ",", "\n", "tf", ".", "pad", "(", "partial", "[", "k", "]", ",", "\n", "[", "[", "0", ",", "length", "[", "k", "]", "-", "tf", ".", "size", "(", "partial", "[", "k", "]", ")", "]", "]", ")", ")", "\n", "", "return", "new_partial", ",", "new_outputs", "\n", "\n", "", "def", "map_fn", "(", "x", ")", ":", "\n", "    ", "\"\"\"Internal function to flat_map over.\n\n    Consumes a batch of input examples and produces a variable number of output\n    examples.\n\n    Args:\n      x: a single example\n    Returns:\n      a tf.data.Dataset\n    \"\"\"", "\n", "partial", "=", "empty_example", ".", "copy", "(", ")", "\n", "i", "=", "tf", ".", "zeros", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "first_key", ",", "*", "_", "=", "keys", "\n", "dynamic_batch_size", "=", "tf", ".", "shape", "(", "x", "[", "first_key", "]", ")", "[", "0", "]", "\n", "outputs", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "      ", "outputs", "[", "k", "]", "=", "tf", ".", "TensorArray", "(", "\n", "tf", ".", "int32", ",", "size", "=", "0", ",", "dynamic_size", "=", "True", ",", "element_shape", "=", "[", "length", "[", "k", "]", "]", ")", "\n", "outputs", "[", "k", "+", "\"_position\"", "]", "=", "tf", ".", "TensorArray", "(", "\n", "tf", ".", "int32", ",", "size", "=", "0", ",", "dynamic_size", "=", "True", ",", "element_shape", "=", "[", "length", "[", "k", "]", "]", ")", "\n", "", "def", "cond_fn", "(", "i", ",", "partial", ",", "outputs", ")", ":", "\n", "      ", "del", "partial", ",", "outputs", "\n", "return", "i", "<", "dynamic_batch_size", "\n", "", "def", "body_fn", "(", "i", ",", "partial", ",", "outputs", ")", ":", "\n", "      ", "\"\"\"Body function for while_loop.\n\n      Args:\n        i: integer scalar\n        partial: dictionary of Tensor (partially-constructed example)\n        outputs: dictionary of TensorArray\n      Returns:\n        A triple containing the new values of the inputs.\n      \"\"\"", "\n", "can_append", "=", "True", "\n", "one_example", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "val", "=", "tf", ".", "cast", "(", "x", "[", "k", "]", "[", "i", "]", ",", "tf", ".", "int32", ")", "\n", "val", "=", "val", "[", ":", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "val", ",", "0", ")", ",", "tf", ".", "int32", ")", ")", "]", "\n", "one_example", "[", "k", "]", "=", "val", "\n", "", "for", "k", "in", "keys", ":", "\n", "        ", "can_append", "=", "tf", ".", "logical_and", "(", "\n", "can_append", ",", "\n", "tf", ".", "less_equal", "(", "\n", "tf", ".", "size", "(", "partial", "[", "k", "]", ")", "+", "tf", ".", "size", "(", "one_example", "[", "k", "]", ")", ",", "length", "[", "k", "]", ")", ")", "\n", "", "def", "false_fn", "(", ")", ":", "\n", "        ", "return", "write_packed_example", "(", "partial", ",", "outputs", ")", "\n", "", "def", "true_fn", "(", ")", ":", "\n", "        ", "return", "partial", ",", "outputs", "\n", "", "partial", ",", "outputs", "=", "tf", ".", "cond", "(", "can_append", ",", "true_fn", ",", "false_fn", ")", "\n", "new_partial", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "new_seq", "=", "one_example", "[", "k", "]", "[", ":", "length", "[", "k", "]", "]", "\n", "new_seq_len", "=", "tf", ".", "size", "(", "new_seq", ")", "\n", "new_partial", "[", "k", "]", "=", "tf", ".", "concat", "(", "[", "partial", "[", "k", "]", ",", "new_seq", "]", ",", "0", ")", "\n", "new_partial", "[", "k", "+", "\"_position\"", "]", "=", "tf", ".", "concat", "(", "\n", "[", "partial", "[", "k", "+", "\"_position\"", "]", ",", "\n", "tf", ".", "range", "(", "new_seq_len", ",", "dtype", "=", "tf", ".", "int32", ")", "]", ",", "0", ")", "\n", "", "partial", "=", "new_partial", "\n", "return", "i", "+", "1", ",", "partial", ",", "outputs", "\n", "\n", "", "i", ",", "partial", ",", "outputs", "=", "tf", ".", "while_loop", "(", "\n", "cond_fn", ",", "body_fn", ",", "(", "i", ",", "partial", ",", "outputs", ")", ",", "\n", "back_prop", "=", "False", ",", "\n", "shape_invariants", "=", "(", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "k", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", "for", "k", "in", "keys_etc", "}", ",", "\n", "{", "k", ":", "tf", ".", "TensorShape", "(", "None", ")", "for", "k", "in", "keys_etc", "}", ",", "\n", ")", ")", "\n", "partial", ",", "outputs", "=", "write_packed_example", "(", "partial", ",", "outputs", ")", "\n", "packed", "=", "{", "k", ":", "outputs", "[", "k", "]", ".", "stack", "(", ")", "for", "k", "in", "keys_etc", "}", "\n", "for", "k", "in", "keys", ":", "\n", "      ", "packed", "[", "k", "+", "\"_segmentation\"", "]", "=", "(", "\n", "tf", ".", "cumsum", "(", "\n", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "packed", "[", "k", "+", "\"_position\"", "]", ",", "0", ")", ",", "tf", ".", "int32", ")", ",", "axis", "=", "1", ")", "*", "\n", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "packed", "[", "k", "]", ",", "0", ")", ",", "tf", ".", "int32", ")", ")", "\n", "", "return", "packed", "\n", "", "dataset", "=", "dataset", ".", "map", "(", "map_fn", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "return", "dataset", ".", "unbatch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset._pack_with_custom_ops": [[676, 733], ["dataset.unbatch.map", "dataset.unbatch.unbatch", "len", "pack_sequences_ops.pack_sequences2", "packed.items", "len", "ValueError", "tensorflow.cast", "tensorflow.cast", "len", "packed.update", "tensorflow.cast", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "_pack_with_custom_ops", "(", "dataset", ",", "keys", ",", "length", ")", ":", "\n", "  ", "\"\"\"Helper-function for packing a dataset which has already been batched.\n\n  See pack_dataset()\n\n  Relies on custom ops which require a custom compiled binary.\n  Faster than _pack_with_tf_ops(), and denser packing.\n\n  Args:\n    dataset: a dataset containing padded batches of examples.\n    keys: a collection of strings (must have length 1 or 2)\n    length: a dictionary from key to integer\n\n  Returns:\n    a dataset.\n  \"\"\"", "\n", "from", "tensor2tensor", ".", "data_generators", ".", "ops", "import", "pack_sequences_ops", "# pylint: disable=g-import-not-at-top", "\n", "# faster and better packing but requires custom-built binary.", "\n", "if", "len", "(", "keys", ")", "==", "1", ":", "\n", "    ", "k1", ",", "=", "keys", "\n", "k2", "=", "k1", "\n", "", "elif", "len", "(", "keys", ")", "==", "2", ":", "\n", "    ", "k1", ",", "k2", "=", "keys", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "f\"Packing op requires 1 or 2 keys. Got {len(keys)}\"", ")", "\n", "\n", "", "def", "custom_pack_batch", "(", "x", ")", ":", "\n", "    ", "\"\"\"Map-function.\"\"\"", "\n", "(", "k1_packed", ",", "k1_segmentation", ",", "k1_position", ",", "\n", "k2_packed", ",", "k2_segmentation", ",", "k2_position", ")", "=", "(", "\n", "pack_sequences_ops", ".", "pack_sequences2", "(", "\n", "# cast to int64 for compatibility with custom ops", "\n", "tf", ".", "cast", "(", "x", "[", "k1", "]", ",", "tf", ".", "int64", ")", ",", "\n", "tf", ".", "cast", "(", "x", "[", "k2", "]", ",", "tf", ".", "int64", ")", ",", "\n", "length", "[", "k1", "]", ",", "\n", "length", "[", "k2", "]", ")", ")", "\n", "packed", "=", "{", "\n", "k1", ":", "k1_packed", ",", "\n", "k1", "+", "\"_segmentation\"", ":", "k1_segmentation", ",", "\n", "k1", "+", "\"_position\"", ":", "k1_position", ",", "\n", "}", "\n", "if", "len", "(", "keys", ")", "==", "2", ":", "\n", "      ", "packed", ".", "update", "(", "{", "\n", "k2", ":", "k2_packed", ",", "\n", "k2", "+", "\"_segmentation\"", ":", "k2_segmentation", ",", "\n", "k2", "+", "\"_position\"", ":", "k2_position", ",", "\n", "}", ")", "\n", "\n", "# cast back to int32", "\n", "", "for", "k", ",", "v", "in", "packed", ".", "items", "(", ")", ":", "\n", "      ", "packed", "[", "k", "]", "=", "tf", ".", "cast", "(", "v", ",", "tf", ".", "int32", ")", "\n", "\n", "", "return", "packed", "\n", "", "dataset", "=", "dataset", ".", "map", "(", "\n", "custom_pack_batch", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "dataset", "=", "dataset", ".", "unbatch", "(", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.trim_and_pad_dataset": [[735, 760], ["dataset.map", "tensorflow.pad", "tf.pad.set_shape", "isinstance", "tensorflow.shape", "dataset.trim_and_pad_dataset._trim_and_pad"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pad", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.shape"], ["", "def", "trim_and_pad_dataset", "(", "dataset", ",", "length", ",", "feature_keys", "=", "None", ")", ":", "\n", "  ", "\"\"\"Trim and pad first dimension of features to size `length`.\n\n  Args:\n    dataset: tf.data.Dataset, the dataset to trimp/pad examples in.\n    length: int, or a dict from feature-key to int\n    feature_keys: (optional) collection of strings, the feature names to limit\n      trimming/padding to. Defaults to all features.\n  Returns:\n    Trimmed/padded tf.data.Dataset.\n  \"\"\"", "\n", "def", "_trim_and_pad", "(", "k", ",", "t", ")", ":", "\n", "    ", "\"\"\"Trim/pad to the first axis of `t` to be of size `length`.\"\"\"", "\n", "if", "feature_keys", "and", "k", "not", "in", "feature_keys", ":", "\n", "      ", "return", "t", "\n", "", "length_k", "=", "length", "if", "isinstance", "(", "length", ",", "int", ")", "else", "length", "[", "k", "]", "\n", "t", "=", "t", "[", ":", "length_k", "]", "\n", "pad_amt", "=", "length_k", "-", "tf", ".", "shape", "(", "t", ")", "[", "0", "]", "\n", "padded_t", "=", "tf", ".", "pad", "(", "t", ",", "[", "(", "0", ",", "pad_amt", ")", "]", "+", "[", "(", "0", ",", "0", ")", "]", "*", "(", "len", "(", "t", ".", "shape", ")", "-", "1", ")", ")", "\n", "padded_t", ".", "set_shape", "(", "[", "length_k", "]", "+", "t", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "return", "padded_t", "\n", "\n", "", "return", "dataset", ".", "map", "(", "\n", "lambda", "x", ":", "{", "k", ":", "_trim_and_pad", "(", "k", ",", "t", ")", "for", "k", ",", "t", "in", "x", ".", "items", "(", ")", "}", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pad_dataset_with_zeroed_out_examples": [[773, 777], ["ds.concatenate", "ds.map().repeat", "tensorflow.zeros_like", "x.items", "ds.map"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like"], ["def", "pad_dataset_with_zeroed_out_examples", "(", "ds", ")", ":", "\n", "  ", "def", "_zero_out", "(", "x", ")", ":", "\n", "    ", "return", "{", "k", ":", "tf", ".", "zeros_like", "(", "v", ")", "for", "k", ",", "v", "in", "x", ".", "items", "(", ")", "}", "\n", "", "return", "ds", ".", "concatenate", "(", "ds", ".", "map", "(", "_zero_out", ")", ".", "repeat", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.FactorizedVocabEmbedding.__init__": [[34, 78], ["mesh_tensorflow.Dimension", "mesh_tensorflow.layers.embedding_weights", "mesh_tensorflow.layers.embedding_weights", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights"], ["def", "__init__", "(", "self", ",", "\n", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", ",", "\n", "variable_dtype", ",", "\n", "name", ",", "\n", "ensemble_dim", ",", "\n", "inner_dimension_size", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "    ", "\"\"\"Configurable embedding for the vocabulary.\n\n    Most of the arguments get passed to `mtf.layers.embedding_weights` with an\n    option to factorize the embedding matrix.\n\n    Args:\n      mesh: a mtf.Mesh\n      vocab_dim: a mtf.Dimension\n      output_dim: a mtf.Dimension\n      variable_dtype: a mtf.VariableDType\n      name: a string\n      ensemble_dim: a mtf.Dimension\n      inner_dimension_size: a positive integer, the size of the inner dimension\n        of the embedding matrix\n    \"\"\"", "\n", "self", ".", "_vocab_dim", "=", "vocab_dim", "\n", "self", ".", "_output_dim", "=", "output_dim", "\n", "self", ".", "_inner_dim", "=", "mtf", ".", "Dimension", "(", "\"inner_vocab\"", ",", "inner_dimension_size", ")", "\n", "self", ".", "_factor1", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "mesh", "=", "mesh", ",", "\n", "vocab_dim", "=", "vocab_dim", ",", "\n", "output_dim", "=", "self", ".", "_inner_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"{}1\"", ".", "format", "(", "name", ")", ",", "\n", "ensemble_dim", "=", "ensemble_dim", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "inner_dimension_size", "**", "-", "0.25", ")", ")", "\n", "self", ".", "_factor2", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "mesh", "=", "mesh", ",", "\n", "vocab_dim", "=", "self", ".", "_inner_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"{}2\"", ".", "format", "(", "name", ")", ",", "\n", "ensemble_dim", "=", "ensemble_dim", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "inner_dimension_size", "**", "-", "0.25", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.FactorizedVocabEmbedding.ids_to_embedding": [[79, 83], ["mesh_tensorflow.gather", "mesh_tensorflow.einsum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "ids_to_embedding", "(", "self", ",", "ids", ",", "context", ")", ":", "\n", "    ", "del", "context", "\n", "tmp", "=", "mtf", ".", "gather", "(", "self", ".", "_factor1", ",", "ids", ",", "self", ".", "_vocab_dim", ")", "\n", "return", "mtf", ".", "einsum", "(", "[", "tmp", ",", "self", ".", "_factor2", "]", ",", "reduced_dims", "=", "[", "self", ".", "_inner_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.FactorizedVocabEmbedding.hidden_to_logits": [[84, 89], ["mesh_tensorflow.einsum", "mesh_tensorflow.einsum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "hidden_to_logits", "(", "self", ",", "hidden", ",", "context", ")", ":", "\n", "    ", "del", "context", "\n", "hidden", "*=", "self", ".", "_output_dim", ".", "size", "**", "-", "0.5", "\n", "tmp", "=", "mtf", ".", "einsum", "(", "[", "hidden", ",", "self", ".", "_factor2", "]", ",", "reduced_dims", "=", "[", "self", ".", "_output_dim", "]", ")", "\n", "return", "mtf", ".", "einsum", "(", "[", "tmp", ",", "self", ".", "_factor1", "]", ",", "reduced_dims", "=", "[", "self", ".", "_inner_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings._Cluster.__init__": [[99, 113], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "embedding", ",", "start_token_id", ",", "end_token_id", ")", ":", "\n", "    ", "\"\"\"Cluster constructor.\n\n    Args:\n      embedding: a FactorizedVocabEmbedding or transformer.VocabEmbedding, the\n        vocab embedding to use for the cluster\n      start_token_id: an integer, the inclusive id of the first token in the\n        cluster\n      end_token_id: an integer, the exclusive id of the last token in the\n        cluster\n    \"\"\"", "\n", "self", ".", "_embedding", "=", "embedding", "\n", "self", ".", "_start_token_id", "=", "start_token_id", "\n", "self", ".", "_end_token_id", "=", "end_token_id", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings._Cluster.ids_to_embedding": [[114, 123], ["mesh_tensorflow.where", "vocab_embeddings._Cluster._embedding.ids_to_embedding", "mesh_tensorflow.greater_equal"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.ids_to_embedding", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal"], ["", "def", "ids_to_embedding", "(", "self", ",", "ids", ",", "context", ")", ":", "\n", "    ", "\"\"\"Ids to embeddings with ids not in cluster mapped to the zero vector.\"\"\"", "\n", "ids", "-=", "self", ".", "_start_token_id", "\n", "# The mtf.gather in the embedding's ids_to_embedding implementation will", "\n", "# cause the one hot representations of tokens greater than cluster vocab", "\n", "# dimension size to be the zero vector. Thus the embeddings for those tokens", "\n", "# will be the zero vector.", "\n", "ids", "=", "mtf", ".", "where", "(", "mtf", ".", "greater_equal", "(", "ids", ",", "0", ")", ",", "ids", ",", "self", ".", "_end_token_id", ")", "\n", "return", "self", ".", "_embedding", ".", "ids_to_embedding", "(", "ids", ",", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings._Cluster.hidden_to_logits": [[124, 127], ["vocab_embeddings._Cluster._embedding.hidden_to_logits"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits"], ["", "def", "hidden_to_logits", "(", "self", ",", "hidden", ",", "context", ")", ":", "\n", "    ", "\"\"\"Returns the logits for tokens within the cluster.\"\"\"", "\n", "return", "self", ".", "_embedding", ".", "hidden_to_logits", "(", "hidden", ",", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.AdaptiveVocabEmbedding.__init__": [[148, 230], ["enumerate", "sum", "ValueError", "mesh_tensorflow.Dimension", "vocab_embeddings.AdaptiveVocabEmbedding._clusters.append", "mesh_tensorflow.transformer.transformer.VocabEmbedding", "vocab_embeddings.FactorizedVocabEmbedding", "vocab_embeddings._Cluster"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", ",", "\n", "variable_dtype", ",", "\n", "name", ",", "\n", "ensemble_dim", ",", "\n", "clusters", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "    ", "\"\"\"Configurable embedding for the vocabulary.\n\n    Most of the arguments get passed to `mtf.layers.embedding_weights`.\n\n    The clustering parameters are specified by the `clusters` argument. It is a\n    list of dicts with keys \"token_count\" and \"embedding_size\". Token count\n    specifies the number of tokens in the cluster, and embedding size specifies\n    the hidden dimension size of its embedding.\n\n    For example, let's say we have a vocab size of 500k and pass as clusters:\n      [\n        {\"token_count\": 50000,  \"embedding_size\": 1024},\n        {\"token_count\": 100000, \"embedding_size\": 256},\n        {\"token_count\": 350000, \"embedding_size\": 64},\n      ]\n    Then tokens with ids 0 (inclusive) to 50k (exclusive) will be in the first\n    cluster with embedding size of 1024, tokens with ids 50k to 150k will be in\n    the second cluster with embedding size of 256, and tokens with ids 150k to\n    500k will be in the third cluster with embedding size of 64.\n\n    Args:\n      mesh: a mtf.Mesh\n      vocab_dim: a mtf.Dimension\n      output_dim: a mtf.Dimension\n      variable_dtype: a mtf.VariableDType\n      name: a string\n      ensemble_dim: a mtf.Dimension\n      clusters: a list(dict), specification of the clusters\n\n    Raises:\n      ValueError: The sum of the token counts across the clusters does not equal\n        the vocabulary size.\n    \"\"\"", "\n", "self", ".", "_vocab_dim", "=", "vocab_dim", "\n", "self", ".", "_output_dim", "=", "output_dim", "\n", "\n", "token_counts", "=", "[", "cluster", "[", "\"token_count\"", "]", "for", "cluster", "in", "clusters", "]", "\n", "if", "sum", "(", "token_counts", ")", "!=", "vocab_dim", ".", "size", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"The cluster token counts {} do not sum to the vocab size {}.\"", ".", "format", "(", "\n", "token_counts", ",", "vocab_dim", ".", "size", ")", ")", "\n", "\n", "", "self", ".", "_clusters", "=", "[", "]", "\n", "start_token_id", "=", "0", "\n", "for", "i", ",", "cluster", "in", "enumerate", "(", "clusters", ")", ":", "\n", "      ", "token_count", "=", "cluster", "[", "\"token_count\"", "]", "\n", "embedding_size", "=", "cluster", "[", "\"embedding_size\"", "]", "\n", "cluster_vocab_dim", "=", "mtf", ".", "Dimension", "(", "vocab_dim", ".", "name", ",", "token_count", ")", "\n", "\n", "if", "embedding_size", "==", "self", ".", "_output_dim", ".", "size", ":", "\n", "# In this case we don't need to up project from the embedding space to", "\n", "# the model state space.", "\n", "        ", "cluster_embedding", "=", "transformer", ".", "VocabEmbedding", "(", "\n", "mesh", "=", "mesh", ",", "\n", "vocab_dim", "=", "cluster_vocab_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"{}_{}\"", ".", "format", "(", "name", ",", "i", ")", ",", "\n", "ensemble_dim", "=", "ensemble_dim", ")", "\n", "", "else", ":", "\n", "        ", "cluster_embedding", "=", "FactorizedVocabEmbedding", "(", "\n", "mesh", "=", "mesh", ",", "\n", "vocab_dim", "=", "cluster_vocab_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"{}_{}\"", ".", "format", "(", "name", ",", "i", ")", ",", "\n", "ensemble_dim", "=", "ensemble_dim", ",", "\n", "inner_dimension_size", "=", "embedding_size", ")", "\n", "", "self", ".", "_clusters", ".", "append", "(", "\n", "_Cluster", "(", "\n", "embedding", "=", "cluster_embedding", ",", "\n", "start_token_id", "=", "start_token_id", ",", "\n", "end_token_id", "=", "start_token_id", "+", "token_count", ")", ")", "\n", "start_token_id", "+=", "token_count", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.AdaptiveVocabEmbedding.ids_to_embedding": [[231, 236], ["sum", "cluster.ids_to_embedding"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.ids_to_embedding"], ["", "", "def", "ids_to_embedding", "(", "self", ",", "ids", ",", "context", ")", ":", "\n", "# Ids not in each cluster will be mapped to the zero vector. Since clusters", "\n", "# are disjoint, this sum is correct.", "\n", "    ", "return", "sum", "(", "\n", "cluster", ".", "ids_to_embedding", "(", "ids", ",", "context", ")", "for", "cluster", "in", "self", ".", "_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.AdaptiveVocabEmbedding.hidden_to_logits": [[237, 246], ["mesh_tensorflow.concat", "cluster.hidden_to_logits"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits"], ["", "def", "hidden_to_logits", "(", "self", ",", "hidden", ",", "context", ")", ":", "\n", "# Each cluster returns the logits for only the tokens with itself, so their", "\n", "# concatenation is the full logits.", "\n", "    ", "return", "mtf", ".", "concat", "(", "\n", "[", "\n", "cluster", ".", "hidden_to_logits", "(", "hidden", ",", "context", "=", "context", ")", "\n", "for", "cluster", "in", "self", ".", "_clusters", "\n", "]", ",", "\n", "concat_dim_name", "=", "self", ".", "_vocab_dim", ".", "name", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.MixtureOfSoftmaxes.__init__": [[262, 315], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.layers.embedding_weights", "mesh_tensorflow.layers.embedding_weights", "mesh_tensorflow.layers.embedding_weights"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights"], ["def", "__init__", "(", "self", ",", "\n", "mesh", ":", "mtf", ".", "Mesh", ",", "\n", "vocab_dim", ":", "mtf", ".", "Dimension", ",", "\n", "output_dim", ":", "mtf", ".", "Dimension", ",", "\n", "variable_dtype", ":", "mtf", ".", "VariableDType", ",", "\n", "name", ":", "str", ",", "\n", "ensemble_dim", ":", "mtf", ".", "Dimension", ",", "\n", "num_softmaxes", ":", "int", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "    ", "\"\"\"Configurable embedding for the vocabulary.\n\n    Most of the arguments get passed to `mtf.layers.embedding_weights`.\n\n    Args:\n      mesh: the mesh used to layout the tensors.\n      vocab_dim: the dimension corresponding to vocabulary.\n      output_dim: the dimension corresponding to the model\n        hidden states.\n      variable_dtype: the datatype information for the\n        variables used in the embedding tensors.\n      name: a name to base variable names off of.\n      ensemble_dim: the dimension used for ensembling.\n        Absolutely no guarantees that this code will work with ensembling.\n      num_softmaxes: a positive int, the number of components to use in the\n        mixture.\n    \"\"\"", "\n", "self", ".", "_vocab_dim", "=", "vocab_dim", "\n", "self", ".", "_output_dim", "=", "output_dim", "\n", "self", ".", "_copy_output_dim", "=", "mtf", ".", "Dimension", "(", "\"_{}_copy\"", ".", "format", "(", "output_dim", ".", "name", ")", ",", "\n", "output_dim", ".", "size", ")", "\n", "self", ".", "_components_dim", "=", "mtf", ".", "Dimension", "(", "\"softmax_components\"", ",", "num_softmaxes", ")", "\n", "\n", "self", ".", "_embedding_weights", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "mesh", "=", "mesh", ",", "\n", "vocab_dim", "=", "vocab_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"{}_embedding_weights\"", ".", "format", "(", "name", ")", ",", "\n", "ensemble_dim", "=", "ensemble_dim", ")", "\n", "self", ".", "_mixture_weights", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "mesh", "=", "mesh", ",", "\n", "vocab_dim", "=", "self", ".", "_components_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"{}_mixture_weights\"", ".", "format", "(", "name", ")", ",", "\n", "ensemble_dim", "=", "ensemble_dim", ")", "\n", "self", ".", "_context_weights", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "mesh", "=", "mesh", ",", "\n", "vocab_dim", "=", "self", ".", "_copy_output_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"{}_context_weights\"", ".", "format", "(", "name", ")", ",", "\n", "ensemble_dim", "=", "(", "[", "ensemble_dim", "]", "if", "ensemble_dim", "else", "[", "]", ")", "+", "\n", "[", "self", ".", "_components_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.MixtureOfSoftmaxes.ids_to_embedding": [[316, 319], ["mesh_tensorflow.gather"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather"], ["", "def", "ids_to_embedding", "(", "self", ",", "ids", ":", "mtf", ".", "Tensor", ",", "context", ")", "->", "mtf", ".", "Tensor", ":", "\n", "    ", "del", "context", "\n", "return", "mtf", ".", "gather", "(", "self", ".", "_embedding_weights", ",", "ids", ",", "self", ".", "_vocab_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.MixtureOfSoftmaxes.hidden_to_logits": [[320, 361], ["mesh_tensorflow.einsum", "mesh_tensorflow.einsum", "mesh_tensorflow.tanh", "mesh_tensorflow.einsum", "mesh_tensorflow.log_softmax", "mesh_tensorflow.log_softmax", "mesh_tensorflow.reduce_logsumexp", "mesh_tensorflow.rename_dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tanh", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log_softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log_softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_logsumexp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension"], ["", "def", "hidden_to_logits", "(", "self", ",", "hidden", ":", "mtf", ".", "Tensor", ",", "\n", "context", ":", "transformer", ".", "Context", ")", "->", "mtf", ".", "Tensor", ":", "\n", "    ", "\"\"\"Function called by mtf transformer to get the logits.\n\n    Note that we are taking the log of a mixture of softmaxes. The logits will\n    then go through a softmax. This could potentially run into numerical\n    stability issues. If that happens, try setting the activation_dtype to\n    float32.\n\n    Args:\n      hidden: hidden model states of the final decoder layer.\n      context: the context used for the call to the\n        transformer.\n\n    Returns:\n      The logits.\n    \"\"\"", "\n", "del", "context", "\n", "hidden", "*=", "self", ".", "_output_dim", ".", "size", "**", "-", "0.5", "\n", "\n", "component_prior_logits", "=", "mtf", ".", "einsum", "(", "[", "hidden", ",", "self", ".", "_mixture_weights", "]", ",", "\n", "reduced_dims", "=", "[", "self", ".", "_output_dim", "]", ")", "\n", "\n", "component_contexts", "=", "mtf", ".", "einsum", "(", "[", "\n", "mtf", ".", "rename_dimension", "(", "hidden", ",", "self", ".", "_output_dim", ".", "name", ",", "\n", "self", ".", "_copy_output_dim", ".", "name", ")", ",", "\n", "self", ".", "_context_weights", ",", "\n", "]", ",", "\n", "reduced_dims", "=", "[", "self", ".", "_copy_output_dim", "]", ")", "\n", "component_contexts", "=", "mtf", ".", "tanh", "(", "component_contexts", ")", "\n", "component_logits", "=", "mtf", ".", "einsum", "(", "[", "component_contexts", ",", "self", ".", "_embedding_weights", "]", ",", "\n", "reduced_dims", "=", "[", "self", ".", "_output_dim", "]", ")", "\n", "\n", "component_prior_logits", "=", "mtf", ".", "log_softmax", "(", "\n", "component_prior_logits", ",", "reduced_dim", "=", "self", ".", "_components_dim", ")", "\n", "component_logits", "=", "mtf", ".", "log_softmax", "(", "\n", "component_logits", ",", "reduced_dim", "=", "self", ".", "_vocab_dim", ")", "\n", "\n", "logits", "=", "component_prior_logits", "+", "component_logits", "\n", "logits", "=", "mtf", ".", "reduce_logsumexp", "(", "logits", ",", "reduced_dim", "=", "self", ".", "_components_dim", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.Mixtape.__init__": [[380, 494], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.layers.embedding_weights", "mesh_tensorflow.layers.embedding_weights", "mesh_tensorflow.get_variable", "mesh_tensorflow.layers.embedding_weights", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "int", "mesh_tensorflow.Shape", "tensorflow.zeros_initializer", "mesh_tensorflow.Shape", "tensorflow.zeros_initializer", "mesh_tensorflow.Shape", "tensorflow.random_normal_initializer", "mesh_tensorflow.Shape", "tensorflow.random_normal_initializer", "mesh_tensorflow.Shape", "tensorflow.random_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["def", "__init__", "(", "self", ",", "\n", "mesh", ":", "mtf", ".", "Mesh", ",", "\n", "vocab_dim", ":", "mtf", ".", "Dimension", ",", "\n", "output_dim", ":", "mtf", ".", "Dimension", ",", "\n", "variable_dtype", ":", "mtf", ".", "VariableDType", ",", "\n", "name", ":", "str", ",", "\n", "ensemble_dim", ":", "mtf", ".", "Dimension", ",", "\n", "extra_ids", ":", "int", "=", "0", ",", "\n", "dropout_rate", ":", "float", "=", "0.0", ",", "\n", "gate_embedding_size", ":", "int", "=", "gin", ".", "REQUIRED", ",", "\n", "frequent_token_fraction", ":", "float", "=", "0.1", ",", "\n", "noise_std_dev", ":", "float", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"Configurable embedding for the vocabulary.\n\n    Most of the arguments get passed to `mtf.layers.embedding_weights`.\n\n    Mixtape shares gates for low frequency tokens to improve efficiency. Since\n    our vocabs are sorted in decreasing order of frequency with sentinels\n    appended to the end, we need to do a little trick to ensure that the\n    sentinels are treated as high frequency. If you want to treat the sentinels\n    as low frequency tokens, then pass in zero for `extra_ids`.\n\n    Args:\n      mesh: the mesh used to layout the tensors.\n      vocab_dim: the dimension corresponding to vocabulary.\n      output_dim: the dimension corresponding to the model hidden states.\n      variable_dtype: the datatype information for the  variables used in the\n        embedding tensors.\n      name: a name to base variable names off of.\n      ensemble_dim: the dimension used for ensembling. Absolutely no guarantees\n        that this code will work with ensembling.\n      extra_ids: a non-negative integer, the number of sentinels at the end of\n        the vocab.\n      dropout_rate: a float between 0 and 1, the rate to use for dropout.\n      gate_embedding_size: a positive integer, the size to use for embedding for\n        the gates. It is usually chosen to be much smaller than d_model.\n      frequent_token_fraction: a float between 0 and 1, what fraction of tokens\n        to consider as high frequency and not share gates for.\n      noise_std_dev: a non-negative float, the standard deviation of the\n        Gaussian noise to add to the pre-activation priors.\n    \"\"\"", "\n", "self", ".", "_extra_ids", "=", "extra_ids", "\n", "self", ".", "_dropout_rate", "=", "dropout_rate", "\n", "self", ".", "_noise_std_dev", "=", "noise_std_dev", "\n", "self", ".", "_mesh", "=", "mesh", "\n", "self", ".", "_vocab_dim", "=", "vocab_dim", "\n", "self", ".", "_frequent_vocab_dim", "=", "mtf", ".", "Dimension", "(", "\n", "vocab_dim", ".", "name", ",", "int", "(", "frequent_token_fraction", "*", "vocab_dim", ".", "size", ")", ")", "\n", "self", ".", "_rare_vocab_dim", "=", "mtf", ".", "Dimension", "(", "\n", "vocab_dim", ".", "name", ",", "vocab_dim", ".", "size", "-", "self", ".", "_frequent_vocab_dim", ".", "size", ")", "\n", "self", ".", "_output_dim", "=", "output_dim", "\n", "self", ".", "_copy_output_dim", "=", "mtf", ".", "Dimension", "(", "\"_{}_copy\"", ".", "format", "(", "output_dim", ".", "name", ")", ",", "\n", "output_dim", ".", "size", ")", "\n", "self", ".", "_pre_gates_dim", "=", "mtf", ".", "Dimension", "(", "\"gates\"", ",", "3", ")", "\n", "self", ".", "_gates_dim", "=", "mtf", ".", "Dimension", "(", "\"gates\"", ",", "4", ")", "\n", "self", ".", "_gate_embedding_dim", "=", "mtf", ".", "Dimension", "(", "\"gate_embedding\"", ",", "\n", "gate_embedding_size", ")", "\n", "\n", "self", ".", "_embedding_weights", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "mesh", "=", "mesh", ",", "\n", "vocab_dim", "=", "vocab_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"{}_embedding_weights\"", ".", "format", "(", "name", ")", ",", "\n", "ensemble_dim", "=", "ensemble_dim", ")", "\n", "ensemble_dims", "=", "[", "ensemble_dim", "]", "if", "ensemble_dim", "else", "[", "]", "\n", "self", ".", "_context_weights", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "mesh", "=", "mesh", ",", "\n", "vocab_dim", "=", "self", ".", "_copy_output_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"{}_context_weights\"", ".", "format", "(", "name", ")", ",", "\n", "ensemble_dim", "=", "ensemble_dims", "+", "[", "self", ".", "_gates_dim", "]", ")", "\n", "self", ".", "_context_weights_bias", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\n", "name", "=", "\"{}_context_weights_bias\"", ".", "format", "(", "name", ")", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "ensemble_dims", "+", "[", "self", ".", "_gates_dim", ",", "output_dim", "]", ")", ",", "\n", "dtype", "=", "variable_dtype", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n", "self", ".", "_prior_weights", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "mesh", "=", "mesh", ",", "\n", "vocab_dim", "=", "self", ".", "_gate_embedding_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "\"{}_prior_weights\"", ".", "format", "(", "name", ")", ",", "\n", "ensemble_dim", "=", "ensemble_dims", "+", "[", "self", ".", "_pre_gates_dim", "]", ")", "\n", "self", ".", "_prior_weights_bias", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\n", "name", "=", "\"{}_prior_weights_bias\"", ".", "format", "(", "name", ")", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "ensemble_dims", "+", "\n", "[", "self", ".", "_pre_gates_dim", ",", "self", ".", "_gate_embedding_dim", "]", ")", ",", "\n", "dtype", "=", "variable_dtype", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "self", ".", "_prior_vocab_vector", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\n", "name", "=", "\"{}_prior_vocab_vector\"", ".", "format", "(", "name", ")", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "ensemble_dims", "+", "\n", "[", "self", ".", "_frequent_vocab_dim", ",", "self", ".", "_gate_embedding_dim", "]", ")", ",", "\n", "dtype", "=", "variable_dtype", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", ")", ")", "\n", "self", ".", "_prior_gates_vector", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\n", "name", "=", "\"{}_prior_gates_vector\"", ".", "format", "(", "name", ")", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "ensemble_dims", "+", "[", "self", ".", "_pre_gates_dim", ",", "output_dim", "]", ")", ",", "\n", "dtype", "=", "variable_dtype", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", ")", ")", "\n", "self", ".", "_prior_bias", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\n", "name", "=", "\"{}_prior_bias\"", ".", "format", "(", "name", ")", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "ensemble_dims", "+", "\n", "[", "self", ".", "_frequent_vocab_dim", ",", "self", ".", "_pre_gates_dim", "]", ")", ",", "\n", "dtype", "=", "variable_dtype", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.Mixtape.ids_to_embedding": [[495, 498], ["mesh_tensorflow.gather"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather"], ["", "def", "ids_to_embedding", "(", "self", ",", "ids", ":", "mtf", ".", "Tensor", ",", "context", ")", "->", "mtf", ".", "Tensor", ":", "\n", "    ", "del", "context", "\n", "return", "mtf", ".", "gather", "(", "self", ".", "_embedding_weights", ",", "ids", ",", "self", ".", "_vocab_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.Mixtape._sigmoid_tree": [[499, 509], ["mesh_tensorflow.split", "mesh_tensorflow.concat", "mesh_tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sigmoid"], ["", "def", "_sigmoid_tree", "(", "self", ",", "tensor", ")", ":", "\n", "    ", "\"\"\"Create probability distribution along gates dim using a sigmoid tree.\"\"\"", "\n", "gamma", "=", "mtf", ".", "split", "(", "\n", "mtf", ".", "sigmoid", "(", "tensor", ")", ",", "self", ".", "_pre_gates_dim", ",", "self", ".", "_pre_gates_dim", ".", "size", ")", "\n", "return", "mtf", ".", "concat", "(", "[", "\n", "gamma", "[", "0", "]", "*", "gamma", "[", "1", "]", ",", "\n", "gamma", "[", "0", "]", "*", "(", "1", "-", "gamma", "[", "1", "]", ")", ",", "\n", "(", "1", "-", "gamma", "[", "0", "]", ")", "*", "gamma", "[", "2", "]", ",", "\n", "(", "1", "-", "gamma", "[", "0", "]", ")", "*", "(", "1", "-", "gamma", "[", "2", "]", ")", ",", "\n", "]", ",", "self", ".", "_gates_dim", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.Mixtape._dropout": [[510, 518], ["mesh_tensorflow.dropout"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout"], ["", "def", "_dropout", "(", "self", ",", "tensor", ",", "context", ")", ":", "\n", "    ", "if", "context", ".", "train", "and", "self", ".", "_dropout_rate", "!=", "0.0", ":", "\n", "      ", "return", "mtf", ".", "dropout", "(", "\n", "tensor", ",", "\n", "context", ".", "train", ",", "\n", "1.0", "-", "self", ".", "_dropout_rate", ",", "\n", "noise_shape", "=", "tensor", ".", "shape", "-", "context", ".", "length_dim", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.Mixtape._rearrange_sentinels": [[519, 527], ["mesh_tensorflow.split", "mesh_tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat"], ["", "def", "_rearrange_sentinels", "(", "self", ",", "logits", ")", ":", "\n", "    ", "\"\"\"Reorder along the vocab dim so the last few tokens don't share gates.\"\"\"", "\n", "if", "not", "self", ".", "_extra_ids", ":", "\n", "      ", "return", "logits", "\n", "", "sentinels", ",", "nonsentinels", "=", "mtf", ".", "split", "(", "\n", "logits", ",", "self", ".", "_vocab_dim", ",", "\n", "[", "self", ".", "_extra_ids", ",", "self", ".", "_vocab_dim", ".", "size", "-", "self", ".", "_extra_ids", "]", ")", "\n", "return", "mtf", ".", "concat", "(", "[", "nonsentinels", ",", "sentinels", "]", ",", "self", ".", "_vocab_dim", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.Mixtape.hidden_to_logits": [[528, 578], ["mesh_tensorflow.einsum", "mesh_tensorflow.tanh", "mesh_tensorflow.einsum", "vocab_embeddings.Mixtape._dropout", "mesh_tensorflow.tanh", "vocab_embeddings.Mixtape._dropout", "mesh_tensorflow.einsum", "mesh_tensorflow.concat", "vocab_embeddings.Mixtape._sigmoid_tree", "mesh_tensorflow.einsum", "vocab_embeddings.Mixtape._rearrange_sentinels", "mesh_tensorflow.random_normal", "mesh_tensorflow.rename_dimension", "mesh_tensorflow.einsum", "mesh_tensorflow.einsum", "mesh_tensorflow.ones", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tanh", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tanh", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.Mixtape._sigmoid_tree", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.vocab_embeddings.Mixtape._rearrange_sentinels", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_normal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones"], ["", "def", "hidden_to_logits", "(", "self", ",", "hidden", ":", "mtf", ".", "Tensor", ",", "\n", "context", ":", "transformer", ".", "Context", ")", "->", "mtf", ".", "Tensor", ":", "\n", "    ", "\"\"\"Function called by mtf transformer to get the logits.\n\n    Args:\n      hidden: an mtf.Tensor, hidden model states of the final decoder layer.\n      context: a transformer.Context, the context used for the call to the\n        transformer.\n\n    Returns:\n      An mtf.Tensor, the logits.\n    \"\"\"", "\n", "hidden", "*=", "self", ".", "_output_dim", ".", "size", "**", "-", "0.5", "\n", "\n", "component_contexts", "=", "mtf", ".", "einsum", "(", "[", "\n", "mtf", ".", "rename_dimension", "(", "hidden", ",", "self", ".", "_output_dim", ".", "name", ",", "\n", "self", ".", "_copy_output_dim", ".", "name", ")", ",", "\n", "self", ".", "_context_weights", ",", "\n", "]", ",", "\n", "reduced_dims", "=", "[", "self", ".", "_copy_output_dim", "]", ")", "\n", "component_contexts", "=", "mtf", ".", "tanh", "(", "component_contexts", "+", "\n", "self", ".", "_context_weights_bias", ")", "\n", "component_logits", "=", "mtf", ".", "einsum", "(", "[", "component_contexts", ",", "self", ".", "_embedding_weights", "]", ",", "\n", "reduced_dims", "=", "[", "self", ".", "_output_dim", "]", ")", "\n", "component_logits", "=", "self", ".", "_dropout", "(", "component_logits", ",", "context", ")", "\n", "\n", "prior_tanh", "=", "mtf", ".", "tanh", "(", "\n", "mtf", ".", "einsum", "(", "[", "self", ".", "_prior_weights", ",", "hidden", "]", ",", "\n", "reduced_dims", "=", "[", "self", ".", "_output_dim", "]", ")", "+", "self", ".", "_prior_weights_bias", ")", "\n", "prior_tanh", "=", "self", ".", "_dropout", "(", "prior_tanh", ",", "context", ")", "\n", "prior_shared_logits", "=", "mtf", ".", "einsum", "(", "[", "self", ".", "_prior_gates_vector", ",", "hidden", "]", ",", "\n", "reduced_dims", "=", "[", "self", ".", "_output_dim", "]", ")", "\n", "prior_frequent_vocab_logits", "=", "(", "\n", "mtf", ".", "einsum", "(", "[", "self", ".", "_prior_vocab_vector", ",", "prior_tanh", "]", ")", "+", "\n", "prior_shared_logits", "+", "self", ".", "_prior_bias", ")", "\n", "prior_logits", "=", "mtf", ".", "concat", "(", "[", "\n", "prior_frequent_vocab_logits", ",", "\n", "mtf", ".", "ones", "(", "\n", "self", ".", "_mesh", ",", "\n", "mtf", ".", "Shape", "(", "[", "self", ".", "_rare_vocab_dim", "]", ")", ",", "\n", "dtype", "=", "prior_shared_logits", ".", "dtype", ")", "*", "prior_shared_logits", "\n", "]", ",", "self", ".", "_vocab_dim", ".", "name", ")", "\n", "if", "context", ".", "train", "and", "self", ".", "_noise_std_dev", "!=", "0.0", ":", "\n", "      ", "prior_logits", "+=", "mtf", ".", "random_normal", "(", "\n", "self", ".", "_mesh", ",", "prior_logits", ".", "shape", ",", "stddev", "=", "self", ".", "_noise_std_dev", ")", "\n", "", "prior_proportions", "=", "self", ".", "_sigmoid_tree", "(", "prior_logits", ")", "\n", "\n", "logits", "=", "mtf", ".", "einsum", "(", "[", "component_logits", ",", "prior_proportions", "]", ",", "\n", "reduced_dims", "=", "[", "self", ".", "_gates_dim", "]", ")", "\n", "return", "self", ".", "_rearrange_sentinels", "(", "logits", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.__init__": [[370, 449], ["attention.AttentionParams.init_weights", "ValueError", "attention._combined_dim", "attention._combined_dim", "attention._combined_dim", "attention._combined_dim"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.AttentionParamsFixup.init_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention._combined_dim", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention._combined_dim", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention._combined_dim", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention._combined_dim"], ["def", "__init__", "(", "self", ",", "\n", "mesh", ",", "\n", "query_input_dim", ",", "\n", "memory_input_dim", ",", "\n", "output_dim", ",", "\n", "key_dim", ",", "\n", "value_dim", ",", "\n", "query_heads_dims", ",", "\n", "memory_heads_dims", ",", "\n", "variable_dtype", ",", "\n", "shared_kv", "=", "False", ",", "\n", "no_query", "=", "False", ",", "\n", "combine_dims", "=", "True", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "keep_query_heads_dims", "=", "False", ",", "\n", "fold_scaling_into_initializer", "=", "True", ",", "\n", "make_attention_vars", "=", "True", ")", ":", "\n", "    ", "\"\"\"Create attention parameters.\n\n    combine_dims is a hack for faster execution.  The heads and key/value\n    dimensions are combined in the variables and the computation.  The hack\n    would not be necessary if XLA optimized einsum properly.\n\n    Args:\n      mesh: a Mesh\n      query_input_dim: a Dimension\n      memory_input_dim: a Dimension\n      output_dim: a Dimension\n      key_dim: a Dimension\n      value_dim: a Dimension\n      query_heads_dims: a list of Dimension\n      memory_heads_dims: a list of Dimension\n      variable_dtype: a mtf.VariableDType\n      shared_kv: a boolean\n      no_query: a boolean\n      combine_dims: a boolean\n      ensemble_dim: an optional Dimension\n      keep_query_heads_dims: a boolean, if true keep the query_heads_dims in the\n        output.\n      fold_scaling_into_initializer: a boolean\n      make_attention_vars: a boolean, whether to make the attention variables.\n        This is typically True. Only set to False for ExpertsAttention which\n        creates variables inside the moe.MoE1D-call.\n    \"\"\"", "\n", "if", "shared_kv", "and", "key_dim", "!=", "value_dim", ":", "\n", "      ", "raise", "ValueError", "(", "\"shared_kv requires key_dim == value_dim\"", ")", "\n", "", "self", ".", "mesh", "=", "mesh", "\n", "self", ".", "query_input_dim", "=", "query_input_dim", "\n", "self", ".", "memory_input_dim", "=", "memory_input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "key_dim", "=", "key_dim", "\n", "self", ".", "value_dim", "=", "value_dim", "\n", "self", ".", "query_heads_dims", "=", "query_heads_dims", "or", "[", "]", "\n", "self", ".", "memory_heads_dims", "=", "memory_heads_dims", "or", "[", "]", "\n", "self", ".", "variable_dtype", "=", "variable_dtype", "\n", "self", ".", "shared_kv", "=", "shared_kv", "\n", "self", ".", "no_query", "=", "no_query", "\n", "self", ".", "combine_dims", "=", "combine_dims", "\n", "self", ".", "keep_query_heads_dims", "=", "keep_query_heads_dims", "\n", "self", ".", "fold_scaling_into_initializer", "=", "fold_scaling_into_initializer", "\n", "self", ".", "make_attention_vars", "=", "make_attention_vars", "\n", "\n", "if", "combine_dims", ":", "\n", "      ", "self", ".", "q_shape", "=", "[", "query_input_dim", ",", "_combined_dim", "(", "self", ".", "q_dims", ")", "]", "\n", "self", ".", "k_shape", "=", "[", "memory_input_dim", ",", "_combined_dim", "(", "self", ".", "k_dims", ")", "]", "\n", "self", ".", "v_shape", "=", "[", "memory_input_dim", ",", "_combined_dim", "(", "self", ".", "v_dims", ")", "]", "\n", "self", ".", "o_shape", "=", "[", "_combined_dim", "(", "self", ".", "o_dims", ")", ",", "output_dim", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "q_shape", "=", "[", "query_input_dim", "]", "+", "self", ".", "q_dims", "\n", "self", ".", "k_shape", "=", "[", "memory_input_dim", "]", "+", "self", ".", "k_dims", "\n", "self", ".", "v_shape", "=", "[", "memory_input_dim", "]", "+", "self", ".", "v_dims", "\n", "self", ".", "o_shape", "=", "self", ".", "o_dims", "+", "[", "output_dim", "]", "\n", "", "if", "ensemble_dim", ":", "\n", "      ", "self", ".", "q_shape", "=", "[", "ensemble_dim", "]", "+", "self", ".", "q_shape", "\n", "self", ".", "k_shape", "=", "[", "ensemble_dim", "]", "+", "self", ".", "k_shape", "\n", "self", ".", "v_shape", "=", "[", "ensemble_dim", "]", "+", "self", ".", "v_shape", "\n", "self", ".", "o_shape", "=", "[", "ensemble_dim", "]", "+", "self", ".", "o_shape", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.init_weights": [[450, 502], ["mesh_tensorflow.layers.unit_scaling_convention", "mesh_tensorflow.get_variable", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "\"\"\"Initialize attention projection matrices.\"\"\"", "\n", "if", "mtf", ".", "layers", ".", "unit_scaling_convention", "(", ")", ":", "\n", "      ", "init", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "1.0", ")", "\n", "q_init", "=", "init", "\n", "kv_init", "=", "init", "\n", "o_init", "=", "init", "\n", "", "else", ":", "\n", "      ", "stddev", "=", "self", ".", "query_input_dim", ".", "size", "**", "-", "0.5", "\n", "if", "self", ".", "fold_scaling_into_initializer", ":", "\n", "        ", "stddev", "*=", "self", ".", "key_dim", ".", "size", "**", "-", "0.5", "\n", "", "q_init", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "kv_init", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "self", ".", "memory_input_dim", ".", "size", "**", "-", "0.5", ")", "\n", "o_init", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "mtf", ".", "Shape", "(", "self", ".", "query_heads_dims", "+", "[", "self", ".", "value_dim", "]", ")", ".", "size", "**", "-", "0.5", ")", "\n", "\n", "# Toggle producing wq, wv, wk which are not needed for the ExpertsAttention", "\n", "", "if", "self", ".", "make_attention_vars", ":", "\n", "      ", "if", "not", "self", ".", "no_query", ":", "\n", "        ", "self", ".", "wq", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"q\"", ",", "\n", "self", ".", "q_shape", ",", "\n", "initializer", "=", "q_init", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "", "if", "self", ".", "shared_kv", ":", "\n", "        ", "self", ".", "wkv", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"kv\"", ",", "\n", "self", ".", "k_shape", ",", "\n", "initializer", "=", "kv_init", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "wk", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"k\"", ",", "\n", "self", ".", "k_shape", ",", "\n", "initializer", "=", "kv_init", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "self", ".", "wv", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"v\"", ",", "\n", "self", ".", "v_shape", ",", "\n", "initializer", "=", "kv_init", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "", "", "self", ".", "wo", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"o\"", ",", "\n", "self", ".", "o_shape", ",", "\n", "initializer", "=", "o_init", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.compute_q": [[503, 520], ["mesh_tensorflow.layers.us_einsum", "mesh_tensorflow.replace_dimensions"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions"], ["", "def", "compute_q", "(", "self", ",", "query_antecedent", ")", ":", "\n", "    ", "\"\"\"Compute query Tensor q.\n\n    Args:\n      query_antecedent: a Tensor with dimensions\n         {query_input_dim} + other_dims\n    Returns:\n      a Tensor with dimensions\n         query_heads_dims + {key_dim} + other_dims\n    \"\"\"", "\n", "ret", "=", "mtf", ".", "layers", ".", "us_einsum", "(", "\n", "[", "query_antecedent", ",", "self", ".", "wq", "]", ",", "reduced_dims", "=", "[", "self", ".", "query_input_dim", "]", ")", "\n", "if", "self", ".", "combine_dims", ":", "\n", "      ", "ret", "=", "mtf", ".", "replace_dimensions", "(", "ret", ",", "ret", ".", "shape", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "q_dims", ")", "\n", "", "if", "not", "self", ".", "fold_scaling_into_initializer", ":", "\n", "      ", "ret", "*=", "self", ".", "key_dim", ".", "size", "**", "-", "0.5", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.compute_kv": [[521, 538], ["mesh_tensorflow.layers.us_einsum", "ValueError", "mesh_tensorflow.replace_dimensions"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions"], ["", "def", "compute_kv", "(", "self", ",", "memory_antecedent", ")", ":", "\n", "    ", "\"\"\"Compute key/value Tensor kv.\n\n    Args:\n      memory_antecedent: a Tensor with dimensions\n        {memory_input_dim} + other_dims\n    Returns:\n      a Tensor with dimensions\n        memory_heads_dims + {key_dim} + other_dims\n    \"\"\"", "\n", "if", "not", "self", ".", "shared_kv", ":", "\n", "      ", "raise", "ValueError", "(", "\"compute_kv can only be called with shared_kv\"", ")", "\n", "", "ret", "=", "mtf", ".", "layers", ".", "us_einsum", "(", "\n", "[", "memory_antecedent", ",", "self", ".", "wkv", "]", ",", "reduced_dims", "=", "[", "self", ".", "memory_input_dim", "]", ")", "\n", "if", "self", ".", "combine_dims", ":", "\n", "      ", "ret", "=", "mtf", ".", "replace_dimensions", "(", "ret", ",", "ret", ".", "shape", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "k_dims", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.compute_k": [[539, 556], ["mesh_tensorflow.layers.us_einsum", "ValueError", "mesh_tensorflow.replace_dimensions"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions"], ["", "def", "compute_k", "(", "self", ",", "memory_antecedent", ")", ":", "\n", "    ", "\"\"\"Compute key Tensor k.\n\n    Args:\n      memory_antecedent: a Tensor with dimensions\n        {memory_input_dim} + other_dims\n    Returns:\n      a Tensor with dimensions\n        memory_heads_dims + {key_dim} + other_dims\n    \"\"\"", "\n", "if", "self", ".", "shared_kv", ":", "\n", "      ", "raise", "ValueError", "(", "\"compute_k cannot be called with shared_kv\"", ")", "\n", "", "ret", "=", "mtf", ".", "layers", ".", "us_einsum", "(", "\n", "[", "memory_antecedent", ",", "self", ".", "wk", "]", ",", "reduced_dims", "=", "[", "self", ".", "memory_input_dim", "]", ")", "\n", "if", "self", ".", "combine_dims", ":", "\n", "      ", "ret", "=", "mtf", ".", "replace_dimensions", "(", "ret", ",", "ret", ".", "shape", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "k_dims", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.compute_v": [[557, 574], ["mesh_tensorflow.layers.us_einsum", "ValueError", "mesh_tensorflow.replace_dimensions"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions"], ["", "def", "compute_v", "(", "self", ",", "memory_antecedent", ")", ":", "\n", "    ", "\"\"\"Compute value Tensor v.\n\n    Args:\n      memory_antecedent: a Tensor with dimensions\n        {memory_input_dim} + other_dims\n    Returns:\n      a Tensor with dimensions\n        memory_heads_dims + {value_dim} + other_dims\n    \"\"\"", "\n", "if", "self", ".", "shared_kv", ":", "\n", "      ", "raise", "ValueError", "(", "\"compute_v cannot be called with shared_kv\"", ")", "\n", "", "ret", "=", "mtf", ".", "layers", ".", "us_einsum", "(", "\n", "[", "memory_antecedent", ",", "self", ".", "wv", "]", ",", "reduced_dims", "=", "[", "self", ".", "memory_input_dim", "]", ")", "\n", "if", "self", ".", "combine_dims", ":", "\n", "      ", "ret", "=", "mtf", ".", "replace_dimensions", "(", "ret", ",", "ret", ".", "shape", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "v_dims", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.compute_output": [[575, 598], ["mesh_tensorflow.layers.us_einsum", "mesh_tensorflow.transpose", "mesh_tensorflow.replace_dimensions"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions"], ["", "def", "compute_output", "(", "self", ",", "o", ",", "output_shape", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute output of multihead attention.\n\n    Args:\n      o: a Tensor with dimensions\n         query_heads_dims + {value_dim} + other_dims\n      output_shape: an optional Shape\n    Returns:\n      a Tensor with shape:\n         {output_dim} + other_dims\n    \"\"\"", "\n", "if", "self", ".", "combine_dims", ":", "\n", "      ", "o", "=", "mtf", ".", "transpose", "(", "o", ",", "o", ".", "shape", "-", "self", ".", "o_dims", "+", "self", ".", "o_dims", ")", "\n", "o", "=", "mtf", ".", "replace_dimensions", "(", "o", ",", "self", ".", "o_dims", ",", "self", ".", "wo", ".", "shape", ".", "dims", "[", "-", "2", "]", ")", "\n", "reduced_dims", "=", "[", "self", ".", "wo", ".", "shape", ".", "dims", "[", "-", "2", "]", "]", "\n", "", "else", ":", "\n", "      ", "reduced_dims", "=", "self", ".", "o_dims", "\n", "\n", "", "if", "self", ".", "keep_query_heads_dims", ":", "\n", "      ", "reduced_dims", "=", "[", "self", ".", "value_dim", "]", "\n", "\n", "", "return", "mtf", ".", "layers", ".", "us_einsum", "(", "\n", "[", "o", ",", "self", ".", "wo", "]", ",", "output_shape", "=", "output_shape", ",", "reduced_dims", "=", "reduced_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.q_dims": [[599, 602], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "q_dims", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "query_heads_dims", "+", "[", "self", ".", "key_dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.k_dims": [[603, 606], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "k_dims", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "memory_heads_dims", "+", "[", "self", ".", "key_dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.v_dims": [[607, 610], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "v_dims", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "memory_heads_dims", "+", "[", "self", ".", "value_dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.AttentionParams.o_dims": [[611, 614], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "o_dims", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "query_heads_dims", "+", "[", "self", ".", "value_dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.__init__": [[619, 721], ["attention.AttentionParams.__init__", "mesh_tensorflow.layers.unit_scaling_convention", "mesh_tensorflow.Dimension", "tensorflow.logging.info", "tensorflow.logging.info", "mesh_tensorflow.transformer.moe.MoE1D", "ValueError", "ValueError", "ValueError", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["def", "__init__", "(", "self", ",", "\n", "mesh", ",", "\n", "query_input_dim", ",", "\n", "memory_input_dim", ",", "\n", "output_dim", ",", "\n", "key_dim", ",", "\n", "value_dim", ",", "\n", "query_heads_dims", ",", "\n", "memory_heads_dims", ",", "\n", "variable_dtype", ",", "\n", "shared_kv", "=", "False", ",", "\n", "no_query", "=", "False", ",", "\n", "combine_dims", "=", "True", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "keep_query_heads_dims", "=", "False", ",", "\n", "fold_scaling_into_initializer", "=", "True", ",", "\n", "context", "=", "None", ",", "\n", "experts_hparams", "=", "None", ",", "\n", "expert_computation", "=", "\"qkv\"", ")", ":", "\n", "    ", "super", "(", "ExpertsAttentionParams", ",", "self", ")", ".", "__init__", "(", "\n", "mesh", "=", "mesh", ",", "\n", "query_input_dim", "=", "query_input_dim", ",", "\n", "memory_input_dim", "=", "memory_input_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "key_dim", "=", "key_dim", ",", "\n", "value_dim", "=", "value_dim", ",", "\n", "query_heads_dims", "=", "query_heads_dims", ",", "\n", "memory_heads_dims", "=", "memory_heads_dims", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "shared_kv", "=", "shared_kv", ",", "\n", "no_query", "=", "no_query", ",", "\n", "combine_dims", "=", "combine_dims", ",", "\n", "ensemble_dim", "=", "ensemble_dim", ",", "\n", "keep_query_heads_dims", "=", "keep_query_heads_dims", ",", "\n", "fold_scaling_into_initializer", "=", "fold_scaling_into_initializer", ",", "\n", "make_attention_vars", "=", "False", ")", "\n", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "expert_computation", "=", "expert_computation", "\n", "\n", "# Unless we want to compute both q and kv, we can use the normal MoE", "\n", "# settings.", "\n", "if", "expert_computation", "==", "\"qkv\"", ":", "\n", "      ", "experts_attention_compute_qkv", "=", "True", "\n", "", "elif", "expert_computation", "in", "[", "\"q\"", ",", "\"kv\"", "]", ":", "\n", "      ", "experts_attention_compute_qkv", "=", "False", "\n", "if", "expert_computation", "==", "\"q\"", ":", "\n", "# Always assume shared_kv.", "\n", "        ", "self", ".", "wkv", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"kv\"", ",", "\n", "self", ".", "k_shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "self", ".", "memory_input_dim", ".", "size", "**", "-", "0.5", ")", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "", "else", ":", "# Computing kv with experts.", "\n", "        ", "self", ".", "wq", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"q\"", ",", "\n", "self", ".", "q_shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "self", ".", "query_input_dim", ".", "size", "**", "-", "0.5", ")", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Invalid expert computation mode: {}\"", ".", "format", "(", "\n", "expert_computation", ")", ")", "\n", "\n", "# ExpertsAttention, for simplicitly, asserts that combine_dims is True, and", "\n", "# for efficiency, that shared_kv is True.", "\n", "", "if", "not", "self", ".", "combine_dims", ":", "\n", "      ", "raise", "ValueError", "(", "\"combine_dims must be True for ExpertsAttention.\"", ")", "\n", "", "if", "not", "self", ".", "shared_kv", ":", "\n", "      ", "raise", "ValueError", "(", "\"shared_kv must be True for ExpertsAttention.\"", ")", "\n", "", "if", "mtf", ".", "layers", ".", "unit_scaling_convention", "(", ")", ":", "\n", "      ", "raise", "NotImplementedError", "\n", "\n", "# Now replace \"heads\" dim with the \"d_model\" name to avoid conflicts when", "\n", "# we want to partition both \"experts_hidden\" and \"heads\".", "\n", "", "moe_output_dims", "=", "mtf", ".", "Dimension", "(", "\"d_model\"", ",", "self", ".", "q_shape", "[", "-", "1", "]", ".", "size", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"ExpertsAttention moe_hidden_size: {}\"", ".", "format", "(", "\n", "experts_hparams", ".", "hidden_size", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"moe_output_dims: {}\"", ".", "format", "(", "moe_output_dims", ")", ")", "\n", "self", ".", "moe_layer", "=", "mtf", ".", "transformer", ".", "moe", ".", "MoE1D", "(", "\n", "moe_gating", "=", "experts_hparams", ".", "moe_gating", ",", "\n", "num_experts", "=", "experts_hparams", ".", "num_experts", ",", "\n", "loss_coef", "=", "experts_hparams", ".", "loss_coef", ",", "\n", "group_size", "=", "experts_hparams", ".", "group_size", ",", "\n", "min_expert_capacity", "=", "experts_hparams", ".", "min_expert_capacity", ",", "\n", "capacity_factor_train", "=", "experts_hparams", ".", "capacity_factor_train", ",", "\n", "capacity_factor_eval", "=", "experts_hparams", ".", "capacity_factor_eval", ",", "\n", "switch_policy_train", "=", "experts_hparams", ".", "switch_policy_train", ",", "\n", "switch_policy_eval", "=", "experts_hparams", ".", "switch_policy_eval", ",", "\n", "switch_dropout", "=", "experts_hparams", ".", "switch_dropout", ",", "\n", "switch_temperature", "=", "experts_hparams", ".", "switch_temperature", ",", "\n", "switch_jitter", "=", "experts_hparams", ".", "switch_jitter", ",", "\n", "ntlb_top_k", "=", "experts_hparams", ".", "ntlb_top_k", ",", "\n", "hidden_size", "=", "experts_hparams", ".", "hidden_size", ",", "\n", "output_dim", "=", "moe_output_dims", ",", "\n", "use_experts_attention", "=", "experts_attention_compute_qkv", ",", "\n", "activation", "=", "experts_hparams", ".", "activation", ",", "\n", "z_loss", "=", "experts_hparams", ".", "z_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams._compute_merge_qkv": [[722, 756], ["mesh_tensorflow.replace_dimensions", "mesh_tensorflow.replace_dimensions", "mesh_tensorflow.Dimension", "mesh_tensorflow.reshape", "attention.ExpertsAttentionParams.moe_layer.call", "attention.ExpertsAttentionParams._compute_merge_qkv._replace_d_model_dim"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call"], ["", "def", "_compute_merge_qkv", "(", "self", ",", "antecedent", ")", ":", "\n", "    ", "\"\"\"Computes qkv all in one call using MoE layer.\"\"\"", "\n", "def", "_replace_d_model_dim", "(", "t", ")", ":", "\n", "      ", "\"\"\"Used to replace the `d_model` dim with `heads`.\"\"\"", "\n", "new_last_dim", "=", "mtf", ".", "Dimension", "(", "self", ".", "q_shape", "[", "-", "1", "]", ".", "name", ",", "t", ".", "shape", "[", "-", "1", "]", ".", "size", ")", "\n", "return", "mtf", ".", "reshape", "(", "\n", "t", ",", "new_shape", "=", "mtf", ".", "Shape", "(", "t", ".", "shape", "[", ":", "-", "1", "]", "+", "[", "new_last_dim", "]", ")", ")", "\n", "", "if", "self", ".", "expert_computation", "==", "\"qkv\"", ":", "\n", "# NOTE: This assumes querty and memory antecedent are the same", "\n", "      ", "qk", "=", "self", ".", "moe_layer", ".", "call", "(", "self", ".", "context", ",", "antecedent", ")", "\n", "# Split qk here since they went through experts-layers", "\n", "q", ",", "k", "=", "qk", "\n", "q", "=", "_replace_d_model_dim", "(", "q", ")", "\n", "k", "=", "_replace_d_model_dim", "(", "k", ")", "\n", "", "elif", "self", ".", "expert_computation", "==", "\"q\"", ":", "\n", "      ", "q", "=", "self", ".", "moe_layer", ".", "call", "(", "self", ".", "context", ",", "antecedent", ")", "\n", "q", "=", "_replace_d_model_dim", "(", "q", ")", "\n", "# Compute key/value normally", "\n", "k", "=", "mtf", ".", "layers", ".", "us_einsum", "(", "\n", "[", "antecedent", ",", "self", ".", "wkv", "]", ",", "reduced_dims", "=", "[", "self", ".", "memory_input_dim", "]", ")", "\n", "", "elif", "self", ".", "expert_computation", "==", "\"kv\"", ":", "\n", "      ", "k", "=", "self", ".", "moe_layer", ".", "call", "(", "self", ".", "context", ",", "antecedent", ")", "\n", "k", "=", "_replace_d_model_dim", "(", "k", ")", "\n", "# Compute query normally", "\n", "q", "=", "mtf", ".", "layers", ".", "us_einsum", "(", "\n", "[", "antecedent", ",", "self", ".", "wq", "]", ",", "reduced_dims", "=", "[", "self", ".", "query_input_dim", "]", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Invalid expert computation mode: {}\"", ".", "format", "(", "\n", "self", ".", "expert_computation", ")", ")", "\n", "\n", "# Scale query", "\n", "", "q", "*=", "self", ".", "key_dim", ".", "size", "**", "-", "0.5", "\n", "self", ".", "_q", "=", "mtf", ".", "replace_dimensions", "(", "q", ",", "q", ".", "shape", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "q_dims", ")", "\n", "self", ".", "_k", "=", "mtf", ".", "replace_dimensions", "(", "k", ",", "k", ".", "shape", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "k_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_q": [[757, 760], ["attention.ExpertsAttentionParams._compute_merge_qkv"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams._compute_merge_qkv"], ["", "def", "compute_q", "(", "self", ",", "query_antecedent", ")", ":", "\n", "    ", "self", ".", "_compute_merge_qkv", "(", "query_antecedent", ")", "\n", "return", "self", ".", "_q", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_k": [[761, 764], ["None"], "methods", ["None"], ["", "def", "compute_k", "(", "self", ",", "memory_antecedent", ")", ":", "\n", "    ", "del", "memory_antecedent", "\n", "return", "self", ".", "_k", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_kv": [[765, 768], ["None"], "methods", ["None"], ["", "def", "compute_kv", "(", "self", ",", "memory_antecedent", ")", ":", "\n", "    ", "del", "memory_antecedent", "\n", "return", "self", ".", "_k", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.ExpertsAttentionParams.compute_v": [[769, 772], ["NotImplementedError"], "methods", ["None"], ["", "def", "compute_v", "(", "self", ",", "memory_antecedent", ")", ":", "\n", "    ", "del", "memory_antecedent", "\n", "raise", "NotImplementedError", "(", "\"ExpertsAttention uses shared_kv = True.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.attention": [[27, 111], ["attention.maybe_reshape_attention_input_for_2d_sharding", "mesh_tensorflow.layers.us_einsum", "mesh_tensorflow.softmax", "mesh_tensorflow.cast", "mesh_tensorflow.dropout", "mesh_tensorflow.einsum", "mesh_tensorflow.reshape", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "tensorflow.logging.info", "mesh_tensorflow.reduce_logsumexp", "mesh_tensorflow.reduce_mean", "context.losses.append", "mesh_tensorflow.square", "mesh_tensorflow.cast", "tensorflow.logging.info", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.cast", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.maybe_reshape_attention_input_for_2d_sharding", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_logsumexp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["def", "attention", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "memory_length_dim", ",", "\n", "key_dim", ",", "\n", "value_dim", ",", "\n", "bias", "=", "None", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "dropout_broadcast_dims", "=", "None", ",", "\n", "extra_logit", "=", "None", ",", "\n", "context", "=", "None", ",", "\n", "float32_logits", "=", "True", ",", "\n", "z_loss_coeff", "=", "None", ")", ":", "\n", "  ", "\"\"\"Dot-product attention - doesn't use positional dimensions.\n\n  key_dim is a Dimension representing the channels in the queries and keys\n  value_dim is a Dimension representing the channels in values\n  memory_length_dim is a Dimension representing the different key/value pairs.\n\n  Dimensions of q: other_query_dims + {key_dim}\n  Dimensions of k: other_memory_dims + {memory_length_dim, key_dim}\n  Dimensions of v: other_memory_dims + {memory_length_dim, value_dim}\n  other_memory_dims is a subset of other_query_dims\n\n  Typically, other_query_dims={batch, heads, length}\n  Typically, other_memory_dims={batch, heads}\n\n  Args:\n    q: a Tensor\n    k: a Tensor\n    v: a Tensor\n    memory_length_dim: a Dimension\n    key_dim: a Dimension\n    value_dim: a Dimension\n    bias: a Tensor to be added into the attention logits.\n    dropout_rate: a float.\n    dropout_broadcast_dims: an optional list of mtf.Dimension\n    extra_logit: an optional scalar or tensor\n    context: an optional Transformer.Context\n    float32_logits: a boolean - if True, then compute logits in float32 to avoid\n      numerical issues with bfloat16\n    z_loss_coeff: a float, if z_loss_coeff is not None then add an auxiliary\n      loss to push the attention logits closer to zero. This helps to stabilize\n      model training.\n\n  Returns:\n    Tensor with shape q.shape - key_dim + value_dim\n  \"\"\"", "\n", "orig_q_shape", "=", "q", ".", "shape", "\n", "q", ",", "k", ",", "v", ",", "bias", "=", "maybe_reshape_attention_input_for_2d_sharding", "(", "\n", "context", ",", "q", ",", "k", ",", "v", ",", "bias", ",", "[", "key_dim", ",", "value_dim", "]", ")", "\n", "if", "float32_logits", ":", "\n", "    ", "k", "=", "mtf", ".", "cast", "(", "k", ",", "tf", ".", "float32", ")", "\n", "q", "=", "mtf", ".", "cast", "(", "q", ",", "tf", ".", "float32", ")", "\n", "", "logits", "=", "mtf", ".", "layers", ".", "us_einsum", "(", "[", "q", ",", "k", "]", ",", "reduced_dims", "=", "[", "key_dim", "]", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "    ", "logits", "+=", "mtf", ".", "cast", "(", "bias", ",", "logits", ".", "dtype", ")", "\n", "\n", "# Adds auxiliary z-loss to push the attention logits towards zero.", "\n", "", "if", "z_loss_coeff", "is", "not", "None", "and", "context", ".", "train", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"attention z_loss being added: {}\"", ".", "format", "(", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "name", ")", ")", "\n", "log_z", "=", "mtf", ".", "reduce_logsumexp", "(", "logits", ",", "memory_length_dim", ")", "\n", "z_loss", "=", "mtf", ".", "square", "(", "log_z", ")", "*", "mtf", ".", "cast", "(", "context", ".", "nonpadding", ",", "log_z", ".", "dtype", ")", "\n", "z_loss", "=", "mtf", ".", "reduce_mean", "(", "z_loss", ")", "\n", "if", "context", ".", "num_microbatches", "and", "context", ".", "num_microbatches", ">", "1", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\n", "\"Dividing attention z-loss loss by num_microbatches={}\"", ".", "format", "(", "\n", "context", ".", "num_microbatches", ")", ")", "\n", "z_loss", "/=", "context", ".", "num_microbatches", "\n", "", "if", "context", ".", "train", ":", "\n", "      ", "mtf", ".", "scalar_summary", "(", "\"attention_z_loss\"", ",", "z_loss", ")", "\n", "", "z_loss", "*=", "z_loss_coeff", "\n", "context", ".", "losses", ".", "append", "(", "mtf", ".", "cast", "(", "z_loss", ",", "v", ".", "dtype", ")", ")", "\n", "\n", "", "weights", "=", "mtf", ".", "softmax", "(", "logits", ",", "memory_length_dim", ",", "extra_logit", "=", "extra_logit", ")", "\n", "weights", "=", "mtf", ".", "cast", "(", "weights", ",", "v", ".", "dtype", ")", "\n", "weights", "=", "mtf", ".", "dropout", "(", "\n", "weights", ",", "context", ".", "train", ",", "1.0", "-", "dropout_rate", ",", "\n", "noise_shape", "=", "weights", ".", "shape", "-", "dropout_broadcast_dims", ")", "\n", "outputs_shape", "=", "q", ".", "shape", "-", "key_dim", "+", "value_dim", "\n", "outputs", "=", "mtf", ".", "einsum", "(", "[", "weights", ",", "v", "]", ",", "outputs_shape", ")", "\n", "outputs", "=", "mtf", ".", "reshape", "(", "outputs", ",", "orig_q_shape", "-", "key_dim", "+", "value_dim", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.hybrid_attention": [[113, 180], ["mesh_tensorflow.layers.us_einsum", "mesh_tensorflow.Dimension", "mesh_tensorflow.get_variable", "mesh_tensorflow.maximum", "mesh_tensorflow.softmax", "mesh_tensorflow.log_softmax", "mesh_tensorflow.softmax", "mesh_tensorflow.dropout", "mesh_tensorflow.einsum", "mesh_tensorflow.minimum", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.us_einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log_softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum"], ["", "def", "hybrid_attention", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "context", ",", "\n", "memory_length_dim", ",", "\n", "key_dim", ",", "\n", "value_dim", ",", "\n", "bias", "=", "None", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "dropout_broadcast_dims", "=", "None", ",", "\n", "extra_logit", "=", "None", ")", ":", "\n", "  ", "\"\"\"Dot-product attention - doesn't use positional dimensions.\n\n  key_dim is a Dimension representing the channels in the queries and keys\n  value_dim is a Dimension representing the channels in values\n  memory_length_dim is a Dimension representing the different key/value pairs.\n\n  Dimensions of q: other_query_dims + {key_dim}\n  Dimensions of k: other_memory_dims + {memory_length_dim, key_dim}\n  Dimensions of v: other_memory_dims + {memory_length_dim, value_dim}\n  other_memory_dims is a subset of other_query_dims\n\n  Typically, other_query_dims={batch, heads, length}\n  Typically, other_memory_dims={batch, heads}\n\n  Args:\n    q: a Tensor\n    k: a Tensor\n    v: a Tensor\n    context: context of the attention layer.\n    memory_length_dim: a Dimension\n    key_dim: a Dimension\n    value_dim: a Dimension\n    bias: a Tensor to be added into the attention logits.\n    dropout_rate: a float.\n    dropout_broadcast_dims: an optional list of mtf.Dimension\n    extra_logit: an optional scalar or tensor\n\n  Returns:\n    Tensor with shape q.shape - key_dim + value_dim\n  \"\"\"", "\n", "logits", "=", "mtf", ".", "layers", ".", "us_einsum", "(", "[", "q", ",", "k", "]", ",", "reduced_dims", "=", "[", "key_dim", "]", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "    ", "logits", "+=", "bias", "\n", "\n", "", "query_length_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "memory_length_dim", ".", "size", ")", "\n", "doubly_coeff", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\"doubly_coeff\"", ",", "[", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.5", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "doubly_coeff", "=", "mtf", ".", "maximum", "(", "mtf", ".", "minimum", "(", "doubly_coeff", ",", "1.", ")", ",", "0.", ")", "\n", "\n", "upper_weights", "=", "mtf", ".", "softmax", "(", "\n", "logits", ",", "memory_length_dim", ",", "extra_logit", "=", "extra_logit", ")", "\n", "\n", "lower_log_weights", "=", "mtf", ".", "log_softmax", "(", "\n", "logits", ",", "query_length_dim", ",", "extra_logit", "=", "extra_logit", ")", "\n", "doubly_weights", "=", "mtf", ".", "softmax", "(", "\n", "lower_log_weights", ",", "memory_length_dim", ",", "extra_logit", "=", "extra_logit", ")", "\n", "\n", "weights", "=", "doubly_coeff", "*", "doubly_weights", "+", "(", "1.", "-", "doubly_coeff", ")", "*", "upper_weights", "\n", "weights", "=", "mtf", ".", "dropout", "(", "\n", "weights", ",", "context", ".", "train", ",", "1.0", "-", "dropout_rate", ",", "\n", "noise_shape", "=", "weights", ".", "shape", "-", "dropout_broadcast_dims", ")", "\n", "outputs_shape", "=", "q", ".", "shape", "-", "key_dim", "+", "value_dim", "\n", "outputs", "=", "mtf", ".", "einsum", "(", "[", "weights", ",", "v", "]", ",", "outputs_shape", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.synthetic_attention": [[182, 365], ["mesh_tensorflow.softmax", "mesh_tensorflow.dropout", "mesh_tensorflow.einsum", "v.shape.get_dim_by_name", "tensorflow.logging.info", "tensorflow.logging.info", "mesh_tensorflow.Shape", "mesh_tensorflow.get_variable", "mesh_tensorflow.slice", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.gather", "q.shape.get_dim_by_name", "mesh_tensorflow.slice", "tensorflow.logging.info", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.einsum", "mesh_tensorflow.slice", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mtf.slice.shape.get_dim_by_name", "mesh_tensorflow.gather", "q.shape.get_dim_by_name", "mesh_tensorflow.slice", "mesh_tensorflow.Dimension", "mesh_tensorflow.layers.dense", "mesh_tensorflow.slice", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mtf.slice.shape.get_dim_by_name", "mesh_tensorflow.relu", "q.shape.get_dim_by_name", "mesh_tensorflow.slice", "tensorflow.logging.info", "mesh_tensorflow.einsum", "mtf.einsum.shape.get_dim_by_name", "mesh_tensorflow.Shape", "mesh_tensorflow.get_variable", "mesh_tensorflow.slice", "mesh_tensorflow.gather", "q.shape.get_dim_by_name", "mesh_tensorflow.slice", "mesh_tensorflow.get_variable", "mesh_tensorflow.sigmoid", "tensorflow.logging.info", "mesh_tensorflow.einsum", "mesh_tensorflow.Dimension", "mesh_tensorflow.layers.dense", "mesh_tensorflow.slice", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mtf.slice.shape.get_dim_by_name", "mesh_tensorflow.Shape", "mesh_tensorflow.relu", "q.shape.get_dim_by_name", "mesh_tensorflow.slice", "mesh_tensorflow.get_variable", "mesh_tensorflow.sigmoid", "tensorflow.zeros_initializer", "mesh_tensorflow.Shape", "mesh_tensorflow.Dimension", "tensorflow.zeros_initializer", "mesh_tensorflow.Dimension"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sigmoid", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sigmoid"], ["", "def", "synthetic_attention", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "memory_length_dim", ",", "\n", "key_dim", ",", "\n", "value_dim", ",", "\n", "bias", "=", "None", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "dropout_broadcast_dims", "=", "None", ",", "\n", "extra_logit", "=", "None", ",", "\n", "synthesize", "=", "True", ",", "\n", "synthesize_mode", "=", "\"random_plus_alpha\"", ",", "\n", "factorized_dim", "=", "16", ",", "\n", "max_length", "=", "512", ",", "\n", "context", "=", "None", ")", ":", "\n", "  ", "\"\"\"Synthetic Attention from Synthesizers (https://arxiv.org/abs/2005.00743).\n\n  key_dim is a Dimension representing the channels in the queries and keys\n  value_dim is a Dimension representing the channels in values\n  memory_length_dim is a Dimension representing the different key/value pairs.\n\n  Dimensions of q: other_query_dims + {key_dim}\n  Dimensions of k: other_memory_dims + {memory_length_dim, key_dim}\n  Dimensions of v: other_memory_dims + {memory_length_dim, value_dim}\n  other_memory_dims is a subset of other_query_dims\n\n  Typically, other_query_dims={batch, heads, length}\n  Typically, other_memory_dims={batch, heads}\n\n  Args:\n    q: a Tensor\n    k: a Tensor\n    v: a Tensor\n    memory_length_dim: a Dimension\n    key_dim: a Dimension\n    value_dim: a Dimension\n    bias: a Tensor to be added into the attention logits.\n    dropout_rate: a float.\n    dropout_broadcast_dims: an optional list of mtf.Dimension\n    extra_logit: an optional scalar or tensor\n    synthesize: flag to use synthetic attention or not\n    synthesize_mode: which variant of synthesizer to use\n    factorized_dim: factorized dim for synthesizers\n    max_length: max length of input sequence\n    context: context since we need context mode\n\n  Returns:\n    Tensor with shape q.shape - key_dim + value_dim\n  \"\"\"", "\n", "\n", "if", "synthesize", ":", "\n", "    ", "num_heads", "=", "v", ".", "shape", ".", "get_dim_by_name", "(", "\"heads\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Using synthesizer\"", ")", "\n", "if", "synthesize_mode", "==", "\"random\"", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Using Random Synthesizers\"", ")", "\n", "r_shape", "=", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"length\"", ",", "max_length", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_heads", ".", "size", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"memory_length\"", ",", "max_length", ")", "]", ")", "\n", "r", "=", "mtf", ".", "get_variable", "(", "context", ".", "mesh", ",", "\"R\"", ",", "r_shape", ",", "\n", "initializer", "=", "None", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "r", "=", "mtf", ".", "slice", "(", "r", ",", "0", ",", "memory_length_dim", ".", "size", ",", "memory_length_dim", ".", "name", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "        ", "r", "=", "mtf", ".", "gather", "(", "r", ",", "context", ".", "position", ",", "r", ".", "shape", ".", "get_dim_by_name", "(", "\"length\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "length_dim", "=", "q", ".", "shape", ".", "get_dim_by_name", "(", "\"length\"", ")", "\n", "r", "=", "mtf", ".", "slice", "(", "r", ",", "0", ",", "length_dim", ".", "size", ",", "\"length\"", ")", "\n", "", "logits", "=", "r", "\n", "r_shape", "=", "logits", ".", "shape", "\n", "", "elif", "synthesize_mode", "==", "\"factorized\"", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Using Factorized Random Synthesizers\"", ")", "\n", "k", "=", "factorized_dim", "\n", "r1_shape", "=", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"tmp\"", ",", "k", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_heads", ".", "size", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"memory_length\"", ",", "512", ")", "]", ")", "\n", "r2_shape", "=", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"tmp\"", ",", "k", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_heads", ".", "size", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"memory_length\"", ",", "512", ")", "]", ")", "\n", "r_shape", "=", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"length\"", ",", "512", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_heads", ".", "size", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"memory_length\"", ",", "512", ")", "]", ")", "\n", "r1", "=", "mtf", ".", "get_variable", "(", "context", ".", "mesh", ",", "\"R1\"", ",", "r1_shape", ",", "\n", "initializer", "=", "None", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "r2", "=", "mtf", ".", "get_variable", "(", "context", ".", "mesh", ",", "\"R2\"", ",", "r2_shape", ",", "\n", "initializer", "=", "None", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "r", "=", "mtf", ".", "einsum", "(", "[", "r1", ",", "r2", "]", ",", "r_shape", ")", "\n", "r", "=", "mtf", ".", "slice", "(", "r", ",", "0", ",", "memory_length_dim", ".", "size", ",", "memory_length_dim", ".", "name", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "        ", "r", "=", "mtf", ".", "gather", "(", "r", ",", "context", ".", "position", ",", "r", ".", "shape", ".", "get_dim_by_name", "(", "\"length\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "length_dim", "=", "q", ".", "shape", ".", "get_dim_by_name", "(", "\"length\"", ")", "\n", "r", "=", "mtf", ".", "slice", "(", "r", ",", "0", ",", "length_dim", ".", "size", ",", "\"length\"", ")", "\n", "", "logits", "=", "r", "\n", "", "elif", "synthesize_mode", "==", "\"dense_minus\"", ":", "\n", "# Dense Synthesizer Model", "\n", "      ", "tmp_dim", "=", "mtf", ".", "Dimension", "(", "\"memory_length\"", ",", "max_length", ")", "\n", "logits", "=", "mtf", ".", "layers", ".", "dense", "(", "mtf", ".", "relu", "(", "q", ")", ",", "[", "tmp_dim", "]", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "\"pi\"", ",", "\n", "reduced_dims", "=", "[", "key_dim", "]", ",", "\n", "variable_dtype", "=", "None", ")", "\n", "logits", "=", "mtf", ".", "slice", "(", "logits", ",", "0", ",", "memory_length_dim", ".", "size", ",", "\n", "memory_length_dim", ".", "name", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "length_dim", "=", "q", ".", "shape", ".", "get_dim_by_name", "(", "\"length\"", ")", "\n", "logits", "=", "mtf", ".", "slice", "(", "logits", ",", "0", ",", "length_dim", ".", "size", ",", "\"length\"", ")", "\n", "", "", "elif", "synthesize_mode", "==", "\"random_plus_alpha\"", "or", "synthesize_mode", "==", "\"random_plus\"", ":", "\n", "# Mixture Random Synthesizer with learnable Alpha", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Using Random Plus Alpha\"", ")", "\n", "logits", "=", "mtf", ".", "einsum", "(", "[", "q", ",", "k", "]", ",", "reduced_dims", "=", "[", "key_dim", "]", ")", "\n", "num_heads", "=", "logits", ".", "shape", ".", "get_dim_by_name", "(", "\"heads\"", ")", "\n", "r_shape", "=", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"length\"", ",", "512", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_heads", ".", "size", ")", ",", "\n", "mtf", ".", "Dimension", "(", "\"memory_length\"", ",", "512", ")", "]", ")", "\n", "r", "=", "mtf", ".", "get_variable", "(", "context", ".", "mesh", ",", "\"R\"", ",", "r_shape", ",", "\n", "initializer", "=", "None", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "r", "=", "mtf", ".", "slice", "(", "r", ",", "0", ",", "memory_length_dim", ".", "size", ",", "memory_length_dim", ".", "name", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "        ", "r", "=", "mtf", ".", "gather", "(", "r", ",", "context", ".", "position", ",", "r", ".", "shape", ".", "get_dim_by_name", "(", "\"length\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "length_dim", "=", "q", ".", "shape", ".", "get_dim_by_name", "(", "\"length\"", ")", "\n", "r", "=", "mtf", ".", "slice", "(", "r", ",", "0", ",", "length_dim", ".", "size", ",", "length_dim", ".", "name", ")", "\n", "", "if", "\"alpha\"", "in", "synthesize_mode", ":", "\n", "        ", "alpha", "=", "mtf", ".", "get_variable", "(", "context", ".", "mesh", ",", "\n", "\"alpha\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"alpha\"", ",", "1", ")", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "alpha", "=", "mtf", ".", "sigmoid", "(", "alpha", ")", "\n", "logits", "=", "(", "(", "1", "-", "alpha", ")", "*", "logits", ")", "+", "(", "alpha", "*", "r", ")", "\n", "", "else", ":", "\n", "        ", "logits", "=", "logits", "+", "r", "\n", "", "", "elif", "synthesize_mode", "==", "\"dense_plus_alpha\"", "or", "synthesize_mode", "==", "\"dense_plus\"", ":", "\n", "# Mixture Dense Synthesizer with learnable alpha", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Using Dense Plus Alpha Scaling\"", ")", "\n", "logits", "=", "mtf", ".", "einsum", "(", "[", "q", ",", "k", "]", ",", "reduced_dims", "=", "[", "key_dim", "]", ")", "\n", "tmp_dim", "=", "mtf", ".", "Dimension", "(", "\"memory_length\"", ",", "512", ")", "\n", "r", "=", "mtf", ".", "layers", ".", "dense", "(", "mtf", ".", "relu", "(", "q", ")", ",", "[", "tmp_dim", "]", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "\"pi\"", ",", "\n", "reduced_dims", "=", "[", "key_dim", "]", ",", "\n", "variable_dtype", "=", "None", ")", "\n", "r", "=", "mtf", ".", "slice", "(", "r", ",", "0", ",", "memory_length_dim", ".", "size", ",", "memory_length_dim", ".", "name", ")", "\n", "if", "context", ".", "mode", "==", "\"incremental\"", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "length_dim", "=", "q", ".", "shape", ".", "get_dim_by_name", "(", "\"length\"", ")", "\n", "r", "=", "mtf", ".", "slice", "(", "r", ",", "0", ",", "length_dim", ".", "size", ",", "\"length\"", ")", "\n", "", "if", "\"alpha\"", "in", "synthesize_mode", ":", "\n", "        ", "alpha", "=", "mtf", ".", "get_variable", "(", "context", ".", "mesh", ",", "\n", "\"alpha\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "mtf", ".", "Dimension", "(", "\"alpha\"", ",", "1", ")", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "alpha", "=", "mtf", ".", "sigmoid", "(", "alpha", ")", "\n", "logits", "=", "(", "(", "1", "-", "alpha", ")", "*", "logits", ")", "+", "(", "alpha", "*", "r", ")", "\n", "", "else", ":", "\n", "        ", "logits", "=", "logits", "+", "r", "\n", "", "", "", "if", "bias", "is", "not", "None", ":", "\n", "    ", "logits", "+=", "bias", "\n", "\n", "", "weights", "=", "mtf", ".", "softmax", "(", "logits", ",", "memory_length_dim", ",", "extra_logit", "=", "extra_logit", ")", "\n", "weights", "=", "mtf", ".", "dropout", "(", "\n", "weights", ",", "context", ".", "train", ",", "1.0", "-", "dropout_rate", ",", "\n", "noise_shape", "=", "weights", ".", "shape", "-", "dropout_broadcast_dims", ")", "\n", "\n", "if", "synthesize", "and", "\"plus\"", "not", "in", "synthesize_mode", ":", "\n", "    ", "if", "synthesize_mode", "==", "\"dense_minus\"", ":", "\n", "      ", "outputs_shape", "=", "mtf", ".", "Shape", "(", "q", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "+", "[", "value_dim", "]", ")", "\n", "", "else", ":", "\n", "      ", "outputs_shape", "=", "mtf", ".", "Shape", "(", "q", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "+", "[", "num_heads", ",", "value_dim", "]", ")", "\n", "", "", "else", ":", "\n", "    ", "outputs_shape", "=", "q", ".", "shape", "-", "[", "key_dim", "]", "+", "value_dim", "\n", "\n", "", "outputs", "=", "mtf", ".", "einsum", "(", "[", "weights", ",", "v", "]", ",", "outputs_shape", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention._combined_dim": [[774, 776], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Shape"], "function", ["None"], ["", "", "def", "_combined_dim", "(", "dims", ")", ":", "\n", "  ", "return", "mtf", ".", "Dimension", "(", "dims", "[", "0", "]", ".", "name", ",", "mtf", ".", "Shape", "(", "dims", ")", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.attention_params_simple": [[778, 801], ["attention.AttentionParams"], "function", ["None"], ["", "def", "attention_params_simple", "(", "\n", "mesh", ",", "io_dim", ",", "kv_dim", ",", "heads_dim", ",", "variable_dtype", ")", ":", "\n", "  ", "\"\"\"Common case attention parameters.\n\n  Args:\n    mesh: a Mesh\n    io_dim: a Dimension (channels dimension of inputs and outputs)\n    kv_dim: a Dimension (channels in keys and values)\n    heads_dim: a Dimension (number of attention \"heads\")\n    variable_dtype: a mtf.VariableDType\n  Returns:\n    an AttentionParams\n  \"\"\"", "\n", "return", "AttentionParams", "(", "\n", "mesh", ",", "\n", "query_input_dim", "=", "io_dim", ",", "\n", "memory_input_dim", "=", "io_dim", ",", "\n", "output_dim", "=", "io_dim", ",", "\n", "key_dim", "=", "kv_dim", ",", "\n", "value_dim", "=", "kv_dim", ",", "\n", "query_heads_dims", "=", "[", "heads_dim", "]", ",", "\n", "memory_heads_dims", "=", "[", "heads_dim", "]", ",", "\n", "variable_dtype", "=", "variable_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.local_attention_1d": [[803, 907], ["max", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "attention.local_attention_1d._reshape_query"], "function", ["None"], ["", "def", "local_attention_1d", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "length_dim", ",", "\n", "key_dim", ",", "\n", "value_dim", ",", "\n", "fully_autoregressive", "=", "True", ",", "\n", "length_dim_num_splits", "=", "1", ",", "\n", "radius", "=", "128", ",", "\n", "sequence_id", "=", "1", ",", "\n", "write_priority", "=", "None", ",", "\n", "read_priority", "=", "None", ",", "\n", "attention_kwargs", "=", "None", ")", ":", "\n", "  ", "\"\"\"Attention to the a neighborood around the source.\n\n  If fully_autoregressive, then query position p can only see memory positions\n  in the range (p - radius, p].\n\n  If not fully_autoregressive, then query position p can only see memory\n  positions in the range (p - window_size, p + radius].\n\n  In addition, if write_priority and read_priority are provided, then attention\n  is limited to position pairs where\n  read_priority[query position] >= write_priority[memory position]\n\n  Args:\n    q: a Tensor containing length_dim\n    k: a Tensor containing length_dim\n    v: an optional Tensor containing length_dim.  If none then uses v=k.\n    length_dim: a Dimension\n    key_dim: a Dimension (the channels dimension of q and k)\n    value_dim: a Dimension (the channels dimension of v)\n    fully_autoregressive: a boolean\n    length_dim_num_splits: an optional integer indicating how many ways the\n      length dimension is split\n    radius: an integer\n    sequence_id: a Tensor or an integer\n    write_priority: an optional Tensor containing length_dim\n    read_priority: an optional Tensor containing length_dim\n    attention_kwargs: optional keyword arguments for attention()\n\n  Returns:\n    a Tensor with the shape x.shape - key_dim + value_dim\n\n  Raises:\n    ValueError: if channels or depth don't match.\n  \"\"\"", "\n", "# Choose a suitable block size.", "\n", "# We choose the greatest divisor of length_per_split less than or equal", "\n", "# to max(window_size, 128)", "\n", "length_per_split", "=", "length_dim", ".", "size", "//", "length_dim_num_splits", "\n", "block_length", "=", "max", "(", "radius", ",", "128", ")", "\n", "while", "length_per_split", "%", "block_length", "!=", "0", ":", "\n", "    ", "block_length", "-=", "1", "\n", "", "query_block_length", "=", "mtf", ".", "Dimension", "(", "\"query_block_length\"", ",", "block_length", ")", "\n", "memory_block_length", "=", "mtf", ".", "Dimension", "(", "\"memory_block_length\"", ",", "block_length", ")", "\n", "# The num_blocks dimension gets the same name as the length dimension,", "\n", "# so it will be split in the same way.", "\n", "num_blocks", "=", "mtf", ".", "Dimension", "(", "length_dim", ".", "name", ",", "length_dim", ".", "size", "//", "block_length", ")", "\n", "def", "_reshape_query", "(", "x", ")", ":", "\n", "    ", "return", "mtf", ".", "replace_dimensions", "(", "\n", "x", ",", "length_dim", ",", "[", "num_blocks", ",", "query_block_length", "]", ")", "\n", "", "def", "_reshape_memory", "(", "x", ")", ":", "\n", "    ", "x", "=", "mtf", ".", "replace_dimensions", "(", "\n", "x", ",", "length_dim", ",", "[", "num_blocks", ",", "memory_block_length", "]", ")", "\n", "return", "(", "mtf", ".", "left_halo_exchange", "if", "fully_autoregressive", "\n", "else", "mtf", ".", "halo_exchange", ")", "(", "\n", "x", ",", "num_blocks", ",", "memory_block_length", ",", "radius", ")", "\n", "", "q", "=", "_reshape_query", "(", "q", ")", "\n", "k", "=", "_reshape_memory", "(", "k", ")", "\n", "if", "v", ":", "\n", "    ", "v", "=", "_reshape_memory", "(", "v", ")", "\n", "", "else", ":", "\n", "    ", "v", "=", "k", "\n", "", "if", "sequence_id", "is", "None", ":", "\n", "    ", "sequence_id", "=", "1", "\n", "", "if", "(", "not", "isinstance", "(", "sequence_id", ",", "mtf", ".", "Tensor", ")", "or", "\n", "length_dim", "not", "in", "sequence_id", ".", "shape", ".", "dims", ")", ":", "\n", "    ", "sequence_id", "+=", "mtf", ".", "zeros", "(", "q", ".", "mesh", ",", "[", "length_dim", "]", ",", "tf", ".", "int32", ")", "\n", "", "q_sequence_id", "=", "_reshape_query", "(", "sequence_id", ")", "\n", "m_sequence_id", "=", "_reshape_memory", "(", "sequence_id", ")", "\n", "pos", "=", "mtf", ".", "range", "(", "q", ".", "mesh", ",", "length_dim", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "q_pos", "=", "_reshape_query", "(", "pos", ")", "\n", "m_pos", "=", "_reshape_memory", "(", "pos", ")", "\n", "\n", "padded_memory_block_length", "=", "mtf", ".", "Dimension", "(", "\n", "\"memory_block_length\"", ",", "\n", "(", "1", "if", "fully_autoregressive", "else", "2", ")", "*", "radius", "+", "block_length", ")", "\n", "\n", "relative_position", "=", "m_pos", "-", "q_pos", "\n", "visible", "=", "mtf", ".", "equal", "(", "q_sequence_id", ",", "m_sequence_id", ")", "\n", "visible", "=", "mtf", ".", "logical_and", "(", "visible", ",", "mtf", ".", "greater", "(", "relative_position", ",", "-", "radius", ")", ")", "\n", "visible", "=", "mtf", ".", "logical_and", "(", "visible", ",", "mtf", ".", "less_equal", "(", "\n", "relative_position", ",", "0", "if", "fully_autoregressive", "else", "radius", ")", ")", "\n", "if", "read_priority", "is", "not", "None", ":", "\n", "    ", "write_priority", "=", "_reshape_memory", "(", "write_priority", ")", "\n", "read_priority", "=", "_reshape_query", "(", "read_priority", ")", "\n", "visible", "=", "mtf", ".", "logical_and", "(", "\n", "visible", ",", "mtf", ".", "greater_equal", "(", "read_priority", ",", "write_priority", ")", ")", "\n", "\n", "", "bias", "=", "visibility_mask_to_attention_bias", "(", "visible", ",", "q", ".", "dtype", ")", "\n", "o", "=", "attention", "(", "q", ",", "k", ",", "v", ",", "padded_memory_block_length", ",", "\n", "key_dim", ",", "value_dim", ",", "bias", ",", "**", "attention_kwargs", ")", "\n", "return", "mtf", ".", "replace_dimensions", "(", "o", ",", "[", "num_blocks", ",", "query_block_length", "]", ",", "length_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.visibility_mask_to_attention_bias": [[909, 922], ["mesh_tensorflow.cast", "mesh_tensorflow.logical_not"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_not"], ["", "def", "visibility_mask_to_attention_bias", "(", "visible", ",", "dtype", ")", ":", "\n", "  ", "\"\"\"Convert a boolean visibility mask to an attention bias.\n\n  The returned Tensor has large negative values in positions where\n  visible=False.\n\n  Args:\n    visible: a boolean Tensor\n    dtype: a dtype\n  Returns:\n    a Tensor with the given dtype and the same shape as \"visible\"\n  \"\"\"", "\n", "return", "mtf", ".", "cast", "(", "mtf", ".", "logical_not", "(", "visible", ")", ",", "dtype", ")", "*", "-", "1e9", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.maybe_reshape_attention_input_for_2d_sharding": [[924, 1004], ["mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_layout_rules", "mtf.convert_to_layout_rules.mesh_dimension_name_to_tensor_dimension_names", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "attention.maybe_reshape_attention_input_for_2d_sharding._my_reshape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.LayoutRules.mesh_dimension_name_to_tensor_dimension_names"], ["", "def", "maybe_reshape_attention_input_for_2d_sharding", "(", "\n", "context", ",", "q", ",", "k", ",", "v", ",", "bias", ",", "unsplittable_dims", ")", ":", "\n", "  ", "\"\"\"Reshape the inputs to attention to split over an unused mesh dimension.\n\n  In the case where the attention computation is unnecessarily replicated,\n  this function reshapes the attention inputs to remove the unnecessary\n  replication.\n\n  This becomes relevent when doing 2-dimenional model parallelism.\n  d_model is sharded over one mesh dimension and [vocab, num_heads, d_ff] are\n  sharded over the other mesh dimension.  This fully distributes all of the\n  einsum operations, except for the internals of the attention computation.\n\n  To distribute that computation, this function creates a new tensor-dimension\n  from the low bits of either the batch dimension or the num_heads dimension,\n  and then splits that dimension over the unused mesh dimension.\n\n  Args:\n    context: a transformer.Context\n    q: a Tensor\n    k: a Tensor\n    v: a Tensor\n    bias: a Tensor\n    unsplittable_dims: a list of tensor-dimensions not to split.  The key/value\n      dimensions should be passed here.\n  Returns:\n    reshaped_q: a Tensor\n    reshaped_k: a Tensor\n    reshaped_v: a Tensor\n    reshaped_bias: a Tensor\n  \"\"\"", "\n", "original_inputs", "=", "q", ",", "k", ",", "v", ",", "bias", "\n", "# we need to know the layout and mesh-shape to figure out what to do.", "\n", "if", "not", "context", "or", "not", "context", ".", "model", ".", "layout", "or", "not", "context", ".", "model", ".", "mesh_shape", ":", "\n", "    ", "return", "original_inputs", "\n", "", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "context", ".", "model", ".", "mesh_shape", ")", "\n", "layout_rules", "=", "mtf", ".", "convert_to_layout_rules", "(", "context", ".", "model", ".", "layout", ")", "\n", "# find a mesh dim that is unused (no tensor-dimension is split across it)", "\n", "mesh_axis_used", "=", "[", "False", "]", "*", "mesh_shape", ".", "ndims", "\n", "for", "x", "in", "original_inputs", ":", "\n", "    ", "for", "mesh_axis", "in", "layout_rules", ".", "tensor_layout", "(", "\n", "x", ".", "shape", ",", "mesh_shape", ")", ".", "tensor_axis_to_mesh_axis", ":", "\n", "      ", "if", "mesh_axis", "is", "not", "None", ":", "\n", "        ", "mesh_axis_used", "[", "mesh_axis", "]", "=", "True", "\n", "", "", "", "if", "False", "not", "in", "mesh_axis_used", ":", "\n", "    ", "return", "original_inputs", "\n", "", "mesh_dim", "=", "mesh_shape", ".", "dims", "[", "mesh_axis_used", ".", "index", "(", "False", ")", "]", "\n", "# Choose an appropriate name for the new tensor-dimension so that the layout", "\n", "#   will know to split it across the unused mesh dimension.", "\n", "tensor_dim_name", "=", "None", "\n", "tensor_dim_name", "=", "layout_rules", ".", "mesh_dimension_name_to_tensor_dimension_names", "(", "\n", "mesh_dim", ".", "name", ")", "\n", "if", "tensor_dim_name", ":", "\n", "    ", "tensor_dim_name", "=", "tensor_dim_name", "[", "0", "]", "\n", "", "else", ":", "\n", "    ", "return", "original_inputs", "\n", "# Find a tensor-dimension that we can further split, by breaking off the", "\n", "# lower bits into our new tensor-dimension.", "\n", "# This resplittable tensor-dimension must be presnent in all of q, k, v", "\n", "#   and must be large enough to be further split.", "\n", "", "resplittable_dim", "=", "None", "\n", "for", "d", "in", "q", ".", "shape", ".", "dims", ":", "\n", "    ", "if", "d", "in", "k", ".", "shape", ".", "dims", "and", "d", "in", "v", ".", "shape", ".", "dims", "and", "d", "not", "in", "unsplittable_dims", ":", "\n", "      ", "num_splits", "=", "mtf", ".", "tensor_dim_to_mesh_dim_size", "(", "\n", "context", ".", "model", ".", "layout", ",", "context", ".", "model", ".", "mesh_shape", ",", "d", ")", "\n", "if", "d", ".", "size", "%", "(", "num_splits", "*", "mesh_dim", ".", "size", ")", "==", "0", ":", "\n", "        ", "resplittable_dim", "=", "d", "\n", "break", "\n", "", "", "", "if", "not", "resplittable_dim", ":", "\n", "    ", "return", "original_inputs", "\n", "", "new_dim_high", "=", "mtf", ".", "Dimension", "(", "resplittable_dim", ".", "name", ",", "num_splits", ")", "\n", "new_dim_low", "=", "mtf", ".", "Dimension", "(", "tensor_dim_name", ",", "\n", "resplittable_dim", ".", "size", "//", "num_splits", ")", "\n", "def", "_my_reshape", "(", "x", ")", ":", "\n", "    ", "if", "x", "and", "resplittable_dim", "in", "x", ".", "shape", ".", "dims", ":", "\n", "      ", "return", "mtf", ".", "replace_dimensions", "(", "\n", "x", ",", "resplittable_dim", ",", "[", "new_dim_high", ",", "new_dim_low", "]", ")", "\n", "", "else", ":", "\n", "      ", "return", "x", "\n", "", "", "return", "_my_reshape", "(", "q", ")", ",", "_my_reshape", "(", "k", ")", ",", "_my_reshape", "(", "v", ")", ",", "_my_reshape", "(", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.make_params_mtlprompt": [[1006, 1110], ["tensorflow.logging.info", "mesh_tensorflow.reshape", "mtf.reshape.shape.get_dim_by_name", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.layers.layer_norm", "mesh_tensorflow.matmul", "mesh_tensorflow.relu", "mesh_tensorflow.matmul", "mesh_tensorflow.matmul", "mesh_tensorflow.relu", "mesh_tensorflow.matmul", "mesh_tensorflow.gather", "mesh_tensorflow.gather", "tensorflow.variable_scope", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "tensorflow.get_variable_scope", "scope_name.split", "mesh_tensorflow.dropout", "mesh_tensorflow.dropout", "mesh_tensorflow.dropout", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.layer_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout"], ["", "def", "make_params_mtlprompt", "(", "task_num", ",", "\n", "num_heads", ",", "\n", "prefix_hidden_dim", ",", "\n", "kv_dim", ",", "\n", "context", ",", "\n", "mtlprompt_share", ",", "\n", "dropout_rate", ",", "\n", "prompt_length", "=", "None", ")", ":", "\n", "  ", "\"\"\"Returns the parameters for MTL-Prompt mode.\"\"\"", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"MTL-Prompt mode is ON!\"", ")", "\n", "# Get task ids for the batch from the context cache.", "\n", "task_id", "=", "context", ".", "cache", "[", "\"task-id\"", "]", "\n", "\n", "# Remove length dim from shape [batch_size, length] -> [batch_size].", "\n", "task_id", "=", "mtf", ".", "reshape", "(", "task_id", ",", "task_id", ".", "shape", "-", "task_id", ".", "shape", ".", "dims", "[", "-", "1", "]", ")", "\n", "batch_size_dim", "=", "task_id", ".", "shape", ".", "get_dim_by_name", "(", "\"batch\"", ")", "\n", "\n", "task_num_dim", "=", "mtf", ".", "Dimension", "(", "\"task_num\"", ",", "task_num", ")", "\n", "prompt_length_dim", "=", "mtf", ".", "Dimension", "(", "\"memory_length\"", ",", "prompt_length", ")", "\n", "heads_dim", "=", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_heads", ")", "\n", "prefix_hidden_dim", "=", "mtf", ".", "Dimension", "(", "\"prefix_hidden\"", ",", "prefix_hidden_dim", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"prompt\"", ")", ":", "\n", "# Initialize projection network matrices.", "\n", "\n", "# MTL-Prompt-Share mode.", "\n", "    ", "hidden_shape", "=", "[", "context", ".", "model", ".", "model_dim", ",", "prefix_hidden_dim", "]", "\n", "scratch_shape", "=", "[", "prefix_hidden_dim", ",", "heads_dim", ",", "kv_dim", "]", "\n", "if", "not", "mtlprompt_share", ":", "\n", "# MTL-Prompt-Sep mode.", "\n", "      ", "hidden_shape", "=", "[", "task_num_dim", "]", "+", "hidden_shape", "\n", "scratch_shape", "=", "[", "task_num_dim", "]", "+", "scratch_shape", "\n", "\n", "", "w_k_up", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "\"w_k_up\"", ",", "\n", "mtf", ".", "Shape", "(", "hidden_shape", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "w_k_down", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "\"w_k_down\"", ",", "\n", "mtf", ".", "Shape", "(", "scratch_shape", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "w_v_up", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "\"w_v_up\"", ",", "\n", "mtf", ".", "Shape", "(", "hidden_shape", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "w_v_down", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "\"w_v_down\"", ",", "\n", "mtf", ".", "Shape", "(", "scratch_shape", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "\n", "", "scope_name", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "scope", "=", "scope_name", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "prompts", "=", "context", ".", "shared_params", "[", "scope", "]", "[", "\"prompts\"", "]", "\n", "prompts", "=", "mtf", ".", "layers", ".", "layer_norm", "(", "\n", "prompts", ",", "dim", "=", "context", ".", "model", ".", "model_dim", ",", "name", "=", "\"prompts_layernorm\"", ")", "\n", "if", "context", ".", "train", "and", "dropout_rate", "!=", "0.0", ":", "\n", "    ", "prompts", "=", "mtf", ".", "dropout", "(", "prompts", ",", "context", ".", "train", ",", "1.0", "-", "dropout_rate", ")", "\n", "\n", "", "prompts_k_hidden", "=", "mtf", ".", "matmul", "(", "\n", "prompts", ",", "\n", "w_k_up", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "prompt_length_dim", ",", "prefix_hidden_dim", "]", ",", "\n", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ")", "\n", "prompts_k_hidden", "=", "mtf", ".", "relu", "(", "prompts_k_hidden", ")", "\n", "if", "context", ".", "train", "and", "dropout_rate", "!=", "0.0", ":", "\n", "    ", "prompts_k_hidden", "=", "mtf", ".", "dropout", "(", "\n", "prompts_k_hidden", ",", "context", ".", "train", ",", "keep_prob", "=", "1.0", "-", "dropout_rate", ")", "\n", "", "prompts_k", "=", "mtf", ".", "matmul", "(", "\n", "prompts_k_hidden", ",", "\n", "w_k_down", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "prompt_length_dim", ",", "heads_dim", ",", "kv_dim", "]", ",", "\n", "reduced_dims", "=", "[", "prefix_hidden_dim", "]", ")", "\n", "\n", "prompts_v_hidden", "=", "mtf", ".", "matmul", "(", "\n", "prompts", ",", "\n", "w_v_up", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "prompt_length_dim", ",", "prefix_hidden_dim", "]", ",", "\n", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ")", "\n", "prompts_v_hidden", "=", "mtf", ".", "relu", "(", "prompts_v_hidden", ")", "\n", "if", "context", ".", "train", "and", "dropout_rate", "!=", "0.0", ":", "\n", "    ", "prompts_v_hidden", "=", "mtf", ".", "dropout", "(", "\n", "prompts_v_hidden", ",", "context", ".", "train", ",", "keep_prob", "=", "1.0", "-", "dropout_rate", ")", "\n", "", "prompts_v", "=", "mtf", ".", "matmul", "(", "\n", "prompts_v_hidden", ",", "\n", "w_v_down", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "prompt_length_dim", ",", "heads_dim", ",", "kv_dim", "]", ",", "\n", "reduced_dims", "=", "[", "prefix_hidden_dim", "]", ")", "\n", "\n", "prompts_batch_k", "=", "mtf", ".", "gather", "(", "\n", "prompts_k", ",", "\n", "task_id", ",", "\n", "task_num_dim", ",", "\n", "output_shape", "=", "[", "batch_size_dim", ",", "prompt_length_dim", ",", "heads_dim", ",", "kv_dim", "]", ")", "\n", "prompts_batch_v", "=", "mtf", ".", "gather", "(", "\n", "prompts_v", ",", "\n", "task_id", ",", "\n", "task_num_dim", ",", "\n", "output_shape", "=", "[", "batch_size_dim", ",", "prompt_length_dim", ",", "heads_dim", ",", "kv_dim", "]", ")", "\n", "return", "prompts_batch_k", ",", "prompts_batch_v", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.make_params_hyperprompt": [[1112, 1279], ["tensorflow.logging.info", "mesh_tensorflow.reshape", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.layers.layer_norm", "int", "mesh_tensorflow.constant", "mesh_tensorflow.gather", "mesh_tensorflow.concat", "mesh_tensorflow.matmul", "mesh_tensorflow.relu", "mesh_tensorflow.matmul", "mesh_tensorflow.layers.layer_norm", "mesh_tensorflow.matmul", "mesh_tensorflow.matmul", "mesh_tensorflow.matmul", "mesh_tensorflow.matmul", "mesh_tensorflow.matmul", "mesh_tensorflow.relu", "mesh_tensorflow.matmul", "mesh_tensorflow.gather", "mesh_tensorflow.matmul", "mesh_tensorflow.relu", "mesh_tensorflow.matmul", "mesh_tensorflow.gather", "mesh_tensorflow.dropout", "tensorflow.get_variable_scope", "scope_name.split", "range", "ValueError", "mesh_tensorflow.dropout", "mesh_tensorflow.dropout", "mesh_tensorflow.dropout", "[].split", "mesh_tensorflow.Shape", "scope_name.split"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.layer_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.layer_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.matmul", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split"], ["", "def", "make_params_hyperprompt", "(", "task_num", ",", "\n", "num_heads", ",", "\n", "prefix_hidden_dim", ",", "\n", "kv_dim", ",", "\n", "context", ",", "\n", "mtlprompt_share", ",", "\n", "dropout_rate", ",", "\n", "prompt_length", ",", "\n", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Returns the parameters for HyperPrompt mode.\"\"\"", "\n", "del", "mtlprompt_share", "\n", "tf", ".", "logging", ".", "info", "(", "\"HyperPrompt mode is ON!\"", ")", "\n", "# Get task ids for the batch from the context cache.", "\n", "task_id", "=", "context", ".", "cache", "[", "\"task-id\"", "]", "\n", "\n", "# Remove length dim from shape [batch_size, length].", "\n", "task_id", "=", "mtf", ".", "reshape", "(", "task_id", ",", "task_id", ".", "shape", "-", "task_id", ".", "shape", ".", "dims", "[", "-", "1", "]", ")", "\n", "\n", "batch_size_dim", "=", "[", "dim", "for", "dim", "in", "task_id", ".", "shape", ".", "dims", "if", "dim", ".", "name", "==", "\"batch\"", "]", "[", "0", "]", "\n", "\n", "task_num_dim", "=", "mtf", ".", "Dimension", "(", "\"task_num\"", ",", "task_num", ")", "\n", "prompt_length_dim", "=", "mtf", ".", "Dimension", "(", "\"memory_length\"", ",", "prompt_length", ")", "\n", "heads_dim", "=", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "num_heads", ")", "\n", "prefix_hidden_dim", "=", "mtf", ".", "Dimension", "(", "\"prefix_hidden\"", ",", "prefix_hidden_dim", ")", "\n", "\n", "prompts", "=", "context", ".", "shared_params", "[", "scope", "]", "[", "\"prompts\"", "]", "\n", "prompts", "=", "mtf", ".", "layers", ".", "layer_norm", "(", "\n", "prompts", ",", "dim", "=", "context", ".", "model", ".", "model_dim", ",", "name", "=", "\"prompts_layernorm\"", ")", "\n", "if", "context", ".", "train", "and", "dropout_rate", "!=", "0.0", ":", "\n", "    ", "prompts", "=", "mtf", ".", "dropout", "(", "prompts", ",", "context", ".", "train", ",", "1.0", "-", "dropout_rate", ")", "\n", "\n", "", "scope_name", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "scope", "=", "scope_name", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "\n", "# Get the layer id.", "\n", "layer_id", "=", "int", "(", "scope_name", ".", "split", "(", "\"/\"", ")", "[", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "\n", "task_raw_embeddings", "=", "context", ".", "shared_params", "[", "scope", "]", "[", "\"task_raw_embedding\"", "]", "\n", "task_raw_embedding_dim", "=", "task_raw_embeddings", ".", "shape", ".", "dims", "[", "1", "]", "\n", "\n", "task_projector_layer_one", "=", "context", ".", "shared_params", "[", "scope", "]", "[", "\n", "\"task_projector_layer_one\"", "]", "\n", "task_projector_layer_one_in_dim", "=", "task_projector_layer_one", ".", "shape", ".", "dims", "[", "0", "]", "\n", "task_hidden_dim", "=", "task_projector_layer_one", ".", "shape", ".", "dims", "[", "1", "]", "\n", "\n", "task_projector_layer_two", "=", "context", ".", "shared_params", "[", "scope", "]", "[", "\n", "\"task_projector_layer_two\"", "]", "\n", "task_final_embedding_dim", "=", "task_projector_layer_two", ".", "shape", ".", "dims", "[", "1", "]", "\n", "\n", "layer_id_embeddings", "=", "context", ".", "shared_params", "[", "scope", "]", "[", "\"layer_embedding\"", "]", "\n", "layer_num_dim", "=", "layer_id_embeddings", ".", "shape", ".", "dims", "[", "0", "]", "\n", "layer_id_embedding_dim", "=", "layer_id_embeddings", ".", "shape", ".", "dims", "[", "1", "]", "\n", "\n", "# Get the layer id embedding for the batch.", "\n", "if", "layer_id", "not", "in", "range", "(", "0", ",", "layer_num_dim", ".", "size", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"encounter errors in parsing scope get layer_id.\"", ")", "\n", "", "layer_id_task_num", "=", "mtf", ".", "constant", "(", "\n", "task_raw_embeddings", ".", "mesh", ",", "\n", "layer_id", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "task_num_dim", "]", ")", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", "\n", "layer_id_emb_task_num", "=", "mtf", ".", "gather", "(", "\n", "layer_id_embeddings", ",", "\n", "layer_id_task_num", ",", "\n", "layer_num_dim", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "layer_id_embedding_dim", "]", ")", "\n", "\n", "task_embeddings_concat", "=", "mtf", ".", "concat", "(", "\n", "[", "task_raw_embeddings", ",", "layer_id_emb_task_num", "]", ",", "\n", "concat_dim_name", "=", "task_raw_embedding_dim", ".", "name", ")", "\n", "\n", "# Feed raw task-embedding to MLP to obtain the layer-aware task embedding.", "\n", "task_embeddings_concat_hidden", "=", "mtf", ".", "matmul", "(", "\n", "task_embeddings_concat", ",", "\n", "task_projector_layer_one", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "task_hidden_dim", "]", ",", "\n", "reduced_dims", "=", "[", "task_projector_layer_one_in_dim", "]", ")", "\n", "task_embeddings_concat_hidden_relu", "=", "mtf", ".", "relu", "(", "task_embeddings_concat_hidden", ")", "\n", "\n", "if", "context", ".", "train", "and", "dropout_rate", "!=", "0.0", ":", "\n", "    ", "task_embeddings_concat_hidden_relu", "=", "mtf", ".", "dropout", "(", "\n", "task_embeddings_concat_hidden_relu", ",", "\n", "context", ".", "train", ",", "\n", "keep_prob", "=", "1.0", "-", "dropout_rate", ")", "\n", "\n", "", "task_embeddings_layer_awared", "=", "mtf", ".", "matmul", "(", "\n", "task_embeddings_concat_hidden_relu", ",", "\n", "task_projector_layer_two", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "task_final_embedding_dim", "]", ",", "\n", "reduced_dims", "=", "[", "task_hidden_dim", "]", ")", "\n", "\n", "task_embeddings_layer_awared", "=", "mtf", ".", "layers", ".", "layer_norm", "(", "\n", "task_embeddings_layer_awared", ",", "\n", "dim", "=", "task_final_embedding_dim", ",", "\n", "name", "=", "\"prompt_task_embed_layernorm\"", ")", "\n", "\n", "hypernet_w_k_up", "=", "context", ".", "shared_params", "[", "scope", "]", "[", "\"hypernet_w_k_up\"", "]", "\n", "hypernet_w_k_down", "=", "context", ".", "shared_params", "[", "scope", "]", "[", "\"hypernet_w_k_down\"", "]", "\n", "hypernet_w_v_up", "=", "context", ".", "shared_params", "[", "scope", "]", "[", "\"hypernet_w_v_up\"", "]", "\n", "hypernet_w_v_down", "=", "context", ".", "shared_params", "[", "scope", "]", "[", "\"hypernet_w_v_down\"", "]", "\n", "\n", "# Hypernetwork generates the prompts transformation", "\n", "w_k_up", "=", "mtf", ".", "matmul", "(", "\n", "task_embeddings_layer_awared", ",", "\n", "hypernet_w_k_up", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "context", ".", "model", ".", "model_dim", ",", "prefix_hidden_dim", "]", ",", "\n", "reduced_dims", "=", "[", "task_final_embedding_dim", "]", ")", "\n", "\n", "w_k_down", "=", "mtf", ".", "matmul", "(", "\n", "task_embeddings_layer_awared", ",", "\n", "hypernet_w_k_down", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "prefix_hidden_dim", ",", "heads_dim", ",", "kv_dim", "]", ",", "\n", "reduced_dims", "=", "[", "task_final_embedding_dim", "]", ")", "\n", "\n", "w_v_up", "=", "mtf", ".", "matmul", "(", "\n", "task_embeddings_layer_awared", ",", "\n", "hypernet_w_v_up", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "context", ".", "model", ".", "model_dim", ",", "prefix_hidden_dim", "]", ",", "\n", "reduced_dims", "=", "[", "task_final_embedding_dim", "]", ")", "\n", "\n", "w_v_down", "=", "mtf", ".", "matmul", "(", "\n", "task_embeddings_layer_awared", ",", "\n", "hypernet_w_v_down", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "prefix_hidden_dim", ",", "heads_dim", ",", "kv_dim", "]", ",", "\n", "reduced_dims", "=", "[", "task_final_embedding_dim", "]", ")", "\n", "\n", "prompts_k_hidden", "=", "mtf", ".", "matmul", "(", "\n", "prompts", ",", "\n", "w_k_up", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "prompt_length_dim", ",", "prefix_hidden_dim", "]", ",", "\n", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ")", "\n", "prompts_k_hidden", "=", "mtf", ".", "relu", "(", "prompts_k_hidden", ")", "\n", "if", "context", ".", "train", "and", "dropout_rate", "!=", "0.0", ":", "\n", "    ", "prompts_k_hidden", "=", "mtf", ".", "dropout", "(", "\n", "prompts_k_hidden", ",", "context", ".", "train", ",", "keep_prob", "=", "1.0", "-", "dropout_rate", ")", "\n", "", "prompts_k", "=", "mtf", ".", "matmul", "(", "\n", "prompts_k_hidden", ",", "\n", "w_k_down", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "prompt_length_dim", ",", "heads_dim", ",", "kv_dim", "]", ",", "\n", "reduced_dims", "=", "[", "prefix_hidden_dim", "]", ")", "\n", "prompts_batch_k", "=", "mtf", ".", "gather", "(", "\n", "prompts_k", ",", "\n", "task_id", ",", "\n", "task_num_dim", ",", "\n", "output_shape", "=", "[", "batch_size_dim", ",", "prompt_length_dim", ",", "heads_dim", ",", "kv_dim", "]", ")", "\n", "\n", "prompts_v_hidden", "=", "mtf", ".", "matmul", "(", "\n", "prompts", ",", "\n", "w_v_up", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "prompt_length_dim", ",", "prefix_hidden_dim", "]", ",", "\n", "reduced_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ")", "\n", "prompts_v_hidden", "=", "mtf", ".", "relu", "(", "prompts_v_hidden", ")", "\n", "if", "context", ".", "train", "and", "dropout_rate", "!=", "0.0", ":", "\n", "    ", "prompts_v_hidden", "=", "mtf", ".", "dropout", "(", "\n", "prompts_v_hidden", ",", "context", ".", "train", ",", "keep_prob", "=", "1.0", "-", "dropout_rate", ")", "\n", "", "prompts_v", "=", "mtf", ".", "matmul", "(", "\n", "prompts_v_hidden", ",", "\n", "w_v_down", ",", "\n", "output_shape", "=", "[", "task_num_dim", ",", "prompt_length_dim", ",", "heads_dim", ",", "kv_dim", "]", ",", "\n", "reduced_dims", "=", "[", "prefix_hidden_dim", "]", ")", "\n", "prompts_batch_v", "=", "mtf", ".", "gather", "(", "\n", "prompts_v", ",", "\n", "task_id", ",", "\n", "task_num_dim", ",", "\n", "output_shape", "=", "[", "batch_size_dim", ",", "prompt_length_dim", ",", "heads_dim", ",", "kv_dim", "]", ")", "\n", "\n", "return", "prompts_batch_k", ",", "prompts_batch_v", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.concat_hyper_prompts_kv": [[1281, 1318], ["mesh_tensorflow.concat", "mesh_tensorflow.concat", "mesh_tensorflow.Dimension", "mesh_tensorflow.range", "attention.make_params_hyperprompt", "attention.make_params_mtlprompt"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.make_params_hyperprompt", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.attention.make_params_mtlprompt"], ["", "def", "concat_hyper_prompts_kv", "(", "k", ",", "v", ",", "scope_encoder_or_decoder", ",", "use_hyperprompt", ",", "\n", "memory_length", ",", "task_num", ",", "num_heads", ",", "\n", "prefix_hidden_dim", ",", "kv_dim", ",", "context", ",", "mtlprompt_share", ",", "\n", "dropout_rate", ",", "prompt_length", ")", ":", "\n", "  ", "\"\"\"Performs the concatenation of hyper prompts to key and value.\"\"\"", "\n", "# Inject hyper-prompts into keys and values.", "\n", "if", "use_hyperprompt", ":", "\n", "# HyperPrompt mode.", "\n", "    ", "prompts_batch_k", ",", "prompts_batch_v", "=", "make_params_hyperprompt", "(", "\n", "task_num", ",", "\n", "num_heads", ",", "\n", "prefix_hidden_dim", ",", "\n", "kv_dim", ",", "\n", "context", ",", "\n", "mtlprompt_share", ",", "\n", "dropout_rate", ",", "\n", "prompt_length", "=", "prompt_length", ",", "\n", "scope", "=", "scope_encoder_or_decoder", ")", "\n", "", "else", ":", "\n", "# MTL-Prompt mode.", "\n", "    ", "prompts_batch_k", ",", "prompts_batch_v", "=", "make_params_mtlprompt", "(", "\n", "task_num", ",", "\n", "num_heads", ",", "\n", "prefix_hidden_dim", ",", "\n", "kv_dim", ",", "\n", "context", ",", "\n", "mtlprompt_share", ",", "\n", "dropout_rate", ",", "\n", "prompt_length", "=", "prompt_length", ")", "\n", "\n", "", "k", "=", "mtf", ".", "concat", "(", "[", "prompts_batch_k", ",", "k", "]", ",", "concat_dim_name", "=", "\"memory_length\"", ")", "\n", "v", "=", "mtf", ".", "concat", "(", "[", "prompts_batch_v", ",", "v", "]", ",", "concat_dim_name", "=", "\"memory_length\"", ")", "\n", "memory_length", "=", "mtf", ".", "Dimension", "(", "\"memory_length\"", ",", "\n", "memory_length", ".", "size", "+", "prompt_length", ")", "\n", "memory_position", "=", "mtf", ".", "range", "(", "context", ".", "mesh", ",", "memory_length", ",", "tf", ".", "int32", ")", "\n", "\n", "return", "k", ",", "v", ",", "memory_position", ",", "memory_length", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.AttentionParamsFixup.__init__": [[118, 162], ["mesh_tensorflow.layers.unit_scaling_convention", "mesh_tensorflow.transformer.attention.AttentionParams.__init__", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.unit_scaling_convention", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "mesh", ",", "\n", "query_input_dim", ",", "\n", "memory_input_dim", ",", "\n", "output_dim", ",", "\n", "key_dim", ",", "\n", "value_dim", ",", "\n", "query_heads_dims", ",", "\n", "memory_heads_dims", ",", "\n", "variable_dtype", ",", "\n", "shared_kv", "=", "False", ",", "\n", "fold_scaling_into_initializer", "=", "False", ",", "\n", "num_blocks", "=", "None", ",", "\n", "default_init", "=", "\"he\"", ",", "\n", "init_distribution", "=", "\"uniform\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "    ", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "default_init", "=", "default_init", "\n", "self", ".", "init_distribution", "=", "init_distribution", "\n", "\n", "if", "mtf", ".", "layers", ".", "unit_scaling_convention", "(", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Fixup initialization is not compatible with unit scaling convention.\"", "\n", ")", "\n", "\n", "", "if", "fold_scaling_into_initializer", ":", "\n", "      ", "raise", "ValueError", "(", "\"Fixup initialization is not compatible with \"", "\n", "\"`fold_scaling_into_initializer.\"", ")", "\n", "\n", "", "super", "(", "AttentionParamsFixup", ",", "self", ")", ".", "__init__", "(", "\n", "mesh", ",", "\n", "query_input_dim", ",", "\n", "memory_input_dim", ",", "\n", "output_dim", ",", "\n", "key_dim", ",", "\n", "value_dim", ",", "\n", "query_heads_dims", ",", "\n", "memory_heads_dims", ",", "\n", "variable_dtype", ",", "\n", "shared_kv", "=", "shared_kv", ",", "\n", "fold_scaling_into_initializer", "=", "fold_scaling_into_initializer", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.AttentionParamsFixup.init_weights": [[163, 220], ["tensorflow.initializers.zeros", "mesh_tensorflow.get_variable", "tensorflow.initializers.variance_scaling", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "tensorflow.initializers.variance_scaling", "ValueError", "math.pow", "math.pow"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "o_init_fixup", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "\n", "# Since tf.initializers.variance_scaling returns sqrt(3 * scale / n), (note", "\n", "# that scale is inside sqrt), we need to square the scale factor. Hence the", "\n", "# exponent is -1/3 instead of -1/6 as described in the class docstring.", "\n", "if", "self", ".", "default_init", "==", "\"glorot\"", ":", "\n", "      ", "init_fixup", "=", "tf", ".", "initializers", ".", "variance_scaling", "(", "\n", "mode", "=", "\"fan_avg\"", ",", "\n", "distribution", "=", "self", ".", "init_distribution", ",", "\n", "scale", "=", "math", ".", "pow", "(", "self", ".", "num_blocks", ",", "-", "1.", "/", "3", ")", ")", "\n", "", "elif", "self", ".", "default_init", "==", "\"he\"", ":", "\n", "      ", "init_fixup", "=", "tf", ".", "initializers", ".", "variance_scaling", "(", "\n", "mode", "=", "\"fan_in\"", ",", "\n", "distribution", "=", "self", ".", "init_distribution", ",", "\n", "scale", "=", "2", "*", "math", ".", "pow", "(", "self", ".", "num_blocks", ",", "-", "1.", "/", "3", ")", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "(", "\"Unsupported default initialization. Only 'glorot' and 'he'\"", "\n", "\" initializations are supported.\"", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "no_query", ":", "\n", "      ", "self", ".", "wq", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"q_fixup\"", ",", "\n", "self", ".", "q_shape", ",", "\n", "initializer", "=", "init_fixup", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "\n", "", "if", "self", ".", "shared_kv", ":", "\n", "      ", "self", ".", "wkv", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"kv_fixup\"", ",", "\n", "self", ".", "k_shape", ",", "\n", "initializer", "=", "init_fixup", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "wk", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"k_fixup\"", ",", "\n", "self", ".", "k_shape", ",", "\n", "initializer", "=", "init_fixup", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "\n", "self", ".", "wv", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"v_fixup\"", ",", "\n", "self", ".", "v_shape", ",", "\n", "initializer", "=", "init_fixup", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "\n", "", "self", ".", "wo", "=", "mtf", ".", "get_variable", "(", "\n", "self", ".", "mesh", ",", "\n", "\"o_fixup\"", ",", "\n", "self", ".", "o_shape", ",", "\n", "initializer", "=", "o_init_fixup", ",", "\n", "dtype", "=", "self", ".", "variable_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.DenseReluDenseFixup.__init__": [[275, 302], ["tensorflow.initializers.zeros", "tensorflow.initializers.variance_scaling", "tensorflow.initializers.variance_scaling", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["def", "__init__", "(", "\n", "self", ",", "\n", "hidden_size", "=", "4096", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", "use_bias", "=", "False", ",", "\n", "default_init", "=", "\"he\"", ",", "\n", "init_distribution", "=", "\"uniform\"", ",", "\n", "num_blocks", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "\n", "    ", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "\n", "self", ".", "downproject_initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "if", "default_init", "==", "\"glorot\"", ":", "\n", "      ", "self", ".", "upproject_initializer", "=", "tf", ".", "initializers", ".", "variance_scaling", "(", "\n", "mode", "=", "\"fan_avg\"", ",", "\n", "distribution", "=", "init_distribution", ",", "\n", "scale", "=", "1.0", "/", "num_blocks", ")", "\n", "", "elif", "default_init", "==", "\"he\"", ":", "\n", "      ", "self", ".", "upproject_initializer", "=", "tf", ".", "initializers", ".", "variance_scaling", "(", "\n", "mode", "=", "\"fan_in\"", ",", "distribution", "=", "init_distribution", ",", "scale", "=", "2.0", "/", "num_blocks", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Unsupported default initialization. Only 'glorot' and 'he'\"", "\n", "\" initializations are supported.\"", ")", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.DenseReluDenseFixup.call": [[304, 336], ["mesh_tensorflow.Dimension", "fixup_layers.dense_product_fixup", "fixup_layers.get_single_scalar_bias", "mesh_tensorflow.add", "mesh_tensorflow.reshape", "mesh_tensorflow.layers.dense", "mesh_tensorflow.dropout"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.dense_product_fixup", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.get_single_scalar_bias", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout"], ["", "", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "io_channels", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "hidden_channels", "=", "mtf", ".", "Dimension", "(", "\"d_ff\"", ",", "self", ".", "hidden_size", ")", "\n", "\n", "h", "=", "dense_product_fixup", "(", "\n", "x", ",", "\n", "reduced_dims", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "new_dims", "=", "hidden_channels", ",", "\n", "activation_functions", "=", "self", ".", "activation", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"wi\"", ",", "\n", "kernel_initializer", "=", "self", ".", "upproject_initializer", ",", "\n", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ")", "\n", "if", "context", ".", "train", "and", "self", ".", "dropout_rate", "!=", "0.0", ":", "\n", "      ", "h", "=", "mtf", ".", "dropout", "(", "\n", "h", ",", "context", ".", "train", ",", "1.0", "-", "self", ".", "dropout_rate", ",", "\n", "noise_shape", "=", "h", ".", "shape", "-", "context", ".", "length_dim", ")", "\n", "", "shift", "=", "get_single_scalar_bias", "(", "x", ",", "\"shift\"", ")", "\n", "h_res", "=", "mtf", ".", "add", "(", "h", ",", "shift", ")", "\n", "h", "=", "mtf", ".", "reshape", "(", "h_res", ",", "h", ".", "shape", ")", "\n", "return", "mtf", ".", "layers", ".", "dense", "(", "\n", "h", ",", "\n", "io_channels", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "activation", "=", "None", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "reduced_dims", "=", "h", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "name", "=", "\"wo\"", ",", "\n", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ",", "\n", "kernel_initializer", "=", "self", ".", "downproject_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.SelfAttentionFixup.__init__": [[342, 352], ["mesh_tensorflow.transformer.transformer_layers.SelfAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_blocks", "=", "gin", ".", "REQUIRED", ",", "\n", "default_init", "=", "\"glorot\"", ",", "\n", "init_distribution", "=", "\"uniform\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "# Any arg in `kwargs` should be defined in SelfAttention constructor.", "\n", "    ", "super", "(", "SelfAttentionFixup", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "default_init", "=", "default_init", "\n", "self", ".", "init_distribution", "=", "init_distribution", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.SelfAttentionFixup.make_params": [[353, 389], ["fixup_layers.AttentionParamsFixup", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "ValueError", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["None"], ["", "def", "make_params", "(", "self", ",", "context", ")", ":", "\n", "    ", "if", "self", ".", "num_heads", "==", "1", ":", "\n", "      ", "query_heads_dims", "=", "None", "\n", "memory_heads_dims", "=", "None", "\n", "", "elif", "self", ".", "num_memory_heads", "==", "0", ":", "\n", "      ", "query_heads_dims", "=", "[", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "self", ".", "num_heads", ")", "]", "\n", "memory_heads_dims", "=", "query_heads_dims", "\n", "", "elif", "self", ".", "num_memory_heads", "==", "1", ":", "\n", "      ", "query_heads_dims", "=", "[", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "self", ".", "num_heads", ")", "]", "\n", "memory_heads_dims", "=", "None", "\n", "", "else", ":", "\n", "      ", "if", "self", ".", "num_heads", "%", "self", ".", "num_memory_heads", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"num_memory_heads must divide num_heads\"", ")", "\n", "", "memory_heads_dims", "=", "[", "mtf", ".", "Dimension", "(", "\"heads\"", ",", "self", ".", "num_memory_heads", ")", "]", "\n", "query_heads_dims", "=", "memory_heads_dims", "+", "[", "\n", "mtf", ".", "Dimension", "(", "\"query_heads\"", ",", "self", ".", "num_heads", "//", "self", ".", "num_memory_heads", ")", "\n", "]", "\n", "\n", "", "return", "AttentionParamsFixup", "(", "\n", "context", ".", "mesh", ",", "\n", "query_input_dim", "=", "context", ".", "model", ".", "model_dim", ",", "\n", "memory_input_dim", "=", "context", ".", "model", ".", "model_dim", ",", "\n", "output_dim", "=", "context", ".", "model", ".", "model_dim", ",", "\n", "key_dim", "=", "self", ".", "kv_dim", ",", "\n", "value_dim", "=", "self", ".", "kv_dim", ",", "\n", "query_heads_dims", "=", "query_heads_dims", ",", "\n", "memory_heads_dims", "=", "memory_heads_dims", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "shared_kv", "=", "self", ".", "shared_kv", ",", "\n", "ensemble_dim", "=", "context", ".", "model", ".", "ensemble_dim", ",", "\n", "combine_dims", "=", "self", ".", "combine_dims", ",", "\n", "keep_query_heads_dims", "=", "self", ".", "keep_query_heads_dims", ",", "\n", "fold_scaling_into_initializer", "=", "self", ".", "fold_scaling_into_initializer", ",", "\n", "num_blocks", "=", "self", ".", "num_blocks", ",", "\n", "default_init", "=", "self", ".", "default_init", ",", "\n", "init_distribution", "=", "self", ".", "init_distribution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.EncDecAttentionFixup.__init__": [[395, 398], ["mesh_tensorflow.transformer.transformer_layers.EncDecAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__"], ["def", "__init__", "(", "self", ",", "relative_attention_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "EncDecAttentionFixup", ",", "self", ")", ".", "__init__", "(", "\n", "relative_attention_type", "=", "relative_attention_type", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.EncDecAttentionFixup._get_memory_antecedent": [[399, 401], ["None"], "methods", ["None"], ["", "def", "_get_memory_antecedent", "(", "self", ",", "context", ")", ":", "\n", "    ", "return", "context", ".", "encoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.EncDecAttentionFixup.call": [[402, 406], ["mesh_tensorflow.transformer.transformer_layers.enc_dec_attention", "fixup_layers.EncDecAttentionFixup._get_memory_antecedent"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.enc_dec_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.EncDecAttentionFixup._get_memory_antecedent"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the layer.\"\"\"", "\n", "return", "transformer_layers", ".", "enc_dec_attention", "(", "\n", "self", ",", "self", ".", "_get_memory_antecedent", "(", "context", ")", ",", "context", ",", "x", ",", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.get_single_scalar_bias": [[30, 50], ["mesh_tensorflow.Dimension", "mesh_tensorflow.get_variable", "mesh_tensorflow.Shape", "tensorflow.zeros_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["def", "get_single_scalar_bias", "(", "x", ",", "name", ":", "str", ")", ":", "\n", "  ", "\"\"\"Simple helper method to return a scalar bias.\n\n  This is used as the `shift` in FixUp initialization and should be before\n  every projection or convolution.\n\n  Args:\n    x: A mtf variable, used to know which mesh and dtype to use.\n    name: The name of the bias.\n\n  Returns:\n    A (trainable) mtf Scalar.\n  \"\"\"", "\n", "single_dimension", "=", "mtf", ".", "Dimension", "(", "\"single_bias\"", ",", "1", ")", "\n", "return", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\n", "name", ",", "\n", "mtf", ".", "Shape", "(", "[", "single_dimension", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.dense_product_fixup": [[52, 86], ["mesh_tensorflow.layers.dense_product"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense_product"], ["", "def", "dense_product_fixup", "(", "x", ",", "\n", "reduced_dims", ",", "\n", "new_dims", ",", "\n", "kernel_initializer", ",", "\n", "activation_functions", "=", "None", ",", "\n", "name", "=", "\"dense_product\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Wrapper around dense_product that is explicit about kernel initialization.\n\n  Args:\n    x: a Tensor\n    reduced_dims: a list of Dimensions.\n    new_dims: a list of Dimensions.\n    kernel_initializer: The kernel initializer to use for the dense product. For\n      fixup, this is the initializer scaled according to the number of encoder\n      and decoder layers.\n    activation_functions: a list of activation functions (or a singleton)\n      Each can be a either: - a callable function from Tensor to Tensor - a\n        string function name from namespace mtf) - None or \"linear\", meaning no\n        activation function\n    name: an optional string\n    **kwargs: additional kwargs for mtf.layers.dense()\n\n  Returns:\n    Component wise product of dense layers with fixup init.\n  \"\"\"", "\n", "return", "mtf", ".", "layers", ".", "dense_product", "(", "\n", "x", ",", "\n", "reduced_dims", ",", "\n", "new_dims", ",", "\n", "activation_functions", ",", "\n", "name", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.sublayer_fixup_scale": [[408, 418], ["mesh_tensorflow.Dimension", "mesh_tensorflow.get_variable", "mesh_tensorflow.reshape", "mesh_tensorflow.Shape", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "sublayer_fixup_scale", "(", "x", ",", "layer_stack", ",", "context", ")", ":", "\n", "  ", "\"\"\"Multiply by single one-initialized scalar.\"\"\"", "\n", "del", "layer_stack", "\n", "dim", "=", "mtf", ".", "Dimension", "(", "\"single_scale\"", ",", "1", ")", "\n", "fixup_weight", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\"fixup_scale_weight\"", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "dim", "]", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ")", "\n", "return", "mtf", ".", "reshape", "(", "x", "*", "fixup_weight", ",", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.fixup_layers.sublayer_fixup_shift": [[420, 432], ["mesh_tensorflow.Dimension", "mesh_tensorflow.get_variable", "mesh_tensorflow.add", "mesh_tensorflow.reshape", "mesh_tensorflow.Shape", "tensorflow.zeros_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "@", "gin", ".", "configurable", "\n", "def", "sublayer_fixup_shift", "(", "x", ",", "layer_stack", ",", "context", ")", ":", "\n", "  ", "\"\"\"Shift by single zero-initialized scalar.\"\"\"", "\n", "del", "layer_stack", "\n", "dim", "=", "mtf", ".", "Dimension", "(", "\"single_bias\"", ",", "1", ")", "\n", "fixup_bias", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\"fixup_bias\"", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "dim", "]", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "res", "=", "mtf", ".", "add", "(", "x", ",", "fixup_bias", ")", "\n", "res", "=", "mtf", ".", "reshape", "(", "res", ",", "x", ".", "shape", ")", "\n", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.product_learning_rate": [[33, 59], ["callable", "f"], "function", ["None"], ["@", "gin", ".", "configurable", "\n", "def", "product_learning_rate", "(", "step", ",", "\n", "total_train_steps", ",", "\n", "factors", "=", "gin", ".", "REQUIRED", ",", "\n", "offset", "=", "0", ")", ":", "\n", "  ", "\"\"\"Learning rate is the product of one or more factors.\n\n  Takes a list of factors which are either numbers or learning-rate functions\n  each taking step and total_train_step arguments.\n\n  If `offset` is nonzero, then subtract offset from the step and from\n  total_train_steps before computing the learning rate.\n\n  Args:\n    step: a tf.Scalar\n    total_train_steps: a number\n    factors: a list of numbers and/or functions\n    offset: an optional float\n\n  Returns:\n    a tf.Scalar, the learning rate for the step.\n  \"\"\"", "\n", "ret", "=", "1.0", "\n", "for", "f", "in", "factors", ":", "\n", "    ", "ret", "*=", "f", "(", "step", "-", "offset", ",", "total_train_steps", "-", "offset", ")", "if", "callable", "(", "f", ")", "else", "f", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.linear_decay": [[61, 85], ["tensorflow.cast", "tensorflow.minimum"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum"], ["", "@", "gin", ".", "configurable", "\n", "def", "linear_decay", "(", "step", ",", "\n", "total_train_steps", ",", "\n", "steps_or_fraction", "=", "0.1", ")", ":", "\n", "  ", "\"\"\"Linearly decay the learning rate to 0.\n\n  If steps_or_fraction > 1 , it is the absolute number of final steps\n  over which to decay.  If it is <=1, then it is a fraction of the total number\n  of training steps.\n\n  Args:\n    step: a tf.scalar representing the step we want the learning rate for.\n    total_train_steps: a number, the total number of training steps.\n    steps_or_fraction: a number\n\n\n  Returns:\n    a tf.Scalar, the learning rate for the step.\n  \"\"\"", "\n", "decay_steps", "=", "steps_or_fraction", "\n", "if", "steps_or_fraction", "<=", "1", ":", "\n", "    ", "decay_steps", "*=", "total_train_steps", "\n", "", "step", "=", "tf", ".", "cast", "(", "step", ",", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "minimum", "(", "1.0", ",", "(", "total_train_steps", "-", "step", ")", "/", "decay_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.linear_warmup": [[87, 111], ["tensorflow.cast", "tensorflow.minimum"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum"], ["", "@", "gin", ".", "configurable", "\n", "def", "linear_warmup", "(", "step", ",", "\n", "total_train_steps", ",", "\n", "steps_or_fraction", "=", "10000", ")", ":", "\n", "  ", "\"\"\"Linearly warm up the learning rate from 0.\n\n  If steps_or_fraction > 1 , it is the absolute number of initial steps over\n  which to warm up.  If it is <=1, then it is a fraction of the total number of\n  training steps.\n\n  Args:\n    step: a tf.scalar representing the step we want the learning rate for.\n    total_train_steps: a number, the total number of training steps.\n    steps_or_fraction: a number\n\n\n  Returns:\n    a tf.Scalar, the learning rate for the step.\n  \"\"\"", "\n", "warmup_steps", "=", "steps_or_fraction", "\n", "if", "steps_or_fraction", "<=", "1", ":", "\n", "    ", "warmup_steps", "*=", "total_train_steps", "\n", "", "step", "=", "tf", ".", "cast", "(", "step", ",", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "minimum", "(", "1.0", ",", "step", "/", "warmup_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.truncated_rsqrt": [[113, 132], ["tensorflow.cast", "tensorflow.math.rsqrt", "tensorflow.maximum"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum"], ["", "@", "gin", ".", "configurable", "\n", "def", "truncated_rsqrt", "(", "step", ",", "\n", "total_train_steps", ",", "\n", "warmup_steps", "=", "10000", ")", ":", "\n", "  ", "\"\"\"Noam's favorite learning-rate schedule.\n\n  rsqrt(max(step_num, warmup_steps)\n\n  Args:\n    step: a tf.scalar representing the step we want the learning rate for.\n    total_train_steps: a number, the total number of training steps.\n    warmup_steps: a number\n\n  Returns:\n    a tf.Scalar, the learning rate for the step.\n  \"\"\"", "\n", "del", "total_train_steps", "\n", "step_num", "=", "tf", ".", "cast", "(", "step", ",", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "math", ".", "rsqrt", "(", "tf", ".", "maximum", "(", "step_num", ",", "warmup_steps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant": [[134, 148], ["None"], "function", ["None"], ["", "@", "gin", ".", "configurable", "\n", "def", "constant", "(", "step", ",", "total_train_steps", ",", "value", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Constant learning rate (multiplier).\n\n  Args:\n    step: a tf.Scalar\n    total_train_steps: a number\n    value: a number or tf.Scalar\n\n  Returns:\n    a tf.Scalar, the learning rate for the step.\n  \"\"\"", "\n", "del", "step", ",", "total_train_steps", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant_learning_rate": [[150, 166], ["tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "@", "gin", ".", "configurable", "\n", "def", "constant_learning_rate", "(", "step", ",", "total_train_steps", ",", "learning_rate", "=", "gin", ".", "REQUIRED", ")", ":", "\n", "  ", "\"\"\"Learning rate independent of step.\n\n  DEPRECATED: use constant() or pass a float directly to utils.run.learning_rate\n\n  Args:\n    step: a tf.Scalar\n    total_train_steps: a number\n    learning_rate: a number or tf.Scalar\n\n  Returns:\n    a tf.Scalar, the learning rate for the step.\n  \"\"\"", "\n", "del", "step", ",", "total_train_steps", "\n", "return", "tf", ".", "cast", "(", "learning_rate", ",", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.linear_decay_learning_rate": [[168, 197], ["tensorflow.cast", "tensorflow.cast", "tensorflow.minimum"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum"], ["", "@", "gin", ".", "configurable", "\n", "def", "linear_decay_learning_rate", "(", "step", ",", "\n", "total_train_steps", ",", "\n", "initial_lr", "=", "0.1", ",", "\n", "offset", "=", "0", ")", ":", "\n", "  ", "\"\"\"Linearly decay the learning rate to 0.\n\n  DEPRECATED - use product_learning_rate instead with factors:\n\n  [<initial_lr>,\n   @learning_rate_schedules.linear_decay]\n  learning_rate_schedules.linear.decay.steps_or_fraction = 1.0\n\n\n  Args:\n    step: a tf.scalar representing the step we want the learning rate for.\n    total_train_steps: a number, the total number of training steps.\n    initial_lr: initial learning rate. Decays from here.\n    offset: a number used for finetuning. Starts the learning-rate decay\n      schedule from this step forwards.\n\n  Returns:\n    a tf.Scalar, the learning rate for the step.\n  \"\"\"", "\n", "offset", "=", "tf", ".", "cast", "(", "offset", ",", "tf", ".", "float32", ")", "\n", "step", "=", "tf", ".", "cast", "(", "step", ",", "tf", ".", "float32", ")", "\n", "\n", "return", "initial_lr", "*", "tf", ".", "minimum", "(", "1.0", ",", "(", "total_train_steps", "-", "step", ")", "/", "\n", "(", "total_train_steps", "-", "offset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.learning_rate_schedule_noam": [[199, 239], ["tensorflow.math.rsqrt", "float", "tensorflow.cast", "tensorflow.maximum", "tensorflow.minimum"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum"], ["", "@", "gin", ".", "configurable", "\n", "def", "learning_rate_schedule_noam", "(", "step", ",", "\n", "total_train_steps", ",", "\n", "warmup_steps", "=", "10000", ",", "\n", "linear_decay_fraction", "=", "0.1", ",", "\n", "multiplier", "=", "1.0", ",", "\n", "offset", "=", "0", ")", ":", "\n", "  ", "\"\"\"Noam's favorite learning-rate schedule.\n\n  DEPRECATED - use product_learning_rate instead with factors:\n\n  [<multiplier>,\n   @learning_rate_schedules.truncated_rsqrt,\n   @learning_rate_schedules.linear_decay]\n\n  (rsqrt(max(step_num, warmup_steps))\n   * multiplier\n   * min(1.0, (train_steps-step_num)/(train_steps*linear_decay_fraction)))\n\n  Args:\n    step: a tf.scalar representing the step we want the learning rate for.\n    total_train_steps: a number, the total number of training steps.\n    warmup_steps: a number\n    linear_decay_fraction: a number\n    multiplier: a number\n    offset: a number used for finetuning. Starts the learning-rate decay\n      schedule from this step forwards. Prior to this step, the learning rate is\n      the same as if it were a warmup step.\n\n  Returns:\n    a tf.Scalar, the learning rate for the step.\n  \"\"\"", "\n", "train_steps", "=", "float", "(", "total_train_steps", ")", "-", "offset", "\n", "step_num", "=", "tf", ".", "cast", "(", "step", ",", "tf", ".", "float32", ")", "-", "offset", "\n", "learning_rate", "=", "tf", ".", "math", ".", "rsqrt", "(", "tf", ".", "maximum", "(", "step_num", ",", "warmup_steps", ")", ")", "\n", "learning_rate", "*=", "multiplier", "\n", "if", "linear_decay_fraction", ">", "0", ":", "\n", "    ", "learning_rate", "*=", "tf", ".", "minimum", "(", "1.0", ",", "(", "train_steps", "-", "step_num", ")", "/", "\n", "(", "train_steps", "*", "linear_decay_fraction", ")", ")", "\n", "", "return", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.slanted_triangular": [[241, 282], ["float", "float", "math.floor", "tensorflow.cond", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "@", "gin", ".", "configurable", "\n", "def", "slanted_triangular", "(", "step", ",", "\n", "total_train_steps", ",", "\n", "cut_fraction", "=", "0.1", ",", "\n", "ratio", "=", "32", ",", "\n", "max_learning_rate", "=", "0.01", ",", "\n", "start_step", "=", "0", ")", ":", "\n", "  ", "\"\"\"Triangular learning rate with short increase and long decay.\n\n  TODO(noam): add minimum_value arguments to linear_decay() and linear_warmup()\n  so that this function can be replaced.\n\n  Taken from \"Universal Language Model Fine-tuning for Text Classification\",\n  see https://arxiv.org/abs/1801.06146. Default parameters are those specified\n  in the paper.\n\n  Args:\n    step: a tf.scalar representing the step we want the learning rate for.\n    total_train_steps: a number, the total number of training steps.\n    cut_fraction: a number between 0 and 1, fraction of iterations for which we\n      are increasing the learning rate.\n    ratio: a number greater than 1, the ratio from the smallest learning rate to\n      the max learning rate.\n    max_learning_rate: a number, the highest learning rate reached during\n      training.\n    start_step: a number, the step training starts at. Useful when fine-tuning\n      from a checkpoint that hasn't had its global step reset.\n\n  Returns:\n    a tf.Scalar, the learning rate for the step.\n  \"\"\"", "\n", "train_steps", "=", "float", "(", "total_train_steps", ")", "\n", "start_step", "=", "float", "(", "start_step", ")", "\n", "step_num", "=", "tf", ".", "cast", "(", "step", ",", "tf", ".", "float32", ")", "-", "start_step", "\n", "cut", "=", "math", ".", "floor", "(", "train_steps", "*", "cut_fraction", ")", "\n", "p", "=", "tf", ".", "cond", "(", "\n", "step_num", "<", "cut", ",", "\n", "lambda", ":", "step_num", "/", "cut", ",", "\n", "lambda", ":", "1", "-", "(", "step_num", "-", "cut", ")", "/", "(", "cut", "*", "(", "1", "/", "cut_fraction", "-", "1", ")", ")", ",", "\n", ")", "\n", "return", "max_learning_rate", "*", "(", "1", "+", "p", "*", "(", "ratio", "-", "1", ")", ")", "/", "ratio", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.FunnelTransformerTest.setUp": [[94, 98], ["super().setUp", "mesh_tensorflow.test_utils.NumpyConverter"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "FunnelTransformerTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "converter", "=", "test_utils", ".", "NumpyConverter", "(", ")", "\n", "self", ".", "default_dim_names", "=", "[", "\"outer_batch\"", ",", "\"batch\"", ",", "\"length\"", ",", "\"d_model\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.FunnelTransformerTest.test_layer_stack_call_padding_handling": [[99, 121], ["mesh_tensorflow.test_utils.NumpyConverter", "numpy.random.randn", "funnel_transformer_test.create_dummy_model", "numpy.ones_like", "funnel_transformer_test.FunnelTransformerTest.converter.convert_np_array_to_mtf_tensor", "funnel_transformer_test.FunnelTransformerTest.converter.convert_np_array_to_mtf_tensor", "layer_stack.call", "funnel_transformer_test.FunnelTransformerTest.converter.convert_mtf_tensor_to_np_array", "funnel_transformer_test.FunnelTransformerTest.assertAllClose", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.create_dummy_model", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones_like", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like"], ["", "def", "test_layer_stack_call_padding_handling", "(", "self", ")", ":", "\n", "    ", "self", ".", "converter", "=", "test_utils", ".", "NumpyConverter", "(", ")", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "4", ",", "5", ")", "\n", "layer_stack", ",", "context", "=", "create_dummy_model", "(", "\n", "self", ".", "converter", ".", "mesh", ",", "shapes", "=", "x", ".", "shape", ")", "\n", "\n", "# The last two sequence positions are padding.", "\n", "x", "[", ":", ",", ":", ",", "-", "2", ":", ",", ":", "]", "*=", "0", "\n", "sequence_id", "=", "np", ".", "ones_like", "(", "x", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "sequence_id", "[", ":", ",", ":", ",", "-", "2", ":", ",", ":", "]", "*=", "0", "\n", "context", ".", "sequence_id", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "sequence_id", ",", "dim_names", "=", "self", ".", "default_dim_names", ")", "\n", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dim_names", "=", "self", ".", "default_dim_names", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "output_mtf", "=", "layer_stack", ".", "call", "(", "context", ",", "x_mtf", ")", "\n", "# [2, 3, 4, 5] -> [2, 3, 2, 5]", "\n", "actual", "=", "self", ".", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "output_mtf", ")", "\n", "\n", "# After pooling, the last sequence position should be padding, i.e., zeros.", "\n", "last_position", "=", "actual", "[", ":", ",", ":", ",", "-", "1", ",", ":", "]", "\n", "self", ".", "assertAllClose", "(", "last_position", ",", "np", ".", "zeros_like", "(", "last_position", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.FunnelTransformerTest.test_layer_stack_call_pooled_length": [[122, 132], ["mesh_tensorflow.test_utils.NumpyConverter", "numpy.random.randn", "funnel_transformer_test.create_dummy_model", "mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "layer_stack.call", "mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "funnel_transformer_test.FunnelTransformerTest.assertAllEqual"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.create_dummy_model", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array"], ["", "def", "test_layer_stack_call_pooled_length", "(", "self", ")", ":", "\n", "    ", "converter", "=", "test_utils", ".", "NumpyConverter", "(", ")", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "4", ",", "5", ")", "\n", "layer_stack", ",", "context", "=", "create_dummy_model", "(", "\n", "converter", ".", "mesh", ",", "shapes", "=", "x", ".", "shape", ")", "\n", "x_mtf", "=", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dim_names", "=", "self", ".", "default_dim_names", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "output_mtf", "=", "layer_stack", ".", "call", "(", "context", ",", "x_mtf", ")", "\n", "actual", "=", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "output_mtf", ")", "\n", "self", ".", "assertAllEqual", "(", "actual", ".", "shape", ",", "(", "2", ",", "3", ",", "2", ",", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.FunnelTransformerTest.test_layer_stack_call_num_output_layers": [[133, 143], ["numpy.random.randn", "funnel_transformer_test.create_dummy_model", "funnel_transformer_test.FunnelTransformerTest.converter.convert_np_array_to_mtf_tensor", "layer_stack.call", "funnel_transformer_test.FunnelTransformerTest.assertLen", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.create_dummy_model", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call"], ["", "def", "test_layer_stack_call_num_output_layers", "(", "self", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "4", ",", "5", ")", "\n", "layer_stack", ",", "context", "=", "create_dummy_model", "(", "\n", "self", ".", "converter", ".", "mesh", ",", "shapes", "=", "x", ".", "shape", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dim_names", "=", "self", ".", "default_dim_names", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "_", "=", "layer_stack", ".", "call", "(", "context", ",", "x_mtf", ")", "\n", "# +1 accounts for the sublayers_initial. sublayer_final is merged with the", "\n", "# last layer of sublayers_per_layer.", "\n", "self", ".", "assertLen", "(", "context", ".", "layer_outputs", ",", "len", "(", "layer_stack", ".", "layers", ")", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.FunnelTransformerTest.test_layer_stack_call_num_unique_layers": [[144, 167], ["numpy.random.randn", "funnel_transformer_test.create_dummy_model", "funnel_transformer_test.FunnelTransformerTest.converter.convert_np_array_to_mtf_tensor", "layer_stack.call", "funnel_transformer_test.FunnelTransformerTest.converter.convert_mtf_tensor_to_tf_tensor", "len", "funnel_transformer_test.FunnelTransformerTest.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.create_dummy_model", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_tf_tensor"], ["", "def", "test_layer_stack_call_num_unique_layers", "(", "self", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "4", ",", "5", ")", "\n", "layer_stack", ",", "context", "=", "create_dummy_model", "(", "\n", "self", ".", "converter", ".", "mesh", ",", "shapes", "=", "x", ".", "shape", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dim_names", "=", "self", ".", "default_dim_names", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "output_mtf", "=", "layer_stack", ".", "call", "(", "context", ",", "x_mtf", ")", "\n", "lowering", ",", "_", "=", "self", ".", "converter", ".", "convert_mtf_tensor_to_tf_tensor", "(", "output_mtf", ")", "\n", "\n", "# Test the number of unique layers.", "\n", "all_vars", "=", "lowering", ".", "graph", ".", "all_variables", "\n", "self_attn_vars", "=", "[", "\n", "var", ".", "name", "for", "var", "in", "all_vars", "if", "\"SelfAttention\"", "in", "var", ".", "name", "\n", "]", "\n", "\n", "# We expect total of `n_layers` of SelfAttention and DenseReluDense layers.", "\n", "n_layers", "=", "len", "(", "layer_stack", ".", "layers", ")", "\n", "\n", "# We expect n_sublayers` SelfAttention.", "\n", "n_sublayers", "=", "n_layers", "//", "2", "\n", "\n", "# Each self attn layer has 4 variables: wq, wk, wv, wo.", "\n", "self", ".", "assertEqual", "(", "len", "(", "self_attn_vars", ")", "//", "4", ",", "n_sublayers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.FunnelTransformerTest.test_layer_stack_update_context_sequence_id": [[168, 176], ["numpy.random.randn", "funnel_transformer_test.create_dummy_model", "funnel_transformer_test.FunnelTransformerTest.converter.convert_np_array_to_mtf_tensor", "layer_stack.call", "funnel_transformer_test.FunnelTransformerTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.create_dummy_model", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call"], ["", "def", "test_layer_stack_update_context_sequence_id", "(", "self", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "4", ",", "5", ")", "\n", "layer_stack", ",", "context", "=", "create_dummy_model", "(", "\n", "self", ".", "converter", ".", "mesh", ",", "shapes", "=", "x", ".", "shape", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dim_names", "=", "self", ".", "default_dim_names", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "_", "=", "layer_stack", ".", "call", "(", "context", ",", "x_mtf", ")", "\n", "self", ".", "assertEqual", "(", "2", ",", "context", ".", "length_dim", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.FunnelTransformerTest.test_layer_stack_update_context_position": [[177, 186], ["numpy.random.randn", "funnel_transformer_test.create_dummy_model", "funnel_transformer_test.FunnelTransformerTest.converter.convert_np_array_to_mtf_tensor", "layer_stack.call", "funnel_transformer_test.FunnelTransformerTest.converter.convert_mtf_tensor_to_np_array", "funnel_transformer_test.FunnelTransformerTest.assertAllEqual", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.create_dummy_model", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array"], ["", "def", "test_layer_stack_update_context_position", "(", "self", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "4", ",", "5", ")", "\n", "layer_stack", ",", "context", "=", "create_dummy_model", "(", "\n", "self", ".", "converter", ".", "mesh", ",", "shapes", "=", "x", ".", "shape", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dim_names", "=", "self", ".", "default_dim_names", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "_", "=", "layer_stack", ".", "call", "(", "context", ",", "x_mtf", ")", "\n", "actual", "=", "self", ".", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "context", ".", "position", ")", "\n", "self", ".", "assertAllEqual", "(", "np", ".", "arange", "(", "2", ")", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer_test.create_dummy_model": [[28, 90], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "list", "list", "numpy.array().prod", "mesh_tensorflow.transformer.funnel_transformer.FunnelTransformerLayerStack", "mesh_tensorflow.transformer.transformer.Unitransformer", "mesh_tensorflow.transformer.transformer.Context", "len", "map", "map", "mesh_tensorflow.transformer.transformer_layers.SelfAttention", "mesh_tensorflow.transformer.transformer_layers.DenseReluDense", "block_param_size_str.split", "block_repeat_size_str.split", "numpy.array", "mesh_tensorflow.VariableDType", "mesh_tensorflow.ones", "mesh_tensorflow.range", "mesh_tensorflow.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones"], ["def", "create_dummy_model", "(", "mesh", ",", "\n", "shapes", ",", "\n", "n_blocks", "=", "2", ",", "\n", "block_param_size_str", "=", "\"2_2\"", ",", "\n", "block_repeat_size_str", "=", "\"1_1\"", ")", ":", "\n", "  ", "\"\"\"Creates a dummy model and layer stack with 4-dimensional input.\"\"\"", "\n", "\n", "assert", "len", "(", "shapes", ")", "==", "4", "\n", "outer_batch_size", ",", "batch_size", ",", "length", ",", "d_model", "=", "shapes", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch_size", ")", "\n", "outer_batch_dim", "=", "mtf", ".", "Dimension", "(", "\"outer_batch\"", ",", "outer_batch_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "length", ")", "\n", "block_param_size", "=", "list", "(", "map", "(", "int", ",", "block_param_size_str", ".", "split", "(", "\"_\"", ")", ")", ")", "\n", "block_repeat_size", "=", "list", "(", "map", "(", "int", ",", "block_repeat_size_str", ".", "split", "(", "\"_\"", ")", ")", ")", "\n", "\n", "sublayers_initial", "=", "[", "\n", "transformer", ".", "sublayer_dropout", ",", "\n", "]", "\n", "sublayers_per_layer", "=", "[", "\n", "transformer", ".", "sublayer_rms_norm", ",", "\n", "transformer", ".", "sublayer_call_layer", ",", "\n", "transformer", ".", "sublayer_dropout", ",", "\n", "transformer", ".", "sublayer_residual", ",", "\n", "]", "\n", "sublayers_final", "=", "[", "\n", "transformer", ".", "sublayer_rms_norm", ",", "\n", "transformer", ".", "sublayer_dropout", ",", "\n", "]", "\n", "submodules", "=", "[", "\n", "transformer_layers", ".", "SelfAttention", "(", ")", ",", "\n", "transformer_layers", ".", "DenseReluDense", "(", ")", "\n", "]", "\n", "\n", "n_sublayers", "=", "np", ".", "array", "(", "block_param_size", ")", ".", "prod", "(", ")", "\n", "layers", "=", "submodules", "*", "n_sublayers", "\n", "layer_stack", "=", "funnel_transformer", ".", "FunnelTransformerLayerStack", "(", "\n", "layers", "=", "layers", ",", "\n", "n_blocks", "=", "n_blocks", ",", "\n", "block_param_size", "=", "block_param_size", ",", "\n", "block_repeat_size", "=", "block_repeat_size", ",", "\n", "sublayers_initial", "=", "sublayers_initial", ",", "\n", "sublayers_per_layer", "=", "sublayers_per_layer", ",", "\n", "sublayers_final", "=", "sublayers_final", ")", "\n", "\n", "model", "=", "transformer", ".", "Unitransformer", "(", "\n", "input_vocab_size", "=", "10", ",", "\n", "output_vocab_size", "=", "10", ",", "\n", "autoregressive", "=", "False", ",", "\n", "max_length", "=", "8", ",", "\n", "d_model", "=", "d_model", ",", "\n", "layer_stack", "=", "layer_stack", ")", "\n", "\n", "context", "=", "transformer", ".", "Context", "(", "\n", "model", "=", "model", ",", "\n", "mesh", "=", "mesh", ",", "\n", "batch_dims", "=", "[", "batch_dim", ",", "outer_batch_dim", "]", ",", "\n", "length_dim", "=", "length_dim", ",", "\n", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "tf", ".", "float32", ")", ",", "\n", "sequence_id", "=", "mtf", ".", "ones", "(", "mesh", ",", "mtf", ".", "Shape", "(", "[", "length_dim", "]", ")", ")", ",", "\n", "position", "=", "mtf", ".", "range", "(", "mesh", ",", "length_dim", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", ")", "\n", "return", "layer_stack", ",", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.memory_layers_test.FlatKeyValueMemoryTest.setUp": [[32, 43], ["super().setUp", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.VariableDType", "memory_layers_test.FlatKeyValueMemoryTest.addCleanup", "mock.MagicMock", "mock.patch.object().start", "mock.patch.object"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "FlatKeyValueMemoryTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "mesh", "=", "mtf", ".", "Mesh", "(", "self", ".", "graph", ",", "\"mtf_mesh\"", ")", "\n", "self", ".", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "activation_dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "addCleanup", "(", "mock", ".", "patch", ".", "stopall", ")", "\n", "self", ".", "initializer_mock", "=", "mock", ".", "MagicMock", "(", ")", "\n", "random_normal_initializer_mock", "=", "mock", ".", "patch", ".", "object", "(", "\n", "tf", ",", "\"random_normal_initializer\"", ")", ".", "start", "(", ")", "\n", "random_normal_initializer_mock", ".", "return_value", "=", "self", ".", "initializer_mock", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.memory_layers_test.FlatKeyValueMemoryTest._export_to_tf_tensor": [[44, 49], ["mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], ["", "def", "_export_to_tf_tensor", "(", "self", ",", "mtf_tensor", ")", ":", "\n", "    ", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "\"\"", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "return", "lowering", ",", "lowering", ".", "export_to_tf_tensor", "(", "mtf_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.memory_layers_test.FlatKeyValueMemoryTest.test_call_shape": [[50, 81], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.transformer.memory_layers.ProductKeyValueMemory", "mesh_tensorflow.ones", "mock.MagicMock", "mesh_tensorflow.transformer.memory_layers.ProductKeyValueMemory.call", "memory_layers_test.FlatKeyValueMemoryTest.assertEqual", "tensorflow.reshape", "mesh_tensorflow.Shape", "tensorflow.range", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape"], ["", "def", "test_call_shape", "(", "self", ")", ":", "\n", "    ", "key_size", "=", "5", "\n", "value_size", "=", "10", "\n", "n_keys", "=", "6", "\n", "n_heads", "=", "2", "\n", "knn", "=", "3", "\n", "\n", "seq_len", "=", "4", "\n", "batch", "=", "5", "\n", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "\"model\"", ",", "value_size", ")", "\n", "seq_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "seq_len", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "\n", "def", "initialize", "(", "shape", ",", "dtype", ")", ":", "\n", "      ", "return", "tf", ".", "reshape", "(", "1", "+", "tf", ".", "range", "(", "np", ".", "prod", "(", "shape", ")", ",", "dtype", "=", "dtype", ")", ",", "shape", ")", "\n", "\n", "", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize", "\n", "\n", "kv_memory", "=", "memory_layers", ".", "ProductKeyValueMemory", "(", "key_size", ",", "n_keys", ",", "\n", "n_heads", ",", "knn", ")", "\n", "\n", "mtf_x", "=", "mtf", ".", "ones", "(", "self", ".", "mesh", ",", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "seq_dim", ",", "model_dim", "]", ")", ")", "\n", "context", "=", "mock", ".", "MagicMock", "(", ")", "\n", "context", ".", "mesh", "=", "self", ".", "mesh", "\n", "context", ".", "variable_dtype", "=", "tf", ".", "float32", "\n", "\n", "out_tensor", "=", "kv_memory", ".", "call", "(", "context", ",", "mtf_x", ")", "\n", "\n", "# Dimensions should be untouched", "\n", "self", ".", "assertEqual", "(", "mtf_x", ".", "shape", ",", "out_tensor", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.memory_layers_test.FlatKeyValueMemoryTest.test_get_indices": [[82, 155], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.ones", "numpy.broadcast_to", "numpy.broadcast_to", "mesh_tensorflow.constant", "mesh_tensorflow.transformer.memory_layers.ProductKeyValueMemory", "mesh_tensorflow.transformer.memory_layers.ProductKeyValueMemory.get_indices", "mesh_tensorflow.Shape", "memory_layers_test.FlatKeyValueMemoryTest.assertEqual", "memory_layers_test.FlatKeyValueMemoryTest.assertEqual", "memory_layers_test.FlatKeyValueMemoryTest._export_to_tf_tensor", "memory_layers_test.FlatKeyValueMemoryTest._export_to_tf_tensor", "memory_layers_test.FlatKeyValueMemoryTest.evaluate", "memory_layers_test.FlatKeyValueMemoryTest.evaluate", "memory_layers_test.FlatKeyValueMemoryTest.evaluate", "memory_layers_test.FlatKeyValueMemoryTest.evaluate", "memory_layers_test.FlatKeyValueMemoryTest.assertAllEqual", "memory_layers_test.FlatKeyValueMemoryTest.assertAllEqual", "numpy.array", "numpy.array", "tensorflow.global_variables_initializer", "lowering_s.copy_masters_to_slices", "lowering_i.copy_masters_to_slices"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.memory_layers.ProductKeyValueMemory.get_indices", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest._export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest._export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "def", "test_get_indices", "(", "self", ")", ":", "\n", "    ", "key_size", "=", "2", "\n", "n_keys", "=", "3", "\n", "product_size", "=", "2", "\n", "head_size", "=", "2", "\n", "batch", "=", "2", "\n", "seq_len", "=", "2", "\n", "knn", "=", "2", "\n", "\n", "n_key_dim", "=", "mtf", ".", "Dimension", "(", "\"n_keys\"", ",", "n_keys", ")", "\n", "key_dim", "=", "mtf", ".", "Dimension", "(", "\"key\"", ",", "key_size", "//", "2", ")", "\n", "seq_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "seq_len", ")", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "head_dim", "=", "mtf", ".", "Dimension", "(", "\"n_heads\"", ",", "head_size", ")", "\n", "product_dim", "=", "mtf", ".", "Dimension", "(", "\"product_key\"", ",", "product_size", ")", "\n", "knn_dim", "=", "mtf", ".", "Dimension", "(", "\"knn\"", ",", "knn", ")", "\n", "\n", "query_shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "seq_dim", ",", "head_dim", ",", "\n", "product_dim", ",", "key_dim", "]", ")", "\n", "keys_shape", "=", "mtf", ".", "Shape", "(", "[", "head_dim", ",", "product_dim", ",", "n_key_dim", ",", "key_dim", "]", ")", "\n", "query", "=", "mtf", ".", "ones", "(", "self", ".", "mesh", ",", "query_shape", ")", "\n", "\n", "keys_vals", "=", "[", "\n", "[", "\n", "[", "[", "4", "]", ",", "[", "1", "]", ",", "[", "2", "]", "]", ",", "\n", "[", "[", "2", "]", ",", "[", "-", "1", "]", ",", "[", "2", "]", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "5", "]", "]", ",", "\n", "[", "[", "6", "]", ",", "[", "1", "]", ",", "[", "4", "]", "]", ",", "\n", "]", ",", "\n", "]", "\n", "# h1:", "\n", "#   First scores:", "\n", "#   [4, 2]", "\n", "#   [2, 2]", "\n", "#   Cartesian added scores:", "\n", "#   [6, 6]", "\n", "#   Indices:", "\n", "#   [0, 2]    [0*n_k + 0, 0*n_k + 2]", "\n", "# h2:", "\n", "#   First scores:", "\n", "#   [5, 2]", "\n", "#   [6, 4]", "\n", "#   Cartesian added scores:", "\n", "#   [11, 9]", "\n", "#   Indices:", "\n", "#   [6, 8]   [2*n_k+0, 2*n_k+2]", "\n", "expected_scores", "=", "np", ".", "broadcast_to", "(", "np", ".", "array", "(", "[", "[", "6", ",", "6", "]", ",", "[", "11", ",", "9", "]", "]", ")", ",", "\n", "[", "batch", ",", "seq_len", ",", "head_size", ",", "knn", "]", ")", "\n", "expected_indices", "=", "np", ".", "broadcast_to", "(", "np", ".", "array", "(", "[", "[", "0", ",", "2", "]", ",", "[", "6", ",", "8", "]", "]", ")", ",", "\n", "[", "batch", ",", "seq_len", ",", "head_size", ",", "knn", "]", ")", "\n", "\n", "keys", "=", "mtf", ".", "constant", "(", "self", ".", "mesh", ",", "keys_vals", ",", "keys_shape", ")", "\n", "\n", "pkm", "=", "memory_layers", ".", "ProductKeyValueMemory", "(", "key_size", ",", "n_keys", ",", "head_size", ",", "knn", ")", "\n", "mtf_scores", ",", "mtf_indices", "=", "pkm", ".", "get_indices", "(", "keys", ",", "query", ")", "\n", "\n", "# Shapes.", "\n", "expected_shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "seq_dim", ",", "head_dim", ",", "knn_dim", "]", ")", "\n", "self", ".", "assertEqual", "(", "expected_shape", ",", "mtf_scores", ".", "shape", ")", "\n", "self", ".", "assertEqual", "(", "expected_shape", ",", "mtf_indices", ".", "shape", ")", "\n", "\n", "# Values", "\n", "lowering_s", ",", "scores", "=", "self", ".", "_export_to_tf_tensor", "(", "mtf_scores", ")", "\n", "lowering_i", ",", "indices", "=", "self", ".", "_export_to_tf_tensor", "(", "mtf_indices", ")", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering_s", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering_i", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "scores", ",", "indices", "=", "self", ".", "evaluate", "(", "[", "scores", ",", "indices", "]", ")", "\n", "\n", "self", ".", "assertAllEqual", "(", "expected_scores", ",", "scores", ")", "\n", "self", ".", "assertAllEqual", "(", "expected_indices", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.TransformerLayersTest.setUp": [[85, 88], ["super().setUp", "mesh_tensorflow.test_utils.NumpyConverter"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "TransformerLayersTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "converter", "=", "test_utils", ".", "NumpyConverter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.TransformerLayersTest.test_conv1d_call_same_input_output_dims": [[89, 109], ["numpy.random.randint", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "collections.namedtuple", "collections.namedtuple.", "numpy.random.randn", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.transformer.transformer_layers.Conv1DLayer", "mesh_tensorflow.transformer.transformer_layers.Conv1DLayer.call", "transformer_layers_test.TransformerLayersTest.assertAllEqual"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call"], ["", "def", "test_conv1d_call_same_input_output_dims", "(", "self", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "d_model", "=", "6", "\n", "length", "=", "3", "\n", "inputs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "10", ",", "size", "=", "[", "batch", ",", "length", "]", ")", "\n", "inputs_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "inputs", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"length\"", "]", ")", "\n", "# Dummy context with necessary information for Conv1DLayer.call", "\n", "Context", "=", "collections", ".", "namedtuple", "(", "\"Context\"", ",", "\n", "[", "\"inputs\"", ",", "\"activation_dtype\"", ",", "\"mode\"", "]", ")", "\n", "context", "=", "Context", "(", "\n", "inputs", "=", "inputs_mtf", ",", "activation_dtype", "=", "tf", ".", "float32", ",", "mode", "=", "\"train\"", ")", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "length", ",", "d_model", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"length\"", ",", "\"d_model\"", "]", ")", "\n", "conv_layer", "=", "transformer_layers", ".", "Conv1DLayer", "(", "\n", "filter_size", "=", "3", ",", "output_size", "=", "d_model", ")", "\n", "output_mtf", "=", "conv_layer", ".", "call", "(", "context", ",", "x_mtf", ")", "\n", "self", ".", "assertAllEqual", "(", "[", "batch", ",", "length", ",", "d_model", "]", ",", "\n", "output_mtf", ".", "shape", ".", "to_integer_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.TransformerLayersTest.test_conv1d_record_states_first_part_mode": [[110, 136], ["numpy.random.randint", "transformer_layers_test.get_dummy_decoder_context", "numpy.zeros", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.transformer.transformer_layers.Conv1D", "mesh_tensorflow.transformer.transformer_layers.Conv1D.record_states_first_part_mode", "transformer_layers_test.TransformerLayersTest.converter.convert_mtf_tensor_to_np_array", "numpy.zeros", "transformer_layers_test.TransformerLayersTest.assertAllClose"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.get_dummy_decoder_context", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.record_states_first_part_mode", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["", "def", "test_conv1d_record_states_first_part_mode", "(", "self", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "d_model", "=", "6", "\n", "length", "=", "6", "\n", "filter_size", "=", "3", "\n", "\n", "inputs", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "10", ",", "size", "=", "[", "batch", ",", "length", "]", ")", "\n", "context", "=", "get_dummy_decoder_context", "(", "\n", "self", ".", "converter", ",", "\n", "batch", "=", "batch", ",", "\n", "d_model", "=", "d_model", ",", "\n", "initial_position", "=", "2", ",", "# indices 0 and 1 correspond to partial sequences.", "\n", "inputs", "=", "inputs", ",", "\n", "mode", "=", "\"first_part\"", ")", "\n", "\n", "x", "=", "np", ".", "zeros", "(", "shape", "=", "(", "batch", ",", "length", ",", "d_model", ")", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"length\"", ",", "\"d_model\"", "]", ")", "\n", "\n", "conv_layer", "=", "transformer_layers", ".", "Conv1D", "(", ")", "\n", "conv_layer", ".", "record_states_first_part_mode", "(", "context", ",", "x_mtf", ",", "filter_size", ")", "\n", "actual", "=", "self", ".", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "\n", "context", ".", "new_states", "[", "0", "]", ")", "\n", "expected", "=", "np", ".", "zeros", "(", "shape", "=", "[", "batch", ",", "filter_size", ",", "d_model", "]", ")", "\n", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.TransformerLayersTest.test_conv1d_record_states_first_part_mode_with_partial_sequence": [[137, 165], ["numpy.random.randint", "transformer_layers_test.get_dummy_decoder_context", "numpy.random.randn", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.transformer.transformer_layers.Conv1D", "mesh_tensorflow.transformer.transformer_layers.Conv1D.record_states_first_part_mode", "transformer_layers_test.TransformerLayersTest.converter.convert_mtf_tensor_to_np_array", "numpy.zeros", "transformer_layers_test.TransformerLayersTest.assertAllClose"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.get_dummy_decoder_context", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.record_states_first_part_mode", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros"], ["", "def", "test_conv1d_record_states_first_part_mode_with_partial_sequence", "(", "self", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "d_model", "=", "6", "\n", "length", "=", "6", "\n", "filter_size", "=", "3", "\n", "\n", "inputs", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "10", ",", "size", "=", "[", "batch", ",", "length", "]", ")", "\n", "context", "=", "get_dummy_decoder_context", "(", "\n", "self", ".", "converter", ",", "\n", "batch", "=", "batch", ",", "\n", "d_model", "=", "d_model", ",", "\n", "initial_position", "=", "2", ",", "# indices 0 and 1 correspond to partial sequences.", "\n", "inputs", "=", "inputs", ",", "\n", "mode", "=", "\"first_part\"", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "length", ",", "d_model", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"length\"", ",", "\"d_model\"", "]", ")", "\n", "\n", "conv_layer", "=", "transformer_layers", ".", "Conv1D", "(", ")", "\n", "conv_layer", ".", "record_states_first_part_mode", "(", "context", ",", "x_mtf", ",", "filter_size", ")", "\n", "actual", "=", "self", ".", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "\n", "context", ".", "new_states", "[", "0", "]", ")", "\n", "expected", "=", "np", ".", "zeros", "(", "shape", "=", "[", "batch", ",", "filter_size", ",", "d_model", "]", ")", "\n", "expected", "[", ":", ",", "-", "2", ",", ":", "]", "=", "x", "[", ":", ",", "0", ",", ":", "]", "\n", "expected", "[", ":", ",", "-", "1", ",", ":", "]", "=", "x", "[", ":", ",", "1", ",", ":", "]", "\n", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.TransformerLayersTest.test_conv1d_record_states_incremental_mode": [[166, 190], ["numpy.random.randn", "transformer_layers_test.get_dummy_decoder_context", "numpy.random.randn", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.transformer.transformer_layers.Conv1D", "mesh_tensorflow.transformer.transformer_layers.Conv1D.record_states_incremental_mode", "transformer_layers_test.TransformerLayersTest.converter.convert_mtf_tensor_to_np_array", "numpy.concatenate", "transformer_layers_test.TransformerLayersTest.assertAllClose"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.get_dummy_decoder_context", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.record_states_incremental_mode", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array"], ["", "def", "test_conv1d_record_states_incremental_mode", "(", "self", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "d_model", "=", "6", "\n", "filter_size", "=", "3", "\n", "\n", "state", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "filter_size", ",", "d_model", ")", "\n", "context", "=", "get_dummy_decoder_context", "(", "\n", "self", ".", "converter", ",", "\n", "batch", "=", "batch", ",", "\n", "d_model", "=", "d_model", ",", "\n", "state", "=", "state", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "d_model", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"d_model\"", "]", ")", "\n", "conv_layer", "=", "transformer_layers", ".", "Conv1D", "(", ")", "\n", "_", "=", "conv_layer", ".", "record_states_incremental_mode", "(", "context", ",", "x_mtf", ",", "\n", "filter_size", ")", "\n", "actual", "=", "self", ".", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "\n", "context", ".", "new_states", "[", "0", "]", ")", "\n", "\n", "# [batch, 2, d_model], [batch, 1, d_model] -> [batch, 3, d_model]", "\n", "expected", "=", "np", ".", "concatenate", "(", "[", "state", "[", ":", ",", "1", ":", ",", ":", "]", ",", "x", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.TransformerLayersTest.test_conv1d_update_state": [[191, 220], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "numpy.random.randn", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "numpy.random.randn", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.constant", "mesh_tensorflow.transformer.transformer_layers.Conv1D", "mesh_tensorflow.transformer.transformer_layers.Conv1D.update_state", "transformer_layers_test.TransformerLayersTest.converter.convert_mtf_tensor_to_np_array", "numpy.empty", "transformer_layers_test.TransformerLayersTest.assertAllClose", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.Conv1D.update_state", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array"], ["", "def", "test_conv1d_update_state", "(", "self", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "d_model", "=", "6", "\n", "filter_size", "=", "3", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "filter_dim", "=", "mtf", ".", "Dimension", "(", "\"filter\"", ",", "filter_size", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "d_model", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"d_model\"", "]", ")", "\n", "\n", "old_state", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "filter_size", ",", "d_model", ")", "\n", "old_state_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "old_state", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"filter\"", ",", "\"d_model\"", "]", ")", "\n", "\n", "position_mtf", "=", "mtf", ".", "constant", "(", "\n", "self", ".", "converter", ".", "mesh", ",", "\n", "filter_size", "-", "1", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", "]", ")", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", "\n", "conv_layer", "=", "transformer_layers", ".", "Conv1D", "(", ")", "\n", "output_mtf", "=", "conv_layer", ".", "update_state", "(", "\n", "old_state_mtf", ",", "x_mtf", ",", "position_mtf", ",", "filter_dim", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "actual", "=", "self", ".", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "output_mtf", ")", "\n", "\n", "expected", "=", "np", ".", "empty", "(", "shape", "=", "old_state", ".", "shape", ")", "\n", "expected", "[", ":", ",", ":", "filter_size", "-", "1", ",", ":", "]", "=", "old_state", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "expected", "[", ":", ",", "-", "1", ",", ":", "]", "=", "x", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.TransformerLayersTest.test_separable_conv1d_call_same_input_output_dims": [[221, 247], ["numpy.random.randint", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "collections.namedtuple", "collections.namedtuple.", "numpy.random.randn", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.transformer.transformer_layers.SeparableConv1DLayer", "mesh_tensorflow.transformer.transformer_layers.SeparableConv1DLayer.call", "transformer_layers_test.TransformerLayersTest.assertAllEqual"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call"], ["", "def", "test_separable_conv1d_call_same_input_output_dims", "(", "self", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "d_model", "=", "6", "\n", "length", "=", "3", "\n", "inputs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "10", ",", "size", "=", "[", "batch", ",", "length", "]", ")", "\n", "inputs_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "inputs", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"length\"", "]", ")", "\n", "# Dummy context with necessary information for Conv1DLayer.call", "\n", "Context", "=", "collections", ".", "namedtuple", "(", "\"Context\"", ",", "\n", "[", "\"inputs\"", ",", "\"activation_dtype\"", ",", "\"mode\"", "]", ")", "\n", "context", "=", "Context", "(", "\n", "inputs", "=", "inputs_mtf", ",", "activation_dtype", "=", "tf", ".", "float32", ",", "mode", "=", "\"train\"", ")", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "length", ",", "d_model", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"length\"", ",", "\"d_model\"", "]", ")", "\n", "\n", "min_relative_pos", "=", "-", "1", "\n", "max_relative_pos", "=", "2", "\n", "conv_layer", "=", "transformer_layers", ".", "SeparableConv1DLayer", "(", "\n", "min_relative_pos", "=", "min_relative_pos", ",", "\n", "max_relative_pos", "=", "max_relative_pos", ",", "\n", "output_size", "=", "d_model", ")", "\n", "\n", "output_mtf", "=", "conv_layer", ".", "call", "(", "context", ",", "x_mtf", ")", "\n", "self", ".", "assertAllEqual", "(", "[", "batch", ",", "length", ",", "d_model", "]", ",", "\n", "output_mtf", ".", "shape", ".", "to_integer_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.TransformerLayersTest.test_conv1d_call_incremental_mode": [[248, 286], ["numpy.random.randn", "transformer_layers_test.get_dummy_decoder_context", "numpy.random.randn", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "numpy.random.randn", "transformer_layers_test.TransformerLayersTest.converter.convert_mtf_tensor_to_np_array", "numpy.concatenate", "numpy.einsum", "transformer_layers_test.TransformerLayersTest.assertAllClose", "mock.patch.object", "mesh_tensorflow.transformer.transformer_layers.Conv1DLayer", "mesh_tensorflow.transformer.transformer_layers.Conv1DLayer.call"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.get_dummy_decoder_context", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call"], ["", "def", "test_conv1d_call_incremental_mode", "(", "self", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "d_model", "=", "6", "\n", "length", "=", "4", "\n", "filter_size", "=", "3", "\n", "output_size", "=", "2", "\n", "\n", "state", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "filter_size", ",", "d_model", ")", "\n", "context", "=", "get_dummy_decoder_context", "(", "\n", "self", ".", "converter", ",", "\n", "batch", "=", "batch", ",", "\n", "d_model", "=", "d_model", ",", "\n", "length", "=", "length", ",", "\n", "state", "=", "state", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "d_model", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"d_model\"", "]", ")", "\n", "\n", "conv_filter", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "filter_size", ",", "d_model", ",", "output_size", ")", "\n", "\n", "def", "mock_initializer", "(", ")", ":", "\n", "# pylint: disable=unused-argument", "\n", "      ", "def", "conv_init", "(", "shape", ",", "dtype", ",", "**", "unused_kwargs", ")", ":", "\n", "        ", "return", "conv_filter", "\n", "", "return", "conv_init", "\n", "\n", "", "with", "mock", ".", "patch", ".", "object", "(", "tf", ",", "\"glorot_uniform_initializer\"", ",", "mock_initializer", ")", ":", "\n", "      ", "conv_layer", "=", "transformer_layers", ".", "Conv1DLayer", "(", "\n", "filter_size", "=", "filter_size", ",", "output_size", "=", "output_size", ")", "\n", "output_mtf", "=", "conv_layer", ".", "call", "(", "context", ",", "x_mtf", ")", "\n", "", "actual", "=", "self", ".", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "output_mtf", ")", "\n", "\n", "# [batch, 2, d_model], [batch, 1, d_model] -> [batch, 3, d_model]", "\n", "padded_x", "=", "np", ".", "concatenate", "(", "[", "state", "[", ":", ",", "1", ":", ",", ":", "]", ",", "x", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "]", ",", "axis", "=", "1", ")", "\n", "# b: batch h: fake height, l: length (or filter), d: d_model, o: output_size", "\n", "expected", "=", "np", ".", "einsum", "(", "\"bld,hldo->bo\"", ",", "padded_x", ",", "conv_filter", ")", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.TransformerLayersTest.test_separable_conv1d_layer_incremental_mode": [[287, 343], ["numpy.random.randn", "transformer_layers_test.get_dummy_decoder_context", "numpy.random.randn", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.transformer.transformer_layers.SeparableConv1DLayer", "numpy.random.randn", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "transformer_layers_test.TransformerLayersTest.converter.convert_mtf_tensor_to_np_array", "numpy.array", "numpy.concatenate", "numpy.einsum", "numpy.dot", "transformer_layers_test.TransformerLayersTest.assertAllClose", "numpy.random.randn", "transformer_layers_test.TransformerLayersTest.converter.convert_np_array_to_mtf_tensor", "mock.patch.object", "mesh_tensorflow.transformer.transformer_layers.SeparableConv1DLayer.call", "range"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.get_dummy_decoder_context", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_mtf_tensor_to_np_array", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call"], ["", "def", "test_separable_conv1d_layer_incremental_mode", "(", "self", ")", ":", "\n", "    ", "batch", "=", "2", "\n", "d_model", "=", "6", "\n", "length", "=", "4", "\n", "filter_size", "=", "3", "\n", "output_size", "=", "2", "\n", "\n", "state", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "filter_size", ",", "d_model", ")", "\n", "context", "=", "get_dummy_decoder_context", "(", "\n", "self", ".", "converter", ",", "\n", "batch", "=", "batch", ",", "\n", "d_model", "=", "d_model", ",", "\n", "length", "=", "length", ",", "\n", "state", "=", "state", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "randn", "(", "batch", ",", "d_model", ")", "\n", "x_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "x", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"d_model\"", "]", ")", "\n", "\n", "max_relative_pos", "=", "0", "\n", "min_relative_pos", "=", "max_relative_pos", "-", "filter_size", "+", "1", "\n", "conv_layer", "=", "transformer_layers", ".", "SeparableConv1DLayer", "(", "\n", "min_relative_pos", "=", "min_relative_pos", ",", "\n", "max_relative_pos", "=", "max_relative_pos", ",", "\n", "output_size", "=", "output_size", ")", "\n", "\n", "# Non-standard implementation of depthwise convolution in the", "\n", "#   transformer_layers.py requires somewhat complicated testing.", "\n", "# A list of weights (length filter_size) each of shape [model_dim], which is", "\n", "#   the depth dimension. So the total number of parameters is filter_size *", "\n", "#   model_dim as expected for depthwise convolution.", "\n", "all_kernel_wts", "=", "[", "np", ".", "random", ".", "randn", "(", "d_model", ")", "for", "_", "in", "range", "(", "filter_size", ")", "]", "\n", "all_kernel_wts_mtf", "=", "[", "\n", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "w", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"d_model\"", "]", ")", "for", "w", "in", "all_kernel_wts", "\n", "]", "\n", "pointwise_weight", "=", "np", ".", "random", ".", "randn", "(", "d_model", ",", "output_size", ")", "\n", "pointwise_weight_mtf", "=", "self", ".", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "pointwise_weight", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"d_model\"", ",", "\"d_model\"", "]", ")", "\n", "with", "mock", ".", "patch", ".", "object", "(", "mtf", ".", "layers", ",", "\n", "\"get_dense_kernel_weights\"", ")", "as", "mock_weights", ":", "\n", "      ", "mock_weights", ".", "return_value", "=", "pointwise_weight_mtf", "\n", "output_mtf", "=", "conv_layer", ".", "call", "(", "\n", "context", ",", "x_mtf", ",", "all_kernel_wts", "=", "all_kernel_wts_mtf", ")", "\n", "", "actual", "=", "self", ".", "converter", ".", "convert_mtf_tensor_to_np_array", "(", "output_mtf", ")", "\n", "\n", "# [filter_size, d_model]", "\n", "conv_filter", "=", "np", ".", "array", "(", "all_kernel_wts", ")", "\n", "# [batch, filter_size, d_model]", "\n", "padded_x", "=", "np", ".", "concatenate", "(", "[", "state", "[", ":", ",", "1", ":", ",", ":", "]", ",", "x", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "]", ",", "axis", "=", "1", ")", "\n", "# b: batch, l: length (or filter), d: d_model", "\n", "depthwise_convolved", "=", "np", ".", "einsum", "(", "\"bld,ld->bd\"", ",", "padded_x", ",", "conv_filter", ")", "\n", "# The pointwise convolution can be implemented with matrix multiplication.", "\n", "# [batch, d_model] * [d_model, output_size] -> [batch, output_size]", "\n", "expected", "=", "np", ".", "dot", "(", "depthwise_convolved", ",", "pointwise_weight", ")", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers_test.get_dummy_decoder_context": [[28, 81], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.transformer.transformer.LayerStack", "mesh_tensorflow.transformer.transformer.Unitransformer", "mesh_tensorflow.transformer.transformer.Context", "converter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.constant", "converter.convert_np_array_to_mtf_tensor", "mesh_tensorflow.VariableDType", "mesh_tensorflow.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.test_utils.NumpyConverter.convert_np_array_to_mtf_tensor"], ["def", "get_dummy_decoder_context", "(", "converter", ",", "\n", "batch", "=", "2", ",", "\n", "d_model", "=", "6", ",", "\n", "length", "=", "4", ",", "\n", "mode", "=", "\"incremental\"", ",", "\n", "initial_position", "=", "None", ",", "\n", "state", "=", "None", ",", "\n", "inputs", "=", "None", ")", ":", "\n", "\n", "  ", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "length", ")", "\n", "\n", "# Set up a dummy model", "\n", "layer_stack", "=", "transformer", ".", "LayerStack", "(", "layers", "=", "[", "]", ")", "\n", "model", "=", "transformer", ".", "Unitransformer", "(", "\n", "d_model", "=", "d_model", ",", "\n", "input_vocab_size", "=", "10", ",", "# dummy values", "\n", "output_vocab_size", "=", "10", ",", "# dummy values", "\n", "autoregressive", "=", "True", ",", "\n", "max_length", "=", "length", ",", "\n", "layer_stack", "=", "layer_stack", ")", "\n", "\n", "if", "state", "is", "not", "None", ":", "\n", "    ", "state_mtf", "=", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "state", ",", "dtype", "=", "tf", ".", "float32", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"length\"", ",", "\"d_model\"", "]", ")", "\n", "states", "=", "[", "state_mtf", "]", "\n", "", "else", ":", "\n", "    ", "states", "=", "None", "\n", "\n", "", "if", "initial_position", ":", "\n", "    ", "initial_position", "=", "mtf", ".", "constant", "(", "\n", "converter", ".", "mesh", ",", "\n", "initial_position", ",", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", "]", ")", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "", "if", "inputs", "is", "not", "None", ":", "\n", "    ", "inputs", "=", "converter", ".", "convert_np_array_to_mtf_tensor", "(", "\n", "inputs", ",", "dim_names", "=", "[", "\"batch\"", ",", "\"length\"", "]", ")", "\n", "\n", "", "context", "=", "transformer", ".", "Context", "(", "\n", "model", "=", "model", ",", "\n", "mode", "=", "mode", ",", "\n", "states", "=", "states", ",", "\n", "new_states", "=", "[", "]", ",", "\n", "mesh", "=", "converter", ".", "mesh", ",", "\n", "batch_dims", "=", "[", "batch_dim", "]", ",", "\n", "length_dim", "=", "length_dim", ",", "\n", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "tf", ".", "float32", ")", ",", "\n", "sequence_id", "=", "1", ",", "\n", "inputs", "=", "inputs", ",", "\n", "initial_position", "=", "initial_position", ")", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils_test.UtilsTest.testDynamicText2self_packed": [[42, 79], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.transformer.utils._dynamic_text2self", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "expected_output_tensors.items", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.Lowering.export_to_tf_tensor", "utils_test.UtilsTest.evaluate", "utils_test.UtilsTest.assertAllEqual", "input_tensors.items"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._dynamic_text2self", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], ["for", "i", "in", "xrange", "(", "5", ")", ":", "\n", "# Each variable takes 400 Bytes, and will be placed from cpu:1.", "\n", "        ", "mtf", ".", "get_variable", "(", "mesh", ",", "'w{}'", ".", "format", "(", "i", ")", ",", "[", "hidden_dim", ",", "output_dim", "]", ")", "\n", "\n", "", "for", "i", "in", "xrange", "(", "5", ")", ":", "\n", "        ", "var", "=", "g", ".", "get_tensor_by_name", "(", "'w{}:0'", ".", "format", "(", "i", ")", ")", "\n", "device", "=", "(", "i", "+", "1", ")", "%", "len", "(", "device_list", ")", "\n", "self", ".", "assertEqual", "(", "'cpu:{}'", ".", "format", "(", "device", ")", ",", "var", ".", "device", ")", "\n", "\n", "\n", "", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "  ", "tf", ".", "disable_v2_behavior", "(", ")", "\n", "tf", ".", "test", ".", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils_test.UtilsTest.testDynamicText2self_unpacked": [[80, 109], ["mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.transformer.utils._dynamic_text2self", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "expected_output_tensors.items", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.Lowering.export_to_tf_tensor", "utils_test.UtilsTest.evaluate", "utils_test.UtilsTest.assertAllEqual", "input_tensors.items"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._dynamic_text2self", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils_test.UtilsTest.testCleanDecodes": [[110, 120], ["mesh_tensorflow.transformer.utils.clean_decodes", "utils_test.UtilsTest.test_session", "utils_test.UtilsTest.assertAllEqual", "sess.run"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.clean_decodes", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils_test.UtilsTest.test_maybe_add_pretokenized_features_with_int_inputs": [[121, 138], ["absl.testing.parameterized.named_parameters", "utils_test.mock_vocabulary", "mesh_tensorflow.transformer.utils._maybe_add_pretokenized_features", "utils_test.UtilsTest.assertAllEqual", "utils_test.UtilsTest.assertAllEqual", "utils_test.UtilsTest.assertLen", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils_test.mock_vocabulary", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._maybe_add_pretokenized_features"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils_test.UtilsTest.test_maybe_add_pretokenized_features_nonstandard_feature": [[139, 151], ["utils_test.mock_vocabulary", "mesh_tensorflow.transformer.utils._maybe_add_pretokenized_features", "utils_test.UtilsTest.assertSameElements", "utils_test.UtilsTest.assertAllEqual", "result[].keys", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils_test.mock_vocabulary", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._maybe_add_pretokenized_features"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils_test.UtilsTest.test_maybe_add_pretokenized_features_pretokenized_exists": [[152, 163], ["utils_test.mock_vocabulary", "mesh_tensorflow.transformer.utils._maybe_add_pretokenized_features", "utils_test.UtilsTest.assertEqual", "utils_test.UtilsTest.assertSameElements", "utils_test.UtilsTest.assertLen", "result[].keys", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils_test.mock_vocabulary", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._maybe_add_pretokenized_features"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils_test.mock_vocabulary": [[31, 38], ["absl.testing.absltest.mock.MagicMock", "absl.testing.absltest.mock.MagicMock", "encode_dict.items"], "function", ["None"], ["    ", "sizes", "=", "[", "100", ",", "0", ",", "0", ",", "0", "]", "\n", "device_list", "=", "[", "'cpu:0'", ",", "'cpu:1'", ",", "'cpu:2'", ",", "'cpu:3'", "]", "\n", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "g", ":", "\n", "      ", "var_placer", "=", "mtf", ".", "utils", ".", "BalancedVariablePlacer", "(", "device_list", ",", "sizes", ")", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "'my_mesh'", ",", "var_placer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.__init__": [[40, 116], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "layers", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "norm_epsilon", "=", "1e-6", ",", "\n", "num_vanilla_transformer_layers", "=", "2", ",", "\n", "couple_carry_transform_gates", "=", "True", ",", "\n", "act_type", "=", "gin", ".", "REQUIRED", ",", "\n", "recurrence_type", "=", "gin", ".", "REQUIRED", ",", "\n", "act_max_steps", "=", "gin", ".", "REQUIRED", ",", "\n", "act_epsilon", "=", "gin", ".", "REQUIRED", ",", "\n", "num_rec_steps", "=", "gin", ".", "REQUIRED", ",", "\n", "num_inrecurrence_layers", "=", "gin", ".", "REQUIRED", ",", "\n", "position_start_index", "=", "gin", ".", "REQUIRED", ",", "\n", "add_or_concat_timing_signal", "=", "gin", ".", "REQUIRED", ",", "\n", "step_timing_signal_type", "=", "gin", ".", "REQUIRED", ",", "\n", "add_position_timing_signal", "=", "gin", ".", "REQUIRED", ",", "\n", "add_step_timing_signal", "=", "gin", ".", "REQUIRED", ",", "\n", "mix_with_transformer_before_ut", "=", "gin", ".", "REQUIRED", ",", "\n", "mix_with_transformer_after_ut", "=", "gin", ".", "REQUIRED", ",", "\n", "gates_inputs", "=", "gin", ".", "REQUIRED", ",", "\n", "gate_ffn_layer", "=", "gin", ".", "REQUIRED", ",", "\n", "use_gated_transformer", "=", "gin", ".", "REQUIRED", ",", "\n", "gating_type", "=", "gin", ".", "REQUIRED", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Create a LayerStack for Universal Transformer.\n\n    Args:\n      layers: a list of TransformerLayer\n      dropout_rate: a floating-point number\n      norm_epsilon: a floating-point number\n      num_vanilla_transformer_layers: number of vanilla transformer layers\n        before the ACT layer.\n      couple_carry_transform_gates: whether to couple carry and transform gates.\n      act_type: act type\n      recurrence_type: recurrence type (allowable values: \"act\").\n      act_max_steps: maximum number of act steps\n      act_epsilon: halting threshold\n      num_rec_steps: maximum number of recurrent steps\n      num_inrecurrence_layers: number of inrecurrence layers\n      position_start_index: start index in embedding\n      add_or_concat_timing_signal: bool,\n      whether to add or concat the timing signal\n      step_timing_signal_type: step timing signal type\n      add_position_timing_signal: bool, whether to add position timing signal\n      add_step_timing_signal: bool, whether to add step timing signal\n      mix_with_transformer_before_ut: whether to mix transformer layers before\n        ut.\n      mix_with_transformer_after_ut: whether to mix transformer layers after ut.\n      gates_inputs: controlling the cary/transform gate.\n      gate_ffn_layer: gate ff layer type\n      use_gated_transformer: whether to use gated transformer.\n      gating_type: gating type.\n    \"\"\"", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_dropout_rate", "=", "dropout_rate", "\n", "self", ".", "_norm_epsilon", "=", "norm_epsilon", "\n", "self", ".", "num_vanilla_transformer_layers", "=", "num_vanilla_transformer_layers", "\n", "self", ".", "act_type", "=", "act_type", "\n", "self", ".", "recurrence_type", "=", "recurrence_type", "\n", "self", ".", "act_max_steps", "=", "act_max_steps", "\n", "self", ".", "act_epsilon", "=", "act_epsilon", "\n", "self", ".", "num_rec_steps", "=", "num_rec_steps", "\n", "self", ".", "num_inrecurrence_layers", "=", "num_inrecurrence_layers", "\n", "self", ".", "position_start_index", "=", "position_start_index", "\n", "self", ".", "add_or_concat_timing_signal", "=", "add_or_concat_timing_signal", "\n", "self", ".", "step_timing_signal_type", "=", "step_timing_signal_type", "\n", "self", ".", "add_position_timing_signal", "=", "add_position_timing_signal", "\n", "self", ".", "add_step_timing_signal", "=", "add_step_timing_signal", "\n", "self", ".", "mix_with_transformer_before_ut", "=", "mix_with_transformer_before_ut", "\n", "self", ".", "mix_with_transformer_after_ut", "=", "mix_with_transformer_after_ut", "\n", "self", ".", "gates_inputs", "=", "gates_inputs", "\n", "self", ".", "gate_ffn_layer", "=", "gate_ffn_layer", "\n", "self", ".", "couple_carry_transform_gates", "=", "couple_carry_transform_gates", "\n", "self", ".", "use_gated_transformer", "=", "use_gated_transformer", "\n", "self", ".", "gating_type", "=", "gating_type", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.get_timing_signal_1d": [[117, 184], ["mesh_tensorflow.constant", "mesh_tensorflow.concat", "mesh_tensorflow.reshape", "context.get_position", "math.log", "mesh_tensorflow.maximum", "mesh_tensorflow.exp", "NotImplementedError", "mesh_tensorflow.Shape", "mesh_tensorflow.sin", "mesh_tensorflow.cos", "float", "float", "mesh_tensorflow.mtf_range", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_position", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.exp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sin", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cos", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_range"], ["", "def", "get_timing_signal_1d", "(", "self", ",", "\n", "context", ",", "\n", "length", ",", "\n", "channels", ",", "\n", "min_timescale", "=", "1.0", ",", "\n", "max_timescale", "=", "1.0e4", ",", "\n", "start_index", "=", "0", ")", ":", "\n", "    ", "\"\"\"Gets a bunch of sinusoids of different frequencies.\n\n    Each channel of the input Tensor is incremented by a sinusoid of a different\n    frequency and phase.\n\n    This allows attention to learn to use absolute and relative positions.\n    Timing signals should be added to some precursors of both the query and the\n    memory inputs to attention.\n\n    The use of relative position is possible because sin(x+y) and cos(x+y) can\n    be expressed in terms of y, sin(x) and cos(x).\n\n    In particular, we use a geometric sequence of timescales starting with\n    min_timescale and ending with max_timescale.  The number of different\n    timescales is equal to channels / 2. For each timescale, we\n    generate the two sinusoidal signals sin(timestep/timescale) and\n    cos(timestep/timescale).  All of these sinusoids are concatenated in\n    the channels dimension.\n\n    Args:\n      context: mtf context.\n      length: a mtf.Dimension, length of timing signal sequence.\n      channels: a mtf.Dimension, size of timing embeddings to create.\n      The number of different timescales is equal to channels / 2.\n      min_timescale: a float\n      max_timescale: a float\n      start_index: index of first position\n\n    Returns:\n      a Tensor of timing signals [1, length, channels]\n    \"\"\"", "\n", "\n", "position", "=", "context", ".", "get_position", "(", ")", "+", "start_index", "\n", "num_timescales", "=", "mtf", ".", "constant", "(", "context", ".", "mesh", ",", "channels", ".", "size", "//", "2", ")", "\n", "log_timescale_increment", "=", "(", "\n", "math", ".", "log", "(", "float", "(", "max_timescale", ")", "/", "float", "(", "min_timescale", ")", ")", "/", "\n", "mtf", ".", "maximum", "(", "num_timescales", "-", "1", ",", "1", ")", ")", "\n", "channel_dim_name", "=", "channels", ".", "name", "\n", "inv_timescales", "=", "(", "\n", "min_timescale", "*", "mtf", ".", "exp", "(", "\n", "mtf", ".", "mtf_range", "(", "context", ".", "mesh", ",", "\n", "mtf", ".", "Dimension", "(", "channel_dim_name", ",", "channels", ".", "size", "//", "2", ")", ",", "\n", "context", ".", "activation_dtype", ")", "*", "-", "log_timescale_increment", ")", ")", "\n", "\n", "scaled_time", "=", "position", "*", "inv_timescales", "\n", "# Please note that this slightly differs from the published paper.", "\n", "# See a discussion here:", "\n", "# https://github.com/tensorflow/tensor2tensor/pull/177", "\n", "#    concat_dim_name = scaled_time.shape.dimension_names[1]", "\n", "concat_dim_name", "=", "channels", ".", "name", "\n", "signal", "=", "mtf", ".", "concat", "(", "\n", "[", "mtf", ".", "sin", "(", "scaled_time", ")", ",", "mtf", ".", "cos", "(", "scaled_time", ")", "]", ",", "\n", "concat_dim_name", "=", "concat_dim_name", ")", "\n", "\n", "if", "channels", ".", "size", "%", "2", "!=", "0", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\"Odd channel size not implemented.\"", ")", "\n", "", "new_dims", "=", "[", "mtf", ".", "Dimension", "(", "\"expanded\"", ",", "1", ")", "\n", "]", "+", "length", ".", "shape", ".", "dims", "+", "channels", ".", "shape", ".", "dim", "\n", "signal", "=", "mtf", ".", "reshape", "(", "signal", ",", "mtf", ".", "Shape", "(", "new_dims", ")", ")", "\n", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.add_position_timing_signal_func": [[185, 231], ["universal_transformer.UTLayerStack.get_timing_signal_1d", "mesh_tensorflow.Shape", "mesh_tensorflow.broadcast", "mesh_tensorflow.concat", "mesh_tensorflow.random_uniform", "mesh_tensorflow.cast", "mesh_tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.get_timing_signal_1d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.broadcast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.random_uniform", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "add_position_timing_signal_func", "(", "self", ",", "context", ",", "x", ",", "step", ")", ":", "\n", "    ", "\"\"\"Add n-dimensional embedding as the position (horizontal) timing signal.\n\n    Args:\n      context: mtf context\n      x: a tensor with shape [batch, length, depth]\n      step: step\n\n    Returns:\n      a Tensor with the same shape as x.\n\n    \"\"\"", "\n", "\n", "if", "not", "self", ".", "position_start_index", ":", "\n", "      ", "index", "=", "0", "\n", "\n", "", "elif", "self", ".", "position_start_index", "==", "\"random\"", ":", "\n", "# Shift all positions randomly", "\n", "# TODO(dehghani): What would be reasonable for max number of shift?", "\n", "      ", "index", "=", "mtf", ".", "random_uniform", "(", "\n", "context", ".", "mesh", ",", "[", "]", ",", "maxval", "=", "x", ".", "shape", ".", "dims", "[", "1", "]", ".", "size", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "", "elif", "self", ".", "position_start_index", "==", "\"step\"", ":", "\n", "# Shift positions based on the step", "\n", "      ", "if", "self", ".", "recurrence_type", "==", "\"act\"", ":", "\n", "        ", "num_steps", "=", "self", ".", "act_max_steps", "\n", "", "else", ":", "\n", "        ", "num_steps", "=", "self", ".", "num_rec_steps", "\n", "", "index", "=", "mtf", ".", "cast", "(", "x", ".", "shape", ".", "dims", "[", "1", "]", ".", "size", "*", "step", "/", "num_steps", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "", "length", "=", "context", ".", "length_dim", "\n", "channels", "=", "context", ".", "model", ".", "model_dim", "\n", "signal", "=", "self", ".", "get_timing_signal_1d", "(", "\n", "context", ",", "length", ",", "channels", ",", "start_index", "=", "index", ")", "\n", "\n", "if", "self", ".", "add_or_concat_timing_signal", "==", "\"add\"", ":", "\n", "      ", "x_with_timing", "=", "x", "+", "mtf", ".", "cast", "(", "signal", ",", "x", ".", "dtype", ")", "\n", "# Unimplemented", "\n", "", "if", "self", ".", "add_or_concat_timing_signal", "==", "\"concat\"", ":", "\n", "      ", "batch_dim", "=", "x", ".", "shape", ".", "dims", "[", "0", "]", "\n", "out_shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", "]", "+", "signal", ".", "shape", ".", "dims", "[", "1", ":", "]", ")", "\n", "signal_tiled", "=", "mtf", ".", "broadcast", "(", "signal", ",", "out_shape", ")", "\n", "x_with_timing", "=", "mtf", ".", "concat", "(", "\n", "(", "x", ",", "signal_tiled", ")", ",", "concat_dim_name", "=", "signal_tiled", ".", "dimension_names", "[", "-", "1", "]", ")", "\n", "\n", "", "return", "x_with_timing", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.get_layer_timing_signal_learned_1d": [[232, 258], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.gather", "mesh_tensorflow.get_variable", "tensorflow.random_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["", "def", "get_layer_timing_signal_learned_1d", "(", "self", ",", "context", ",", "channels", ",", "layer", ",", "\n", "num_layers", ")", ":", "\n", "    ", "\"\"\"get n-dimensional embedding as the layer (vertical) timing signal.\n\n    Adds embeddings to represent the position of the layer in the tower.\n\n    Args:\n      context: mtf context\n      channels: dimension of the timing signal\n      layer: layer num\n      num_layers: total number of layers\n\n    Returns:\n      a Tensor of timing signals [channels].\n    \"\"\"", "\n", "layer_dim", "=", "mtf", ".", "Dimension", "(", "\"layer\"", ",", "num_layers", ")", "\n", "shape", "=", "mtf", ".", "Shape", "(", "[", "layer_dim", ",", "channels", "]", ")", "\n", "layer_embedding", "=", "(", "\n", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "\"layer_embedding\"", ",", "\n", "shape", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "channels", ".", "size", "**", "-", "0.5", ")", ")", "*", "\n", "(", "channels", ".", "size", "**", "0.5", ")", ")", "\n", "return", "mtf", ".", "gather", "(", "layer_embedding", ",", "layer", ",", "layer_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.add_step_timing_signal_func": [[259, 293], ["universal_transformer.UTLayerStack.get_layer_timing_signal_learned_1d", "universal_transformer.UTLayerStack.get_layer_timing_signal_sinusoid_1d", "mesh_tensorflow.cast", "mesh_tensorflow.Shape", "mesh_tensorflow.broadcast", "mesh_tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.get_layer_timing_signal_learned_1d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.broadcast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat"], ["", "def", "add_step_timing_signal_func", "(", "self", ",", "context", ",", "x", ",", "step", ")", ":", "\n", "    ", "\"\"\"Add n-dimensional embedding as the step (vertical) timing signal.\n\n    Args:\n      context: mtf context\n      x: a tensor with shape [batch, length, depth]\n      step: step\n\n    Returns:\n      a Tensor with the same shape as x.\n\n    \"\"\"", "\n", "if", "self", ".", "recurrence_type", "==", "\"act\"", ":", "\n", "      ", "num_steps", "=", "self", ".", "act_max_steps", "\n", "", "else", ":", "\n", "      ", "num_steps", "=", "self", ".", "num_rec_steps", "\n", "", "channels", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "step_timing_signal_type", "==", "\"learned\"", ":", "\n", "      ", "signal", "=", "self", ".", "get_layer_timing_signal_learned_1d", "(", "context", ",", "channels", ",", "step", ",", "\n", "num_steps", ")", "\n", "", "elif", "self", ".", "step_timing_signal_type", "==", "\"sinusoid\"", ":", "\n", "      ", "signal", "=", "self", ".", "get_layer_timing_signal_sinusoid_1d", "(", "context", ",", "channels", ",", "step", ",", "\n", "num_steps", ")", "\n", "", "if", "self", ".", "add_or_concat_timing_signal", "==", "\"add\"", ":", "\n", "      ", "x_with_timing", "=", "x", "+", "mtf", ".", "cast", "(", "signal", ",", "x", ".", "dtype", ")", "\n", "", "elif", "self", ".", "add_or_concat_timing_signal", "==", "\"concat\"", ":", "\n", "      ", "batch_dim", "=", "x", ".", "shape", ".", "dims", "[", "0", "]", "\n", "out_shape", "=", "mtf", ".", "Shape", "(", "[", "batch_dim", "]", "+", "x", ".", "shape", ".", "dims", "[", "1", ":", "]", ")", "\n", "signal_tiled", "=", "mtf", ".", "broadcast", "(", "signal", ",", "out_shape", ")", "\n", "x_with_timing", "=", "mtf", ".", "concat", "(", "\n", "(", "x", ",", "signal_tiled", ")", ",", "concat_dim_name", "=", "signal_tiled", ".", "dimension_names", "[", "-", "1", "]", ")", "\n", "\n", "", "return", "x_with_timing", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.step_preprocess": [[294, 320], ["universal_transformer.UTLayerStack.add_step_timing_signal_func", "mesh_tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.add_step_timing_signal_func", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense"], ["", "def", "step_preprocess", "(", "self", ",", "context", ",", "x", ",", "step", ")", ":", "\n", "    ", "\"\"\"Preprocess the input at the beginning of each step.\n\n    Args:\n      context: mtf context\n      x: input tensor\n      step: step\n\n    Returns:\n      preprocessed input.\n\n    \"\"\"", "\n", "original_channel_size", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "add_step_timing_signal", ":", "\n", "      ", "x", "=", "self", ".", "add_step_timing_signal_func", "(", "context", ",", "x", ",", "step", ")", "\n", "", "if", "(", "(", "self", ".", "add_position_timing_signal", "or", "self", ".", "add_position_timing_signal", ")", "and", "\n", "self", ".", "add_or_concat_timing_signal", "==", "\"concat\"", ")", ":", "\n", "# linear projection to the original dimension of x", "\n", "      ", "new_dims", "=", "x", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "+", "[", "original_channel_size", "]", "\n", "x", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "new_dims", "=", "new_dims", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ")", "\n", "# TODO(yanqiz): implement sru in a separate CL", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.vanilla_transformer_layer": [[321, 340], ["enumerate", "tensorflow.variable_scope", "universal_transformer.UTLayerStack._layer_norm", "universal_transformer.UTLayerStack._dropout", "context.layer_outputs.append", "tensorflow.variable_scope", "layer.call", "len", "ValueError", "universal_transformer.UTLayerStack.gating"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._layer_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.gating"], ["", "def", "vanilla_transformer_layer", "(", "self", ",", "context", ",", "x", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Build a vanilla transformer layer.\"\"\"", "\n", "\n", "for", "lnum", ",", "layer", "in", "enumerate", "(", "self", ".", "_layers", ")", ":", "\n", "      ", "scope_name", "=", "layer", ".", "name", "\n", "with", "tf", ".", "variable_scope", "(", "scope_name", "or", "\"\"", ")", ":", "\n", "        ", "norm_x", "=", "self", ".", "_layer_norm", "(", "context", ",", "(", "x", "*", "mask", ")", "if", "mask", "else", "x", ")", "\n", "with", "tf", ".", "variable_scope", "(", "layer", ".", "__class__", ".", "__name__", ")", ":", "\n", "          ", "y", "=", "layer", ".", "call", "(", "context", ",", "norm_x", ")", "\n", "if", "y", ".", "shape", "!=", "x", ".", "shape", ":", "\n", "            ", "raise", "ValueError", "(", "\"Layer %s returned misshaped output x=%s y=%s\"", "%", "\n", "(", "layer", ".", "__class__", ".", "__name__", ",", "x", ",", "y", ")", ")", "\n", "", "if", "self", ".", "use_gated_transformer", ":", "\n", "            ", "y", "=", "self", ".", "gating", "(", "context", ",", "x", ",", "y", ",", "mask", ")", "\n", "", "", "x", "+=", "self", ".", "_dropout", "(", "context", ",", "y", ")", "\n", "", "if", "lnum", "!=", "len", "(", "self", ".", "_layers", ")", "-", "1", ":", "\n", "        ", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "", "context", ".", "layer_index", "+=", "1", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.gating": [[341, 393], ["universal_transformer.UTLayerStack.ffn_layer_multi_inputs", "universal_transformer.UTLayerStack.ffn_layer_multi_inputs", "universal_transformer.UTLayerStack.ffn_layer_multi_inputs", "universal_transformer.UTLayerStack.ffn_layer_multi_inputs", "universal_transformer.UTLayerStack.ffn_layer_multi_inputs"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.ffn_layer_multi_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.ffn_layer_multi_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.ffn_layer_multi_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.ffn_layer_multi_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.ffn_layer_multi_inputs"], ["", "def", "gating", "(", "self", ",", "context", ",", "x", ",", "transformed_x", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Implementation of various gating layers.\"\"\"", "\n", "gate_ffn_layer", "=", "self", ".", "gate_ffn_layer", "\n", "if", "self", ".", "gating_type", "==", "\"highway\"", ":", "\n", "      ", "gate_inputs", "=", "[", "x", "]", "\n", "transform_gate", "=", "self", ".", "ffn_layer_multi_inputs", "(", "\n", "context", ",", "\n", "mask", ",", "\n", "gate_inputs", ",", "\n", "ffn_layer_type", "=", "gate_ffn_layer", ",", "\n", "activation", "=", "mtf", ".", "sigmoid", ",", "\n", "preprocess", "=", "True", ")", "\n", "carry_gate", "=", "self", ".", "ffn_layer_multi_inputs", "(", "\n", "context", ",", "\n", "mask", ",", "\n", "gate_inputs", ",", "\n", "ffn_layer_type", "=", "gate_ffn_layer", ",", "\n", "activation", "=", "mtf", ".", "sigmoid", ",", "\n", "preprocess", "=", "True", ")", "\n", "new_state", "=", "x", "*", "carry_gate", "+", "transformed_x", "*", "transform_gate", "\n", "return", "new_state", "\n", "", "elif", "self", ".", "gating_type", "==", "\"gru\"", ":", "\n", "      ", "gate_inputs", "=", "[", "x", ",", "transformed_x", "]", "\n", "transition_function_update_gate", "=", "self", ".", "ffn_layer_multi_inputs", "(", "\n", "context", ",", "\n", "mask", ",", "\n", "gate_inputs", ",", "\n", "ffn_layer_type", "=", "gate_ffn_layer", ",", "\n", "activation", "=", "mtf", ".", "sigmoid", ",", "\n", "preprocess", "=", "True", ")", "\n", "transition_function_reset_gate", "=", "self", ".", "ffn_layer_multi_inputs", "(", "\n", "context", ",", "\n", "mask", ",", "\n", "gate_inputs", ",", "\n", "ffn_layer_type", "=", "gate_ffn_layer", ",", "\n", "activation", "=", "mtf", ".", "sigmoid", ",", "\n", "preprocess", "=", "True", ")", "\n", "\n", "reset_state", "=", "transition_function_reset_gate", "*", "x", "\n", "gate_inputs", "=", "[", "reset_state", ",", "transformed_x", "]", "\n", "transition_function_candidate", "=", "self", ".", "ffn_layer_multi_inputs", "(", "\n", "context", ",", "\n", "mask", ",", "\n", "gate_inputs", ",", "\n", "ffn_layer_type", "=", "gate_ffn_layer", ",", "\n", "activation", "=", "mtf", ".", "sigmoid", ",", "\n", "preprocess", "=", "True", ")", "\n", "\n", "transition_function_output", "=", "(", "\n", "(", "1", "-", "transition_function_update_gate", ")", "*", "transformed_x", "+", "\n", "transition_function_update_gate", "*", "transition_function_candidate", ")", "\n", "return", "transition_function_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.ut_basic": [[394, 403], ["range", "universal_transformer.UTLayerStack.step_preprocess", "range", "universal_transformer.UTLayerStack.ut_basic.ut_function"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.step_preprocess"], ["", "", "def", "ut_basic", "(", "self", ",", "context", ",", "x", ",", "mask", ")", ":", "\n", "    ", "def", "ut_function", "(", "x", ",", "step", ")", ":", "\n", "      ", "new_state", "=", "self", ".", "step_preprocess", "(", "context", ",", "x", ",", "step", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_inrecurrence_layers", ")", ":", "\n", "        ", "new_state", "=", "self", ".", "vanilla_transformer_layer", "(", "context", ",", "new_state", ",", "mask", ")", "\n", "", "return", "new_state", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_rec_steps", ")", ":", "\n", "      ", "x", "=", "ut_function", "(", "x", ",", "i", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.act_layer": [[404, 543], ["slice", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros_like", "mesh_tensorflow.constant", "range", "mesh_tensorflow.scalar_summary", "slice", "universal_transformer.UTLayerStack.step_preprocess", "mesh_tensorflow.cast", "range", "universal_transformer.UTLayerStack.ut_basic.ut_function"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.step_preprocess", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "act_layer", "(", "self", ",", "context", ",", "x", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Build a Universal Transformer ACT layer.\"\"\"", "\n", "state", "=", "x", "\n", "act_max_steps", "=", "self", ".", "act_max_steps", "\n", "threshold", "=", "1.0", "-", "self", ".", "act_epsilon", "\n", "state_shape_static", "=", "state", ".", "shape", ".", "dims", "\n", "\n", "state_slice", "=", "slice", "(", "0", ",", "3", ")", "\n", "if", "self", ".", "act_type", "==", "\"global\"", ":", "\n", "      ", "state_slice", "=", "slice", "(", "0", ",", "2", ")", "\n", "\n", "# Dynamic shape for update tensors below", "\n", "", "update_shape", "=", "state_shape_static", "[", "state_slice", "]", "\n", "\n", "# Halting probabilities (p_t^n in the paper)", "\n", "halting_probability", "=", "mtf", ".", "zeros", "(", "\n", "context", ".", "mesh", ",", "update_shape", ",", "dtype", "=", "context", ".", "activation_dtype", ")", "\n", "\n", "# Remainders (R(t) in the paper)", "\n", "remainders", "=", "mtf", ".", "zeros", "(", "\n", "context", ".", "mesh", ",", "update_shape", ",", "dtype", "=", "context", ".", "activation_dtype", ")", "\n", "\n", "# Number of updates performed (N(t) in the paper)", "\n", "n_updates", "=", "mtf", ".", "zeros", "(", "\n", "context", ".", "mesh", ",", "update_shape", ",", "dtype", "=", "context", ".", "activation_dtype", ")", "\n", "\n", "# Previous cell states (s_t in the paper)", "\n", "previous_state", "=", "mtf", ".", "zeros_like", "(", "state", ")", "\n", "step", "=", "mtf", ".", "constant", "(", "context", ".", "mesh", ",", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "def", "ut_function", "(", "state", ",", "step", ",", "halting_probability", ",", "remainders", ",", "n_updates", ",", "\n", "previous_state", ")", ":", "\n", "      ", "\"\"\"implements act (position-wise halting).\n\n      Args:\n        state: 3-D Tensor: [batch_size, length, channel]\n        step: indicates number of steps taken so far\n        halting_probability: halting probability\n        remainders: act remainders\n        n_updates: act n_updates\n        previous_state: previous state\n\n      Returns:\n        transformed_state: transformed state\n        step: step+1\n        halting_probability: halting probability\n        remainders: act remainders\n        n_updates: act n_updates\n        new_state: new state\n      \"\"\"", "\n", "state", "=", "self", ".", "step_preprocess", "(", "context", ",", "state", ",", "step", ")", "\n", "\n", "if", "self", ".", "act_type", "==", "\"random\"", ":", "\n", "# random as halting probability", "\n", "        ", "p", "=", "mtf", ".", "random_uniform", "(", "\n", "context", ".", "mesh", ",", "\n", "shape", "=", "halting_probability", ".", "shape", ".", "dims", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "", "else", ":", "\n", "        ", "last_dim_name", "=", "state", ".", "shape", ".", "dimension_names", "[", "-", "1", "]", "\n", "new_dims", "=", "[", "mtf", ".", "Dimension", "(", "last_dim_name", ",", "1", ")", "]", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "\"sigmoid_activation_for_pondering\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "          ", "p", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "state", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "reduced_dims", "=", "[", "state", ".", "shape", ".", "dims", "[", "-", "1", "]", "]", ",", "\n", "new_dims", "=", "new_dims", ",", "\n", "activation", "=", "mtf", ".", "sigmoid", ",", "\n", "use_bias", "=", "True", ")", "\n", "if", "self", ".", "act_type", "==", "\"global\"", ":", "\n", "# average over all positions (as a global halting prob)", "\n", "            ", "p", "=", "mtf", ".", "reduce_mean", "(", "p", ",", "reduced_dim", "=", "p", ".", "shape", ".", "dims", "[", "1", "]", ")", "\n", "p", "=", "mtf", ".", "squeeze", "(", "p", ")", "\n", "", "else", ":", "\n", "# maintain position-wise probabilities", "\n", "            ", "new_shape", "=", "p", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "\n", "p", "=", "mtf", ".", "reshape", "(", "p", ",", "new_shape", ")", "\n", "# Mask for inputs which have not halted yet", "\n", "", "", "", "still_running", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "less", "(", "halting_probability", ",", "1.0", ")", ",", "context", ".", "activation_dtype", ")", "\n", "\n", "# Mask of inputs which halted at this step", "\n", "new_halted", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "greater", "(", "halting_probability", "+", "p", "*", "still_running", ",", "threshold", ")", ",", "\n", "context", ".", "activation_dtype", ")", "*", "still_running", "\n", "# Mask of inputs which haven't halted, and didn't halt this step", "\n", "still_running", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "less_equal", "(", "halting_probability", "+", "p", "*", "still_running", ",", "threshold", ")", ",", "\n", "context", ".", "activation_dtype", ")", "*", "still_running", "\n", "\n", "# Add the halting probability for this step to the halting", "\n", "# probabilities for those input which haven't halted yet", "\n", "halting_probability", "+=", "p", "*", "still_running", "\n", "\n", "# Compute remainders for the inputs which halted at this step", "\n", "remainders", "+=", "new_halted", "*", "(", "1", "-", "halting_probability", ")", "\n", "\n", "# Add the remainders to those inputs which halted at this step", "\n", "halting_probability", "+=", "new_halted", "*", "remainders", "\n", "\n", "# Increment n_updates for all inputs which are still running", "\n", "n_updates", "+=", "still_running", "+", "new_halted", "\n", "\n", "# Compute the weight to be applied to the new state and output", "\n", "# 0 when the input has already halted", "\n", "# p when the input hasn't halted yet", "\n", "# the remainders when it halted this step", "\n", "input_tensor", "=", "p", "*", "still_running", "+", "new_halted", "*", "remainders", "\n", "update_weights", "=", "input_tensor", "\n", "\n", "# apply transformation on the state", "\n", "transformed_state", "=", "state", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_inrecurrence_layers", ")", ":", "\n", "        ", "transformed_state", "=", "self", ".", "vanilla_transformer_layer", "(", "\n", "context", ",", "transformed_state", ",", "mask", ")", "\n", "\n", "# update running part in the weighted state and keep the rest", "\n", "", "new_state", "=", "(", "(", "transformed_state", "*", "update_weights", ")", "+", "\n", "(", "previous_state", "*", "(", "1", "-", "update_weights", ")", ")", ")", "\n", "\n", "if", "self", ".", "act_type", "==", "\"accumulated\"", ":", "\n", "# Add in the weighted state", "\n", "        ", "new_state", "=", "(", "transformed_state", "*", "update_weights", ")", "+", "previous_state", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "return", "(", "transformed_state", ",", "step", ",", "halting_probability", ",", "remainders", ",", "\n", "n_updates", ",", "new_state", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "act_max_steps", "+", "1", ")", ":", "\n", "      ", "(", "state", ",", "step", ",", "halting_probability", ",", "remainders", ",", "n_updates", ",", "\n", "previous_state", ")", "=", "ut_function", "(", "state", ",", "step", ",", "halting_probability", ",", "\n", "remainders", ",", "n_updates", ",", "previous_state", ")", "\n", "", "ponder_times", "=", "n_updates", "\n", "\n", "mtf", ".", "scalar_summary", "(", "\"ponder_times\"", ",", "mtf", ".", "reduce_mean", "(", "ponder_times", ")", ")", "\n", "return", "previous_state", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.ffn_layer_multi_inputs": [[544, 615], ["len", "enumerate", "len", "mesh_tensorflow.concat", "mesh_tensorflow.layers.dense", "universal_transformer.UTLayerStack._layer_norm", "universal_transformer.UTLayerStack._layer_norm", "mesh_tensorflow.layers.dense_relu_dense", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._layer_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._layer_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense_relu_dense"], ["", "def", "ffn_layer_multi_inputs", "(", "self", ",", "\n", "context", ",", "\n", "mask", ",", "\n", "inputs_list", ",", "\n", "ffn_layer_type", "=", "\"dense\"", ",", "\n", "kernel_initializer", "=", "None", ",", "\n", "activation", "=", "None", ",", "\n", "preprocess", "=", "False", ",", "\n", "postprocess", "=", "False", ")", ":", "\n", "    ", "\"\"\"Implements a Feed-forward layer with multiple inputs, pad-removing, etc.\n\n    Args:\n      context: mtf context\n      mask: mask\n      inputs_list: list of input tensors\n      ffn_layer_type: dense / dense_dropconnect/ dense_relu_dense\n      kernel_initializer: kernel initializer\n      activation: activation function\n      preprocess: if preprocess the input --> default: layer-norm\n      postprocess: if postprocess the output --> default: drop-out and residual\n\n    Returns:\n      a tensor\n    Raises:\n      ValueError: Unknown ffn_layer type.\n\n    \"\"\"", "\n", "\n", "# need at least one inputs", "\n", "num_inputs", "=", "len", "(", "inputs_list", ")", "\n", "assert", "num_inputs", ">", "0", "\n", "\n", "if", "preprocess", ":", "\n", "# In case of having more than one input to the ffn,", "\n", "# we just apply layer norm on them independently as preprocessing", "\n", "      ", "for", "i", ",", "inputs", "in", "enumerate", "(", "inputs_list", ")", ":", "\n", "        ", "inputs_list", "[", "i", "]", "=", "self", ".", "_layer_norm", "(", "\n", "context", ",", "(", "inputs", "*", "mask", ")", "if", "mask", "else", "inputs", ")", "\n", "\n", "# the output size is the hidden size of the main inputs", "\n", "", "", "ffn_inputs", "=", "inputs_list", "[", "0", "]", "\n", "if", "len", "(", "inputs_list", ")", "!=", "1", ":", "\n", "      ", "ffn_inputs", "=", "mtf", ".", "concat", "(", "inputs_list", ",", "context", ".", "model", ".", "model_dim", ".", "name", ")", "\n", "", "if", "ffn_layer_type", "==", "\"dense\"", ":", "\n", "# last_dims = [", "\n", "#     mtf.Dimension(ffn_inputs.shape.dims[-1].name, hidden_size)", "\n", "# ]", "\n", "      ", "output", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "ffn_inputs", ",", "\n", "reduced_dims", "=", "[", "ffn_inputs", ".", "shape", ".", "dims", "[", "-", "1", "]", "]", ",", "\n", "new_dims", "=", "[", "context", ".", "model", ".", "model_dim", "]", ",", "\n", "activation", "=", "activation", ",", "\n", "use_bias", "=", "True", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "expert_dims", "=", "context", ".", "model", ".", "ensemble_dims", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ")", "\n", "", "elif", "ffn_layer_type", "==", "\"dense_relu_dense\"", ":", "\n", "      ", "output", "=", "mtf", ".", "layers", ".", "dense_relu_dense", "(", "\n", "ffn_inputs", ",", "\n", "hidden_channels", "=", "context", ".", "model", ".", "model_dim", ",", "\n", "is_training", "=", "context", ".", "train", ",", "\n", "dropout", "=", "self", ".", "relu_dropout", "\n", ")", "\n", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unknown ffn_layer type: %s\"", "%", "ffn_layer_type", ")", "\n", "\n", "", "if", "postprocess", ":", "\n", "      ", "output", "=", "self", ".", "_layer_norm", "(", "context", ",", "(", "output", "*", "mask", ")", "if", "mask", "else", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.ut_highway": [[616, 664], ["range", "universal_transformer.UTLayerStack.step_preprocess", "range", "universal_transformer.UTLayerStack.ffn_layer_multi_inputs", "mesh_tensorflow.scalar_summary", "mesh_tensorflow.scalar_summary", "universal_transformer.UTLayerStack.ut_basic.ut_function"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.step_preprocess", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.ffn_layer_multi_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.scalar_summary"], ["", "def", "ut_highway", "(", "self", ",", "context", ",", "layer_inputs", ",", "mask", ")", ":", "\n", "    ", "\"\"\"A highway network layer.\"\"\"", "\n", "def", "ut_function", "(", "x", ",", "step", ")", ":", "\n", "      ", "\"\"\"highway layer implementation.\"\"\"", "\n", "state", ",", "inputs", ",", "memory", "=", "x", "\n", "new_state", "=", "self", ".", "step_preprocess", "(", "context", ",", "state", ",", "step", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_inrecurrence_layers", ")", ":", "\n", "        ", "new_state", "=", "self", ".", "vanilla_transformer_layer", "(", "context", ",", "new_state", ",", "mask", ")", "\n", "", "transformed_state", "=", "new_state", "\n", "\n", "gate_inputs", "=", "[", "]", "\n", "if", "\"s\"", "in", "self", ".", "gates_inputs", ":", "\n", "        ", "gate_inputs", ".", "append", "(", "state", ")", "\n", "", "if", "\"t\"", "in", "self", ".", "gates_inputs", ":", "\n", "        ", "gate_inputs", ".", "append", "(", "transformed_state", ")", "\n", "", "if", "\"i\"", "in", "self", ".", "gates_inputs", ":", "\n", "        ", "gate_inputs", ".", "append", "(", "inputs", ")", "\n", "", "gate_ffn_layer", "=", "self", ".", "gate_ffn_layer", "\n", "\n", "transform_gate", "=", "self", ".", "ffn_layer_multi_inputs", "(", "\n", "context", ",", "\n", "mask", ",", "\n", "gate_inputs", ",", "\n", "ffn_layer_type", "=", "gate_ffn_layer", ",", "\n", "activation", "=", "mtf", ".", "sigmoid", ",", "\n", "preprocess", "=", "True", ")", "\n", "if", "self", ".", "couple_carry_transform_gates", ":", "\n", "        ", "carry_gate", "=", "mtf", ".", "sub", "(", "1.0", ",", "transform_gate", ",", "name", "=", "\"carry\"", ")", "\n", "", "else", ":", "\n", "        ", "carry_gate", "=", "self", ".", "ffn_layer_multi_inputs", "(", "\n", "context", ",", "\n", "mask", ",", "\n", "gate_inputs", ",", "\n", "ffn_layer_type", "=", "gate_ffn_layer", ",", "\n", "activation", "=", "mtf", ".", "sigmoid", ",", "\n", "preprocess", "=", "True", ")", "\n", "", "new_state", "=", "state", "*", "carry_gate", "+", "transformed_state", "*", "transform_gate", "\n", "\n", "mtf", ".", "scalar_summary", "(", "\"highway_transform_gate_layer\"", ",", "\n", "mtf", ".", "reduce_mean", "(", "transform_gate", ")", ")", "\n", "mtf", ".", "scalar_summary", "(", "\"highway_carry_gate_layer\"", ",", "\n", "mtf", ".", "reduce_mean", "(", "carry_gate", ")", ")", "\n", "\n", "return", "new_state", ",", "inputs", ",", "memory", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_rec_steps", ")", ":", "\n", "      ", "layer_inputs", "=", "ut_function", "(", "layer_inputs", ",", "i", ")", "\n", "", "output", ",", "_", ",", "_", "=", "layer_inputs", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.call": [[665, 698], ["isinstance", "universal_transformer.UTLayerStack._dropout", "context.layer_outputs.append", "universal_transformer.UTLayerStack._layer_norm", "universal_transformer.UTLayerStack._dropout", "context.layer_outputs.append", "mesh_tensorflow.cast", "range", "universal_transformer.UTLayerStack.act_layer", "range", "mesh_tensorflow.not_equal", "universal_transformer.UTLayerStack.vanilla_transformer_layer", "universal_transformer.UTLayerStack.ut_basic", "universal_transformer.UTLayerStack.vanilla_transformer_layer", "universal_transformer.UTLayerStack.ut_highway"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._layer_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.act_layer", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.vanilla_transformer_layer", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.ut_basic", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.vanilla_transformer_layer", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.ut_highway"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "    ", "\"\"\"Call the layer stack.\"\"\"", "\n", "if", "isinstance", "(", "context", ".", "sequence_id", ",", "mtf", ".", "Tensor", ")", ":", "\n", "# We use this mask to zero out the padding regions at each layer.", "\n", "# This \"fixes\" a bug where extreme values leak from the padding into the", "\n", "# non-padding regions.", "\n", "# TODO(noam): understand this better and make a more principled fix.", "\n", "      ", "mask", "=", "mtf", ".", "cast", "(", "\n", "mtf", ".", "not_equal", "(", "context", ".", "sequence_id", ",", "0", ")", ",", "context", ".", "activation_dtype", ")", "\n", "", "else", ":", "\n", "      ", "mask", "=", "None", "\n", "", "x", "=", "self", ".", "_dropout", "(", "context", ",", "x", ")", "\n", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "if", "self", ".", "mix_with_transformer_before_ut", ":", "\n", "      ", "for", "_", "in", "range", "(", "self", ".", "num_vanilla_transformer_layers", ")", ":", "\n", "        ", "x", "=", "self", ".", "vanilla_transformer_layer", "(", "context", ",", "x", ",", "mask", ")", "\n", "# Call a ACT layer", "\n", "", "", "if", "self", ".", "recurrence_type", "==", "\"act\"", ":", "\n", "      ", "x", "=", "self", ".", "act_layer", "(", "context", ",", "x", ",", "mask", ")", "\n", "", "elif", "self", ".", "recurrence_type", "==", "\"basic\"", ":", "\n", "      ", "x", "=", "self", ".", "ut_basic", "(", "context", ",", "x", ",", "mask", ")", "\n", "", "elif", "self", ".", "recurrence_type", "==", "\"highway\"", ":", "\n", "      ", "layer_inputs", "=", "(", "x", ",", "x", ",", "x", ")", "\n", "x", "=", "self", ".", "ut_highway", "(", "context", ",", "layer_inputs", ",", "mask", ")", "\n", "", "if", "self", ".", "mix_with_transformer_after_ut", ":", "\n", "      ", "for", "_", "in", "range", "(", "self", ".", "num_vanilla_transformer_layers", ")", ":", "\n", "        ", "x", "=", "self", ".", "vanilla_transformer_layer", "(", "context", ",", "x", ",", "mask", ")", "\n", "", "", "x", "=", "self", ".", "_layer_norm", "(", "context", ",", "x", ",", "name", "=", "\"final_layer_norm\"", ")", "\n", "x", "=", "self", ".", "_dropout", "(", "context", ",", "x", ")", "\n", "if", "mask", ":", "\n", "      ", "x", "*=", "mask", "\n", "", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._dropout": [[699, 707], ["mesh_tensorflow.dropout", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout"], ["", "def", "_dropout", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "    ", "if", "context", ".", "train", "and", "self", ".", "_dropout_rate", ">", "0", ":", "\n", "      ", "return", "mtf", ".", "dropout", "(", "\n", "x", ",", "context", ".", "train", ",", "\n", "rate", "=", "self", ".", "_dropout_rate", ",", "\n", "noise_shape", "=", "mtf", ".", "Shape", "(", "context", ".", "batch_dims", "+", "[", "context", ".", "model", ".", "model_dim", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack._layer_norm": [[708, 722], ["mesh_tensorflow.layers.layer_norm"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.layer_norm"], ["", "", "def", "_layer_norm", "(", "self", ",", "context", ",", "x", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Layer normalization.\n\n    Deprecated - can we remove this?\n\n    Args:\n      context: a Context\n      x: a Tensor\n      name: an optional string\n\n    Returns:\n      a Tensor\n    \"\"\"", "\n", "return", "mtf", ".", "layers", ".", "layer_norm", "(", "x", ",", "context", ".", "model", ".", "model_dim", ",", "self", ".", "_norm_epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.num_layers": [[723, 726], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_layers", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.universal_transformer.UTLayerStack.layers": [[727, 730], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "layers", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_layers", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp": [[58, 69], ["super().setUp", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mesh_tensorflow.VariableDType", "adaptive_softmax_test.AdaptiveSoftmaxTest.addCleanup", "mock.MagicMock", "mock.patch.object().start", "mock.patch.object"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.setUp"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "AdaptiveSoftmaxTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "self", ".", "mesh", "=", "mtf", ".", "Mesh", "(", "self", ".", "graph", ",", "'mtf_mesh'", ")", "\n", "self", ".", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "activation_dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "addCleanup", "(", "mock", ".", "patch", ".", "stopall", ")", "\n", "self", ".", "initializer_mock", "=", "mock", ".", "MagicMock", "(", ")", "\n", "random_normal_initializer_mock", "=", "mock", ".", "patch", ".", "object", "(", "\n", "tf", ",", "'random_normal_initializer'", ")", ".", "start", "(", ")", "\n", "random_normal_initializer_mock", ".", "return_value", "=", "self", ".", "initializer_mock", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest._export_to_tf_tensor": [[70, 75], ["mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], ["", "def", "_export_to_tf_tensor", "(", "self", ",", "mtf_tensor", ")", ":", "\n", "    ", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "''", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "return", "lowering", ",", "lowering", ".", "export_to_tf_tensor", "(", "mtf_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.test_adaptive_softmax_loss_fn_tailClustersAllProject_correctlyComputesTheLoss": [[76, 207], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mock.MagicMock", "mock.MagicMock", "tensorflow.constant", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "adaptive_softmax_test.initialize_by_shape", "mesh_tensorflow.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding", "mock.MagicMock", "mesh_tensorflow.transformer.adaptive_softmax.adaptive_softmax_loss_fn", "adaptive_softmax_test.AdaptiveSoftmaxTest._export_to_tf_tensor", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "sum", "sum", "sum", "adaptive_softmax_test.AdaptiveSoftmaxTest.assertAllClose", "tensorflow.global_variables_initializer", "lowering.copy_masters_to_slices", "adaptive_softmax_test._softmax_cross_entropy_with_logits", "adaptive_softmax_test._softmax_cross_entropy_with_logits", "adaptive_softmax_test._softmax_cross_entropy_with_logits", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "sum."], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.adaptive_softmax_loss_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest._export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test._softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test._softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test._softmax_cross_entropy_with_logits"], ["", "def", "test_adaptive_softmax_loss_fn_tailClustersAllProject_correctlyComputesTheLoss", "(", "\n", "self", ")", ":", "\n", "# Arrange.", "\n", "    ", "seq_len", "=", "16", "\n", "vocab_size", "=", "8", "\n", "model_size", "=", "2", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "decoder", "=", "mock", ".", "MagicMock", "(", ")", "\n", "decoder", ".", "z_loss", "=", "0.0", "\n", "decoder", ".", "loss_denominator", "=", "mock", ".", "MagicMock", "(", ")", "\n", "decoder", ".", "loss_denominator", ".", "return_value", "=", "1.0", "\n", "\n", "# 7 tokens in head cluster", "\n", "# 5 tokens in tail cluster 1", "\n", "# 4 tokens in tail cluster 2", "\n", "targets_array", "=", "[", "2", ",", "4", ",", "4", ",", "6", ",", "2", ",", "5", ",", "7", ",", "5", ",", "2", ",", "1", ",", "6", ",", "7", ",", "0", ",", "0", ",", "3", ",", "2", "]", "\n", "targets", "=", "tf", ".", "constant", "(", "targets_array", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "hidden", "=", "tf", ".", "constant", "(", "\n", "[", "[", "0", ",", "-", "10", "]", ",", "[", "1", ",", "-", "11", "]", ",", "[", "2", ",", "-", "12", "]", ",", "[", "3", ",", "-", "13", "]", ",", "[", "4", ",", "-", "14", "]", ",", "[", "5", ",", "-", "15", "]", ",", "[", "6", ",", "-", "16", "]", ",", "\n", "[", "7", ",", "-", "17", "]", ",", "[", "8", ",", "-", "18", "]", ",", "[", "9", ",", "-", "19", "]", ",", "[", "10", ",", "-", "20", "]", ",", "[", "11", ",", "-", "21", "]", ",", "[", "12", ",", "-", "22", "]", ",", "\n", "[", "13", ",", "-", "23", "]", ",", "[", "14", ",", "-", "24", "]", ",", "[", "15", ",", "-", "25", "]", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "mtf_targets", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "targets", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", "]", ")", ")", "\n", "mtf_hidden", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "hidden", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", ",", "model_dim", "]", ")", ")", "\n", "\n", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "(", "5", ",", "2", ")", ":", "[", "[", "1", ",", "6", "]", ",", "[", "2", ",", "7", "]", ",", "[", "3", ",", "8", "]", ",", "[", "4", ",", "9", "]", ",", "[", "5", ",", "10", "]", "]", ",", "\n", "(", "3", ",", "2", ")", ":", "[", "[", "11", ",", "14", "]", ",", "[", "12", ",", "15", "]", ",", "[", "13", ",", "16", "]", "]", ",", "\n", "(", "2", ",", "1", ")", ":", "[", "[", "17", ",", "18", "]", "]", ",", "\n", "(", "1", ",", "2", ")", ":", "[", "[", "19", "]", ",", "[", "20", "]", "]", ",", "\n", "}", ")", "\n", "\n", "vocab_embedding", "=", "adaptive_softmax", ".", "AdaptiveSoftmaxVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "clusters", "=", "[", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "2", "\n", "}", ",", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "2", ",", "\n", "'length_projection_factor'", ":", "0.5", ",", "\n", "}", ",", "{", "\n", "'token_count'", ":", "2", ",", "\n", "'embedding_size'", ":", "1", ",", "\n", "'length_projection_factor'", ":", "0.125", ",", "\n", "}", "]", ")", "\n", "\n", "context", "=", "mock", ".", "MagicMock", "(", ")", "\n", "context", ".", "activation_dtype", "=", "tf", ".", "float32", "\n", "context", ".", "shared_params", "=", "{", "'embedding'", ":", "vocab_embedding", "}", "\n", "\n", "# Act.", "\n", "mtf_loss", "=", "adaptive_softmax", ".", "adaptive_softmax_loss_fn", "(", "\n", "decoder", ",", "context", ",", "mtf_hidden", ",", "mtf_targets", ",", "output_vocab_dim", "=", "None", ")", "\n", "lowering", ",", "loss", "=", "self", ".", "_export_to_tf_tensor", "(", "mtf_loss", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual_loss", ",", "=", "self", ".", "evaluate", "(", "[", "loss", "]", ")", "\n", "\n", "# Assert.", "\n", "def", "expected_head_loss", "(", "position", ",", "label", ")", ":", "\n", "      ", "factor", "=", "model_dim", ".", "size", "**", "-", "0.5", "\n", "logits", "=", "[", "\n", "factor", "*", "(", "1", "*", "position", "-", "6", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "2", "*", "position", "-", "7", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "3", "*", "position", "-", "8", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "4", "*", "position", "-", "9", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "5", "*", "position", "-", "10", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "]", "\n", "return", "_softmax_cross_entropy_with_logits", "(", "logits", ",", "label", ")", "\n", "\n", "", "expected_head_labels", "=", "[", "2", ",", "3", ",", "3", ",", "4", ",", "2", ",", "3", ",", "4", ",", "3", ",", "2", ",", "1", ",", "4", ",", "4", ",", "0", ",", "0", ",", "3", ",", "2", "]", "\n", "expected_head_loss", "=", "sum", "(", "\n", "expected_head_loss", "(", "position", ",", "expected_label", ")", "\n", "for", "position", ",", "expected_label", "in", "enumerate", "(", "expected_head_labels", ")", "\n", "if", "expected_label", ")", "\n", "\n", "def", "expected_tail_cluster_1_loss", "(", "position", ")", ":", "\n", "      ", "factor", "=", "model_dim", ".", "size", "**", "-", "0.5", "\n", "logits", "=", "[", "\n", "factor", "*", "(", "11", "*", "position", "-", "14", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "12", "*", "position", "-", "15", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "13", "*", "position", "-", "16", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "]", "\n", "first_token_in_cluster_id", "=", "3", "\n", "return", "_softmax_cross_entropy_with_logits", "(", "\n", "logits", ",", "targets_array", "[", "position", "]", "-", "first_token_in_cluster_id", ")", "\n", "\n", "", "expected_tail_cluster_1_loss", "=", "sum", "(", "[", "\n", "expected_tail_cluster_1_loss", "(", "position", "=", "1", ")", ",", "\n", "expected_tail_cluster_1_loss", "(", "position", "=", "2", ")", ",", "\n", "expected_tail_cluster_1_loss", "(", "position", "=", "5", ")", ",", "\n", "expected_tail_cluster_1_loss", "(", "position", "=", "7", ")", ",", "\n", "expected_tail_cluster_1_loss", "(", "position", "=", "14", ")", ",", "\n", "]", ")", "\n", "\n", "def", "expected_tail_cluster_2_loss", "(", "position", ")", ":", "\n", "      ", "factor", "=", "model_dim", ".", "size", "**", "-", "0.5", "\n", "logits", "=", "[", "\n", "factor", "*", "(", "17", "*", "19", "*", "position", "-", "17", "*", "20", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "18", "*", "19", "*", "position", "-", "18", "*", "20", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "]", "\n", "first_token_in_cluster_id", "=", "6", "\n", "return", "_softmax_cross_entropy_with_logits", "(", "\n", "logits", ",", "targets_array", "[", "position", "]", "-", "first_token_in_cluster_id", ")", "\n", "\n", "# Due to the length_projection_factor of 1/8, only 2 tokens will be counted", "\n", "# despite there being 4 tokens in this cluster.", "\n", "", "expected_tail_cluster_2_loss", "=", "sum", "(", "[", "\n", "expected_tail_cluster_2_loss", "(", "position", "=", "3", ")", ",", "\n", "expected_tail_cluster_2_loss", "(", "position", "=", "6", ")", ",", "\n", "]", ")", "\n", "\n", "expected_loss", "=", "(", "\n", "expected_head_loss", "+", "expected_tail_cluster_1_loss", "+", "\n", "expected_tail_cluster_2_loss", ")", "\n", "\n", "self", ".", "assertAllClose", "(", "actual_loss", ",", "expected_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.test_adaptive_softmax_loss_fn_tailClusterDoesNotProject_correctlyComputesTheLoss": [[208, 339], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mock.MagicMock", "mock.MagicMock", "tensorflow.constant", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "adaptive_softmax_test.initialize_by_shape", "mesh_tensorflow.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding", "mock.MagicMock", "mesh_tensorflow.transformer.adaptive_softmax.adaptive_softmax_loss_fn", "adaptive_softmax_test.AdaptiveSoftmaxTest._export_to_tf_tensor", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "sum", "sum", "sum", "adaptive_softmax_test.AdaptiveSoftmaxTest.assertAllClose", "tensorflow.global_variables_initializer", "lowering.copy_masters_to_slices", "adaptive_softmax_test._softmax_cross_entropy_with_logits", "adaptive_softmax_test._softmax_cross_entropy_with_logits", "adaptive_softmax_test._softmax_cross_entropy_with_logits", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "sum."], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.adaptive_softmax_loss_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest._export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test._softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test._softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test._softmax_cross_entropy_with_logits"], ["", "def", "test_adaptive_softmax_loss_fn_tailClusterDoesNotProject_correctlyComputesTheLoss", "(", "\n", "self", ")", ":", "\n", "# Arrange.", "\n", "    ", "seq_len", "=", "16", "\n", "vocab_size", "=", "8", "\n", "model_size", "=", "2", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "decoder", "=", "mock", ".", "MagicMock", "(", ")", "\n", "decoder", ".", "z_loss", "=", "0.0", "\n", "decoder", ".", "loss_denominator", "=", "mock", ".", "MagicMock", "(", ")", "\n", "decoder", ".", "loss_denominator", ".", "return_value", "=", "1.0", "\n", "\n", "# 7 tokens in head cluster", "\n", "# 5 tokens in tail cluster 1", "\n", "# 4 tokens in tail cluster 2", "\n", "targets_array", "=", "[", "2", ",", "4", ",", "4", ",", "6", ",", "2", ",", "5", ",", "7", ",", "5", ",", "2", ",", "1", ",", "6", ",", "7", ",", "0", ",", "0", ",", "3", ",", "2", "]", "\n", "targets", "=", "tf", ".", "constant", "(", "targets_array", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "hidden", "=", "tf", ".", "constant", "(", "\n", "[", "[", "0", ",", "-", "10", "]", ",", "[", "1", ",", "-", "11", "]", ",", "[", "2", ",", "-", "12", "]", ",", "[", "3", ",", "-", "13", "]", ",", "[", "4", ",", "-", "14", "]", ",", "[", "5", ",", "-", "15", "]", ",", "[", "6", ",", "-", "16", "]", ",", "\n", "[", "7", ",", "-", "17", "]", ",", "[", "8", ",", "-", "18", "]", ",", "[", "9", ",", "-", "19", "]", ",", "[", "10", ",", "-", "20", "]", ",", "[", "11", ",", "-", "21", "]", ",", "[", "12", ",", "-", "22", "]", ",", "\n", "[", "13", ",", "-", "23", "]", ",", "[", "14", ",", "-", "24", "]", ",", "[", "15", ",", "-", "25", "]", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "mtf_targets", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "targets", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", "]", ")", ")", "\n", "mtf_hidden", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "hidden", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", ",", "model_dim", "]", ")", ")", "\n", "\n", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "(", "5", ",", "2", ")", ":", "[", "[", "1", ",", "6", "]", ",", "[", "2", ",", "7", "]", ",", "[", "3", ",", "8", "]", ",", "[", "4", ",", "9", "]", ",", "[", "5", ",", "10", "]", "]", ",", "\n", "(", "3", ",", "2", ")", ":", "[", "[", "11", ",", "14", "]", ",", "[", "12", ",", "15", "]", ",", "[", "13", ",", "16", "]", "]", ",", "\n", "(", "2", ",", "1", ")", ":", "[", "[", "17", ",", "18", "]", "]", ",", "\n", "(", "1", ",", "2", ")", ":", "[", "[", "19", "]", ",", "[", "20", "]", "]", ",", "\n", "}", ")", "\n", "\n", "vocab_embedding", "=", "adaptive_softmax", ".", "AdaptiveSoftmaxVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "clusters", "=", "[", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "2", "\n", "}", ",", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "2", ",", "\n", "'length_projection_factor'", ":", "0.5", ",", "\n", "}", ",", "{", "\n", "'token_count'", ":", "2", ",", "\n", "'embedding_size'", ":", "1", ",", "\n", "'length_projection_factor'", ":", "1", ",", "\n", "}", "]", ")", "\n", "\n", "context", "=", "mock", ".", "MagicMock", "(", ")", "\n", "context", ".", "activation_dtype", "=", "tf", ".", "float32", "\n", "context", ".", "shared_params", "=", "{", "'embedding'", ":", "vocab_embedding", "}", "\n", "\n", "# Act.", "\n", "mtf_loss", "=", "adaptive_softmax", ".", "adaptive_softmax_loss_fn", "(", "\n", "decoder", ",", "context", ",", "mtf_hidden", ",", "mtf_targets", ",", "output_vocab_dim", "=", "None", ")", "\n", "lowering", ",", "loss", "=", "self", ".", "_export_to_tf_tensor", "(", "mtf_loss", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual_loss", ",", "=", "self", ".", "evaluate", "(", "[", "loss", "]", ")", "\n", "\n", "# Assert.", "\n", "def", "expected_head_loss", "(", "position", ",", "label", ")", ":", "\n", "      ", "factor", "=", "model_dim", ".", "size", "**", "-", "0.5", "\n", "logits", "=", "[", "\n", "factor", "*", "(", "1", "*", "position", "-", "6", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "2", "*", "position", "-", "7", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "3", "*", "position", "-", "8", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "4", "*", "position", "-", "9", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "5", "*", "position", "-", "10", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "]", "\n", "return", "_softmax_cross_entropy_with_logits", "(", "logits", ",", "label", ")", "\n", "\n", "", "expected_head_labels", "=", "[", "2", ",", "3", ",", "3", ",", "4", ",", "2", ",", "3", ",", "4", ",", "3", ",", "2", ",", "1", ",", "4", ",", "4", ",", "0", ",", "0", ",", "3", ",", "2", "]", "\n", "expected_head_loss", "=", "sum", "(", "\n", "expected_head_loss", "(", "position", ",", "expected_label", ")", "\n", "for", "position", ",", "expected_label", "in", "enumerate", "(", "expected_head_labels", ")", "\n", "if", "expected_label", ")", "\n", "\n", "def", "expected_tail_cluster_1_loss", "(", "position", ")", ":", "\n", "      ", "factor", "=", "model_dim", ".", "size", "**", "-", "0.5", "\n", "logits", "=", "[", "\n", "factor", "*", "(", "11", "*", "position", "-", "14", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "12", "*", "position", "-", "15", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "13", "*", "position", "-", "16", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "]", "\n", "first_token_in_cluster_id", "=", "3", "\n", "return", "_softmax_cross_entropy_with_logits", "(", "\n", "logits", ",", "targets_array", "[", "position", "]", "-", "first_token_in_cluster_id", ")", "\n", "\n", "", "expected_tail_cluster_1_loss", "=", "sum", "(", "[", "\n", "expected_tail_cluster_1_loss", "(", "position", "=", "1", ")", ",", "\n", "expected_tail_cluster_1_loss", "(", "position", "=", "2", ")", ",", "\n", "expected_tail_cluster_1_loss", "(", "position", "=", "5", ")", ",", "\n", "expected_tail_cluster_1_loss", "(", "position", "=", "7", ")", ",", "\n", "expected_tail_cluster_1_loss", "(", "position", "=", "14", ")", ",", "\n", "]", ")", "\n", "\n", "def", "expected_tail_cluster_2_loss", "(", "position", ")", ":", "\n", "      ", "factor", "=", "model_dim", ".", "size", "**", "-", "0.5", "\n", "logits", "=", "[", "\n", "factor", "*", "(", "17", "*", "19", "*", "position", "-", "17", "*", "20", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "factor", "*", "(", "18", "*", "19", "*", "position", "-", "18", "*", "20", "*", "(", "10", "+", "position", ")", ")", ",", "\n", "]", "\n", "first_token_in_cluster_id", "=", "6", "\n", "return", "_softmax_cross_entropy_with_logits", "(", "\n", "logits", ",", "targets_array", "[", "position", "]", "-", "first_token_in_cluster_id", ")", "\n", "\n", "", "expected_tail_cluster_2_loss", "=", "sum", "(", "[", "\n", "expected_tail_cluster_2_loss", "(", "position", "=", "3", ")", ",", "\n", "expected_tail_cluster_2_loss", "(", "position", "=", "6", ")", ",", "\n", "expected_tail_cluster_2_loss", "(", "position", "=", "10", ")", ",", "\n", "expected_tail_cluster_2_loss", "(", "position", "=", "11", ")", ",", "\n", "]", ")", "\n", "\n", "expected_loss", "=", "(", "\n", "expected_head_loss", "+", "expected_tail_cluster_1_loss", "+", "\n", "expected_tail_cluster_2_loss", ")", "\n", "\n", "self", ".", "assertAllClose", "(", "actual_loss", ",", "expected_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.test_hidden_to_logits_returnsHiddenDuringTraining": [[340, 377], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mock.MagicMock", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "adaptive_softmax_test.initialize_by_shape", "mesh_tensorflow.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding", "mesh_tensorflow.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding.hidden_to_logits", "adaptive_softmax_test.AdaptiveSoftmaxTest.assertEqual", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits"], ["", "def", "test_hidden_to_logits_returnsHiddenDuringTraining", "(", "self", ")", ":", "\n", "# Arrange.", "\n", "    ", "seq_len", "=", "2", "\n", "vocab_size", "=", "3", "\n", "model_size", "=", "2", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "context", "=", "mock", ".", "MagicMock", "(", ")", "\n", "context", ".", "activation_dtype", "=", "tf", ".", "float32", "\n", "context", ".", "mode", "=", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", "\n", "\n", "embeddings", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "2", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mtf_embeddings", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "embeddings", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", ",", "model_dim", "]", ")", ")", "\n", "\n", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "(", "3", ",", "2", ")", ":", "[", "[", "1", ",", "6", "]", ",", "[", "2", ",", "7", "]", ",", "[", "3", ",", "8", "]", "]", ",", "\n", "}", ")", "\n", "\n", "vocab_embedding", "=", "adaptive_softmax", ".", "AdaptiveSoftmaxVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "clusters", "=", "[", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "2", "\n", "}", "]", ")", "\n", "mtf_logits", "=", "vocab_embedding", ".", "hidden_to_logits", "(", "\n", "mtf_embeddings", ",", "context", "=", "context", ")", "\n", "\n", "self", ".", "assertEqual", "(", "mtf_logits", ",", "mtf_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.test_hidden_to_logits_returnsCorrectLogitsDuringEval": [[378, 455], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mock.MagicMock", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "adaptive_softmax_test.initialize_by_shape", "mesh_tensorflow.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding", "mesh_tensorflow.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding.hidden_to_logits", "adaptive_softmax_test.AdaptiveSoftmaxTest._export_to_tf_tensor", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "adaptive_softmax_test.AdaptiveSoftmaxTest.test_hidden_to_logits_returnsCorrectLogitsDuringEval.scaled_log_softmax"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest._export_to_tf_tensor"], ["", "def", "test_hidden_to_logits_returnsCorrectLogitsDuringEval", "(", "self", ")", ":", "\n", "# Arrange.", "\n", "    ", "seq_len", "=", "2", "\n", "vocab_size", "=", "8", "\n", "model_size", "=", "2", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "context", "=", "mock", ".", "MagicMock", "(", ")", "\n", "context", ".", "activation_dtype", "=", "tf", ".", "float32", "\n", "context", ".", "mode", "=", "tf_estimator", ".", "ModeKeys", ".", "EVAL", "\n", "\n", "embeddings", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "2", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mtf_embeddings", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "embeddings", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", ",", "model_dim", "]", ")", ")", "\n", "\n", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "(", "5", ",", "2", ")", ":", "[", "[", "1", ",", "6", "]", ",", "[", "2", ",", "7", "]", ",", "[", "3", ",", "8", "]", ",", "[", "4", ",", "9", "]", ",", "[", "5", ",", "10", "]", "]", ",", "\n", "(", "3", ",", "2", ")", ":", "[", "[", "11", ",", "14", "]", ",", "[", "12", ",", "15", "]", ",", "[", "13", ",", "16", "]", "]", ",", "\n", "(", "2", ",", "1", ")", ":", "[", "[", "17", ",", "18", "]", "]", ",", "\n", "(", "1", ",", "2", ")", ":", "[", "[", "19", "]", ",", "[", "20", "]", "]", ",", "\n", "}", ")", "\n", "\n", "vocab_embedding", "=", "adaptive_softmax", ".", "AdaptiveSoftmaxVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "clusters", "=", "[", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "2", "\n", "}", ",", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "2", ",", "\n", "'length_projection_factor'", ":", "0.5", ",", "\n", "}", ",", "{", "\n", "'token_count'", ":", "2", ",", "\n", "'embedding_size'", ":", "1", ",", "\n", "'length_projection_factor'", ":", "0.125", ",", "\n", "}", "]", ")", "\n", "\n", "# Act.", "\n", "mtf_logits", "=", "vocab_embedding", ".", "hidden_to_logits", "(", "\n", "mtf_embeddings", ",", "context", "=", "context", ")", "\n", "lowering", ",", "logits", "=", "self", ".", "_export_to_tf_tensor", "(", "mtf_logits", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual_logits", ",", "=", "self", ".", "evaluate", "(", "[", "logits", "]", ")", "\n", "\n", "# Assert.", "\n", "def", "scaled_log_softmax", "(", "a", ")", ":", "\n", "      ", "a", "=", "np", ".", "array", "(", "a", ",", "dtype", "=", "float", ")", "*", "model_dim", ".", "size", "**", "-", "0.5", "\n", "return", "_log_softmax", "(", "a", ")", "\n", "\n", "", "head_log_softmax1", "=", "scaled_log_softmax", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "head_log_softmax2", "=", "scaled_log_softmax", "(", "[", "2", "*", "6", ",", "2", "*", "7", ",", "2", "*", "8", ",", "2", "*", "9", ",", "2", "*", "10", "]", ")", "\n", "\n", "expected_logits", "=", "[", "\n", "np", ".", "concatenate", "(", "[", "\n", "head_log_softmax1", "[", ":", "3", "]", ",", "\n", "head_log_softmax1", "[", "3", "]", "+", "scaled_log_softmax", "(", "[", "11", ",", "12", ",", "13", "]", ")", ",", "\n", "head_log_softmax1", "[", "4", "]", "+", "scaled_log_softmax", "(", "[", "17", "*", "19", ",", "18", "*", "19", "]", ")", ",", "\n", "]", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "\n", "head_log_softmax2", "[", ":", "3", "]", ",", "\n", "head_log_softmax2", "[", "3", "]", "+", "scaled_log_softmax", "(", "[", "2", "*", "14", ",", "2", "*", "15", ",", "2", "*", "16", "]", ")", ",", "\n", "head_log_softmax2", "[", "4", "]", "+", "\n", "scaled_log_softmax", "(", "[", "2", "*", "17", "*", "20", ",", "2", "*", "18", "*", "20", "]", ")", ",", "\n", "]", ")", ",", "\n", "]", "\n", "\n", "self", ".", "assertAllClose", "(", "actual_logits", ",", "expected_logits", ",", "atol", "=", "5e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.test_ids_to_embedding_correctlyEmbeds": [[456, 503], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.constant", "mesh_tensorflow.import_tf_tensor", "adaptive_softmax_test.initialize_by_shape", "mesh_tensorflow.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding", "mesh_tensorflow.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding.ids_to_embedding", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.Lowering.export_to_tf_tensor", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "adaptive_softmax_test.AdaptiveSoftmaxTest.evaluate", "adaptive_softmax_test.AdaptiveSoftmaxTest.assertAllClose", "tensorflow.global_variables_initializer", "mesh_tensorflow.Lowering.copy_masters_to_slices", "mesh_tensorflow.Shape"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.ids_to_embedding", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.copy_masters_to_slices"], ["", "def", "test_ids_to_embedding_correctlyEmbeds", "(", "self", ")", ":", "\n", "    ", "seq_len", "=", "6", "\n", "vocab_size", "=", "5", "\n", "model_size", "=", "2", "\n", "\n", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "vocab_size", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "model_size", ")", "\n", "length_dim", "=", "mtf", ".", "Dimension", "(", "'length'", ",", "seq_len", ")", "\n", "\n", "ids", "=", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "0", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "mtf_ids", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "self", ".", "mesh", ",", "ids", ",", "shape", "=", "mtf", ".", "Shape", "(", "[", "length_dim", "]", ")", ")", "\n", "\n", "self", ".", "initializer_mock", ".", "side_effect", "=", "initialize_by_shape", "(", "{", "\n", "(", "3", ",", "2", ")", ":", "[", "[", "0", ",", "1", "]", ",", "[", "2", ",", "0", "]", ",", "[", "-", "1000", ",", "-", "4000", "]", "]", ",", "\n", "(", "3", ",", "1", ")", ":", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", "]", ",", "\n", "(", "1", ",", "2", ")", ":", "[", "[", "1", "]", ",", "[", "2", "]", "]", ",", "\n", "}", ")", "\n", "\n", "vocab_embedding", "=", "adaptive_softmax", ".", "AdaptiveSoftmaxVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "clusters", "=", "[", "{", "\n", "'token_count'", ":", "2", ",", "\n", "'embedding_size'", ":", "2", "\n", "}", ",", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "1", "\n", "}", "]", ")", "\n", "\n", "mtf_embedding", "=", "vocab_embedding", ".", "ids_to_embedding", "(", "mtf_ids", ",", "context", "=", "None", ")", "\n", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "shape", "=", "[", "]", ",", "layout", "=", "{", "}", ",", "devices", "=", "[", "''", "]", ")", "\n", "lowering", "=", "mtf", ".", "Lowering", "(", "self", ".", "graph", ",", "{", "self", ".", "mesh", ":", "mesh_impl", "}", ")", "\n", "actual_embedding", "=", "lowering", ".", "export_to_tf_tensor", "(", "mtf_embedding", ")", "\n", "\n", "self", ".", "evaluate", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "evaluate", "(", "lowering", ".", "copy_masters_to_slices", "(", ")", ")", "\n", "actual", ",", "=", "self", ".", "evaluate", "(", "[", "actual_embedding", "]", ")", "\n", "\n", "self", ".", "assertAllClose", "(", "actual", ",", "\n", "[", "[", "0", ",", "1", "]", ",", "[", "2", ",", "0", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "4", "]", ",", "[", "3", ",", "6", "]", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.test_constructor_tokenCountsDontSumToVocabSize_raisesValueError": [[504, 522], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "adaptive_softmax_test.AdaptiveSoftmaxTest.assertRaises", "mesh_tensorflow.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding"], "methods", ["None"], ["", "def", "test_constructor_tokenCountsDontSumToVocabSize_raisesValueError", "(", "self", ")", ":", "\n", "    ", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "5", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "2", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "adaptive_softmax", ".", "AdaptiveSoftmaxVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "clusters", "=", "[", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "2", "\n", "}", ",", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "1", "\n", "}", "]", ")", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.AdaptiveSoftmaxTest.test_constructor_projectFactorNotWithinZeroAndOne_raisesValueError": [[524, 540], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "adaptive_softmax_test.AdaptiveSoftmaxTest.assertRaises", "mesh_tensorflow.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding"], "methods", ["None"], ["", "", "def", "test_constructor_projectFactorNotWithinZeroAndOne_raisesValueError", "(", "self", ")", ":", "\n", "    ", "vocab_dim", "=", "mtf", ".", "Dimension", "(", "'vocab'", ",", "3", ")", "\n", "model_dim", "=", "mtf", ".", "Dimension", "(", "'model'", ",", "2", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "adaptive_softmax", ".", "AdaptiveSoftmaxVocabEmbedding", "(", "\n", "self", ".", "mesh", ",", "\n", "vocab_dim", ",", "\n", "output_dim", "=", "model_dim", ",", "\n", "variable_dtype", "=", "self", ".", "variable_dtype", ",", "\n", "name", "=", "'embedding'", ",", "\n", "ensemble_dim", "=", "None", ",", "\n", "clusters", "=", "[", "{", "\n", "'token_count'", ":", "3", ",", "\n", "'embedding_size'", ":", "2", ",", "\n", "'length_projection_factor'", ":", "1.1", ",", "\n", "}", "]", ")", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test.initialize_by_shape": [[31, 43], ["tuple", "tensorflow.reshape", "ValueError", "tensorflow.constant", "tuple"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["def", "initialize_by_shape", "(", "shape_to_value", ")", ":", "\n", "  ", "\"\"\"Create an initializer with values specified by tensor shape.\"\"\"", "\n", "\n", "def", "initialize", "(", "shape", ",", "dtype", ")", ":", "\n", "    ", "shape", "=", "tuple", "(", "shape", ")", "\n", "if", "shape", "not", "in", "shape_to_value", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'Shape {} not found in shape to value map.'", ".", "format", "(", "shape", ")", ")", "\n", "", "return", "tf", ".", "reshape", "(", "\n", "tf", ".", "constant", "(", "shape_to_value", "[", "tuple", "(", "shape", ")", "]", ",", "dtype", "=", "dtype", ")", ",", "shape", ")", "\n", "\n", "", "return", "initialize", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test._log_softmax": [[45, 48], ["scipy.special.logsumexp"], "function", ["None"], ["", "def", "_log_softmax", "(", "logits", ")", ":", "\n", "  ", "log_z", "=", "scipy", ".", "special", ".", "logsumexp", "(", "logits", ")", "\n", "return", "logits", "-", "log_z", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test._softmax_cross_entropy_with_logits": [[50, 54], ["numpy.zeros", "len", "numpy.sum", "adaptive_softmax_test._log_softmax"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax_test._log_softmax"], ["", "def", "_softmax_cross_entropy_with_logits", "(", "logits", ",", "target", ")", ":", "\n", "  ", "soft_target", "=", "np", ".", "zeros", "(", "len", "(", "logits", ")", ")", "\n", "soft_target", "[", "target", "]", "=", "1", "\n", "return", "-", "np", ".", "sum", "(", "_log_softmax", "(", "logits", ")", "*", "soft_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.TransformerLayer.call": [[85, 96], ["NotImplementedError"], "methods", ["None"], ["def", "call", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "    ", "\"\"\"Call the layer.\n\n    Args:\n      context: a Context\n      x: an input Tensor\n\n    Returns:\n      y: a Tensor\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.TransformerLayer.to_json": [[97, 99], ["json.dumps"], "methods", ["None"], ["", "def", "to_json", "(", "self", ")", ":", "\n", "    ", "return", "json", ".", "dumps", "(", "self", ",", "cls", "=", "json", ".", "JSONEncoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.TransformerLayer.set_name": [[100, 102], ["None"], "methods", ["None"], ["", "def", "set_name", "(", "self", ",", "name", ")", ":", "\n", "    ", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.TransformerLayer.name": [[103, 106], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "    ", "return", "getattr", "(", "self", ",", "\"_name\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.__init__": [[122, 239], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "mesh", ",", "\n", "batch_dims", ",", "\n", "length_dim", ",", "\n", "variable_dtype", ",", "\n", "beam_dim", "=", "None", ",", "\n", "mode", "=", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ",", "\n", "position", "=", "None", ",", "\n", "position_is_default", "=", "False", ",", "\n", "sequence_id", "=", "None", ",", "\n", "subsequence_id", "=", "None", ",", "\n", "states", "=", "None", ",", "\n", "new_states", "=", "None", ",", "\n", "losses", "=", "None", ",", "\n", "initial_position", "=", "None", ",", "\n", "layer_outputs", "=", "None", ",", "\n", "encoder_output", "=", "None", ",", "\n", "encoder_sequence_id", "=", "None", ",", "\n", "constant_states", "=", "None", ",", "\n", "shared_params", "=", "None", ",", "\n", "encoder_layer_outputs", "=", "None", ",", "\n", "write_priority", "=", "None", ",", "\n", "read_priority", "=", "None", ",", "\n", "inputs", "=", "None", ",", "\n", "encoder_inputs", "=", "None", ",", "\n", "num_microbatches", "=", "1", ")", ":", "\n", "    ", "\"\"\"Create a context.\n\n    Args:\n      model: a pointer back at the unitransformer object\n      mesh: a mtf.Mesh\n      batch_dims: a list of mtf.Dimension\n      length_dim: a mtf.Dimension\n      variable_dtype: a mtf.VariableDType\n      beam_dim: an optional mtf.Dimension (present in beam search)\n      mode: either a tf.estimator.ModeKeys or one of the following:\n        \"first_part\"\n        \"incremental\"\n      position: an optional Tensor - represents position in the sequence.\n        Passing None means that the position should be considered to be the\n        index in the Tensor (along length_dim).\n      position_is_default: a boolean - is the position equal to\n        mtf.range(mesh, length_dim, tf.int32).  This allows a shortcut in\n        embedding lookup, as we can just slice the embedding variable.\n      sequence_id: an optional int32 Tensor aligned with position - used to\n        separate out different sequences which have been concatenated\n        to form a single training example.  Also used to mark padding.\n        Id 0 is used for padding, and different positive values\n        are used for the different sequences.\n      subsequence_id: an optional int32 Tensor - used to represent multiple\n        targets corresponding to the same input. Should only be provided when\n        being called as a decoder. If provided, then position should line up\n        with this rather than sequence_id. The sequence_id will represent the\n        groups of sub-targets corresponding to each input.\n      states: an optional list of Tensors representing loop variables\n        (consumed in \"incremental\" mode)\n      new_states: an optional list of Tensors onto which to append the new\n         values of loop variables.\n         (produced in \"first_part\" and \"incremental\" modes)\n      losses: an optional list of Tensors onto which to append losses\n      initial_position: an optional Tensor (\"first_part\" mode)\n      layer_outputs: an optional list onto which to append layer outputs\n      encoder_output: an optional Tensor (output of the encoder stack)\n      encoder_sequence_id: an optional int32 Tensor (similar to sequence_id)\n        but aligned with the encoder output.\n      constant_states: an optional list of structures produced during\n        \"first_part\" mode and consumed during \"incremental\" mode.\n      shared_params: an optional dictionary which can be populated by\n        parameters that are shared between Transformers - e.g. between the\n        encoder and decoder Unitransformers in a Bitransformer.\n      encoder_layer_outputs: optional - readonly list of tensor activations when\n        decoding, one per each input layer + the embedding layer\n      write_priority: an optional Tensor\n        in self-attention, position a can see position b iff\n        read_priority[a] >= write_priority[b]\n      read_priority: an optional Tensor\n      inputs: an optional int32 Tensor with the input token ids\n      encoder_inputs: an optional int32 Tensor with the input token ids to the\n        encoder half of the Bitransformer of which this Unitransformer is the\n        decoder.\n      num_microbatches: integer - greater than one if the step has been\n        serialized into multiple microbatches to save memory.\n    \"\"\"", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "mesh", "=", "mesh", "\n", "self", ".", "batch_dims", "=", "batch_dims", "\n", "self", ".", "length_dim", "=", "length_dim", "\n", "self", ".", "variable_dtype", "=", "variable_dtype", "\n", "self", ".", "beam_dim", "=", "beam_dim", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "position", "=", "position", "\n", "self", ".", "position_is_default", "=", "position_is_default", "\n", "self", ".", "sequence_id", "=", "sequence_id", "\n", "self", ".", "subsequence_id", "=", "subsequence_id", "\n", "self", ".", "states", "=", "states", "\n", "self", ".", "new_states", "=", "new_states", "\n", "self", ".", "losses", "=", "losses", "\n", "self", ".", "initial_position", "=", "initial_position", "\n", "self", ".", "layer_outputs", "=", "layer_outputs", "\n", "if", "self", ".", "layer_outputs", "is", "None", ":", "\n", "      ", "self", ".", "layer_outputs", "=", "[", "]", "\n", "", "self", ".", "encoder_output", "=", "encoder_output", "\n", "self", ".", "encoder_sequence_id", "=", "encoder_sequence_id", "\n", "self", ".", "constant_states", "=", "constant_states", "\n", "self", ".", "next_constant_state", "=", "0", "\n", "self", ".", "shared_params", "=", "shared_params", "or", "{", "}", "\n", "self", ".", "layer_index", "=", "0", "\n", "self", ".", "encoder_layer_outputs", "=", "encoder_layer_outputs", "\n", "# put values here to share them between layers", "\n", "self", ".", "cache", "=", "{", "}", "\n", "self", ".", "write_priority", "=", "write_priority", "\n", "self", ".", "read_priority", "=", "read_priority", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "encoder_inputs", "=", "encoder_inputs", "\n", "self", ".", "num_microbatches", "=", "num_microbatches", "\n", "self", ".", "input_embeddings", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.train": [[240, 243], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "train", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.activation_dtype": [[244, 247], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "activation_dtype", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "variable_dtype", ".", "activation_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.encoder_length_dim": [[248, 253], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "encoder_length_dim", "(", "self", ")", ":", "\n", "    ", "ret", ",", "=", "[", "d", "for", "d", "in", "self", ".", "encoder_output", ".", "shape", ".", "dims", "\n", "if", "d", ".", "name", "==", "\"memory_length\"", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_states": [[254, 265], ["len", "len"], "methods", ["None"], ["", "def", "get_states", "(", "self", ",", "n", ")", ":", "\n", "    ", "\"\"\"Get the next n recurrent states.\n\n    Called by layers in \"incremental\" mode.\n\n    Args:\n      n: an integer\n    Returns:\n      a list of n Tensors\n    \"\"\"", "\n", "return", "self", ".", "states", "[", "len", "(", "self", ".", "new_states", ")", ":", "len", "(", "self", ".", "new_states", ")", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_new_states": [[266, 275], ["transformer.Context.new_states.extend"], "methods", ["None"], ["", "def", "record_new_states", "(", "self", ",", "new_states", ")", ":", "\n", "    ", "\"\"\"Record the new values of recurrent states.\n\n    Called by layers in \"first_part\" or \"incremental\" mode.\n\n    Args:\n      new_states: a list of Tensors\n    \"\"\"", "\n", "self", ".", "new_states", ".", "extend", "(", "new_states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.record_constant_state": [[276, 286], ["transformer.Context.constant_states.append"], "methods", ["None"], ["", "def", "record_constant_state", "(", "self", ",", "s", ")", ":", "\n", "    ", "\"\"\"Record state in \"first_part\" mode to be read in \"incremental\" mode.\n\n    This is to record state that is computed once and does not change\n    at every decoding step.\n\n    Args:\n      s: a structure\n    \"\"\"", "\n", "self", ".", "constant_states", ".", "append", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_constant_state": [[287, 296], ["None"], "methods", ["None"], ["", "def", "get_constant_state", "(", "self", ")", ":", "\n", "    ", "\"\"\"Read state that was written in \"first_part\" mode.\n\n    Returns:\n      a structure\n    \"\"\"", "\n", "ret", "=", "self", ".", "constant_states", "[", "self", ".", "next_constant_state", "]", "\n", "self", ".", "next_constant_state", "+=", "1", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.nonpadding": [[297, 307], ["mesh_tensorflow.cast", "mesh_tensorflow.not_equal"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal"], ["", "@", "property", "\n", "def", "nonpadding", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tensor with zeros in padding positions and ones elsewhere.\"\"\"", "\n", "if", "self", ".", "sequence_id", "is", "None", ":", "\n", "      ", "return", "None", "\n", "", "if", "self", ".", "sequence_id", "==", "1", ":", "\n", "      ", "return", "1", "\n", "", "else", ":", "\n", "      ", "return", "mtf", ".", "cast", "(", "\n", "mtf", ".", "not_equal", "(", "self", ".", "sequence_id", ",", "0", ")", ",", "self", ".", "activation_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Context.get_position": [[308, 313], ["mesh_tensorflow.range"], "methods", ["None"], ["", "", "def", "get_position", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "position_is_default", ":", "\n", "      ", "return", "mtf", ".", "range", "(", "self", ".", "mesh", ",", "self", ".", "length_dim", ",", "tf", ".", "int32", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "position", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.LayerStack.__init__": [[319, 385], ["ValueError", "transformer.LayerStack._legacy_init"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.LayerStack._legacy_init"], ["def", "__init__", "(", "self", ",", "\n", "layers", ",", "\n", "sublayers_initial", "=", "None", ",", "\n", "sublayers_per_layer", "=", "None", ",", "\n", "sublayers_final", "=", "None", ",", "\n", "dropout_rate", "=", "None", ",", "\n", "norm_epsilon", "=", "None", ",", "\n", "recompute_grads", "=", "False", ")", ":", "\n", "    ", "\"\"\"Create a LayerStack.\n\n    `layers` is a list of TransformerLayer objects representing the\n    building blocks of the transformer model, e.g.\n    transformer_layers.SelfAttention.\n\n    In addition, there are a bunch of other transformations which occur around\n    the layer body, and at the beginning and the end of the layer stack.  We\n    call these \"sublayers\".  They are configurable with the `sublayers_initial`,\n    `sublayers_per_layer`, and `sublayers_final` arguments, each of which takes\n    a list of sublayer functions.\n\n    Each of the sublayer functions has signature:\n      x, layer_stack, context -> y\n    where x is the input tensor and y is the output tensor.\n\n    The default sublayers specified in defaults.gin are:\n\n      transformer.LayerStack.sublayers_initial = [\n          @transformer.sublayer_dropout,\n      ]\n      transformer.LayerStack.sublayers_per_layer = [\n          @transformer.sublayer_rms_norm,\n          @transformer.sublayer_call_layer,\n          @transformer.sublayer_dropout,\n          @transformer.sublayer_residual,\n      ]\n      transformer.LayerStack.sublayers_final = [\n          @transformer.sublayer_rms_norm,\n          @transformer.sublayer_dropout,\n      ]\n\n    Refer to these as examples of how to write and call your own sublayer\n    functions.\n\n    `dropout_rate` and `norm_epsilon` should only be specified in a legacy mode,\n    for compatiblity with older checkpoints.\n\n    Args:\n      layers: a list of TransformerLayer\n      sublayers_initial: an optional list of sublayer functions\n      sublayers_per_layer: an optional list of sublayer functions\n      sublayers_final: an optional list of sublayer functions\n      dropout_rate: DEPRECATED - a floating-point number\n      norm_epsilon: DEPRECATED - a floating-point number\n      recompute_grads: a boolean\n    \"\"\"", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_recompute_grads", "=", "recompute_grads", "\n", "self", ".", "_sublayers_initial", "=", "sublayers_initial", "\n", "self", ".", "_sublayers_per_layer", "=", "sublayers_per_layer", "\n", "self", ".", "_sublayers_final", "=", "sublayers_final", "\n", "if", "(", "dropout_rate", "is", "not", "None", ")", "!=", "(", "norm_epsilon", "is", "not", "None", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"LayerStack.dropout_rate and LayerStack.norm_epsilon should either \"", "\n", "\"be both not None (legacy mode) or both None (normal mode)\"", ")", "\n", "", "if", "dropout_rate", "is", "not", "None", ":", "\n", "      ", "self", ".", "_legacy_init", "(", "dropout_rate", ",", "norm_epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.LayerStack._legacy_init": [[386, 409], ["tensorflow.logging.warning"], "methods", ["None"], ["", "", "def", "_legacy_init", "(", "self", ",", "dropout_rate", ",", "norm_epsilon", ")", ":", "\n", "    ", "\"\"\"Legacy initialization for use with old checkpoints.\n\n    dropout_rate and norm_epsilon are specified in LayerStack.\n    Custom sublayers are not specified.\n\n    Args:\n      dropout_rate: a float\n      norm_epsilon: a float\n    \"\"\"", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "norm_epsilon", "=", "norm_epsilon", "\n", "if", "(", "self", ".", "_sublayers_initial", "is", "not", "None", "or", "\n", "self", ".", "_sublayers_per_layer", "is", "not", "None", "or", "\n", "self", ".", "_sublayers_final", "is", "not", "None", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "warning", "(", "\"legacy mode - ignoring custom sublayers\"", ")", "\n", "", "self", ".", "_sublayers_initial", "=", "[", "sublayer_legacy_dropout", "]", "\n", "self", ".", "_sublayers_per_layer", "=", "[", "sublayer_legacy_rms_norm", ",", "\n", "sublayer_call_layer", ",", "\n", "sublayer_legacy_dropout", ",", "\n", "sublayer_residual", "]", "\n", "self", ".", "_sublayers_final", "=", "[", "sublayer_legacy_final_rms_norm", ",", "\n", "sublayer_legacy_dropout", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.LayerStack.call": [[410, 429], ["transformer.LayerStack._call_sublayers", "context.layer_outputs.append", "enumerate", "transformer.LayerStack._call_sublayers", "transformer.sublayer_mask_padding", "context.layer_outputs.append", "tensorflow.variable_scope", "context.layer_outputs.append", "mesh_tensorflow.recompute_grad", "transformer.LayerStack._layer_fn", "len", "transformer.LayerStack._layer_fn"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._call_sublayers", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._call_sublayers", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_mask_padding", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.recompute_grad", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._layer_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._layer_fn"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "    ", "\"\"\"Call the layer stack.\"\"\"", "\n", "x", "=", "self", ".", "_call_sublayers", "(", "self", ".", "_sublayers_initial", ",", "x", ",", "context", ")", "\n", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "for", "lnum", ",", "layer", "in", "enumerate", "(", "self", ".", "_layers", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "layer", ".", "name", "or", "\"\"", ")", ":", "\n", "        ", "if", "self", ".", "_recompute_grads", ":", "\n", "          ", "def", "fn", "(", "x", ",", "l", "=", "layer", ",", "c", "=", "context", ")", ":", "\n", "            ", "return", "self", ".", "_layer_fn", "(", "x", ",", "l", ",", "c", ")", "\n", "", "x", "=", "mtf", ".", "recompute_grad", "(", "fn", ",", "[", "x", "]", ")", "\n", "", "else", ":", "\n", "          ", "x", "=", "self", ".", "_layer_fn", "(", "x", ",", "layer", ",", "context", ")", "\n", "", "", "if", "lnum", "!=", "len", "(", "self", ".", "_layers", ")", "-", "1", ":", "\n", "        ", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "", "context", ".", "layer_index", "+=", "1", "\n", "", "x", "=", "self", ".", "_call_sublayers", "(", "self", ".", "_sublayers_final", ",", "x", ",", "context", ")", "\n", "x", "=", "sublayer_mask_padding", "(", "x", ",", "self", ",", "context", ")", "\n", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.LayerStack._call_sublayers": [[430, 434], ["s"], "methods", ["None"], ["", "def", "_call_sublayers", "(", "self", ",", "sublayers", ",", "x", ",", "context", ")", ":", "\n", "    ", "for", "s", "in", "sublayers", ":", "\n", "      ", "x", "=", "s", "(", "x", ",", "self", ",", "context", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.LayerStack._layer_fn": [[435, 453], ["transformer.LayerStack._call_sublayers", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._call_sublayers"], ["", "def", "_layer_fn", "(", "self", ",", "x", ",", "layer", ",", "context", ")", ":", "\n", "    ", "\"\"\"Call the layer and its associated sublayers.\n\n    Args:\n      x: a Tensor\n      layer: a Layer\n      context: a Context\n    Returns:\n      a Tensor\n    \"\"\"", "\n", "context", ".", "current_layer", "=", "layer", "\n", "context", ".", "current_layer_input", "=", "x", "\n", "y", "=", "self", ".", "_call_sublayers", "(", "self", ".", "_sublayers_per_layer", ",", "x", ",", "context", ")", "\n", "if", "y", ".", "shape", "!=", "x", ".", "shape", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Layer %s returned misshaped output x=%s y=%s\"", "\n", "%", "(", "layer", ".", "__class__", ".", "__name__", ",", "x", ",", "y", ")", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.LayerStack.num_layers": [[454, 457], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_layers", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.LayerStack.layers": [[458, 461], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "layers", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.ReversibleLayerStack.call": [[666, 686], ["transformer.ReversibleLayerStack._call_sublayers", "context.layer_outputs.append", "enumerate", "transformer.ReversibleLayerStack._call_sublayers", "context.layer_outputs.append", "tensorflow.variable_scope", "mesh_tensorflow.layers.reversible_half_residual_and_swap", "context.layer_outputs.append", "transformer.ReversibleLayerStack._layer_fn", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._call_sublayers", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._call_sublayers", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.reversible_half_residual_and_swap", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._layer_fn"], ["def", "call", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "    ", "\"\"\"Call the layer stack.\"\"\"", "\n", "x", "=", "self", ".", "_call_sublayers", "(", "self", ".", "_sublayers_initial", ",", "x", ",", "context", ")", "\n", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "x1", ",", "x1_backwards", ",", "x2", ",", "x2_backwards", "=", "x", ",", "None", ",", "x", ",", "None", "\n", "for", "lnum", ",", "layer", "in", "enumerate", "(", "self", ".", "_layers", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "layer", ".", "name", "or", "\"\"", ")", ":", "\n", "        ", "def", "fn", "(", "x", ",", "l", "=", "layer", ",", "c", "=", "context", ")", ":", "\n", "          ", "return", "self", ".", "_layer_fn", "(", "x", ",", "l", ",", "c", ")", "\n", "", "x1", ",", "x1_backwards", ",", "x2", ",", "x2_backwards", "=", "(", "\n", "mtf", ".", "layers", ".", "reversible_half_residual_and_swap", "(", "\n", "x1", ",", "x1_backwards", ",", "x2", ",", "x2_backwards", ",", "fn", ",", "\n", "recompute_grads", "=", "self", ".", "_recompute_grads", ")", ")", "\n", "", "if", "lnum", "!=", "len", "(", "self", ".", "_layers", ")", "-", "1", ":", "\n", "        ", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "", "context", ".", "layer_index", "+=", "1", "\n", "", "x", "=", "x1", "+", "x2", "\n", "x", "=", "self", ".", "_call_sublayers", "(", "self", ".", "_sublayers_final", ",", "x", ",", "context", ")", "\n", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.__init__": [[705, 811], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "transformer._round_up_to_multiple", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "ValueError", "transformer._round_up_to_multiple", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer._round_up_to_multiple", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer._round_up_to_multiple"], ["def", "__init__", "(", "self", ",", "\n", "layer_stack", ",", "\n", "d_model", "=", "1024", ",", "\n", "input_vocab_size", "=", "gin", ".", "REQUIRED", ",", "\n", "output_vocab_size", "=", "gin", ".", "REQUIRED", ",", "\n", "autoregressive", "=", "gin", ".", "REQUIRED", ",", "\n", "max_length", "=", "gin", ".", "REQUIRED", ",", "\n", "shared_embedding_and_softmax_weights", "=", "False", ",", "\n", "label_smoothing", "=", "0.0", ",", "\n", "z_loss", "=", "1e-4", ",", "\n", "name", "=", "\"transformer\"", ",", "\n", "layout", "=", "None", ",", "\n", "mesh_shape", "=", "None", ",", "\n", "vocab_divisor", "=", "128", ",", "\n", "ensemble", "=", "None", ",", "\n", "loss_fn", "=", "None", ",", "\n", "positional_embedding", "=", "True", ",", "\n", "sinusoid_positional_embedding", "=", "False", ",", "\n", "input_full_attention", "=", "False", ",", "\n", "loss_on_targets_only", "=", "False", ",", "\n", "loss_denominator", "=", "None", ",", "\n", "token_dropout_rate", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"Create a Unitransformer.\n\n    Args:\n      layer_stack: a LayerStack\n      d_model: an integer\n      input_vocab_size: an integer\n      output_vocab_size: an integer\n      autoregressive: a boolean\n      max_length: an integer\n      shared_embedding_and_softmax_weights: a boolean\n      label_smoothing: a float\n      z_loss: a float\n      name: a string\n      layout: optional - an input to mtf.convert_to_layout_rules\n        Some layers (e.g. MoE layers) cheat by looking at layout and mesh_shape\n      mesh_shape: optional - an input to mtf.convert_to_shape\n        Some layers (e.g. MoE layers) cheat by looking at layout and mesh_shape\n      vocab_divisor: an integer\n      ensemble: an optional integer (for creating an ensemble of models)\n      loss_fn: an optional function to override self._compute_loss\n      positional_embedding: a boolean\n      sinusoid_positional_embedding: a boolean, whether to use the sinusoid\n        positional embedding from the \"Attention Is All You Need\" paper. If\n        True, this will override the positional_embedding setting.\n      input_full_attention: a boolean\n        This is an option for seq-to-seq as a language model.  Each example\n        consists of [<inputs>, EOS=1, <targets>, EOS=1].  In the self-attention\n        layers, positions in the inputs portion of the sequence can see the\n        entire inputs portion, while positions in the targets portion of the\n        sequence cannot see future positions.\n      loss_on_targets_only: a boolean\n        This is an option for seq-to-seq as a language model.  Each example\n        consists of [<inputs>, EOS=1, <targets>, EOS=1].  We zero-out the\n        loss for the inputs portion of the example.\n      loss_denominator: an optional float.  The default behavior is to\n        compute the mean loss across all tokens in the batch, making the\n        denomiator the size of the targets tensor (omitting ensemble\n        dimensions).\n        Passing a float here provides an alternative denomiator.\n        One use case is that when fine-tuning a model using a much smaller\n        batch size than the original training batch, one might want to use the\n        same denominator as was used for the pretraining.  This complication\n        might be avoided by always using loss_denominator = 1.0.\n      token_dropout_rate: an optional floating point value\n    \"\"\"", "\n", "self", ".", "layer_stack", "=", "layer_stack", "\n", "self", ".", "model_dim", "=", "mtf", ".", "Dimension", "(", "\"d_model\"", ",", "d_model", ")", "\n", "self", ".", "input_vocab_size_unpadded", "=", "input_vocab_size", "\n", "self", ".", "input_vocab_dim", "=", "mtf", ".", "Dimension", "(", "\n", "\"vocab\"", ",", "_round_up_to_multiple", "(", "input_vocab_size", ",", "vocab_divisor", ")", ")", "\n", "self", ".", "output_vocab_size_unpadded", "=", "output_vocab_size", "\n", "if", "output_vocab_size", ":", "\n", "      ", "self", ".", "output_vocab_dim", "=", "mtf", ".", "Dimension", "(", "\n", "\"vocab\"", ",", "_round_up_to_multiple", "(", "output_vocab_size", ",", "vocab_divisor", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "output_vocab_dim", "=", "None", "\n", "if", "autoregressive", ":", "\n", "        ", "raise", "ValueError", "(", "\"autoregressive Transformer needs output vocabulary\"", ")", "\n", "", "", "self", ".", "autoregressive", "=", "autoregressive", "\n", "if", "sinusoid_positional_embedding", ":", "\n", "      ", "positional_embedding", "=", "True", "\n", "", "if", "positional_embedding", ":", "\n", "      ", "self", ".", "max_length_dim", "=", "mtf", ".", "Dimension", "(", "\"max_length\"", ",", "max_length", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "max_length_dim", "=", "None", "\n", "", "self", ".", "shared_embedding_and_softmax_weights", "=", "(", "\n", "shared_embedding_and_softmax_weights", ")", "\n", "self", ".", "label_smoothing", "=", "label_smoothing", "\n", "self", ".", "z_loss", "=", "z_loss", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "layout", "=", "layout", "\n", "self", ".", "mesh_shape", "=", "mesh_shape", "\n", "self", ".", "ensemble_dim", "=", "(", "\n", "mtf", ".", "Dimension", "(", "\"ensemble\"", ",", "ensemble", ")", "if", "ensemble", "else", "None", ")", "\n", "self", ".", "_loss_fn", "=", "loss_fn", "\n", "self", ".", "positional_embedding", "=", "positional_embedding", "\n", "self", ".", "sinusoid_positional_embedding", "=", "sinusoid_positional_embedding", "\n", "self", ".", "input_full_attention", "=", "input_full_attention", "\n", "self", ".", "loss_on_targets_only", "=", "loss_on_targets_only", "\n", "self", ".", "_loss_denominator", "=", "loss_denominator", "\n", "if", "self", ".", "input_full_attention", "and", "not", "self", ".", "autoregressive", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"input_full_attention only makes sense with autoregressive\"", ")", "\n", "", "self", ".", "token_dropout_rate", "=", "token_dropout_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.fully_autoregressive": [[812, 815], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "fully_autoregressive", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "autoregressive", "and", "not", "self", ".", "input_full_attention", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.ensemble_dims": [[816, 819], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ensemble_dims", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "ensemble_dim", "]", "if", "self", ".", "ensemble_dim", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer._compute_loss": [[820, 854], ["mesh_tensorflow.one_hot", "mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "mesh_tensorflow.cast", "transformer.Unitransformer._loss_fn", "mesh_tensorflow.maximum", "mesh_tensorflow.greater", "mesh_tensorflow.cast", "mesh_tensorflow.reduce_sum", "transformer.Unitransformer.loss_denominator", "mesh_tensorflow.logical_not", "transformer.delimited_lm_inputs_mask"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer.loss_denominator", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_not", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.delimited_lm_inputs_mask"], ["", "def", "_compute_loss", "(", "self", ",", "context", ",", "logits", ",", "targets", ",", "output_vocab_dim", ")", ":", "\n", "    ", "\"\"\"Regular cross entropy loss.\n\n    Args:\n      context: a Context\n      logits: a Tensor, the logits from the decoder\n      targets: an Tensor\n      output_vocab_dim: a Dimension\n\n    Returns:\n      A 0-dimensional tensor of the loss.\n    \"\"\"", "\n", "# Use a custom loss function if one is injected.", "\n", "if", "self", ".", "_loss_fn", ":", "\n", "      ", "return", "self", ".", "_loss_fn", "(", "self", ",", "context", ",", "logits", ",", "targets", ",", "output_vocab_dim", ")", "\n", "", "off_value", "=", "self", ".", "label_smoothing", "/", "output_vocab_dim", ".", "size", "\n", "on_value", "=", "1.0", "-", "self", ".", "label_smoothing", "+", "off_value", "\n", "soft_targets", "=", "mtf", ".", "one_hot", "(", "\n", "mtf", ".", "maximum", "(", "targets", ",", "0", ")", ",", "\n", "output_vocab_dim", ",", "\n", "dtype", "=", "context", ".", "activation_dtype", ",", "\n", "on_value", "=", "on_value", ",", "\n", "off_value", "=", "off_value", ")", "\n", "loss", "=", "mtf", ".", "layers", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", ",", "\n", "soft_targets", ",", "\n", "output_vocab_dim", ",", "\n", "z_loss", "=", "self", ".", "z_loss", "if", "context", ".", "train", "else", "0.0", ")", "\n", "weights", "=", "mtf", ".", "cast", "(", "mtf", ".", "greater", "(", "targets", ",", "0", ")", ",", "context", ".", "activation_dtype", ")", "\n", "if", "self", ".", "loss_on_targets_only", ":", "\n", "      ", "weights", "*=", "mtf", ".", "cast", "(", "mtf", ".", "logical_not", "(", "delimited_lm_inputs_mask", "(", "targets", ")", ")", ",", "\n", "dtype", "=", "context", ".", "activation_dtype", ")", "\n", "", "return", "(", "mtf", ".", "reduce_sum", "(", "loss", "*", "weights", ")", "/", "\n", "self", ".", "loss_denominator", "(", "targets", ",", "context", ".", "num_microbatches", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer._call_internal": [[855, 941], ["mesh_tensorflow.dropout", "vocab_embedding.ids_to_embedding", "transformer.Unitransformer.layer_stack.call", "mesh_tensorflow.broadcast", "vocab_embedding.hidden_to_logits", "mesh_tensorflow.layers.dense", "context.losses.append", "transformer.reduce_ensemble_logits", "mesh_tensorflow.broadcast", "transformer.get_vocab_embedding_cls", "transformer.sinusoid_positional_embedding_weights", "mesh_tensorflow.rename_dimension", "mesh_tensorflow.gather", "transformer.Unitransformer._compute_loss", "mesh_tensorflow.layers.embedding_weights", "ValueError", "tensorflow.logging.warning", "mesh_tensorflow.slice"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.ids_to_embedding", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.broadcast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.reduce_ensemble_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.broadcast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.get_vocab_embedding_cls", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sinusoid_positional_embedding_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer._compute_loss", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice"], ["", "def", "_call_internal", "(", "self", ",", "context", ",", "inputs", ",", "targets", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute logits based on inputs (all positions in parallel).\n\n    Also updates context if applicable.\n\n    Args:\n      context: a Context\n      inputs: a Tensor\n      targets: an optional Tensor\n\n    Returns:\n      logits: a Tensor with shape [<batch_dims>, length_dim, output_vocab_dim]\n    \"\"\"", "\n", "mesh", "=", "inputs", ".", "mesh", "\n", "if", "self", ".", "ensemble_dim", "and", "self", ".", "ensemble_dim", "not", "in", "inputs", ".", "shape", ".", "dims", ":", "\n", "# Training an ensemble where all models are trained on the same examples.", "\n", "      ", "inputs", "=", "mtf", ".", "broadcast", "(", "inputs", ",", "[", "self", ".", "ensemble_dim", "]", "+", "inputs", ".", "shape", ".", "dims", ")", "\n", "if", "targets", ":", "\n", "        ", "targets", "=", "mtf", ".", "broadcast", "(", "\n", "targets", ",", "[", "self", ".", "ensemble_dim", "]", "+", "targets", ".", "shape", ".", "dims", ")", "\n", "", "", "if", "\"embedding\"", "in", "context", ".", "shared_params", ":", "\n", "      ", "vocab_embedding", "=", "context", ".", "shared_params", "[", "\"embedding\"", "]", "\n", "", "else", ":", "\n", "      ", "vocab_embedding", "=", "get_vocab_embedding_cls", "(", ")", "(", "\n", "mesh", ",", "\n", "self", ".", "input_vocab_dim", ",", "\n", "self", ".", "model_dim", ",", "\n", "context", ".", "variable_dtype", ",", "\n", "name", "=", "\"embedding\"", ",", "\n", "ensemble_dim", "=", "self", ".", "ensemble_dim", ")", "\n", "", "inputs", "=", "mtf", ".", "dropout", "(", "inputs", ",", "context", ".", "train", ",", "rate", "=", "self", ".", "token_dropout_rate", ")", "\n", "x", "=", "vocab_embedding", ".", "ids_to_embedding", "(", "inputs", ",", "context", ")", "\n", "context", ".", "input_embeddings", "=", "x", "\n", "if", "self", ".", "positional_embedding", "or", "self", ".", "sinusoid_positional_embedding", ":", "\n", "      ", "if", "self", ".", "sinusoid_positional_embedding", ":", "\n", "        ", "pos_emb_var", "=", "sinusoid_positional_embedding_weights", "(", "\n", "mesh", ",", "self", ".", "max_length_dim", ",", "self", ".", "model_dim", ",", "\n", "context", ".", "variable_dtype", ".", "activation_dtype", ")", "\n", "", "elif", "\"positional_embedding\"", "in", "context", ".", "shared_params", ":", "\n", "        ", "pos_emb_var", "=", "context", ".", "shared_params", "[", "\"positional_embedding\"", "]", "\n", "", "else", ":", "\n", "        ", "pos_emb_var", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "mesh", ",", "self", ".", "max_length_dim", ",", "self", ".", "model_dim", ",", "context", ".", "variable_dtype", ",", "\n", "\"positional_embedding\"", ",", "ensemble_dim", "=", "self", ".", "ensemble_dim", ")", "\n", "", "if", "(", "context", ".", "length_dim", "is", "not", "None", "and", "\n", "context", ".", "length_dim", ".", "size", ">", "self", ".", "max_length_dim", ".", "size", ")", ":", "\n", "        ", "message", "=", "(", "\n", "\"Length dimenison exceeds size of positional embedding table. \"", "\n", "\"length_dim.size > max_length_dim.size %s vs %s.\"", "\n", "%", "(", "context", ".", "length_dim", ",", "self", ".", "max_length_dim", ")", ")", "\n", "if", "context", ".", "position_is_default", ":", "\n", "# Definitely getting overflow in this case.", "\n", "          ", "raise", "ValueError", "(", "message", ")", "\n", "", "else", ":", "\n", "          ", "tf", ".", "logging", ".", "warning", "(", "\n", "message", "+", "\n", "\" This may be OK if there are several shorter sequences packed \"", "\n", "\"together.  Otherwise, the later positions will get zeros.\"", ")", "\n", "", "", "if", "context", ".", "position_is_default", ":", "\n", "        ", "pos_emb", "=", "mtf", ".", "rename_dimension", "(", "\n", "mtf", ".", "slice", "(", "pos_emb_var", ",", "0", ",", "context", ".", "length_dim", ".", "size", ",", "\n", "self", ".", "max_length_dim", ".", "name", ")", ",", "\n", "self", ".", "max_length_dim", ".", "name", ",", "context", ".", "length_dim", ".", "name", ")", "\n", "", "else", ":", "\n", "        ", "pos_emb", "=", "mtf", ".", "gather", "(", "\n", "pos_emb_var", ",", "context", ".", "position", ",", "self", ".", "max_length_dim", ",", "\n", "output_shape", "=", "x", ".", "shape", ")", "\n", "", "x", "+=", "pos_emb", "\n", "", "x", "=", "self", ".", "layer_stack", ".", "call", "(", "context", ",", "x", ")", "\n", "if", "self", ".", "output_vocab_dim", "is", "None", ":", "\n", "      ", "return", "x", "\n", "", "if", "self", ".", "shared_embedding_and_softmax_weights", ":", "\n", "      ", "logits", "=", "vocab_embedding", ".", "hidden_to_logits", "(", "x", ",", "context", ")", "\n", "", "else", ":", "\n", "      ", "logits", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "self", ".", "output_vocab_dim", ",", "use_bias", "=", "False", ",", "\n", "variable_dtype", "=", "context", ".", "variable_dtype", ",", "\n", "reduced_dims", "=", "x", ".", "shape", ".", "dims", "[", "-", "1", ":", "]", ",", "\n", "name", "=", "\"logits\"", ")", "\n", "", "if", "targets", "is", "not", "None", "and", "context", ".", "losses", "is", "not", "None", ":", "\n", "      ", "context", ".", "losses", ".", "append", "(", "\n", "self", ".", "_compute_loss", "(", "context", ",", "logits", ",", "targets", ",", "self", ".", "output_vocab_dim", ")", ")", "\n", "", "if", "self", ".", "ensemble_dim", ":", "\n", "      ", "logits", "=", "reduce_ensemble_logits", "(", "\n", "logits", ",", "self", ".", "ensemble_dim", ",", "self", ".", "output_vocab_dim", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.loss_denominator": [[942, 965], ["float", "tensorflow.logging.info", "float", "float"], "methods", ["None"], ["", "def", "loss_denominator", "(", "self", ",", "targets", ",", "num_microbatches", ")", ":", "\n", "    ", "\"\"\"Denominator applied to losses.\n\n    This is usually the size of the targets tensor (omitting ensemble\n    dimensions).  Alternatively, it is an override value passed to the\n    class constructor.\n\n    Args:\n      targets: a mtf.Tensor\n      num_microbatches: an integer - greater than one if the step has been\n        serialized into multiple microbatches to save memory.\n    Returns:\n      a float\n    \"\"\"", "\n", "if", "self", ".", "_loss_denominator", "is", "not", "None", ":", "\n", "      ", "return", "float", "(", "self", ".", "_loss_denominator", ")", "\n", "", "else", ":", "\n", "      ", "ret", "=", "float", "(", "targets", ".", "shape", ".", "size", ")", "*", "num_microbatches", "\n", "if", "self", ".", "ensemble_dim", ":", "\n", "# The ensembling should not decrease the gradient to each model", "\n", "        ", "ret", "/=", "self", ".", "ensemble_dim", ".", "size", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"loss denominator: %d\"", "%", "ret", ")", "\n", "return", "float", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.call_simple": [[966, 1073], ["mesh_tensorflow.VariableDType", "mesh_tensorflow.range", "transformer.Context", "transformer.delimited_lm_inputs_mask", "mesh_tensorflow.logical_or", "tensorflow.variable_scope", "transformer.Unitransformer._call_internal", "mesh_tensorflow.add_n", "mesh_tensorflow.shift", "mesh_tensorflow.cast", "mesh_tensorflow.logical_not"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.delimited_lm_inputs_mask", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_or", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer._call_internal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_not"], ["", "", "def", "call_simple", "(", "self", ",", "\n", "inputs", ",", "\n", "targets", ",", "\n", "compute_loss", ",", "\n", "mode", "=", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ",", "\n", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "tf", ".", "float32", ")", ",", "\n", "sequence_id", "=", "None", ",", "\n", "subsequence_id", "=", "None", ",", "\n", "position", "=", "None", ",", "\n", "encoder_output", "=", "None", ",", "\n", "encoder_sequence_id", "=", "None", ",", "\n", "encoder_inputs", "=", "None", ",", "\n", "shared_params", "=", "None", ",", "\n", "layer_outputs", "=", "None", ",", "\n", "encoder_layer_outputs", "=", "None", ",", "\n", "num_microbatches", "=", "1", ")", ":", "\n", "    ", "\"\"\"Compute logits based on inputs (all positions in parallel).\n\n    This is called during training and evaluation.\n\n    Args:\n      inputs: an int32 Tensor with shape [<batch_dims>, length_dim] For training\n        autoregressive models this should be equal to\n        autoregressive_inputs(targets, sequence_id).\n      targets: an optional int32 Tensor with shape [<batch_dims>, length_dim]\n      compute_loss: a boolean\n      mode: a tf.estimator.ModeKeys\n      variable_dtype: a mtf.VariableDType\n      sequence_id: an optional Tensor\n      subsequence_id: an optional Tensor\n      position: an optional Tensor\n      encoder_output: an optional Tensor\n      encoder_sequence_id: an optional Tensor\n      encoder_inputs: an optional Tensor\n      shared_params: an optional dictionary\n      layer_outputs: an optional list to append Tensor layer activations to\n      encoder_layer_outputs: optional - readonly list of tensor activations when\n        decoding, one per each input layer + the embedding layer\n      num_microbatches: integer - greater than one if the step has been\n        serialized into multiple microbatches to save memory.\n\n    Returns:\n      logits: a Tensor with shape [<batch_dims>, output_vocab_dim]\n      loss: an optional Scalar (if compute_loss=True)\n    \"\"\"", "\n", "batch_dims", "=", "inputs", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "\n", "length_dim", "=", "inputs", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "length_range", "=", "mtf", ".", "range", "(", "inputs", ".", "mesh", ",", "length_dim", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "if", "not", "self", ".", "positional_embedding", ":", "\n", "# To make relative attention faster, we drop the information about the", "\n", "#   position in the subsequence.  The relative attention code then", "\n", "#   assumes that the positions are given by index in the tensor,", "\n", "#   which still leads to the correct computation of relative position.", "\n", "      ", "position", "=", "None", "\n", "", "if", "position", "is", "None", ":", "\n", "      ", "position_is_default", "=", "True", "\n", "position", "=", "length_range", "\n", "", "else", ":", "\n", "      ", "position_is_default", "=", "False", "\n", "", "if", "self", ".", "input_full_attention", ":", "\n", "# The inputs part of each sequence can fully attend within itself.", "\n", "      ", "full_attention_region", "=", "delimited_lm_inputs_mask", "(", "targets", ")", "\n", "# We can include one additional position to the right - the position", "\n", "#   where the final EOS of the inputs is read and the first target token", "\n", "#   is predicted.", "\n", "full_attention_region", "=", "mtf", ".", "logical_or", "(", "\n", "full_attention_region", ",", "\n", "mtf", ".", "shift", "(", "full_attention_region", ",", "offset", "=", "1", ",", "dim", "=", "length_dim", ",", "wrap", "=", "False", ")", "\n", ")", "\n", "# We set read_priority and write_priority to 0 in the full-attention", "\n", "#   region and equal to the position elsewhere.", "\n", "read_priority", "=", "write_priority", "=", "length_range", "*", "mtf", ".", "cast", "(", "\n", "mtf", ".", "logical_not", "(", "full_attention_region", ")", ",", "tf", ".", "int32", ")", "\n", "", "elif", "self", ".", "autoregressive", ":", "\n", "# Vanilla autoregressive model - each position can see previous positions.", "\n", "      ", "read_priority", "=", "write_priority", "=", "length_range", "\n", "", "else", ":", "\n", "      ", "read_priority", "=", "write_priority", "=", "None", "\n", "", "context", "=", "Context", "(", "\n", "model", "=", "self", ",", "\n", "mesh", "=", "inputs", ".", "mesh", ",", "\n", "batch_dims", "=", "batch_dims", ",", "\n", "length_dim", "=", "length_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "mode", "=", "mode", ",", "\n", "losses", "=", "[", "]", "if", "compute_loss", "else", "None", ",", "\n", "sequence_id", "=", "sequence_id", ",", "\n", "subsequence_id", "=", "subsequence_id", ",", "\n", "position", "=", "position", ",", "\n", "position_is_default", "=", "position_is_default", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_sequence_id", "=", "encoder_sequence_id", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "layer_outputs", "=", "layer_outputs", ",", "\n", "encoder_layer_outputs", "=", "encoder_layer_outputs", ",", "\n", "write_priority", "=", "write_priority", ",", "\n", "read_priority", "=", "read_priority", ",", "\n", "inputs", "=", "inputs", ",", "\n", "encoder_inputs", "=", "encoder_inputs", ",", "\n", "num_microbatches", "=", "num_microbatches", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "      ", "logits", "=", "self", ".", "_call_internal", "(", "context", ",", "inputs", ",", "targets", ")", "\n", "", "if", "compute_loss", ":", "\n", "      ", "loss", "=", "mtf", ".", "add_n", "(", "context", ".", "losses", ")", "\n", "", "else", ":", "\n", "      ", "loss", "=", "None", "\n", "", "return", "logits", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.sample_autoregressive": [[1074, 1264], ["gin.configurable", "mesh_tensorflow.VariableDType", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.range", "transformer.Context", "transformer.autoregressive_inputs", "ValueError", "mesh_tensorflow.to_int32", "tensorflow.variable_scope", "transformer.Unitransformer._call_internal", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.greater_equal", "mesh_tensorflow.reduce_all", "mesh_tensorflow.logical_not", "mesh_tensorflow.gather", "transformer.Context", "mesh_tensorflow.sample_with_temperature", "mesh_tensorflow.while_loop", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.dynamic_shift", "mesh_tensorflow.not_equal", "mesh_tensorflow.to_int32", "mesh_tensorflow.zeros_like", "mesh_tensorflow.to_int32", "mesh_tensorflow.logical_or", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.greater", "mesh_tensorflow.logical_or", "tensorflow.variable_scope", "transformer.Unitransformer._call_internal", "mesh_tensorflow.nth_largest_element", "mesh_tensorflow.where", "mesh_tensorflow.to_int32", "mesh_tensorflow.greater", "mesh_tensorflow.equal", "mesh_tensorflow.greater_equal", "mesh_tensorflow.to_int32", "mesh_tensorflow.cast", "mesh_tensorflow.one_hot", "ValueError", "mesh_tensorflow.less_equal", "mesh_tensorflow.one_hot", "mesh_tensorflow.not_equal", "mesh_tensorflow.equal", "mesh_tensorflow.ones_like", "mesh_tensorflow.equal", "mesh_tensorflow.constant", "mesh_tensorflow.ones_like"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.autoregressive_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer._call_internal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_all", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_not", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sample_with_temperature", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.while_loop", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dynamic_shift", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_or", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_or", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer._call_internal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.nth_largest_element", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones_like", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones_like"], ["", "@", "gin", ".", "configurable", "(", "module", "=", "\"Unitransformer\"", ")", "\n", "def", "sample_autoregressive", "(", "self", ",", "\n", "partial_sequences", ",", "\n", "stop_at_token", "=", "1", ",", "\n", "max_steps", "=", "None", ",", "\n", "temperature", "=", "0.0", ",", "\n", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "tf", ".", "float32", ")", ",", "\n", "encoder_output", "=", "None", ",", "\n", "encoder_sequence_id", "=", "None", ",", "\n", "encoder_inputs", "=", "None", ",", "\n", "shared_params", "=", "None", ",", "\n", "has_partial_sequences", "=", "True", ",", "\n", "encoder_layer_outputs", "=", "None", ",", "\n", "never_end", "=", "False", ",", "\n", "remove_partial_sequences", "=", "False", ",", "\n", "sampling_keep_top_k", "=", "-", "1", ",", "\n", "bos_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"Sample randomly one token at a time.\n\n    The partial_sequences represent partial sequences to be continued.  The\n    first tokens of each sequence are nonzero representing the given partial\n    sequences and the last tokens of each sequence are zeros, representing what\n    needs to be filled in.\n\n    If there are no partial sequences (you want to sample from the beginning),\n    then pass partial_sequences=mtf.zeros(mesh, shape, dtype=tf.int32) and\n    has_partial_sequences=False (so we can skip computation).\n\n    Args:\n      partial_sequences: an int32 Tensor with shape [<batch_dims>, length_dim]\n      stop_at_token: an optional integer eos id.  Stop when we produce it.\n      max_steps: an optional integer, the max number of steps to decode.\n      temperature: an optional floating point value between 0.0 and 1.0 0.0\n        means argmax, 1.0 means sample according to predicted distribution.\n      variable_dtype: a mtf.VariableDType\n      encoder_output: an optional Tensor\n      encoder_sequence_id: an optional Tensor\n      encoder_inputs: an optional Tensor\n      shared_params: an optional dictionary\n      has_partial_sequences: a boolean\n      encoder_layer_outputs: optional - readonly list of tensor activations when\n        decoding, one per each input layer + the embedding layer\n      never_end: a boolean - if set, then avoid generating stop_at_token\n      remove_partial_sequences: a boolean - whether to remove the partial\n        sequences from the output\n      sampling_keep_top_k: an integer - if not -1, only sample from the top k\n        logits.\n      bos_id: beginning of sequence id\n\n    Returns:\n      a Tensor with shape [<batch_dims>, length_dim]\n    \"\"\"", "\n", "if", "not", "self", ".", "autoregressive", ":", "\n", "      ", "raise", "ValueError", "(", "\"must be autoregressive\"", ")", "\n", "\n", "", "inputs", "=", "partial_sequences", "\n", "batch_dims", "=", "inputs", ".", "shape", ".", "dims", "[", ":", "-", "1", "]", "\n", "length_dim", "=", "inputs", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "initial_position", "=", "mtf", ".", "reduce_sum", "(", "\n", "mtf", ".", "to_int32", "(", "mtf", ".", "not_equal", "(", "inputs", ",", "0", ")", ")", ",", "reduced_dim", "=", "length_dim", ")", "\n", "sequence_id", "=", "1", "if", "encoder_sequence_id", "is", "not", "None", "else", "None", "\n", "\n", "length_range", "=", "mtf", ".", "range", "(", "inputs", ".", "mesh", ",", "length_dim", ",", "tf", ".", "int32", ")", "\n", "if", "self", ".", "input_full_attention", ":", "\n", "      ", "read_priority", "=", "write_priority", "=", "length_range", "*", "mtf", ".", "to_int32", "(", "\n", "mtf", ".", "greater", "(", "length_range", ",", "initial_position", ")", ")", "\n", "", "else", ":", "\n", "      ", "read_priority", "=", "write_priority", "=", "length_range", "\n", "\n", "", "context_first_part", "=", "Context", "(", "\n", "model", "=", "self", ",", "\n", "mesh", "=", "inputs", ".", "mesh", ",", "\n", "batch_dims", "=", "batch_dims", ",", "\n", "length_dim", "=", "length_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "mode", "=", "\"first_part\"", ",", "\n", "position", "=", "length_range", ",", "\n", "position_is_default", "=", "True", ",", "\n", "new_states", "=", "[", "]", ",", "\n", "initial_position", "=", "initial_position", ",", "\n", "sequence_id", "=", "sequence_id", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_sequence_id", "=", "encoder_sequence_id", ",", "\n", "constant_states", "=", "[", "]", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "encoder_layer_outputs", "=", "encoder_layer_outputs", ",", "\n", "write_priority", "=", "write_priority", ",", "\n", "read_priority", "=", "read_priority", ",", "\n", "inputs", "=", "inputs", ",", "\n", "encoder_inputs", "=", "encoder_inputs", ")", "\n", "\n", "shifted_inputs", "=", "autoregressive_inputs", "(", "inputs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "      ", "logits", "=", "self", ".", "_call_internal", "(", "context_first_part", ",", "shifted_inputs", ")", "\n", "", "del", "logits", "\n", "constant_states", "=", "context_first_part", ".", "constant_states", "\n", "if", "not", "has_partial_sequences", ":", "\n", "      ", "initial_states", "=", "[", "\n", "mtf", ".", "zeros_like", "(", "t", ")", "for", "t", "in", "context_first_part", ".", "new_states", "]", "\n", "partial_sequences_eos_count", "=", "0", "\n", "", "else", ":", "\n", "      ", "initial_states", "=", "context_first_part", ".", "new_states", "\n", "partial_sequences_eos_count", "=", "mtf", ".", "reduce_sum", "(", "\n", "mtf", ".", "to_int32", "(", "mtf", ".", "equal", "(", "partial_sequences", ",", "stop_at_token", ")", ")", ",", "\n", "reduced_dim", "=", "length_dim", ")", "\n", "\n", "", "def", "cond_fn", "(", "position", ",", "ids", ",", "*", "unused_states", ")", ":", "\n", "      ", "\"\"\"Should we run another loop iteration.\"\"\"", "\n", "past_end", "=", "mtf", ".", "greater_equal", "(", "position", ",", "length_dim", ".", "size", ")", "\n", "if", "max_steps", ":", "\n", "        ", "past_end", "=", "mtf", ".", "logical_or", "(", "\n", "past_end", ",", "mtf", ".", "greater_equal", "(", "position", "-", "initial_position", ",", "max_steps", ")", ")", "\n", "\n", "", "is_done", "=", "past_end", "\n", "if", "stop_at_token", "is", "not", "None", ":", "\n", "        ", "eos_count", "=", "mtf", ".", "reduce_sum", "(", "\n", "mtf", ".", "to_int32", "(", "mtf", ".", "equal", "(", "ids", ",", "stop_at_token", ")", ")", ",", "\n", "reduced_dim", "=", "length_dim", ")", "\n", "has_additional_eos", "=", "mtf", ".", "greater", "(", "eos_count", ",", "partial_sequences_eos_count", ")", "\n", "is_done", "=", "mtf", ".", "logical_or", "(", "is_done", ",", "has_additional_eos", ")", "\n", "", "all_done", "=", "mtf", ".", "reduce_all", "(", "is_done", ")", "\n", "return", "mtf", ".", "logical_not", "(", "all_done", ")", "\n", "\n", "", "def", "body_fn", "(", "position", ",", "ids", ",", "*", "states", ")", ":", "\n", "      ", "\"\"\"One step in the decode loop.\"\"\"", "\n", "inputs_this_step", "=", "mtf", ".", "gather", "(", "ids", ",", "position", "-", "1", ",", "length_dim", ")", "\n", "# Setting proper bos_id for position == 0. No-op otherwise.", "\n", "if", "bos_id", ":", "\n", "        ", "inputs_this_step", "+=", "bos_id", "*", "mtf", ".", "ones_like", "(", "inputs_this_step", ")", "*", "mtf", ".", "cast", "(", "\n", "mtf", ".", "equal", "(", "position", ",", "0", ")", ",", "tf", ".", "int32", ")", "\n", "", "context_incremental", "=", "Context", "(", "\n", "model", "=", "self", ",", "\n", "mesh", "=", "inputs", ".", "mesh", ",", "\n", "batch_dims", "=", "batch_dims", ",", "\n", "length_dim", "=", "length_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "mode", "=", "\"incremental\"", ",", "\n", "position", "=", "position", ",", "\n", "states", "=", "states", ",", "\n", "new_states", "=", "[", "]", ",", "\n", "sequence_id", "=", "sequence_id", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_sequence_id", "=", "encoder_sequence_id", ",", "\n", "constant_states", "=", "constant_states", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "encoder_layer_outputs", "=", "encoder_layer_outputs", ",", "\n", "write_priority", "=", "write_priority", ",", "\n", "read_priority", "=", "position", ",", "\n", "inputs", "=", "inputs_this_step", ",", "\n", "encoder_inputs", "=", "encoder_inputs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "reuse", "=", "True", ")", ":", "\n", "        ", "logits", "=", "self", ".", "_call_internal", "(", "context_incremental", ",", "inputs_this_step", ")", "\n", "if", "never_end", ":", "\n", "          ", "logits", "+=", "mtf", ".", "one_hot", "(", "\n", "mtf", ".", "constant", "(", "logits", ".", "mesh", ",", "stop_at_token", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "self", ".", "output_vocab_dim", ",", "on_value", "=", "-", "1e9", ",", "off_value", "=", "0.0", ",", "\n", "dtype", "=", "logits", ".", "dtype", ")", "\n", "\n", "# TBD whether this should be before or after never_end:", "\n", "# Note for adding top_p sampling in the future, in other code bases, the", "\n", "# option to apply temperature is done before the top-k truncation. This", "\n", "# implementation does this in the opposite order. For top-k this doesn't", "\n", "# matter, but for top_p it will.", "\n", "", "", "if", "sampling_keep_top_k", "!=", "-", "1", ":", "\n", "        ", "if", "sampling_keep_top_k", "<=", "0", ":", "\n", "          ", "raise", "ValueError", "(", "\"sampling_keep_top_k must either be -1 or positive.\"", ")", "\n", "", "k_largest", "=", "mtf", ".", "nth_largest_element", "(", "\n", "logits", ",", "n", "=", "sampling_keep_top_k", ",", "\n", "reduced_dim", "=", "self", ".", "output_vocab_dim", ")", "\n", "logits", "=", "mtf", ".", "where", "(", "mtf", ".", "less_equal", "(", "logits", ",", "k_largest", ")", ",", "\n", "mtf", ".", "ones_like", "(", "logits", ")", "*", "-", "1e6", ",", "logits", ")", "\n", "\n", "", "ids_this_step", "=", "mtf", ".", "sample_with_temperature", "(", "\n", "logits", ",", "self", ".", "output_vocab_dim", ",", "temperature", ")", "\n", "new_position", "=", "position", "+", "1", "\n", "new_ids", "=", "ids", "+", "ids_this_step", "*", "mtf", ".", "one_hot", "(", "\n", "position", ",", "length_dim", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "return", "[", "new_position", ",", "new_ids", "]", "+", "context_incremental", ".", "new_states", "\n", "", "while_loop_inputs", "=", "[", "initial_position", ",", "inputs", "]", "+", "initial_states", "\n", "final_position", ",", "outputs", "=", "mtf", ".", "while_loop", "(", "\n", "cond_fn", ",", "body_fn", ",", "while_loop_inputs", ")", "[", ":", "2", "]", "\n", "del", "final_position", "\n", "if", "has_partial_sequences", "and", "remove_partial_sequences", ":", "\n", "# remove partial sequences from outputs", "\n", "      ", "partial_length", "=", "mtf", ".", "reduce_sum", "(", "\n", "mtf", ".", "to_int32", "(", "mtf", ".", "not_equal", "(", "partial_sequences", ",", "0", ")", ")", ",", "\n", "reduced_dim", "=", "length_dim", ")", "\n", "outputs", "=", "mtf", ".", "dynamic_shift", "(", "\n", "outputs", ",", "-", "partial_length", ",", "length_dim", ",", "wrap", "=", "False", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.beam_search": [[1265, 1392], ["mesh_tensorflow.VariableDType", "mesh_tensorflow.range", "mesh_tensorflow.reduce_sum", "transformer.Context", "transformer.autoregressive_inputs", "mesh_tensorflow.beam_search.beam_search", "mesh_tensorflow.gather", "ValueError", "len", "NotImplementedError", "mesh_tensorflow.to_int32", "NotImplementedError", "tensorflow.variable_scope", "transformer.Unitransformer._call_internal", "mesh_tensorflow.zeros_like", "mesh_tensorflow.gather", "transformer.Context", "mesh_tensorflow.constant", "mesh_tensorflow.not_equal", "tensorflow.variable_scope", "transformer.Unitransformer._call_internal", "mesh_tensorflow.to_float", "mesh_tensorflow.cast", "mesh_tensorflow.ones_like", "mesh_tensorflow.equal"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.autoregressive_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.beam_search", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer._call_internal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros_like", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer._call_internal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones_like", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal"], ["", "def", "beam_search", "(", "self", ",", "\n", "inputs", ",", "\n", "decode_length", ",", "\n", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "tf", ".", "float32", ")", ",", "\n", "encoder_output", "=", "None", ",", "\n", "encoder_sequence_id", "=", "None", ",", "\n", "encoder_inputs", "=", "None", ",", "\n", "alpha", "=", "0.6", ",", "\n", "shared_params", "=", "None", ",", "\n", "encoder_layer_outputs", "=", "None", ",", "\n", "bos_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"Beam search.\n\n    Args:\n      inputs: an int32 zero-Tensor with shape [<batch_dims>, beam_dim,\n        length_dim].\n      decode_length: an int32 mtf scalar.  Maximum decode length.\n      variable_dtype: a mtf.VariableDType\n      encoder_output: an optional Tensor\n      encoder_sequence_id: an optional Tensor\n      encoder_inputs: an optional Tensor\n      alpha: a floating point value (length bonus)\n      shared_params: an optional dictionary\n      encoder_layer_outputs: optional - readonly list of tensor activations when\n        decoding, one per each input layer + the embedding layer\n      bos_id: beginning of sequence id\n\n    Returns:\n      a Tensor with shape [<batch_dims>, beam_dim, length_dim]\n    \"\"\"", "\n", "if", "not", "self", ".", "autoregressive", ":", "\n", "      ", "raise", "ValueError", "(", "\"must be autoregressive\"", ")", "\n", "\n", "", "batch_dims", "=", "inputs", ".", "shape", ".", "dims", "[", ":", "-", "2", "]", "\n", "if", "len", "(", "batch_dims", ")", "!=", "1", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\n", "\"beam search supports exactly one batch dimension.\"", ")", "\n", "", "beam_dim", "=", "inputs", ".", "shape", ".", "dims", "[", "-", "2", "]", "\n", "length_dim", "=", "inputs", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "length_range", "=", "mtf", ".", "range", "(", "inputs", ".", "mesh", ",", "length_dim", ",", "tf", ".", "int32", ")", "\n", "initial_position", "=", "mtf", ".", "reduce_sum", "(", "\n", "mtf", ".", "to_int32", "(", "mtf", ".", "not_equal", "(", "inputs", ",", "0", ")", ")", ",", "reduced_dim", "=", "length_dim", ")", "\n", "sequence_id", "=", "1", "if", "encoder_sequence_id", "is", "not", "None", "else", "None", "\n", "\n", "if", "self", ".", "input_full_attention", ":", "\n", "# This only makes sense in the case of beam search with given partial", "\n", "# sequences, which is not yet implemented.", "\n", "# TODO(noam): implement", "\n", "      ", "raise", "NotImplementedError", "(", "\n", "\"Beam search for language models not yet implemented\"", ")", "\n", "", "else", ":", "\n", "      ", "read_priority", "=", "write_priority", "=", "length_range", "\n", "\n", "", "context_first_part", "=", "Context", "(", "\n", "model", "=", "self", ",", "\n", "mesh", "=", "inputs", ".", "mesh", ",", "\n", "batch_dims", "=", "batch_dims", "+", "[", "beam_dim", "]", ",", "\n", "length_dim", "=", "length_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "mode", "=", "\"first_part\"", ",", "\n", "position", "=", "length_range", ",", "\n", "position_is_default", "=", "True", ",", "\n", "new_states", "=", "[", "]", ",", "\n", "initial_position", "=", "initial_position", ",", "\n", "sequence_id", "=", "sequence_id", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_sequence_id", "=", "encoder_sequence_id", ",", "\n", "constant_states", "=", "[", "]", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "encoder_layer_outputs", "=", "encoder_layer_outputs", ",", "\n", "write_priority", "=", "write_priority", ",", "\n", "read_priority", "=", "read_priority", ",", "\n", "inputs", "=", "inputs", ",", "\n", "encoder_inputs", "=", "encoder_inputs", ")", "\n", "\n", "shifted_inputs", "=", "autoregressive_inputs", "(", "inputs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "      ", "logits", "=", "self", ".", "_call_internal", "(", "context_first_part", ",", "shifted_inputs", ")", "\n", "", "del", "logits", "\n", "# There are no partial targets.", "\n", "# Replace initial states by zeros to avoid computing them.", "\n", "initial_states", "=", "[", "mtf", ".", "zeros_like", "(", "t", ")", "for", "t", "in", "context_first_part", ".", "new_states", "]", "\n", "constant_states", "=", "context_first_part", ".", "constant_states", "\n", "\n", "def", "logits_fn", "(", "step_num", ",", "ids", ",", "states", ")", ":", "\n", "      ", "\"\"\"logits_fn for mtf.beam_search.beam_search().\"\"\"", "\n", "inputs_this_step", "=", "mtf", ".", "gather", "(", "ids", ",", "step_num", "-", "1", ",", "length_dim", ")", "\n", "# Setting proper bos_id for step_num == 0. No-op otherwise.", "\n", "if", "bos_id", ":", "\n", "        ", "inputs_this_step", "+=", "bos_id", "*", "mtf", ".", "ones_like", "(", "inputs_this_step", ")", "*", "mtf", ".", "cast", "(", "\n", "mtf", ".", "equal", "(", "step_num", ",", "0", ")", ",", "tf", ".", "int32", ")", "\n", "", "context_incremental", "=", "Context", "(", "\n", "model", "=", "self", ",", "\n", "mesh", "=", "inputs", ".", "mesh", ",", "\n", "batch_dims", "=", "batch_dims", "+", "[", "beam_dim", "]", ",", "\n", "length_dim", "=", "length_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "mode", "=", "\"incremental\"", ",", "\n", "position", "=", "step_num", ",", "\n", "states", "=", "states", ",", "\n", "new_states", "=", "[", "]", ",", "\n", "sequence_id", "=", "sequence_id", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_sequence_id", "=", "encoder_sequence_id", ",", "\n", "constant_states", "=", "constant_states", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "encoder_layer_outputs", "=", "encoder_layer_outputs", ",", "\n", "write_priority", "=", "write_priority", ",", "\n", "read_priority", "=", "step_num", ",", "\n", "inputs", "=", "inputs_this_step", ",", "\n", "encoder_inputs", "=", "encoder_inputs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "reuse", "=", "True", ")", ":", "\n", "        ", "logits", "=", "self", ".", "_call_internal", "(", "context_incremental", ",", "inputs_this_step", ")", "\n", "", "return", "mtf", ".", "to_float", "(", "logits", ")", ",", "context_incremental", ".", "new_states", "\n", "\n", "", "beams", ",", "unused_scores", "=", "mtf", ".", "beam_search", ".", "beam_search", "(", "\n", "logits_fn", ",", "\n", "inputs", ",", "\n", "alpha", ",", "\n", "states", "=", "initial_states", ",", "\n", "decode_length", "=", "decode_length", ",", "\n", "use_tpu", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "mesh_shape", "=", "self", ".", "mesh_shape", ",", "\n", "layout", "=", "self", ".", "layout", ")", "\n", "return", "mtf", ".", "gather", "(", "\n", "beams", ",", "mtf", ".", "constant", "(", "inputs", ".", "mesh", ",", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "beam_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer.__init__": [[1460, 1471], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ",", "shared_embedding", "=", "True", ")", ":", "\n", "    ", "\"\"\"Create a Bitransformer.\n\n    Args:\n      encoder: a mtf.unitransformer\n      decoder: a mtf.unitransformer\n      shared_embedding: a boolean\n    \"\"\"", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "shared_embedding", "=", "shared_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer.output_vocab_dim": [[1472, 1475], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_vocab_dim", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "decoder", ".", "output_vocab_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer.loss_denominator": [[1476, 1478], ["transformer.Bitransformer.decoder.loss_denominator"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer.loss_denominator"], ["", "def", "loss_denominator", "(", "self", ",", "targets", ",", "num_microbatches", ")", ":", "\n", "    ", "return", "self", ".", "decoder", ".", "loss_denominator", "(", "targets", ",", "num_microbatches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer.z_loss": [[1479, 1482], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "z_loss", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "decoder", ".", "z_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer._shared_params": [[1483, 1525], ["tensorflow.variable_scope", "ValueError", "transformer.get_vocab_embedding_cls", "transformer.sinusoid_positional_embedding_weights", "mesh_tensorflow.layers.embedding_weights"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.get_vocab_embedding_cls", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sinusoid_positional_embedding_weights", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights"], ["", "def", "_shared_params", "(", "self", ",", "mesh", ",", "variable_dtype", ")", ":", "\n", "    ", "\"\"\"Create parameters that are shared between encoder and decoder.\n\n    Args:\n      mesh: a Mesh\n      variable_dtype: a VariableDType\n    Returns:\n      a dictionary\n    \"\"\"", "\n", "shared_params", "=", "{", "}", "\n", "if", "self", ".", "shared_embedding", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "\"shared\"", ")", ":", "\n", "        ", "if", "not", "(", "self", ".", "encoder", ".", "model_dim", "==", "self", ".", "decoder", ".", "model_dim", "and", "\n", "self", ".", "encoder", ".", "input_vocab_dim", "==", "self", ".", "decoder", ".", "input_vocab_dim", ")", ":", "\n", "          ", "raise", "ValueError", "(", "\n", "\"shared_embedding requires encoder and decoder to have identical\"", "\n", "\" d_model and vocabulary sizes\"", ")", "\n", "", "shared_params", "[", "\"embedding\"", "]", "=", "get_vocab_embedding_cls", "(", ")", "(", "\n", "mesh", ",", "\n", "self", ".", "encoder", ".", "input_vocab_dim", ",", "\n", "self", ".", "encoder", ".", "model_dim", ",", "\n", "variable_dtype", ",", "\n", "name", "=", "\"embedding\"", ",", "\n", "ensemble_dim", "=", "self", ".", "encoder", ".", "ensemble_dim", ")", "\n", "if", "(", "self", ".", "encoder", ".", "positional_embedding", "\n", "and", "self", ".", "decoder", ".", "positional_embedding", "\n", "and", "self", ".", "encoder", ".", "max_length_dim", "==", "self", ".", "decoder", ".", "max_length_dim", ")", ":", "\n", "          ", "if", "(", "self", ".", "encoder", ".", "sinusoid_positional_embedding", "and", "\n", "self", ".", "decoder", ".", "sinusoid_positional_embedding", ")", ":", "\n", "            ", "pos_emb_var", "=", "sinusoid_positional_embedding_weights", "(", "\n", "mesh", ",", "self", ".", "encoder", ".", "max_length_dim", ",", "self", ".", "encoder", ".", "model_dim", ",", "\n", "variable_dtype", ".", "activation_dtype", ")", "\n", "", "else", ":", "\n", "            ", "pos_emb_var", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "mesh", ",", "\n", "self", ".", "encoder", ".", "max_length_dim", ",", "\n", "self", ".", "encoder", ".", "model_dim", ",", "\n", "variable_dtype", ",", "\n", "\"positional_embedding\"", ",", "\n", "ensemble_dim", "=", "self", ".", "encoder", ".", "ensemble_dim", ")", "\n", "", "shared_params", "[", "\"positional_embedding\"", "]", "=", "pos_emb_var", "\n", "", "", "", "return", "shared_params", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer.call_simple": [[1526, 1604], ["mesh_tensorflow.VariableDType", "transformer.Bitransformer._shared_params", "transformer.Bitransformer.encoder.call_simple", "mesh_tensorflow.layers.rename_length_to_memory_length", "transformer.Bitransformer.decoder.call_simple", "mesh_tensorflow.minimum", "mesh_tensorflow.minimum", "mesh_tensorflow.layers.rename_length_to_memory_length", "transformer.autoregressive_inputs", "mesh_tensorflow.layers.rename_length_to_memory_length"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer._shared_params", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.call_simple", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.call_simple", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.autoregressive_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length"], ["", "def", "call_simple", "(", "self", ",", "\n", "inputs", ",", "\n", "targets", ",", "\n", "compute_loss", ",", "\n", "mode", "=", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ",", "\n", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "tf", ".", "float32", ")", ",", "\n", "encoder_sequence_id", "=", "None", ",", "\n", "decoder_sequence_id", "=", "None", ",", "\n", "decoder_subsequence_id", "=", "None", ",", "\n", "encoder_position", "=", "None", ",", "\n", "decoder_position", "=", "None", ",", "\n", "num_microbatches", "=", "1", ")", ":", "\n", "    ", "\"\"\"Compute logits based on inputs (all positions in parallel).\n\n    This is called during training and evaluation.\n\n    Args:\n      inputs: an int32 Tensor with shape [<batch_dims>, length_dim]\n      targets: an optional int32 Tensor with shape [<batch_dims>, length_dim]\n      compute_loss: a boolean\n      mode: a tf.estimator.ModeKeys\n      variable_dtype: a mtf.VariableDType\n      encoder_sequence_id: an optional Tensor\n      decoder_sequence_id: an optional Tensor\n      decoder_subsequence_id: an optional Tensor\n      encoder_position: an optional Tensor\n      decoder_position: an optional Tensor\n      num_microbatches: integer - greater than one if the step has been\n        serialized into multiple microbatches to save memory.\n\n    Returns:\n      logits: a Tensor with shape [<batch_dims>, output_vocab_dim]\n      loss: an optional Scalar (if compute_loss=True)\n    \"\"\"", "\n", "# encoder_sequene_id and decoder_sequence_id are used to delineate packed", "\n", "# examples but are also necessary to indicate padding where sequence_id==0.", "\n", "# If they are absent, then we assume that padding is indicated by zeros in", "\n", "# the inputs/targets, and we make up sequence_id tensors to indicate this.", "\n", "if", "encoder_sequence_id", "is", "None", ":", "\n", "      ", "encoder_sequence_id", "=", "mtf", ".", "minimum", "(", "inputs", ",", "1", ")", "\n", "", "if", "decoder_sequence_id", "is", "None", ":", "\n", "      ", "decoder_sequence_id", "=", "mtf", ".", "minimum", "(", "targets", ",", "1", ")", "\n", "", "encoder_layer_outputs", "=", "[", "]", "\n", "shared_params", "=", "self", ".", "_shared_params", "(", "inputs", ".", "mesh", ",", "variable_dtype", ")", "\n", "encoder_output", ",", "encoder_loss", "=", "self", ".", "encoder", ".", "call_simple", "(", "\n", "inputs", ",", "\n", "None", ",", "\n", "compute_loss", ",", "\n", "mode", "=", "mode", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "sequence_id", "=", "encoder_sequence_id", ",", "\n", "position", "=", "encoder_position", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "layer_outputs", "=", "encoder_layer_outputs", ",", "\n", "num_microbatches", "=", "num_microbatches", ")", "\n", "encoder_output", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "encoder_output", ")", "\n", "if", "encoder_sequence_id", "is", "not", "None", ":", "\n", "      ", "encoder_sequence_id", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "\n", "encoder_sequence_id", ")", "\n", "\n", "", "logits", ",", "loss", "=", "self", ".", "decoder", ".", "call_simple", "(", "\n", "autoregressive_inputs", "(", "targets", ",", "sequence_id", "=", "decoder_sequence_id", ")", ",", "\n", "targets", ",", "\n", "compute_loss", ",", "\n", "mode", "=", "mode", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "sequence_id", "=", "decoder_sequence_id", ",", "\n", "subsequence_id", "=", "decoder_subsequence_id", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_sequence_id", "=", "encoder_sequence_id", ",", "\n", "encoder_inputs", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "inputs", ")", ",", "\n", "position", "=", "decoder_position", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "encoder_layer_outputs", "=", "encoder_layer_outputs", ",", "\n", "num_microbatches", "=", "num_microbatches", ")", "\n", "if", "loss", "is", "not", "None", "and", "encoder_loss", "is", "not", "None", ":", "\n", "      ", "loss", "+=", "encoder_loss", "\n", "", "return", "logits", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer.decode": [[1605, 1701], ["gin.configurable", "mesh_tensorflow.VariableDType", "transformer.Bitransformer._shared_params", "mesh_tensorflow.minimum", "transformer.Bitransformer.encoder.call_simple", "mesh_tensorflow.layers.rename_length_to_memory_length", "mesh_tensorflow.layers.rename_length_to_memory_length", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.zeros", "transformer.Bitransformer.decoder.sample_autoregressive", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.zeros", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_max", "mesh_tensorflow.cast", "transformer.Bitransformer.decoder.beam_search", "ValueError", "ValueError", "mesh_tensorflow.to_float", "mesh_tensorflow.layers.rename_length_to_memory_length", "mesh_tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer._shared_params", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.call_simple", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.sample_autoregressive", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_max", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.beam_search", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "@", "gin", ".", "configurable", "(", "module", "=", "\"Bitransformer\"", ")", "\n", "def", "decode", "(", "self", ",", "\n", "inputs", ",", "\n", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "tf", ".", "float32", ")", ",", "\n", "beam_size", "=", "1", ",", "\n", "alpha", "=", "0.6", ",", "\n", "temperature", "=", "0.0", ",", "\n", "sampling_keep_top_k", "=", "-", "1", ",", "\n", "decode_length_multiplier", "=", "1.5", ",", "\n", "decode_length_constant", "=", "10", ",", "\n", "max_decode_length", "=", "None", ")", ":", "\n", "    ", "\"\"\"Sampling or beam search.\n\n    TODO(noam): should we make the output length dimension different from the\n    input length dimension?\n\n    Args:\n      inputs: a Tensor with shape [<batch_dims>, beam_dim, length_dim]\n      variable_dtype: a mtf.VariableDType\n      beam_size: an integer >= 1\n      alpha: a floating point value (length bonus for beam search)\n      temperature: a value between 0 and 1 (must be 0 if beam_size > 1)\n        0.0 means argmax, 1.0 means sample according to predicted distribution.\n      sampling_keep_top_k: a value between 1 and vocab_size used to sample from\n        only the k most likely logits. Set to -1 to sample from all logits.\n      decode_length_multiplier: a float\n      decode_length_constant: a float\n      max_decode_length: an optional integer\n\n    Returns:\n      a Tensor with shape [<batch_dims>, beam_dim, length_dim]\n    \"\"\"", "\n", "encoder_layer_outputs", "=", "[", "]", "\n", "shared_params", "=", "self", ".", "_shared_params", "(", "inputs", ".", "mesh", ",", "variable_dtype", ")", "\n", "encoder_sequence_id", "=", "mtf", ".", "minimum", "(", "inputs", ",", "1", ")", "\n", "encoder_output", ",", "encoder_loss", "=", "self", ".", "encoder", ".", "call_simple", "(", "\n", "inputs", "=", "inputs", ",", "\n", "targets", "=", "None", ",", "\n", "compute_loss", "=", "False", ",", "\n", "mode", "=", "tf_estimator", ".", "ModeKeys", ".", "PREDICT", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "sequence_id", "=", "encoder_sequence_id", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "layer_outputs", "=", "encoder_layer_outputs", ")", "\n", "del", "encoder_loss", "\n", "encoder_output", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "encoder_output", ")", "\n", "encoder_sequence_id", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "\n", "encoder_sequence_id", ")", "\n", "batch_dims", "=", "inputs", ".", "shape", "[", ":", "-", "1", "]", "\n", "length_dim", "=", "inputs", ".", "shape", "[", "-", "1", "]", "\n", "if", "max_decode_length", "is", "None", ":", "\n", "      ", "decode_length_dim", "=", "length_dim", "\n", "", "else", ":", "\n", "      ", "decode_length_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "max_decode_length", ")", "\n", "", "if", "beam_size", "==", "1", ":", "\n", "      ", "ids_shape", "=", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "decode_length_dim", "]", ")", "\n", "partial_sequences", "=", "mtf", ".", "zeros", "(", "inputs", ".", "mesh", ",", "ids_shape", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "return", "self", ".", "decoder", ".", "sample_autoregressive", "(", "\n", "partial_sequences", ",", "\n", "temperature", "=", "temperature", ",", "\n", "sampling_keep_top_k", "=", "sampling_keep_top_k", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_sequence_id", "=", "encoder_sequence_id", ",", "\n", "encoder_inputs", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "inputs", ")", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "has_partial_sequences", "=", "False", ",", "\n", "encoder_layer_outputs", "=", "encoder_layer_outputs", ")", "\n", "", "else", ":", "\n", "      ", "if", "temperature", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"don't know how to beam search with nonzero temperature\"", ")", "\n", "", "if", "sampling_keep_top_k", "!=", "-", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"don't know how to beam search with top-k value other than -1.\"", ")", "\n", "# beam search", "\n", "", "beam_dim", "=", "mtf", ".", "Dimension", "(", "\"beam\"", ",", "beam_size", ")", "\n", "ids_shape", "=", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "beam_dim", ",", "decode_length_dim", "]", ")", "\n", "partial_sequences", "=", "mtf", ".", "zeros", "(", "inputs", ".", "mesh", ",", "ids_shape", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "input_length", "=", "mtf", ".", "reduce_sum", "(", "\n", "mtf", ".", "to_float", "(", "mtf", ".", "cast", "(", "inputs", ",", "tf", ".", "bool", ")", ")", ",", "\n", "reduced_dim", "=", "length_dim", ")", "\n", "max_input_length", "=", "mtf", ".", "reduce_max", "(", "input_length", ")", "\n", "decode_length", "=", "mtf", ".", "cast", "(", "\n", "max_input_length", "*", "decode_length_multiplier", "\n", "+", "decode_length_constant", ",", "tf", ".", "int32", ")", "\n", "return", "self", ".", "decoder", ".", "beam_search", "(", "\n", "partial_sequences", ",", "\n", "decode_length", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_sequence_id", "=", "encoder_sequence_id", ",", "\n", "encoder_inputs", "=", "inputs", ",", "\n", "alpha", "=", "alpha", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "encoder_layer_outputs", "=", "encoder_layer_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.StudentTeacher.__init__": [[1707, 1741], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "student", ",", "\n", "teacher", ",", "\n", "temperature", "=", "None", ",", "\n", "fraction_soft", "=", "None", ",", "\n", "distill_start_step", "=", "0", ",", "\n", "teacher_checkpoint", "=", "None", ",", "\n", "initialize_student_weights", "=", "False", ")", ":", "\n", "    ", "\"\"\"Create a StudentTeacher.\n\n    Args:\n      student: a Unitransformer or Bitransformer\n      teacher: a Unitransformer or Bitransformer\n      temperature: a float, the temperature of the softmax for distilling from\n        the teacher. Required only when training.\n      fraction_soft: a float between 0 and 1, the contribution of the soft\n        target cross entropy to the training loss. The rest of the loss will be\n        the cross entropy with the one-hot actual label. Required only when\n        training.\n      distill_start_step: an int, training steps after which teacher loss is\n        incorporated in the overall loss.\n      teacher_checkpoint: a string, the path to the teacher checkpoint that we\n        wish to use. Required only when training.\n      initialize_student_weights: a boolean, if true then initialize any\n        of the student weights whose name matches those in the teacher\n        checkpoint.\n    \"\"\"", "\n", "self", ".", "student", "=", "student", "\n", "self", ".", "teacher", "=", "teacher", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "fraction_soft", "=", "fraction_soft", "\n", "self", ".", "distill_start_step", "=", "distill_start_step", "\n", "self", ".", "teacher_checkpoint", "=", "teacher_checkpoint", "\n", "self", ".", "initialize_student_weights", "=", "initialize_student_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.StudentTeacher.call_simple": [[1742, 1824], ["mesh_tensorflow.VariableDType", "graph.make_variables_untrainable", "mesh_tensorflow.softmax", "mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "mesh_tensorflow.cast", "tensorflow.train.get_or_create_global_step", "tensorflow.cast", "tensorflow.variable_scope", "transformer.StudentTeacher.student.call_simple", "tensorflow.variable_scope", "transformer.StudentTeacher.teacher.call_simple", "mesh_tensorflow.stop_gradient", "mesh_tensorflow.greater", "mesh_tensorflow.reduce_sum", "transformer.StudentTeacher.student.loss_denominator", "tensorflow.cond", "tensorflow.math.greater", "v.name.startswith", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.make_variables_untrainable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.call_simple", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.call_simple", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stop_gradient", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer.loss_denominator", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.greater", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["", "def", "call_simple", "(", "self", ",", "\n", "inputs", ",", "\n", "targets", ",", "\n", "compute_loss", ",", "\n", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "tf", ".", "float32", ")", ",", "\n", "num_microbatches", "=", "1", ",", "\n", "**", "kargs", ")", ":", "\n", "    ", "\"\"\"Compute logits based on inputs (all positions in parallel).\n\n    This is called during training and evaluation.\n\n    Args:\n      inputs: an int32 Tensor with shape [<batch_dims>, length_dim] For training\n        autoregressive models this should be equal to mtf.shift(targets,\n        offset=1, dim=length_dim, wrap=False)\n      targets: an optional int32 Tensor with shape [<batch_dims>, length_dim]\n      compute_loss: a boolean\n      variable_dtype: a mtf.VariableDType\n      num_microbatches: integer - greater than one if the step has been\n        serialized into multiple microbatches to save memory.\n      **kargs: additional arguments to pass to the student.call_simple and\n        teacher.call_simple\n\n    Returns:\n      logits: a Tensor with shape [<batch_dims>, output_vocab_dim]\n      loss: an optional Scalar (if compute_loss=True)\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"student\"", ")", ":", "\n", "      ", "student_logits", ",", "hard_loss", "=", "self", ".", "student", ".", "call_simple", "(", "\n", "inputs", ",", "\n", "targets", ",", "\n", "compute_loss", "=", "True", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "**", "kargs", ")", "\n", "if", "not", "compute_loss", ":", "\n", "        ", "return", "student_logits", "\n", "", "elif", "self", ".", "fraction_soft", "==", "0.0", ":", "\n", "# Do not create the teacher if we do not need it.", "\n", "        ", "return", "student_logits", ",", "hard_loss", "\n", "\n", "", "", "assert", "self", ".", "student", ".", "output_vocab_dim", "==", "self", ".", "teacher", ".", "output_vocab_dim", "\n", "assert", "self", ".", "student", ".", "z_loss", "==", "self", ".", "teacher", ".", "z_loss", "\n", "output_vocab_dim", "=", "self", ".", "student", ".", "output_vocab_dim", "\n", "z_loss", "=", "self", ".", "student", ".", "z_loss", "\n", "graph", "=", "inputs", ".", "mesh", ".", "graph", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"teacher\"", ")", ":", "\n", "      ", "teacher_logits", ",", "_", "=", "self", ".", "teacher", ".", "call_simple", "(", "\n", "inputs", ",", "\n", "targets", ",", "\n", "compute_loss", "=", "True", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "num_microbatches", "=", "num_microbatches", ",", "\n", "**", "kargs", ")", "\n", "", "graph", ".", "make_variables_untrainable", "(", "\n", "[", "v", "for", "v", "in", "graph", ".", "trainable_variables", "if", "v", ".", "name", ".", "startswith", "(", "\"teacher/\"", ")", "]", ")", "\n", "\n", "soft_targets", "=", "mtf", ".", "softmax", "(", "teacher_logits", "/", "self", ".", "temperature", ",", "\n", "output_vocab_dim", ")", "\n", "\n", "soft_loss", "=", "mtf", ".", "layers", ".", "softmax_cross_entropy_with_logits", "(", "\n", "student_logits", "/", "self", ".", "temperature", ",", "\n", "mtf", ".", "stop_gradient", "(", "soft_targets", ")", ",", "\n", "output_vocab_dim", ",", "\n", "z_loss", "=", "z_loss", ")", "\n", "\n", "# Ignore losses from padding regions.", "\n", "weights", "=", "mtf", ".", "cast", "(", "mtf", ".", "greater", "(", "targets", ",", "0", ")", ",", "soft_loss", ".", "dtype", ")", "\n", "soft_loss", "=", "(", "mtf", ".", "reduce_sum", "(", "soft_loss", "*", "weights", ")", "/", "\n", "self", ".", "student", ".", "loss_denominator", "(", "targets", ",", "num_microbatches", ")", ")", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "current_fraction_soft", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "cond", "(", "\n", "tf", ".", "math", ".", "greater", "(", "global_step", ",", "self", ".", "distill_start_step", ")", ",", "\n", "lambda", ":", "self", ".", "fraction_soft", ",", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", ",", "\n", "dtype", "=", "soft_loss", ".", "dtype", ")", "\n", "\n", "loss", "=", "(", "(", "1.0", "-", "current_fraction_soft", ")", "*", "hard_loss", "+", "\n", "self", ".", "temperature", "**", "2", "*", "current_fraction_soft", "*", "soft_loss", ")", "\n", "\n", "return", "student_logits", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.StudentTeacher.decode": [[1825, 1845], ["tensorflow.variable_scope", "isinstance", "transformer.StudentTeacher.student.sample_autoregressive", "isinstance", "transformer.StudentTeacher.student.decode", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.sample_autoregressive", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode"], ["", "def", "decode", "(", "self", ",", "*", "args", ",", "**", "kargs", ")", ":", "\n", "    ", "\"\"\"Sample from the student.\n\n    Args:\n       *args: arguments to Unitransformer.sample_autoregressive or\n         Bitransformer.decode\n       **kargs: arguments to Unitransformer.sample_autoregressive or\n         Bitransformer.decode\n\n    Returns:\n      a Tensor with the same shape as the output of\n      Unitransformer.sample_autoregressive or Bitransformer.decode\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"student\"", ")", ":", "\n", "      ", "if", "isinstance", "(", "self", ".", "student", ",", "Unitransformer", ")", ":", "\n", "        ", "return", "self", ".", "student", ".", "sample_autoregressive", "(", "*", "args", ",", "**", "kargs", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "student", ",", "Bitransformer", ")", ":", "\n", "        ", "return", "self", ".", "student", ".", "decode", "(", "*", "args", ",", "**", "kargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unrecognized class\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.StudentTeacher.initialize": [[1846, 1884], ["tensorflow.get_collection", "tensorflow.train.init_from_checkpoint", "tensorflow.get_collection", "set", "set", "tensorflow.logging.info", "tensorflow.train.init_from_checkpoint", "student_load_dict.keys", "var.name[].split", "tensorflow.logging.info", "v.name[].split", "tensorflow.train.list_variables", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split"], ["", "", "", "def", "initialize", "(", "self", ")", ":", "\n", "    ", "\"\"\"Initialize the teacher and maybe student model from the checkpoint.\n\n    This function will be called after the graph has been constructed.\n    \"\"\"", "\n", "if", "self", ".", "fraction_soft", "==", "0.0", ":", "\n", "# Do nothing if we do not need the teacher.", "\n", "      ", "return", "\n", "", "vars_to_restore", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "\"teacher\"", ")", "\n", "\n", "if", "self", ".", "initialize_student_weights", ":", "\n", "      ", "student_vars_to_restore", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "\"student\"", ")", "\n", "# See what variables exist in the checkpoint", "\n", "ckpt_vars", "=", "set", "(", "[", "\n", "name", "for", "name", ",", "_", "in", "tf", ".", "train", ".", "list_variables", "(", "self", ".", "teacher_checkpoint", ")", "]", ")", "\n", "student_load_dict", "=", "{", "}", "\n", "# Loop over all student variables and see if any can be loaded from ckpt", "\n", "for", "var", "in", "student_vars_to_restore", ":", "\n", "        ", "var_name", "=", "var", ".", "name", "[", "len", "(", "\"student/\"", ")", ":", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", "\n", "if", "var_name", "in", "ckpt_vars", ":", "\n", "          ", "student_load_dict", "[", "var_name", "]", "=", "var", "\n", "", "else", ":", "\n", "          ", "tf", ".", "logging", ".", "info", "(", "\"Student variable not found in ckpt: {}\"", ".", "format", "(", "\n", "var_name", ")", ")", "\n", "\n", "", "", "loaded_vars", "=", "set", "(", "student_load_dict", ".", "keys", "(", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Variables not restored from ckpt for student: {}\"", ".", "format", "(", "\n", "ckpt_vars", "-", "loaded_vars", ")", ")", "\n", "\n", "tf", ".", "train", ".", "init_from_checkpoint", "(", "\n", "self", ".", "teacher_checkpoint", ",", "student_load_dict", ")", "\n", "\n", "# Initialize teacher weights", "\n", "", "tf", ".", "train", ".", "init_from_checkpoint", "(", "\n", "self", ".", "teacher_checkpoint", ",", "\n", "{", "v", ".", "name", "[", "len", "(", "\"teacher/\"", ")", ":", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", ":", "v", "for", "v", "in", "vars_to_restore", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.__init__": [[2132, 2164], ["mesh_tensorflow.layers.embedding_weights", "tensorflow.random_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.embedding_weights"], ["def", "__init__", "(", "self", ",", "mesh", ",", "vocab_dim", ",", "output_dim", ",", "variable_dtype", ",", "name", ",", "\n", "ensemble_dim", ",", "scale_variable_like_classifier_weights", "=", "False", ")", ":", "\n", "    ", "\"\"\"Embedding for the vocabulary.\n\n    Most of the arguments get passed to `mtf.layers.embedding_weights`.\n\n    Args:\n      mesh: a mtf.Mesh\n      vocab_dim: a mtf.Dimension\n      output_dim: a mtf.Dimension\n      variable_dtype: a mtf.VariableDType\n      name: a string\n      ensemble_dim: a mtf.Dimension\n      scale_variable_like_classifier_weights: a boolean\n    \"\"\"", "\n", "self", ".", "_vocab_dim", "=", "vocab_dim", "\n", "self", ".", "_output_dim", "=", "output_dim", "\n", "self", ".", "_scale_variable_like_classifier_weights", "=", "(", "\n", "scale_variable_like_classifier_weights", ")", "\n", "if", "self", ".", "_scale_variable_like_classifier_weights", ":", "\n", "      ", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "self", ".", "_output_dim", ".", "size", "**", "-", "0.5", ")", "\n", "", "else", ":", "\n", "      ", "initializer", "=", "None", "\n", "", "self", ".", "_embedding_weights", "=", "mtf", ".", "layers", ".", "embedding_weights", "(", "\n", "mesh", "=", "mesh", ",", "\n", "vocab_dim", "=", "vocab_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "name", "=", "name", ",", "\n", "ensemble_dim", "=", "ensemble_dim", ",", "\n", "initializer", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.ids_to_embedding": [[2165, 2171], ["mesh_tensorflow.gather"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather"], ["", "def", "ids_to_embedding", "(", "self", ",", "ids", ",", "context", ")", ":", "\n", "    ", "del", "context", "\n", "ret", "=", "mtf", ".", "gather", "(", "self", ".", "_embedding_weights", ",", "ids", ",", "self", ".", "_vocab_dim", ")", "\n", "if", "self", ".", "_scale_variable_like_classifier_weights", ":", "\n", "      ", "ret", "*=", "self", ".", "_output_dim", ".", "size", "**", "0.5", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.VocabEmbedding.hidden_to_logits": [[2172, 2178], ["mesh_tensorflow.einsum"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum"], ["", "def", "hidden_to_logits", "(", "self", ",", "hidden", ",", "context", ")", ":", "\n", "    ", "del", "context", "\n", "if", "not", "self", ".", "_scale_variable_like_classifier_weights", ":", "\n", "      ", "hidden", "*=", "self", ".", "_output_dim", ".", "size", "**", "-", "0.5", "\n", "", "return", "mtf", ".", "einsum", "(", "[", "hidden", ",", "self", ".", "_embedding_weights", "]", ",", "\n", "reduced_dims", "=", "[", "self", ".", "_output_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_call_layer": [[463, 469], ["transformer.sublayer_mask_padding", "tensorflow.variable_scope", "layer.call"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_mask_padding", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "sublayer_call_layer", "(", "x", ",", "layer_stack", ",", "context", ")", ":", "\n", "  ", "x", "=", "sublayer_mask_padding", "(", "x", ",", "layer_stack", ",", "context", ")", "\n", "layer", "=", "context", ".", "current_layer", "\n", "with", "tf", ".", "variable_scope", "(", "layer", ".", "__class__", ".", "__name__", ")", ":", "\n", "    ", "return", "layer", ".", "call", "(", "context", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_mask_padding": [[471, 492], ["isinstance", "mesh_tensorflow.cast", "mesh_tensorflow.not_equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "sublayer_mask_padding", "(", "x", ",", "layer_stack", ",", "context", ")", ":", "\n", "  ", "\"\"\"Zero out padding regions.\n\n  This \"fixes\" a bug where extreme values leak from the padding into the\n  non-padding regions.\n  TODO(noam): undertand this better and make a more principled fix.\n\n  Args:\n    x: a Tensor\n    layer_stack: ignored\n    context: a Tensor\n  Returns:\n    a Tensor\n  \"\"\"", "\n", "del", "layer_stack", "\n", "if", "isinstance", "(", "context", ".", "sequence_id", ",", "mtf", ".", "Tensor", ")", ":", "\n", "    ", "return", "x", "*", "mtf", ".", "cast", "(", "\n", "mtf", ".", "not_equal", "(", "context", ".", "sequence_id", ",", "0", ")", ",", "context", ".", "activation_dtype", ")", "\n", "", "else", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_rms_norm": [[494, 518], ["tensorflow.variable_scope", "mesh_tensorflow.get_variable", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.Shape", "mesh_tensorflow.square", "mesh_tensorflow.rsqrt", "tensorflow.ones_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "sublayer_rms_norm", "(", "x", ",", "layer_stack", ",", "context", ",", "epsilon", "=", "1e-6", ",", "name", "=", "\"rms_norm\"", ")", ":", "\n", "  ", "\"\"\"RMS normalization.\n\n  Args:\n    x: an input mtf.Tensor\n    layer_stack: a LayerStack\n    context: a Context\n    epsilon: a float\n    name: a string\n  Returns:\n    a mtf.Tensor\n  \"\"\"", "\n", "del", "layer_stack", "\n", "model_dim", "=", "context", ".", "model", ".", "model_dim", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "    ", "scale", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "\"scale\"", ",", "\n", "mtf", ".", "Shape", "(", "context", ".", "model", ".", "ensemble_dims", "+", "[", "model_dim", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "variance", "=", "mtf", ".", "reduce_mean", "(", "mtf", ".", "square", "(", "x", ")", ",", "reduced_dim", "=", "model_dim", ")", "\n", "", "return", "x", "*", "mtf", ".", "rsqrt", "(", "variance", "+", "epsilon", ")", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_legacy_rms_norm": [[520, 524], ["transformer.sublayer_rms_norm"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_rms_norm"], ["", "@", "gin", ".", "configurable", "\n", "def", "sublayer_legacy_rms_norm", "(", "x", ",", "layer_stack", ",", "context", ")", ":", "\n", "  ", "\"\"\"Deprecated - keep for checkpoint/operative_config.gin compatibility.\"\"\"", "\n", "return", "sublayer_rms_norm", "(", "x", ",", "layer_stack", ",", "context", ",", "name", "=", "\"layer_norm\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_legacy_final_rms_norm": [[526, 530], ["transformer.sublayer_rms_norm"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_rms_norm"], ["", "@", "gin", ".", "configurable", "\n", "def", "sublayer_legacy_final_rms_norm", "(", "x", ",", "layer_stack", ",", "context", ")", ":", "\n", "  ", "\"\"\"Deprecated - keep for checkpoint/operative_config.gin compatibility.\"\"\"", "\n", "return", "sublayer_rms_norm", "(", "x", ",", "layer_stack", ",", "context", ",", "name", "=", "\"final_layer_norm\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_rms_norm_subsampled": [[532, 552], ["tensorflow.variable_scope", "mesh_tensorflow.get_variable", "mesh_tensorflow.Dimension", "mesh_tensorflow.slice", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.Shape", "int", "mesh_tensorflow.square", "mesh_tensorflow.rsqrt", "tensorflow.ones_initializer", "math.ceil"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt"], ["", "@", "gin", ".", "configurable", "\n", "def", "sublayer_rms_norm_subsampled", "(", "x", ",", "layer_stack", ",", "context", ",", "percentage", "=", "100.", ",", "\n", "epsilon", "=", "1e-6", ")", ":", "\n", "  ", "\"\"\"RMS normalization.\"\"\"", "\n", "del", "layer_stack", "\n", "model_dim", "=", "context", ".", "model", ".", "model_dim", "\n", "with", "tf", ".", "variable_scope", "(", "\"layer_norm_subsampled\"", ")", ":", "\n", "    ", "scale", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "\"scale\"", ",", "\n", "mtf", ".", "Shape", "(", "context", ".", "model", ".", "ensemble_dims", "+", "[", "model_dim", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "var_dim", "=", "mtf", ".", "Dimension", "(", "\n", "model_dim", ".", "name", ",", "\n", "int", "(", "math", ".", "ceil", "(", "model_dim", ".", "size", "*", "percentage", "/", "100", ")", ")", ")", "\n", "var_activations", "=", "mtf", ".", "slice", "(", "x", ",", "0", ",", "var_dim", ".", "size", ",", "var_dim", ".", "name", ")", "\n", "variance", "=", "mtf", ".", "reduce_mean", "(", "\n", "mtf", ".", "square", "(", "var_activations", ")", ",", "reduced_dim", "=", "var_dim", ")", "\n", "", "return", "x", "*", "mtf", ".", "rsqrt", "(", "variance", "+", "epsilon", ")", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_scale_norm": [[554, 582], ["tensorflow.variable_scope", "mesh_tensorflow.get_variable", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.square", "mesh_tensorflow.rsqrt", "tensorflow.ones_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt"], ["", "@", "gin", ".", "configurable", "\n", "def", "sublayer_scale_norm", "(", "x", ",", "\n", "layer_stack", ",", "\n", "context", ",", "\n", "epsilon", "=", "1e-6", ",", "\n", "name", "=", "\"scale_norm\"", ")", ":", "\n", "  ", "\"\"\"Scale normalization.\n\n  Args:\n    x: an input mtf.Tensor\n    layer_stack: a LayerStack\n    context: a Context\n    epsilon: a float\n    name: a string\n  Returns:\n    a mtf.Tensor\n  \"\"\"", "\n", "del", "layer_stack", "\n", "model_dim", "=", "context", ".", "model", ".", "model_dim", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "    ", "scale", "=", "mtf", ".", "get_variable", "(", "\n", "context", ".", "mesh", ",", "\n", "\"scale\"", ",", "\n", "context", ".", "model", ".", "ensemble_dims", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ")", "\n", "variance", "=", "mtf", ".", "reduce_mean", "(", "mtf", ".", "square", "(", "x", ")", ",", "reduced_dim", "=", "model_dim", ")", "\n", "", "return", "x", "*", "mtf", ".", "rsqrt", "(", "variance", "+", "epsilon", ")", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_residual": [[584, 588], ["None"], "function", ["None"], ["", "@", "gin", ".", "configurable", "\n", "def", "sublayer_residual", "(", "x", ",", "layer_stack", ",", "context", ")", ":", "\n", "  ", "del", "layer_stack", "\n", "return", "x", "+", "context", ".", "current_layer_input", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_dropout": [[590, 599], ["mesh_tensorflow.dropout", "mesh_tensorflow.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout"], ["", "@", "gin", ".", "configurable", "\n", "def", "sublayer_dropout", "(", "x", ",", "layer_stack", ",", "context", ",", "dropout_rate", "=", "0.0", ")", ":", "\n", "  ", "del", "layer_stack", "\n", "if", "context", ".", "train", "and", "dropout_rate", ">", "0", ":", "\n", "    ", "return", "mtf", ".", "dropout", "(", "\n", "x", ",", "context", ".", "train", ",", "rate", "=", "dropout_rate", ",", "\n", "noise_shape", "=", "mtf", ".", "Shape", "(", "context", ".", "batch_dims", "+", "[", "context", ".", "model", ".", "model_dim", "]", ")", ")", "\n", "", "else", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_annealed_dropout": [[601, 625], ["ValueError", "ValueError", "mesh_tensorflow.layers.annealed_dropout", "mesh_tensorflow.Shape"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.annealed_dropout"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "sublayer_annealed_dropout", "(", "x", ",", "\n", "layer_stack", ",", "\n", "context", ",", "\n", "init_dropout_rate", "=", "0.0", ",", "\n", "start_step", "=", "None", ",", "\n", "end_step", "=", "None", ")", ":", "\n", "  ", "\"\"\"Transformer sublayer which linearly anneals the dropout rate.\"\"\"", "\n", "if", "start_step", "is", "None", ":", "\n", "    ", "raise", "ValueError", "(", "\"The start step for dropout annealing required.\"", ")", "\n", "", "if", "end_step", "is", "None", ":", "\n", "    ", "raise", "ValueError", "(", "\"The end step for dropout annealing required.\"", ")", "\n", "\n", "", "del", "layer_stack", "\n", "if", "context", ".", "train", "and", "init_dropout_rate", ">", "0", ":", "\n", "    ", "return", "mtf", ".", "layers", ".", "annealed_dropout", "(", "\n", "x", ",", "\n", "context", ".", "train", ",", "\n", "start_step", ",", "\n", "end_step", ",", "\n", "init_rate", "=", "init_dropout_rate", ",", "\n", "noise_shape", "=", "mtf", ".", "Shape", "(", "context", ".", "batch_dims", "+", "[", "context", ".", "model", ".", "model_dim", "]", ")", ")", "\n", "", "else", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_clip_activation_gradient": [[627, 632], ["mesh_tensorflow.layers.clip_activation_gradient"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.clip_activation_gradient"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "sublayer_clip_activation_gradient", "(", "x", ",", "layer_stack", ",", "context", ",", "rms_norm", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Clip activation gradient by RMS-norm.\"\"\"", "\n", "del", "layer_stack", ",", "context", "\n", "return", "mtf", ".", "layers", ".", "clip_activation_gradient", "(", "x", ",", "rms_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_legacy_dropout": [[634, 638], ["transformer.sublayer_dropout"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_dropout"], ["", "@", "gin", ".", "configurable", "\n", "def", "sublayer_legacy_dropout", "(", "x", ",", "layer_stack", ",", "context", ")", ":", "\n", "  ", "return", "sublayer_dropout", "(", "x", ",", "layer_stack", ",", "context", ",", "\n", "dropout_rate", "=", "layer_stack", ".", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_rezero": [[640, 649], ["mesh_tensorflow.get_variable", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["", "@", "gin", ".", "configurable", "\n", "def", "sublayer_rezero", "(", "x", ",", "layer_stack", ",", "context", ",", "initial_value", "=", "0.0", ")", ":", "\n", "  ", "\"\"\"Multiply by zero-initialized scalar (residual not included).\"\"\"", "\n", "del", "layer_stack", "\n", "rezero_weight", "=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\"rezero_weight\"", ",", "shape", "=", "context", ".", "model", ".", "ensemble_dims", ",", "\n", "dtype", "=", "context", ".", "variable_dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "initial_value", ")", ")", "\n", "return", "x", "*", "rezero_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_true_layer_norm": [[688, 695], ["tensorflow.variable_scope", "mesh_tensorflow.layers.layer_norm"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.layer_norm"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "sublayer_true_layer_norm", "(", "x", ",", "layer_stack", ",", "context", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "  ", "\"\"\"True (aka normal) Normalization.\"\"\"", "\n", "del", "layer_stack", "\n", "model_dim", "=", "context", ".", "model", ".", "model_dim", "\n", "with", "tf", ".", "variable_scope", "(", "\"true_layer_norm\"", ")", ":", "\n", "    ", "return", "mtf", ".", "layers", ".", "layer_norm", "(", "x", ",", "model_dim", ",", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.shift_targets": [[1394, 1423], ["tensorflow.logging.warning", "mesh_tensorflow.shift", "mesh_tensorflow.to_int32", "mesh_tensorflow.not_equal", "mesh_tensorflow.to_int32", "mesh_tensorflow.logical_and", "mesh_tensorflow.equal", "mesh_tensorflow.not_equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.logical_and", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "shift_targets", "(", "targets", ",", "bos_id", "=", "0", ",", "eos_id", "=", "1", ")", ":", "\n", "  ", "\"\"\"Transforms decoder labels to decoder inputs.\n\n  DEPRECATED - use autoregressive_inputs()\n\n  Args:\n    targets: decoder labels\n    bos_id: begin of sequence id, defaults to 0\n    eos_id: end of sequence id, defaults to 1\n\n  Returns:\n    Decoder inputs.\n  \"\"\"", "\n", "tf", ".", "logging", ".", "warning", "(", "\"warning: shift_targets is deprecated - \"", "\n", "\"use autoregressive_inputs() instead.\"", ")", "\n", "length_dim", "=", "targets", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "shifted_targets", "=", "mtf", ".", "shift", "(", "targets", ",", "offset", "=", "1", ",", "dim", "=", "length_dim", ",", "wrap", "=", "False", ")", "\n", "# We should have a 0 at the beginning of each sequence rather than the", "\n", "# shifted EOS (e.g. 1) from the previous sequence.", "\n", "shifted_targets", "*=", "mtf", ".", "to_int32", "(", "mtf", ".", "not_equal", "(", "shifted_targets", ",", "eos_id", ")", ")", "\n", "\n", "if", "bos_id", ":", "\n", "    ", "shifted_targets", "+=", "mtf", ".", "to_int32", "(", "\n", "mtf", ".", "logical_and", "(", "\n", "mtf", ".", "equal", "(", "shifted_targets", ",", "0", ")", ",", "\n", "mtf", ".", "not_equal", "(", "targets", ",", "0", ")", ")", ")", "*", "bos_id", "\n", "\n", "", "return", "shifted_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.autoregressive_inputs": [[1425, 1454], ["mesh_tensorflow.shift", "mesh_tensorflow.abs", "mesh_tensorflow.equal", "mesh_tensorflow.to_int32", "mesh_tensorflow.shift"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.shift"], ["", "def", "autoregressive_inputs", "(", "targets", ",", "sequence_id", "=", "None", ")", ":", "\n", "  ", "\"\"\"Generate inputs for an autoregressive model, by shifting the targets.\n\n  For the first element of each sequence, the returned input id is 0.\n\n  For a \"packed\" dataset, also pass the sequence_id tensor, which aligns\n  with the targets tensor and contains different values for different\n  concatenated examples.\n\n  Args:\n    targets: a tf.int32 Tensor with shape [..., length_dim]\n    sequence_id: an optional Tensor with the same shape as targets\n\n  Returns:\n    a Tensor with dtype tf.int32 and the same shape as targets.\n  \"\"\"", "\n", "length_dim", "=", "targets", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "inputs", "=", "mtf", ".", "shift", "(", "targets", ",", "offset", "=", "1", ",", "dim", "=", "length_dim", ",", "wrap", "=", "False", ")", "\n", "# Negative ids are used to indicate masked loss during training.", "\n", "# Switch them back to positive numbers.", "\n", "inputs", "=", "mtf", ".", "abs", "(", "inputs", ")", "\n", "# We should have a 0 at the beginning of each sequence rather than the", "\n", "# shifted EOS (e.g. 1) from the previous sequence.", "\n", "if", "sequence_id", "is", "not", "None", ":", "\n", "    ", "not_first_in_sequence", "=", "mtf", ".", "equal", "(", "\n", "sequence_id", ",", "\n", "mtf", ".", "shift", "(", "sequence_id", ",", "offset", "=", "1", ",", "dim", "=", "length_dim", ",", "wrap", "=", "False", ")", ")", "\n", "inputs", "*=", "mtf", ".", "to_int32", "(", "not_first_in_sequence", ")", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.make_layer_stack": [[1887, 1952], ["range", "layer_stack_cls", "enumerate", "isinstance", "cls", "cls.set_name", "layer_stack.append", "isinstance", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.TransformerLayer.set_name"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "make_layer_stack", "(", "layers", "=", "gin", ".", "REQUIRED", ",", "\n", "layer_stack_cls", "=", "LayerStack", ",", "\n", "num_layers", "=", "6", ",", "\n", "block_scope", "=", "True", ")", ":", "\n", "  ", "\"\"\"Configurable layer stack.\n\n  The \"layers\" argument specifies the layers in each block.  It is a list\n  of specifications.  Each specification is either a subclass of\n  TransformerLayer or a list/tuple containing such a subclass as well as other\n  optional items.  Each optional item is either a string (the class name), or\n  a dictionary of kwargs to be passed to the class constructor.\n  Example:\n  layers=[\n    transformer_layers.SelfAttention,\n    [transformer_layers.DenseReluDense,\n     \"feedforward\", {\"hidden_size\": 2048, \"dropout_rate\":0.2}],\n  ]\n\n  The \"num_layers\" argument specifies the number of blocks.\n\n  Args:\n    layers: a list (see above)\n    layer_stack_cls: a class, e.g. LayerStack or ReversibleLayerStack\n    num_layers: an integer\n    block_scope: a bool, if True then use scopes of the format\n      ```\n      block_000/layer_000/...\n      block_000/layer_001/...\n      ...\n      block_001/layer_000/...\n      block_001/layer_001/...\n      ```\n      If False then use scopes of the format\n      ```\n      layer_000/...\n      layer_001/...\n      layer_002/...\n      ...\n      ```\n  Returns:\n    a LayerStack\n  \"\"\"", "\n", "layer_stack", "=", "[", "]", "\n", "for", "block", "in", "range", "(", "num_layers", ")", ":", "\n", "    ", "for", "n", ",", "cls", "in", "enumerate", "(", "layers", ")", ":", "\n", "# Set name to None if it wasn't provided which simplifies the logic below", "\n", "      ", "name", "=", "None", "\n", "kwargs", "=", "{", "}", "\n", "if", "isinstance", "(", "cls", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "for", "x", "in", "cls", ":", "\n", "          ", "if", "isinstance", "(", "x", ",", "str", ")", ":", "\n", "            ", "name", "=", "x", "\n", "", "elif", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "            ", "kwargs", "=", "x", "\n", "", "else", ":", "\n", "            ", "cls", "=", "x", "\n", "", "", "", "if", "block_scope", ":", "\n", "        ", "name", "=", "\"block_{:03d}/{}\"", ".", "format", "(", "block", ",", "name", "or", "\"layer_{:03d}\"", ".", "format", "(", "n", ")", ")", "\n", "", "else", ":", "\n", "        ", "name", "=", "name", "or", "\"layer_{:03d}\"", ".", "format", "(", "len", "(", "layer_stack", ")", ")", "\n", "", "layer", "=", "cls", "(", "**", "kwargs", ")", "\n", "layer", ".", "set_name", "(", "name", ")", "\n", "layer_stack", ".", "append", "(", "layer", ")", "\n", "", "", "return", "layer_stack_cls", "(", "layer_stack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.make_bitransformer": [[1954, 2009], ["bitransformer_cls", "gin.config_scope", "transformer.Unitransformer", "gin.config_scope", "transformer.Unitransformer", "transformer.make_layer_stack", "transformer.make_layer_stack"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.make_layer_stack", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.make_layer_stack"], ["", "@", "gin", ".", "configurable", "\n", "def", "make_bitransformer", "(", "\n", "input_vocab_size", "=", "gin", ".", "REQUIRED", ",", "\n", "output_vocab_size", "=", "gin", ".", "REQUIRED", ",", "\n", "layout", "=", "None", ",", "\n", "mesh_shape", "=", "None", ",", "\n", "encoder_name", "=", "\"encoder\"", ",", "\n", "decoder_name", "=", "\"decoder\"", ",", "\n", "bitransformer_cls", "=", "Bitransformer", ")", ":", "\n", "  ", "\"\"\"Gin-configurable bitransformer constructor.\n\n  In your config file you need to set the encoder and decoder layers like this:\n  encoder/make_layer_stack.layers = [\n    @transformer_layers.SelfAttention,\n    @transformer_layers.DenseReluDense,\n  ]\n  decoder/make_layer_stack.layers = [\n    @transformer_layers.SelfAttention,\n    @transformer_layers.EncDecAttention,\n    @transformer_layers.DenseReluDense,\n  ]\n\n  Args:\n    input_vocab_size: a integer\n    output_vocab_size: an integer\n    layout: optional - an input to mtf.convert_to_layout_rules\n      Some layers (e.g. MoE layers) cheat by looking at layout and mesh_shape\n    mesh_shape: optional - an input to mtf.convert_to_shape\n      Some layers (e.g. MoE layers) cheat by looking at layout and mesh_shape\n    encoder_name: optional - a string giving the Unitransformer encoder name.\n    decoder_name: optional - a string giving the Unitransformer decoder name.\n    bitransformer_cls: a class that implements the bitransformer with the\n      encoder and decoder both of which are Unitransformer instances.\n  Returns:\n    a bitransformer_cls instance\n  \"\"\"", "\n", "with", "gin", ".", "config_scope", "(", "\"encoder\"", ")", ":", "\n", "    ", "encoder", "=", "Unitransformer", "(", "\n", "layer_stack", "=", "make_layer_stack", "(", ")", ",", "\n", "input_vocab_size", "=", "input_vocab_size", ",", "\n", "output_vocab_size", "=", "None", ",", "\n", "autoregressive", "=", "False", ",", "\n", "name", "=", "encoder_name", ",", "\n", "layout", "=", "layout", ",", "\n", "mesh_shape", "=", "mesh_shape", ")", "\n", "", "with", "gin", ".", "config_scope", "(", "\"decoder\"", ")", ":", "\n", "    ", "decoder", "=", "Unitransformer", "(", "\n", "layer_stack", "=", "make_layer_stack", "(", ")", ",", "\n", "input_vocab_size", "=", "output_vocab_size", ",", "\n", "output_vocab_size", "=", "output_vocab_size", ",", "\n", "autoregressive", "=", "True", ",", "\n", "name", "=", "decoder_name", ",", "\n", "layout", "=", "layout", ",", "\n", "mesh_shape", "=", "mesh_shape", ")", "\n", "", "return", "bitransformer_cls", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.make_bi_student_teacher": [[2011, 2057], ["transformer.StudentTeacher", "gin.config_scope", "transformer.make_bitransformer", "gin.config_scope", "transformer.make_bitransformer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.make_bitransformer", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.make_bitransformer"], ["", "@", "gin", ".", "configurable", "\n", "def", "make_bi_student_teacher", "(", "input_vocab_size", "=", "gin", ".", "REQUIRED", ",", "\n", "output_vocab_size", "=", "gin", ".", "REQUIRED", ",", "\n", "layout", "=", "None", ",", "\n", "mesh_shape", "=", "None", ")", ":", "\n", "  ", "\"\"\"Gin-configurable bitransformer student teacher constructor.\n\n  In your config file you need to set the encoder and decoder layers like this:\n    encoder_layers = [\n        @mesh_tensorflow.transformer.transformer_layers.SelfAttention,\n        @mesh_tensorflow.transformer.transformer_layers.DenseReluDense,\n    ]\n    decoder_layers = [\n        @mesh_tensorflow.transformer.transformer_layers.SelfAttention,\n        @mesh_tensorflow.transformer.transformer_layers.EncDecAttention,\n        @mesh_tensorflow.transformer.transformer_layers.DenseReluDense,\n    ]\n    teacher/encoder/transformer.make_layer_stack.layers = %encoder_layers\n    teacher/decoder/transformer.make_layer_stack.layers = %decoder_layers\n    student/encoder/transformer.make_layer_stack.layers = %encoder_layers\n    student/decoder/transformer.make_layer_stack.layers = %decoder_layers\n\n  Args:\n    input_vocab_size: a integer\n    output_vocab_size: an integer\n    layout: optional - an input to mtf.convert_to_layout_rules Some layers (e.g.\n      MoE layers) cheat by looking at layout and mesh_shape\n    mesh_shape: optional - an input to mtf.convert_to_shape Some layers (e.g.\n      MoE layers) cheat by looking at layout and mesh_shape\n\n  Returns:\n    a StudentTeacher\n  \"\"\"", "\n", "with", "gin", ".", "config_scope", "(", "\"student\"", ")", ":", "\n", "    ", "student", "=", "make_bitransformer", "(", "\n", "input_vocab_size", "=", "input_vocab_size", ",", "\n", "output_vocab_size", "=", "output_vocab_size", ",", "\n", "layout", "=", "layout", ",", "\n", "mesh_shape", "=", "mesh_shape", ")", "\n", "", "with", "gin", ".", "config_scope", "(", "\"teacher\"", ")", ":", "\n", "    ", "teacher", "=", "make_bitransformer", "(", "\n", "input_vocab_size", "=", "input_vocab_size", ",", "\n", "output_vocab_size", "=", "output_vocab_size", ",", "\n", "layout", "=", "layout", ",", "\n", "mesh_shape", "=", "mesh_shape", ")", "\n", "", "return", "StudentTeacher", "(", "student", "=", "student", ",", "teacher", "=", "teacher", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer._round_up_to_multiple": [[2059, 2061], ["None"], "function", ["None"], ["", "def", "_round_up_to_multiple", "(", "n", ",", "divisor", ")", ":", "\n", "  ", "return", "n", "+", "-", "n", "%", "divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.delimited_lm_inputs_mask": [[2063, 2082], ["mesh_tensorflow.equal", "mesh_tensorflow.mod", "mesh_tensorflow.cumsum", "mesh_tensorflow.to_int32", "mesh_tensorflow.equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mod", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cumsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal"], ["", "def", "delimited_lm_inputs_mask", "(", "ids", ",", "eos_id", "=", "1", ")", ":", "\n", "  ", "\"\"\"Binary mask indicating which parts of the ids represent the inputs.\n\n  Assumes that the ids consist of packed sequences where each example is\n  represented by two eos-terminated sequences, i.e.\n  [<inputs0>, EOS, <targets0>, EOS, <inputs1>, EOS, <targets1>, EOS ...]\n\n  As such, the inputs are the parts where the number of previous EOS tokens\n  is even.\n\n  Args:\n    ids: an int32 mtf.Tensor with shape [..., length_dim]\n    eos_id: an integer\n  Returns:\n    a boolean mtf.Tensor with the same shape as ids\n  \"\"\"", "\n", "length_dim", "=", "ids", ".", "shape", ".", "dims", "[", "-", "1", "]", "\n", "return", "mtf", ".", "equal", "(", "mtf", ".", "mod", "(", "mtf", ".", "cumsum", "(", "mtf", ".", "to_int32", "(", "mtf", ".", "equal", "(", "ids", ",", "eos_id", ")", ")", ",", "\n", "length_dim", ",", "exclusive", "=", "True", ")", ",", "2", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.reduce_ensemble_logits_select": [[2084, 2089], ["mesh_tensorflow.gather"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather"], ["", "@", "gin", ".", "configurable", "\n", "def", "reduce_ensemble_logits_select", "(", "logits", ",", "ensemble_dim", ",", "vocab_dim", ",", "model_id", "=", "0", ")", ":", "\n", "  ", "\"\"\"Select logits from the model_id-th element of the ensemble.\"\"\"", "\n", "del", "vocab_dim", "\n", "return", "mtf", ".", "gather", "(", "logits", ",", "model_id", "%", "ensemble_dim", ".", "size", ",", "ensemble_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.reduce_ensemble_logits_mean_prob": [[2091, 2097], ["mesh_tensorflow.softmax", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.log", "mesh_tensorflow.maximum"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum"], ["", "@", "gin", ".", "configurable", "\n", "def", "reduce_ensemble_logits_mean_prob", "(", "logits", ",", "ensemble_dim", ",", "vocab_dim", ")", ":", "\n", "  ", "\"\"\"Probabilities equal to arithmetic mean probability across models.\"\"\"", "\n", "probs", "=", "mtf", ".", "softmax", "(", "logits", ",", "reduced_dim", "=", "vocab_dim", ")", "\n", "probs", "=", "mtf", ".", "reduce_mean", "(", "probs", ",", "reduced_dim", "=", "ensemble_dim", ")", "\n", "return", "mtf", ".", "log", "(", "mtf", ".", "maximum", "(", "probs", ",", "1e-20", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.reduce_ensemble_logits_mean_logit": [[2099, 2104], ["mesh_tensorflow.reduce_mean"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean"], ["", "@", "gin", ".", "configurable", "\n", "def", "reduce_ensemble_logits_mean_logit", "(", "logits", ",", "ensemble_dim", ",", "vocab_dim", ")", ":", "\n", "  ", "\"\"\"Probabilities proportional to geometric mean probability across models.\"\"\"", "\n", "del", "vocab_dim", "\n", "return", "mtf", ".", "reduce_mean", "(", "logits", ",", "reduced_dim", "=", "ensemble_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.reduce_ensemble_logits": [[2106, 2126], ["reduce_fn"], "function", ["None"], ["", "@", "gin", ".", "configurable", "\n", "def", "reduce_ensemble_logits", "(", "logits", ",", "ensemble_dim", ",", "vocab_dim", ",", "\n", "reduce_fn", "=", "reduce_ensemble_logits_mean_prob", ")", ":", "\n", "  ", "\"\"\"Configurable reduction function for decoding from an ensemble.\n\n  reduce_fn is a function which takes:\n     a logits tensor containing ensemble_dim (logits from all models)\n     ensemble_dim\n     vocab_dim\n  and returns a logits tensor without ensemble_dim.\n\n  Args:\n    logits: a mtf.Tensor containing ensemble_dim\n    ensemble_dim: a mtf.Dimension\n    vocab_dim: a mtf.Dimension\n    reduce_fn: a function\n  Returns:\n    a mtf.Tensor with shape logits.shape - ensemble_dim\n  \"\"\"", "\n", "return", "reduce_fn", "(", "logits", ",", "ensemble_dim", ",", "vocab_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.get_vocab_embedding_cls": [[2180, 2191], ["None"], "function", ["None"], ["", "", "@", "gin", ".", "configurable", "\n", "def", "get_vocab_embedding_cls", "(", "cls", "=", "VocabEmbedding", ")", ":", "\n", "  ", "\"\"\"Configurable function to get the class to use for vocab embeddings.\n\n  Args:\n    cls: a class implementing the interface of mtf.transformer VocabEmbedding\n\n  Returns:\n    the class\n  \"\"\"", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sinusoid_positional_embedding_weights": [[2193, 2233], ["mesh_tensorflow.Dimension", "mesh_tensorflow.mtf_range", "mesh_tensorflow.einsum", "mesh_tensorflow.concat", "mesh_tensorflow.cast", "ValueError", "math.log", "max", "mesh_tensorflow.exp", "mesh_tensorflow.sin", "mesh_tensorflow.cos", "float", "float", "float", "mesh_tensorflow.mtf_range"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_range", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.concat", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.exp", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sin", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cos", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.mtf_range"], ["", "def", "sinusoid_positional_embedding_weights", "(", "mesh", ",", "\n", "max_length_dim", ",", "\n", "model_dim", ",", "\n", "dtype", ",", "\n", "min_timescale", "=", "1.0", ",", "\n", "max_timescale", "=", "1.0e4", ")", ":", "\n", "  ", "\"\"\"Gets a bunch of sinusoids of different frequencies.\n\n  Mostly copied from tensor2tensor's get_timing_signal_1d.\n\n  Args:\n    mesh: a mtf.Mesh\n    max_length_dim: a mtf.Dimension\n    model_dim: a mtf.Dimension\n    dtype: a tf.DType\n    min_timescale: a float\n    max_timescale: a float\n\n  Returns:\n    an mtf.Tensor of timing signals with shape [max_length_dim, model_dim]\n  Raises:\n    ValueError: If the model_dim is not divisible by 2.\n  \"\"\"", "\n", "if", "model_dim", ".", "size", "%", "2", ":", "\n", "    ", "raise", "ValueError", "(", "\"model_dim must be divisible by 2\"", ")", "\n", "", "num_timescales", "=", "model_dim", ".", "size", "//", "2", "\n", "timescale_dim", "=", "mtf", ".", "Dimension", "(", "model_dim", ".", "name", ",", "num_timescales", ")", "\n", "log_timescale_increment", "=", "(", "\n", "math", ".", "log", "(", "float", "(", "max_timescale", ")", "/", "float", "(", "min_timescale", ")", ")", "/", "\n", "max", "(", "float", "(", "num_timescales", ")", "-", "1", ",", "1", ")", ")", "\n", "inv_timescales", "=", "min_timescale", "*", "mtf", ".", "exp", "(", "\n", "mtf", ".", "mtf_range", "(", "mesh", ",", "timescale_dim", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "\n", "-", "log_timescale_increment", ")", "\n", "position", "=", "mtf", ".", "mtf_range", "(", "mesh", ",", "max_length_dim", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "scaled_time", "=", "mtf", ".", "einsum", "(", "[", "position", ",", "inv_timescales", "]", ")", "\n", "# Please note that this slightly differs from the published paper.", "\n", "# See a discussion here: https://github.com/tensorflow/tensor2tensor/pull/177", "\n", "embeddings", "=", "mtf", ".", "concat", "(", "\n", "[", "mtf", ".", "sin", "(", "scaled_time", ")", ",", "mtf", ".", "cos", "(", "scaled_time", ")", "]", ",", "model_dim", ".", "name", ")", "\n", "return", "mtf", ".", "cast", "(", "embeddings", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._filter_features": [[72, 75], ["ex.items"], "function", ["None"], ["\n", "return", "device", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.parse_gin_defaults_and_flags": [[77, 91], ["gin.parse_config_file", "gin.parse_config_file", "gin.parse_config_files_and_bindings", "gin.parse_config_files_and_bindings", "gin.add_config_file_search_path", "gin.add_config_file_search_path", "pkg_resources.resource_filename"], "function", ["None"], ["\n", "\n", "def", "create_host_call", "(", "model_dir", ")", ":", "\n", "  ", "\"\"\"Construct a host_call writing scalar summaries.\n\n  Borrowed from t2t.\n  TODO(noam): remove this code once there is a better way to get summaries on\n  TPU.\n\n  Args:\n    model_dir: String containing path to train\n\n  Returns:\n    (fn, args) Pair to be called by TPUEstimator as the host_call.\n  \"\"\"", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_variable_dtype": [[95, 116], ["mesh_tensorflow.VariableDType", "tensorflow.as_dtype", "tensorflow.as_dtype", "tensorflow.as_dtype"], "function", ["None"], ["\n", "def", "maybe_cast", "(", "tensor", ")", ":", "\n", "    ", "assert", "tensor", ".", "shape", ".", "is_compatible_with", "(", "[", "]", ")", ",", "tensor", ".", "name", "\n", "if", "tensor", ".", "dtype", "==", "tf", ".", "int64", ":", "\n", "      ", "return", "tf", ".", "to_int32", "(", "tensor", ")", "\n", "", "if", "tensor", ".", "dtype", "==", "tf", ".", "bfloat16", ":", "\n", "      ", "return", "tf", ".", "cast", "(", "tensor", ",", "tf", ".", "float32", ")", "\n", "", "return", "tensor", "\n", "\n", "", "reshaped_tensors", "=", "[", "tf", ".", "reshape", "(", "maybe_cast", "(", "t", ")", ",", "[", "1", "]", ")", "for", "_", ",", "t", "in", "summaries", "]", "\n", "\n", "# When no supported summaries are found, don't create host_call. Otherwise,", "\n", "# TPU outfeed queue would enqueue global_step while host_call doesn't dequeue", "\n", "# it, eventually causing hang.", "\n", "if", "not", "reshaped_tensors", ":", "\n", "    ", "return", "None", "\n", "\n", "", "def", "host_call_fn", "(", "global_step", ",", "*", "args", ")", ":", "\n", "    ", "\"\"\"Training host call. Creates scalar summaries for training metrics.\"\"\"", "\n", "# This function is executed on the CPU and should not directly reference", "\n", "# any Tensors in the rest of the `model_fn`. To pass Tensors from the", "\n", "# model to the `model_fn`, provide as part of the `host_call`.", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.inputs_vocabulary": [[118, 130], ["isinstance"], "function", ["None"], ["with", "tf2", ".", "summary", ".", "create_file_writer", "(", "model_dir", ")", ".", "as_default", "(", ")", ":", "\n", "# We cannot directly use any tensor from summaries, because each", "\n", "# tensor here must be a concat of multiple tensors from all shards.", "\n", "# Therefore, we rely on the assumption that args wil have the same", "\n", "# length as summaries, and all tensors in args will have the same", "\n", "# order of self._tup_summaries.", "\n", "      ", "assert", "len", "(", "args", ")", "==", "len", "(", "summaries", ")", "\n", "for", "i", ",", "tensor", "in", "enumerate", "(", "args", ")", ":", "\n", "        ", "name", "=", "summaries", "[", "i", "]", "[", "0", "]", "\n", "tf2", ".", "summary", ".", "scalar", "(", "\n", "name", ",", "tf", ".", "reduce_mean", "(", "tensor", ")", ",", "step", "=", "global_step", ")", "\n", "", "return", "tf", ".", "summary", ".", "all_v2_summary_ops", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.targets_vocabulary": [[132, 144], ["isinstance"], "function", ["None"], ["return", "host_call_fn", ",", "[", "global_step_t", "]", "+", "reshaped_tensors", "\n", "\n", "\n", "", "def", "topology_rank", "(", "topology", ")", ":", "\n", "# Deserialize the Topology proto, if it is a string.", "\n", "  ", "if", "isinstance", "(", "topology", ",", "bytes", ")", ":", "\n", "    ", "topology", "=", "Topology", "(", "serialized", "=", "topology", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "topology", ",", "Topology", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'`topology` is not a Topology object; got {}'", ".", "format", "(", "\n", "type", "(", "topology", ")", ")", ")", "\n", "\n", "", "return", "len", "(", "topology", ".", "mesh_shape", ")", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.separate_vocabularies": [[146, 150], ["None"], "function", ["None"], ["\n", "", "def", "remove_summaries", "(", ")", ":", "\n", "  ", "\"\"\"Remove summaries from the default graph.\"\"\"", "\n", "g", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "key", "=", "'mtf_scalar_summaries'", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.init_checkpoint_variable_mapping": [[152, 159], ["utils.flexible_ckpt_init_mapping.mapping_fn"], "function", ["None"], ["del", "g", ".", "get_collection_ref", "(", "key", ")", "[", ":", "]", "\n", "assert", "not", "g", ".", "get_collection", "(", "key", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.should_load_variable": [[161, 168], ["utils.flexible_ckpt_init_mapping.filter_fn"], "function", ["None"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.build_model": [[172, 243], ["mesh_tensorflow.transformer.transformer.make_bitransformer", "mesh_tensorflow.transformer.transformer.make_bi_student_teacher", "mesh_tensorflow.transformer.transformer.Unitransformer", "ValueError", "mesh_tensorflow.transformer.transformer.make_layer_stack"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.make_bitransformer", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.make_bi_student_teacher", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.make_layer_stack"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.tpu_mesh_shape": [[245, 295], ["tpu_topology.startswith", "isinstance", "mesh_tensorflow.Shape", "int", "mesh_tensorflow.simd_mesh_impl.HierarchicalTiling.spec_to_mesh_shape", "dims.append", "dims.append", "dims.append", "re.split", "int", "functools.reduce", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tpu_topology.split", "tpu_topology.split"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.HierarchicalTiling.spec_to_mesh_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.variable_filter_max_size": [[297, 300], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._build_ckpt_to_local_var_name_mapping": [[302, 354], ["range", "range", "zip", "range", "range", "len", "len", "ValueError", "all_ckpt_name_regexes.append", "all_local_name_regexes.append", "utils._build_ckpt_to_local_var_name_mapping.build_regex"], "function", ["None"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._match_ckpt_to_local_var_name": [[356, 380], ["ckpt_var_name_to_local_var_name.items", "ckpt_var_name.split", "local_var_name.split", "re.match", "re.match", "ckpt_var_name.replace", "ckpt_regex.split", "var_regex.split"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._compute_num_blocks_and_layer": [[382, 410], ["any", "max", "utils._compute_num_blocks_and_layer.get_max_layer_or_block_num"], "function", ["None"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.flexible_ckpt_init_mapping": [[412, 499], ["tensorflow.logging.info", "utils._compute_num_blocks_and_layer", "utils._compute_num_blocks_and_layer", "len", "utils._build_ckpt_to_local_var_name_mapping", "utils._build_ckpt_to_local_var_name_mapping", "utils._build_ckpt_to_local_var_name_mapping", "tensorflow.train.list_variables", "tensorflow.global_variables", "utils._match_ckpt_to_local_var_name"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._compute_num_blocks_and_layer", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._compute_num_blocks_and_layer", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._build_ckpt_to_local_var_name_mapping", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._build_ckpt_to_local_var_name_mapping", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._build_ckpt_to_local_var_name_mapping", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._match_ckpt_to_local_var_name"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.tpu_estimator_model_fn": [[501, 1090], ["gin.configurable", "gin.configurable", "tensorflow.train.get_global_step", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "features.pop", "features.items", "mesh_tensorflow.utils.BalancedVariablePlacer", "mesh_tensorflow.simd_mesh_impl.SimdMeshImpl", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "tensorflow.cast", "tensorflow.reshape", "mesh_tensorflow.import_fully_replicated", "_verify_feature_exists"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.import_fully_replicated"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.metric_sum": [[1092, 1101], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.assign_add", "tensorflow.reduce_sum", "tensorflow.zeros_initializer", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign_add", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.metric_max": [[1103, 1113], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.assign", "tensorflow.maximum", "tensorflow.zeros_initializer", "tensorflow.reduce_max", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_max", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._dynamic_text2self": [[1115, 1216], ["tensorflow.logging.info", "mesh_tensorflow.Dimension", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.range", "mesh_tensorflow.to_int32", "mesh_tensorflow.gather", "mesh_tensorflow.Dimension", "mesh_tensorflow.range", "mesh_tensorflow.cumsum", "mesh_tensorflow.to_int32", "mesh_tensorflow.to_int32", "mesh_tensorflow.cast", "mesh_tensorflow.cast", "mesh_tensorflow.one_hot", "mesh_tensorflow.one_hot", "mesh_tensorflow.not_equal", "mesh_tensorflow.to_int32", "mesh_tensorflow.gather", "mesh_tensorflow.equal", "mesh_tensorflow.gather", "mesh_tensorflow.equal", "mesh_tensorflow.rename_dimension", "utils._dynamic_text2self._convert"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cumsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.not_equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_inputs_from_file": [[1218, 1236], ["tensorflow.io.gfile.GFile", "tensorflow.logging.info", "inputs.pop", "line.rstrip", "l.startswith"], "function", ["None"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.encode_inputs": [[1238, 1281], ["len", "enumerate", "np.array.extend", "numpy.array", "inputs_vocabulary().encode", "np.array.append", "line.strip", "unscored_prefix[].strip", "len", "inputs_vocabulary().encode.extend", "utils.inputs_vocabulary", "inputs_vocabulary().encode", "len", "utils.inputs_vocabulary"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.inputs_vocabulary", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.inputs_vocabulary"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.encode_delimited_lm": [[1283, 1321], ["len", "zip", "np.array.extend", "numpy.array", "targets_vocabulary().encode", "np.array.append", "inputs_vocabulary().encode", "tgt.strip", "targets_vocabulary().encode.append", "len", "ids.extend", "inp.strip", "utils.targets_vocabulary", "utils.inputs_vocabulary", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.targets_vocabulary", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.inputs_vocabulary"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.decode": [[1323, 1358], ["tensorflow.compat.v1.estimator.predict", "enumerate", "isinstance", "vocab.decode", "utils.decode._maybe_detokenize", "tensorflow.compat.v1.estimator", "tensorflow.compat.v1.estimator", "tensorflow.compat.v1.estimator"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.compute_log_likelihoods": [[1360, 1377], ["tensorflow.compat.v1.estimator.predict", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.write_lines_to_file": [[1379, 1392], ["tensorflow.io.gfile.exists", "tensorflow.io.gfile.makedirs", "tensorflow.io.gfile.remove", "os.path.dirname", "tensorflow.io.gfile.GFile", "output_file.write", "str().replace", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._get_combined_dataset_input_fn": [[1394, 1429], ["combined_ds.prefetch.batch", "mesh_tensorflow.transformer.dataset.trim_and_pad_dataset", "combined_ds.prefetch.prefetch", "mesh_tensorflow.transformer.dataset.dataset_fn", "ds.map.map", "combined_ds.prefetch.concatenate"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.trim_and_pad_dataset"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_step_from_checkpoint_path": [[1431, 1451], ["re.match", "int", "ValueError", "re.match.group"], "function", ["None"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.decode_from_file": [[1454, 1501], ["utils.get_inputs_from_file", "utils.encode_inputs", "utils.get_step_from_checkpoint_path", "list", "utils.write_lines_to_file", "tensorflow.data.Dataset.from_tensor_slices", "dataset.prefetch.flat_map", "dataset.prefetch.batch", "dataset.prefetch.prefetch", "utils.decode", "len", "tensorflow.data.Dataset.from_tensors().repeat", "tensorflow.data.Dataset.from_tensors"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_inputs_from_file", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.encode_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_step_from_checkpoint_path", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.write_lines_to_file", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.decode_from_dataset": [[1503, 1584], ["infer_dataset_fn", "utils._get_combined_dataset_input_fn", "utils.get_step_from_checkpoint_path", "list", "tensorflow.logging.info", "ValueError", "utils.decode", "tensorflow.Graph().as_default", "infer_dataset.dataset_fn", "list", "utils._maybe_add_pretokenized_features", "len", "os.path.join", "utils.write_lines_to_file", "os.path.join", "utils.write_lines_to_file", "os.path.join", "utils.write_lines_to_file", "tensorflow.Graph", "tensorflow_datasets.as_numpy", "targets.append", "infer_dataset.postprocess_fn"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._get_combined_dataset_input_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_step_from_checkpoint_path", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._maybe_add_pretokenized_features", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.write_lines_to_file", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.write_lines_to_file", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.write_lines_to_file"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.clean_decodes": [[1586, 1603], ["tensorflow.cumsum", "tensorflow.equal", "tensorflow.where_v2", "tensorflow.cast", "tensorflow.equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cumsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.save_scores": [[1605, 1662], ["ValueError", "utils.write_lines_to_file", "utils._maybe_add_pretokenized_features", "r.get", "utils.write_lines_to_file", "numpy.array", "numpy.argmax", "utils.save_scores.get_sequence_length"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.write_lines_to_file", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._maybe_add_pretokenized_features", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.write_lines_to_file", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.save_scores_to_tfrecords": [[1664, 1709], ["utils._maybe_add_pretokenized_features", "tensorflow.logging.info", "r.get", "r.get", "r.get", "tensorflow.io.TFRecordWriter", "zip", "r.get", "tensorflow.train.Example().SerializeToString", "file_writer.write", "r.split", "tensorflow.train.Example", "tensorflow.train.Features", "tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.BytesList", "tensorflow.train.BytesList", "tensorflow.train.FloatList", "bytes", "bytes"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._maybe_add_pretokenized_features", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.score_with_estimator": [[1711, 1747], ["utils.get_checkpoint_iterator", "tensorflow.compat.v1.estimator.predict", "list", "score_postprocess_fn", "next", "len", "enumerate", "x.any"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_checkpoint_iterator"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.score_with_estimator_lazy": [[1749, 1812], ["tensorflow.logging.info", "utils.get_checkpoint_iterator", "tensorflow.compat.v1.estimator.predict", "time.time", "enumerate", "math.ceil", "results.append", "len", "score_postprocess_fn", "score_postprocess_fn", "tensorflow.logging.info", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_checkpoint_iterator"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._maybe_add_pretokenized_features": [[1814, 1856], ["utils.inputs_vocabulary", "utils.targets_vocabulary", "example[].tolist", "vocabulary[].decode", "abs", "vocabulary[].decode", "tensorflow.logging.warning"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.inputs_vocabulary", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.targets_vocabulary", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.score_from_strings": [[1858, 1944], ["isinstance", "isinstance", "score_with_estimator_fn", "utils.get_inputs_from_file", "utils.get_inputs_from_file", "utils.encode_inputs", "utils.encode_inputs", "tensorflow.data.Dataset.from_tensor_slices", "dataset.batch.flat_map", "dataset.batch.batch", "dataset.batch.prefetch", "len", "len", "len", "utils.encode_inputs", "len", "len", "ValueError", "len", "len", "len", "len", "range", "len", "ValueError", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_inputs_from_file", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_inputs_from_file", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.encode_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.encode_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.encode_inputs"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.score_from_dataset": [[1946, 1990], ["score_dataset_fn", "utils._get_combined_dataset_input_fn", "score_with_estimator_fn", "tensorflow.compat.v1.estimator"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._get_combined_dataset_input_fn"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_estimator": [[1992, 2107], ["tensorflow.python.tpu.tpu_config.TPUConfig", "tensorflow.python.tpu.tpu_config.RunConfig", "utils.build_model", "utils.tpu_estimator_model_fn", "tensorflow.python.tpu.tpu_estimator.TPUEstimator", "tensorflow.ConfigProto", "tensorflow.GraphOptions", "utils.inputs_vocabulary", "utils.targets_vocabulary", "tensorflow.core.protobuf.rewriter_config_pb2.RewriterConfig"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.build_model", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.tpu_estimator_model_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.inputs_vocabulary", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.targets_vocabulary"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.train_model": [[2109, 2177], ["tensorflow.compat.v1.estimator.train", "ValueError", "train_dataset_fn", "dataset.skip.repeat().batch", "dataset.skip.prefetch", "hooks.append", "tensorflow.compat.v1.estimator.get_variable_value", "tensorflow.data.experimental.CheckpointInputPipelineHook", "dataset.skip.repeat", "tensorflow.compat.v1.estimator.latest_checkpoint", "tensorflow.logging.info", "dataset.skip.skip"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.train"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.infer_model": [[2179, 2217], ["utils.get_checkpoint_iterator", "decode_fn", "tensorflow.compat.v1.estimator"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_checkpoint_iterator"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.eval_model": [[2219, 2436], ["eval_dataset_fn", "tensorflow.summary.FileWriter", "tensorflow.logging.info", "callable", "utils._get_combined_dataset_input_fn", "utils.get_checkpoint_iterator", "ValueError", "ValueError", "valid_eval_datasets.append", "tensorflow.logging.info", "os.path.join", "tensorflow.Graph().as_default", "tensorflow.logging.info", "functools.partial", "tensorflow.compat.v1.estimator.", "tensorflow.logging.info", "int", "callable", "tensorflow.logging.info", "mesh_tensorflow.transformer.dataset.EvalDataset", "tensorflow.logging.warning", "utils.get_step_from_checkpoint_path", "score_with_estimator_fn", "len", "int", "tf.summary.FileWriter.flush", "ValueError", "tensorflow.Graph", "eval_dataset.dataset_fn", "tensorflow_datasets.as_numpy", "tensorflow.logging.warning", "eval_dataset.postprocess_fn", "utils.get_step_from_checkpoint_path", "os.path.join", "utils.write_lines_to_file", "tensorflow.Summary", "metric_fn", "isinstance", "sum", "len", "max", "max", "examples.append", "os.path.join", "utils.write_lines_to_file", "os.path.join", "utils.write_lines_to_file", "sum", "isinstance", "d.decode", "utils.decode", "zip", "tensorflow.logging.info", "tf.summary.FileWriter.add_summary", "metric_fn.items", "tf.summary.FileWriter.add_summary", "len", "len", "len", "inputs.append", "isinstance", "targets.append", "tensorflow.logging.info", "tf.Summary.value.add", "len", "targets_pretokenized.decode.decode", "eval_dataset.postprocess_fn", "len", "cached_targets.values", "cached_examples.values"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils._get_combined_dataset_input_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_checkpoint_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_step_from_checkpoint_path", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_step_from_checkpoint_path", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.write_lines_to_file", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.write_lines_to_file", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.write_lines_to_file", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.export_model": [[2438, 2531], ["tensorflow.compat.v1.estimator.export_saved_model", "mesh_tensorflow.transformer.dataset.pack_or_pad", "tensorflow.debugging.assert_less_equal", "dataset.map.batch", "mesh_tensorflow.transformer.dataset.trim_and_pad_dataset", "tensorflow.data.experimental.get_single_element", "tensorflow.compat.v1.estimator.export.ServingInputReceiver", "tensorflow.placeholder", "str_placeholder", "tensorflow.compat.v1.estimator"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pack_or_pad", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.trim_and_pad_dataset"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.compute_batch_size": [[2533, 2591], ["max", "mesh_tensorflow.tensor_dim_to_mesh_dim_size", "mesh_tensorflow.tensor_dim_to_mesh_dim_size", "max.values", "utils.compute_batch_size.checkdiv"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tensor_dim_to_mesh_dim_size", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tensor_dim_to_mesh_dim_size"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.serialize_num_microbatches": [[2593, 2642], ["mesh_tensorflow.tensor_dim_to_size_per_split", "max", "tensorflow.logging.info", "int", "max", "sequence_length.values"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.tensor_dim_to_size_per_split"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.auto_train_steps": [[2644, 2665], ["max", "sequence_length.values"], "function", ["None"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_checkpoint_iterator": [[2667, 2767], ["set", "tensorflow.io.gfile.listdir", "float", "os.path.join", "utils.get_checkpoint_iterator._get_checkpoint_path"], "function", ["None"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run": [[2771, 3074], ["isinstance", "isinstance", "callable", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_layout_rules", "tensorflow.logging.info", "functools.partial", "isinstance", "utils.compute_batch_size", "isinstance", "train_steps.", "functools.partial", "functools.partial", "tensorflow.logging.info", "ValueError", "tensorflow.distribute.cluster_resolver.TPUClusterResolver", "functools.partial.", "train_model_fn", "ValueError", "ValueError", "utils.get_checkpoint_iterator", "eval_dataset_fn", "eval_dataset.dataset_fn().map", "mesh_tensorflow.transformer.dataset.pad_dataset_with_zeroed_out_examples", "ds.batch().prefetch.batch().prefetch", "utils.eval_model", "tensorflow.logging.warning", "ValueError", "tensorflow.random.set_random_seed", "random.seed", "estimator_fn.evaluate", "utils.infer_model", "mesh_tensorflow.transformer.dataset.EvalDataset", "eval_dataset.dataset_fn", "ds.batch().prefetch.batch", "utils.score_from_strings", "functools.partial", "utils.score_from_dataset", "functools.partial", "utils.export_model", "ValueError", "tensorflow.logging.warning", "utils.get_checkpoint_iterator", "isinstance", "next"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.compute_batch_size", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_checkpoint_iterator", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.dataset.pad_dataset_with_zeroed_out_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.eval_model", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.infer_model", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.score_from_strings", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.score_from_dataset", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.export_model", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.get_checkpoint_iterator"], []], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.__init__": [[30, 125], ["len", "ValueError", "len", "ValueError", "len", "ValueError", "sum", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "layers", ",", "\n", "n_blocks", "=", "gin", ".", "REQUIRED", ",", "\n", "block_param_size", "=", "gin", ".", "REQUIRED", ",", "\n", "block_repeat_size", "=", "gin", ".", "REQUIRED", ",", "\n", "pooling_size", "=", "2", ",", "\n", "sublayers_initial", "=", "None", ",", "\n", "sublayers_per_layer", "=", "None", ",", "\n", "sublayers_final", "=", "None", ",", "\n", "pooling_type", "=", "\"mean\"", ",", "\n", "n_submodules", "=", "2", ")", ":", "\n", "    ", "\"\"\"Create a LayerStack specialized for FunnelTransformer.\n\n    The design of this class follows the transformer.LayerStack. See the\n    docstring of that class for how the layer stack is built. Here we only\n    discuss the features unique to the Funnel Transformer.\n\n    This implementation has subtle difference from the Funnel Transformer\n    introduced in https://arxiv.org/abs/2006.03236.\n\n    1. Application to encoder-decoder model.\n    The original Funnel Transformer was proposed for the encoder-only\n    architectures such as BERT. In A.3 section of the paper, they discuss\n    potential extension of the core idea to other model architectures. For\n    encoder-decoder models, the authors suggest that the Funnel Transformer idea\n    can be used to modify the encoder such that \"the key difference compared to\n    conventional models is the source side compression Funnel-Transformer\n    provides\".\n\n    Therefore, we don't modify the decoder, i.e., we use the standard\n    transformer.LayerStack and this class is only applicable to the encoder.\n\n    2. Relative attention\n    We use the simplified reletive attention scalar from the T5, whereas the\n    Funnel Transformer paper uses the relative attention from the Transformer-XL\n    (https://arxiv.org/abs/1901.02860).\n\n    3. The order of pooling operation\n    In the Funnel Transformer paper, only the query is pooled while key and\n    value are kept intact. The resulting attention output has the same length as\n    the query, enabling the residual connection.\n\n    In our implementation, we apply the regular SelfAttention and then apply the\n    pooling to the output. Since each sequence position in query is\n    independently computed, we expect the difference between these\n    implmentations to be negligible.\n\n    Args:\n      layers: a list of TransformerLayer\n      n_blocks: an integer specifying the number of Funnel Transformer blocks.\n      block_param_size: a list of integers specifying the number of layers in\n        each block.\n      block_repeat_size: a list of integers specifying the number of repeated\n        layers in each block. The repeated layers share the parameters.\n      pooling_size: an integer specifying the pool size\n      sublayers_initial: an optional list of sublayer functions\n      sublayers_per_layer: an optional list of sublayer functions\n      sublayers_final: an optional list of sublayer functions\n      pooling_type: a string specifying the pooling type. One of \"mean\", \"max\",\n        or \"min\".\n      n_submodules: an integer specifying the number of submodules (e.g.,\n        SelfAttention and DenseReluDense for each layer of a block.\n    \"\"\"", "\n", "if", "len", "(", "block_param_size", ")", "!=", "n_blocks", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Number of blocks should match the length of block_param_size.\"", ")", "\n", "\n", "", "if", "len", "(", "block_repeat_size", ")", "!=", "n_blocks", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Number of blocks should match the length of block_repeat_size.\"", ")", "\n", "\n", "", "if", "len", "(", "layers", ")", "!=", "sum", "(", "block_param_size", ")", "*", "n_submodules", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Total number of submodules should match the number of layers.\"", ")", "\n", "\n", "", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "n_blocks", "=", "n_blocks", "\n", "self", ".", "block_param_size", "=", "block_param_size", "\n", "self", ".", "block_repeat_size", "=", "block_repeat_size", "\n", "self", ".", "pooling_size", "=", "pooling_size", "\n", "\n", "self", ".", "_sublayers_initial", "=", "sublayers_initial", "\n", "self", ".", "_sublayers_per_layer", "=", "sublayers_per_layer", "\n", "self", ".", "_sublayers_final", "=", "sublayers_final", "\n", "\n", "if", "pooling_type", "==", "\"mean\"", ":", "\n", "      ", "self", ".", "pool_fn", "=", "mtf", ".", "reduce_mean", "\n", "", "elif", "pooling_type", "==", "\"max\"", ":", "\n", "      ", "self", ".", "pool_fn", "=", "mtf", ".", "reduce_max", "\n", "", "elif", "pooling_type", "==", "\"min\"", ":", "\n", "      ", "self", ".", "pool_fn", "=", "mtf", ".", "reduce_min", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Unknown pooling type. Choose among 'mean', 'max' or 'min'\"", ")", "\n", "", "self", ".", "n_submodules", "=", "n_submodules", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.update_context": [[126, 152], ["mesh_tensorflow.slice", "mesh_tensorflow.Dimension", "mesh_tensorflow.stride_tensor_1d", "x.shape.get_dim_by_name", "x.shape.get_dim_by_name"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.stride_tensor_1d", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Shape.get_dim_by_name"], ["", "def", "update_context", "(", "self", ",", "context", ",", "x", ",", "pool_dim_name", ")", ":", "\n", "    ", "\"\"\"Update the length dimension, sequence_id and position information.\"\"\"", "\n", "\n", "pooled_seq_length", "=", "x", ".", "shape", ".", "get_dim_by_name", "(", "pool_dim_name", ")", ".", "size", "\n", "# For position, we slice the first `pooled_seq_length` indices instead of", "\n", "# striding. This ensures that the 3rd position before the pooling becomes", "\n", "# 2nd position after pooling instead of remembering its position before", "\n", "# pooling.", "\n", "new_context_position", "=", "mtf", ".", "slice", "(", "\n", "context", ".", "position", ",", "\n", "begin", "=", "0", ",", "\n", "size", "=", "pooled_seq_length", ",", "\n", "slice_dim_name", "=", "pool_dim_name", ")", "\n", "context", ".", "position", "=", "new_context_position", "\n", "\n", "pooled_seq_length", "=", "x", ".", "shape", ".", "get_dim_by_name", "(", "pool_dim_name", ")", ".", "size", "\n", "new_length_dim", "=", "mtf", ".", "Dimension", "(", "\n", "name", "=", "pool_dim_name", ",", "size", "=", "pooled_seq_length", ")", "\n", "\n", "new_sequence_id", "=", "mtf", ".", "stride_tensor_1d", "(", "\n", "context", ".", "sequence_id", ",", "\n", "pool_dim", "=", "context", ".", "length_dim", ",", "\n", "pool_size", "=", "self", ".", "pooling_size", ")", "\n", "\n", "context", ".", "length_dim", "=", "new_length_dim", "\n", "context", ".", "sequence_id", "=", "new_sequence_id", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.call": [[153, 202], ["funnel_transformer.FunnelTransformerLayerStack._call_sublayers", "context.layer_outputs.append", "range", "funnel_transformer.FunnelTransformerLayerStack._call_sublayers", "mesh_tensorflow.transformer.transformer.sublayer_mask_padding", "context.layer_outputs.append", "funnel_transformer.FunnelTransformerLayerStack.set_context", "range", "range", "range", "layer.set_name", "tensorflow.variable_scope", "funnel_transformer.FunnelTransformerLayerStack._layer_fn", "mesh_tensorflow.pool_tensor_1d", "funnel_transformer.FunnelTransformerLayerStack.update_context", "context.layer_outputs.append", "len"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._call_sublayers", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._call_sublayers", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.sublayer_mask_padding", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.set_context", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.TransformerLayer.set_name", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._layer_fn", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.pool_tensor_1d", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.update_context"], ["", "def", "call", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "    ", "\"\"\"Call the layer stack.\"\"\"", "\n", "x", "=", "self", ".", "_call_sublayers", "(", "self", ".", "_sublayers_initial", ",", "x", ",", "context", ")", "\n", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "\n", "assert", "context", ".", "layer_index", "==", "0", "\n", "\n", "for", "block_idx", "in", "range", "(", "self", ".", "n_blocks", ")", ":", "\n", "      ", "for", "param_idx", "in", "range", "(", "self", ".", "block_param_size", "[", "block_idx", "]", ")", ":", "\n", "# Number of layers to (locally) share parameters.", "\n", "        ", "cur_repeat_size", "=", "self", ".", "block_repeat_size", "[", "block_idx", "]", "\n", "for", "repeat_idx", "in", "range", "(", "cur_repeat_size", ")", ":", "\n", "# context.do_pooling = block_idx > 0 and sub_idx == 0", "\n", "\n", "# Submodules are transformer.TransformerLayer objects such as", "\n", "# SelfAttention and DenseReluDense.", "\n", "          ", "for", "submodule_idx", "in", "range", "(", "self", ".", "n_submodules", ")", ":", "\n", "            ", "layer", "=", "self", ".", "_layers", "[", "context", ".", "layer_index", "]", "\n", "name", "=", "(", "f\"funnel_block_{block_idx:03d}/\"", "\n", "f\"param_idx_{param_idx:03d}/\"", "\n", "f\"submodule_{submodule_idx:03d}\"", ")", "\n", "# Override the layer name given in transformer.make_layer_stack.", "\n", "layer", ".", "set_name", "(", "name", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "layer", ".", "name", "or", "\"\"", ")", ":", "\n", "              ", "x", "=", "self", ".", "_layer_fn", "(", "x", ",", "layer", ",", "context", ")", "\n", "\n", "# Do pooling if the current layer", "\n", "# 1) does not belong to the first block", "\n", "# 2) is the first layer within the current block", "\n", "# 3) is the first submodule (typically SelfAttention).", "\n", "", "sub_idx", "=", "(", "param_idx", "*", "cur_repeat_size", "+", "repeat_idx", ")", "\n", "if", "block_idx", ">", "0", "and", "sub_idx", "==", "0", "and", "submodule_idx", "==", "0", ":", "\n", "              ", "x", "=", "mtf", ".", "pool_tensor_1d", "(", "\n", "x", ",", "\n", "pool_dim", "=", "context", ".", "length_dim", ",", "\n", "reduce_fn", "=", "self", ".", "pool_fn", ",", "\n", "pool_size", "=", "self", ".", "pooling_size", ")", "\n", "self", ".", "update_context", "(", "context", ",", "x", ",", "pool_dim_name", "=", "\"length\"", ")", "\n", "\n", "", "if", "context", ".", "layer_index", "!=", "len", "(", "self", ".", "_layers", ")", "-", "1", ":", "\n", "              ", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "", "context", ".", "layer_index", "+=", "1", "\n", "\n", "", "", "", "", "x", "=", "self", ".", "_call_sublayers", "(", "self", ".", "_sublayers_final", ",", "x", ",", "context", ")", "\n", "x", "=", "transformer", ".", "sublayer_mask_padding", "(", "x", ",", "self", ",", "context", ")", "\n", "context", ".", "layer_outputs", ".", "append", "(", "x", ")", "\n", "self", ".", "set_context", "(", "context", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._call_sublayers": [[203, 207], ["s"], "methods", ["None"], ["", "def", "_call_sublayers", "(", "self", ",", "sublayers", ",", "x", ",", "context", ")", ":", "\n", "    ", "for", "s", "in", "sublayers", ":", "\n", "      ", "x", "=", "s", "(", "x", ",", "self", ",", "context", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._layer_fn": [[208, 230], ["funnel_transformer.FunnelTransformerLayerStack._call_sublayers", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack._call_sublayers"], ["", "def", "_layer_fn", "(", "self", ",", "x", ",", "layer", ",", "context", ")", ":", "\n", "    ", "\"\"\"Call the layer and its associated sublayers.\n\n    Args:\n      x: a Tensor\n      layer: a Layer\n      context: a Context\n    Returns:\n      a Tensor\n    \"\"\"", "\n", "context", ".", "current_layer", "=", "layer", "\n", "context", ".", "current_layer_input", "=", "x", "\n", "y", "=", "self", ".", "_call_sublayers", "(", "self", ".", "_sublayers_per_layer", ",", "x", ",", "context", ")", "\n", "\n", "# When pooling is done, context.current_layer_input will be updated inside", "\n", "# SelfAttentionPoolQ.call method, i.e., x != context.current_layer_input. So", "\n", "# we use context.current_layer_input to check the shape consistency.", "\n", "if", "y", ".", "shape", "!=", "context", ".", "current_layer_input", ".", "shape", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Layer %s returned misshaped output x=%s y=%s\"", "\n", "%", "(", "layer", ".", "__class__", ".", "__name__", ",", "x", ",", "y", ")", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.layers": [[231, 234], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "layers", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.set_context": [[235, 237], ["None"], "methods", ["None"], ["", "def", "set_context", "(", "self", ",", "context", ")", ":", "\n", "    ", "self", ".", "_context", "=", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.FunnelTransformerLayerStack.context": [[238, 241], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "context", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_context", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.call_simple": [[254, 340], ["mesh_tensorflow.VariableDType", "funnel_transformer.BitransformerFunnel._shared_params", "funnel_transformer.BitransformerFunnel.encoder.call_simple", "mesh_tensorflow.layers.rename_length_to_memory_length", "mesh_tensorflow.layers.rename_length_to_memory_length", "funnel_transformer.BitransformerFunnel.decoder.call_simple", "mesh_tensorflow.minimum", "mesh_tensorflow.minimum", "mesh_tensorflow.transformer.transformer.autoregressive_inputs", "mesh_tensorflow.layers.rename_length_to_memory_length"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer._shared_params", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.call_simple", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.call_simple", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.autoregressive_inputs", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length"], ["def", "call_simple", "(", "self", ",", "\n", "inputs", ",", "\n", "targets", ",", "\n", "compute_loss", ",", "\n", "mode", "=", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ",", "\n", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "tf", ".", "float32", ")", ",", "\n", "encoder_sequence_id", "=", "None", ",", "\n", "decoder_sequence_id", "=", "None", ",", "\n", "decoder_subsequence_id", "=", "None", ",", "\n", "encoder_position", "=", "None", ",", "\n", "decoder_position", "=", "None", ",", "\n", "num_microbatches", "=", "1", ")", ":", "\n", "    ", "\"\"\"Compute logits based on inputs (all positions in parallel).\n\n    This is called during training and evaluation.\n\n    This class inherits the trnasformer.Bitransformer with one difference. The\n    encoder is Funnel Transformer. So the length dimension is reduced. The\n    decoder needs to use the updated `encoder_sequence_id`.\n\n    Args:\n      inputs: an int32 Tensor with shape [<batch_dims>, length_dim]\n      targets: an optional int32 Tensor with shape [<batch_dims>, length_dim]\n      compute_loss: a boolean\n      mode: a tf.estimator.ModeKeys\n      variable_dtype: a mtf.VariableDType\n      encoder_sequence_id: an optional Tensor\n      decoder_sequence_id: an optional Tensor\n      decoder_subsequence_id: an optional Tensor\n      encoder_position: an optional Tensor\n      decoder_position: an optional Tensor\n      num_microbatches: integer - greater than one if the step has been\n        serialized into multiple microbatches to save memory.\n\n    Returns:\n      logits: a Tensor with shape [<batch_dims>, output_vocab_dim]\n      loss: an optional Scalar (if compute_loss=True)\n    \"\"\"", "\n", "# encoder_sequene_id and decoder_sequence_id are used to delineate packed", "\n", "# examples but are also necessary to indicate padding where sequence_id==0.", "\n", "# If they are absent, then we assume that padding is indicated by zeros in", "\n", "# the inputs/targets, and we make up sequence_id tensors to indicate this.", "\n", "if", "encoder_sequence_id", "is", "None", ":", "\n", "      ", "encoder_sequence_id", "=", "mtf", ".", "minimum", "(", "inputs", ",", "1", ")", "\n", "", "if", "decoder_sequence_id", "is", "None", ":", "\n", "      ", "decoder_sequence_id", "=", "mtf", ".", "minimum", "(", "targets", ",", "1", ")", "\n", "", "encoder_layer_outputs", "=", "[", "]", "\n", "shared_params", "=", "self", ".", "_shared_params", "(", "inputs", ".", "mesh", ",", "variable_dtype", ")", "\n", "encoder_output", ",", "encoder_loss", "=", "self", ".", "encoder", ".", "call_simple", "(", "\n", "inputs", ",", "\n", "None", ",", "\n", "compute_loss", ",", "\n", "mode", "=", "mode", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "sequence_id", "=", "encoder_sequence_id", ",", "\n", "position", "=", "encoder_position", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "layer_outputs", "=", "encoder_layer_outputs", ",", "\n", "num_microbatches", "=", "num_microbatches", ")", "\n", "encoder_output", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "encoder_output", ")", "\n", "\n", "# The sequence_id is updated inside the layer_stack due to pooling. So we", "\n", "# need to use the updated sequence_id stored in the context.", "\n", "encoder_sequence_id", "=", "self", ".", "encoder", ".", "layer_stack", ".", "context", ".", "sequence_id", "\n", "encoder_sequence_id", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "\n", "encoder_sequence_id", ")", "\n", "\n", "logits", ",", "loss", "=", "self", ".", "decoder", ".", "call_simple", "(", "\n", "transformer", ".", "autoregressive_inputs", "(", "\n", "targets", ",", "sequence_id", "=", "decoder_sequence_id", ")", ",", "\n", "targets", ",", "\n", "compute_loss", ",", "\n", "mode", "=", "mode", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "sequence_id", "=", "decoder_sequence_id", ",", "\n", "subsequence_id", "=", "decoder_subsequence_id", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_sequence_id", "=", "encoder_sequence_id", ",", "\n", "encoder_inputs", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "inputs", ")", ",", "\n", "position", "=", "decoder_position", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "encoder_layer_outputs", "=", "encoder_layer_outputs", ",", "\n", "num_microbatches", "=", "num_microbatches", ")", "\n", "if", "loss", "is", "not", "None", "and", "encoder_loss", "is", "not", "None", ":", "\n", "      ", "loss", "+=", "encoder_loss", "\n", "", "return", "logits", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode": [[341, 438], ["gin.configurable", "mesh_tensorflow.VariableDType", "funnel_transformer.BitransformerFunnel._shared_params", "mesh_tensorflow.minimum", "funnel_transformer.BitransformerFunnel.encoder.call_simple", "mesh_tensorflow.layers.rename_length_to_memory_length", "mesh_tensorflow.layers.rename_length_to_memory_length", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.zeros", "funnel_transformer.BitransformerFunnel.decoder.sample_autoregressive", "mesh_tensorflow.Dimension", "mesh_tensorflow.Shape", "mesh_tensorflow.zeros", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_max", "mesh_tensorflow.cast", "funnel_transformer.BitransformerFunnel.decoder.beam_search", "ValueError", "ValueError", "mesh_tensorflow.to_float", "mesh_tensorflow.layers.rename_length_to_memory_length", "mesh_tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Bitransformer._shared_params", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.call_simple", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.sample_autoregressive", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_max", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer.Unitransformer.beam_search", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.transformer_layers.SelfAttention.rename_length_to_memory_length", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "@", "gin", ".", "configurable", "(", "module", "=", "\"BitransformerFunnel\"", ")", "\n", "def", "decode", "(", "self", ",", "\n", "inputs", ",", "\n", "variable_dtype", "=", "mtf", ".", "VariableDType", "(", "tf", ".", "float32", ")", ",", "\n", "beam_size", "=", "1", ",", "\n", "alpha", "=", "0.6", ",", "\n", "temperature", "=", "0.0", ",", "\n", "sampling_keep_top_k", "=", "-", "1", ",", "\n", "decode_length_multiplier", "=", "1.5", ",", "\n", "decode_length_constant", "=", "10", ",", "\n", "max_decode_length", "=", "None", ")", ":", "\n", "    ", "\"\"\"Sampling or beam search for Funnel Transformer.\n\n    Args:\n      inputs: a Tensor with shape [<batch_dims>, beam_dim, length_dim]\n      variable_dtype: a mtf.VariableDType\n      beam_size: an integer >= 1\n      alpha: a floating point value (length bonus for beam search)\n      temperature: a value between 0 and 1 (must be 0 if beam_size > 1)\n        0.0 means argmax, 1.0 means sample according to predicted distribution.\n      sampling_keep_top_k: a value between 1 and vocab_size used to sample from\n        only the k most likely logits. Set to -1 to sample from all logits.\n      decode_length_multiplier: a float\n      decode_length_constant: a float\n      max_decode_length: an optional integer\n\n    Returns:\n      a Tensor with shape [<batch_dims>, beam_dim, length_dim]\n    \"\"\"", "\n", "encoder_layer_outputs", "=", "[", "]", "\n", "shared_params", "=", "self", ".", "_shared_params", "(", "inputs", ".", "mesh", ",", "variable_dtype", ")", "\n", "encoder_sequence_id", "=", "mtf", ".", "minimum", "(", "inputs", ",", "1", ")", "\n", "encoder_output", ",", "encoder_loss", "=", "self", ".", "encoder", ".", "call_simple", "(", "\n", "inputs", "=", "inputs", ",", "\n", "targets", "=", "None", ",", "\n", "compute_loss", "=", "False", ",", "\n", "mode", "=", "tf_estimator", ".", "ModeKeys", ".", "PREDICT", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "sequence_id", "=", "encoder_sequence_id", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "layer_outputs", "=", "encoder_layer_outputs", ")", "\n", "del", "encoder_loss", "\n", "encoder_output", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "encoder_output", ")", "\n", "\n", "# The sequence_id is updated inside the layer_stack due to pooling. So we", "\n", "# need to use the updated sequence_id stored in the context.", "\n", "encoder_sequence_id", "=", "self", ".", "encoder", ".", "layer_stack", ".", "context", ".", "sequence_id", "\n", "encoder_sequence_id", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "\n", "encoder_sequence_id", ")", "\n", "batch_dims", "=", "inputs", ".", "shape", "[", ":", "-", "1", "]", "\n", "length_dim", "=", "inputs", ".", "shape", "[", "-", "1", "]", "\n", "if", "max_decode_length", "is", "None", ":", "\n", "      ", "decode_length_dim", "=", "length_dim", "\n", "", "else", ":", "\n", "      ", "decode_length_dim", "=", "mtf", ".", "Dimension", "(", "\"length\"", ",", "max_decode_length", ")", "\n", "", "if", "beam_size", "==", "1", ":", "\n", "      ", "ids_shape", "=", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "decode_length_dim", "]", ")", "\n", "partial_sequences", "=", "mtf", ".", "zeros", "(", "inputs", ".", "mesh", ",", "ids_shape", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "return", "self", ".", "decoder", ".", "sample_autoregressive", "(", "\n", "partial_sequences", ",", "\n", "temperature", "=", "temperature", ",", "\n", "sampling_keep_top_k", "=", "sampling_keep_top_k", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_sequence_id", "=", "encoder_sequence_id", ",", "\n", "encoder_inputs", "=", "mtf", ".", "layers", ".", "rename_length_to_memory_length", "(", "inputs", ")", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "has_partial_sequences", "=", "False", ",", "\n", "encoder_layer_outputs", "=", "encoder_layer_outputs", ")", "\n", "", "else", ":", "\n", "      ", "if", "temperature", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"don't know how to beam search with nonzero temperature\"", ")", "\n", "", "if", "sampling_keep_top_k", "!=", "-", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"don't know how to beam search with top-k value other than -1.\"", ")", "\n", "# beam search", "\n", "", "beam_dim", "=", "mtf", ".", "Dimension", "(", "\"beam\"", ",", "beam_size", ")", "\n", "ids_shape", "=", "mtf", ".", "Shape", "(", "batch_dims", "+", "[", "beam_dim", ",", "decode_length_dim", "]", ")", "\n", "partial_sequences", "=", "mtf", ".", "zeros", "(", "inputs", ".", "mesh", ",", "ids_shape", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "input_length", "=", "mtf", ".", "reduce_sum", "(", "\n", "mtf", ".", "to_float", "(", "mtf", ".", "cast", "(", "inputs", ",", "tf", ".", "bool", ")", ")", ",", "\n", "reduced_dim", "=", "length_dim", ")", "\n", "max_input_length", "=", "mtf", ".", "reduce_max", "(", "input_length", ")", "\n", "decode_length", "=", "mtf", ".", "cast", "(", "\n", "max_input_length", "*", "decode_length_multiplier", "\n", "+", "decode_length_constant", ",", "tf", ".", "int32", ")", "\n", "return", "self", ".", "decoder", ".", "beam_search", "(", "\n", "partial_sequences", ",", "\n", "decode_length", ",", "\n", "variable_dtype", "=", "variable_dtype", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_sequence_id", "=", "encoder_sequence_id", ",", "\n", "encoder_inputs", "=", "inputs", ",", "\n", "alpha", "=", "alpha", ",", "\n", "shared_params", "=", "shared_params", ",", "\n", "encoder_layer_outputs", "=", "encoder_layer_outputs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules_test.UtilsTest.testLinearDecayLearningRate": [[43, 66], ["learning_rate_schedules_test.UtilsTest.test_session", "learning_rate_schedules_test.LearningRateSpec", "learning_rate_schedules_test.UtilsTest.assertAlmostEqual", "tensorflow.constant", "learning_rate_schedules_test.UtilsTest.assertAlmostEqual", "learning_rate_schedules_test.UtilsTest.assertAlmostEqual", "learning_rate_schedules_test.UtilsTest.assertAlmostEqual", "sess.run", "sess.run", "sess.run", "sess.run", "tensorflow.constant", "learning_rate_schedules_test._get_linear_decay_lr", "learning_rate_schedules_test._get_linear_decay_lr", "learning_rate_schedules_test._get_linear_decay_lr", "learning_rate_schedules_test._get_linear_decay_lr"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.utils.run", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules_test._get_linear_decay_lr", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules_test._get_linear_decay_lr", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules_test._get_linear_decay_lr", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules_test._get_linear_decay_lr"], ["  ", "def", "testLinearDecayLearningRate", "(", "self", ")", ":", "\n", "    ", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "\n", "# At step 0 (no offset), the learning rate should be initial_lr.", "\n", "      ", "spec", "=", "LearningRateSpec", "(", "\n", "step", "=", "tf", ".", "constant", "(", "0", ",", "tf", ".", "int32", ")", ",", "\n", "total_train_steps", "=", "100", ",", "\n", "initial_lr", "=", "0.001", ",", "\n", "offset", "=", "0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.001", ",", "sess", ".", "run", "(", "_get_linear_decay_lr", "(", "spec", ")", ")", ")", "\n", "\n", "# Halfway, the learning rate should be initial_lr / 2.", "\n", "spec", ".", "step", "=", "tf", ".", "constant", "(", "50", ",", "tf", ".", "int32", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.0005", ",", "sess", ".", "run", "(", "_get_linear_decay_lr", "(", "spec", ")", ")", ")", "\n", "\n", "# At the end of training it should be 0.", "\n", "spec", ".", "step", "=", "100", "\n", "self", ".", "assertAlmostEqual", "(", "0", ",", "sess", ".", "run", "(", "_get_linear_decay_lr", "(", "spec", ")", ")", ")", "\n", "\n", "# If the 0 > step > offset, then lr should be initial_lr.", "\n", "spec", ".", "offset", "=", "50", "\n", "spec", ".", "step", "=", "40", "\n", "self", ".", "assertAlmostEqual", "(", "0.001", ",", "sess", ".", "run", "(", "_get_linear_decay_lr", "(", "spec", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules_test._get_linear_decay_lr": [[36, 39], ["mesh_tensorflow.transformer.learning_rate_schedules.linear_decay_learning_rate"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.linear_decay_learning_rate"], ["", "def", "_get_linear_decay_lr", "(", "spec", ")", ":", "\n", "  ", "return", "learning_rate_schedules", ".", "linear_decay_learning_rate", "(", "\n", "spec", ".", "step", ",", "spec", ".", "total_train_steps", ",", "spec", ".", "initial_lr", ",", "spec", ".", "offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertConfig.__init__": [[40, 144], ["block_layers.split", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size", ",", "\n", "d_model", "=", "768", ",", "\n", "position_signal", "=", "\"embedding\"", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "num_blocks", "=", "12", ",", "\n", "block_layers", "=", "\"attention,feedforward\"", ",", "\n", "layer_output_dropout_prob", "=", "0.1", ",", "\n", "residual_structure", "=", "\"original\"", ",", "\n", "use_bias", "=", "True", ",", "\n", "attention_num_heads", "=", "12", ",", "\n", "attention_head_size", "=", "None", ",", "\n", "attention_num_key_heads", "=", "None", ",", "\n", "attention_key_head_size", "=", "None", ",", "\n", "attention_num_value_heads", "=", "None", ",", "\n", "attention_value_head_size", "=", "None", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "feedforward_intermediate_size", "=", "3072", ",", "\n", "feedforward_intermediate_act", "=", "\"gelu\"", ",", "\n", "feedforward_intermediate_dropout_prob", "=", "0.0", ",", "\n", "moe_num_experts", "=", "32", ",", "\n", "moe_intermediate_size", "=", "6144", ",", "\n", "type_vocab_size", "=", "16", ",", "\n", "initializer_range", "=", "0.02", ")", ":", "\n", "    ", "\"\"\"Constructs BertConfig.\n\n    residual_structure=\"original\"\n       TODO(noam): describe\n    residual_structure=\"direct\"\n       TODO(noam): describe\n\n\n    Args:\n      vocab_size: Vocabulary size of `inputs_ids` in `BertModel`.\n      d_model: Number of channels in input/output of each layer.\n      position_signal: A string specifying the type of position signal.\n        Implemented values are \"embedding\", \"relative_attention_bias\".\n      max_position_embeddings: For models using positional embeddings,\n        this is the maximum sequence length that this model might\n        ever be used with. Typically set this to something large just in case\n        (e.g., 512 or 1024 or 2048).\n      num_blocks: Number of (attention+feed-forward) blocks in the Transformer\n         encoder.\n      block_layers: a comma-separated string specifying the sequence of layers\n        in each block.\n      layer_output_dropout_prob: The dropout probability for the output of\n        each layer.\n      residual_structure: a string.  Legal values are \"original\" and \"direct\".\n      use_bias: a boolean - If true, then we use biases for dense layers and\n        in layer normalization, and subtract off the mean in layer\n        normalization.\n      attention_num_heads: Number of attention heads for each attention layer in\n        the Transformer encoder.\n      attention_head_size: Size of attention keys and values.  If set to None,\n        a default value is used equal to (d_model / attention_num_heads)\n      attention_num_key_heads: Number of attention key heads.\n      attention_key_head_size: Size of attention keys.\n      attention_num_value_heads: Number of attention value heads.\n      attention_value_head_size: Size of attention values.\n      attention_probs_dropout_prob: The dropout ratio for the attention\n        probabilities.\n      feedforward_intermediate_size: The size of the \"intermediate\" layer in the\n         feed-forward layer in the Transformer encoder (a.k.a. d_ff).\n      feedforward_intermediate_act: The non-linear activation function\n        (function or string) applied to the feedforward intermediate layer\n        and the pooler layer.\n      feedforward_intermediate_dropout_prob: The dropout probability for\n        feed-forward intermediate layer.\n      moe_num_experts: an integer - number of experts in moe layer\n      moe_intermediate_size: an integer - size of intermediate layer in each\n        expert\n      type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n        `BertModel`.\n      initializer_range: The stdev of the truncated_normal_initializer for\n        initializing all weight matrices.\n    \"\"\"", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "position_signal", "=", "position_signal", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "block_layers", "=", "block_layers", ".", "split", "(", "\",\"", ")", "\n", "self", ".", "layer_output_dropout_prob", "=", "layer_output_dropout_prob", "\n", "self", ".", "residual_structure", "=", "residual_structure", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "attention_num_heads", "=", "attention_num_heads", "\n", "self", ".", "attention_head_size", "=", "attention_head_size", "\n", "self", ".", "attention_num_key_heads", "=", "attention_num_key_heads", "\n", "self", ".", "attention_key_head_size", "=", "attention_key_head_size", "\n", "self", ".", "attention_num_value_heads", "=", "attention_num_value_heads", "\n", "self", ".", "attention_value_head_size", "=", "attention_value_head_size", "\n", "self", ".", "feedforward_intermediate_size", "=", "feedforward_intermediate_size", "\n", "self", ".", "feedforward_intermediate_act", "=", "feedforward_intermediate_act", "\n", "self", ".", "feedforward_intermediate_dropout_prob", "=", "(", "\n", "feedforward_intermediate_dropout_prob", ")", "\n", "self", ".", "moe_num_experts", "=", "moe_num_experts", "\n", "self", ".", "moe_intermediate_size", "=", "moe_intermediate_size", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "if", "self", ".", "position_signal", "not", "in", "[", "\"embedding\"", ",", "\"relative_attention_bias\"", "]", ":", "\n", "      ", "raise", "ValueError", "(", "\"unknown position_signal\"", ")", "\n", "", "if", "self", ".", "residual_structure", "not", "in", "[", "\"original\"", ",", "\"direct\"", "]", ":", "\n", "      ", "raise", "ValueError", "(", "\"unknown residual_structure\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertConfig.from_dict": [[145, 161], ["bert.BertConfig", "six.iteritems", "hparam_name_conversion.get"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get"], ["", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "    ", "\"\"\"Constructs a `BertConfig` from a Python dictionary of parameters.\"\"\"", "\n", "# Dictionary for compatibility for tf BertConfig files.", "\n", "hparam_name_conversion", "=", "{", "\n", "\"hidden_size\"", ":", "\"d_model\"", ",", "\n", "\"num_hidden_layers\"", ":", "\"num_blocks\"", ",", "\n", "\"num_attention_heads\"", ":", "\"attention_num_heads\"", ",", "\n", "\"intermediate_size\"", ":", "\"feedforward_intermediate_size\"", ",", "\n", "\"hidden_act\"", ":", "\"feedforward_intermediate_act\"", ",", "\n", "\"hidden_dropout_prob\"", ":", "\"layer_output_dropout_prob\"", ",", "\n", "}", "\n", "config", "=", "BertConfig", "(", "vocab_size", "=", "None", ")", "\n", "for", "(", "key", ",", "value", ")", "in", "six", ".", "iteritems", "(", "json_object", ")", ":", "\n", "      ", "config", ".", "__dict__", "[", "hparam_name_conversion", ".", "get", "(", "key", ",", "key", ")", "]", "=", "value", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertConfig.from_json_file": [[162, 168], ["cls.from_dict", "tensorflow.gfile.GFile", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertConfig.from_dict"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "    ", "\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "json_file", ",", "\"r\"", ")", "as", "reader", ":", "\n", "      ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertConfig.to_dict": [[169, 173], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "    ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertConfig.to_json_string": [[174, 177], ["json.dumps", "bert.BertConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "    ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.__init__": [[182, 313], ["copy.deepcopy", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.zeros", "mesh_tensorflow.zeros", "tensorflow.variable_scope", "tensorflow.variable_scope", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.gather", "mesh_tensorflow.gather", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "bert.BertModel.normalize", "mesh_tensorflow.dropout", "mesh_tensorflow.dropout", "tensorflow.variable_scope", "mesh_tensorflow.add_n", "mesh_tensorflow.add_n", "range", "bert.BertModel.normalize", "tensorflow.variable_scope", "mesh_tensorflow.gather", "mesh_tensorflow.gather", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.gather", "mesh_tensorflow.gather", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.rename_dimension", "mesh_tensorflow.rename_dimension", "attention_biases.append", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "bert._relative_position_bucket", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "attention_biases.append", "bert.BertModel.all_encoder_layers.append", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "mesh_tensorflow.slice", "mesh_tensorflow.slice", "mesh_tensorflow.gather", "mesh_tensorflow.gather", "tensorflow.variable_scope", "enumerate", "mesh_tensorflow.range", "mesh_tensorflow.range", "mesh_tensorflow.range", "mesh_tensorflow.range", "tensorflow.zeros_initializer", "bert.BertModel.config.block_layers[].count", "mesh_tensorflow.to_float", "mesh_tensorflow.to_float", "tensorflow.variable_scope", "mesh_tensorflow.dropout", "mesh_tensorflow.dropout", "mesh_tensorflow.replace_dimensions", "mesh_tensorflow.replace_dimensions", "bert.BertModel.normalize", "bert.BertModel.self_attention", "bert.BertModel.normalize", "bert.BertModel.feedforward", "bert.BertModel.moe", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.zeros", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.normalize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.normalize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rename_dimension", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert._relative_position_bucket", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.slice", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.normalize", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.self_attention", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.normalize", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.feedforward", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.moe"], ["def", "__init__", "(", "self", ",", "\n", "config", ",", "\n", "is_training", ",", "\n", "input_ids", ",", "\n", "input_mask", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "scope", "=", "None", ",", "\n", "mesh_shape", "=", "\"\"", ",", "\n", "layout", "=", "\"\"", ")", ":", "\n", "    ", "self", ".", "config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "del", "config", "\n", "if", "not", "is_training", ":", "\n", "      ", "self", ".", "config", ".", "layer_output_dropout_prob", "=", "0.0", "\n", "self", ".", "config", ".", "attention_probs_dropout_prob", "=", "0.0", "\n", "self", ".", "config", ".", "feedforward_intermediate_dropout_prob", "=", "0.0", "\n", "", "input_shape", "=", "input_ids", ".", "shape", "\n", "assert", "input_shape", ".", "ndims", "==", "2", "\n", "\n", "self", ".", "_seq_dim", "=", "input_shape", ".", "dims", "[", "1", "]", "\n", "self", ".", "_memory_seq_dim", "=", "mtf", ".", "Dimension", "(", "\"memory_seq\"", ",", "self", ".", "seq_dim", ".", "size", ")", "\n", "self", ".", "_extra_losses", "=", "[", "]", "\n", "mesh", "=", "input_ids", ".", "mesh", "\n", "\n", "if", "token_type_ids", "is", "None", ":", "\n", "      ", "token_type_ids", "=", "mtf", ".", "zeros", "(", "mesh", ",", "input_shape", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "default_name", "=", "\"bert\"", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "\"embeddings\"", ")", ":", "\n", "# Perform embedding lookup on the word ids.", "\n", "        ", "self", ".", "embedding_table", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\"word_embeddings\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "self", ".", "vocab_dim", ",", "self", ".", "model_dim", "]", ")", ",", "\n", "initializer", "=", "self", ".", "embedding_initializer", ")", "\n", "self", ".", "word_embedding_output", "=", "mtf", ".", "gather", "(", "\n", "self", ".", "embedding_table", ",", "input_ids", ",", "self", ".", "vocab_dim", ")", "\n", "\n", "# Add positional embeddings and token type embeddings, then layer", "\n", "# normalize and perform dropout.", "\n", "self", ".", "embedding_output", "=", "self", ".", "word_embedding_output", "\n", "\n", "token_type_table", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\"token_type_embeddings\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "self", ".", "token_type_vocab_dim", ",", "self", ".", "model_dim", "]", ")", ",", "\n", "initializer", "=", "self", ".", "embedding_initializer", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "          ", "self", ".", "embedding_output", "+=", "mtf", ".", "gather", "(", "\n", "token_type_table", ",", "token_type_ids", ",", "self", ".", "token_type_vocab_dim", ")", "\n", "", "if", "self", ".", "config", ".", "position_signal", "==", "\"embedding\"", ":", "\n", "          ", "full_position_table", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\"position_embeddings\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "self", ".", "max_position_embeddings_dim", ",", "self", ".", "model_dim", "]", ")", ",", "\n", "initializer", "=", "self", ".", "embedding_initializer", ")", "\n", "short_position_table", "=", "mtf", ".", "rename_dimension", "(", "\n", "mtf", ".", "slice", "(", "full_position_table", ",", "0", ",", "self", ".", "seq_dim", ".", "size", ",", "\n", "self", ".", "max_position_embeddings_dim", ".", "name", ")", ",", "\n", "self", ".", "max_position_embeddings_dim", ".", "name", ",", "self", ".", "seq_dim", ".", "name", ")", "\n", "self", ".", "embedding_output", "+=", "short_position_table", "\n", "", "self", ".", "embedding_output", "=", "self", ".", "normalize", "(", "self", ".", "embedding_output", ")", "\n", "self", ".", "embedding_output", "=", "mtf", ".", "dropout", "(", "\n", "self", ".", "embedding_output", ",", "is_training", ",", "\n", "keep_prob", "=", "1.0", "-", "self", ".", "config", ".", "layer_output_dropout_prob", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"encoder\"", ")", ":", "\n", "        ", "attention_biases", "=", "[", "]", "\n", "if", "input_mask", ":", "\n", "# [batch_dim, memory_seq_dim]", "\n", "          ", "attention_biases", ".", "append", "(", "\n", "(", "1.0", "-", "mtf", ".", "to_float", "(", "mtf", ".", "replace_dimensions", "(", "\n", "input_mask", ",", "self", ".", "seq_dim", ",", "self", ".", "memory_seq_dim", ")", ")", ")", "*", "-", "10000.0", ")", "\n", "", "if", "self", ".", "config", ".", "position_signal", "==", "\"relative_attention_bias\"", ":", "\n", "          ", "buckets_dim", "=", "mtf", ".", "Dimension", "(", "\"buckets\"", ",", "32", ")", "\n", "rp_bucket", "=", "_relative_position_bucket", "(", "\n", "mtf", ".", "range", "(", "mesh", ",", "self", ".", "memory_seq_dim", ",", "tf", ".", "int32", ")", "\n", "-", "mtf", ".", "range", "(", "mesh", ",", "self", ".", "seq_dim", ",", "tf", ".", "int32", ")", ",", "\n", "num_buckets", "=", "buckets_dim", ".", "size", ")", "\n", "bias_var", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\"relative_attention_bias\"", ",", "\n", "[", "self", ".", "num_heads_dim", ",", "buckets_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "attention_biases", ".", "append", "(", "mtf", ".", "gather", "(", "bias_var", ",", "rp_bucket", ",", "buckets_dim", ")", ")", "\n", "", "attention_bias", "=", "mtf", ".", "add_n", "(", "attention_biases", ")", "\n", "prev_layer_output", "=", "self", ".", "embedding_output", "\n", "self", ".", "all_encoder_layers", "=", "[", "]", "\n", "for", "block_num", "in", "range", "(", "self", ".", "config", ".", "num_blocks", ")", ":", "\n", "          ", "with", "tf", ".", "variable_scope", "(", "\"block_%d\"", "%", "block_num", ")", ":", "\n", "            ", "for", "layer_idx", ",", "layer_type", "in", "enumerate", "(", "self", ".", "config", ".", "block_layers", ")", ":", "\n", "              ", "layer_name", "=", "layer_type", "\n", "count", "=", "self", ".", "config", ".", "block_layers", "[", ":", "layer_idx", "]", ".", "count", "(", "layer_type", ")", "\n", "if", "count", ":", "\n", "                ", "layer_name", "+=", "\"_%d\"", "%", "count", "\n", "", "with", "tf", ".", "variable_scope", "(", "layer_name", ")", ":", "\n", "                ", "x", "=", "prev_layer_output", "\n", "if", "self", ".", "config", ".", "residual_structure", "==", "\"direct\"", ":", "\n", "                  ", "x", "=", "self", ".", "normalize", "(", "x", ")", "\n", "", "if", "layer_type", "==", "\"attention\"", ":", "\n", "                  ", "x", "=", "self", ".", "self_attention", "(", "x", ",", "attention_bias", ")", "\n", "", "elif", "layer_type", "==", "\"feedforward\"", ":", "\n", "                  ", "x", "=", "self", ".", "feedforward", "(", "x", ")", "\n", "", "elif", "layer_type", "==", "\"moe\"", ":", "\n", "                  ", "x", "=", "self", ".", "moe", "(", "x", ",", "layout", ",", "mesh_shape", ",", "input_mask", ",", "is_training", ")", "\n", "", "else", ":", "\n", "                  ", "raise", "ValueError", "(", "\"unknown layer type \"", "+", "layer_type", ")", "\n", "", "x", "=", "mtf", ".", "dropout", "(", "\n", "x", ",", "is_training", ",", "\n", "keep_prob", "=", "1.0", "-", "self", ".", "config", ".", "layer_output_dropout_prob", ")", "\n", "layer_output", "=", "prev_layer_output", "+", "x", "\n", "if", "self", ".", "config", ".", "residual_structure", "==", "\"original\"", ":", "\n", "                  ", "layer_output", "=", "self", ".", "normalize", "(", "layer_output", ")", "\n", "", "prev_layer_output", "=", "layer_output", "\n", "", "", "", "self", ".", "all_encoder_layers", ".", "append", "(", "layer_output", ")", "\n", "\n", "", "", "self", ".", "sequence_output", "=", "prev_layer_output", "\n", "if", "self", ".", "config", ".", "residual_structure", "==", "\"direct\"", ":", "\n", "        ", "self", ".", "sequence_output", "=", "self", ".", "normalize", "(", "self", ".", "sequence_output", ")", "\n", "\n", "# The \"pooler\" converts the encoded sequence tensor of shape", "\n", "# [batch_dim, seq_dim, hidden_size] to a tensor of shape", "\n", "# [batch_dim, hidden_size]. This is necessary for segment-level", "\n", "# (or segment-pair-level) classification tasks where we need a fixed", "\n", "# dimensional representation of the segment.", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"pooler\"", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token. We assume that this has been pre-trained", "\n", "        ", "first_token_tensor", "=", "mtf", ".", "gather", "(", "self", ".", "sequence_output", ",", "0", ",", "self", ".", "seq_dim", ")", "\n", "self", ".", "pooled_output", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "first_token_tensor", ",", "\n", "reduced_dims", "=", "[", "self", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "[", "self", ".", "model_dim", "]", ",", "\n", "activation", "=", "mtf", ".", "tanh", ",", "\n", "kernel_initializer", "=", "self", ".", "dense_initializer", ",", "\n", "use_bias", "=", "self", ".", "config", ".", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.self_attention": [[314, 382], ["mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.einsum", "mesh_tensorflow.einsum", "mesh_tensorflow.softmax", "mesh_tensorflow.softmax", "mesh_tensorflow.dropout", "mesh_tensorflow.dropout", "mesh_tensorflow.einsum", "mesh_tensorflow.einsum", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.transpose", "mesh_tensorflow.transpose", "mesh_tensorflow.replace_dimensions", "mesh_tensorflow.replace_dimensions", "mesh_tensorflow.replace_dimensions", "mesh_tensorflow.replace_dimensions"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.replace_dimensions"], ["", "", "", "def", "self_attention", "(", "self", ",", "x", ",", "attention_bias", ")", ":", "\n", "    ", "\"\"\"Performs multi-headed self-attention with output projection.\n\n    Args:\n      x: output of previous layer\n      attention_bias: optional float32 Tensor broadcastable to shape\n        x.shape - self.model_dim + self.memory_seq_dim\n        to be added to attention logits.\n        This may used to mask out padding regions of the memory.\n\n    Returns:\n      float Tensor with the same shape as x\n    \"\"\"", "\n", "\n", "queries", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "\n", "reduced_dims", "=", "[", "self", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "[", "self", ".", "num_heads_dim", ",", "self", ".", "size_per_head_dim", "]", ",", "\n", "kernel_initializer", "=", "self", ".", "dense_initializer", ",", "\n", "name", "=", "\"query\"", ",", "\n", "use_bias", "=", "self", ".", "config", ".", "use_bias", ")", "\n", "keys", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "mtf", ".", "replace_dimensions", "(", "x", ",", "self", ".", "seq_dim", ",", "self", ".", "memory_seq_dim", ")", ",", "\n", "reduced_dims", "=", "[", "self", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "[", "self", ".", "num_heads_dim", ",", "self", ".", "size_per_head_dim", "]", ",", "\n", "kernel_initializer", "=", "self", ".", "dense_initializer", ",", "\n", "name", "=", "\"key\"", ",", "\n", "use_bias", "=", "self", ".", "config", ".", "use_bias", ")", "\n", "values", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "mtf", ".", "replace_dimensions", "(", "x", ",", "self", ".", "seq_dim", ",", "self", ".", "memory_seq_dim", ")", ",", "\n", "reduced_dims", "=", "[", "self", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "[", "self", ".", "num_heads_dim", ",", "self", ".", "size_per_head_dim", "]", ",", "\n", "kernel_initializer", "=", "self", ".", "dense_initializer", ",", "\n", "name", "=", "\"value\"", ",", "\n", "use_bias", "=", "self", ".", "config", ".", "use_bias", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw", "\n", "# attention scores.", "\n", "attention_scores", "=", "mtf", ".", "einsum", "(", "\n", "[", "queries", ",", "keys", "]", ",", "reduced_dims", "=", "[", "self", ".", "size_per_head_dim", "]", ")", "\n", "attention_scores", "*=", "self", ".", "size_per_head_dim", ".", "size", "**", "-", "0.5", "\n", "\n", "if", "attention_bias", "is", "not", "None", ":", "\n", "      ", "attention_scores", "+=", "attention_bias", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "mtf", ".", "softmax", "(", "attention_scores", ",", "self", ".", "memory_seq_dim", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "mtf", ".", "dropout", "(", "\n", "attention_probs", ",", "\n", "is_training", "=", "(", "self", ".", "config", ".", "attention_probs_dropout_prob", "==", "0.0", ")", ",", "\n", "keep_prob", "=", "1.0", "-", "self", ".", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n", "output", "=", "mtf", ".", "einsum", "(", "[", "attention_probs", ",", "values", "]", ",", "\n", "reduced_dims", "=", "[", "self", ".", "memory_seq_dim", "]", ")", "\n", "\n", "# linear transformation back to shape of query_antecedent", "\n", "output", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "output", ",", "\n", "reduced_dims", "=", "[", "self", ".", "num_heads_dim", ",", "self", ".", "size_per_head_dim", "]", ",", "\n", "new_dims", "=", "[", "self", ".", "model_dim", "]", ",", "\n", "kernel_initializer", "=", "self", ".", "dense_initializer", ",", "\n", "name", "=", "\"output\"", ",", "\n", "use_bias", "=", "self", ".", "config", ".", "use_bias", ")", "\n", "output", "=", "mtf", ".", "transpose", "(", "output", ",", "x", ".", "shape", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.feedforward": [[384, 397], ["mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "bert.get_activation"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.get_activation"], ["", "def", "feedforward", "(", "self", ",", "x", ")", ":", "\n", "    ", "intermediate", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "reduced_dims", "=", "[", "self", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "[", "self", ".", "feedforward_intermediate_dim", "]", ",", "\n", "activation", "=", "get_activation", "(", "self", ".", "config", ".", "feedforward_intermediate_act", ")", ",", "\n", "kernel_initializer", "=", "self", ".", "dense_initializer", ",", "\n", "name", "=", "\"dense_1\"", ",", "use_bias", "=", "self", ".", "config", ".", "use_bias", ")", "\n", "return", "mtf", ".", "layers", ".", "dense", "(", "\n", "intermediate", ",", "\n", "reduced_dims", "=", "[", "self", ".", "feedforward_intermediate_dim", "]", ",", "\n", "new_dims", "=", "[", "self", ".", "model_dim", "]", ",", "\n", "kernel_initializer", "=", "self", ".", "dense_initializer", ",", "\n", "name", "=", "\"dense_2\"", ",", "use_bias", "=", "self", ".", "config", ".", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.moe": [[398, 437], ["mesh_tensorflow.HParams", "mesh_tensorflow.HParams", "mesh_tensorflow.transformer_moe_layer_v1", "mesh_tensorflow.transformer_moe_layer_v1", "bert.BertModel._extra_losses.append", "bert.get_activation", "mesh_tensorflow.cast", "mesh_tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.heterogeneous_moe.transformer_moe_layer_v1", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.heterogeneous_moe.transformer_moe_layer_v1", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.get_activation", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast"], ["", "def", "moe", "(", "self", ",", "x", ",", "layout", ",", "mesh_shape", ",", "input_mask", ",", "is_training", ")", ":", "\n", "    ", "\"\"\"Mixture of experts layer.\n\n    TODO(noam): clean up the mixture-of-experts code in Transformer.\n\n    Args:\n      x: layer input\n      layout: a mtf.LayoutRules\n      mesh_shape: a mtf.Shape\n      input_mask: a mtf.Tensor\n      is_training: a boolean\n    Returns:\n      a mtf.Tensor (the layer output)\n    \"\"\"", "\n", "hparams", "=", "moe", ".", "HParams", "(", "\n", "moe_gating", "=", "\"top_2\"", ",", "\n", "moe_num_experts", "=", "self", ".", "config", ".", "moe_num_experts", ",", "\n", "moe_loss_coef", "=", "1e-3", ",", "\n", "moe_hidden_size", "=", "self", ".", "config", ".", "moe_intermediate_size", ",", "\n", "moe_group_size", "=", "2048", ",", "\n", "moe_capacity_factor_train", "=", "1.25", ",", "\n", "moe_capacity_factor_eval", "=", "8.0", ",", "\n", "moe_use_second_place_loss", "=", "False", ",", "\n", "moe_second_policy_train", "=", "\"random\"", ",", "\n", "moe_second_policy_eval", "=", "\"random\"", ",", "\n", "moe_second_threshold_train", "=", "0.2", ",", "\n", "moe_second_threshold_eval", "=", "0.2", ")", "\n", "layer_output", ",", "loss", "=", "moe", ".", "transformer_moe_layer_v1", "(", "\n", "inputs", "=", "x", ",", "\n", "output_dim", "=", "self", ".", "model_dim", ",", "\n", "hparams", "=", "hparams", ",", "\n", "train", "=", "is_training", ",", "\n", "variable_dtype", "=", "tf", ".", "float32", ",", "\n", "layout", "=", "layout", ",", "\n", "mesh_shape", "=", "mesh_shape", ",", "\n", "nonpadding", "=", "(", "mtf", ".", "cast", "(", "input_mask", ",", "tf", ".", "float32", ")", "if", "input_mask", "else", "None", ")", ",", "\n", "activation", "=", "get_activation", "(", "self", ".", "config", ".", "feedforward_intermediate_act", ")", ")", "\n", "self", ".", "_extra_losses", ".", "append", "(", "loss", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_masked_lm_output": [[438, 477], ["bert.BertModel.get_sequence_output", "bert.BertModel.get_embedding_table", "mesh_tensorflow.gather", "mesh_tensorflow.gather", "tensorflow.variable_scope", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "tensorflow.variable_scope", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "bert.BertModel.normalize", "mesh_tensorflow.einsum", "mesh_tensorflow.einsum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.constant", "mesh_tensorflow.constant", "tensorflow.zeros_initializer", "bert.get_activation"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_sequence_output", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_embedding_table", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gather", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.normalize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.get_activation"], ["", "def", "get_masked_lm_output", "(", "self", ",", "positions", ",", "label_ids", ",", "label_weights", ")", ":", "\n", "    ", "\"\"\"Get loss and logits for the masked LM.\"\"\"", "\n", "input_tensor", "=", "self", ".", "get_sequence_output", "(", ")", "\n", "output_weights", "=", "self", ".", "get_embedding_table", "(", ")", "\n", "\n", "# [batch_size, num_position, hidden]", "\n", "input_tensor", "=", "mtf", ".", "gather", "(", "input_tensor", ",", "positions", ",", "self", ".", "seq_dim", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"cls/predictions\"", ")", ":", "\n", "# We apply one more non-linear transformation before the output layer.", "\n", "# This matrix is not used after pre-training.", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "\"transform\"", ")", ":", "\n", "        ", "input_tensor", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "input_tensor", ",", "\n", "reduced_dims", "=", "[", "self", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "[", "self", ".", "model_dim", "]", ",", "\n", "activation", "=", "get_activation", "(", "self", ".", "config", ".", "feedforward_intermediate_act", ")", ",", "\n", "kernel_initializer", "=", "self", ".", "dense_initializer", ",", "\n", "use_bias", "=", "self", ".", "config", ".", "use_bias", ")", "\n", "input_tensor", "=", "self", ".", "normalize", "(", "input_tensor", ")", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "", "output_bias", "=", "mtf", ".", "get_variable", "(", "\n", "input_tensor", ".", "mesh", ",", "\n", "name", "=", "\"output_bias\"", ",", "\n", "shape", "=", "[", "self", ".", "vocab_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "logits", "=", "mtf", ".", "einsum", "(", "[", "input_tensor", ",", "output_weights", "]", ",", "\n", "reduced_dims", "=", "[", "self", ".", "model_dim", "]", ")", "+", "output_bias", "\n", "per_example_loss", "=", "mtf", ".", "layers", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", ",", "label_ids", ",", "self", ".", "vocab_dim", ",", "z_loss", "=", "1e-4", ")", "\n", "# The `positions` tensor might be zero-padded (if the sequence is too", "\n", "# short to have the maximum number of predictions). The `label_weights`", "\n", "# tensor has a value of 1.0 for every real prediction and 0.0 for the", "\n", "# padding predictions.", "\n", "numerator", "=", "mtf", ".", "reduce_sum", "(", "label_weights", "*", "per_example_loss", ")", "\n", "denominator", "=", "mtf", ".", "reduce_sum", "(", "label_weights", ")", "+", "mtf", ".", "constant", "(", "\n", "input_tensor", ".", "mesh", ",", "1e-5", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "loss", "=", "numerator", "/", "denominator", "\n", "", "return", "(", "loss", ",", "per_example_loss", ",", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_next_sentence_output": [[478, 495], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "bert.BertModel.get_pooled_output", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.reduce_mean"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_pooled_output", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean"], ["", "def", "get_next_sentence_output", "(", "self", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Get loss and logits for the next sentence prediction.\"\"\"", "\n", "class_dim", "=", "mtf", ".", "Dimension", "(", "\"class\"", ",", "2", ")", "\n", "input_tensor", "=", "self", ".", "get_pooled_output", "(", ")", "\n", "# Simple binary classification. Note that 0 is \"next sentence\" and 1 is", "\n", "# \"random sentence\". This weight matrix is not used after pre-training.", "\n", "logits", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "input_tensor", ",", "\n", "reduced_dims", "=", "[", "self", ".", "model_dim", "]", ",", "\n", "new_dims", "=", "[", "class_dim", "]", ",", "\n", "kernel_initializer", "=", "self", ".", "dense_initializer", ",", "\n", "name", "=", "\"cls/seq_relationship\"", ",", "\n", "use_bias", "=", "self", ".", "config", ".", "use_bias", ")", "\n", "per_example_loss", "=", "mtf", ".", "layers", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", ",", "labels", ",", "class_dim", ",", "z_loss", "=", "1e-4", ")", "\n", "loss", "=", "mtf", ".", "reduce_mean", "(", "per_example_loss", ")", "\n", "return", "(", "loss", ",", "per_example_loss", ",", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_pooled_output": [[496, 498], ["None"], "methods", ["None"], ["", "def", "get_pooled_output", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_sequence_output": [[499, 507], ["None"], "methods", ["None"], ["", "def", "get_sequence_output", "(", "self", ")", ":", "\n", "    ", "\"\"\"Gets final hidden layer of encoder.\n\n    Returns:\n      float Tensor of shape [batch_dim, seq_dim, model_dim] corresponding\n      to the final hidden of the transformer encoder.\n    \"\"\"", "\n", "return", "self", ".", "sequence_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_all_encoder_layers": [[508, 510], ["None"], "methods", ["None"], ["", "def", "get_all_encoder_layers", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_word_embedding_output": [[511, 522], ["None"], "methods", ["None"], ["", "def", "get_word_embedding_output", "(", "self", ")", ":", "\n", "    ", "\"\"\"Get output of the word(piece) embedding lookup.\n\n    This is BEFORE positional embeddings and token type embeddings have been\n    added.\n\n    Returns:\n      float Tensor of shape [batch_dim, seq_dim, model_dim] corresponding\n      to the output of the word(piece) embedding layer.\n    \"\"\"", "\n", "return", "self", ".", "word_embedding_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_embedding_output": [[523, 533], ["None"], "methods", ["None"], ["", "def", "get_embedding_output", "(", "self", ")", ":", "\n", "    ", "\"\"\"Gets output of the embedding lookup (i.e., input to the transformer).\n\n    Returns:\n      float Tensor of shape [batch_dim, seq_dim, model_dim] corresponding\n      to the output of the embedding layer, after summing the word\n      embeddings with the positional embeddings and the token type embeddings,\n      then performing layer normalization. This is the input to the transformer.\n    \"\"\"", "\n", "return", "self", ".", "embedding_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.normalize": [[534, 538], ["bert.layer_norm"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.layer_norm"], ["", "def", "normalize", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "layer_norm", "(", "x", ",", "self", ".", "model_dim", ",", "\n", "subtract_mean", "=", "self", ".", "config", ".", "use_bias", ",", "\n", "use_bias", "=", "self", ".", "config", ".", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_embedding_table": [[539, 541], ["None"], "methods", ["None"], ["", "def", "get_embedding_table", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "embedding_table", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_extra_loss": [[542, 544], ["mesh_tensorflow.add_n", "mesh_tensorflow.add_n"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n"], ["", "def", "get_extra_loss", "(", "self", ")", ":", "\n", "    ", "return", "mtf", ".", "add_n", "(", "self", ".", "_extra_losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.vocab_dim": [[545, 551], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_dim", "(", "self", ")", ":", "\n", "# pad vocab to a multiple of 128 so as to be splittable.", "\n", "# TODO(noam): This creates issues in checkpoint compatibility", "\n", "    ", "n", "=", "self", ".", "config", ".", "vocab_size", "\n", "return", "mtf", ".", "Dimension", "(", "\"vocab\"", ",", "n", "+", "(", "-", "n", "%", "128", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.model_dim": [[552, 555], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_dim", "(", "self", ")", ":", "\n", "    ", "return", "mtf", ".", "Dimension", "(", "\"hidden\"", ",", "self", ".", "config", ".", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.token_type_vocab_dim": [[556, 559], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["None"], ["", "@", "property", "\n", "def", "token_type_vocab_dim", "(", "self", ")", ":", "\n", "    ", "return", "mtf", ".", "Dimension", "(", "\"token_type_vocab\"", ",", "self", ".", "config", ".", "type_vocab_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.feedforward_intermediate_dim": [[560, 564], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["None"], ["", "@", "property", "\n", "def", "feedforward_intermediate_dim", "(", "self", ")", ":", "\n", "    ", "return", "mtf", ".", "Dimension", "(", "\"intermediate\"", ",", "\n", "self", ".", "config", ".", "feedforward_intermediate_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.num_heads_dim": [[565, 568], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_heads_dim", "(", "self", ")", ":", "\n", "    ", "return", "mtf", ".", "Dimension", "(", "\"num_heads\"", ",", "self", ".", "config", ".", "attention_num_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.softmax_heads_dims": [[569, 572], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "softmax_heads_dims", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "num_heads_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.max_position_embeddings_dim": [[573, 577], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_position_embeddings_dim", "(", "self", ")", ":", "\n", "    ", "return", "mtf", ".", "Dimension", "(", "\"max_position_embeddings\"", ",", "\n", "self", ".", "config", ".", "max_position_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.seq_dim": [[578, 581], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "seq_dim", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_seq_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.memory_seq_dim": [[582, 585], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "memory_seq_dim", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_memory_seq_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.dense_initializer": [[586, 593], ["tensorflow.truncated_normal_initializer", "mesh_tensorflow.layers.VarianceScalingInitializer", "mesh_tensorflow.layers.VarianceScalingInitializer"], "methods", ["None"], ["", "@", "property", "\n", "def", "dense_initializer", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "config", ".", "initializer_range", ":", "\n", "      ", "return", "tf", ".", "truncated_normal_initializer", "(", "\n", "stddev", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "else", ":", "\n", "      ", "return", "mtf", ".", "layers", ".", "VarianceScalingInitializer", "(", "scale", "=", "0.4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.embedding_initializer": [[594, 604], ["isinstance", "initializer"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.experimental.input_reader.SubBatchSlicer.initializer"], ["", "", "@", "property", "\n", "def", "embedding_initializer", "(", "self", ")", ":", "\n", "    ", "initializer", "=", "self", ".", "dense_initializer", "\n", "if", "isinstance", "(", "initializer", ",", "mtf", ".", "layers", ".", "DenseInitializer", ")", ":", "\n", "# embedding matrix is also used as classifier weight matrix.", "\n", "# scale it appropriately.", "\n", "      ", "return", "initializer", "(", "\n", "reduced_dims", "=", "[", "self", ".", "model_dim", "]", ",", "new_dims", "=", "[", "self", ".", "vocab_dim", "]", ")", "\n", "", "else", ":", "\n", "      ", "return", "initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.size_per_head_dim": [[605, 617], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "int", "ValueError"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "size_per_head_dim", "(", "self", ")", ":", "\n", "    ", "\"\"\"Dimensionality of attention queries/keys/values.\"\"\"", "\n", "if", "self", ".", "config", ".", "attention_head_size", ":", "\n", "      ", "attention_head_size", "=", "self", ".", "config", ".", "attention_head_size", "\n", "", "else", ":", "\n", "      ", "if", "self", ".", "model_dim", ".", "size", "%", "self", ".", "num_heads_dim", ".", "size", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "self", ".", "model_dim", ".", "size", ",", "self", ".", "num_heads_dim", ".", "size", ")", ")", "\n", "", "attention_head_size", "=", "int", "(", "self", ".", "model_dim", ".", "size", "/", "self", ".", "num_heads_dim", ".", "size", ")", "\n", "", "return", "mtf", ".", "Dimension", "(", "\"attention_head\"", ",", "attention_head_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.key_dim": [[618, 624], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "ValueError"], "methods", ["None"], ["", "@", "property", "\n", "def", "key_dim", "(", "self", ")", ":", "\n", "    ", "\"\"\"Dimensionality of attention key.\"\"\"", "\n", "if", "self", ".", "config", ".", "attention_key_head_size", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"The key head size is not defined.\"", ")", "\n", "", "return", "mtf", ".", "Dimension", "(", "\"d_k\"", ",", "self", ".", "config", ".", "attention_key_head_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.key_heads_dims": [[625, 631], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "ValueError"], "methods", ["None"], ["", "@", "property", "\n", "def", "key_heads_dims", "(", "self", ")", ":", "\n", "    ", "\"\"\"Dimensionality of number of key heads.\"\"\"", "\n", "if", "self", ".", "config", ".", "attention_num_key_heads", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"The number of key heads is not defined.\"", ")", "\n", "", "return", "mtf", ".", "Dimension", "(", "\"key_heads\"", ",", "self", ".", "config", ".", "attention_num_key_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.value_dim": [[632, 638], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "ValueError"], "methods", ["None"], ["", "@", "property", "\n", "def", "value_dim", "(", "self", ")", ":", "\n", "    ", "\"\"\"Dimensionality of attention value.\"\"\"", "\n", "if", "self", ".", "config", ".", "attention_value_head_size", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"The value head size is not defined.\"", ")", "\n", "", "return", "mtf", ".", "Dimension", "(", "\"d_v\"", ",", "self", ".", "config", ".", "attention_value_head_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.value_heads_dims": [[639, 645], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "ValueError"], "methods", ["None"], ["", "@", "property", "\n", "def", "value_heads_dims", "(", "self", ")", ":", "\n", "    ", "\"\"\"Dimensionality of number of value heads.\"\"\"", "\n", "if", "self", ".", "config", ".", "attention_num_value_heads", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"The number of value heads is not defined.\"", ")", "\n", "", "return", "mtf", ".", "Dimension", "(", "\"value_heads\"", ",", "self", ".", "config", ".", "attention_num_value_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.get_activation": [[647, 682], ["activation_string.lower", "isinstance", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.lower"], ["", "", "def", "get_activation", "(", "activation_string", ")", ":", "\n", "  ", "\"\"\"Maps a string to a Python function, e.g., \"relu\" => `mtf.relu`.\n\n  Args:\n    activation_string: String name of the activation function.\n\n  Returns:\n    A Python function corresponding to the activation function. If\n    `activation_string` is None, empty, or \"linear\", this will return None.\n    If `activation_string` is not a string, it will return `activation_string`.\n\n  Raises:\n    ValueError: The `activation_string` does not correspond to a known\n      activation.\n  \"\"\"", "\n", "\n", "# We assume that anything that\"s not a string is already an activation", "\n", "# function, so we just return it.", "\n", "if", "not", "isinstance", "(", "activation_string", ",", "six", ".", "string_types", ")", ":", "\n", "    ", "return", "activation_string", "\n", "\n", "", "if", "not", "activation_string", ":", "\n", "    ", "return", "None", "\n", "\n", "", "act", "=", "activation_string", ".", "lower", "(", ")", "\n", "if", "act", "==", "\"linear\"", ":", "\n", "    ", "return", "None", "\n", "", "elif", "act", "==", "\"gelu\"", ":", "\n", "    ", "return", "mtf", ".", "gelu", "\n", "", "elif", "act", "==", "\"relu\"", ":", "\n", "    ", "return", "mtf", ".", "relu", "\n", "", "elif", "act", "==", "\"tanh\"", ":", "\n", "    ", "return", "mtf", ".", "tanh", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unsupported activation: %s\"", "%", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.get_assignment_map_from_checkpoint": [[684, 713], ["collections.OrderedDict", "tensorflow.logging.info", "tensorflow.train.list_variables", "collections.OrderedDict", "re.match", "re.match.group"], "function", ["None"], ["", "", "def", "get_assignment_map_from_checkpoint", "(", "tvars", ",", "init_checkpoint", ")", ":", "\n", "  ", "\"\"\"Compute the union of the current variables and checkpoint variables.\"\"\"", "\n", "assignment_map", "=", "{", "}", "\n", "initialized_variable_names", "=", "{", "}", "\n", "\n", "name_to_variable", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "var", "in", "tvars", ":", "\n", "    ", "name", "=", "var", ".", "name", "\n", "m", "=", "re", ".", "match", "(", "\"^(.*):\\\\d+$\"", ",", "name", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "      ", "name", "=", "m", ".", "group", "(", "1", ")", "\n", "\n", "", "if", "\"global_step\"", "in", "name", "or", "\"adam_\"", "in", "name", "or", "\"slot_\"", "in", "name", ":", "\n", "      ", "continue", "\n", "", "name_to_variable", "[", "name", "]", "=", "var", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"init_checkpoint:{} \"", ".", "format", "(", "init_checkpoint", ")", ")", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "init_checkpoint", ")", "\n", "\n", "assignment_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "x", "in", "init_vars", ":", "\n", "    ", "(", "name", ",", "var", ")", "=", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "\n", "if", "name", "not", "in", "name_to_variable", ":", "\n", "      ", "continue", "\n", "", "assignment_map", "[", "name", "]", "=", "name", "\n", "initialized_variable_names", "[", "name", "]", "=", "1", "\n", "initialized_variable_names", "[", "name", "+", "\":0\"", "]", "=", "1", "\n", "\n", "", "return", "(", "assignment_map", ",", "initialized_variable_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert._relative_position_bucket": [[715, 758], ["mesh_tensorflow.less", "mesh_tensorflow.minimum", "mesh_tensorflow.where", "mesh_tensorflow.abs", "mesh_tensorflow.maximum", "mesh_tensorflow.to_int32", "mesh_tensorflow.to_int32", "mesh_tensorflow.less", "mesh_tensorflow.log", "math.log", "mesh_tensorflow.to_float"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.minimum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.where", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.less", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.log", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float"], ["", "def", "_relative_position_bucket", "(", "relative_position", ",", "\n", "bidirectional", "=", "True", ",", "\n", "num_buckets", "=", "32", ",", "\n", "max_distance", "=", "128", ")", ":", "\n", "  ", "\"\"\"Translate relative position to a bucket number for relative attention.\n\n  The relative position is defined as memory_position - query_position, i.e.\n  the distance in tokens from the attending position to the attended-to\n  position.  If bidirectional=False, then positive relative positions are\n  invalid.\n\n  We use smaller buckets for small absolute relative_position and larger buckets\n  for larger absolute relative_positions.  All relative positions >=max_distance\n  map to the same bucket.  All relative positions <=-max_distance map to the\n  same bucket.  This should allow for more graceful generalization to longer\n  sequences than the model has been trained on.\n\n  Args:\n    relative_position: an int32 Tensor\n    bidirectional: a boolean - whether the attention is bidirectional\n    num_buckets: an integer\n    max_distance: an integer\n  Returns:\n    a Tensor with the same shape as relative_position, containing int32\n      values in the range [0, num_buckets)\n  \"\"\"", "\n", "ret", "=", "0", "\n", "n", "=", "-", "relative_position", "\n", "if", "bidirectional", ":", "\n", "    ", "num_buckets", "//=", "2", "\n", "ret", "+=", "mtf", ".", "to_int32", "(", "mtf", ".", "less", "(", "n", ",", "0", ")", ")", "*", "num_buckets", "\n", "n", "=", "mtf", ".", "abs", "(", "n", ")", "\n", "", "else", ":", "\n", "    ", "n", "=", "mtf", ".", "maximum", "(", "n", ",", "0", ")", "\n", "# now n is in the range [0, inf)", "\n", "", "max_exact", "=", "num_buckets", "//", "2", "\n", "is_small", "=", "mtf", ".", "less", "(", "n", ",", "max_exact", ")", "\n", "val_if_large", "=", "max_exact", "+", "mtf", ".", "to_int32", "(", "\n", "mtf", ".", "log", "(", "mtf", ".", "to_float", "(", "n", ")", "/", "max_exact", ")", "\n", "/", "math", ".", "log", "(", "max_distance", "/", "max_exact", ")", "*", "(", "num_buckets", "-", "max_exact", ")", ")", "\n", "val_if_large", "=", "mtf", ".", "minimum", "(", "val_if_large", ",", "num_buckets", "-", "1", ")", "\n", "ret", "+=", "mtf", ".", "where", "(", "is_small", ",", "n", ",", "val_if_large", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.layer_norm": [[760, 802], ["tensorflow.variable_scope", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.rsqrt", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.square", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "mesh_tensorflow.Shape", "mesh_tensorflow.Shape", "tensorflow.ones_initializer", "tensorflow.zeros_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.rsqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable"], ["", "def", "layer_norm", "(", "x", ",", "dim", ",", "epsilon", "=", "1e-6", ",", "\n", "subtract_mean", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Layer normalization over dimension dim.\n\n  TODO(noam): This is cleaner than the version in mtf.layers\n  Move this version into mtf.layers to replace the one there.\n\n  Args:\n    x: a mtf.Tensor whose shape contains dim.\n    dim: a mtf.Dimension\n    epsilon: a floating point number\n    subtract_mean: a boolean\n    use_scale: a boolean\n    use_bias: a boolean\n    name: a string used for tf.variable_scope.\n\n  Returns:\n    a mtf.Tensor with same shape as x.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"layer_norm\"", ")", ":", "\n", "    ", "if", "subtract_mean", ":", "\n", "      ", "x", "-=", "mtf", ".", "reduce_mean", "(", "x", ",", "reduced_dim", "=", "dim", ")", "\n", "", "variance", "=", "mtf", ".", "reduce_mean", "(", "mtf", ".", "square", "(", "x", ")", ",", "reduced_dim", "=", "dim", ")", "\n", "x", "*=", "mtf", ".", "rsqrt", "(", "variance", "+", "epsilon", ")", "\n", "if", "use_scale", ":", "\n", "      ", "x", "*=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\n", "\"scale\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "dim", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "\n", "activation_dtype", "=", "x", ".", "dtype", ")", "\n", "", "if", "use_bias", ":", "\n", "      ", "x", "+=", "mtf", ".", "get_variable", "(", "\n", "x", ".", "mesh", ",", "\n", "\"bias\"", ",", "\n", "mtf", ".", "Shape", "(", "[", "dim", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "activation_dtype", "=", "x", ".", "dtype", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.optimization.clip_by_global_norm": [[28, 36], ["mesh_tensorflow.sqrt", "mesh_tensorflow.add_n", "mesh_tensorflow.maximum", "mesh_tensorflow.reduce_sum", "mesh_tensorflow.square"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.sqrt", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.add_n", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.maximum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_sum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square"], ["def", "clip_by_global_norm", "(", "grads", ",", "clip_norm", ")", ":", "\n", "  ", "\"\"\"Clip the grads by global norm.\"\"\"", "\n", "global_norm", "=", "mtf", ".", "sqrt", "(", "\n", "mtf", ".", "add_n", "(", "[", "mtf", ".", "reduce_sum", "(", "mtf", ".", "square", "(", "t", ")", ")", "for", "t", "in", "grads", "if", "t", "is", "not", "None", "\n", "]", ")", ")", "\n", "multiplier", "=", "clip_norm", "/", "mtf", ".", "maximum", "(", "global_norm", ",", "clip_norm", ")", "\n", "clipped_grads", "=", "[", "None", "if", "t", "is", "None", "else", "t", "*", "multiplier", "for", "t", "in", "grads", "]", "\n", "return", "clipped_grads", ",", "global_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.optimization.create_optimizer": [[38, 113], ["tensorflow.train.get_or_create_global_step", "mesh_tensorflow.gradients", "mtf_optimize.AdafactorOptimizer.apply_grads", "tensorflow.constant", "tensorflow.train.polynomial_decay", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.AdamWeightDecayOptimizer", "optimization.clip_by_global_norm", "tensorflow.cast", "tensorflow.constant", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "ValueError", "mesh_tensorflow.AdafactorOptimizer", "ValueError", "mesh_tensorflow.constant"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.Optimizer.apply_grads", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.optimization.clip_by_global_norm", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["", "def", "create_optimizer", "(", "loss", ",", "init_lr", ",", "num_train_steps", ",", "num_warmup_steps", ",", "\n", "max_optimized_variable_size", "=", "None", ",", "\n", "optimizer", "=", "\"adam\"", ",", "\n", "clip_gradients", "=", "True", ")", ":", "\n", "  ", "\"\"\"Creates an optimizer training op.\"\"\"", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "mesh", "=", "loss", ".", "mesh", "\n", "\n", "if", "init_lr", ":", "\n", "# Implements linear decay of the learning rate.", "\n", "    ", "learning_rate", "=", "tf", ".", "constant", "(", "value", "=", "init_lr", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "learning_rate", "=", "tf", ".", "train", ".", "polynomial_decay", "(", "\n", "learning_rate", ",", "\n", "global_step", ",", "\n", "num_train_steps", ",", "\n", "end_learning_rate", "=", "0.0", ",", "\n", "power", "=", "1.0", ",", "\n", "cycle", "=", "False", ")", "\n", "# Implements linear warmup. I.e., if global_step < num_warmup_steps, the", "\n", "# learning rate will be `global_step/num_warmup_steps * init_lr`.", "\n", "if", "num_warmup_steps", ":", "\n", "      ", "global_steps_int", "=", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "int32", ")", "\n", "warmup_steps_int", "=", "tf", ".", "constant", "(", "num_warmup_steps", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "global_steps_float", "=", "tf", ".", "cast", "(", "global_steps_int", ",", "tf", ".", "float32", ")", "\n", "warmup_steps_float", "=", "tf", ".", "cast", "(", "warmup_steps_int", ",", "tf", ".", "float32", ")", "\n", "\n", "warmup_percent_done", "=", "global_steps_float", "/", "warmup_steps_float", "\n", "warmup_learning_rate", "=", "init_lr", "*", "warmup_percent_done", "\n", "\n", "is_warmup", "=", "tf", ".", "cast", "(", "global_steps_int", "<", "warmup_steps_int", ",", "tf", ".", "float32", ")", "\n", "learning_rate", "=", "(", "(", "1.0", "-", "is_warmup", ")", "*", "learning_rate", "+", "\n", "is_warmup", "*", "warmup_learning_rate", ")", "\n", "\n", "", "mtf_learning_rate", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "learning_rate", ",", "[", "]", ")", "\n", "", "else", ":", "\n", "    ", "if", "optimizer", "==", "\"adam\"", ":", "\n", "      ", "raise", "ValueError", "(", "\"Adam does not have a default learning rate\"", ")", "\n", "", "learning_rate", "=", "None", "\n", "mtf_learning_rate", "=", "None", "\n", "\n", "# It is recommended that you use this optimizer for fine tuning, since this", "\n", "# is how the model was trained (note that the Adam m/v variables are NOT", "\n", "# loaded from init_checkpoint.)", "\n", "", "if", "optimizer", "==", "\"adam\"", ":", "\n", "    ", "optimizer", "=", "mtf_optimize", ".", "AdamWeightDecayOptimizer", "(", "\n", "learning_rate", "=", "mtf_learning_rate", ",", "\n", "weight_decay_rate", "=", "0.01", ",", "\n", "beta_1", "=", "0.9", ",", "\n", "beta_2", "=", "0.999", ",", "\n", "epsilon", "=", "1e-6", ",", "\n", "exclude_from_weight_decay", "=", "[", "\"LayerNorm\"", ",", "\"layer_norm\"", ",", "\"bias\"", "]", ")", "\n", "", "elif", "optimizer", "==", "\"adafactor\"", ":", "\n", "    ", "optimizer", "=", "mtf_optimize", ".", "AdafactorOptimizer", "(", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "min_dim_size_to_factor", "=", "32", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"unknown optimizer\"", ")", "\n", "\n", "", "trainable_variables", "=", "mesh", ".", "graph", ".", "trainable_variables", "\n", "if", "max_optimized_variable_size", ":", "\n", "    ", "trainable_variables", "=", "[", "t", "for", "t", "in", "trainable_variables", "\n", "if", "t", ".", "shape", ".", "size", "<=", "max_optimized_variable_size", "]", "\n", "\n", "", "var_grads", "=", "mtf", ".", "gradients", "(", "\n", "[", "loss", "]", ",", "[", "v", ".", "outputs", "[", "0", "]", "for", "v", "in", "trainable_variables", "]", ")", "\n", "\n", "# This is how the model was pre-trained.", "\n", "if", "clip_gradients", ":", "\n", "    ", "(", "var_grads", ",", "_", ")", "=", "clip_by_global_norm", "(", "\n", "var_grads", ",", "clip_norm", "=", "mtf", ".", "constant", "(", "mesh", ",", "1.0", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "\n", "", "update_ops", "=", "optimizer", ".", "apply_grads", "(", "var_grads", ",", "trainable_variables", ")", "\n", "\n", "return", "learning_rate", ",", "update_ops", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.InputExample.__init__": [[148, 164], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "guid", ",", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "None", ")", ":", "\n", "    ", "\"\"\"Constructs a InputExample.\n\n    Args:\n      guid: Unique id for the example.\n      text_a: string. The untokenized text of the first sequence. For single\n        sequence tasks, only this sequence must be specified.\n      text_b: (Optional) string. The untokenized text of the second sequence.\n        Only must be specified for sequence pair tasks.\n      label: (Optional) string. The label of the example. This should be\n        specified for train and dev examples, but not for test examples.\n    \"\"\"", "\n", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "text_b", "=", "text_b", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.InputFeatures.__init__": [[182, 193], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "input_ids", ",", "\n", "input_mask", ",", "\n", "segment_ids", ",", "\n", "label_id", ",", "\n", "is_real_example", "=", "True", ")", ":", "\n", "    ", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "label_id", "=", "label_id", "\n", "self", ".", "is_real_example", "=", "is_real_example", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor.get_train_examples": [[198, 201], ["NotImplementedError"], "methods", ["None"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor.get_dev_examples": [[202, 205], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor.get_test_examples": [[206, 209], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"Gets a collection of `InputExample`s for prediction.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor.get_labels": [[210, 213], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "    ", "\"\"\"Gets the list of labels for this data set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv": [[214, 223], ["tensorflow.gfile.Open", "csv.reader", "lines.append"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_read_tsv", "(", "cls", ",", "input_file", ",", "quotechar", "=", "None", ")", ":", "\n", "    ", "\"\"\"Reads a tab separated value file.\"\"\"", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "input_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "      ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\"\\t\"", ",", "quotechar", "=", "quotechar", ")", "\n", "lines", "=", "[", "]", "\n", "for", "line", "in", "reader", ":", "\n", "        ", "lines", ".", "append", "(", "line", ")", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.XnliProcessor.__init__": [[228, 230], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "language", "=", "\"zh\"", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.XnliProcessor.get_train_examples": [[231, 249], ["run_classifier.XnliProcessor._read_tsv", "enumerate", "os.path.join", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "examples.append", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "run_classifier.InputExample"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "lines", "=", "self", ".", "_read_tsv", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"multinli\"", ",", "\n", "\"multinli.train.%s.tsv\"", "%", "self", ".", "language", ")", ")", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "continue", "\n", "", "guid", "=", "\"train-%d\"", "%", "(", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "0", "]", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "1", "]", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "2", "]", ")", "\n", "if", "label", "==", "tokenization", ".", "convert_to_unicode", "(", "\"contradictory\"", ")", ":", "\n", "        ", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "\"contradiction\"", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.XnliProcessor.get_dev_examples": [[250, 267], ["run_classifier.XnliProcessor._read_tsv", "enumerate", "os.path.join", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "examples.append", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "run_classifier.InputExample"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "lines", "=", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"xnli.dev.tsv\"", ")", ")", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "continue", "\n", "", "guid", "=", "\"dev-%d\"", "%", "(", "i", ")", "\n", "language", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "0", "]", ")", "\n", "if", "language", "!=", "tokenization", ".", "convert_to_unicode", "(", "self", ".", "language", ")", ":", "\n", "        ", "continue", "\n", "", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "6", "]", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "7", "]", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "1", "]", ")", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.XnliProcessor.get_labels": [[268, 271], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"contradiction\"", ",", "\"entailment\"", ",", "\"neutral\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.MnliProcessor.get_train_examples": [[276, 280], ["run_classifier.MnliProcessor._create_examples", "run_classifier.MnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.MnliProcessor.get_dev_examples": [[281, 286], ["run_classifier.MnliProcessor._create_examples", "run_classifier.MnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev_matched.tsv\"", ")", ")", ",", "\n", "\"dev_matched\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.MnliProcessor.get_test_examples": [[287, 291], ["run_classifier.MnliProcessor._create_examples", "run_classifier.MnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test_matched.tsv\"", ")", ")", ",", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.MnliProcessor.get_labels": [[292, 295], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"contradiction\"", ",", "\"entailment\"", ",", "\"neutral\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.MnliProcessor._create_examples": [[296, 312], ["enumerate", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "examples.append", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "run_classifier.InputExample", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "    ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "0", "]", ")", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "8", "]", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "9", "]", ")", "\n", "if", "set_type", "==", "\"test\"", ":", "\n", "        ", "label", "=", "\"contradiction\"", "\n", "", "else", ":", "\n", "        ", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "-", "1", "]", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.MrpcProcessor.get_train_examples": [[317, 321], ["run_classifier.MrpcProcessor._create_examples", "run_classifier.MrpcProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.MrpcProcessor.get_dev_examples": [[322, 326], ["run_classifier.MrpcProcessor._create_examples", "run_classifier.MrpcProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.MrpcProcessor.get_test_examples": [[327, 331], ["run_classifier.MrpcProcessor._create_examples", "run_classifier.MrpcProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.tsv\"", ")", ")", ",", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.MrpcProcessor.get_labels": [[332, 335], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.MrpcProcessor._create_examples": [[336, 352], ["enumerate", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "examples.append", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "run_classifier.InputExample"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "    ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "3", "]", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "4", "]", ")", "\n", "if", "set_type", "==", "\"test\"", ":", "\n", "        ", "label", "=", "\"0\"", "\n", "", "else", ":", "\n", "        ", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "0", "]", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor.get_train_examples": [[357, 361], ["run_classifier.ColaProcessor._create_examples", "run_classifier.ColaProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor.get_dev_examples": [[362, 366], ["run_classifier.ColaProcessor._create_examples", "run_classifier.ColaProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor.get_test_examples": [[367, 371], ["run_classifier.ColaProcessor._create_examples", "run_classifier.ColaProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.tsv\"", ")", ")", ",", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor.get_labels": [[372, 375], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor._create_examples": [[376, 393], ["enumerate", "examples.append", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "mesh_tensorflow.convert_to_unicode", "run_classifier.InputExample"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "    ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "# Only the test set has a header", "\n", "      ", "if", "set_type", "==", "\"test\"", "and", "i", "==", "0", ":", "\n", "        ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "if", "set_type", "==", "\"test\"", ":", "\n", "        ", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "1", "]", ")", "\n", "label", "=", "\"0\"", "\n", "", "else", ":", "\n", "        ", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "3", "]", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "1", "]", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.convert_single_example": [[395, 495], ["isinstance", "enumerate", "tokenizer.tokenize", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "tokenizer.convert_tokens_to_ids", "run_classifier.InputFeatures", "run_classifier.InputFeatures", "tokenizer.tokenize", "run_classifier._truncate_seq_pair", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "len", "len", "tokenizer.convert_tokens_to_ids.append", "input_mask.append", "segment_ids.append", "len", "len", "len", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "len", "tokens.append", "segment_ids.append", "mesh_tensorflow.printable_text", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_tokens_to_ids", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier._truncate_seq_pair", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text"], ["", "", "def", "convert_single_example", "(", "ex_index", ",", "example", ",", "label_list", ",", "max_seq_length", ",", "\n", "tokenizer", ")", ":", "\n", "  ", "\"\"\"Converts a single `InputExample` into a single `InputFeatures`.\"\"\"", "\n", "\n", "if", "isinstance", "(", "example", ",", "PaddingInputExample", ")", ":", "\n", "    ", "return", "InputFeatures", "(", "\n", "input_ids", "=", "[", "0", "]", "*", "max_seq_length", ",", "\n", "input_mask", "=", "[", "0", "]", "*", "max_seq_length", ",", "\n", "segment_ids", "=", "[", "0", "]", "*", "max_seq_length", ",", "\n", "label_id", "=", "0", ",", "\n", "is_real_example", "=", "False", ")", "\n", "\n", "", "label_map", "=", "{", "}", "\n", "for", "(", "i", ",", "label", ")", "in", "enumerate", "(", "label_list", ")", ":", "\n", "    ", "label_map", "[", "label", "]", "=", "i", "\n", "\n", "", "tokens_a", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_a", ")", "\n", "tokens_b", "=", "None", "\n", "if", "example", ".", "text_b", ":", "\n", "    ", "tokens_b", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_b", ")", "\n", "\n", "", "if", "tokens_b", ":", "\n", "# Modifies `tokens_a` and `tokens_b` in place so that the total", "\n", "# length is less than the specified length.", "\n", "# Account for [CLS], [SEP], [SEP] with \"- 3\"", "\n", "    ", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_seq_length", "-", "3", ")", "\n", "", "else", ":", "\n", "# Account for [CLS] and [SEP] with \"- 2\"", "\n", "    ", "if", "len", "(", "tokens_a", ")", ">", "max_seq_length", "-", "2", ":", "\n", "      ", "tokens_a", "=", "tokens_a", "[", "0", ":", "(", "max_seq_length", "-", "2", ")", "]", "\n", "\n", "# The convention in BERT is:", "\n", "# (a) For sequence pairs:", "\n", "#  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]", "\n", "#  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1", "\n", "# (b) For single sequences:", "\n", "#  tokens:   [CLS] the dog is hairy . [SEP]", "\n", "#  type_ids: 0     0   0   0  0     0 0", "\n", "#", "\n", "# Where \"type_ids\" are used to indicate whether this is the first", "\n", "# sequence or the second sequence. The embedding vectors for `type=0` and", "\n", "# `type=1` were learned during pre-training and are added to the wordpiece", "\n", "# embedding vector (and position vector). This is not *strictly* necessary", "\n", "# since the [SEP] token unambiguously separates the sequences, but it makes", "\n", "# it easier for the model to learn the concept of sequences.", "\n", "#", "\n", "# For classification tasks, the first vector (corresponding to [CLS]) is", "\n", "# used as the \"sentence vector\". Note that this only makes sense because", "\n", "# the entire model is fine-tuned.", "\n", "", "", "tokens", "=", "[", "]", "\n", "segment_ids", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "for", "token", "in", "tokens_a", ":", "\n", "    ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "if", "tokens_b", ":", "\n", "    ", "for", "token", "in", "tokens_b", ":", "\n", "      ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "while", "len", "(", "input_ids", ")", "<", "max_seq_length", ":", "\n", "    ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "label_id", "=", "label_map", "[", "example", ".", "label", "]", "\n", "if", "ex_index", "<", "5", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"guid: %s\"", "%", "(", "example", ".", "guid", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"tokens: %s\"", "%", "\n", "\" \"", ".", "join", "(", "[", "tokenization", ".", "printable_text", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"input_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_mask", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"segment_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "segment_ids", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"label: %s (id = %d)\"", "%", "(", "example", ".", "label", ",", "label_id", ")", ")", "\n", "\n", "", "feature", "=", "InputFeatures", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "label_id", "=", "label_id", ",", "\n", "is_real_example", "=", "True", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.file_based_convert_examples_to_features": [[497, 527], ["tensorflow.python_io.TFRecordWriter", "enumerate", "tf.python_io.TFRecordWriter.close", "tensorflow.python_io.TFRecordOptions", "run_classifier.convert_single_example", "collections.OrderedDict", "run_classifier.file_based_convert_examples_to_features.create_int_feature"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.FeatureWriter.close", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.convert_single_example"], ["", "def", "file_based_convert_examples_to_features", "(", "examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ",", "\n", "output_file", ")", ":", "\n", "  ", "\"\"\"Convert a set of `InputExample`s to a TFRecord file.\"\"\"", "\n", "\n", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "\n", "output_file", ",", "tf", ".", "python_io", ".", "TFRecordOptions", "(", "output_buffer_size", "=", "2", "**", "24", ")", ")", "\n", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "    ", "if", "ex_index", "%", "10000", "==", "0", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Writing example %d of %d\"", "%", "(", "ex_index", ",", "len", "(", "examples", ")", ")", ")", "\n", "\n", "", "feature", "=", "convert_single_example", "(", "ex_index", ",", "example", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "def", "create_int_feature", "(", "values", ")", ":", "\n", "      ", "f", "=", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "list", "(", "values", ")", ")", ")", "\n", "return", "f", "\n", "\n", "", "features", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "features", "[", "\"input_ids\"", "]", "=", "create_int_feature", "(", "feature", ".", "input_ids", ")", "\n", "features", "[", "\"input_mask\"", "]", "=", "create_int_feature", "(", "feature", ".", "input_mask", ")", "\n", "features", "[", "\"segment_ids\"", "]", "=", "create_int_feature", "(", "feature", ".", "segment_ids", ")", "\n", "features", "[", "\"label_ids\"", "]", "=", "create_int_feature", "(", "[", "feature", ".", "label_id", "]", ")", "\n", "features", "[", "\"is_real_example\"", "]", "=", "create_int_feature", "(", "\n", "[", "int", "(", "feature", ".", "is_real_example", ")", "]", ")", "\n", "\n", "tf_example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "features", ")", ")", "\n", "writer", ".", "write", "(", "tf_example", ".", "SerializeToString", "(", ")", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.file_based_input_fn_builder": [[529, 575], ["tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.parse_single_example", "list", "tensorflow.data.TFRecordDataset", "d.shuffle.apply", "tf.parse_single_example.keys", "d.shuffle.repeat", "d.shuffle.shuffle", "tensorflow.data.experimental.map_and_batch", "tensorflow.to_int32", "run_classifier.file_based_input_fn_builder._decode_record"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_pretraining._decode_record"], ["", "def", "file_based_input_fn_builder", "(", "input_file", ",", "seq_length", ",", "is_training", ",", "\n", "drop_remainder", ")", ":", "\n", "  ", "\"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"", "\n", "\n", "name_to_features", "=", "{", "\n", "\"input_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"input_mask\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"segment_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"label_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"is_real_example\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "}", "\n", "\n", "def", "_decode_record", "(", "record", ",", "name_to_features", ")", ":", "\n", "    ", "\"\"\"Decodes a record to a TensorFlow example.\"\"\"", "\n", "example", "=", "tf", ".", "parse_single_example", "(", "record", ",", "name_to_features", ")", "\n", "\n", "# tf.Example only supports tf.int64, but the TPU only supports tf.int32.", "\n", "# So cast all int64 to int32.", "\n", "for", "name", "in", "list", "(", "example", ".", "keys", "(", ")", ")", ":", "\n", "      ", "t", "=", "example", "[", "name", "]", "\n", "if", "t", ".", "dtype", "==", "tf", ".", "int64", ":", "\n", "        ", "t", "=", "tf", ".", "to_int32", "(", "t", ")", "\n", "", "example", "[", "name", "]", "=", "t", "\n", "\n", "", "return", "example", "\n", "\n", "", "def", "input_fn", "(", "params", ")", ":", "\n", "    ", "\"\"\"The actual input function.\"\"\"", "\n", "batch_size", "=", "params", "[", "\"batch_size\"", "]", "\n", "\n", "# For training, we want a lot of parallel reading and shuffling.", "\n", "# For eval, we want no shuffling and parallel reading doesn't matter.", "\n", "d", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "input_file", ")", "\n", "if", "is_training", ":", "\n", "      ", "d", "=", "d", ".", "repeat", "(", ")", "\n", "d", "=", "d", ".", "shuffle", "(", "buffer_size", "=", "100", ")", "\n", "\n", "", "d", "=", "d", ".", "apply", "(", "\n", "tf", ".", "data", ".", "experimental", ".", "map_and_batch", "(", "\n", "lambda", "record", ":", "_decode_record", "(", "record", ",", "name_to_features", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_remainder", "=", "drop_remainder", ")", ")", "\n", "\n", "return", "d", "\n", "\n", "", "return", "input_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier._truncate_seq_pair": [[577, 592], ["len", "len", "len", "len", "tokens_a.pop", "tokens_b.pop"], "function", ["None"], ["", "def", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_length", ")", ":", "\n", "  ", "\"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"", "\n", "\n", "# This is a simple heuristic which will always truncate the longer sequence", "\n", "# one token at a time. This makes more sense than truncating an equal percent", "\n", "# of tokens from each, since if one sequence is very short then each token", "\n", "# that's truncated likely contains more information than a longer sequence.", "\n", "while", "True", ":", "\n", "    ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_length", ":", "\n", "      ", "break", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", ":", "\n", "      ", "tokens_a", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "      ", "tokens_b", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.create_model": [[594, 641], ["mesh_tensorflow.BertModel", "bert_lib.BertModel.get_pooled_output", "mesh_tensorflow.get_variable", "mesh_tensorflow.get_variable", "tensorflow.variable_scope", "mesh_tensorflow.dropout", "mesh_tensorflow.einsum", "mesh_tensorflow.softmax", "mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "tensorflow.truncated_normal_initializer", "tensorflow.zeros_initializer", "mesh_tensorflow.reduce_mean", "bert_lib.BertModel.get_extra_loss"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_pooled_output", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.get_variable", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.dropout", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.SimdMeshImpl.einsum", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_extra_loss"], ["", "", "", "def", "create_model", "(", "bert_config", ",", "is_training", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "\n", "labels", ",", "num_labels_dim", ",", "layout", ",", "mesh_shape", ")", ":", "\n", "  ", "\"\"\"Creates a classification model.\"\"\"", "\n", "model", "=", "bert_lib", ".", "BertModel", "(", "\n", "config", "=", "bert_config", ",", "\n", "is_training", "=", "is_training", ",", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "token_type_ids", "=", "segment_ids", ",", "\n", "layout", "=", "layout", ",", "\n", "mesh_shape", "=", "mesh_shape", ")", "\n", "\n", "# In the demo, we are doing a simple classification task on the entire", "\n", "# segment.", "\n", "#", "\n", "# If you want to use the token-level output, use model.get_sequence_output()", "\n", "# instead.", "\n", "output_layer", "=", "model", ".", "get_pooled_output", "(", ")", "\n", "\n", "hidden_dim", "=", "output_layer", ".", "shape", "[", "-", "1", "]", "\n", "mesh", "=", "input_ids", ".", "mesh", "\n", "\n", "output_weights", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\n", "\"output_weights\"", ",", "\n", "shape", "=", "[", "num_labels_dim", ",", "hidden_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "0.02", ")", ")", "\n", "\n", "output_bias", "=", "mtf", ".", "get_variable", "(", "\n", "mesh", ",", "\n", "\"output_bias\"", ",", "\n", "shape", "=", "[", "num_labels_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"loss\"", ")", ":", "\n", "# I.e., 0.1 dropout", "\n", "    ", "output_layer", "=", "mtf", ".", "dropout", "(", "output_layer", ",", "is_training", ",", "keep_prob", "=", "0.9", ")", "\n", "logits", "=", "mtf", ".", "einsum", "(", "[", "output_layer", ",", "output_weights", "]", ",", "\n", "reduced_dims", "=", "[", "hidden_dim", "]", ")", "\n", "logits", "=", "logits", "+", "output_bias", "\n", "probabilities", "=", "mtf", ".", "softmax", "(", "logits", ",", "reduced_dim", "=", "num_labels_dim", ")", "\n", "\n", "per_example_loss", "=", "mtf", ".", "layers", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", ",", "labels", ",", "vocab_dim", "=", "num_labels_dim", ")", "\n", "loss", "=", "mtf", ".", "reduce_mean", "(", "per_example_loss", ")", "+", "model", ".", "get_extra_loss", "(", ")", "\n", "\n", "return", "(", "loss", ",", "per_example_loss", ",", "logits", ",", "probabilities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.model_fn_builder": [[643, 811], ["tensorflow.logging.info", "sorted", "mesh_tensorflow.Graph", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_layout_rules", "tensorflow.logging.info", "mesh_tensorflow.utils.BalancedVariablePlacer", "mesh_tensorflow.simd_mesh_impl.SimdMeshImpl", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "run_classifier.create_model", "mesh_tensorflow.anonymize", "mesh_tensorflow.anonymize", "mesh_tensorflow.anonymize", "mesh_tensorflow.Lowering", "tensorflow.to_float", "tensorflow.trainable_variables", "tensorflow.logging.info", "features.keys", "tensorflow.logging.info", "host_placement_fn", "tensorflow.cast", "tensorflow.ones", "mesh_tensorflow.create_optimizer", "mtf.Lowering.export_to_tf_tensor", "tensorflow.train.get_global_step", "tf_update_ops.append", "tensorflow.logging.info", "tensorflow.group", "mesh_tensorflow.get_assignment_map_from_checkpoint", "tensorflow.logging.info", "mesh_tensorflow.utils.outside_all_rewrites", "mesh_tensorflow.MtfRestoreHook", "six.moves.range", "tensorflow.shape", "input_ids.get_shape", "input_ids.get_shape", "mtf.Lowering.lowered_operation", "tensorflow.assign_add", "tensorflow.train.init_from_checkpoint", "tensorflow.train.Saver", "tensorflow.add_to_collection", "mesh_tensorflow.MtfCheckpointSaverListener", "tensorflow.train.CheckpointSaverHook", "tensorflow.compat.v1.estimator.tpu.TPUEstimatorSpec", "tensorflow.argmax", "tensorflow.metrics.accuracy", "tensorflow.metrics.mean", "tensorflow.train.init_from_checkpoint", "tensorflow.train.Scaffold", "tensorflow.global_variables", "tensorflow.compat.v1.estimator.tpu.TPUEstimatorSpec", "tensorflow.compat.v1.estimator.tpu.TPUEstimatorSpec", "mtf.Lowering.export_to_tf_tensor", "mtf.Lowering.export_to_tf_tensor", "mtf.Lowering.export_to_tf_tensor"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.create_model", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.trainable_variables", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.ones", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.optimization.create_optimizer", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.get_assignment_map_from_checkpoint", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.outside_all_rewrites", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.get_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.get_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.lowered_operation", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign_add", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], ["", "", "def", "model_fn_builder", "(", "bert_config", ",", "num_labels", ",", "init_checkpoint", ",", "learning_rate", ",", "\n", "num_train_steps", ",", "num_warmup_steps", ",", "use_tpu", ")", ":", "\n", "  ", "\"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"", "\n", "\n", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"The `model_fn` for TPUEstimator.\"\"\"", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"*** Features ***\"", ")", "\n", "for", "name", "in", "sorted", "(", "features", ".", "keys", "(", ")", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s\"", "%", "(", "name", ",", "features", "[", "name", "]", ".", "shape", ")", ")", "\n", "\n", "# MTF setup.", "\n", "", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "FLAGS", ".", "mesh_shape", ")", "\n", "layout_rules", "=", "mtf", ".", "convert_to_layout_rules", "(", "FLAGS", ".", "layout", ")", "\n", "\n", "ctx", "=", "params", "[", "\"context\"", "]", "\n", "num_hosts", "=", "ctx", ".", "num_hosts", "\n", "host_placement_fn", "=", "ctx", ".", "tpu_host_placement_function", "\n", "device_list", "=", "[", "host_placement_fn", "(", "host_id", "=", "t", ")", "for", "t", "in", "range", "(", "num_hosts", ")", "]", "\n", "tf", ".", "logging", ".", "info", "(", "\"device_list = %s\"", "%", "device_list", ",", ")", "\n", "replica_cache_size", "=", "300", "*", "1000000", "# 300M per replica", "\n", "# Worker 0 caches all the TPU binaries.", "\n", "worker0_mem", "=", "replica_cache_size", "*", "ctx", ".", "num_replicas", "\n", "devices_memeory_usage", "=", "[", "worker0_mem", "]", "+", "[", "0", "]", "*", "(", "num_hosts", "-", "1", ")", "\n", "var_placer", "=", "mtf", ".", "utils", ".", "BalancedVariablePlacer", "(", "device_list", ",", "\n", "devices_memeory_usage", ")", "\n", "mesh_devices", "=", "[", "\"\"", "]", "*", "mesh_shape", ".", "size", "\n", "mesh_impl", "=", "mtf", ".", "simd_mesh_impl", ".", "SimdMeshImpl", "(", "mesh_shape", ",", "layout_rules", ",", "\n", "mesh_devices", ",", "\n", "ctx", ".", "device_assignment", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"bert_mesh\"", ",", "var_placer", ")", "\n", "\n", "input_ids", "=", "features", "[", "\"input_ids\"", "]", "\n", "input_mask", "=", "features", "[", "\"input_mask\"", "]", "\n", "segment_ids", "=", "features", "[", "\"segment_ids\"", "]", "\n", "label_ids", "=", "features", "[", "\"label_ids\"", "]", "\n", "is_real_example", "=", "None", "\n", "if", "\"is_real_example\"", "in", "features", ":", "\n", "      ", "is_real_example", "=", "tf", ".", "cast", "(", "features", "[", "\"is_real_example\"", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "      ", "is_real_example", "=", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "label_ids", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "batch_size", "=", "input_ids", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch_size", ")", "\n", "seq_length", "=", "input_ids", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "seq_dim", "=", "mtf", ".", "Dimension", "(", "\"seq\"", ",", "seq_length", ")", "\n", "num_labels_dim", "=", "mtf", ".", "Dimension", "(", "\"seq\"", ",", "num_labels", ")", "\n", "mtf_input_ids", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "input_ids", ",", "[", "batch_dim", ",", "seq_dim", "]", ")", "\n", "mtf_input_mask", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "input_mask", ",", "\n", "[", "batch_dim", ",", "seq_dim", "]", ")", "\n", "mtf_segment_ids", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "segment_ids", ",", "\n", "[", "batch_dim", ",", "seq_dim", "]", ")", "\n", "mtf_label_ids", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "label_ids", ",", "[", "batch_dim", "]", ")", "\n", "\n", "is_training", "=", "(", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "(", "total_loss", ",", "per_example_loss", ",", "logits", ",", "\n", "probabilities", ")", "=", "create_model", "(", "bert_config", ",", "is_training", ",", "mtf_input_ids", ",", "\n", "mtf_input_mask", ",", "mtf_segment_ids", ",", "\n", "mtf_label_ids", ",", "num_labels_dim", ",", "\n", "layout_rules", ",", "mesh_shape", ")", "\n", "total_loss", "=", "mtf", ".", "anonymize", "(", "total_loss", ")", "\n", "per_example_loss", "=", "mtf", ".", "anonymize", "(", "per_example_loss", ")", "\n", "logits", "=", "mtf", ".", "anonymize", "(", "logits", ")", "\n", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "_", ",", "update_ops", "=", "optimization_lib", ".", "create_optimizer", "(", "\n", "total_loss", ",", "\n", "learning_rate", ",", "\n", "num_train_steps", ",", "\n", "num_warmup_steps", ",", "\n", "max_optimized_variable_size", "=", "FLAGS", ".", "max_optimized_variable_size", ",", "\n", "optimizer", "=", "FLAGS", ".", "optimizer", ",", "\n", "clip_gradients", "=", "FLAGS", ".", "clip_gradients", ")", "\n", "\n", "", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "tf_loss", "=", "tf", ".", "to_float", "(", "lowering", ".", "export_to_tf_tensor", "(", "total_loss", ")", ")", "\n", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "global_step", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", "\n", "tf_update_ops", "=", "[", "lowering", ".", "lowered_operation", "(", "op", ")", "for", "op", "in", "update_ops", "]", "\n", "tf_update_ops", ".", "append", "(", "tf", ".", "assign_add", "(", "global_step", ",", "1", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"tf_update_ops: {}\"", ".", "format", "(", "tf_update_ops", ")", ")", "\n", "train_op", "=", "tf", ".", "group", "(", "tf_update_ops", ")", "\n", "", "elif", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "EVAL", ":", "\n", "\n", "      ", "def", "metric_fn", "(", "per_example_loss", ",", "label_ids", ",", "logits", ",", "is_real_example", ")", ":", "\n", "        ", "predictions", "=", "tf", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "accuracy", "=", "tf", ".", "metrics", ".", "accuracy", "(", "\n", "labels", "=", "label_ids", ",", "predictions", "=", "predictions", ",", "weights", "=", "is_real_example", ")", "\n", "loss", "=", "tf", ".", "metrics", ".", "mean", "(", "values", "=", "per_example_loss", ",", "weights", "=", "is_real_example", ")", "\n", "return", "{", "\n", "\"eval_accuracy\"", ":", "accuracy", ",", "\n", "\"eval_loss\"", ":", "loss", ",", "\n", "}", "\n", "\n", "", "eval_metrics", "=", "(", "metric_fn", ",", "[", "\n", "lowering", ".", "export_to_tf_tensor", "(", "per_example_loss", ")", ",", "label_ids", ",", "\n", "lowering", ".", "export_to_tf_tensor", "(", "logits", ")", ",", "is_real_example", "\n", "]", ")", "\n", "\n", "", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "initialized_variable_names", "=", "{", "}", "\n", "scaffold_fn", "=", "None", "\n", "if", "init_checkpoint", ":", "\n", "      ", "(", "assignment_map", ",", "initialized_variable_names", "\n", ")", "=", "bert_lib", ".", "get_assignment_map_from_checkpoint", "(", "tvars", ",", "init_checkpoint", ")", "\n", "if", "use_tpu", ":", "\n", "\n", "        ", "def", "tpu_scaffold", "(", ")", ":", "\n", "          ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "return", "tf", ".", "train", ".", "Scaffold", "(", ")", "\n", "\n", "", "scaffold_fn", "=", "tpu_scaffold", "\n", "", "else", ":", "\n", "        ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "\n", "", "", "tf", ".", "logging", ".", "info", "(", "\"**** Trainable Variables ****\"", ")", "\n", "for", "var", "in", "tvars", ":", "\n", "      ", "init_string", "=", "\"\"", "\n", "if", "var", ".", "name", "in", "initialized_variable_names", ":", "\n", "        ", "init_string", "=", "\", *INIT_FROM_CKPT*\"", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s%s\"", ",", "var", ".", "name", ",", "var", ".", "shape", ",", "\n", "init_string", ")", "\n", "\n", "", "with", "mtf", ".", "utils", ".", "outside_all_rewrites", "(", ")", ":", "\n", "# Copy master variables to slices. Must be called first.", "\n", "      ", "restore_hook", "=", "mtf", ".", "MtfRestoreHook", "(", "lowering", ")", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "tf", ".", "global_variables", "(", ")", ",", "\n", "sharded", "=", "True", ",", "\n", "max_to_keep", "=", "10", ",", "\n", "keep_checkpoint_every_n_hours", "=", "2", ",", "\n", "defer_build", "=", "False", ",", "\n", "save_relative_paths", "=", "True", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "SAVERS", ",", "saver", ")", "\n", "saver_listener", "=", "mtf", ".", "MtfCheckpointSaverListener", "(", "lowering", ")", "\n", "saver_hook", "=", "tf", ".", "train", ".", "CheckpointSaverHook", "(", "\n", "FLAGS", ".", "output_dir", ",", "\n", "save_steps", "=", "1000", ",", "\n", "saver", "=", "saver", ",", "\n", "listeners", "=", "[", "saver_listener", "]", ")", "\n", "\n", "return", "tf_estimator", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", ",", "\n", "loss", "=", "tf_loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "training_hooks", "=", "[", "restore_hook", ",", "saver_hook", "]", ",", "\n", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "", "elif", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "EVAL", ":", "\n", "        ", "return", "tf_estimator", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", ",", "\n", "evaluation_hooks", "=", "[", "restore_hook", "]", ",", "\n", "loss", "=", "tf_loss", ",", "\n", "eval_metrics", "=", "eval_metrics", ",", "\n", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf_estimator", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", ",", "\n", "prediction_hooks", "=", "[", "restore_hook", "]", ",", "\n", "predictions", "=", "{", "\n", "\"probabilities\"", ":", "lowering", ".", "export_to_tf_tensor", "(", "probabilities", ")", "\n", "}", ",", "\n", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "\n", "", "", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.input_fn_builder": [[815, 865], ["all_input_ids.append", "all_input_mask.append", "all_segment_ids.append", "all_label_ids.append", "len", "tensorflow.data.Dataset.from_tensor_slices", "d.shuffle.batch", "d.shuffle.repeat", "d.shuffle.shuffle", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant"], ["", "def", "input_fn_builder", "(", "features", ",", "seq_length", ",", "is_training", ",", "drop_remainder", ")", ":", "\n", "  ", "\"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"", "\n", "\n", "all_input_ids", "=", "[", "]", "\n", "all_input_mask", "=", "[", "]", "\n", "all_segment_ids", "=", "[", "]", "\n", "all_label_ids", "=", "[", "]", "\n", "\n", "for", "feature", "in", "features", ":", "\n", "    ", "all_input_ids", ".", "append", "(", "feature", ".", "input_ids", ")", "\n", "all_input_mask", ".", "append", "(", "feature", ".", "input_mask", ")", "\n", "all_segment_ids", ".", "append", "(", "feature", ".", "segment_ids", ")", "\n", "all_label_ids", ".", "append", "(", "feature", ".", "label_id", ")", "\n", "\n", "", "def", "input_fn", "(", "params", ")", ":", "\n", "    ", "\"\"\"The actual input function.\"\"\"", "\n", "batch_size", "=", "params", "[", "\"batch_size\"", "]", "\n", "\n", "num_examples", "=", "len", "(", "features", ")", "\n", "\n", "# This is for demo purposes and does NOT scale to large data sets. We do", "\n", "# not use Dataset.from_generator() because that uses tf.py_func which is", "\n", "# not TPU compatible. The right way to load data is with TFRecordReader.", "\n", "d", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "{", "\n", "\"input_ids\"", ":", "\n", "tf", ".", "constant", "(", "\n", "all_input_ids", ",", "shape", "=", "[", "num_examples", ",", "seq_length", "]", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"input_mask\"", ":", "\n", "tf", ".", "constant", "(", "\n", "all_input_mask", ",", "\n", "shape", "=", "[", "num_examples", ",", "seq_length", "]", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"segment_ids\"", ":", "\n", "tf", ".", "constant", "(", "\n", "all_segment_ids", ",", "\n", "shape", "=", "[", "num_examples", ",", "seq_length", "]", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"label_ids\"", ":", "\n", "tf", ".", "constant", "(", "all_label_ids", ",", "shape", "=", "[", "num_examples", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "}", ")", "\n", "\n", "if", "is_training", ":", "\n", "      ", "d", "=", "d", ".", "repeat", "(", ")", "\n", "d", "=", "d", ".", "shuffle", "(", "buffer_size", "=", "100", ")", "\n", "\n", "", "d", "=", "d", ".", "batch", "(", "batch_size", "=", "batch_size", ",", "drop_remainder", "=", "drop_remainder", ")", "\n", "return", "d", "\n", "\n", "", "return", "input_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.convert_examples_to_features": [[869, 883], ["enumerate", "run_classifier.convert_single_example", "features.append", "tensorflow.logging.info", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.convert_single_example"], ["", "def", "convert_examples_to_features", "(", "examples", ",", "label_list", ",", "max_seq_length", ",", "\n", "tokenizer", ")", ":", "\n", "  ", "\"\"\"Convert a set of `InputExample`s to a list of `InputFeatures`.\"\"\"", "\n", "\n", "features", "=", "[", "]", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "    ", "if", "ex_index", "%", "10000", "==", "0", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Writing example %d of %d\"", "%", "(", "ex_index", ",", "len", "(", "examples", ")", ")", ")", "\n", "\n", "", "feature", "=", "convert_single_example", "(", "ex_index", ",", "example", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "features", ".", "append", "(", "feature", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.main": [[885, 1079], ["tensorflow.logging.set_verbosity", "mesh_tensorflow.validate_case_matches_checkpoint", "mesh_tensorflow.BertConfig.from_json_file", "tensorflow.gfile.MakeDirs", "FLAGS.task_name.lower", "processor.get_labels", "mesh_tensorflow.FullTokenizer", "tensorflow.compat.v1.estimator.tpu.RunConfig", "run_classifier.model_fn_builder", "tensorflow.compat.v1.estimator.tpu.TPUEstimator", "ValueError", "ValueError", "ValueError", "tensorflow.distribute.cluster_resolver.TPUClusterResolver", "processor.get_train_examples", "int", "int", "run_classifier.file_based_input_fn_builder", "tf_estimator.tpu.TPUEstimator.train", "processor.get_dev_examples", "len", "os.path.join", "run_classifier.file_based_convert_examples_to_features", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "run_classifier.file_based_input_fn_builder", "tf_estimator.tpu.TPUEstimator.evaluate", "os.path.join", "processor.get_test_examples", "len", "os.path.join", "run_classifier.file_based_convert_examples_to_features", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "run_classifier.file_based_input_fn_builder", "tf_estimator.tpu.TPUEstimator.predict", "os.path.join", "tensorflow.compat.v1.estimator.tpu.TPUConfig", "len", "os.path.join", "run_classifier.file_based_convert_examples_to_features", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "len", "int", "tensorflow.gfile.GFile", "tensorflow.logging.info", "sorted", "len", "tensorflow.gfile.GFile", "tensorflow.logging.info", "enumerate", "len", "processor.get_dev_examples.append", "len", "estimator.predict.keys", "tensorflow.logging.info", "writer.write", "processor.get_test_examples.append", "len", "writer.write", "len", "len", "run_classifier.PaddingInputExample", "len", "len", "str", "len", "run_classifier.PaddingInputExample", "str", "str"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.validate_case_matches_checkpoint", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertConfig.from_json_file", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.lower", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor.get_labels", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.model_fn_builder", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor.get_train_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.file_based_input_fn_builder", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.train", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor.get_dev_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.file_based_convert_examples_to_features", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.file_based_input_fn_builder", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.ColaProcessor.get_test_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.file_based_convert_examples_to_features", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.file_based_input_fn_builder", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_classifier.file_based_convert_examples_to_features"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "\n", "processors", "=", "{", "\n", "\"cola\"", ":", "ColaProcessor", ",", "\n", "\"mnli\"", ":", "MnliProcessor", ",", "\n", "\"mrpc\"", ":", "MrpcProcessor", ",", "\n", "\"xnli\"", ":", "XnliProcessor", ",", "\n", "}", "\n", "\n", "tokenization", ".", "validate_case_matches_checkpoint", "(", "FLAGS", ".", "do_lower_case", ",", "\n", "FLAGS", ".", "init_checkpoint", ")", "\n", "\n", "if", "not", "FLAGS", ".", "do_train", "and", "not", "FLAGS", ".", "do_eval", "and", "not", "FLAGS", ".", "do_predict", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"At least one of `do_train`, `do_eval` or `do_predict' must be True.\"", ")", "\n", "\n", "", "bert_config", "=", "bert_lib", ".", "BertConfig", ".", "from_json_file", "(", "FLAGS", ".", "bert_config_file", ")", "\n", "\n", "if", "FLAGS", ".", "max_seq_length", ">", "bert_config", ".", "max_position_embeddings", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"Cannot use sequence length %d because the BERT model \"", "\n", "\"was only trained up to sequence length %d\"", "%", "\n", "(", "FLAGS", ".", "max_seq_length", ",", "bert_config", ".", "max_position_embeddings", ")", ")", "\n", "\n", "", "tf", ".", "gfile", ".", "MakeDirs", "(", "FLAGS", ".", "output_dir", ")", "\n", "\n", "task_name", "=", "FLAGS", ".", "task_name", ".", "lower", "(", ")", "\n", "\n", "if", "task_name", "not", "in", "processors", ":", "\n", "    ", "raise", "ValueError", "(", "\"Task not found: %s\"", "%", "(", "task_name", ")", ")", "\n", "\n", "", "processor", "=", "processors", "[", "task_name", "]", "(", ")", "\n", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "\n", "vocab_file", "=", "FLAGS", ".", "vocab_file", ",", "do_lower_case", "=", "FLAGS", ".", "do_lower_case", ")", "\n", "\n", "tpu_cluster_resolver", "=", "None", "\n", "if", "FLAGS", ".", "use_tpu", "and", "FLAGS", ".", "tpu_name", ":", "\n", "    ", "tpu_cluster_resolver", "=", "tf", ".", "distribute", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "\n", "FLAGS", ".", "tpu_name", ",", "zone", "=", "FLAGS", ".", "tpu_zone", ",", "project", "=", "FLAGS", ".", "gcp_project", ")", "\n", "\n", "", "run_config", "=", "tf_estimator", ".", "tpu", ".", "RunConfig", "(", "\n", "cluster", "=", "tpu_cluster_resolver", ",", "\n", "master", "=", "FLAGS", ".", "master", ",", "\n", "model_dir", "=", "FLAGS", ".", "output_dir", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "tpu_config", "=", "tf_estimator", ".", "tpu", ".", "TPUConfig", "(", "\n", "iterations_per_loop", "=", "FLAGS", ".", "iterations_per_loop", ",", "\n", "num_cores_per_replica", "=", "1", ",", "\n", "per_host_input_for_training", "=", "tf_estimator", ".", "tpu", ".", "InputPipelineConfig", "\n", ".", "BROADCAST", ")", ")", "\n", "\n", "train_examples", "=", "None", "\n", "num_train_steps", "=", "None", "\n", "num_warmup_steps", "=", "None", "\n", "if", "FLAGS", ".", "do_train", ":", "\n", "    ", "train_examples", "=", "processor", ".", "get_train_examples", "(", "FLAGS", ".", "data_dir", ")", "\n", "num_train_steps", "=", "int", "(", "\n", "len", "(", "train_examples", ")", "/", "FLAGS", ".", "train_batch_size", "*", "FLAGS", ".", "num_train_epochs", ")", "\n", "num_warmup_steps", "=", "int", "(", "num_train_steps", "*", "FLAGS", ".", "warmup_proportion", ")", "\n", "\n", "", "model_fn", "=", "model_fn_builder", "(", "\n", "bert_config", "=", "bert_config", ",", "\n", "num_labels", "=", "len", "(", "label_list", ")", ",", "\n", "init_checkpoint", "=", "FLAGS", ".", "init_checkpoint", ",", "\n", "learning_rate", "=", "FLAGS", ".", "learning_rate", ",", "\n", "num_train_steps", "=", "num_train_steps", ",", "\n", "num_warmup_steps", "=", "num_warmup_steps", ",", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ")", "\n", "\n", "# If TPU is not available, this will fall back to normal Estimator on CPU", "\n", "# or GPU.", "\n", "estimator", "=", "tf_estimator", ".", "tpu", ".", "TPUEstimator", "(", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "model_fn", "=", "model_fn", ",", "\n", "config", "=", "run_config", ",", "\n", "train_batch_size", "=", "FLAGS", ".", "train_batch_size", ",", "\n", "eval_batch_size", "=", "FLAGS", ".", "eval_batch_size", ",", "\n", "predict_batch_size", "=", "FLAGS", ".", "predict_batch_size", ")", "\n", "\n", "if", "FLAGS", ".", "do_train", ":", "\n", "    ", "if", "FLAGS", ".", "cached_train_file", ":", "\n", "      ", "train_file", "=", "FLAGS", ".", "cached_train_file", "\n", "", "else", ":", "\n", "      ", "train_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"train.tf_record\"", ")", "\n", "file_based_convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "FLAGS", ".", "max_seq_length", ",", "tokenizer", ",", "\n", "train_file", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "train_examples", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "train_batch_size", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num steps = %d\"", ",", "num_train_steps", ")", "\n", "", "train_input_fn", "=", "file_based_input_fn_builder", "(", "\n", "input_file", "=", "train_file", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "True", ",", "\n", "drop_remainder", "=", "True", ")", "\n", "estimator", ".", "train", "(", "input_fn", "=", "train_input_fn", ",", "max_steps", "=", "num_train_steps", ")", "\n", "\n", "", "if", "FLAGS", ".", "do_eval", ":", "\n", "    ", "eval_examples", "=", "processor", ".", "get_dev_examples", "(", "FLAGS", ".", "data_dir", ")", "\n", "num_actual_eval_examples", "=", "len", "(", "eval_examples", ")", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "# TPU requires a fixed batch size for all batches, therefore the number", "\n", "# of examples must be a multiple of the batch size, or else examples", "\n", "# will get dropped. So we pad with fake examples which are ignored", "\n", "# later on. These do NOT count towards the metric (all tf.metrics", "\n", "# support a per-instance weight, and these get a weight of 0.0).", "\n", "      ", "while", "len", "(", "eval_examples", ")", "%", "FLAGS", ".", "eval_batch_size", "!=", "0", ":", "\n", "        ", "eval_examples", ".", "append", "(", "PaddingInputExample", "(", ")", ")", "\n", "\n", "", "", "eval_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"eval.tf_record\"", ")", "\n", "file_based_convert_examples_to_features", "(", "eval_examples", ",", "label_list", ",", "\n", "FLAGS", ".", "max_seq_length", ",", "tokenizer", ",", "\n", "eval_file", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running evaluation *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num examples = %d (%d actual, %d padding)\"", ",", "\n", "len", "(", "eval_examples", ")", ",", "num_actual_eval_examples", ",", "\n", "len", "(", "eval_examples", ")", "-", "num_actual_eval_examples", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "eval_batch_size", ")", "\n", "\n", "# This tells the estimator to run through the entire set.", "\n", "eval_steps", "=", "None", "\n", "# However, if running eval on the TPU, you will need to specify the", "\n", "# number of steps.", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "      ", "assert", "len", "(", "eval_examples", ")", "%", "FLAGS", ".", "eval_batch_size", "==", "0", "\n", "eval_steps", "=", "int", "(", "len", "(", "eval_examples", ")", "//", "FLAGS", ".", "eval_batch_size", ")", "\n", "\n", "", "eval_drop_remainder", "=", "True", "if", "FLAGS", ".", "use_tpu", "else", "False", "\n", "eval_input_fn", "=", "file_based_input_fn_builder", "(", "\n", "input_file", "=", "eval_file", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "False", ",", "\n", "drop_remainder", "=", "eval_drop_remainder", ")", "\n", "\n", "result", "=", "estimator", ".", "evaluate", "(", "input_fn", "=", "eval_input_fn", ",", "steps", "=", "eval_steps", ")", "\n", "\n", "output_eval_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"eval_results.txt\"", ")", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_eval_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"***** Eval results *****\"", ")", "\n", "for", "key", "in", "sorted", "(", "result", ".", "keys", "(", ")", ")", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"  %s = %s\"", ",", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", "\n", "writer", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", ")", "\n", "\n", "", "", "", "if", "FLAGS", ".", "do_predict", ":", "\n", "    ", "predict_examples", "=", "processor", ".", "get_test_examples", "(", "FLAGS", ".", "data_dir", ")", "\n", "num_actual_predict_examples", "=", "len", "(", "predict_examples", ")", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "# TPU requires a fixed batch size for all batches, therefore the number", "\n", "# of examples must be a multiple of the batch size, or else examples", "\n", "# will get dropped. So we pad with fake examples which are ignored", "\n", "# later on.", "\n", "      ", "while", "len", "(", "predict_examples", ")", "%", "FLAGS", ".", "predict_batch_size", "!=", "0", ":", "\n", "        ", "predict_examples", ".", "append", "(", "PaddingInputExample", "(", ")", ")", "\n", "\n", "", "", "predict_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"predict.tf_record\"", ")", "\n", "file_based_convert_examples_to_features", "(", "predict_examples", ",", "label_list", ",", "\n", "FLAGS", ".", "max_seq_length", ",", "tokenizer", ",", "\n", "predict_file", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running prediction*****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num examples = %d (%d actual, %d padding)\"", ",", "\n", "len", "(", "predict_examples", ")", ",", "num_actual_predict_examples", ",", "\n", "len", "(", "predict_examples", ")", "-", "num_actual_predict_examples", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "predict_batch_size", ")", "\n", "\n", "predict_drop_remainder", "=", "True", "if", "FLAGS", ".", "use_tpu", "else", "False", "\n", "predict_input_fn", "=", "file_based_input_fn_builder", "(", "\n", "input_file", "=", "predict_file", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "False", ",", "\n", "drop_remainder", "=", "predict_drop_remainder", ")", "\n", "\n", "result", "=", "estimator", ".", "predict", "(", "input_fn", "=", "predict_input_fn", ")", "\n", "\n", "output_predict_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"test_results.tsv\"", ")", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_predict_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "      ", "num_written_lines", "=", "0", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Predict results *****\"", ")", "\n", "for", "(", "i", ",", "prediction", ")", "in", "enumerate", "(", "result", ")", ":", "\n", "        ", "probabilities", "=", "prediction", "[", "\"probabilities\"", "]", "\n", "if", "i", ">=", "num_actual_predict_examples", ":", "\n", "          ", "break", "\n", "", "output_line", "=", "\"\\t\"", ".", "join", "(", "\n", "str", "(", "class_probability", ")", "\n", "for", "class_probability", "in", "probabilities", ")", "+", "\"\\n\"", "\n", "writer", ".", "write", "(", "output_line", ")", "\n", "num_written_lines", "+=", "1", "\n", "", "", "assert", "num_written_lines", "==", "num_actual_predict_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.FullTokenizer.__init__": [[184, 190], ["tokenization.load_vocab", "tokenization.BasicTokenizer", "tokenization.WordpieceTokenizer", "tokenization.FullTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ")", ":", "\n", "    ", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "inv_vocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "vocab", ".", "items", "(", ")", "}", "\n", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "\n", "do_lower_case", "=", "do_lower_case", ",", "vocab", "=", "self", ".", "vocab", ")", "\n", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.FullTokenizer.tokenize": [[191, 201], ["tokenization.FullTokenizer.basic_tokenizer.tokenize", "tokenization.preserve_token", "tokenization.FullTokenizer.wordpiece_tokenizer.tokenize", "split_tokens.append", "split_tokens.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.preserve_token", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "    ", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ")", ":", "\n", "      ", "if", "preserve_token", "(", "token", ",", "self", ".", "vocab", ")", ":", "\n", "        ", "split_tokens", ".", "append", "(", "token", ")", "\n", "continue", "\n", "", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "        ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.FullTokenizer.convert_tokens_to_ids": [[202, 204], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_by_vocab"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "    ", "return", "convert_by_vocab", "(", "self", ".", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.FullTokenizer.convert_ids_to_tokens": [[205, 207], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_by_vocab"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "    ", "return", "convert_by_vocab", "(", "self", ".", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer.__init__": [[212, 221], ["tuple"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "do_lower_case", "=", "True", ",", "vocab", "=", "tuple", "(", ")", ")", ":", "\n", "    ", "\"\"\"Constructs a BasicTokenizer.\n\n    Args:\n      do_lower_case: Whether to lower case the input.\n      vocab: A container of tokens to not mutate during tokenization.\n    \"\"\"", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "vocab", "=", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer.tokenize": [[222, 248], ["tokenization.convert_to_unicode", "tokenization.BasicTokenizer._clean_text", "tokenization.BasicTokenizer._tokenize_chinese_chars", "tokenization.whitespace_tokenize", "tokenization.whitespace_tokenize", "tokenization.preserve_token", "split_tokens.extend", "split_tokens.append", "tokenization.BasicTokenizer.lower", "tokenization.BasicTokenizer._run_strip_accents", "tokenization.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.preserve_token", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.CustomGradientOperation.lower", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Tokenizes a piece of text.\"\"\"", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "\n", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "      ", "if", "preserve_token", "(", "token", ",", "self", ".", "vocab", ")", ":", "\n", "        ", "split_tokens", ".", "append", "(", "token", ")", "\n", "continue", "\n", "", "if", "self", ".", "do_lower_case", ":", "\n", "        ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer._run_strip_accents": [[249, 259], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.normalize"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "        ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer._run_split_on_punc": [[260, 279], ["list", "len", "tokenization._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization._is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "      ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "        ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "        ", "if", "start_new_word", ":", "\n", "          ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer._tokenize_chinese_chars": [[280, 292], ["ord", "tokenization.BasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer._is_chinese_char"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "        ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "        ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer._is_chinese_char": [[293, 314], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "    ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "      ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.BasicTokenizer._clean_text": [[315, 327], ["ord", "tokenization._is_whitespace", "tokenization._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization._is_whitespace", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization._is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "        ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "        ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "        ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.WordpieceTokenizer.__init__": [[332, 336], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", "=", "\"[UNK]\"", ",", "max_input_chars_per_word", "=", "200", ")", ":", "\n", "    ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.WordpieceTokenizer.tokenize": [[337, 389], ["tokenization.convert_to_unicode", "tokenization.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n    This uses a greedy longest-match-first algorithm to perform tokenization\n    using the given vocabulary.\n\n    For example:\n      input = \"unaffable\"\n      output = [\"un\", \"##aff\", \"##able\"]\n\n    Args:\n      text: A single token or whitespace separated tokens. This should have\n        already been passed through `BasicTokenizer.\n\n    Returns:\n      A list of wordpiece tokens.\n    \"\"\"", "\n", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "      ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "        ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "        ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "          ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "            ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "            ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "          ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "        ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "        ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.preserve_token": [[40, 47], ["bool", "_UNUSED_TOKEN_RE.search"], "function", ["None"], ["def", "preserve_token", "(", "token", ",", "vocab", ")", ":", "\n", "  ", "\"\"\"Returns True if the token should forgo tokenization and be preserved.\"\"\"", "\n", "if", "not", "FLAGS", ".", "preserve_unused_tokens", ":", "\n", "    ", "return", "False", "\n", "", "if", "token", "not", "in", "vocab", ":", "\n", "    ", "return", "False", "\n", "", "return", "bool", "(", "_UNUSED_TOKEN_RE", ".", "search", "(", "token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.validate_case_matches_checkpoint": [[49, 97], ["re.match", "re.match.group", "ValueError"], "function", ["None"], ["", "def", "validate_case_matches_checkpoint", "(", "do_lower_case", ",", "init_checkpoint", ")", ":", "\n", "  ", "\"\"\"Checks whether the casing config is consistent with the checkpoint name.\"\"\"", "\n", "\n", "# The casing has to be passed in by the user and there is no explicit check", "\n", "# as to whether it matches the checkpoint. The casing information probably", "\n", "# should have been stored in the bert_config.json file, but it's not, so", "\n", "# we have to heuristically detect it to validate.", "\n", "\n", "if", "not", "init_checkpoint", ":", "\n", "    ", "return", "\n", "\n", "", "m", "=", "re", ".", "match", "(", "\"^.*?([A-Za-z0-9_-]+)/bert_model.ckpt\"", ",", "init_checkpoint", ")", "\n", "if", "m", "is", "None", ":", "\n", "    ", "return", "\n", "\n", "", "model_name", "=", "m", ".", "group", "(", "1", ")", "\n", "\n", "lower_models", "=", "[", "\n", "\"uncased_L-24_H-1024_A-16\"", ",", "\"uncased_L-12_H-768_A-12\"", ",", "\n", "\"multilingual_L-12_H-768_A-12\"", ",", "\"chinese_L-12_H-768_A-12\"", "\n", "]", "\n", "\n", "cased_models", "=", "[", "\n", "\"cased_L-12_H-768_A-12\"", ",", "\"cased_L-24_H-1024_A-16\"", ",", "\n", "\"multi_cased_L-12_H-768_A-12\"", "\n", "]", "\n", "\n", "is_bad_config", "=", "False", "\n", "if", "model_name", "in", "lower_models", "and", "not", "do_lower_case", ":", "\n", "    ", "is_bad_config", "=", "True", "\n", "actual_flag", "=", "\"False\"", "\n", "case_name", "=", "\"lowercased\"", "\n", "opposite_flag", "=", "\"True\"", "\n", "\n", "", "if", "model_name", "in", "cased_models", "and", "do_lower_case", ":", "\n", "    ", "is_bad_config", "=", "True", "\n", "actual_flag", "=", "\"True\"", "\n", "case_name", "=", "\"cased\"", "\n", "opposite_flag", "=", "\"False\"", "\n", "\n", "", "if", "is_bad_config", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"You passed in `--do_lower_case=%s` with `--init_checkpoint=%s`. \"", "\n", "\"However, `%s` seems to be a %s model, so you \"", "\n", "\"should pass in `--do_lower_case=%s` so that the fine-tuning matches \"", "\n", "\"how the model was pre-training. If this error is wrong, please \"", "\n", "\"just comment out this check.\"", "%", "\n", "(", "actual_flag", ",", "init_checkpoint", ",", "model_name", ",", "case_name", ",", "opposite_flag", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode": [[99, 117], ["isinstance", "isinstance", "isinstance", "ValueError", "text.decode", "ValueError", "text.decode", "isinstance", "ValueError", "type", "type"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode"], ["", "", "def", "convert_to_unicode", "(", "text", ")", ":", "\n", "  ", "\"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"", "\n", "if", "six", ".", "PY3", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "      ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "      ", "return", "text", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text": [[119, 140], ["isinstance", "isinstance", "isinstance", "ValueError", "text.decode", "ValueError", "isinstance", "text.encode", "ValueError", "type", "type"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.funnel_transformer.BitransformerFunnel.decode", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.t2t_vocabulary.T2tVocabulary.encode"], ["", "", "def", "printable_text", "(", "text", ")", ":", "\n", "  ", "\"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"", "\n", "\n", "# These functions want `str` for both Python2 and Python3, but in one case", "\n", "# it's a Unicode string and in the other it's a byte string.", "\n", "if", "six", ".", "PY3", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "      ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "      ", "return", "text", ".", "encode", "(", "\"utf-8\"", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.load_vocab": [[142, 154], ["collections.OrderedDict", "tensorflow.gfile.GFile", "tokenization.convert_to_unicode", "token.strip.strip", "reader.readline", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_to_unicode"], ["", "", "def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "  ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "vocab_file", ",", "\"r\"", ")", "as", "reader", ":", "\n", "    ", "while", "True", ":", "\n", "      ", "token", "=", "convert_to_unicode", "(", "reader", ".", "readline", "(", ")", ")", "\n", "if", "not", "token", ":", "\n", "        ", "break", "\n", "", "token", "=", "token", ".", "strip", "(", ")", "\n", "if", "token", "not", "in", "vocab", ":", "\n", "        ", "vocab", "[", "token", "]", "=", "len", "(", "vocab", ")", "\n", "", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_by_vocab": [[156, 162], ["output.append"], "function", ["None"], ["", "def", "convert_by_vocab", "(", "vocab", ",", "items", ")", ":", "\n", "  ", "\"\"\"Converts a sequence of [tokens|ids] using the vocab.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "item", "in", "items", ":", "\n", "    ", "output", ".", "append", "(", "vocab", "[", "item", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_tokens_to_ids": [[164, 166], ["tokenization.convert_by_vocab"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_by_vocab"], ["", "def", "convert_tokens_to_ids", "(", "vocab", ",", "tokens", ")", ":", "\n", "  ", "return", "convert_by_vocab", "(", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_ids_to_tokens": [[168, 170], ["tokenization.convert_by_vocab"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_by_vocab"], ["", "def", "convert_ids_to_tokens", "(", "inv_vocab", ",", "ids", ")", ":", "\n", "  ", "return", "convert_by_vocab", "(", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.whitespace_tokenize": [[172, 179], ["text.strip.strip", "text.strip.split"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "  ", "\"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "    ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization._is_whitespace": [[391, 401], ["unicodedata.category"], "function", ["None"], ["", "", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "  ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically control characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "    ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "    ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization._is_control": [[403, 413], ["unicodedata.category"], "function", ["None"], ["", "def", "_is_control", "(", "char", ")", ":", "\n", "  ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "    ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "in", "(", "\"Cc\"", ",", "\"Cf\"", ")", ":", "\n", "    ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization._is_punctuation": [[415, 429], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "  ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "    ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "    ", "return", "True", "\n", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_pretraining.model_fn_builder": [[129, 331], ["tensorflow.logging.info", "sorted", "mesh_tensorflow.Graph", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_layout_rules", "mesh_tensorflow.Mesh", "tensorflow.squeeze", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.BertModel", "bert_lib.BertModel.get_masked_lm_output", "bert_lib.BertModel.get_next_sentence_output", "bert_lib.BertModel.get_extra_loss", "mesh_tensorflow.anonymize", "mesh_tensorflow.anonymize", "mesh_tensorflow.anonymize", "mesh_tensorflow.anonymize", "mesh_tensorflow.anonymize", "mesh_tensorflow.Lowering", "tensorflow.to_float", "features.keys", "tensorflow.logging.info", "tensorflow.logging.info", "mesh_tensorflow.utils.BalancedVariablePlacer", "list", "mesh_tensorflow.simd_mesh_impl.auto_logical_to_physical_tpu", "mesh_tensorflow.simd_mesh_impl.SimdMeshImpl", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.create_optimizer", "mtf.Lowering.export_to_tf_tensor", "tensorflow.train.get_global_step", "tf_update_ops.append", "tensorflow.logging.info", "tensorflow.group", "mesh_tensorflow.utils.outside_all_rewrites", "mesh_tensorflow.MtfRestoreHook", "host_placement_fn", "input_ids.get_shape", "input_ids.get_shape", "masked_lm_positions.get_shape", "mtf.Lowering.lowered_operation", "tensorflow.assign_add", "tensorflow.train.Saver", "tensorflow.add_to_collection", "mesh_tensorflow.MtfCheckpointSaverListener", "tensorflow.train.CheckpointSaverHook", "tensorflow.compat.v1.estimator.tpu.TPUEstimatorSpec", "six.moves.range", "tensorflow.reshape", "tensorflow.argmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.metrics.accuracy", "tensorflow.metrics.mean", "tensorflow.reshape", "tensorflow.argmax", "tensorflow.reshape", "tensorflow.metrics.accuracy", "tensorflow.metrics.mean", "tensorflow.global_variables", "tensorflow.compat.v1.estimator.tpu.TPUEstimatorSpec", "mtf.Lowering.export_to_tf_tensor", "mtf.Lowering.export_to_tf_tensor", "mtf.Lowering.export_to_tf_tensor", "mtf.Lowering.export_to_tf_tensor"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_masked_lm_output", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_next_sentence_output", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_extra_loss", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.simd_mesh_impl.auto_logical_to_physical_tpu", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.optimization.create_optimizer", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.outside_all_rewrites", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.get_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.get_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.get_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.lowered_operation", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign_add", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor"], ["def", "model_fn_builder", "(", "bert_config", ",", "init_checkpoint", ",", "learning_rate", ",", "\n", "num_train_steps", ",", "num_warmup_steps", ")", ":", "\n", "  ", "\"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"", "\n", "\n", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"The `model_fn` for TPUEstimator.\"\"\"", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"*** Features ***\"", ")", "\n", "for", "name", "in", "sorted", "(", "features", ".", "keys", "(", ")", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s\"", "%", "(", "name", ",", "features", "[", "name", "]", ".", "shape", ")", ")", "\n", "\n", "# MTF setup.", "\n", "", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "FLAGS", ".", "mesh_shape", ")", "\n", "layout_rules", "=", "mtf", ".", "convert_to_layout_rules", "(", "FLAGS", ".", "layout", ")", "\n", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "      ", "ctx", "=", "params", "[", "\"context\"", "]", "\n", "num_hosts", "=", "ctx", ".", "num_hosts", "\n", "host_placement_fn", "=", "ctx", ".", "tpu_host_placement_function", "\n", "device_list", "=", "[", "host_placement_fn", "(", "host_id", "=", "t", ")", "for", "t", "in", "range", "(", "num_hosts", ")", "]", "\n", "tf", ".", "logging", ".", "info", "(", "\"device_list = %s\"", "%", "device_list", ",", ")", "\n", "replica_cache_size", "=", "300", "*", "1000000", "# 300M per replica", "\n", "# Worker 0 caches all the TPU binaries.", "\n", "worker0_mem", "=", "replica_cache_size", "*", "ctx", ".", "num_replicas", "\n", "devices_memeory_usage", "=", "[", "worker0_mem", "]", "+", "[", "0", "]", "*", "(", "num_hosts", "-", "1", ")", "\n", "var_placer", "=", "mtf", ".", "utils", ".", "BalancedVariablePlacer", "(", "device_list", ",", "\n", "devices_memeory_usage", ")", "\n", "mesh_devices", "=", "[", "\"\"", "]", "*", "mesh_shape", ".", "size", "\n", "physical_shape", "=", "list", "(", "ctx", ".", "device_assignment", ".", "topology", ".", "mesh_shape", ")", "\n", "logical_to_physical", "=", "mtf", ".", "simd_mesh_impl", ".", "auto_logical_to_physical_tpu", "(", "\n", "mesh_shape", ".", "to_integer_list", ",", "physical_shape", ")", "\n", "mesh_impl", "=", "mtf", ".", "simd_mesh_impl", ".", "SimdMeshImpl", "(", "\n", "mesh_shape", ",", "\n", "layout_rules", ",", "\n", "mesh_devices", ",", "\n", "ctx", ".", "device_assignment", ",", "\n", "logical_to_physical", "=", "logical_to_physical", ")", "\n", "", "else", ":", "\n", "      ", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "mesh_shape", ",", "layout_rules", ",", "[", "\"\"", "]", "*", "mesh_shape", ".", "size", ")", "\n", "var_placer", "=", "None", "\n", "\n", "", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"bert_mesh\"", ",", "var_placer", ")", "\n", "input_ids", "=", "features", "[", "\"input_ids\"", "]", "\n", "input_mask", "=", "features", "[", "\"input_mask\"", "]", "\n", "segment_ids", "=", "features", "[", "\"segment_ids\"", "]", "\n", "masked_lm_positions", "=", "features", "[", "\"masked_lm_positions\"", "]", "\n", "masked_lm_ids", "=", "features", "[", "\"masked_lm_ids\"", "]", "\n", "masked_lm_weights", "=", "features", "[", "\"masked_lm_weights\"", "]", "\n", "next_sentence_labels", "=", "tf", ".", "squeeze", "(", "features", "[", "\"next_sentence_labels\"", "]", ",", "1", ")", "\n", "\n", "batch_size", "=", "input_ids", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch_size", ")", "\n", "\n", "seq_length", "=", "input_ids", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "seq_dim", "=", "mtf", ".", "Dimension", "(", "\"seq\"", ",", "seq_length", ")", "\n", "max_predictions_per_seq", "=", "masked_lm_positions", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "max_predictions_per_seq_dim", "=", "mtf", ".", "Dimension", "(", "\"max_pred_seq\"", ",", "\n", "max_predictions_per_seq", ")", "\n", "\n", "mtf_input_ids", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "input_ids", ",", "[", "batch_dim", ",", "seq_dim", "]", ")", "\n", "mtf_input_mask", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "input_mask", ",", "\n", "[", "batch_dim", ",", "seq_dim", "]", ")", "\n", "mtf_segment_ids", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "segment_ids", ",", "\n", "[", "batch_dim", ",", "seq_dim", "]", ")", "\n", "mtf_masked_lm_positions", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "masked_lm_positions", ",", "[", "batch_dim", ",", "max_predictions_per_seq_dim", "]", ")", "\n", "mtf_masked_lm_ids", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "masked_lm_ids", ",", "[", "batch_dim", ",", "max_predictions_per_seq_dim", "]", ")", "\n", "\n", "mtf_masked_lm_weights", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "masked_lm_weights", ",", "[", "batch_dim", ",", "max_predictions_per_seq_dim", "]", ")", "\n", "mtf_next_sentence_labels", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "next_sentence_labels", ",", "[", "batch_dim", "]", ")", "\n", "\n", "is_training", "=", "(", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "model", "=", "bert_lib", ".", "BertModel", "(", "\n", "config", "=", "bert_config", ",", "\n", "is_training", "=", "is_training", ",", "\n", "input_ids", "=", "mtf_input_ids", ",", "\n", "input_mask", "=", "mtf_input_mask", ",", "\n", "token_type_ids", "=", "mtf_segment_ids", ",", "\n", "layout", "=", "layout_rules", ",", "\n", "mesh_shape", "=", "mesh_shape", ")", "\n", "\n", "(", "masked_lm_loss", ",", "masked_lm_example_loss", ",", "\n", "masked_lm_logits", ")", "=", "model", ".", "get_masked_lm_output", "(", "\n", "mtf_masked_lm_positions", ",", "mtf_masked_lm_ids", ",", "mtf_masked_lm_weights", ")", "\n", "\n", "(", "next_sentence_loss", ",", "next_sentence_example_loss", ",", "\n", "next_sentence_logits", ")", "=", "model", ".", "get_next_sentence_output", "(", "\n", "mtf_next_sentence_labels", ")", "\n", "\n", "extra_loss", "=", "model", ".", "get_extra_loss", "(", ")", "\n", "\n", "total_loss", "=", "masked_lm_loss", "+", "next_sentence_loss", "\n", "total_loss", "=", "mtf", ".", "anonymize", "(", "total_loss", ")", "\n", "masked_lm_example_loss", "=", "mtf", ".", "anonymize", "(", "masked_lm_example_loss", ")", "\n", "masked_lm_logits", "=", "mtf", ".", "anonymize", "(", "masked_lm_logits", ")", "\n", "next_sentence_example_loss", "=", "mtf", ".", "anonymize", "(", "next_sentence_example_loss", ")", "\n", "next_sentence_logits", "=", "mtf", ".", "anonymize", "(", "next_sentence_logits", ")", "\n", "\n", "# TRAIN mode", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "_", ",", "update_ops", "=", "optimization_lib", ".", "create_optimizer", "(", "\n", "total_loss", "+", "extra_loss", ",", "\n", "learning_rate", ",", "\n", "num_train_steps", ",", "\n", "num_warmup_steps", ",", "\n", "optimizer", "=", "FLAGS", ".", "optimizer", ",", "\n", "clip_gradients", "=", "FLAGS", ".", "clip_gradients", ")", "\n", "\n", "", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "\n", "tf_loss", "=", "tf", ".", "to_float", "(", "lowering", ".", "export_to_tf_tensor", "(", "total_loss", ")", ")", "\n", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "global_step", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", "\n", "tf_update_ops", "=", "[", "lowering", ".", "lowered_operation", "(", "op", ")", "for", "op", "in", "update_ops", "]", "\n", "tf_update_ops", ".", "append", "(", "tf", ".", "assign_add", "(", "global_step", ",", "1", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"tf_update_ops: {}\"", ".", "format", "(", "tf_update_ops", ")", ")", "\n", "train_op", "=", "tf", ".", "group", "(", "tf_update_ops", ")", "\n", "", "elif", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "EVAL", ":", "\n", "\n", "      ", "def", "metric_fn", "(", "masked_lm_example_loss", ",", "masked_lm_logits", ",", "masked_lm_ids", ",", "\n", "masked_lm_weights", ",", "next_sentence_example_loss", ",", "\n", "next_sentence_logits", ",", "next_sentence_labels", ")", ":", "\n", "        ", "\"\"\"Computes the loss and accuracy of the model.\"\"\"", "\n", "masked_lm_logits", "=", "tf", ".", "reshape", "(", "masked_lm_logits", ",", "\n", "[", "-", "1", ",", "masked_lm_logits", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "masked_lm_predictions", "=", "tf", ".", "argmax", "(", "\n", "masked_lm_logits", ",", "axis", "=", "-", "1", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "masked_lm_example_loss", "=", "tf", ".", "reshape", "(", "masked_lm_example_loss", ",", "[", "-", "1", "]", ")", "\n", "masked_lm_ids", "=", "tf", ".", "reshape", "(", "masked_lm_ids", ",", "[", "-", "1", "]", ")", "\n", "masked_lm_weights", "=", "tf", ".", "reshape", "(", "masked_lm_weights", ",", "[", "-", "1", "]", ")", "\n", "masked_lm_accuracy", "=", "tf", ".", "metrics", ".", "accuracy", "(", "\n", "labels", "=", "masked_lm_ids", ",", "\n", "predictions", "=", "masked_lm_predictions", ",", "\n", "weights", "=", "masked_lm_weights", ")", "\n", "masked_lm_mean_loss", "=", "tf", ".", "metrics", ".", "mean", "(", "\n", "values", "=", "masked_lm_example_loss", ",", "weights", "=", "masked_lm_weights", ")", "\n", "\n", "next_sentence_logits", "=", "tf", ".", "reshape", "(", "\n", "next_sentence_logits", ",", "[", "-", "1", ",", "next_sentence_logits", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "next_sentence_predictions", "=", "tf", ".", "argmax", "(", "\n", "next_sentence_logits", ",", "axis", "=", "-", "1", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "next_sentence_labels", "=", "tf", ".", "reshape", "(", "next_sentence_labels", ",", "[", "-", "1", "]", ")", "\n", "next_sentence_accuracy", "=", "tf", ".", "metrics", ".", "accuracy", "(", "\n", "labels", "=", "next_sentence_labels", ",", "predictions", "=", "next_sentence_predictions", ")", "\n", "next_sentence_mean_loss", "=", "tf", ".", "metrics", ".", "mean", "(", "\n", "values", "=", "next_sentence_example_loss", ")", "\n", "\n", "return", "{", "\n", "\"masked_lm_accuracy\"", ":", "masked_lm_accuracy", ",", "\n", "\"masked_lm_loss\"", ":", "masked_lm_mean_loss", ",", "\n", "\"next_sentence_accuracy\"", ":", "next_sentence_accuracy", ",", "\n", "\"next_sentence_loss\"", ":", "next_sentence_mean_loss", ",", "\n", "}", "\n", "\n", "", "eval_metrics", "=", "(", "metric_fn", ",", "[", "\n", "lowering", ".", "export_to_tf_tensor", "(", "masked_lm_example_loss", ")", ",", "\n", "lowering", ".", "export_to_tf_tensor", "(", "masked_lm_logits", ")", ",", "masked_lm_ids", ",", "\n", "masked_lm_weights", ",", "\n", "lowering", ".", "export_to_tf_tensor", "(", "next_sentence_example_loss", ")", ",", "\n", "lowering", ".", "export_to_tf_tensor", "(", "next_sentence_logits", ")", ",", "\n", "next_sentence_labels", "\n", "]", ")", "\n", "\n", "", "with", "mtf", ".", "utils", ".", "outside_all_rewrites", "(", ")", ":", "\n", "# Copy master variables to slices. Must be called first.", "\n", "      ", "restore_hook", "=", "mtf", ".", "MtfRestoreHook", "(", "lowering", ")", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "tf", ".", "global_variables", "(", ")", ",", "\n", "sharded", "=", "True", ",", "\n", "max_to_keep", "=", "10", ",", "\n", "keep_checkpoint_every_n_hours", "=", "2", ",", "\n", "defer_build", "=", "False", ",", "\n", "save_relative_paths", "=", "True", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "SAVERS", ",", "saver", ")", "\n", "saver_listener", "=", "mtf", ".", "MtfCheckpointSaverListener", "(", "lowering", ")", "\n", "saver_hook", "=", "tf", ".", "train", ".", "CheckpointSaverHook", "(", "\n", "FLAGS", ".", "output_dir", ",", "\n", "save_steps", "=", "1000", ",", "\n", "saver", "=", "saver", ",", "\n", "listeners", "=", "[", "saver_listener", "]", ")", "\n", "\n", "return", "tf_estimator", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ",", "\n", "loss", "=", "tf_loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "training_hooks", "=", "[", "restore_hook", ",", "saver_hook", "]", ")", "\n", "", "elif", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "EVAL", ":", "\n", "        ", "return", "tf_estimator", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "tf_estimator", ".", "ModeKeys", ".", "EVAL", ",", "\n", "evaluation_hooks", "=", "[", "restore_hook", "]", ",", "\n", "loss", "=", "tf_loss", ",", "\n", "eval_metrics", "=", "eval_metrics", ")", "\n", "\n", "", "", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_pretraining.input_fn_builder": [[333, 398], ["d.repeat.apply", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.data.Dataset.from_tensor_slices", "d.repeat.repeat", "d.repeat.shuffle", "min", "d.repeat.apply", "d.repeat.shuffle", "tensorflow.data.TFRecordDataset", "d.repeat.repeat", "tensorflow.data.experimental.map_and_batch", "tensorflow.constant", "len", "tensorflow.data.experimental.parallel_interleave", "len", "run_pretraining._decode_record"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.transformer.learning_rate_schedules.constant", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_pretraining._decode_record"], ["", "def", "input_fn_builder", "(", "input_files", ",", "\n", "max_seq_length", ",", "\n", "max_predictions_per_seq", ",", "\n", "is_training", ",", "\n", "num_cpu_threads", "=", "4", ")", ":", "\n", "  ", "\"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"", "\n", "\n", "def", "input_fn", "(", "params", ")", ":", "\n", "    ", "\"\"\"The actual input function.\"\"\"", "\n", "batch_size", "=", "params", "[", "\"batch_size\"", "]", "\n", "\n", "name_to_features", "=", "{", "\n", "\"input_ids\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"input_mask\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"segment_ids\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"masked_lm_positions\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_predictions_per_seq", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"masked_lm_ids\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_predictions_per_seq", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"masked_lm_weights\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_predictions_per_seq", "]", ",", "tf", ".", "float32", ")", ",", "\n", "\"next_sentence_labels\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "1", "]", ",", "tf", ".", "int64", ")", ",", "\n", "}", "\n", "\n", "# For training, we want a lot of parallel reading and shuffling.", "\n", "# For eval, we want no shuffling and parallel reading doesn't matter.", "\n", "if", "is_training", ":", "\n", "      ", "d", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "tf", ".", "constant", "(", "input_files", ")", ")", "\n", "d", "=", "d", ".", "repeat", "(", ")", "\n", "d", "=", "d", ".", "shuffle", "(", "buffer_size", "=", "len", "(", "input_files", ")", ")", "\n", "\n", "# `cycle_length` is the number of parallel files that get read.", "\n", "cycle_length", "=", "min", "(", "num_cpu_threads", ",", "len", "(", "input_files", ")", ")", "\n", "\n", "# `sloppy` mode means that the interleaving is not exact. This adds", "\n", "# even more randomness to the training pipeline.", "\n", "d", "=", "d", ".", "apply", "(", "\n", "tf", ".", "data", ".", "experimental", ".", "parallel_interleave", "(", "\n", "tf", ".", "data", ".", "TFRecordDataset", ",", "\n", "sloppy", "=", "is_training", ",", "\n", "cycle_length", "=", "cycle_length", ")", ")", "\n", "d", "=", "d", ".", "shuffle", "(", "buffer_size", "=", "100", ")", "\n", "", "else", ":", "\n", "      ", "d", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "input_files", ")", "\n", "# Since we evaluate for a fixed number of steps we don't want to encounter", "\n", "# out-of-range exceptions.", "\n", "d", "=", "d", ".", "repeat", "(", ")", "\n", "\n", "# We must `drop_remainder` on training because the TPU requires fixed", "\n", "# size dimensions. For eval, we assume we are evaluating on the CPU or GPU", "\n", "# and we *don't* want to drop the remainder, otherwise we wont cover", "\n", "# every sample.", "\n", "", "d", "=", "d", ".", "apply", "(", "\n", "tf", ".", "data", ".", "experimental", ".", "map_and_batch", "(", "\n", "lambda", "record", ":", "_decode_record", "(", "record", ",", "name_to_features", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_parallel_batches", "=", "num_cpu_threads", ",", "\n", "drop_remainder", "=", "True", ")", ")", "\n", "return", "d", "\n", "\n", "", "return", "input_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_pretraining._decode_record": [[400, 413], ["tensorflow.parse_single_example", "list", "tf.parse_single_example.keys", "tensorflow.to_int32"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32"], ["", "def", "_decode_record", "(", "record", ",", "name_to_features", ")", ":", "\n", "  ", "\"\"\"Decodes a record to a TensorFlow example.\"\"\"", "\n", "example", "=", "tf", ".", "parse_single_example", "(", "record", ",", "name_to_features", ")", "\n", "\n", "# tf.Example only supports tf.int64, but the TPU only supports tf.int32.", "\n", "# So cast all int64 to int32.", "\n", "for", "name", "in", "list", "(", "example", ".", "keys", "(", ")", ")", ":", "\n", "    ", "t", "=", "example", "[", "name", "]", "\n", "if", "t", ".", "dtype", "==", "tf", ".", "int64", ":", "\n", "      ", "t", "=", "tf", ".", "to_int32", "(", "t", ")", "\n", "", "example", "[", "name", "]", "=", "t", "\n", "\n", "", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_pretraining.main": [[415, 524], ["tensorflow.logging.set_verbosity", "mesh_tensorflow.BertConfig.from_json_file", "tensorflow.gfile.MakeDirs", "FLAGS.input_train_files.split", "tensorflow.logging.info", "FLAGS.input_eval_files.split", "tensorflow.logging.info", "tensorflow.compat.v1.estimator.tpu.RunConfig", "run_pretraining.model_fn_builder", "tensorflow.compat.v1.estimator.tpu.TPUEstimator", "input_train_files.extend", "tensorflow.logging.info", "input_eval_files.extend", "tensorflow.logging.info", "tensorflow.distribute.cluster_resolver.TPUClusterResolver", "tensorflow.logging.info", "run_pretraining.input_fn_builder", "tensorflow.logging.info", "run_pretraining.input_fn_builder", "tensorflow.gfile.Glob", "tensorflow.gfile.Glob", "tensorflow.compat.v1.estimator.tpu.TPUConfig", "tensorflow.train.load_variable", "min", "time.time", "tensorflow.logging.info", "tf_estimator.tpu.TPUEstimator.train", "tensorflow.logging.info", "tensorflow.logging.info", "tf_estimator.tpu.TPUEstimator.evaluate", "os.path.join", "int", "tensorflow.gfile.GFile", "tensorflow.logging.info", "sorted", "tensorflow.logging.info", "estimator.evaluate.keys", "tensorflow.logging.info", "writer.write", "time.time", "str", "str"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertConfig.from_json_file", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.model_fn_builder", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.input_fn_builder", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.input_fn_builder", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.train"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "\n", "bert_config", "=", "bert_lib", ".", "BertConfig", ".", "from_json_file", "(", "FLAGS", ".", "bert_config_file", ")", "\n", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "FLAGS", ".", "output_dir", ")", "\n", "\n", "input_train_files", "=", "[", "]", "\n", "for", "input_pattern", "in", "FLAGS", ".", "input_train_files", ".", "split", "(", "\",\"", ")", ":", "\n", "    ", "input_train_files", ".", "extend", "(", "tf", ".", "gfile", ".", "Glob", "(", "input_pattern", ")", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"*** Input Training Files ***\"", ")", "\n", "for", "input_train_file", "in", "input_train_files", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"  %s\"", "%", "input_train_file", ")", "\n", "\n", "", "input_eval_files", "=", "[", "]", "\n", "for", "input_pattern", "in", "FLAGS", ".", "input_eval_files", ".", "split", "(", "\",\"", ")", ":", "\n", "    ", "input_eval_files", ".", "extend", "(", "tf", ".", "gfile", ".", "Glob", "(", "input_pattern", ")", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"*** Input Evaluation Files ***\"", ")", "\n", "for", "input_eval_file", "in", "input_eval_files", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"  %s\"", "%", "input_eval_file", ")", "\n", "\n", "", "tpu_cluster_resolver", "=", "None", "\n", "if", "FLAGS", ".", "use_tpu", "and", "FLAGS", ".", "tpu_name", ":", "\n", "    ", "tpu_cluster_resolver", "=", "tf", ".", "distribute", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "\n", "FLAGS", ".", "tpu_name", ",", "zone", "=", "FLAGS", ".", "tpu_zone", ",", "project", "=", "FLAGS", ".", "gcp_project", ")", "\n", "\n", "", "run_config", "=", "tf_estimator", ".", "tpu", ".", "RunConfig", "(", "\n", "cluster", "=", "tpu_cluster_resolver", ",", "\n", "master", "=", "FLAGS", ".", "master", ",", "\n", "model_dir", "=", "FLAGS", ".", "output_dir", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "tpu_config", "=", "tf_estimator", ".", "tpu", ".", "TPUConfig", "(", "\n", "iterations_per_loop", "=", "FLAGS", ".", "iterations_per_loop", ",", "\n", "num_cores_per_replica", "=", "1", ",", "\n", "per_host_input_for_training", "=", "tf_estimator", ".", "tpu", ".", "InputPipelineConfig", "\n", ".", "BROADCAST", ")", ")", "\n", "\n", "model_fn", "=", "model_fn_builder", "(", "\n", "bert_config", "=", "bert_config", ",", "\n", "init_checkpoint", "=", "FLAGS", ".", "init_checkpoint", ",", "\n", "learning_rate", "=", "FLAGS", ".", "learning_rate", ",", "\n", "num_train_steps", "=", "FLAGS", ".", "num_train_steps", ",", "\n", "num_warmup_steps", "=", "FLAGS", ".", "num_warmup_steps", ")", "\n", "\n", "# If TPU is not available, this will fall back to normal Estimator on CPU", "\n", "# or GPU.", "\n", "estimator", "=", "tf_estimator", ".", "tpu", ".", "TPUEstimator", "(", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "model_fn", "=", "model_fn", ",", "\n", "config", "=", "run_config", ",", "\n", "train_batch_size", "=", "FLAGS", ".", "train_batch_size", ",", "\n", "eval_batch_size", "=", "FLAGS", ".", "eval_batch_size", ")", "\n", "\n", "if", "FLAGS", ".", "mode", "in", "(", "\"train_and_eval\"", ",", "\"train\"", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Set train batch size = %d\"", ",", "FLAGS", ".", "train_batch_size", ")", "\n", "train_input_fn", "=", "input_fn_builder", "(", "\n", "input_files", "=", "input_train_files", ",", "\n", "max_seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "max_predictions_per_seq", "=", "FLAGS", ".", "max_predictions_per_seq", ",", "\n", "is_training", "=", "True", ")", "\n", "\n", "", "if", "FLAGS", ".", "mode", "in", "(", "\"train_and_eval\"", ",", "\"eval\"", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Set eval batch size = %d\"", ",", "FLAGS", ".", "eval_batch_size", ")", "\n", "eval_input_fn", "=", "input_fn_builder", "(", "\n", "input_files", "=", "input_eval_files", ",", "\n", "max_seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "max_predictions_per_seq", "=", "FLAGS", ".", "max_predictions_per_seq", ",", "\n", "is_training", "=", "False", ")", "\n", "\n", "try", ":", "\n", "      ", "current_step", "=", "tf", ".", "train", ".", "load_variable", "(", "FLAGS", ".", "output_dir", ",", "\n", "tf", ".", "GraphKeys", ".", "GLOBAL_STEP", ")", "\n", "", "except", "(", "TypeError", ",", "ValueError", ",", "tf", ".", "errors", ".", "NotFoundError", ")", ":", "\n", "      ", "current_step", "=", "0", "\n", "\n", "", "while", "current_step", "<", "FLAGS", ".", "num_train_steps", ":", "\n", "      ", "if", "FLAGS", ".", "mode", "==", "\"train_and_eval\"", ":", "\n", "# Train for up to steps_per_eval number of steps.", "\n", "# At the end of training, a checkpoint will be written to --model_dir.", "\n", "        ", "next_checkpoint", "=", "min", "(", "current_step", "+", "FLAGS", ".", "steps_per_eval", ",", "\n", "FLAGS", ".", "num_train_steps", ")", "\n", "", "elif", "FLAGS", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "next_checkpoint", "=", "FLAGS", ".", "num_train_steps", "\n", "\n", "", "if", "FLAGS", ".", "mode", "in", "(", "\"train_and_eval\"", ",", "\"train\"", ")", ":", "\n", "        ", "start_timestamp", "=", "time", ".", "time", "(", ")", "# This time will include compilation time", "\n", "tf", ".", "logging", ".", "info", "(", "\"Starting to train.\"", ")", "\n", "estimator", ".", "train", "(", "input_fn", "=", "train_input_fn", ",", "max_steps", "=", "next_checkpoint", ")", "\n", "current_step", "=", "next_checkpoint", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"Finished training up to step %d. Elapsed seconds %d.\"", ",", "\n", "current_step", ",", "int", "(", "time", ".", "time", "(", ")", "-", "start_timestamp", ")", ")", "\n", "\n", "", "if", "FLAGS", ".", "mode", "in", "(", "\"train_and_eval\"", ",", "\"eval\"", ")", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"Starting to evaluate.\"", ")", "\n", "result", "=", "estimator", ".", "evaluate", "(", "\n", "input_fn", "=", "eval_input_fn", ",", "steps", "=", "FLAGS", ".", "max_eval_steps", ")", "\n", "output_eval_file", "=", "os", ".", "path", ".", "join", "(", "\n", "FLAGS", ".", "output_dir", ",", "\"eval_results_{}.txt\"", ".", "format", "(", "current_step", ")", ")", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_eval_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "          ", "tf", ".", "logging", ".", "info", "(", "\"***** Eval results *****\"", ")", "\n", "for", "key", "in", "sorted", "(", "result", ".", "keys", "(", ")", ")", ":", "\n", "            ", "tf", ".", "logging", ".", "info", "(", "\"  %s = %s\"", ",", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", "\n", "writer", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", ")", "\n", "", "", "if", "FLAGS", ".", "mode", "==", "\"eval\"", ":", "\n", "          ", "tf", ".", "logging", ".", "info", "(", "\"Exit eval mode\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.SquadExample.__init__": [[183, 198], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "qas_id", ",", "\n", "question_text", ",", "\n", "doc_tokens", ",", "\n", "orig_answer_text", "=", "None", ",", "\n", "start_position", "=", "None", ",", "\n", "end_position", "=", "None", ",", "\n", "is_impossible", "=", "False", ")", ":", "\n", "    ", "self", ".", "qas_id", "=", "qas_id", "\n", "self", ".", "question_text", "=", "question_text", "\n", "self", ".", "doc_tokens", "=", "doc_tokens", "\n", "self", ".", "orig_answer_text", "=", "orig_answer_text", "\n", "self", ".", "start_position", "=", "start_position", "\n", "self", ".", "end_position", "=", "end_position", "\n", "self", ".", "is_impossible", "=", "is_impossible", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.SquadExample.__str__": [[199, 201], ["run_squad.SquadExample.__repr__"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.SquadExample.__repr__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.SquadExample.__repr__": [[202, 215], ["mesh_tensorflow.printable_text", "mesh_tensorflow.printable_text", "mesh_tensorflow.printable_text", "mesh_tensorflow.printable_text", "mesh_tensorflow.printable_text", "mesh_tensorflow.printable_text", "mesh_tensorflow.printable_text", "mesh_tensorflow.printable_text"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "s", "=", "\"\"", "\n", "s", "+=", "\"qas_id: %s\"", "%", "(", "tokenization", ".", "printable_text", "(", "self", ".", "qas_id", ")", ")", "\n", "s", "+=", "\", question_text: %s\"", "%", "(", "\n", "tokenization", ".", "printable_text", "(", "self", ".", "question_text", ")", ")", "\n", "s", "+=", "\", doc_tokens: [%s]\"", "%", "(", "\" \"", ".", "join", "(", "self", ".", "doc_tokens", ")", ")", "\n", "if", "self", ".", "start_position", ":", "\n", "      ", "s", "+=", "\", start_position: %d\"", "%", "(", "self", ".", "start_position", ")", "\n", "", "if", "self", ".", "start_position", ":", "\n", "      ", "s", "+=", "\", end_position: %d\"", "%", "(", "self", ".", "end_position", ")", "\n", "", "if", "self", ".", "start_position", ":", "\n", "      ", "s", "+=", "\", is_impossible: %r\"", "%", "(", "self", ".", "is_impossible", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.InputFeatures.__init__": [[220, 245], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "unique_id", ",", "\n", "example_index", ",", "\n", "doc_span_index", ",", "\n", "tokens", ",", "\n", "token_to_orig_map", ",", "\n", "token_is_max_context", ",", "\n", "input_ids", ",", "\n", "input_mask", ",", "\n", "segment_ids", ",", "\n", "start_position", "=", "None", ",", "\n", "end_position", "=", "None", ",", "\n", "is_impossible", "=", "None", ")", ":", "\n", "    ", "self", ".", "unique_id", "=", "unique_id", "\n", "self", ".", "example_index", "=", "example_index", "\n", "self", ".", "doc_span_index", "=", "doc_span_index", "\n", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "token_to_orig_map", "=", "token_to_orig_map", "\n", "self", ".", "token_is_max_context", "=", "token_is_max_context", "\n", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "start_position", "=", "start_position", "\n", "self", ".", "end_position", "=", "end_position", "\n", "self", ".", "is_impossible", "=", "is_impossible", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.FeatureWriter.__init__": [[1141, 1146], ["tensorflow.python_io.TFRecordWriter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "filename", ",", "is_training", ")", ":", "\n", "    ", "self", ".", "filename", "=", "filename", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "num_features", "=", "0", "\n", "self", ".", "_writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.FeatureWriter.process_feature": [[1147, 1172], ["collections.OrderedDict", "run_squad.FeatureWriter.process_feature.create_int_feature"], "methods", ["None"], ["", "def", "process_feature", "(", "self", ",", "feature", ")", ":", "\n", "    ", "\"\"\"Write a InputFeature to the TFRecordWriter as a tf.train.Example.\"\"\"", "\n", "self", ".", "num_features", "+=", "1", "\n", "\n", "def", "create_int_feature", "(", "values", ")", ":", "\n", "      ", "feature", "=", "tf", ".", "train", ".", "Feature", "(", "\n", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "list", "(", "values", ")", ")", ")", "\n", "return", "feature", "\n", "\n", "", "features", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "features", "[", "\"unique_ids\"", "]", "=", "create_int_feature", "(", "[", "feature", ".", "unique_id", "]", ")", "\n", "features", "[", "\"input_ids\"", "]", "=", "create_int_feature", "(", "feature", ".", "input_ids", ")", "\n", "features", "[", "\"input_mask\"", "]", "=", "create_int_feature", "(", "feature", ".", "input_mask", ")", "\n", "features", "[", "\"segment_ids\"", "]", "=", "create_int_feature", "(", "feature", ".", "segment_ids", ")", "\n", "\n", "if", "self", ".", "is_training", ":", "\n", "      ", "features", "[", "\"start_positions\"", "]", "=", "create_int_feature", "(", "[", "feature", ".", "start_position", "]", ")", "\n", "features", "[", "\"end_positions\"", "]", "=", "create_int_feature", "(", "[", "feature", ".", "end_position", "]", ")", "\n", "impossible", "=", "0", "\n", "if", "feature", ".", "is_impossible", ":", "\n", "        ", "impossible", "=", "1", "\n", "", "features", "[", "\"is_impossible\"", "]", "=", "create_int_feature", "(", "[", "impossible", "]", ")", "\n", "\n", "", "tf_example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "features", ")", ")", "\n", "self", ".", "_writer", ".", "write", "(", "tf_example", ".", "SerializeToString", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.FeatureWriter.close": [[1173, 1175], ["run_squad.FeatureWriter._writer.close"], "methods", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.FeatureWriter.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "    ", "self", ".", "_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.read_squad_examples": [[247, 327], ["tensorflow.gfile.Open", "json.load", "ord", "run_squad.read_squad_examples.is_whitespace"], "function", ["None"], ["", "", "def", "read_squad_examples", "(", "input_file", ",", "is_training", ")", ":", "\n", "  ", "\"\"\"Read a SQuAD json file into a list of SquadExample.\"\"\"", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "input_file", ",", "\"r\"", ")", "as", "reader", ":", "\n", "    ", "input_data", "=", "json", ".", "load", "(", "reader", ")", "[", "\"data\"", "]", "\n", "\n", "", "def", "is_whitespace", "(", "c", ")", ":", "\n", "    ", "if", "c", "==", "\" \"", "or", "c", "==", "\"\\t\"", "or", "c", "==", "\"\\r\"", "or", "c", "==", "\"\\n\"", "or", "ord", "(", "c", ")", "==", "0x202F", ":", "\n", "      ", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "examples", "=", "[", "]", "\n", "for", "entry", "in", "input_data", ":", "\n", "    ", "for", "paragraph", "in", "entry", "[", "\"paragraphs\"", "]", ":", "\n", "      ", "paragraph_text", "=", "paragraph", "[", "\"context\"", "]", "\n", "doc_tokens", "=", "[", "]", "\n", "char_to_word_offset", "=", "[", "]", "\n", "prev_is_whitespace", "=", "True", "\n", "for", "c", "in", "paragraph_text", ":", "\n", "        ", "if", "is_whitespace", "(", "c", ")", ":", "\n", "          ", "prev_is_whitespace", "=", "True", "\n", "", "else", ":", "\n", "          ", "if", "prev_is_whitespace", ":", "\n", "            ", "doc_tokens", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "            ", "doc_tokens", "[", "-", "1", "]", "+=", "c", "\n", "", "prev_is_whitespace", "=", "False", "\n", "", "char_to_word_offset", ".", "append", "(", "len", "(", "doc_tokens", ")", "-", "1", ")", "\n", "\n", "", "for", "qa", "in", "paragraph", "[", "\"qas\"", "]", ":", "\n", "        ", "qas_id", "=", "qa", "[", "\"id\"", "]", "\n", "question_text", "=", "qa", "[", "\"question\"", "]", "\n", "start_position", "=", "None", "\n", "end_position", "=", "None", "\n", "orig_answer_text", "=", "None", "\n", "is_impossible", "=", "False", "\n", "if", "is_training", ":", "\n", "\n", "          ", "if", "FLAGS", ".", "version_2_with_negative", ":", "\n", "            ", "is_impossible", "=", "qa", "[", "\"is_impossible\"", "]", "\n", "", "if", "(", "len", "(", "qa", "[", "\"answers\"", "]", ")", "!=", "1", ")", "and", "(", "not", "is_impossible", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"For training, each question should have exactly 1 answer.\"", ")", "\n", "", "if", "not", "is_impossible", ":", "\n", "            ", "answer", "=", "qa", "[", "\"answers\"", "]", "[", "0", "]", "\n", "orig_answer_text", "=", "answer", "[", "\"text\"", "]", "\n", "answer_offset", "=", "answer", "[", "\"answer_start\"", "]", "\n", "answer_length", "=", "len", "(", "orig_answer_text", ")", "\n", "start_position", "=", "char_to_word_offset", "[", "answer_offset", "]", "\n", "end_position", "=", "char_to_word_offset", "[", "answer_offset", "+", "answer_length", "-", "\n", "1", "]", "\n", "# Only add answers where the text can be exactly recovered from the", "\n", "# document. If this CAN'T happen it's likely due to weird Unicode", "\n", "# stuff so we will just skip the example.", "\n", "#", "\n", "# Note that this means for training mode, every example is NOT", "\n", "# guaranteed to be preserved.", "\n", "actual_text", "=", "\" \"", ".", "join", "(", "\n", "doc_tokens", "[", "start_position", ":", "(", "end_position", "+", "1", ")", "]", ")", "\n", "cleaned_answer_text", "=", "\" \"", ".", "join", "(", "\n", "tokenization", ".", "whitespace_tokenize", "(", "orig_answer_text", ")", ")", "\n", "if", "actual_text", ".", "find", "(", "cleaned_answer_text", ")", "==", "-", "1", ":", "\n", "              ", "tf", ".", "logging", ".", "warning", "(", "\"Could not find answer: '%s' vs. '%s'\"", ",", "\n", "actual_text", ",", "cleaned_answer_text", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "            ", "start_position", "=", "-", "1", "\n", "end_position", "=", "-", "1", "\n", "orig_answer_text", "=", "\"\"", "\n", "\n", "", "", "example", "=", "SquadExample", "(", "\n", "qas_id", "=", "qas_id", ",", "\n", "question_text", "=", "question_text", ",", "\n", "doc_tokens", "=", "doc_tokens", ",", "\n", "orig_answer_text", "=", "orig_answer_text", ",", "\n", "start_position", "=", "start_position", ",", "\n", "end_position", "=", "end_position", ",", "\n", "is_impossible", "=", "is_impossible", ")", "\n", "examples", ".", "append", "(", "example", ")", "\n", "\n", "", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.convert_examples_to_features": [[329, 494], ["enumerate", "tokenizer.tokenize", "enumerate", "collections.namedtuple", "enumerate", "len", "orig_to_tok_index.append", "tokenizer.tokenize", "run_squad._improve_answer_span", "len", "doc_spans.append", "min", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "six.moves.range", "tokens.append", "segment_ids.append", "tokenizer.convert_tokens_to_ids", "run_squad.InputFeatures", "output_fn", "len", "tok_to_orig_index.append", "all_doc_tokens.append", "len", "len", "collections.namedtuple.", "len", "tokens.append", "segment_ids.append", "run_squad._check_is_max_context", "tokens.append", "segment_ids.append", "len", "len", "tokenizer.convert_tokens_to_ids.append", "input_mask.append", "segment_ids.append", "len", "len", "len", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "len", "len", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "len", "len", "len", "mesh_tensorflow.printable_text", "mesh_tensorflow.printable_text", "str", "str", "str", "six.iteritems", "six.iteritems"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad._improve_answer_span", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.convert_tokens_to_ids", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad._check_is_max_context", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.printable_text"], ["", "def", "convert_examples_to_features", "(", "examples", ",", "tokenizer", ",", "max_seq_length", ",", "\n", "doc_stride", ",", "max_query_length", ",", "is_training", ",", "\n", "output_fn", ")", ":", "\n", "  ", "\"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"", "\n", "\n", "unique_id", "=", "1000000000", "\n", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "    ", "query_tokens", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "question_text", ")", "\n", "\n", "if", "len", "(", "query_tokens", ")", ">", "max_query_length", ":", "\n", "      ", "query_tokens", "=", "query_tokens", "[", "0", ":", "max_query_length", "]", "\n", "\n", "", "tok_to_orig_index", "=", "[", "]", "\n", "orig_to_tok_index", "=", "[", "]", "\n", "all_doc_tokens", "=", "[", "]", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "example", ".", "doc_tokens", ")", ":", "\n", "      ", "orig_to_tok_index", ".", "append", "(", "len", "(", "all_doc_tokens", ")", ")", "\n", "sub_tokens", "=", "tokenizer", ".", "tokenize", "(", "token", ")", "\n", "for", "sub_token", "in", "sub_tokens", ":", "\n", "        ", "tok_to_orig_index", ".", "append", "(", "i", ")", "\n", "all_doc_tokens", ".", "append", "(", "sub_token", ")", "\n", "\n", "", "", "tok_start_position", "=", "None", "\n", "tok_end_position", "=", "None", "\n", "if", "is_training", "and", "example", ".", "is_impossible", ":", "\n", "      ", "tok_start_position", "=", "-", "1", "\n", "tok_end_position", "=", "-", "1", "\n", "", "if", "is_training", "and", "not", "example", ".", "is_impossible", ":", "\n", "      ", "tok_start_position", "=", "orig_to_tok_index", "[", "example", ".", "start_position", "]", "\n", "if", "example", ".", "end_position", "<", "len", "(", "example", ".", "doc_tokens", ")", "-", "1", ":", "\n", "        ", "tok_end_position", "=", "orig_to_tok_index", "[", "example", ".", "end_position", "+", "1", "]", "-", "1", "\n", "", "else", ":", "\n", "        ", "tok_end_position", "=", "len", "(", "all_doc_tokens", ")", "-", "1", "\n", "", "(", "tok_start_position", ",", "tok_end_position", ")", "=", "_improve_answer_span", "(", "\n", "all_doc_tokens", ",", "tok_start_position", ",", "tok_end_position", ",", "tokenizer", ",", "\n", "example", ".", "orig_answer_text", ")", "\n", "\n", "# The -3 accounts for [CLS], [SEP] and [SEP]", "\n", "", "max_tokens_for_doc", "=", "max_seq_length", "-", "len", "(", "query_tokens", ")", "-", "3", "\n", "\n", "# We can have documents that are longer than the maximum sequence length.", "\n", "# To deal with this we do a sliding window approach, where we take chunks", "\n", "# of the up to our max length with a stride of `doc_stride`.", "\n", "_DocSpan", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"DocSpan\"", ",", "[", "\"start\"", ",", "\"length\"", "]", ")", "\n", "doc_spans", "=", "[", "]", "\n", "start_offset", "=", "0", "\n", "while", "start_offset", "<", "len", "(", "all_doc_tokens", ")", ":", "\n", "      ", "length", "=", "len", "(", "all_doc_tokens", ")", "-", "start_offset", "\n", "if", "length", ">", "max_tokens_for_doc", ":", "\n", "        ", "length", "=", "max_tokens_for_doc", "\n", "", "doc_spans", ".", "append", "(", "_DocSpan", "(", "start", "=", "start_offset", ",", "length", "=", "length", ")", ")", "\n", "if", "start_offset", "+", "length", "==", "len", "(", "all_doc_tokens", ")", ":", "\n", "        ", "break", "\n", "", "start_offset", "+=", "min", "(", "length", ",", "doc_stride", ")", "\n", "\n", "", "for", "(", "doc_span_index", ",", "doc_span", ")", "in", "enumerate", "(", "doc_spans", ")", ":", "\n", "      ", "tokens", "=", "[", "]", "\n", "token_to_orig_map", "=", "{", "}", "\n", "token_is_max_context", "=", "{", "}", "\n", "segment_ids", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "for", "token", "in", "query_tokens", ":", "\n", "        ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "doc_span", ".", "length", ")", ":", "\n", "        ", "split_token_index", "=", "doc_span", ".", "start", "+", "i", "\n", "token_to_orig_map", "[", "len", "(", "tokens", ")", "]", "=", "tok_to_orig_index", "[", "split_token_index", "]", "\n", "\n", "is_max_context", "=", "_check_is_max_context", "(", "doc_spans", ",", "doc_span_index", ",", "\n", "split_token_index", ")", "\n", "token_is_max_context", "[", "len", "(", "tokens", ")", "]", "=", "is_max_context", "\n", "tokens", ".", "append", "(", "all_doc_tokens", "[", "split_token_index", "]", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "while", "len", "(", "input_ids", ")", "<", "max_seq_length", ":", "\n", "        ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "start_position", "=", "None", "\n", "end_position", "=", "None", "\n", "if", "is_training", "and", "not", "example", ".", "is_impossible", ":", "\n", "# For training, if our document chunk does not contain an annotation", "\n", "# we throw it out, since there is nothing to predict.", "\n", "        ", "doc_start", "=", "doc_span", ".", "start", "\n", "doc_end", "=", "doc_span", ".", "start", "+", "doc_span", ".", "length", "-", "1", "\n", "out_of_span", "=", "False", "\n", "if", "not", "(", "tok_start_position", ">=", "doc_start", "and", "\n", "tok_end_position", "<=", "doc_end", ")", ":", "\n", "          ", "out_of_span", "=", "True", "\n", "", "if", "out_of_span", ":", "\n", "          ", "start_position", "=", "0", "\n", "end_position", "=", "0", "\n", "", "else", ":", "\n", "          ", "doc_offset", "=", "len", "(", "query_tokens", ")", "+", "2", "\n", "start_position", "=", "tok_start_position", "-", "doc_start", "+", "doc_offset", "\n", "end_position", "=", "tok_end_position", "-", "doc_start", "+", "doc_offset", "\n", "\n", "", "", "if", "is_training", "and", "example", ".", "is_impossible", ":", "\n", "        ", "start_position", "=", "0", "\n", "end_position", "=", "0", "\n", "\n", "", "if", "example_index", "<", "20", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"unique_id: %s\"", "%", "(", "unique_id", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"example_index: %s\"", "%", "(", "example_index", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"doc_span_index: %s\"", "%", "(", "doc_span_index", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"tokens: %s\"", "%", "\" \"", ".", "join", "(", "\n", "[", "tokenization", ".", "printable_text", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"token_to_orig_map: %s\"", "%", "\" \"", ".", "join", "(", "\n", "[", "\"%d:%d\"", "%", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "six", ".", "iteritems", "(", "token_to_orig_map", ")", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"token_is_max_context: %s\"", "%", "\" \"", ".", "join", "(", "[", "\n", "\"%d:%s\"", "%", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "six", ".", "iteritems", "(", "token_is_max_context", ")", "\n", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"input_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_mask", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"segment_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "segment_ids", "]", ")", ")", "\n", "if", "is_training", "and", "example", ".", "is_impossible", ":", "\n", "          ", "tf", ".", "logging", ".", "info", "(", "\"impossible example\"", ")", "\n", "", "if", "is_training", "and", "not", "example", ".", "is_impossible", ":", "\n", "          ", "answer_text", "=", "\" \"", ".", "join", "(", "tokens", "[", "start_position", ":", "(", "end_position", "+", "1", ")", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"start_position: %d\"", "%", "(", "start_position", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"end_position: %d\"", "%", "(", "end_position", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"answer: %s\"", "%", "(", "tokenization", ".", "printable_text", "(", "answer_text", ")", ")", ")", "\n", "\n", "", "", "feature", "=", "InputFeatures", "(", "\n", "unique_id", "=", "unique_id", ",", "\n", "example_index", "=", "example_index", ",", "\n", "doc_span_index", "=", "doc_span_index", ",", "\n", "tokens", "=", "tokens", ",", "\n", "token_to_orig_map", "=", "token_to_orig_map", ",", "\n", "token_is_max_context", "=", "token_is_max_context", ",", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "start_position", "=", "start_position", ",", "\n", "end_position", "=", "end_position", ",", "\n", "is_impossible", "=", "example", ".", "is_impossible", ")", "\n", "\n", "# Run callback", "\n", "output_fn", "(", "feature", ")", "\n", "\n", "unique_id", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad._improve_answer_span": [[496, 531], ["six.moves.range", "tokenizer.tokenize", "six.moves.range"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.WordpieceTokenizer.tokenize"], ["", "", "", "def", "_improve_answer_span", "(", "doc_tokens", ",", "input_start", ",", "input_end", ",", "tokenizer", ",", "\n", "orig_answer_text", ")", ":", "\n", "  ", "\"\"\"Returns tokenized answer spans that better match the annotated answer.\"\"\"", "\n", "\n", "# The SQuAD annotations are character based. We first project them to", "\n", "# whitespace-tokenized words. But then after WordPiece tokenization, we can", "\n", "# often find a \"better match\". For example:", "\n", "#", "\n", "#   Question: What year was John Smith born?", "\n", "#   Context: The leader was John Smith (1895-1943).", "\n", "#   Answer: 1895", "\n", "#", "\n", "# The original whitespace-tokenized answer will be \"(1895-1943).\". However", "\n", "# after tokenization, our tokens will be \"( 1895 - 1943 ) .\". So we can match", "\n", "# the exact answer, 1895.", "\n", "#", "\n", "# However, this is not always possible. Consider the following:", "\n", "#", "\n", "#   Question: What country is the top exporter of electornics?", "\n", "#   Context: The Japanese electronics industry is the lagest in the world.", "\n", "#   Answer: Japan", "\n", "#", "\n", "# In this case, the annotator chose \"Japan\" as a character sub-span of", "\n", "# the word \"Japanese\". Since our WordPiece tokenizer does not split", "\n", "# \"Japanese\", we just use \"Japanese\" as the annotation. This is fairly rare", "\n", "# in SQuAD, but does happen.", "\n", "tok_answer_text", "=", "\" \"", ".", "join", "(", "tokenizer", ".", "tokenize", "(", "orig_answer_text", ")", ")", "\n", "\n", "for", "new_start", "in", "range", "(", "input_start", ",", "input_end", "+", "1", ")", ":", "\n", "    ", "for", "new_end", "in", "range", "(", "input_end", ",", "new_start", "-", "1", ",", "-", "1", ")", ":", "\n", "      ", "text_span", "=", "\" \"", ".", "join", "(", "doc_tokens", "[", "new_start", ":", "(", "new_end", "+", "1", ")", "]", ")", "\n", "if", "text_span", "==", "tok_answer_text", ":", "\n", "        ", "return", "(", "new_start", ",", "new_end", ")", "\n", "\n", "", "", "", "return", "(", "input_start", ",", "input_end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad._check_is_max_context": [[533, 568], ["enumerate", "min"], "function", ["None"], ["", "def", "_check_is_max_context", "(", "doc_spans", ",", "cur_span_index", ",", "position", ")", ":", "\n", "  ", "\"\"\"Check if this is the 'max context' doc span for the token.\"\"\"", "\n", "\n", "# Because of the sliding window approach taken to scoring documents, a single", "\n", "# token can appear in multiple documents. E.g.", "\n", "#  Doc: the man went to the store and bought a gallon of milk", "\n", "#  Span A: the man went to the", "\n", "#  Span B: to the store and bought", "\n", "#  Span C: and bought a gallon of", "\n", "#  ...", "\n", "#", "\n", "# Now the word 'bought' will have two scores from spans B and C. We only", "\n", "# want to consider the score with \"maximum context\", which we define as", "\n", "# the *minimum* of its left and right context (the *sum* of left and", "\n", "# right context will always be the same, of course).", "\n", "#", "\n", "# In the example the maximum context for 'bought' would be span C since", "\n", "# it has 1 left context and 3 right context, while span B has 4 left context", "\n", "# and 0 right context.", "\n", "best_score", "=", "None", "\n", "best_span_index", "=", "None", "\n", "for", "(", "span_index", ",", "doc_span", ")", "in", "enumerate", "(", "doc_spans", ")", ":", "\n", "    ", "end", "=", "doc_span", ".", "start", "+", "doc_span", ".", "length", "-", "1", "\n", "if", "position", "<", "doc_span", ".", "start", ":", "\n", "      ", "continue", "\n", "", "if", "position", ">", "end", ":", "\n", "      ", "continue", "\n", "", "num_left_context", "=", "position", "-", "doc_span", ".", "start", "\n", "num_right_context", "=", "end", "-", "position", "\n", "score", "=", "min", "(", "num_left_context", ",", "num_right_context", ")", "+", "0.01", "*", "doc_span", ".", "length", "\n", "if", "best_score", "is", "None", "or", "score", ">", "best_score", ":", "\n", "      ", "best_score", "=", "score", "\n", "best_span_index", "=", "span_index", "\n", "\n", "", "", "return", "cur_span_index", "==", "best_span_index", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.create_model": [[570, 598], ["mesh_tensorflow.BertModel", "bert_lib.BertModel.get_sequence_output", "mesh_tensorflow.Dimension", "mesh_tensorflow.layers.dense", "mesh_tensorflow.unstack", "tensorflow.truncated_normal_initializer"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertModel.get_sequence_output", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.unstack"], ["", "def", "create_model", "(", "bert_config", ",", "is_training", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ")", ":", "\n", "  ", "\"\"\"Creates a classification model.\"\"\"", "\n", "model", "=", "bert_lib", ".", "BertModel", "(", "\n", "config", "=", "bert_config", ",", "\n", "is_training", "=", "is_training", ",", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "token_type_ids", "=", "segment_ids", ",", "\n", "mesh_shape", "=", "FLAGS", ".", "mesh_shape", ",", "\n", "layout", "=", "FLAGS", ".", "layout", ")", "\n", "\n", "final_hidden", "=", "model", ".", "get_sequence_output", "(", ")", "\n", "\n", "model_dim", "=", "model", ".", "model_dim", "\n", "class_dim", "=", "mtf", ".", "Dimension", "(", "\"class\"", ",", "2", ")", "\n", "\n", "logits", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "final_hidden", ",", "\n", "reduced_dims", "=", "[", "model_dim", "]", ",", "\n", "new_dims", "=", "[", "class_dim", "]", ",", "\n", "kernel_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "0.02", ")", ",", "\n", "name", "=", "\"cls/squad/output\"", ")", "\n", "\n", "unstacked_logits", "=", "mtf", ".", "unstack", "(", "logits", ",", "dim", "=", "class_dim", ")", "\n", "\n", "(", "start_logits", ",", "end_logits", ")", "=", "(", "unstacked_logits", "[", "0", "]", ",", "unstacked_logits", "[", "1", "]", ")", "\n", "\n", "return", "(", "start_logits", ",", "end_logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.model_fn_builder": [[600, 765], ["tensorflow.logging.info", "sorted", "mesh_tensorflow.Graph", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_layout_rules", "tensorflow.logging.info", "mesh_tensorflow.utils.BalancedVariablePlacer", "mesh_tensorflow.simd_mesh_impl.SimdMeshImpl", "mesh_tensorflow.Mesh", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "run_squad.create_model", "mesh_tensorflow.Lowering", "tensorflow.trainable_variables", "tensorflow.logging.info", "features.keys", "tensorflow.logging.info", "host_placement_fn", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.import_tf_tensor", "compute_loss"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.create_model", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Graph.trainable_variables", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.transformer.adaptive_softmax.AdaptiveSoftmaxVocabEmbedding.compute_loss"], ["", "def", "model_fn_builder", "(", "bert_config", ",", "init_checkpoint", ",", "learning_rate", ",", "\n", "num_train_steps", ",", "num_warmup_steps", ",", "use_tpu", ")", ":", "\n", "  ", "\"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"", "\n", "\n", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"The `model_fn` for TPUEstimator.\"\"\"", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"*** Features ***\"", ")", "\n", "for", "name", "in", "sorted", "(", "features", ".", "keys", "(", ")", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s\"", "%", "(", "name", ",", "features", "[", "name", "]", ".", "shape", ")", ")", "\n", "\n", "# MTF setup.", "\n", "", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "FLAGS", ".", "mesh_shape", ")", "\n", "layout_rules", "=", "mtf", ".", "convert_to_layout_rules", "(", "FLAGS", ".", "layout", ")", "\n", "\n", "ctx", "=", "params", "[", "\"context\"", "]", "\n", "num_hosts", "=", "ctx", ".", "num_hosts", "\n", "host_placement_fn", "=", "ctx", ".", "tpu_host_placement_function", "\n", "device_list", "=", "[", "host_placement_fn", "(", "host_id", "=", "t", ")", "for", "t", "in", "range", "(", "num_hosts", ")", "]", "\n", "tf", ".", "logging", ".", "info", "(", "\"device_list = %s\"", "%", "device_list", ",", ")", "\n", "replica_cache_size", "=", "300", "*", "1000000", "# 300M per replica", "\n", "# Worker 0 caches all the TPU binaries.", "\n", "worker0_mem", "=", "replica_cache_size", "*", "ctx", ".", "num_replicas", "\n", "devices_memeory_usage", "=", "[", "worker0_mem", "]", "+", "[", "0", "]", "*", "(", "num_hosts", "-", "1", ")", "\n", "var_placer", "=", "mtf", ".", "utils", ".", "BalancedVariablePlacer", "(", "device_list", ",", "\n", "devices_memeory_usage", ")", "\n", "mesh_devices", "=", "[", "\"\"", "]", "*", "mesh_shape", ".", "size", "\n", "mesh_impl", "=", "mtf", ".", "simd_mesh_impl", ".", "SimdMeshImpl", "(", "mesh_shape", ",", "layout_rules", ",", "\n", "mesh_devices", ",", "\n", "ctx", ".", "device_assignment", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"bert_mesh\"", ",", "var_placer", ")", "\n", "\n", "unique_ids", "=", "features", "[", "\"unique_ids\"", "]", "\n", "input_ids", "=", "features", "[", "\"input_ids\"", "]", "\n", "input_mask", "=", "features", "[", "\"input_mask\"", "]", "\n", "segment_ids", "=", "features", "[", "\"segment_ids\"", "]", "\n", "\n", "batch_size", "=", "input_ids", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "batch_size", ")", "\n", "seq_length", "=", "input_ids", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "seq_dim", "=", "mtf", ".", "Dimension", "(", "\"seq\"", ",", "seq_length", ")", "\n", "\n", "mtf_input_ids", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "input_ids", ",", "[", "batch_dim", ",", "seq_dim", "]", ")", "\n", "mtf_input_mask", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "input_mask", ",", "\n", "[", "batch_dim", ",", "seq_dim", "]", ")", "\n", "mtf_segment_ids", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "segment_ids", ",", "\n", "[", "batch_dim", ",", "seq_dim", "]", ")", "\n", "\n", "is_training", "=", "(", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "(", "start_logits", ",", "end_logits", ")", "=", "create_model", "(", "\n", "bert_config", "=", "bert_config", ",", "\n", "is_training", "=", "is_training", ",", "\n", "input_ids", "=", "mtf_input_ids", ",", "\n", "input_mask", "=", "mtf_input_mask", ",", "\n", "segment_ids", "=", "mtf_segment_ids", ")", "\n", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "\n", "      ", "def", "compute_loss", "(", "logits", ",", "positions", ")", ":", "\n", "        ", "one_hot_positions", "=", "mtf", ".", "one_hot", "(", "positions", ",", "output_dim", "=", "seq_dim", ")", "\n", "log_probs", "=", "mtf", ".", "log_softmax", "(", "logits", ",", "seq_dim", ")", "\n", "loss", "=", "-", "mtf", ".", "reduce_mean", "(", "\n", "mtf", ".", "reduce_sum", "(", "one_hot_positions", "*", "log_probs", ",", "reduced_dim", "=", "seq_dim", ")", ")", "\n", "return", "loss", "\n", "\n", "", "start_positions", "=", "features", "[", "\"start_positions\"", "]", "\n", "mtf_start_positions", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "start_positions", ",", "\n", "[", "batch_dim", "]", ")", "\n", "end_positions", "=", "features", "[", "\"end_positions\"", "]", "\n", "mtf_end_positions", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "end_positions", ",", "[", "batch_dim", "]", ")", "\n", "\n", "start_loss", "=", "compute_loss", "(", "start_logits", ",", "mtf_start_positions", ")", "\n", "end_loss", "=", "compute_loss", "(", "end_logits", ",", "mtf_end_positions", ")", "\n", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2.0", "\n", "_", ",", "update_ops", "=", "optimization_lib", ".", "create_optimizer", "(", "\n", "total_loss", ",", "\n", "learning_rate", ",", "\n", "num_train_steps", ",", "\n", "num_warmup_steps", ",", "\n", "max_optimized_variable_size", "=", "FLAGS", ".", "max_optimized_variable_size", ",", "\n", "optimizer", "=", "FLAGS", ".", "optimizer", ",", "\n", "clip_gradients", "=", "FLAGS", ".", "clip_gradients", ")", "\n", "", "elif", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "PREDICT", ":", "\n", "      ", "start_logits", "=", "mtf", ".", "anonymize", "(", "start_logits", ")", "\n", "end_logits", "=", "mtf", ".", "anonymize", "(", "end_logits", ")", "\n", "\n", "", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "tf_loss", "=", "tf", ".", "to_float", "(", "lowering", ".", "export_to_tf_tensor", "(", "total_loss", ")", ")", "\n", "global_step", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", "\n", "tf_update_ops", "=", "[", "lowering", ".", "lowered_operation", "(", "op", ")", "for", "op", "in", "update_ops", "]", "\n", "tf_update_ops", ".", "append", "(", "tf", ".", "assign_add", "(", "global_step", ",", "1", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"tf_update_ops: {}\"", ".", "format", "(", "tf_update_ops", ")", ")", "\n", "train_op", "=", "tf", ".", "group", "(", "tf_update_ops", ")", "\n", "\n", "", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "initialized_variable_names", "=", "{", "}", "\n", "scaffold_fn", "=", "None", "\n", "if", "init_checkpoint", ":", "\n", "      ", "(", "assignment_map", ",", "initialized_variable_names", "\n", ")", "=", "bert_lib", ".", "get_assignment_map_from_checkpoint", "(", "tvars", ",", "init_checkpoint", ")", "\n", "if", "use_tpu", ":", "\n", "\n", "        ", "def", "tpu_scaffold", "(", ")", ":", "\n", "          ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "return", "tf", ".", "train", ".", "Scaffold", "(", ")", "\n", "\n", "", "scaffold_fn", "=", "tpu_scaffold", "\n", "", "else", ":", "\n", "        ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "\n", "", "", "tf", ".", "logging", ".", "info", "(", "\"**** Trainable Variables ****\"", ")", "\n", "for", "var", "in", "tvars", ":", "\n", "      ", "init_string", "=", "\"\"", "\n", "if", "var", ".", "name", "in", "initialized_variable_names", ":", "\n", "        ", "init_string", "=", "\", *INIT_FROM_CKPT*\"", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s%s\"", ",", "var", ".", "name", ",", "var", ".", "shape", ",", "\n", "init_string", ")", "\n", "\n", "", "with", "mtf", ".", "utils", ".", "outside_all_rewrites", "(", ")", ":", "\n", "# Copy master variables to slices. Must be called first.", "\n", "      ", "restore_hook", "=", "mtf", ".", "MtfRestoreHook", "(", "lowering", ")", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "tf", ".", "global_variables", "(", ")", ",", "\n", "sharded", "=", "True", ",", "\n", "max_to_keep", "=", "10", ",", "\n", "keep_checkpoint_every_n_hours", "=", "2", ",", "\n", "defer_build", "=", "False", ",", "\n", "save_relative_paths", "=", "True", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "SAVERS", ",", "saver", ")", "\n", "saver_listener", "=", "mtf", ".", "MtfCheckpointSaverListener", "(", "lowering", ")", "\n", "saver_hook", "=", "tf", ".", "train", ".", "CheckpointSaverHook", "(", "\n", "FLAGS", ".", "output_dir", ",", "\n", "save_steps", "=", "1000", ",", "\n", "saver", "=", "saver", ",", "\n", "listeners", "=", "[", "saver_listener", "]", ")", "\n", "\n", "return", "tf_estimator", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", ",", "\n", "loss", "=", "tf_loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "training_hooks", "=", "[", "restore_hook", ",", "saver_hook", "]", ",", "\n", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "", "elif", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "PREDICT", ":", "\n", "        ", "predictions", "=", "{", "\n", "\"unique_ids\"", ":", "unique_ids", ",", "\n", "\"start_logits\"", ":", "lowering", ".", "export_to_tf_tensor", "(", "start_logits", ")", ",", "\n", "\"end_logits\"", ":", "lowering", ".", "export_to_tf_tensor", "(", "end_logits", ")", ",", "\n", "}", "\n", "\n", "return", "tf_estimator", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", ",", "\n", "prediction_hooks", "=", "[", "restore_hook", "]", ",", "\n", "predictions", "=", "predictions", ",", "\n", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Only TRAIN and PREDICT modes are supported: %s\"", "%", "\n", "(", "mode", ")", ")", "\n", "\n", "", "", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.input_fn_builder": [[767, 815], ["tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.parse_single_example", "list", "tensorflow.data.TFRecordDataset", "d.shuffle.apply", "tf.parse_single_example.keys", "d.shuffle.repeat", "d.shuffle.shuffle", "tensorflow.data.experimental.map_and_batch", "tensorflow.to_int32", "run_squad.input_fn_builder._decode_record"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_pretraining._decode_record"], ["", "def", "input_fn_builder", "(", "input_file", ",", "seq_length", ",", "is_training", ",", "drop_remainder", ")", ":", "\n", "  ", "\"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"", "\n", "\n", "name_to_features", "=", "{", "\n", "\"unique_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"input_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"input_mask\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"segment_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "}", "\n", "\n", "if", "is_training", ":", "\n", "    ", "name_to_features", "[", "\"start_positions\"", "]", "=", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", "\n", "name_to_features", "[", "\"end_positions\"", "]", "=", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", "\n", "\n", "", "def", "_decode_record", "(", "record", ",", "name_to_features", ")", ":", "\n", "    ", "\"\"\"Decodes a record to a TensorFlow example.\"\"\"", "\n", "example", "=", "tf", ".", "parse_single_example", "(", "record", ",", "name_to_features", ")", "\n", "\n", "# tf.Example only supports tf.int64, but the TPU only supports tf.int32.", "\n", "# So cast all int64 to int32.", "\n", "for", "name", "in", "list", "(", "example", ".", "keys", "(", ")", ")", ":", "\n", "      ", "t", "=", "example", "[", "name", "]", "\n", "if", "t", ".", "dtype", "==", "tf", ".", "int64", ":", "\n", "        ", "t", "=", "tf", ".", "to_int32", "(", "t", ")", "\n", "", "example", "[", "name", "]", "=", "t", "\n", "\n", "", "return", "example", "\n", "\n", "", "def", "input_fn", "(", "params", ")", ":", "\n", "    ", "\"\"\"The actual input function.\"\"\"", "\n", "batch_size", "=", "params", "[", "\"batch_size\"", "]", "\n", "\n", "# For training, we want a lot of parallel reading and shuffling.", "\n", "# For eval, we want no shuffling and parallel reading doesn't matter.", "\n", "d", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "input_file", ")", "\n", "if", "is_training", ":", "\n", "      ", "d", "=", "d", ".", "repeat", "(", ")", "\n", "d", "=", "d", ".", "shuffle", "(", "buffer_size", "=", "100", ")", "\n", "\n", "", "d", "=", "d", ".", "apply", "(", "\n", "tf", ".", "data", ".", "experimental", ".", "map_and_batch", "(", "\n", "lambda", "record", ":", "_decode_record", "(", "record", ",", "name_to_features", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_remainder", "=", "drop_remainder", ")", ")", "\n", "\n", "return", "d", "\n", "\n", "", "return", "input_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.write_predictions": [[821, 1005], ["tensorflow.logging.info", "tensorflow.logging.info", "collections.defaultdict", "collections.namedtuple", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "example_index_to_features[].append", "enumerate", "sorted", "collections.namedtuple", "run_squad._compute_softmax", "enumerate", "tensorflow.gfile.GFile", "writer.write", "tensorflow.gfile.GFile", "writer.write", "run_squad._get_best_indexes", "run_squad._get_best_indexes", "sorted.append", "nbest.append", "nbest.append", "len", "total_scores.append", "collections.OrderedDict", "nbest_json.append", "len", "tensorflow.gfile.GFile", "writer.write", "collections.namedtuple.", "len", "tok_text.strip.replace", "tok_text.strip.replace", "tok_text.strip.strip", "run_squad.get_final_text", "collections.namedtuple.", "nbest.append", "collections.namedtuple.", "json.dumps", "json.dumps", "sorted.append", "tok_text.strip.split", "collections.namedtuple.", "json.dumps", "len", "len", "feature.token_is_max_context.get", "collections.namedtuple."], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad._compute_softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad._get_best_indexes", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad._get_best_indexes", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.get_final_text", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.split", "home.repos.pwc.inspect_result.tensorflow_mesh.experimental.model_executor._CapturedObject.get"], ["def", "write_predictions", "(", "all_examples", ",", "all_features", ",", "all_results", ",", "n_best_size", ",", "\n", "max_answer_length", ",", "do_lower_case", ",", "output_prediction_file", ",", "\n", "output_nbest_file", ",", "output_null_log_odds_file", ")", ":", "\n", "  ", "\"\"\"Write final predictions to the json file and log-odds of null if needed.\"\"\"", "\n", "tf", ".", "logging", ".", "info", "(", "\"Writing predictions to: %s\"", "%", "(", "output_prediction_file", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Writing nbest to: %s\"", "%", "(", "output_nbest_file", ")", ")", "\n", "\n", "example_index_to_features", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "feature", "in", "all_features", ":", "\n", "    ", "example_index_to_features", "[", "feature", ".", "example_index", "]", ".", "append", "(", "feature", ")", "\n", "\n", "", "unique_id_to_result", "=", "{", "}", "\n", "for", "result", "in", "all_results", ":", "\n", "    ", "unique_id_to_result", "[", "result", ".", "unique_id", "]", "=", "result", "\n", "\n", "", "_PrelimPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"PrelimPrediction\"", ",", "\n", "[", "\"feature_index\"", ",", "\"start_index\"", ",", "\"end_index\"", ",", "\"start_logit\"", ",", "\"end_logit\"", "]", ")", "\n", "\n", "all_predictions", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "all_nbest_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "scores_diff_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "all_examples", ")", ":", "\n", "    ", "features", "=", "example_index_to_features", "[", "example_index", "]", "\n", "\n", "prelim_predictions", "=", "[", "]", "\n", "# keep track of the minimum score of null start+end of position 0", "\n", "score_null", "=", "1000000", "# large and positive", "\n", "min_null_feature_index", "=", "0", "# the paragraph slice with min mull score", "\n", "null_start_logit", "=", "0", "# the start logit at the slice with min null score", "\n", "null_end_logit", "=", "0", "# the end logit at the slice with min null score", "\n", "for", "(", "feature_index", ",", "feature", ")", "in", "enumerate", "(", "features", ")", ":", "\n", "      ", "result", "=", "unique_id_to_result", "[", "feature", ".", "unique_id", "]", "\n", "start_indexes", "=", "_get_best_indexes", "(", "result", ".", "start_logits", ",", "n_best_size", ")", "\n", "end_indexes", "=", "_get_best_indexes", "(", "result", ".", "end_logits", ",", "n_best_size", ")", "\n", "# if we could have irrelevant answers, get the min score of irrelevant", "\n", "if", "FLAGS", ".", "version_2_with_negative", ":", "\n", "        ", "feature_null_score", "=", "result", ".", "start_logits", "[", "0", "]", "+", "result", ".", "end_logits", "[", "0", "]", "\n", "if", "feature_null_score", "<", "score_null", ":", "\n", "          ", "score_null", "=", "feature_null_score", "\n", "min_null_feature_index", "=", "feature_index", "\n", "null_start_logit", "=", "result", ".", "start_logits", "[", "0", "]", "\n", "null_end_logit", "=", "result", ".", "end_logits", "[", "0", "]", "\n", "", "", "for", "start_index", "in", "start_indexes", ":", "\n", "        ", "for", "end_index", "in", "end_indexes", ":", "\n", "# We could hypothetically create invalid predictions, e.g., predict", "\n", "# that the start of the span is in the question. We throw out all", "\n", "# invalid predictions.", "\n", "          ", "if", "start_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "            ", "continue", "\n", "", "if", "end_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "            ", "continue", "\n", "", "if", "start_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "            ", "continue", "\n", "", "if", "end_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "            ", "continue", "\n", "", "if", "not", "feature", ".", "token_is_max_context", ".", "get", "(", "start_index", ",", "False", ")", ":", "\n", "            ", "continue", "\n", "", "if", "end_index", "<", "start_index", ":", "\n", "            ", "continue", "\n", "", "length", "=", "end_index", "-", "start_index", "+", "1", "\n", "if", "length", ">", "max_answer_length", ":", "\n", "            ", "continue", "\n", "", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "feature_index", ",", "\n", "start_index", "=", "start_index", ",", "\n", "end_index", "=", "end_index", ",", "\n", "start_logit", "=", "result", ".", "start_logits", "[", "start_index", "]", ",", "\n", "end_logit", "=", "result", ".", "end_logits", "[", "end_index", "]", ")", ")", "\n", "\n", "", "", "", "if", "FLAGS", ".", "version_2_with_negative", ":", "\n", "      ", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "min_null_feature_index", ",", "\n", "start_index", "=", "0", ",", "\n", "end_index", "=", "0", ",", "\n", "start_logit", "=", "null_start_logit", ",", "\n", "end_logit", "=", "null_end_logit", ")", ")", "\n", "", "prelim_predictions", "=", "sorted", "(", "\n", "prelim_predictions", ",", "\n", "key", "=", "lambda", "x", ":", "(", "x", ".", "start_logit", "+", "x", ".", "end_logit", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "\n", "_NbestPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"NbestPrediction\"", ",", "[", "\"text\"", ",", "\"start_logit\"", ",", "\"end_logit\"", "]", ")", "\n", "\n", "seen_predictions", "=", "{", "}", "\n", "nbest", "=", "[", "]", "\n", "for", "pred", "in", "prelim_predictions", ":", "\n", "      ", "if", "len", "(", "nbest", ")", ">=", "n_best_size", ":", "\n", "        ", "break", "\n", "", "feature", "=", "features", "[", "pred", ".", "feature_index", "]", "\n", "if", "pred", ".", "start_index", ">", "0", ":", "# this is a non-null prediction", "\n", "        ", "tok_tokens", "=", "feature", ".", "tokens", "[", "pred", ".", "start_index", ":", "(", "pred", ".", "end_index", "+", "1", ")", "]", "\n", "orig_doc_start", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "start_index", "]", "\n", "orig_doc_end", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "end_index", "]", "\n", "orig_tokens", "=", "example", ".", "doc_tokens", "[", "orig_doc_start", ":", "(", "orig_doc_end", "+", "1", ")", "]", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_tokens", ")", "\n", "\n", "# De-tokenize WordPieces that have been split off.", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\"##\"", ",", "\"\"", ")", "\n", "\n", "# Clean whitespace", "\n", "tok_text", "=", "tok_text", ".", "strip", "(", ")", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_text", ".", "split", "(", ")", ")", "\n", "orig_text", "=", "\" \"", ".", "join", "(", "orig_tokens", ")", "\n", "\n", "final_text", "=", "get_final_text", "(", "tok_text", ",", "orig_text", ",", "do_lower_case", ")", "\n", "if", "final_text", "in", "seen_predictions", ":", "\n", "          ", "continue", "\n", "\n", "", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "", "else", ":", "\n", "        ", "final_text", "=", "\"\"", "\n", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "\n", "", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "final_text", ",", "\n", "start_logit", "=", "pred", ".", "start_logit", ",", "\n", "end_logit", "=", "pred", ".", "end_logit", ")", ")", "\n", "\n", "# if we didn't inlude the empty option in the n-best, inlcude it", "\n", "", "if", "FLAGS", ".", "version_2_with_negative", ":", "\n", "      ", "if", "\"\"", "not", "in", "seen_predictions", ":", "\n", "        ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "\"\"", ",", "start_logit", "=", "null_start_logit", ",", "\n", "end_logit", "=", "null_end_logit", ")", ")", "\n", "# In very rare edge cases we could have no valid predictions. So we", "\n", "# just create a nonce prediction in this case to avoid failure.", "\n", "", "", "if", "not", "nbest", ":", "\n", "      ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "text", "=", "\"empty\"", ",", "start_logit", "=", "0.0", ",", "end_logit", "=", "0.0", ")", ")", "\n", "\n", "", "assert", "len", "(", "nbest", ")", ">=", "1", "\n", "\n", "total_scores", "=", "[", "]", "\n", "best_non_null_entry", "=", "None", "\n", "for", "entry", "in", "nbest", ":", "\n", "      ", "total_scores", ".", "append", "(", "entry", ".", "start_logit", "+", "entry", ".", "end_logit", ")", "\n", "if", "not", "best_non_null_entry", ":", "\n", "        ", "if", "entry", ".", "text", ":", "\n", "          ", "best_non_null_entry", "=", "entry", "\n", "\n", "", "", "", "probs", "=", "_compute_softmax", "(", "total_scores", ")", "\n", "\n", "nbest_json", "=", "[", "]", "\n", "for", "(", "i", ",", "entry", ")", "in", "enumerate", "(", "nbest", ")", ":", "\n", "      ", "output", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "output", "[", "\"text\"", "]", "=", "entry", ".", "text", "\n", "output", "[", "\"probability\"", "]", "=", "probs", "[", "i", "]", "\n", "output", "[", "\"start_logit\"", "]", "=", "entry", ".", "start_logit", "\n", "output", "[", "\"end_logit\"", "]", "=", "entry", ".", "end_logit", "\n", "nbest_json", ".", "append", "(", "output", ")", "\n", "\n", "", "assert", "len", "(", "nbest_json", ")", ">=", "1", "\n", "\n", "if", "not", "FLAGS", ".", "version_2_with_negative", ":", "\n", "      ", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "[", "0", "]", "[", "\"text\"", "]", "\n", "", "else", ":", "\n", "# predict \"\" iff the null score - the score of best non-null > threshold", "\n", "      ", "score_diff", "=", "score_null", "-", "best_non_null_entry", ".", "start_logit", "-", "(", "\n", "best_non_null_entry", ".", "end_logit", ")", "\n", "scores_diff_json", "[", "example", ".", "qas_id", "]", "=", "score_diff", "\n", "if", "score_diff", ">", "FLAGS", ".", "null_score_diff_threshold", ":", "\n", "        ", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "\"\"", "\n", "", "else", ":", "\n", "        ", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "best_non_null_entry", ".", "text", "\n", "\n", "", "", "all_nbest_json", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "\n", "\n", "", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "    ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_predictions", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_nbest_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "    ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_nbest_json", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "if", "FLAGS", ".", "version_2_with_negative", ":", "\n", "    ", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_null_log_odds_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "      ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "scores_diff_json", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.get_final_text": [[1007, 1101], ["mesh_tensorflow.BasicTokenizer", "tok_text.find", "run_squad.get_final_text._strip_spaces"], "function", ["None"], ["", "", "", "def", "get_final_text", "(", "pred_text", ",", "orig_text", ",", "do_lower_case", ")", ":", "\n", "  ", "\"\"\"Project the tokenized prediction back to the original text.\"\"\"", "\n", "\n", "# When we created the data, we kept track of the alignment between original", "\n", "# (whitespace tokenized) tokens and our WordPiece tokenized tokens. So", "\n", "# now `orig_text` contains the span of our original text corresponding to the", "\n", "# span that we predicted.", "\n", "#", "\n", "# However, `orig_text` may contain extra characters that we don't want in", "\n", "# our prediction.", "\n", "#", "\n", "# For example, let's say:", "\n", "#   pred_text = steve smith", "\n", "#   orig_text = Steve Smith's", "\n", "#", "\n", "# We don't want to return `orig_text` because it contains the extra \"'s\".", "\n", "#", "\n", "# We don't want to return `pred_text` because it's already been normalized", "\n", "# (the SQuAD eval script also does punctuation stripping/lower casing but", "\n", "# our tokenizer does additional normalization like stripping accent", "\n", "# characters).", "\n", "#", "\n", "# What we really want to return is \"Steve Smith\".", "\n", "#", "\n", "# Therefore, we have to apply a semi-complicated alignment heruistic between", "\n", "# `pred_text` and `orig_text` to get a character-to-charcter alignment. This", "\n", "# can fail in certain cases in which case we just return `orig_text`.", "\n", "\n", "def", "_strip_spaces", "(", "text", ")", ":", "\n", "    ", "ns_chars", "=", "[", "]", "\n", "ns_to_s_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "(", "i", ",", "c", ")", "in", "enumerate", "(", "text", ")", ":", "\n", "      ", "if", "c", "==", "\" \"", ":", "\n", "        ", "continue", "\n", "", "ns_to_s_map", "[", "len", "(", "ns_chars", ")", "]", "=", "i", "\n", "ns_chars", ".", "append", "(", "c", ")", "\n", "", "ns_text", "=", "\"\"", ".", "join", "(", "ns_chars", ")", "\n", "return", "(", "ns_text", ",", "ns_to_s_map", ")", "\n", "\n", "# We first tokenize `orig_text`, strip whitespace from the result", "\n", "# and `pred_text`, and check if they are the same length. If they are", "\n", "# NOT the same length, the heuristic has failed. If they are the same", "\n", "# length, we assume the characters are one-to-one aligned.", "\n", "", "tokenizer", "=", "tokenization", ".", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ")", "\n", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tokenizer", ".", "tokenize", "(", "orig_text", ")", ")", "\n", "\n", "start_position", "=", "tok_text", ".", "find", "(", "pred_text", ")", "\n", "if", "start_position", "==", "-", "1", ":", "\n", "    ", "if", "FLAGS", ".", "verbose_logging", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\n", "\"Unable to find text: '%s' in '%s'\"", "%", "(", "pred_text", ",", "orig_text", ")", ")", "\n", "", "return", "orig_text", "\n", "", "end_position", "=", "start_position", "+", "len", "(", "pred_text", ")", "-", "1", "\n", "\n", "(", "orig_ns_text", ",", "orig_ns_to_s_map", ")", "=", "_strip_spaces", "(", "orig_text", ")", "\n", "(", "tok_ns_text", ",", "tok_ns_to_s_map", ")", "=", "_strip_spaces", "(", "tok_text", ")", "\n", "\n", "if", "len", "(", "orig_ns_text", ")", "!=", "len", "(", "tok_ns_text", ")", ":", "\n", "    ", "if", "FLAGS", ".", "verbose_logging", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Length not equal after stripping spaces: '%s' vs '%s'\"", ",", "\n", "orig_ns_text", ",", "tok_ns_text", ")", "\n", "", "return", "orig_text", "\n", "\n", "# We then project the characters in `pred_text` back to `orig_text` using", "\n", "# the character-to-character alignment.", "\n", "", "tok_s_to_ns_map", "=", "{", "}", "\n", "for", "(", "i", ",", "tok_index", ")", "in", "six", ".", "iteritems", "(", "tok_ns_to_s_map", ")", ":", "\n", "    ", "tok_s_to_ns_map", "[", "tok_index", "]", "=", "i", "\n", "\n", "", "orig_start_position", "=", "None", "\n", "if", "start_position", "in", "tok_s_to_ns_map", ":", "\n", "    ", "ns_start_position", "=", "tok_s_to_ns_map", "[", "start_position", "]", "\n", "if", "ns_start_position", "in", "orig_ns_to_s_map", ":", "\n", "      ", "orig_start_position", "=", "orig_ns_to_s_map", "[", "ns_start_position", "]", "\n", "\n", "", "", "if", "orig_start_position", "is", "None", ":", "\n", "    ", "if", "FLAGS", ".", "verbose_logging", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Couldn't map start position\"", ")", "\n", "", "return", "orig_text", "\n", "\n", "", "orig_end_position", "=", "None", "\n", "if", "end_position", "in", "tok_s_to_ns_map", ":", "\n", "    ", "ns_end_position", "=", "tok_s_to_ns_map", "[", "end_position", "]", "\n", "if", "ns_end_position", "in", "orig_ns_to_s_map", ":", "\n", "      ", "orig_end_position", "=", "orig_ns_to_s_map", "[", "ns_end_position", "]", "\n", "\n", "", "", "if", "orig_end_position", "is", "None", ":", "\n", "    ", "if", "FLAGS", ".", "verbose_logging", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Couldn't map end position\"", ")", "\n", "", "return", "orig_text", "\n", "\n", "", "output_text", "=", "orig_text", "[", "orig_start_position", ":", "(", "orig_end_position", "+", "1", ")", "]", "\n", "return", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad._get_best_indexes": [[1103, 1113], ["sorted", "six.moves.range", "enumerate", "len", "best_indexes.append"], "function", ["None"], ["", "def", "_get_best_indexes", "(", "logits", ",", "n_best_size", ")", ":", "\n", "  ", "\"\"\"Get the n-best logits from a list.\"\"\"", "\n", "index_and_score", "=", "sorted", "(", "enumerate", "(", "logits", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "best_indexes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "index_and_score", ")", ")", ":", "\n", "    ", "if", "i", ">=", "n_best_size", ":", "\n", "      ", "break", "\n", "", "best_indexes", ".", "append", "(", "index_and_score", "[", "i", "]", "[", "0", "]", ")", "\n", "", "return", "best_indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad._compute_softmax": [[1115, 1136], ["math.exp", "exp_scores.append", "probs.append"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.exp"], ["", "def", "_compute_softmax", "(", "scores", ")", ":", "\n", "  ", "\"\"\"Compute softmax probability over raw logits.\"\"\"", "\n", "if", "not", "scores", ":", "\n", "    ", "return", "[", "]", "\n", "\n", "", "max_score", "=", "None", "\n", "for", "score", "in", "scores", ":", "\n", "    ", "if", "max_score", "is", "None", "or", "score", ">", "max_score", ":", "\n", "      ", "max_score", "=", "score", "\n", "\n", "", "", "exp_scores", "=", "[", "]", "\n", "total_sum", "=", "0.0", "\n", "for", "score", "in", "scores", ":", "\n", "    ", "x", "=", "math", ".", "exp", "(", "score", "-", "max_score", ")", "\n", "exp_scores", ".", "append", "(", "x", ")", "\n", "total_sum", "+=", "x", "\n", "\n", "", "probs", "=", "[", "]", "\n", "for", "score", "in", "exp_scores", ":", "\n", "    ", "probs", ".", "append", "(", "score", "/", "total_sum", ")", "\n", "", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.validate_flags_or_throw": [[1177, 1204], ["mesh_tensorflow.validate_case_matches_checkpoint", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.tokenization.validate_case_matches_checkpoint"], ["", "", "def", "validate_flags_or_throw", "(", "bert_config", ")", ":", "\n", "  ", "\"\"\"Validate the input FLAGS or throw an exception.\"\"\"", "\n", "tokenization", ".", "validate_case_matches_checkpoint", "(", "FLAGS", ".", "do_lower_case", ",", "\n", "FLAGS", ".", "init_checkpoint", ")", "\n", "\n", "if", "not", "FLAGS", ".", "do_train", "and", "not", "FLAGS", ".", "do_predict", ":", "\n", "    ", "raise", "ValueError", "(", "\"At least one of `do_train` or `do_predict` must be True.\"", ")", "\n", "\n", "", "if", "FLAGS", ".", "do_train", ":", "\n", "    ", "if", "not", "FLAGS", ".", "train_file", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"If `do_train` is True, then `train_file` must be specified.\"", ")", "\n", "", "", "if", "FLAGS", ".", "do_predict", ":", "\n", "    ", "if", "not", "FLAGS", ".", "predict_file", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"If `do_predict` is True, then `predict_file` must be specified.\"", ")", "\n", "\n", "", "", "if", "FLAGS", ".", "max_seq_length", ">", "bert_config", ".", "max_position_embeddings", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"Cannot use sequence length %d because the BERT model \"", "\n", "\"was only trained up to sequence length %d\"", "%", "\n", "(", "FLAGS", ".", "max_seq_length", ",", "bert_config", ".", "max_position_embeddings", ")", ")", "\n", "\n", "", "if", "FLAGS", ".", "max_seq_length", "<=", "FLAGS", ".", "max_query_length", "+", "3", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"The max_seq_length (%d) must be greater than max_query_length \"", "\n", "\"(%d) + 3\"", "%", "(", "FLAGS", ".", "max_seq_length", ",", "FLAGS", ".", "max_query_length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.main": [[1206, 1360], ["tensorflow.logging.set_verbosity", "mesh_tensorflow.BertConfig.from_json_file", "run_squad.validate_flags_or_throw", "tensorflow.gfile.MakeDirs", "mesh_tensorflow.FullTokenizer", "tensorflow.compat.v1.estimator.tpu.RunConfig", "run_squad.model_fn_builder", "tensorflow.compat.v1.estimator.tpu.TPUEstimator", "tensorflow.distribute.cluster_resolver.TPUClusterResolver", "run_squad.read_squad_examples", "int", "int", "random.Random", "random.Random.shuffle", "run_squad.input_fn_builder", "tf_estimator.tpu.TPUEstimator.train", "run_squad.read_squad_examples", "run_squad.FeatureWriter", "run_squad.convert_examples_to_features", "run_squad.FeatureWriter.close", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "run_squad.input_fn_builder", "tf_estimator.tpu.TPUEstimator.predict", "os.path.join", "os.path.join", "os.path.join", "run_squad.write_predictions", "tensorflow.compat.v1.estimator.tpu.TPUConfig", "run_squad.FeatureWriter", "run_squad.convert_examples_to_features", "run_squad.FeatureWriter.close", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "eval_features.append", "run_squad.FeatureWriter.process_feature", "len", "len", "int", "all_results.append", "len", "os.path.join", "tensorflow.logging.info", "float", "float", "RawResult", "len", "os.path.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.bert.bert.BertConfig.from_json_file", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.validate_flags_or_throw", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.model_fn_builder", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.read_squad_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.input_fn_builder", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.train", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.read_squad_examples", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.convert_examples_to_features", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.FeatureWriter.close", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.input_fn_builder", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.write_predictions", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.convert_examples_to_features", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.FeatureWriter.close", "home.repos.pwc.inspect_result.tensorflow_mesh.bert.run_squad.FeatureWriter.process_feature"], ["", "", "def", "main", "(", "_", ")", ":", "\n", "  ", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "\n", "bert_config", "=", "bert_lib", ".", "BertConfig", ".", "from_json_file", "(", "FLAGS", ".", "bert_config_file", ")", "\n", "\n", "validate_flags_or_throw", "(", "bert_config", ")", "\n", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "FLAGS", ".", "output_dir", ")", "\n", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "\n", "vocab_file", "=", "FLAGS", ".", "vocab_file", ",", "do_lower_case", "=", "FLAGS", ".", "do_lower_case", ")", "\n", "\n", "tpu_cluster_resolver", "=", "None", "\n", "if", "FLAGS", ".", "use_tpu", "and", "FLAGS", ".", "tpu_name", ":", "\n", "    ", "tpu_cluster_resolver", "=", "tf", ".", "distribute", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "\n", "FLAGS", ".", "tpu_name", ",", "zone", "=", "FLAGS", ".", "tpu_zone", ",", "project", "=", "FLAGS", ".", "gcp_project", ")", "\n", "\n", "", "run_config", "=", "tf_estimator", ".", "tpu", ".", "RunConfig", "(", "\n", "cluster", "=", "tpu_cluster_resolver", ",", "\n", "master", "=", "FLAGS", ".", "master", ",", "\n", "model_dir", "=", "FLAGS", ".", "output_dir", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "tpu_config", "=", "tf_estimator", ".", "tpu", ".", "TPUConfig", "(", "\n", "iterations_per_loop", "=", "FLAGS", ".", "iterations_per_loop", ",", "\n", "num_cores_per_replica", "=", "1", ",", "\n", "per_host_input_for_training", "=", "tf_estimator", ".", "tpu", ".", "InputPipelineConfig", "\n", ".", "BROADCAST", ")", ")", "\n", "\n", "train_examples", "=", "None", "\n", "num_train_steps", "=", "None", "\n", "num_warmup_steps", "=", "None", "\n", "if", "FLAGS", ".", "do_train", ":", "\n", "    ", "train_examples", "=", "read_squad_examples", "(", "\n", "input_file", "=", "FLAGS", ".", "train_file", ",", "is_training", "=", "True", ")", "\n", "num_train_steps", "=", "int", "(", "\n", "len", "(", "train_examples", ")", "/", "FLAGS", ".", "train_batch_size", "*", "FLAGS", ".", "num_train_epochs", ")", "\n", "num_warmup_steps", "=", "int", "(", "num_train_steps", "*", "FLAGS", ".", "warmup_proportion", ")", "\n", "\n", "# Pre-shuffle the input to avoid having to make a very large shuffle", "\n", "# buffer in in the `input_fn`.", "\n", "rng", "=", "random", ".", "Random", "(", "12345", ")", "\n", "rng", ".", "shuffle", "(", "train_examples", ")", "\n", "\n", "", "model_fn", "=", "model_fn_builder", "(", "\n", "bert_config", "=", "bert_config", ",", "\n", "init_checkpoint", "=", "FLAGS", ".", "init_checkpoint", ",", "\n", "learning_rate", "=", "FLAGS", ".", "learning_rate", ",", "\n", "num_train_steps", "=", "num_train_steps", ",", "\n", "num_warmup_steps", "=", "num_warmup_steps", ",", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ")", "\n", "\n", "# If TPU is not available, this will fall back to normal Estimator on CPU", "\n", "# or GPU.", "\n", "estimator", "=", "tf_estimator", ".", "tpu", ".", "TPUEstimator", "(", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "model_fn", "=", "model_fn", ",", "\n", "config", "=", "run_config", ",", "\n", "train_batch_size", "=", "FLAGS", ".", "train_batch_size", ",", "\n", "predict_batch_size", "=", "FLAGS", ".", "predict_batch_size", ")", "\n", "\n", "if", "FLAGS", ".", "do_train", ":", "\n", "# We write to a temporary file to avoid storing very large constant tensors", "\n", "# in memory.", "\n", "    ", "if", "FLAGS", ".", "cached_train_file", ":", "\n", "      ", "train_tfrecords_file", "=", "FLAGS", ".", "cached_train_file", "\n", "", "else", ":", "\n", "      ", "train_writer", "=", "FeatureWriter", "(", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"train.tf_record\"", ")", ",", "\n", "is_training", "=", "True", ")", "\n", "convert_examples_to_features", "(", "\n", "examples", "=", "train_examples", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "doc_stride", "=", "FLAGS", ".", "doc_stride", ",", "\n", "max_query_length", "=", "FLAGS", ".", "max_query_length", ",", "\n", "is_training", "=", "True", ",", "\n", "output_fn", "=", "train_writer", ".", "process_feature", ")", "\n", "train_writer", ".", "close", "(", ")", "\n", "train_tfrecords_file", "=", "train_writer", ".", "filename", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num orig examples = %d\"", ",", "len", "(", "train_examples", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num split examples = %d\"", ",", "train_writer", ".", "num_features", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "train_batch_size", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num steps = %d\"", ",", "num_train_steps", ")", "\n", "", "del", "train_examples", "\n", "\n", "train_input_fn", "=", "input_fn_builder", "(", "\n", "input_file", "=", "train_tfrecords_file", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "True", ",", "\n", "drop_remainder", "=", "True", ")", "\n", "estimator", ".", "train", "(", "input_fn", "=", "train_input_fn", ",", "max_steps", "=", "num_train_steps", ")", "\n", "\n", "", "if", "FLAGS", ".", "do_predict", ":", "\n", "    ", "eval_examples", "=", "read_squad_examples", "(", "\n", "input_file", "=", "FLAGS", ".", "predict_file", ",", "is_training", "=", "False", ")", "\n", "\n", "eval_writer", "=", "FeatureWriter", "(", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"eval.tf_record\"", ")", ",", "\n", "is_training", "=", "False", ")", "\n", "eval_features", "=", "[", "]", "\n", "\n", "def", "append_feature", "(", "feature", ")", ":", "\n", "      ", "eval_features", ".", "append", "(", "feature", ")", "\n", "eval_writer", ".", "process_feature", "(", "feature", ")", "\n", "\n", "", "convert_examples_to_features", "(", "\n", "examples", "=", "eval_examples", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "doc_stride", "=", "FLAGS", ".", "doc_stride", ",", "\n", "max_query_length", "=", "FLAGS", ".", "max_query_length", ",", "\n", "is_training", "=", "False", ",", "\n", "output_fn", "=", "append_feature", ")", "\n", "eval_writer", ".", "close", "(", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running predictions *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num orig examples = %d\"", ",", "len", "(", "eval_examples", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num split examples = %d\"", ",", "len", "(", "eval_features", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "predict_batch_size", ")", "\n", "\n", "all_results", "=", "[", "]", "\n", "\n", "predict_input_fn", "=", "input_fn_builder", "(", "\n", "input_file", "=", "eval_writer", ".", "filename", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "False", ",", "\n", "drop_remainder", "=", "False", ")", "\n", "\n", "# If running eval on the TPU, you will need to specify the number of", "\n", "# steps.", "\n", "all_results", "=", "[", "]", "\n", "for", "result", "in", "estimator", ".", "predict", "(", "\n", "predict_input_fn", ",", "yield_single_examples", "=", "True", ")", ":", "\n", "      ", "if", "len", "(", "all_results", ")", "%", "1000", "==", "0", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"Processing example: %d\"", "%", "(", "len", "(", "all_results", ")", ")", ")", "\n", "", "unique_id", "=", "int", "(", "result", "[", "\"unique_ids\"", "]", ")", "\n", "start_logits", "=", "[", "float", "(", "x", ")", "for", "x", "in", "result", "[", "\"start_logits\"", "]", ".", "flat", "]", "\n", "end_logits", "=", "[", "float", "(", "x", ")", "for", "x", "in", "result", "[", "\"end_logits\"", "]", ".", "flat", "]", "\n", "all_results", ".", "append", "(", "\n", "RawResult", "(", "\n", "unique_id", "=", "unique_id", ",", "\n", "start_logits", "=", "start_logits", ",", "\n", "end_logits", "=", "end_logits", ")", ")", "\n", "\n", "", "output_prediction_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"predictions.json\"", ")", "\n", "output_nbest_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"nbest_predictions.json\"", ")", "\n", "output_null_log_odds_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"null_odds.json\"", ")", "\n", "\n", "write_predictions", "(", "eval_examples", ",", "eval_features", ",", "all_results", ",", "\n", "FLAGS", ".", "n_best_size", ",", "FLAGS", ".", "max_answer_length", ",", "\n", "FLAGS", ".", "do_lower_case", ",", "output_prediction_file", ",", "\n", "output_nbest_file", ",", "output_null_log_odds_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist.mnist_model": [[51, 113], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.transpose", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.relu", "mesh_tensorflow.relu", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "mesh_tensorflow.layers.dense", "tensorflow.reshape", "mesh_tensorflow.Shape", "mesh_tensorflow.layers.conv2d_with_blocks", "mesh_tensorflow.layers.conv2d_with_blocks", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "mesh_tensorflow.reduce_mean", "tensorflow.reshape", "mesh_tensorflow.Shape", "mesh_tensorflow.one_hot"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.transpose", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.relu", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d_with_blocks", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.conv2d_with_blocks", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.one_hot"], ["def", "mnist_model", "(", "image", ",", "labels", ",", "mesh", ")", ":", "\n", "  ", "\"\"\"The model.\n\n  Args:\n    image: tf.Tensor with shape [batch, 28*28]\n    labels: a tf.Tensor with shape [batch] and dtype tf.int32\n    mesh: a mtf.Mesh\n\n  Returns:\n    logits: a mtf.Tensor with shape [batch, 10]\n    loss: a mtf.Tensor with shape []\n  \"\"\"", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "\"batch\"", ",", "FLAGS", ".", "batch_size", ")", "\n", "row_blocks_dim", "=", "mtf", ".", "Dimension", "(", "\"row_blocks\"", ",", "4", ")", "\n", "col_blocks_dim", "=", "mtf", ".", "Dimension", "(", "\"col_blocks\"", ",", "4", ")", "\n", "rows_dim", "=", "mtf", ".", "Dimension", "(", "\"rows_size\"", ",", "7", ")", "\n", "cols_dim", "=", "mtf", ".", "Dimension", "(", "\"cols_size\"", ",", "7", ")", "\n", "\n", "classes_dim", "=", "mtf", ".", "Dimension", "(", "\"classes\"", ",", "10", ")", "\n", "one_channel_dim", "=", "mtf", ".", "Dimension", "(", "\"one_channel\"", ",", "1", ")", "\n", "\n", "x", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "tf", ".", "reshape", "(", "image", ",", "[", "FLAGS", ".", "batch_size", ",", "4", ",", "7", ",", "4", ",", "7", ",", "1", "]", ")", ",", "\n", "mtf", ".", "Shape", "(", "\n", "[", "batch_dim", ",", "row_blocks_dim", ",", "rows_dim", ",", "\n", "col_blocks_dim", ",", "cols_dim", ",", "one_channel_dim", "]", ")", ")", "\n", "x", "=", "mtf", ".", "transpose", "(", "x", ",", "[", "\n", "batch_dim", ",", "row_blocks_dim", ",", "col_blocks_dim", ",", "\n", "rows_dim", ",", "cols_dim", ",", "one_channel_dim", "]", ")", "\n", "\n", "# add some convolutional layers to demonstrate that convolution works.", "\n", "filters1_dim", "=", "mtf", ".", "Dimension", "(", "\"filters1\"", ",", "16", ")", "\n", "filters2_dim", "=", "mtf", ".", "Dimension", "(", "\"filters2\"", ",", "16", ")", "\n", "f1", "=", "mtf", ".", "relu", "(", "mtf", ".", "layers", ".", "conv2d_with_blocks", "(", "\n", "x", ",", "filters1_dim", ",", "filter_size", "=", "[", "9", ",", "9", "]", ",", "strides", "=", "[", "1", ",", "1", "]", ",", "padding", "=", "\"SAME\"", ",", "\n", "h_blocks_dim", "=", "row_blocks_dim", ",", "w_blocks_dim", "=", "col_blocks_dim", ",", "name", "=", "\"conv0\"", ")", ")", "\n", "f2", "=", "mtf", ".", "relu", "(", "mtf", ".", "layers", ".", "conv2d_with_blocks", "(", "\n", "f1", ",", "filters2_dim", ",", "filter_size", "=", "[", "9", ",", "9", "]", ",", "strides", "=", "[", "1", ",", "1", "]", ",", "padding", "=", "\"SAME\"", ",", "\n", "h_blocks_dim", "=", "row_blocks_dim", ",", "w_blocks_dim", "=", "col_blocks_dim", ",", "name", "=", "\"conv1\"", ")", ")", "\n", "x", "=", "mtf", ".", "reduce_mean", "(", "f2", ",", "reduced_dim", "=", "filters2_dim", ")", "\n", "\n", "# add some fully-connected dense layers.", "\n", "hidden_dim1", "=", "mtf", ".", "Dimension", "(", "\"hidden1\"", ",", "FLAGS", ".", "hidden_size", ")", "\n", "hidden_dim2", "=", "mtf", ".", "Dimension", "(", "\"hidden2\"", ",", "FLAGS", ".", "hidden_size", ")", "\n", "\n", "h1", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "x", ",", "hidden_dim1", ",", "\n", "reduced_dims", "=", "x", ".", "shape", ".", "dims", "[", "-", "4", ":", "]", ",", "\n", "activation", "=", "mtf", ".", "relu", ",", "name", "=", "\"hidden1\"", ")", "\n", "h2", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "h1", ",", "hidden_dim2", ",", "\n", "activation", "=", "mtf", ".", "relu", ",", "name", "=", "\"hidden2\"", ")", "\n", "logits", "=", "mtf", ".", "layers", ".", "dense", "(", "h2", ",", "classes_dim", ",", "name", "=", "\"logits\"", ")", "\n", "if", "labels", "is", "None", ":", "\n", "    ", "loss", "=", "None", "\n", "", "else", ":", "\n", "    ", "labels", "=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "tf", ".", "reshape", "(", "labels", ",", "[", "FLAGS", ".", "batch_size", "]", ")", ",", "mtf", ".", "Shape", "(", "[", "batch_dim", "]", ")", ")", "\n", "loss", "=", "mtf", ".", "layers", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", ",", "mtf", ".", "one_hot", "(", "labels", ",", "classes_dim", ")", ",", "classes_dim", ")", "\n", "loss", "=", "mtf", ".", "reduce_mean", "(", "loss", ")", "\n", "", "return", "logits", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist.model_fn": [[115, 198], ["tensorflow.logging.info", "tensorflow.train.get_global_step", "mesh_tensorflow.Graph", "mesh_tensorflow.Mesh", "mnist.mnist_model", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_layout_rules", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.Lowering", "mesh_tensorflow.MtfRestoreHook", "mtf.Lowering.export_to_tf_tensor", "mesh_tensorflow.gradients", "mesh_tensorflow.optimize.AdafactorOptimizer", "mtf.optimize.AdafactorOptimizer.apply_grads", "mtf.Lowering.export_to_tf_tensor", "tensorflow.summary.scalar", "tf_update_ops.append", "tensorflow.group", "tensorflow.train.Saver", "tensorflow.add_to_collection", "mesh_tensorflow.MtfCheckpointSaverListener", "tensorflow.train.CheckpointSaverHook", "tensorflow.metrics.accuracy", "tensorflow.identity", "tensorflow.identity", "tensorflow.summary.scalar", "tensorflow.compat.v1.estimator.EstimatorSpec", "tensorflow.compat.v1.estimator.EstimatorSpec", "tensorflow.compat.v1.estimator.EstimatorSpec", "mtf.Lowering.lowered_operation", "tensorflow.assign_add", "tensorflow.global_variables", "tensorflow.argmax", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.compat.v1.estimator.export.PredictOutput", "tensorflow.metrics.accuracy", "tensorflow.argmax"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist.mnist_model", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.Optimizer.apply_grads", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.identity", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.identity", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.lowered_operation", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign_add", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.softmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.argmax"], ["", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "\n", "  ", "\"\"\"The model_fn argument for creating an Estimator.\"\"\"", "\n", "tf", ".", "logging", ".", "info", "(", "\"features = %s labels = %s mode = %s params=%s\"", "%", "\n", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ")", "\n", "global_step", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "\"my_mesh\"", ")", "\n", "logits", ",", "loss", "=", "mnist_model", "(", "features", ",", "labels", ",", "mesh", ")", "\n", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "FLAGS", ".", "mesh_shape", ")", "\n", "layout_rules", "=", "mtf", ".", "convert_to_layout_rules", "(", "FLAGS", ".", "layout", ")", "\n", "mesh_size", "=", "mesh_shape", ".", "size", "\n", "mesh_devices", "=", "[", "\"\"", "]", "*", "mesh_size", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "mesh_shape", ",", "layout_rules", ",", "mesh_devices", ")", "\n", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "    ", "var_grads", "=", "mtf", ".", "gradients", "(", "\n", "[", "loss", "]", ",", "[", "v", ".", "outputs", "[", "0", "]", "for", "v", "in", "graph", ".", "trainable_variables", "]", ")", "\n", "optimizer", "=", "mtf", ".", "optimize", ".", "AdafactorOptimizer", "(", ")", "\n", "update_ops", "=", "optimizer", ".", "apply_grads", "(", "var_grads", ",", "graph", ".", "trainable_variables", ")", "\n", "\n", "", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "restore_hook", "=", "mtf", ".", "MtfRestoreHook", "(", "lowering", ")", "\n", "\n", "tf_logits", "=", "lowering", ".", "export_to_tf_tensor", "(", "logits", ")", "\n", "if", "mode", "!=", "tf_estimator", ".", "ModeKeys", ".", "PREDICT", ":", "\n", "    ", "tf_loss", "=", "lowering", ".", "export_to_tf_tensor", "(", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "tf_loss", ")", "\n", "\n", "", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "    ", "tf_update_ops", "=", "[", "lowering", ".", "lowered_operation", "(", "op", ")", "for", "op", "in", "update_ops", "]", "\n", "tf_update_ops", ".", "append", "(", "tf", ".", "assign_add", "(", "global_step", ",", "1", ")", ")", "\n", "train_op", "=", "tf", ".", "group", "(", "tf_update_ops", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "tf", ".", "global_variables", "(", ")", ",", "\n", "sharded", "=", "True", ",", "\n", "max_to_keep", "=", "10", ",", "\n", "keep_checkpoint_every_n_hours", "=", "2", ",", "\n", "defer_build", "=", "False", ",", "save_relative_paths", "=", "True", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "SAVERS", ",", "saver", ")", "\n", "saver_listener", "=", "mtf", ".", "MtfCheckpointSaverListener", "(", "lowering", ")", "\n", "saver_hook", "=", "tf", ".", "train", ".", "CheckpointSaverHook", "(", "\n", "FLAGS", ".", "model_dir", ",", "\n", "save_steps", "=", "1000", ",", "\n", "saver", "=", "saver", ",", "\n", "listeners", "=", "[", "saver_listener", "]", ")", "\n", "\n", "accuracy", "=", "tf", ".", "metrics", ".", "accuracy", "(", "\n", "labels", "=", "labels", ",", "predictions", "=", "tf", ".", "argmax", "(", "tf_logits", ",", "axis", "=", "1", ")", ")", "\n", "\n", "# Name tensors to be logged with LoggingTensorHook.", "\n", "tf", ".", "identity", "(", "tf_loss", ",", "\"cross_entropy\"", ")", "\n", "tf", ".", "identity", "(", "accuracy", "[", "1", "]", ",", "name", "=", "\"train_accuracy\"", ")", "\n", "\n", "# Save accuracy scalar to Tensorboard output.", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"train_accuracy\"", ",", "accuracy", "[", "1", "]", ")", "\n", "\n", "# restore_hook must come before saver_hook", "\n", "return", "tf_estimator", ".", "EstimatorSpec", "(", "\n", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ",", "loss", "=", "tf_loss", ",", "train_op", "=", "train_op", ",", "\n", "training_chief_hooks", "=", "[", "restore_hook", ",", "saver_hook", "]", ")", "\n", "\n", "", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "PREDICT", ":", "\n", "    ", "predictions", "=", "{", "\n", "\"classes\"", ":", "tf", ".", "argmax", "(", "tf_logits", ",", "axis", "=", "1", ")", ",", "\n", "\"probabilities\"", ":", "tf", ".", "nn", ".", "softmax", "(", "tf_logits", ")", ",", "\n", "}", "\n", "return", "tf_estimator", ".", "EstimatorSpec", "(", "\n", "mode", "=", "tf_estimator", ".", "ModeKeys", ".", "PREDICT", ",", "\n", "predictions", "=", "predictions", ",", "\n", "prediction_hooks", "=", "[", "restore_hook", "]", ",", "\n", "export_outputs", "=", "{", "\n", "\"classify\"", ":", "tf_estimator", ".", "export", ".", "PredictOutput", "(", "predictions", ")", "\n", "}", ")", "\n", "", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "EVAL", ":", "\n", "    ", "return", "tf_estimator", ".", "EstimatorSpec", "(", "\n", "mode", "=", "tf_estimator", ".", "ModeKeys", ".", "EVAL", ",", "\n", "loss", "=", "tf_loss", ",", "\n", "evaluation_hooks", "=", "[", "restore_hook", "]", ",", "\n", "eval_metric_ops", "=", "{", "\n", "\"accuracy\"", ":", "\n", "tf", ".", "metrics", ".", "accuracy", "(", "\n", "labels", "=", "labels", ",", "predictions", "=", "tf", ".", "argmax", "(", "tf_logits", ",", "axis", "=", "1", ")", ")", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist.run_mnist": [[201, 231], ["tensorflow.compat.v1.estimator.Estimator", "range", "mnist_dataset.train", "ds_batched.repeat.cache().shuffle().batch", "ds.cache().shuffle().batch.repeat", "mnist_dataset.test().batch().make_one_shot_iterator().get_next", "tf_estimator.Estimator.train", "tf_estimator.Estimator.evaluate", "print", "ds_batched.repeat.cache().shuffle", "mnist_dataset.test().batch().make_one_shot_iterator", "ds_batched.repeat.cache", "mnist_dataset.test().batch", "mnist_dataset.test"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.train", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.train", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.test"], ["", "", "def", "run_mnist", "(", ")", ":", "\n", "  ", "\"\"\"Run MNIST training and eval loop.\"\"\"", "\n", "mnist_classifier", "=", "tf_estimator", ".", "Estimator", "(", "\n", "model_fn", "=", "model_fn", ",", "\n", "model_dir", "=", "FLAGS", ".", "model_dir", ")", "\n", "\n", "# Set up training and evaluation input functions.", "\n", "def", "train_input_fn", "(", ")", ":", "\n", "    ", "\"\"\"Prepare data for training.\"\"\"", "\n", "\n", "# When choosing shuffle buffer sizes, larger sizes result in better", "\n", "# randomness, while smaller sizes use less memory. MNIST is a small", "\n", "# enough dataset that we can easily shuffle the full epoch.", "\n", "ds", "=", "dataset", ".", "train", "(", "FLAGS", ".", "data_dir", ")", "\n", "ds_batched", "=", "ds", ".", "cache", "(", ")", ".", "shuffle", "(", "buffer_size", "=", "50000", ")", ".", "batch", "(", "FLAGS", ".", "batch_size", ")", "\n", "\n", "# Iterate through the dataset a set number (`epochs_between_evals`) of times", "\n", "# during each training session.", "\n", "ds", "=", "ds_batched", ".", "repeat", "(", "FLAGS", ".", "epochs_between_evals", ")", "\n", "return", "ds", "\n", "\n", "", "def", "eval_input_fn", "(", ")", ":", "\n", "    ", "return", "dataset", ".", "test", "(", "FLAGS", ".", "data_dir", ")", ".", "batch", "(", "\n", "FLAGS", ".", "batch_size", ")", ".", "make_one_shot_iterator", "(", ")", ".", "get_next", "(", ")", "\n", "\n", "# Train and evaluate model.", "\n", "", "for", "_", "in", "range", "(", "FLAGS", ".", "train_epochs", "//", "FLAGS", ".", "epochs_between_evals", ")", ":", "\n", "    ", "mnist_classifier", ".", "train", "(", "input_fn", "=", "train_input_fn", ",", "hooks", "=", "None", ")", "\n", "eval_results", "=", "mnist_classifier", ".", "evaluate", "(", "input_fn", "=", "eval_input_fn", ")", "\n", "print", "(", "\"\\nEvaluation results:\\n\\t%s\\n\"", "%", "eval_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist.main": [[233, 235], ["mnist.run_mnist"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist.run_mnist"], ["", "", "def", "main", "(", "_", ")", ":", "\n", "  ", "run_mnist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.read32": [[45, 49], ["numpy.dtype().newbyteorder", "numpy.frombuffer", "numpy.dtype", "bytestream.read"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.dtype"], ["def", "read32", "(", "bytestream", ")", ":", "\n", "  ", "\"\"\"Read 4 bytes from bytestream as an unsigned 32-bit integer.\"\"\"", "\n", "dt", "=", "np", ".", "dtype", "(", "np", ".", "uint32", ")", ".", "newbyteorder", "(", "'>'", ")", "\n", "return", "np", ".", "frombuffer", "(", "bytestream", ".", "read", "(", "4", ")", ",", "dtype", "=", "dt", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.check_image_file_header": [[51, 65], ["tensorflow.gfile.Open", "mnist_dataset.read32", "mnist_dataset.read32", "mnist_dataset.read32", "mnist_dataset.read32", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.read32", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.read32", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.read32", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.read32"], ["", "def", "check_image_file_header", "(", "filename", ")", ":", "\n", "  ", "\"\"\"Validate that filename corresponds to images for the MNIST dataset.\"\"\"", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "magic", "=", "read32", "(", "f", ")", "\n", "read32", "(", "f", ")", "# num_images, unused", "\n", "rows", "=", "read32", "(", "f", ")", "\n", "cols", "=", "read32", "(", "f", ")", "\n", "if", "magic", "!=", "2051", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid magic number %d in MNIST file %s'", "%", "(", "magic", ",", "\n", "f", ".", "name", ")", ")", "\n", "", "if", "rows", "!=", "28", "or", "cols", "!=", "28", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'Invalid MNIST file %s: Expected 28x28 images, found %dx%d'", "%", "\n", "(", "f", ".", "name", ",", "rows", ",", "cols", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.check_labels_file_header": [[67, 75], ["tensorflow.gfile.Open", "mnist_dataset.read32", "mnist_dataset.read32", "ValueError"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.read32", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.read32"], ["", "", "", "def", "check_labels_file_header", "(", "filename", ")", ":", "\n", "  ", "\"\"\"Validate that filename corresponds to labels for the MNIST dataset.\"\"\"", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "magic", "=", "read32", "(", "f", ")", "\n", "read32", "(", "f", ")", "# num_items, unused", "\n", "if", "magic", "!=", "2049", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid magic number %d in MNIST file %s'", "%", "(", "magic", ",", "\n", "f", ".", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.download": [[77, 93], ["os.path.join", "tensorflow.gfile.Exists", "tempfile.mkstemp", "print", "six.moves.urllib.request.urlretrieve", "os.remove", "tensorflow.gfile.Exists", "tensorflow.gfile.MakeDirs", "gzip.open", "tensorflow.gfile.Open", "shutil.copyfileobj"], "function", ["None"], ["", "", "", "def", "download", "(", "directory", ",", "filename", ")", ":", "\n", "  ", "\"\"\"Download (and unzip) a file from the MNIST dataset if not already done.\"\"\"", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "filename", ")", "\n", "if", "tf", ".", "gfile", ".", "Exists", "(", "filepath", ")", ":", "\n", "    ", "return", "filepath", "\n", "", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "directory", ")", ":", "\n", "    ", "tf", ".", "gfile", ".", "MakeDirs", "(", "directory", ")", "\n", "", "url", "=", "'http://yann.lecun.com/exdb/mnist/'", "+", "filename", "+", "'.gz'", "\n", "_", ",", "zipped_filepath", "=", "tempfile", ".", "mkstemp", "(", "suffix", "=", "'.gz'", ")", "\n", "print", "(", "'Downloading %s to %s'", "%", "(", "url", ",", "zipped_filepath", ")", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "zipped_filepath", ")", "\n", "with", "gzip", ".", "open", "(", "zipped_filepath", ",", "'rb'", ")", "as", "f_in", ",", "tf", ".", "gfile", ".", "Open", "(", "filepath", ",", "'wb'", ")", "as", "f_out", ":", "\n", "    ", "shutil", ".", "copyfileobj", "(", "f_in", ",", "f_out", ")", "\n", "", "os", ".", "remove", "(", "zipped_filepath", ")", "\n", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.dataset": [[95, 121], ["mnist_dataset.download", "mnist_dataset.download", "mnist_dataset.check_image_file_header", "mnist_dataset.check_labels_file_header", "tensorflow.data.FixedLengthRecordDataset().map", "tensorflow.data.FixedLengthRecordDataset().map", "tensorflow.data.Dataset.zip", "tensorflow.decode_raw", "tensorflow.cast", "tensorflow.reshape", "tensorflow.decode_raw", "tensorflow.reshape", "tensorflow.to_int32", "tensorflow.data.FixedLengthRecordDataset", "tensorflow.data.FixedLengthRecordDataset"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.download", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.download", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.check_image_file_header", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.check_labels_file_header", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reshape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_int32"], ["", "def", "dataset", "(", "directory", ",", "images_file", ",", "labels_file", ")", ":", "\n", "  ", "\"\"\"Download and parse MNIST dataset.\"\"\"", "\n", "\n", "images_file", "=", "download", "(", "directory", ",", "images_file", ")", "\n", "labels_file", "=", "download", "(", "directory", ",", "labels_file", ")", "\n", "\n", "check_image_file_header", "(", "images_file", ")", "\n", "check_labels_file_header", "(", "labels_file", ")", "\n", "\n", "def", "decode_image", "(", "image", ")", ":", "\n", "# Normalize from [0, 255] to [0.0, 1.0]", "\n", "    ", "image", "=", "tf", ".", "decode_raw", "(", "image", ",", "tf", ".", "uint8", ")", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "784", "]", ")", "\n", "return", "image", "/", "255.0", "\n", "\n", "", "def", "decode_label", "(", "label", ")", ":", "\n", "    ", "label", "=", "tf", ".", "decode_raw", "(", "label", ",", "tf", ".", "uint8", ")", "# tf.string -> [tf.uint8]", "\n", "label", "=", "tf", ".", "reshape", "(", "label", ",", "[", "]", ")", "# label is a scalar", "\n", "return", "tf", ".", "to_int32", "(", "label", ")", "\n", "\n", "", "images", "=", "tf", ".", "data", ".", "FixedLengthRecordDataset", "(", "\n", "images_file", ",", "28", "*", "28", ",", "header_bytes", "=", "16", ")", ".", "map", "(", "decode_image", ")", "\n", "labels", "=", "tf", ".", "data", ".", "FixedLengthRecordDataset", "(", "\n", "labels_file", ",", "1", ",", "header_bytes", "=", "8", ")", ".", "map", "(", "decode_label", ")", "\n", "return", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "(", "images", ",", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.train": [[123, 127], ["mnist_dataset.dataset"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.dataset"], ["", "def", "train", "(", "directory", ")", ":", "\n", "  ", "\"\"\"tf.data.Dataset object for MNIST training data.\"\"\"", "\n", "return", "dataset", "(", "directory", ",", "'train-images-idx3-ubyte'", ",", "\n", "'train-labels-idx1-ubyte'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.test": [[129, 132], ["mnist_dataset.dataset"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.dataset"], ["", "def", "test", "(", "directory", ")", ":", "\n", "  ", "\"\"\"tf.data.Dataset object for MNIST test data.\"\"\"", "\n", "return", "dataset", "(", "directory", ",", "'t10k-images-idx3-ubyte'", ",", "'t10k-labels-idx1-ubyte'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__init__": [[82, 88], ["numpy.random.uniform().astype", "tensorflow.python.platform.tf_logging.info", "numpy.random.uniform"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "_num_examples", "=", "10000", "# 10k", "\n", "self", ".", "_images", "=", "numpy", ".", "random", ".", "uniform", "(", "\n", "0", ",", "1.0", ",", "[", "self", ".", "_num_examples", ",", "FLAGS", ".", "io_size", "]", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "self", ".", "_labels", "=", "self", ".", "_images", "\n", "logging", ".", "info", "(", "'init ToyModelInput()'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.ToyModelInput.__call__": [[89, 102], ["tensorflow.python.platform.tf_logging.info", "tensorflow.python.data.ops.dataset_ops.Dataset.from_tensor_slices().repeat", "tensorflow.python.data.ops.dataset_ops.Dataset.from_tensor_slices().repeat.batch().prefetch", "tensorflow.python.data.ops.dataset_ops.Dataset.from_tensor_slices", "tensorflow.python.data.ops.dataset_ops.Dataset.from_tensor_slices().repeat.batch"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "params", ")", ":", "\n", "    ", "\"\"\"Input function which provides a single batch for train or eval.\"\"\"", "\n", "# Retrieves the batch size for the current shard. The # of shards is", "\n", "# computed according to the input pipeline deployment. See", "\n", "# `tf.estimator.tpu.RunConfig` for details.", "\n", "batch_size", "=", "params", "[", "'batch_size'", "]", "\n", "logging", ".", "info", "(", "'call ToyModelInput() with batch size {}'", ".", "format", "(", "batch_size", ")", ")", "\n", "\n", "ds", "=", "Dataset", ".", "from_tensor_slices", "(", "(", "self", ".", "_images", ",", "self", ".", "_labels", ")", ")", ".", "repeat", "(", ")", "\n", "\n", "dataset", "=", "ds", ".", "batch", "(", "batch_size", ",", "drop_remainder", "=", "True", ")", ".", "prefetch", "(", "2", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.toy_model": [[104, 144], ["mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.as_dtype", "tensorflow.as_dtype", "tensorflow.as_dtype", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.cast", "range", "tensorflow.train.get_global_step", "mesh_tensorflow.reduce_mean", "mesh_tensorflow.Shape", "mesh_tensorflow.layers.dense", "mesh_tensorflow.import_tf_tensor", "mesh_tensorflow.square", "tensorflow.divide", "mesh_tensorflow.Shape", "mesh_tensorflow.Dimension", "mesh_tensorflow.Dimension", "tensorflow.cond", "tensorflow.equal"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.cast", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.reduce_mean", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.layers.dense", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.import_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.square", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.divide", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.equal"], ["", "", "def", "toy_model", "(", "features", ",", "mesh", ")", ":", "\n", "  ", "\"\"\"A toy model implemented by mesh tensorlfow.\"\"\"", "\n", "batch_dim", "=", "mtf", ".", "Dimension", "(", "'batch'", ",", "FLAGS", ".", "batch_size", ")", "\n", "io_dim", "=", "mtf", ".", "Dimension", "(", "'io'", ",", "FLAGS", ".", "io_size", ")", "\n", "\n", "master_dtype", "=", "tf", ".", "as_dtype", "(", "FLAGS", ".", "master_dtype", ")", "\n", "slice_dtype", "=", "tf", ".", "as_dtype", "(", "FLAGS", ".", "slice_dtype", ")", "\n", "activation_dtype", "=", "tf", ".", "as_dtype", "(", "FLAGS", ".", "activation_dtype", ")", "\n", "\n", "x", "=", "mtf", ".", "import_tf_tensor", "(", "mesh", ",", "features", ",", "mtf", ".", "Shape", "(", "[", "batch_dim", ",", "io_dim", "]", ")", ")", "\n", "x", "=", "mtf", ".", "cast", "(", "x", ",", "activation_dtype", ")", "\n", "h", "=", "x", "\n", "for", "lnum", "in", "range", "(", "1", ",", "FLAGS", ".", "num_hidden_layers", "+", "2", ")", ":", "\n", "    ", "if", "lnum", "+", "1", "==", "FLAGS", ".", "num_hidden_layers", "+", "2", ":", "\n", "# output layer", "\n", "      ", "dim", "=", "io_dim", "\n", "", "elif", "lnum", "%", "2", "==", "0", ":", "\n", "      ", "dim", "=", "mtf", ".", "Dimension", "(", "'hidden_even'", ",", "FLAGS", ".", "hidden_size", ")", "\n", "", "else", ":", "\n", "      ", "dim", "=", "mtf", ".", "Dimension", "(", "'hidden_odd'", ",", "FLAGS", ".", "hidden_size", ")", "\n", "", "h", "=", "mtf", ".", "layers", ".", "dense", "(", "\n", "h", ",", "dim", ",", "\n", "use_bias", "=", "False", ",", "\n", "master_dtype", "=", "master_dtype", ",", "\n", "slice_dtype", "=", "slice_dtype", ",", "\n", "name", "=", "'layer_%d'", "%", "lnum", ")", "\n", "", "y", "=", "h", "\n", "g", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", "\n", "if", "FLAGS", ".", "step_with_nan", ">=", "0", ":", "\n", "# Trigger NaN in the forward pass, this is used for testing whether", "\n", "# MeshTensorFlow can handle occasional NaN value.", "\n", "    ", "y", "+=", "mtf", ".", "import_tf_tensor", "(", "\n", "mesh", ",", "\n", "tf", ".", "divide", "(", "\n", "0.0", ",", "\n", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "g", ",", "FLAGS", ".", "step_with_nan", ")", ",", "lambda", ":", "0.", ",", "lambda", ":", "1.", ")", ")", ",", "\n", "mtf", ".", "Shape", "(", "[", "]", ")", ")", "\n", "\n", "", "loss", "=", "mtf", ".", "reduce_mean", "(", "mtf", ".", "square", "(", "y", "-", "x", ")", ")", "\n", "return", "y", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.model_fn": [[146, 242], ["tensorflow.train.get_global_step", "mesh_tensorflow.Graph", "mesh_tensorflow.convert_to_shape", "mesh_tensorflow.convert_to_layout_rules", "mesh_tensorflow.Mesh", "mesh_tensorflow.Lowering", "tensorflow.to_float", "tensorflow.logging.info", "mesh_tensorflow.utils.BalancedVariablePlacer", "mesh_tensorflow.simd_mesh_impl.SimdMeshImpl", "mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl", "mesh_tensorflow.utils.outside_all_rewrites", "toy_model_tpu.toy_model", "mesh_tensorflow.gradients", "mtf.optimize.SgdOptimizer.apply_grads", "mesh_tensorflow.anonymize", "mtf.Lowering.export_to_tf_tensor", "tf_update_ops.append", "tensorflow.logging.info", "tensorflow.group", "mtf.Lowering.export_to_tf_tensor", "mesh_tensorflow.utils.outside_all_rewrites", "mesh_tensorflow.MtfRestoreHook", "host_placement_fn", "mesh_tensorflow.optimize.AdafactorOptimizer", "mesh_tensorflow.optimize.SgdOptimizer", "mtf.Lowering.lowered_operation", "tensorflow.assign_add", "tensorflow.train.Saver", "tensorflow.add_to_collection", "mesh_tensorflow.MtfCheckpointSaverListener", "tensorflow.train.CheckpointSaverHook", "tensorflow.python.tpu.tpu_estimator.TPUEstimatorSpec", "range", "tensorflow.global_variables", "tensorflow.python.tpu.tpu_estimator.TPUEstimatorSpec", "tensorflow.metrics.mean"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_layout_rules", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.to_float", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.outside_all_rewrites", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.toy_model", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.gradients", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.optimize.Optimizer.apply_grads", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.anonymize", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.placement_mesh_impl.PlacementMeshImpl.export_to_tf_tensor", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.utils.outside_all_rewrites", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.Lowering.lowered_operation", "home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.tpu_variables.ReplicatedVariable.assign_add"], ["", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "\n", "  ", "\"\"\"A model is called by TpuEstimator.\"\"\"", "\n", "del", "labels", "\n", "global_step", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", "\n", "graph", "=", "mtf", ".", "Graph", "(", ")", "\n", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "FLAGS", ".", "mesh_shape", ")", "\n", "layout_rules", "=", "mtf", ".", "convert_to_layout_rules", "(", "FLAGS", ".", "layout", ")", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "    ", "ctx", "=", "params", "[", "'context'", "]", "\n", "num_hosts", "=", "ctx", ".", "num_hosts", "\n", "host_placement_fn", "=", "ctx", ".", "tpu_host_placement_function", "\n", "device_list", "=", "[", "host_placement_fn", "(", "host_id", "=", "t", ")", "for", "t", "in", "range", "(", "num_hosts", ")", "]", "\n", "tf", ".", "logging", ".", "info", "(", "'device_list = %s'", "%", "device_list", ",", ")", "\n", "# TODO(ylc): Better estimation of replica cache size?", "\n", "replica_cache_size", "=", "300", "*", "1000000", "# 300M per replica", "\n", "# Worker 0 caches all the TPU binaries.", "\n", "worker0_mem", "=", "replica_cache_size", "*", "ctx", ".", "num_replicas", "\n", "devices_memeory_usage", "=", "[", "worker0_mem", "]", "+", "[", "0", "]", "*", "(", "num_hosts", "-", "1", ")", "\n", "var_placer", "=", "mtf", ".", "utils", ".", "BalancedVariablePlacer", "(", "device_list", ",", "\n", "devices_memeory_usage", ")", "\n", "mesh_devices", "=", "[", "''", "]", "*", "mesh_shape", ".", "size", "\n", "mesh_impl", "=", "mtf", ".", "simd_mesh_impl", ".", "SimdMeshImpl", "(", "\n", "mesh_shape", ",", "layout_rules", ",", "mesh_devices", ",", "ctx", ".", "device_assignment", ")", "\n", "", "else", ":", "\n", "    ", "var_placer", "=", "None", "\n", "mesh_devices", "=", "[", "''", "]", "*", "mesh_shape", ".", "size", "\n", "mesh_impl", "=", "mtf", ".", "placement_mesh_impl", ".", "PlacementMeshImpl", "(", "\n", "mesh_shape", ",", "layout_rules", ",", "mesh_devices", ")", "\n", "", "mesh", "=", "mtf", ".", "Mesh", "(", "graph", ",", "'my_mesh'", ",", "var_placer", ")", "\n", "\n", "with", "mtf", ".", "utils", ".", "outside_all_rewrites", "(", ")", ":", "\n", "    ", "logits", ",", "loss", "=", "toy_model", "(", "features", ",", "mesh", ")", "\n", "\n", "# TRAIN mode", "\n", "", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "    ", "var_grads", "=", "mtf", ".", "gradients", "(", "[", "loss", "]", ",", "\n", "[", "v", ".", "outputs", "[", "0", "]", "for", "v", "in", "graph", ".", "trainable_variables", "]", ")", "\n", "if", "FLAGS", ".", "optimizer", "==", "'Adafactor'", ":", "\n", "      ", "optimizer", "=", "mtf", ".", "optimize", ".", "AdafactorOptimizer", "(", ")", "\n", "", "else", ":", "\n", "      ", "assert", "FLAGS", ".", "optimizer", "==", "'SGD'", "\n", "optimizer", "=", "mtf", ".", "optimize", ".", "SgdOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "lr", ")", "\n", "", "update_ops", "=", "optimizer", ".", "apply_grads", "(", "var_grads", ",", "graph", ".", "trainable_variables", ")", "\n", "", "else", ":", "\n", "# for now, we can only export fully-replicated tensors.", "\n", "    ", "fully_replicated_logits", "=", "mtf", ".", "anonymize", "(", "logits", ")", "\n", "\n", "", "lowering", "=", "mtf", ".", "Lowering", "(", "graph", ",", "{", "mesh", ":", "mesh_impl", "}", ")", "\n", "\n", "tf_loss", "=", "tf", ".", "to_float", "(", "lowering", ".", "export_to_tf_tensor", "(", "loss", ")", ")", "\n", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "    ", "tf_update_ops", "=", "[", "lowering", ".", "lowered_operation", "(", "op", ")", "for", "op", "in", "update_ops", "]", "\n", "tf_update_ops", ".", "append", "(", "tf", ".", "assign_add", "(", "global_step", ",", "1", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'tf_update_ops: {}'", ".", "format", "(", "tf_update_ops", ")", ")", "\n", "train_op", "=", "tf", ".", "group", "(", "tf_update_ops", ")", "\n", "", "else", ":", "\n", "    ", "tf_logits", "=", "lowering", ".", "export_to_tf_tensor", "(", "fully_replicated_logits", ")", "\n", "\n", "", "with", "mtf", ".", "utils", ".", "outside_all_rewrites", "(", ")", ":", "\n", "# Copy master variables to slices. Must be called first.", "\n", "    ", "restore_hook", "=", "mtf", ".", "MtfRestoreHook", "(", "lowering", ")", "\n", "if", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "tf", ".", "global_variables", "(", ")", ",", "\n", "sharded", "=", "True", ",", "\n", "max_to_keep", "=", "10", ",", "\n", "keep_checkpoint_every_n_hours", "=", "2", ",", "\n", "defer_build", "=", "False", ",", "\n", "save_relative_paths", "=", "True", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "SAVERS", ",", "saver", ")", "\n", "saver_listener", "=", "mtf", ".", "MtfCheckpointSaverListener", "(", "lowering", ")", "\n", "saver_hook", "=", "tf", ".", "train", ".", "CheckpointSaverHook", "(", "\n", "FLAGS", ".", "model_dir", ",", "\n", "save_steps", "=", "1000", ",", "\n", "saver", "=", "saver", ",", "\n", "listeners", "=", "[", "saver_listener", "]", ")", "\n", "\n", "return", "tpu_estimator", ".", "TPUEstimatorSpec", "(", "\n", "tf_estimator", ".", "ModeKeys", ".", "TRAIN", ",", "\n", "loss", "=", "tf_loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "training_hooks", "=", "[", "restore_hook", ",", "saver_hook", "]", ")", "\n", "", "elif", "mode", "==", "tf_estimator", ".", "ModeKeys", ".", "EVAL", ":", "\n", "\n", "      ", "def", "metric_fn", "(", "tf_logits", ")", ":", "\n", "        ", "mean_logits", "=", "tf", ".", "metrics", ".", "mean", "(", "tf_logits", ")", "\n", "return", "{", "'mean_logits'", ":", "mean_logits", "}", "\n", "\n", "", "eval_metrics", "=", "(", "metric_fn", ",", "[", "tf_logits", "]", ")", "\n", "\n", "return", "tpu_estimator", ".", "TPUEstimatorSpec", "(", "\n", "tf_estimator", ".", "ModeKeys", ".", "EVAL", ",", "\n", "evaluation_hooks", "=", "[", "restore_hook", "]", ",", "\n", "loss", "=", "tf_loss", ",", "\n", "eval_metrics", "=", "eval_metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.run_toy_model_tpu": [[244, 284], ["tensorflow.distribute.cluster_resolver.TPUClusterResolver", "mesh_tensorflow.convert_to_shape", "tensorflow.python.tpu.tpu_config.RunConfig", "tensorflow.python.tpu.tpu_estimator.TPUEstimator", "tensorflow_estimator.python.estimator.estimator._load_global_step_from_checkpoint_dir", "tensorflow.python.platform.tf_logging.info", "tpu_estimator.TPUEstimator.train", "min", "tpu_estimator.TPUEstimator.train", "tensorflow.python.platform.tf_logging.info", "tpu_estimator.TPUEstimator.evaluate", "tensorflow.python.platform.tf_logging.info", "tensorflow.python.tpu.tpu_config.TPUConfig", "toy_model_tpu.ToyModelInput", "toy_model_tpu.ToyModelInput", "toy_model_tpu.ToyModelInput"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.mesh_tensorflow.ops.convert_to_shape", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.train", "home.repos.pwc.inspect_result.tensorflow_mesh.examples.mnist_dataset.train"], ["", "", "", "def", "run_toy_model_tpu", "(", ")", ":", "\n", "  ", "\"\"\"Run a toy model on TPU.\"\"\"", "\n", "tpu_cluster_resolver", "=", "tf", ".", "distribute", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "\n", "FLAGS", ".", "tpu", ",", "zone", "=", "FLAGS", ".", "tpu_zone", ",", "project", "=", "FLAGS", ".", "gcp_project", ")", "\n", "\n", "iterations_per_loop", "=", "FLAGS", ".", "iterations", "\n", "mesh_shape", "=", "mtf", ".", "convert_to_shape", "(", "FLAGS", ".", "mesh_shape", ")", "\n", "config", "=", "tpu_config", ".", "RunConfig", "(", "\n", "cluster", "=", "tpu_cluster_resolver", ",", "\n", "model_dir", "=", "FLAGS", ".", "model_dir", ",", "\n", "save_checkpoints_steps", "=", "None", ",", "# Disable the default saver", "\n", "save_checkpoints_secs", "=", "None", ",", "# Disable the default saver", "\n", "log_step_count_steps", "=", "iterations_per_loop", ",", "\n", "save_summary_steps", "=", "iterations_per_loop", ",", "\n", "tpu_config", "=", "tpu_config", ".", "TPUConfig", "(", "\n", "num_shards", "=", "mesh_shape", ".", "size", ",", "\n", "iterations_per_loop", "=", "iterations_per_loop", ",", "\n", "num_cores_per_replica", "=", "1", ",", "\n", "per_host_input_for_training", "=", "tpu_config", ".", "InputPipelineConfig", ".", "BROADCAST", ")", ")", "\n", "classifier", "=", "tpu_estimator", ".", "TPUEstimator", "(", "\n", "use_tpu", "=", "True", ",", "\n", "model_fn", "=", "model_fn", ",", "\n", "config", "=", "config", ",", "\n", "train_batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "eval_batch_size", "=", "FLAGS", ".", "batch_size", ")", "\n", "current_step", "=", "estimator_lib", ".", "_load_global_step_from_checkpoint_dir", "(", "FLAGS", ".", "model_dir", ")", "# pylint: disable=protected-access,line-too-long", "\n", "logging", ".", "info", "(", "'Current step %d'", ",", "current_step", ")", "\n", "if", "FLAGS", ".", "steps_per_checkpoint", "==", "0", ":", "\n", "    ", "classifier", ".", "train", "(", "input_fn", "=", "ToyModelInput", "(", ")", ",", "max_steps", "=", "FLAGS", ".", "train_steps", ")", "\n", "return", "\n", "", "while", "current_step", "<", "FLAGS", ".", "train_steps", ":", "\n", "    ", "next_checkpoint", "=", "min", "(", "current_step", "+", "FLAGS", ".", "steps_per_checkpoint", ",", "\n", "FLAGS", ".", "train_steps", ")", "\n", "classifier", ".", "train", "(", "input_fn", "=", "ToyModelInput", "(", ")", ",", "max_steps", "=", "next_checkpoint", ")", "\n", "current_step", "=", "next_checkpoint", "\n", "logging", ".", "info", "(", "'Starting to evaluate.'", ")", "\n", "eval_results", "=", "classifier", ".", "evaluate", "(", "\n", "input_fn", "=", "ToyModelInput", "(", ")", ",", "\n", "steps", "=", "156", ")", "# since we have 10000 examples and batch_size = 64 per host", "\n", "logging", ".", "info", "(", "'Eval results: %s'", ",", "eval_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.main": [[286, 288], ["toy_model_tpu.run_toy_model_tpu"], "function", ["home.repos.pwc.inspect_result.tensorflow_mesh.examples.toy_model_tpu.run_toy_model_tpu"], ["", "", "def", "main", "(", "_", ")", ":", "\n", "  ", "run_toy_model_tpu", "(", ")", "\n", "\n"]]}