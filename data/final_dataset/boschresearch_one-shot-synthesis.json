{"home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.None.config.read_arguments": [[6, 21], ["config.get_arguments", "get_arguments.parse_args", "get_arguments.parse_args", "config.update_options_from_file", "config.save_options", "config.load_iter"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.None.config.get_arguments", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.None.config.update_options_from_file", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.None.config.save_options", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.None.config.load_iter"], ["def", "read_arguments", "(", "train", "=", "True", ")", ":", "\n", "    ", "parser", "=", "get_arguments", "(", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "opt", ".", "continue_train", "or", "not", "train", ":", "\n", "        ", "update_options_from_file", "(", "opt", ",", "parser", ")", "\n", "", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "device", "=", "\"cpu\"", "if", "opt", ".", "cpu", "else", "\"cuda:0\"", "\n", "opt", ".", "phase", "=", "'train'", "if", "train", "else", "'test'", "\n", "if", "train", ":", "\n", "        ", "opt", ".", "continue_epoch", "=", "0", "if", "not", "opt", ".", "continue_train", "else", "load_iter", "(", "opt", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "continue_epoch", "=", "opt", ".", "which_epoch", "\n", "", "if", "train", ":", "\n", "        ", "save_options", "(", "opt", ",", "parser", ")", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.None.config.get_arguments": [[23, 73], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# basics:", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "help", "=", "'experiment name for trained folder'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--cpu'", ",", "action", "=", "'store_true'", ",", "help", "=", "'run on cpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "help", "=", "'location of datasets'", ",", "default", "=", "'datasets/'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "help", "=", "'location of experiments'", ",", "default", "=", "'checkpoints/'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_name'", ",", "help", "=", "'dataset name'", ",", "default", "=", "'example'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "100000", ",", "help", "=", "'number of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_size'", ",", "type", "=", "int", ",", "help", "=", "'limit image size in max dimension'", ",", "default", "=", "1024", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "'continue training of a previous checkpoint?'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "int", ",", "help", "=", "'which epoch to use for evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_generated'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'which epoch to use for evaluation'", ")", "\n", "\n", "# regime", "\n", "parser", ".", "add_argument", "(", "'--no_masks'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use the regime without segmentation masks'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_kornia_augm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use an older version of differentiable augm'", ")", "\n", "\n", "# training:", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "help", "=", "'batch_size'", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--noise_dim'", ",", "type", "=", "int", ",", "help", "=", "'dimension of noise vector'", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_g'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'generator learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_d'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'discriminator learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'beta1 for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'beta2 for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_mode'", ",", "help", "=", "'which GAN loss (wgan|hinge|bce)'", ",", "default", "=", "\"bce\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "help", "=", "'which randomm seed to use'", ",", "default", "=", "22", ")", "\n", "parser", ".", "add_argument", "(", "'--no_DR'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "'deactivate Diversity Regularization?'", ")", "\n", "parser", ".", "add_argument", "(", "'--prob_augm'", ",", "type", "=", "float", ",", "help", "=", "'probability of data augmentation'", ",", "default", "=", "0.3", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_DR'", ",", "type", "=", "float", ",", "help", "=", "'lambda for DR'", ",", "default", "=", "0.15", ")", "\n", "parser", ".", "add_argument", "(", "'--prob_FA_con'", ",", "type", "=", "float", ",", "help", "=", "'probability of content FA'", ",", "default", "=", "0.4", ")", "\n", "parser", ".", "add_argument", "(", "'--prob_FA_lay'", ",", "type", "=", "float", ",", "help", "=", "'probability of layout FA'", ",", "default", "=", "0.4", ")", "\n", "parser", ".", "add_argument", "(", "'--no_EMA'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "'deactivate exponential moving average of G weights?'", ")", "\n", "parser", ".", "add_argument", "(", "'--EMA_decay'", ",", "type", "=", "float", ",", "help", "=", "'decay for exponential moving averages'", ",", "default", "=", "0.9999", ")", "\n", "parser", ".", "add_argument", "(", "'--bernoulli_warmup'", ",", "type", "=", "int", ",", "help", "=", "'epochs for soft_mask bernoulli warmup'", ",", "default", "=", "15000", ")", "\n", "\n", "# architecture", "\n", "parser", ".", "add_argument", "(", "'--norm_G'", ",", "help", "=", "'which norm to use in generator     (None|batch|instance)'", ",", "default", "=", "\"none\"", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_D'", ",", "help", "=", "'which norm to use in discriminator (None|batch|instance)'", ",", "default", "=", "\"none\"", ")", "\n", "parser", ".", "add_argument", "(", "'--ch_G'", ",", "type", "=", "float", ",", "help", "=", "'channel multiplier for G blocks'", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--ch_D'", ",", "type", "=", "float", ",", "help", "=", "'channel multiplier for D blocks'", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--num_blocks_d'", ",", "type", "=", "int", ",", "help", "=", "'Discriminator blocks number. 0 -> use recommended default'", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--num_blocks_d0'", ",", "type", "=", "int", ",", "help", "=", "'Num of D_low-level blocks. 0 -> use recommended default'", ",", "default", "=", "0", ")", "\n", "\n", "# stats tracking", "\n", "parser", ".", "add_argument", "(", "'--freq_save_loss'", ",", "type", "=", "int", ",", "help", "=", "'frequency of loss plot updates'", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--freq_print'", ",", "type", "=", "int", ",", "help", "=", "'frequency of saving images and timer'", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--freq_save_ckpt'", ",", "type", "=", "int", ",", "help", "=", "'frequency of saving checkpoints'", ",", "default", "=", "10000", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.None.config.update_options_from_file": [[75, 83], ["os.path.join", "pickle.load", "sorted", "open", "vars().items", "hasattr", "getattr", "parser.set_defaults", "vars", "getattr"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load"], ["", "def", "update_options_from_file", "(", "opt", ",", "parser", ")", ":", "\n", "    ", "file_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "exp_name", ",", "\"opt.pkl\"", ")", "\n", "new_opt", "=", "pickle", ".", "load", "(", "open", "(", "file_name", ",", "'rb'", ")", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "hasattr", "(", "new_opt", ",", "k", ")", "and", "v", "!=", "getattr", "(", "new_opt", ",", "k", ")", ":", "\n", "            ", "new_val", "=", "getattr", "(", "new_opt", ",", "k", ")", "\n", "parser", ".", "set_defaults", "(", "**", "{", "k", ":", "new_val", "}", ")", "\n", "", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.None.config.load_iter": [[85, 89], ["open", "int", "os.path.join", "f.read"], "function", ["None"], ["", "def", "load_iter", "(", "opt", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "exp_name", ",", "\"models/latest_epoch.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "res", "=", "int", "(", "f", ".", "read", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.None.config.save_options": [[91, 104], ["os.path.join", "os.makedirs", "open", "sorted", "open", "pickle.dump", "vars().items", "parser.get_default", "opt_file.write", "vars", "str", "str", "str"], "function", ["None"], ["", "", "def", "save_options", "(", "opt", ",", "parser", ")", ":", "\n", "    ", "path_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "exp_name", ")", "\n", "os", ".", "makedirs", "(", "path_name", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "path_name", "+", "'/opt.txt'", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "        ", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "opt_file", ".", "write", "(", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", ")", "\n", "\n", "", "", "with", "open", "(", "path_name", "+", "'/opt.pkl'", ",", "'wb'", ")", "as", "opt_file", ":", "\n", "        ", "pickle", ".", "dump", "(", "opt", ",", "opt_file", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.None.evaluate.convert_sifid_dict": [[30, 35], ["dict", "enumerate"], "function", ["None"], ["def", "convert_sifid_dict", "(", "names_fake_image", ",", "sifid", ")", ":", "\n", "    ", "ans", "=", "dict", "(", ")", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "names_fake_image", ")", ":", "\n", "        ", "ans", "[", "item", "]", "=", "sifid", "[", "i", "]", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.metrics.__init__.SIFID": [[10, 32], ["len", "SIFID.sifid_score.calculate_sifid_given_paths", "SIFID.sifid_score.calculate_sifid_given_paths", "SIFID.sifid_score.calculate_sifid_given_paths", "SIFID.sifid_score.calculate_sifid_given_paths", "FID.tests_with_FID.calculate_fid_given_paths", "FID.tests_with_FID.calculate_fid_given_paths", "FID.tests_with_FID.calculate_fid_given_paths", "FID.tests_with_FID.calculate_fid_given_paths"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.SIFID.sifid_score.calculate_sifid_given_paths", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.SIFID.sifid_score.calculate_sifid_given_paths", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.SIFID.sifid_score.calculate_sifid_given_paths", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.SIFID.sifid_score.calculate_sifid_given_paths", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_fid_given_paths", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_fid_given_paths", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_fid_given_paths", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_fid_given_paths"], ["def", "SIFID", "(", "list_real_image", ",", "list_fake_image", ",", "sifid_all_layers", ")", ":", "\n", "    ", "\"\"\"\n    When learning from a Single Image, compute SIFID from fake images to the real image.\n    In case of multiple training images, compute FID between full fake and real sets.\n    By default, compute only sifid at lowest InceptionV3 layer (sifid1)\n    \"\"\"", "\n", "if", "len", "(", "list_real_image", ")", ":", "\n", "        ", "sifid1", "=", "calculate_sifid_given_paths", "(", "list_real_image", ",", "list_fake_image", ",", "1", ",", "True", ",", "64", ")", "\n", "if", "not", "sifid_all_layers", ":", "\n", "            ", "return", "sifid1", ",", "None", ",", "None", ",", "None", "\n", "", "sifid2", "=", "calculate_sifid_given_paths", "(", "list_real_image", ",", "list_fake_image", ",", "1", ",", "True", ",", "192", ")", "\n", "sifid3", "=", "calculate_sifid_given_paths", "(", "list_real_image", ",", "list_fake_image", ",", "1", ",", "True", ",", "768", ")", "\n", "sifid4", "=", "calculate_sifid_given_paths", "(", "list_real_image", ",", "list_fake_image", ",", "1", ",", "True", ",", "2048", ")", "\n", "return", "sifid1", ",", "sifid2", ",", "sifid3", ",", "sifid4", "\n", "", "else", ":", "\n", "        ", "sifid1", "=", "calculate_fid_given_paths", "(", "[", "list_real_image", ",", "list_fake_image", "]", ",", "10", ",", "True", ",", "64", ")", "\n", "if", "not", "sifid_all_layers", ":", "\n", "            ", "return", "sifid1", ",", "None", ",", "None", ",", "None", "\n", "", "sifid2", "=", "calculate_fid_given_paths", "(", "[", "list_real_image", ",", "list_fake_image", "]", ",", "10", ",", "True", ",", "192", ")", "\n", "sifid3", "=", "calculate_fid_given_paths", "(", "[", "list_real_image", ",", "list_fake_image", "]", ",", "10", ",", "True", ",", "768", ")", "\n", "sifid4", "=", "calculate_fid_given_paths", "(", "[", "list_real_image", ",", "list_fake_image", "]", ",", "10", ",", "True", ",", "2048", ")", "\n", "return", "sifid1", ",", "sifid2", ",", "sifid3", ",", "sifid4", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.metrics.__init__.LPIPS": [[34, 50], ["list", "range", "len", "list.append", "range", "len", "range", "p_model.forward", "len", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward"], ["", "", "def", "LPIPS", "(", "list_fake_image", ")", ":", "\n", "    ", "\"\"\"\n    Compute average LPIPS between pairs of fake images\n    \"\"\"", "\n", "dist_diversity", "=", "0", "\n", "count", "=", "0", "\n", "lst_im", "=", "list", "(", ")", "\n", "# --- unpack images --- #", "\n", "for", "i", "in", "range", "(", "len", "(", "list_fake_image", ")", ")", ":", "\n", "        ", "lst_im", ".", "append", "(", "ToTensor", "(", ")", "(", "list_fake_image", "[", "i", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# --- compute LPIPS between pairs of images --- #", "\n", "", "for", "i", "in", "range", "(", "len", "(", "lst_im", ")", ")", "[", ":", "100", "]", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "lst_im", ")", ")", "[", ":", "100", "]", ":", "\n", "            ", "dist_diversity", "+=", "p_model", ".", "forward", "(", "lst_im", "[", "i", "]", ",", "lst_im", "[", "j", "]", ")", "\n", "count", "+=", "1", "\n", "", "", "return", "dist_diversity", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.metrics.__init__.LPIPS_to_train": [[52, 79], ["dict", "range", "range", "range", "list", "list", "len", "list_fake.append", "len", "lst_real.append", "len", "list", "range", "torch.min", "float", "len", "p_model.forward", "list.append", "torch.Tensor", "torch.min.detach().cpu().item", "torch.min.detach().cpu", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torch.min.detach"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward"], ["", "def", "LPIPS_to_train", "(", "list_real_image", ",", "list_fake_image", ",", "names_fake_image", ")", ":", "\n", "    ", "\"\"\"\n    For each fake image find the LPIPS to the closest training image\n    \"\"\"", "\n", "dist_to_real_dict", "=", "dict", "(", ")", "\n", "ans1", "=", "0", "\n", "count", "=", "0", "\n", "lst_real", ",", "list_fake", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "# --- unpack images --- #", "\n", "for", "i", "in", "range", "(", "len", "(", "list_fake_image", ")", ")", ":", "\n", "        ", "list_fake", ".", "append", "(", "ToTensor", "(", ")", "(", "list_fake_image", "[", "i", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "list_real_image", ")", ")", ":", "\n", "        ", "lst_real", ".", "append", "(", "ToTensor", "(", ")", "(", "list_real_image", "[", "i", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# --- compute average minimum LPIPS from a fake image to real images --- #", "\n", "", "for", "i", "in", "range", "(", "len", "(", "list_fake", ")", ")", ":", "\n", "        ", "tens_im1", "=", "list_fake", "[", "i", "]", "\n", "cur_ans", "=", "list", "(", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "lst_real", ")", ")", ":", "\n", "            ", "tens_im2", "=", "lst_real", "[", "j", "]", "\n", "dist_to_real", "=", "p_model", ".", "forward", "(", "tens_im1", ",", "tens_im2", ")", "\n", "cur_ans", ".", "append", "(", "dist_to_real", ")", "\n", "", "cur_min", "=", "torch", ".", "min", "(", "torch", ".", "Tensor", "(", "cur_ans", ")", ")", "\n", "dist_to_real_dict", "[", "names_fake_image", "[", "i", "]", "]", "=", "float", "(", "cur_min", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "ans1", "+=", "cur_min", "\n", "count", "+=", "1", "\n", "", "ans", "=", "ans1", "/", "count", "\n", "return", "ans", ",", "dist_to_real_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.metrics.__init__.mIoU": [[80, 90], ["mIoU.main.compute_miou"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.compute_miou"], ["", "def", "mIoU", "(", "path_real_images", ",", "names_real_image", ",", "path_real_masks", ",", "names_real_masks", ",", "\n", "exp_folder", ",", "names_fake_image", ",", "names_fake_masks", ",", "im_res", ")", ":", "\n", "    ", "\"\"\"\n    Train a simple UNet on fake (real) images&masks, test on real (fake) images&masks.\n    Report mIoU and segmentation accuracy for the whole sets (fake->real and  real->fake) as well as\n    individual scores for each fake image\n    \"\"\"", "\n", "metrics_tensor", ",", "results", ",", "results_acc", "=", "compute_miou", "(", "path_real_images", ",", "names_real_image", ",", "path_real_masks", ",", "names_real_masks", ",", "\n", "exp_folder", ",", "names_fake_image", ",", "names_fake_masks", ",", "im_res", ")", "\n", "return", "metrics_tensor", ",", "results", ",", "results_acc", "\n", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.calc_loss": [[19, 31], ["torch.binary_cross_entropy_with_logits", "torch.sigmoid", "loss.dice_loss", "F.binary_cross_entropy_with_logits.data.cpu().numpy", "target.size", "loss.dice_loss.data.cpu().numpy", "target.size", "loss.data.cpu().numpy", "target.size", "F.binary_cross_entropy_with_logits.data.cpu", "loss.dice_loss.data.cpu", "loss.data.cpu"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.loss.dice_loss"], ["def", "calc_loss", "(", "pred", ",", "target", ",", "metrics", ",", "bce_weight", "=", "0.5", ")", ":", "\n", "    ", "bce", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "pred", ",", "target", ")", "\n", "\n", "pred", "=", "F", ".", "sigmoid", "(", "pred", ")", "\n", "dice", "=", "dice_loss", "(", "pred", ",", "target", ")", "\n", "\n", "loss", "=", "bce", "*", "bce_weight", "+", "dice", "*", "(", "1", "-", "bce_weight", ")", "\n", "\n", "metrics", "[", "'bce'", "]", "+=", "bce", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "metrics", "[", "'dice'", "]", "+=", "dice", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "metrics", "[", "'loss'", "]", "+=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.print_metrics": [[33, 39], ["metrics.keys", "print", "outputs.append"], "function", ["None"], ["", "def", "print_metrics", "(", "metrics", ",", "epoch_samples", ",", "phase", ")", ":", "\n", "    ", "outputs", "=", "[", "]", "\n", "for", "k", "in", "metrics", ".", "keys", "(", ")", ":", "\n", "        ", "outputs", ".", "append", "(", "\"{}: {:4f}\"", ".", "format", "(", "k", ",", "metrics", "[", "k", "]", "/", "epoch_samples", ")", ")", "\n", "\n", "", "print", "(", "\"{}: {}\"", ".", "format", "(", "phase", ",", "\", \"", ".", "join", "(", "outputs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.iou_pytorch": [[41, 55], ["torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.clamp().ceil", "torch.clamp().ceil", "torch.clamp().ceil", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "iou_pytorch", "(", "outputs", ":", "torch", ".", "Tensor", ",", "labels", ":", "torch", ".", "Tensor", ")", ":", "\n", "# You can comment out this line if you are passing tensors of equal shape", "\n", "# But if you are passing output from UNet or something it will most probably", "\n", "# be with the BATCH x 1 x H x W shape", "\n", "###outputs = outputs.squeeze(1)  # BATCH x 1 x H x W => BATCH x H x W", "\n", "    ", "SMOOTH", "=", "1e-6", "\n", "outputs", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "outputs", ")", "\n", "labels", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "labels", ")", "\n", "intersection", "=", "(", "outputs", "&", "labels", ")", ".", "float", "(", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "# Will be zero if Truth=0 or Prediction=0", "\n", "union", "=", "(", "outputs", "|", "labels", ")", ".", "float", "(", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "# Will be zzero if both are 0", "\n", "iou", "=", "(", "intersection", "+", "SMOOTH", ")", "/", "(", "union", "+", "SMOOTH", ")", "# We smooth our devision to avoid 0/0", "\n", "thresholded", "=", "torch", ".", "clamp", "(", "20", "*", "(", "iou", "-", "0.5", ")", ",", "0", ",", "10", ")", ".", "ceil", "(", ")", "/", "10", "# This is equal to comparing with thresolds", "\n", "#print(iou.shape, thresholded.shape)", "\n", "return", "thresholded", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.train_model": [[57, 79], ["model.train", "enumerate", "scheduler.step", "inputs.to.to", "labels.to.to", "optimizer.zero_grad", "collections.defaultdict", "model", "main.calc_loss", "calc_loss.backward", "optimizer.step"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.calc_loss"], ["", "def", "train_model", "(", "model", ",", "optimizer", ",", "scheduler", ",", "dataloader_train", ",", "num_epochs", "=", "500", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "for", "epoch", ",", "batch", "in", "enumerate", "(", "dataloader_train", ")", ":", "\n", "        ", "if", "epoch", ">=", "num_epochs", ":", "\n", "            ", "break", "\n", "", "inputs", ",", "labels", "=", "batch", "\n", "scheduler", ".", "step", "(", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "\"cuda\"", ")", "\n", "labels", "=", "labels", ".", "to", "(", "\"cuda\"", ")", "\n", "# zero the parameter gradients", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "metrics", "=", "defaultdict", "(", "float", ")", "\n", "# forward", "\n", "# track history if only in train", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "calc_loss", "(", "outputs", ",", "labels", ",", "metrics", ")", "\n", "\n", "# backward + optimize only if in training phase", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.compute_miou": [[83, 195], ["dataset.SimDataset", "dataset.SimDataset", "torch.device", "torch.device", "torch.device", "unet.ResNetUNet", "train_model.to", "torch.Adam", "torch.optim.lr_scheduler.StepLR", "main.train_model", "train_model.eval", "enumerate", "numpy.array", "torch.device", "torch.device", "torch.device", "unet.ResNetUNet", "train_model.to", "train_model.train", "torch.Adam", "torch.optim.lr_scheduler.StepLR", "main.train_model", "train_model.eval", "enumerate", "dataset.SimDataset", "torch.utils.data.DataLoader", "dict", "dict", "enumerate", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "filter", "inputs.to.to", "labels.to.to", "train_model.", "torch.sigmoid", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.numel", "torch.numel", "torch.numel", "iou_pytorch().mean", "filter", "inputs.to.to", "labels.to.to", "train_model.", "torch.sigmoid", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.numel", "torch.numel", "torch.numel", "iou_pytorch().mean", "inputs.to.to", "labels.to.to", "train_model.", "torch.sigmoid", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "acc.detach().cpu().numpy", "iou_pytorch().mean", "iou_pytorch().mean.detach().cpu().numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "train_model.parameters", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "train_model.parameters", "len", "torch.numel", "torch.numel", "torch.numel", "main.iou_pytorch", "main.iou_pytorch", "acc.detach().cpu", "main.iou_pytorch", "iou_pytorch().mean.detach().cpu", "acc.detach", "iou_pytorch().mean.detach"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.train_model", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.train_model", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.iou_pytorch", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.iou_pytorch", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.main.iou_pytorch"], ["", "def", "compute_miou", "(", "path_real_images", ",", "names_real_image", ",", "path_real_masks", ",", "names_real_masks", ",", "\n", "exp_folder", ",", "names_fake_image", ",", "names_fake_masks", ",", "im_res", ")", ":", "\n", "    ", "train_set", "=", "SimDataset", "(", "path_real_images", ",", "names_real_image", ",", "path_real_masks", ",", "names_real_masks", ",", "im_res", ",", "real", "=", "True", ")", "\n", "num_ch", "=", "train_set", ".", "num_mask_channels", "\n", "val_set", "=", "SimDataset", "(", "exp_folder", ",", "names_fake_image", ",", "exp_folder", ",", "names_fake_masks", ",", "im_res", ",", "real", "=", "False", ",", "num_ch", "=", "num_ch", ")", "\n", "image_datasets", "=", "{", "'train'", ":", "train_set", ",", "'val'", ":", "val_set", "}", "\n", "batch_size", "=", "5", "\n", "dataloaders", "=", "{", "\n", "'train'", ":", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", ",", "\n", "'val'", ":", "DataLoader", "(", "val_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "}", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "model", "=", "ResNetUNet", "(", "n_class", "=", "num_ch", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "optimizer_ft", "=", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "1e-4", ")", "\n", "exp_lr_scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer_ft", ",", "step_size", "=", "1000", ",", "gamma", "=", "1.0", ")", "\n", "\n", "model", "=", "train_model", "(", "model", ",", "optimizer_ft", ",", "exp_lr_scheduler", ",", "dataloaders", "[", "\"val\"", "]", ",", "500", ")", "\n", "\n", "model", ".", "eval", "(", ")", "# Set model to the evaluation mode", "\n", "all_corr", ",", "sum_corr", ",", "cur_iou", ",", "countt", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloaders", "[", "\"train\"", "]", ")", ":", "\n", "        ", "if", "i", ">", "100", ":", "\n", "            ", "break", "\n", "", "inputs", ",", "labels", "=", "batch", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "# Predict", "\n", "pred", "=", "model", "(", "inputs", ")", "\n", "# The loss functions include the sigmoid function.", "\n", "pred", "=", "F", ".", "sigmoid", "(", "pred", ")", "\n", "pred", "=", "pred", ".", "data", "\n", "pred1", "=", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "pred2", "=", "torch", ".", "argmax", "(", "labels", ",", "dim", "=", "1", ")", "\n", "correct", "=", "(", "(", "pred1", "==", "pred2", ")", "*", "1", ")", ".", "sum", "(", ")", "\n", "sum_corr", "+=", "correct", "\n", "all_corr", "+=", "torch", ".", "numel", "(", "pred1", ")", "\n", "cur_iou", "+=", "iou_pytorch", "(", "pred1", ",", "pred2", ")", ".", "mean", "(", ")", "\n", "countt", "+=", "1", "\n", "", "metrics_tensor", "=", "np", ".", "array", "(", "[", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", "]", ")", "\n", "metrics_tensor", "[", "0", "]", "=", "sum_corr", "/", "all_corr", "\n", "metrics_tensor", "[", "1", "]", "=", "cur_iou", "/", "countt", "\n", "\n", "# HERE TRAINING on real", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "model1", "=", "ResNetUNet", "(", "n_class", "=", "num_ch", ")", "\n", "model1", "=", "model1", ".", "to", "(", "device", ")", "\n", "model1", ".", "train", "(", ")", "\n", "\n", "optimizer_ft", "=", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model1", ".", "parameters", "(", ")", ")", ",", "lr", "=", "1e-4", ")", "\n", "exp_lr_scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer_ft", ",", "step_size", "=", "1000", ",", "gamma", "=", "1.0", ")", "\n", "\n", "model1", "=", "train_model", "(", "model1", ",", "optimizer_ft", ",", "exp_lr_scheduler", ",", "dataloaders", "[", "\"train\"", "]", ",", "500", ")", "\n", "model1", ".", "eval", "(", ")", "# Set model to the evaluation mode", "\n", "all_corr", ",", "sum_corr", ",", "cur_iou", ",", "countt", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloaders", "[", "\"val\"", "]", ")", ":", "\n", "        ", "if", "i", ">", "100", ":", "\n", "            ", "break", "\n", "", "inputs", ",", "labels", "=", "batch", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "# Predict", "\n", "pred", "=", "model1", "(", "inputs", ")", "\n", "# The loss functions include the sigmoid function.", "\n", "pred", "=", "F", ".", "sigmoid", "(", "pred", ")", "\n", "pred", "=", "pred", ".", "data", "\n", "\n", "pred1", "=", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "pred2", "=", "torch", ".", "argmax", "(", "labels", ",", "dim", "=", "1", ")", "\n", "correct", "=", "(", "(", "pred1", "==", "pred2", ")", "*", "1", ")", ".", "sum", "(", ")", "\n", "sum_corr", "+=", "correct", "\n", "all_corr", "+=", "torch", ".", "numel", "(", "pred1", ")", "\n", "\n", "cur_iou", "+=", "iou_pytorch", "(", "pred1", ",", "pred2", ")", ".", "mean", "(", ")", "\n", "countt", "+=", "1", "\n", "\n", "", "metrics_tensor", "[", "2", "]", "=", "sum_corr", "/", "all_corr", "\n", "metrics_tensor", "[", "3", "]", "=", "cur_iou", "/", "countt", "\n", "\n", "#### metric per image below:", "\n", "\n", "val_per_fr_set", "=", "SimDataset", "(", "exp_folder", ",", "names_fake_image", ",", "exp_folder", ",", "names_fake_masks", ",", "im_res", ",", "real", "=", "False", ",", "num_ch", "=", "num_ch", ",", "no_transform", "=", "True", ")", "\n", "dataloader_per_frame", "=", "DataLoader", "(", "val_per_fr_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "results_acc", "=", "dict", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloader_per_frame", ")", ":", "\n", "        ", "if", "i", ">=", "len", "(", "val_per_fr_set", ".", "masks", ")", ":", "\n", "            ", "break", "\n", "", "inputs", ",", "labels", "=", "batch", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "# Predict", "\n", "pred", "=", "model1", "(", "inputs", ")", "\n", "# The loss functions include the sigmoid function.", "\n", "pred", "=", "F", ".", "sigmoid", "(", "pred", ")", "\n", "pred", "=", "pred", ".", "data", "\n", "\n", "pred1", "=", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "pred2", "=", "torch", ".", "argmax", "(", "labels", ",", "dim", "=", "1", ")", "\n", "correct", "=", "(", "(", "pred1", "==", "pred2", ")", "*", "1", ")", ".", "sum", "(", ")", "\n", "acc", "=", "correct", "/", "torch", ".", "numel", "(", "pred1", ")", "\n", "results_acc", "[", "val_per_fr_set", ".", "frames", "[", "i", "]", "]", "=", "acc", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cur_iou", "=", "iou_pytorch", "(", "pred1", ",", "pred2", ")", ".", "mean", "(", ")", "\n", "results", "[", "val_per_fr_set", ".", "frames", "[", "i", "]", "]", "=", "cur_iou", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "metrics_tensor", ",", "results", ",", "results_acc", "\n", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.ResNetUNet.__init__": [[12, 43], ["torch.Module.__init__", "torchvision.models.resnet18", "list", "torch.Sequential", "torch.Sequential", "unet.convrelu", "torch.Sequential", "torch.Sequential", "unet.convrelu", "unet.convrelu", "unet.convrelu", "unet.convrelu", "torch.Upsample", "torch.Upsample", "unet.convrelu", "unet.convrelu", "unet.convrelu", "unet.convrelu", "unet.convrelu", "unet.convrelu", "unet.convrelu", "torch.Conv2d", "torch.Conv2d", "unet.ResNetUNet.base_model.children"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu"], ["    ", "def", "__init__", "(", "self", ",", "n_class", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_model", "=", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "#self.base_model.load_state_dict(torch.load(\"resnet18-f37072fd.pth\"))", "\n", "\n", "self", ".", "base_layers", "=", "list", "(", "self", ".", "base_model", ".", "children", "(", ")", ")", "\n", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "base_layers", "[", ":", "3", "]", ")", "# size=(N, 64, x.H/2, x.W/2)", "\n", "self", ".", "layer0_1x1", "=", "convrelu", "(", "64", ",", "64", ",", "1", ",", "0", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "base_layers", "[", "3", ":", "5", "]", ")", "# size=(N, 64, x.H/4, x.W/4)", "\n", "self", ".", "layer1_1x1", "=", "convrelu", "(", "64", ",", "64", ",", "1", ",", "0", ")", "\n", "self", ".", "layer2", "=", "self", ".", "base_layers", "[", "5", "]", "# size=(N, 128, x.H/8, x.W/8)", "\n", "self", ".", "layer2_1x1", "=", "convrelu", "(", "128", ",", "128", ",", "1", ",", "0", ")", "\n", "self", ".", "layer3", "=", "self", ".", "base_layers", "[", "6", "]", "# size=(N, 256, x.H/16, x.W/16)", "\n", "self", ".", "layer3_1x1", "=", "convrelu", "(", "256", ",", "256", ",", "1", ",", "0", ")", "\n", "self", ".", "layer4", "=", "self", ".", "base_layers", "[", "7", "]", "# size=(N, 512, x.H/32, x.W/32)", "\n", "self", ".", "layer4_1x1", "=", "convrelu", "(", "512", ",", "512", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "self", ".", "conv_up3", "=", "convrelu", "(", "256", "+", "512", ",", "512", ",", "3", ",", "1", ")", "\n", "self", ".", "conv_up2", "=", "convrelu", "(", "128", "+", "512", ",", "256", ",", "3", ",", "1", ")", "\n", "self", ".", "conv_up1", "=", "convrelu", "(", "64", "+", "256", ",", "256", ",", "3", ",", "1", ")", "\n", "self", ".", "conv_up0", "=", "convrelu", "(", "64", "+", "256", ",", "128", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "conv_original_size0", "=", "convrelu", "(", "3", ",", "64", ",", "3", ",", "1", ")", "\n", "self", ".", "conv_original_size1", "=", "convrelu", "(", "64", ",", "64", ",", "3", ",", "1", ")", "\n", "self", ".", "conv_original_size2", "=", "convrelu", "(", "64", "+", "128", ",", "64", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "64", ",", "n_class", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.ResNetUNet.forward": [[44, 82], ["unet.ResNetUNet.conv_original_size0", "unet.ResNetUNet.conv_original_size1", "unet.ResNetUNet.layer0", "unet.ResNetUNet.layer1", "unet.ResNetUNet.layer2", "unet.ResNetUNet.layer3", "unet.ResNetUNet.layer4", "unet.ResNetUNet.layer4_1x1", "unet.ResNetUNet.upsample", "unet.ResNetUNet.layer3_1x1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.ResNetUNet.conv_up3", "unet.ResNetUNet.upsample", "unet.ResNetUNet.layer2_1x1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.ResNetUNet.conv_up2", "unet.ResNetUNet.upsample", "unet.ResNetUNet.layer1_1x1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.ResNetUNet.conv_up1", "unet.ResNetUNet.upsample", "unet.ResNetUNet.layer0_1x1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.ResNetUNet.conv_up0", "unet.ResNetUNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.ResNetUNet.conv_original_size2", "unet.ResNetUNet.conv_last"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.upsample", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.upsample", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.upsample", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.upsample", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.upsample"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x_original", "=", "self", ".", "conv_original_size0", "(", "input", ")", "\n", "x_original", "=", "self", ".", "conv_original_size1", "(", "x_original", ")", "\n", "\n", "layer0", "=", "self", ".", "layer0", "(", "input", ")", "\n", "layer1", "=", "self", ".", "layer1", "(", "layer0", ")", "\n", "layer2", "=", "self", ".", "layer2", "(", "layer1", ")", "\n", "layer3", "=", "self", ".", "layer3", "(", "layer2", ")", "\n", "layer4", "=", "self", ".", "layer4", "(", "layer3", ")", "\n", "\n", "layer4", "=", "self", ".", "layer4_1x1", "(", "layer4", ")", "\n", "x", "=", "self", ".", "upsample", "(", "layer4", ")", "\n", "layer3", "=", "self", ".", "layer3_1x1", "(", "layer3", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "layer3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv_up3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "layer2", "=", "self", ".", "layer2_1x1", "(", "layer2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "layer2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv_up2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "layer1", "=", "self", ".", "layer1_1x1", "(", "layer1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "layer1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv_up1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "layer0", "=", "self", ".", "layer0_1x1", "(", "layer0", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "layer0", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv_up0", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_original", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv_original_size2", "(", "x", ")", "\n", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.unet.convrelu": [[5, 9], ["torch.Sequential", "torch.Conv2d", "torch.ReLU"], "function", ["None"], ["def", "convrelu", "(", "in_channels", ",", "out_channels", ",", "kernel", ",", "padding", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel", ",", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.SimDataset.__init__": [[11, 26], ["dataset.get_transforms", "dataset.SimDataset.get_num_mask_channels"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.get_transforms", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.get_num_mask_channels"], ["    ", "def", "__init__", "(", "self", ",", "fld_im", ",", "names_real_image", ",", "fld_mask", ",", "names_real_masks", ",", "im_res", ",", "real", "=", "True", ",", "num_ch", "=", "None", ",", "no_transform", "=", "False", ")", ":", "\n", "        ", "self", ".", "real", "=", "real", "\n", "\n", "self", ".", "frame_path", "=", "fld_im", "\n", "self", ".", "frames", "=", "names_real_image", "\n", "self", ".", "mask_path", "=", "fld_mask", "\n", "self", ".", "masks", "=", "names_real_masks", "\n", "self", ".", "im_res", "=", "(", "im_res", "[", "1", "]", ",", "im_res", "[", "0", "]", ")", "\n", "self", ".", "no_transform", "=", "no_transform", "\n", "if", "real", ":", "\n", "            ", "self", ".", "num_mask_channels", "=", "self", ".", "get_num_mask_channels", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_mask_channels", "=", "num_ch", "\n", "\n", "", "self", ".", "transforms", "=", "get_transforms", "(", "im_res", ",", "no_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.SimDataset.__len__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "10000000", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.SimDataset.__getitem__": [[30, 50], ["numpy.random.randint", "random.seed", "torch.manual_seed", "PIL.Image.open().convert", "dataset.SimDataset.transforms().to", "random.seed", "torch.manual_seed", "PIL.Image.open", "dataset.SimDataset.transforms().to", "dataset.SimDataset.create_mask_channels", "len", "PIL.Image.open", "dataset.SimDataset.transforms", "dataset.SimDataset.transforms", "torchvision.transforms.functional.resize", "torchvision.transforms.functional.resize"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.create_mask_channels"], ["", "def", "__getitem__", "(", "self", ",", "indx", ")", ":", "\n", "        ", "idx", "=", "indx", "%", "len", "(", "self", ".", "frames", ")", "\n", "\n", "seed", "=", "np", ".", "random", ".", "randint", "(", "2147483647", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "img_pil", "=", "Image", ".", "open", "(", "\"%s/%s\"", "%", "(", "self", ".", "frame_path", ",", "self", ".", "frames", "[", "idx", "]", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "target_size", "=", "self", ".", "im_res", "\n", "\n", "res", "=", "self", ".", "transforms", "(", "TR", ".", "functional", ".", "resize", "(", "img_pil", ",", "size", "=", "target_size", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "ans", "=", "(", "res", "-", "0.5", ")", "*", "2", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "# apply this seed to target tranfsorms", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "# needed for torchvision 0.7", "\n", "\n", "mask_pil", "=", "Image", ".", "open", "(", "\"%s/%s\"", "%", "(", "self", ".", "mask_path", ",", "self", ".", "masks", "[", "idx", "]", "[", ":", "-", "4", "]", "+", "\".png\"", ")", ")", "\n", "mask", "=", "self", ".", "transforms", "(", "TR", ".", "functional", ".", "resize", "(", "mask_pil", ",", "size", "=", "target_size", ",", "interpolation", "=", "Image", ".", "NEAREST", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "mask", "=", "self", ".", "create_mask_channels", "(", "mask", ")", "#  mask should be N+1 channels", "\n", "return", "[", "ans", ",", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.SimDataset.create_mask_channels": [[51, 61], ["torch.cat", "torch.round", "[].permute", "torch.sum", "[].permute.unique", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot", "torch.round.long"], "methods", ["None"], ["", "def", "create_mask_channels", "(", "self", ",", "mask", ")", ":", "\n", "        ", "if", "(", "mask", ".", "unique", "(", ")", "*", "256", ")", ".", "max", "(", ")", ">", "20", ":", "# only object and background", "\n", "            ", "mask", "=", "(", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "(", "0", ",", ")", ",", "keepdim", "=", "True", ")", ">", "0", ")", "*", "1.0", "\n", "mask", "=", "torch", ".", "cat", "(", "(", "1", "-", "mask", ",", "mask", ")", ",", "dim", "=", "0", ")", "\n", "return", "mask", "\n", "", "else", ":", "# background and many objects", "\n", "            ", "integers", "=", "torch", ".", "round", "(", "mask", "*", "256", ")", "\n", "mask", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "integers", ".", "long", "(", ")", ",", "num_classes", "=", "self", ".", "num_mask_channels", ")", ".", "float", "(", ")", "[", "\n", "0", "]", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.SimDataset.get_num_mask_channels": [[62, 73], ["range", "int", "len", "torchvision.transforms.ToTensor", "PIL.Image.open", "torch.max", "os.path.join", "torch.round", "im.unique"], "methods", ["None"], ["", "", "def", "get_num_mask_channels", "(", "self", ")", ":", "\n", "        ", "masks", "=", "self", ".", "masks", "\n", "c", "=", "0", "\n", "for", "item", "in", "range", "(", "len", "(", "masks", ")", ")", ":", "\n", "            ", "im", "=", "TR", ".", "ToTensor", "(", ")", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "mask_path", ",", "masks", "[", "item", "]", ")", ")", ")", "\n", "if", "(", "im", ".", "unique", "(", ")", "*", "256", ")", ".", "max", "(", ")", ">", "20", ":", "\n", "                ", "c", "=", "2", "if", "2", ">", "c", "else", "c", "\n", "", "else", ":", "\n", "                ", "cur", "=", "torch", ".", "max", "(", "torch", ".", "round", "(", "im", "*", "256", ")", ")", "\n", "c", "=", "cur", "+", "1", "if", "cur", "+", "1", ">", "c", "else", "c", "\n", "", "", "return", "int", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.myRandomResizedCrop.__init__": [[92, 94], ["torchvision.transforms.RandomResizedCrop.__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "256", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ",", ")", ":", "\n", "        ", "super", "(", "myRandomResizedCrop", ",", "self", ")", ".", "__init__", "(", "size", ",", "scale", ",", "ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.myRandomResizedCrop.__call__": [[95, 98], ["dataset.myRandomResizedCrop.get_params", "torchvision.transforms.functional.resized_crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "return", "TR", ".", "functional", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "(", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.myVerticalTranslation.__init__": [[101, 104], ["torchvision.transforms.RandomResizedCrop.__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fraction", "=", "(", "0.05", ",", "0.3", ")", ")", ":", "\n", "        ", "self", ".", "fraction", "=", "fraction", "\n", "super", "(", "myVerticalTranslation", ",", "self", ")", ".", "__init__", "(", "size", "=", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.myVerticalTranslation.__call__": [[105, 122], ["PIL.ImageOps.flip", "img.transform.transform.transform", "torch.rand", "int", "img.transform.transform.crop", "img.transform.transform.paste", "img.transform.transform.paste", "torch.rand", "int", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "margin", "=", "torch", ".", "rand", "(", "1", ")", "*", "(", "self", ".", "fraction", "[", "1", "]", "-", "self", ".", "fraction", "[", "0", "]", ")", "+", "self", ".", "fraction", "[", "0", "]", "\n", "direct_up", "=", "(", "torch", ".", "rand", "(", "1", ")", "<", "0.5", ")", "# up or down", "\n", "width", ",", "height", "=", "img", ".", "size", "\n", "left", ",", "right", "=", "0", ",", "width", "\n", "shift", "=", "-", "int", "(", "height", "*", "margin", ")", "if", "direct_up", "else", "int", "(", "height", "*", "margin", ")", "\n", "if", "direct_up", ":", "\n", "            ", "top", ",", "bottom", "=", "0", ",", "int", "(", "height", "*", "margin", ")", ",", "\n", "", "else", ":", "\n", "            ", "top", ",", "bottom", "=", "height", "-", "int", "(", "height", "*", "margin", ")", ",", "height", "\n", "", "im_to_paste", "=", "ImageOps", ".", "flip", "(", "img", ".", "crop", "(", "(", "left", ",", "top", ",", "right", ",", "bottom", ")", ")", ")", "\n", "img", "=", "img", ".", "transform", "(", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "shift", ")", ")", "\n", "if", "direct_up", ":", "\n", "            ", "img", ".", "paste", "(", "im_to_paste", ",", "(", "0", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", ".", "paste", "(", "im_to_paste", ",", "(", "0", ",", "height", "-", "shift", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.myHorizontalTranslation.__init__": [[125, 128], ["torchvision.transforms.RandomResizedCrop.__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fraction", "=", "(", "0.05", ",", "0.3", ")", ")", ":", "\n", "        ", "self", ".", "fraction", "=", "fraction", "\n", "super", "(", "myHorizontalTranslation", ",", "self", ")", ".", "__init__", "(", "size", "=", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.myHorizontalTranslation.__call__": [[129, 146], ["PIL.ImageOps.mirror", "img.transform.transform.transform", "torch.rand", "int", "img.transform.transform.crop", "img.transform.transform.paste", "img.transform.transform.paste", "torch.rand", "int", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "margin", "=", "torch", ".", "rand", "(", "1", ")", "*", "(", "self", ".", "fraction", "[", "1", "]", "-", "self", ".", "fraction", "[", "0", "]", ")", "+", "self", ".", "fraction", "[", "0", "]", "\n", "direct_left", "=", "(", "torch", ".", "rand", "(", "1", ")", "<", "0.5", ")", "# up or down", "\n", "width", ",", "height", "=", "img", ".", "size", "\n", "top", ",", "bottom", "=", "0", ",", "height", "\n", "shift", "=", "-", "int", "(", "width", "*", "margin", ")", "if", "direct_left", "else", "int", "(", "width", "*", "margin", ")", "\n", "if", "direct_left", ":", "\n", "            ", "left", ",", "right", "=", "0", ",", "int", "(", "width", "*", "margin", ")", "\n", "", "else", ":", "\n", "            ", "left", ",", "right", "=", "width", "-", "int", "(", "width", "*", "margin", ")", ",", "width", "\n", "", "im_to_paste", "=", "ImageOps", ".", "mirror", "(", "img", ".", "crop", "(", "(", "left", ",", "top", ",", "right", ",", "bottom", ")", ")", ")", "\n", "img", "=", "img", ".", "transform", "(", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "shift", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "if", "direct_left", ":", "\n", "            ", "img", ".", "paste", "(", "im_to_paste", ",", "(", "0", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", ".", "paste", "(", "im_to_paste", ",", "(", "width", "-", "shift", ",", "0", ")", ")", "\n", "", "return", "img", "", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.dataset.get_transforms": [[75, 89], ["list", "list.append", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomApply", "list.append", "list.append", "list.append", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "dataset.myVerticalTranslation", "dataset.myHorizontalTranslation"], "function", ["None"], ["", "", "def", "get_transforms", "(", "im_res", ",", "no_transform", ")", ":", "\n", "    ", "prob_augm", "=", "0.3", "\n", "tr_list", "=", "list", "(", ")", "\n", "\n", "if", "not", "no_transform", ":", "\n", "        ", "TR", ".", "RandomApply", "(", "\n", "[", "TR", ".", "RandomResizedCrop", "(", "size", "=", "im_res", ",", "scale", "=", "(", "0.75", ",", "1.0", ")", ",", "ratio", "=", "(", "1", ",", "1", ")", ")", "]", ",", "\n", "p", "=", "prob_augm", ")", ",", "\n", "\n", "tr_list", ".", "append", "(", "TR", ".", "RandomApply", "(", "[", "TR", ".", "RandomHorizontalFlip", "(", "p", "=", "1", ")", "]", ",", "p", "=", "prob_augm", "/", "2", ")", ")", ",", "\n", "tr_list", ".", "append", "(", "TR", ".", "RandomApply", "(", "[", "myVerticalTranslation", "(", "fraction", "=", "(", "0.05", ",", "0.3", ")", ")", "]", ",", "p", "=", "prob_augm", ")", ")", ",", "\n", "tr_list", ".", "append", "(", "TR", ".", "RandomApply", "(", "[", "myHorizontalTranslation", "(", "fraction", "=", "(", "0.05", ",", "0.3", ")", ")", "]", ",", "p", "=", "prob_augm", ")", ")", ",", "\n", "", "tr_list", ".", "append", "(", "TR", ".", "ToTensor", "(", ")", ")", "\n", "return", "TR", ".", "Compose", "(", "tr_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.mIoU.loss.dice_loss": [[4, 13], ["pred.contiguous.contiguous", "target.contiguous.contiguous", "loss.mean", "pred.contiguous.sum().sum", "target.contiguous.sum().sum", "pred.contiguous.sum", "target.contiguous.sum"], "function", ["None"], ["def", "dice_loss", "(", "pred", ",", "target", ",", "smooth", "=", "1.", ")", ":", "\n", "    ", "pred", "=", "pred", ".", "contiguous", "(", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", "\n", "\n", "intersection", "=", "(", "pred", "*", "target", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "\n", "loss", "=", "(", "1", "-", "(", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "pred", ".", "sum", "(", "dim", "=", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", "+", "target", ".", "sum", "(", "dim", "=", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", "+", "smooth", ")", ")", ")", "\n", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.SIFID.inception.InceptionV3_sifid.__init__": [[22, 115], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torchvision.models.inception_v3", "models.inception_v3.InceptionV3_sifid.blocks.append", "models.inception_v3.InceptionV3_sifid.parameters", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.inception_v3.InceptionV3_sifid.blocks.append", "models.inception_v3.InceptionV3_sifid.blocks.append", "models.inception_v3.InceptionV3_sifid.blocks.append", "models.inception_v3.InceptionV3_sifid.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "[", "DEFAULT_BLOCK_INDEX", "]", ",", "\n", "resize_input", "=", "False", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n\n        Parameters\n        ----------\n        output_blocks : list of int\n            Indices of blocks to return features of. Possible values are:\n                - 0: corresponds to output of first max pooling\n                - 1: corresponds to output of second max pooling\n                - 2: corresponds to output which is fed to aux classifier\n                - 3: corresponds to output of final average pooling\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, scales the input from range (0, 1) to the range the\n            pretrained Inception network expects, namely (-1, 1)\n        requires_grad : bool\n            If true, parameters of the model require gradient. Possibly useful\n            for finetuning the network\n        \"\"\"", "\n", "super", "(", "InceptionV3_sifid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "#inception.load_state_dict(torch.load(\"SIFID/sifid_inc.pth\"))", "\n", "\n", "# Block 0: input to maxpool1", "\n", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "]", "\n", "\n", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "if", "self", ".", "last_needed_block", ">=", "4", ":", "\n", "            ", "block4", "=", "[", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block4", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.SIFID.inception.InceptionV3_sifid.forward": [[116, 151], ["enumerate", "torch.upsample", "torch.upsample", "torch.upsample", "block", "outp.append"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.upsample", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.upsample", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.upsample"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "upsample", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.SIFID.sifid_score.get_activations": [[30, 101], ["model.eval", "numpy.empty", "list", "print", "len", "print", "len", "len", "range", "numpy.asarray().astype", "numpy.asarray().astype", "numpy.expand_dims", "images.transpose.transpose", "torch.from_numpy().type", "pred.cpu().data.numpy().transpose().reshape", "print", "len", "batch.cuda.cuda", "model", "numpy.asarray", "numpy.asarray", "torch.from_numpy", "pred.cpu().data.numpy().transpose", "pred.cpu().data.numpy", "pred.cpu"], "function", ["None"], ["def", "get_activations", "(", "files", ",", "model", ",", "batch_size", "=", "1", ",", "dims", "=", "64", ",", "\n", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : Batch size of images for the model to process at once.\n                     Make sure that the number of samples is a multiple of\n                     the batch size, otherwise some samples are ignored. This\n                     behavior is retained to match the original FID score\n                     implementation.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the number\n                     of calculated batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "len", "(", "files", ")", "%", "batch_size", "!=", "0", ":", "\n", "        ", "print", "(", "(", "'Warning: number of images is not a multiple of the '", "\n", "'batch size. Some samples are going to be ignored.'", ")", ")", "\n", "", "if", "batch_size", ">", "len", "(", "files", ")", ":", "\n", "        ", "print", "(", "(", "'Warning: batch size is bigger than the data size. '", "\n", "'Setting batch size to data size'", ")", ")", "\n", "batch_size", "=", "len", "(", "files", ")", "\n", "\n", "", "n_batches", "=", "len", "(", "files", ")", "//", "batch_size", "\n", "n_used_imgs", "=", "n_batches", "*", "batch_size", "\n", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "n_used_imgs", ",", "dims", ")", ")", "\n", "\n", "for", "i", "in", "list", "(", "range", "(", "n_batches", ")", ")", ":", "\n", "        ", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "\n", "# images = np.array([imread(str(f)).astype(np.float32)", "\n", "#                   for f in files[start:end]])", "\n", "im", "=", "numpy", ".", "asarray", "(", "files", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "#images = np.array([imread(str(\"temp/\")+str(files[0])).astype(np.float32)]) #files[start:end]])", "\n", "# image = np.asarray(imread(str(\"temp/\")+str(files[0]))).astype(np.float32)", "\n", "images", "=", "np", ".", "expand_dims", "(", "im", ",", "axis", "=", "0", ")", "\n", "\n", "images", "=", "images", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "# Reshape to (n_images, 3, height, width)", "\n", "images", "=", "images", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "# images = images[0,:,:,:]", "\n", "images", "/=", "255", "\n", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "if", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "\n", "# if pred.shape[2] != 1 or pred.shape[3] != 1:", "\n", "#    pred = adaptive_avg_pool2d(pred, output_size=(1, 1))", "\n", "\n", "pred_arr", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "batch_size", "*", "pred", ".", "shape", "[", "2", "]", "*", "pred", ".", "shape", "[", "3", "]", ",", "-", "1", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "' done'", ")", "\n", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.SIFID.sifid_score.calculate_frechet_distance": [[103, 158], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n\n    Stable version by Dougal J. Sutherland.\n\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representative data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representative data set.\n\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "\n", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.SIFID.sifid_score.calculate_activation_statistics": [[160, 181], ["sifid_score.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.get_activations"], ["", "def", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", "=", "1", ",", "\n", "dims", "=", "64", ",", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : The images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size\n                     depends on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the\n                     number of calculated batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the inception model.\n    -- sigma : The covariance matrix of the activations of the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "files", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ",", "verbose", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.SIFID.sifid_score._compute_statistics_of_path": [[183, 195], ["pathlib.Path.endswith", "numpy.load", "np.load.close", "pathlib.Path", "sifid_score.calculate_activation_statistics", "list", "list", "pathlib.Path.glob", "pathlib.Path.glob"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_activation_statistics"], ["", "def", "_compute_statistics_of_path", "(", "files", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", ":", "\n", "    ", "if", "path", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "files", "=", "list", "(", "path", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "path", ".", "glob", "(", "'*.png'", ")", ")", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "\n", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.SIFID.sifid_score.calculate_sifid_given_paths": [[197, 219], ["inception.InceptionV3_sifid", "range", "inception.InceptionV3_sifid.cuda", "len", "sifid_score.calculate_activation_statistics", "sifid_score.calculate_activation_statistics", "fid_values.append", "sifid_score.calculate_frechet_distance"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_activation_statistics", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_activation_statistics", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_frechet_distance"], ["", "def", "calculate_sifid_given_paths", "(", "path1", ",", "path2", ",", "batch_size", ",", "cuda", ",", "dims", ")", ":", "\n", "    ", "\"\"\"Calculates the SIFID of two paths\"\"\"", "\n", "\n", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ")", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "#path1 = pathlib.Path(path1)", "\n", "#files1 = sorted(list(path1.glob('*')))", "\n", "", "files1", "=", "path1", "\n", "\n", "#path2 = pathlib.Path(path2)", "\n", "#files2 = sorted(list(path2.glob('*')))", "\n", "files2", "=", "path2", "\n", "fid_values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "files2", ")", ")", ":", "\n", "        ", "m1", ",", "s1", "=", "calculate_activation_statistics", "(", "[", "files1", "[", "0", "]", "]", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", "\n", "m2", ",", "s2", "=", "calculate_activation_statistics", "(", "[", "files2", "[", "i", "]", "]", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", "\n", "fid_values", ".", "append", "(", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", ")", "\n", "", "return", "fid_values", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.__init__": [[7, 23], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "image_subdir", "=", "''", ",", "reflesh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "# self.img_dir = os.path.join(self.web_dir, )", "\n", "self", ".", "img_subdir", "=", "image_subdir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "image_subdir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "# print(self.img_dir)", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "reflesh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"reflesh\"", ",", "content", "=", "str", "(", "reflesh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.get_image_dir": [[24, 26], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.add_header": [[27, 30], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.add_table": [[31, 34], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.add_images": [[35, 46], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.save": [[47, 52], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ",", "file", "=", "'index'", ")", ":", "\n", "        ", "html_file", "=", "'%s/%s.html'", "%", "(", "self", ".", "web_dir", ",", "file", ")", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.Visualizer.__init__": [[21, 41], ["os.path.join", "util.mkdirs", "visdom.Visdom", "os.path.join", "print", "util.mkdirs"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.mkdirs", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# self.opt = opt", "\n", "        ", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "# self.use_html = opt.is_train and not opt.no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "self", ".", "display_cnt", "=", "0", "# display_current_results counter", "\n", "self", ".", "display_cnt_high", "=", "0", "\n", "self", ".", "use_html", "=", "opt", ".", "use_html", "\n", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "opt", ".", "display_port", ")", "\n", "\n", "", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "]", ")", "\n", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "img_dir", ",", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.Visualizer.display_current_results": [[43, 92], ["visuals.items", "visualizer.Visualizer.vis.images", "visuals.items", "numpy.maximum", "html.HTML", "range", "html.HTML.save", "int", "image_numpy.transpose", "visualizer.zoom_to_res", "images.append", "visualizer.zoom_to_res", "images.append", "os.path.join", "util.save_image", "html.HTML.add_header", "range", "math.ceil", "len", "numpy.ones_like", "dict", "visualizer.zoom_to_res", "visuals.items", "html.HTML.add_images", "visuals.items", "image_numpy.transpose", "ims.append", "txts.append", "links.append", "len", "os.path.join", "os.path.join", "visuals.items"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.zoom_to_res", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.zoom_to_res", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.save_image", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.add_header", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.zoom_to_res", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.add_images"], ["", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "nrows", "=", "None", ",", "res", "=", "256", ")", ":", "\n", "        ", "if", "self", ".", "display_id", ">", "0", ":", "# show images in the browser", "\n", "            ", "title", "=", "self", ".", "name", "\n", "if", "(", "nrows", "is", "None", ")", ":", "\n", "                ", "nrows", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "visuals", ".", "items", "(", ")", ")", "/", "2.0", ")", ")", "\n", "", "images", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "title", "+=", "\" | \"", "if", "idx", "%", "nrows", "==", "0", "else", "\", \"", "\n", "title", "+=", "label", "\n", "img", "=", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "img", "=", "zoom_to_res", "(", "img", ",", "res", "=", "res", ",", "order", "=", "0", ")", "\n", "images", ".", "append", "(", "img", ")", "\n", "idx", "+=", "1", "\n", "", "if", "len", "(", "visuals", ".", "items", "(", ")", ")", "%", "2", "!=", "0", ":", "\n", "                ", "white_image", "=", "np", ".", "ones_like", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "*", "255", "\n", "white_image", "=", "zoom_to_res", "(", "white_image", ",", "res", "=", "res", ",", "order", "=", "0", ")", "\n", "images", ".", "append", "(", "white_image", ")", "\n", "", "self", ".", "vis", ".", "images", "(", "images", ",", "nrow", "=", "nrows", ",", "win", "=", "self", ".", "display_id", "+", "1", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", ")", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_cnt%.6d_%s.png'", "%", "(", "epoch", ",", "self", ".", "display_cnt", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "zoom_to_res", "(", "image_numpy", ",", "res", "=", "res", ",", "axis", "=", "2", ")", ",", "img_path", ")", "\n", "\n", "", "self", ".", "display_cnt", "+=", "1", "\n", "self", ".", "display_cnt_high", "=", "np", ".", "maximum", "(", "self", ".", "display_cnt_high", ",", "self", ".", "display_cnt", ")", "\n", "\n", "# update website", "\n", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "reflesh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "if", "(", "n", "==", "epoch", ")", ":", "\n", "                    ", "high", "=", "self", ".", "display_cnt", "\n", "", "else", ":", "\n", "                    ", "high", "=", "self", ".", "display_cnt_high", "\n", "", "for", "c", "in", "range", "(", "high", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                    ", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                        ", "img_path", "=", "'epoch%.3d_cnt%.6d_%s.png'", "%", "(", "n", ",", "c", ",", "label", ")", "\n", "ims", ".", "append", "(", "os", ".", "path", ".", "join", "(", "'images'", ",", "img_path", ")", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "os", ".", "path", ".", "join", "(", "'images'", ",", "img_path", ")", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.Visualizer.plot_current_errors_save": [[94, 124], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "enumerate", "hasattr", "matplotlib.subplots", "numpy.save", "numpy.save", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "f.savefig", "f.clf", "matplotlib.close", "list", "numpy.array", "ax.plot", "os.path.join", "errors.keys", "numpy.where", "os.path.join", "os.path.join", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save"], ["", "", "def", "plot_current_errors_save", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "errors", ",", "keys", "=", "'+ALL'", ",", "name", "=", "'loss'", ",", "to_plot", "=", "False", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "\n", "# embed()", "\n", "if", "(", "keys", "==", "'+ALL'", ")", ":", "\n", "            ", "plot_keys", "=", "self", ".", "plot_data", "[", "'legend'", "]", "\n", "", "else", ":", "\n", "            ", "plot_keys", "=", "keys", "\n", "\n", "", "if", "(", "to_plot", ")", ":", "\n", "            ", "(", "f", ",", "ax", ")", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "", "for", "(", "k", ",", "kname", ")", "in", "enumerate", "(", "plot_keys", ")", ":", "\n", "            ", "kk", "=", "np", ".", "where", "(", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", "==", "kname", ")", "[", "0", "]", "[", "0", "]", "\n", "x", "=", "self", ".", "plot_data", "[", "'X'", "]", "\n", "y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", "[", ":", ",", "kk", "]", "\n", "if", "(", "to_plot", ")", ":", "\n", "                ", "ax", ".", "plot", "(", "x", ",", "y", ",", "'o-'", ",", "label", "=", "kname", ")", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s_x'", ")", "%", "kname", ",", "x", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s_y'", ")", "%", "kname", ",", "y", ")", "\n", "\n", "", "if", "(", "to_plot", ")", ":", "\n", "            ", "plt", ".", "legend", "(", "loc", "=", "0", ",", "fontsize", "=", "'small'", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'Value'", ")", "\n", "f", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s.png'", "%", "name", ")", ")", "\n", "f", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.Visualizer.plot_current_errors": [[126, 140], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.vis.line", "hasattr", "list", "numpy.stack", "numpy.array", "errors.keys", "len", "numpy.array"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "errors", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.Visualizer.print_current_errors": [[142, 149], ["print", "fid.write", "errors.items"], "methods", ["None"], ["", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ",", "t2", "=", "-", "1", ",", "t2o", "=", "-", "1", ",", "fid", "=", "None", ")", ":", "\n", "        ", "message", "=", "'(ep: %d, it: %d, t: %.3f[s], ept: %.2f/%.2f[h]) '", "%", "(", "epoch", ",", "i", ",", "t", ",", "t2o", ",", "t2", ")", "\n", "message", "+=", "(", "', '", ")", ".", "join", "(", "[", "'%s: %.3f'", "%", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", "]", ")", "\n", "\n", "print", "(", "message", ")", "\n", "if", "(", "fid", "is", "not", "None", ")", ":", "\n", "            ", "fid", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.Visualizer.save_images_simple": [[152, 172], ["webpage.get_image_dir", "zip", "webpage.add_images", "os.path.join", "ims.append", "txts.append", "links.append", "util.save_image", "util.save_image", "os.path.join", "os.path.join", "visualizer.zoom_to_res"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.add_images", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.save_image", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.save_image", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.zoom_to_res"], ["", "", "def", "save_images_simple", "(", "self", ",", "webpage", ",", "images", ",", "names", ",", "in_txts", ",", "prefix", "=", "''", ",", "res", "=", "256", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "name", ",", "image_numpy", ",", "txt", "in", "zip", "(", "names", ",", "images", ",", "in_txts", ")", ":", "\n", "            ", "image_name", "=", "'%s_%s.png'", "%", "(", "prefix", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "if", "(", "res", "is", "not", "None", ")", ":", "\n", "                ", "util", ".", "save_image", "(", "zoom_to_res", "(", "image_numpy", ",", "res", "=", "res", ",", "axis", "=", "2", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "                ", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "", "ims", ".", "append", "(", "os", ".", "path", ".", "join", "(", "webpage", ".", "img_subdir", ",", "image_name", ")", ")", "\n", "# txts.append(name)", "\n", "txts", ".", "append", "(", "txt", ")", "\n", "links", ".", "append", "(", "os", ".", "path", ".", "join", "(", "webpage", ".", "img_subdir", ",", "image_name", ")", ")", "\n", "# embed()", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.Visualizer.save_images": [[174, 193], ["webpage.get_image_dir", "zip", "webpage.add_images", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.html.HTML.add_images", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.save_image"], ["", "def", "save_images", "(", "self", ",", "webpage", ",", "images", ",", "names", ",", "image_path", ",", "title", "=", "''", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "# short_path = ntpath.basename(image_path)", "\n", "# name = os.path.splitext(short_path)[0]", "\n", "# name = short_path", "\n", "# webpage.add_header('%s, %s' % (name, title))", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "zip", "(", "names", ",", "images", ")", ":", "\n", "            ", "image_name", "=", "'%s.jpg'", "%", "(", "label", ",", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.visualizer.zoom_to_res": [[11, 19], ["zoom", "zoom"], "function", ["None"], ["def", "zoom_to_res", "(", "img", ",", "res", "=", "256", ",", "order", "=", "0", ",", "axis", "=", "0", ")", ":", "\n", "# img   3xXxX", "\n", "    ", "from", "scipy", ".", "ndimage", "import", "zoom", "\n", "zoom_factor", "=", "res", "/", "img", ".", "shape", "[", "1", "]", "\n", "if", "(", "axis", "==", "0", ")", ":", "\n", "        ", "return", "zoom", "(", "img", ",", "[", "1", ",", "zoom_factor", ",", "zoom_factor", "]", ",", "order", "=", "order", ")", "\n", "", "elif", "(", "axis", "==", "2", ")", ":", "\n", "        ", "return", "zoom", "(", "img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.load_image": [[10, 22], ["rawpy.imread", "raw.postprocess", "cv2.imread", "matplotlib.imread"], "function", ["None"], ["def", "load_image", "(", "path", ")", ":", "\n", "    ", "if", "(", "path", "[", "-", "3", ":", "]", "==", "'dng'", ")", ":", "\n", "        ", "import", "rawpy", "\n", "with", "rawpy", ".", "imread", "(", "path", ")", "as", "raw", ":", "\n", "            ", "img", "=", "raw", ".", "postprocess", "(", ")", "\n", "", "", "elif", "(", "path", "[", "-", "3", ":", "]", "==", "'bmp'", "or", "path", "[", "-", "3", ":", "]", "==", "'jpg'", "or", "path", "[", "-", "3", ":", "]", "==", "'png'", ")", ":", "\n", "        ", "import", "cv2", "\n", "return", "cv2", ".", "imread", "(", "path", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "img", "=", "(", "255", "*", "plt", ".", "imread", "(", "path", ")", "[", ":", ",", ":", ",", ":", "3", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.save_image": [[23, 26], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ",", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.mkdirs": [[27, 33], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.mkdir", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.mkdir"], ["", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.mkdir": [[34, 37], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.tensor2im": [[39, 44], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["", "", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def tensor2im(image_tensor, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "cent", ")", "*", "factor", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.im2tensor": [[45, 49], ["torch.Tensor", "[].transpose"], "function", ["None"], ["", "def", "im2tensor", "(", "image", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def im2tensor(image, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "return", "torch", ".", "Tensor", "(", "(", "image", "/", "factor", "-", "cent", ")", "\n", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.PNetLin.__init__": [[30, 65], ["torch.Module.__init__", "networks_basic.ScalingLayer", "len", "net_type", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pnet_type", "=", "'vgg'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "use_dropout", "=", "True", ",", "spatial", "=", "False", ",", "version", "=", "'0.1'", ",", "lpips", "=", "True", ")", ":", "\n", "        ", "super", "(", "PNetLin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pnet_type", "=", "pnet_type", "\n", "self", ".", "pnet_tune", "=", "pnet_tune", "\n", "self", ".", "pnet_rand", "=", "pnet_rand", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "lpips", "=", "lpips", "\n", "self", ".", "version", "=", "version", "\n", "self", ".", "scaling_layer", "=", "ScalingLayer", "(", ")", "\n", "\n", "if", "(", "self", ".", "pnet_type", "in", "[", "'vgg'", ",", "'vgg16'", "]", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "vgg16", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'alex'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "alexnet", "\n", "self", ".", "chns", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "squeezenet", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "384", ",", "384", ",", "512", ",", "512", "]", "\n", "", "self", ".", "L", "=", "len", "(", "self", ".", "chns", ")", "\n", "\n", "self", ".", "net", "=", "net_type", "(", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "requires_grad", "=", "self", ".", "pnet_tune", ")", "\n", "\n", "if", "(", "lpips", ")", ":", "\n", "            ", "self", ".", "lin0", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "0", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin1", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "1", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin2", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "2", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin3", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "3", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin4", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "4", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "=", "[", "self", ".", "lin0", ",", "self", ".", "lin1", ",", "self", ".", "lin2", ",", "self", ".", "lin3", ",", "self", ".", "lin4", "]", "\n", "if", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "# 7 layers for squeezenet", "\n", "                ", "self", ".", "lin5", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "5", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin6", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "6", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "+=", "[", "self", ".", "lin5", ",", "self", ".", "lin6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.PNetLin.forward": [[66, 95], ["range", "range", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.scaling_layer", "networks_basic.PNetLin.scaling_layer", "models.normalize_tensor", "models.normalize_tensor", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.PNetLin.lins[].model", "range", "networks_basic.PNetLin.lins[].model", "range", "diffs[].sum", "range", "diffs[].sum", "range"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.normalize_tensor", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.normalize_tensor", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.upsample", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.spatial_average", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.upsample", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.spatial_average"], ["", "", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "# v0.0 - original release had a bug, where input was not scaled", "\n", "        ", "in0_input", ",", "in1_input", "=", "(", "self", ".", "scaling_layer", "(", "in0", ")", ",", "self", ".", "scaling_layer", "(", "in1", ")", ")", "if", "self", ".", "version", "==", "'0.1'", "else", "(", "in0", ",", "in1", ")", "\n", "outs0", ",", "outs1", "=", "self", ".", "net", ".", "forward", "(", "in0_input", ")", ",", "self", ".", "net", ".", "forward", "(", "in1_input", ")", "\n", "feats0", ",", "feats1", ",", "diffs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "for", "kk", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "feats0", "[", "kk", "]", ",", "feats1", "[", "kk", "]", "=", "util", ".", "normalize_tensor", "(", "outs0", "[", "kk", "]", ")", ",", "util", ".", "normalize_tensor", "(", "outs1", "[", "kk", "]", ")", "\n", "diffs", "[", "kk", "]", "=", "(", "feats0", "[", "kk", "]", "-", "feats1", "[", "kk", "]", ")", "**", "2", "\n", "\n", "", "if", "(", "self", ".", "lpips", ")", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "out_HW", "=", "in0", ".", "shape", "[", "2", ":", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "out_HW", "=", "in0", ".", "shape", "[", "2", ":", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "\n", "", "", "val", "=", "res", "[", "0", "]", "\n", "for", "l", "in", "range", "(", "1", ",", "self", ".", "L", ")", ":", "\n", "            ", "val", "+=", "res", "[", "l", "]", "\n", "\n", "", "if", "(", "retPerLayer", ")", ":", "\n", "            ", "return", "(", "val", ",", "res", ")", "\n", "", "else", ":", "\n", "            ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.ScalingLayer.__init__": [[97, 101], ["torch.Module.__init__", "networks_basic.ScalingLayer.register_buffer", "networks_basic.ScalingLayer.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ScalingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'shift'", ",", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "'scale'", ",", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.ScalingLayer.forward": [[102, 104], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "(", "inp", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.NetLinLayer.__init__": [[108, 114], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["def", "__init__", "(", "self", ",", "chn_in", ",", "chn_out", "=", "1", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetLinLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Dropout", "(", ")", ",", "]", "if", "(", "use_dropout", ")", "else", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_in", ",", "chn_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.Dist2LogitLayer.__init__": [[118, 129], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ",", "use_sigmoid", "=", "True", ")", ":", "\n", "        ", "super", "(", "Dist2LogitLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "5", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "1", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "if", "(", "use_sigmoid", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Sigmoid", "(", ")", ",", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.Dist2LogitLayer.forward": [[130, 132], ["networks_basic.Dist2LogitLayer.model.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "eps", "=", "0.1", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward", "(", "torch", ".", "cat", "(", "(", "d0", ",", "d1", ",", "d0", "-", "d1", ",", "d0", "/", "(", "d1", "+", "eps", ")", ",", "d1", "/", "(", "d0", "+", "eps", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.BCERankingLoss.__init__": [[134, 139], ["torch.Module.__init__", "networks_basic.Dist2LogitLayer", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ")", ":", "\n", "        ", "super", "(", "BCERankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "Dist2LogitLayer", "(", "chn_mid", "=", "chn_mid", ")", "\n", "# self.parameters = list(self.net.parameters())", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.BCERankingLoss.forward": [[140, 144], ["networks_basic.BCERankingLoss.net.forward", "networks_basic.BCERankingLoss.loss"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "per", "=", "(", "judge", "+", "1.", ")", "/", "2.", "\n", "self", ".", "logit", "=", "self", ".", "net", ".", "forward", "(", "d0", ",", "d1", ")", "\n", "return", "self", ".", "loss", "(", "self", ".", "logit", ",", "per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.FakeNet.__init__": [[147, 151], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ",", "colorspace", "=", "'Lab'", ")", ":", "\n", "        ", "super", "(", "FakeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "colorspace", "=", "colorspace", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.L2.forward": [[154, 168], ["in0.size", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "in0.size", "models.l2().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "models.l2", "models.tensor2np", "models.tensor2np", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "models.tensor2tensorlab", "models.tensor2tensorlab", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.l2", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2np", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2np", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "(", "N", ",", "C", ",", "X", ",", "Y", ")", "=", "in0", ".", "size", "(", ")", "\n", "value", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "(", "in0", "-", "in1", ")", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "1", ",", "X", ",", "Y", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "Y", ")", ",", "dim", "=", "3", ")", ".", "view", "(", "N", ")", "\n", "return", "value", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "l2", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "                ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.DSSIM.forward": [[171, 183], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models.dssim().astype", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "in0.size", "models.dssim().astype", "models.dssim", "models.dssim", "models.tensor2im", "models.tensor2im", "models.tensor2np", "models.tensor2np", "models.tensor2tensorlab", "models.tensor2tensorlab"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.dssim", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.dssim", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2im", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2im", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2np", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2np", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "1.", "*", "util", ".", "tensor2im", "(", "in0", ".", "data", ")", ",", "1.", "*", "util", ".", "tensor2im", "(", "in1", ".", "data", ")", ",", "range", "=", "255.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.spatial_average": [[19, 21], ["in_tens.mean"], "function", ["None"], ["def", "spatial_average", "(", "in_tens", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "return", "in_tens", ".", "mean", "(", "[", "2", ",", "3", "]", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.upsample": [[22, 27], ["torch.Upsample"], "function", ["None"], ["", "def", "upsample", "(", "in_tens", ",", "out_HW", "=", "(", "64", ",", "64", ")", ")", ":", "# assumes scale factor is same for H and W", "\n", "    ", "in_H", ",", "in_W", "=", "in_tens", ".", "shape", "[", "2", "]", ",", "in_tens", ".", "shape", "[", "3", "]", "\n", "scale_factor_H", ",", "scale_factor_W", "=", "1.", "*", "out_HW", "[", "0", "]", "/", "in_H", ",", "1.", "*", "out_HW", "[", "1", "]", "/", "in_W", "\n", "\n", "return", "nn", ".", "Upsample", "(", "scale_factor", "=", "(", "scale_factor_H", ",", "scale_factor_W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "(", "in_tens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.print_network": [[184, 190], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network'", ",", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.name": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.initialize": [[28, 105], ["base_model.BaseModel.initialize", "list", "networks_basic.PNetLin", "dist_model.DistModel.net.parameters", "networks_basic.BCERankingLoss", "list", "torch.optim.Adam", "dist_model.DistModel.net.eval", "dist_model.DistModel.net.to", "torch.nn.DataParallel", "print", "networks_basic.print_network", "print", "os.path.abspath", "print", "dist_model.DistModel.net.load_state_dict", "networks_basic.PNetLin", "dist_model.DistModel.rankLoss.net.parameters", "dist_model.DistModel.rankLoss.to", "os.path.join", "torch.load", "networks_basic.L2", "inspect.getfile", "networks_basic.DSSIM", "ValueError"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.jnd_dataset.JNDDataset.initialize", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.networks_basic.print_network", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load"], ["", "def", "initialize", "(", "self", ",", "model", "=", "'net-lin'", ",", "net", "=", "'alex'", ",", "colorspace", "=", "'Lab'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "model_path", "=", "None", ",", "\n", "use_gpu", "=", "True", ",", "printNet", "=", "False", ",", "spatial", "=", "False", ",", "\n", "is_train", "=", "False", ",", "lr", "=", ".0001", ",", "beta1", "=", "0.5", ",", "version", "=", "'0.1'", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "'''\n        INPUTS\n            model - ['net-lin'] for linearly calibrated network\n                    ['net'] for off-the-shelf network\n                    ['L2'] for L2 distance in Lab colorspace\n                    ['SSIM'] for ssim in RGB colorspace\n            net - ['squeeze','alex','vgg']\n            model_path - if None, will look in weights/[NET_NAME].pth\n            colorspace - ['Lab','RGB'] colorspace to use for L2 and SSIM\n            use_gpu - bool - whether or not to use a GPU\n            printNet - bool - whether or not to print network architecture out\n            spatial - bool - whether to output an array containing varying distances across spatial dimensions\n            is_train - bool - [True] for training mode\n            lr - float - initial learning rate\n            beta1 - float - initial momentum term for adam\n            version - 0.1 for latest, 0.0 was original (with a bug)\n            gpu_ids - int array - [0] by default, gpus to use\n        '''", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "use_gpu", "=", "use_gpu", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "model_name", "=", "'%s [%s]'", "%", "(", "model", ",", "net", ")", "\n", "\n", "if", "(", "self", ".", "model", "==", "'net-lin'", ")", ":", "# pretrained net + linear layer", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_tune", "=", "pnet_tune", ",", "pnet_type", "=", "net", ",", "\n", "use_dropout", "=", "True", ",", "spatial", "=", "spatial", ",", "version", "=", "version", ",", "lpips", "=", "True", ")", "\n", "kw", "=", "{", "}", "\n", "if", "not", "use_gpu", ":", "\n", "                ", "kw", "[", "'map_location'", "]", "=", "'cpu'", "\n", "", "if", "(", "model_path", "is", "None", ")", ":", "\n", "                ", "import", "inspect", "\n", "model_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "inspect", ".", "getfile", "(", "self", ".", "initialize", ")", ",", "'..'", ",", "'weights/v%s/%s.pth'", "%", "(", "version", ",", "net", ")", ")", ")", "\n", "\n", "", "if", "(", "not", "is_train", ")", ":", "\n", "                ", "print", "(", "'Loading model from: %s'", "%", "model_path", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "**", "kw", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "elif", "(", "self", ".", "model", "==", "'net'", ")", ":", "# pretrained network", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_type", "=", "net", ",", "lpips", "=", "False", ")", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'L2'", ",", "'l2'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "L2", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "# not really a network, only for testing", "\n", "self", ".", "model_name", "=", "'L2'", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'DSSIM'", ",", "'dssim'", ",", "'SSIM'", ",", "'ssim'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "DSSIM", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "\n", "self", ".", "model_name", "=", "'SSIM'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model [%s] not recognized.\"", "%", "self", ".", "model", ")", "\n", "\n", "", "self", ".", "parameters", "=", "list", "(", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "# training mode", "\n", "# extra network on top to go from distances (d0,d1) => predicted human judgment (h*)", "\n", "            ", "self", ".", "rankLoss", "=", "networks", ".", "BCERankingLoss", "(", ")", "\n", "self", ".", "parameters", "+=", "list", "(", "self", ".", "rankLoss", ".", "net", ".", "parameters", "(", ")", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "old_lr", "=", "lr", "\n", "self", ".", "optimizer_net", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", ",", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "0.999", ")", ")", "\n", "", "else", ":", "# test mode", "\n", "            ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "", "if", "(", "use_gpu", ")", ":", "\n", "            ", "self", ".", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "net", ",", "device_ids", "=", "gpu_ids", ")", "\n", "if", "(", "self", ".", "is_train", ")", ":", "\n", "                ", "self", ".", "rankLoss", "=", "self", ".", "rankLoss", ".", "to", "(", "device", "=", "gpu_ids", "[", "0", "]", ")", "# just put this on GPU0", "\n", "\n", "", "", "if", "(", "printNet", ")", ":", "\n", "            ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "net", ")", "\n", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.forward": [[106, 115], ["dist_model.DistModel.net.forward"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward"], ["", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "        ", "''' Function computes the distance between image patches in0 and in1\n        INPUTS\n            in0, in1 - torch.Tensor object of shape Nx3xXxY - image patch scaled to [-1,1]\n        OUTPUT\n            computed distances between in0 and in1\n        '''", "\n", "\n", "return", "self", ".", "net", ".", "forward", "(", "in0", ",", "in1", ",", "retPerLayer", "=", "retPerLayer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.optimize_parameters": [[117, 123], ["dist_model.DistModel.forward_train", "dist_model.DistModel.optimizer_net.zero_grad", "dist_model.DistModel.backward_train", "dist_model.DistModel.optimizer_net.step", "dist_model.DistModel.clamp_weights"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.forward_train", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.backward_train", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.clamp_weights"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "step", "(", ")", "\n", "self", ".", "clamp_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.clamp_weights": [[124, 128], ["dist_model.DistModel.net.modules", "hasattr", "torch.clamp"], "methods", ["None"], ["", "def", "clamp_weights", "(", "self", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "(", "hasattr", "(", "module", ",", "'weight'", ")", "and", "module", ".", "kernel_size", "==", "(", "1", ",", "1", ")", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", "=", "torch", ".", "clamp", "(", "module", ".", "weight", ".", "data", ",", "min", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.set_input": [[129, 144], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "dist_model.DistModel.input_ref.to", "dist_model.DistModel.input_p0.to", "dist_model.DistModel.input_p1.to", "dist_model.DistModel.input_judge.to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "input_ref", "=", "data", "[", "'ref'", "]", "\n", "self", ".", "input_p0", "=", "data", "[", "'p0'", "]", "\n", "self", ".", "input_p1", "=", "data", "[", "'p1'", "]", "\n", "self", ".", "input_judge", "=", "data", "[", "'judge'", "]", "\n", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "input_ref", "=", "self", ".", "input_ref", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p0", "=", "self", ".", "input_p0", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p1", "=", "self", ".", "input_p1", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_judge", "=", "self", ".", "input_judge", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "var_ref", "=", "Variable", "(", "self", ".", "input_ref", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p0", "=", "Variable", "(", "self", ".", "input_p0", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p1", "=", "Variable", "(", "self", ".", "input_p1", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.forward_train": [[145, 158], ["dist_model.DistModel.forward", "dist_model.DistModel.forward", "dist_model.DistModel.compute_accuracy", "torch.autograd.Variable().view", "dist_model.DistModel.rankLoss.forward", "dist_model.DistModel.d0.size", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.compute_accuracy", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward"], ["", "def", "forward_train", "(", "self", ")", ":", "# run forward pass", "\n", "# print(self.net.module.scaling_layer.shift)", "\n", "# print(torch.norm(self.net.module.net.slice1[0].weight).item(), torch.norm(self.net.module.lin0.model[1].weight).item())", "\n", "\n", "        ", "self", ".", "d0", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p0", ")", "\n", "self", ".", "d1", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p1", ")", "\n", "self", ".", "acc_r", "=", "self", ".", "compute_accuracy", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "input_judge", ")", "\n", "\n", "self", ".", "var_judge", "=", "Variable", "(", "1.", "*", "self", ".", "input_judge", ")", ".", "view", "(", "self", ".", "d0", ".", "size", "(", ")", ")", "\n", "\n", "self", ".", "loss_total", "=", "self", ".", "rankLoss", ".", "forward", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "var_judge", "*", "2.", "-", "1.", ")", "\n", "\n", "return", "self", ".", "loss_total", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.backward_train": [[159, 161], ["torch.mean().backward", "torch.mean"], "methods", ["None"], ["", "def", "backward_train", "(", "self", ")", ":", "\n", "        ", "torch", ".", "mean", "(", "self", ".", "loss_total", ")", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.compute_accuracy": [[162, 167], ["judge.cpu().numpy().flatten", "judge.cpu().numpy", "judge.cpu"], "methods", ["None"], ["", "def", "compute_accuracy", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "''' d0, d1 are Variables, judge is a Tensor '''", "\n", "d1_lt_d0", "=", "(", "d1", "<", "d0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "judge_per", "=", "judge", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "return", "d1_lt_d0", "*", "judge_per", "+", "(", "1", "-", "d1_lt_d0", ")", "*", "(", "1", "-", "judge_per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.get_current_errors": [[168, 176], ["collections.OrderedDict", "collections.OrderedDict.keys", "numpy.mean", "dist_model.DistModel.loss_total.data.cpu().numpy", "dist_model.DistModel.loss_total.data.cpu"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "retDict", "=", "OrderedDict", "(", "[", "(", "'loss_total'", ",", "self", ".", "loss_total", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "(", "'acc_r'", ",", "self", ".", "acc_r", ")", "]", ")", "\n", "\n", "for", "key", "in", "retDict", ".", "keys", "(", ")", ":", "\n", "            ", "retDict", "[", "key", "]", "=", "np", ".", "mean", "(", "retDict", "[", "key", "]", ")", "\n", "\n", "", "return", "retDict", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.get_current_visuals": [[177, 191], ["models.tensor2im", "models.tensor2im", "models.tensor2im", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "collections.OrderedDict", "dist_model.DistModel.var_ref.data.size"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2im", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2im", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "zoom_factor", "=", "256", "/", "self", ".", "var_ref", ".", "data", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "ref_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_ref", ".", "data", ")", "\n", "p0_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p0", ".", "data", ")", "\n", "p1_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p1", ".", "data", ")", "\n", "\n", "ref_img_vis", "=", "zoom", "(", "ref_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p0_img_vis", "=", "zoom", "(", "p0_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p1_img_vis", "=", "zoom", "(", "p1_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "\n", "return", "OrderedDict", "(", "[", "(", "'ref'", ",", "ref_img_vis", ")", ",", "\n", "(", "'p0'", ",", "p0_img_vis", ")", ",", "\n", "(", "'p1'", ",", "p1_img_vis", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.save": [[192, 198], ["dist_model.DistModel.save_network", "dist_model.DistModel.save_network", "dist_model.DistModel.save_network"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "path", ",", "label", ")", ":", "\n", "        ", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ".", "module", ",", "path", ",", "''", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ",", "path", ",", "''", ",", "label", ")", "\n", "", "self", ".", "save_network", "(", "self", ".", "rankLoss", ".", "net", ",", "path", ",", "'rank'", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.DistModel.update_learning_rate": [[199, 208], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "nepoch_decay", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "lr", "/", "nepoch_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "\n", "for", "param_group", "in", "self", ".", "optimizer_net", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "print", "(", "'update lr [%s] decay: %f -> %f'", "%", "(", "type", ",", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.score_2afc_dataset": [[209, 243], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.array", "data_loader.load_data", "func().data.cpu().numpy().flatten().tolist", "func().data.cpu().numpy().flatten().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.mean", "dict", "func().data.cpu().numpy().flatten", "func().data.cpu().numpy().flatten", "data[].cpu().numpy().flatten", "func().data.cpu().numpy", "func().data.cpu().numpy", "data[].cpu().numpy", "func().data.cpu", "func().data.cpu", "data[].cpu", "func", "func"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.base_data_loader.BaseDataLoader.load_data"], ["", "", "def", "score_2afc_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes Two Alternative Forced Choice (2AFC) score using\n        distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a TwoAFCDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return numpy array of length N\n    OUTPUTS\n        [0] - 2AFC score in [0,1], fraction of time func agrees with human evaluators\n        [1] - dictionary with following elements\n            d0s,d1s - N arrays containing distances between reference patch to perturbed patches \n            gts - N array in [0,1], preferred patch selected by human evaluators\n                (closer to \"0\" for left patch p0, \"1\" for right patch p1,\n                \"0.6\" means 60pct people preferred right patch, 40pct preferred left)\n            scores - N array in [0,1], corresponding to what percentage function agreed with humans\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "d0s", "=", "[", "]", "\n", "d1s", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "d0s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p0'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "d1s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'judge'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "d0s", "=", "np", ".", "array", "(", "d0s", ")", "\n", "d1s", "=", "np", ".", "array", "(", "d1s", ")", "\n", "gts", "=", "np", ".", "array", "(", "gts", ")", "\n", "scores", "=", "(", "d0s", "<", "d1s", ")", "*", "(", "1.", "-", "gts", ")", "+", "(", "d1s", "<", "d0s", ")", "*", "gts", "+", "(", "d1s", "==", "d0s", ")", "*", ".5", "\n", "\n", "return", "(", "np", ".", "mean", "(", "scores", ")", ",", "dict", "(", "d0s", "=", "d0s", ",", "d1s", "=", "d1s", ",", "gts", "=", "gts", ",", "scores", "=", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.dist_model.score_jnd_dataset": [[244, 282], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "models.voc_ap", "data_loader.load_data", "func().data.cpu().numpy().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.sum", "dict", "func().data.cpu().numpy", "data[].cpu().numpy().flatten", "func().data.cpu", "data[].cpu().numpy", "data[].cpu", "func"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.voc_ap", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.base_data_loader.BaseDataLoader.load_data"], ["", "def", "score_jnd_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes JND score using distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a JNDDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return pytorch array of length N\n    OUTPUTS\n        [0] - JND score in [0,1], mAP score (area under precision-recall curve)\n        [1] - dictionary with following elements\n            ds - N array containing distances between two patches shown to human evaluator\n            sames - N array containing fraction of people who thought the two patches were identical\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "ds", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "ds", "+=", "func", "(", "data", "[", "'p0'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'same'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "sames", "=", "np", ".", "array", "(", "gts", ")", "\n", "ds", "=", "np", ".", "array", "(", "ds", ")", "\n", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "ds", ")", "\n", "ds_sorted", "=", "ds", "[", "sorted_inds", "]", "\n", "sames_sorted", "=", "sames", "[", "sorted_inds", "]", "\n", "\n", "TPs", "=", "np", ".", "cumsum", "(", "sames_sorted", ")", "\n", "FPs", "=", "np", ".", "cumsum", "(", "1", "-", "sames_sorted", ")", "\n", "FNs", "=", "np", ".", "sum", "(", "sames_sorted", ")", "-", "TPs", "\n", "\n", "precs", "=", "TPs", "/", "(", "TPs", "+", "FPs", ")", "\n", "recs", "=", "TPs", "/", "(", "TPs", "+", "FNs", ")", "\n", "score", "=", "util", ".", "voc_ap", "(", "recs", ",", "precs", ")", "\n", "\n", "return", "(", "score", ",", "dict", "(", "ds", "=", "ds", ",", "sames", "=", "sames", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.pretrained_networks.squeezenet.__init__": [[7, 35], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.squeezenet1_1", "pretrained_networks.squeezenet.slice1.add_module", "pretrained_networks.squeezenet.slice2.add_module", "pretrained_networks.squeezenet.slice3.add_module", "pretrained_networks.squeezenet.slice4.add_module", "pretrained_networks.squeezenet.slice5.add_module", "pretrained_networks.squeezenet.slice6.add_module", "pretrained_networks.squeezenet.slice7.add_module", "pretrained_networks.squeezenet.parameters", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "squeezenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pretrained_features", "=", "tv", ".", "squeezenet1_1", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice6", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice7", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "7", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "11", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "11", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice6", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "13", ")", ":", "\n", "            ", "self", ".", "slice7", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.pretrained_networks.squeezenet.forward": [[36, 55], ["pretrained_networks.squeezenet.slice1", "pretrained_networks.squeezenet.slice2", "pretrained_networks.squeezenet.slice3", "pretrained_networks.squeezenet.slice4", "pretrained_networks.squeezenet.slice5", "pretrained_networks.squeezenet.slice6", "pretrained_networks.squeezenet.slice7", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "h", "=", "self", ".", "slice6", "(", "h", ")", "\n", "h_relu6", "=", "h", "\n", "h", "=", "self", ".", "slice7", "(", "h", ")", "\n", "h_relu7", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"SqueezeOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", ",", "'relu6'", ",", "'relu7'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ",", "h_relu6", ",", "h_relu7", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.pretrained_networks.alexnet.__init__": [[58, 83], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.alexnet", "pretrained_networks.alexnet.slice1.add_module", "pretrained_networks.alexnet.slice2.add_module", "pretrained_networks.alexnet.slice3.add_module", "pretrained_networks.alexnet.slice4.add_module", "pretrained_networks.alexnet.slice5.add_module", "pretrained_networks.alexnet.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alexnet_pretrained_features", "=", "tv", ".", "alexnet", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "#torch.save(alexnet_pretrained_features, \"alex.pth\")", "\n", "#alexnet_pretrained_features = torch.load(\"SIFID/PerceptualSimilarity/models/alex.pth\")", "\n", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.pretrained_networks.alexnet.forward": [[84, 99], ["pretrained_networks.alexnet.slice1", "pretrained_networks.alexnet.slice2", "pretrained_networks.alexnet.slice3", "pretrained_networks.alexnet.slice4", "pretrained_networks.alexnet.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "alexnet_outputs", "=", "namedtuple", "(", "\"AlexnetOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", "]", ")", "\n", "out", "=", "alexnet_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.pretrained_networks.vgg16.__init__": [[101, 126], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg16", "pretrained_networks.vgg16.slice1.add_module", "pretrained_networks.vgg16.slice2.add_module", "pretrained_networks.vgg16.slice3.add_module", "pretrained_networks.vgg16.slice4.add_module", "pretrained_networks.vgg16.slice5.add_module", "pretrained_networks.vgg16.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "vgg_pretrained_features", "=", "tv", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "#vgg_pretrained_features = torch.load(\"SIFID/PerceptualSimilarity/models/vgg16.pth\")", "\n", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.pretrained_networks.vgg16.forward": [[127, 142], ["pretrained_networks.vgg16.slice1", "pretrained_networks.vgg16.slice2", "pretrained_networks.vgg16.slice3", "pretrained_networks.vgg16.slice4", "pretrained_networks.vgg16.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5_3", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_3'", ",", "'relu4_3'", ",", "'relu5_3'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ",", "h_relu5_3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.pretrained_networks.resnet.__init__": [[146, 168], ["super().__init__", "torchvision.models.resnet18", "torchvision.models.resnet34", "torchvision.models.resnet50", "torchvision.models.resnet101", "torchvision.models.resnet152"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ",", "num", "=", "18", ")", ":", "\n", "        ", "super", "(", "resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "num", "==", "18", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "34", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet34", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "50", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "101", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet101", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "152", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet152", "(", "pretrained", "=", "pretrained", ")", "\n", "", "self", ".", "N_slices", "=", "5", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "net", ".", "conv1", "\n", "self", ".", "bn1", "=", "self", ".", "net", ".", "bn1", "\n", "self", ".", "relu", "=", "self", ".", "net", ".", "relu", "\n", "self", ".", "maxpool", "=", "self", ".", "net", ".", "maxpool", "\n", "self", ".", "layer1", "=", "self", ".", "net", ".", "layer1", "\n", "self", ".", "layer2", "=", "self", ".", "net", ".", "layer2", "\n", "self", ".", "layer3", "=", "self", ".", "net", ".", "layer3", "\n", "self", ".", "layer4", "=", "self", ".", "net", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.pretrained_networks.resnet.forward": [[169, 188], ["pretrained_networks.resnet.conv1", "pretrained_networks.resnet.bn1", "pretrained_networks.resnet.relu", "pretrained_networks.resnet.maxpool", "pretrained_networks.resnet.layer1", "pretrained_networks.resnet.layer2", "pretrained_networks.resnet.layer3", "pretrained_networks.resnet.layer4", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv1", "(", "X", ")", "\n", "h", "=", "self", ".", "bn1", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "maxpool", "(", "h", ")", "\n", "h", "=", "self", ".", "layer1", "(", "h", ")", "\n", "h_conv2", "=", "h", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "\n", "h_conv3", "=", "h", "\n", "h", "=", "self", ".", "layer3", "(", "h", ")", "\n", "h_conv4", "=", "h", "\n", "h", "=", "self", ".", "layer4", "(", "h", ")", "\n", "h_conv5", "=", "h", "\n", "\n", "outputs", "=", "namedtuple", "(", "\"Outputs\"", ",", "[", "'relu1'", ",", "'conv2'", ",", "'conv3'", ",", "'conv4'", ",", "'conv5'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_conv2", ",", "h_conv3", ",", "h_conv4", ",", "h_conv5", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.PerceptualLoss.__init__": [[14, 25], ["super().__init__", "print", "dist_model.DistModel", "__init__.PerceptualLoss.model.initialize", "print", "print", "__init__.PerceptualLoss.model.name"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.jnd_dataset.JNDDataset.initialize", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.base_dataset.BaseDataset.name"], ["\n", "if", "len", "(", "list_real_image", ")", ":", "\n", "        ", "sifid1", "=", "calculate_sifid_given_paths", "(", "list_real_image", ",", "list_fake_image", ",", "1", ",", "True", ",", "64", ")", "\n", "if", "not", "sifid_all_layers", ":", "\n", "            ", "return", "sifid1", ",", "None", ",", "None", ",", "None", "\n", "", "sifid2", "=", "calculate_sifid_given_paths", "(", "list_real_image", ",", "list_fake_image", ",", "1", ",", "True", ",", "192", ")", "\n", "sifid3", "=", "calculate_sifid_given_paths", "(", "list_real_image", ",", "list_fake_image", ",", "1", ",", "True", ",", "768", ")", "\n", "sifid4", "=", "calculate_sifid_given_paths", "(", "list_real_image", ",", "list_fake_image", ",", "1", ",", "True", ",", "2048", ")", "\n", "return", "sifid1", ",", "sifid2", ",", "sifid3", ",", "sifid4", "\n", "", "else", ":", "\n", "        ", "sifid1", "=", "calculate_fid_given_paths", "(", "[", "list_real_image", ",", "list_fake_image", "]", ",", "10", ",", "True", ",", "64", ")", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.PerceptualLoss.forward": [[26, 41], ["__init__.PerceptualLoss.model.forward"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward"], ["if", "not", "sifid_all_layers", ":", "\n", "            ", "return", "sifid1", ",", "None", ",", "None", ",", "None", "\n", "", "sifid2", "=", "calculate_fid_given_paths", "(", "[", "list_real_image", ",", "list_fake_image", "]", ",", "10", ",", "True", ",", "192", ")", "\n", "sifid3", "=", "calculate_fid_given_paths", "(", "[", "list_real_image", ",", "list_fake_image", "]", ",", "10", ",", "True", ",", "768", ")", "\n", "sifid4", "=", "calculate_fid_given_paths", "(", "[", "list_real_image", ",", "list_fake_image", "]", ",", "10", ",", "True", ",", "2048", ")", "\n", "return", "sifid1", ",", "sifid2", ",", "sifid3", ",", "sifid4", "\n", "\n", "\n", "", "", "def", "LPIPS", "(", "list_fake_image", ")", ":", "\n", "    ", "\"\"\"\n    Compute average LPIPS between pairs of fake images\n    \"\"\"", "\n", "dist_diversity", "=", "0", "\n", "count", "=", "0", "\n", "lst_im", "=", "list", "(", ")", "\n", "# --- unpack images --- #", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.normalize_tensor": [[42, 45], ["torch.sqrt", "torch.sum"], "function", ["None"], ["for", "i", "in", "range", "(", "len", "(", "list_fake_image", ")", ")", ":", "\n", "        ", "lst_im", ".", "append", "(", "ToTensor", "(", ")", "(", "list_fake_image", "[", "i", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# --- compute LPIPS between pairs of images --- #", "\n", "", "for", "i", "in", "range", "(", "len", "(", "lst_im", ")", ")", "[", ":", "100", "]", ":", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.l2": [[46, 48], ["numpy.mean"], "function", ["None"], ["        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "lst_im", ")", ")", "[", ":", "100", "]", ":", "\n", "            ", "dist_diversity", "+=", "p_model", ".", "forward", "(", "lst_im", "[", "i", "]", ",", "lst_im", "[", "j", "]", ")", "\n", "count", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.psnr": [[49, 51], ["numpy.log10", "numpy.mean"], "function", ["None"], ["", "", "return", "dist_diversity", "/", "count", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.dssim": [[52, 54], ["skimage.measure.compare_ssim"], "function", ["None"], ["", "def", "LPIPS_to_train", "(", "list_real_image", ",", "list_fake_image", ",", "names_fake_image", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.rgb2lab": [[102, 105], ["color.rgb2lab"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.rgb2lab"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2np": [[62, 65], ["tensor_obj[].cpu().float().numpy().transpose", "tensor_obj[].cpu().float().numpy", "tensor_obj[].cpu().float", "tensor_obj[].cpu"], "function", ["None"], ["        ", "list_fake", ".", "append", "(", "ToTensor", "(", ")", "(", "list_fake_image", "[", "i", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "list_real_image", ")", ")", ":", "\n", "        ", "lst_real", ".", "append", "(", "ToTensor", "(", ")", "(", "list_real_image", "[", "i", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# --- compute average minimum LPIPS from a fake image to real images --- #", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.np2tensor": [[66, 69], ["torch.Tensor", "np_obj[].transpose"], "function", ["None"], ["", "for", "i", "in", "range", "(", "len", "(", "list_fake", ")", ")", ":", "\n", "        ", "tens_im1", "=", "list_fake", "[", "i", "]", "\n", "cur_ans", "=", "list", "(", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "lst_real", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2tensorlab": [[70, 83], ["__init__.tensor2im", "color.rgb2lab", "__init__.np2tensor"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2im", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.rgb2lab", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.np2tensor"], ["            ", "tens_im2", "=", "lst_real", "[", "j", "]", "\n", "dist_to_real", "=", "p_model", ".", "forward", "(", "tens_im1", ",", "tens_im2", ")", "\n", "cur_ans", ".", "append", "(", "dist_to_real", ")", "\n", "", "cur_min", "=", "torch", ".", "min", "(", "torch", ".", "Tensor", "(", "cur_ans", ")", ")", "\n", "dist_to_real_dict", "[", "names_fake_image", "[", "i", "]", "]", "=", "float", "(", "cur_min", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "ans1", "+=", "cur_min", "\n", "count", "+=", "1", "\n", "", "ans", "=", "ans1", "/", "count", "\n", "return", "ans", ",", "dist_to_real_dict", "\n", "\n", "", "def", "mIoU", "(", "path_real_images", ",", "names_real_image", ",", "path_real_masks", ",", "names_real_masks", ",", "\n", "exp_folder", ",", "names_fake_image", ",", "names_fake_masks", ",", "im_res", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensorlab2tensor": [[84, 101], ["warnings.filterwarnings", "__init__.tensor2np", "numpy.clip", "color.rgb2lab", "__init__.np2tensor", "__init__.im2tensor", "color.lab2rgb", "rgb_back.astype", "numpy.isclose", "__init__.im2tensor", "lab.astype", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2np", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.rgb2lab", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.np2tensor", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.im2tensor", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.im2tensor"], ["\n", "metrics_tensor", ",", "results", ",", "results_acc", "=", "compute_miou", "(", "path_real_images", ",", "names_real_image", ",", "path_real_masks", ",", "names_real_masks", ",", "\n", "exp_folder", ",", "names_fake_image", ",", "names_fake_masks", ",", "im_res", ")", "\n", "return", "metrics_tensor", ",", "results", ",", "results_acc", "\n", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2im": [[151, 156], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.im2tensor": [[157, 161], ["torch.Tensor", "[].transpose"], "function", ["None"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.tensor2vec": [[115, 117], ["vector_tensor.data.cpu().numpy", "vector_tensor.data.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.__init__.voc_ap": [[118, 150], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.name": [[11, 13], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.initialize": [[14, 17], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "use_gpu", "=", "True", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.forward": [[18, 20], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.get_image_paths": [[52, 54], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.optimize_parameters": [[24, 26], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.get_current_visuals": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.get_current_errors": [[30, 32], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.save": [[33, 35], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.save_network": [[37, 41], ["os.path.join", "torch.save", "network.state_dict"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "path", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.load_network": [[43, 48], ["os.path.join", "print", "network.load_state_dict", "torch.load"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load"], ["", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "print", "(", "'Loading network from %s'", "%", "save_path", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.update_learning_rate": [[49, 51], ["None"], "methods", ["None"], ["", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.models.base_model.BaseModel.save_done": [[55, 58], ["np.save", "np.savetxt", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save"], ["", "def", "save_done", "(", "self", ",", "flag", "=", "False", ")", ":", "\n", "        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "flag", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "[", "flag", ",", "]", ",", "fmt", "=", "'%i'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.data_loader.CreateDataLoader": [[1, 7], ["CustomDatasetDataLoader", "CustomDatasetDataLoader.initialize"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.jnd_dataset.JNDDataset.initialize"], ["def", "CreateDataLoader", "(", "datafolder", ",", "dataroot", "=", "'./dataset'", ",", "dataset_mode", "=", "'2afc'", ",", "load_size", "=", "64", ",", "batch_size", "=", "1", ",", "serial_batches", "=", "True", ",", "nThreads", "=", "4", ")", ":", "\n", "    ", "from", "data", ".", "custom_dataset_data_loader", "import", "CustomDatasetDataLoader", "\n", "data_loader", "=", "CustomDatasetDataLoader", "(", ")", "\n", "# print(data_loader.name())", "\n", "data_loader", ".", "initialize", "(", "datafolder", ",", "dataroot", "=", "dataroot", "+", "'/'", "+", "dataset_mode", ",", "dataset_mode", "=", "dataset_mode", ",", "load_size", "=", "load_size", ",", "batch_size", "=", "batch_size", ",", "serial_batches", "=", "serial_batches", ",", "nThreads", "=", "nThreads", ")", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.custom_dataset_data_loader.CustomDatasetDataLoader.name": [[20, 22], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'CustomDatasetDataLoader'", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.custom_dataset_data_loader.CustomDatasetDataLoader.initialize": [[23, 34], ["data.base_data_loader.BaseDataLoader.initialize", "custom_dataset_data_loader.CreateDataset", "torch.utils.data.DataLoader", "isinstance", "os.path.join", "int"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.jnd_dataset.JNDDataset.initialize", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.custom_dataset_data_loader.CreateDataset"], ["", "def", "initialize", "(", "self", ",", "datafolders", ",", "dataroot", "=", "'./dataset'", ",", "dataset_mode", "=", "'2afc'", ",", "load_size", "=", "64", ",", "batch_size", "=", "1", ",", "serial_batches", "=", "True", ",", "nThreads", "=", "1", ")", ":", "\n", "        ", "BaseDataLoader", ".", "initialize", "(", "self", ")", "\n", "if", "(", "not", "isinstance", "(", "datafolders", ",", "list", ")", ")", ":", "\n", "            ", "datafolders", "=", "[", "datafolders", ",", "]", "\n", "", "data_root_folders", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "datafolder", ")", "for", "datafolder", "in", "datafolders", "]", "\n", "self", ".", "dataset", "=", "CreateDataset", "(", "data_root_folders", ",", "dataset_mode", "=", "dataset_mode", ",", "load_size", "=", "load_size", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "not", "serial_batches", ",", "\n", "num_workers", "=", "int", "(", "nThreads", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.custom_dataset_data_loader.CustomDatasetDataLoader.load_data": [[35, 37], ["None"], "methods", ["None"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.custom_dataset_data_loader.CustomDatasetDataLoader.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.custom_dataset_data_loader.CreateDataset": [[5, 18], ["JNDDataset.initialize", "TwoAFCDataset", "JNDDataset", "ValueError"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.jnd_dataset.JNDDataset.initialize"], ["def", "CreateDataset", "(", "dataroots", ",", "dataset_mode", "=", "'2afc'", ",", "load_size", "=", "64", ",", ")", ":", "\n", "    ", "dataset", "=", "None", "\n", "if", "dataset_mode", "==", "'2afc'", ":", "# human judgements", "\n", "        ", "from", "dataset", ".", "twoafc_dataset", "import", "TwoAFCDataset", "\n", "dataset", "=", "TwoAFCDataset", "(", ")", "\n", "", "elif", "dataset_mode", "==", "'jnd'", ":", "# human judgements", "\n", "        ", "from", "dataset", ".", "jnd_dataset", "import", "JNDDataset", "\n", "dataset", "=", "JNDDataset", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Dataset Mode [%s] not recognized.\"", "%", "self", ".", "dataset_mode", ")", "\n", "\n", "", "dataset", ".", "initialize", "(", "dataroots", ",", "load_size", "=", "load_size", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.ImageFolder.__init__": [[47, 59], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.ImageFolder.__getitem__": [[60, 69], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.ImageFolder.__len__": [[70, 72], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.is_image_file": [[21, 26], ["any", "any", "filename.endswith", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ",", "mode", "=", "'img'", ")", ":", "\n", "    ", "if", "(", "mode", "==", "'img'", ")", ":", "\n", "        ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "", "elif", "(", "mode", "==", "'np'", ")", ":", "\n", "        ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "NP_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.make_dataset": [[27, 42], ["isinstance", "os.path.isdir", "os.path.isdir", "sorted", "os.walk", "os.walk", "image_folder.is_image_file", "os.path.join", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.is_image_file"], ["", "", "def", "make_dataset", "(", "dirs", ",", "mode", "=", "'img'", ")", ":", "\n", "    ", "if", "(", "not", "isinstance", "(", "dirs", ",", "list", ")", ")", ":", "\n", "        ", "dirs", "=", "[", "dirs", ",", "]", "\n", "\n", "", "images", "=", "[", "]", "\n", "for", "dir", "in", "dirs", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "            ", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "is_image_file", "(", "fname", ",", "mode", "=", "mode", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "# print(\"Found %i images in %s\"%(len(images),root))", "\n", "", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.default_loader": [[43, 45], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.base_data_loader.BaseDataLoader.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.base_data_loader.BaseDataLoader.initialize": [[6, 8], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.base_data_loader.BaseDataLoader.load_data": [[9, 11], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.twoafc_dataset.TwoAFCDataset.initialize": [[11, 41], ["data.image_folder.make_dataset", "sorted", "data.image_folder.make_dataset", "sorted", "data.image_folder.make_dataset", "sorted", "transform_list.append", "torchvision.Compose", "data.image_folder.make_dataset", "sorted", "isinstance", "os.path.join", "os.path.join", "os.path.join", "torchvision.Scale", "torchvision.ToTensor", "torchvision.Normalize", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "dataroots", ",", "load_size", "=", "64", ")", ":", "\n", "        ", "if", "(", "not", "isinstance", "(", "dataroots", ",", "list", ")", ")", ":", "\n", "            ", "dataroots", "=", "[", "dataroots", ",", "]", "\n", "", "self", ".", "roots", "=", "dataroots", "\n", "self", ".", "load_size", "=", "load_size", "\n", "\n", "# image directory", "\n", "self", ".", "dir_ref", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'ref'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "ref_paths", "=", "make_dataset", "(", "self", ".", "dir_ref", ")", "\n", "self", ".", "ref_paths", "=", "sorted", "(", "self", ".", "ref_paths", ")", "\n", "\n", "self", ".", "dir_p0", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'p0'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "p0_paths", "=", "make_dataset", "(", "self", ".", "dir_p0", ")", "\n", "self", ".", "p0_paths", "=", "sorted", "(", "self", ".", "p0_paths", ")", "\n", "\n", "self", ".", "dir_p1", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'p1'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "p1_paths", "=", "make_dataset", "(", "self", ".", "dir_p1", ")", "\n", "self", ".", "p1_paths", "=", "sorted", "(", "self", ".", "p1_paths", ")", "\n", "\n", "transform_list", "=", "[", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Scale", "(", "load_size", ")", ")", "\n", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "# judgement directory", "\n", "self", ".", "dir_J", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'judge'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "judge_paths", "=", "make_dataset", "(", "self", ".", "dir_J", ",", "mode", "=", "'np'", ")", "\n", "self", ".", "judge_paths", "=", "sorted", "(", "self", ".", "judge_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.twoafc_dataset.TwoAFCDataset.__getitem__": [[42, 63], ["PIL.Image.open().convert", "twoafc_dataset.TwoAFCDataset.transform", "PIL.Image.open().convert", "twoafc_dataset.TwoAFCDataset.transform", "PIL.Image.open().convert", "twoafc_dataset.TwoAFCDataset.transform", "numpy.load().reshape", "torch.FloatTensor", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "p0_path", "=", "self", ".", "p0_paths", "[", "index", "]", "\n", "p0_img_", "=", "Image", ".", "open", "(", "p0_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p0_img", "=", "self", ".", "transform", "(", "p0_img_", ")", "\n", "\n", "p1_path", "=", "self", ".", "p1_paths", "[", "index", "]", "\n", "p1_img_", "=", "Image", ".", "open", "(", "p1_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p1_img", "=", "self", ".", "transform", "(", "p1_img_", ")", "\n", "\n", "ref_path", "=", "self", ".", "ref_paths", "[", "index", "]", "\n", "ref_img_", "=", "Image", ".", "open", "(", "ref_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "ref_img", "=", "self", ".", "transform", "(", "ref_img_", ")", "\n", "\n", "judge_path", "=", "self", ".", "judge_paths", "[", "index", "]", "\n", "# judge_img = (np.load(judge_path)*2.-1.).reshape((1,1,1,)) # [-1,1]", "\n", "judge_img", "=", "np", ".", "load", "(", "judge_path", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", ")", ")", "# [0,1]", "\n", "\n", "judge_img", "=", "torch", ".", "FloatTensor", "(", "judge_img", ")", "\n", "\n", "return", "{", "'p0'", ":", "p0_img", ",", "'p1'", ":", "p1_img", ",", "'ref'", ":", "ref_img", ",", "'judge'", ":", "judge_img", ",", "\n", "'p0_path'", ":", "p0_path", ",", "'p1_path'", ":", "p1_path", ",", "'ref_path'", ":", "ref_path", ",", "'judge_path'", ":", "judge_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.twoafc_dataset.TwoAFCDataset.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "p0_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.base_dataset.BaseDataset.__init__": [[4, 6], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.base_dataset.BaseDataset.name": [[7, 9], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.base_dataset.BaseDataset.initialize": [[10, 12], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.jnd_dataset.JNDDataset.initialize": [[11, 34], ["os.path.join", "data.image_folder.make_dataset", "sorted", "os.path.join", "data.image_folder.make_dataset", "sorted", "transform_list.append", "torchvision.Compose", "os.path.join", "data.image_folder.make_dataset", "sorted", "torchvision.Scale", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "dataroot", ",", "load_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "root", "=", "dataroot", "\n", "self", ".", "load_size", "=", "load_size", "\n", "\n", "self", ".", "dir_p0", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'p0'", ")", "\n", "self", ".", "p0_paths", "=", "make_dataset", "(", "self", ".", "dir_p0", ")", "\n", "self", ".", "p0_paths", "=", "sorted", "(", "self", ".", "p0_paths", ")", "\n", "\n", "self", ".", "dir_p1", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'p1'", ")", "\n", "self", ".", "p1_paths", "=", "make_dataset", "(", "self", ".", "dir_p1", ")", "\n", "self", ".", "p1_paths", "=", "sorted", "(", "self", ".", "p1_paths", ")", "\n", "\n", "transform_list", "=", "[", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Scale", "(", "load_size", ")", ")", "\n", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "# judgement directory", "\n", "self", ".", "dir_S", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'same'", ")", "\n", "self", ".", "same_paths", "=", "make_dataset", "(", "self", ".", "dir_S", ",", "mode", "=", "'np'", ")", "\n", "self", ".", "same_paths", "=", "sorted", "(", "self", ".", "same_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.jnd_dataset.JNDDataset.__getitem__": [[35, 51], ["PIL.Image.open().convert", "jnd_dataset.JNDDataset.transform", "PIL.Image.open().convert", "jnd_dataset.JNDDataset.transform", "numpy.load().reshape", "torch.FloatTensor", "PIL.Image.open", "PIL.Image.open", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "p0_path", "=", "self", ".", "p0_paths", "[", "index", "]", "\n", "p0_img_", "=", "Image", ".", "open", "(", "p0_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p0_img", "=", "self", ".", "transform", "(", "p0_img_", ")", "\n", "\n", "p1_path", "=", "self", ".", "p1_paths", "[", "index", "]", "\n", "p1_img_", "=", "Image", ".", "open", "(", "p1_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p1_img", "=", "self", ".", "transform", "(", "p1_img_", ")", "\n", "\n", "same_path", "=", "self", ".", "same_paths", "[", "index", "]", "\n", "same_img", "=", "np", ".", "load", "(", "same_path", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", ")", ")", "# [0,1]", "\n", "\n", "same_img", "=", "torch", ".", "FloatTensor", "(", "same_img", ")", "\n", "\n", "return", "{", "'p0'", ":", "p0_img", ",", "'p1'", ":", "p1_img", ",", "'same'", ":", "same_img", ",", "\n", "'p0_path'", ":", "p0_path", ",", "'p1_path'", ":", "p1_path", ",", "'same_path'", ":", "same_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.dataset.jnd_dataset.JNDDataset.__len__": [[52, 54], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "p0_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.get_activations": [[39, 108], ["model.eval", "numpy.empty", "tqdm", "print", "len", "print", "len", "len", "range", "numpy.array", "images.transpose.transpose", "torch.from_numpy().type", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy().reshape", "len", "print", "batch.cuda.cuda", "model", "torch.nn.functional.adaptive_avg_pool2d", "skimage.transform.resize", "torch.from_numpy", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy", "imageio.imread().astype", "imageio.imread", "torch.nn.functional.adaptive_avg_pool2d.cpu", "str"], "function", ["None"], ["def", "get_activations", "(", "files", ",", "model", ",", "batch_size", "=", "50", ",", "dims", "=", "2048", ",", "\n", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : Batch size of images for the model to process at once.\n                     Make sure that the number of samples is a multiple of\n                     the batch size, otherwise some samples are ignored. This\n                     behavior is retained to match the original FID score\n                     implementation.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the number\n                     of calculated batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "len", "(", "files", ")", "%", "batch_size", "!=", "0", ":", "\n", "        ", "print", "(", "(", "'Warning: number of images is not a multiple of the '", "\n", "'batch size. Some samples are going to be ignored.'", ")", ")", "\n", "", "if", "batch_size", ">", "len", "(", "files", ")", ":", "\n", "        ", "print", "(", "(", "'Warning: batch size is bigger than the data size. '", "\n", "'Setting batch size to data size'", ")", ")", "\n", "batch_size", "=", "len", "(", "files", ")", "\n", "", "n_batches", "=", "len", "(", "files", ")", "//", "batch_size", "\n", "n_used_imgs", "=", "n_batches", "*", "batch_size", "\n", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "n_used_imgs", ",", "dims", ")", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "n_batches", ")", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'\\rPropagating batch %d/%d'", "%", "(", "i", "+", "1", ",", "n_batches", ")", ",", "\n", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "images", "=", "np", ".", "array", "(", "[", "resize", "(", "imread", "(", "str", "(", "f", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "256", ",", "256", ",", "3", ")", ")", "\n", "for", "f", "in", "files", "[", "start", ":", "end", "]", "]", ")", "\n", "\n", "# Reshape to (n_images, 3, height, width)", "\n", "images", "=", "images", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "images", "/=", "255", "\n", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "#import matplotlib.pyplot as plt", "\n", "#import numpy", "\n", "\n", "#plt.imshow(np.rollaxis(batch[0].detach().cpu().numpy(), 0, 3))", "\n", "#plt.show()", "\n", "\n", "if", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "\n", "", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "shape", "[", "2", "]", "!=", "1", "or", "pred", ".", "shape", "[", "3", "]", "!=", "1", ":", "\n", "            ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_frechet_distance": [[110, 165], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n\n    Stable version by Dougal J. Sutherland.\n\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representative data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representative data set.\n\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "\n", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_activation_statistics": [[167, 193], ["tests_with_FID.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.get_activations"], ["", "def", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", "=", "50", ",", "\n", "dims", "=", "2048", ",", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : The images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size\n                     depends on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the\n                     number of calculated batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the inception model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "files", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ",", "verbose", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "#print(act.shape)", "\n", "#rint(mu.shape)", "\n", "#print(sigma.shape)", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID._compute_statistics_of_path": [[195, 207], ["pathlib.Path.endswith", "numpy.load", "np.load.close", "pathlib.Path", "tests_with_FID.calculate_activation_statistics", "list", "list", "pathlib.Path.glob", "pathlib.Path.glob"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_activation_statistics"], ["", "def", "_compute_statistics_of_path", "(", "path", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", ":", "\n", "    ", "if", "path", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "files", "=", "list", "(", "path", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "path", ".", "glob", "(", "'*.png'", ")", ")", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "\n", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_fid_given_paths": [[209, 228], ["inception.InceptionV3", "tests_with_FID._compute_statistics_of_path", "tests_with_FID._compute_statistics_of_path", "tests_with_FID.calculate_frechet_distance", "inception.InceptionV3.cuda", "os.path.exists", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID._compute_statistics_of_path", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID._compute_statistics_of_path", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.tests_with_FID.calculate_frechet_distance"], ["", "def", "calculate_fid_given_paths", "(", "paths", ",", "batch_size", ",", "cuda", ",", "dims", ")", ":", "\n", "    ", "\"\"\"Calculates the FID of two paths\"\"\"", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid path: %s'", "%", "p", ")", "\n", "\n", "", "", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ")", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "m1", ",", "s1", "=", "_compute_statistics_of_path", "(", "paths", "[", "0", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "m2", ",", "s2", "=", "_compute_statistics_of_path", "(", "paths", "[", "1", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.InceptionV3.__init__": [[31, 128], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.parameters", "inception.fid_inception_v3", "torchvision.models.inception_v3", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.fid_inception_v3"], ["\n", "super", "(", "InceptionV3_sifid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "#inception.load_state_dict(torch.load(\"SIFID/sifid_inc.pth\"))", "\n", "\n", "# Block 0: input to maxpool1", "\n", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "]", "\n", "\n", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "if", "self", ".", "last_needed_block", ">=", "4", ":", "\n", "            ", "block4", "=", "[", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block4", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.InceptionV3.forward": [[129, 164], ["enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block", "outp.append"], "methods", ["None"], ["\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "upsample", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.FIDInceptionA.__init__": [[195, 197], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.FIDInceptionA.forward": [[198, 216], ["inception.FIDInceptionA.branch1x1", "inception.FIDInceptionA.branch5x5_1", "inception.FIDInceptionA.branch5x5_2", "inception.FIDInceptionA.branch3x3dbl_1", "inception.FIDInceptionA.branch3x3dbl_2", "inception.FIDInceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.FIDInceptionC.__init__": [[220, 222], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.FIDInceptionC.forward": [[223, 244], ["inception.FIDInceptionC.branch1x1", "inception.FIDInceptionC.branch7x7_1", "inception.FIDInceptionC.branch7x7_2", "inception.FIDInceptionC.branch7x7_3", "inception.FIDInceptionC.branch7x7dbl_1", "inception.FIDInceptionC.branch7x7dbl_2", "inception.FIDInceptionC.branch7x7dbl_3", "inception.FIDInceptionC.branch7x7dbl_4", "inception.FIDInceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.FIDInceptionE_1.__init__": [[248, 250], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.FIDInceptionE_1.forward": [[251, 277], ["inception.FIDInceptionE_1.branch1x1", "inception.FIDInceptionE_1.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3dbl_1", "inception.FIDInceptionE_1.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionE_1.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3_2a", "inception.FIDInceptionE_1.branch3x3_2b", "inception.FIDInceptionE_1.branch3x3dbl_3a", "inception.FIDInceptionE_1.branch3x3dbl_3b"], "methods", ["None"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.FIDInceptionE_2.__init__": [[281, 283], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.FIDInceptionE_2.forward": [[284, 311], ["inception.FIDInceptionE_2.branch1x1", "inception.FIDInceptionE_2.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3dbl_1", "inception.FIDInceptionE_2.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.FIDInceptionE_2.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3_2a", "inception.FIDInceptionE_2.branch3x3_2b", "inception.FIDInceptionE_2.branch3x3dbl_3a", "inception.FIDInceptionE_2.branch3x3dbl_3b"], "methods", ["None"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.FID.inception.fid_inception_v3": [[166, 191], ["torchvision.models.inception_v3", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionE_1", "inception.FIDInceptionE_2", "load_state_dict_from_url", "models.inception_v3.load_state_dict"], "function", ["None"], []], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.Generator.__init__": [[94, 114], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "range", "print", "models.get_channels", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.G_block", "utils.to_rgb", "models.Generator.body.append", "models.Generator.rgb_converters.append", "NotImplementedError", "sum", "p.numel", "models.Generator.parameters"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.get_channels", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.to_rgb"], ["    ", "def", "__init__", "(", "self", ",", "config_G", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_blocks", "=", "config_G", "[", "\"num_blocks_g\"", "]", "\n", "self", ".", "noise_shape", "=", "config_G", "[", "\"noise_shape\"", "]", "\n", "self", ".", "noise_init_dim", "=", "config_G", "[", "\"noise_dim\"", "]", "\n", "self", ".", "norm_name", "=", "config_G", "[", "\"norm_G\"", "]", "\n", "self", ".", "no_masks", "=", "config_G", "[", "\"no_masks\"", "]", "\n", "self", ".", "num_mask_channels", "=", "config_G", "[", "\"num_mask_channels\"", "]", "\n", "num_of_channels", "=", "get_channels", "(", "\"Generator\"", ",", "config_G", "[", "\"ch_G\"", "]", ")", "[", "-", "self", ".", "num_blocks", "-", "1", ":", "]", "\n", "\n", "self", ".", "body", ",", "self", ".", "rgb_converters", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", ",", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "first_linear", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "noise_init_dim", ",", "num_of_channels", "[", "0", "]", ",", "self", ".", "noise_shape", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "cur_block", "=", "G_block", "(", "num_of_channels", "[", "i", "]", ",", "num_of_channels", "[", "i", "+", "1", "]", ",", "self", ".", "norm_name", ",", "i", "==", "0", ")", "\n", "cur_rgb", "=", "to_rgb", "(", "num_of_channels", "[", "i", "+", "1", "]", ")", "\n", "self", ".", "body", ".", "append", "(", "cur_block", ")", "\n", "self", ".", "rgb_converters", ".", "append", "(", "cur_rgb", ")", "\n", "", "if", "not", "self", ".", "no_masks", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"w/o --no_masks is not implemented in this release\"", ")", "\n", "", "print", "(", "\"Created Generator with %d parameters\"", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.Generator.generate": [[115, 132], ["dict", "list", "list", "models.Generator.first_linear", "range", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "list.append", "list.append", "NotImplementedError", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "generate", "(", "self", ",", "z", ",", "get_feat", "=", "False", ")", ":", "\n", "        ", "output", "=", "dict", "(", ")", "\n", "ans_images", "=", "list", "(", ")", "\n", "ans_feat", "=", "list", "(", ")", "\n", "x", "=", "self", ".", "first_linear", "(", "z", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "x", "=", "self", ".", "body", "[", "i", "]", "(", "x", ")", "\n", "im", "=", "torch", ".", "tanh", "(", "self", ".", "rgb_converters", "[", "i", "]", "(", "x", ")", ")", "\n", "ans_images", ".", "append", "(", "im", ")", "\n", "ans_feat", ".", "append", "(", "torch", ".", "tanh", "(", "x", ")", ")", "\n", "", "output", "[", "\"images\"", "]", "=", "ans_images", "\n", "\n", "if", "get_feat", ":", "\n", "             ", "output", "[", "\"features\"", "]", "=", "ans_feat", "\n", "", "if", "not", "self", ".", "no_masks", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"w/o --no_masks is not implemented in this release\"", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.G_block.__init__": [[135, 145], ["torch.Module.__init__", "min", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "utils.get_norm_by_name", "utils.get_norm_by_name", "torch", "torch", "torch", "torch", "torch", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.get_norm_by_name", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.get_norm_by_name"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "norm_name", ",", "is_first", ")", ":", "\n", "        ", "super", "(", "G_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "middle_channel", "=", "min", "(", "in_channel", ",", "out_channel", ")", "\n", "self", ".", "ups", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "if", "not", "is_first", "else", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "activ", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "conv1", "=", "sp_norm", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "middle_channel", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "conv2", "=", "sp_norm", "(", "nn", ".", "Conv2d", "(", "middle_channel", ",", "out_channel", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "norm1", "=", "get_norm_by_name", "(", "norm_name", ",", "in_channel", ")", "\n", "self", ".", "norm2", "=", "get_norm_by_name", "(", "norm_name", ",", "middle_channel", ")", "\n", "self", ".", "conv_sc", "=", "sp_norm", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.G_block.forward": [[146, 158], ["models.G_block.norm1", "models.G_block.activ", "models.G_block.ups", "models.G_block.conv1", "models.G_block.norm2", "models.G_block.activ", "models.G_block.conv2", "models.G_block.ups", "models.G_block.conv_sc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "x", "=", "self", ".", "ups", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "h", "=", "self", ".", "ups", "(", "h", ")", "\n", "h", "=", "self", ".", "conv_sc", "(", "h", ")", "\n", "return", "h", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.Discriminator.__init__": [[161, 207], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "feature_augmentation.Content_FA", "range", "feature_augmentation.Layout_FA", "range", "print", "models.get_channels", "NotImplementedError", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.D_block", "models.Discriminator.body_ll.append", "models.Discriminator.rgb_to_features.append", "models.Discriminator.final_ll.append", "models.D_block", "models.Discriminator.body_content.append", "models.Discriminator.final_content.append", "models.D_block", "models.Discriminator.body_layout.append", "models.Discriminator.final_layout.append", "utils.from_rgb", "utils.to_decision", "utils.to_decision", "utils.to_decision", "sum", "p.numel", "models.Discriminator.parameters"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.get_channels", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.from_rgb", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.to_decision", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.to_decision", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.to_decision"], ["    ", "def", "__init__", "(", "self", ",", "config_D", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_blocks", "=", "config_D", "[", "\"num_blocks_d\"", "]", "\n", "self", ".", "num_blocks_ll", "=", "config_D", "[", "\"num_blocks_d0\"", "]", "\n", "self", ".", "norm_name", "=", "config_D", "[", "\"norm_D\"", "]", "\n", "self", ".", "prob_FA", "=", "{", "\"content\"", ":", "config_D", "[", "\"prob_FA_con\"", "]", ",", "\"layout\"", ":", "config_D", "[", "\"prob_FA_lay\"", "]", "}", "\n", "self", ".", "no_masks", "=", "config_D", "[", "\"no_masks\"", "]", "\n", "self", ".", "num_mask_channels", "=", "config_D", "[", "\"num_mask_channels\"", "]", "\n", "self", ".", "bernoulli_warmup", "=", "config_D", "[", "\"bernoulli_warmup\"", "]", "\n", "num_of_channels", "=", "get_channels", "(", "\"Discriminator\"", ",", "config_D", "[", "\"ch_D\"", "]", ")", "[", ":", "self", ".", "num_blocks", "+", "1", "]", "\n", "if", "not", "self", ".", "no_masks", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"w/o --no_masks is not implemented in this release\"", ")", "\n", "", "self", ".", "feature_prev_ratio", "=", "8", "# for msg concatenation", "\n", "\n", "self", ".", "body_ll", ",", "self", ".", "body_content", ",", "self", ".", "body_layout", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", ",", "nn", ".", "ModuleList", "(", "[", "]", ")", ",", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "rgb_to_features", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "# for msg concatenation", "\n", "self", ".", "final_ll", ",", "self", ".", "final_content", ",", "self", ".", "final_layout", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", ",", "nn", ".", "ModuleList", "(", "[", "]", ")", ",", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "\n", "# --- D low-level --- #", "\n", "for", "i", "in", "range", "(", "self", ".", "num_blocks_ll", ")", ":", "\n", "            ", "msg_channels", "=", "num_of_channels", "[", "i", "]", "//", "self", ".", "feature_prev_ratio", "if", "i", ">", "0", "else", "num_of_channels", "[", "0", "]", "\n", "in_channels", "=", "num_of_channels", "[", "i", "]", "+", "msg_channels", "if", "i", ">", "0", "else", "num_of_channels", "[", "0", "]", "\n", "cur_block", "=", "D_block", "(", "in_channels", ",", "num_of_channels", "[", "i", "+", "1", "]", ",", "self", ".", "norm_name", ",", "is_first", "=", "i", "==", "0", ")", "\n", "self", ".", "body_ll", ".", "append", "(", "cur_block", ")", "\n", "self", ".", "rgb_to_features", ".", "append", "(", "from_rgb", "(", "msg_channels", ")", ")", "\n", "self", ".", "final_ll", ".", "append", "(", "to_decision", "(", "num_of_channels", "[", "i", "+", "1", "]", ",", "1", ")", ")", "\n", "\n", "# --- D content --- #", "\n", "", "self", ".", "content_FA", "=", "Content_FA", "(", "self", ".", "no_masks", ",", "self", ".", "prob_FA", "[", "\"content\"", "]", ",", "self", ".", "num_mask_channels", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_blocks_ll", ",", "self", ".", "num_blocks", ")", ":", "\n", "            ", "k", "=", "i", "-", "self", ".", "num_blocks_ll", "\n", "cur_block_content", "=", "D_block", "(", "num_of_channels", "[", "i", "]", ",", "num_of_channels", "[", "i", "+", "1", "]", ",", "self", ".", "norm_name", ",", "only_content", "=", "True", ")", "\n", "self", ".", "body_content", ".", "append", "(", "cur_block_content", ")", "\n", "out_channels", "=", "1", "if", "self", ".", "no_masks", "else", "self", ".", "num_mask_channels", "+", "1", "\n", "self", ".", "final_content", ".", "append", "(", "to_decision", "(", "num_of_channels", "[", "i", "+", "1", "]", ",", "out_channels", ")", ")", "\n", "\n", "# --- D layout --- #", "\n", "", "self", ".", "layout_FA", "=", "Layout_FA", "(", "self", ".", "no_masks", ",", "self", ".", "prob_FA", "[", "\"layout\"", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_blocks_ll", ",", "self", ".", "num_blocks", ")", ":", "\n", "            ", "k", "=", "i", "-", "self", ".", "num_blocks_ll", "\n", "in_channels", "=", "1", "if", "k", ">", "0", "else", "num_of_channels", "[", "i", "]", "\n", "cur_block_layout", "=", "D_block", "(", "in_channels", ",", "1", ",", "self", ".", "norm_name", ")", "\n", "self", ".", "body_layout", ".", "append", "(", "cur_block_layout", ")", "\n", "self", ".", "final_layout", ".", "append", "(", "to_decision", "(", "1", ",", "1", ")", ")", "\n", "", "print", "(", "\"Created Discriminator (%d+%d blocks) with %d parameters\"", "%", "\n", "(", "self", ".", "num_blocks_ll", ",", "self", ".", "num_blocks", "-", "self", ".", "num_blocks_ll", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.Discriminator.content_masked_attention": [[208, 221], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.one_hot().permute", "torch.one_hot().permute", "torch.one_hot().permute", "torch.one_hot().permute", "torch.one_hot().permute", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "mask_soft.detach", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["None"], ["", "def", "content_masked_attention", "(", "self", ",", "y", ",", "mask", ",", "for_real", ",", "epoch", ")", ":", "\n", "        ", "mask", "=", "F", ".", "interpolate", "(", "mask", ",", "size", "=", "(", "y", ".", "shape", "[", "2", "]", ",", "y", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "y_ans", "=", "torch", ".", "zeros_like", "(", "y", ")", ".", "repeat", "(", "mask", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "if", "not", "for_real", ":", "\n", "            ", "mask_soft", "=", "mask", "\n", "if", "epoch", "<", "self", ".", "bernoulli_warmup", ":", "\n", "                ", "mask_hard", "=", "torch", ".", "bernoulli", "(", "torch", ".", "clamp", "(", "mask", ",", "0.001", ",", "0.999", ")", ")", "\n", "", "else", ":", "\n", "                ", "mask_hard", "=", "F", ".", "one_hot", "(", "torch", ".", "argmax", "(", "mask", ",", "dim", "=", "1", ")", ",", "num_classes", "=", "mask_soft", ".", "shape", "[", "1", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "mask", "=", "mask_hard", "-", "mask_soft", ".", "detach", "(", ")", "+", "mask_soft", "\n", "", "for", "i_ch", "in", "range", "(", "mask", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "y_ans", "[", "i_ch", "*", "(", "y", ".", "shape", "[", "0", "]", ")", ":", "(", "i_ch", "+", "1", ")", "*", "(", "y", ".", "shape", "[", "0", "]", ")", "]", "=", "mask", "[", ":", ",", "i_ch", ":", "i_ch", "+", "1", ",", ":", ",", ":", "]", "*", "y", "\n", "", "return", "y_ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.Discriminator.discriminate": [[222, 257], ["range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "range", "range", "list", "list", "list", "output_ll.append", "NotImplementedError", "models.Discriminator.content_FA", "output_content.append", "models.Discriminator.layout_FA", "output_layout.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "discriminate", "(", "self", ",", "inputs", ",", "for_real", ",", "epoch", ")", ":", "\n", "        ", "images", "=", "inputs", "[", "\"images\"", "]", "\n", "masks", "=", "inputs", "[", "\"masks\"", "]", "if", "not", "self", ".", "no_masks", "else", "None", "\n", "output_ll", ",", "output_content", ",", "output_layout", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", ",", "\n", "\n", "# --- D low-level --- #", "\n", "y", "=", "self", ".", "rgb_to_features", "[", "0", "]", "(", "images", "[", "-", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_blocks_ll", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "y", "=", "torch", ".", "cat", "(", "(", "y", ",", "self", ".", "rgb_to_features", "[", "i", "]", "(", "images", "[", "-", "i", "-", "1", "]", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "y", "=", "self", ".", "body_ll", "[", "i", "]", "(", "y", ")", "\n", "output_ll", ".", "append", "(", "self", ".", "final_ll", "[", "i", "]", "(", "y", ")", ")", "\n", "\n", "# --- D content --- #", "\n", "", "y_con", "=", "y", "\n", "if", "not", "self", ".", "no_masks", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"w/o --no_masks is not implemented in this release\"", ")", "\n", "", "y_con", "=", "torch", ".", "mean", "(", "y_con", ",", "dim", "=", "(", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", "\n", "if", "for_real", ":", "\n", "            ", "y_con", "=", "self", ".", "content_FA", "(", "y_con", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_blocks_ll", ",", "self", ".", "num_blocks", ")", ":", "\n", "            ", "k", "=", "i", "-", "self", ".", "num_blocks_ll", "\n", "y_con", "=", "self", ".", "body_content", "[", "k", "]", "(", "y_con", ")", "\n", "output_content", ".", "append", "(", "self", ".", "final_content", "[", "k", "]", "(", "y_con", ")", ")", "\n", "\n", "# --- D layout --- #", "\n", "", "y_lay", "=", "y", "\n", "if", "for_real", ":", "\n", "            ", "y_lay", "=", "self", ".", "layout_FA", "(", "y", ",", "masks", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_blocks_ll", ",", "self", ".", "num_blocks", ")", ":", "\n", "            ", "k", "=", "i", "-", "self", ".", "num_blocks_ll", "\n", "y_lay", "=", "self", ".", "body_layout", "[", "k", "]", "(", "y_lay", ")", "\n", "output_layout", ".", "append", "(", "self", ".", "final_layout", "[", "k", "]", "(", "y_lay", ")", ")", "\n", "\n", "", "return", "{", "\"low-level\"", ":", "output_ll", ",", "\"content\"", ":", "output_content", ",", "\"layout\"", ":", "output_layout", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.D_block.__init__": [[260, 276], ["torch.Module.__init__", "min", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "utils.get_norm_by_name", "utils.get_norm_by_name", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch", "torch", "torch", "torch", "torch", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.get_norm_by_name", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.get_norm_by_name"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "norm_name", ",", "is_first", "=", "False", ",", "only_content", "=", "False", ")", ":", "\n", "        ", "super", "(", "D_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "middle_channel", "=", "min", "(", "in_channel", ",", "out_channel", ")", "\n", "ker_size", ",", "padd_size", "=", "(", "1", ",", "0", ")", "if", "only_content", "else", "(", "3", ",", "1", ")", "\n", "self", ".", "is_first", "=", "is_first", "\n", "self", ".", "activ", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "conv1", "=", "sp_norm", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "middle_channel", ",", "ker_size", ",", "padding", "=", "padd_size", ")", ")", "\n", "self", ".", "conv2", "=", "sp_norm", "(", "nn", ".", "Conv2d", "(", "middle_channel", ",", "out_channel", ",", "ker_size", ",", "padding", "=", "padd_size", ")", ")", "\n", "self", ".", "norm1", "=", "get_norm_by_name", "(", "norm_name", ",", "in_channel", ")", "\n", "self", ".", "norm2", "=", "get_norm_by_name", "(", "norm_name", ",", "middle_channel", ")", "\n", "self", ".", "down", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "if", "not", "only_content", "else", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "learned_sc", "=", "in_channel", "!=", "out_channel", "or", "not", "only_content", "\n", "if", "learned_sc", ":", "\n", "            ", "self", ".", "conv_sc", "=", "sp_norm", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_sc", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.D_block.forward": [[277, 292], ["models.D_block.conv1", "models.D_block.norm2", "models.D_block.activ", "models.D_block.conv2", "models.D_block.conv_sc", "models.D_block.norm1", "models.D_block.activ", "models.D_block.down", "models.D_block.down"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "x", "\n", "if", "not", "self", ".", "is_first", ":", "\n", "            ", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "if", "not", "x", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "down", "(", "x", ")", "\n", "", "h", "=", "self", ".", "conv_sc", "(", "h", ")", "\n", "if", "not", "x", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "h", "=", "self", ".", "down", "(", "h", ")", "\n", "", "return", "x", "+", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.create_models": [[12, 42], ["models.prepare_config", "Generator().to", "Generator().to.apply", "os.path.join", "copy.deepcopy", "Discriminator().to", "Discriminator().to.apply", "Generator().to.load_state_dict", "print", "Discriminator().to.load_state_dict", "print", "models.Generator", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "netEMA.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models.Discriminator", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join", "os.path.join", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.prepare_config", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load"], ["def", "create_models", "(", "opt", ",", "recommended_config", ")", ":", "\n", "    ", "\"\"\"\n    Build the model configurations and create models\n    \"\"\"", "\n", "config_G", ",", "config_D", "=", "prepare_config", "(", "opt", ",", "recommended_config", ")", "\n", "\n", "# --- generator and EMA --- #", "\n", "netG", "=", "Generator", "(", "config_G", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netG", ".", "apply", "(", "weights_init", ")", "\n", "netEMA", "=", "copy", ".", "deepcopy", "(", "netG", ")", "if", "not", "opt", ".", "no_EMA", "else", "None", "\n", "\n", "# --- discriminator --- #", "\n", "if", "opt", ".", "phase", "==", "\"train\"", ":", "\n", "        ", "netD", "=", "Discriminator", "(", "config_D", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netD", ".", "apply", "(", "weights_init", ")", "\n", "", "else", ":", "\n", "        ", "netD", "=", "None", "\n", "\n", "# --- load previous ckpt  --- #", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "exp_name", ",", "\"models\"", ")", "\n", "if", "opt", ".", "continue_train", "or", "opt", ".", "phase", "==", "\"test\"", ":", "\n", "        ", "netG", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "opt", ".", "continue_epoch", ")", "+", "\"_G.pth\"", ")", ")", ")", "\n", "print", "(", "\"Loaded Generator checkpoint\"", ")", "\n", "if", "not", "opt", ".", "no_EMA", ":", "\n", "            ", "netEMA", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "opt", ".", "continue_epoch", ")", "+", "\"_G_EMA.pth\"", ")", ")", ")", "\n", "print", "(", "\"Loaded Generator_EMA checkpoint\"", ")", "\n", "", "", "if", "opt", ".", "continue_train", "and", "opt", ".", "phase", "==", "\"train\"", ":", "\n", "        ", "netD", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "opt", ".", "continue_epoch", ")", "+", "\"_D.pth\"", ")", ")", ")", "\n", "print", "(", "\"Loaded Discriminator checkpoint\"", ")", "\n", "", "return", "netG", ",", "netD", ",", "netEMA", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.create_optimizers": [[44, 48], ["torch.Adam", "torch.Adam", "netG.parameters", "netD.parameters"], "function", ["None"], ["", "def", "create_optimizers", "(", "netG", ",", "netD", ",", "opt", ")", ":", "\n", "    ", "optimizerG", "=", "optim", ".", "Adam", "(", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr_g", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "opt", ".", "beta2", ")", ")", "\n", "optimizerD", "=", "optim", ".", "Adam", "(", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr_d", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "opt", ".", "beta2", ")", ")", "\n", "return", "optimizerG", ",", "optimizerD", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.prepare_config": [[50, 70], ["dict", "dict.update", "dict", "dict.update", "dict", "dict", "getattr", "getattr"], "function", ["None"], ["", "def", "prepare_config", "(", "opt", ",", "recommended_config", ")", ":", "\n", "    ", "\"\"\"\n    Create model configuration dicts based on recommended settings and input parameters.\n    Recommended num_blocks_d and num_blocks_d0 can be overridden by user inputs\n    \"\"\"", "\n", "G_keys_recommended", "=", "[", "'noise_shape'", ",", "'num_blocks_g'", ",", "\"no_masks\"", ",", "\"num_mask_channels\"", "]", "\n", "D_keys_recommended", "=", "[", "'num_blocks_d'", ",", "'num_blocks_d0'", ",", "\"no_masks\"", ",", "\"num_mask_channels\"", "]", "\n", "G_keys_user", "=", "[", "\"ch_G\"", ",", "\"norm_G\"", ",", "\"noise_dim\"", "]", "\n", "D_keys_user", "=", "[", "\"ch_D\"", ",", "\"norm_D\"", ",", "\"prob_FA_con\"", ",", "\"prob_FA_lay\"", ",", "\"bernoulli_warmup\"", "]", "\n", "\n", "config_G", "=", "dict", "(", "(", "k", ",", "recommended_config", "[", "k", "]", ")", "for", "k", "in", "G_keys_recommended", ")", "\n", "config_G", ".", "update", "(", "dict", "(", "(", "k", ",", "getattr", "(", "opt", ",", "k", ")", ")", "for", "k", "in", "G_keys_user", ")", ")", "\n", "config_D", "=", "dict", "(", "(", "k", ",", "recommended_config", "[", "k", "]", ")", "for", "k", "in", "D_keys_recommended", ")", "\n", "config_D", ".", "update", "(", "dict", "(", "(", "k", ",", "getattr", "(", "opt", ",", "k", ")", ")", "for", "k", "in", "D_keys_user", ")", ")", "\n", "\n", "if", "opt", ".", "num_blocks_d", ">", "0", ":", "\n", "        ", "config_D", "[", "\"num_blocks_d\"", "]", "=", "opt", ".", "num_blocks_d", "\n", "", "if", "opt", ".", "num_blocks_d0", ">", "0", ":", "\n", "        ", "config_D", "[", "\"num_blocks_d0\"", "]", "=", "opt", ".", "num_blocks_d0", "\n", "", "return", "config_G", ",", "config_D", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.weights_init": [[73, 80], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'norm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.models.get_channels": [[82, 91], ["list", "list.append", "int"], "function", ["None"], ["", "", "def", "get_channels", "(", "which_net", ",", "base_multipler", ")", ":", "\n", "    ", "channel_multipliers", "=", "{", "\n", "\"Generator\"", ":", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "4", ",", "2", ",", "1", "]", ",", "\n", "\"Discriminator\"", ":", "[", "1", ",", "2", ",", "4", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", "\n", "}", "\n", "ans", "=", "list", "(", ")", "\n", "for", "item", "in", "channel_multipliers", "[", "which_net", "]", ":", "\n", "        ", "ans", ".", "append", "(", "int", "(", "item", "*", "base_multipler", ")", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.visualizer.__init__": [[13, 24], ["os.path.join", "os.path.join", "tracking.losses_saver", "tracking.image_saver", "tracking.network_saver", "os.path.join", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "folder_losses", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "exp_name", ",", "\"losses\"", ")", "\n", "\n", "folder_networks", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "exp_name", ",", "\"models\"", ")", "\n", "if", "opt", ".", "phase", "==", "\"train\"", ":", "\n", "            ", "folder_images", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "exp_name", ",", "\"images\"", ")", "\n", "", "else", ":", "\n", "            ", "folder_images", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "exp_name", ",", "\"evaluation\"", ")", "\n", "", "self", ".", "losses_saver", "=", "losses_saver", "(", "folder_losses", ",", "opt", ".", "continue_epoch", ")", "\n", "self", ".", "image_saver", "=", "image_saver", "(", "folder_images", ",", "opt", ".", "no_masks", ",", "opt", ".", "phase", ",", "opt", ".", "continue_epoch", ")", "\n", "self", ".", "network_saver", "=", "network_saver", "(", "folder_networks", ",", "opt", ".", "no_EMA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.visualizer.track_losses_logits": [[25, 27], ["tracking.visualizer.losses_saver.track"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.track"], ["", "def", "track_losses_logits", "(", "self", ",", "logits", ",", "losses", ")", ":", "\n", "        ", "self", ".", "losses_saver", ".", "track", "(", "logits", ",", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.visualizer.save_losses_logits": [[28, 30], ["tracking.visualizer.losses_saver.save"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save"], ["", "def", "save_losses_logits", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "losses_saver", ".", "save", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.visualizer.save_batch": [[31, 33], ["tracking.visualizer.image_saver.save"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save"], ["", "def", "save_batch", "(", "self", ",", "fake", ",", "epoch", ",", "i", "=", "None", ")", ":", "\n", "        ", "self", ".", "image_saver", ".", "save", "(", "fake", ",", "epoch", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.visualizer.save_networks": [[34, 36], ["tracking.visualizer.network_saver.save"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save"], ["", "def", "save_networks", "(", "self", ",", "netG", ",", "netD", ",", "netEMA", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "network_saver", ".", "save", "(", "netG", ",", "netD", ",", "netEMA", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.__init__": [[39, 49], ["os.makedirs", "dict", "dict", "dict", "dict", "dict", "tracking.losses_saver.load"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load"], ["    ", "def", "__init__", "(", "self", ",", "folder_losses", ",", "continue_epoch", ")", ":", "\n", "        ", "self", ".", "folder_losses", "=", "folder_losses", "\n", "os", ".", "makedirs", "(", "folder_losses", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "freq_smooth", "=", "50", "\n", "self", ".", "logits", ",", "self", ".", "losses", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "self", ".", "cur_estimates", ",", "self", ".", "cur_count", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "self", ".", "cur_log", "=", "dict", "(", ")", "\n", "self", ".", "counter", "=", "0", "\n", "if", "continue_epoch", ">", "0", ":", "\n", "            ", "self", ".", "logits", ",", "self", ".", "losses", "=", "self", ".", "load", "(", "[", "\"logits\"", ",", "\"losses\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.load": [[50, 61], ["list", "dict", "list.append", "open", "f.readlines", "line.replace().split", "os.path.join", "line.replace"], "methods", ["None"], ["", "", "def", "load", "(", "self", ",", "lst", ")", ":", "\n", "        ", "ans", "=", "list", "(", ")", "\n", "for", "item", "in", "lst", ":", "\n", "            ", "cur_dict", "=", "dict", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder_losses", ",", "item", "+", "\".csv\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "cur_file", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "cur_file", ":", "\n", "                ", "elements", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\",\"", ")", "\n", "cur_dict", "[", "elements", "[", "0", "]", "]", "=", "elements", "[", "1", ":", "]", "\n", "", "ans", ".", "append", "(", "cur_dict", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.collect_logits": [[62, 69], ["logit.detach().cpu().numpy().mean", "logit.detach().cpu().numpy", "logit.detach().cpu", "logit.detach"], "methods", ["None"], ["", "def", "collect_logits", "(", "self", ",", "logits", ")", ":", "\n", "        ", "ans", ",", "cou", "=", "0", ",", "0", "\n", "for", "item", "in", "logits", ":", "\n", "            ", "for", "logit", "in", "logits", "[", "item", "]", ":", "\n", "                ", "ans", "+=", "logit", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "mean", "(", ")", "\n", "cou", "+=", "1", "\n", "", "", "return", "ans", "/", "cou", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.track": [[70, 92], ["dict", "dict", "dict", "tracking.losses_saver.cur_log.get", "tracking.losses_saver.cur_estimates.get", "float", "tracking.losses_saver.cur_count.get", "tracking.losses_saver.losses.get", "tracking.losses_saver.collect_logits", "tracking.losses_saver.logits.get", "tracking.losses_saver.logits.get", "tracking.losses_saver.logits.get", "[].detach().cpu", "str", "str", "str", "str", "numpy.quantile", "numpy.quantile", "numpy.quantile", "[].detach"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.collect_logits"], ["", "def", "track", "(", "self", ",", "logits", ",", "losses", ")", ":", "\n", "# --- losses --- #", "\n", "        ", "for", "loss_type", "in", "losses", ":", "\n", "            ", "for", "loss_part", "in", "losses", "[", "loss_type", "]", ":", "\n", "                ", "self", ".", "cur_estimates", "[", "loss_type", "+", "\"__\"", "+", "loss_part", "]", "=", "self", ".", "cur_estimates", ".", "get", "(", "loss_type", "+", "\"__\"", "+", "loss_part", ",", "0", ")", "+", "float", "(", "losses", "[", "loss_type", "]", "[", "loss_part", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "self", ".", "cur_count", "[", "loss_type", "+", "\"__\"", "+", "loss_part", "]", "=", "self", ".", "cur_count", ".", "get", "(", "loss_type", "+", "\"__\"", "+", "loss_part", ",", "0", ")", "+", "1", "\n", "", "", "if", "self", ".", "counter", "%", "self", ".", "freq_smooth", "==", "self", ".", "freq_smooth", "-", "1", ":", "\n", "            ", "for", "loss", "in", "self", ".", "cur_estimates", ":", "\n", "                ", "self", ".", "losses", "[", "loss", "]", "=", "self", ".", "losses", ".", "get", "(", "loss", ",", "[", "]", ")", "+", "[", "str", "(", "self", ".", "cur_estimates", "[", "loss", "]", "/", "self", ".", "cur_count", "[", "loss", "]", ")", "]", "\n", "", "self", ".", "cur_estimates", ",", "self", ".", "cur_count", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "\n", "# --- logits --- #", "\n", "", "for", "item", "in", "[", "\"Dreal\"", ",", "\"Dfake\"", "]", ":", "\n", "            ", "self", ".", "cur_log", "[", "item", "]", "=", "self", ".", "cur_log", ".", "get", "(", "item", ",", "[", "]", ")", "+", "[", "self", ".", "collect_logits", "(", "logits", "[", "item", "]", ")", "]", "\n", "", "if", "self", ".", "counter", "%", "self", ".", "freq_smooth", "==", "self", ".", "freq_smooth", "-", "1", ":", "\n", "            ", "for", "item", "in", "[", "\"Dreal\"", ",", "\"Dfake\"", "]", ":", "\n", "                ", "self", ".", "logits", "[", "item", "+", "\".1\"", "]", "=", "self", ".", "logits", ".", "get", "(", "item", "+", "\".1\"", ",", "[", "]", ")", "+", "[", "str", "(", "quant", "(", "self", ".", "cur_log", "[", "item", "]", ",", "0.1", ")", ")", "]", "\n", "self", ".", "logits", "[", "item", "+", "\".5\"", "]", "=", "self", ".", "logits", ".", "get", "(", "item", "+", "\".5\"", ",", "[", "]", ")", "+", "[", "str", "(", "quant", "(", "self", ".", "cur_log", "[", "item", "]", ",", "0.5", ")", ")", "]", "\n", "self", ".", "logits", "[", "item", "+", "\".9\"", "]", "=", "self", ".", "logits", ".", "get", "(", "item", "+", "\".9\"", ",", "[", "]", ")", "+", "[", "str", "(", "quant", "(", "self", ".", "cur_log", "[", "item", "]", ",", "0.9", ")", ")", "]", "\n", "", "self", ".", "cur_estimates_log", "=", "dict", "(", ")", "\n", "", "self", ".", "counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.losses_saver.save": [[93, 102], ["open", "open", "os.path.join", "f.writelines", "os.path.join", "f.writelines"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "# --- losses --- #", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder_losses", ",", "\"losses.csv\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "item", "in", "self", ".", "losses", ":", "\n", "                ", "f", ".", "writelines", "(", "[", "item", ",", "\",\"", ",", "\",\"", ".", "join", "(", "self", ".", "losses", "[", "item", "]", ")", ",", "\"\\n\"", "]", ")", "\n", "# --- logits --- #", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder_losses", ",", "\"logits.csv\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "item", "in", "self", ".", "logits", ":", "\n", "                ", "f", ".", "writelines", "(", "[", "item", ",", "\",\"", ",", "\",\"", ".", "join", "(", "self", ".", "logits", "[", "item", "]", ")", ",", "\"\\n\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.image_saver.__init__": [[105, 114], ["os.makedirs", "os.makedirs", "os.path.join", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "folder_images", ",", "no_masks", ",", "phase", ",", "continue_epoch", ")", ":", "\n", "        ", "self", ".", "folder_images", "=", "folder_images", "\n", "self", ".", "no_masks", "=", "no_masks", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "ext", "=", "\".png\"", "if", "self", ".", "phase", "==", "\"test\"", "else", "\".jpg\"", "\n", "if", "phase", "==", "\"test\"", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "folder_images", ",", "str", "(", "continue_epoch", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_images", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.image_saver.save": [[115, 122], ["torchvision.utils.save_image", "str", "os.path.join", "NotImplementedError", "str", "str"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.util.util.save_image"], ["", "", "def", "save", "(", "self", ",", "fake", ",", "epoch", ",", "i", "=", "None", ")", ":", "\n", "        ", "epoch", "=", "str", "(", "epoch", ")", "+", "\"/\"", "+", "str", "(", "i", ")", "if", "i", "is", "not", "None", "else", "str", "(", "epoch", ")", "\n", "\n", "images", "=", "(", "fake", "[", "\"images\"", "]", "[", "-", "1", "]", "+", "1", ")", "/", "2", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "images", ",", "os", ".", "path", ".", "join", "(", "self", ".", "folder_images", ",", "epoch", "+", "self", ".", "ext", ")", ")", "\n", "if", "not", "self", ".", "no_masks", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"w/o --no_masks is not implemented in this release\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.image_saver.paint_mask": [[123, 132], ["torch.zeros", "range", "numpy.argmax", "PIL.Image.fromarray().convert", "im.convert.convert.putpalette", "im.convert.convert.convert", "torch.Tensor().permute", "masks[].cpu().detach().numpy", "PIL.Image.fromarray", "torch.Tensor", "masks[].cpu().detach", "numpy.argmax.astype", "numpy.array", "masks[].cpu"], "methods", ["None"], ["", "", "def", "paint_mask", "(", "self", ",", "masks", ")", ":", "\n", "        ", "ans", "=", "torch", ".", "zeros", "(", "(", "masks", ".", "shape", "[", "0", "]", ",", "3", ",", "masks", ".", "shape", "[", "2", "]", ",", "masks", ".", "shape", "[", "3", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "masks", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "max_mask", "=", "np", ".", "argmax", "(", "masks", "[", "i", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "max_mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "\"P\"", ")", "\n", "im", ".", "putpalette", "(", "PALETTE", ")", "\n", "im", "=", "im", ".", "convert", "(", "\"RGB\"", ")", "\n", "ans", "[", "i", "]", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "im", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.__init__": [[135, 139], ["os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "folder_networks", ",", "no_EMA", ")", ":", "\n", "        ", "self", ".", "folder_networks", "=", "folder_networks", "\n", "self", ".", "no_EMA", "=", "no_EMA", "\n", "os", ".", "makedirs", "(", "folder_networks", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save": [[140, 147], ["torch.save", "torch.save", "netG.state_dict", "os.path.join", "netD.state_dict", "os.path.join", "torch.save", "open", "f.write", "netEMA.state_dict", "os.path.join", "os.path.join", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.tracking.network_saver.save"], ["", "def", "save", "(", "self", ",", "netG", ",", "netD", ",", "netEMA", ",", "epoch", ")", ":", "\n", "        ", "torch", ".", "save", "(", "netG", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "folder_networks", ",", "str", "(", "epoch", ")", "+", "\"_G.pth\"", ")", ")", "\n", "torch", ".", "save", "(", "netD", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "folder_networks", ",", "str", "(", "epoch", ")", "+", "\"_D.pth\"", ")", ")", "\n", "if", "not", "self", ".", "no_EMA", ":", "\n", "            ", "torch", ".", "save", "(", "netEMA", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "folder_networks", ",", "str", "(", "epoch", ")", "+", "\"_G_EMA.pth\"", ")", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder_networks", ",", "\"latest_epoch.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.recommended_config.get_recommended_config": [[17, 43], ["dict", "sorted", "round", "round"], "function", ["None"], ["def", "get_recommended_config", "(", "orig_res", ")", ":", "\n", "    ", "\"\"\"\n    Given the resolution of original training images, this function produces\n    the recommended model configuration and the training image resolution.\n    \"\"\"", "\n", "ans", "=", "dict", "(", ")", "\n", "for", "num_g", "in", "recommended_blocks_by_res", ":", "\n", "        ", "multiplier", "=", "2", "**", "(", "num_g", "-", "1", ")", "\n", "ok_1", "=", "recommended_noise_range", "[", "0", "]", "<=", "orig_res", "[", "0", "]", "/", "multiplier", "<=", "recommended_noise_range", "[", "1", "]", "\n", "ok_2", "=", "recommended_noise_range", "[", "0", "]", "<=", "orig_res", "[", "1", "]", "/", "multiplier", "<=", "recommended_noise_range", "[", "1", "]", "\n", "ans", "[", "num_g", "]", "=", "(", "ok_1", ",", "ok_2", ")", "\n", "\n", "", "ok_1", "=", "ok_2", "=", "False", "\n", "for", "num_g", "in", "sorted", "(", "ans", ")", ":", "\n", "        ", "if", "ans", "[", "num_g", "]", "[", "0", "]", ":", "\n", "            ", "ok_1", "=", "True", "\n", "", "if", "ans", "[", "num_g", "]", "[", "1", "]", ":", "\n", "            ", "ok_2", "=", "True", "\n", "", "if", "ok_1", "and", "ok_2", ":", "\n", "            ", "recommended_G", "=", "num_g", "\n", "break", "\n", "\n", "", "", "noise_shape", "=", "(", "round", "(", "orig_res", "[", "0", "]", "/", "2", "**", "(", "recommended_G", "-", "1", ")", ")", ",", "round", "(", "orig_res", "[", "1", "]", "/", "2", "**", "(", "recommended_G", "-", "1", ")", ")", ")", "\n", "resolution", "=", "(", "noise_shape", "[", "0", "]", "*", "2", "**", "(", "recommended_G", "-", "1", ")", ",", "noise_shape", "[", "1", "]", "*", "2", "**", "(", "recommended_G", "-", "1", ")", ")", "\n", "recommended_D", ",", "recommended_D0", "=", "recommended_blocks_by_res", "[", "recommended_G", "]", "\n", "return", "resolution", ",", "[", "noise_shape", ",", "recommended_G", ",", "recommended_D", ",", "recommended_D0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.__init__": [[29, 49], ["os.path.join", "os.path.join", "dataloading.Dataset.get_frames_list", "recommended_config.get_recommended_config", "print", "len", "dataloading.Dataset.get_im_resolution", "os.path.isdir", "NotImplementedError", "len"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.get_frames_list", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.recommended_config.get_recommended_config", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.get_im_resolution"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"\n        The dataset class. Supports both regimes *with* and *without* segmentation masks.\n        \"\"\"", "\n", "self", ".", "device", "=", "opt", ".", "device", "\n", "# --- images --- #", "\n", "self", ".", "root_images", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "dataset_name", ",", "\"image\"", ")", "\n", "self", ".", "root_masks", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "dataset_name", ",", "\"mask\"", ")", "\n", "self", ".", "list_imgs", "=", "self", ".", "get_frames_list", "(", "self", ".", "root_images", ")", "\n", "assert", "len", "(", "self", ".", "list_imgs", ")", ">", "0", ",", "\"Found no images\"", "\n", "self", ".", "image_resolution", ",", "self", ".", "recommended_config", "=", "get_recommended_config", "(", "self", ".", "get_im_resolution", "(", "opt", ".", "max_size", ")", ")", "\n", "\n", "# --- masks --- #", "\n", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "root_masks", ")", "and", "not", "opt", ".", "no_masks", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"w/o --no_masks is not implemented in this release\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "no_masks", "=", "True", "\n", "self", ".", "num_mask_channels", "=", "None", "\n", "\n", "", "print", "(", "\"Created a dataset of size =\"", ",", "len", "(", "self", ".", "list_imgs", ")", ",", "\"with image resolution\"", ",", "self", ".", "image_resolution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.get_frames_list": [[50, 52], ["sorted", "os.listdir"], "methods", ["None"], ["", "def", "get_frames_list", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "sorted", "(", "os", ".", "listdir", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.__len__": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "100000000", "# so first epoch finishes only with break", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.get_im_resolution": [[56, 73], ["list", "dataloading.Dataset.bound_resolution", "PIL.Image.open().convert", "list.append", "len", "warnings.warn", "set", "sum", "PIL.Image.open", "len", "os.path.join", "sum"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.bound_resolution"], ["", "def", "get_im_resolution", "(", "self", ",", "max_size", ")", ":", "\n", "        ", "\"\"\"\n        Iterate over images to determine image resolution.\n        If there are images with different shapes, return the square of average size\n        \"\"\"", "\n", "res_list", "=", "list", "(", ")", "\n", "for", "cur_img", "in", "self", ".", "list_imgs", ":", "\n", "            ", "img_pil", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_images", ",", "cur_img", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "res_list", ".", "append", "(", "img_pil", ".", "size", ")", "\n", "", "all_res_equal", "=", "len", "(", "set", "(", "res_list", ")", ")", "<=", "1", "\n", "if", "all_res_equal", ":", "\n", "            ", "size_1", ",", "size_2", "=", "res_list", "[", "0", "]", "# all images have same resolution -> using original resolution", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Images in the dataset have different resolutions. Resizing them to squares of mean size.\"", ")", "\n", "size_1", "=", "size_2", "=", "sum", "(", "[", "sum", "(", "item", ")", "for", "item", "in", "res_list", "]", ")", "/", "(", "2", "*", "len", "(", "res_list", ")", ")", "\n", "", "size_1", ",", "size_2", "=", "self", ".", "bound_resolution", "(", "size_1", ",", "size_2", ",", "max_size", ")", "\n", "return", "size_2", ",", "size_1", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.bound_resolution": [[74, 83], ["int", "int"], "methods", ["None"], ["", "def", "bound_resolution", "(", "self", ",", "size_1", ",", "size_2", ",", "max_size", ")", ":", "\n", "        ", "\"\"\"\n        Ensure the image shape does not exceed --max_size\n        \"\"\"", "\n", "if", "size_1", ">", "max_size", ":", "\n", "            ", "size_1", ",", "size_2", "=", "max_size", ",", "size_2", "/", "(", "size_1", "/", "max_size", ")", "\n", "", "if", "size_2", ">", "max_size", ":", "\n", "            ", "size_1", ",", "size_2", "=", "size_1", "/", "(", "size_2", "/", "max_size", ")", ",", "max_size", "\n", "", "return", "int", "(", "size_1", ")", ",", "int", "(", "size_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.get_num_mask_channels": [[84, 99], ["int", "torchvision.transforms.functional.to_tensor", "PIL.Image.open", "torch.max", "os.path.join", "torch.round", "torchvision.transforms.functional.to_tensor.unique"], "methods", ["None"], ["", "def", "get_num_mask_channels", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Iterate over all masks to determine how many classes are there\n        \"\"\"", "\n", "max_index", "=", "0", "\n", "for", "cur_mask", "in", "self", ".", "list_masks", ":", "\n", "            ", "im", "=", "TR", ".", "functional", ".", "to_tensor", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_masks", ",", "cur_mask", ")", ")", ")", "\n", "if", "(", "im", ".", "unique", "(", ")", "*", "256", ")", ".", "max", "(", ")", ">", "30", ":", "\n", "# --- black-white map of one object and background --- #", "\n", "                ", "max_index", "=", "2", "if", "max_index", "<", "2", "else", "max_index", "\n", "", "else", ":", "\n", "# --- multiple semantic objects --- #", "\n", "                ", "cur_max", "=", "torch", ".", "max", "(", "torch", ".", "round", "(", "im", "*", "256", ")", ")", "\n", "max_index", "=", "cur_max", "+", "1", "if", "max_index", "<", "cur_max", "+", "1", "else", "max_index", "\n", "", "", "return", "int", "(", "max_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.create_mask_channels": [[100, 114], ["torch.cat", "torch.round", "torch.nn.functional.one_hot", "[].permute", "torch.round.long", "[].permute.unique", "[].permute.float"], "methods", ["None"], ["", "def", "create_mask_channels", "(", "self", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Convert a mask to one-hot representation\n        \"\"\"", "\n", "if", "(", "mask", ".", "unique", "(", ")", "*", "256", ")", ".", "max", "(", ")", ">", "30", ":", "\n", "# --- only object and background--- #", "\n", "            ", "mask", "=", "torch", ".", "cat", "(", "(", "1", "-", "mask", ",", "mask", ")", ",", "dim", "=", "0", ")", "\n", "return", "mask", "\n", "", "else", ":", "\n", "# --- multiple semantic objects --- #", "\n", "            ", "integers", "=", "torch", ".", "round", "(", "mask", "*", "256", ")", "\n", "mask", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "integers", ".", "long", "(", ")", ",", "num_classes", "=", "self", ".", "num_mask_channels", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", "[", "0", "]", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.Dataset.__getitem__": [[115, 130], ["dict", "PIL.Image.open().convert", "torchvision.to_tensor", "len", "torchvision.resize", "NotImplementedError", "PIL.Image.open", "os.path.join"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "output", "=", "dict", "(", ")", "\n", "idx", "=", "index", "%", "len", "(", "self", ".", "list_imgs", ")", "\n", "target_size", "=", "self", ".", "image_resolution", "\n", "\n", "# --- image ---#", "\n", "img_pil", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_images", ",", "self", ".", "list_imgs", "[", "idx", "]", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img", "=", "F", ".", "to_tensor", "(", "F", ".", "resize", "(", "img_pil", ",", "size", "=", "target_size", ")", ")", "\n", "img", "=", "(", "img", "-", "0.5", ")", "*", "2", "\n", "output", "[", "\"images\"", "]", "=", "img", "\n", "\n", "# --- mask ---#", "\n", "if", "not", "self", ".", "no_masks", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"w/o --no_masks is not implemented in this release\"", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.dataloading.prepare_dataloading": [[10, 26], ["dataloading.Dataset", "torch.utils.data.DataLoader", "print", "print"], "function", ["None"], ["def", "prepare_dataloading", "(", "opt", ")", ":", "\n", "    ", "dataset", "=", "Dataset", "(", "opt", ")", "\n", "recommended_config", "=", "{", "\"image resolution\"", ":", "dataset", ".", "image_resolution", ",", "\n", "\"noise_shape\"", ":", "dataset", ".", "recommended_config", "[", "0", "]", ",", "\n", "\"num_blocks_g\"", ":", "dataset", ".", "recommended_config", "[", "1", "]", ",", "\n", "\"num_blocks_d\"", ":", "dataset", ".", "recommended_config", "[", "2", "]", ",", "\n", "\"num_blocks_d0\"", ":", "dataset", ".", "recommended_config", "[", "3", "]", ",", "\n", "\"no_masks\"", ":", "dataset", ".", "no_masks", ",", "\n", "\"num_mask_channels\"", ":", "dataset", ".", "num_mask_channels", "}", "\n", "if", "not", "recommended_config", "[", "\"no_masks\"", "]", "and", "not", "opt", ".", "no_masks", ":", "\n", "        ", "print", "(", "\"Using the training regime *with* segmentation masks\"", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "no_masks", "=", "True", "\n", "print", "(", "\"Using the training regime *without* segmentation masks\"", ")", "\n", "", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "return", "dataloader", ",", "recommended_config", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.timer.__init__": [[17, 24], ["time.time", "os.path.join", "open", "log_file.write"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "prev_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "prev_epoch", "=", "0", "\n", "self", ".", "num_epochs", "=", "opt", ".", "num_epochs", "\n", "self", ".", "file_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "exp_name", ",", "\"progress.txt\"", ")", "\n", "with", "open", "(", "self", ".", "file_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'--- Started training --- \\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.timer.__call__": [[25, 37], ["time.time", "print", "open", "log_file.write", "time.time"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "!=", "0", ":", "\n", "            ", "avg", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "prev_time", ")", "/", "(", "epoch", "-", "self", ".", "prev_epoch", ")", "\n", "", "else", ":", "\n", "            ", "avg", "=", "0", "\n", "", "self", ".", "prev_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "prev_epoch", "=", "epoch", "\n", "\n", "with", "open", "(", "self", ".", "file_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'[epoch %d/%d], avg time:%.3f per epoch \\n'", "%", "(", "epoch", ",", "self", ".", "num_epochs", ",", "avg", ")", ")", "\n", "", "print", "(", "'[epoch %d/%d], avg time:%.3f per epoch'", "%", "(", "epoch", ",", "self", ".", "num_epochs", ",", "avg", ")", ")", "\n", "return", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.fix_seed": [[10, 14], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed"], "function", ["None"], ["def", "fix_seed", "(", "seed", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.update_EMA": [[39, 47], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "netG.state_dict", "[].data.copy_", "netEMA.state_dict", "netEMA.state_dict", "netG.state_dict"], "function", ["None"], ["", "", "def", "update_EMA", "(", "netEMA", ",", "netG", ",", "EMA_decay", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "key", "in", "netG", ".", "state_dict", "(", ")", ":", "\n", "            ", "netEMA", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "\n", "netEMA", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", "*", "EMA_decay", "+", "\n", "netG", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", "*", "(", "1", "-", "EMA_decay", ")", "\n", ")", "\n", "", "", "return", "netEMA", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.preprocess_real": [[49, 62], ["list", "list.append", "range", "list", "batch[].to", "torch.interpolate", "list.append", "reversed"], "function", ["None"], ["", "def", "preprocess_real", "(", "batch", ",", "num_blocks_ll", ",", "device", ")", ":", "\n", "# --- Put everything on GPU if needed --- #", "\n", "    ", "for", "item", "in", "batch", ":", "\n", "        ", "batch", "[", "item", "]", "=", "batch", "[", "item", "]", ".", "to", "(", "device", ")", "\n", "# --- Create downsampled versions of real images for MSG --- #", "\n", "", "ans", "=", "list", "(", ")", "\n", "image", "=", "batch", "[", "\"images\"", "]", "\n", "ans", ".", "append", "(", "image", ")", "\n", "for", "i", "in", "range", "(", "num_blocks_ll", "-", "1", ")", ":", "\n", "        ", "image", "=", "F", ".", "interpolate", "(", "image", ",", "scale_factor", "=", "0.5", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ",", "recompute_scale_factor", "=", "False", ")", "\n", "ans", ".", "append", "(", "image", ")", "\n", "", "batch", "[", "\"images\"", "]", "=", "list", "(", "reversed", "(", "ans", ")", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.sample_noise": [[64, 66], ["torch.randn", "torch.randn", "torch.randn", "torch.randn"], "function", ["None"], ["", "def", "sample_noise", "(", "noise_dim", ",", "batch_size", ")", ":", "\n", "    ", "return", "torch", ".", "randn", "(", "batch_size", ",", "noise_dim", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.to_rgb": [[68, 70], ["torch", "torch.Conv2d"], "function", ["None"], ["", "def", "to_rgb", "(", "in_channels", ")", ":", "\n", "    ", "return", "sp_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "3", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.get_norm_by_name": [[72, 80], ["NotImplementedError", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.Sequential"], "function", ["None"], ["", "def", "get_norm_by_name", "(", "norm_name", ",", "out_channel", ")", ":", "\n", "    ", "if", "norm_name", "==", "\"batch\"", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", "\n", "", "if", "norm_name", "==", "\"instance\"", ":", "\n", "        ", "return", "nn", ".", "InstanceNorm2d", "(", "out_channel", ")", "\n", "", "if", "norm_name", "==", "\"none\"", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", ")", "\n", "", "raise", "NotImplementedError", "(", "\"The norm name is not recognized %s\"", "%", "(", "norm_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.from_rgb": [[82, 84], ["torch", "torch.Conv2d"], "function", ["None"], ["", "def", "from_rgb", "(", "out_channels", ")", ":", "\n", "    ", "return", "sp_norm", "(", "nn", ".", "Conv2d", "(", "3", ",", "out_channels", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.utils.to_decision": [[86, 88], ["torch", "torch.Conv2d"], "function", ["None"], ["", "def", "to_decision", "(", "out_channel", ",", "target_channel", ")", ":", "\n", "    ", "return", "sp_norm", "(", "nn", ".", "Conv2d", "(", "out_channel", ",", "target_channel", ",", "(", "1", ",", "1", ")", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Content_FA.__init__": [[7, 14], ["torch.Module.__init__", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "no_mask", ",", "prob_FA_con", ",", "num_mask_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", "Content_FA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prob", "=", "prob_FA_con", "\n", "self", ".", "ranges", "=", "(", "0.10", ",", "0.30", ")", "\n", "self", ".", "no_mask", "=", "no_mask", "\n", "if", "not", "self", ".", "no_mask", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"w/o --no_masks is not implemented in this release\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Content_FA.mix": [[15, 31], ["random.random", "range", "int", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "y[].clone", "y[].clone", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "", "def", "mix", "(", "self", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Randomly swap channels of different instances\n        \"\"\"", "\n", "bs", "=", "y", ".", "shape", "[", "0", "]", "\n", "ch", "=", "y", ".", "shape", "[", "1", "]", "\n", "ans", "=", "y", "\n", "# ---  --- #", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "bs", "-", "1", ",", "2", ")", ":", "\n", "                ", "num_first", "=", "int", "(", "ch", "*", "(", "torch", ".", "rand", "(", "1", ")", "*", "(", "self", ".", "ranges", "[", "1", "]", "-", "self", ".", "ranges", "[", "0", "]", ")", "+", "self", ".", "ranges", "[", "0", "]", ")", ")", "\n", "perm", "=", "torch", ".", "randperm", "(", "ch", ")", "\n", "ch_first", "=", "perm", "[", ":", "num_first", "]", "\n", "ans", "[", "i", ",", "ch_first", ",", ":", ",", ":", "]", "=", "y", "[", "i", "+", "1", ",", "ch_first", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "ans", "[", "i", "+", "1", ",", "ch_first", ",", ":", ",", ":", "]", "=", "y", "[", "i", ",", "ch_first", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Content_FA.drop": [[32, 45], ["random.random", "int", "int", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "drop", "(", "self", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Randomly zero out channels\n        \"\"\"", "\n", "ch", "=", "y", ".", "shape", "[", "1", "]", "\n", "ans", "=", "y", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "num_first", "=", "int", "(", "ch", "*", "(", "torch", ".", "rand", "(", "1", ")", "*", "(", "self", ".", "ranges", "[", "1", "]", "-", "self", ".", "ranges", "[", "0", "]", ")", "+", "self", ".", "ranges", "[", "0", "]", ")", ")", "\n", "num_second", "=", "int", "(", "ch", "*", "(", "torch", ".", "rand", "(", "1", ")", "*", "(", "self", ".", "ranges", "[", "1", "]", "-", "self", ".", "ranges", "[", "0", "]", ")", "+", "self", ".", "ranges", "[", "0", "]", ")", ")", "\n", "perm", "=", "torch", ".", "randperm", "(", "ch", ")", "\n", "ch_second", "=", "perm", "[", "num_first", ":", "num_first", "+", "num_second", "]", "\n", "ans", "[", ":", ",", "ch_second", ",", ":", ",", ":", "]", "=", "0", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Content_FA.forward": [[46, 55], ["feature_augmentation.Content_FA.mix", "feature_augmentation.Content_FA.drop", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Content_FA.mix", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Content_FA.drop"], ["", "def", "forward", "(", "self", ",", "y", ")", ":", "\n", "        ", "ans", "=", "y", "\n", "y", "=", "self", ".", "mix", "(", "y", ")", "\n", "y", "=", "self", ".", "drop", "(", "y", ")", "\n", "if", "not", "self", ".", "no_mask", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"w/o --no_masks is not implemented in this release\"", ")", "\n", "", "else", ":", "\n", "            ", "ans", "=", "y", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Layout_FA.__init__": [[58, 63], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "no_mask", ",", "prob", ")", ":", "\n", "        ", "super", "(", "Layout_FA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "no_mask", "=", "no_mask", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "ranges", "=", "(", "0.10", ",", "0.30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Layout_FA.forward": [[64, 70], ["NotImplementedError", "feature_augmentation.Layout_FA.func_without_mask"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Layout_FA.func_without_mask"], ["", "def", "forward", "(", "self", ",", "y", ",", "masks", ")", ":", "\n", "        ", "if", "not", "self", ".", "no_mask", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"w/o --no_masks is not implemented in this release\"", ")", "\n", "", "else", ":", "\n", "            ", "ans", "=", "self", ".", "func_without_mask", "(", "y", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Layout_FA.func_without_mask": [[71, 83], ["y.clone", "range", "random.random", "feature_augmentation.gen_rectangle", "y[].clone", "y[].clone"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.gen_rectangle"], ["", "def", "func_without_mask", "(", "self", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        If a segmentation mask is not provided, copy-paste rectangles in a random way\n        \"\"\"", "\n", "bs", "=", "y", ".", "shape", "[", "0", "]", "\n", "ans", "=", "y", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "bs", "-", "1", ",", "2", ")", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "                ", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "gen_rectangle", "(", "ans", ")", "\n", "ans", "[", "i", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", "=", "y", "[", "i", "+", "1", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", ".", "clone", "(", ")", "\n", "ans", "[", "i", "+", "1", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", "=", "y", "[", "i", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", ".", "clone", "(", ")", "\n", "", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Layout_FA.func_with_mask": [[84, 94], ["y.clone", "mask.clone", "feature_augmentation.Layout_FA.mix_background", "feature_augmentation.Layout_FA.swap", "feature_augmentation.Layout_FA.move_objects"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Layout_FA.mix_background", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Layout_FA.swap", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Layout_FA.move_objects"], ["", "def", "func_with_mask", "(", "self", ",", "y", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        If a segmentation mask is provided, ensure that the copied areas never cut semantic boundaries\n        \"\"\"", "\n", "ans_y", "=", "y", ".", "clone", "(", ")", "\n", "ans_mask", "=", "mask", ".", "clone", "(", ")", "\n", "ans_y", ",", "ans_mask", "=", "self", ".", "mix_background", "(", "ans_y", ",", "ans_mask", ")", "\n", "ans_y", ",", "ans_mask", "=", "self", ".", "swap", "(", "ans_y", ",", "ans_mask", ")", "\n", "ans_y", ",", "ans_mask", "=", "self", ".", "move_objects", "(", "ans_y", ",", "ans_mask", ")", "\n", "return", "ans_y", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Layout_FA.mix_background": [[95, 108], ["range", "random.random", "feature_augmentation.gen_nooverlap_rectangles", "y[].clone", "mask[].clone"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.gen_nooverlap_rectangles"], ["", "def", "mix_background", "(", "self", ",", "y", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Copy-paste areas of background onto other background areas\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "y", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "                ", "rect1", ",", "rect2", "=", "gen_nooverlap_rectangles", "(", "y", ",", "mask", ")", "\n", "if", "rect1", "[", "0", "]", "is", "not", "None", ":", "\n", "                    ", "x0_1", ",", "x0_2", ",", "y0_1", ",", "y0_2", "=", "rect1", "\n", "x1_1", ",", "x1_2", ",", "y1_1", ",", "y1_2", "=", "rect2", "\n", "y", "[", "i", ",", ":", ",", "x0_1", ":", "x0_2", ",", "y0_1", ":", "y0_2", "]", "=", "y", "[", "i", ",", ":", ",", "x1_1", ":", "x1_2", ",", "y1_1", ":", "y1_2", "]", ".", "clone", "(", ")", "\n", "mask", "[", "i", ",", ":", ",", "x0_1", ":", "x0_2", ",", "y0_1", ":", "y0_2", "]", "=", "mask", "[", "i", ",", ":", ",", "x1_1", ":", "x1_2", ",", "y1_1", ":", "y1_2", "]", ".", "clone", "(", ")", "\n", "", "", "", "return", "y", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Layout_FA.swap": [[109, 136], ["y.clone", "mask_.clone", "range", "random.random", "range", "random.random", "feature_augmentation.gen_rectangle", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "feature_augmentation.area_cut_any_object", "feature_augmentation.any_object_touched", "feature_augmentation.any_object_touched", "y[].clone", "y[].clone", "mask_[].clone", "mask_[].clone", "ans[].clone", "ans[].clone"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.gen_rectangle", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.area_cut_any_object", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.any_object_touched", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.any_object_touched"], ["", "def", "swap", "(", "self", ",", "y", ",", "mask_", ")", ":", "\n", "        ", "\"\"\"\n        Copy-paste background and objects into other areas, without cutting semantic boundaries\n        \"\"\"", "\n", "ans", "=", "y", ".", "clone", "(", ")", "\n", "mask", "=", "mask_", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "y", ".", "shape", "[", "0", "]", "-", "1", ",", "2", ")", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "                ", "for", "jj", "in", "range", "(", "5", ")", ":", "\n", "                    ", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "gen_rectangle", "(", "y", ")", "\n", "rect", "=", "x1", ",", "x2", ",", "y1", ",", "y2", "\n", "if", "any_object_touched", "(", "rect", ",", "mask", "[", "i", ":", "i", "+", "1", "]", ")", "or", "any_object_touched", "(", "rect", ",", "mask", "[", "i", "+", "1", ":", "i", "+", "2", "]", ")", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "ans", "[", "i", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", "=", "y", "[", "i", "+", "1", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", ".", "clone", "(", ")", "\n", "ans", "[", "i", "+", "1", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", "=", "y", "[", "i", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", ".", "clone", "(", ")", "\n", "mem", "=", "mask_", "[", "i", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", ".", "clone", "(", ")", "\n", "mask", "[", "i", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", "=", "mask_", "[", "i", "+", "1", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", ".", "clone", "(", ")", "\n", "mask", "[", "i", "+", "1", ",", ":", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", "=", "mem", "\n", "break", "\n", "", "", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "                ", "which_object", "=", "torch", ".", "randint", "(", "mask", ".", "shape", "[", "1", "]", "-", "1", ",", "size", "=", "(", ")", ")", "+", "1", "\n", "old_area", "=", "torch", ".", "argmax", "(", "mask", "[", "i", "]", ",", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "==", "which_object", "\n", "if", "not", "area_cut_any_object", "(", "old_area", ",", "mask", "[", "i", "+", "1", "]", ")", ":", "\n", "                    ", "ans", "[", "i", "+", "1", "]", "=", "ans", "[", "i", "]", ".", "clone", "(", ")", "*", "(", "old_area", "*", "1.0", ")", "+", "ans", "[", "i", "+", "1", "]", ".", "clone", "(", ")", "*", "(", "1", "-", "old_area", "*", "1.0", ")", "\n", "mask", "[", "i", "+", "1", "]", "=", "mask", "[", "i", "]", "*", "(", "old_area", "*", "1.0", ")", "+", "mask", "[", "i", "+", "1", "]", "*", "(", "1", "-", "old_area", "*", "1.0", ")", "\n", "", "", "", "return", "ans", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.Layout_FA.move_objects": [[137, 154], ["range", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "feature_augmentation.generate_new_area", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "random.random", "feature_augmentation.dupplicate_object", "random.random", "feature_augmentation.remove_object"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.generate_new_area", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.dupplicate_object", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.remove_object"], ["", "def", "move_objects", "(", "self", ",", "y", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Move, dupplicate, or remove semantic objects\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "y", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "num_changed_objects", "=", "torch", ".", "randint", "(", "mask", ".", "shape", "[", "1", "]", "-", "1", ",", "size", "=", "(", ")", ")", "+", "1", "\n", "seq_classes", "=", "torch", ".", "randperm", "(", "mask", ".", "shape", "[", "1", "]", "-", "1", ")", "[", ":", "num_changed_objects", "]", "\n", "for", "cur_class", "in", "seq_classes", ":", "\n", "                ", "old_area", "=", "torch", ".", "argmax", "(", "mask", "[", "i", "]", ",", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "==", "cur_class", "+", "1", "# +1 to avoid background", "\n", "new_area", "=", "generate_new_area", "(", "old_area", ",", "mask", "[", "i", "]", ")", "\n", "if", "new_area", "[", "0", "]", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "                    ", "y", "[", "i", "]", ",", "mask", "[", "i", "]", "=", "dupplicate_object", "(", "y", "[", "i", "]", ",", "mask", "[", "i", "]", ",", "old_area", ",", "new_area", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "                    ", "y", "[", "i", "]", ",", "mask", "[", "i", "]", "=", "remove_object", "(", "y", "[", "i", "]", ",", "mask", "[", "i", "]", ",", "old_area", ",", "new_area", ")", "\n", "", "", "return", "y", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.gen_rectangle": [[157, 170], ["feature_augmentation.trim_rectangle", "random.random", "random.random", "int", "int", "int", "int", "random.random", "random.random"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.trim_rectangle"], ["", "", "", "def", "gen_rectangle", "(", "ans", ",", "w", "=", "-", "1", ",", "h", "=", "-", "1", ")", ":", "\n", "    ", "x_c", ",", "y_c", "=", "random", ".", "random", "(", ")", ",", "random", ".", "random", "(", ")", "\n", "x_s", ",", "y_s", "=", "random", ".", "random", "(", ")", "*", "0.4", "+", "0.1", ",", "random", ".", "random", "(", ")", "*", "0.4", "+", "0.1", "\n", "x_l", ",", "x_r", "=", "x_c", "-", "x_s", "/", "2", ",", "x_c", "+", "x_s", "/", "2", "\n", "y_l", ",", "y_r", "=", "y_c", "-", "y_s", "/", "2", ",", "y_c", "+", "y_s", "/", "2", "\n", "x1", ",", "x2", "=", "int", "(", "x_l", "*", "ans", ".", "shape", "[", "2", "]", ")", ",", "int", "(", "x_r", "*", "ans", ".", "shape", "[", "2", "]", ")", "\n", "y1", ",", "y2", "=", "int", "(", "y_l", "*", "ans", ".", "shape", "[", "3", "]", ")", ",", "int", "(", "y_r", "*", "ans", ".", "shape", "[", "3", "]", ")", "\n", "if", "w", "<", "0", "or", "h", "<", "0", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "x2", ",", "y2", "=", "x1", "+", "w", ",", "y1", "+", "h", "\n", "", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "trim_rectangle", "(", "x1", ",", "x2", ",", "y1", ",", "y2", ",", "ans", ".", "shape", ")", "\n", "return", "x1", ",", "x2", ",", "y1", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.trim_rectangle": [[172, 186], ["None"], "function", ["None"], ["", "def", "trim_rectangle", "(", "x1", ",", "x2", ",", "y1", ",", "y2", ",", "sh", ")", ":", "\n", "    ", "if", "x1", "<", "0", ":", "\n", "        ", "x2", "+=", "(", "0", "-", "x1", ")", "\n", "x1", "+=", "(", "0", "-", "x1", ")", "\n", "", "if", "x2", ">=", "sh", "[", "2", "]", ":", "\n", "        ", "x1", "-=", "(", "x2", "-", "sh", "[", "2", "]", "+", "1", ")", "\n", "x2", "-=", "(", "x2", "-", "sh", "[", "2", "]", "+", "1", ")", "\n", "", "if", "y1", "<", "0", ":", "\n", "        ", "y2", "+=", "(", "0", "-", "y1", ")", "\n", "y1", "+=", "(", "0", "-", "y1", ")", "\n", "", "if", "y2", ">=", "sh", "[", "3", "]", ":", "\n", "        ", "y1", "-=", "(", "y2", "-", "sh", "[", "3", "]", "+", "1", ")", "\n", "y2", "-=", "(", "y2", "-", "sh", "[", "3", "]", "+", "1", ")", "\n", "", "return", "x1", ",", "x2", ",", "y1", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.gen_nooverlap_rectangles": [[188, 197], ["feature_augmentation.gen_rectangle", "range", "feature_augmentation.gen_rectangle", "feature_augmentation.any_object_touched", "feature_augmentation.any_object_touched"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.gen_rectangle", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.gen_rectangle", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.any_object_touched", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.any_object_touched"], ["", "def", "gen_nooverlap_rectangles", "(", "ans", ",", "mask", ")", ":", "\n", "    ", "x0_1", ",", "x0_2", ",", "y0_1", ",", "y0_2", "=", "gen_rectangle", "(", "ans", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "x1_1", ",", "x1_2", ",", "y1_1", ",", "y1_2", "=", "gen_rectangle", "(", "ans", ",", "w", "=", "x0_2", "-", "x0_1", ",", "h", "=", "y0_2", "-", "y0_1", ")", "\n", "if", "not", "(", "x0_1", "<", "x1_2", "and", "x0_2", ">", "x1_1", "and", "y0_1", "<", "y1_2", "and", "y0_2", ">", "y1_1", ")", ":", "\n", "            ", "rect1", ",", "rect2", "=", "[", "x0_1", ",", "x0_2", ",", "y0_1", ",", "y0_2", "]", ",", "[", "x1_1", ",", "x1_2", ",", "y1_1", ",", "y1_2", "]", "\n", "if", "not", "any_object_touched", "(", "rect1", ",", "mask", "[", "i", ":", "i", "+", "1", "]", ")", "and", "not", "any_object_touched", "(", "rect2", ",", "mask", "[", "i", ":", "i", "+", "1", "]", ")", ":", "\n", "                ", "return", "[", "x0_1", ",", "x0_2", ",", "y0_1", ",", "y0_2", "]", ",", "[", "x1_1", ",", "x1_2", ",", "y1_1", ",", "y1_2", "]", "\n", "", "", "", "return", "[", "None", ",", "None", ",", "None", ",", "None", "]", ",", "[", "None", ",", "None", ",", "None", ",", "None", "]", "# if not found a good pair", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.any_object_touched": [[199, 209], ["torch.zeros_like", "torch.zeros_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "any_object_touched", "(", "rect", ",", "mask_", ")", ":", "\n", "    ", "epsilon", "=", "0.01", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "rect", "\n", "mask", "=", "torch", ".", "zeros_like", "(", "mask_", ")", "\n", "mask", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "mask_", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "mask", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "mask_", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "sum", "=", "torch", ".", "sum", "(", "mask", "[", ":", ",", "1", ",", "x1", ":", "x2", ",", "y1", ":", "y2", "]", ")", "\n", "if", "sum", ">", "epsilon", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.area_cut_any_object": [[211, 220], ["torch.zeros_like", "torch.zeros_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "area_cut_any_object", "(", "area", ",", "mask_", ")", ":", "\n", "    ", "epsilon", "=", "0.01", "\n", "mask", "=", "torch", ".", "zeros_like", "(", "mask_", ")", "\n", "mask", "[", "0", ",", ":", ",", ":", "]", "=", "mask_", "[", "0", ",", ":", ",", ":", "]", "\n", "mask", "[", "1", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "mask_", "[", "1", ":", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "sum", "=", "torch", ".", "sum", "(", "area", "*", "mask", "[", "1", ",", ":", ",", ":", "]", ")", "\n", "if", "sum", ">", "epsilon", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.generate_new_area": [[222, 243], ["torch.argmax", "torch.argmax", "[].min", "[].max", "[].min", "[].max", "range", "torch.sum", "torch.sum", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.zeros_like", "torch.zeros_like", "torch.sum", "torch.sum", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "function", ["None"], ["", "def", "generate_new_area", "(", "old_area", ",", "mask", ")", ":", "\n", "    ", "epsilon", "=", "0.01", "\n", "arg_mask", "=", "torch", ".", "argmax", "(", "mask", ",", "dim", "=", "0", ")", "\n", "if", "torch", ".", "sum", "(", "old_area", ")", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "", "idx_x1", "=", "torch", ".", "nonzero", "(", "old_area", "*", "1.0", ")", "[", ":", ",", "0", "]", ".", "min", "(", ")", "\n", "idx_x2", "=", "torch", ".", "nonzero", "(", "old_area", "*", "1.0", ")", "[", ":", ",", "0", "]", ".", "max", "(", ")", "\n", "idx_y1", "=", "torch", ".", "nonzero", "(", "old_area", "*", "1.0", ")", "[", ":", ",", "1", "]", ".", "min", "(", ")", "\n", "idx_y2", "=", "torch", ".", "nonzero", "(", "old_area", "*", "1.0", ")", "[", ":", ",", "1", "]", ".", "max", "(", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "new_x1", "=", "torch", ".", "randint", "(", "0", ",", "mask", ".", "shape", "[", "1", "]", "-", "(", "idx_x2", "-", "idx_x1", ")", ",", "size", "=", "(", ")", ")", "\n", "new_y1", "=", "torch", ".", "randint", "(", "0", ",", "mask", ".", "shape", "[", "2", "]", "-", "(", "idx_y2", "-", "idx_y1", ")", ",", "size", "=", "(", ")", ")", "\n", "x_diff", "=", "new_x1", "-", "idx_x1", "\n", "y_diff", "=", "new_y1", "-", "idx_y1", "\n", "provisional_area", "=", "torch", ".", "zeros_like", "(", "old_area", ")", "\n", "provisional_area", "[", "idx_x1", "+", "x_diff", ":", "idx_x2", "+", "x_diff", "+", "1", ",", "idx_y1", "+", "y_diff", ":", "idx_y2", "+", "y_diff", "+", "1", "]", "=", "old_area", "[", "idx_x1", ":", "idx_x2", "+", "1", ",", "idx_y1", ":", "idx_y2", "+", "1", "]", "\n", "check_sum", "=", "torch", ".", "sum", "(", "(", "provisional_area", "*", "1.0", ")", "*", "arg_mask", ")", "\n", "if", "check_sum", "<", "epsilon", ":", "\n", "            ", "return", "x_diff", ",", "y_diff", ",", "idx_x1", ",", "idx_x2", ",", "idx_y1", ",", "idx_y2", "\n", "", "", "return", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.dupplicate_object": [[245, 260], ["None"], "function", ["None"], ["", "def", "dupplicate_object", "(", "y", ",", "mask", ",", "old_area", ",", "new_area", ")", ":", "\n", "    ", "x_diff", ",", "y_diff", ",", "idx_x1", ",", "idx_x2", ",", "idx_y1", ",", "idx_y2", "=", "new_area", "\n", "\n", "y", "[", ":", ",", "idx_x1", "+", "x_diff", ":", "idx_x2", "+", "x_diff", "+", "1", ",", "idx_y1", "+", "y_diff", ":", "idx_y2", "+", "y_diff", "+", "1", "]", "=", "y", "[", ":", ",", "idx_x1", "+", "x_diff", ":", "idx_x2", "+", "x_diff", "+", "1", ",", "idx_y1", "+", "y_diff", ":", "idx_y2", "+", "y_diff", "+", "1", "]", "*", "(", "1.0", "-", "old_area", "[", "idx_x1", ":", "idx_x2", "+", "1", ",", "idx_y1", ":", "idx_y2", "+", "1", "]", "*", "(", "1.0", ")", ")", "+", "y", "[", ":", ",", "idx_x1", ":", "idx_x2", "+", "1", ",", "idx_y1", ":", "idx_y2", "+", "1", "]", "*", "(", "old_area", "[", "idx_x1", ":", "idx_x2", "+", "1", ",", "idx_y1", ":", "idx_y2", "+", "1", "]", "*", "1.0", ")", "\n", "\n", "mask", "[", ":", ",", "idx_x1", "+", "x_diff", ":", "idx_x2", "+", "x_diff", "+", "1", ",", "idx_y1", "+", "y_diff", ":", "idx_y2", "+", "y_diff", "+", "1", "]", "=", "mask", "[", ":", ",", "idx_x1", "+", "x_diff", ":", "idx_x2", "+", "x_diff", "+", "1", ",", "idx_y1", "+", "y_diff", ":", "idx_y2", "+", "y_diff", "+", "1", "]", "*", "(", "1.0", "-", "old_area", "[", "idx_x1", ":", "idx_x2", "+", "1", ",", "idx_y1", ":", "idx_y2", "+", "1", "]", "*", "(", "1.0", ")", ")", "+", "mask", "[", ":", ",", "idx_x1", ":", "idx_x2", "+", "1", ",", "idx_y1", ":", "idx_y2", "+", "1", "]", "*", "(", "old_area", "[", "idx_x1", ":", "idx_x2", "+", "1", ",", "idx_y1", ":", "idx_y2", "+", "1", "]", "*", "1.0", ")", "\n", "return", "y", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.feature_augmentation.remove_object": [[262, 271], ["None"], "function", ["None"], ["", "def", "remove_object", "(", "y", ",", "mask", ",", "old_area", ",", "new_area", ")", ":", "\n", "    ", "x_diff", ",", "y_diff", ",", "idx_x1", ",", "idx_x2", ",", "idx_y1", ",", "idx_y2", "=", "new_area", "\n", "\n", "y", "[", ":", ",", "idx_x1", ":", "idx_x2", "+", "1", ",", "idx_y1", ":", "idx_y2", "+", "1", "]", "=", "y", "[", ":", ",", "idx_x1", "+", "x_diff", ":", "idx_x2", "+", "x_diff", "+", "1", ",", "idx_y1", "+", "y_diff", ":", "idx_y2", "+", "y_diff", "+", "1", "]", "\n", "\n", "mask", "[", ":", ",", "idx_x1", ":", "idx_x2", "+", "1", ",", "idx_y1", ":", "idx_y2", "+", "1", "]", "=", "mask", "[", ":", ",", "idx_x1", "+", "x_diff", ":", "idx_x2", "+", "x_diff", "+", "1", ",", "idx_y1", "+", "y_diff", ":", "idx_y2", "+", "y_diff", "+", "1", "]", "\n", "return", "y", ",", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.losses_computer.__init__": [[6, 17], ["losses.losses_computer.get_loss_function"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.losses_computer.get_loss_function"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "num_blocks", ")", ":", "\n", "        ", "\"\"\"\n        The class implementing the loss computations\n        \"\"\"", "\n", "self", ".", "loss_function", "=", "self", ".", "get_loss_function", "(", "opt", ".", "loss_mode", ")", "\n", "self", ".", "no_masks", "=", "opt", ".", "no_masks", "\n", "self", ".", "no_DR", "=", "opt", ".", "no_DR", "\n", "self", ".", "lambdas", "=", "{", "\"content\"", ":", "0.5", "/", "num_blocks", ",", "\n", "\"layout\"", ":", "0.5", "/", "num_blocks", ",", "\n", "\"low-level\"", ":", "1.0", "/", "num_blocks", ",", "\n", "\"DR\"", ":", "opt", ".", "lambda_DR", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.losses_computer.get_loss_function": [[18, 27], ["ValueError"], "methods", ["None"], ["", "def", "get_loss_function", "(", "self", ",", "loss_mode", ")", ":", "\n", "        ", "if", "loss_mode", "==", "\"wgan\"", ":", "\n", "            ", "return", "wgan_loss", "\n", "", "elif", "loss_mode", "==", "\"hinge\"", ":", "\n", "            ", "return", "hinge_loss", "\n", "", "elif", "loss_mode", "==", "\"bce\"", ":", "\n", "            ", "return", "bce_loss", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected loss_mode {}'", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.losses_computer.content_segm_loss": [[28, 44], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cross_entropy", "torch.cross_entropy", "torch.arange().unsqueeze().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze().unsqueeze", "ground_t.repeat.repeat.repeat", "ground_t.repeat.repeat.long().to", "ground_t.repeat.repeat.repeat_interleave", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.cat.to", "torch.cat.to", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "ground_t.repeat.repeat.long", "mask.detach", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "", "def", "content_segm_loss", "(", "self", ",", "out_d", ",", "data", ",", "real", ",", "forD", ")", ":", "\n", "        ", "\"\"\"\n        The multi-class cross-entropy loss used in the content masked attention\n        \"\"\"", "\n", "mask", "=", "data", "[", "\"masks\"", "]", "\n", "mask_ch", "=", "mask", ".", "shape", "[", "1", "]", "\n", "if", "real", ":", "\n", "            ", "ground_t", "=", "torch", ".", "arange", "(", "mask_ch", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "ground_t", "=", "ground_t", ".", "repeat", "(", "1", ",", "1", ",", "out_d", ".", "shape", "[", "2", "]", ",", "out_d", ".", "shape", "[", "3", "]", ")", "\n", "ground_t", "=", "ground_t", ".", "repeat_interleave", "(", "mask", ".", "shape", "[", "0", "]", ",", "dim", "=", "0", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "", "else", ":", "# fake", "\n", "            ", "ground_t", "=", "torch", ".", "ones_like", "(", "out_d", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "mask_ch", "\n", "", "weights", "=", "torch", ".", "cat", "(", "(", "1", "/", "(", "torch", ".", "sum", "(", "mask", ".", "detach", "(", ")", ",", "dim", "=", "(", "0", ",", "2", ",", "3", ")", ")", ")", ",", "torch", ".", "Tensor", "(", "[", "1.0", "]", ")", ".", "to", "(", "out_d", ".", "device", ")", ")", ")", "\n", "weights", "[", "weights", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "out_d", ",", "ground_t", ".", "long", "(", ")", ".", "to", "(", "out_d", ".", "device", ")", ",", "weight", "=", "weights", ".", "to", "(", "out_d", ".", "device", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.losses_computer.diversity_regularization": [[45, 56], ["torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "range", "len", "range", "range", "len", "len", "torch.nn.L1Loss.", "torch.nn.L1Loss."], "methods", ["None"], ["", "def", "diversity_regularization", "(", "self", ",", "fake", ")", ":", "\n", "        ", "\"\"\"\n        The diversity regularization applied in the feature space of the generator\n        \"\"\"", "\n", "loss", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "ans", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "fake", ")", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "fake", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "m", "in", "range", "(", "k", "+", "1", ",", "fake", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "ans", "+=", "-", "loss", "(", "fake", "[", "i", "]", "[", "k", "]", ",", "fake", "[", "i", "]", "[", "m", "]", ")", "\n", "", "", "", "return", "ans", "*", "2", "/", "(", "len", "(", "fake", ")", "*", "(", "len", "(", "fake", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.losses_computer.balance_losses": [[57, 65], ["losses.losses_computer.lambdas.keys"], "methods", ["None"], ["", "def", "balance_losses", "(", "self", ",", "losses", ")", ":", "\n", "        ", "\"\"\"\n        Multiply each loss part with its lambda\n        \"\"\"", "\n", "for", "item", "in", "losses", ":", "\n", "            ", "if", "item", "in", "self", ".", "lambdas", ".", "keys", "(", ")", ":", "\n", "                ", "losses", "[", "item", "]", "=", "losses", "[", "item", "]", "*", "self", ".", "lambdas", "[", "item", "]", "\n", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.losses_computer.__call__": [[66, 81], ["losses.losses_computer.losses_computer.balance_losses", "range", "losses.losses_computer.losses_computer.diversity_regularization", "len", "NotImplementedError", "losses.losses_computer.losses_computer.get", "losses.losses_computer.losses_computer.loss_function"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.losses_computer.balance_losses", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.losses_computer.diversity_regularization"], ["", "def", "__call__", "(", "self", ",", "out_d", ",", "data", ",", "real", ",", "forD", ")", ":", "\n", "        ", "losses", "=", "{", "}", "\n", "# --- adversarial loss ---#", "\n", "for", "item", "in", "out_d", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "out_d", "[", "item", "]", ")", ")", ":", "\n", "                ", "if", "item", "==", "\"content\"", "and", "not", "self", ".", "no_masks", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"w/o --no_masks is not implemented in this release\"", ")", "\n", "", "else", ":", "\n", "                    ", "losses", "[", "item", "]", "=", "losses", ".", "get", "(", "item", ",", "0", ")", "+", "self", ".", "loss_function", "(", "out_d", "[", "item", "]", "[", "i", "]", ",", "real", ",", "forD", ")", "\n", "\n", "# --- diversity regularization ---#", "\n", "", "", "", "if", "not", "forD", "and", "not", "self", ".", "no_DR", ":", "\n", "            ", "losses", "[", "\"DR\"", "]", "=", "self", ".", "diversity_regularization", "(", "data", "[", "\"features\"", "]", ")", "\n", "", "losses", "=", "self", ".", "balance_losses", "(", "losses", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.wgan_loss": [[83, 94], ["output.mean", "output.mean", "output.mean", "ValueError"], "function", ["None"], ["", "", "def", "wgan_loss", "(", "output", ",", "real", ",", "forD", ")", ":", "\n", "    ", "if", "real", "and", "forD", ":", "\n", "        ", "ans", "=", "-", "output", ".", "mean", "(", ")", "\n", "", "elif", "not", "real", "and", "forD", ":", "\n", "        ", "ans", "=", "output", ".", "mean", "(", ")", "\n", "", "elif", "real", "and", "not", "forD", ":", "\n", "        ", "ans", "=", "-", "output", ".", "mean", "(", ")", "\n", "", "elif", "not", "real", "and", "not", "forD", ":", "\n", "        ", "raise", "ValueError", "(", "\"gen loss should be for real\"", ")", "\n", "#print(real, forD, ans)", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.hinge_loss": [[96, 108], ["torch.min", "torch.min", "get_zero_tensor().to", "torch.mean", "torch.mean", "torch.min", "torch.min", "get_zero_tensor().to", "torch.mean", "torch.mean", "losses.get_zero_tensor", "torch.mean", "torch.mean", "ValueError", "losses.get_zero_tensor"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.get_zero_tensor", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.get_zero_tensor"], ["", "def", "hinge_loss", "(", "output", ",", "real", ",", "forD", ")", ":", "\n", "    ", "if", "real", "and", "forD", ":", "\n", "        ", "minval", "=", "torch", ".", "min", "(", "output", "-", "1", ",", "get_zero_tensor", "(", "output", ")", ".", "to", "(", "output", ".", "device", ")", ")", "\n", "ans", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "elif", "not", "real", "and", "forD", ":", "\n", "        ", "minval", "=", "torch", ".", "min", "(", "-", "output", "-", "1", ",", "get_zero_tensor", "(", "output", ")", ".", "to", "(", "output", ".", "device", ")", ")", "\n", "ans", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "elif", "real", "and", "not", "forD", ":", "\n", "        ", "ans", "=", "-", "torch", ".", "mean", "(", "output", ")", "\n", "", "elif", "not", "real", "and", "not", "forD", ":", "\n", "        ", "raise", "ValueError", "(", "\"gen loss should be for real\"", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.bce_loss": [[110, 114], ["get_target_tensor().to", "torch.binary_cross_entropy_with_logits", "losses.get_target_tensor"], "function", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.get_target_tensor"], ["", "def", "bce_loss", "(", "output", ",", "real", ",", "forD", ",", "no_aggr", "=", "False", ")", ":", "\n", "    ", "target_tensor", "=", "get_target_tensor", "(", "output", ",", "real", ")", ".", "to", "(", "output", ".", "device", ")", "\n", "ans", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "output", ",", "target_tensor", ",", "reduction", "=", "(", "\"mean\"", "if", "not", "no_aggr", "else", "\"none\"", ")", ")", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.get_target_tensor": [[116, 124], ["torch.FloatTensor().fill_.expand_as", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_.requires_grad_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_.requires_grad_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "get_target_tensor", "(", "input", ",", "target_is_real", ")", ":", "\n", "    ", "if", "target_is_real", ":", "\n", "        ", "real_label_tensor", "=", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "1", ")", "\n", "real_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "else", ":", "\n", "        ", "real_label_tensor", "=", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "real_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "real_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.core.losses.get_zero_tensor": [[126, 130], ["torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_.requires_grad_", "torch.FloatTensor().fill_.expand_as", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "get_zero_tensor", "(", "input", ")", ":", "\n", "    ", "zero_tensor", "=", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "zero_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "return", "zero_tensor", ".", "expand_as", "(", "input", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.__init__": [[9, 13], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "prob", ",", "no_masks", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "no_masks", "=", "no_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.AugmentPipe_kornia.forward": [[14, 61], ["AugmentPipe_kornia.combine_fakes", "AugmentPipe_kornia.detach_fakes", "ValueError", "random.random", "kornia.augmentation.RandomCrop", "range", "random.random", "random.random", "kornia.augmentation.RandomHorizontalFlip", "range", "random.random", "range", "random.random", "range", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "kornia.augmentation.CenterCrop.", "random.random", "kornia.augmentation.RandomCrop", "range", "kornia.augmentation.RandomRotation", "range", "kornia.augmentation.CenterCrop", "range", "kornia.augmentation.CenterCrop.", "AugmentPipe_kornia.translate_v_fake", "AugmentPipe_kornia.translate_h_fake", "kornia.augmentation.CenterCrop.", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "kornia.augmentation.CenterCrop.", "kornia.augmentation.CenterCrop.", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "random.random", "int", "int"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.combine_fakes", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.detach_fakes", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.translate_v_fake", "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.translate_h_fake"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "x", "=", "batch", "[", "\"images\"", "]", "\n", "if", "not", "self", ".", "no_masks", ":", "\n", "            ", "raise", "ValueError", "(", "\"Kornia augmentations without --no_masks regime is not supported\"", ")", "\n", "\n", "", "ref", "=", "x", "\n", "sh", "=", "x", "[", "-", "1", "]", ".", "shape", "\n", "x", "=", "combine_fakes", "(", "x", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", "/", "2", ":", "\n", "            ", "tr", "=", "kornia", ".", "augmentation", ".", "RandomCrop", "(", "size", "=", "(", "sh", "[", "2", "]", ",", "sh", "[", "3", "]", ")", ",", "same_on_batch", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "sh", "[", "0", "]", ")", ":", "\n", "                ", "x", "[", "i", "]", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", "[", "i", "]", ",", "size", "=", "(", "2", "*", "sh", "[", "2", "]", ",", "2", "*", "sh", "[", "3", "]", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "x", "[", "i", "]", "=", "tr", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "r", "=", "random", ".", "random", "(", ")", "*", "0.25", "+", "0.75", "\n", "tr", "=", "kornia", ".", "augmentation", ".", "RandomCrop", "(", "size", "=", "(", "int", "(", "sh", "[", "2", "]", "*", "r", ")", ",", "int", "(", "sh", "[", "3", "]", "*", "r", ")", ")", ",", "same_on_batch", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "sh", "[", "0", "]", ")", ":", "\n", "                    ", "x", "[", "i", "]", "=", "tr", "(", "x", "[", "i", "]", ")", "\n", "x", "[", "i", "]", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", "[", "i", "]", ",", "size", "=", "(", "sh", "[", "2", "]", ",", "sh", "[", "3", "]", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "", "", "else", ":", "\n", "                ", "tr", "=", "kornia", ".", "augmentation", ".", "RandomRotation", "(", "degrees", "=", "8", ",", "same_on_batch", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "sh", "[", "0", "]", ")", ":", "\n", "                    ", "x", "[", "i", "]", "=", "tr", "(", "x", "[", "i", "]", ")", "\n", "", "tr", "=", "kornia", ".", "augmentation", ".", "CenterCrop", "(", "size", "=", "(", "sh", "[", "2", "]", "*", "0.80", ",", "sh", "[", "3", "]", "*", "0.80", ")", ")", "\n", "for", "i", "in", "range", "(", "sh", "[", "0", "]", ")", ":", "\n", "                    ", "x", "[", "i", "]", "=", "tr", "(", "x", "[", "i", "]", ")", "\n", "x", "[", "i", "]", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", "[", "i", "]", ",", "size", "=", "(", "sh", "[", "2", "]", ",", "sh", "[", "3", "]", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "", "", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "tr", "=", "kornia", ".", "augmentation", ".", "RandomHorizontalFlip", "(", "p", "=", "1.0", ",", "same_on_batch", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "sh", "[", "0", "]", ")", ":", "\n", "                ", "x", "[", "i", "]", "=", "tr", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "for", "i", "in", "range", "(", "sh", "[", "0", "]", ")", ":", "\n", "                ", "x", "[", "i", "]", "=", "translate_v_fake", "(", "x", "[", "i", "]", ",", "fraction", "=", "(", "0.05", ",", "0.3", ")", ")", "\n", "", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "for", "i", "in", "range", "(", "sh", "[", "0", "]", ")", ":", "\n", "                ", "x", "[", "i", "]", "=", "translate_h_fake", "(", "x", "[", "i", "]", ",", "fraction", "=", "(", "0.05", ",", "0.3", ")", ")", "\n", "\n", "", "", "x", "=", "detach_fakes", "(", "x", ",", "ref", ")", "\n", "\n", "batch", "[", "\"image\"", "]", "=", "x", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.myRandomResizedCrop.__init__": [[89, 91], ["torchvision.transforms.RandomResizedCrop.__init__"], "methods", ["home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "256", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ",", ")", ":", "\n", "        ", "super", "(", "myRandomResizedCrop", ",", "self", ")", ".", "__init__", "(", "size", ",", "scale", ",", "ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.myRandomResizedCrop.__call__": [[92, 95], ["AugmentPipe_kornia.myRandomResizedCrop.get_params", "torchvision.transforms.functional.resized_crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "return", "TR", ".", "functional", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "(", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.combine_fakes": [[63, 73], ["list", "range", "torch.zeros_like().repeat", "torch.zeros_like().repeat", "range", "list.append", "len", "len", "torch.interpolate", "torch.zeros_like", "torch.zeros_like", "[].unsqueeze"], "function", ["None"], ["", "", "def", "combine_fakes", "(", "inp", ")", ":", "\n", "    ", "sh", "=", "inp", "[", "-", "1", "]", ".", "shape", "\n", "ans", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "sh", "[", "0", "]", ")", ":", "\n", "        ", "cur", "=", "torch", ".", "zeros_like", "(", "inp", "[", "-", "1", "]", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ".", "repeat", "(", "len", "(", "inp", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "inp", ")", ")", ":", "\n", "            ", "cur", "[", "j", ",", ":", ",", ":", ",", ":", "]", "=", "F", ".", "interpolate", "(", "inp", "[", "j", "]", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "(", "sh", "[", "2", "]", ",", "sh", "[", "3", "]", ")", ",", "\n", "mode", "=", "\"bilinear\"", ")", "\n", "", "ans", ".", "append", "(", "cur", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.detach_fakes": [[75, 86], ["list", "range", "len", "torch.zeros_like", "torch.zeros_like", "range", "list.append", "torch.interpolate", "[].unsqueeze"], "function", ["None"], ["", "def", "detach_fakes", "(", "inp", ",", "ref", ")", ":", "\n", "    ", "ans", "=", "list", "(", ")", "\n", "sh", "=", "ref", "[", "-", "1", "]", ".", "shape", "\n", "for", "i", "in", "range", "(", "len", "(", "ref", ")", ")", ":", "\n", "        ", "cur", "=", "torch", ".", "zeros_like", "(", "ref", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "sh", "[", "0", "]", ")", ":", "\n", "            ", "cur", "[", "j", ",", ":", ",", ":", ",", ":", "]", "=", "F", ".", "interpolate", "(", "inp", "[", "j", "]", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "size", "=", "(", "ref", "[", "i", "]", ".", "shape", "[", "2", "]", ",", "ref", "[", "i", "]", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "\"bilinear\"", ")", "\n", "", "ans", ".", "append", "(", "cur", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.translate_v_fake": [[97, 114], ["torch.flip", "torch.flip", "torch.rand", "torch.rand", "x[].clone", "x[].clone", "torch.rand", "torch.rand", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "", "def", "translate_v_fake", "(", "x", ",", "fraction", ")", ":", "\n", "    ", "margin", "=", "torch", ".", "rand", "(", "1", ")", "*", "(", "fraction", "[", "1", "]", "-", "fraction", "[", "0", "]", ")", "+", "fraction", "[", "0", "]", "\n", "direct_up", "=", "(", "torch", ".", "rand", "(", "1", ")", "<", "0.5", ")", "# up or down", "\n", "height", ",", "width", "=", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "\n", "left", ",", "right", "=", "0", ",", "width", "\n", "if", "direct_up", ":", "\n", "        ", "top", ",", "bottom", "=", "0", ",", "int", "(", "height", "*", "margin", ")", "\n", "", "else", ":", "\n", "        ", "top", ",", "bottom", "=", "height", "-", "int", "(", "height", "*", "margin", ")", ",", "height", "\n", "", "im_to_paste", "=", "torch", ".", "flip", "(", "x", "[", ":", ",", ":", ",", "top", ":", "bottom", ",", "left", ":", "right", "]", ",", "(", "2", ",", ")", ")", "\n", "if", "not", "direct_up", ":", "\n", "        ", "x", "[", ":", ",", ":", ",", "0", ":", "height", "-", "int", "(", "height", "*", "margin", ")", ",", ":", "]", "=", "x", "[", ":", ",", ":", ",", "int", "(", "height", "*", "margin", ")", ":", "height", ",", ":", "]", ".", "clone", "(", ")", "\n", "x", "[", ":", ",", ":", ",", "height", "-", "int", "(", "height", "*", "margin", ")", ":", ",", ":", "]", "=", "im_to_paste", "\n", "", "else", ":", "\n", "        ", "x", "[", ":", ",", ":", ",", "int", "(", "height", "*", "margin", ")", ":", "height", ",", ":", "]", "=", "x", "[", ":", ",", ":", ",", "0", ":", "height", "-", "int", "(", "height", "*", "margin", ")", ",", ":", "]", ".", "clone", "(", ")", "\n", "x", "[", ":", ",", ":", ",", ":", "int", "(", "height", "*", "margin", ")", ",", ":", "]", "=", "im_to_paste", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.AugmentPipe_kornia.translate_h_fake": [[116, 133], ["torch.flip", "torch.flip", "torch.rand", "torch.rand", "x[].clone", "x[].clone", "torch.rand", "torch.rand", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "translate_h_fake", "(", "x", ",", "fraction", ")", ":", "\n", "    ", "margin", "=", "torch", ".", "rand", "(", "1", ")", "*", "(", "fraction", "[", "1", "]", "-", "fraction", "[", "0", "]", ")", "+", "fraction", "[", "0", "]", "\n", "direct_left", "=", "(", "torch", ".", "rand", "(", "1", ")", "<", "0.5", ")", "# up or down", "\n", "height", ",", "width", "=", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "\n", "top", ",", "bottom", "=", "0", ",", "height", "\n", "if", "direct_left", ":", "\n", "        ", "left", ",", "right", "=", "0", ",", "int", "(", "width", "*", "margin", ")", "\n", "", "else", ":", "\n", "        ", "left", ",", "right", "=", "width", "-", "int", "(", "width", "*", "margin", ")", ",", "width", "\n", "", "im_to_paste", "=", "torch", ".", "flip", "(", "x", "[", ":", ",", ":", ",", "top", ":", "bottom", ",", "left", ":", "right", "]", ",", "(", "3", ",", ")", ")", "\n", "if", "not", "direct_left", ":", "\n", "        ", "x", "[", ":", ",", ":", ",", ":", ",", "0", ":", "width", "-", "int", "(", "width", "*", "margin", ")", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "int", "(", "width", "*", "margin", ")", ":", "width", "]", ".", "clone", "(", ")", "\n", "x", "[", ":", ",", ":", ",", ":", ",", "width", "-", "int", "(", "width", "*", "margin", ")", ":", "]", "=", "im_to_paste", "\n", "", "else", ":", "\n", "        ", "x", "[", ":", ",", ":", ",", ":", ",", "int", "(", "width", "*", "margin", ")", ":", "width", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "0", ":", "width", "-", "int", "(", "width", "*", "margin", ")", "]", ".", "clone", "(", ")", "\n", "x", "[", ":", ",", ":", ",", ":", ",", ":", "int", "(", "width", "*", "margin", ")", "]", "=", "im_to_paste", "\n", "", "return", "x", "", "", ""]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__init__": [[5, 10], ["AugmentPipe_kornia.AugmentPipe_kornia.AugmentPipe_kornia().to", "NotImplementedError", "AugmentPipe_kornia.AugmentPipe_kornia.AugmentPipe_kornia"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "use_kornia_augm", ":", "\n", "            ", "self", ".", "augment_func", "=", "AugmentPipe_kornia", "(", "opt", ".", "prob_augm", ",", "opt", ".", "no_masks", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Please install Differentiable Augmentation (DA) using the instructions from https://github.com/NVlabs/stylegan2-ada-pytorch\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boschresearch_one-shot-synthesis.differentiable_augmentation.diff_augm.augment_pipe.__call__": [[11, 13], ["diff_augm.augment_pipe.augment_func"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "batch", ",", "real", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "augment_func", "(", "batch", ")", "\n", "\n"]]}