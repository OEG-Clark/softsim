{"home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.get_parser": [[4, 20], ["argparse.ArgumentParser", "options.add_core_args", "options.add_barycenter_args", "options.add_sinkhorn_args", "options.add_marginal_args", "options.add_groundmetric_args", "options.add_filterwords_args", "options.add_sentence_similarity_args"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_core_args", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_barycenter_args", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_sinkhorn_args", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_marginal_args", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_groundmetric_args", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_filterwords_args", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_sentence_similarity_args"], ["def", "get_parser", "(", "objective", "=", "'sentence_similarity'", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Context Mover's Distance & Barycenters\"", ")", "\n", "add_core_args", "(", "parser", ")", "\n", "\n", "if", "objective", "==", "'sentence_similarity'", ":", "\n", "        ", "add_sentence_similarity_args", "(", "parser", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "add_barycenter_args", "(", "parser", ")", "\n", "add_sinkhorn_args", "(", "parser", ")", "\n", "add_marginal_args", "(", "parser", ")", "\n", "add_groundmetric_args", "(", "parser", ")", "\n", "add_filterwords_args", "(", "parser", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_core_args": [[22, 34], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_core_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Core args needed for setting up all tasks'", ")", "\n", "\n", "group", ".", "add_argument", "(", "'--cooc-root-path'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to folder containing cooc pickled files'", ")", "\n", "group", ".", "add_argument", "(", "'--cluster-data-dir'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to folder containing cluster data files'", ")", "\n", "group", ".", "add_argument", "(", "'--hists-path'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to normalized cluster histogram'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Launch in debugging mode'", ")", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_marginal_args": [[36, 54], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_marginal_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Related to marginals used for computing weights for barycenter'", ")", "\n", "\n", "group", ".", "add_argument", "(", "'--marginals'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If marginals should be used for the weight'", ")", "\n", "group", ".", "add_argument", "(", "'--marginals-path'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to marginal ppmi values'", ")", "\n", "group", ".", "add_argument", "(", "'--marginals-file'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to freq file (needed for sif type marginals)'", ")", "\n", "group", ".", "add_argument", "(", "'--marginal-smoothing'", ",", "action", "=", "'store'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'Marginal Smoothing exponent'", ")", "\n", "group", ".", "add_argument", "(", "'--marginal-a'", ",", "action", "=", "'store'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'Marginal A'", ")", "\n", "group", ".", "add_argument", "(", "'--marginal-type'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "default", "=", "'ppmi'", ",", "\n", "help", "=", "'Marginal kind: ppmi, sif'", ")", "\n", "group", ".", "add_argument", "(", "'--marginal-log'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Do log of marginals'", ")", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_barycenter_args": [[56, 71], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_barycenter_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Barycenter specific'", ")", "\n", "\n", "group", ".", "add_argument", "(", "'--regbary'", ",", "action", "=", "'store'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'Regularization strength in Wasserstein barycenter computation'", ")", "\n", "group", ".", "add_argument", "(", "'--bary-mode'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "default", "=", "\"plain\"", ",", "\n", "help", "=", "'Mode of Barycenter computation. Possibilities: [plain, btree]'", ")", "\n", "group", ".", "add_argument", "(", "'--seq'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Compute barycenter sequentially'", ")", "\n", "group", ".", "add_argument", "(", "'--length_correction'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Do length correction'", ")", "\n", "group", ".", "add_argument", "(", "'--weighting'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "default", "=", "\"uniform\"", ",", "\n", "help", "=", "'Weighting to use for each histogram in barycenter computation. \\\n\t\t\t\t\t\tPossibilities: [\"cooc_inv\", \"ppmi_direct\", \"uniform\", \"hm_cooc_btree\"]'", ")", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_sinkhorn_args": [[73, 81], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_sinkhorn_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Sinkhorn specific'", ")", "\n", "\n", "group", ".", "add_argument", "(", "'--thresh'", ",", "action", "=", "'store'", ",", "type", "=", "float", ",", "default", "=", "1e-09", ",", "\n", "help", "=", "'Threshold for sinkhorn iterations'", ")", "\n", "group", ".", "add_argument", "(", "'--max-its'", ",", "action", "=", "'store'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'Max Number of sinkhorn iterations to perform (default:100)'", ")", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_sentence_similarity_args": [[83, 125], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_sentence_similarity_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Sentence similarity specific args'", ")", "\n", "\n", "group", ".", "add_argument", "(", "'--tasks'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "default", "=", "\"STS15\"", ",", "\n", "help", "=", "'Tasks to run on'", ")", "\n", "group", ".", "add_argument", "(", "'--save-result-file'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to file containing the saved results'", ")", "\n", "group", ".", "add_argument", "(", "'--gpu-id'", ",", "action", "=", "'store'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'GPU core to use (default: -1 [disabled])'", ")", "\n", "group", ".", "add_argument", "(", "'--sts-batch-size'", ",", "action", "=", "'store'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "\n", "help", "=", "'batch size during sts evaluation (useful to control in gpu mode) (default: 32)'", ")", "\n", "group", ".", "add_argument", "(", "'--similarity'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "default", "=", "\"wasserstein\"", ",", "\n", "help", "=", "'Similarity/Distance to use between histograms. Possibilities: [wasserstein, wass_cosine]'", ")", "\n", "group", ".", "add_argument", "(", "'--normalize'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If cluster centers vectors should be normalized'", ")", "\n", "group", ".", "add_argument", "(", "'--similarity-batched'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Compute wass dist in batched mode '", ")", "\n", "group", ".", "add_argument", "(", "'--barycenter-batched'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Compute wass barycenters in batched mode '", ")", "\n", "group", ".", "add_argument", "(", "'--double'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use double for barycenter computations'", ")", "\n", "group", ".", "add_argument", "(", "'--wasserstein-kp'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use kernel product based method for calculating wasserstein distance'", ")", "\n", "group", ".", "add_argument", "(", "'--save-compute-kp'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Save compute of ground matrix in kp'", ")", "\n", "group", ".", "add_argument", "(", "'--interpolate-repr'", ",", "action", "=", "'store'", ",", "type", "=", "float", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Interpolate between point and distribution representations, where \\\n\t\t\t\t\t\tthe value indicates how much contribution of point representations to use '", ")", "\n", "group", ".", "add_argument", "(", "'--interpolate-complete'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Interpolate starting from the calculation of barycenters'", ")", "\n", "group", ".", "add_argument", "(", "'--interpolate-reduced'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Interpolate with reduced (weighted avg) point embeddings \\\n\t\t\t\t\t\tand just use it in distance calculations (and not barycenter)'", ")", "\n", "group", ".", "add_argument", "(", "'--barycentric-interpolate-reduced'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Interpolate in barycentric manner with reduced (weighted avg) point embeddings \\\n\t\t\t\t\t\tand just use it in distance calculations (and not barycenter)'", ")", "\n", "group", ".", "add_argument", "(", "'--interpolate-wts-uniform'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Uniform wts for point embeddings while interpolate (intended for sent2vec'", ")", "\n", "group", ".", "add_argument", "(", "'--interpolate-reduced-pc'", ",", "action", "=", "'store'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Number of principal components to remove in interpolate-reduced (-1 means not done)'", ")", "\n", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_groundmetric_args": [[127, 142], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_groundmetric_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Ground Metric specific'", ")", "\n", "\n", "group", ".", "add_argument", "(", "'--gm-normalize'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Normalize ground metric. Possibilities: [max, min, median]'", ")", "\n", "group", ".", "add_argument", "(", "'--gm-type'", ",", "action", "=", "'store'", ",", "type", "=", "str", ",", "default", "=", "\"euclidean\"", ",", "\n", "help", "=", "'ground metric type to use. Possibilities: [euclidean, cosine, angular]'", ")", "\n", "group", ".", "add_argument", "(", "'--clip-gm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'to clip ground metric'", ")", "\n", "group", ".", "add_argument", "(", "'--clip-min'", ",", "action", "=", "'store'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "'Value for clip-min for gm'", ")", "\n", "group", ".", "add_argument", "(", "'--clip-max'", ",", "action", "=", "'store'", ",", "type", "=", "float", ",", "default", "=", "5", ",", "\n", "help", "=", "'Value for clip-max for gm'", ")", "\n", "group", ".", "add_argument", "(", "'--wass2'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Compute wasserstein-2 i.e. C(x, y) = ||x-y||^2. Default: Wasserstein-1'", ")", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.options.add_filterwords_args": [[144, 156], ["parser.add_argument_group", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "def", "add_filterwords_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'Filtering words while computing barycenter'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--filter-freq-relative'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Filter words by freq relative to the sentence in barycenter'", ")", "\n", "parser", ".", "add_argument", "(", "'--filter-mult'", ",", "action", "=", "'store'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'This is the x in 1/(L.x) which is used as a threshold to filter.'", ")", "\n", "parser", ".", "add_argument", "(", "'--filter-freq'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Filter words by freq in barycenter'", ")", "\n", "parser", ".", "add_argument", "(", "'--filter-thresh'", ",", "action", "=", "'store'", ",", "type", "=", "float", ",", "default", "=", "1e-05", ",", "\n", "help", "=", "'Threshold for taking word into barycenter computation'", ")", "\n", "return", "group", "\n", "", ""]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_pickler.main": [[17, 63], ["utils.dotdict", "print", "print", "print", "logging.basicConfig", "logging.info", "cooc_analysis.Analysis", "cooc_analysis.Analysis.setup_cooccurr_analysis", "logging.info", "utils.dotdict.cooc_fpath.replace", "cooc_bin_name.replace", "save_cooc", "logging.info", "utils.pickle_obj", "logging.info", "vars", "json.dumps", "logging.getLevelName", "logging.getLogger().setLevel", "utils.dotdict.cooc_fpath.split", "os.path.join", "utils.pickle_obj", "logging.info", "os.path.join", "str", "os.path.join", "str", "logging.getLogger", "str"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.setup_cooccurr_analysis", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.pickle_obj", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.pickle_obj"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "params", "=", "utils", ".", "dotdict", "(", "vars", "(", "args", ")", ")", "\n", "print", "(", "'-------- PARAMETERS --------'", ")", "\n", "print", "(", "json", ".", "dumps", "(", "params", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", ")", "\n", "print", "(", "'----------------------------'", ")", "\n", "\n", "logging", ".", "basicConfig", "(", ")", "\n", "if", "params", ".", "log", ":", "\n", "        ", "level", "=", "logging", ".", "getLevelName", "(", "params", ".", "log", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "level", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Setup_cooccurr_analysis\"", ")", "\n", "\n", "opts", "=", "{", "}", "\n", "opts", "[", "'cooc_fpath'", "]", "=", "params", ".", "cooc_fpath", "\n", "opts", "[", "'vocab_fpath'", "]", "=", "params", ".", "vocab_fpath", "\n", "opts", "[", "'joblib'", "]", "=", "params", ".", "joblib", "\n", "opts", "[", "'sparse'", "]", "=", "params", ".", "sparse", "\n", "analysis", "=", "Analysis", "(", "opts", "=", "opts", ")", "\n", "analysis", ".", "setup_cooccurr_analysis", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"Done with cooccur reading and analysis. Starting pickling!\"", ")", "\n", "\n", "cooc_bin_name", "=", "params", ".", "cooc_fpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "cooc_folder_name", "=", "params", ".", "cooc_fpath", ".", "replace", "(", "cooc_bin_name", ",", "''", ")", "\n", "cooc_bin_name_without_ext", "=", "cooc_bin_name", ".", "replace", "(", "'.bin'", ",", "''", ")", "\n", "\n", "if", "params", ".", "joblib", ":", "\n", "        ", "save_cooc", "=", "utils", ".", "joblib_obj", "\n", "", "elif", "params", ".", "sparse", ":", "\n", "        ", "save_cooc", "=", "utils", ".", "sparse_obj", "\n", "", "else", ":", "\n", "        ", "save_cooc", "=", "utils", ".", "pickle_obj", "\n", "\n", "", "pkl_time", "=", "save_cooc", "(", "analysis", ".", "cooccurr_dic", ",", "os", ".", "path", ".", "join", "(", "cooc_folder_name", ",", "\n", "analysis", ".", "cooccurr_str", "+", "\"_\"", "+", "cooc_bin_name_without_ext", "+", "\".pickle\"", ")", ")", "\n", "logging", ".", "info", "(", "\"Pickled cooccurr_dic in time: \"", "+", "str", "(", "pkl_time", ")", ")", "\n", "\n", "if", "not", "params", ".", "skip_shuf_cooc", ":", "\n", "        ", "pkl_time", "=", "utils", ".", "pickle_obj", "(", "analysis", ".", "shuf_cooccurr", ",", "os", ".", "path", ".", "join", "(", "cooc_folder_name", ",", "\n", "analysis", ".", "shuf_cooccurr_str", "+", "\"_\"", "+", "cooc_bin_name_without_ext", "+", "\".pickle\"", ")", ")", "\n", "logging", ".", "info", "(", "\"Pickled shuf_cooccurr in time: \"", "+", "str", "(", "pkl_time", ")", ")", "\n", "\n", "", "pkl_time", "=", "utils", ".", "pickle_obj", "(", "analysis", ".", "id2word_cooc", ",", "os", ".", "path", ".", "join", "(", "cooc_folder_name", ",", "\n", "analysis", ".", "id2word_cooc_str", "+", "\"_\"", "+", "cooc_bin_name_without_ext", "+", "\".pickle\"", ")", ")", "\n", "logging", ".", "info", "(", "\"Pickled id2word_cooc in time: \"", "+", "str", "(", "pkl_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.__init__": [[12, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "        ", "self", ".", "opts", "=", "opts", "\n", "\n", "self", ".", "cooccurr_dic", "=", "{", "}", "\n", "self", ".", "shuf_cooccurr", "=", "[", "]", "\n", "self", ".", "cooccurrences_df", "=", "None", "\n", "self", ".", "id2word_cooc", "=", "[", "]", "\n", "self", ".", "pickle_ext_str", "=", "\".pickle\"", "\n", "self", ".", "cooccurr_str", "=", "\"cooccurr_dic\"", "\n", "self", ".", "shuf_cooccurr_str", "=", "\"shuf_cooccurr\"", "\n", "self", ".", "id2word_cooc_str", "=", "\"id2word_cooc\"", "\n", "self", ".", "load_mode", "=", "flags", ".", "LOAD_ALL", "\n", "self", ".", "get_vocab_counts", "=", "False", "\n", "\n", "if", "'sparse'", "in", "self", ".", "opts", "and", "self", ".", "opts", "[", "'sparse'", "]", ":", "\n", "            ", "self", ".", "sparse", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "sparse", "=", "False", "\n", "\n", "", "if", "'joblib'", "in", "self", ".", "opts", "and", "self", ".", "opts", "[", "'joblib'", "]", ":", "\n", "            ", "self", ".", "joblib", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "joblib", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.read_cooccurrences": [[37, 53], ["struct.calcsize", "struct.Struct", "open", "f.read", "struct_unpack", "cooc_analysis.Analysis.read_cooccurrences.read_chunks"], "methods", ["None"], ["", "", "def", "read_cooccurrences", "(", "self", ")", ":", "\n", "        ", "struct_fmt", "=", "'iid'", "\n", "struct_len", "=", "struct", ".", "calcsize", "(", "struct_fmt", ")", "\n", "struct_unpack", "=", "struct", ".", "Struct", "(", "struct_fmt", ")", ".", "unpack_from", "\n", "\n", "\n", "def", "read_chunks", "(", "f", ",", "length", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "data", "=", "f", ".", "read", "(", "length", ")", "\n", "if", "not", "data", ":", "\n", "                    ", "break", "\n", "", "yield", "data", "\n", "\n", "\n", "", "", "with", "open", "(", "self", ".", "opts", "[", "'cooc_fpath'", "]", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "shuf_cooccurr", "=", "[", "struct_unpack", "(", "chunk", ")", "for", "chunk", "in", "read_chunks", "(", "f", ",", "struct_len", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.set_id2word_cooc": [[55, 62], ["open", "open", "os.path.join", "os.path.join", "l.rstrip().split", "int", "l.rstrip().split", "l.rstrip", "l.rstrip().split", "l.rstrip", "l.rstrip"], "methods", ["None"], ["", "", "def", "set_id2word_cooc", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "get_vocab_counts", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "opts", "[", "'vocab_fpath'", "]", ")", ")", "as", "f", ":", "\n", "                ", "self", ".", "id2word_cooc", "=", "[", "l", ".", "rstrip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "l", "in", "f", "]", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "opts", "[", "'vocab_fpath'", "]", ")", ")", "as", "f", ":", "\n", "                ", "self", ".", "id2word_cooc", "=", "[", "(", "l", ".", "rstrip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "[", "0", "]", ",", "int", "(", "l", ".", "rstrip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "[", "1", "]", ")", ")", "for", "l", "in", "f", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis._set_cooccurr_dic": [[64, 67], ["tuple"], "methods", ["None"], ["", "", "", "def", "_set_cooccurr_dic", "(", "self", ")", ":", "\n", "        ", "self", ".", "cooccurr_dic", "=", "{", "tuple", "(", "[", "self", ".", "id2word_cooc", "[", "w_id", "-", "1", "]", "for", "w_id", "in", "word_ids", "]", ")", ":", "cnt", "\n", "for", "(", "*", "word_ids", ",", "cnt", ")", "in", "self", ".", "shuf_cooccurr", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.get_sps_cooc_from_shuffled": [[69, 91], ["print", "len", "print", "print", "numpy.empty", "numpy.empty", "numpy.empty", "print", "scipy.csr_matrix", "str", "len"], "methods", ["None"], ["", "def", "get_sps_cooc_from_shuffled", "(", "self", ",", "shuf_cooccurr", ",", "num_words", ")", ":", "\n", "        ", "print", "(", "\"getting sps cooc from shuffled\"", ")", "\n", "cooc_len", "=", "len", "(", "shuf_cooccurr", ")", "\n", "\n", "print", "(", "\"cooc_len is \"", ",", "cooc_len", ")", "\n", "print", "(", "\"num_words is \"", ",", "num_words", ")", "\n", "\n", "row", "=", "np", ".", "empty", "(", "(", "cooc_len", ",", ")", ")", "\n", "col", "=", "np", ".", "empty", "(", "(", "cooc_len", ",", ")", ")", "\n", "data", "=", "np", ".", "empty", "(", "(", "cooc_len", ",", ")", ")", "\n", "\n", "idx", "=", "0", "\n", "for", "(", "*", "word_ids", ",", "cnt", ")", "in", "shuf_cooccurr", ":", "\n", "            ", "assert", "len", "(", "word_ids", ")", "==", "2", "\n", "# one based indexing", "\n", "row", "[", "idx", "]", "=", "word_ids", "[", "0", "]", "-", "1", "\n", "col", "[", "idx", "]", "=", "word_ids", "[", "1", "]", "-", "1", "\n", "data", "[", "idx", "]", "=", "cnt", "\n", "idx", "+=", "1", "\n", "", "print", "(", "\"idx at the end is \"", ",", "str", "(", "idx", ")", ")", "\n", "sps_cooc", "=", "sp", ".", "csr_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "num_words", ",", "num_words", ")", ")", "\n", "return", "sps_cooc", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis._set_cooccurr_sparse": [[93, 95], ["cooc_analysis.Analysis.get_sps_cooc_from_shuffled", "len"], "methods", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.get_sps_cooc_from_shuffled"], ["", "def", "_set_cooccurr_sparse", "(", "self", ")", ":", "\n", "        ", "self", ".", "cooccurr_dic", "=", "self", ".", "get_sps_cooc_from_shuffled", "(", "self", ".", "shuf_cooccurr", ",", "len", "(", "self", ".", "id2word_cooc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.get_cooccurrence_btwn": [[97, 100], ["cooc_analysis.Analysis.cooccurr_dic.get"], "methods", ["None"], ["", "def", "get_cooccurrence_btwn", "(", "self", ",", "wrd1", ",", "wrd2", ")", ":", "\n", "        ", "assert", "not", "self", ".", "sparse", "\n", "return", "self", ".", "cooccurr_dic", ".", "get", "(", "(", "wrd1", ",", "wrd2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.get_cooccurrences": [[102, 107], ["None"], "methods", ["None"], ["", "def", "get_cooccurrences", "(", "self", ",", "word", ")", ":", "\n", "        ", "assert", "not", "self", ".", "sparse", "\n", "return", "[", "{", "word_pair", ":", "self", ".", "cooccurr_dic", "[", "word_pair", "]", "}", "\n", "for", "word_pair", "in", "self", ".", "cooccurr_dic", "\n", "if", "word", "==", "word_pair", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.has_keyword_in_filenames": [[109, 114], ["os.listdir"], "methods", ["None"], ["", "def", "has_keyword_in_filenames", "(", "self", ",", "root", ",", "keyword", ")", ":", "\n", "        ", "for", "file", "in", "os", ".", "listdir", "(", "root", ")", ":", "\n", "            ", "if", "(", "keyword", "in", "file", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.setup_cooccurr_analysis": [[116, 128], ["print", "cooc_analysis.Analysis.read_cooccurrences", "cooc_analysis.Analysis.set_id2word_cooc", "cooc_analysis.Analysis.load_from_pkl", "cooc_analysis.Analysis.has_keyword_in_filenames", "cooc_analysis.Analysis._set_cooccurr_dic", "cooc_analysis.Analysis._set_cooccurr_sparse"], "methods", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.read_cooccurrences", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.set_id2word_cooc", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.load_from_pkl", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.has_keyword_in_filenames", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis._set_cooccurr_dic", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis._set_cooccurr_sparse"], ["", "def", "setup_cooccurr_analysis", "(", "self", ",", "root", "=", "None", ")", ":", "\n", "# print(\"Root is \", root)", "\n", "        ", "if", "root", "is", "None", "or", "(", "not", "self", ".", "has_keyword_in_filenames", "(", "root", ",", "self", ".", "pickle_ext_str", ")", ")", ":", "\n", "            ", "print", "(", "\"Loading from cooccurrence binary\"", ")", "\n", "self", ".", "read_cooccurrences", "(", ")", "\n", "self", ".", "set_id2word_cooc", "(", ")", "\n", "if", "not", "self", ".", "sparse", ":", "\n", "                ", "self", ".", "_set_cooccurr_dic", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_set_cooccurr_sparse", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "load_from_pkl", "(", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.load_from_pkl": [[130, 146], ["print", "os.listdir", "utils.load_cooc", "utils.load_pickle", "utils.load_pickle"], "methods", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.load_cooc", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.load_pickle", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.load_pickle"], ["", "", "def", "load_from_pkl", "(", "self", ",", "root", ")", ":", "\n", "        ", "print", "(", "\"Loading from pickled files\"", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "root", ")", ":", "\n", "            ", "if", "not", "self", ".", "pickle_ext_str", "in", "file", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "if", "(", "(", "\n", "self", ".", "load_mode", "==", "flags", ".", "LOAD_ALL", "or", "self", ".", "load_mode", "==", "flags", ".", "LOAD_INTM", ")", "and", "self", ".", "cooccurr_str", "in", "file", ")", ":", "\n", "                    ", "self", ".", "cooccurr_dic", "=", "utils", ".", "load_cooc", "(", "root", "+", "file", ",", "joblib", "=", "self", ".", "joblib", ",", "sparse", "=", "self", ".", "sparse", ",", "\n", "nick", "=", "self", ".", "cooccurr_str", ")", "\n", "\n", "", "elif", "(", "self", ".", "load_mode", "==", "flags", ".", "LOAD_ALL", "and", "self", ".", "shuf_cooccurr_str", "in", "file", ")", ":", "\n", "                    ", "self", ".", "shuf_cooccurr", "=", "utils", ".", "load_pickle", "(", "root", "+", "file", ",", "nick", "=", "self", ".", "shuf_cooccurr_str", ")", "\n", "\n", "", "elif", "self", ".", "id2word_cooc_str", "in", "file", ":", "\n", "                    ", "self", ".", "id2word_cooc", "=", "utils", ".", "load_pickle", "(", "root", "+", "file", ",", "nick", "=", "self", ".", "id2word_cooc_str", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.build_word_vector_matrix": [[39, 83], ["codecs.open", "enumerate", "numpy.array", "r.split", "r.lower().split", "print", "len", "len", "labels_array.append", "np_arrays.append", "print", "numpy.array", "r.lower", "labels_array.append", "np_arrays.append", "numpy.array", "len", "numpy.array", "float", "float"], "function", ["None"], ["def", "build_word_vector_matrix", "(", "vector_file", ",", "n_words", ",", "dim", "=", "300", ",", "word2id", "=", "None", ",", "context_vectors", "=", "False", ",", "no_lower", "=", "False", ")", ":", "\n", "    ", "'''Iterate over the GloVe array read from sys.argv[1] and return its vectors and labels as arrays'''", "\n", "np_arrays", "=", "[", "]", "\n", "labels_array", "=", "[", "]", "\n", "with", "codecs", ".", "open", "(", "vector_file", ",", "'r'", ",", "'latin1'", ")", "as", "f", ":", "\n", "        ", "for", "c", ",", "r", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "if", "no_lower", ":", "\n", "                ", "sr", "=", "r", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "                ", "sr", "=", "r", ".", "lower", "(", ")", ".", "split", "(", ")", "\n", "\n", "", "if", "(", "not", "context_vectors", ")", "and", "len", "(", "sr", ")", "!=", "(", "dim", "+", "1", ")", ":", "\n", "# dim + 1 is because it first reads the word (label and then dim many numbers)", "\n", "# just removes the vector for white space ", "\n", "# (it actually reads it twice, once for space and then vector)", "\n", "                ", "continue", "\n", "\n", "", "if", "context_vectors", "and", "len", "(", "sr", ")", "!=", "(", "2", "*", "dim", "+", "3", ")", ":", "\n", "                ", "print", "(", "\"Context vector: Not in appropriate format \"", ")", "\n", "continue", "\n", "\n", "", "try", ":", "\n", "                ", "st_idx", "=", "1", "\n", "if", "context_vectors", ":", "\n", "                    ", "st_idx", "+=", "dim", "+", "1", "# exclude the target vector and its bias", "\n", "\n", "", "if", "word2id", "is", "not", "None", ":", "\n", "                    ", "if", "sr", "[", "0", "]", "in", "word2id", ":", "\n", "                        ", "labels_array", ".", "append", "(", "sr", "[", "0", "]", ")", "\n", "np_arrays", ".", "append", "(", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "sr", "[", "st_idx", ":", "st_idx", "+", "dim", "]", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "labels_array", ".", "append", "(", "sr", "[", "0", "]", ")", "\n", "np_arrays", ".", "append", "(", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "sr", "[", "st_idx", ":", "st_idx", "+", "dim", "]", "]", ")", ")", "\n", "\n", "# since all words from the given vocabulary many not possess a word vector", "\n", "# as a result maintain a vocab_covered dictionary", "\n", "\n", "", "", "except", "ValueError", ":", "\n", "                ", "print", "(", "c", ",", "len", "(", "sr", ")", ")", "\n", "\n", "", "if", "c", "==", "(", "n_words", "+", "1", ")", ":", "\n", "                ", "return", "np", ".", "array", "(", "np_arrays", ")", ",", "labels_array", "\n", "\n", "", "", "", "return", "np", ".", "array", "(", "np_arrays", ")", ",", "labels_array", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.handle_empty_clusters": [[85, 97], ["range", "str", "print", "empty_cluster_ids.append", "str"], "function", ["None"], ["", "def", "handle_empty_clusters", "(", "cluster_to_words", ",", "num_clusters", ")", ":", "\n", "    ", "new_cluster_to_words", "=", "{", "}", "\n", "empty_cluster_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_clusters", ")", ":", "\n", "        ", "cl_key", "=", "str", "(", "i", ")", "\n", "if", "cl_key", "in", "cluster_to_words", ":", "\n", "            ", "new_cluster_to_words", "[", "cl_key", "]", "=", "cluster_to_words", "[", "cl_key", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Encountered empty cluster with id: \"", ",", "str", "(", "i", ")", ")", "\n", "new_cluster_to_words", "[", "cl_key", "]", "=", "[", "]", "\n", "empty_cluster_ids", ".", "append", "(", "i", ")", "\n", "", "", "return", "new_cluster_to_words", ",", "empty_cluster_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.handle_empty_clusters_better": [[99, 116], ["sorted", "dict", "print", "range", "list", "list", "str", "zip", "len", "str", "cluster_to_words.items", "zip", "range", "print", "empty_cluster_ids.append", "int", "len", "str"], "function", ["None"], ["", "def", "handle_empty_clusters_better", "(", "cluster_to_words", ",", "num_clusters", ")", ":", "\n", "    ", "sorted_cluster_to_words", "=", "sorted", "(", "list", "(", "cluster_to_words", ".", "items", "(", ")", ")", ",", "\n", "key", "=", "lambda", "item", ":", "int", "(", "item", "[", "0", "]", ")", ")", "# sorted list of tuples", "\n", "sorted_word_members", "=", "list", "(", "zip", "(", "*", "sorted_cluster_to_words", ")", ")", "[", "\n", "1", "]", "# 'zip(*)' unzips & we have a list containing 2 tuples, list[0] = idxs, list[0]=vals", "\n", "new_cluster_ids", "=", "[", "str", "(", "clus_id", ")", "for", "clus_id", "in", "range", "(", "len", "(", "sorted_word_members", ")", ")", "]", "\n", "new_cluster_to_words", "=", "dict", "(", "zip", "(", "new_cluster_ids", ",", "sorted_word_members", ")", ")", "\n", "print", "(", "\"Sorted cluster_to_words now, rechecking len of it \"", ",", "len", "(", "sorted_word_members", ")", ")", "\n", "\n", "empty_cluster_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_clusters", ")", ":", "\n", "        ", "cl_key", "=", "str", "(", "i", ")", "\n", "if", "cl_key", "not", "in", "cluster_to_words", ":", "\n", "            ", "print", "(", "\"Encountered empty cluster with id: \"", ",", "str", "(", "i", ")", ")", "\n", "empty_cluster_ids", ".", "append", "(", "i", ")", "\n", "\n", "", "", "return", "new_cluster_to_words", ",", "empty_cluster_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.find_word_clusters": [[118, 127], ["enumerate", "cluster_to_words[].append", "str", "str", "str"], "function", ["None"], ["", "def", "find_word_clusters", "(", "labels_array", ",", "cluster_labels", ")", ":", "\n", "    ", "'''Read in the labels array and clusters label and return the set of words in each cluster'''", "\n", "cluster_to_words", "=", "{", "}", "\n", "for", "idx", ",", "word", "in", "enumerate", "(", "cluster_labels", ")", ":", "\n", "        ", "if", "(", "not", "str", "(", "word", ")", "in", "cluster_to_words", ")", ":", "\n", "            ", "cluster_to_words", "[", "str", "(", "word", ")", "]", "=", "[", "]", "\n", "", "cluster_to_words", "[", "str", "(", "word", ")", "]", ".", "append", "(", "labels_array", "[", "idx", "]", ")", "\n", "\n", "", "return", "cluster_to_words", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.visualize_clustering": [[129, 206], ["print", "len", "range", "range", "numpy.asarray", "ha_va_vals.remove", "random.shuffle", "TSNE", "TSNE.fit_transform", "plt.figure", "plt.scatter", "range", "io.BytesIO", "plt.savefig", "io.BytesIO.seek", "Image.open", "str", "numpy.array", "numpy.linalg.norm", "numpy.argsort", "len", "len", "range", "print", "tensorboard.add_image", "print", "min", "plt.annotate", "int", "str", "str", "transforms.ToTensor", "str", "str", "str"], "function", ["None"], ["", "def", "visualize_clustering", "(", "cluster_to_words", ",", "word_vector_dict", ",", "cluster_center_vectors", ",", "points_per_cluster", "=", "5", ",", "\n", "perplexity", "=", "30", ",", "n_components", "=", "2", ",", "init", "=", "'pca'", ",", "n_iter", "=", "2500", ",", "random_state", "=", "23", ",", "global_step", "=", "-", "1", ",", "tensorboard", "=", "None", ")", ":", "\n", "    ", "from", "sklearn", ".", "manifold", "import", "TSNE", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "torchvision", ".", "transforms", "as", "transforms", "\n", "import", "io", "\n", "from", "PIL", "import", "Image", "\n", "print", "(", "\"IN VISUALIZATION\"", ")", "\n", "\n", "clusters_to_make", "=", "len", "(", "cluster_to_words", ")", "\n", "closest_pts_dic", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "clusters_to_make", ")", ":", "\n", "        ", "cluster_key", "=", "str", "(", "i", ")", "\n", "points", "=", "cluster_to_words", "[", "cluster_key", "]", "\n", "vectors", "=", "np", ".", "array", "(", "[", "word_vector_dict", "[", "point", "]", "for", "point", "in", "points", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cluster_center", "=", "cluster_center_vectors", "[", "int", "(", "cluster_key", ")", "]", "\n", "vectors", "=", "vectors", "-", "cluster_center", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "vectors", ",", "axis", "=", "1", ")", "\n", "indices", "=", "np", ".", "argsort", "(", "distances", ")", "\n", "closest_pts", "=", "[", "points", "[", "idx", "]", "for", "idx", "in", "indices", "]", "\n", "closest_selected_pts", "=", "closest_pts", "[", ":", "points_per_cluster", "]", "\n", "closest_pts_dic", "[", "cluster_key", "]", "=", "closest_selected_pts", "\n", "\n", "", "vis_word_labels", "=", "[", "]", "\n", "vis_vectors", "=", "[", "]", "\n", "vis_words", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "clusters_to_make", ")", ":", "\n", "        ", "closest_len", "=", "len", "(", "closest_pts_dic", "[", "str", "(", "i", ")", "]", ")", "\n", "vis_word_labels", "+=", "[", "i", "]", "*", "min", "(", "points_per_cluster", ",", "closest_len", ")", "\n", "vis_vectors", "+=", "[", "word_vector_dict", "[", "point", "]", "for", "point", "in", "closest_pts_dic", "[", "str", "(", "i", ")", "]", "]", "\n", "vis_words", "+=", "closest_pts_dic", "[", "str", "(", "i", ")", "]", "\n", "\n", "", "vis_vectors", "=", "np", ".", "asarray", "(", "vis_vectors", ")", "\n", "\n", "ha_vals", "=", "[", "'center'", ",", "'right'", ",", "'left'", "]", "\n", "va_vals", "=", "[", "'center'", ",", "'top'", ",", "'bottom'", "]", "\n", "\n", "ha_va_vals", "=", "[", "(", "x", ",", "y", ")", "for", "x", "in", "ha_vals", "for", "y", "in", "va_vals", "]", "\n", "ha_va_vals", ".", "remove", "(", "(", "ha_vals", "[", "0", "]", ",", "va_vals", "[", "0", "]", ")", ")", "\n", "random", ".", "shuffle", "(", "ha_va_vals", ")", "\n", "\n", "tsne_model", "=", "TSNE", "(", "perplexity", "=", "perplexity", ",", "n_components", "=", "n_components", ",", "init", "=", "init", ",", "n_iter", "=", "n_iter", ",", "\n", "random_state", "=", "random_state", ")", "\n", "low_dim_vectors", "=", "tsne_model", ".", "fit_transform", "(", "vis_vectors", ")", "\n", "x_comp", "=", "low_dim_vectors", "[", ":", ",", "0", "]", "\n", "y_comp", "=", "low_dim_vectors", "[", ":", ",", "1", "]", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "plt", ".", "scatter", "(", "x_comp", ",", "y_comp", ",", "c", "=", "vis_word_labels", ")", "\n", "\n", "global_ct", "=", "0", "\n", "for", "i", "in", "range", "(", "clusters_to_make", ")", ":", "\n", "        ", "closest_len", "=", "len", "(", "closest_pts_dic", "[", "str", "(", "i", ")", "]", ")", "\n", "local_vis_words", "=", "closest_pts_dic", "[", "str", "(", "i", ")", "]", "\n", "\n", "for", "j", "in", "range", "(", "closest_len", ")", ":", "\n", "            ", "plt", ".", "annotate", "(", "local_vis_words", "[", "j", "]", ",", "\n", "xy", "=", "(", "x_comp", "[", "global_ct", "+", "j", "]", ",", "y_comp", "[", "global_ct", "+", "j", "]", ")", ",", "\n", "xytext", "=", "(", "10", ",", "10", ")", ",", "\n", "textcoords", "=", "'offset points'", ",", "\n", "ha", "=", "ha_va_vals", "[", "j", "]", "[", "0", "]", ",", "\n", "va", "=", "ha_va_vals", "[", "j", "]", "[", "1", "]", ")", "\n", "\n", "", "global_ct", "+=", "closest_len", "\n", "\n", "", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "plt", ".", "savefig", "(", "buf", ",", "format", "=", "'jpeg'", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "image", "=", "Image", ".", "open", "(", "buf", ")", "\n", "image", "=", "transforms", ".", "ToTensor", "(", ")", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "\n", "if", "tensorboard", "is", "not", "None", "and", "global_step", "!=", "-", "1", ":", "\n", "        ", "print", "(", "\"Adding image to tensorboard\"", ")", "\n", "tensorboard", ".", "add_image", "(", "'images/tSNE_Clustering'", ",", "image", ",", "global_step", "=", "global_step", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Tensorboard is not available for saving cluster visualization\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.perform_clustering": [[208, 298], ["sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "clustering.find_word_clusters", "dict", "time.perf_counter", "clustering.visualize_clustering", "time.perf_counter", "logging.info", "os.path.join", "utils.mkdir", "open", "open", "open", "print", "pickle.dump", "print", "pickle.dump", "print", "pickle.dump", "print", "print", "print", "len", "clustering.handle_empty_clusters_better", "print", "print", "numpy.random.seed", "clustering.find_word_clusters", "print", "zip", "utils.get_timestamp", "os.path.join", "os.path.join", "os.path.join", "str", "str", "str", "sys.path.append", "print", "kmeans_cuda", "len", "clustering.handle_empty_clusters_better", "print", "print", "len", "len", "kmeans_cuda", "str", "str", "str", "numpy.linalg.norm().reshape", "len", "str", "numpy.linalg.norm", "str"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.find_word_clusters", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.visualize_clustering", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.mkdir", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.handle_empty_clusters_better", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.find_word_clusters", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.get_timestamp", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.handle_empty_clusters_better"], ["", "", "def", "perform_clustering", "(", "data_vec", ",", "words", ",", "num_clusters", ",", "lib", "=", "'sklearn'", ",", "cores", "=", "'24'", ",", "metric", "=", "'euclidean'", ",", "tolerance", "=", "1e-4", ",", "\n", "init", "=", "None", ",", "dump", "=", "False", ",", "dump_path", "=", "None", ",", "random_state", "=", "21", ",", "verbose", "=", "False", ",", "variation", "=", "'elkan'", ",", "debug", "=", "False", ",", "\n", "max_iter", "=", "300", ",", "yinyang_t", "=", "0.5", ",", "device", "=", "1", ",", "kmcuda_path", "=", "None", ",", "vis_fig", "=", "False", ",", "vis_points", "=", "5", ",", "vis_perplexity", "=", "30", ",", "vis_iter", "=", "2500", ",", "global_step", "=", "-", "1", ",", "tensorboard", "=", "None", ")", ":", "\n", "    ", "if", "lib", "==", "'sklearn'", ":", "\n", "        ", "if", "init", "is", "None", ":", "\n", "            ", "sklearn_init", "=", "'k-means++'", "\n", "", "else", ":", "\n", "            ", "sklearn_init", "=", "init", "\n", "\n", "", "if", "debug", ":", "\n", "            ", "print", "(", "\"Inside clustering\"", ")", "\n", "print", "(", "\"Number of clusters: \"", ",", "str", "(", "num_clusters", ")", ")", "\n", "\n", "", "kmeans_model", "=", "KMeans", "(", "init", "=", "sklearn_init", ",", "n_clusters", "=", "num_clusters", ",", "n_jobs", "=", "cores", ",", "verbose", "=", "verbose", ",", "algorithm", "=", "variation", ",", "random_state", "=", "random_state", ",", "tol", "=", "tolerance", ",", "\n", "max_iter", "=", "max_iter", ")", "\n", "\n", "kmeans_model", ".", "fit", "(", "data_vec", ")", "\n", "cluster_labels", "=", "kmeans_model", ".", "labels_", "\n", "cluster_to_words", "=", "find_word_clusters", "(", "words", ",", "cluster_labels", ")", "\n", "\n", "if", "debug", ":", "\n", "            ", "print", "(", "\"Number of clusters: \"", ",", "str", "(", "len", "(", "cluster_to_words", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "cluster_to_words", ")", "<", "num_clusters", ":", "\n", "            ", "cluster_to_words", ",", "empty_cluster_ids", "=", "handle_empty_clusters_better", "(", "cluster_to_words", ",", "num_clusters", ")", "\n", "print", "(", "\"Number of clusters after handling empty clusters : \"", ",", "str", "(", "len", "(", "cluster_to_words", ")", ")", ")", "\n", "print", "(", "\"empty_cluster_ids are \"", ",", "empty_cluster_ids", ")", "\n", "", "cluster_center_vectors", "=", "kmeans_model", ".", "cluster_centers_", "\n", "\n", "", "elif", "lib", "==", "'kmcuda'", ":", "\n", "# Just support init = kmeans++", "\n", "        ", "if", "kmcuda_path", "is", "not", "None", ":", "\n", "            ", "sys", ".", "path", ".", "append", "(", "kmcuda_path", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Please provide path to kmcuda!\"", ")", "\n", "\n", "", "from", "libKMCUDA", "import", "kmeans_cuda", "\n", "np", ".", "random", ".", "seed", "(", "random_state", ")", "\n", "if", "metric", "==", "'euclidean'", ":", "\n", "            ", "cluster_center_vectors", ",", "assignments", "=", "kmeans_cuda", "(", "data_vec", ",", "num_clusters", ",", "tolerance", "=", "tolerance", ",", "verbosity", "=", "1", ",", "\n", "seed", "=", "random_state", ",", "device", "=", "device", ",", "metric", "=", "\"L2\"", ",", "\n", "yinyang_t", "=", "yinyang_t", ")", "\n", "", "elif", "metric", "==", "'cosine'", ":", "\n", "            ", "data_vec_normalized", "=", "data_vec", "/", "(", "np", ".", "linalg", ".", "norm", "(", "data_vec", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "cluster_center_vectors", ",", "assignments", "=", "kmeans_cuda", "(", "data_vec_normalized", ",", "num_clusters", ",", "tolerance", "=", "tolerance", ",", "\n", "verbosity", "=", "1", ",", "seed", "=", "random_state", ",", "device", "=", "device", ",", "\n", "metric", "=", "\"cos\"", ",", "yinyang_t", "=", "yinyang_t", ")", "\n", "\n", "", "cluster_to_words", "=", "find_word_clusters", "(", "words", ",", "assignments", ")", "\n", "\n", "if", "len", "(", "cluster_to_words", ")", "<", "num_clusters", ":", "\n", "            ", "cluster_to_words", ",", "empty_cluster_ids", "=", "handle_empty_clusters_better", "(", "cluster_to_words", ",", "num_clusters", ")", "\n", "print", "(", "\"Number of clusters after handling empty clusters : \"", ",", "str", "(", "len", "(", "cluster_to_words", ")", ")", ")", "\n", "print", "(", "\"empty_cluster_ids are \"", ",", "empty_cluster_ids", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"Not implemented error: \"", ",", "lib", ")", "\n", "cluster_to_words", "=", "None", "\n", "\n", "", "if", "vis_fig", "or", "dump", ":", "\n", "        ", "word_vector_dict", "=", "dict", "(", "zip", "(", "words", ",", "data_vec", ")", ")", "\n", "\n", "", "if", "vis_fig", ":", "\n", "        ", "vis_time_st", "=", "time", ".", "perf_counter", "(", ")", "\n", "visualize_clustering", "(", "cluster_to_words", ",", "word_vector_dict", ",", "cluster_center_vectors", ",", "points_per_cluster", "=", "vis_points", ",", "perplexity", "=", "vis_perplexity", ",", "n_iter", "=", "vis_iter", ",", "random_state", "=", "random_state", ",", "\n", "global_step", "=", "global_step", ",", "tensorboard", "=", "tensorboard", ")", "\n", "vis_time_end", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Time taken in visualize_clustering:  \"", "+", "str", "(", "vis_time_end", "-", "vis_time_st", ")", "+", "\" seconds\"", ")", "\n", "\n", "", "if", "dump", "and", "(", "dump_path", "is", "not", "None", ")", ":", "\n", "        ", "clustering_info", "=", "str", "(", "num_clusters", ")", "+", "\"_\"", "+", "lib", "+", "\"_\"", "+", "metric", "+", "\"_\"", "+", "variation", "+", "\"_\"", "+", "str", "(", "\n", "tolerance", ")", "+", "\"_\"", "+", "str", "(", "random_state", ")", "+", "\"_\"", "+", "utils", ".", "get_timestamp", "(", ")", "\n", "subdir_name", "=", "os", ".", "path", ".", "join", "(", "dump_path", ",", "clustering_info", ")", "\n", "utils", ".", "mkdir", "(", "subdir_name", ")", "\n", "word_vector_pkl", "=", "open", "(", "os", ".", "path", ".", "join", "(", "subdir_name", ",", "\"word_vector.pickle\"", ")", ",", "\"wb\"", ")", "\n", "cluster_center_pkl", "=", "open", "(", "os", ".", "path", ".", "join", "(", "subdir_name", ",", "\"cluster_center.pickle\"", ")", ",", "\"wb\"", ")", "\n", "cluster_to_words_pkl", "=", "open", "(", "os", ".", "path", ".", "join", "(", "subdir_name", ",", "\"cluster_to_words.pickle\"", ")", ",", "\"wb\"", ")", "\n", "\n", "print", "(", "\"Pickling word_vector_dict\"", ")", "\n", "pickle", ".", "dump", "(", "word_vector_dict", ",", "word_vector_pkl", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "print", "(", "\"Pickling cluster_center_vectors\"", ")", "\n", "pickle", ".", "dump", "(", "cluster_center_vectors", ",", "cluster_center_pkl", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "print", "(", "\"Pickling cluster_to_words\"", ")", "\n", "pickle", ".", "dump", "(", "cluster_to_words", ",", "cluster_to_words_pkl", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "cluster_to_words", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.main": [[300, 400], ["utils.dotdict", "print", "print", "print", "logging.basicConfig", "logging.info", "time.perf_counter", "time.perf_counter", "logging.info", "dict", "logging.info", "utils.mkdir", "os.path.join", "utils.mkdir", "open", "open", "open", "logging.info", "pickle.dump", "logging.info", "pickle.dump", "logging.info", "pickle.dump", "vars", "json.dumps", "logging.getLevelName", "logging.getLogger().setLevel", "logging.info", "cooc_analysis.Analysis", "cooc_analysis.Analysis.set_id2word_cooc", "print", "len", "clustering.build_word_vector_matrix", "print", "logging.info", "clustering.build_word_vector_matrix", "sklearn.cluster.MiniBatchKMeans.fit", "logging.info", "clustering.find_word_clusters", "zip", "str", "os.path.join", "os.path.join", "os.path.join", "len", "len", "logging.info", "sys.path.append", "numpy.random.seed", "df.astype.astype", "clustering.find_word_clusters", "logging.getLogger", "enumerate", "str", "sklearn.cluster.KMeans", "logging.info", "sklearn.cluster.MiniBatchKMeans", "kmeans_cuda", "str", "str", "len", "kmeans_cuda", "numpy.linalg.norm().reshape", "numpy.linalg.norm", "str", "str"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.mkdir", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.mkdir", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.set_id2word_cooc", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.build_word_vector_matrix", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.build_word_vector_matrix", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.find_word_clusters", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.clustering.find_word_clusters"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "params", "=", "utils", ".", "dotdict", "(", "vars", "(", "args", ")", ")", "\n", "print", "(", "'-------- PARAMETERS --------'", ")", "\n", "print", "(", "json", ".", "dumps", "(", "params", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", ")", "\n", "print", "(", "'----------------------------'", ")", "\n", "\n", "logging", ".", "basicConfig", "(", ")", "\n", "if", "params", ".", "log", ":", "\n", "        ", "level", "=", "logging", ".", "getLevelName", "(", "params", ".", "log", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "level", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Building word_vector_matrix\"", ")", "\n", "if", "params", ".", "vocab_file", "!=", "''", ":", "\n", "        ", "logging", ".", "info", "(", "\"Loading vocabulary\"", ")", "\n", "opts", "=", "{", "}", "\n", "opts", "[", "'vocab_fpath'", "]", "=", "params", ".", "vocab_file", "\n", "analysis", "=", "Analysis", "(", "opts", "=", "opts", ")", "\n", "analysis", ".", "get_vocab_counts", "=", "True", "\n", "analysis", ".", "set_id2word_cooc", "(", ")", "\n", "vocab", "=", "analysis", ".", "id2word_cooc", "\n", "word2id", "=", "{", "word_ct_pair", "[", "0", "]", ":", "idx", "for", "idx", ",", "word_ct_pair", "in", "enumerate", "(", "vocab", ")", "}", "\n", "print", "(", "len", "(", "word2id", ")", ",", "\"the len of word2id is \"", ")", "\n", "params", ".", "n_words", "=", "len", "(", "vocab", ")", "\n", "df", ",", "labels_array", "=", "build_word_vector_matrix", "(", "params", ".", "input_vector_file", ",", "params", ".", "n_words", ",", "params", ".", "dim", ",", "word2id", ",", "\n", "context_vectors", "=", "params", ".", "context_vectors", ",", "no_lower", "=", "params", ".", "no_lower", ")", "\n", "print", "(", "len", "(", "df", ")", ",", "\"the len of word vectors passed to clustering is \"", ")", "\n", "logging", ".", "info", "(", "\"#Words with vectors present \"", "+", "str", "(", "len", "(", "labels_array", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "df", ",", "labels_array", "=", "build_word_vector_matrix", "(", "params", ".", "input_vector_file", ",", "params", ".", "n_words", ",", "params", ".", "dim", ",", "\n", "context_vectors", "=", "params", ".", "context_vectors", ")", "\n", "\n", "", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "params", ".", "lib", "==", "'sklearn'", ":", "\n", "        ", "if", "params", ".", "algo", "==", "'kmeans'", ":", "\n", "# use all but one cores available on system", "\n", "            ", "logging", ".", "info", "(", "\"Using Kmeans\"", ")", "\n", "if", "params", ".", "init_path", "==", "\"\"", ":", "\n", "                ", "kmeans_model", "=", "KMeans", "(", "init", "=", "'k-means++'", ",", "n_clusters", "=", "params", ".", "clusters_to_make", ",", "n_jobs", "=", "params", ".", "num_cores", ",", "verbose", "=", "params", ".", "verbose", ",", "algorithm", "=", "params", ".", "variation", ",", "\n", "random_state", "=", "params", ".", "random_state", ",", "max_iter", "=", "params", ".", "max_iter", ",", "tol", "=", "params", ".", "tol", ")", "\n", "", "", "elif", "params", ".", "algo", "==", "'minibatchkmeans'", ":", "\n", "            ", "logging", ".", "info", "(", "\"Using MiniBatch Kmeans\"", ")", "\n", "kmeans_model", "=", "MiniBatchKMeans", "(", "init", "=", "'k-means++'", ",", "n_clusters", "=", "params", ".", "clusters_to_make", ")", "\n", "\n", "", "kmeans_model", ".", "fit", "(", "df", ")", "\n", "logging", ".", "info", "(", "\"Clustering done\"", ")", "\n", "\n", "cluster_labels", "=", "kmeans_model", ".", "labels_", "\n", "# cluster_to_words: { '0': ['capt', 'restated', ...], ... }", "\n", "cluster_to_words", "=", "find_word_clusters", "(", "labels_array", ",", "cluster_labels", ")", "\n", "cluster_center_vectors", "=", "kmeans_model", ".", "cluster_centers_", "\n", "\n", "", "elif", "params", ".", "lib", "==", "'kmcuda'", ":", "\n", "        ", "kmcuda_path", "=", "\"/mlodata1/sidak/projects/kmcuda/src/\"", "\n", "sys", ".", "path", ".", "append", "(", "kmcuda_path", ")", "\n", "from", "libKMCUDA", "import", "kmeans_cuda", "\n", "np", ".", "random", ".", "seed", "(", "params", ".", "random_state", ")", "\n", "df", "=", "df", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "params", ".", "metric", "==", "'euclidean'", ":", "\n", "            ", "cluster_center_vectors", ",", "assignments", "=", "kmeans_cuda", "(", "df", ",", "params", ".", "clusters_to_make", ",", "tolerance", "=", "params", ".", "tol", ",", "\n", "verbosity", "=", "1", ",", "seed", "=", "params", ".", "random_state", ",", "\n", "device", "=", "params", ".", "device", ")", "\n", "", "elif", "params", ".", "metric", "==", "'cosine'", ":", "\n", "            ", "df_normalized", "=", "df", "/", "(", "np", ".", "linalg", ".", "norm", "(", "df", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "cluster_center_vectors", ",", "assignments", "=", "kmeans_cuda", "(", "df_normalized", ",", "params", ".", "clusters_to_make", ",", "\n", "tolerance", "=", "params", ".", "tol", ",", "verbosity", "=", "1", ",", "\n", "seed", "=", "params", ".", "random_state", ",", "device", "=", "params", ".", "device", ",", "\n", "metric", "=", "\"cos\"", ",", "yinyang_t", "=", "params", ".", "yinyang", ")", "\n", "\n", "", "cluster_to_words", "=", "find_word_clusters", "(", "labels_array", ",", "assignments", ")", "\n", "\n", "", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Time taken in clustering:  \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "word_vector_dict", "=", "dict", "(", "zip", "(", "labels_array", ",", "df", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Dumping clustering results\"", ")", "\n", "\n", "utils", ".", "mkdir", "(", "params", ".", "target_folder", ")", "\n", "\n", "clustering_info", "=", "params", ".", "algo", "+", "\"_\"", "+", "str", "(", "params", ".", "clusters_to_make", ")", "+", "\"_\"", "+", "str", "(", "\n", "params", ".", "n_words", ")", "+", "\"_\"", "+", "params", ".", "lib", "+", "\"_\"", "+", "params", ".", "metric", "+", "\"_\"", "+", "str", "(", "params", ".", "device", ")", "+", "\"_\"", "+", "str", "(", "params", ".", "yinyang", ")", "\n", "\n", "if", "params", ".", "nick", "!=", "\"\"", ":", "\n", "        ", "clustering_info", "+=", "\"_\"", "+", "params", ".", "nick", "\n", "\n", "", "subdir_name", "=", "os", ".", "path", ".", "join", "(", "params", ".", "target_folder", ",", "clustering_info", ")", "\n", "utils", ".", "mkdir", "(", "subdir_name", ")", "\n", "\n", "word_vector_pkl", "=", "open", "(", "os", ".", "path", ".", "join", "(", "subdir_name", ",", "\"word_vector.pickle\"", ")", ",", "\"wb\"", ")", "\n", "cluster_center_pkl", "=", "open", "(", "os", ".", "path", ".", "join", "(", "subdir_name", ",", "\"cluster_center.pickle\"", ")", ",", "\"wb\"", ")", "\n", "cluster_to_words_pkl", "=", "open", "(", "os", ".", "path", ".", "join", "(", "subdir_name", ",", "\"cluster_to_words.pickle\"", ")", ",", "\"wb\"", ")", "\n", "\n", "logging", ".", "info", "(", "\"Pickling word_vector_dict\"", ")", "\n", "pickle", ".", "dump", "(", "word_vector_dict", ",", "word_vector_pkl", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "logging", ".", "info", "(", "\"Pickling cluster_center_vectors\"", ")", "\n", "pickle", ".", "dump", "(", "cluster_center_vectors", ",", "cluster_center_pkl", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "logging", ".", "info", "(", "\"Pickling cluster_to_words\"", ")", "\n", "pickle", ".", "dump", "(", "cluster_to_words", ",", "cluster_to_words_pkl", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.ppmi_fast.get_sps_cooc": [[36, 57], ["len", "len", "print", "print", "numpy.empty", "numpy.empty", "numpy.empty", "print", "scipy.csr_matrix", "str"], "function", ["None"], ["def", "get_sps_cooc", "(", "cooccurr_dic", ",", "word2id", ")", ":", "\n", "    ", "cooc_len", "=", "len", "(", "cooccurr_dic", ")", "\n", "num_words", "=", "len", "(", "word2id", ")", "\n", "\n", "print", "(", "\"cooc_len is \"", ",", "cooc_len", ")", "\n", "print", "(", "\"num_words is \"", ",", "num_words", ")", "\n", "\n", "row", "=", "np", ".", "empty", "(", "(", "cooc_len", ",", ")", ")", "\n", "col", "=", "np", ".", "empty", "(", "(", "cooc_len", ",", ")", ")", "\n", "data", "=", "np", ".", "empty", "(", "(", "cooc_len", ",", ")", ")", "\n", "\n", "idx", "=", "0", "\n", "for", "word1", ",", "word2", "in", "cooccurr_dic", ":", "\n", "        ", "if", "word1", "in", "word2id", "and", "word2", "in", "word2id", ":", "\n", "            ", "row", "[", "idx", "]", "=", "word2id", "[", "word1", "]", "\n", "col", "[", "idx", "]", "=", "word2id", "[", "word2", "]", "\n", "data", "[", "idx", "]", "=", "cooccurr_dic", "[", "(", "word1", ",", "word2", ")", "]", "\n", "idx", "+=", "1", "\n", "", "", "print", "(", "\"idx at the end is \"", ",", "str", "(", "idx", ")", ")", "\n", "sps_cooc", "=", "sp", ".", "csr_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "num_words", ",", "num_words", ")", ")", "\n", "return", "sps_cooc", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.ppmi_fast.compute_ppmi_sps": [[59, 72], ["sps_ppmi_arr._with_data.sum", "numpy.power", "_context_word_corrected_cooc.reshape.reshape", "sps_ppmi_arr._with_data.multiply", "_context_word_corrected_cooc.reshape.sum", "sps_ppmi_arr._with_data.multiply", "sps_ppmi_arr._with_data._with_data", "numpy.clip", "numpy.log", "numpy.log"], "function", ["None"], ["", "def", "compute_ppmi_sps", "(", "sps_ppmi_arr", ",", "smoothing_parameter", "=", "0.75", ",", "k_shift", "=", "1.0", ")", ":", "\n", "    ", "_total_word_cooc", "=", "sps_ppmi_arr", ".", "sum", "(", "axis", "=", "1", ")", "\n", "_context_word_corrected_cooc", "=", "np", ".", "power", "(", "_total_word_cooc", ",", "smoothing_parameter", ")", "\n", "_context_word_corrected_cooc", "=", "_context_word_corrected_cooc", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "sps_ppmi_arr", "=", "sps_ppmi_arr", ".", "multiply", "(", "1.0", "/", "_total_word_cooc", ")", "\n", "_context_word_corrected_cooc_sum", "=", "_context_word_corrected_cooc", ".", "sum", "(", ")", "\n", "sps_ppmi_arr", "*=", "_context_word_corrected_cooc_sum", "\n", "sps_ppmi_arr", "=", "sps_ppmi_arr", ".", "multiply", "(", "1.0", "/", "_context_word_corrected_cooc", ")", "\n", "sps_ppmi_arr", "=", "sps_ppmi_arr", ".", "_with_data", "(", "np", ".", "log", "(", "sps_ppmi_arr", ".", "data", ")", ",", "copy", "=", "False", ")", "\n", "if", "(", "k_shift", ">", "1.5", ")", ":", "\n", "        ", "sps_ppmi_arr", ".", "data", "-=", "np", ".", "log", "(", "k_shift", ")", "\n", "", "sps_ppmi_arr", ".", "data", "=", "np", ".", "clip", "(", "sps_ppmi_arr", ".", "data", ",", "a_min", "=", "0.0", ",", "a_max", "=", "None", ")", "\n", "return", "sps_ppmi_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.ppmi_fast.main": [[74, 206], ["utils.dotdict", "print", "print", "print", "logging.basicConfig", "logging.info", "cooc_analysis.Analysis", "print", "time.perf_counter", "cooc_analysis.Analysis.setup_cooccurr_analysis", "time.perf_counter", "logging.info", "vars", "json.dumps", "logging.getLevelName", "logging.getLogger().setLevel", "os.listdir", "logging.info", "time.perf_counter", "scipy.load_npz", "time.perf_counter", "logging.info", "logging.info", "time.perf_counter", "time.perf_counter", "logging.info", "scipy.save_npz", "time.perf_counter", "logging.info", "time.perf_counter", "ppmi_fast.compute_ppmi_sps", "time.perf_counter", "logging.info", "time.perf_counter", "numpy.asarray", "numpy.savez", "time.perf_counter", "logging.info", "os.path.join", "time.perf_counter", "numpy.asarray", "numpy.savez", "time.perf_counter", "logging.info", "enumerate", "pickle.load", "print", "print", "print", "sorted", "dict", "print", "ppmi_fast.get_sps_cooc", "os.path.join", "str", "compute_ppmi_sps.sum", "os.path.join", "os.path.join", "logging.info", "time.perf_counter", "scipy.save_npz", "time.perf_counter", "logging.info", "logging.getLogger", "get_sps_cooc.sum", "os.path.join", "os.path.join", "str", "open", "len", "dict.pop", "len", "list", "list", "zip", "len", "str", "os.path.join", "str", "os.path.join", "painful_words.append", "dict.items", "zip", "range", "str", "str", "str", "str", "str", "str", "str", "len", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.setup_cooccurr_analysis", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.ppmi_fast.compute_ppmi_sps", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.ppmi_fast.get_sps_cooc"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "params", "=", "utils", ".", "dotdict", "(", "vars", "(", "args", ")", ")", "\n", "print", "(", "'-------- PARAMETERS --------'", ")", "\n", "print", "(", "json", ".", "dumps", "(", "params", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", ")", "\n", "print", "(", "'----------------------------'", ")", "\n", "\n", "logging", ".", "basicConfig", "(", ")", "\n", "if", "params", ".", "log", ":", "\n", "        ", "level", "=", "logging", ".", "getLevelName", "(", "params", ".", "log", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "level", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Load co-occurrence pickled files\"", ")", "\n", "\n", "opts", "=", "{", "}", "\n", "if", "params", ".", "sparse_cooc", ":", "\n", "        ", "opts", "[", "'sparse'", "]", "=", "True", "\n", "\n", "", "analysis", "=", "Analysis", "(", "opts", "=", "opts", ")", "\n", "if", "params", ".", "remove_pain", ":", "\n", "        ", "params", ".", "cooc_sps_matrix_dump_name", "=", "params", ".", "cooc_sps_matrix_dump_name", "+", "\"_no_pain\"", "\n", "\n", "", "params", ".", "cooc_sps_matrix_dump_name", "=", "params", ".", "cooc_sps_matrix_dump_name", "+", "\".npz\"", "\n", "print", "(", "\"Name of cooc_sps_matrix_dump_name \"", ",", "params", ".", "cooc_sps_matrix_dump_name", ")", "\n", "sps_matrix_exists", "=", "params", ".", "cooc_sps_matrix_dump_name", "in", "os", ".", "listdir", "(", "params", ".", "cooc_root_path", ")", "\n", "\n", "if", "(", "sps_matrix_exists", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Yes, cooc_sps_matrix exists\"", ")", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "cooc_sps_matrix", "=", "sp", ".", "load_npz", "(", "os", ".", "path", ".", "join", "(", "params", ".", "cooc_root_path", ",", "params", ".", "cooc_sps_matrix_dump_name", ")", ")", "\n", "analysis", ".", "load_mode", "=", "flags", ".", "LOAD_MIN", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Loaded cooc_sps_matrix!\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "if", "args", ".", "cooc_marginals_only", ":", "\n", "            ", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "marginals_cooc", "=", "np", ".", "asarray", "(", "cooc_sps_matrix", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "if", "params", ".", "save_dir", "!=", "\"\"", ":", "\n", "                ", "dest_dir", "=", "os", ".", "path", ".", "join", "(", "params", ".", "cooc_root_path", ",", "params", ".", "save_dir", ")", "\n", "", "else", ":", "\n", "                ", "dest_dir", "=", "params", ".", "cooc_root_path", "\n", "\n", "", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "'cooc_marginals.npz'", ")", ",", "marginals_cooc", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Dumped cooc_sps_matrix marginals!\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "return", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "\"No, cooc_sps_matrix doesn't exists\"", ")", "\n", "analysis", ".", "load_mode", "=", "flags", ".", "LOAD_INTM", "\n", "\n", "", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "analysis", ".", "setup_cooccurr_analysis", "(", "params", ".", "cooc_root_path", ")", "\n", "word2id", "=", "{", "word", ":", "idx", "for", "idx", ",", "word", "in", "enumerate", "(", "analysis", ".", "id2word_cooc", ")", "}", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Loaded cooc_analysis!\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "if", "(", "not", "sps_matrix_exists", ")", ":", "\n", "        ", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "if", "params", ".", "remove_pain", ":", "\n", "            ", "word_vector_dict", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "params", ".", "cluster_path", ",", "'word_vector.pickle'", ")", ",", "'rb'", ")", ")", "\n", "painful_words", "=", "[", "]", "\n", "print", "(", "\"len of word2id before is \"", ",", "len", "(", "word2id", ")", ")", "\n", "for", "wd", "in", "word2id", ":", "\n", "                ", "if", "wd", "not", "in", "word_vector_dict", ":", "\n", "                    ", "painful_words", ".", "append", "(", "wd", ")", "\n", "", "", "print", "(", "\"Painful words are \"", ",", "painful_words", ")", "\n", "for", "wd", "in", "painful_words", ":", "\n", "                ", "word2id", ".", "pop", "(", "wd", ")", "\n", "", "print", "(", "\"len of word2id after is \"", ",", "len", "(", "word2id", ")", ")", "\n", "sorted_word2d", "=", "sorted", "(", "list", "(", "word2id", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ")", "# sorted list of tuples", "\n", "sorted_word_list", "=", "list", "(", "zip", "(", "*", "sorted_word2d", ")", ")", "[", "\n", "0", "]", "# 'zip(*)' unzips & we have a list containing 2 tuples, list[0] = idxs, list[0]=vals", "\n", "word2id", "=", "dict", "(", "zip", "(", "sorted_word_list", ",", "range", "(", "len", "(", "sorted_word_list", ")", ")", ")", ")", "\n", "print", "(", "\"Sorted word2id now, rechecking len of it \"", ",", "len", "(", "sorted_word_list", ")", ")", "\n", "\n", "", "if", "params", ".", "sparse_cooc", ":", "\n", "            ", "cooc_sps_matrix", "=", "analysis", ".", "cooccurr_dic", "\n", "", "else", ":", "\n", "            ", "cooc_sps_matrix", "=", "get_sps_cooc", "(", "analysis", ".", "cooccurr_dic", ",", "word2id", ")", "\n", "\n", "", "mid_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Created cooc_sps_matrix!\"", "+", "\" in \"", "+", "str", "(", "mid_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "sp", ".", "save_npz", "(", "os", ".", "path", ".", "join", "(", "params", ".", "cooc_root_path", ",", "params", ".", "cooc_sps_matrix_dump_name", ")", ",", "cooc_sps_matrix", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\n", "\"Dumped cooc_sps_matrix for fast loading in future!\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "mid_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "", "if", "not", "params", ".", "multiple", ":", "\n", "        ", "smoothing_list", "=", "[", "params", ".", "smoothing_parameter", "]", "\n", "", "else", ":", "\n", "        ", "smoothing_list", "=", "params", ".", "mult_smoothing_list", "\n", "\n", "", "for", "smoothin", "in", "smoothing_list", ":", "\n", "\n", "        ", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "ppmi_sps_matrix", "=", "compute_ppmi_sps", "(", "cooc_sps_matrix", ",", "smoothing_parameter", "=", "smoothin", ",", "k_shift", "=", "params", ".", "k_shift", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\n", "\"Computed ppmi_sps_matrix! for smoothing \"", "+", "str", "(", "smoothin", ")", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "marginals_desc", "=", "\"\"", "\n", "pkl_desc", "=", "\"ppmi\"", "\n", "if", "(", "params", ".", "smooth", ")", ":", "\n", "            ", "pkl_desc", "+=", "\"_\"", "+", "\"smooth_\"", "+", "str", "(", "smoothin", ")", "\n", "\n", "", "pkl_desc", "+=", "\"_\"", "+", "\"k-shift_\"", "+", "str", "(", "params", ".", "k_shift", ")", "\n", "if", "params", ".", "nick", "!=", "\"\"", ":", "\n", "            ", "pkl_desc", "+=", "\"_\"", "+", "params", ".", "nick", "\n", "", "marginals_desc", "=", "pkl_desc", "+", "\"_marginals.npz\"", "\n", "pkl_desc", "+=", "\".npz\"", "\n", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "marginals_ppmi", "=", "np", ".", "asarray", "(", "ppmi_sps_matrix", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "if", "params", ".", "save_dir", "!=", "\"\"", ":", "\n", "            ", "dest_dir", "=", "os", ".", "path", ".", "join", "(", "params", ".", "cooc_root_path", ",", "params", ".", "save_dir", ")", "\n", "", "else", ":", "\n", "            ", "dest_dir", "=", "params", ".", "cooc_root_path", "\n", "\n", "", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "marginals_desc", ")", ",", "marginals_ppmi", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Dump dense marginals of PPMI for smoothing \"", "+", "str", "(", "smoothin", ")", "+", "\" in \"", "+", "str", "(", "\n", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "if", "not", "params", ".", "marginals_only", ":", "\n", "            ", "logging", ".", "info", "(", "\"Also dumping the complete ppmi_sps_matrix, for smoothing \"", "+", "str", "(", "smoothin", ")", ")", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "sp", ".", "save_npz", "(", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "pkl_desc", ")", ",", "ppmi_sps_matrix", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\n", "\"Dumped \"", "+", "pkl_desc", "+", "\" for smoothing \"", "+", "str", "(", "smoothin", ")", "+", "\" in time: \"", "+", "str", "(", "end_time", "-", "st_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.histograms.compute_cluster_histograms": [[24, 107], ["dict", "len", "len", "list", "print", "print", "print", "print", "scipy.csr_matrix", "scipy.load_npz", "sps_hist.multiply.sum", "sps_hist.multiply.multiply", "sps_hist.multiply.todense", "dict.keys", "str", "str", "str", "len", "str", "print", "print", "print", "print", "int", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "len", "print", "print", "sps_hist.multiply.sum", "numpy.asarray", "print", "print", "np.power.reshape", "sps_hist.multiply.multiply", "print", "numpy.asarray", "print", "print", "[].replace", "os.path.join", "utils.mkdir", "numpy.savez", "len", "list", "len", "str", "str", "len", "len", "len", "len", "len", "len", "len", "numpy.min", "numpy.median", "numpy.mean", "numpy.max", "numpy.power", "sps_hist.multiply.sum", "numpy.min", "numpy.median", "numpy.mean", "numpy.max", "utils.get_timestamp", "os.path.join", "dict.keys", "len", "str", "str", "ppmi_path.split", "str"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.mkdir", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.get_timestamp"], ["def", "compute_cluster_histograms", "(", "word2id", ",", "cluster_to_words", ",", "ppmi_path", ",", "painful_words", ",", "dump", "=", "False", ",", "dump_path", "=", "None", ",", "\n", "debug", "=", "False", ",", "num_bins_ideally", "=", "100", ",", "ppmi_bin_norm", "=", "False", ",", "bin_norm_exp", "=", "1.0", ")", ":", "\n", "# To prevent side effects due to mutability", "\n", "    ", "_cluster_to_words", "=", "dict", "(", "cluster_to_words", ")", "\n", "num_clusters", "=", "len", "(", "_cluster_to_words", ")", "\n", "num_words", "=", "len", "(", "word2id", ")", "\n", "desired_cols", "=", "list", "(", "_cluster_to_words", ".", "keys", "(", ")", ")", "\n", "print", "(", "\"In histograms.py\"", ")", "\n", "print", "(", "\"Number of clusters ideally is \"", ",", "str", "(", "num_bins_ideally", ")", ")", "\n", "print", "(", "\"Number of clusters actually is \"", ",", "str", "(", "len", "(", "_cluster_to_words", ")", ")", ")", "\n", "print", "(", "\"Number of words is \"", ",", "str", "(", "num_words", ")", ")", "\n", "\n", "if", "(", "len", "(", "painful_words", ")", "!=", "0", ")", ":", "\n", "        ", "painful_cluster_id", "=", "str", "(", "num_bins_ideally", ")", "\n", "_cluster_to_words", "[", "painful_cluster_id", "]", "=", "painful_words", "\n", "num_clusters", "+=", "1", "\n", "print", "(", "\"cluster keys after \"", ",", "list", "(", "_cluster_to_words", ".", "keys", "(", ")", ")", ")", "\n", "\n", "print", "(", "len", "(", "_cluster_to_words", ")", ",", "\"len of cluster_to_words\"", ",", "str", "(", "painful_cluster_id", ")", ")", "\n", "print", "(", "\"Number of clusters ideally after handling painful words is \"", ",", "str", "(", "len", "(", "_cluster_to_words", ")", ")", ")", "\n", "# print(_cluster_to_words)", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"No painful words found in compute_cluster_histograms\"", ")", "\n", "\n", "", "cluster_rows", "=", "[", "]", "\n", "cluster_cols", "=", "[", "]", "\n", "cluster_data", "=", "[", "]", "\n", "\n", "for", "cluster_id", "in", "_cluster_to_words", ":", "\n", "        ", "words_in_cluster", "=", "_cluster_to_words", "[", "cluster_id", "]", "\n", "cluster_key", "=", "int", "(", "cluster_id", ")", "\n", "cluster_data", "+=", "[", "1", "]", "*", "len", "(", "words_in_cluster", ")", "\n", "cluster_rows", "+=", "[", "cluster_key", "]", "*", "len", "(", "words_in_cluster", ")", "\n", "cluster_ids", "=", "[", "word2id", "[", "wd", "]", "for", "wd", "in", "words_in_cluster", "]", "\n", "cluster_cols", "+=", "cluster_ids", "\n", "\n", "", "if", "debug", ":", "\n", "        ", "print", "(", "\"DEBUGGING HISTS\"", ")", "\n", "print", "(", "\"len of _cluster_to_words \"", ",", "len", "(", "_cluster_to_words", ")", ")", "\n", "print", "(", "\"len of cluster_rows \"", ",", "len", "(", "cluster_rows", ")", ")", "\n", "print", "(", "\"len of cluster_cols \"", ",", "len", "(", "cluster_cols", ")", ")", "\n", "print", "(", "\"len of cluster_data \"", ",", "len", "(", "cluster_data", ")", ")", "\n", "print", "(", "\"num of clusters actually is \"", ",", "len", "(", "_cluster_to_words", ")", ")", "\n", "print", "(", "\"num of clusters ideally is \"", ",", "num_bins_ideally", ")", "\n", "\n", "", "sps_cluster", "=", "sp", ".", "csr_matrix", "(", "(", "cluster_data", ",", "(", "cluster_rows", ",", "cluster_cols", ")", ")", ",", "shape", "=", "(", "num_clusters", ",", "num_words", ")", ")", "\n", "ppmi_sps_matrix", "=", "sp", ".", "load_npz", "(", "os", ".", "path", ".", "join", "(", "ppmi_path", ")", ")", "\n", "sps_hist", "=", "ppmi_sps_matrix", "*", "sps_cluster", ".", "T", "\n", "\n", "if", "(", "len", "(", "painful_words", ")", "!=", "0", ")", ":", "\n", "        ", "print", "(", "\"Print sps_hist shape before\"", "+", "str", "(", "sps_hist", ".", "shape", ")", ")", "\n", "sps_hist", "=", "sps_hist", "[", ":", ",", "desired_cols", "]", "\n", "print", "(", "\"Print sps_hist shape after\"", "+", "str", "(", "sps_hist", ".", "shape", ")", ")", "\n", "\n", "## Perform Bin Normalization for learning mode!", "\n", "", "if", "ppmi_bin_norm", ":", "\n", "        ", "col_marginals", "=", "sps_hist", ".", "sum", "(", "axis", "=", "0", ")", "\n", "col_marginals_np", "=", "np", ".", "asarray", "(", "col_marginals", ")", "\n", "print", "(", "\"Min, Median, Mean & Max values of column ppmi_cluster marginals\"", ")", "\n", "print", "(", "np", ".", "min", "(", "col_marginals_np", ")", ",", "np", ".", "median", "(", "col_marginals_np", ")", ",", "np", ".", "mean", "(", "col_marginals_np", ")", ",", "np", ".", "max", "(", "col_marginals_np", ")", ")", "\n", "\n", "if", "bin_norm_exp", "<", "1", ":", "\n", "            ", "col_marginals", "=", "np", ".", "power", "(", "col_marginals", ",", "bin_norm_exp", ")", "\n", "\n", "", "col_marginals", "=", "col_marginals", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "sps_hist", "=", "sps_hist", ".", "multiply", "(", "1.0", "/", "col_marginals", ")", "\n", "print", "(", "\"Done PPMI bin_normalization. Verifying:\"", ")", "\n", "col_marginals_np_again", "=", "np", ".", "asarray", "(", "sps_hist", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "print", "(", "\"Min, Median, Mean & Max values of the bin normalized column ppmi_cluster marginals\"", ")", "\n", "print", "(", "np", ".", "min", "(", "col_marginals_np_again", ")", ",", "np", ".", "median", "(", "col_marginals_np_again", ")", ",", "np", ".", "mean", "(", "col_marginals_np_again", ")", ",", "np", ".", "max", "(", "col_marginals_np_again", ")", ")", "\n", "\n", "", "sps_hist_marginals", "=", "sps_hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "sps_hist_normalized", "=", "sps_hist", ".", "multiply", "(", "1.0", "/", "sps_hist_marginals", ")", "\n", "dense_hist", "=", "sps_hist_normalized", ".", "todense", "(", ")", "\n", "if", "dump", "and", "(", "dump_path", "is", "not", "None", ")", ":", "\n", "        ", "ppmi_version", "=", "ppmi_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'.npz'", ",", "''", ")", "\n", "histogram_version", "=", "ppmi_version", "+", "\"_\"", "+", "\"num_clusters_\"", "+", "str", "(", "num_clusters", ")", "+", "\"_\"", "+", "utils", ".", "get_timestamp", "(", ")", "\n", "histogram_dump_dir", "=", "os", ".", "path", ".", "join", "(", "dump_path", ",", "histogram_version", ")", "\n", "utils", ".", "mkdir", "(", "histogram_dump_dir", ")", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "histogram_dump_dir", ",", "\"normalized_cluster_hists.npz\"", ")", ",", "dense_hist", ")", "\n", "", "return", "dense_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.histograms.main": [[109, 276], ["utils.dotdict", "print", "print", "print", "logging.basicConfig", "time.perf_counter", "pickle.load", "pickle.load", "pickle.load", "time.perf_counter", "logging.info", "cooc_analysis.Analysis", "cooc_analysis.Analysis.setup_cooccurr_analysis", "logging.info", "len", "len", "time.perf_counter", "scipy.csr_matrix", "time.perf_counter", "logging.info", "time.perf_counter", "scipy.load_npz", "time.perf_counter", "logging.info", "time.perf_counter", "time.perf_counter", "logging.info", "time.perf_counter", "sps_hist.multiply.sum", "sps_hist.multiply.multiply", "sps_hist.multiply.todense", "time.perf_counter", "logging.info", "time.perf_counter", "[].replace", "os.path.join", "utils.mkdir", "numpy.savez", "time.perf_counter", "logging.info", "logging.info", "vars", "json.dumps", "logging.getLevelName", "logging.getLogger().setLevel", "open", "open", "open", "numpy.asarray", "len", "str", "print", "int", "print", "print", "print", "print", "print", "os.path.join", "len", "logging.info", "logging.info", "sps_hist.multiply.sum", "numpy.asarray", "print", "print", "np.power.reshape", "sps_hist.multiply.multiply", "print", "numpy.asarray", "print", "print", "utils.dotdict.cluster_data_dir.split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "np.asarray.append", "enumerate", "unassigned_words.append", "str", "len", "str", "numpy.asarray", "numpy.linalg.norm", "numpy.mean", "numpy.std", "numpy.clip", "np.clip.tolist", "numpy.median", "numpy.max", "numpy.min", "len", "str", "str", "str", "str", "str", "numpy.min", "numpy.median", "numpy.mean", "numpy.max", "numpy.power", "sps_hist.multiply.sum", "numpy.min", "numpy.median", "numpy.mean", "numpy.max", "numpy.asarray", "print", "print", "sps_hist.multiply.multiply", "print", "numpy.asarray", "print", "print", "print", "str", "logging.getLogger", "str", "len", "len", "len", "str", "str", "str", "str", "str", "sps_hist.multiply.sum", "numpy.min", "numpy.median", "numpy.mean", "numpy.max", "sps_hist.multiply.sum", "numpy.min", "numpy.median", "numpy.mean", "numpy.max", "str", "utils.dotdict.ppmi_path.split", "str", "int"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.setup_cooccurr_analysis", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.mkdir"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "params", "=", "utils", ".", "dotdict", "(", "vars", "(", "args", ")", ")", "\n", "print", "(", "'-------- PARAMETERS --------'", ")", "\n", "print", "(", "json", ".", "dumps", "(", "params", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", ")", "\n", "print", "(", "'----------------------------'", ")", "\n", "logging", ".", "basicConfig", "(", ")", "\n", "\n", "if", "params", ".", "log", ":", "\n", "        ", "level", "=", "logging", ".", "getLevelName", "(", "params", ".", "log", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "level", ")", "\n", "\n", "", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "word_vector_dict", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "params", ".", "cluster_data_dir", ",", "'word_vector.pickle'", ")", ",", "'rb'", ")", ")", "\n", "cluster_center_vectors", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "params", ".", "cluster_data_dir", ",", "'cluster_center.pickle'", ")", ",", "'rb'", ")", ")", "\n", "cluster_to_words", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "params", ".", "cluster_data_dir", ",", "'cluster_to_words.pickle'", ")", ",", "'rb'", ")", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Loaded cluster files !\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "if", "params", ".", "bin_normalization", "==", "\"num\"", ":", "\n", "        ", "cluster_sizes", "=", "[", "]", "\n", "for", "cl", "in", "cluster_to_words", ":", "\n", "            ", "cluster_sizes", ".", "append", "(", "len", "(", "cluster_to_words", "[", "cl", "]", ")", ")", "\n", "", "cluster_sizes", "=", "np", ".", "asarray", "(", "cluster_sizes", ")", "\n", "\n", "", "opts", "=", "{", "}", "\n", "analysis", "=", "Analysis", "(", "opts", "=", "opts", ")", "\n", "analysis", ".", "load_mode", "=", "flags", ".", "LOAD_MIN", "\n", "analysis", ".", "setup_cooccurr_analysis", "(", "params", ".", "cooc_root_path", ")", "\n", "word2id", "=", "{", "word", ":", "idx", "for", "idx", ",", "word", "in", "enumerate", "(", "analysis", ".", "id2word_cooc", ")", "}", "\n", "\n", "unassigned_words", "=", "[", "]", "\n", "for", "wd", "in", "word2id", ":", "\n", "        ", "if", "wd", "not", "in", "word_vector_dict", ":", "\n", "            ", "unassigned_words", ".", "append", "(", "wd", ")", "\n", "", "", "logging", ".", "info", "(", "\"Number of words unassigned to any cluster are: \"", "+", "str", "(", "len", "(", "unassigned_words", ")", ")", ")", "\n", "\n", "num_clusters", "=", "len", "(", "cluster_center_vectors", ")", "\n", "num_words", "=", "len", "(", "word2id", ")", "\n", "\n", "if", "(", "len", "(", "unassigned_words", ")", "!=", "0", ")", ":", "\n", "        ", "unassigned_cluster_id", "=", "str", "(", "num_clusters", ")", "\n", "cluster_to_words", "[", "unassigned_cluster_id", "]", "=", "unassigned_words", "\n", "num_clusters", "+=", "1", "\n", "print", "(", "len", "(", "cluster_to_words", ")", ",", "\"len of cluster_to_words\"", ",", "str", "(", "unassigned_cluster_id", ")", ")", "\n", "\n", "", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "idx", "=", "0", "\n", "cluster_rows", "=", "[", "]", "\n", "cluster_cols", "=", "[", "]", "\n", "cluster_data", "=", "[", "]", "\n", "net_mean_dist", "=", "0.0", "\n", "net_stddev_dist", "=", "0.0", "\n", "net_med_dist", "=", "0.0", "\n", "net_max_dist", "=", "0.0", "\n", "net_min_dist", "=", "0.0", "\n", "net_ct", "=", "0", "\n", "for", "cluster_id", "in", "cluster_to_words", ":", "\n", "        ", "words_in_cluster", "=", "cluster_to_words", "[", "cluster_id", "]", "\n", "cluster_key", "=", "int", "(", "cluster_id", ")", "\n", "if", "params", ".", "distance_weighting", "and", "(", "cluster_id", "!=", "unassigned_cluster_id", ")", ":", "\n", "            ", "word_vec_arr", "=", "[", "word_vector_dict", "[", "wd", "]", "for", "wd", "in", "words_in_cluster", "]", "\n", "word_vec_arr", "=", "np", ".", "asarray", "(", "word_vec_arr", ")", "\n", "word_vec_arr", "-=", "cluster_center_vectors", "[", "int", "(", "cluster_id", ")", "]", "\n", "distance_to_center", "=", "np", ".", "linalg", ".", "norm", "(", "word_vec_arr", ",", "axis", "=", "1", ")", "\n", "mean_dist", "=", "np", ".", "mean", "(", "distance_to_center", ")", "\n", "stddev_dist", "=", "np", ".", "std", "(", "distance_to_center", ")", "\n", "outlier_dist", "=", "mean_dist", "+", "params", ".", "num_sigma", "*", "stddev_dist", "\n", "distance_wts", "=", "np", ".", "clip", "(", "outlier_dist", "/", "distance_to_center", ",", "a_min", "=", "0.0", ",", "a_max", "=", "1.0", ")", "\n", "cluster_data", "+=", "distance_wts", ".", "tolist", "(", ")", "\n", "net_mean_dist", "+=", "mean_dist", "\n", "net_stddev_dist", "+=", "stddev_dist", "\n", "net_med_dist", "+=", "np", ".", "median", "(", "distance_to_center", ")", "\n", "net_max_dist", "+=", "np", ".", "max", "(", "distance_to_center", ")", "\n", "net_min_dist", "+=", "np", ".", "min", "(", "distance_to_center", ")", "\n", "net_ct", "+=", "1", "\n", "", "else", ":", "\n", "            ", "cluster_data", "+=", "[", "1", "]", "*", "len", "(", "words_in_cluster", ")", "# add maybe a weight here if you want", "\n", "\n", "", "cluster_rows", "+=", "[", "cluster_key", "]", "*", "len", "(", "words_in_cluster", ")", "\n", "cluster_cols", "+=", "[", "word2id", "[", "wd", "]", "for", "wd", "in", "words_in_cluster", "]", "\n", "\n", "", "if", "params", ".", "distance_weighting", ":", "\n", "        ", "print", "(", "\"Overall mean_dist across clusters: \"", ",", "str", "(", "net_mean_dist", "/", "net_ct", ")", ")", "\n", "print", "(", "\"Overall stddev_dist across clusters: \"", ",", "str", "(", "net_stddev_dist", "/", "net_ct", ")", ")", "\n", "print", "(", "\"Overall med_dist across clusters: \"", ",", "str", "(", "net_med_dist", "/", "net_ct", ")", ")", "\n", "print", "(", "\"Overall max_dist across clusters: \"", ",", "str", "(", "net_max_dist", "/", "net_ct", ")", ")", "\n", "print", "(", "\"Overall min_dist across clusters: \"", ",", "str", "(", "net_min_dist", "/", "net_ct", ")", ")", "\n", "\n", "", "sps_cluster", "=", "sp", ".", "csr_matrix", "(", "(", "cluster_data", ",", "(", "cluster_rows", ",", "cluster_cols", ")", ")", ",", "shape", "=", "(", "num_clusters", ",", "num_words", ")", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Created cluster sps matrix !\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "ppmi_sps_matrix", "=", "sp", ".", "load_npz", "(", "os", ".", "path", ".", "join", "(", "params", ".", "ppmi_path", ")", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Loaded ppmi sps matrix !\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "sps_hist", "=", "ppmi_sps_matrix", "*", "sps_cluster", ".", "T", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Computed cluster hists !\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "if", "(", "len", "(", "unassigned_words", ")", "!=", "0", ")", ":", "\n", "# get rid of the last column and also later the rows which don't have corresponding word vectors", "\n", "        ", "logging", ".", "info", "(", "\"Print sps_hist shape before\"", "+", "str", "(", "sps_hist", ".", "shape", ")", ")", "\n", "sps_hist", "=", "sps_hist", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "logging", ".", "info", "(", "\"Print sps_hist shape after\"", "+", "str", "(", "sps_hist", ".", "shape", ")", ")", "\n", "\n", "", "if", "params", ".", "bin_normalization", "==", "\"ppmi\"", ":", "\n", "        ", "col_marginals", "=", "sps_hist", ".", "sum", "(", "axis", "=", "0", ")", "\n", "col_marginals_np", "=", "np", ".", "asarray", "(", "col_marginals", ")", "\n", "print", "(", "\"Min, Median, Mean & Max values of column ppmi_cluster marginals\"", ")", "\n", "print", "(", "np", ".", "min", "(", "col_marginals_np", ")", ",", "np", ".", "median", "(", "col_marginals_np", ")", ",", "np", ".", "mean", "(", "col_marginals_np", ")", ",", "np", ".", "max", "(", "col_marginals_np", ")", ")", "\n", "\n", "if", "params", ".", "bin_norm_exp", "<", "1", ":", "\n", "            ", "col_marginals", "=", "np", ".", "power", "(", "col_marginals", ",", "params", ".", "bin_norm_exp", ")", "\n", "\n", "", "col_marginals", "=", "col_marginals", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "sps_hist", "=", "sps_hist", ".", "multiply", "(", "1.0", "/", "col_marginals", ")", "\n", "print", "(", "\"Done PPMI bin_normalization. Verifying:\"", ")", "\n", "col_marginals_np_again", "=", "np", ".", "asarray", "(", "sps_hist", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "print", "(", "\"Min, Median, Mean & Max values of the bin normalized column ppmi_cluster marginals\"", ")", "\n", "print", "(", "np", ".", "min", "(", "col_marginals_np_again", ")", ",", "np", ".", "median", "(", "col_marginals_np_again", ")", ",", "np", ".", "mean", "(", "col_marginals_np_again", ")", ",", "np", ".", "max", "(", "col_marginals_np_again", ")", ")", "\n", "\n", "", "elif", "params", ".", "bin_normalization", "==", "\"num\"", ":", "\n", "\n", "        ", "col_marginals_np", "=", "np", ".", "asarray", "(", "sps_hist", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "print", "(", "\"Min, Median, Mean & Max values of column ppmi_cluster marginals\"", ")", "\n", "print", "(", "np", ".", "min", "(", "col_marginals_np", ")", ",", "np", ".", "median", "(", "col_marginals_np", ")", ",", "np", ".", "mean", "(", "col_marginals_np", ")", ",", "np", ".", "max", "(", "col_marginals_np", ")", ")", "\n", "sps_hist", "=", "sps_hist", ".", "multiply", "(", "1.0", "/", "cluster_sizes", ")", "\n", "print", "(", "\"Done NUM bin_normalization. Verifying:\"", ")", "\n", "col_marginals_np_again", "=", "np", ".", "asarray", "(", "sps_hist", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "print", "(", "\"Min, Median, Mean & Max values of the bin normalized column ppmi_cluster marginals\"", ")", "\n", "print", "(", "np", ".", "min", "(", "col_marginals_np_again", ")", ",", "np", ".", "median", "(", "col_marginals_np_again", ")", ",", "np", ".", "mean", "(", "col_marginals_np_again", ")", ",", "np", ".", "max", "(", "col_marginals_np_again", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"not doing any bin normalization\"", ")", "\n", "\n", "", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "sps_hist_marginals", "=", "sps_hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "sps_hist_normalized", "=", "sps_hist", ".", "multiply", "(", "1.0", "/", "sps_hist_marginals", ")", "\n", "dense_hist", "=", "sps_hist_normalized", ".", "todense", "(", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Computed dense normalized hists !\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "clustering_version", "=", "params", ".", "cluster_data_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "ppmi_version", "=", "params", ".", "ppmi_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'.npz'", ",", "''", ")", "\n", "histogram_version", "=", "ppmi_version", "+", "\"_\"", "+", "clustering_version", "\n", "if", "params", ".", "nick", "!=", "\"\"", ":", "\n", "        ", "histogram_version", "+=", "\"_\"", "+", "params", ".", "nick", "\n", "", "if", "params", ".", "bin_normalization", "!=", "None", ":", "\n", "        ", "histogram_version", "+=", "\"_\"", "+", "params", ".", "bin_normalization", "+", "\"_bin_norm\"", "\n", "histogram_version", "+=", "\"_\"", "+", "str", "(", "params", ".", "bin_norm_exp", ")", "\n", "\n", "", "histogram_dump_dir", "=", "os", ".", "path", ".", "join", "(", "params", ".", "histogram_data_dir", ",", "histogram_version", ")", "\n", "utils", ".", "mkdir", "(", "histogram_dump_dir", ")", "\n", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "histogram_dump_dir", ",", "\"normalized_cluster_hists.npz\"", ")", ",", "dense_hist", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Dump dense normalized hists !\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "# logging.info(\"Dump dir is \", str(histogram_dump_dir))", "\n", "logging", ".", "info", "(", "\"-------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.mkdir": [[16, 19], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.timeit": [[21, 35], ["time.time", "method", "time.time", "kw.get", "int", "print", "method.__name__.upper"], "function", ["None"], ["", "", "def", "timeit", "(", "method", ")", ":", "\n", "    ", "def", "timed", "(", "*", "args", ",", "**", "kw", ")", ":", "\n", "        ", "ts", "=", "time", ".", "time", "(", ")", "\n", "result", "=", "method", "(", "*", "args", ",", "**", "kw", ")", "\n", "te", "=", "time", ".", "time", "(", ")", "\n", "if", "'log_time'", "in", "kw", ":", "\n", "            ", "name", "=", "kw", ".", "get", "(", "'log_name'", ",", "method", ".", "__name__", ".", "upper", "(", ")", ")", "\n", "kw", "[", "'log_time'", "]", "[", "name", "]", "=", "int", "(", "(", "te", "-", "ts", ")", "*", "1000", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'%r  %2.2f ms'", "%", "(", "method", ".", "__name__", ",", "(", "te", "-", "ts", ")", "*", "1000", ")", ")", "\n", "", "return", "result", "\n", "\n", "\n", "", "return", "timed", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.has_keyword_in_filenames": [[37, 42], ["os.listdir"], "function", ["None"], ["", "def", "has_keyword_in_filenames", "(", "root", ",", "keyword", ")", ":", "\n", "    ", "for", "file", "in", "os", ".", "listdir", "(", "root", ")", ":", "\n", "        ", "if", "(", "keyword", "in", "file", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.pickle_obj": [[44, 57], ["time.perf_counter", "open", "pickle.dump", "time.perf_counter"], "function", ["None"], ["", "def", "pickle_obj", "(", "obj", ",", "path", ",", "mode", "=", "\"wb\"", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", ":", "\n", "    ", "'''\n    Pickle object 'obj' and dump at 'path' using specified \n    'mode' and 'protocol'\n    Returns time taken to pickle\n    '''", "\n", "\n", "import", "time", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "pkl_file", "=", "open", "(", "path", ",", "mode", ")", "\n", "pickle", ".", "dump", "(", "obj", ",", "pkl_file", ",", "protocol", "=", "protocol", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "return", "(", "end_time", "-", "st_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.joblib_obj": [[59, 71], ["time.perf_counter", "joblib.dump", "time.perf_counter"], "function", ["None"], ["", "def", "joblib_obj", "(", "obj", ",", "path", ",", "mode", "=", "None", ",", "protocol", "=", "None", ")", ":", "\n", "    ", "'''\n    Use joblib to dump object 'obj' at 'path' using specified\n    Returns time taken to dump\n    '''", "\n", "\n", "import", "time", "\n", "from", "sklearn", ".", "externals", "import", "joblib", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "joblib", ".", "dump", "(", "obj", ",", "path", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "return", "(", "end_time", "-", "st_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.sparse_obj": [[73, 84], ["time.perf_counter", "sp.save_npz", "time.perf_counter"], "function", ["None"], ["", "def", "sparse_obj", "(", "obj", ",", "path", ",", "mode", "=", "None", ",", "protocol", "=", "None", ")", ":", "\n", "    ", "'''\n    Dump the co-occurrence matrix 'obj' at 'path' using scipy sparse\n    Returns time taken to dump\n    '''", "\n", "import", "time", "\n", "import", "scipy", ".", "sparse", "as", "sp", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "sp", ".", "save_npz", "(", "path", ",", "obj", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "return", "(", "end_time", "-", "st_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.load_joblib": [[86, 93], ["time.perf_counter", "joblib.load", "time.perf_counter", "print", "str"], "function", ["None"], ["", "def", "load_joblib", "(", "path", ",", "nick", "=", "\"\"", ")", ":", "\n", "    ", "from", "sklearn", ".", "externals", "import", "joblib", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "obj", "=", "joblib", ".", "load", "(", "path", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"Loaded \"", "+", "nick", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.load_pickle": [[95, 101], ["time.perf_counter", "pickle.load", "time.perf_counter", "print", "open", "str"], "function", ["None"], ["", "def", "load_pickle", "(", "path", ",", "nick", "=", "\"\"", ")", ":", "\n", "    ", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "obj", "=", "pickle", ".", "load", "(", "open", "(", "path", ",", "'rb'", ")", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"Loaded \"", "+", "nick", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.load_sparse": [[103, 110], ["time.perf_counter", "sp.load_npz", "time.perf_counter", "print", "str"], "function", ["None"], ["", "def", "load_sparse", "(", "path", ",", "nick", "=", "\"\"", ")", ":", "\n", "    ", "import", "scipy", ".", "sparse", "as", "sp", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "obj", "=", "sp", ".", "load_npz", "(", "path", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"Loaded \"", "+", "nick", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.load_cooc": [[112, 119], ["utils.load_joblib", "utils.load_sparse", "utils.load_pickle"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.load_joblib", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.load_sparse", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.load_pickle"], ["", "def", "load_cooc", "(", "path", ",", "joblib", "=", "False", ",", "sparse", "=", "False", ",", "nick", "=", "\"\"", ")", ":", "\n", "    ", "if", "joblib", ":", "\n", "        ", "return", "load_joblib", "(", "path", ",", "nick", "=", "nick", ")", "\n", "", "elif", "sparse", ":", "\n", "        ", "return", "load_sparse", "(", "path", ",", "nick", "=", "nick", ")", "\n", "", "else", ":", "\n", "        ", "return", "load_pickle", "(", "path", ",", "nick", "=", "nick", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.test_utils": [[121, 123], ["print"], "function", ["None"], ["", "", "def", "test_utils", "(", ")", ":", "\n", "    ", "print", "(", "\"yo baby\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.get_timestamp": [[125, 129], ["time.time", "datetime.datetime.fromtimestamp().strftime", "datetime.datetime.fromtimestamp"], "function", ["None"], ["", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "ts", "=", "time", ".", "time", "(", ")", "\n", "timestamp", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "ts", ")", ".", "strftime", "(", "'%Y-%m-%d_%H:%M:%S'", ")", "\n", "return", "timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.get_timestamp_other": [[131, 135], ["time.time", "datetime.datetime.fromtimestamp().strftime", "datetime.datetime.fromtimestamp"], "function", ["None"], ["", "def", "get_timestamp_other", "(", ")", ":", "\n", "    ", "ts", "=", "time", ".", "time", "(", ")", "\n", "timestamp", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "ts", ")", ".", "strftime", "(", "'%Y-%m-%d_%H-%M-%S'", ")", "\n", "return", "timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.unit_vector": [[142, 145], ["numpy.linalg.norm"], "function", ["None"], ["def", "unit_vector", "(", "vector", ")", ":", "\n", "    ", "\"\"\" Returns the unit vector of the vector.  \"\"\"", "\n", "return", "vector", "/", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.angle_between": [[147, 160], ["utils.unit_vector", "utils.unit_vector", "numpy.arccos", "numpy.clip", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.unit_vector", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.unit_vector"], ["", "def", "angle_between", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "\"\"\" Returns the angle in radians between vectors 'v1' and 'v2'::\n\n            >>> angle_between((1, 0, 0), (0, 1, 0))\n            1.5707963267948966\n            >>> angle_between((1, 0, 0), (1, 0, 0))\n            0.0\n            >>> angle_between((1, 0, 0), (-1, 0, 0))\n            3.141592653589793\n    \"\"\"", "\n", "v1_u", "=", "unit_vector", "(", "v1", ")", "\n", "v2_u", "=", "unit_vector", "(", "v2", ")", "\n", "return", "np", ".", "arccos", "(", "np", ".", "clip", "(", "np", ".", "dot", "(", "v1_u", ",", "v2_u", ")", ",", "-", "1.0", ",", "1.0", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.compute_pc": [[31, 41], ["sklearn.decomposition.TruncatedSVD", "sklearn.decomposition.TruncatedSVD.fit"], "function", ["None"], ["def", "compute_pc", "(", "X", ",", "npc", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Compute the principal components. DO NOT MAKE THE DATA ZERO MEAN!\n    :param X: X[i,:] is a data point\n    :param npc: number of principal components to remove\n    :return: component_[i,:] is the i-th pc\n    \"\"\"", "\n", "svd", "=", "TruncatedSVD", "(", "n_components", "=", "npc", ",", "n_iter", "=", "7", ",", "random_state", "=", "0", ")", "\n", "svd", ".", "fit", "(", "X", ")", "\n", "return", "svd", ".", "components_", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.remove_pc": [[43, 57], ["print", "wasserstein.compute_pc", "X.dot().dot", "X.dot", "compute_pc.transpose", "X.dot", "compute_pc.transpose"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.compute_pc"], ["", "def", "remove_pc", "(", "X", ",", "npc", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Remove the projection on the principal components\n    :param X: X[i,:] is a data point\n    :param npc: number of principal components to remove\n    :return: XX[i, :] is the data point after removing its projection\n    \"\"\"", "\n", "print", "(", "X", ".", "shape", ",", "\"shape of test embedding matrix\"", ")", "\n", "pc", "=", "compute_pc", "(", "X", ",", "npc", ")", "\n", "if", "npc", "==", "1", ":", "\n", "        ", "XX", "=", "X", "-", "X", ".", "dot", "(", "pc", ".", "transpose", "(", ")", ")", "*", "pc", "\n", "", "else", ":", "\n", "        ", "XX", "=", "X", "-", "X", ".", "dot", "(", "pc", ".", "transpose", "(", ")", ")", ".", "dot", "(", "pc", ")", "\n", "", "return", "XX", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.cosine_sim": [[61, 66], ["numpy.ones", "numpy.ones", "vec1.dot", "len", "len", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cosine_sim", "(", "vec1", ",", "vec2", ")", ":", "\n", "    ", "EPSILON", "=", "1e-7", "\n", "vec1", "+=", "EPSILON", "*", "np", ".", "ones", "(", "len", "(", "vec1", ")", ")", "\n", "vec2", "+=", "EPSILON", "*", "np", ".", "ones", "(", "len", "(", "vec1", ")", ")", "\n", "return", "vec1", ".", "dot", "(", "vec2", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "vec1", ")", "*", "np", ".", "linalg", ".", "norm", "(", "vec2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_angular_ground_metric": [[68, 74], ["numpy.clip", "numpy.arccos", "numpy.linalg.norm().reshape", "numpy.linalg.norm"], "function", ["None"], ["", "def", "get_angular_ground_metric", "(", "vectors", ")", ":", "\n", "    ", "normalized_vectors", "=", "vectors", "/", "np", ".", "linalg", ".", "norm", "(", "vectors", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "cos_sim", "=", "normalized_vectors", "@", "normalized_vectors", ".", "T", "\n", "cos_sim", "=", "np", ".", "clip", "(", "cos_sim", ",", "-", "1.0", ",", "1.0", ")", "\n", "angular_gm", "=", "np", ".", "arccos", "(", "cos_sim", ")", "\n", "return", "angular_gm", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_cosine": [[76, 80], ["wasserstein.get_weighted_wass_emb", "wasserstein.get_weighted_wass_emb", "wasserstein.cosine_sim"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_weighted_wass_emb", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_weighted_wass_emb", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.cosine_sim"], ["", "def", "get_wass_cosine", "(", "hist1", ",", "hist2", ",", "cluster_center_vectors", ")", ":", "\n", "    ", "vec1", "=", "get_weighted_wass_emb", "(", "hist1", ",", "cluster_center_vectors", ")", "\n", "vec2", "=", "get_weighted_wass_emb", "(", "hist2", ",", "cluster_center_vectors", ")", "\n", "return", "cosine_sim", "(", "vec1", ",", "vec2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_euclid": [[82, 89], ["wasserstein.get_weighted_wass_emb", "wasserstein.get_weighted_wass_emb", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_weighted_wass_emb", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_weighted_wass_emb"], ["", "def", "get_wass_euclid", "(", "hist1", ",", "hist2", ",", "cluster_center_vectors", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "vec1", "=", "get_weighted_wass_emb", "(", "hist1", ",", "cluster_center_vectors", ")", "\n", "vec2", "=", "get_weighted_wass_emb", "(", "hist2", ",", "cluster_center_vectors", ")", "\n", "if", "normalize", ":", "\n", "        ", "vec1", "=", "vec1", "/", "np", ".", "linalg", ".", "norm", "(", "vec1", ")", "\n", "vec2", "=", "vec2", "/", "np", ".", "linalg", ".", "norm", "(", "vec2", ")", "\n", "", "return", "np", ".", "linalg", ".", "norm", "(", "vec1", "-", "vec2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_softsim": [[91, 97], ["range", "len", "range", "len"], "function", ["None"], ["", "def", "get_softsim", "(", "hist1", ",", "hist2", ",", "ground_metric_matrix", ")", ":", "\n", "    ", "total_sim", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "hist1", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "hist2", ")", ")", ":", "\n", "            ", "total_sim", "+=", "(", "hist1", "[", "i", "]", "*", "hist2", "[", "j", "]", "*", "(", "1", "-", "ground_metric_matrix", "[", "i", ",", "j", "]", ")", ")", "\n", "", "", "return", "total_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_weighted_wass_emb": [[99, 104], ["numpy.zeros", "range", "len"], "function", ["None"], ["", "def", "get_weighted_wass_emb", "(", "hist", ",", "cluster_center_vectors", ")", ":", "\n", "    ", "vec", "=", "np", ".", "zeros", "(", "cluster_center_vectors", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hist", ")", ")", ":", "\n", "        ", "vec", "+=", "hist", "[", "i", "]", "*", "cluster_center_vectors", "[", "i", ",", ":", "]", "\n", "", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_dirac_dist": [[106, 118], ["range", "len", "range", "len", "wasserstein.cosine_sim", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.cosine_sim"], ["", "def", "get_wass_dirac_dist", "(", "word_vec", ",", "other_hist", ",", "cluster_center_vectors", ",", "metric", "=", "'euclidean'", ",", "wass2", "=", "False", ")", ":", "\n", "    ", "dist", "=", "0.0", "\n", "if", "metric", "==", "'cosine'", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "other_hist", ")", ")", ":", "\n", "            ", "dist", "+=", "other_hist", "[", "i", "]", "*", "(", "1", "-", "cosine_sim", "(", "word_vec", ",", "cluster_center_vectors", "[", "i", ",", ":", "]", ")", ")", "\n", "", "", "elif", "metric", "==", "'euclidean'", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "other_hist", ")", ")", ":", "\n", "            ", "if", "not", "wass2", ":", "\n", "                ", "dist", "+=", "other_hist", "[", "i", "]", "*", "np", ".", "linalg", ".", "norm", "(", "word_vec", "-", "cluster_center_vectors", "[", "i", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "dist", "+=", "other_hist", "[", "i", "]", "*", "(", "np", ".", "linalg", ".", "norm", "(", "word_vec", "-", "cluster_center_vectors", "[", "i", ",", ":", "]", ")", "**", "2", ")", "\n", "", "", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_fast": [[120, 132], ["print", "numpy.array", "ot.bregman.barycenter", "print", "numpy.vstack", "ground_metric.max"], "function", ["None"], ["", "def", "get_wass_bary_fast", "(", "word1", ",", "word2", ",", "cluster_histograms_", ",", "word2id", ",", "ground_metric", ",", "reg", "=", "0.1", ",", "alpha", "=", "0.5", ",", "normalize", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"CHECK: IN WASS BARY FAST\"", ")", "\n", "if", "normalize", "==", "'max'", ":", "\n", "        ", "print", "(", "\"Doing max normalization\"", ")", "\n", "ground_metric", "=", "ground_metric", "/", "ground_metric", ".", "max", "(", ")", "\n", "", "weights", "=", "np", ".", "array", "(", "[", "1", "-", "alpha", ",", "alpha", "]", ")", "\n", "# print(cluster_histograms_.shape)", "\n", "normalized_cluster_hist1", "=", "cluster_histograms_", "[", "word2id", "[", "word1", "]", "]", "\n", "normalized_cluster_hist2", "=", "cluster_histograms_", "[", "word2id", "[", "word2", "]", "]", "\n", "wass_hists", "=", "np", ".", "vstack", "(", "(", "normalized_cluster_hist1", ",", "normalized_cluster_hist2", ")", ")", ".", "T", "\n", "bary_wass", "=", "ot", ".", "bregman", ".", "barycenter", "(", "wass_hists", ",", "ground_metric", ",", "reg", ",", "weights", ")", "\n", "return", "bary_wass", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_fast_mult": [[136, 167], ["print", "wasserstein.get_wass_bary_btree", "wasserstein.get_wass_bary_in_halfs", "ot.bregman.barycenter", "hists_list.append", "numpy.vstack", "numpy.ones", "len", "len"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_btree", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_in_halfs"], ["", "def", "get_wass_bary_fast_mult", "(", "words", ",", "cluster_histograms_", ",", "word2id", ",", "ground_metric", ",", "mode", "=", "\"plain\"", ",", "reg", "=", "0.1", ",", "alpha", "=", "'uniform'", ",", "weights", "=", "None", ",", "marginals", "=", "None", ",", "smoothing", "=", "1.0", ",", "\n", "length_correction", "=", "False", ",", "seq", "=", "False", ",", "max_its", "=", "1000", ")", ":", "\n", "    ", "if", "mode", "==", "\"btree\"", ":", "\n", "        ", "if", "marginals", "is", "None", ":", "\n", "            ", "print", "(", "\"Error: Marginals not found\"", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "get_wass_bary_btree", "(", "words", ",", "cluster_histograms_", ",", "word2id", ",", "ground_metric", ",", "marginals", ",", "reg", ",", "alpha", ",", "smoothing", ",", "length_correction", ",", "seq", ")", "\n", "\n", "", "", "elif", "mode", "==", "'half'", ":", "\n", "        ", "return", "get_wass_bary_in_halfs", "(", "words", ",", "cluster_histograms_", ",", "word2id", ",", "ground_metric", ",", "reg", "=", "reg", ",", "marginals", "=", "marginals", ",", "smoothing", "=", "smoothing", ",", "\n", "length_correction", "=", "length_correction", ",", "max_its", "=", "max_its", ")", "\n", "", "else", ":", "\n", "\n", "        ", "if", "weights", "is", "None", "and", "alpha", "==", "'uniform'", ":", "\n", "            ", "weights", "=", "np", ".", "ones", "(", "len", "(", "words", ")", ")", "/", "len", "(", "words", ")", "\n", "", "else", ":", "\n", "# print(\"using \", alpha)", "\n", "            ", "weights", "=", "weights", "\n", "\n", "", "hists_list", "=", "[", "]", "\n", "for", "wd", "in", "words", ":", "\n", "            ", "hists_list", ".", "append", "(", "cluster_histograms_", "[", "word2id", "[", "wd", "]", "]", ")", "\n", "\n", "", "wass_hists", "=", "np", ".", "vstack", "(", "hists_list", ")", ".", "T", "\n", "bary_wass", "=", "ot", ".", "bregman", ".", "barycenter", "(", "wass_hists", ",", "ground_metric", ",", "reg", ",", "weights", ",", "numItermax", "=", "max_its", ")", "\n", "return", "bary_wass", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_interpolated_wass_bary_fast_mult": [[169, 187], ["enumerate", "numpy.vstack", "wasserstein.obtain_ground_metric", "ot.bregman.barycenter", "numpy.zeros", "hists_list.append", "numpy.vstack", "len", "len"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.obtain_ground_metric"], ["", "", "def", "get_interpolated_wass_bary_fast_mult", "(", "words", ",", "cluster_histograms_", ",", "word2id", ",", "wordvecs", ",", "clustervecs", ",", "weights", ",", "args", ")", ":", "\n", "    ", "hists_list", "=", "[", "]", "\n", "\n", "for", "idx", ",", "wd", "in", "enumerate", "(", "words", ")", ":", "\n", "# make a zeros histogram of size num_words + num_clusters", "\n", "        ", "mod_hist", "=", "np", ".", "zeros", "(", "cluster_histograms_", "[", "word2id", "[", "wd", "]", "]", ".", "shape", "[", "0", "]", "+", "len", "(", "words", ")", ")", "\n", "mod_hist", "[", "idx", "]", "=", "args", ".", "interpolate_repr", "\n", "mod_hist", "[", "len", "(", "words", ")", ":", "]", "=", "(", "1", "-", "args", ".", "interpolate_repr", ")", "*", "cluster_histograms_", "[", "word2id", "[", "wd", "]", "]", "\n", "hists_list", ".", "append", "(", "mod_hist", ")", "\n", "\n", "", "wass_hists", "=", "np", ".", "vstack", "(", "hists_list", ")", ".", "T", "\n", "\n", "coord", "=", "np", ".", "vstack", "(", "[", "wordvecs", ",", "clustervecs", "]", ")", "\n", "ground_metric", "=", "obtain_ground_metric", "(", "args", ",", "coord", ")", "\n", "\n", "bary_wass", "=", "ot", ".", "bregman", ".", "barycenter", "(", "wass_hists", ",", "ground_metric", ",", "args", ".", "regbary", ",", "weights", ",", "numItermax", "=", "args", ".", "max_its", ")", "\n", "\n", "return", "bary_wass", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_harmonic_mean": [[189, 194], ["None"], "function", ["None"], ["", "def", "get_harmonic_mean", "(", "a", ",", "b", ")", ":", "\n", "    ", "ans", "=", "2.0", "*", "a", "\n", "ans", "/=", "(", "a", "+", "b", ")", "\n", "ans", "*=", "b", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_geometric_mean": [[196, 198], ["math.sqrt"], "function", ["None"], ["", "def", "get_geometric_mean", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "math", ".", "sqrt", "(", "a", "*", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_btree": [[200, 217], ["numpy.power", "len", "print", "wasserstein.compute_bary_recursive", "wasserstein.compute_bary_sequential"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.compute_bary_recursive", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.compute_bary_sequential"], ["", "def", "get_wass_bary_btree", "(", "words", ",", "cluster_histograms_", ",", "word2id", ",", "ground_metric", ",", "marginals", ",", "reg", "=", "0.1", ",", "alpha", "=", "'hm_cooc_btree'", ",", "smoothing", "=", "1.0", ",", "length_correction", "=", "False", ",", "seq", "=", "False", ")", ":", "\n", "    ", "marginals", "=", "np", ".", "power", "(", "marginals", ",", "smoothing", ")", "\n", "left_idx", "=", "0", "\n", "right_idx", "=", "len", "(", "words", ")", "\n", "word_hists", "=", "[", "cluster_histograms_", "[", "word2id", "[", "wd", "]", "]", "for", "wd", "in", "words", "]", "\n", "word_margs", "=", "[", "marginals", "[", "word2id", "[", "wd", "]", "]", "for", "wd", "in", "words", "]", "\n", "\n", "if", "not", "seq", ":", "\n", "        ", "bary", ",", "_", "=", "compute_bary_recursive", "(", "left_idx", ",", "right_idx", ",", "word_hists", ",", "word_margs", ",", "ground_metric", ",", "reg", ",", "alpha", ",", "\n", "length_correction", ")", "\n", "", "else", ":", "\n", "        ", "bary", ",", "_", "=", "compute_bary_sequential", "(", "left_idx", ",", "right_idx", ",", "word_hists", ",", "word_margs", ",", "ground_metric", ",", "reg", ",", "alpha", ",", "\n", "length_correction", ")", "\n", "\n", "", "print", "(", "\"Ultimate level: For words between \"", ",", "left_idx", ",", "\" and \"", ",", "right_idx", ",", "\" the marginal is \"", ",", "_", ")", "\n", "return", "bary", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.compute_bary_recursive": [[219, 256], ["int", "wasserstein.compute_bary_recursive", "print", "wasserstein.compute_bary_recursive", "print", "numpy.zeros", "print", "print", "ot.bregman.barycenter", "np.zeros.sum", "numpy.vstack", "print", "wasserstein.get_geometric_mean", "print", "wasserstein.get_harmonic_mean"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.compute_bary_recursive", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.compute_bary_recursive", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_geometric_mean", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_harmonic_mean"], ["", "def", "compute_bary_recursive", "(", "left_idx", ",", "right_idx", ",", "word_hists", ",", "word_margs", ",", "ground_metric", ",", "reg", ",", "alpha", ",", "a", "=", "1e-3", ",", "\n", "length_correction", "=", "False", ")", ":", "\n", "# [left_idx, right_idx)", "\n", "# i.e., right_idx is not included", "\n", "\n", "    ", "if", "(", "right_idx", "-", "left_idx", ")", "==", "1", ":", "\n", "        ", "return", "word_hists", "[", "left_idx", "]", ",", "word_margs", "[", "left_idx", "]", "\n", "\n", "", "mid_idx", "=", "int", "(", "(", "left_idx", "+", "right_idx", ")", "/", "2", ")", "\n", "\n", "left_bary", ",", "left_marginal", "=", "compute_bary_recursive", "(", "left_idx", ",", "mid_idx", ",", "word_hists", ",", "word_margs", ",", "ground_metric", ",", "reg", ",", "\n", "alpha", ")", "\n", "print", "(", "\"For words between \"", ",", "left_idx", ",", "\" and \"", ",", "mid_idx", ",", "\" the marginal is \"", ",", "left_marginal", ")", "\n", "right_bary", ",", "right_marginal", "=", "compute_bary_recursive", "(", "mid_idx", ",", "right_idx", ",", "word_hists", ",", "word_margs", ",", "ground_metric", ",", "reg", ",", "\n", "alpha", ")", "\n", "print", "(", "\"For words between \"", ",", "mid_idx", ",", "\" and \"", ",", "right_idx", ",", "\" the marginal is \"", ",", "right_marginal", ")", "\n", "wts", "=", "np", ".", "zeros", "(", "2", ")", "\n", "wts", "[", "0", "]", "=", "1", "/", "(", "a", "+", "left_marginal", ")", "\n", "wts", "[", "1", "]", "=", "1", "/", "(", "a", "+", "right_marginal", ")", "\n", "if", "length_correction", ":", "\n", "        ", "wts", "[", "0", "]", "/=", "(", "mid_idx", "-", "left_idx", ")", "**", "3.0", "\n", "wts", "[", "1", "]", "/=", "(", "right_idx", "-", "mid_idx", ")", "**", "3.0", "\n", "", "print", "(", "\"For words between \"", ",", "left_idx", ",", "\" and \"", ",", "right_idx", ",", "\" the wt are \"", ",", "wts", ")", "\n", "normalized_wts", "=", "wts", "/", "wts", ".", "sum", "(", ")", "\n", "print", "(", "\"For words between \"", ",", "left_idx", ",", "\" and \"", ",", "right_idx", ",", "\" the normalized_wts are \"", ",", "normalized_wts", ")", "\n", "if", "alpha", "==", "\"am_cooc_btree\"", ":", "\n", "        ", "net_marginal", "=", "(", "left_marginal", "+", "right_marginal", ")", "/", "2.0", "\n", "", "elif", "alpha", "==", "\"gm_cooc_btree\"", ":", "\n", "        ", "print", "(", "\" get_geometric_mean\"", ")", "\n", "net_marginal", "=", "get_geometric_mean", "(", "left_marginal", ",", "right_marginal", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\" get_harmonic_mean\"", ")", "\n", "net_marginal", "=", "get_harmonic_mean", "(", "left_marginal", ",", "right_marginal", ")", "\n", "\n", "", "wass_hists", "=", "np", ".", "vstack", "(", "(", "left_bary", ",", "right_bary", ")", ")", ".", "T", "\n", "bary_wass", "=", "ot", ".", "bregman", ".", "barycenter", "(", "wass_hists", ",", "ground_metric", ",", "reg", ",", "normalized_wts", ")", "\n", "return", "bary_wass", ",", "net_marginal", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.compute_bary_recursive_kway": [[258, 304], ["int", "range", "numpy.zeros", "enumerate", "enumerate", "ot.bregman.barycenter", "math.ceil", "wasserstein.compute_bary_recursive_kway", "print", "child_barycenters.append", "child_marginals.append", "child_lens.append", "len", "print", "np.zeros.sum", "print", "numpy.mean", "numpy.vstack", "max", "max", "max", "max", "print", "wasserstein.get_geometric_mean", "print", "wasserstein.get_harmonic_mean", "max"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.compute_bary_recursive_kway", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_geometric_mean", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_harmonic_mean"], ["", "def", "compute_bary_recursive_kway", "(", "k", ",", "left_idx", ",", "right_idx", ",", "word_hists", ",", "word_margs", ",", "ground_metric", ",", "reg", ",", "alpha", ",", "a", "=", "1e-3", ",", "\n", "length_correction", "=", "False", ")", ":", "\n", "    ", "if", "(", "right_idx", "-", "left_idx", ")", "==", "1", ":", "\n", "        ", "return", "word_hists", "[", "left_idx", "]", ",", "word_margs", "[", "left_idx", "]", "\n", "\n", "", "child_barycenters", "=", "[", "]", "\n", "child_marginals", "=", "[", "]", "\n", "child_lens", "=", "[", "]", "\n", "\n", "slice_len", "=", "int", "(", "math", ".", "ceil", "(", "(", "right_idx", "-", "left_idx", ")", "/", "k", ")", ")", "\n", "\n", "for", "slice_idx", "in", "range", "(", "left_idx", ",", "right_idx", ",", ")", ":", "\n", "        ", "bary", ",", "marg", "=", "compute_bary_recursive_kway", "(", "k", ",", "slice_idx", ",", "max", "(", "slice_idx", "+", "k", ",", "right_idx", ")", ",", "word_hists", ",", "word_margs", ",", "ground_metric", ",", "reg", ",", "alpha", ",", "a", ",", "length_correction", ")", "\n", "print", "(", "\"For words between \"", ",", "slice_idx", ",", "\" and \"", ",", "max", "(", "slice_idx", "+", "k", ",", "right_idx", ")", ",", "\" the marginal is \"", ",", "marg", ")", "\n", "child_barycenters", ".", "append", "(", "bary", ")", "\n", "child_marginals", ".", "append", "(", "marg", ")", "\n", "child_lens", ".", "append", "(", "max", "(", "slice_idx", "+", "k", ",", "right_idx", ")", "-", "slice_idx", ")", "\n", "\n", "", "wts", "=", "np", ".", "zeros", "(", "len", "(", "child_marginals", ")", ")", "\n", "for", "idx", ",", "child_marg", "in", "enumerate", "(", "child_marginals", ")", ":", "\n", "# no need for a/a+child_marg as the one in the numerator will be cancelled", "\n", "        ", "wts", "[", "idx", "]", "=", "1", "/", "(", "a", "+", "child_marg", ")", "\n", "if", "length_correction", ":", "\n", "            ", "wts", "[", "idx", "]", "/=", "child_lens", "[", "idx", "]", "\n", "\n", "", "print", "(", "\"For words between \"", ",", "idx", "*", "k", ",", "\" and \"", ",", "max", "(", "(", "idx", "+", "1", ")", "*", "k", ",", "right_idx", ")", ",", "\" the overall wt are \"", ",", "wts", "[", "idx", "]", ")", "\n", "\n", "", "normalized_wts", "=", "wts", "/", "wts", ".", "sum", "(", ")", "\n", "\n", "for", "idx", ",", "child_wt", "in", "enumerate", "(", "normalized_wts", ")", ":", "\n", "        ", "print", "(", "\"For words between \"", ",", "idx", "*", "k", ",", "\" and \"", ",", "max", "(", "(", "idx", "+", "1", ")", "*", "k", ",", "right_idx", ")", ",", "\" the overall normalized_wts are \"", ",", "\n", "normalized_wts", "[", "idx", "]", ")", "\n", "\n", "", "if", "alpha", "==", "\"am_cooc_btree\"", ":", "\n", "        ", "net_marginal", "=", "np", ".", "mean", "(", "child_marginals", ")", "\n", "", "elif", "alpha", "==", "\"gm_cooc_btree\"", ":", "\n", "        ", "print", "(", "\" get_geometric_mean\"", ")", "\n", "net_marginal", "=", "get_geometric_mean", "(", "left_marginal", ",", "right_marginal", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\" get_harmonic_mean\"", ")", "\n", "net_marginal", "=", "get_harmonic_mean", "(", "left_marginal", ",", "right_marginal", ")", "\n", "\n", "", "wass_hists", "=", "np", ".", "vstack", "(", "child_barycenters", ")", ".", "T", "\n", "bary_wass", "=", "ot", ".", "bregman", ".", "barycenter", "(", "wass_hists", ",", "ground_metric", ",", "reg", ",", "normalized_wts", ")", "\n", "return", "bary_wass", ",", "net_marginal", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_in_halfs": [[306, 334], ["print", "int", "wasserstein.get_wts", "wasserstein.get_wts", "get_wts.sum", "get_wts.sum", "print", "wasserstein.get_wass_bary_fast_mult", "wasserstein.get_wass_bary_fast_mult", "ot.bregman.barycenter", "len", "numpy.vstack", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wts", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wts", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_fast_mult", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_fast_mult"], ["", "def", "get_wass_bary_in_halfs", "(", "words", ",", "cluster_histograms_", ",", "word2id", ",", "ground_metric", ",", "reg", "=", "0.1", ",", "marginals", "=", "None", ",", "smoothing", "=", "1.0", ",", "length_correction", "=", "False", ",", "max_its", "=", "1000", ",", "a", "=", "1e-3", ")", ":", "\n", "    ", "print", "(", "\"len of words is \"", ",", "len", "(", "words", ")", ")", "\n", "mid_idx", "=", "int", "(", "len", "(", "words", ")", "/", "2", ")", "\n", "\n", "left_wts", "=", "get_wts", "(", "marginals", ",", "word2id", ",", "words", "[", "0", ":", "mid_idx", "]", ",", "smoothing", ",", "a", ",", "return_normalized", "=", "False", ")", "\n", "right_wts", "=", "get_wts", "(", "marginals", ",", "word2id", ",", "words", "[", "mid_idx", ":", "len", "(", "words", ")", "]", ",", "smoothing", ",", "a", ",", "return_normalized", "=", "False", ")", "\n", "\n", "left_marginal", "=", "left_wts", ".", "sum", "(", ")", "\n", "right_marginal", "=", "right_wts", ".", "sum", "(", ")", "\n", "print", "(", "\"left_marginal: {} and right_marginal: {}\"", ".", "format", "(", "left_marginal", ",", "right_marginal", ")", ")", "\n", "left_wts", "/=", "left_marginal", "\n", "right_wts", "/=", "right_marginal", "\n", "\n", "left_bary", "=", "get_wass_bary_fast_mult", "(", "words", "[", "0", ":", "mid_idx", "]", ",", "cluster_histograms_", ",", "word2id", ",", "ground_metric", ",", "mode", "=", "\"plain\"", ",", "reg", "=", "reg", ",", "weights", "=", "left_wts", ",", "max_its", "=", "max_its", ")", "\n", "\n", "right_bary", "=", "get_wass_bary_fast_mult", "(", "words", "[", "mid_idx", ":", "len", "(", "words", ")", "]", ",", "cluster_histograms_", ",", "word2id", ",", "ground_metric", ",", "\n", "mode", "=", "\"plain\"", ",", "reg", "=", "reg", ",", "weights", "=", "right_wts", ",", "max_its", "=", "max_its", ")", "\n", "\n", "final_wts", "=", "[", "left_marginal", ",", "right_marginal", "]", "\n", "final_wts", "/=", "(", "left_marginal", "+", "right_marginal", ")", "\n", "\n", "wass_hists", "=", "np", ".", "vstack", "(", "(", "left_bary", ",", "right_bary", ")", ")", ".", "T", "\n", "bary_wass", "=", "ot", ".", "bregman", ".", "barycenter", "(", "wass_hists", ",", "ground_metric", ",", "reg", ",", "final_wts", ")", "\n", "\n", "return", "bary_wass", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.compute_bary_sequential": [[336, 373], ["wasserstein.compute_bary_sequential", "print", "print", "numpy.zeros", "print", "print", "ot.bregman.barycenter", "np.zeros.sum", "numpy.vstack", "print", "wasserstein.get_geometric_mean", "print", "wasserstein.get_harmonic_mean"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.compute_bary_sequential", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_geometric_mean", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_harmonic_mean"], ["", "def", "compute_bary_sequential", "(", "left_idx", ",", "right_idx", ",", "word_hists", ",", "word_margs", ",", "ground_metric", ",", "reg", ",", "alpha", ",", "a", "=", "1e-3", ",", "\n", "length_correction", "=", "False", ")", ":", "\n", "# [left_idx, right_idx)", "\n", "# i.e., right_idx is not included", "\n", "\n", "    ", "if", "(", "right_idx", "-", "left_idx", ")", "==", "1", ":", "\n", "        ", "return", "word_hists", "[", "left_idx", "]", ",", "word_margs", "[", "left_idx", "]", "\n", "\n", "# mid_idx = int((left_idx + right_idx)/2)", "\n", "\n", "", "left_bary", ",", "left_marginal", "=", "compute_bary_sequential", "(", "left_idx", ",", "right_idx", "-", "1", ",", "word_hists", ",", "word_margs", ",", "ground_metric", ",", "\n", "reg", ",", "alpha", ")", "\n", "print", "(", "\"For words between \"", ",", "left_idx", ",", "\" and \"", ",", "right_idx", "-", "1", ",", "\" the marginal is \"", ",", "left_marginal", ")", "\n", "right_bary", ",", "right_marginal", "=", "word_hists", "[", "right_idx", "-", "1", "]", ",", "word_margs", "[", "right_idx", "-", "1", "]", "\n", "print", "(", "\"For words between \"", ",", "right_idx", "-", "1", ",", "\" and \"", ",", "right_idx", ",", "\" the marginal is \"", ",", "right_marginal", ")", "\n", "wts", "=", "np", ".", "zeros", "(", "2", ")", "\n", "\n", "wts", "[", "0", "]", "=", "1", "/", "(", "(", "a", "+", "left_marginal", ")", "*", "(", "right_idx", "-", "1", "-", "left_idx", ")", ")", "\n", "wts", "[", "1", "]", "=", "1", "/", "(", "a", "+", "right_marginal", ")", "\n", "if", "length_correction", ":", "\n", "        ", "wts", "[", "0", "]", "/=", "(", "mid_idx", "-", "left_idx", ")", "**", "3.0", "\n", "wts", "[", "1", "]", "/=", "(", "right_idx", "-", "mid_idx", ")", "**", "3.0", "\n", "", "print", "(", "\"For words between \"", ",", "left_idx", ",", "\" and \"", ",", "right_idx", ",", "\" the wt are \"", ",", "wts", ")", "\n", "normalized_wts", "=", "wts", "/", "wts", ".", "sum", "(", ")", "\n", "print", "(", "\"For words between \"", ",", "left_idx", ",", "\" and \"", ",", "right_idx", ",", "\" the normalized_wts are \"", ",", "normalized_wts", ")", "\n", "if", "alpha", "==", "\"am_cooc_btree\"", ":", "\n", "        ", "net_marginal", "=", "(", "left_marginal", "+", "right_marginal", ")", "/", "2.0", "\n", "", "elif", "alpha", "==", "\"gm_cooc_btree\"", ":", "\n", "        ", "print", "(", "\" get_geometric_mean\"", ")", "\n", "net_marginal", "=", "get_geometric_mean", "(", "left_marginal", ",", "right_marginal", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\" get_harmonic_mean\"", ")", "\n", "net_marginal", "=", "get_harmonic_mean", "(", "left_marginal", ",", "right_marginal", ")", "\n", "\n", "", "wass_hists", "=", "np", ".", "vstack", "(", "(", "left_bary", ",", "right_bary", ")", ")", ".", "T", "\n", "bary_wass", "=", "ot", ".", "bregman", ".", "barycenter", "(", "wass_hists", ",", "ground_metric", ",", "reg", ",", "normalized_wts", ")", "\n", "return", "bary_wass", ",", "net_marginal", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_dist": [[375, 383], ["time.perf_counter", "time.perf_counter", "logging.info", "ot.sinkhorn2", "str"], "function", ["None"], ["", "def", "get_wass_dist", "(", "hist1", ",", "hist2", ",", "ground_metric", ",", "lambd", "=", "0.1", ",", "thresh", "=", "1e-09", ",", "method", "=", "'sinkhorn_stabilized'", ",", "verbose", "=", "False", ",", "max_its", "=", "1000", ")", ":", "\n", "    ", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "ans", "=", "ot", ".", "sinkhorn2", "(", "hist1", ",", "hist2", ",", "ground_metric", ",", "reg", "=", "lambd", ",", "method", "=", "method", ",", "stopThr", "=", "thresh", ",", "verbose", "=", "verbose", ",", "\n", "numItermax", "=", "max_its", ")", "[", "0", "]", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Computed sinkhorn !\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.normalize_ground_metric": [[385, 400], ["print", "gm.max", "numpy.median", "gm.mean", "numpy.log2", "print"], "function", ["None"], ["", "def", "normalize_ground_metric", "(", "args", ",", "gm", ")", ":", "\n", "    ", "if", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "\"Doing normalization: \"", ",", "args", ".", "gm_normalize", ")", "\n", "\n", "", "if", "args", ".", "gm_normalize", "==", "'max'", ":", "\n", "        ", "return", "gm", "/", "gm", ".", "max", "(", ")", "\n", "", "elif", "args", ".", "gm_normalize", "==", "'median'", ":", "\n", "        ", "return", "gm", "/", "np", ".", "median", "(", "gm", ")", "\n", "", "elif", "args", ".", "gm_normalize", "==", "'mean'", ":", "\n", "        ", "return", "gm", "/", "gm", ".", "mean", "(", ")", "\n", "", "elif", "args", ".", "gm_normalize", "==", "'log'", ":", "\n", "        ", "return", "np", ".", "log2", "(", "1.0", "+", "gm", ")", "\n", "", "elif", "args", ".", "gm_normalize", "==", "'none'", ":", "\n", "        ", "print", "(", "\"no ground_metric NORMALIZATION\"", ")", "\n", "return", "gm", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.obtain_ground_metric": [[402, 463], ["wasserstein.normalize_ground_metric", "print", "np.zeros.clip", "sklearn.metrics.pairwise.euclidean_distances", "print", "sklearn.metrics.pairwise.euclidean_distances", "print", "print", "print", "numpy.linalg.norm", "print", "debug_gm_all", "np.zeros.max", "np.zeros.max", "np.zeros.mean", "np.linalg.norm.reshape", "wasserstein.get_angular_ground_metric", "numpy.asarray", "float", "numpy.zeros", "range", "print", "range", "print", "print", "np.zeros.min", "np.zeros.max", "scipy.special.expit.dot", "numpy.log", "scipy.special.expit", "scipy.special.expit"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.normalize_ground_metric", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_angular_ground_metric"], ["", "", "def", "obtain_ground_metric", "(", "args", ",", "coord", ",", "cluster_gm", "=", "None", ")", ":", "\n", "# try normalization", "\n", "    ", "if", "args", ".", "gm_type", "==", "'euclidean'", ":", "\n", "        ", "if", "not", "args", ".", "wass2", ":", "\n", "            ", "ground_metric_matrix", "=", "euclidean_distances", "(", "coord", ")", "\n", "print", "(", "ground_metric_matrix", ".", "max", "(", ")", ",", "\"max of ground_metric_matrix\"", ")", "\n", "", "else", ":", "\n", "            ", "ground_metric_matrix", "=", "euclidean_distances", "(", "coord", ")", "\n", "ground_metric_matrix", "=", "ground_metric_matrix", "**", "2", "\n", "print", "(", "ground_metric_matrix", ".", "max", "(", ")", ",", "\"max of ground_metric_matrix\"", ")", "\n", "print", "(", "ground_metric_matrix", ".", "mean", "(", ")", ",", "\"mean of ground_metric_matrix\"", ")", "\n", "", "", "elif", "args", ".", "gm_type", "==", "'cosine'", ":", "\n", "        ", "print", "(", "\"with cosine ground_metric_matrix\"", ")", "\n", "norms", "=", "np", ".", "linalg", ".", "norm", "(", "coord", ",", "axis", "=", "1", ")", "\n", "normalized_vec", "=", "coord", "/", "(", "norms", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "sim_mat", "=", "normalized_vec", "@", "normalized_vec", ".", "T", "\n", "ground_metric_matrix", "=", "1.0", "-", "sim_mat", "\n", "ground_metric_matrix", "=", "ground_metric_matrix", "**", "2", "\n", "", "elif", "args", ".", "gm_type", "==", "'angular'", ":", "\n", "        ", "ground_metric_matrix", "=", "get_angular_ground_metric", "(", "coord", ")", "\n", "\n", "", "elif", "args", ".", "gm_type", "==", "'entailment'", ":", "\n", "        ", "if", "args", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Computing entailment ground metric\"", ")", "\n", "\n", "", "support_size", "=", "coord", ".", "shape", "[", "0", "]", "\n", "ground_metric_matrix", "=", "np", ".", "zeros", "(", "(", "support_size", ",", "support_size", ")", ")", "\n", "\n", "sub_block_start_ix", "=", "support_size", "# start index of the subblock that has already been computed", "\n", "\n", "if", "cluster_gm", "is", "not", "None", ":", "# in case the ground-metric for the cluster-centers has already been computed", "\n", "            ", "assert", "cluster_gm", ".", "shape", "[", "0", "]", "==", "cluster_gm", ".", "shape", "[", "1", "]", "\n", "assert", "cluster_gm", ".", "shape", "[", "0", "]", "==", "support_size", "-", "2", "\n", "ground_metric_matrix", "[", "2", ":", ",", "2", ":", "]", "=", "cluster_gm", "\n", "sub_block_start_ix", "=", "2", "\n", "\n", "", "for", "i", "in", "range", "(", "support_size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "support_size", ")", ":", "\n", "                ", "if", "i", ">", "sub_block_start_ix", "and", "j", ">", "sub_block_start_ix", ":", "\n", "                    ", "continue", "\n", "", "ground_metric_matrix", "[", "i", ",", "j", "]", "=", "-", "sigmoid", "(", "-", "coord", "[", "i", "]", ")", ".", "dot", "(", "np", ".", "log", "(", "sigmoid", "(", "-", "coord", "[", "j", "]", ")", ")", ")", "\n", "", "", "ground_metric_matrix", "/=", "100", "\n", "\n", "if", "args", ".", "verbose", ":", "\n", "            ", "print", "(", "\"entailment_ground_metric.min:\"", ",", "ground_metric_matrix", ".", "min", "(", ")", ")", "\n", "print", "(", "\"entailment_ground_metric.max:\"", ",", "ground_metric_matrix", ".", "max", "(", ")", ")", "\n", "\n", "", "", "if", "args", ".", "gm_normalize", "is", "not", "None", ":", "\n", "        ", "ground_metric_matrix", "=", "normalize_ground_metric", "(", "args", ",", "ground_metric_matrix", ")", "\n", "if", "args", ".", "debug", ":", "\n", "            ", "print", "(", "\"After NORMALIZATION\"", ")", "\n", "debug_gm_all", "(", "np", ".", "asarray", "(", "ground_metric_matrix", ")", ",", "args", ".", "regbary", ")", "\n", "\n", "", "", "if", "args", ".", "clip_gm", ":", "\n", "        ", "percent_clipped", "=", "(", "float", "(", "\n", "(", "ground_metric_matrix", ">=", "args", ".", "regbary", "*", "args", ".", "clip_max", ")", ".", "sum", "(", ")", ")", "/", "ground_metric_matrix", ".", "size", ")", "*", "100", "\n", "print", "(", "\"inside interpolate: percent_clipped is \"", ",", "percent_clipped", ")", "\n", "ground_metric_matrix", "=", "ground_metric_matrix", ".", "clip", "(", "min", "=", "args", ".", "regbary", "*", "args", ".", "clip_min", ",", "max", "=", "args", ".", "regbary", "*", "args", ".", "clip_max", ")", "\n", "\n", "", "return", "ground_metric_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_interpolated_wass_dist": [[465, 488], ["numpy.zeros", "numpy.zeros", "numpy.vstack", "wasserstein.obtain_ground_metric", "wasserstein.get_wass_dist", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.obtain_ground_metric", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_dist"], ["", "def", "get_interpolated_wass_dist", "(", "hist1", ",", "pos1", ",", "hist2", ",", "pos2", ",", "coord", ",", "args", ",", "cluster_gm", "=", "None", ")", ":", "\n", "    ", "assert", "(", "args", ".", "interpolate_repr", ">", "0", "and", "args", ".", "interpolate_reduced", ")", "\n", "if", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "\"interpolating baby!!!\"", ")", "\n", "", "mod_hist1", "=", "np", ".", "zeros", "(", "hist1", ".", "shape", "[", "0", "]", "+", "2", ")", "\n", "mod_hist2", "=", "np", ".", "zeros", "(", "hist2", ".", "shape", "[", "0", "]", "+", "2", ")", "\n", "if", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "\"in just interpolated: shape of mod_hist1 is \"", ",", "mod_hist1", ".", "shape", ")", "\n", "print", "(", "\"in just interpolated: shape of mod_hist2 is \"", ",", "mod_hist2", ".", "shape", ")", "\n", "# make 0th index for 1st sentence point repr", "\n", "", "mod_hist1", "[", "0", "]", "=", "args", ".", "interpolate_repr", "\n", "# make 1st index for 1st sentence point repr", "\n", "mod_hist2", "[", "1", "]", "=", "args", ".", "interpolate_repr", "\n", "mod_hist1", "[", "2", ":", "]", "=", "(", "1", "-", "args", ".", "interpolate_repr", ")", "*", "hist1", "\n", "mod_hist2", "[", "2", ":", "]", "=", "(", "1", "-", "args", ".", "interpolate_repr", ")", "*", "hist2", "\n", "mod_coord", "=", "np", ".", "vstack", "(", "[", "pos1", ",", "pos2", ",", "coord", "]", ")", "\n", "\n", "if", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "\"shapes of coord and mod_coord are \"", ",", "coord", ".", "shape", ",", "mod_coord", ".", "shape", ")", "\n", "", "ground_metric", "=", "obtain_ground_metric", "(", "args", ",", "mod_coord", ",", "cluster_gm", ")", "\n", "\n", "return", "get_wass_dist", "(", "mod_hist1", ",", "mod_hist2", ",", "ground_metric", ",", "lambd", "=", "args", ".", "regbary", ",", "thresh", "=", "args", ".", "thresh", ",", "\n", "max_its", "=", "args", ".", "max_its", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_complete_interpolated_wass_dist": [[490, 511], ["numpy.zeros", "numpy.zeros", "numpy.vstack", "wasserstein.obtain_ground_metric", "wasserstein.get_wass_dist", "print", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.obtain_ground_metric", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_dist"], ["", "def", "get_complete_interpolated_wass_dist", "(", "hist1", ",", "posns1", ",", "hist2", ",", "posns2", ",", "coord", ",", "args", ")", ":", "\n", "    ", "assert", "(", "args", ".", "interpolate_repr", ">", "0", "and", "args", ".", "interpolate_complete", ")", "\n", "if", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "\"interpolating baby completely!!!\"", ")", "\n", "\n", "", "assert", "(", "hist1", ".", "shape", "[", "0", "]", "+", "len", "(", "posns2", ")", ")", "==", "(", "hist2", ".", "shape", "[", "0", "]", "+", "len", "(", "posns1", ")", ")", "\n", "\n", "mod_hist1", "=", "np", ".", "zeros", "(", "hist1", ".", "shape", "[", "0", "]", "+", "len", "(", "posns2", ")", ")", "\n", "mod_hist2", "=", "np", ".", "zeros", "(", "hist2", ".", "shape", "[", "0", "]", "+", "len", "(", "posns1", ")", ")", "\n", "mod_hist1", "[", "0", ":", "len", "(", "posns1", ")", "]", "=", "hist1", "[", "0", ":", "len", "(", "posns1", ")", "]", "\n", "mod_hist1", "[", "(", "len", "(", "posns1", ")", "+", "len", "(", "posns2", ")", ")", ":", "]", "=", "hist1", "[", "len", "(", "posns1", ")", ":", "]", "\n", "\n", "mod_hist2", "[", "len", "(", "posns1", ")", ":", "(", "len", "(", "posns1", ")", "+", "len", "(", "posns2", ")", ")", "]", "=", "hist2", "[", "0", ":", "len", "(", "posns2", ")", "]", "\n", "mod_hist2", "[", "(", "len", "(", "posns1", ")", "+", "len", "(", "posns2", ")", ")", ":", "]", "=", "hist2", "[", "len", "(", "posns2", ")", ":", "]", "\n", "\n", "mod_coord", "=", "np", ".", "vstack", "(", "[", "posns1", ",", "posns2", ",", "coord", "]", ")", "\n", "\n", "ground_metric", "=", "obtain_ground_metric", "(", "args", ",", "mod_coord", ")", "\n", "\n", "return", "get_wass_dist", "(", "mod_hist1", ",", "mod_hist2", ",", "ground_metric", ",", "lambd", "=", "args", ".", "regbary", ",", "thresh", "=", "args", ".", "thresh", ",", "\n", "max_its", "=", "args", ".", "max_its", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_both_interpolated_wass_dist": [[513, 535], ["print", "numpy.zeros", "numpy.zeros", "print", "print", "print", "numpy.vstack", "wasserstein.get_interpolated_wass_dist", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_interpolated_wass_dist"], ["", "def", "get_both_interpolated_wass_dist", "(", "hist1", ",", "pos1", ",", "posns1", ",", "hist2", ",", "pos2", ",", "posns2", ",", "other_coords", ",", "args", ")", ":", "\n", "    ", "assert", "(", "args", ".", "interpolate_repr", ">", "0", "and", "args", ".", "interpolate_complete", "and", "args", ".", "interpolate_reduced", ")", "\n", "print", "(", "\"interpolating baby really completely!!!\"", ")", "\n", "\n", "assert", "(", "hist1", ".", "shape", "[", "0", "]", "+", "len", "(", "posns2", ")", ")", "==", "(", "hist2", ".", "shape", "[", "0", "]", "+", "len", "(", "posns1", ")", ")", "\n", "\n", "# since hist1 already contains posns1 many places in the front", "\n", "mod_hist1", "=", "np", ".", "zeros", "(", "hist1", ".", "shape", "[", "0", "]", "+", "len", "(", "posns2", ")", ")", "\n", "mod_hist2", "=", "np", ".", "zeros", "(", "hist2", ".", "shape", "[", "0", "]", "+", "len", "(", "posns1", ")", ")", "\n", "print", "(", "\"number of words in sent1 and 2 are {} and {} resp\"", ".", "format", "(", "len", "(", "posns1", ")", ",", "len", "(", "posns2", ")", ")", ")", "\n", "print", "(", "\"in both interpolated: shape of mod_hist1 is \"", ",", "mod_hist1", ".", "shape", ")", "\n", "print", "(", "\"in both interpolated: shape of mod_hist2 is \"", ",", "mod_hist2", ".", "shape", ")", "\n", "mod_hist1", "[", "0", ":", "len", "(", "posns1", ")", "]", "=", "hist1", "[", "0", ":", "len", "(", "posns1", ")", "]", "\n", "mod_hist1", "[", "(", "len", "(", "posns1", ")", "+", "len", "(", "posns2", ")", ")", ":", "]", "=", "hist1", "[", "len", "(", "posns1", ")", ":", "]", "\n", "\n", "# len(posns1) many zeros before", "\n", "mod_hist2", "[", "len", "(", "posns1", ")", ":", "(", "len", "(", "posns1", ")", "+", "len", "(", "posns2", ")", ")", "]", "=", "hist2", "[", "0", ":", "len", "(", "posns2", ")", "]", "\n", "mod_hist2", "[", "(", "len", "(", "posns1", ")", "+", "len", "(", "posns2", ")", ")", ":", "]", "=", "hist2", "[", "len", "(", "posns2", ")", ":", "]", "\n", "\n", "mod_coord", "=", "np", ".", "vstack", "(", "[", "posns1", ",", "posns2", ",", "other_coords", "]", ")", "\n", "\n", "return", "get_interpolated_wass_dist", "(", "mod_hist1", ",", "pos1", ",", "mod_hist2", ",", "pos2", ",", "mod_coord", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_barycentric_interpolated_wass_dist": [[537, 569], ["print", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.vstack", "wasserstein.obtain_ground_metric", "numpy.asarray", "ot.bregman.barycenter", "ot.bregman.barycenter", "wasserstein.get_wass_dist", "numpy.vstack", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.obtain_ground_metric", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_dist"], ["", "def", "get_barycentric_interpolated_wass_dist", "(", "hist1", ",", "pos1", ",", "hist2", ",", "pos2", ",", "coord", ",", "args", ")", ":", "\n", "    ", "print", "(", "\"WARNING! This kind of interpolation is deprecated. Use the one above\"", ")", "\n", "assert", "False", "\n", "\n", "assert", "(", "args", ".", "interpolate_repr", ">", "0", "and", "args", ".", "barycentric_interpolate_reduced", ")", "\n", "print", "(", "\"interpolating baby!!!\"", ")", "\n", "mod_hist1_a", "=", "np", ".", "zeros", "(", "hist1", ".", "shape", "[", "0", "]", "+", "2", ")", "\n", "mod_hist1_b", "=", "np", ".", "zeros", "(", "hist1", ".", "shape", "[", "0", "]", "+", "2", ")", "\n", "\n", "mod_hist2_a", "=", "np", ".", "zeros", "(", "hist2", ".", "shape", "[", "0", "]", "+", "2", ")", "\n", "mod_hist2_b", "=", "np", ".", "zeros", "(", "hist2", ".", "shape", "[", "0", "]", "+", "2", ")", "\n", "# make 0th index for 1st sentence point repr", "\n", "mod_hist1_a", "[", "0", "]", "=", "1", "\n", "mod_hist1_b", "[", "2", ":", "]", "=", "hist1", "\n", "\n", "mod_hist2_a", "[", "1", "]", "=", "1", "\n", "mod_hist2_b", "[", "2", ":", "]", "=", "hist2", "\n", "\n", "wass_hists_1", "=", "np", ".", "vstack", "(", "(", "mod_hist1_a", ",", "mod_hist1_b", ")", ")", ".", "T", "\n", "wass_hists_2", "=", "np", ".", "vstack", "(", "(", "mod_hist2_a", ",", "mod_hist2_b", ")", ")", ".", "T", "\n", "\n", "mod_coord", "=", "np", ".", "vstack", "(", "[", "pos1", ",", "pos2", ",", "coord", "]", ")", "\n", "ground_metric", "=", "obtain_ground_metric", "(", "args", ",", "mod_coord", ")", "\n", "\n", "hist_wts", "=", "np", ".", "asarray", "(", "[", "args", ".", "interpolate_repr", ",", "1", "-", "args", ".", "interpolate_repr", "]", ")", "\n", "\n", "mod_hist1", "=", "ot", ".", "bregman", ".", "barycenter", "(", "wass_hists_1", ",", "ground_metric", ",", "args", ".", "regbary", ",", "hist_wts", ")", "\n", "\n", "mod_hist2", "=", "ot", ".", "bregman", ".", "barycenter", "(", "wass_hists_2", ",", "ground_metric", ",", "args", ".", "regbary", ",", "hist_wts", ")", "\n", "\n", "return", "get_wass_dist", "(", "mod_hist1", ",", "mod_hist2", ",", "ground_metric", ",", "lambd", "=", "args", ".", "regbary", ",", "thresh", "=", "args", ".", "thresh", ",", "\n", "max_its", "=", "args", ".", "max_its", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_closest_k_wasserstein_words_fast": [[571, 593], ["print", "numpy.asarray", "np.asarray.argsort", "numpy.array", "np.asarray.append", "ground_metric.max", "ot.sinkhorn2"], "function", ["None"], ["", "def", "get_closest_k_wasserstein_words_fast", "(", "query_hist", ",", "num_nbrs", ",", "interesting_words", ",", "cluster_histograms_", ",", "ground_metric", ",", "\n", "word2id", ",", "lambd", "=", "0.1", ",", "method", "=", "'sinkhorn_stabilized'", ",", "\n", "normalize", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"meta params are\"", ",", "meta_params", "[", "'data'", "]", ",", "meta_params", "[", "'data'", "]", "[", "'cluster_data_dir'", "]", ")", "\n", "if", "(", "normalize", "==", "'max'", ")", ":", "\n", "        ", "ground_metric", "=", "ground_metric", "/", "ground_metric", ".", "max", "(", ")", "\n", "", "wass_words", "=", "[", "]", "\n", "wass_dist", "=", "[", "]", "\n", "for", "word", "in", "interesting_words", ":", "\n", "        ", "if", "word", "==", "'\\x1d'", "or", "word", "==", "'\\x1cthe'", ":", "\n", "            ", "continue", "\n", "\n", "", "wass_words", "+=", "[", "word", "]", "\n", "\n", "wass_hist", "=", "cluster_histograms_", "[", "word2id", "[", "word", "]", "]", "\n", "wass_dist", ".", "append", "(", "\n", "ot", ".", "sinkhorn2", "(", "query_hist", ",", "wass_hist", ",", "ground_metric", ",", "reg", "=", "lambd", ",", "method", "=", "method", ",", "verbose", "=", "'False'", ")", "[", "0", "]", ")", "\n", "", "wass_dist", "=", "np", ".", "asarray", "(", "wass_dist", ")", "\n", "# get indices in ascending order of distance", "\n", "sorted_indices", "=", "wass_dist", ".", "argsort", "(", ")", "\n", "wass_words", "=", "np", ".", "array", "(", "wass_words", ")", "\n", "return", "wass_words", "[", "sorted_indices", "[", ":", "num_nbrs", "]", "]", ",", "wass_dist", "[", "sorted_indices", "[", ":", "num_nbrs", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wts": [[598, 610], ["numpy.power", "numpy.zeros", "enumerate", "len", "np.zeros.sum"], "function", ["None"], ["def", "get_wts", "(", "prob_marginal_arr", ",", "word2id", ",", "words", ",", "smoothing", "=", "1.0", ",", "a", "=", "1e-3", ",", "return_normalized", "=", "True", ")", ":", "\n", "# print(\"in get_wts marginal a is \", a)", "\n", "    ", "prob_marginal_arr", "=", "np", ".", "power", "(", "prob_marginal_arr", ",", "smoothing", ")", "\n", "marginal_wts", "=", "np", ".", "zeros", "(", "len", "(", "words", ")", ")", "\n", "for", "idx", ",", "wd", "in", "enumerate", "(", "words", ")", ":", "\n", "        ", "marginal_wts", "[", "idx", "]", "=", "a", "/", "(", "a", "+", "prob_marginal_arr", "[", "word2id", "[", "wd", "]", "]", ")", "\n", "\n", "", "if", "return_normalized", ":", "\n", "        ", "normalized_wts", "=", "marginal_wts", "/", "marginal_wts", ".", "sum", "(", ")", "\n", "return", "normalized_wts", "\n", "", "else", ":", "\n", "        ", "return", "marginal_wts", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wts_direct": [[612, 619], ["numpy.power", "numpy.zeros", "enumerate", "len", "np.zeros.sum"], "function", ["None"], ["", "", "def", "get_wts_direct", "(", "prob_marginal_arr", ",", "word2id", ",", "words", ",", "smoothing", "=", "1.0", ",", "a", "=", "1e-3", ")", ":", "\n", "    ", "prob_marginal_arr", "=", "np", ".", "power", "(", "prob_marginal_arr", ",", "smoothing", ")", "\n", "marginal_wts", "=", "np", ".", "zeros", "(", "len", "(", "words", ")", ")", "\n", "for", "idx", ",", "wd", "in", "enumerate", "(", "words", ")", ":", "\n", "        ", "marginal_wts", "[", "idx", "]", "=", "prob_marginal_arr", "[", "word2id", "[", "wd", "]", "]", "\n", "", "normalized_wts", "=", "marginal_wts", "/", "marginal_wts", ".", "sum", "(", ")", "\n", "return", "normalized_wts", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wts_btree": [[621, 627], ["numpy.zeros", "enumerate", "len", "np.zeros.sum"], "function", ["None"], ["", "def", "get_wts_btree", "(", "prob_marginal_arr", ",", "word2id", ",", "words", ",", "a", "=", "1e-3", ")", ":", "\n", "    ", "marginal_wts", "=", "np", ".", "zeros", "(", "len", "(", "words", ")", ")", "\n", "for", "idx", ",", "wd", "in", "enumerate", "(", "words", ")", ":", "\n", "        ", "marginal_wts", "[", "idx", "]", "=", "a", "/", "(", "a", "+", "prob_marginal_arr", "[", "word2id", "[", "wd", "]", "]", ")", "\n", "", "normalized_wts", "=", "marginal_wts", "/", "marginal_wts", ".", "sum", "(", ")", "\n", "return", "normalized_wts", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.main": [[629, 738], ["utils.dotdict", "print", "print", "print", "logging.basicConfig", "time.perf_counter", "pickle.load", "pickle.load", "pickle.load", "time.perf_counter", "logging.info", "sklearn.metrics.pairwise.euclidean_distances", "cooc_analysis.Analysis", "cooc_analysis.Analysis.setup_cooccurr_analysis", "time.perf_counter", "time.perf_counter", "logging.info", "vars", "json.dumps", "logging.getLevelName", "logging.getLogger().setLevel", "open", "open", "open", "numpy.load", "time.perf_counter", "print", "time.perf_counter", "logging.info", "os.path.join", "os.path.join", "os.path.join", "enumerate", "os.path.join", "numpy.load", "wasserstein.get_wass_bary_fast", "utils.dotdict.sent.split", "wasserstein.get_wass_bary_fast_mult", "wasserstein.get_closest_k_wasserstein_words_fast", "numpy.random.choice", "wasserstein.get_closest_k_wasserstein_words_fast", "time.perf_counter", "utils.dotdict.sent1.lower", "utils.dotdict.sent2.lower", "print", "print", "params.sent1.lower.split", "print", "params.sent2.lower.split", "print", "wasserstein.get_wass_bary_fast_mult", "wasserstein.get_wass_bary_fast_mult", "print", "time.perf_counter", "logging.info", "logging.getLogger", "str", "str", "wasserstein.get_wts", "wasserstein.get_wts", "print", "print", "wasserstein.get_wass_dist", "str", "valid_words1.append", "valid_words2.append", "enumerate", "enumerate", "str"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.setup_cooccurr_analysis", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_fast", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_fast_mult", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_closest_k_wasserstein_words_fast", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_closest_k_wasserstein_words_fast", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_fast_mult", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_bary_fast_mult", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wts", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wts", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.wasserstein.get_wass_dist"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "params", "=", "utils", ".", "dotdict", "(", "vars", "(", "args", ")", ")", "\n", "print", "(", "'-------- PARAMETERS --------'", ")", "\n", "print", "(", "json", ".", "dumps", "(", "params", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", ")", "\n", "print", "(", "'----------------------------'", ")", "\n", "logging", ".", "basicConfig", "(", ")", "\n", "meta_params", "[", "'data'", "]", "=", "params", "\n", "if", "params", ".", "log", ":", "\n", "        ", "level", "=", "logging", ".", "getLevelName", "(", "params", ".", "log", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "level", ")", "\n", "\n", "", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "word_vector_dict", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "params", ".", "cluster_data_dir", ",", "'word_vector.pickle'", ")", ",", "'rb'", ")", ")", "\n", "cluster_center_vectors", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "params", ".", "cluster_data_dir", ",", "'cluster_center.pickle'", ")", ",", "'rb'", ")", ")", "\n", "cluster_to_words", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "params", ".", "cluster_data_dir", ",", "'cluster_to_words.pickle'", ")", ",", "'rb'", ")", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Loaded cluster files !\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "ground_metric_matrix", "=", "euclidean_distances", "(", "cluster_center_vectors", ")", "\n", "\n", "opts", "=", "{", "}", "\n", "analysis", "=", "Analysis", "(", "opts", "=", "opts", ")", "\n", "analysis", ".", "load_mode", "=", "flags", ".", "LOAD_MIN", "\n", "analysis", ".", "setup_cooccurr_analysis", "(", "params", ".", "cooc_root_path", ")", "\n", "word2id", "=", "{", "word", ":", "idx", "for", "idx", ",", "word", "in", "enumerate", "(", "analysis", ".", "id2word_cooc", ")", "}", "\n", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "normalized_cluster_hists", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "params", ".", "hists_path", ")", ")", "[", "'arr_0'", "]", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Loaded normalized_cluster_hists matrix !\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "marginals_arr", "=", "None", "\n", "\n", "if", "params", ".", "marginals", ":", "\n", "        ", "marginals_arr", "=", "np", ".", "load", "(", "params", ".", "marginals_path", ")", "[", "'arr_0'", "]", "\n", "\n", "", "if", "params", ".", "mode", "==", "flags", ".", "MODE_BARYCENTER_NBRS", ":", "\n", "\n", "        ", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "(", "params", ".", "sent", "==", "\"\"", ")", ":", "\n", "            ", "wass_bary_fast_words", "=", "get_wass_bary_fast", "(", "params", ".", "word1", ",", "params", ".", "word2", ",", "normalized_cluster_hists", ",", "word2id", ",", "\n", "ground_metric_matrix", ",", "reg", "=", "params", ".", "regbary", ")", "\n", "", "else", ":", "\n", "            ", "words", "=", "params", ".", "sent", ".", "split", "(", "\" \"", ")", "\n", "wass_bary_fast_words", "=", "get_wass_bary_fast_mult", "(", "words", ",", "normalized_cluster_hists", ",", "word2id", ",", "\n", "ground_metric_matrix", ",", "mode", "=", "params", ".", "bary_mode", ",", "\n", "reg", "=", "params", ".", "regbary", ")", "\n", "\n", "", "if", "params", ".", "nbr_subset", "==", "-", "1", ":", "\n", "            ", "closest_words", ",", "closest_distances", "=", "get_closest_k_wasserstein_words_fast", "(", "wass_bary_fast_words", ",", "params", ".", "top_k", ",", "\n", "analysis", ".", "id2word_cooc", ",", "\n", "normalized_cluster_hists", ",", "\n", "ground_metric_matrix", ",", "word2id", ")", "\n", "", "else", ":", "\n", "            ", "subset", "=", "np", ".", "random", ".", "choice", "(", "analysis", ".", "id2word_cooc", ",", "params", ".", "nbr_subset", ",", "replace", "=", "False", ")", "\n", "closest_words", ",", "closest_distances", "=", "get_closest_k_wasserstein_words_fast", "(", "wass_bary_fast_words", ",", "params", ".", "top_k", ",", "\n", "subset", ",", "normalized_cluster_hists", ",", "\n", "ground_metric_matrix", ",", "word2id", ")", "\n", "\n", "", "print", "(", "closest_words", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Computed closest k Wasserstein neighbors!\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "", "elif", "params", ".", "mode", "==", "flags", ".", "MODE_SENTENCE_DIST", ":", "\n", "        ", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "sent1", "=", "params", ".", "sent1", ".", "lower", "(", ")", "\n", "sent2", "=", "params", ".", "sent2", ".", "lower", "(", ")", "\n", "print", "(", "\"Lowercased sentence 1 \"", ",", "sent1", ")", "\n", "print", "(", "\"Lowercased sentence 2 \"", ",", "sent2", ")", "\n", "\n", "words1", "=", "sent1", ".", "split", "(", "\" \"", ")", "\n", "valid_words1", "=", "[", "]", "\n", "for", "wd", "in", "words1", ":", "\n", "            ", "if", "wd", "in", "word2id", ":", "\n", "                ", "valid_words1", ".", "append", "(", "wd", ")", "\n", "\n", "", "", "print", "(", "\"Valid words for sentence 1 are \"", ",", "[", "(", "wd", ",", "idx", ")", "for", "idx", ",", "wd", "in", "enumerate", "(", "valid_words1", ")", "]", ")", "\n", "words2", "=", "sent2", ".", "split", "(", "\" \"", ")", "\n", "valid_words2", "=", "[", "]", "\n", "for", "wd", "in", "words2", ":", "\n", "            ", "if", "wd", "in", "word2id", ":", "\n", "                ", "valid_words2", ".", "append", "(", "wd", ")", "\n", "", "", "print", "(", "\"Valid words for sentence 2 are \"", ",", "[", "(", "wd", ",", "idx", ")", "for", "idx", ",", "wd", "in", "enumerate", "(", "valid_words2", ")", "]", ")", "\n", "\n", "if", "params", ".", "marginals", ":", "\n", "            ", "wts_sent1", "=", "get_wts", "(", "marginals_arr", ",", "word2id", ",", "words1", ")", "\n", "wts_sent2", "=", "get_wts", "(", "marginals_arr", ",", "word2id", ",", "words2", ")", "\n", "_alpha", "=", "\"smoothed inverse ppmi based weights\"", "\n", "print", "(", "\"wts_sent1 \"", ",", "wts_sent1", ")", "\n", "print", "(", "\"wts_sent2 \"", ",", "wts_sent2", ")", "\n", "", "else", ":", "\n", "            ", "wts_sent1", "=", "None", "\n", "wts_sent2", "=", "None", "\n", "_alpha", "=", "\"uniform\"", "\n", "\n", "", "wass_bary_fast_sent1", "=", "get_wass_bary_fast_mult", "(", "words1", ",", "normalized_cluster_hists", ",", "word2id", ",", "ground_metric_matrix", ",", "\n", "mode", "=", "params", ".", "bary_mode", ",", "\n", "reg", "=", "params", ".", "regbary", ",", "alpha", "=", "_alpha", ",", "weights", "=", "wts_sent1", ",", "\n", "marginals", "=", "marginals_arr", ",", "smoothing", "=", "params", ".", "marginal_smoothing", ")", "\n", "wass_bary_fast_sent2", "=", "get_wass_bary_fast_mult", "(", "words2", ",", "normalized_cluster_hists", ",", "word2id", ",", "ground_metric_matrix", ",", "\n", "mode", "=", "params", ".", "bary_mode", ",", "\n", "reg", "=", "params", ".", "regbary", ",", "alpha", "=", "_alpha", ",", "weights", "=", "wts_sent2", ",", "\n", "marginals", "=", "marginals_arr", ",", "smoothing", "=", "params", ".", "marginal_smoothing", ")", "\n", "\n", "print", "(", "get_wass_dist", "(", "wass_bary_fast_sent1", ",", "wass_bary_fast_sent2", ",", "ground_metric_matrix", ",", "lambd", "=", "params", ".", "regdist", ")", ")", "\n", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Computed wasserstein distance between sentences in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.ppmi.get_ppmi": [[21, 37], ["max", "math.log2"], "function", ["None"], ["def", "get_ppmi", "(", "cooccurr_dic", ",", "word_cooc", ",", "context_word_cooc", ",", "total_cooc", ",", "word1", ",", "word2", ")", ":", "\n", "# **Positive Pointwise Mutual Information (PPMI) calculation**", "\n", "#", "\n", "# PPMI(w, c) = max(0, PMI(w, c))", "\n", "#", "\n", "# PMI(w, c) = log(p(w, c)/(p(c)\\*p(w))", "\n", "#", "\n", "# p(w, c) = cooc(w, c)/|D|", "\n", "#", "\n", "# p(w) = Sum_over_c(cooc(w,c))/|D|", "\n", "#", "\n", "# |D| = Sum_over_w(Sum_over_c(cooc(w,c)))", "\n", "\n", "    ", "numer", "=", "cooccurr_dic", "[", "(", "word1", ",", "word2", ")", "]", "*", "total_cooc", "\n", "denom", "=", "word_cooc", "[", "word1", "]", "*", "context_word_cooc", "[", "word2", "]", "\n", "return", "max", "(", "0", ",", "math", ".", "log2", "(", "numer", "/", "denom", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.ppmi.main": [[39, 101], ["utils.dotdict", "print", "print", "print", "logging.basicConfig", "logging.info", "cooc_analysis.Analysis", "cooc_analysis.Analysis.setup_cooccurr_analysis", "logging.info", "time.perf_counter", "numpy.sum", "time.perf_counter", "logging.info", "utils.pickle_obj", "logging.info", "vars", "json.dumps", "logging.getLevelName", "logging.getLogger().setLevel", "list", "logging.info", "time.perf_counter", "numpy.sum", "time.perf_counter", "logging.info", "time.perf_counter", "time.perf_counter", "logging.info", "logging.info", "dict", "logging.info", "os.path.join", "total_word_cooc.values", "ppmi.get_ppmi", "list", "ppmi.get_ppmi", "str", "filter", "str", "logging.getLogger", "str", "context_word_corrected_cooc.values", "str", "dict.items", "str", "str", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.cooc_analysis.Analysis.setup_cooccurr_analysis", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.utils.pickle_obj", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.ppmi.get_ppmi", "home.repos.pwc.inspect_result.sidak_context-mover-distance-and-barycenters.None.ppmi.get_ppmi"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "params", "=", "utils", ".", "dotdict", "(", "vars", "(", "args", ")", ")", "\n", "print", "(", "'-------- PARAMETERS --------'", ")", "\n", "print", "(", "json", ".", "dumps", "(", "params", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", ")", "\n", "print", "(", "'----------------------------'", ")", "\n", "\n", "logging", ".", "basicConfig", "(", ")", "\n", "if", "params", ".", "log", ":", "\n", "        ", "level", "=", "logging", ".", "getLevelName", "(", "params", ".", "log", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "level", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Load co-occurrence pickled files\"", ")", "\n", "\n", "opts", "=", "{", "}", "\n", "\n", "analysis", "=", "Analysis", "(", "opts", "=", "opts", ")", "\n", "analysis", ".", "load_all", "=", "False", "\n", "analysis", ".", "setup_cooccurr_analysis", "(", "params", ".", "cooc_root_path", ")", "\n", "\n", "logging", ".", "info", "(", "\"Done loading pickled!\"", ")", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "total_word_cooc", "=", "{", "word", ":", "0.0", "for", "word", "in", "analysis", ".", "id2word_cooc", "}", "\n", "\n", "for", "word1", ",", "word2", "in", "analysis", ".", "cooccurr_dic", ":", "\n", "        ", "total_word_cooc", "[", "word1", "]", "+=", "analysis", ".", "cooccurr_dic", "[", "(", "word1", ",", "word2", ")", "]", "\n", "\n", "", "total_cooc", "=", "np", ".", "sum", "(", "list", "(", "total_word_cooc", ".", "values", "(", ")", ")", ")", "\n", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Created total_cooc!\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "if", "(", "not", "params", ".", "smooth", ")", ":", "\n", "        ", "ppmi_dic", "=", "{", "(", "word1", ",", "word2", ")", ":", "get_ppmi", "(", "analysis", ".", "cooccurr_dic", ",", "total_word_cooc", ",", "total_word_cooc", ",", "total_cooc", ",", "\n", "word1", ",", "word2", ")", "for", "word1", ",", "word2", "in", "analysis", ".", "cooccurr_dic", "}", "\n", "logging", ".", "info", "(", "\"Created ppmi_dic\"", ")", "\n", "", "else", ":", "\n", "        ", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "context_word_corrected_cooc", "=", "{", "word", ":", "total_word_cooc", "[", "word", "]", "**", "params", ".", "smoothing_parameter", "for", "word", "in", "\n", "total_word_cooc", "}", "\n", "context_word_corrected_cooc_sum", "=", "np", ".", "sum", "(", "list", "(", "context_word_corrected_cooc", ".", "values", "(", ")", ")", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Created context_word_corrected_cooc!\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "st_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "ppmi_dic", "=", "{", "(", "word1", ",", "word2", ")", ":", "get_ppmi", "(", "analysis", ".", "cooccurr_dic", ",", "total_word_cooc", ",", "context_word_corrected_cooc", ",", "\n", "context_word_corrected_cooc_sum", ",", "\n", "word1", ",", "word2", ")", "for", "word1", ",", "word2", "in", "analysis", ".", "cooccurr_dic", "}", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "logging", ".", "info", "(", "\"Created smoothed_ppmi_dic\"", "+", "\" in \"", "+", "str", "(", "end_time", "-", "st_time", ")", "+", "\" seconds\"", ")", "\n", "\n", "", "pkl_desc", "=", "\"ppmi\"", "\n", "if", "(", "params", ".", "smooth", ")", ":", "\n", "        ", "pkl_desc", "+=", "\"_\"", "+", "\"smooth_\"", "+", "str", "(", "params", ".", "smoothing_parameter", ")", "\n", "\n", "", "if", "(", "params", ".", "filter_zero", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"len of ppmi before \"", "+", "str", "(", "len", "(", "ppmi_dic", ")", ")", ")", "\n", "ppmi_dic", "=", "dict", "(", "filter", "(", "lambda", "x", ":", "x", "[", "1", "]", ">", "0", ",", "ppmi_dic", ".", "items", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"len of ppmi after filtering\"", "+", "str", "(", "len", "(", "ppmi_dic", ")", ")", ")", "\n", "pkl_desc", "+=", "\"_filter_zero\"", "\n", "\n", "", "pkl_time", "=", "utils", ".", "pickle_obj", "(", "ppmi_dic", ",", "os", ".", "path", ".", "join", "(", "params", ".", "cooc_root_path", ",", "pkl_desc", "+", "\".pickle\"", ")", ")", "\n", "logging", ".", "info", "(", "\"Pickled \"", "+", "pkl_desc", "+", "\" in time: \"", "+", "str", "(", "pkl_time", ")", ")", "\n", "\n"]]}