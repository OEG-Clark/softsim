{"home.repos.pwc.inspect_result.flyegle_sdwnet.None.cal.main": [[11, 19], ["imageio.imread", "imageio.imread", "skimage.metrics.peak_signal_noise_ratio", "skimage.metrics.structural_similarity"], "function", ["None"], ["def", "main", "(", "gt_path", ",", "reconstructed_path", ")", ":", "\n", "    ", "ref_img", "=", "imageio", ".", "imread", "(", "gt_path", ")", "\n", "res_img", "=", "imageio", ".", "imread", "(", "reconstructed_path", ")", "\n", "\n", "psnr", "=", "peak_signal_noise_ratio", "(", "ref_img", ",", "res_img", ")", "\n", "ssim", "=", "structural_similarity", "(", "ref_img", ",", "res_img", ",", "multichannel", "=", "True", ",", "gaussian_weights", "=", "True", ",", "use_sample_covariance", "=", "True", ")", "\n", "\n", "return", "psnr", ",", "ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.cal.main_pool": [[21, 30], ["imageio.imread", "imageio.imread", "skimage.metrics.peak_signal_noise_ratio", "skimage.metrics.structural_similarity", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "main_pool", "(", "image_name", ")", ":", "\n", "\n", "    ", "sr_images", "=", "imageio", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "args", ".", "sr_folders", ",", "image_name", ")", ")", "\n", "hr_images", "=", "imageio", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "args", ".", "hr_folders", ",", "image_name", ")", ")", "\n", "\n", "psnr", "=", "peak_signal_noise_ratio", "(", "sr_images", ",", "hr_images", ")", "\n", "ssim", "=", "structural_similarity", "(", "sr_images", ",", "hr_images", ",", "multichannel", "=", "True", ",", "gaussian_weights", "=", "True", ",", "use_sample_covariance", "=", "True", ")", "\n", "\n", "return", "psnr", ",", "ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.single_image_loader.__init__": [[93, 107], ["torch.utils.data.dataset.Dataset.__init__", "inference_ddp.single_image_loader.infer_preprocess", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "inference_ddp.single_image_loader._get_image_list", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader.infer_preprocess", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader._get_image_list"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "mode", "=", "\"jpg2png\"", ",", "dataset", "=", "\"realblur\"", ")", ":", "\n", "        ", "super", "(", "single_image_loader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "range", "=", "self", ".", "cfg", ".", "INPUT", ".", "RANGE", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "self", ".", "mean", "=", "self", ".", "cfg", ".", "INPUT", ".", "MEAN", "\n", "self", ".", "std", "=", "self", ".", "cfg", ".", "INPUT", ".", "STD", "\n", "self", ".", "norm", "=", "self", ".", "cfg", ".", "INPUT", ".", "NORM", "\n", "self", ".", "base_transforms", "=", "self", ".", "infer_preprocess", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "image_file", "=", "self", ".", "cfg", ".", "DATA", ".", "TRAIN", ".", "LR_PATH", "\n", "self", ".", "file_list", "=", "self", ".", "_get_image_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.single_image_loader._get_image_list": [[108, 111], ["json.loads", "x.strip", "open().readlines", "open"], "methods", ["None"], ["", "def", "_get_image_list", "(", "self", ")", ":", "\n", "        ", "image_path_list", "=", "[", "json", ".", "loads", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "open", "(", "self", ".", "image_file", ")", ".", "readlines", "(", ")", "]", "\n", "return", "image_path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.single_image_loader.infer_preprocess": [[112, 123], ["torch.augments.Compose", "torch.augments.Compose", "torch.augments.Normalize", "torch.augments.ToTensor2", "torch.augments.ToTensor", "torch.augments.ToTensor2", "torch.augments.ToTensor"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize"], ["", "def", "infer_preprocess", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "norm", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "", "return", "base_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.single_image_loader._padding_image": [[124, 134], ["print", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "_padding_image", "(", "self", ",", "image", ",", "target_size", "=", "(", "720", ",", "800", ")", ")", ":", "\n", "        ", "\"\"\"padding the image to target_size\"\"\"", "\n", "factor", "=", "8", "\n", "h", ",", "w", "=", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "2", "]", "\n", "H", ",", "W", "=", "(", "(", "h", "+", "factor", ")", "//", "factor", ")", "*", "factor", ",", "(", "(", "w", "+", "factor", ")", "//", "factor", ")", "*", "factor", "\n", "padh", "=", "H", "-", "h", "if", "h", "%", "factor", "!=", "0", "else", "0", "\n", "padw", "=", "W", "-", "w", "if", "w", "%", "factor", "!=", "0", "else", "0", "\n", "print", "(", "padh", ",", "padw", ")", "\n", "image", "=", "F", ".", "pad", "(", "image", ",", "(", "0", ",", "padw", ",", "0", ",", "padh", ")", ",", "'reflect'", ")", "\n", "return", "image", ",", "(", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.single_image_loader._padding_image2": [[135, 147], ["image.unsqueeze.unsqueeze.unsqueeze", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "images.squeeze.squeeze.squeeze", "print"], "methods", ["None"], ["", "def", "_padding_image2", "(", "self", ",", "image", ",", "target_size", "=", "(", "800", ",", "800", ")", ")", ":", "\n", "        ", "\"\"\"padding the image to target_size\"\"\"", "\n", "h", ",", "w", "=", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "2", "]", "\n", "padh", "=", "target_size", "[", "1", "]", "-", "h", "\n", "padw", "=", "target_size", "[", "0", "]", "-", "w", "\n", "\n", "image", "=", "image", ".", "unsqueeze", "(", "0", ")", "\n", "images", "=", "F", ".", "pad", "(", "image", ",", "(", "0", ",", "padh", ",", "0", ",", "padw", ")", ",", "padding_mode", "=", "'reflect'", ")", "\n", "images", "=", "images", ".", "squeeze", "(", "0", ")", "\n", "\n", "print", "(", "images", ".", "shape", ")", "\n", "return", "images", ",", "h", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.single_image_loader._load_image": [[149, 187], ["PIL.Image.open().convert", "cv2.imread", "cv2.cvtColor", "PIL.Image.fromarray", "PIL.Image.open", "cv2.rotate", "PIL.Image.fromarray", "io.BytesIO", "cv2.rotate", "PIL.Image.fromarray", "urllib.request.urlopen().read", "cv2.rotate", "PIL.Image.fromarray", "cv2.flip", "PIL.Image.fromarray", "urllib.request.urlopen", "cv2.flip", "PIL.Image.fromarray", "cv2.cvtColor", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "img_path", ",", "num_retry", "=", "20", ")", ":", "\n", "# for _ in range(num_retry):", "\n", "#     try:", "\n", "        ", "if", "img_path", "[", ":", "4", "]", "==", "'http'", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "BytesIO", "(", "urllib", ".", "request", ".", "urlopen", "(", "img_path", ")", ".", "read", "(", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# img = np.asarray(img)", "\n", "", "else", ":", "\n", "            ", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "-", "1", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"src\"", ":", "\n", "                ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"rot_90\"", ":", "\n", "                ", "img_rot_90", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_90_CLOCKWISE", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_rot_90", ")", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"rot_180\"", ":", "\n", "                ", "img_rot_180", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_180", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_rot_180", ")", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"rot_270\"", ":", "\n", "                ", "img_rot_270", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_90_COUNTERCLOCKWISE", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_rot_270", ")", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"flip_h\"", ":", "\n", "                ", "img_flip_h", "=", "cv2", ".", "flip", "(", "img", ",", "1", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_flip_h", ")", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"flip_v\"", ":", "\n", "                ", "img_flip_v", "=", "cv2", ".", "flip", "(", "img", ",", "0", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_flip_v", ")", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"bgr\"", ":", "\n", "                ", "img_bgr", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_bgr", ")", "\n", "\n", "#         break", "\n", "#     except Exception as e:", "\n", "#         time.sleep(5)", "\n", "#         print(f'Open image {img_path} failed, try again... resean is {e}')", "\n", "# else:", "\n", "#     raise Exception(f'Open image: {img_path} failed!')", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.single_image_loader.__len__": [[188, 190], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.single_image_loader.__getitem__": [[191, 206], ["inference_ddp.single_image_loader._load_image", "inference_ddp.single_image_loader.base_transforms"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._load_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "lr_img_path", "=", "self", ".", "file_list", "[", "index", "]", "[", "\"image_path\"", "]", "\n", "lr_image_key", "=", "self", ".", "file_list", "[", "index", "]", "[", "\"image_key\"", "]", "\n", "\n", "lr_img", "=", "self", ".", "_load_image", "(", "lr_img_path", ")", "\n", "\n", "if", "self", ".", "base_transforms", "is", "not", "None", ":", "\n", "            ", "lr_img", ",", "lr_img", "=", "self", ".", "base_transforms", "(", "lr_img", ",", "lr_img", ")", "\n", "\n", "# if self.dataset == \"realblur\":", "\n", "#     lr_img, h, w = self._padding_image2(lr_img)", "\n", "#     # print(lr_img.shape)", "\n", "#     return lr_image_key, lr_img, h, w", "\n", "# else:", "\n", "", "return", "lr_image_key", ",", "lr_img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.setup_seed": [[73, 80], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "setup_seed", "(", "seed", "=", "100", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.translate_state_dict": [[82, 90], ["state_dict.items"], "function", ["None"], ["", "def", "translate_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'module'", "in", "key", ":", "\n", "            ", "new_state_dict", "[", "key", "[", "7", ":", "]", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "new_state_dict", "[", "key", "]", "=", "value", "\n", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.load_ckpt": [[208, 212], ["model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "load_ckpt", "(", "model", ",", "weights", ")", ":", "\n", "    ", "state_dict", "=", "torch", ".", "load", "(", "weights", ",", "map_location", "=", "\"cpu\"", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.save_images": [[214, 256], ["output_images.cpu().permute().clamp_().numpy.cpu().permute().clamp_().numpy", "range", "output_images.cpu().permute().clamp_().numpy.cpu().permute().clamp_", "data.augments.DeNormalize", "data.augments.DeNormalize.", "output_img.round().astype.round().astype", "cv2.cvtColor", "cv2.imwrite", "os.path.join", "cv2.rotate", "imageio.imwrite", "output_images.cpu().permute().clamp_().numpy.cpu().permute", "output_img.round().astype.round", "output_key.replace", "int", "os.path.join", "cv2.rotate", "imageio.imwrite", "output_key.replace", "os.path.join", "cv2.rotate", "imageio.imwrite", "output_images.cpu().permute().clamp_().numpy.cpu", "output_key.replace", "os.path.join", "cv2.flip", "imageio.imwrite", "output_key.replace", "os.path.join", "cv2.flip", "imageio.imwrite", "output_key.replace", "os.path.join", "cv2.cvtColor", "imageio.imwrite", "output_key.replace", "os.path.join", "output_key.replace"], "function", ["None"], ["", "def", "save_images", "(", "cfg", ",", "output_images", ",", "output_images_keys", ")", ":", "\n", "    ", "output_images", "=", "output_images", ".", "cpu", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "clamp_", "(", "0", ",", "255", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "output_images", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "output_img", "=", "output_images", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "output_key", "=", "output_images_keys", "[", "i", "]", "\n", "# if \"val\" not in output_key:", "\n", "# output_key = 'val_' + output_key.split('/')[0] + '_' + output_key.split('/')[1]", "\n", "\n", "if", "cfg", ".", "INPUT", ".", "NORM", ":", "\n", "            ", "denormalize", "=", "DeNormalize", "(", "cfg", ".", "INPUT", ".", "MEAN", ",", "cfg", ".", "INPUT", ".", "STD", ")", "\n", "output_img", "=", "denormalize", "(", "output_img", ")", "\n", "\n", "", "if", "cfg", ".", "INPUT", ".", "RANGE", "==", "255", ":", "\n", "            ", "output_img", "=", "output_img", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"src\"", ":", "\n", "# start_time = time.time()", "\n", "# imageio.imwrite(os.path.join(cfg.SAVE.SR_IMAGES, output_key.replace('.jpg', '.png')), output_img)", "\n", "# print(\"image_io wastet time: \", time.time() - start_time)", "\n", "# start_time = time.time()", "\n", "            ", "image", "=", "cv2", ".", "cvtColor", "(", "output_img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "SAVE", ".", "SR_IMAGES", ",", "output_key", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ",", "[", "int", "(", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ")", ",", "0", "]", ")", "\n", "# imageio.imwrite(os.path.join(cfg.SAVE.SR_IMAGES, output_key.replace('.jpg', '.png')), output_img)", "\n", "# print(\"cv2 waste time: \", time.time() - start_time)", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"rot_90\"", ":", "\n", "            ", "image", "=", "cv2", ".", "rotate", "(", "output_img", ",", "cv2", ".", "ROTATE_90_COUNTERCLOCKWISE", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "SAVE", ".", "SR_IMAGES", ",", "output_key", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"rot_180\"", ":", "\n", "            ", "image", "=", "cv2", ".", "rotate", "(", "output_img", ",", "cv2", ".", "ROTATE_180", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "SAVE", ".", "SR_IMAGES", ",", "output_key", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"rot_270\"", ":", "\n", "            ", "image", "=", "cv2", ".", "rotate", "(", "output_img", ",", "cv2", ".", "ROTATE_90_CLOCKWISE", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "SAVE", ".", "SR_IMAGES", ",", "output_key", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"flip_h\"", ":", "\n", "            ", "image", "=", "cv2", ".", "flip", "(", "output_img", ",", "1", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "SAVE", ".", "SR_IMAGES", ",", "output_key", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"flip_v\"", ":", "\n", "            ", "image", "=", "cv2", ".", "flip", "(", "output_img", ",", "0", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "SAVE", ".", "SR_IMAGES", ",", "output_key", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"bgr\"", ":", "\n", "            ", "image", "=", "cv2", ".", "cvtColor", "(", "output_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "SAVE", ".", "SR_IMAGES", ",", "output_key", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.save_images2": [[258, 281], ["output_images[].cpu().permute().clamp_().numpy", "output_images[].cpu().permute().clamp_().numpy", "range", "output_images[].cpu().permute().clamp_", "output_images[].cpu().permute().clamp_", "data.augments.DeNormalize", "data.augments.DeNormalize.", "cv2.cvtColor.round().astype", "cv2.cvtColor", "cv2.imwrite", "os.path.join", "output_images[].cpu().permute", "output_images[].cpu().permute", "cv2.cvtColor.round", "output_key.replace", "int", "output_images[].cpu", "output_images[].cpu"], "function", ["None"], ["", "", "", "def", "save_images2", "(", "cfg", ",", "output_images", ",", "output_images_keys", ")", ":", "\n", "    ", "output_images1", "=", "output_images", "[", "0", "]", ".", "cpu", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "clamp_", "(", "0", ",", "255", ")", ".", "numpy", "(", ")", "\n", "output_images2", "=", "output_images", "[", "1", "]", ".", "cpu", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "clamp_", "(", "0", ",", "255", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "output_images1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "output_img1", "=", "output_images1", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "output_img2", "=", "output_images2", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "output_key", "=", "output_images_keys", "[", "i", "]", "\n", "\n", "if", "cfg", ".", "INPUT", ".", "NORM", ":", "\n", "            ", "denormalize", "=", "DeNormalize", "(", "cfg", ".", "INPUT", ".", "MEAN", ",", "cfg", ".", "INPUT", ".", "STD", ")", "\n", "output_img", "=", "denormalize", "(", "output_img", ")", "\n", "\n", "# if cfg.INPUT.RANGE == 255:", "\n", "#     output_img1 = output_img1.round().astype(np.uint8)", "\n", "#     output_img2 = output_img2.round().astype(np.uint8)", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "TTA", "==", "\"src\"", ":", "\n", "# image = cv2.cvtColor(output_img1, cv2.COLOR_RGB2BGR)", "\n", "# image1 = cv2.cvtColor(output_img2, cv2.COLOR_RGB2BGR)", "\n", "            ", "image", "=", "(", "output_img1", "+", "output_img2", ")", "/", "2", "\n", "image", "=", "image", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "SAVE", ".", "SR_IMAGES", ",", "output_key", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ",", "[", "int", "(", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ")", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_ddp.main_worker": [[283, 433], ["print", "inference_ddp.load_ckpt", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.eval", "inference_ddp.single_image_loader", "torch.utils.data.DataLoader", "enumerate", "config.Config.Config", "int", "print", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.NTIRE2021_Deblur.CARN.CARN.Net", "print", "print", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.cuda", "torch.nn.parallel.DistributedDataParallel", "print", "torch.utils.data.distributed.DistributedSampler", "len", "torch.nn.functional.pad.to", "inference_ddp.save_images", "model.NTIRE2020_Deblur_top.uniA.AtrousNet", "len", "len", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "print", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1.AtrousNet", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.", "time.time", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_Upsample_Deep.AtrousNet_billinear_Wide", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_deblur_remix.AtrousNet_wavlet_remix", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.load_ckpt", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.predict.save_images"], ["", "", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "cfg", "=", "Config", "(", "args", ".", "config_file", ")", "(", ")", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "        ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "", "print", "(", "'rank: {} / {}'", ".", "format", "(", "args", ".", "rank", ",", "args", ".", "world_size", ")", ")", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "# model", "\n", "", "if", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"CARN\"", ":", "\n", "        ", "model", "=", "CARNNet", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet\"", ":", "\n", "        ", "model", "=", "AtrousNet", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNetElu\"", ":", "\n", "        ", "model", "=", "AtrousNetElu", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNetEluUpWide\"", ":", "\n", "        ", "model", "=", "AtrousNetEluUpWide", "(", "3", ",", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", "\n", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNetEluUpWideDlidation\"", ":", "\n", "        ", "model", "=", "AtrousNetEluUpWideDlidation", "(", "3", ",", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", "\n", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNetEluUpWideWaveletRemix\"", ":", "\n", "        ", "model", "=", "AtrousNet_wavlet_remix", "(", "3", ",", "3", ")", "\n", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_billinear_Wide_dilated_srcnn\"", ":", "\n", "        ", "model", "=", "AtrousNet_billinear_Wide_dilated_srcnn", "(", "3", ",", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", "\n", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_SRCNN_tail\"", ":", "\n", "        ", "model", "=", "AtrousNet_SRCNN_tail", "(", "\n", "3", ",", "\n", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", ",", "\n", "efficientattention", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "EFFICIENT_ATTENTION", ",", "\n", "gcattention", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "GC_ATTENTION", "\n", ")", "\n", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_SRCNN_tail_no_upsample_elu\"", ":", "\n", "        ", "model", "=", "AtrousNet_SRCNN_tail_no_upsample_elu", "(", "\n", "3", ",", "\n", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", "\n", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_dilation_effiattention\"", ":", "\n", "        ", "model", "=", "AtrousNet_billinear_EfficientAttention", "(", "\n", "3", ",", "\n", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", "\n", ")", "\n", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_dilation_gc\"", ":", "\n", "        ", "model", "=", "AtrousNet_billinear_ContextBlock", "(", "\n", "3", ",", "\n", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", "\n", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_billinear_Wide_dilated_srcnn_output\"", ":", "\n", "        ", "model", "=", "AtrousNet_billinear_Wide_dilated_srcnn_output", "(", "\n", "3", ",", "\n", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", ",", "\n", "srcnn_add", "=", "cfg", ".", "MODEL", ".", "SRCNN", ".", "ADD", ",", "\n", "srcnn_smooth", "=", "cfg", ".", "MODEL", ".", "SRCNN", ".", "SMOOTH", "\n", ")", "\n", "\n", "", "model", "=", "load_ckpt", "(", "model", ",", "cfg", ".", "MODEL", ".", "WEIGHTS", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "\"================{}=============\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", ")", ")", "\n", "print", "(", "model", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "model", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "device", "=", "model", ".", "device", "\n", "\n", "dataset", "=", "single_image_loader", "(", "cfg", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "\"Validation dataset lengh: \"", ",", "len", "(", "dataset", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "sampler", "=", "DistributedSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "None", "\n", "\n", "# dataloader", "\n", "", "dataloader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ",", "\n", "drop_last", "=", "False", "\n", ")", "\n", "total_length", "=", "len", "(", "dataloader", ")", "//", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "\n", "\n", "for", "iter_id", ",", "batch_data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "len", "(", "batch_data", ")", ">", "2", ":", "\n", "            ", "lr_key", ",", "lr_images", ",", "img_h", ",", "img_w", "=", "batch_data", "[", "0", "]", ",", "batch_data", "[", "1", "]", ",", "batch_data", "[", "2", "]", ",", "batch_data", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "lr_key", ",", "lr_images", "=", "batch_data", "[", "0", "]", ",", "batch_data", "[", "1", "]", "\n", "", "lr_images", "=", "lr_images", ".", "to", "(", "device", ")", "\n", "\n", "# realblur", "\n", "if", "True", ":", "\n", "            ", "factor", "=", "8", "\n", "h", ",", "w", "=", "lr_images", ".", "shape", "[", "2", "]", ",", "lr_images", ".", "shape", "[", "3", "]", "\n", "H", ",", "W", "=", "(", "(", "h", "+", "factor", ")", "//", "factor", ")", "*", "factor", ",", "(", "(", "w", "+", "factor", ")", "//", "factor", ")", "*", "factor", "\n", "padh", "=", "H", "-", "h", "if", "h", "%", "factor", "!=", "0", "else", "0", "\n", "padw", "=", "W", "-", "w", "if", "w", "%", "factor", "!=", "0", "else", "0", "\n", "lr_images", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "lr_images", ",", "(", "0", ",", "padw", ",", "0", ",", "padh", ")", ",", "'reflect'", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_billinear_Wide_dilated_srcnn_output\"", ":", "\n", "                ", "sr_images", ",", "sr_images2", "=", "model", "(", "lr_images", ")", "\n", "", "else", ":", "\n", "                ", "sr_images", "=", "model", "(", "lr_images", ")", "\n", "# used for realblur", "\n", "if", "h", "is", "not", "None", ":", "\n", "                    ", "sr_images", "=", "sr_images", "[", ":", ",", ":", ",", ":", "h", ",", ":", "w", "]", "\n", "\n", "", "", "batch_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "", "save_images", "(", "cfg", ",", "sr_images", ",", "lr_key", ")", "\n", "# save_images2(cfg, [sr_images, sr_images2],lr_key)", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "f\"Process the [{iter_id}/{total_length}], batch time waste {batch_time} !!!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.predict.single_image_loader.__init__": [[44, 54], ["torch.utils.data.dataset.Dataset.__init__", "predict.single_image_loader.infer_preprocess", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "predict.single_image_loader._get_image_list", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader.infer_preprocess", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader._get_image_list"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "mode", "=", "\"jpg2png\"", ")", ":", "\n", "        ", "super", "(", "single_image_loader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "self", ".", "base_transforms", "=", "self", ".", "infer_preprocess", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\n", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "image_folder", "=", "self", ".", "args", ".", "test_data", "\n", "self", ".", "file_list", "=", "self", ".", "_get_image_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.predict.single_image_loader._get_image_list": [[55, 59], ["os.path.join", "os.listdir"], "methods", ["None"], ["", "def", "_get_image_list", "(", "self", ")", ":", "\n", "        ", "image_path_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "image_folder", ",", "x", ")", "\n", "for", "x", "in", "os", ".", "listdir", "(", "self", ".", "image_folder", ")", "]", "\n", "return", "image_path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.predict.single_image_loader.infer_preprocess": [[60, 63], ["torch.augments.ToTensor2"], "methods", ["None"], ["", "def", "infer_preprocess", "(", "self", ")", ":", "\n", "        ", "base_transforms", "=", "ToTensor2", "(", ")", "\n", "return", "base_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.predict.single_image_loader._load_image": [[64, 90], ["cv2.imread", "cv2.cvtColor", "PIL.Image.fromarray", "cv2.rotate", "PIL.Image.fromarray", "cv2.rotate", "PIL.Image.fromarray", "cv2.rotate", "PIL.Image.fromarray", "cv2.flip", "PIL.Image.fromarray", "cv2.flip", "PIL.Image.fromarray", "cv2.cvtColor", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "img_path", ",", "num_retry", "=", "20", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "-", "1", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "if", "self", ".", "args", ".", "TTA", "==", "\"src\"", ":", "\n", "            ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "", "elif", "self", ".", "args", ".", "TTA", "==", "\"rot_90\"", ":", "\n", "            ", "img_rot_90", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_90_CLOCKWISE", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_rot_90", ")", "\n", "", "elif", "self", ".", "args", ".", "TTA", "==", "\"rot_180\"", ":", "\n", "            ", "img_rot_180", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_180", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_rot_180", ")", "\n", "", "elif", "self", ".", "args", ".", "TTA", "==", "\"rot_270\"", ":", "\n", "            ", "img_rot_270", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_90_COUNTERCLOCKWISE", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_rot_270", ")", "\n", "", "elif", "self", ".", "args", ".", "TTA", "==", "\"flip_h\"", ":", "\n", "            ", "img_flip_h", "=", "cv2", ".", "flip", "(", "img", ",", "1", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_flip_h", ")", "\n", "", "elif", "self", ".", "args", ".", "TTA", "==", "\"flip_v\"", ":", "\n", "            ", "img_flip_v", "=", "cv2", ".", "flip", "(", "img", ",", "0", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_flip_v", ")", "\n", "", "elif", "self", ".", "args", ".", "TTA", "==", "\"bgr\"", ":", "\n", "            ", "img_bgr", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_bgr", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.predict.single_image_loader.__len__": [[91, 93], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.predict.single_image_loader.__getitem__": [[94, 101], ["predict.single_image_loader._load_image", "predict.single_image_loader.base_transforms", "lr_img_path.split"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._load_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "lr_img_path", "=", "self", ".", "file_list", "[", "index", "]", "\n", "lr_img", "=", "self", ".", "_load_image", "(", "lr_img_path", ")", "\n", "lr_image_key", "=", "lr_img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "# if self.base_transforms:", "\n", "lr_img", ",", "_", "=", "self", ".", "base_transforms", "(", "lr_img", ",", "lr_img", ")", "\n", "return", "lr_image_key", ",", "lr_img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.predict.translate_state_dict": [[33, 41], ["state_dict.items"], "function", ["None"], ["def", "translate_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'module'", "in", "key", ":", "\n", "            ", "new_state_dict", "[", "key", "[", "7", ":", "]", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "new_state_dict", "[", "key", "]", "=", "value", "\n", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.predict.load_ckpt": [[103, 107], ["model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "load_ckpt", "(", "model", ",", "weights", ")", ":", "\n", "    ", "state_dict", "=", "torch", ".", "load", "(", "weights", ",", "map_location", "=", "\"cpu\"", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.predict.save_images": [[109, 146], ["output_images.cpu().permute().clamp_().numpy.cpu().permute().clamp_().numpy", "range", "output_img.round().astype.round().astype", "output_images.cpu().permute().clamp_().numpy.cpu().permute().clamp_", "cv2.cvtColor", "cv2.imwrite", "output_img.round().astype.round", "os.path.join", "cv2.rotate", "cv2.imwrite", "output_images.cpu().permute().clamp_().numpy.cpu().permute", "output_key.replace", "int", "os.path.join", "cv2.rotate", "cv2.imwrite", "output_key.replace", "int", "os.path.join", "cv2.rotate", "cv2.imwrite", "output_images.cpu().permute().clamp_().numpy.cpu", "output_key.replace", "int", "os.path.join", "cv2.flip", "cv2.imwrite", "output_key.replace", "int", "os.path.join", "cv2.flip", "cv2.imwrite", "output_key.replace", "int", "os.path.join", "cv2.cvtColor", "cv2.imwrite", "output_key.replace", "int", "os.path.join", "output_key.replace", "int"], "function", ["None"], ["", "def", "save_images", "(", "args", ",", "output_images", ",", "output_images_keys", ")", ":", "\n", "    ", "output_images", "=", "output_images", ".", "cpu", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "clamp_", "(", "0", ",", "255", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "output_images", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "output_img", "=", "output_images", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "output_key", "=", "output_images_keys", "[", "i", "]", "\n", "\n", "output_img", "=", "output_img", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "args", ".", "TTA", "==", "\"src\"", ":", "\n", "            ", "image", "=", "cv2", ".", "cvtColor", "(", "output_img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_images", ",", "output_key", ".", "replace", "(", "\n", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ",", "[", "int", "(", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ")", ",", "0", "]", ")", "\n", "\n", "", "elif", "args", ".", "TTA", "==", "\"rot_90\"", ":", "\n", "            ", "image", "=", "cv2", ".", "rotate", "(", "output_img", ",", "cv2", ".", "ROTATE_90_COUNTERCLOCKWISE", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_images", ",", "output_key", ".", "replace", "(", "\n", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ",", "[", "int", "(", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ")", ",", "0", "]", ")", "\n", "", "elif", "args", ".", "TTA", "==", "\"rot_180\"", ":", "\n", "            ", "image", "=", "cv2", ".", "rotate", "(", "output_img", ",", "cv2", ".", "ROTATE_180", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_images", ",", "output_key", ".", "replace", "(", "\n", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ",", "[", "int", "(", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ")", ",", "0", "]", ")", "\n", "", "elif", "args", ".", "TTA", "==", "\"rot_270\"", ":", "\n", "            ", "image", "=", "cv2", ".", "rotate", "(", "output_img", ",", "cv2", ".", "ROTATE_90_CLOCKWISE", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_images", ",", "output_key", ".", "replace", "(", "\n", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ",", "[", "int", "(", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ")", ",", "0", "]", ")", "\n", "", "elif", "args", ".", "TTA", "==", "\"flip_h\"", ":", "\n", "            ", "image", "=", "cv2", ".", "flip", "(", "output_img", ",", "1", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_images", ",", "output_key", ".", "replace", "(", "\n", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ",", "[", "int", "(", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ")", ",", "0", "]", ")", "\n", "", "elif", "args", ".", "TTA", "==", "\"flip_v\"", ":", "\n", "            ", "image", "=", "cv2", ".", "flip", "(", "output_img", ",", "0", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_images", ",", "output_key", ".", "replace", "(", "\n", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ",", "[", "int", "(", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ")", ",", "0", "]", ")", "\n", "", "elif", "args", ".", "TTA", "==", "\"bgr\"", ":", "\n", "            ", "image", "=", "cv2", ".", "cvtColor", "(", "output_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_images", ",", "output_key", ".", "replace", "(", "\n", "'.jpg'", ",", "'.png'", ")", ")", ",", "image", ",", "[", "int", "(", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ")", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.evaluate_reblur_office.image_align": [[22, 66], ["numpy.ones_like", "numpy.eye", "cv2.findTransformECC", "cv2.warpPerspective", "cv2.warpPerspective", "cv2.cvtColor", "cv2.cvtColor", "numpy.ones_like", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "image_align", "(", "deblurred", ",", "gt", ")", ":", "\n", "# this function is based on kohler evaluation code", "\n", "  ", "z", "=", "deblurred", "\n", "c", "=", "np", ".", "ones_like", "(", "z", ")", "\n", "x", "=", "gt", "\n", "\n", "zs", "=", "(", "np", ".", "sum", "(", "x", "*", "z", ")", "/", "np", ".", "sum", "(", "z", "*", "z", ")", ")", "*", "z", "# simple intensity matching", "\n", "\n", "warp_mode", "=", "cv2", ".", "MOTION_HOMOGRAPHY", "\n", "warp_matrix", "=", "np", ".", "eye", "(", "3", ",", "3", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Specify the number of iterations.", "\n", "number_of_iterations", "=", "100", "\n", "\n", "termination_eps", "=", "0", "\n", "\n", "criteria", "=", "(", "cv2", ".", "TERM_CRITERIA_EPS", "|", "cv2", ".", "TERM_CRITERIA_COUNT", ",", "\n", "number_of_iterations", ",", "termination_eps", ")", "\n", "\n", "# Run the ECC algorithm. The results are stored in warp_matrix.", "\n", "(", "cc", ",", "warp_matrix", ")", "=", "cv2", ".", "findTransformECC", "(", "cv2", ".", "cvtColor", "(", "x", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", ",", "cv2", ".", "cvtColor", "(", "zs", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", ",", "warp_matrix", ",", "warp_mode", ",", "criteria", ",", "inputMask", "=", "None", ",", "gaussFiltSize", "=", "5", ")", "\n", "\n", "target_shape", "=", "x", ".", "shape", "\n", "shift", "=", "warp_matrix", "\n", "\n", "zr", "=", "cv2", ".", "warpPerspective", "(", "\n", "zs", ",", "\n", "warp_matrix", ",", "\n", "(", "target_shape", "[", "1", "]", ",", "target_shape", "[", "0", "]", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_CUBIC", "+", "cv2", ".", "WARP_INVERSE_MAP", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_REFLECT", ")", "\n", "\n", "cr", "=", "cv2", ".", "warpPerspective", "(", "\n", "np", ".", "ones_like", "(", "zs", ",", "dtype", "=", "'float32'", ")", ",", "\n", "warp_matrix", ",", "\n", "(", "target_shape", "[", "1", "]", ",", "target_shape", "[", "0", "]", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_NEAREST", "+", "cv2", ".", "WARP_INVERSE_MAP", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "borderValue", "=", "0", ")", "\n", "\n", "zr", "=", "zr", "*", "cr", "\n", "xr", "=", "x", "*", "cr", "\n", "\n", "return", "zr", ",", "xr", ",", "cr", ",", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.evaluate_reblur_office.compute_psnr": [[68, 72], ["numpy.sum", "numpy.sum", "numpy.log10"], "function", ["None"], ["", "def", "compute_psnr", "(", "image_true", ",", "image_test", ",", "image_mask", ",", "data_range", "=", "None", ")", ":", "\n", "# this function is based on skimage.metrics.peak_signal_noise_ratio", "\n", "  ", "err", "=", "np", ".", "sum", "(", "(", "image_true", "-", "image_test", ")", "**", "2", ",", "dtype", "=", "np", ".", "float64", ")", "/", "np", ".", "sum", "(", "image_mask", ")", "\n", "return", "10", "*", "np", ".", "log10", "(", "(", "data_range", "**", "2", ")", "/", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.evaluate_reblur_office.im2uint8": [[74, 78], ["image.astype.astype", "numpy.clip"], "function", ["None"], ["", "def", "im2uint8", "(", "image", ")", ":", "\n", "  ", "image", "=", "np", ".", "clip", "(", "image", "*", "255", ",", "0", ",", "255", ")", "+", "0.5", "# round color value", "\n", "image", "=", "image", ".", "astype", "(", "'uint8'", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.evaluate_reblur_office.evaluation_folder": [[80, 170], ["print", "os.path.join", "glob.glob", "open", "enumerate", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "open.close", "os.path.exists", "os.mkdir", "os.path.join", "print", "img_name_split.split.split", "evaluate_reblur_office.image_align", "numpy.ones_like", "skimage.metrics.structural_similarity", "int", "numpy.mean", "print", "evaluate_reblur_office.compute_psnr", "evaluate_reblur_office.compute_psnr", "deblur_psnr_list.append", "deblur_ssim_list.append", "blur_psnr_list.append", "blur_ssim_list.append", "numpy.concatenate", "os.path.join", "os.path.join", "skimage.io.imsave", "skimage.io.imsave", "open.write", "os.path.join", "model.split", "img_path.split", "skimage.io.imread().astype", "skimage.io.imread().astype", "skimage.io.imread().astype", "np.mean.sum().sum", "crop_cr1.sum().sum", "evaluate_reblur_office.im2uint8", "evaluate_reblur_office.im2uint8", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "skimage.io.imread", "skimage.io.imread", "skimage.io.imread", "np.mean.sum", "crop_cr1.sum", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.None.eavlute_realblur.image_align", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.eavlute_realblur.compute_psnr", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.eavlute_realblur.compute_psnr", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.evaluate_reblur_office.im2uint8", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.evaluate_reblur_office.im2uint8"], ["", "def", "evaluation_folder", "(", "args_list", ")", ":", "\n", "  ", "model", ",", "gt_root", ",", "out_root", "=", "args_list", "\n", "print", "(", "model", ",", "gt_root", ",", "out_root", ")", "\n", "\n", "out_root", "=", "os", ".", "path", ".", "join", "(", "out_root", ",", "model", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_root", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "out_root", ")", "\n", "\n", "", "imgList", "=", "glob", ".", "glob", "(", "model", "+", "'/*.png'", ")", "\n", "\n", "cnt", "=", "0", "\n", "deblur_psnr_list", "=", "[", "]", "\n", "deblur_ssim_list", "=", "[", "]", "\n", "blur_psnr_list", "=", "[", "]", "\n", "blur_ssim_list", "=", "[", "]", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_root", ",", "'psnr.txt'", ")", ",", "'wt'", ")", "\n", "for", "j", ",", "img_path", "in", "enumerate", "(", "imgList", ")", ":", "\n", "    ", "print", "(", "img_path", ")", "\n", "if", "'fail'", "in", "img_path", "or", "'ker'", "in", "img_path", ":", "\n", "      ", "continue", "\n", "\n", "", "img_name_split", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "img_name_split", "=", "img_name_split", ".", "split", "(", "'_'", ")", "\n", "\n", "scene_name", "=", "img_name_split", "[", "0", "]", "\n", "\n", "if", "scene_name", "==", "'scene244'", ":", "\n", "      ", "scene_name", "=", "'scene244_reflect'", "\n", "\n", "", "img_name", "=", "img_name_split", "[", "-", "1", "]", "\n", "\n", "deblurred", "=", "io", ".", "imread", "(", "img_path", ")", ".", "astype", "(", "'float32'", ")", "/", "255", "\n", "blurred", "=", "io", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "gt_root", ",", "'input'", ",", "img_name", ")", ")", ".", "astype", "(", "'float32'", ")", "/", "255", "\n", "gt", "=", "io", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "gt_root", ",", "'target'", ",", "img_name", ")", ")", ".", "astype", "(", "'float32'", ")", "/", "255", "\n", "\n", "aligned_deblurred", ",", "aligned_xr1", ",", "cr1", ",", "shift", "=", "image_align", "(", "deblurred", ",", "gt", ")", "\n", "#aligned_blurred, aligned_xr2, cr2, shift = image_align(blurred, gt)", "\n", "\n", "aligned_blurred", "=", "blurred", "\n", "aligned_xr2", "=", "gt", "\n", "cr2", "=", "np", ".", "ones_like", "(", "blurred", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# it is recomended by nah et al.", "\n", "\n", "\n", "deblur_ssim_pre", ",", "deblur_ssim_map", "=", "structural_similarity", "(", "aligned_xr1", ",", "aligned_deblurred", ",", "multichannel", "=", "True", ",", "gaussian_weights", "=", "True", ",", "\n", "use_sample_covariance", "=", "False", ",", "data_range", "=", "1.0", ",", "full", "=", "True", ")", "\n", "deblur_ssim_map", "=", "deblur_ssim_map", "*", "cr1", "\n", "\n", "r", "=", "int", "(", "3.5", "*", "1.5", "+", "0.5", ")", "# radius as in ndimage", "\n", "win_size", "=", "2", "*", "r", "+", "1", "\n", "pad", "=", "(", "win_size", "-", "1", ")", "//", "2", "\n", "deblur_ssim", "=", "deblur_ssim_map", "[", "pad", ":", "-", "pad", ",", "pad", ":", "-", "pad", ",", ":", "]", "\n", "crop_cr1", "=", "cr1", "[", "pad", ":", "-", "pad", ",", "pad", ":", "-", "pad", ",", ":", "]", "\n", "deblur_ssim", "=", "deblur_ssim", ".", "sum", "(", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "0", ")", "/", "crop_cr1", ".", "sum", "(", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "deblur_ssim", "=", "np", ".", "mean", "(", "deblur_ssim", ")", "\n", "\n", "#blur_ssim = structural_similarity(aligned_xr2, aligned_blurred, multichannel=True, gaussian_weights=True,", "\n", "#                                  use_sample_covariance=False, data_range = 1.0, full=True)", "\n", "\n", "blur_ssim", "=", "0", "\n", "print", "(", "deblur_ssim", ",", "deblur_ssim_pre", ")", "\n", "\n", "# only compute mse on valid region", "\n", "deblur_psnr", "=", "compute_psnr", "(", "aligned_xr1", ",", "aligned_deblurred", ",", "cr1", ",", "data_range", "=", "1", ")", "\n", "blur_psnr", "=", "compute_psnr", "(", "aligned_xr2", ",", "aligned_blurred", ",", "cr2", ",", "data_range", "=", "1", ")", "\n", "\n", "deblur_psnr_list", ".", "append", "(", "deblur_psnr", ")", "\n", "deblur_ssim_list", ".", "append", "(", "deblur_ssim", ")", "\n", "blur_psnr_list", ".", "append", "(", "blur_psnr", ")", "\n", "blur_ssim_list", ".", "append", "(", "blur_ssim", ")", "\n", "\n", "vis_image", "=", "np", ".", "concatenate", "(", "[", "aligned_blurred", ",", "aligned_deblurred", ",", "aligned_xr1", "]", ",", "axis", "=", "1", ")", "\n", "\n", "deblur_out_name", "=", "os", ".", "path", ".", "join", "(", "out_root", ",", "'_'", ".", "join", "(", "img_name_split", ")", ")", "\n", "vis_img_out_name", "=", "'vis_%s_blur_%s_PSNR_%5.5f_%5.5f_SSIM_%5.5f_%5.5f.jpg'", "%", "(", "scene_name", ",", "img_name", "[", ":", "-", "4", "]", ",", "blur_psnr", ",", "deblur_psnr", ",", "blur_ssim", ",", "deblur_ssim", ")", "\n", "vis_img_out_name", "=", "os", ".", "path", ".", "join", "(", "out_root", ",", "vis_img_out_name", ")", "\n", "io", ".", "imsave", "(", "deblur_out_name", ",", "im2uint8", "(", "deblurred", ")", ")", "\n", "io", ".", "imsave", "(", "vis_img_out_name", ",", "im2uint8", "(", "vis_image", ")", ")", "\n", "f", ".", "write", "(", "\"%s %5.5f %5.5f\\n\"", "%", "(", "'_'", ".", "join", "(", "img_name_split", ")", ",", "deblur_psnr", ",", "deblur_ssim", ")", ")", "\n", "cnt", "+=", "1", "\n", "\n", "", "f2", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_root", ",", "'result.txt'", ")", ",", "'wt'", ")", "\n", "f2", ".", "write", "(", "\"deblur_psnr : %4.4f \\n\"", "%", "np", ".", "mean", "(", "deblur_psnr_list", ")", ")", "\n", "f2", ".", "write", "(", "\"deblur_ssim : %4.4f \\n\"", "%", "np", ".", "mean", "(", "deblur_ssim_list", ")", ")", "\n", "f2", ".", "write", "(", "\"blur_psnr : %4.4f \\n\"", "%", "np", ".", "mean", "(", "blur_psnr_list", ")", ")", "\n", "f2", ".", "write", "(", "\"blur_ssim : %4.4f \\n\"", "%", "np", ".", "mean", "(", "blur_ssim_list", ")", ")", "\n", "f2", ".", "write", "(", "\"cnt : %4.4f \\n\"", "%", "cnt", ")", "\n", "f2", ".", "close", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference.single_image_loader.__init__": [[49, 62], ["torch.utils.data.dataset.Dataset.__init__", "inference.single_image_loader.infer_preprocess", "torch.device", "inference.single_image_loader._get_image_list", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader.infer_preprocess", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader._get_image_list"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "rec_path", ",", "mode", "=", "\"jpg2png\"", ")", ":", "\n", "        ", "super", "(", "single_image_loader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "range", "=", "self", ".", "cfg", ".", "INPUT", ".", "RANGE", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "lr_path", "=", "rec_path", "\n", "\n", "self", ".", "mean", "=", "self", ".", "cfg", ".", "INPUT", ".", "MEAN", "\n", "self", ".", "std", "=", "self", ".", "cfg", ".", "INPUT", ".", "STD", "\n", "self", ".", "norm", "=", "self", ".", "cfg", ".", "INPUT", ".", "NORM", "\n", "self", ".", "base_transforms", "=", "self", ".", "infer_preprocess", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "file_list", "=", "self", ".", "_get_image_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference.single_image_loader.find_all_with_ext": [[63, 84], ["os.walk", "isinstance", "os.path.join().replace", "os.path.splitext", "result.append", "os.path.join"], "methods", ["None"], ["", "def", "find_all_with_ext", "(", "self", ",", "path", ",", "ext", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "ext", ",", "list", ")", ":", "\n", "            ", "filter", "=", "[", "ext", "]", "\n", "", "else", ":", "\n", "            ", "filter", "=", "ext", "\n", "\n", "", "result", "=", "[", "]", "\n", "\n", "for", "maindir", ",", "subdir", ",", "file_name_list", "in", "os", ".", "walk", "(", "path", ")", ":", "\n", "#         print(\"1:\",maindir) #\u5f53\u524d\u4e3b\u76ee\u5f55", "\n", "#         print(\"2:\",subdir) #\u5f53\u524d\u4e3b\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u76ee\u5f55", "\n", "#         print(\"3:\",file_name_list)  #\u5f53\u524d\u4e3b\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6", "\n", "\n", "            ", "for", "filename", "in", "file_name_list", ":", "\n", "                ", "apath", "=", "os", ".", "path", ".", "join", "(", "maindir", ",", "filename", ")", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "ext", "=", "os", ".", "path", ".", "splitext", "(", "apath", ")", "[", "1", "]", "\n", "\n", "if", "ext", "in", "filter", ":", "\n", "                    ", "result", ".", "append", "(", "apath", ")", "\n", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference.single_image_loader._get_image_list": [[85, 90], ["inference.single_image_loader.find_all_with_ext", "inference.single_image_loader.find_all_with_ext"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.find_all_with_ext", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.find_all_with_ext"], ["", "def", "_get_image_list", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'jpg2png'", ":", "\n", "            ", "return", "self", ".", "find_all_with_ext", "(", "self", ".", "lr_path", ",", "ext", "=", "'.jpg'", ")", "\n", "", "elif", "self", ".", "mode", "==", "'png2png'", ":", "\n", "            ", "return", "self", ".", "find_all_with_ext", "(", "self", ".", "lr_path", ",", "ext", "=", "'.jpg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference.single_image_loader.infer_preprocess": [[91, 102], ["data.augments.Compose", "data.augments.Compose", "data.augments.Normalize", "data.augments.ToTensor2", "data.augments.ToTensor", "data.augments.ToTensor2", "data.augments.ToTensor"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize"], ["", "", "def", "infer_preprocess", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "norm", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "", "return", "base_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference.single_image_loader._load_image": [[103, 121], ["range", "Exception", "PIL.Image.open().convert", "cv2.imread", "cv2.cvtColor", "PIL.Image.fromarray", "time.sleep", "print", "PIL.Image.open", "BytesIO", "urllib.request.urlopen().read", "urllib.request.urlopen"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "img_path", ",", "num_retry", "=", "20", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_retry", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "img_path", "[", ":", "4", "]", "==", "'http'", ":", "\n", "                    ", "img", "=", "Image", ".", "open", "(", "BytesIO", "(", "urllib", ".", "request", ".", "urlopen", "(", "img_path", ")", ".", "read", "(", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# img = np.asarray(img)", "\n", "", "else", ":", "\n", "                    ", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "-", "1", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "", "break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "time", ".", "sleep", "(", "5", ")", "\n", "print", "(", "f'Open image {img_path} failed, try again... resean is {e}'", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Open image: {img_path} failed!'", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference.single_image_loader.__len__": [[122, 124], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference.single_image_loader.__getitem__": [[125, 132], ["inference.single_image_loader._load_image", "inference.single_image_loader.base_transforms"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._load_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "lr_img_path", "=", "self", ".", "file_list", "[", "index", "]", "\n", "lr_img", "=", "self", ".", "_load_image", "(", "lr_img_path", ")", "\n", "\n", "if", "self", ".", "base_transforms", "is", "not", "None", ":", "\n", "            ", "lr_img", ",", "lr_img", "=", "self", ".", "base_transforms", "(", "lr_img", ",", "lr_img", ")", "\n", "", "return", "lr_img_path", ",", "lr_img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference.setup_seed": [[29, 36], ["torch.manual_seed", "torch.cuda.manual_seed_all", "np.random.seed", "random.seed"], "function", ["None"], ["def", "setup_seed", "(", "seed", "=", "100", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference.translate_state_dict": [[38, 46], ["state_dict.items"], "function", ["None"], ["", "def", "translate_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'module'", "in", "key", ":", "\n", "            ", "new_state_dict", "[", "key", "[", "7", ":", "]", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "new_state_dict", "[", "key", "]", "=", "value", "\n", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference.model_initializer": [[134, 144], ["model.NTIRE2020_Deblur_top.uniA.AtrousNet", "torch.load", "model.to.load_state_dict", "model.to.eval", "model.to.to"], "function", ["None"], ["", "", "def", "model_initializer", "(", "opt", ")", ":", "\n", "# Non-distributed GPU Parallel", "\n", "    ", "device", "=", "opt", "[", "'device'", "]", "\n", "model_arch", "=", "\"{}-{}\"", ".", "format", "(", "\"SR\"", ",", "\"AtrousNet\"", ")", "\n", "model", "=", "AtrousNet", "(", "in_channels", "=", "3", ",", "out_channels", "=", "3", ")", "\n", "model_weights", "=", "torch", ".", "load", "(", "opt", "[", "'model_pth'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "model_weights", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference.inference": [[145, 176], ["inference.model_initializer", "inference.single_image_loader", "torch.utils.data.DataLoader", "enumerate", "tqdm.tqdm", "data[].to", "os.path.split", "torch.no_grad", "model_initializer.", "output[].cpu", "data.augments.DeNormalize", "data.augments.DeNormalize.", "output_img.permute().cpu().numpy().round().astype.clamp_", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy().round().astype", "imageio.imwrite", "output_img.permute().cpu().numpy().round().astype.clamp_", "imageio.imwrite", "os.path.join", "os.path.join", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy().round", "file_name.replace", "file_name.replace", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy", "output_img.permute().cpu().numpy().round().astype.permute().cpu", "output_img.permute().cpu().numpy().round().astype.permute().cpu", "output_img.permute().cpu().numpy().round().astype.permute", "output_img.permute().cpu().numpy().round().astype.permute"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.model_initializer"], ["", "def", "inference", "(", "cfg", ",", "opt", ")", ":", "\n", "    ", "model", "=", "model_initializer", "(", "opt", ")", "\n", "train_dataset", "=", "single_image_loader", "(", "cfg", ",", "opt", "[", "'working_path'", "]", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "8", ")", "\n", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "# Now only support single image inference", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "split", "(", "data", "[", "0", "]", "[", "0", "]", ")", "[", "1", "]", "\n", "img_data", "=", "data", "[", "1", "]", ".", "to", "(", "opt", "[", "'device'", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "img_data", ")", "\n", "output_img", "=", "output", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", "\n", "# output_img = output[0,:,:,:].float().cpu().numpy()", "\n", "\n", "", "if", "cfg", ".", "INPUT", ".", "NORM", ":", "\n", "            ", "denormalize", "=", "DeNormalize", "(", "cfg", ".", "INPUT", ".", "MEAN", ",", "cfg", ".", "INPUT", ".", "STD", ")", "\n", "output_img", "=", "denormalize", "(", "output_img", ")", "\n", "\n", "", "if", "cfg", ".", "INPUT", ".", "RANGE", "==", "255", ":", "\n", "            ", "output_img", ".", "clamp_", "(", "0", ",", "255", ")", "\n", "output_img", "=", "output_img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "opt", "[", "'output_path'", "]", ",", "file_name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "output_img", ")", "\n", "", "else", ":", "\n", "            ", "output_img", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "output_img", "=", "(", "output_img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255.0", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "opt", "[", "'output_path'", "]", ",", "file_name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "output_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.pre_cropped_patch_inference.single_image_loader.__init__": [[51, 63], ["torch.utils.data.dataset.Dataset.__init__", "pre_cropped_patch_inference.single_image_loader.infer_preprocess", "torch.device", "pre_cropped_patch_inference.single_image_loader._get_image_list", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader.infer_preprocess", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader._get_image_list"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "mode", "=", "\"jpg2png\"", ")", ":", "\n", "        ", "super", "(", "single_image_loader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "range", "=", "self", ".", "cfg", ".", "INPUT", ".", "RANGE", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "self", ".", "mean", "=", "self", ".", "cfg", ".", "INPUT", ".", "MEAN", "\n", "self", ".", "std", "=", "self", ".", "cfg", ".", "INPUT", ".", "STD", "\n", "self", ".", "norm", "=", "self", ".", "cfg", ".", "INPUT", ".", "NORM", "\n", "self", ".", "base_transforms", "=", "self", ".", "infer_preprocess", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "file_list", "=", "self", ".", "_get_image_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.pre_cropped_patch_inference.single_image_loader._get_image_list": [[64, 67], ["json.loads", "x.strip", "open().readlines", "open"], "methods", ["None"], ["", "def", "_get_image_list", "(", "self", ")", ":", "\n", "        ", "image_path_list", "=", "[", "json", ".", "loads", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "open", "(", "self", ".", "image_file", ")", ".", "readlines", "(", ")", "]", "\n", "return", "image_path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.pre_cropped_patch_inference.single_image_loader.infer_preprocess": [[68, 79], ["data.augments.Compose", "data.augments.Compose", "data.augments.Normalize", "data.augments.ToTensor2", "data.augments.ToTensor", "data.augments.ToTensor2", "data.augments.ToTensor"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize"], ["", "def", "infer_preprocess", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "norm", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "", "return", "base_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.pre_cropped_patch_inference.single_image_loader._load_image": [[80, 98], ["range", "Exception", "PIL.Image.open().convert", "cv2.imread", "cv2.cvtColor", "PIL.Image.fromarray", "time.sleep", "print", "PIL.Image.open", "BytesIO", "urllib.request.urlopen().read", "urllib.request.urlopen"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "img_path", ",", "num_retry", "=", "20", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_retry", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "img_path", "[", ":", "4", "]", "==", "'http'", ":", "\n", "                    ", "img", "=", "Image", ".", "open", "(", "BytesIO", "(", "urllib", ".", "request", ".", "urlopen", "(", "img_path", ")", ".", "read", "(", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# img = np.asarray(img)", "\n", "", "else", ":", "\n", "                    ", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "-", "1", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "", "break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "time", ".", "sleep", "(", "5", ")", "\n", "print", "(", "f'Open image {img_path} failed, try again... resean is {e}'", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Open image: {img_path} failed!'", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.pre_cropped_patch_inference.single_image_loader.__len__": [[99, 101], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.pre_cropped_patch_inference.single_image_loader.__getitem__": [[102, 111], ["pre_cropped_patch_inference.single_image_loader._load_image", "pre_cropped_patch_inference.single_image_loader.base_transforms"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._load_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "lr_img_path", "=", "self", ".", "file_list", "[", "index", "]", "[", "\"image_path\"", "]", "\n", "lr_image_key", "=", "self", ".", "file_list", "[", "index", "]", "[", "\"image_key\"", "]", "\n", "\n", "lr_img", "=", "self", ".", "_load_image", "(", "lr_img_path", ")", "\n", "\n", "if", "self", ".", "base_transforms", "is", "not", "None", ":", "\n", "            ", "lr_img", ",", "lr_img", "=", "self", ".", "base_transforms", "(", "lr_img", ",", "lr_img", ")", "\n", "", "return", "lr_image_key", ",", "lr_img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.pre_cropped_patch_inference.setup_seed": [[31, 38], ["torch.manual_seed", "torch.cuda.manual_seed_all", "np.random.seed", "random.seed"], "function", ["None"], ["def", "setup_seed", "(", "seed", "=", "100", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.pre_cropped_patch_inference.translate_state_dict": [[40, 48], ["state_dict.items"], "function", ["None"], ["", "def", "translate_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'module'", "in", "key", ":", "\n", "            ", "new_state_dict", "[", "key", "[", "7", ":", "]", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "new_state_dict", "[", "key", "]", "=", "value", "\n", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.pre_cropped_patch_inference.model_initializer": [[113, 123], ["model.NTIRE2020_Deblur_top.uniA.AtrousNet", "torch.load", "model.to.load_state_dict", "model.to.eval", "model.to.to"], "function", ["None"], ["", "", "def", "model_initializer", "(", "opt", ")", ":", "\n", "# Non-distributed GPU Parallel", "\n", "    ", "device", "=", "opt", "[", "'device'", "]", "\n", "model_arch", "=", "\"{}-{}\"", ".", "format", "(", "\"SR\"", ",", "\"AtrousNet\"", ")", "\n", "model", "=", "AtrousNet", "(", "in_channels", "=", "3", ",", "out_channels", "=", "3", ")", "\n", "model_weights", "=", "torch", ".", "load", "(", "opt", "[", "'model_pth'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "model_weights", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.pre_cropped_patch_inference.inference": [[125, 156], ["pre_cropped_patch_inference.model_initializer", "pre_cropped_patch_inference.single_image_loader", "torch.utils.data.DataLoader", "enumerate", "tqdm.tqdm", "data[].to", "os.path.split", "torch.no_grad", "model_initializer.", "output[].cpu", "data.augments.DeNormalize", "data.augments.DeNormalize.", "output_img.permute().cpu().numpy().round().astype.clamp_", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy().round().astype", "imageio.imwrite", "output_img.permute().cpu().numpy().round().astype.clamp_", "imageio.imwrite", "os.path.join", "os.path.join", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy().round", "file_name.replace", "file_name.replace", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy", "output_img.permute().cpu().numpy().round().astype.permute().cpu", "output_img.permute().cpu().numpy().round().astype.permute().cpu", "output_img.permute().cpu().numpy().round().astype.permute", "output_img.permute().cpu().numpy().round().astype.permute"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.model_initializer"], ["", "def", "inference", "(", "cfg", ",", "opt", ")", ":", "\n", "    ", "model", "=", "model_initializer", "(", "opt", ")", "\n", "train_dataset", "=", "single_image_loader", "(", "cfg", ",", "opt", "[", "'working_path'", "]", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "8", ")", "\n", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "# Now only support single image inference", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "split", "(", "data", "[", "0", "]", "[", "0", "]", ")", "[", "1", "]", "\n", "img_data", "=", "data", "[", "1", "]", ".", "to", "(", "opt", "[", "'device'", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "img_data", ")", "\n", "output_img", "=", "output", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", "\n", "# output_img = output[0,:,:,:].float().cpu().numpy()", "\n", "\n", "", "if", "cfg", ".", "INPUT", ".", "NORM", ":", "\n", "            ", "denormalize", "=", "DeNormalize", "(", "cfg", ".", "INPUT", ".", "MEAN", ",", "cfg", ".", "INPUT", ".", "STD", ")", "\n", "output_img", "=", "denormalize", "(", "output_img", ")", "\n", "\n", "", "if", "cfg", ".", "INPUT", ".", "RANGE", "==", "255", ":", "\n", "            ", "output_img", ".", "clamp_", "(", "0", ",", "255", ")", "\n", "output_img", "=", "output_img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "opt", "[", "'output_path'", "]", ",", "file_name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "output_img", ")", "\n", "", "else", ":", "\n", "            ", "output_img", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "output_img", "=", "(", "output_img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255.0", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "opt", "[", "'output_path'", "]", ",", "file_name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "output_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_TTA.single_image_loader.__init__": [[88, 102], ["torch.utils.data.dataset.Dataset.__init__", "inference_TTA.single_image_loader.infer_preprocess", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "inference_TTA.single_image_loader._get_image_list", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader.infer_preprocess", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader._get_image_list"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "rec_path", ",", "mode", "=", "\"png2png\"", ")", ":", "\n", "        ", "super", "(", "single_image_loader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "range", "=", "self", ".", "cfg", ".", "INPUT", ".", "RANGE", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "lr_path", "=", "rec_path", "\n", "\n", "self", ".", "mean", "=", "self", ".", "cfg", ".", "INPUT", ".", "MEAN", "\n", "self", ".", "std", "=", "self", ".", "cfg", ".", "INPUT", ".", "STD", "\n", "self", ".", "norm", "=", "self", ".", "cfg", ".", "INPUT", ".", "NORM", "\n", "self", ".", "base_transforms", "=", "self", ".", "infer_preprocess", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "# self.image_file = self.cfg.DATA.TRAIN.LR_PATH", "\n", "self", ".", "file_list", "=", "self", ".", "_get_image_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_TTA.single_image_loader._get_image_list": [[104, 107], ["json.loads", "x.strip", "open().readlines", "open"], "methods", ["None"], ["", "def", "_get_image_list", "(", "self", ")", ":", "\n", "        ", "image_path_list", "=", "[", "json", ".", "loads", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "open", "(", "self", ".", "lr_path", ")", ".", "readlines", "(", ")", "]", "\n", "return", "image_path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_TTA.single_image_loader.infer_preprocess": [[108, 119], ["torch.augments.Compose", "torch.augments.Compose", "torch.augments.Normalize", "torch.augments.ToTensor2", "torch.augments.ToTensor", "torch.augments.ToTensor2", "torch.augments.ToTensor"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize"], ["", "def", "infer_preprocess", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "norm", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "", "return", "base_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_TTA.single_image_loader._load_image": [[120, 150], ["range", "Exception", "PIL.Image.open().convert", "cv2.imread", "cv2.cvtColor", "cv2.rotate", "cv2.rotate", "cv2.rotate", "cv2.flip", "cv2.flip", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "time.sleep", "print", "PIL.Image.open", "BytesIO", "urllib.request.urlopen().read", "urllib.request.urlopen"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "img_path", ",", "num_retry", "=", "20", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_retry", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "img_path", "[", ":", "4", "]", "==", "'http'", ":", "\n", "                    ", "img", "=", "Image", ".", "open", "(", "BytesIO", "(", "urllib", ".", "request", ".", "urlopen", "(", "img_path", ")", ".", "read", "(", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# img = np.asarray(img)", "\n", "", "else", ":", "\n", "                    ", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "-", "1", ")", "\n", "img_BGR", "=", "img", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img_rot_90", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_90_CLOCKWISE", ")", "\n", "img_rot_180", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_180", ")", "\n", "img_rot_270", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_90_COUNTERCLOCKWISE", ")", "\n", "img_flip_h", "=", "cv2", ".", "flip", "(", "img", ",", "1", ")", "\n", "img_flip_v", "=", "cv2", ".", "flip", "(", "img", ",", "0", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img_rot_90", "=", "Image", ".", "fromarray", "(", "img_rot_90", ")", "\n", "img_rot_180", "=", "Image", ".", "fromarray", "(", "img_rot_180", ")", "\n", "img_rot_270", "=", "Image", ".", "fromarray", "(", "img_rot_270", ")", "\n", "img_flip_h", "=", "Image", ".", "fromarray", "(", "img_flip_h", ")", "\n", "img_flip_v", "=", "Image", ".", "fromarray", "(", "img_flip_v", ")", "\n", "img_BGR", "=", "Image", ".", "fromarray", "(", "img_BGR", ")", "\n", "", "break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "time", ".", "sleep", "(", "5", ")", "\n", "print", "(", "f'Open image {img_path} failed, try again... resean is {e}'", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Open image: {img_path} failed!'", ")", "\n", "\n", "", "return", "img", ",", "img_rot_90", ",", "img_rot_180", ",", "img_rot_270", ",", "img_flip_h", ",", "img_flip_v", ",", "img_BGR", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_TTA.single_image_loader.__len__": [[151, 153], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_TTA.single_image_loader.__getitem__": [[154, 169], ["inference_TTA.single_image_loader._load_image", "inference_TTA.single_image_loader.base_transforms", "inference_TTA.single_image_loader.base_transforms", "inference_TTA.single_image_loader.base_transforms", "inference_TTA.single_image_loader.base_transforms", "inference_TTA.single_image_loader.base_transforms", "inference_TTA.single_image_loader.base_transforms", "inference_TTA.single_image_loader.base_transforms"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._load_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "lr_img_path", "=", "self", ".", "file_list", "[", "index", "]", "[", "\"image_path\"", "]", "\n", "lr_image_key", "=", "self", ".", "file_list", "[", "index", "]", "[", "\"image_key\"", "]", "\n", "lr_img", ",", "lr_img_rot_90", ",", "lr_img_rot_180", ",", "lr_img_rot_270", ",", "img_flip_h", ",", "img_flip_v", ",", "img_BGR", "=", "self", ".", "_load_image", "(", "lr_img_path", ")", "\n", "\n", "if", "self", ".", "base_transforms", "is", "not", "None", ":", "\n", "            ", "lr_img", ",", "lr_img", "=", "self", ".", "base_transforms", "(", "lr_img", ",", "lr_img", ")", "\n", "lr_img_rot_90", ",", "lr_img_rot_90", "=", "self", ".", "base_transforms", "(", "lr_img_rot_90", ",", "lr_img_rot_90", ")", "\n", "lr_img_rot_180", ",", "lr_img_rot_180", "=", "self", ".", "base_transforms", "(", "lr_img_rot_180", ",", "lr_img_rot_180", ")", "\n", "lr_img_rot_270", ",", "lr_img_rot_270", "=", "self", ".", "base_transforms", "(", "lr_img_rot_270", ",", "lr_img_rot_270", ")", "\n", "img_flip_h", ",", "img_flip_h", "=", "self", ".", "base_transforms", "(", "img_flip_h", ",", "img_flip_h", ")", "\n", "img_flip_v", ",", "img_flip_v", "=", "self", ".", "base_transforms", "(", "img_flip_v", ",", "img_flip_v", ")", "\n", "img_BGR", ",", "img_BGR", "=", "self", ".", "base_transforms", "(", "img_BGR", ",", "img_BGR", ")", "\n", "\n", "", "return", "lr_image_key", ",", "lr_img", ",", "lr_img_rot_90", ",", "lr_img_rot_180", ",", "lr_img_rot_270", ",", "img_flip_h", ",", "img_flip_v", ",", "img_BGR", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_TTA.setup_seed": [[68, 75], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "np.random.seed", "random.seed"], "function", ["None"], ["def", "setup_seed", "(", "seed", "=", "100", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_TTA.translate_state_dict": [[77, 85], ["state_dict.items"], "function", ["None"], ["", "def", "translate_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'module'", "in", "key", ":", "\n", "            ", "new_state_dict", "[", "key", "[", "7", ":", "]", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "new_state_dict", "[", "key", "]", "=", "value", "\n", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_TTA.model_initializer": [[171, 181], ["model.NTIRE2021_Deblur.uniA_ELU.model_stage1_Upsample_Deep.AtrousNet_billinear_Wide", "torch.load", "torch.load", "torch.load", "torch.load", "model.to.load_state_dict", "model.to.eval", "model.to.to"], "function", ["None"], ["", "", "def", "model_initializer", "(", "opt", ")", ":", "\n", "# Non-distributed GPU Parallel", "\n", "    ", "device", "=", "opt", "[", "'device'", "]", "\n", "model_arch", "=", "\"{}-{}\"", ".", "format", "(", "\"SR\"", ",", "\"AtrousNet\"", ")", "\n", "model", "=", "AtrousNet", "(", "3", ",", "3", ")", "\n", "model_weights", "=", "torch", ".", "load", "(", "opt", "[", "'model_pth'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "model_weights", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.inference_TTA.inference": [[182, 236], ["inference_TTA.model_initializer", "inference_TTA.single_image_loader", "torch.utils.data.DataLoader", "enumerate", "tqdm.tqdm", "enumerate", "img.to.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_initializer.", "range", "len", "output[].float().cpu", "np.mean().round().astype", "imageio.imwrite", "data.augments.DeNormalize", "data.augments.DeNormalize.", "output_img.permute().cpu().numpy().round().astype.clamp_", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy().round().astype", "output_img.permute().cpu().numpy().round().astype.clamp_", "output_imgs.append", "os.path.join", "output[].float", "output_imgs.append", "np.mean().round", "file_name.replace", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy().round", "cv2.rotate", "output_imgs.append", "cv2.rotate", "output_imgs.append", "np.mean", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy", "cv2.rotate", "output_imgs.append", "np.array", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy", "cv2.flip", "output_imgs.append", "output_img.permute().cpu().numpy().round().astype.permute().cpu", "cv2.flip", "output_imgs.append", "output_img.permute().cpu().numpy().round().astype.permute().cpu", "cv2.cvtColor", "output_img.permute().cpu().numpy().round().astype.permute", "output_img.permute().cpu().numpy().round().astype.permute"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.model_initializer"], ["", "def", "inference", "(", "cfg", ",", "opt", ")", ":", "\n", "    ", "model", "=", "model_initializer", "(", "opt", ")", "\n", "train_dataset", "=", "single_image_loader", "(", "cfg", ",", "opt", "[", "'working_path'", "]", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "2", ",", "\n", "num_workers", "=", "8", ")", "\n", "PSNR", "=", "[", "]", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "# Now only support single image inference", "\n", "# file_name = os.path.split(data[0][0])[1]", "\n", "# hr_image = cv2.imread(os.path.join(opt['HR_path'], file_name.replace('.jpg', '.png')))", "\n", "# hr_image = cv2.cvtColor(hr_image, cv2.COLOR_BGR2RGB)", "\n", "# print(file_name)", "\n", "# 1 -> 4", "\n", "        ", "img_data", "=", "data", "[", "1", ":", "]", "\n", "output_imgs", "=", "[", "]", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "img_data", ")", ":", "\n", "            ", "'''lr_img, lr_img_rot_90, lr_img_rot_180, lr_img_rot_270'''", "\n", "img", "=", "img", ".", "to", "(", "opt", "[", "'device'", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "model", "(", "img", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "                    ", "output_img", "=", "output", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "file_name", "=", "data", "[", "0", "]", "[", "i", "]", "\n", "\n", "if", "cfg", ".", "INPUT", ".", "NORM", ":", "\n", "                        ", "denormalize", "=", "DeNormalize", "(", "cfg", ".", "INPUT", ".", "MEAN", ",", "cfg", ".", "INPUT", ".", "STD", ")", "\n", "output_img", "=", "denormalize", "(", "output_img", ")", "\n", "", "if", "cfg", ".", "INPUT", ".", "RANGE", "==", "255", ":", "\n", "                        ", "output_img", ".", "clamp_", "(", "0", ",", "255", ")", "\n", "output_img", "=", "output_img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "                        ", "output_img", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "output_img", "=", "(", "output_img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255.0", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "if", "idx", "==", "0", ":", "\n", "                        ", "output_imgs", ".", "append", "(", "output_img", ")", "\n", "", "elif", "idx", "==", "1", ":", "\n", "                        ", "output_imgs", ".", "append", "(", "cv2", ".", "rotate", "(", "output_img", ",", "cv2", ".", "ROTATE_90_COUNTERCLOCKWISE", ")", ")", "\n", "", "elif", "idx", "==", "2", ":", "\n", "                        ", "output_imgs", ".", "append", "(", "cv2", ".", "rotate", "(", "output_img", ",", "cv2", ".", "ROTATE_180", ")", ")", "\n", "", "elif", "idx", "==", "3", ":", "\n", "                        ", "output_imgs", ".", "append", "(", "cv2", ".", "rotate", "(", "output_img", ",", "cv2", ".", "ROTATE_90_CLOCKWISE", ")", ")", "\n", "", "elif", "idx", "==", "4", ":", "\n", "                        ", "output_imgs", ".", "append", "(", "cv2", ".", "flip", "(", "output_img", ",", "1", ")", ")", "\n", "", "elif", "idx", "==", "5", ":", "\n", "                        ", "output_imgs", ".", "append", "(", "cv2", ".", "flip", "(", "output_img", ",", "0", ")", ")", "\n", "", "elif", "idx", "==", "6", ":", "\n", "                        ", "output_imgs", ".", "append", "(", "cv2", ".", "cvtColor", "(", "output_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "\n", "", "mean_img", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "output_imgs", ")", ",", "axis", "=", "0", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# PSNR.append(psnr(hr_image, mean_img))", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "opt", "[", "'output_path'", "]", ",", "file_name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "mean_img", ")", "\n", "# print('nAverage PSNR:{:.3f}'.format(sum(PSNR)/len(PSNR)))", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train.setup_seed": [[82, 89], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "setup_seed", "(", "seed", "=", "100", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train.load_ckpt": [[91, 95], ["model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "load_ckpt", "(", "model", ",", "weights", ")", ":", "\n", "    ", "state_dict", "=", "torch", ".", "load", "(", "weights", ",", "map_location", "=", "\"cpu\"", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train.translate_state_dict": [[97, 105], ["state_dict.items"], "function", ["None"], ["", "def", "translate_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'module'", "in", "key", ":", "\n", "            ", "new_state_dict", "[", "key", "[", "7", ":", "]", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "new_state_dict", "[", "key", "]", "=", "value", "\n", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train.main_worker": [[107, 301], ["print", "data.utils.Metric_rank", "data.utils.Metric_rank", "data.utils.Metric_rank", "data.utils.Metric_rank", "data.utils.PSNR", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "data.utils.BatchAug", "optim.optimizer.Optimizer", "optim.optimizer.Optimizer.optimizer", "data.vanilar_dataset.NTIRE_Track2", "data.vanilar_dataset.NTIRE_Track2", "tensorboardX.SummaryWriter", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "math.ceil", "int", "range", "config.Config.Config", "int", "print", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.NTIRE2021_Deblur.CARN.CARN.Net", "train.load_ckpt", "print", "print", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_SRCNN_remix.SRCNN.cuda", "apex.parallel.LARC.LARC", "apex.amp.initialize", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_SRCNN_remix.SRCNN.half", "torch.nn.parallel.DistributedDataParallel", "loss.generator_loss.MS_SSIM", "loss.generator_loss.L1_Charbonnier", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "print", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "data.augments.DeNormalize", "int", "train.train", "os.path.exists", "os.makedirs", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1.AtrousNet", "torch.nn.parallel.DataParallel", "loss.generator_loss.SSIM", "len", "len", "len", "torch.utils.data.distributed.DistributedSampler.set_epoch", "train.val", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1.AtrousNet", "len", "train.translate_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_Upsample_Deep.AtrousNet_billinear_Wide", "train.translate_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train.translate_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_SRCNN_remix.SRCNN.state_dict", "apex.parallel.LARC.LARC.state_dict", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_deblur_remix.AtrousNet_wavlet_remix", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_SRCNN_remix.SRCNN.state_dict", "apex.parallel.LARC.LARC.state_dict", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_SRCNN_remix.SRCNN.state_dict", "apex.parallel.LARC.LARC.state_dict", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_SRCNN_remix.SRCNN"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.tools.utils.PSNR", "home.repos.pwc.inspect_result.flyegle_sdwnet.optim.optimizer.Optimizer.optimizer", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.load_ckpt", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.train", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.val", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.translate_state_dict", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.translate_state_dict", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.translate_state_dict"], ["", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "cfg", "=", "Config", "(", "args", ".", "config_file", ")", "(", ")", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "        ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "model_arch", "=", "\"{}-{}\"", ".", "format", "(", "\"SR\"", ",", "\"AtrousNet\"", ")", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "", "print", "(", "'rank: {} / {}'", ".", "format", "(", "args", ".", "rank", ",", "args", ".", "world_size", ")", ")", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", ")", "\n", "\n", "# metric", "\n", "", "", "train_loss_metric", "=", "Metric_rank", "(", "\"train_loss\"", ")", "\n", "train_psnr_metric", "=", "Metric_rank", "(", "\"train_psnr\"", ")", "\n", "train_metric", "=", "{", "\"loss\"", ":", "train_loss_metric", ",", "\n", "\"psnr\"", ":", "train_psnr_metric", "}", "\n", "\n", "val_loss_metric", "=", "Metric_rank", "(", "\"val_loss\"", ")", "\n", "val_psnr_metric", "=", "Metric_rank", "(", "\"val_psnr\"", ")", "\n", "val_metric", "=", "{", "\"loss\"", ":", "val_loss_metric", ",", "\n", "\"psnr\"", ":", "val_psnr_metric", "}", "\n", "\n", "# psnr", "\n", "calculate_psnr", "=", "PSNR", "(", "cfg", ")", "\n", "\n", "# model", "\n", "if", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"CARN\"", ":", "\n", "        ", "model", "=", "CARNNet", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet\"", ":", "\n", "        ", "model", "=", "AtrousNet", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNetElu\"", ":", "\n", "        ", "model", "=", "AtrousNetElu", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNetEluUpWide\"", ":", "\n", "        ", "model", "=", "AtrousNetEluUpWide", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNetEluUpWideWaveletRemix\"", ":", "\n", "        ", "model", "=", "AtrousNet_wavlet_remix", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"waveletSrcnn\"", ":", "\n", "        ", "model", "=", "SRCNN", "(", "3", ")", "\n", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "PRETRAIN", ":", "\n", "        ", "model", "=", "load_ckpt", "(", "model", ",", "cfg", ".", "MODEL", ".", "WEIGHTS", ")", "\n", "\n", "# model = VDSR(in_channels=3, out_channels=3)", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "\"================{}=============\"", ".", "format", "(", "model_arch", ")", ")", "\n", "print", "(", "model", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "# batch augments", "\n", "", "batch_aug", "=", "BatchAug", "(", "cfg", ")", "\n", "\n", "# optim", "\n", "Optim", "=", "Optimizer", "(", "cfg", ")", "\n", "optimizer", "=", "Optim", ".", "optimizer", "(", "model", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "LARS", ":", "\n", "        ", "optimizer", "=", "LARC", "(", "optimizer", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "MIX", ":", "\n", "        ", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "\"O2\"", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "FP16", ":", "\n", "# model, optimizer = amp.initialize(model, optimizer, opt_level=\"O2\")", "\n", "        ", "model", "=", "model", ".", "half", "(", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "dataparallel", ":", "\n", "            ", "model", "=", "DataParallel", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "model", "\n", "\n", "", "", "device", "=", "model", ".", "device", "\n", "\n", "if", "cfg", ".", "LOSS", ".", "MS_SSIM", ":", "\n", "        ", "ssim_criterion", "=", "MS_SSIM", "(", ")", "\n", "", "elif", "cfg", ".", "LOSS", ".", "SSIM", ":", "\n", "        ", "ssim_criterion", "=", "SSIM", "(", ")", "\n", "\n", "# loss", "\n", "", "if", "cfg", ".", "LOSS", ".", "L1_Charbonnier", ":", "\n", "        ", "criterion", "=", "L1_Charbonnier", "(", "eps", "=", "cfg", ".", "LOSS", ".", "EPS", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "# dataset", "\n", "", "train_dataset", "=", "NTIRE_Track2", "(", "cfg", ",", "train", "=", "True", ")", "\n", "validation_dataset", "=", "NTIRE_Track2", "(", "cfg", ",", "train", "=", "False", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "\"Training dataset length: \"", ",", "len", "(", "train_dataset", ")", ")", "\n", "print", "(", "\"Validation dataset length: \"", ",", "len", "(", "validation_dataset", ")", ")", "\n", "# sampler", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "DistributedSampler", "(", "train_dataset", ")", "\n", "validation_sampler", "=", "DistributedSampler", "(", "validation_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "validation_sampler", "=", "None", "\n", "\n", "# logs", "\n", "", "log_writer", "=", "SummaryWriter", "(", "cfg", ".", "CHEKCPOINTS", ".", "LOGS_PATH", ")", "\n", "\n", "if", "cfg", ".", "IPNUT", ".", "NORM", ":", "\n", "        ", "denormalize", "=", "DeNormalize", "(", "cfg", ".", "INPUT", ".", "MEAN", ",", "cfg", ".", "IPNUT", ".", "STD", ")", "\n", "", "else", ":", "\n", "        ", "denormalize", "=", "None", "\n", "\n", "# dataloader", "\n", "", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", "\n", ")", "\n", "\n", "validation_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "validation_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "VALIDATION", ".", "BATCH_SIZE", ",", "\n", "shuffle", "=", "(", "validation_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "cfg", ".", "VALIDATION", ".", "NUM_WORKERS", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "validation_sampler", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "\n", "batch_iter", "=", "0", "\n", "train_batch", "=", "math", ".", "ceil", "(", "len", "(", "train_dataset", ")", "/", "(", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "*", "ngpus_per_node", ")", ")", "\n", "total_batch", "=", "train_batch", "*", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", "\n", "no_warmup_total_batch", "=", "int", "(", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", "-", "cfg", ".", "TRAIN", ".", "WARM_EPOCHS", ")", "*", "train_batch", "\n", "\n", "best_loss", ",", "best_psnr", "=", "100.0", ",", "0.0", "\n", "batch_count", "=", "0", "\n", "batch_total_count", "=", "int", "(", "len", "(", "train_loader", ")", "*", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", "//", "cfg", ".", "VALIDATION", ".", "ITER", ")", "\n", "\n", "# training loop", "\n", "for", "epoch", "in", "range", "(", "1", ",", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", "+", "1", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "# train for epoch", "\n", "", "batch_iter", "=", "train", "(", "cfg", ",", "train_loader", ",", "validation_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "batch_aug", ",", "epoch", ",", "args", ",", "\n", "batch_iter", ",", "total_batch", ",", "train_batch", ",", "no_warmup_total_batch", ",", "\n", "log_writer", ",", "calculate_psnr", ",", "train_metric", ",", "denormalize", ",", "ssim_criterion", ",", "\n", "batch_count", ",", "batch_total_count", ")", "\n", "\n", "# control the validaiton calculate step", "\n", "if", "cfg", ".", "VALIDATION", ".", "USE", "and", "(", "epoch", "%", "cfg", ".", "VALIDATION", ".", "INTERVAL", ")", "==", "0", "and", "epoch", ">=", "cfg", ".", "VALIDATION", ".", "STEP", ":", "\n", "            ", "val_loss", ",", "val_psnr", "=", "val", "(", "cfg", ",", "validation_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", ",", "args", ",", "log_writer", ",", "calculate_psnr", ",", "denormalize", "=", "denormalize", ")", "\n", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "# save best loss", "\n", "                ", "if", "val_loss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "val_loss", "\n", "state_dict", "=", "translate_state_dict", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", "+", "'/'", "+", "model_arch", "+", "f'_best_loss_{best_loss}'", "+", "'.pth'", ")", "\n", "\n", "# save best psnr", "\n", "", "if", "val_psnr", ">", "best_psnr", ":", "\n", "                    ", "best_psnr", "=", "val_psnr", "\n", "state_dict", "=", "translate_state_dict", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "+", "f'_best_psnr_{best_psnr}'", "+", "'.pth'", ")", "\n", "\n", "", "", "", "if", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "            ", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "state_dict", "=", "translate_state_dict", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "+", "'_epoch_{}'", ".", "format", "(", "epoch", "+", "1", ")", "+", "'.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train.record_scalars": [[304, 307], ["log_writer.add_scalar", "log_writer.add_scalar"], "function", ["None"], ["", "", "", "", "def", "record_scalars", "(", "log_writer", ",", "mean_loss", ",", "mean_psnr", ",", "epoch", ",", "flag", "=", "\"train\"", ")", ":", "\n", "    ", "log_writer", ".", "add_scalar", "(", "f\"{flag}/epoch_loss\"", ",", "mean_loss", ",", "epoch", ")", "\n", "log_writer", ".", "add_scalar", "(", "f\"{flag}/epoch_psnr\"", ",", "mean_psnr", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train.record_log": [[310, 314], ["log_writer.add_scalar", "log_writer.add_scalar", "log_writer.add_scalar", "losses.data.item"], "function", ["None"], ["", "def", "record_log", "(", "log_writer", ",", "losses", ",", "lr", ",", "batch_idx", ",", "batch_time", ")", ":", "\n", "    ", "log_writer", ".", "add_scalar", "(", "\"train/l1_loss\"", ",", "losses", ".", "data", ".", "item", "(", ")", ",", "batch_idx", ")", "\n", "log_writer", ".", "add_scalar", "(", "\"train/learning_rate\"", ",", "lr", ",", "batch_idx", ")", "\n", "log_writer", ".", "add_scalar", "(", "\"train/batch_time\"", ",", "batch_time", ",", "batch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train.draw_images": [[317, 354], ["isinstance", "denormalize", "denormalize", "denormalize", "random.choice", "list", "torchvision.utils.make_grid.clamp_", "torchvision.utils.make_grid.clamp_", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "log_writer.add_images", "log_writer.add_images", "log_writer.add_images", "range", "torchvision.utils.make_grid.clamp_", "torchvision.utils.make_grid.clamp_"], "function", ["None"], ["", "def", "draw_images", "(", "cfg", ",", "epoch", ",", "log_writer", ",", "lr_images", ",", "sr_images", ",", "hr_images", ",", "denormalize", ",", "flag", "=", "\"train\"", ")", ":", "\n", "    ", "\"\"\"record the sr images\n    \"\"\"", "\n", "max_numbers", "=", "cfg", ".", "DEBUG", ".", "MAX_NUMBERS", "\n", "if", "denormalize", "is", "not", "None", ":", "\n", "        ", "lr_images", "=", "denormalize", "(", "lr_images", ")", "\n", "sr_images", "=", "denormalize", "(", "sr_images", ")", "\n", "hr_images", "=", "denormalize", "(", "hr_images", ")", "\n", "\n", "", "assert", "isinstance", "(", "sr_images", ",", "torch", ".", "Tensor", ")", ",", "\"images must be a tensor with BXCXHXW or CXHXW\"", "\n", "if", "max_numbers", "==", "1", "and", "max_numbers", "<=", "sr_images", ".", "shape", "[", "0", "]", ":", "\n", "        ", "indices", "=", "random", ".", "choice", "(", "list", "(", "range", "(", "sr_images", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "lr_image", "=", "lr_images", "[", "indices", ",", ":", ",", ":", ",", ":", "]", "\n", "sr_image", "=", "sr_images", "[", "indices", ",", ":", ",", ":", ",", ":", "]", "\n", "hr_image", "=", "hr_images", "[", "indices", ",", ":", ",", ":", ",", ":", "]", "\n", "if", "cfg", ".", "INPUT", ".", "NORM", "==", "255", ":", "\n", "            ", "sr_image", ".", "clamp_", "(", "0", ",", "255", ")", "\n", "", "else", ":", "\n", "            ", "sr_image", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "", "", "elif", "max_numbers", ">", "1", "and", "max_numbers", "<=", "sr_images", ".", "shape", "[", "0", "]", ":", "\n", "        ", "lr_image", "=", "lr_images", "[", ":", "max_numbers", ",", ":", ",", ":", ",", ":", "]", "\n", "sr_image", "=", "sr_images", "[", ":", "max_numbers", ",", ":", ",", ":", ",", ":", "]", "\n", "hr_image", "=", "hr_images", "[", ":", "max_numbers", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "lr_image", "=", "make_grid", "(", "lr_image", ",", "nrow", "=", "max_numbers", ",", "padding", "=", "cfg", ".", "DEBUG", ".", "PADDING", ")", "\n", "sr_image", "=", "make_grid", "(", "sr_image", ",", "nrow", "=", "max_numbers", ",", "padding", "=", "cfg", ".", "DEBUG", ".", "PADDING", ")", "\n", "hr_image", "=", "make_grid", "(", "hr_image", ",", "nrow", "=", "max_numbers", ",", "padding", "=", "cfg", ".", "DEBUG", ".", "PADDING", ")", "\n", "\n", "if", "cfg", ".", "INPUT", ".", "RANGE", "==", "255", ":", "\n", "            ", "sr_image", ".", "clamp_", "(", "0", ",", "255", ")", "\n", "", "else", ":", "\n", "            ", "sr_image", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "", "log_writer", ".", "add_images", "(", "f\"{flag}/lr_image\"", ",", "lr_image", ",", "epoch", ",", "dataformats", "=", "\"CHW\"", ")", "\n", "log_writer", ".", "add_images", "(", "f\"{flag}/sr_image\"", ",", "sr_image", ",", "epoch", ",", "dataformats", "=", "\"CHW\"", ")", "\n", "log_writer", ".", "add_images", "(", "f\"{flag}/hr_image\"", ",", "hr_image", ",", "epoch", ",", "dataformats", "=", "\"CHW\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train.train": [[356, 496], ["model.train", "len", "enumerate", "train.record_scalars", "time.time", "lr_images.half.to", "hr_images.half.to", "model", "calculate_psnr", "optimizer.zero_grad", "train_metric[].update", "train_metric[].update", "optim.optimizer.adjust_learning_rate_for_cosine_decay", "train.adjust_learning_rate", "lr_images.half.half", "hr_images.half.half", "batch_aug", "criterion", "ssim_criterion", "criterion.backward", "optimizer.step", "optimizer.zero_grad", "time.time", "criterion.data.item", "calculate_psnr.data.item", "train.record_log", "train.val", "criterion", "ssim_criterion", "criterion", "apex.amp.scale_loss", "scaled_loss.backward", "optimizer.step", "optimizer.zero_grad", "print", "print", "train.translate_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train.translate_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train.draw_images", "model.state_dict", "optimizer.state_dict", "model.state_dict", "optimizer.state_dict", "criterion.data.item", "criterion.data.item", "ssim_criterion.data.item", "calculate_psnr.data.item", "datetime.datetime.now().strftime", "criterion.data.item", "calculate_psnr.data.item", "datetime.datetime.now().strftime", "datetime.datetime.now", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.train", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.record_scalars", "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.psnr_ssim.calculate_psnr", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.Metric_rank.update", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.Metric_rank.update", "home.repos.pwc.inspect_result.flyegle_sdwnet.optim.optimizer.adjust_learning_rate_for_cosine_decay", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.adjust_learning_rate", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.record_log", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.val", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.translate_state_dict", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.translate_state_dict", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.draw_images"], ["", "", "def", "train", "(", "cfg", ",", "train_loader", ",", "validation_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "batch_aug", ",", "epoch", ",", "args", ",", "\n", "batch_iter", ",", "total_batch", ",", "train_batch", ",", "no_warmup_total_batch", ",", "log_writer", ",", "\n", "calculate_psnr", ",", "train_metric", ",", "denormalize", ",", "ssim_criterion", ",", "batch_count", ",", "batch_total_count", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "device", "=", "model", ".", "device", "\n", "loader_length", "=", "len", "(", "train_loader", ")", "\n", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "batch_start", "=", "time", ".", "time", "(", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "COSINE", ":", "\n", "# cosine learning rate", "\n", "            ", "lr", "=", "adjust_learning_rate_for_cosine_decay", "(", "\n", "cfg", ",", "epoch", ",", "batch_idx", "+", "1", ",", "optimizer", ",", "train_batch", ",", "no_warmup_total_batch", ",", "loader_length", "\n", ")", "\n", "", "else", ":", "\n", "# step learning rate", "\n", "            ", "lr", "=", "adjust_learning_rate", "(", "\n", "cfg", ",", "epoch", ",", "batch_idx", "+", "1", ",", "optimizer", ",", "loader_length", "\n", ")", "\n", "# forward", "\n", "", "lr_images", ",", "hr_images", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "FP16", ":", "\n", "            ", "lr_images", "=", "lr_images", ".", "half", "(", ")", "\n", "hr_images", "=", "hr_images", ".", "half", "(", ")", "\n", "\n", "", "lr_images", "=", "lr_images", ".", "to", "(", "device", ")", "\n", "hr_images", "=", "hr_images", ".", "to", "(", "device", ")", "\n", "\n", "# batch augments", "\n", "if", "cfg", ".", "DATAAUG", ".", "MIXUP", "or", "cfg", ".", "DATAAUG", ".", "CUTMIX", "or", "cfg", ".", "DATAAUG", ".", "CUTBLUR", ":", "\n", "            ", "lr_images", ",", "hr_images", "=", "batch_aug", "(", "lr_images", ",", "hr_images", ")", "\n", "\n", "", "sr_images", "=", "model", "(", "lr_images", ")", "\n", "\n", "if", "cfg", ".", "LOSS", ".", "MS_SSIM", ":", "\n", "            ", "l1_losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "ssim", "=", "ssim_criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "losses", "=", "(", "1", "-", "cfg", ".", "LOSS", ".", "ALPHA", ")", "*", "l1_losses", "+", "cfg", ".", "LOSS", ".", "ALPHA", "*", "(", "1", "-", "ssim", ")", "\n", "", "elif", "cfg", ".", "LOSS", ".", "SSIM", ":", "\n", "            ", "l1_losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "ssim", "=", "ssim_criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "losses", "=", "cfg", ".", "LOSS", ".", "ALPHA", "*", "l1_losses", "+", "cfg", ".", "LOSS", ".", "ALPHA", "*", "(", "1", "-", "ssim", ")", "\n", "", "else", ":", "\n", "            ", "losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "\n", "# loss regularization", "\n", "", "if", "cfg", ".", "TRAIN", ".", "GRAD_ACCUMULATE", "and", "cfg", ".", "TRAIN", ".", "STEP", ":", "\n", "            ", "losses", "=", "losses", "/", "cfg", ".", "TRAIN", ".", "GRAD_ACCUMULATE_STEP", "\n", "\n", "", "batch_psnr", "=", "calculate_psnr", "(", "sr_images", ",", "hr_images", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MIX", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "losses", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "losses", ".", "backward", "(", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "GRAD_ACCUMULATE", ":", "\n", "            ", "if", "(", "batch_idx", "+", "1", ")", "%", "cfg", ".", "TRAIN", ".", "GRAD_ACCUMULATE_STEP", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "batch_time", "=", "time", ".", "time", "(", ")", "-", "batch_start", "\n", "\n", "batch_iter", "+=", "1", "\n", "batch_idx", "+=", "1", "\n", "\n", "train_metric", "[", "\"loss\"", "]", ".", "update", "(", "losses", ".", "data", ".", "item", "(", ")", ")", "\n", "train_metric", "[", "\"psnr\"", "]", ".", "update", "(", "batch_psnr", ".", "data", ".", "item", "(", ")", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "if", "cfg", ".", "LOSS", ".", "SSIM", "or", "cfg", ".", "LOSS", ".", "MS_SSIM", ":", "\n", "                ", "print", "(", "\"Training Epoch: [{}/{}] batchidx:[{}/{}] batchiter: [{}/{}] batch_losses: {:.4f} l1_loss: {:.4f} ssim: {:.4f} psnr: {:.4f} LearningRate: {:.10f} Batchtime: {:.4f}s Datetime: {}\"", ".", "format", "(", "\n", "epoch", ",", "\n", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", ",", "\n", "batch_idx", ",", "\n", "train_batch", ",", "\n", "batch_iter", ",", "\n", "total_batch", ",", "\n", "losses", ".", "data", ".", "item", "(", ")", ",", "\n", "l1_losses", ".", "data", ".", "item", "(", ")", ",", "\n", "ssim", ".", "data", ".", "item", "(", ")", ",", "\n", "batch_psnr", ".", "data", ".", "item", "(", ")", ",", "\n", "lr", ",", "\n", "batch_time", ",", "\n", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Training Epoch: [{}/{}] batchidx:[{}/{}] batchiter: [{}/{}] batch_losses: {:.4f} psnr: {:.4f} LearningRate: {:.10f} Batchtime: {:.4f}s Datetime: {}\"", ".", "format", "(", "\n", "epoch", ",", "\n", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", ",", "\n", "batch_idx", ",", "\n", "train_batch", ",", "\n", "batch_iter", ",", "\n", "total_batch", ",", "\n", "losses", ".", "data", ".", "item", "(", ")", ",", "\n", "batch_psnr", ".", "data", ".", "item", "(", ")", ",", "\n", "lr", ",", "\n", "batch_time", ",", "\n", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ")", ")", "\n", "\n", "", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "# batch record", "\n", "            ", "record_log", "(", "log_writer", ",", "losses", ",", "lr", ",", "batch_iter", ",", "batch_time", ")", "\n", "if", "batch_idx", "==", "1", ":", "\n", "                ", "if", "cfg", ".", "DEBUG", ".", "SHOW_SR_IMAGE", ":", "\n", "                    ", "draw_images", "(", "cfg", ",", "epoch", ",", "log_writer", ",", "lr_images", ",", "sr_images", ",", "hr_images", ",", "denormalize", ",", "flag", "=", "\"train\"", ")", "\n", "\n", "# validation for iter", "\n", "", "", "", "if", "cfg", ".", "VALIDATION", ".", "USE", "and", "(", "batch_iter", "%", "cfg", ".", "VALIDATION", ".", "ITER", ")", "==", "0", ":", "\n", "            ", "batch_count", "+=", "1", "\n", "val_loss", ",", "val_psnr", "=", "val", "(", "cfg", ",", "validation_loader", ",", "model", ",", "criterion", ",", "batch_count", ",", "batch_total_count", ",", "args", ",", "log_writer", ",", "calculate_psnr", ",", "denormalize", "=", "denormalize", ")", "\n", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "best_loss", "=", "val_loss", "\n", "state_dict", "=", "translate_state_dict", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "+", "f'_best_loss_{best_loss}'", "+", "'.pth'", ")", "\n", "\n", "best_psnr", "=", "val_psnr", "\n", "state_dict", "=", "translate_state_dict", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "+", "f'_best_psnr_{best_psnr}'", "+", "'.pth'", ")", "\n", "\n", "# epoch record", "\n", "", "", "", "record_scalars", "(", "log_writer", ",", "train_metric", "[", "\"loss\"", "]", ".", "average", ",", "train_metric", "[", "\"psnr\"", "]", ".", "average", ",", "epoch", ",", "flag", "=", "\"train\"", ")", "\n", "\n", "return", "batch_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train.val": [[498, 559], ["model.eval", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "enumerate", "model.train", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "lr_images.half.to", "hr_images.half.to", "float", "torch.all_reduce", "torch.all_reduce", "print", "train.record_scalars", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "lr_images.half.half", "hr_images.half.half", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "model", "criterion", "criterion.data.item", "epoch_psnr.data.item", "torch.tensor().cuda().float.data.item", "float", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "time.time", "utils.calc_psnr_for_val.get_psnr", "calculate_psnr", "calculate_psnr.data.item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "train.draw_images", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.train", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.record_scalars", "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.calc_psnr_for_val.get_psnr", "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.psnr_ssim.calculate_psnr", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.draw_images"], ["", "def", "val", "(", "cfg", ",", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "total_epoch", ",", "args", ",", "log_writer", ",", "calculate_psnr", ",", "denormalize", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "device", "=", "model", ".", "device", "\n", "\n", "epoch_losses", ",", "epoch_psnr", "=", "0.0", ",", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "iter_idx", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# forward", "\n", "        ", "lr_images", ",", "hr_images", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "iter_idx", "+=", "lr_images", ".", "shape", "[", "0", "]", "\n", "# print(f\"val: {batch_idx}+{lr_images.shape[0]}\")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "FP16", ":", "\n", "            ", "lr_images", "=", "lr_images", ".", "half", "(", ")", "\n", "hr_images", "=", "hr_images", ".", "half", "(", ")", "\n", "\n", "", "lr_images", "=", "lr_images", ".", "to", "(", "device", ")", "\n", "hr_images", "=", "hr_images", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "sr_images", "=", "model", "(", "lr_images", ")", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "# losses", "\n", "batch_losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "epoch_losses", "+=", "batch_losses", ".", "data", ".", "item", "(", ")", "\n", "\n", "if", "cfg", ".", "VALIDATION", ".", "KEEP_PSNR", ":", "\n", "                ", "batch_psnr", "=", "get_psnr", "(", "sr_images", ",", "hr_images", ")", "\n", "epoch_psnr", "+=", "batch_psnr", "\n", "", "else", ":", "\n", "                ", "batch_psnr", "=", "calculate_psnr", "(", "sr_images", ",", "hr_images", ")", "\n", "epoch_psnr", "+=", "batch_psnr", ".", "data", ".", "item", "(", ")", "\n", "\n", "# show the last batch idx images", "\n", "", "", "if", "cfg", ".", "DEBUG", ".", "SHOW_SR_IMAGE", ":", "\n", "            ", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "if", "batch_idx", "==", "len", "(", "val_loader", ")", "-", "1", ":", "\n", "                    ", "draw_images", "(", "cfg", ",", "epoch", ",", "log_writer", ",", "lr_images", ",", "sr_images", ",", "hr_images", ",", "denormalize", ",", "flag", "=", "\"val\"", ")", "\n", "\n", "", "", "", "", "model", ".", "train", "(", ")", "\n", "\n", "epoch_losses", "=", "epoch_losses", "/", "float", "(", "batch_idx", "+", "1", ")", "\n", "\n", "if", "cfg", ".", "VALIDATION", ".", "KEEP_PSNR", ":", "\n", "\n", "        ", "dist", ".", "all_reduce", "(", "epoch_psnr", ",", "op", "=", "dist", ".", "reduce_op", ".", "SUM", ")", "\n", "dist", ".", "all_reduce", "(", "iter_idx", ",", "op", "=", "dist", ".", "reduce_op", ".", "SUM", ")", "\n", "\n", "output_psnr", "=", "epoch_psnr", ".", "data", ".", "item", "(", ")", "/", "iter_idx", ".", "data", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "output_psnr", "=", "epoch_psnr", "/", "float", "(", "batch_idx", "+", "1", ")", "\n", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "f\"Validation Epoch: [{epoch}/{total_epoch}] mean_losses : {epoch_losses} mean_psnr: {output_psnr}\"", ")", "\n", "\n", "record_scalars", "(", "log_writer", ",", "epoch_losses", ",", "output_psnr", ",", "epoch", ",", "flag", "=", "\"val\"", ")", "\n", "\n", "", "return", "epoch_losses", ",", "output_psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train.adjust_learning_rate": [[561, 581], ["float", "int", "int"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "cfg", ",", "epoch", ",", "batch_idx", ",", "optimizer", ",", "loader_length", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate\n    # Adapted from PyTorch Imagenet example:\n    # https://github.com/pytorch/examples/blob/master/imagenet/main.py\n    \"\"\"", "\n", "total_epochs", "=", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", "\n", "warm_epochs", "=", "cfg", ".", "TRAIN", ".", "WARM_EPOCHS", "\n", "if", "epoch", "<", "warm_epochs", ":", "\n", "        ", "epoch", "+=", "float", "(", "batch_idx", "+", "1", ")", "/", "loader_length", "\n", "lr_adj", "=", "1.", "/", "ngpus_per_node", "*", "(", "epoch", "*", "(", "ngpus_per_node", "-", "1", ")", "/", "warm_epochs", "+", "1", ")", "\n", "", "elif", "epoch", "<", "int", "(", "0.3", "*", "total_epochs", ")", ":", "\n", "        ", "lr_adj", "=", "1.", "\n", "", "elif", "epoch", "<", "int", "(", "0.6", "*", "total_epochs", ")", ":", "\n", "        ", "lr_adj", "=", "1e-1", "\n", "", "else", ":", "\n", "        ", "lr_adj", "=", "1e-2", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "cfg", ".", "TRAIN", ".", "BASE_LR", "*", "lr_adj", "\n", "", "return", "cfg", ".", "TRAIN", ".", "BASE_LR", "*", "lr_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.merge_image.merge_tta": [[33, 55], ["cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "numpy.mean().round().astype", "imageio.imwrite", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.mean().round", "numpy.mean", "numpy.array"], "function", ["None"], ["", "def", "merge_tta", "(", "data_name", ")", ":", "\n", "\n", "    ", "src_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "src_folder", ",", "data_name", ")", ")", "\n", "rot_90_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_90_folder", ",", "data_name", ")", ")", "\n", "rot_180_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_180_folder", ",", "data_name", ")", ")", "\n", "rot_270_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_270_folder", ",", "data_name", ")", ")", "\n", "flip_h_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_flip_h_folder", ",", "data_name", ")", ")", "\n", "flip_v_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_flip_v_folder", ",", "data_name", ")", ")", "\n", "bgr_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_bgr_folder", ",", "data_name", ")", ")", "\n", "\n", "src_img", "=", "cv2", ".", "cvtColor", "(", "src_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "rot_90_img", "=", "cv2", ".", "cvtColor", "(", "rot_90_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "rot_180_img", "=", "cv2", ".", "cvtColor", "(", "rot_180_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "rot_270_img", "=", "cv2", ".", "cvtColor", "(", "rot_270_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "flip_h_img", "=", "cv2", ".", "cvtColor", "(", "flip_h_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "flip_v_img", "=", "cv2", ".", "cvtColor", "(", "flip_v_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "bgr_img", "=", "cv2", ".", "cvtColor", "(", "bgr_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "imgs", "=", "[", "src_img", ",", "rot_90_img", ",", "rot_180_img", ",", "rot_270_img", ",", "flip_h_img", ",", "flip_v_img", ",", "bgr_img", "]", "\n", "image", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "imgs", ")", ",", "axis", "=", "0", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_tta_images", ",", "data_name", ")", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.eavlute_realblur.image_align": [[15, 63], ["numpy.ones_like", "numpy.eye", "cv2.warpPerspective", "cv2.warpPerspective", "cv2.findTransformECC", "numpy.ones_like", "numpy.sum", "numpy.sum", "cv2.cvtColor", "cv2.cvtColor"], "function", ["None"], ["def", "image_align", "(", "deblurred", ",", "gt", ")", ":", "\n", "# this function is based on kohler evaluation code", "\n", "  ", "z", "=", "deblurred", "\n", "c", "=", "np", ".", "ones_like", "(", "z", ")", "\n", "x", "=", "gt", "\n", "\n", "zs", "=", "(", "np", ".", "sum", "(", "x", "*", "z", ")", "/", "np", ".", "sum", "(", "z", "*", "z", ")", ")", "*", "z", "# simple intensity matching", "\n", "\n", "warp_mode", "=", "cv2", ".", "MOTION_HOMOGRAPHY", "\n", "warp_matrix", "=", "np", ".", "eye", "(", "3", ",", "3", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Specify the number of iterations.", "\n", "number_of_iterations", "=", "100", "\n", "\n", "termination_eps", "=", "1e-8", "\n", "\n", "criteria", "=", "(", "cv2", ".", "TERM_CRITERIA_EPS", "|", "cv2", ".", "TERM_CRITERIA_COUNT", ",", "\n", "number_of_iterations", ",", "termination_eps", ")", "\n", "\n", "# Run the ECC algorithm. The results are stored in warp_matrix.", "\n", "try", ":", "\n", "    ", "(", "cc", ",", "warp_matrix", ")", "=", "cv2", ".", "findTransformECC", "(", "cv2", ".", "cvtColor", "(", "x", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", ",", "cv2", ".", "cvtColor", "(", "zs", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", ",", "warp_matrix", ",", "warp_mode", ",", "criteria", ",", "inputMask", "=", "None", ",", "gaussFiltSize", "=", "3", ")", "\n", "# print(warp_matrix)", "\n", "", "except", "Exception", "as", "e", ":", "\n", "    ", "warp_matrix", "=", "warp_matrix", "\n", "\n", "", "target_shape", "=", "x", ".", "shape", "\n", "shift", "=", "warp_matrix", "\n", "\n", "zr", "=", "cv2", ".", "warpPerspective", "(", "\n", "zs", ",", "\n", "warp_matrix", ",", "\n", "(", "target_shape", "[", "1", "]", ",", "target_shape", "[", "0", "]", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_CUBIC", "+", "cv2", ".", "WARP_INVERSE_MAP", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_REFLECT", ")", "\n", "\n", "cr", "=", "cv2", ".", "warpPerspective", "(", "\n", "np", ".", "ones_like", "(", "zs", ",", "dtype", "=", "'float32'", ")", ",", "\n", "warp_matrix", ",", "\n", "(", "target_shape", "[", "1", "]", ",", "target_shape", "[", "0", "]", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_NEAREST", "+", "cv2", ".", "WARP_INVERSE_MAP", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "borderValue", "=", "0", ")", "\n", "\n", "zr", "=", "zr", "*", "cr", "\n", "xr", "=", "x", "*", "cr", "\n", "\n", "return", "zr", ",", "xr", ",", "cr", ",", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.eavlute_realblur.compute_psnr": [[64, 68], ["numpy.sum", "numpy.sum", "numpy.log10"], "function", ["None"], ["", "def", "compute_psnr", "(", "image_true", ",", "image_test", ",", "image_mask", ",", "data_range", "=", "None", ")", ":", "\n", "# this function is based on skimage.metrics.peak_signal_noise_ratio", "\n", "  ", "err", "=", "np", ".", "sum", "(", "(", "image_true", "-", "image_test", ")", "**", "2", ",", "dtype", "=", "np", ".", "float64", ")", "/", "np", ".", "sum", "(", "image_mask", ")", "\n", "return", "10", "*", "np", ".", "log10", "(", "(", "data_range", "**", "2", ")", "/", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.eavlute_realblur.compute_ssim": [[70, 81], ["skimage.metrics.structural_similarity", "int", "numpy.mean", "np.mean.sum().sum", "crop_cr1.sum().sum", "np.mean.sum", "crop_cr1.sum"], "function", ["None"], ["", "def", "compute_ssim", "(", "tar_img", ",", "prd_img", ",", "cr1", ")", ":", "\n", "    ", "ssim_pre", ",", "ssim_map", "=", "structural_similarity", "(", "tar_img", ",", "prd_img", ",", "multichannel", "=", "True", ",", "gaussian_weights", "=", "True", ",", "use_sample_covariance", "=", "False", ",", "data_range", "=", "1.0", ",", "full", "=", "True", ")", "\n", "ssim_map", "=", "ssim_map", "*", "cr1", "\n", "r", "=", "int", "(", "3.5", "*", "1.5", "+", "0.5", ")", "# radius as in ndimage", "\n", "win_size", "=", "2", "*", "r", "+", "1", "\n", "pad", "=", "(", "win_size", "-", "1", ")", "//", "2", "\n", "ssim", "=", "ssim_map", "[", "pad", ":", "-", "pad", ",", "pad", ":", "-", "pad", ",", ":", "]", "\n", "crop_cr1", "=", "cr1", "[", "pad", ":", "-", "pad", ",", "pad", ":", "-", "pad", ",", ":", "]", "\n", "ssim", "=", "ssim", ".", "sum", "(", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "0", ")", "/", "crop_cr1", ".", "sum", "(", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "ssim", "=", "np", ".", "mean", "(", "ssim", ")", "\n", "return", "ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.eavlute_realblur.proc": [[82, 96], ["cv2.cvtColor", "cv2.cvtColor", "eavlute_realblur.image_align", "eavlute_realblur.compute_psnr", "eavlute_realblur.compute_ssim", "cv2.imread", "cv2.imread", "cv2.cvtColor.astype", "cv2.cvtColor.astype"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.None.eavlute_realblur.image_align", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.eavlute_realblur.compute_psnr", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.eavlute_realblur.compute_ssim"], ["", "def", "proc", "(", "filename", ")", ":", "\n", "    ", "tar", ",", "prd", "=", "filename", "\n", "tar_img", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "tar", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "prd_img", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "prd", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "# print(\"tar\",tar_img.shape)", "\n", "# print(\"prd\",prd_img.shape)", "\n", "tar_img", "=", "tar_img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "prd_img", "=", "prd_img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "\n", "prd_img", ",", "tar_img", ",", "cr1", ",", "shift", "=", "image_align", "(", "prd_img", ",", "tar_img", ")", "\n", "\n", "PSNR", "=", "compute_psnr", "(", "tar_img", ",", "prd_img", ",", "cr1", ",", "data_range", "=", "1", ")", "\n", "SSIM", "=", "compute_ssim", "(", "tar_img", ",", "prd_img", ",", "cr1", ")", "\n", "return", "(", "PSNR", ",", "SSIM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.setup_seed": [[90, 97], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "setup_seed", "(", "seed", "=", "100", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.load_ckpt": [[99, 103], ["model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "load_ckpt", "(", "model", ",", "weights", ")", ":", "\n", "    ", "state_dict", "=", "torch", ".", "load", "(", "weights", ",", "map_location", "=", "\"cpu\"", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.translate_state_dict": [[105, 113], ["state_dict.items"], "function", ["None"], ["", "def", "translate_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'module'", "in", "key", ":", "\n", "            ", "new_state_dict", "[", "key", "[", "7", ":", "]", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "new_state_dict", "[", "key", "]", "=", "value", "\n", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.main_worker": [[115, 376], ["print", "data.utils.Metric_rank", "data.utils.Metric_rank", "data.utils.Metric_rank", "data.utils.Metric_rank", "data.utils.PSNR", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "data.utils.BatchAug", "optim.optimizer.Optimizer", "optim.optimizer.Optimizer.optimizer", "data.vanilar_dataset.NTIRE_Track2", "data.vanilar_dataset.NTIRE_Track2", "tensorboardX.SummaryWriter", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "math.ceil", "int", "range", "config.Config.Config", "int", "print", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.NTIRE2021_Deblur.CARN.CARN.Net", "train_goprol.load_ckpt", "print", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.cuda", "apex.parallel.LARC.LARC", "apex.amp.initialize", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.half", "torch.nn.parallel.DistributedDataParallel", "loss.generator_loss.MS_SSIM", "loss.generator_loss.EdgeLoss2", "loss.generator_loss.L1_Charbonnier", "loss.generator_loss.PerceptualLoss", "print", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "data.augments.DeNormalize", "int", "train_goprol.train", "os.path.exists", "os.makedirs", "model.NTIRE2020_Deblur_top.uniA.model_stage1.AtrousNet", "torch.nn.parallel.DataParallel", "loss.generator_loss.SSIM", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "len", "len", "len", "torch.utils.data.distributed.DistributedSampler.set_epoch", "train_goprol.val", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1.AtrousNet", "len", "train_goprol.translate_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_Upsample_Deep.AtrousNet_billinear_Wide", "train_goprol.translate_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train_goprol.translate_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.state_dict", "apex.parallel.LARC.LARC.state_dict", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.state_dict", "apex.parallel.LARC.LARC.state_dict", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.state_dict", "apex.parallel.LARC.LARC.state_dict", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_deblur_remix.AtrousNet_wavlet_remix", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_SRCNN_remix.SRCNN", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock", "model.NTIRE2021_Deblur.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.tools.utils.PSNR", "home.repos.pwc.inspect_result.flyegle_sdwnet.optim.optimizer.Optimizer.optimizer", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.load_ckpt", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.train", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.val", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.translate_state_dict", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.translate_state_dict", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.translate_state_dict"], ["", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "cfg", "=", "Config", "(", "args", ".", "config_file", ")", "(", ")", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "        ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "model_arch", "=", "\"{}-{}\"", ".", "format", "(", "\"SR\"", ",", "\"AtrousNet\"", ")", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "", "print", "(", "'rank: {} / {}'", ".", "format", "(", "args", ".", "rank", ",", "args", ".", "world_size", ")", ")", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", ")", "\n", "\n", "# metric", "\n", "", "", "train_loss_metric", "=", "Metric_rank", "(", "\"train_loss\"", ")", "\n", "train_psnr_metric", "=", "Metric_rank", "(", "\"train_psnr\"", ")", "\n", "train_metric", "=", "{", "\"loss\"", ":", "train_loss_metric", ",", "\n", "\"psnr\"", ":", "train_psnr_metric", "}", "\n", "\n", "val_loss_metric", "=", "Metric_rank", "(", "\"val_loss\"", ")", "\n", "val_psnr_metric", "=", "Metric_rank", "(", "\"val_psnr\"", ")", "\n", "val_metric", "=", "{", "\"loss\"", ":", "val_loss_metric", ",", "\n", "\"psnr\"", ":", "val_psnr_metric", "}", "\n", "\n", "# psnr", "\n", "calculate_psnr", "=", "PSNR", "(", "cfg", ")", "\n", "\n", "# model", "\n", "if", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"CARN\"", ":", "\n", "        ", "model", "=", "CARNNet", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet\"", ":", "\n", "        ", "model", "=", "AtrousNet", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNetElu\"", ":", "\n", "        ", "model", "=", "AtrousNetElu", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNetEluUpWide\"", ":", "\n", "        ", "model", "=", "AtrousNetEluUpWide", "(", "3", ",", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNetEluUpWideDlidation\"", ":", "\n", "        ", "model", "=", "AtrousNetEluUpWideDlidation", "(", "3", ",", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNetEluUpWideWaveletRemix\"", ":", "\n", "        ", "model", "=", "AtrousNet_wavlet_remix", "(", "3", ",", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"waveletSrcnn\"", ":", "\n", "        ", "model", "=", "SRCNN", "(", "3", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_billinear_Wide_dilated_srcnn\"", ":", "\n", "        ", "model", "=", "AtrousNet_billinear_Wide_dilated_srcnn", "(", "\n", "3", ",", "\n", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", "\n", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_SRCNN_tail\"", ":", "\n", "        ", "model", "=", "AtrousNet_SRCNN_tail", "(", "\n", "3", ",", "\n", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", ",", "\n", "efficientattention", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "EFFICIENT_ATTENTION", ",", "\n", "gcattention", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "GC_ATTENTION", "\n", ")", "\n", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_SRCNN_tail_no_upsample_elu\"", ":", "\n", "        ", "model", "=", "AtrousNet_SRCNN_tail_no_upsample_elu", "(", "\n", "3", ",", "\n", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", "\n", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_dilation_effiattention\"", ":", "\n", "        ", "model", "=", "AtrousNet_billinear_EfficientAttention", "(", "\n", "3", ",", "\n", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", "\n", ")", "\n", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_dilation_gc\"", ":", "\n", "        ", "model", "=", "AtrousNet_billinear_ContextBlock", "(", "\n", "3", ",", "\n", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", "\n", ")", "\n", "\n", "# two output reuslt", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_billinear_Wide_dilated_srcnn_output\"", ":", "\n", "        ", "model", "=", "AtrousNet_billinear_Wide_dilated_srcnn_output", "(", "\n", "3", ",", "3", ",", "\n", "num_blocks", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NUM_BLOCKS", ",", "\n", "d_mult", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "WIDTH", ",", "\n", "srcnn_add", "=", "cfg", ".", "MODEL", ".", "SRCNN", ".", "ADD", ",", "\n", "srcnn_smooth", "=", "cfg", ".", "MODEL", ".", "SRCNN", ".", "SMOOTH", "\n", ")", "\n", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "PRETRAIN", ":", "\n", "        ", "model", "=", "load_ckpt", "(", "model", ",", "cfg", ".", "MODEL", ".", "WEIGHTS", ")", "\n", "\n", "# model = VDSR(in_channels=3, out_channels=3)", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "\"================{}=============\"", ".", "format", "(", "model_arch", ")", ")", "\n", "# print(model)", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "# batch augments", "\n", "", "batch_aug", "=", "BatchAug", "(", "cfg", ")", "\n", "\n", "# optim", "\n", "Optim", "=", "Optimizer", "(", "cfg", ")", "\n", "optimizer", "=", "Optim", ".", "optimizer", "(", "model", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "LARS", ":", "\n", "        ", "optimizer", "=", "LARC", "(", "optimizer", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "MIX", ":", "\n", "        ", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "\"O2\"", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "FP16", ":", "\n", "# model, optimizer = amp.initialize(model, optimizer, opt_level=\"O2\")", "\n", "        ", "model", "=", "model", ".", "half", "(", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "dataparallel", ":", "\n", "            ", "model", "=", "DataParallel", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "model", "\n", "\n", "", "", "device", "=", "model", ".", "device", "\n", "\n", "ssim_criterion", "=", "None", "\n", "edge_criterion", "=", "None", "\n", "\n", "vggloss", "=", "None", "\n", "\n", "if", "cfg", ".", "LOSS", ".", "MS_SSIM", ":", "\n", "        ", "ssim_criterion", "=", "MS_SSIM", "(", ")", "\n", "", "elif", "cfg", ".", "LOSS", ".", "SSIM", ":", "\n", "        ", "ssim_criterion", "=", "SSIM", "(", ")", "\n", "\n", "", "if", "cfg", ".", "LOSS", ".", "EDGE_LOSS", ":", "\n", "        ", "edge_criterion", "=", "EdgeLoss2", "(", ")", "\n", "\n", "# loss", "\n", "", "if", "cfg", ".", "LOSS", ".", "L1_Charbonnier", ":", "\n", "        ", "criterion", "=", "L1_Charbonnier", "(", "eps", "=", "cfg", ".", "LOSS", ".", "EPS", ")", "\n", "", "elif", "cfg", ".", "LOSS", ".", "L1", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "# vgg loss", "\n", "", "if", "cfg", ".", "SRCNN_LOSS", ".", "VGG_LOSS", "or", "cfg", ".", "LOSS", ".", "VGG_LOSS", ":", "\n", "        ", "vggloss", "=", "PerceptualLoss", "(", "vgg_type", "=", "cfg", ".", "SRCNN_LOSS", ".", "VGG_TYPE", ")", "\n", "\n", "# dataset", "\n", "", "train_dataset", "=", "NTIRE_Track2", "(", "cfg", ",", "train", "=", "True", ")", "\n", "validation_dataset", "=", "NTIRE_Track2", "(", "cfg", ",", "train", "=", "False", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "\"Training dataset length: \"", ",", "len", "(", "train_dataset", ")", ")", "\n", "print", "(", "\"Validation dataset length: \"", ",", "len", "(", "validation_dataset", ")", ")", "\n", "# sampler", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "DistributedSampler", "(", "train_dataset", ")", "\n", "validation_sampler", "=", "DistributedSampler", "(", "validation_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "validation_sampler", "=", "None", "\n", "\n", "# logs", "\n", "", "log_writer", "=", "SummaryWriter", "(", "cfg", ".", "CHEKCPOINTS", ".", "LOGS_PATH", ")", "\n", "\n", "if", "cfg", ".", "IPNUT", ".", "NORM", ":", "\n", "        ", "denormalize", "=", "DeNormalize", "(", "cfg", ".", "INPUT", ".", "MEAN", ",", "cfg", ".", "IPNUT", ".", "STD", ")", "\n", "", "else", ":", "\n", "        ", "denormalize", "=", "None", "\n", "\n", "# dataloader", "\n", "", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", "\n", ")", "\n", "\n", "validation_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "validation_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "VALIDATION", ".", "BATCH_SIZE", ",", "\n", "shuffle", "=", "(", "validation_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "cfg", ".", "VALIDATION", ".", "NUM_WORKERS", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "validation_sampler", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "\n", "batch_iter", "=", "0", "\n", "train_batch", "=", "math", ".", "ceil", "(", "len", "(", "train_dataset", ")", "/", "(", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "*", "ngpus_per_node", ")", ")", "\n", "total_batch", "=", "train_batch", "*", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", "\n", "no_warmup_total_batch", "=", "int", "(", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", "-", "cfg", ".", "TRAIN", ".", "WARM_EPOCHS", ")", "*", "train_batch", "\n", "\n", "best_loss", ",", "best_psnr", "=", "100.0", ",", "0.0", "\n", "batch_count", "=", "0", "\n", "batch_total_count", "=", "int", "(", "len", "(", "train_loader", ")", "*", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", "//", "cfg", ".", "VALIDATION", ".", "ITER", ")", "\n", "\n", "# training loop", "\n", "for", "epoch", "in", "range", "(", "1", ",", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", "+", "1", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "# train for epoch", "\n", "", "batch_iter", "=", "train", "(", "cfg", ",", "train_loader", ",", "validation_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "batch_aug", ",", "epoch", ",", "args", ",", "\n", "batch_iter", ",", "total_batch", ",", "train_batch", ",", "no_warmup_total_batch", ",", "\n", "log_writer", ",", "calculate_psnr", ",", "train_metric", ",", "denormalize", ",", "ssim_criterion", ",", "edge_criterion", ",", "vggloss", ",", "\n", "batch_count", ",", "batch_total_count", ")", "\n", "\n", "# control the validaiton calculate step", "\n", "if", "cfg", ".", "VALIDATION", ".", "USE", "and", "(", "epoch", "%", "cfg", ".", "VALIDATION", ".", "INTERVAL", ")", "==", "0", "and", "epoch", ">=", "cfg", ".", "VALIDATION", ".", "STEP", ":", "\n", "            ", "val_loss", ",", "val_psnr", "=", "val", "(", "cfg", ",", "validation_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", ",", "args", ",", "log_writer", ",", "calculate_psnr", ",", "denormalize", "=", "denormalize", ")", "\n", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "# save best loss", "\n", "                ", "if", "val_loss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "val_loss", "\n", "state_dict", "=", "translate_state_dict", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", "+", "'/'", "+", "model_arch", "+", "f'_best_loss_{best_loss}'", "+", "'.pth'", ")", "\n", "\n", "# save best psnr", "\n", "", "if", "val_psnr", ">", "best_psnr", ":", "\n", "                    ", "best_psnr", "=", "val_psnr", "\n", "state_dict", "=", "translate_state_dict", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "+", "f'_best_psnr_{best_psnr}'", "+", "'.pth'", ")", "\n", "\n", "", "", "", "if", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "            ", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "state_dict", "=", "translate_state_dict", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "+", "'_epoch_{}'", ".", "format", "(", "epoch", "+", "1", ")", "+", "'.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.record_scalars": [[379, 382], ["log_writer.add_scalar", "log_writer.add_scalar"], "function", ["None"], ["", "", "", "", "def", "record_scalars", "(", "log_writer", ",", "mean_loss", ",", "mean_psnr", ",", "epoch", ",", "flag", "=", "\"train\"", ")", ":", "\n", "    ", "log_writer", ".", "add_scalar", "(", "f\"{flag}/epoch_loss\"", ",", "mean_loss", ",", "epoch", ")", "\n", "log_writer", ".", "add_scalar", "(", "f\"{flag}/epoch_psnr\"", ",", "mean_psnr", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.record_log": [[385, 389], ["log_writer.add_scalar", "log_writer.add_scalar", "log_writer.add_scalar", "losses.data.item"], "function", ["None"], ["", "def", "record_log", "(", "log_writer", ",", "losses", ",", "lr", ",", "batch_idx", ",", "batch_time", ")", ":", "\n", "    ", "log_writer", ".", "add_scalar", "(", "\"train/l1_loss\"", ",", "losses", ".", "data", ".", "item", "(", ")", ",", "batch_idx", ")", "\n", "log_writer", ".", "add_scalar", "(", "\"train/learning_rate\"", ",", "lr", ",", "batch_idx", ")", "\n", "log_writer", ".", "add_scalar", "(", "\"train/batch_time\"", ",", "batch_time", ",", "batch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.draw_images": [[392, 429], ["isinstance", "denormalize", "denormalize", "denormalize", "random.choice", "list", "torchvision.utils.make_grid.clamp_", "torchvision.utils.make_grid.clamp_", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "log_writer.add_images", "log_writer.add_images", "log_writer.add_images", "range", "torchvision.utils.make_grid.clamp_", "torchvision.utils.make_grid.clamp_"], "function", ["None"], ["", "def", "draw_images", "(", "cfg", ",", "epoch", ",", "log_writer", ",", "lr_images", ",", "sr_images", ",", "hr_images", ",", "denormalize", ",", "flag", "=", "\"train\"", ")", ":", "\n", "    ", "\"\"\"record the sr images\n    \"\"\"", "\n", "max_numbers", "=", "cfg", ".", "DEBUG", ".", "MAX_NUMBERS", "\n", "if", "denormalize", "is", "not", "None", ":", "\n", "        ", "lr_images", "=", "denormalize", "(", "lr_images", ")", "\n", "sr_images", "=", "denormalize", "(", "sr_images", ")", "\n", "hr_images", "=", "denormalize", "(", "hr_images", ")", "\n", "\n", "", "assert", "isinstance", "(", "sr_images", ",", "torch", ".", "Tensor", ")", ",", "\"images must be a tensor with BXCXHXW or CXHXW\"", "\n", "if", "max_numbers", "==", "1", "and", "max_numbers", "<=", "sr_images", ".", "shape", "[", "0", "]", ":", "\n", "        ", "indices", "=", "random", ".", "choice", "(", "list", "(", "range", "(", "sr_images", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "lr_image", "=", "lr_images", "[", "indices", ",", ":", ",", ":", ",", ":", "]", "\n", "sr_image", "=", "sr_images", "[", "indices", ",", ":", ",", ":", ",", ":", "]", "\n", "hr_image", "=", "hr_images", "[", "indices", ",", ":", ",", ":", ",", ":", "]", "\n", "if", "cfg", ".", "INPUT", ".", "NORM", "==", "255", ":", "\n", "            ", "sr_image", ".", "clamp_", "(", "0", ",", "255", ")", "\n", "", "else", ":", "\n", "            ", "sr_image", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "", "", "elif", "max_numbers", ">", "1", "and", "max_numbers", "<=", "sr_images", ".", "shape", "[", "0", "]", ":", "\n", "        ", "lr_image", "=", "lr_images", "[", ":", "max_numbers", ",", ":", ",", ":", ",", ":", "]", "\n", "sr_image", "=", "sr_images", "[", ":", "max_numbers", ",", ":", ",", ":", ",", ":", "]", "\n", "hr_image", "=", "hr_images", "[", ":", "max_numbers", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "lr_image", "=", "make_grid", "(", "lr_image", ",", "nrow", "=", "max_numbers", ",", "padding", "=", "cfg", ".", "DEBUG", ".", "PADDING", ")", "\n", "sr_image", "=", "make_grid", "(", "sr_image", ",", "nrow", "=", "max_numbers", ",", "padding", "=", "cfg", ".", "DEBUG", ".", "PADDING", ")", "\n", "hr_image", "=", "make_grid", "(", "hr_image", ",", "nrow", "=", "max_numbers", ",", "padding", "=", "cfg", ".", "DEBUG", ".", "PADDING", ")", "\n", "\n", "if", "cfg", ".", "INPUT", ".", "RANGE", "==", "255", ":", "\n", "            ", "sr_image", ".", "clamp_", "(", "0", ",", "255", ")", "\n", "", "else", ":", "\n", "            ", "sr_image", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "", "log_writer", ".", "add_images", "(", "f\"{flag}/lr_image\"", ",", "lr_image", ",", "epoch", ",", "dataformats", "=", "\"CHW\"", ")", "\n", "log_writer", ".", "add_images", "(", "f\"{flag}/sr_image\"", ",", "sr_image", ",", "epoch", ",", "dataformats", "=", "\"CHW\"", ")", "\n", "log_writer", ".", "add_images", "(", "f\"{flag}/hr_image\"", ",", "hr_image", ",", "epoch", ",", "dataformats", "=", "\"CHW\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.train": [[431, 674], ["model.train", "len", "enumerate", "train_goprol.record_scalars", "time.time", "lr_images.half.to", "hr_images.half.to", "calculate_psnr", "optimizer.zero_grad", "train_metric[].update", "train_metric[].update", "optim.optimizer.adjust_learning_rate_for_cosine_decay", "train_goprol.adjust_learning_rate", "lr_images.half.half", "hr_images.half.half", "batch_aug", "model", "model", "vggloss", "criterion", "vggloss", "criterion.backward", "optimizer.step", "optimizer.zero_grad", "time.time", "criterion.data.item", "calculate_psnr.data.item", "train_goprol.record_log", "train_goprol.val", "criterion", "edge_criterion", "ssim_criterion", "criterion", "edge_criterion", "apex.amp.scale_loss", "scaled_loss.backward", "optimizer.step", "optimizer.zero_grad", "train_goprol.translate_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train_goprol.translate_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "criterion", "ssim_criterion", "vggloss", "criterion", "ssim_criterion", "print", "print", "print", "train_goprol.draw_images", "model.state_dict", "optimizer.state_dict", "model.state_dict", "optimizer.state_dict", "criterion", "ssim_criterion", "print", "print", "criterion", "ssim_criterion", "criterion", "criterion.data.item", "criterion.data.item", "ssim_criterion.data.item", "criterion.item", "vggloss.item", "calculate_psnr.data.item", "datetime.datetime.now().strftime", "criterion.data.item", "criterion.data.item", "ssim_criterion.data.item", "vggloss.item", "calculate_psnr.data.item", "datetime.datetime.now().strftime", "criterion.data.item", "criterion.data.item", "vggloss.data.item", "ssim_criterion.data.item", "calculate_psnr.data.item", "datetime.datetime.now().strftime", "criterion.data.item", "criterion.data.item", "ssim_criterion.data.item", "calculate_psnr.data.item", "datetime.datetime.now().strftime", "criterion.data.item", "calculate_psnr.data.item", "datetime.datetime.now().strftime", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.train", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.record_scalars", "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.psnr_ssim.calculate_psnr", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.Metric_rank.update", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.Metric_rank.update", "home.repos.pwc.inspect_result.flyegle_sdwnet.optim.optimizer.adjust_learning_rate_for_cosine_decay", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.adjust_learning_rate", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.record_log", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.val", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.translate_state_dict", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.translate_state_dict", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.draw_images"], ["", "", "def", "train", "(", "cfg", ",", "train_loader", ",", "validation_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "batch_aug", ",", "epoch", ",", "args", ",", "\n", "batch_iter", ",", "total_batch", ",", "train_batch", ",", "no_warmup_total_batch", ",", "log_writer", ",", "\n", "calculate_psnr", ",", "train_metric", ",", "denormalize", ",", "\n", "ssim_criterion", ",", "\n", "edge_criterion", ",", "\n", "vggloss", ",", "\n", "batch_count", ",", "\n", "batch_total_count", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "device", "=", "model", ".", "device", "\n", "loader_length", "=", "len", "(", "train_loader", ")", "\n", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "batch_start", "=", "time", ".", "time", "(", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "COSINE", ":", "\n", "# cosine learning rate", "\n", "            ", "lr", "=", "adjust_learning_rate_for_cosine_decay", "(", "\n", "cfg", ",", "epoch", ",", "batch_idx", "+", "1", ",", "optimizer", ",", "train_batch", ",", "no_warmup_total_batch", ",", "loader_length", "\n", ")", "\n", "", "else", ":", "\n", "# step learning rate", "\n", "            ", "lr", "=", "adjust_learning_rate", "(", "\n", "cfg", ",", "epoch", ",", "batch_idx", "+", "1", ",", "optimizer", ",", "loader_length", "\n", ")", "\n", "# forward", "\n", "", "lr_images", ",", "hr_images", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "FP16", ":", "\n", "            ", "lr_images", "=", "lr_images", ".", "half", "(", ")", "\n", "hr_images", "=", "hr_images", ".", "half", "(", ")", "\n", "\n", "", "lr_images", "=", "lr_images", ".", "to", "(", "device", ")", "\n", "hr_images", "=", "hr_images", ".", "to", "(", "device", ")", "\n", "\n", "# batch augments", "\n", "if", "cfg", ".", "DATAAUG", ".", "MIXUP", "or", "cfg", ".", "DATAAUG", ".", "CUTMIX", "or", "cfg", ".", "DATAAUG", ".", "CUTBLUR", ":", "\n", "            ", "lr_images", ",", "hr_images", "=", "batch_aug", "(", "lr_images", ",", "hr_images", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_billinear_Wide_dilated_srcnn_output\"", ":", "\n", "            ", "sr_images", ",", "srcnn_sr_images", "=", "model", "(", "lr_images", ")", "\n", "", "else", ":", "\n", "            ", "sr_images", "=", "model", "(", "lr_images", ")", "\n", "\n", "# loss function config", "\n", "\n", "", "if", "cfg", ".", "LOSS", ".", "EDGE_LOSS", ":", "\n", "            ", "if", "cfg", ".", "LOSS", ".", "SSIM", ":", "\n", "                ", "l1_losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "edge", "=", "edge_criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "ssim", "=", "ssim_criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "losses", "=", "cfg", ".", "LOSS", ".", "L1_ALPHA", "*", "l1_losses", "+", "cfg", ".", "LOSS", ".", "EDGE_ALPHA", "*", "edge", "+", "cfg", ".", "LOSS", ".", "SSIM_ALPHA", "*", "ssim", "\n", "\n", "", "else", ":", "\n", "                ", "l1_losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "edge", "=", "edge_criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "losses", "=", "cfg", ".", "LOSS", ".", "L1_ALPHA", "*", "l1_losses", "+", "cfg", ".", "LOSS", ".", "EDGE_ALPHA", "*", "edge", "\n", "", "", "else", ":", "\n", "# cl1 + ms ssim", "\n", "            ", "if", "cfg", ".", "LOSS", ".", "VGG_LOSS", ":", "\n", "                ", "if", "cfg", ".", "LOSS", ".", "SSIM", ":", "\n", "                    ", "l1_losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "ssim", "=", "ssim_criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "vgg_loss", "=", "vggloss", "(", "sr_images", ",", "hr_images", ")", "\n", "losses", "=", "cfg", ".", "LOSS", ".", "L1_ALPHA", "*", "l1_losses", "+", "cfg", ".", "LOSS", ".", "SSIM_ALPHA", "*", "(", "1", "-", "ssim", ")", "+", "cfg", ".", "LOSS", ".", "VGG_ALPHA", "*", "vgg_loss", "\n", "", "", "else", ":", "\n", "                ", "if", "cfg", ".", "LOSS", ".", "MS_SSIM", ":", "\n", "                    ", "l1_losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "ssim", "=", "ssim_criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "losses", "=", "cfg", ".", "LOSS", ".", "L1_ALPHA", "*", "l1_losses", "+", "cfg", ".", "LOSS", ".", "SSIM_ALPHA", "*", "(", "1", "-", "ssim", ")", "\n", "# cl1 + ssim", "\n", "", "elif", "cfg", ".", "LOSS", ".", "SSIM", ":", "\n", "                    ", "l1_losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "ssim", "=", "ssim_criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "losses", "=", "cfg", ".", "LOSS", ".", "L1_ALPHA", "*", "l1_losses", "+", "cfg", ".", "LOSS", ".", "SSIM_ALPHA", "*", "(", "1", "-", "ssim", ")", "\n", "# cl1 + negitive ssim", "\n", "", "elif", "cfg", ".", "LOSS", ".", "NEGITIVE_SSIM", ":", "\n", "                    ", "l1_losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "ssim", "=", "ssim_criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "losses", "=", "cfg", ".", "LOSS", ".", "L1_ALPHA", "*", "l1_losses", "+", "-", "1", "*", "cfg", ".", "LOSS", ".", "SSIM_ALPHA", "*", "ssim", "\n", "# only cl1loss", "\n", "", "else", ":", "\n", "                    ", "losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "\n", "# SRCNN LOSS", "\n", "", "", "", "if", "cfg", ".", "SRCNN_LOSS", ".", "VGG_LOSS", ":", "\n", "            ", "srcnn_vgg_losses", "=", "vggloss", "(", "srcnn_sr_images", ",", "hr_images", ")", "\n", "srcnn_losses", "=", "cfg", ".", "SRCNN_LOSS", ".", "VGG_ALPHA", "*", "srcnn_vgg_losses", "\n", "\n", "", "if", "cfg", ".", "SRCNN_LOSS", ".", "L1_Charbonnier", "and", "cfg", ".", "SRCNN_LOSS", ".", "VGG_LOSS", ":", "\n", "            ", "srcnn_l1_losses", "=", "criterion", "(", "srcnn_sr_images", ",", "hr_images", ")", "\n", "srcnn_vgg_losses", "=", "vggloss", "(", "srcnn_sr_images", ",", "hr_images", ")", "\n", "srcnn_losses", "=", "cfg", ".", "SRCNN_LOSS", ".", "L1_ALPHA", "*", "srcnn_l1_losses", "+", "cfg", ".", "SRCNN_LOSS", ".", "VGG_ALPHA", "*", "srcnn_vgg_losses", "\n", "\n", "# use the srcnn output with losses", "\n", "", "if", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_billinear_Wide_dilated_srcnn_output\"", ":", "\n", "            ", "losses", "=", "losses", "+", "srcnn_losses", "*", "0.1", "\n", "\n", "# loss regularization", "\n", "", "if", "cfg", ".", "TRAIN", ".", "GRAD_ACCUMULATE", "and", "cfg", ".", "TRAIN", ".", "STEP", ":", "\n", "            ", "losses", "=", "losses", "/", "cfg", ".", "TRAIN", ".", "GRAD_ACCUMULATE_STEP", "\n", "\n", "", "batch_psnr", "=", "calculate_psnr", "(", "sr_images", ",", "hr_images", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MIX", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "losses", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "losses", ".", "backward", "(", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "GRAD_ACCUMULATE", ":", "\n", "            ", "if", "(", "batch_idx", "+", "1", ")", "%", "cfg", ".", "TRAIN", ".", "GRAD_ACCUMULATE_STEP", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "batch_time", "=", "time", ".", "time", "(", ")", "-", "batch_start", "\n", "\n", "batch_iter", "+=", "1", "\n", "batch_idx", "+=", "1", "\n", "\n", "train_metric", "[", "\"loss\"", "]", ".", "update", "(", "losses", ".", "data", ".", "item", "(", ")", ")", "\n", "train_metric", "[", "\"psnr\"", "]", ".", "update", "(", "batch_psnr", ".", "data", ".", "item", "(", ")", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "if", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_billinear_Wide_dilated_srcnn_output\"", ":", "\n", "                ", "if", "cfg", ".", "SRCNN_LOSS", ".", "L1_Charbonnier", ":", "\n", "                    ", "print", "(", "\"Training Epoch: [{}/{}] batchidx:[{}/{}] batchiter: [{}/{}] batch_losses: {:.4f} l1_loss: {:.4f} ssim: {:.4f} srcnn_l1_loss: {:.4f} srcnn_vggloss:{:.4f} psnr: {:.4f} LearningRate: {:.10f} Batchtime: {:.4f}s Datetime: {}\"", ".", "format", "(", "\n", "epoch", ",", "\n", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", ",", "\n", "batch_idx", ",", "\n", "train_batch", ",", "\n", "batch_iter", ",", "\n", "total_batch", ",", "\n", "losses", ".", "data", ".", "item", "(", ")", ",", "\n", "l1_losses", ".", "data", ".", "item", "(", ")", ",", "\n", "ssim", ".", "data", ".", "item", "(", ")", ",", "\n", "srcnn_l1_losses", ".", "item", "(", ")", ",", "\n", "srcnn_vgg_losses", ".", "item", "(", ")", ",", "\n", "batch_psnr", ".", "data", ".", "item", "(", ")", ",", "\n", "lr", ",", "\n", "batch_time", ",", "\n", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"Training Epoch: [{}/{}] batchidx:[{}/{}] batchiter: [{}/{}] batch_losses: {:.4f} l1_loss: {:.4f} ssim: {:.4f} srcnn_vggloss:{:.4f} psnr: {:.4f} LearningRate: {:.10f} Batchtime: {:.4f}s Datetime: {}\"", ".", "format", "(", "\n", "epoch", ",", "\n", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", ",", "\n", "batch_idx", ",", "\n", "train_batch", ",", "\n", "batch_iter", ",", "\n", "total_batch", ",", "\n", "losses", ".", "data", ".", "item", "(", ")", ",", "\n", "l1_losses", ".", "data", ".", "item", "(", ")", ",", "\n", "ssim", ".", "data", ".", "item", "(", ")", ",", "\n", "srcnn_vgg_losses", ".", "item", "(", ")", ",", "\n", "batch_psnr", ".", "data", ".", "item", "(", ")", ",", "\n", "lr", ",", "\n", "batch_time", ",", "\n", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "cfg", ".", "LOSS", ".", "VGG_LOSS", ":", "\n", "                    ", "print", "(", "\"Training Epoch: [{}/{}] batchidx:[{}/{}] batchiter: [{}/{}] batch_losses: {:.4f} l1_loss: {:.4f} vggloss: {:.4f} ssim: {:.4f} psnr: {:.4f} LearningRate: {:.10f} Batchtime: {:.4f}s Datetime: {}\"", ".", "format", "(", "\n", "epoch", ",", "\n", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", ",", "\n", "batch_idx", ",", "\n", "train_batch", ",", "\n", "batch_iter", ",", "\n", "total_batch", ",", "\n", "losses", ".", "data", ".", "item", "(", ")", ",", "\n", "l1_losses", ".", "data", ".", "item", "(", ")", ",", "\n", "vgg_loss", ".", "data", ".", "item", "(", ")", ",", "\n", "ssim", ".", "data", ".", "item", "(", ")", ",", "\n", "batch_psnr", ".", "data", ".", "item", "(", ")", ",", "\n", "lr", ",", "\n", "batch_time", ",", "\n", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ")", ")", "\n", "", "elif", "cfg", ".", "LOSS", ".", "SSIM", "or", "cfg", ".", "LOSS", ".", "MS_SSIM", ":", "\n", "                    ", "print", "(", "\"Training Epoch: [{}/{}] batchidx:[{}/{}] batchiter: [{}/{}] batch_losses: {:.4f} l1_loss: {:.4f} ssim: {:.4f} psnr: {:.4f} LearningRate: {:.10f} Batchtime: {:.4f}s Datetime: {}\"", ".", "format", "(", "\n", "epoch", ",", "\n", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", ",", "\n", "batch_idx", ",", "\n", "train_batch", ",", "\n", "batch_iter", ",", "\n", "total_batch", ",", "\n", "losses", ".", "data", ".", "item", "(", ")", ",", "\n", "l1_losses", ".", "data", ".", "item", "(", ")", ",", "\n", "ssim", ".", "data", ".", "item", "(", ")", ",", "\n", "batch_psnr", ".", "data", ".", "item", "(", ")", ",", "\n", "lr", ",", "\n", "batch_time", ",", "\n", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"Training Epoch: [{}/{}] batchidx:[{}/{}] batchiter: [{}/{}] batch_losses: {:.4f} psnr: {:.4f} LearningRate: {:.10f} Batchtime: {:.4f}s Datetime: {}\"", ".", "format", "(", "\n", "epoch", ",", "\n", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", ",", "\n", "batch_idx", ",", "\n", "train_batch", ",", "\n", "batch_iter", ",", "\n", "total_batch", ",", "\n", "losses", ".", "data", ".", "item", "(", ")", ",", "\n", "batch_psnr", ".", "data", ".", "item", "(", ")", ",", "\n", "lr", ",", "\n", "batch_time", ",", "\n", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ")", ")", "\n", "\n", "", "", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "# batch record", "\n", "            ", "record_log", "(", "log_writer", ",", "losses", ",", "lr", ",", "batch_iter", ",", "batch_time", ")", "\n", "if", "batch_idx", "==", "1", ":", "\n", "                ", "if", "cfg", ".", "DEBUG", ".", "SHOW_SR_IMAGE", ":", "\n", "                    ", "draw_images", "(", "cfg", ",", "epoch", ",", "log_writer", ",", "lr_images", ",", "sr_images", ",", "hr_images", ",", "denormalize", ",", "flag", "=", "\"train\"", ")", "\n", "\n", "# validation for iter", "\n", "", "", "", "if", "cfg", ".", "VALIDATION", ".", "USE", "and", "(", "batch_iter", "%", "cfg", ".", "VALIDATION", ".", "ITER", ")", "==", "0", ":", "\n", "            ", "batch_count", "+=", "1", "\n", "val_loss", ",", "val_psnr", "=", "val", "(", "cfg", ",", "validation_loader", ",", "model", ",", "criterion", ",", "batch_count", ",", "batch_total_count", ",", "args", ",", "log_writer", ",", "calculate_psnr", ",", "denormalize", "=", "denormalize", ")", "\n", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "best_loss", "=", "val_loss", "\n", "state_dict", "=", "translate_state_dict", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "+", "f'_best_loss_{best_loss}'", "+", "'.pth'", ")", "\n", "\n", "best_psnr", "=", "val_psnr", "\n", "state_dict", "=", "translate_state_dict", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "cfg", ".", "CHEKCPOINTS", ".", "CKPT_PATH", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "+", "f'_best_psnr_{best_psnr}'", "+", "'.pth'", ")", "\n", "\n", "# epoch record", "\n", "", "", "", "record_scalars", "(", "log_writer", ",", "train_metric", "[", "\"loss\"", "]", ".", "average", ",", "train_metric", "[", "\"psnr\"", "]", ".", "average", ",", "epoch", ",", "flag", "=", "\"train\"", ")", "\n", "\n", "return", "batch_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.val": [[676, 741], ["model.eval", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "enumerate", "model.train", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "lr_images.half.to", "hr_images.half.to", "float", "torch.all_reduce", "torch.all_reduce", "print", "train_goprol.record_scalars", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "lr_images.half.half", "hr_images.half.half", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "criterion", "criterion.data.item", "epoch_psnr.data.item", "torch.tensor().cuda().float.data.item", "float", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "model", "model", "time.time", "utils.calc_psnr_for_val.get_psnr", "calculate_psnr", "calculate_psnr.data.item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "train_goprol.draw_images", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.train", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.record_scalars", "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.calc_psnr_for_val.get_psnr", "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.psnr_ssim.calculate_psnr", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.draw_images"], ["", "def", "val", "(", "cfg", ",", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "total_epoch", ",", "args", ",", "log_writer", ",", "calculate_psnr", ",", "denormalize", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "device", "=", "model", ".", "device", "\n", "\n", "epoch_losses", ",", "epoch_psnr", "=", "0.0", ",", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "iter_idx", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# forward", "\n", "        ", "lr_images", ",", "hr_images", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "iter_idx", "+=", "lr_images", ".", "shape", "[", "0", "]", "\n", "# print(f\"val: {batch_idx}+{lr_images.shape[0]}\")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "FP16", ":", "\n", "            ", "lr_images", "=", "lr_images", ".", "half", "(", ")", "\n", "hr_images", "=", "hr_images", ".", "half", "(", ")", "\n", "\n", "", "lr_images", "=", "lr_images", ".", "to", "(", "device", ")", "\n", "hr_images", "=", "hr_images", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "NAME", "==", "\"AtrousNet_billinear_Wide_dilated_srcnn_output\"", ":", "\n", "                ", "sr_images", ",", "_", "=", "model", "(", "lr_images", ")", "\n", "", "else", ":", "\n", "                ", "sr_images", "=", "model", "(", "lr_images", ")", "\n", "\n", "", "batch_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "# losses", "\n", "batch_losses", "=", "criterion", "(", "sr_images", ",", "hr_images", ")", "\n", "epoch_losses", "+=", "batch_losses", ".", "data", ".", "item", "(", ")", "\n", "\n", "if", "cfg", ".", "VALIDATION", ".", "KEEP_PSNR", ":", "\n", "                ", "batch_psnr", "=", "get_psnr", "(", "sr_images", ",", "hr_images", ")", "\n", "epoch_psnr", "+=", "batch_psnr", "\n", "", "else", ":", "\n", "                ", "batch_psnr", "=", "calculate_psnr", "(", "sr_images", ",", "hr_images", ")", "\n", "epoch_psnr", "+=", "batch_psnr", ".", "data", ".", "item", "(", ")", "\n", "\n", "# show the last batch idx images", "\n", "", "", "if", "cfg", ".", "DEBUG", ".", "SHOW_SR_IMAGE", ":", "\n", "            ", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "if", "batch_idx", "==", "len", "(", "val_loader", ")", "-", "1", ":", "\n", "                    ", "draw_images", "(", "cfg", ",", "epoch", ",", "log_writer", ",", "lr_images", ",", "sr_images", ",", "hr_images", ",", "denormalize", ",", "flag", "=", "\"val\"", ")", "\n", "\n", "", "", "", "", "model", ".", "train", "(", ")", "\n", "\n", "epoch_losses", "=", "epoch_losses", "/", "float", "(", "batch_idx", "+", "1", ")", "\n", "\n", "if", "cfg", ".", "VALIDATION", ".", "KEEP_PSNR", ":", "\n", "\n", "        ", "dist", ".", "all_reduce", "(", "epoch_psnr", ",", "op", "=", "dist", ".", "reduce_op", ".", "SUM", ")", "\n", "dist", ".", "all_reduce", "(", "iter_idx", ",", "op", "=", "dist", ".", "reduce_op", ".", "SUM", ")", "\n", "\n", "output_psnr", "=", "epoch_psnr", ".", "data", ".", "item", "(", ")", "/", "iter_idx", ".", "data", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "output_psnr", "=", "epoch_psnr", "/", "float", "(", "batch_idx", "+", "1", ")", "\n", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "f\"Validation Epoch: [{epoch}/{total_epoch}] mean_losses : {epoch_losses} mean_psnr: {output_psnr}\"", ")", "\n", "\n", "record_scalars", "(", "log_writer", ",", "epoch_losses", ",", "output_psnr", ",", "epoch", ",", "flag", "=", "\"val\"", ")", "\n", "\n", "", "return", "epoch_losses", ",", "output_psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.adjust_learning_rate": [[743, 763], ["float", "int", "int"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "cfg", ",", "epoch", ",", "batch_idx", ",", "optimizer", ",", "loader_length", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate\n    # Adapted from PyTorch Imagenet example:\n    # https://github.com/pytorch/examples/blob/master/imagenet/main.py\n    \"\"\"", "\n", "total_epochs", "=", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", "\n", "warm_epochs", "=", "cfg", ".", "TRAIN", ".", "WARM_EPOCHS", "\n", "if", "epoch", "<", "warm_epochs", ":", "\n", "        ", "epoch", "+=", "float", "(", "batch_idx", "+", "1", ")", "/", "loader_length", "\n", "lr_adj", "=", "1.", "/", "ngpus_per_node", "*", "(", "epoch", "*", "(", "ngpus_per_node", "-", "1", ")", "/", "warm_epochs", "+", "1", ")", "\n", "", "elif", "epoch", "<", "int", "(", "0.3", "*", "total_epochs", ")", ":", "\n", "        ", "lr_adj", "=", "1.", "\n", "", "elif", "epoch", "<", "int", "(", "0.6", "*", "total_epochs", ")", ":", "\n", "        ", "lr_adj", "=", "1e-1", "\n", "", "else", ":", "\n", "        ", "lr_adj", "=", "1e-2", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "cfg", ".", "TRAIN", ".", "BASE_LR", "*", "lr_adj", "\n", "", "return", "cfg", ".", "TRAIN", ".", "BASE_LR", "*", "lr_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.get_image_from_url.read_image": [[14, 25], ["urllib.urlopen", "numpy.asarray", "cv2.imdecode", "cv2.cvtColor", "os.path.join", "imageio.imwrite", "bytearray", "image_key.split", "urt.urlopen.read", "image_key.split"], "function", ["None"], ["def", "read_image", "(", "data", ")", ":", "\n", "    ", "image_url", "=", "data", "[", "\"image_path\"", "]", "\n", "image_key", "=", "data", "[", "\"image_key\"", "]", "\n", "new_key", "=", "'val_'", "+", "image_key", ".", "split", "(", "'/'", ")", "[", "0", "]", "+", "'_'", "+", "image_key", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "resp", "=", "urt", ".", "urlopen", "(", "image_url", ")", "\n", "image", "=", "np", ".", "asarray", "(", "bytearray", "(", "resp", ".", "read", "(", ")", ")", ",", "dtype", "=", "\"uint8\"", ")", "\n", "image", "=", "cv2", ".", "imdecode", "(", "image", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "new_key", ")", "\n", "# image.save(image_path, \"PNG\", quality=100)", "\n", "imageio", ".", "imwrite", "(", "image_path", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.filter_derain.read_image": [[7, 11], ["cv2.imread"], "function", ["None"], ["def", "read_image", "(", "image_path", ")", ":", "\n", "    ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "shape", "=", "image", ".", "shape", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.calc_psnr_for_val.tensor2array": [[16, 20], ["tensor.clamp_", "tensor.permute().cpu().numpy().round().astype", "tensor.permute().cpu().numpy().round", "tensor.permute().cpu().numpy", "tensor.permute().cpu", "tensor.permute"], "function", ["None"], ["def", "tensor2array", "(", "tensor", ")", ":", "\n", "    ", "tensor", ".", "clamp_", "(", "0", ",", "255", ")", "\n", "image", "=", "tensor", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.calc_psnr_for_val.get_psnr": [[22, 31], ["range", "calc_psnr_for_val.tensor2array", "calc_psnr_for_val.tensor2array", "skimage.metrics.peak_signal_noise_ratio"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.utils.calc_psnr_for_val.tensor2array", "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.calc_psnr_for_val.tensor2array"], ["", "def", "get_psnr", "(", "sr_tensor", ",", "hr_tensor", ")", ":", "\n", "    ", "sum_psnr", "=", "0.0", "\n", "for", "i", "in", "range", "(", "sr_tensor", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "output_tensor", "=", "sr_tensor", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "sr_image", "=", "tensor2array", "(", "output_tensor", ")", "\n", "hr_image", "=", "tensor2array", "(", "hr_tensor", ")", "\n", "psnr", "=", "peak_signal_noise_ratio", "(", "sr_image", ",", "hr_image", ")", "\n", "sum_psnr", "+=", "psnr", "\n", "", "return", "sum_psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.extract_subimages.scandir": [[10, 51], ["extract_subimages.scandir._scandir"], "function", ["None"], ["def", "scandir", "(", "dir_path", ",", "suffix", "=", "None", ",", "recursive", "=", "False", ",", "full_path", "=", "False", ")", ":", "\n", "    ", "\"\"\"Scan a directory to find the interested files.\n\n    Args:\n        dir_path (str): Path of the directory.\n        suffix (str | tuple(str), optional): File suffix that we are\n            interested in. Default: None.\n        recursive (bool, optional): If set to True, recursively scan the\n            directory. Default: False.\n        full_path (bool, optional): If set to True, include the dir_path.\n            Default: False.\n\n    Returns:\n        A generator for all the interested files with relative pathes.\n    \"\"\"", "\n", "\n", "if", "(", "suffix", "is", "not", "None", ")", "and", "not", "isinstance", "(", "suffix", ",", "(", "str", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'\"suffix\" must be a string or tuple of strings'", ")", "\n", "\n", "", "root", "=", "dir_path", "\n", "\n", "def", "_scandir", "(", "dir_path", ",", "suffix", ",", "recursive", ")", ":", "\n", "        ", "for", "entry", "in", "os", ".", "scandir", "(", "dir_path", ")", ":", "\n", "            ", "if", "not", "entry", ".", "name", ".", "startswith", "(", "'.'", ")", "and", "entry", ".", "is_file", "(", ")", ":", "\n", "                ", "if", "full_path", ":", "\n", "                    ", "return_path", "=", "entry", ".", "path", "\n", "", "else", ":", "\n", "                    ", "return_path", "=", "osp", ".", "relpath", "(", "entry", ".", "path", ",", "root", ")", "\n", "\n", "", "if", "suffix", "is", "None", ":", "\n", "                    ", "yield", "return_path", "\n", "", "elif", "return_path", ".", "endswith", "(", "suffix", ")", ":", "\n", "                    ", "yield", "return_path", "\n", "", "", "else", ":", "\n", "                ", "if", "recursive", ":", "\n", "                    ", "yield", "from", "_scandir", "(", "\n", "entry", ".", "path", ",", "suffix", "=", "suffix", ",", "recursive", "=", "recursive", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "", "", "return", "_scandir", "(", "dir_path", ",", "suffix", "=", "suffix", ",", "recursive", "=", "recursive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.extract_subimages.main": [[52, 93], ["extract_subimages.extract_subimages"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.utils.extract_subimages.extract_subimages"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"A multi-thread tool to crop large images to sub-images for faster IO.\n\n    It is used for DIV2K dataset.\n\n    opt (dict): Configuration dict. It contains:\n        n_thread (int): Thread number.\n        compression_level (int):  CV_IMWRITE_PNG_COMPRESSION from 0 to 9.\n            A higher value means a smaller size and longer compression time.\n            Use 0 for faster CPU decompression. Default: 3, same in cv2.\n\n        input_folder (str): Path to the input folder.\n        save_folder (str): Path to save folder.\n        crop_size (int): Crop size.\n        step (int): Step for overlapped sliding window.\n        thresh_size (int): Threshold size. Patches whose size is lower\n            than thresh_size will be dropped.\n\n    Usage:\n        For each folder, run this script.\n        Typically, there are four folders to be processed for DIV2K dataset.\n            DIV2K_train_HR\n            DIV2K_train_LR_bicubic/X2\n            DIV2K_train_LR_bicubic/X3\n            DIV2K_train_LR_bicubic/X4\n        After process, each sub_folder should have the same number of\n        subimages.\n        Remember to modify opt configurations according to your settings.\n    \"\"\"", "\n", "\n", "opt", "=", "{", "}", "\n", "opt", "[", "'n_thread'", "]", "=", "20", "\n", "opt", "[", "'compression_level'", "]", "=", "3", "\n", "\n", "# HR images", "\n", "opt", "[", "'input_folder'", "]", "=", "'/media/cydiachen/Cydia-256ssd/train/train_blur_jpeg/train/train_blur_jpeg_allinone'", "\n", "opt", "[", "'save_folder'", "]", "=", "'/media/cydiachen/Cydia-256ssd/train/train_blur_jpeg/train/train_blur_jpeg_allinone_sub'", "\n", "opt", "[", "'crop_size'", "]", "=", "480", "\n", "opt", "[", "'step'", "]", "=", "240", "\n", "opt", "[", "'thresh_size'", "]", "=", "0", "\n", "extract_subimages", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.extract_subimages.extract_subimages": [[119, 148], ["list", "tqdm.tqdm", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "tqdm.tqdm.close", "print", "os.path.exists", "os.makedirs", "print", "print", "sys.exit", "extract_subimages.scandir", "multiprocessing.Pool.apply_async", "len", "tqdm.tqdm.update"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.utils.extract_subimages.scandir", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.Metric_rank.update"], ["", "def", "extract_subimages", "(", "opt", ")", ":", "\n", "    ", "\"\"\"Crop images to subimages.\n\n    Args:\n        opt (dict): Configuration dict. It contains:\n            input_folder (str): Path to the input folder.\n            save_folder (str): Path to save folder.\n            n_thread (int): Thread number.\n    \"\"\"", "\n", "input_folder", "=", "opt", "[", "'input_folder'", "]", "\n", "save_folder", "=", "opt", "[", "'save_folder'", "]", "\n", "if", "not", "osp", ".", "exists", "(", "save_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "print", "(", "f'mkdir {save_folder} ...'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Folder {save_folder} already exists. Exit.'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "img_list", "=", "list", "(", "scandir", "(", "input_folder", ",", "full_path", "=", "True", ")", ")", "\n", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "img_list", ")", ",", "unit", "=", "'image'", ",", "desc", "=", "'Extract'", ")", "\n", "pool", "=", "Pool", "(", "opt", "[", "'n_thread'", "]", ")", "\n", "for", "path", "in", "img_list", ":", "\n", "        ", "pool", ".", "apply_async", "(", "\n", "worker", ",", "args", "=", "(", "path", ",", "opt", ")", ",", "callback", "=", "lambda", "arg", ":", "pbar", ".", "update", "(", "1", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "pbar", ".", "close", "(", ")", "\n", "print", "(", "'All processes done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.extract_subimages.worker": [[150, 205], ["os.path.splitext", "img_name.replace().replace().replace().replace.replace().replace().replace().replace", "cv2.imread", "numpy.arange", "numpy.arange", "os.path.basename", "numpy.append", "numpy.append", "img_name.replace().replace().replace().replace.replace().replace().replace", "ValueError", "numpy.ascontiguousarray", "cv2.imwrite", "os.path.join", "img_name.replace().replace().replace().replace.replace().replace", "img_name.replace().replace().replace().replace.replace"], "function", ["None"], ["", "def", "worker", "(", "path", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Worker for each process.\n\n    Args:\n        path (str): Image path.\n        opt (dict): Configuration dict. It contains:\n            crop_size (int): Crop size.\n            step (int): Step for overlapped sliding window.\n            thresh_size (int): Threshold size. Patches whose size is lower\n                than thresh_size will be dropped.\n            save_folder (str): Path to save folder.\n            compression_level (int): for cv2.IMWRITE_PNG_COMPRESSION.\n\n    Returns:\n        process_info (str): Process information displayed in progress bar.\n    \"\"\"", "\n", "crop_size", "=", "opt", "[", "'crop_size'", "]", "\n", "step", "=", "opt", "[", "'step'", "]", "\n", "thresh_size", "=", "opt", "[", "'thresh_size'", "]", "\n", "img_name", ",", "extension", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "path", ")", ")", "\n", "\n", "# remove the x2, x3, x4 and x8 in the filename for DIV2K", "\n", "img_name", "=", "img_name", ".", "replace", "(", "'x2'", ",", "\n", "''", ")", ".", "replace", "(", "'x3'", ",", "\n", "''", ")", ".", "replace", "(", "'x4'", ",", "\n", "''", ")", ".", "replace", "(", "'x8'", ",", "''", ")", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "\n", "", "elif", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Image ndim should be 2 or 3, but got {img.ndim}'", ")", "\n", "\n", "", "h_space", "=", "np", ".", "arange", "(", "0", ",", "h", "-", "crop_size", "+", "1", ",", "step", ")", "\n", "if", "h", "-", "(", "h_space", "[", "-", "1", "]", "+", "crop_size", ")", ">", "thresh_size", ":", "\n", "        ", "h_space", "=", "np", ".", "append", "(", "h_space", ",", "h", "-", "crop_size", ")", "\n", "", "w_space", "=", "np", ".", "arange", "(", "0", ",", "w", "-", "crop_size", "+", "1", ",", "step", ")", "\n", "if", "w", "-", "(", "w_space", "[", "-", "1", "]", "+", "crop_size", ")", ">", "thresh_size", ":", "\n", "        ", "w_space", "=", "np", ".", "append", "(", "w_space", ",", "w", "-", "crop_size", ")", "\n", "\n", "", "index", "=", "0", "\n", "for", "x", "in", "h_space", ":", "\n", "        ", "for", "y", "in", "w_space", ":", "\n", "            ", "index", "+=", "1", "\n", "cropped_img", "=", "img", "[", "x", ":", "x", "+", "crop_size", ",", "y", ":", "y", "+", "crop_size", ",", "...", "]", "\n", "cropped_img", "=", "np", ".", "ascontiguousarray", "(", "cropped_img", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "osp", ".", "join", "(", "opt", "[", "'save_folder'", "]", ",", "\n", "f'{img_name}_s{index:03d}{extension}'", ")", ",", "cropped_img", ",", "\n", "[", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ",", "opt", "[", "'compression_level'", "]", "]", ")", "\n", "", "", "process_info", "=", "f'Processing {img_name} ...'", "\n", "return", "process_info", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.sort_filename.get_video_split_id": [[4, 16], ["os.listdir", "os.path.exists", "os.makedirs", "os.path.join", "os.listdir", "os.path.join", "os.path.join", "shutil.copy2"], "function", ["None"], ["def", "get_video_split_id", "(", "src_path", ",", "dst_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dst_path", ")", "\n", "", "video_folder_ids", "=", "os", ".", "listdir", "(", "src_path", ")", "\n", "for", "id", "in", "video_folder_ids", ":", "\n", "        ", "current_folder_with_id", "=", "os", ".", "path", ".", "join", "(", "src_path", ",", "id", ")", "\n", "filenames", "=", "os", ".", "listdir", "(", "current_folder_with_id", ")", "\n", "for", "file", "in", "filenames", ":", "\n", "            ", "current_file_with_id", "=", "os", ".", "path", ".", "join", "(", "current_folder_with_id", ",", "file", ")", "\n", "new_file_name", "=", "id", "+", "\"_\"", "+", "file", "\n", "new_file_path", "=", "os", ".", "path", ".", "join", "(", "dst_path", ",", "new_file_name", ")", "\n", "shutil", ".", "copy2", "(", "current_file_with_id", ",", "new_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.sort_filename.choose_video_frame": [[17, 23], ["os.listdir", "sorted", "range", "len", "os.path.join", "shutil.copy", "os.path.join"], "function", ["None"], ["", "", "", "def", "choose_video_frame", "(", "working_path", ",", "result_path", ")", ":", "\n", "    ", "filelist", "=", "os", ".", "listdir", "(", "working_path", ")", "\n", "filelist", "=", "sorted", "(", "filelist", ")", "\n", "for", "idx", "in", "range", "(", "9", ",", "len", "(", "filelist", ")", ",", "10", ")", ":", "\n", "        ", "TODO_file", "=", "os", ".", "path", ".", "join", "(", "working_path", ",", "filelist", "[", "idx", "]", ")", "\n", "shutil", ".", "copy", "(", "TODO_file", ",", "os", ".", "path", ".", "join", "(", "result_path", ",", "filelist", "[", "idx", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.calc_psnr_ssim_official.main": [[12, 21], ["cv2.cvtColor", "cv2.cvtColor", "skimage.metrics.peak_signal_noise_ratio", "skimage.metrics.structural_similarity", "cv2.imread", "cv2.imread"], "function", ["None"], ["def", "main", "(", "gt_path", ",", "reconstructed_path", ")", ":", "\n", "# ref_img = imageio.imread(gt_path)", "\n", "# res_img = imageio.imread(reconstructed_path)", "\n", "    ", "ref_img", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "gt_path", ")", ",", "cv2", ".", "COLOR_BGR2YCR_CB", ")", "\n", "res_img", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "reconstructed_path", ")", ",", "cv2", ".", "COLOR_BGR2YCR_CB", ")", "\n", "psnr", "=", "peak_signal_noise_ratio", "(", "ref_img", "[", ":", ",", ":", ",", "0", "]", ",", "res_img", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "ssim", "=", "structural_similarity", "(", "ref_img", ",", "res_img", ",", "multichannel", "=", "True", ",", "gaussian_weights", "=", "True", ",", "use_sample_covariance", "=", "True", ")", "\n", "\n", "return", "psnr", ",", "ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.calc_psnr_ssim_official.main_pool": [[23, 37], ["cv2.imread", "cv2.cvtColor", "cv2.imread", "cv2.cvtColor", "skimage.metrics.peak_signal_noise_ratio", "skimage.metrics.structural_similarity", "os.path.join"], "function", ["None"], ["", "def", "main_pool", "(", "image_name", ")", ":", "\n", "# sr_images = imageio.imread(os.path.join(sr_folder, image_name))", "\n", "    ", "sr_images", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "sr_folder", ",", "image_name", ")", ")", "\n", "sr_images", "=", "cv2", ".", "cvtColor", "(", "sr_images", ",", "cv2", ".", "COLOR_BGR2YCR_CB", ")", "\n", "\n", "hr_path", "=", "hr_dict", "[", "image_name", "]", "\n", "# hr_images = imageio.imread(hr_path)", "\n", "hr_images", "=", "cv2", ".", "imread", "(", "hr_path", ")", "\n", "hr_images", "=", "cv2", ".", "cvtColor", "(", "hr_images", ",", "cv2", ".", "COLOR_BGR2YCR_CB", ")", "\n", "\n", "psnr", "=", "peak_signal_noise_ratio", "(", "sr_images", "[", ":", ",", ":", ",", "0", "]", ",", "hr_images", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "ssim", "=", "structural_similarity", "(", "sr_images", ",", "hr_images", ",", "multichannel", "=", "True", ",", "gaussian_weights", "=", "True", ",", "use_sample_covariance", "=", "True", ")", "\n", "\n", "return", "psnr", ",", "ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.calc_psnr_ssim_official.main_sr_hr_pool": [[39, 49], ["cv2.cvtColor", "cv2.cvtColor", "skimage.metrics.peak_signal_noise_ratio", "skimage.metrics.structural_similarity", "cv2.imread", "cv2.imread"], "function", ["None"], ["", "def", "main_sr_hr_pool", "(", "image_pairs", ")", ":", "\n", "    ", "sr_images_path", "=", "image_pairs", "[", "0", "]", "\n", "hr_images_path", "=", "image_pairs", "[", "1", "]", "\n", "\n", "sr_images", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "sr_images_path", ")", ",", "cv2", ".", "COLOR_BGR2YCR_CB", ")", "\n", "hr_images", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "hr_images_path", ")", ",", "cv2", ".", "COLOR_BGR2YCR_CB", ")", "\n", "\n", "psnr", "=", "peak_signal_noise_ratio", "(", "sr_images", "[", ":", ",", ":", ",", "0", "]", ",", "hr_images", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "ssim", "=", "structural_similarity", "(", "sr_images", ",", "hr_images", ",", "multichannel", "=", "True", ",", "gaussian_weights", "=", "True", ",", "use_sample_covariance", "=", "True", ")", "\n", "return", "psnr", ",", "ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.calc_psnr_ssim_official.make_pairs": [[51, 60], ["os.path.join", "os.listdir", "json.loads", "json.loads", "open().readlines", "data.split", "pairs_list.append", "x.strip", "x.strip", "open"], "function", ["None"], ["", "def", "make_pairs", "(", "sr_folder", ",", "hr_file", ")", ":", "\n", "    ", "sr_list", "=", "[", "os", ".", "path", ".", "join", "(", "sr_folder", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "sr_folder", ")", "]", "\n", "hr_list", "=", "{", "json", ".", "loads", "(", "x", ".", "strip", "(", ")", ")", "[", "\"image_key\"", "]", ":", "json", ".", "loads", "(", "x", ".", "strip", "(", ")", ")", "[", "\"image_path\"", "]", "for", "x", "in", "open", "(", "hr_file", ")", ".", "readlines", "(", ")", "}", "\n", "pairs_list", "=", "[", "]", "\n", "for", "data", "in", "sr_list", ":", "\n", "        ", "image_name", "=", "data", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "image_name", "in", "hr_list", ":", "\n", "            ", "pairs_list", ".", "append", "(", "[", "data", ",", "hr_list", "[", "image_name", "]", "]", ")", "\n", "", "", "return", "pairs_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.build_crop_data.make_dict": [[12, 22], ["open", "file.write", "[].split", "json.dumps", "[].split", "image.split", "image.split"], "function", ["None"], ["def", "make_dict", "(", "image_list", ",", "output_file", ")", ":", "\n", "# data_list = []", "\n", "    ", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "for", "image", "in", "image_list", ":", "\n", "            ", "image_key", "=", "image", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", "+", "'_'", "+", "image", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "2", "]", "\n", "result", "=", "{", "\n", "\"image_key\"", ":", "image_key", ",", "\n", "\"image_path\"", ":", "image", "\n", "}", "\n", "file", ".", "write", "(", "json", ".", "dumps", "(", "result", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.merge_tta.merge_tta": [[25, 47], ["cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "numpy.mean().round().astype", "imageio.imwrite", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.mean().round", "numpy.mean", "numpy.array"], "function", ["None"], ["", "def", "merge_tta", "(", "data_name", ")", ":", "\n", "\n", "    ", "src_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "src_folder", ",", "data_name", ")", ")", "\n", "rot_90_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_90_folder", ",", "data_name", ")", ")", "\n", "rot_180_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_180_folder", ",", "data_name", ")", ")", "\n", "rot_270_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_270_folder", ",", "data_name", ")", ")", "\n", "flip_h_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_flip_h_folder", ",", "data_name", ")", ")", "\n", "flip_v_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_flip_v_folder", ",", "data_name", ")", ")", "\n", "bgr_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "rot_bgr_folder", ",", "data_name", ")", ")", "\n", "\n", "src_img", "=", "cv2", ".", "cvtColor", "(", "src_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "rot_90_img", "=", "cv2", ".", "cvtColor", "(", "rot_90_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "rot_180_img", "=", "cv2", ".", "cvtColor", "(", "rot_180_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "rot_270_img", "=", "cv2", ".", "cvtColor", "(", "rot_270_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "flip_h_img", "=", "cv2", ".", "cvtColor", "(", "flip_h_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "flip_v_img", "=", "cv2", ".", "cvtColor", "(", "flip_v_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "bgr_img", "=", "cv2", ".", "cvtColor", "(", "bgr_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "imgs", "=", "[", "src_img", ",", "rot_90_img", ",", "rot_180_img", ",", "rot_270_img", ",", "flip_h_img", ",", "flip_v_img", ",", "bgr_img", "]", "\n", "image", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "imgs", ")", ",", "axis", "=", "0", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "data_name", ")", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.submit_filter.get_video_split_id": [[9, 21], ["os.listdir", "os.path.exists", "os.makedirs", "os.path.join", "os.listdir", "os.path.join", "os.path.join", "shutil.copy2"], "function", ["None"], ["def", "get_video_split_id", "(", "folder_path", ",", "dst_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dst_path", ")", "\n", "", "video_folder_ids", "=", "os", ".", "listdir", "(", "folder_path", ")", "\n", "for", "id", "in", "video_folder_ids", ":", "\n", "        ", "current_folder_with_id", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "id", ")", "\n", "filenames", "=", "os", ".", "listdir", "(", "current_folder_with_id", ")", "\n", "for", "file", "in", "filenames", ":", "\n", "            ", "current_file_with_id", "=", "os", ".", "path", ".", "join", "(", "current_folder_with_id", ",", "file", ")", "\n", "new_file_name", "=", "id", "+", "\"_\"", "+", "file", "\n", "new_file_path", "=", "os", ".", "path", ".", "join", "(", "dst_path", ",", "new_file_name", ")", "\n", "shutil", ".", "copy2", "(", "current_file_with_id", ",", "new_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.submit_filter.choose_video_frame": [[22, 27], ["os.listdir", "range", "len", "os.path.join", "shutil.copy", "os.path.join"], "function", ["None"], ["", "", "", "def", "choose_video_frame", "(", "working_path", ")", ":", "\n", "    ", "filelist", "=", "os", ".", "listdir", "(", "working_path", ")", "\n", "for", "idx", "in", "range", "(", "9", ",", "len", "(", "filelist", ")", ",", "10", ")", ":", "\n", "        ", "TODO_file", "=", "os", ".", "path", ".", "join", "(", "working_path", ",", "filelist", "[", "idx", "]", ")", "\n", "shutil", ".", "copy", "(", "TODO_file", ",", "os", ".", "path", ".", "join", "(", "dst_path", ",", "filelist", "[", "idx", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.ensemble.img_reader": [[34, 37], ["cv2.imread"], "function", ["None"], ["", "def", "img_reader", "(", "src", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "src", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.optim.optimizer.Optimizer.__init__": [[12, 19], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "Optimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "optimizer_type", "=", "self", ".", "cfg", ".", "TRAIN", ".", "OPTIMIZER", "\n", "self", ".", "base_lr", "=", "self", ".", "cfg", ".", "TRAIN", ".", "BASE_LR", "\n", "self", ".", "momentum", "=", "self", ".", "cfg", ".", "TRAIN", ".", "MOMENTUM", "\n", "self", ".", "weight_decay", "=", "self", ".", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.optim.optimizer.Optimizer.optimizer": [[20, 44], ["torch.SGD", "model.parameters", "torch.Adam", "model.parameters", "torch.AdamW", "NotImplementedError", "model.parameters"], "methods", ["None"], ["", "def", "optimizer", "(", "self", ",", "model", ")", ":", "\n", "\n", "        ", "if", "self", ".", "optimizer_type", "==", "\"SGD\"", ":", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "base_lr", ",", "\n", "momentum", "=", "self", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", "\n", ")", "\n", "", "elif", "self", ".", "optimizer_type", "==", "\"ADAM\"", ":", "\n", "            ", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "base_lr", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", "\n", ")", "\n", "", "elif", "self", ".", "optimizer_type", "==", "\"ADAMW\"", ":", "\n", "            ", "optimizer", "=", "optim", ".", "AdamW", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "base_lr", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"no optimizer type {optimizer_type}\"", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.optim.optimizer.adjust_learning_rate_for_cosine_decay": [[46, 62], ["float", "math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate_for_cosine_decay", "(", "cfg", ",", "epoch", ",", "batch_idx", ",", "optimizer", ",", "total_train_sampler", ",", "total_sampler_batch", ",", "loader_length", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate with  the cosine decay\n    \"\"\"", "\n", "total_epochs", "=", "cfg", ".", "TRAIN", ".", "MAX_EPOCHS", "\n", "warm_epochs", "=", "cfg", ".", "TRAIN", ".", "WARM_EPOCHS", "\n", "\n", "if", "epoch", "<", "warm_epochs", ":", "\n", "        ", "epoch", "+=", "float", "(", "batch_idx", "+", "1", ")", "/", "loader_length", "\n", "lr_adj", "=", "1.", "/", "loader_length", "*", "(", "epoch", "*", "(", "loader_length", "-", "1", ")", "/", "warm_epochs", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "batch_sample", "=", "total_train_sampler", "*", "(", "epoch", "-", "warm_epochs", ")", "+", "batch_idx", "\n", "lr_adj", "=", "1", "/", "2", "*", "(", "1", "+", "math", ".", "cos", "(", "batch_sample", "*", "math", ".", "pi", "/", "total_sampler_batch", ")", ")", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "cfg", ".", "TRAIN", ".", "BASE_LR", "*", "lr_adj", "\n", "\n", "", "return", "cfg", ".", "TRAIN", ".", "BASE_LR", "*", "lr_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader.__init__": [[111, 126], ["torch.utils.data.dataset.Dataset.__init__", "multi_patch_inference.single_image_loader.infer_preprocess", "torch.device", "multi_patch_inference.single_image_loader._get_image_list", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader.infer_preprocess", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader._get_image_list"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "rec_path", ",", "mode", "=", "\"jpg2png\"", ",", "patch_mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "single_image_loader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "range", "=", "self", ".", "cfg", ".", "INPUT", ".", "RANGE", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "lr_path", "=", "rec_path", "\n", "self", ".", "patch_mode", "=", "patch_mode", "\n", "if", "self", ".", "patch_mode", ":", "\n", "            ", "self", ".", "patch_size", "=", "self", ".", "cfg", ".", "PATH", ".", "PATCH_SIZE", "\n", "", "self", ".", "mean", "=", "self", ".", "cfg", ".", "INPUT", ".", "MEAN", "\n", "self", ".", "std", "=", "self", ".", "cfg", ".", "INPUT", ".", "STD", "\n", "self", ".", "norm", "=", "self", ".", "cfg", ".", "INPUT", ".", "NORM", "\n", "self", ".", "base_transforms", "=", "self", ".", "infer_preprocess", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "file_list", "=", "self", ".", "_get_image_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader.find_all_with_ext": [[127, 148], ["os.walk", "isinstance", "os.path.join().replace", "os.path.splitext", "result.append", "os.path.join"], "methods", ["None"], ["", "def", "find_all_with_ext", "(", "self", ",", "path", ",", "ext", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "ext", ",", "list", ")", ":", "\n", "            ", "filter", "=", "[", "ext", "]", "\n", "", "else", ":", "\n", "            ", "filter", "=", "ext", "\n", "\n", "", "result", "=", "[", "]", "\n", "\n", "for", "maindir", ",", "subdir", ",", "file_name_list", "in", "os", ".", "walk", "(", "path", ")", ":", "\n", "#         print(\"1:\",maindir) #\u5f53\u524d\u4e3b\u76ee\u5f55", "\n", "#         print(\"2:\",subdir) #\u5f53\u524d\u4e3b\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u76ee\u5f55", "\n", "#         print(\"3:\",file_name_list)  #\u5f53\u524d\u4e3b\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6", "\n", "\n", "            ", "for", "filename", "in", "file_name_list", ":", "\n", "                ", "apath", "=", "os", ".", "path", ".", "join", "(", "maindir", ",", "filename", ")", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "ext", "=", "os", ".", "path", ".", "splitext", "(", "apath", ")", "[", "1", "]", "\n", "\n", "if", "ext", "in", "filter", ":", "\n", "                    ", "result", ".", "append", "(", "apath", ")", "\n", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader._get_image_list": [[149, 154], ["multi_patch_inference.single_image_loader.find_all_with_ext", "multi_patch_inference.single_image_loader.find_all_with_ext"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.find_all_with_ext", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.find_all_with_ext"], ["", "def", "_get_image_list", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'jpg2png'", ":", "\n", "            ", "return", "self", ".", "find_all_with_ext", "(", "self", ".", "lr_path", ",", "ext", "=", "'.jpg'", ")", "\n", "", "elif", "self", ".", "mode", "==", "'png2png'", ":", "\n", "            ", "return", "self", ".", "find_all_with_ext", "(", "self", ".", "lr_path", ",", "ext", "=", "'.jpg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader.infer_preprocess": [[155, 166], ["Compose", "Compose", "Normalize", "ToTensor2", "ToTensor", "ToTensor2", "ToTensor"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize"], ["", "", "def", "infer_preprocess", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "norm", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "", "return", "base_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader._load_image": [[167, 185], ["range", "Exception", "PIL.Image.open().convert", "cv2.imread", "cv2.cvtColor", "PIL.Image.fromarray", "time.sleep", "print", "PIL.Image.open", "BytesIO", "urllib.request.urlopen().read", "urllib.request.urlopen"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "img_path", ",", "num_retry", "=", "20", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_retry", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "img_path", "[", ":", "4", "]", "==", "'http'", ":", "\n", "                    ", "img", "=", "Image", ".", "open", "(", "BytesIO", "(", "urllib", ".", "request", ".", "urlopen", "(", "img_path", ")", ".", "read", "(", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# img = np.asarray(img)", "\n", "", "else", ":", "\n", "                    ", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "-", "1", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "", "break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "time", ".", "sleep", "(", "5", ")", "\n", "print", "(", "f'Open image {img_path} failed, try again... resean is {e}'", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Open image: {img_path} failed!'", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader._split_images": [[186, 189], ["multi_patch_inference.get_patches"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.get_patches"], ["", "def", "_split_images", "(", "self", ",", "img", ",", "patch_size", ")", ":", "\n", "        ", "lr_patch_list", "=", "get_patches", "(", "img", ",", "patch_size", ",", "step", "=", "0", ",", "max_nums", "=", "999", ")", "\n", "return", "lr_patch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader.__len__": [[190, 192], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader.__getitem__": [[193, 206], ["multi_patch_inference.single_image_loader._load_image", "multi_patch_inference.single_image_loader._split_images", "enumerate", "multi_patch_inference.single_image_loader.base_transforms", "lr_imgs.append"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._load_image", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.single_image_loader._split_images"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "patch_size", "=", "cfg", ".", "PATCH", ".", "PATCH_SIZE", "\n", "lr_img_path", "=", "self", ".", "file_list", "[", "index", "]", "\n", "lr_img", "=", "self", ".", "_load_image", "(", "lr_img_path", ")", "\n", "lr_imgs", "=", "[", "]", "\n", "if", "self", ".", "patch_mode", ":", "\n", "            ", "lr_img_arrays", "=", "self", ".", "_split_images", "(", "lr_img", ",", "patch_size", ")", "\n", "", "if", "self", ".", "base_transforms", "is", "not", "None", ":", "\n", "            ", "for", "idx", ",", "lr_img", "in", "enumerate", "(", "lr_img_arrays", ")", ":", "\n", "                ", "lr_img", "=", "lr_img", "\n", "lr_img", ",", "lr_img", "=", "self", ".", "base_transforms", "(", "lr_img", ",", "lr_img", ")", "\n", "lr_imgs", ".", "append", "(", "lr_img", ")", "\n", "", "", "return", "lr_img_path", ",", "lr_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.setup_seed": [[29, 36], ["torch.manual_seed", "torch.cuda.manual_seed_all", "np.random.seed", "random.seed"], "function", ["None"], ["def", "setup_seed", "(", "seed", "=", "100", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.translate_state_dict": [[38, 46], ["state_dict.items"], "function", ["None"], ["", "def", "translate_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'module'", "in", "key", ":", "\n", "            ", "new_state_dict", "[", "key", "[", "7", ":", "]", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "new_state_dict", "[", "key", "]", "=", "value", "\n", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.sliding_window": [[47, 95], ["isinstance", "np.array", "range", "range", "range", "cv2.imwrite", "range", "crop_image_list.append", "print", "crop_image_list.append", "PIL.Image.fromarray", "Image.fromarray.save", "cv2.rectangle", "PIL.Image.fromarray", "PIL.Image.fromarray"], "function", ["None"], ["", "def", "sliding_window", "(", "image", ",", "patch_size", ":", "tuple", ",", "step", ":", "int", ",", "show_debug", ":", "bool", "=", "False", ")", "->", "list", ":", "\n", "    ", "\"\"\"sliding the patch size window, crop from the whole images\n    Args:\n            image: PIL or ndarray.\n            patch_size: a tuple for (128, 128).\n            step: window step.\n    Returns:\n            crop_image_list: a list of crop image\n    \"\"\"", "\n", "if", "isinstance", "(", "image", ",", "Image", ".", "Image", ")", ":", "\n", "        ", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "\n", "", "if", "step", "==", "0", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", "# 720, 1280", "\n", "w_iter", ",", "h_iter", "=", "w", "//", "patch_size", "[", "0", "]", ",", "h", "//", "patch_size", "[", "1", "]", "\n", "crop_image_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "h_iter", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "w_iter", ")", ":", "\n", "                ", "bbox", "=", "(", "i", "*", "patch_size", "[", "0", "]", ",", "j", "*", "patch_size", "[", "0", "]", ",", "\n", "(", "i", "+", "1", ")", "*", "patch_size", "[", "0", "]", ",", "(", "j", "+", "1", ")", "*", "patch_size", "[", "0", "]", ")", "\n", "crop_image", "=", "image", "[", "bbox", "[", "0", "]", ":", "bbox", "[", "2", "]", ",", "bbox", "[", "1", "]", ":", "bbox", "[", "3", "]", "]", "\n", "if", "show_debug", ":", "\n", "                    ", "crop_image", "=", "Image", ".", "fromarray", "(", "crop_image", ")", "\n", "crop_image", ".", "save", "(", "f\"/data/jiangmingchao/patches/{i}.png\"", ")", "\n", "cv2", ".", "rectangle", "(", "image", ",", "\n", "(", "i", "*", "patch_size", "[", "0", "]", ",", "j", "*", "patch_size", "[", "0", "]", ")", ",", "\n", "(", "(", "i", "+", "1", ")", "*", "patch_size", "[", "0", "]", ",", "(", "j", "+", "1", ")", "*", "patch_size", "[", "0", "]", ")", ",", "\n", "(", "255", ",", "255", ",", "0", ")", ",", "\n", "2", ",", "\n", ")", "\n", "\n", "", "crop_image_list", ".", "append", "(", "Image", ".", "fromarray", "(", "crop_image", ")", ")", "\n", "\n", "", "", "if", "show_debug", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "\"1.jpg\"", ",", "image", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", "\n", "step_w_iter", ",", "step_h_iter", "=", "(", "w", "-", "patch_size", "[", "0", "]", ")", "//", "step", ",", "(", "h", "-", "patch_size", "[", "0", "]", ")", "//", "step", "\n", "crop_image_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "step_h_iter", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "step_w_iter", ")", ":", "\n", "                ", "bbox", "=", "(", "i", "*", "step", ",", "j", "*", "step", ",", "patch_size", "[", "0", "]", "+", "i", "*", "step", ",", "patch_size", "[", "1", "]", "+", "j", "*", "step", ")", "\n", "crop_image", "=", "image", "[", "bbox", "[", "0", "]", ":", "bbox", "[", "2", "]", ",", "bbox", "[", "1", "]", ":", "bbox", "[", "3", "]", "]", "\n", "print", "(", "crop_image", ".", "shape", ")", "\n", "crop_image_list", ".", "append", "(", "Image", ".", "fromarray", "(", "crop_image", ")", ")", "\n", "\n", "", "", "", "return", "crop_image_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.get_patches": [[96, 109], ["multi_patch_inference.sliding_window", "len", "range", "len", "new_lr_patches.append", "range", "len"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.sliding_window"], ["", "def", "get_patches", "(", "lr", ",", "patch_size", ":", "tuple", ",", "step", ":", "int", ",", "max_nums", ":", "int", ")", "->", "(", "list", ",", "list", ")", ":", "\n", "\n", "    ", "lr_patches", "=", "sliding_window", "(", "lr", ",", "patch_size", ",", "step", ")", "\n", "\n", "if", "len", "(", "lr_patches", ")", "<=", "max_nums", ":", "\n", "        ", "return", "lr_patches", "\n", "\n", "", "else", ":", "\n", "        ", "indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "lr_patches", ")", ")", "]", "\n", "new_lr_patches", ",", "new_hr_patches", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "indices", ")", ")", ":", "\n", "            ", "new_lr_patches", ".", "append", "(", "lr_patches", "[", "indices", "[", "i", "]", "]", ")", "\n", "", "return", "new_lr_patches", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.model_initializer": [[208, 218], ["model.NTIRE2020_Deblur_top.uniA.AtrousNet", "torch.load", "model.to.load_state_dict", "model.to.eval", "model.to.to"], "function", ["None"], ["", "", "def", "model_initializer", "(", "opt", ")", ":", "\n", "# Non-distributed GPU Parallel", "\n", "    ", "device", "=", "opt", "[", "'device'", "]", "\n", "model_arch", "=", "\"{}-{}\"", ".", "format", "(", "\"SR\"", ",", "\"AtrousNet\"", ")", "\n", "model", "=", "AtrousNet", "(", "in_channels", "=", "3", ",", "out_channels", "=", "3", ")", "\n", "model_weights", "=", "torch", ".", "load", "(", "opt", "[", "'model_pth'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "model_weights", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.inference": [[219, 253], ["multi_patch_inference.model_initializer", "multi_patch_inference.single_image_loader", "torch.utils.data.DataLoader", "enumerate", "tqdm.tqdm", "print", "data[].to", "os.path.split", "len", "torch.no_grad", "model_initializer.", "output[].cpu", "DeNormalize", "DeNormalize.", "output_img.permute().cpu().numpy().round().astype.clamp_", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy().round().astype", "imageio.imwrite", "output_img.permute().cpu().numpy().round().astype.clamp_", "imageio.imwrite", "os.path.join", "os.path.join", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy().round", "file_name.replace", "file_name.replace", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy", "output_img.permute().cpu().numpy().round().astype.permute().cpu().numpy", "output_img.permute().cpu().numpy().round().astype.permute().cpu", "output_img.permute().cpu().numpy().round().astype.permute().cpu", "output_img.permute().cpu().numpy().round().astype.permute", "output_img.permute().cpu().numpy().round().astype.permute"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.tools.multi_patch_inference.model_initializer"], ["", "def", "inference", "(", "cfg", ",", "opt", ")", ":", "\n", "    ", "model", "=", "model_initializer", "(", "opt", ")", "\n", "train_dataset", "=", "single_image_loader", "(", "cfg", ",", "opt", "[", "'working_path'", "]", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "8", ")", "\n", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "# Now only support single image inference", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "split", "(", "data", "[", "0", "]", "[", "0", "]", ")", "[", "1", "]", "\n", "sub_imgs", "=", "data", "[", "1", "]", "\n", "print", "(", "len", "(", "sub_imgs", ")", ")", "\n", "\n", "img_data", "=", "data", "[", "1", "]", ".", "to", "(", "opt", "[", "'device'", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "img_data", ")", "\n", "output_img", "=", "output", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", "\n", "# output_img = output[0,:,:,:].float().cpu().numpy()", "\n", "\n", "", "if", "cfg", ".", "INPUT", ".", "NORM", ":", "\n", "            ", "denormalize", "=", "DeNormalize", "(", "cfg", ".", "INPUT", ".", "MEAN", ",", "cfg", ".", "INPUT", ".", "STD", ")", "\n", "output_img", "=", "denormalize", "(", "output_img", ")", "\n", "\n", "", "if", "cfg", ".", "INPUT", ".", "RANGE", "==", "255", ":", "\n", "            ", "output_img", ".", "clamp_", "(", "0", ",", "255", ")", "\n", "output_img", "=", "output_img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "opt", "[", "'output_path'", "]", ",", "file_name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "output_img", ")", "\n", "", "else", ":", "\n", "            ", "output_img", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "output_img", "=", "(", "output_img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255.0", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "opt", "[", "'output_path'", "]", ",", "file_name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "output_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.find_all_with_ext": [[11, 29], ["os.walk", "isinstance", "os.path.join().replace", "os.path.splitext", "result.append", "os.path.join"], "function", ["None"], ["def", "find_all_with_ext", "(", "path", ",", "ext", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "ext", ",", "list", ")", ":", "\n", "        ", "filter", "=", "[", "ext", "]", "\n", "", "else", ":", "\n", "        ", "filter", "=", "ext", "\n", "\n", "", "result", "=", "[", "]", "\n", "\n", "for", "maindir", ",", "subdir", ",", "file_name_list", "in", "os", ".", "walk", "(", "path", ")", ":", "\n", "\n", "        ", "for", "filename", "in", "file_name_list", ":", "\n", "            ", "apath", "=", "os", ".", "path", ".", "join", "(", "maindir", ",", "filename", ")", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "ext", "=", "os", ".", "path", ".", "splitext", "(", "apath", ")", "[", "1", "]", "\n", "\n", "if", "ext", "in", "filter", ":", "\n", "                ", "result", ".", "append", "(", "apath", ")", "\n", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.quantize": [[30, 33], ["img.mul().clamp().round().div", "img.mul().clamp().round", "img.mul().clamp", "img.mul"], "function", ["None"], ["", "def", "quantize", "(", "img", ",", "rgb_range", ")", ":", "\n", "    ", "pixel_range", "=", "255", "/", "rgb_range", "\n", "return", "img", ".", "mul", "(", "pixel_range", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "pixel_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.set_channel": [[34, 43], ["numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "skimage.rgb2ycbcr"], "function", ["None"], ["", "def", "set_channel", "(", "img", ",", "n_channels", "=", "3", ")", ":", "\n", "    ", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "c", "=", "img", ".", "shape", "[", "2", "]", "\n", "if", "n_channels", "==", "1", "and", "c", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "sc", ".", "rgb2ycbcr", "(", "img", ")", "[", ":", ",", ":", ",", "0", "]", ",", "2", ")", "\n", "", "elif", "n_channels", "==", "3", "and", "c", "==", "1", ":", "\n", "        ", "img", "=", "np", ".", "concatenate", "(", "[", "img", "]", "*", "n_channels", ",", "2", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.np2Tensor": [[44, 49], ["numpy.ascontiguousarray", "torch.from_numpy().float", "torch.from_numpy().float.mul_", "img.transpose", "torch.from_numpy"], "function", ["None"], ["", "def", "np2Tensor", "(", "img", ",", "rgb_range", "=", "255", ")", ":", "\n", "    ", "np_transpose", "=", "np", ".", "ascontiguousarray", "(", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "tensor", "=", "torch", ".", "from_numpy", "(", "np_transpose", ")", ".", "float", "(", ")", "\n", "tensor", ".", "mul_", "(", "rgb_range", "/", "255", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.image_read": [[53, 61], ["imageio.imread", "numpy.asarray", "inference_EDSR.set_channel", "inference_EDSR.np2Tensor"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.set_channel", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.np2Tensor"], ["", "def", "image_read", "(", "filename", ",", "rgb_range", ")", ":", "\n", "    ", "lr_0", "=", "imageio", ".", "imread", "(", "filename", ")", "\n", "# lr_1 = cv2.imread(filename)", "\n", "# lr_1 = cv2.cvtColor(lr_1, cv2.COLOR_BGR2RGB)", "\n", "lr_0", "=", "np", ".", "asarray", "(", "lr_0", ")", "\n", "lr_new", "=", "set_channel", "(", "lr_0", ",", "n_channels", "=", "3", ")", "\n", "lr_t", "=", "np2Tensor", "(", "lr_new", ",", "rgb_range", ")", "\n", "return", "lr_t", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.model_init": [[62, 68], ["torch.load", "network.load_state_dict", "network.eval"], "function", ["None"], ["", "def", "model_init", "(", "network", ",", "weights", ")", ":", "\n", "    ", "model_weights", "=", "torch", ".", "load", "(", "weights", ")", "\n", "network", "=", "network", "\n", "network", ".", "load_state_dict", "(", "model_weights", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "network", ".", "eval", "(", ")", "\n", "return", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.inference": [[69, 94], ["inference_EDSR.model_init", "inference_EDSR.find_all_with_ext", "enumerate", "os.path.exists", "os.makedirs", "tqdm.tqdm", "inference_EDSR.image_read", "image.unsqueeze.to", "image.unsqueeze.unsqueeze", "network.to.to", "inference_EDSR.quantize", "range", "model.NTIRE2020_Deblur_top.uniA.model_stage1.AtrousNet", "torch.no_grad", "network.to.", "network.mul", "output.mul.byte().permute().cpu", "tensor_cpu[].numpy", "imageio.imwrite", "os.path.join", "output.mul.byte().permute", "[].replace", "output.mul.byte", "os.path.split"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.model_init", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.find_all_with_ext", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.image_read", "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.quantize"], ["", "def", "inference", "(", "model_path", ",", "input_path", ",", "output_path", ",", "rgb_range", "=", "255", ")", ":", "\n", "# # model_weights = torch.load(model_path)", "\n", "# network = AtrousNet(in_channels=3, out_channels=3)", "\n", "# network.load_state_dict(model_weights,strict = True)", "\n", "# network.eval()", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "network", "=", "model_init", "(", "network", "=", "AtrousNet", "(", "in_channels", "=", "3", ",", "out_channels", "=", "3", ")", ",", "\n", "weights", "=", "model_path", ")", "\n", "\n", "filelist", "=", "find_all_with_ext", "(", "input_path", ",", "ext", "=", "'.jpg'", ")", "\n", "for", "idx", ",", "content", "in", "enumerate", "(", "tqdm", "(", "filelist", ")", ")", ":", "\n", "        ", "image", "=", "image_read", "(", "content", ",", "rgb_range", "=", "255", ")", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "image", "=", "image", ".", "unsqueeze", "(", "0", ")", "\n", "network", "=", "network", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "network", "(", "image", ")", "\n", "", "output", "=", "quantize", "(", "output", ",", "rgb_range", ")", "\n", "for", "idx", "in", "range", "(", "output", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "normalized", "=", "output", ".", "mul", "(", "255", "/", "rgb_range", ")", "\n", "tensor_cpu", "=", "normalized", ".", "byte", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", "\n", "output_img", "=", "tensor_cpu", "[", "0", "]", ".", "numpy", "(", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "os", ".", "path", ".", "split", "(", "content", ")", "[", "1", "]", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "output_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.inference_EDSR.calc_psnr": [[95, 105], ["valid.pow().mean", "hr.nelement", "diff.mul().sum.size", "diff.mul().sum.mul().sum", "math.log10", "valid.pow", "diff.mul().sum.mul"], "function", ["None"], ["", "", "", "def", "calc_psnr", "(", "sr", ",", "hr", ",", "rgb_range", ")", ":", "\n", "    ", "import", "math", "\n", "if", "hr", ".", "nelement", "(", ")", "==", "1", ":", "return", "0", "\n", "diff", "=", "(", "sr", "-", "hr", ")", "/", "rgb_range", "\n", "shave", "=", "1", "\n", "if", "diff", ".", "size", "(", "1", ")", ">", "1", ":", "\n", "        ", "diff", "=", "diff", ".", "mul", "(", "diff", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "valid", "=", "diff", "[", "...", ",", "shave", ":", "-", "shave", ",", "shave", ":", "-", "shave", "]", "\n", "mse", "=", "valid", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "return", "-", "10", "*", "math", ".", "log10", "(", "mse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.utils._rgb2ycbcr": [[13, 44], ["numpy.array", "numpy.array", "numpy.reshape", "numpy.dot", "numpy.reshape", "numpy.transpose"], "function", ["None"], ["def", "_rgb2ycbcr", "(", "img", ",", "maxVal", "=", "255", ")", ":", "\n", "#    r = img[:,:,0]", "\n", "#    g = img[:,:,1]", "\n", "#    b = img[:,:,2]", "\n", "\n", "    ", "O", "=", "np", ".", "array", "(", "[", "[", "16", "]", ",", "\n", "[", "128", "]", ",", "\n", "[", "128", "]", "]", ")", "\n", "T", "=", "np", ".", "array", "(", "[", "[", "0.256788235294118", ",", "0.504129411764706", ",", "0.097905882352941", "]", ",", "\n", "[", "-", "0.148223529411765", ",", "-", "0.290992156862745", ",", "0.439215686274510", "]", ",", "\n", "[", "0.439215686274510", ",", "-", "0.367788235294118", ",", "-", "0.071427450980392", "]", "]", ")", "\n", "\n", "#    ycbcr = np.empty([img.shape[0], img.shape[1], img.shape[2]])", "\n", "\n", "if", "maxVal", "==", "1", ":", "\n", "        ", "O", "=", "O", "/", "255.0", "\n", "\n", "#    ycbcr[:,:,0] = ((T[0,0] * r) + (T[0,1] * g) + (T[0,2] * b) + O[0])", "\n", "#    ycbcr[:,:,1] = ((T[1,0] * r) + (T[1,1] * g) + (T[1,2] * b) + O[1])", "\n", "#    ycbcr[:,:,2] = ((T[2,0] * r) + (T[2,1] * g) + (T[2,2] * b) + O[2])", "\n", "\n", "", "t", "=", "np", ".", "reshape", "(", "img", ",", "(", "img", ".", "shape", "[", "0", "]", "*", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", ")", "\n", "t", "=", "np", ".", "dot", "(", "t", ",", "np", ".", "transpose", "(", "T", ")", ")", "\n", "t", "[", ":", ",", "0", "]", "+=", "O", "[", "0", "]", "\n", "t", "[", ":", ",", "1", "]", "+=", "O", "[", "1", "]", "\n", "t", "[", ":", ",", "2", "]", "+=", "O", "[", "2", "]", "\n", "ycbcr", "=", "np", ".", "reshape", "(", "t", ",", "[", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", "]", ")", "\n", "\n", "#    print(np.all((ycbcr - ycbcr_) < 1/255.0/2.0))", "\n", "\n", "return", "ycbcr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.utils._load_img_array": [[46, 77], ["Image.open", "Image.open.convert", "numpy.asarray", "Image.open.convert", "numpy.asarray"], "function", ["None"], ["", "def", "_load_img_array", "(", "path", ",", "color_mode", "=", "'RGB'", ",", "channel_mean", "=", "None", ",", "modcrop", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", ":", "\n", "    ", "'''Load an image using PIL and convert it into specified color space,\n    and return it as an numpy array.\n    https://github.com/fchollet/keras/blob/master/keras/preprocessing/image.py\n    The code is modified from Keras.preprocessing.image.load_img, img_to_array.\n    '''", "\n", "## Load image", "\n", "from", "PIL", "import", "Image", "\n", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "if", "color_mode", "==", "'RGB'", ":", "\n", "        ", "cimg", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "x", "=", "np", ".", "asarray", "(", "cimg", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "", "elif", "color_mode", "==", "'YCbCr'", "or", "color_mode", "==", "'Y'", ":", "\n", "        ", "cimg", "=", "img", ".", "convert", "(", "'YCbCr'", ")", "\n", "x", "=", "np", ".", "asarray", "(", "cimg", ",", "dtype", "=", "'float32'", ")", "\n", "if", "color_mode", "==", "'Y'", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "\n", "## To 0-1", "\n", "", "", "x", "*=", "1.0", "/", "255.0", "\n", "\n", "if", "channel_mean", ":", "\n", "        ", "x", "[", ":", ",", ":", ",", "0", "]", "-=", "channel_mean", "[", "0", "]", "\n", "x", "[", ":", ",", ":", ",", "1", "]", "-=", "channel_mean", "[", "1", "]", "\n", "x", "[", ":", ",", ":", ",", "2", "]", "-=", "channel_mean", "[", "2", "]", "\n", "\n", "", "if", "modcrop", "[", "0", "]", "*", "modcrop", "[", "1", "]", "*", "modcrop", "[", "2", "]", "*", "modcrop", "[", "3", "]", ":", "\n", "        ", "x", "=", "x", "[", "modcrop", "[", "0", "]", ":", "-", "modcrop", "[", "1", "]", ",", "modcrop", "[", "2", "]", ":", "-", "modcrop", "[", "3", "]", ",", ":", "]", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.utils.PSNR": [[79, 93], ["numpy.array", "numpy.array", "numpy.sqrt", "numpy.mean", "numpy.log10", "numpy.power"], "function", ["None"], ["", "def", "PSNR", "(", "y_true", ",", "y_pred", ",", "shave_border", "=", "4", ")", ":", "\n", "    ", "'''\n        Input must be 0-255, 2D\n    '''", "\n", "\n", "target_data", "=", "np", ".", "array", "(", "y_true", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ref_data", "=", "np", ".", "array", "(", "y_pred", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "diff", "=", "ref_data", "-", "target_data", "\n", "if", "shave_border", ">", "0", ":", "\n", "        ", "diff", "=", "diff", "[", "shave_border", ":", "-", "shave_border", ",", "shave_border", ":", "-", "shave_border", "]", "\n", "", "rmse", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "power", "(", "diff", ",", "2", ")", ")", ")", "\n", "\n", "return", "20", "*", "np", ".", "log10", "(", "255.", "/", "rmse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.utils.DownSample2DMatlab": [[98, 227], ["utils.DownSample2DMatlab.resizeAlongDim"], "function", ["None"], ["", "def", "DownSample2DMatlab", "(", "tensor", ",", "scale", ",", "method", "=", "'cubic'", ",", "antialiasing", "=", "True", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "'''\n    This gives same result as MATLAB downsampling\n    tensor: 4D tensor [Batch, Channel, Height, Width],\n            height and width must be divided by the denominator of scale factor\n    scale: Even integer denominator scale factor only (e.g. 1/2,1/4,1/8,...)\n           Or list [1/2, 1/4] : [V scale, H scale]\n    method: 'cubic' as default, currently cubic supported\n    antialiasing: True as default\n    '''", "\n", "\n", "# For cubic interpolation,", "\n", "# Cubic Convolution Interpolation for Digital Image Processing, ASSP, 1981", "\n", "def", "cubic", "(", "x", ")", ":", "\n", "        ", "absx", "=", "np", ".", "abs", "(", "x", ")", "\n", "absx2", "=", "np", ".", "multiply", "(", "absx", ",", "absx", ")", "\n", "absx3", "=", "np", ".", "multiply", "(", "absx2", ",", "absx", ")", "\n", "\n", "f", "=", "np", ".", "multiply", "(", "(", "1.5", "*", "absx3", "-", "2.5", "*", "absx2", "+", "1", ")", ",", "np", ".", "less_equal", "(", "absx", ",", "1", ")", ")", "+", "np", ".", "multiply", "(", "(", "-", "0.5", "*", "absx3", "+", "2.5", "*", "absx2", "-", "4", "*", "absx", "+", "2", ")", ",", "np", ".", "logical_and", "(", "np", ".", "less", "(", "1", ",", "absx", ")", ",", "np", ".", "less_equal", "(", "absx", ",", "2", ")", ")", ")", "\n", "\n", "return", "f", "\n", "\n", "# Generate resize kernel (resize weight computation)", "\n", "", "def", "contributions", "(", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", ":", "\n", "        ", "if", "scale", "<", "1", "and", "antialiasing", ":", "\n", "            ", "kernel_width", "=", "kernel_width", "/", "scale", "\n", "\n", "", "x", "=", "np", ".", "ones", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "u", "=", "x", "/", "scale", "+", "0.5", "*", "(", "1", "-", "1", "/", "scale", ")", "\n", "\n", "left", "=", "np", ".", "floor", "(", "u", "-", "kernel_width", "/", "2", ")", "\n", "\n", "P", "=", "int", "(", "np", ".", "ceil", "(", "kernel_width", ")", "+", "2", ")", "\n", "\n", "indices", "=", "np", ".", "tile", "(", "left", ",", "(", "1", ",", "P", ")", ")", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "0", ",", "P", ")", ",", "0", ")", "\n", "\n", "if", "scale", "<", "1", "and", "antialiasing", ":", "\n", "            ", "weights", "=", "scale", "*", "kernel", "(", "scale", "*", "(", "np", ".", "tile", "(", "u", ",", "(", "1", ",", "P", ")", ")", "-", "indices", ")", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "kernel", "(", "np", ".", "tile", "(", "u", ",", "(", "1", ",", "P", ")", ")", "-", "indices", ")", "\n", "\n", "", "weights", "=", "weights", "/", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "weights", ",", "1", ")", ",", "1", ")", "\n", "\n", "save", "=", "np", ".", "where", "(", "np", ".", "any", "(", "weights", ",", "0", ")", ")", "\n", "weights", "=", "weights", "[", ":", ",", "save", "[", "0", "]", "]", "\n", "\n", "return", "weights", "\n", "\n", "# Resize along a specified dimension", "\n", "", "def", "resizeAlongDim", "(", "tensor", ",", "scale_v", ",", "scale_h", ",", "kernel_width", ",", "weights", ")", ":", "# , indices):", "\n", "        ", "if", "scale_v", "<", "1", "and", "antialiasing", ":", "\n", "            ", "kernel_width_v", "=", "kernel_width", "/", "scale_v", "\n", "", "else", ":", "\n", "            ", "kernel_width_v", "=", "kernel_width", "\n", "", "if", "scale_h", "<", "1", "and", "antialiasing", ":", "\n", "            ", "kernel_width_h", "=", "kernel_width", "/", "scale_h", "\n", "", "else", ":", "\n", "            ", "kernel_width_h", "=", "kernel_width", "\n", "\n", "# Generate filter", "\n", "", "f_height", "=", "np", ".", "transpose", "(", "weights", "[", "0", "]", "[", "0", ":", "1", ",", ":", "]", ")", "\n", "f_width", "=", "weights", "[", "1", "]", "[", "0", ":", "1", ",", ":", "]", "\n", "f", "=", "np", ".", "dot", "(", "f_height", ",", "f_width", ")", "\n", "f", "=", "f", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "F", "=", "torch", ".", "from_numpy", "(", "f", ".", "astype", "(", "'float32'", ")", ")", "\n", "\n", "# Reflect padding", "\n", "i_scale_v", "=", "int", "(", "1", "/", "scale_v", ")", "\n", "i_scale_h", "=", "int", "(", "1", "/", "scale_h", ")", "\n", "pad_top", "=", "int", "(", "(", "kernel_width_v", "-", "i_scale_v", ")", "/", "2", ")", "\n", "if", "i_scale_v", "==", "1", ":", "\n", "            ", "pad_top", "=", "0", "\n", "", "pad_bottom", "=", "int", "(", "(", "kernel_width_h", "-", "i_scale_h", ")", "/", "2", ")", "\n", "if", "i_scale_h", "==", "1", ":", "\n", "            ", "pad_bottom", "=", "0", "\n", "", "pad_array", "=", "(", "[", "pad_bottom", ",", "pad_bottom", ",", "pad_top", ",", "pad_top", "]", ")", "\n", "kernel_width_v", "=", "int", "(", "kernel_width_v", ")", "\n", "kernel_width_h", "=", "int", "(", "kernel_width_h", ")", "\n", "\n", "#", "\n", "tensor_shape", "=", "tensor", ".", "size", "(", ")", "\n", "num_channel", "=", "tensor_shape", "[", "1", "]", "\n", "FT", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "(", "kernel_width_v", ",", "kernel_width_h", ")", ",", "(", "i_scale_v", ",", "i_scale_h", ")", ",", "bias", "=", "False", ")", "\n", "FT", ".", "weight", ".", "data", "=", "F", "\n", "if", "cuda", ":", "\n", "            ", "FT", ".", "cuda", "(", ")", "\n", "", "FT", ".", "requires_grad", "=", "False", "\n", "\n", "# actually, we want 'symmetric' padding, not 'reflect'", "\n", "outs", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "num_channel", ")", ":", "\n", "            ", "padded", "=", "nn", ".", "functional", ".", "pad", "(", "tensor", "[", ":", ",", "c", ":", "c", "+", "1", ",", ":", ",", ":", "]", ",", "pad_array", ",", "'reflect'", ")", "\n", "outs", ".", "append", "(", "FT", "(", "padded", ")", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "outs", ",", "1", ")", "\n", "\n", "return", "out", "\n", "\n", "", "if", "method", "==", "'cubic'", ":", "\n", "        ", "kernel", "=", "cubic", "\n", "\n", "", "kernel_width", "=", "4", "\n", "\n", "if", "type", "(", "scale", ")", "is", "list", ":", "\n", "        ", "scale_v", "=", "float", "(", "scale", "[", "0", "]", ")", "\n", "scale_h", "=", "float", "(", "scale", "[", "1", "]", ")", "\n", "\n", "weights", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "W", "=", "contributions", "(", "float", "(", "scale", "[", "i", "]", ")", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "weights", ".", "append", "(", "W", ")", "\n", "", "", "else", ":", "\n", "        ", "scale", "=", "float", "(", "scale", ")", "\n", "\n", "scale_v", "=", "scale", "\n", "scale_h", "=", "scale", "\n", "\n", "weights", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "W", "=", "contributions", "(", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "weights", ".", "append", "(", "W", ")", "\n", "\n", "# np.save('bic_x4_downsample_h.npy', weights[0])", "\n", "\n", "", "", "tensor", "=", "resizeAlongDim", "(", "tensor", ",", "scale_v", ",", "scale_h", ",", "kernel_width", ",", "weights", ")", "\n", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.utils.Huber": [[229, 245], ["torch.abs", "torch.abs", "torch.clamp", "torch.clamp", "torch.mean", "torch.mean", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "Huber", "(", "input", ",", "target", ",", "delta", "=", "0.01", ",", "reduce", "=", "True", ")", ":", "\n", "    ", "abs_error", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "quadratic", "=", "torch", ".", "clamp", "(", "abs_error", ",", "max", "=", "delta", ")", "\n", "\n", "# The following expression is the same in value as", "\n", "# tf.maximum(abs_error - delta, 0), but importantly the gradient for the", "\n", "# expression when abs_error == delta is 0 (for tf.maximum it would be 1).", "\n", "# This is necessary to avoid doubling the gradient, since there is already a", "\n", "# nonzero contribution to the gradient from the quadratic term.", "\n", "linear", "=", "(", "abs_error", "-", "quadratic", ")", "\n", "losses", "=", "0.5", "*", "torch", ".", "pow", "(", "quadratic", ",", "2", ")", "+", "delta", "*", "linear", "\n", "\n", "if", "reduce", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "losses", ")", "\n", "", "else", ":", "\n", "        ", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.tools.utils.im2tensor": [[247, 250], ["torch.Tensor", "torch.Tensor", "[].transpose"], "function", ["None"], ["", "", "def", "im2tensor", "(", "image", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "    ", "return", "torch", ".", "Tensor", "(", "(", "image", "/", "factor", "-", "cent", ")", "\n", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.DWT.__init__": [[66, 69], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DWT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "requires_grad", "=", "False", "# \u4fe1\u53f7\u5904\u7406\uff0c\u975e\u5377\u79ef\u8fd0\u7b97\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u68af\u5ea6\u6c42\u5bfc", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.DWT.forward": [[70, 72], ["wavelet_SRCNN_remix.dwt_init"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.dwt_init"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "dwt_init", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.IWT.__init__": [[76, 79], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "IWT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.IWT.forward": [[80, 82], ["wavelet_SRCNN_remix.iwt_init"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.iwt_init"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "iwt_init", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.crop.__init__": [[84, 86], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "crop", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.crop.forward": [[87, 89], ["wavelet_SRCNN_remix.cropimage"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.cropimage"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "cropimage", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.crop_re.__init__": [[91, 93], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "crop_re", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.crop_re.forward": [[94, 96], ["wavelet_SRCNN_remix.reconstruct"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.reconstruct"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "reconstruct", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.SRCNN_Wide.__init__": [[98, 108], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "wavelet_SRCNN_remix.DWT", "wavelet_SRCNN_remix.IWT", "wavelet_SRCNN_remix.crop", "wavelet_SRCNN_remix.crop_re"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", "=", "3", ",", "output_channel", "=", "3", ")", ":", "\n", "        ", "super", "(", "SRCNN_Wide", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_channels", ",", "output_channel", ",", "kernel_size", "=", "9", ",", "padding", "=", "9", "//", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "output_channel", ",", "64", ",", "kernel_size", "=", "5", ",", "padding", "=", "5", "//", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "num_channels", ",", "kernel_size", "=", "5", ",", "padding", "=", "5", "//", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "DWT", "=", "DWT", "(", ")", "\n", "self", ".", "IDWT", "=", "IWT", "(", ")", "\n", "self", ".", "crop", "=", "crop", "(", ")", "\n", "self", ".", "rec_crop", "=", "crop_re", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.SRCNN_Wide.forward": [[109, 124], ["wavelet_SRCNN_remix.SRCNN_Wide.DWT", "wavelet_SRCNN_remix.SRCNN_Wide.relu", "wavelet_SRCNN_remix.SRCNN_Wide.relu", "wavelet_SRCNN_remix.SRCNN_Wide.conv3", "wavelet_SRCNN_remix.SRCNN_Wide.IDWT", "wavelet_SRCNN_remix.SRCNN_Wide.crop", "wavelet_SRCNN_remix.SRCNN_Wide.relu", "wavelet_SRCNN_remix.SRCNN_Wide.relu", "wavelet_SRCNN_remix.SRCNN_Wide.conv3", "wavelet_SRCNN_remix.SRCNN_Wide.rec_crop", "wavelet_SRCNN_remix.SRCNN_Wide.conv1", "wavelet_SRCNN_remix.SRCNN_Wide.conv2", "wavelet_SRCNN_remix.SRCNN_Wide.conv1", "wavelet_SRCNN_remix.SRCNN_Wide.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "DWT", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "IDWT", "(", "x", ")", "\n", "\n", "crop", "=", "self", ".", "crop", "(", "x", ")", "\n", "crop", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "crop", ")", ")", "\n", "crop", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "crop", ")", ")", "\n", "crop", "=", "self", ".", "conv3", "(", "crop", ")", "\n", "\n", "y", "=", "self", ".", "rec_crop", "(", "crop", ")", "\n", "\n", "return", "x", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.SRCNN.__init__": [[127, 137], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "wavelet_SRCNN_remix.DWT", "wavelet_SRCNN_remix.IWT", "wavelet_SRCNN_remix.crop", "wavelet_SRCNN_remix.crop_re"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "SRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_channels", ",", "64", ",", "kernel_size", "=", "9", ",", "padding", "=", "9", "//", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "5", "//", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "num_channels", ",", "kernel_size", "=", "5", ",", "padding", "=", "5", "//", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "DWT", "=", "DWT", "(", ")", "\n", "self", ".", "IDWT", "=", "IWT", "(", ")", "\n", "self", ".", "crop", "=", "crop", "(", ")", "\n", "self", ".", "rec_crop", "=", "crop_re", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.SRCNN.forward": [[138, 153], ["wavelet_SRCNN_remix.SRCNN.DWT", "wavelet_SRCNN_remix.SRCNN.relu", "wavelet_SRCNN_remix.SRCNN.relu", "wavelet_SRCNN_remix.SRCNN.conv3", "wavelet_SRCNN_remix.SRCNN.IDWT", "wavelet_SRCNN_remix.SRCNN.crop", "wavelet_SRCNN_remix.SRCNN.relu", "wavelet_SRCNN_remix.SRCNN.relu", "wavelet_SRCNN_remix.SRCNN.conv3", "wavelet_SRCNN_remix.SRCNN.rec_crop", "wavelet_SRCNN_remix.SRCNN.conv1", "wavelet_SRCNN_remix.SRCNN.conv2", "wavelet_SRCNN_remix.SRCNN.conv1", "wavelet_SRCNN_remix.SRCNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "DWT", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "IDWT", "(", "x", ")", "\n", "\n", "crop", "=", "self", ".", "crop", "(", "x", ")", "\n", "crop", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "crop", ")", ")", "\n", "crop", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "crop", ")", ")", "\n", "crop", "=", "self", ".", "conv3", "(", "crop", ")", "\n", "\n", "y", "=", "self", ".", "rec_crop", "(", "crop", ")", "\n", "\n", "return", "x", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.cropimage": [[9, 16], ["torch.cat", "torch.cat", "torch.cat", "x.size", "x.size", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "cropimage", "(", "x", ")", ":", "\n", "    ", "H", ",", "W", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "x_l_top", "=", "x", "[", ":", ",", ":", ",", "0", ":", "int", "(", "H", "/", "2", ")", ",", "0", ":", "int", "(", "W", "/", "2", ")", "]", "\n", "x_r_top", "=", "x", "[", ":", ",", ":", ",", "0", ":", "int", "(", "H", "/", "2", ")", ",", "int", "(", "W", "/", "2", ")", ":", "W", "]", "\n", "x_l_bot", "=", "x", "[", ":", ",", ":", ",", "int", "(", "H", "/", "2", ")", ":", "H", ",", "0", ":", "int", "(", "W", "/", "2", ")", "]", "\n", "x_r_bot", "=", "x", "[", ":", ",", ":", ",", "int", "(", "H", "/", "2", ")", ":", "H", ",", "int", "(", "W", "/", "2", ")", ":", "W", "]", "\n", "return", "torch", ".", "cat", "(", "(", "x_l_top", ",", "x_r_top", ",", "x_l_bot", ",", "x_r_bot", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.reconstruct": [[17, 27], ["int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size"], "function", ["None"], ["", "def", "reconstruct", "(", "x", ")", ":", "\n", "     ", "out_batch", "=", "int", "(", "x", ".", "size", "(", "0", ")", "/", "4", ")", "\n", "x_l_top", "=", "x", "[", "0", ":", "out_batch", ",", ":", ",", ":", ",", ":", "]", "\n", "x_r_top", "=", "x", "[", "out_batch", ":", "out_batch", "*", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "x_l_bot", "=", "x", "[", "out_batch", "*", "2", ":", "out_batch", "*", "3", ",", ":", ",", ":", ",", ":", "]", "\n", "x_r_bot", "=", "x", "[", "out_batch", "*", "3", ":", "out_batch", "*", "4", ",", ":", ",", ":", ",", ":", "]", "\n", "x_top", "=", "torch", ".", "cat", "(", "(", "x_l_top", ",", "x_r_top", ")", ",", "dim", "=", "3", ")", "\n", "x_bot", "=", "torch", ".", "cat", "(", "(", "x_l_bot", ",", "x_r_bot", ")", ",", "dim", "=", "3", ")", "\n", "x_rec", "=", "torch", ".", "cat", "(", "(", "x_top", ",", "x_bot", ")", ",", "dim", "=", "2", ")", "\n", "return", "x_rec", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.dwt_init": [[29, 42], ["torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "dwt_init", "(", "x", ")", ":", "\n", "\n", "    ", "x01", "=", "x", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", ":", "]", "/", "2", "\n", "x02", "=", "x", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", ":", "]", "/", "2", "\n", "x1", "=", "x01", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", "\n", "x2", "=", "x02", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", "\n", "x3", "=", "x01", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", "\n", "x4", "=", "x02", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", "\n", "x_LL", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "\n", "x_HL", "=", "-", "x1", "-", "x2", "+", "x3", "+", "x4", "\n", "x_LH", "=", "-", "x1", "+", "x2", "-", "x3", "+", "x4", "\n", "x_HH", "=", "x1", "-", "x2", "-", "x3", "+", "x4", "\n", "return", "torch", ".", "cat", "(", "(", "x_LL", ",", "x_HL", ",", "x_LH", ",", "x_HH", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN_remix.iwt_init": [[45, 63], ["x.size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "int", "int", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "iwt_init", "(", "x", ")", ":", "\n", "    ", "r", "=", "2", "\n", "in_batch", ",", "in_channel", ",", "in_height", ",", "in_width", "=", "x", ".", "size", "(", ")", "\n", "#print([in_batch, in_channel, in_height, in_width])", "\n", "out_batch", ",", "out_channel", ",", "out_height", ",", "out_width", "=", "int", "(", "in_batch", "/", "r", "**", "2", ")", ",", "int", "(", "in_channel", ")", ",", "r", "*", "in_height", ",", "r", "*", "in_width", "\n", "x1", "=", "x", "[", "0", ":", "out_batch", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x2", "=", "x", "[", "out_batch", ":", "out_batch", "*", "2", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x3", "=", "x", "[", "out_batch", "*", "2", ":", "out_batch", "*", "3", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x4", "=", "x", "[", "out_batch", "*", "3", ":", "out_batch", "*", "4", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "\n", "h", "=", "torch", ".", "zeros", "(", "[", "out_batch", ",", "out_channel", ",", "out_height", ",", "out_width", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "h", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "=", "x1", "-", "x2", "-", "x3", "+", "x4", "\n", "h", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", "]", "=", "x1", "-", "x2", "+", "x3", "-", "x4", "\n", "h", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "x1", "+", "x2", "-", "x3", "-", "x4", "\n", "h", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN.DWT.__init__": [[48, 51], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DWT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "requires_grad", "=", "False", "# \u4fe1\u53f7\u5904\u7406\uff0c\u975e\u5377\u79ef\u8fd0\u7b97\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u68af\u5ea6\u6c42\u5bfc", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN.DWT.forward": [[52, 54], ["wavelet_SRCNN.dwt_init"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.dwt_init"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "dwt_init", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN.IWT.__init__": [[58, 61], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "IWT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN.IWT.forward": [[62, 64], ["wavelet_SRCNN.iwt_init"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.iwt_init"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "iwt_init", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN.SRCNN.__init__": [[69, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "wavelet_SRCNN.DWT", "wavelet_SRCNN.IWT"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "SRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_channels", ",", "64", ",", "kernel_size", "=", "9", ",", "padding", "=", "9", "//", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "5", "//", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "num_channels", ",", "kernel_size", "=", "5", ",", "padding", "=", "5", "//", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "DWT", "=", "DWT", "(", ")", "\n", "self", ".", "IDWT", "=", "IWT", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN.SRCNN.forward": [[78, 86], ["wavelet_SRCNN.SRCNN.DWT", "wavelet_SRCNN.SRCNN.relu", "wavelet_SRCNN.SRCNN.relu", "wavelet_SRCNN.SRCNN.conv3", "wavelet_SRCNN.SRCNN.IDWT", "wavelet_SRCNN.SRCNN.conv1", "wavelet_SRCNN.SRCNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "DWT", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "IDWT", "(", "x", ")", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN.dwt_init": [[9, 22], ["torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["def", "dwt_init", "(", "x", ")", ":", "\n", "\n", "    ", "x01", "=", "x", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", ":", "]", "/", "2", "\n", "x02", "=", "x", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", ":", "]", "/", "2", "\n", "x1", "=", "x01", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", "\n", "x2", "=", "x02", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", "\n", "x3", "=", "x01", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", "\n", "x4", "=", "x02", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", "\n", "x_LL", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "\n", "x_HL", "=", "-", "x1", "-", "x2", "+", "x3", "+", "x4", "\n", "x_LH", "=", "-", "x1", "+", "x2", "-", "x3", "+", "x4", "\n", "x_HH", "=", "x1", "-", "x2", "-", "x3", "+", "x4", "\n", "return", "torch", ".", "cat", "(", "(", "x_LL", ",", "x_HL", ",", "x_LH", ",", "x_HH", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_SRCNN.iwt_init": [[25, 45], ["x.size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "int", "int", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "iwt_init", "(", "x", ")", ":", "\n", "    ", "r", "=", "2", "\n", "in_batch", ",", "in_channel", ",", "in_height", ",", "in_width", "=", "x", ".", "size", "(", ")", "\n", "#print([in_batch, in_channel, in_height, in_width])", "\n", "out_batch", ",", "out_channel", ",", "out_height", ",", "out_width", "=", "int", "(", "in_batch", "/", "r", "**", "2", ")", ",", "int", "(", "\n", "in_channel", ")", ",", "r", "*", "in_height", ",", "r", "*", "in_width", "\n", "x1", "=", "x", "[", "0", ":", "out_batch", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x2", "=", "x", "[", "out_batch", ":", "out_batch", "*", "2", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x3", "=", "x", "[", "out_batch", "*", "2", ":", "out_batch", "*", "3", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x4", "=", "x", "[", "out_batch", "*", "3", ":", "out_batch", "*", "4", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "\n", "h", "=", "torch", ".", "zeros", "(", "[", "out_batch", ",", "out_channel", ",", "out_height", ",", "\n", "out_width", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "h", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "=", "x1", "-", "x2", "-", "x3", "+", "x4", "\n", "h", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", "]", "=", "x1", "-", "x2", "+", "x3", "-", "x4", "\n", "h", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "x1", "+", "x2", "-", "x3", "-", "x4", "\n", "h", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.DWT.__init__": [[52, 55], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DWT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "requires_grad", "=", "False", "# \u4fe1\u53f7\u5904\u7406\uff0c\u975e\u5377\u79ef\u8fd0\u7b97\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u68af\u5ea6\u6c42\u5bfc", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.DWT.forward": [[56, 58], ["wavelet_deblur_remix.dwt_init"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.dwt_init"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "dwt_init", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.IWT.__init__": [[62, 65], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "IWT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.IWT.forward": [[66, 68], ["wavelet_deblur_remix.iwt_init"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.iwt_init"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "iwt_init", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.AtrousNet_wavlet_remix.__init__": [[70, 176], ["torch.ELU", "torch.ELU", "torch.Module.__init__", "wavelet_deblur_remix.DWT", "wavelet_deblur_remix.IWT", "wavelet_deblur_remix.AtrousNet_wavlet_remix.downsampling_layers.append", "wavelet_deblur_remix.AtrousNet_wavlet_remix.downsampling_layers.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "range", "torch.Sequential", "torch.Sequential", "wavelet_deblur_remix.AtrousNet_wavlet_remix.upsampling_layers.append", "wavelet_deblur_remix.AtrousNet_wavlet_remix.upsampling_layers.append", "torch.Sequential", "torch.Sequential", "wavelet_deblur_remix.AtrousNet_wavlet_remix.output_layer.append", "wavelet_deblur_remix.AtrousNet_wavlet_remix.output_layer.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.Upsample", "torch.Upsample", "torch.ELU", "torch.ELU", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "wavelet_deblur_remix.AtrousNet_wavlet_remix.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "wavelet_deblur_remix.AtrousNet_wavlet_remix.blocks.append", "wavelet_deblur_remix.AtrousNet_wavlet_remix.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "10", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "16", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet_wavlet_remix", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "DWT", "=", "DWT", "(", ")", "\n", "self", ".", "IDWT", "=", "IWT", "(", ")", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "self", ".", "wavelet_conv", "=", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "elif", "x", "!=", "num_blocks", "-", "1", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "1", "]", ")", ")", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "# self.upsampling_layers.append(nn.ConvTranspose2d(in_channels=self.d_mult * 6,  # Error: should be 4", "\n", "#                                                  out_channels=self.d_mult * 2,", "\n", "#                                                  kernel_size=3,", "\n", "#                                                  stride=2,", "\n", "#                                                  padding=1,", "\n", "#                                                  output_padding=1,", "\n", "#                                                  bias=True))", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "13", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.AtrousNet_wavlet_remix.forward": [[177, 208], ["range", "wavelet_deblur_remix.AtrousNet_wavlet_remix.DWT", "wavelet_deblur_remix.AtrousNet_wavlet_remix.wavelet_conv", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "len", "downs.append", "len", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "wavelet_deblur_remix.AtrousNet_wavlet_remix.IDWT", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "wavelet_down", "=", "self", ".", "DWT", "(", "downs", "[", "0", "]", ")", "\n", "wavelet_down", "=", "self", ".", "wavelet_conv", "(", "wavelet_down", ")", "\n", "wavelet_net", "=", "wavelet_down", "\n", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "wavelet_net", "=", "self", ".", "blocks", "[", "x", "]", "(", "wavelet_net", ")", "\n", "\n", "", "wavelet_net", "=", "torch", ".", "cat", "(", "(", "wavelet_down", ",", "wavelet_net", ")", ",", "1", ")", "\n", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "upsampling_layers", ")", ")", ":", "\n", "            ", "idx", "=", "len", "(", "downs", ")", "-", "x", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "wavelet_net", "=", "self", ".", "upsampling_layers", "[", "-", "1", "]", "(", "self", ".", "IDWT", "(", "wavelet_net", ")", ")", "\n", "net", "=", "torch", ".", "cat", "(", "(", "wavelet_net", ",", "net", ")", ",", "1", ")", "\n", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "return", "input_data", "+", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize": [[6, 12], ["x.max", "x.min"], "function", ["None"], ["def", "Normalize", "(", "x", ")", ":", "\n", "    ", "ymax", "=", "255", "\n", "ymin", "=", "0", "\n", "xmax", "=", "x", ".", "max", "(", ")", "\n", "xmin", "=", "x", ".", "min", "(", ")", "\n", "return", "(", "ymax", "-", "ymin", ")", "*", "(", "x", "-", "xmin", ")", "/", "(", "xmax", "-", "xmin", ")", "+", "ymin", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.dwt_init": [[13, 27], ["torch.cat", "torch.cat"], "function", ["None"], ["", "def", "dwt_init", "(", "x", ")", ":", "\n", "\n", "    ", "x01", "=", "x", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", ":", "]", "/", "2", "\n", "x02", "=", "x", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", ":", "]", "/", "2", "\n", "x1", "=", "x01", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", "\n", "x2", "=", "x02", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", "\n", "x3", "=", "x01", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", "\n", "x4", "=", "x02", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", "\n", "x_LL", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "\n", "x_HL", "=", "-", "x1", "-", "x2", "+", "x3", "+", "x4", "\n", "x_LH", "=", "-", "x1", "+", "x2", "-", "x3", "+", "x4", "\n", "x_HH", "=", "x1", "-", "x2", "-", "x3", "+", "x4", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "x_LL", ",", "x_HL", ",", "x_LH", ",", "x_HH", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.iwt_init": [[30, 49], ["x.size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "int", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "iwt_init", "(", "x", ")", ":", "\n", "    ", "r", "=", "2", "\n", "in_batch", ",", "in_channel", ",", "in_height", ",", "in_width", "=", "x", ".", "size", "(", ")", "\n", "#print([in_batch, in_channel, in_height, in_width])", "\n", "out_batch", ",", "out_channel", ",", "out_height", ",", "out_width", "=", "int", "(", "in_batch", "/", "(", "r", "**", "2", ")", ")", ",", "in_channel", ",", "r", "*", "in_height", ",", "r", "*", "in_width", "\n", "x1", "=", "x", "[", "0", ":", "out_batch", ",", ":", ",", ":", "]", "/", "2", "\n", "x2", "=", "x", "[", "out_batch", ":", "out_batch", "*", "2", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x3", "=", "x", "[", "out_batch", "*", "2", ":", "out_batch", "*", "3", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x4", "=", "x", "[", "out_batch", "*", "3", ":", "out_batch", "*", "4", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "\n", "h", "=", "torch", ".", "zeros", "(", "[", "out_batch", ",", "out_channel", ",", "out_height", ",", "\n", "out_width", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "h", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "=", "x1", "-", "x2", "-", "x3", "+", "x4", "\n", "h", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", "]", "=", "x1", "-", "x2", "+", "x3", "-", "x4", "\n", "h", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "x1", "+", "x2", "-", "x3", "-", "x4", "\n", "h", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.ContextBlock.__init__": [[39, 77], ["torch.nn.Module.__init__", "isinstance", "all", "int", "model_stage1_ContextBlock.ContextBlock.reset_parameters", "len", "torch.nn.Conv2d", "torch.nn.Softmax", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.ContextBlock.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "ratio", ",", "\n", "pooling_type", "=", "'att'", ",", "\n", "fusion_types", "=", "(", "'channel_add'", ",", ")", ")", ":", "\n", "        ", "super", "(", "ContextBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "pooling_type", "in", "[", "'avg'", ",", "'att'", "]", "\n", "assert", "isinstance", "(", "fusion_types", ",", "(", "list", ",", "tuple", ")", ")", "\n", "valid_fusion_types", "=", "[", "'channel_add'", ",", "'channel_mul'", "]", "\n", "assert", "all", "(", "[", "f", "in", "valid_fusion_types", "for", "f", "in", "fusion_types", "]", ")", "\n", "assert", "len", "(", "fusion_types", ")", ">", "0", ",", "'at least one fusion should be used'", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "planes", "=", "int", "(", "inplanes", "*", "ratio", ")", "\n", "self", ".", "pooling_type", "=", "pooling_type", "\n", "self", ".", "fusion_types", "=", "fusion_types", "\n", "if", "pooling_type", "==", "'att'", ":", "\n", "            ", "self", ".", "conv_mask", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "", "if", "'channel_add'", "in", "fusion_types", ":", "\n", "            ", "self", ".", "channel_add_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "self", ".", "planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "# nn.LayerNorm([self.planes, 1, 1]),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# yapf: disable", "\n", "nn", ".", "Conv2d", "(", "self", ".", "planes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "channel_add_conv", "=", "None", "\n", "", "if", "'channel_mul'", "in", "fusion_types", ":", "\n", "            ", "self", ".", "channel_mul_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "self", ".", "planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "# nn.LayerNorm([self.planes, 1, 1]),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# yapf: disable", "\n", "nn", ".", "Conv2d", "(", "self", ".", "planes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "channel_mul_conv", "=", "None", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.ContextBlock.reset_parameters": [[78, 87], ["model_stage1_ContextBlock.kaiming_init", "model_stage1_ContextBlock.last_zero_init", "model_stage1_ContextBlock.last_zero_init"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.kaiming_init", "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.last_zero_init", "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.last_zero_init"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "pooling_type", "==", "'att'", ":", "\n", "            ", "kaiming_init", "(", "self", ".", "conv_mask", ",", "mode", "=", "'fan_in'", ")", "\n", "self", ".", "conv_mask", ".", "inited", "=", "True", "\n", "\n", "", "if", "self", ".", "channel_add_conv", "is", "not", "None", ":", "\n", "            ", "last_zero_init", "(", "self", ".", "channel_add_conv", ")", "\n", "", "if", "self", ".", "channel_mul_conv", "is", "not", "None", ":", "\n", "            ", "last_zero_init", "(", "self", ".", "channel_mul_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.ContextBlock.spatial_pool": [[88, 113], ["x.size", "input_x.unsqueeze.unsqueeze.view", "input_x.unsqueeze.unsqueeze.unsqueeze", "model_stage1_ContextBlock.ContextBlock.conv_mask", "context_mask.unsqueeze.unsqueeze.view", "model_stage1_ContextBlock.ContextBlock.softmax", "context_mask.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "model_stage1_ContextBlock.ContextBlock.view", "model_stage1_ContextBlock.ContextBlock.avg_pool"], "methods", ["None"], ["", "", "def", "spatial_pool", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", ",", "channel", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "if", "self", ".", "pooling_type", "==", "'att'", ":", "\n", "            ", "input_x", "=", "x", "\n", "# [N, C, H * W]", "\n", "input_x", "=", "input_x", ".", "view", "(", "batch", ",", "channel", ",", "height", "*", "width", ")", "\n", "# [N, 1, C, H * W]", "\n", "input_x", "=", "input_x", ".", "unsqueeze", "(", "1", ")", "\n", "# [N, 1, H, W]", "\n", "context_mask", "=", "self", ".", "conv_mask", "(", "x", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "context_mask", ".", "view", "(", "batch", ",", "1", ",", "height", "*", "width", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "self", ".", "softmax", "(", "context_mask", ")", "\n", "# [N, 1, H * W, 1]", "\n", "context_mask", "=", "context_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# [N, 1, C, 1]", "\n", "context", "=", "torch", ".", "matmul", "(", "input_x", ",", "context_mask", ")", "\n", "# [N, C, 1, 1]", "\n", "context", "=", "context", ".", "view", "(", "batch", ",", "channel", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "context", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n", "", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.ContextBlock.forward": [[114, 129], ["model_stage1_ContextBlock.ContextBlock.spatial_pool", "torch.sigmoid", "model_stage1_ContextBlock.ContextBlock.channel_add_conv", "model_stage1_ContextBlock.ContextBlock.channel_mul_conv"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.ContextBlock.spatial_pool"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# [N, C, 1, 1]", "\n", "        ", "context", "=", "self", ".", "spatial_pool", "(", "x", ")", "\n", "\n", "out", "=", "x", "\n", "if", "self", ".", "channel_mul_conv", "is", "not", "None", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "channel_mul_term", "=", "torch", ".", "sigmoid", "(", "self", ".", "channel_mul_conv", "(", "context", ")", ")", "\n", "out", "=", "out", "*", "channel_mul_term", "\n", "", "if", "self", ".", "channel_add_conv", "is", "not", "None", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "channel_add_term", "=", "self", ".", "channel_add_conv", "(", "context", ")", "\n", "out", "=", "out", "+", "channel_add_term", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.__init__": [[132, 225], ["torch.nn.ELU", "torch.nn.Module.__init__", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_SRCNN_remix.SRCNN_Wide", "model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.downsampling_layers.append", "model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.downsampling_layers.append", "torch.nn.Sequential", "range", "torch.nn.Sequential", "model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.upsampling_layers.append", "torch.nn.Sequential", "model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.output_layer.append", "model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.output_layer.append", "model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.output_layer.append", "torch.nn.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.nn.Upsample", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_ContextBlock.ContextBlock", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.blocks.append", "model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "20", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "32", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet_billinear_Wide_dilated_gcnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "srcnn", "=", "SRCNN_Wide", "(", "self", ".", "d_mult", "*", "6", ",", "self", ".", "d_mult", "*", "7", ")", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "elif", "x", "!=", "num_blocks", "-", "1", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "1", "]", ")", ")", "\n", "\n", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "# self.upsampling_layers.append(nn.ELU(alpha=1.0, inplace=True))", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "6", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "ContextBlock", "(", "inplanes", "=", "self", ".", "d_mult", ",", "ratio", "=", "0.25", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.forward": [[226, 251], ["range", "range", "torch.cat", "model_stage1_ContextBlock.AtrousNet_billinear_Wide_dilated_gcnet.srcnn", "range", "len", "downs.append", "len", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "idx", "=", "len", "(", "downs", ")", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "\n", "# use the srcnn", "\n", "srcnn_output", "=", "self", ".", "srcnn", "(", "net", ")", "\n", "net_add", "=", "net", "+", "srcnn_output", "\n", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "0", "]", "(", "net_add", ")", "\n", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "output", "=", "input_data", "+", "net", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.__init__": [[254, 345], ["torch.nn.ELU", "torch.nn.Module.__init__", "model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.downsampling_layers.append", "model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.downsampling_layers.append", "torch.nn.Sequential", "range", "torch.nn.Sequential", "model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.upsampling_layers.append", "model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.upsampling_layers.append", "torch.nn.Sequential", "model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.output_layer.append", "model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.output_layer.append", "model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.output_layer.append", "torch.nn.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.nn.Upsample", "torch.nn.ELU", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_ContextBlock.ContextBlock", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.blocks.append", "model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "10", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "32", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet_billinear_ContextBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "elif", "x", "!=", "num_blocks", "-", "1", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "1", "]", ")", ")", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "7", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "ContextBlock", "(", "inplanes", "=", "self", ".", "d_mult", ",", "ratio", "=", "0.25", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.AtrousNet_billinear_ContextBlock.forward": [[346, 364], ["range", "range", "range", "range", "len", "downs.append", "len", "len", "torch.cat", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "upsampling_layers", ")", ")", ":", "\n", "            ", "idx", "=", "len", "(", "downs", ")", "-", "x", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "return", "input_data", "+", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.kaiming_init": [[8, 22], ["hasattr", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "function", ["None"], ["def", "kaiming_init", "(", "module", ",", "\n", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ",", "\n", "bias", "=", "0", ",", "\n", "distribution", "=", "'normal'", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "'uniform'", ",", "'normal'", "]", "\n", "if", "distribution", "==", "'uniform'", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.constant_init": [[24, 29], ["hasattr", "torch.nn.init.constant_", "hasattr", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "constant_init", "(", "module", ",", "val", ",", "bias", "=", "0", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'weight'", ")", "and", "module", ".", "weight", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "weight", ",", "val", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.last_zero_init": [[30, 35], ["isinstance", "model_stage1_ContextBlock.constant_init", "model_stage1_ContextBlock.constant_init"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.constant_init", "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_ContextBlock.constant_init"], ["", "", "def", "last_zero_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "        ", "constant_init", "(", "m", "[", "-", "1", "]", ",", "val", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "constant_init", "(", "m", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.DWT.__init__": [[67, 70], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DWT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "requires_grad", "=", "False", "# \u4fe1\u53f7\u5904\u7406\uff0c\u975e\u5377\u79ef\u8fd0\u7b97\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u68af\u5ea6\u6c42\u5bfc", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.DWT.forward": [[71, 73], ["model_stage1_dual_branch_tail_no_upsample_elu.dwt_init"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.dwt_init"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "dwt_init", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.IWT.__init__": [[77, 80], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "IWT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.IWT.forward": [[81, 83], ["model_stage1_dual_branch_tail_no_upsample_elu.iwt_init"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.iwt_init"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "iwt_init", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.SRCNN.__init__": [[86, 94], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "model_stage1_dual_branch_tail_no_upsample_elu.DWT", "model_stage1_dual_branch_tail_no_upsample_elu.IWT"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "SRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_channels", ",", "64", ",", "kernel_size", "=", "9", ",", "padding", "=", "9", "//", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "5", "//", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "out_channels", ",", "kernel_size", "=", "5", ",", "padding", "=", "5", "//", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "DWT", "=", "DWT", "(", ")", "\n", "self", ".", "IDWT", "=", "IWT", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.SRCNN.forward": [[95, 103], ["model_stage1_dual_branch_tail_no_upsample_elu.SRCNN.DWT", "model_stage1_dual_branch_tail_no_upsample_elu.SRCNN.relu", "model_stage1_dual_branch_tail_no_upsample_elu.SRCNN.relu", "model_stage1_dual_branch_tail_no_upsample_elu.SRCNN.conv3", "model_stage1_dual_branch_tail_no_upsample_elu.SRCNN.IDWT", "model_stage1_dual_branch_tail_no_upsample_elu.SRCNN.conv1", "model_stage1_dual_branch_tail_no_upsample_elu.SRCNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "DWT", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "IDWT", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu.__init__": [[106, 196], ["torch.ELU", "torch.ELU", "torch.Module.__init__", "model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu.downsampling_layers.append", "model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu.downsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_stage1_dual_branch_tail_no_upsample_elu.SRCNN", "range", "torch.Sequential", "torch.Sequential", "model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu.upsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu.output_layer.append", "model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu.output_layer.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.Upsample", "torch.Upsample", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu.blocks.append", "model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "10", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "32", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet_SRCNN_tail_no_upsample_elu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "self", ".", "SRCNN", "=", "SRCNN", "(", "self", ".", "d_mult", "*", "6", ",", "self", ".", "out_channels", ")", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "elif", "x", "!=", "num_blocks", "-", "1", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "1", "]", ")", ")", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ")", "\n", "# self.upsampling_layers.append(nn.ELU(alpha=1.0, inplace=True))", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "6", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu.forward": [[197, 222], ["range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_stage1_dual_branch_tail_no_upsample_elu.AtrousNet_SRCNN_tail_no_upsample_elu.SRCNN", "range", "len", "downs.append", "len", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "# for x in range(len(self.upsampling_layers)):", "\n", "#     idx = len(downs) - x - 1", "\n", "#     net = torch.cat((net, downs[idx]), 1)", "\n", "#     net = self.upsampling_layers[x](net)", "\n", "\n", "", "idx", "=", "len", "(", "downs", ")", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "0", "]", "(", "net", ")", "\n", "\n", "SRCNN_net", "=", "self", ".", "SRCNN", "(", "net", ")", "\n", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "return", "input_data", "+", "net", "+", "SRCNN_net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.cropimage": [[8, 15], ["torch.cat", "torch.cat", "x.size", "x.size", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "cropimage", "(", "x", ")", ":", "\n", "    ", "H", ",", "W", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "x_l_top", "=", "x", "[", ":", ",", ":", ",", "0", ":", "int", "(", "H", "/", "2", ")", ",", "0", ":", "int", "(", "W", "/", "2", ")", "]", "\n", "x_r_top", "=", "x", "[", ":", ",", ":", ",", "0", ":", "int", "(", "H", "/", "2", ")", ",", "int", "(", "W", "/", "2", ")", ":", "W", "]", "\n", "x_l_bot", "=", "x", "[", ":", ",", ":", ",", "int", "(", "H", "/", "2", ")", ":", "H", ",", "0", ":", "int", "(", "W", "/", "2", ")", "]", "\n", "x_r_bot", "=", "x", "[", ":", ",", ":", ",", "int", "(", "H", "/", "2", ")", ":", "H", ",", "int", "(", "W", "/", "2", ")", ":", "W", "]", "\n", "return", "torch", ".", "cat", "(", "(", "x_l_top", ",", "x_r_top", ",", "x_l_bot", ",", "x_r_bot", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.reconstruct": [[16, 26], ["int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size"], "function", ["None"], ["", "def", "reconstruct", "(", "x", ")", ":", "\n", "     ", "out_batch", "=", "int", "(", "x", ".", "size", "(", "0", ")", "/", "4", ")", "\n", "x_l_top", "=", "x", "[", "0", ":", "out_batch", ",", ":", ",", ":", ",", ":", "]", "\n", "x_r_top", "=", "x", "[", "out_batch", ":", "out_batch", "*", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "x_l_bot", "=", "x", "[", "out_batch", "*", "2", ":", "out_batch", "*", "3", ",", ":", ",", ":", ",", ":", "]", "\n", "x_r_bot", "=", "x", "[", "out_batch", "*", "3", ":", "out_batch", "*", "4", ",", ":", ",", ":", ",", ":", "]", "\n", "x_top", "=", "torch", ".", "cat", "(", "(", "x_l_top", ",", "x_r_top", ")", ",", "dim", "=", "3", ")", "\n", "x_bot", "=", "torch", ".", "cat", "(", "(", "x_l_bot", ",", "x_r_bot", ")", ",", "dim", "=", "3", ")", "\n", "x_rec", "=", "torch", ".", "cat", "(", "(", "x_top", ",", "x_bot", ")", ",", "dim", "=", "2", ")", "\n", "return", "x_rec", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.dwt_init": [[28, 41], ["torch.cat", "torch.cat"], "function", ["None"], ["", "def", "dwt_init", "(", "x", ")", ":", "\n", "\n", "    ", "x01", "=", "x", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", ":", "]", "/", "2", "\n", "x02", "=", "x", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", ":", "]", "/", "2", "\n", "x1", "=", "x01", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", "\n", "x2", "=", "x02", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", "\n", "x3", "=", "x01", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", "\n", "x4", "=", "x02", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", "\n", "x_LL", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "\n", "x_HL", "=", "-", "x1", "-", "x2", "+", "x3", "+", "x4", "\n", "x_LH", "=", "-", "x1", "+", "x2", "-", "x3", "+", "x4", "\n", "x_HH", "=", "x1", "-", "x2", "-", "x3", "+", "x4", "\n", "return", "torch", ".", "cat", "(", "(", "x_LL", ",", "x_HL", ",", "x_LH", ",", "x_HH", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail_no_upsample_elu.iwt_init": [[44, 64], ["x.size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "int", "int", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "iwt_init", "(", "x", ")", ":", "\n", "    ", "r", "=", "2", "\n", "in_batch", ",", "in_channel", ",", "in_height", ",", "in_width", "=", "x", ".", "size", "(", ")", "\n", "#print([in_batch, in_channel, in_height, in_width])", "\n", "out_batch", ",", "out_channel", ",", "out_height", ",", "out_width", "=", "int", "(", "in_batch", "/", "r", "**", "2", ")", ",", "int", "(", "\n", "in_channel", ")", ",", "r", "*", "in_height", ",", "r", "*", "in_width", "\n", "x1", "=", "x", "[", "0", ":", "out_batch", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x2", "=", "x", "[", "out_batch", ":", "out_batch", "*", "2", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x3", "=", "x", "[", "out_batch", "*", "2", ":", "out_batch", "*", "3", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x4", "=", "x", "[", "out_batch", "*", "3", ":", "out_batch", "*", "4", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "\n", "h", "=", "torch", ".", "zeros", "(", "[", "out_batch", ",", "out_channel", ",", "out_height", ",", "\n", "out_width", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "h", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "=", "x1", "-", "x2", "-", "x3", "+", "x4", "\n", "h", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", "]", "=", "x1", "-", "x2", "+", "x3", "-", "x4", "\n", "h", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "x1", "+", "x2", "-", "x3", "-", "x4", "\n", "h", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_Upsample_Deep.AtrousNet_billinear.__init__": [[7, 94], ["torch.ELU", "torch.ELU", "torch.Module.__init__", "model_stage1_Upsample_Deep.AtrousNet_billinear.downsampling_layers.append", "model_stage1_Upsample_Deep.AtrousNet_billinear.downsampling_layers.append", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "model_stage1_Upsample_Deep.AtrousNet_billinear.upsampling_layers.append", "model_stage1_Upsample_Deep.AtrousNet_billinear.upsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_stage1_Upsample_Deep.AtrousNet_billinear.output_layer.append", "model_stage1_Upsample_Deep.AtrousNet_billinear.output_layer.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.Upsample", "torch.Upsample", "torch.ELU", "torch.ELU", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_Upsample_Deep.AtrousNet_billinear.blocks.append", "model_stage1_Upsample_Deep.AtrousNet_billinear.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "20", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "16", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet_billinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", ")", ")", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "# self.upsampling_layers.append(nn.ConvTranspose2d(in_channels=self.d_mult * 6,  # Error: should be 4", "\n", "#                                                  out_channels=self.d_mult * 2,", "\n", "#                                                  kernel_size=3,", "\n", "#                                                  stride=2,", "\n", "#                                                  padding=1,", "\n", "#                                                  output_padding=1,", "\n", "#                                                  bias=True))", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "7", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_Upsample_Deep.AtrousNet_billinear.forward": [[95, 114], ["range", "range", "range", "range", "len", "downs.append", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "upsampling_layers", ")", ")", ":", "\n", "            ", "idx", "=", "len", "(", "downs", ")", "-", "x", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "return", "input_data", "+", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_Upsample_Deep.AtrousNet_billinear_Wide.__init__": [[116, 203], ["torch.ELU", "torch.ELU", "torch.Module.__init__", "model_stage1_Upsample_Deep.AtrousNet_billinear_Wide.downsampling_layers.append", "model_stage1_Upsample_Deep.AtrousNet_billinear_Wide.downsampling_layers.append", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "model_stage1_Upsample_Deep.AtrousNet_billinear_Wide.upsampling_layers.append", "model_stage1_Upsample_Deep.AtrousNet_billinear_Wide.upsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_stage1_Upsample_Deep.AtrousNet_billinear_Wide.output_layer.append", "model_stage1_Upsample_Deep.AtrousNet_billinear_Wide.output_layer.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.Upsample", "torch.Upsample", "torch.ELU", "torch.ELU", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_Upsample_Deep.AtrousNet_billinear_Wide.blocks.append", "model_stage1_Upsample_Deep.AtrousNet_billinear_Wide.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "10", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "32", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet_billinear_Wide", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", ")", ")", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "# self.upsampling_layers.append(nn.ConvTranspose2d(in_channels=self.d_mult * 6,  # Error: should be 4", "\n", "#                                                  out_channels=self.d_mult * 2,", "\n", "#                                                  kernel_size=3,", "\n", "#                                                  stride=2,", "\n", "#                                                  padding=1,", "\n", "#                                                  output_padding=1,", "\n", "#                                                  bias=True))", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "7", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_Upsample_Deep.AtrousNet_billinear_Wide.forward": [[204, 223], ["range", "range", "range", "range", "len", "downs.append", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "upsampling_layers", ")", ")", ":", "\n", "            ", "idx", "=", "len", "(", "downs", ")", "-", "x", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "return", "input_data", "+", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_EfficientAttention.EfficientAttention.__init__": [[10, 21], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "key_channels", ",", "head_count", ",", "value_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "key_channels", "=", "key_channels", "\n", "self", ".", "head_count", "=", "head_count", "\n", "self", ".", "value_channels", "=", "value_channels", "\n", "\n", "self", ".", "keys", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "key_channels", ",", "1", ")", "\n", "self", ".", "queries", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "key_channels", ",", "1", ")", "\n", "self", ".", "values", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "value_channels", ",", "1", ")", "\n", "self", ".", "reprojection", "=", "nn", ".", "Conv2d", "(", "value_channels", ",", "in_channels", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_EfficientAttention.EfficientAttention.forward": [[22, 58], ["input_.size", "model_stage1_EfficientAttention.EfficientAttention.keys().reshape", "model_stage1_EfficientAttention.EfficientAttention.queries().reshape", "model_stage1_EfficientAttention.EfficientAttention.values().reshape", "range", "torch.cat", "model_stage1_EfficientAttention.EfficientAttention.reprojection", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "attended_values.append", "model_stage1_EfficientAttention.EfficientAttention.keys", "model_stage1_EfficientAttention.EfficientAttention.queries", "model_stage1_EfficientAttention.EfficientAttention.values", "value.transpose", "context.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "n", ",", "_", ",", "h", ",", "w", "=", "input_", ".", "size", "(", ")", "\n", "keys", "=", "self", ".", "keys", "(", "input_", ")", ".", "reshape", "(", "(", "n", ",", "self", ".", "key_channels", ",", "h", "*", "w", ")", ")", "\n", "queries", "=", "self", ".", "queries", "(", "input_", ")", ".", "reshape", "(", "n", ",", "self", ".", "key_channels", ",", "h", "*", "w", ")", "\n", "values", "=", "self", ".", "values", "(", "input_", ")", ".", "reshape", "(", "(", "n", ",", "self", ".", "value_channels", ",", "h", "*", "w", ")", ")", "\n", "head_key_channels", "=", "self", ".", "key_channels", "//", "self", ".", "head_count", "\n", "head_value_channels", "=", "self", ".", "value_channels", "//", "self", ".", "head_count", "\n", "\n", "attended_values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "head_count", ")", ":", "\n", "            ", "key", "=", "f", ".", "softmax", "(", "keys", "[", "\n", ":", ",", "\n", "i", "*", "head_key_channels", ":", "(", "i", "+", "1", ")", "*", "head_key_channels", ",", "\n", ":", "\n", "]", ",", "dim", "=", "2", ")", "\n", "query", "=", "f", ".", "softmax", "(", "queries", "[", "\n", ":", ",", "\n", "i", "*", "head_key_channels", ":", "(", "i", "+", "1", ")", "*", "head_key_channels", ",", "\n", ":", "\n", "]", ",", "dim", "=", "1", ")", "\n", "value", "=", "values", "[", "\n", ":", ",", "\n", "i", "*", "head_value_channels", ":", "(", "i", "+", "1", ")", "*", "head_value_channels", ",", "\n", ":", "\n", "]", "\n", "context", "=", "key", "@", "value", ".", "transpose", "(", "1", ",", "2", ")", "\n", "attended_value", "=", "(", "\n", "context", ".", "transpose", "(", "1", ",", "2", ")", "@", "query", "\n", ")", ".", "reshape", "(", "n", ",", "head_value_channels", ",", "h", ",", "w", ")", "\n", "attended_values", ".", "append", "(", "attended_value", ")", "\n", "\n", "", "aggregated_values", "=", "torch", ".", "cat", "(", "attended_values", ",", "dim", "=", "1", ")", "\n", "reprojected_value", "=", "self", ".", "reprojection", "(", "aggregated_values", ")", "\n", "attention", "=", "reprojected_value", "+", "input_", "\n", "\n", "return", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.__init__": [[61, 152], ["torch.nn.ELU", "torch.nn.Module.__init__", "model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.downsampling_layers.append", "model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.downsampling_layers.append", "torch.nn.Sequential", "range", "torch.nn.Sequential", "model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.upsampling_layers.append", "model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.upsampling_layers.append", "torch.nn.Sequential", "model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.output_layer.append", "model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.output_layer.append", "model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.output_layer.append", "torch.nn.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.nn.Upsample", "torch.nn.ELU", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_EfficientAttention.EfficientAttention", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.blocks.append", "model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "10", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "32", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet_billinear_EfficientAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "elif", "x", "!=", "num_blocks", "-", "1", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "1", "]", ")", ")", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "7", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "EfficientAttention", "(", "in_channels", "=", "self", ".", "d_mult", ",", "key_channels", "=", "self", ".", "d_mult", ",", "head_count", "=", "4", ",", "value_channels", "=", "self", ".", "d_mult", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_EfficientAttention.AtrousNet_billinear_EfficientAttention.forward": [[153, 171], ["range", "range", "range", "range", "len", "downs.append", "len", "len", "torch.cat", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "upsampling_layers", ")", ")", ":", "\n", "            ", "idx", "=", "len", "(", "downs", ")", "-", "x", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "return", "input_data", "+", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.__init__": [[175, 268], ["torch.nn.ELU", "torch.nn.Module.__init__", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_SRCNN_remix.SRCNN_Wide", "model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.downsampling_layers.append", "model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.downsampling_layers.append", "torch.nn.Sequential", "range", "torch.nn.Sequential", "model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.upsampling_layers.append", "torch.nn.Sequential", "model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.output_layer.append", "model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.output_layer.append", "model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.output_layer.append", "torch.nn.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.nn.Upsample", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_EfficientAttention.EfficientAttention", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.blocks.append", "model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "20", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "32", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet_billinear_Wide_dilated_wavelet_attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "srcnn", "=", "SRCNN_Wide", "(", "self", ".", "d_mult", "*", "6", ",", "self", ".", "d_mult", "*", "7", ")", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "elif", "x", "!=", "num_blocks", "-", "1", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "1", "]", ")", ")", "\n", "\n", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "# self.upsampling_layers.append(nn.ELU(alpha=1.0, inplace=True))", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "6", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "EfficientAttention", "(", "in_channels", "=", "self", ".", "d_mult", ",", "key_channels", "=", "self", ".", "d_mult", ",", "head_count", "=", "4", ",", "value_channels", "=", "self", ".", "d_mult", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.forward": [[269, 294], ["range", "range", "torch.cat", "model_stage1_EfficientAttention.AtrousNet_billinear_Wide_dilated_wavelet_attention.srcnn", "range", "len", "downs.append", "len", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "idx", "=", "len", "(", "downs", ")", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "\n", "# use the srcnn", "\n", "srcnn_output", "=", "self", ".", "srcnn", "(", "net", ")", "\n", "net_add", "=", "net", "+", "srcnn_output", "\n", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "0", "]", "(", "net_add", ")", "\n", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "output", "=", "input_data", "+", "net", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated.__init__": [[7, 105], ["torch.ELU", "torch.ELU", "torch.Module.__init__", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated.downsampling_layers.append", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated.downsampling_layers.append", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated.upsampling_layers.append", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated.upsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated.output_layer.append", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated.output_layer.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.Upsample", "torch.Upsample", "torch.ELU", "torch.ELU", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated.blocks.append", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "20", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "32", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet_billinear_Wide_dilated", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "elif", "x", "!=", "num_blocks", "-", "1", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "1", "]", ")", ")", "\n", "\n", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "# self.upsampling_layers.append(nn.ConvTranspose2d(in_channels=self.d_mult * 6,  # Error: should be 4", "\n", "#                                                  out_channels=self.d_mult * 2,", "\n", "#                                                  kernel_size=3,", "\n", "#                                                  stride=2,", "\n", "#                                                  padding=1,", "\n", "#                                                  output_padding=1,", "\n", "#                                                  bias=True))", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "7", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide_dilated.forward": [[106, 125], ["range", "range", "range", "range", "len", "downs.append", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "upsampling_layers", ")", ")", ":", "\n", "            ", "idx", "=", "len", "(", "downs", ")", "-", "x", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "return", "input_data", "+", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide.__init__": [[128, 215], ["torch.ELU", "torch.ELU", "torch.Module.__init__", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide.downsampling_layers.append", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide.downsampling_layers.append", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide.upsampling_layers.append", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide.upsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide.output_layer.append", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide.output_layer.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.Upsample", "torch.Upsample", "torch.ELU", "torch.ELU", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide.blocks.append", "model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "10", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "32", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet_billinear_Wide", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", ")", ")", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "# self.upsampling_layers.append(nn.ConvTranspose2d(in_channels=self.d_mult * 6,  # Error: should be 4", "\n", "#                                                  out_channels=self.d_mult * 2,", "\n", "#                                                  kernel_size=3,", "\n", "#                                                  stride=2,", "\n", "#                                                  padding=1,", "\n", "#                                                  output_padding=1,", "\n", "#                                                  bias=True))", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "7", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_Upsample_Deep_dilated.AtrousNet_billinear_Wide.forward": [[216, 235], ["range", "range", "range", "range", "len", "downs.append", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "upsampling_layers", ")", ")", ":", "\n", "            ", "idx", "=", "len", "(", "downs", ")", "-", "x", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "return", "input_data", "+", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1.AtrousNet.__init__": [[7, 92], ["torch.ELU", "torch.ELU", "torch.Module.__init__", "model_stage1.AtrousNet.downsampling_layers.append", "model_stage1.AtrousNet.downsampling_layers.append", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "model_stage1.AtrousNet.upsampling_layers.append", "model_stage1.AtrousNet.upsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_stage1.AtrousNet.output_layer.append", "model_stage1.AtrousNet.output_layer.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ELU", "torch.ELU", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1.AtrousNet.blocks.append", "model_stage1.AtrousNet.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "10", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "16", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", ")", ")", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "self", ".", "d_mult", "*", "6", ",", "# Error: should be 4", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", ",", "\n", "bias", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "3", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1.AtrousNet.forward": [[93, 112], ["range", "range", "range", "range", "len", "downs.append", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "upsampling_layers", ")", ")", ":", "\n", "            ", "idx", "=", "len", "(", "downs", ")", "-", "x", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "return", "input_data", "+", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn.__init__": [[10, 102], ["torch.ELU", "torch.ELU", "torch.Module.__init__", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_SRCNN_remix.SRCNN_Wide", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn.downsampling_layers.append", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn.downsampling_layers.append", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn.upsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn.output_layer.append", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn.output_layer.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.Upsample", "torch.Upsample", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn.blocks.append", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "20", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "32", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet_billinear_Wide_dilated_srcnn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "srcnn", "=", "SRCNN_Wide", "(", "self", ".", "d_mult", "*", "6", ",", "self", ".", "d_mult", "*", "7", ")", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "elif", "x", "!=", "num_blocks", "-", "1", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "1", "]", ")", ")", "\n", "\n", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "# self.upsampling_layers.append(nn.ELU(alpha=1.0, inplace=True))", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "6", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn.forward": [[103, 128], ["range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn.srcnn", "range", "len", "downs.append", "len", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "idx", "=", "len", "(", "downs", ")", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "\n", "# use the srcnn", "\n", "srcnn_output", "=", "self", ".", "srcnn", "(", "net", ")", "\n", "net_add", "=", "net", "+", "srcnn_output", "\n", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "0", "]", "(", "net_add", ")", "\n", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "output", "=", "input_data", "+", "net", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.__init__": [[132, 228], ["torch.ELU", "torch.ELU", "torch.Module.__init__", "model.NTIRE2021_Deblur.uniA_ELU.wavelet_SRCNN_remix.SRCNN_Wide", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.downsampling_layers.append", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.downsampling_layers.append", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.upsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.output_layer.append", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.output_layer.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.Upsample", "torch.Upsample", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.blocks.append", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_blocks", "=", "20", ",", "max_global_stride", "=", "8", ",", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "32", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ",", "\n", "srcnn_add", "=", "True", ",", "\n", "srcnn_smooth", "=", "False", ")", ":", "\n", "        ", "super", "(", "AtrousNet_billinear_Wide_dilated_srcnn_output", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "srcnn", "=", "SRCNN_Wide", "(", "self", ".", "d_mult", "*", "6", ",", "self", ".", "d_mult", "*", "7", ")", "\n", "self", ".", "srcnn_add", "=", "srcnn_add", "\n", "self", ".", "srcnn_smooth", "=", "srcnn_smooth", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "elif", "x", "!=", "num_blocks", "-", "1", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "1", "]", ")", ")", "\n", "\n", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "# self.upsampling_layers.append(nn.ELU(alpha=1.0, inplace=True))", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "6", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.forward": [[229, 260], ["range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_dilation_with_srcnn.AtrousNet_billinear_Wide_dilated_srcnn_output.srcnn", "range", "len", "downs.append", "len", "len", "len", "range", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "idx", "=", "len", "(", "downs", ")", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "0", "]", "(", "net", ")", "\n", "\n", "srcnn_output", "=", "self", ".", "srcnn", "(", "net", ")", "\n", "\n", "if", "self", ".", "srcnn_add", ":", "\n", "            ", "net", "+=", "srcnn_output", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "# srcnn output smmoth", "\n", "", "if", "self", ".", "srcnn_smooth", ":", "\n", "            ", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "                ", "srcnn_output", "=", "self", ".", "output_layer", "[", "x", "]", "(", "srcnn_output", ")", "\n", "", "srcnn_output", "+=", "input_data", "\n", "\n", "", "output", "=", "input_data", "+", "net", "\n", "\n", "return", "output", ",", "srcnn_output", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.DWT.__init__": [[70, 73], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DWT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "requires_grad", "=", "False", "# \u4fe1\u53f7\u5904\u7406\uff0c\u975e\u5377\u79ef\u8fd0\u7b97\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u68af\u5ea6\u6c42\u5bfc", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.DWT.forward": [[74, 76], ["model_stage1_dual_branch_tail.dwt_init"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.dwt_init"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "dwt_init", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.IWT.__init__": [[80, 83], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "IWT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.IWT.forward": [[84, 86], ["model_stage1_dual_branch_tail.iwt_init"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.iwt_init"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "iwt_init", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.SRCNN.__init__": [[89, 97], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "model_stage1_dual_branch_tail.DWT", "model_stage1_dual_branch_tail.IWT"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "SRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_channels", ",", "64", ",", "kernel_size", "=", "9", ",", "padding", "=", "9", "//", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "5", "//", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "out_channels", ",", "kernel_size", "=", "5", ",", "padding", "=", "5", "//", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "DWT", "=", "DWT", "(", ")", "\n", "self", ".", "IDWT", "=", "IWT", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.SRCNN.forward": [[98, 106], ["model_stage1_dual_branch_tail.SRCNN.DWT", "model_stage1_dual_branch_tail.SRCNN.relu", "model_stage1_dual_branch_tail.SRCNN.relu", "model_stage1_dual_branch_tail.SRCNN.conv3", "model_stage1_dual_branch_tail.SRCNN.IDWT", "model_stage1_dual_branch_tail.SRCNN.conv1", "model_stage1_dual_branch_tail.SRCNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "DWT", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "IDWT", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.__init__": [[109, 212], ["torch.ELU", "torch.ELU", "torch.Module.__init__", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.downsampling_layers.append", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.downsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_stage1_dual_branch_tail.SRCNN", "range", "torch.Sequential", "torch.Sequential", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.upsampling_layers.append", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.upsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.output_layer.append", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.output_layer.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "torch.Upsample", "torch.Upsample", "torch.ELU", "torch.ELU", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.output_layer.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.Conv2D_ReflectPad", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_EfficientAttention.EfficientAttention", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.output_layer.append", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.blocks.append", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.blocks.append", "model.NTIRE2021_Deblur.uniA_ELU.model_stage1_ContextBlock.ContextBlock", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2021_Deblur.uniA_ELU.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "num_blocks", "=", "10", ",", "\n", "max_global_stride", "=", "8", ",", "\n", "pad_to_fit_global_stride", "=", "True", ",", "\n", "d_mult", "=", "32", ",", "\n", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ",", "\n", "atrousDim", "=", "[", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ",", "\n", "efficientattention", "=", "False", ",", "\n", "gcattention", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "AtrousNet_SRCNN_tail", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "efficientattention", "=", "efficientattention", "\n", "self", ".", "gcattention", "=", "gcattention", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "self", ".", "SRCNN", "=", "SRCNN", "(", "self", ".", "d_mult", "*", "7", ",", "self", ".", "out_channels", ")", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "elif", "x", "!=", "num_blocks", "-", "1", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", "[", "1", "]", ")", ")", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "# modify output later from 3 * d_multi to 7 * multi", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "7", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "if", "self", ".", "efficientattention", ":", "\n", "            ", "self", ".", "output_layer", ".", "append", "(", "EfficientAttention", "(", "in_channels", "=", "self", ".", "d_mult", ",", "key_channels", "=", "self", ".", "d_mult", ",", "head_count", "=", "4", ",", "value_channels", "=", "self", ".", "d_mult", ")", ")", "\n", "", "elif", "self", ".", "gcattention", ":", "\n", "            ", "self", ".", "output_layer", ".", "append", "(", "ContextBlock", "(", "inplanes", "=", "self", ".", "d_mult", ",", "ratio", "=", "0.25", ")", ")", "\n", "", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.forward": [[213, 233], ["range", "range", "range", "model_stage1_dual_branch_tail.AtrousNet_SRCNN_tail.SRCNN", "range", "len", "downs.append", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "upsampling_layers", ")", ")", ":", "\n", "            ", "idx", "=", "len", "(", "downs", ")", "-", "x", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "SRCNN_net", "=", "self", ".", "SRCNN", "(", "net", ")", "\n", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "return", "input_data", "+", "net", "+", "SRCNN_net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.cropimage": [[11, 18], ["torch.cat", "torch.cat", "x.size", "x.size", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "cropimage", "(", "x", ")", ":", "\n", "    ", "H", ",", "W", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "x_l_top", "=", "x", "[", ":", ",", ":", ",", "0", ":", "int", "(", "H", "/", "2", ")", ",", "0", ":", "int", "(", "W", "/", "2", ")", "]", "\n", "x_r_top", "=", "x", "[", ":", ",", ":", ",", "0", ":", "int", "(", "H", "/", "2", ")", ",", "int", "(", "W", "/", "2", ")", ":", "W", "]", "\n", "x_l_bot", "=", "x", "[", ":", ",", ":", ",", "int", "(", "H", "/", "2", ")", ":", "H", ",", "0", ":", "int", "(", "W", "/", "2", ")", "]", "\n", "x_r_bot", "=", "x", "[", ":", ",", ":", ",", "int", "(", "H", "/", "2", ")", ":", "H", ",", "int", "(", "W", "/", "2", ")", ":", "W", "]", "\n", "return", "torch", ".", "cat", "(", "(", "x_l_top", ",", "x_r_top", ",", "x_l_bot", ",", "x_r_bot", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.reconstruct": [[19, 29], ["int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size"], "function", ["None"], ["", "def", "reconstruct", "(", "x", ")", ":", "\n", "     ", "out_batch", "=", "int", "(", "x", ".", "size", "(", "0", ")", "/", "4", ")", "\n", "x_l_top", "=", "x", "[", "0", ":", "out_batch", ",", ":", ",", ":", ",", ":", "]", "\n", "x_r_top", "=", "x", "[", "out_batch", ":", "out_batch", "*", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "x_l_bot", "=", "x", "[", "out_batch", "*", "2", ":", "out_batch", "*", "3", ",", ":", ",", ":", ",", ":", "]", "\n", "x_r_bot", "=", "x", "[", "out_batch", "*", "3", ":", "out_batch", "*", "4", ",", ":", ",", ":", ",", ":", "]", "\n", "x_top", "=", "torch", ".", "cat", "(", "(", "x_l_top", ",", "x_r_top", ")", ",", "dim", "=", "3", ")", "\n", "x_bot", "=", "torch", ".", "cat", "(", "(", "x_l_bot", ",", "x_r_bot", ")", ",", "dim", "=", "3", ")", "\n", "x_rec", "=", "torch", ".", "cat", "(", "(", "x_top", ",", "x_bot", ")", ",", "dim", "=", "2", ")", "\n", "return", "x_rec", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.dwt_init": [[31, 44], ["torch.cat", "torch.cat"], "function", ["None"], ["", "def", "dwt_init", "(", "x", ")", ":", "\n", "\n", "    ", "x01", "=", "x", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", ":", "]", "/", "2", "\n", "x02", "=", "x", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", ":", "]", "/", "2", "\n", "x1", "=", "x01", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", "\n", "x2", "=", "x02", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", "\n", "x3", "=", "x01", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", "\n", "x4", "=", "x02", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", "\n", "x_LL", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "\n", "x_HL", "=", "-", "x1", "-", "x2", "+", "x3", "+", "x4", "\n", "x_LH", "=", "-", "x1", "+", "x2", "-", "x3", "+", "x4", "\n", "x_HH", "=", "x1", "-", "x2", "-", "x3", "+", "x4", "\n", "return", "torch", ".", "cat", "(", "(", "x_LL", ",", "x_HL", ",", "x_LH", ",", "x_HH", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.model_stage1_dual_branch_tail.iwt_init": [[47, 67], ["x.size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "int", "int", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "iwt_init", "(", "x", ")", ":", "\n", "    ", "r", "=", "2", "\n", "in_batch", ",", "in_channel", ",", "in_height", ",", "in_width", "=", "x", ".", "size", "(", ")", "\n", "#print([in_batch, in_channel, in_height, in_width])", "\n", "out_batch", ",", "out_channel", ",", "out_height", ",", "out_width", "=", "int", "(", "in_batch", "/", "r", "**", "2", ")", ",", "int", "(", "\n", "in_channel", ")", ",", "r", "*", "in_height", ",", "r", "*", "in_width", "\n", "x1", "=", "x", "[", "0", ":", "out_batch", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x2", "=", "x", "[", "out_batch", ":", "out_batch", "*", "2", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x3", "=", "x", "[", "out_batch", "*", "2", ":", "out_batch", "*", "3", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "x4", "=", "x", "[", "out_batch", "*", "3", ":", "out_batch", "*", "4", ",", ":", ",", ":", ",", ":", "]", "/", "2", "\n", "\n", "h", "=", "torch", ".", "zeros", "(", "[", "out_batch", ",", "out_channel", ",", "out_height", ",", "\n", "out_width", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "h", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "=", "x1", "-", "x2", "-", "x3", "+", "x4", "\n", "h", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", "]", "=", "x1", "-", "x2", "+", "x3", "-", "x4", "\n", "h", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "x1", "+", "x2", "-", "x3", "-", "x4", "\n", "h", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.convolution.ConvAftermath.__init__": [[9, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "use_bias", "=", "True", ",", "use_scale", "=", "True", ",", "norm", "=", "None", ",", "act", "=", "None", ")", ":", "\n", "        ", "super", "(", "ConvAftermath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "b", "=", "None", "\n", "self", ".", "s", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.convolution.ConvAftermath.forward": [[20, 31], ["convolution.ConvAftermath.norm", "convolution.ConvAftermath.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "net", "=", "input", "\n", "if", "self", ".", "use_bias", "and", "self", ".", "b", "is", "not", "None", ":", "\n", "            ", "net", "=", "net", "+", "self", ".", "use_bias", "\n", "", "if", "self", ".", "use_scale", "and", "self", ".", "s", "is", "not", "None", ":", "\n", "            ", "net", "=", "net", "*", "self", ".", "s", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "net", "=", "self", ".", "norm", "(", "net", ")", "\n", "", "if", "self", ".", "act", "is", "not", "None", ":", "\n", "            ", "net", "=", "self", ".", "act", "(", "net", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.convolution.Conv2D.__init__": [[34, 63], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "convolution.ConvAftermath"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "use_bias", "=", "True", ",", "use_scale", "=", "True", ",", "norm", "=", "None", ",", "\n", "act", "=", "None", ",", "\n", "padding", "=", "'same'", ")", ":", "\n", "        ", "super", "(", "Conv2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "atrous_rate", "=", "1", "\n", "self", ".", "pad_flag", "=", "False", "\n", "if", "padding", "==", "'same'", ":", "\n", "            ", "self", ".", "padding", "=", "self", ".", "kernel_size", "//", "2", "if", "self", ".", "stride", "==", "1", "else", "0", "\n", "self", ".", "pad_flag", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "padding", "\n", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv_aftermath", "=", "ConvAftermath", "(", "in_channels", "=", "self", ".", "out_channels", ",", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "use_scale", "=", "self", ".", "use_scale", ",", "norm", "=", "self", ".", "norm", ",", "act", "=", "self", ".", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.convolution.Conv2D.forward": [[64, 73], ["convolution.Conv2D.conv", "convolution.Conv2D.conv_aftermath", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "pad_flag", "and", "self", ".", "stride", ">", "1", ":", "\n", "            ", "pad_total", "=", "1", "*", "(", "self", ".", "kernel_size", "-", "1", ")", "-", "1", "\n", "pad_begin", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_begin", "\n", "input", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", ",", "pad", "=", "(", "pad_begin", ",", "pad_end", ",", "pad_begin", ",", "pad_end", ")", ")", "\n", "\n", "", "net", "=", "self", ".", "conv", "(", "input", ")", "\n", "return", "self", ".", "conv_aftermath", "(", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.convolution.Conv2D_ReflectPad.__init__": [[76, 110], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "convolution.ConvAftermath"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "use_bias", "=", "True", ",", "use_scale", "=", "True", ",", "norm", "=", "None", ",", "\n", "act", "=", "None", ",", "\n", "padding", "=", "'same'", ",", "padding_algorithm", "=", "\"reflect\"", ")", ":", "\n", "        ", "super", "(", "Conv2D_ReflectPad", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "padding_algorithm", "=", "padding_algorithm", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "strides", "=", "stride", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "atrous_rate", "=", "1", "\n", "if", "padding", "==", "'same'", ":", "\n", "            ", "self", ".", "padding", "=", "self", ".", "kernel_size", "//", "2", "if", "self", ".", "strides", "==", "1", "else", "0", "\n", "self", ".", "pad_flag", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "padding", "\n", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "self", ".", "strides", ",", "\n", "bias", "=", "False", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "padding_mode", "=", "self", ".", "padding_algorithm", ")", "\n", "self", ".", "conv_aftermath", "=", "ConvAftermath", "(", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "use_scale", "=", "self", ".", "use_scale", ",", "\n", "norm", "=", "self", ".", "norm", ",", "\n", "act", "=", "self", ".", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.convolution.Conv2D_ReflectPad.forward": [[111, 115], ["convolution.Conv2D_ReflectPad.conv", "convolution.Conv2D_ReflectPad.conv_aftermath"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "input", ")", "\n", "y", "=", "self", ".", "conv_aftermath", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.convolution.AtrousConv2D.__init__": [[119, 146], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "convolution.ConvAftermath"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "use_bias", "=", "True", ",", "use_scale", "=", "True", ",", "\n", "norm", "=", "None", ",", "\n", "act", "=", "None", ")", ":", "\n", "        ", "super", "(", "AtrousConv2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "atrous_rate", "=", "1", "\n", "self", ".", "pad_flag", "=", "False", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "padding", "=", "dilation", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv_aftermath", "=", "ConvAftermath", "(", "in_channels", "=", "self", ".", "out_channels", ",", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "use_scale", "=", "self", ".", "use_scale", ",", "norm", "=", "self", ".", "norm", ",", "act", "=", "self", ".", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.convolution.AtrousConv2D.forward": [[147, 150], ["convolution.AtrousConv2D.conv", "convolution.AtrousConv2D.conv_aftermath"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "net", "=", "self", ".", "conv", "(", "input", ")", "\n", "return", "self", ".", "conv_aftermath", "(", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.convolution.AtrousConv2D_ReflectPad.__init__": [[153, 179], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "convolution.ConvAftermath"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "use_bias", "=", "True", ",", "use_scale", "=", "True", ",", "\n", "norm", "=", "None", ",", "\n", "act", "=", "None", ")", ":", "\n", "        ", "super", "(", "AtrousConv2D_ReflectPad", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "pad_flag", "=", "False", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "padding", "=", "dilation", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "padding_mode", "=", "\"reflect\"", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv_aftermath", "=", "ConvAftermath", "(", "in_channels", "=", "self", ".", "out_channels", ",", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "use_scale", "=", "self", ".", "use_scale", ",", "norm", "=", "self", ".", "norm", ",", "act", "=", "self", ".", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.convolution.AtrousConv2D_ReflectPad.forward": [[180, 184], ["convolution.AtrousConv2D_ReflectPad.conv", "convolution.AtrousConv2D_ReflectPad.conv_aftermath"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "net", "=", "self", ".", "conv", "(", "input", ")", "\n", "net", "=", "self", ".", "conv_aftermath", "(", "net", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.atrous_block_padding.AtrousBlockPad2.__init__": [[7, 50], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "convolution.Conv2D_ReflectPad", "convolution.Conv2D_ReflectPad", "atrous_block_padding.AtrousBlockPad2.atrous_layers.append", "convolution.AtrousConv2D_ReflectPad", "int"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "use_bias", ",", "use_scale", ",", "activation", ",", "\n", "needs_projection", "=", "False", ",", "atrousBlock", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ")", ":", "\n", "        ", "super", "(", "AtrousBlockPad2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "atrousBlocks", "=", "atrousBlock", "\n", "# self.needs_projection = self.stride > 1", "\n", "self", ".", "dims_match", "=", "self", ".", "in_channels", "!=", "self", ".", "out_channels", "\n", "# self.needs_projection = self.needs_projection or self.dims_match", "\n", "self", ".", "needs_projection", "=", "needs_projection", "\n", "\n", "if", "self", ".", "needs_projection", ":", "\n", "            ", "self", ".", "projection", "=", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "act", "=", "self", ".", "activation", ")", "\n", "", "self", ".", "atrous_layers", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "atrous_layers", ".", "append", "(", "AtrousConv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "int", "(", "self", ".", "out_channels", "/", "2", ")", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "dilation", "=", "atrousBlock", "[", "i", "]", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "use_scale", "=", "self", ".", "use_scale", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "", "self", ".", "atrous_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "atrous_layers", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "out_channels", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "use_scale", "=", "self", ".", "use_scale", ",", "\n", "act", "=", "self", ".", "activation", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.layerlib_stage1.atrous_block_padding.AtrousBlockPad2.forward": [[52, 65], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "atrous_block_padding.AtrousBlockPad2.conv1", "atrous_block_padding.AtrousBlockPad2.projection"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "needs_projection", ":", "\n", "            ", "input", "=", "self", ".", "projection", "(", "input", ")", "\n", "\n", "", "x1", "=", "self", ".", "atrous_layers", "[", "0", "]", "(", "input", ")", "\n", "x2", "=", "self", ".", "atrous_layers", "[", "1", "]", "(", "input", ")", "\n", "x3", "=", "self", ".", "atrous_layers", "[", "2", "]", "(", "input", ")", "\n", "x4", "=", "self", ".", "atrous_layers", "[", "3", "]", "(", "input", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", "\n", "x5", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "return", "input", "+", "x5", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Channel_UNet.channel_unet.GAU.__init__": [[6, 23], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels_high", ",", "channels_low", ",", "upsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "GAU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Global Attention Upsample", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "conv3x3", "=", "nn", ".", "Conv2d", "(", "channels_low", ",", "channels_low", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_low", "=", "nn", ".", "BatchNorm2d", "(", "channels_low", ")", "\n", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "channels_high", ",", "channels_low", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_high", "=", "nn", ".", "BatchNorm2d", "(", "channels_low", ")", "\n", "\n", "if", "upsample", ":", "\n", "            ", "self", ".", "conv_upsample", "=", "nn", ".", "ConvTranspose2d", "(", "channels_high", ",", "channels_low", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_upsample", "=", "nn", ".", "BatchNorm2d", "(", "channels_low", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_reduction", "=", "nn", ".", "Conv2d", "(", "channels_high", ",", "channels_low", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_reduction", "=", "nn", ".", "BatchNorm2d", "(", "channels_low", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Channel_UNet.channel_unet.GAU.forward": [[24, 44], ["channel_unet.GAU.conv1x1", "channel_unet.GAU.relu", "channel_unet.GAU.conv3x3", "channel_unet.GAU.bn_low", "len", "channel_unet.GAU.relu", "channel_unet.GAU.relu", "torch.AvgPool2d", "torch.AvgPool2d", "channel_unet.GAU.bn_upsample", "channel_unet.GAU.bn_reduction", "channel_unet.GAU.conv_upsample", "channel_unet.GAU.conv_reduction"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fms_high", ",", "fms_low", ",", "fm_mask", "=", "None", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "fms_high", ".", "shape", "\n", "\n", "fms_high_gp", "=", "nn", ".", "AvgPool2d", "(", "fms_high", ".", "shape", "[", "2", ":", "]", ")", "(", "fms_high", ")", ".", "view", "(", "len", "(", "fms_high", ")", ",", "c", ",", "1", ",", "1", ")", "\n", "fms_high_gp", "=", "self", ".", "conv1x1", "(", "fms_high_gp", ")", "\n", "#fms_high_gp = self.bn_high(fms_high_gp)", "\n", "fms_high_gp", "=", "self", ".", "relu", "(", "fms_high_gp", ")", "\n", "\n", "# fms_low_mask = torch.cat([fms_low, fm_mask], dim=1)", "\n", "fms_low_mask", "=", "self", ".", "conv3x3", "(", "fms_low", ")", "\n", "fms_low_mask", "=", "self", ".", "bn_low", "(", "fms_low_mask", ")", "\n", "\n", "fms_att", "=", "fms_low_mask", "*", "fms_high_gp", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "\n", "self", ".", "bn_upsample", "(", "self", ".", "conv_upsample", "(", "fms_high", ")", ")", "+", "fms_att", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "\n", "self", ".", "bn_reduction", "(", "self", ".", "conv_reduction", "(", "fms_high", ")", ")", "+", "fms_att", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Channel_UNet.channel_unet.DoubleConv.__init__": [[47, 56], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "DoubleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Channel_UNet.channel_unet.DoubleConv.forward": [[58, 60], ["channel_unet.DoubleConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Channel_UNet.channel_unet.myChannelUnet.__init__": [[63, 89], ["torch.Module.__init__", "channel_unet.DoubleConv", "torch.MaxPool2d", "torch.MaxPool2d", "channel_unet.DoubleConv", "torch.MaxPool2d", "torch.MaxPool2d", "channel_unet.DoubleConv", "torch.MaxPool2d", "torch.MaxPool2d", "channel_unet.DoubleConv", "torch.MaxPool2d", "torch.MaxPool2d", "channel_unet.DoubleConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "channel_unet.DoubleConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "channel_unet.DoubleConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "channel_unet.DoubleConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "channel_unet.DoubleConv", "torch.Conv2d", "torch.Conv2d", "channel_unet.GAU", "channel_unet.GAU", "channel_unet.GAU", "channel_unet.GAU"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "myChannelUnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "self", ".", "conv1", "=", "DoubleConv", "(", "in_ch", ",", "filter", "[", "0", "]", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "conv2", "=", "DoubleConv", "(", "filter", "[", "0", "]", ",", "filter", "[", "1", "]", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "conv3", "=", "DoubleConv", "(", "filter", "[", "1", "]", ",", "filter", "[", "2", "]", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "conv4", "=", "DoubleConv", "(", "filter", "[", "2", "]", ",", "filter", "[", "3", "]", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "conv5", "=", "DoubleConv", "(", "filter", "[", "3", "]", ",", "filter", "[", "4", "]", ")", "\n", "self", ".", "up6", "=", "nn", ".", "ConvTranspose2d", "(", "filter", "[", "4", "]", ",", "filter", "[", "3", "]", ",", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv6", "=", "DoubleConv", "(", "filter", "[", "3", "]", "*", "3", ",", "filter", "[", "3", "]", ")", "\n", "self", ".", "up7", "=", "nn", ".", "ConvTranspose2d", "(", "filter", "[", "3", "]", ",", "filter", "[", "2", "]", ",", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv7", "=", "DoubleConv", "(", "filter", "[", "2", "]", "*", "3", ",", "filter", "[", "2", "]", ")", "\n", "self", ".", "up8", "=", "nn", ".", "ConvTranspose2d", "(", "filter", "[", "2", "]", ",", "filter", "[", "1", "]", ",", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv8", "=", "DoubleConv", "(", "filter", "[", "1", "]", "*", "3", ",", "filter", "[", "1", "]", ")", "\n", "self", ".", "up9", "=", "nn", ".", "ConvTranspose2d", "(", "filter", "[", "1", "]", ",", "filter", "[", "0", "]", ",", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv9", "=", "DoubleConv", "(", "filter", "[", "0", "]", "*", "3", ",", "filter", "[", "0", "]", ")", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "filter", "[", "0", "]", ",", "out_ch", ",", "1", ")", "\n", "\n", "self", ".", "gau_1", "=", "GAU", "(", "filter", "[", "4", "]", ",", "filter", "[", "3", "]", ")", "\n", "self", ".", "gau_2", "=", "GAU", "(", "filter", "[", "3", "]", ",", "filter", "[", "2", "]", ")", "\n", "self", ".", "gau_3", "=", "GAU", "(", "filter", "[", "2", "]", ",", "filter", "[", "1", "]", ")", "\n", "self", ".", "gau_4", "=", "GAU", "(", "filter", "[", "1", "]", ",", "filter", "[", "0", "]", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Channel_UNet.channel_unet.myChannelUnet.forward": [[89, 122], ["channel_unet.myChannelUnet.conv1", "channel_unet.myChannelUnet.pool1", "channel_unet.myChannelUnet.conv2", "channel_unet.myChannelUnet.pool2", "channel_unet.myChannelUnet.conv3", "channel_unet.myChannelUnet.pool3", "channel_unet.myChannelUnet.conv4", "channel_unet.myChannelUnet.pool4", "channel_unet.myChannelUnet.conv5", "channel_unet.myChannelUnet.up6", "channel_unet.myChannelUnet.gau_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "channel_unet.myChannelUnet.conv6", "channel_unet.myChannelUnet.up7", "channel_unet.myChannelUnet.gau_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "channel_unet.myChannelUnet.conv7", "channel_unet.myChannelUnet.up8", "channel_unet.myChannelUnet.gau_3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "channel_unet.myChannelUnet.conv8", "channel_unet.myChannelUnet.up9", "channel_unet.myChannelUnet.gau_4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "channel_unet.myChannelUnet.conv9", "channel_unet.myChannelUnet.conv10"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "p1", "=", "self", ".", "pool1", "(", "c1", ")", "\n", "c2", "=", "self", ".", "conv2", "(", "p1", ")", "\n", "p2", "=", "self", ".", "pool2", "(", "c2", ")", "\n", "c3", "=", "self", ".", "conv3", "(", "p2", ")", "\n", "p3", "=", "self", ".", "pool3", "(", "c3", ")", "\n", "c4", "=", "self", ".", "conv4", "(", "p3", ")", "\n", "p4", "=", "self", ".", "pool4", "(", "c4", ")", "\n", "c5", "=", "self", ".", "conv5", "(", "p4", ")", "\n", "#print(c5.shape)", "\n", "up_6", "=", "self", ".", "up6", "(", "c5", ")", "\n", "\n", "gau1", "=", "self", ".", "gau_1", "(", "c5", ",", "c4", ")", "\n", "# print(c4.shape)", "\n", "# print(up_6.shape)", "\n", "# print(gau1.shape)", "\n", "merge6", "=", "torch", ".", "cat", "(", "[", "c4", ",", "up_6", ",", "gau1", "]", ",", "dim", "=", "1", ")", "\n", "c6", "=", "self", ".", "conv6", "(", "merge6", ")", "\n", "up_7", "=", "self", ".", "up7", "(", "c6", ")", "\n", "gau2", "=", "self", ".", "gau_2", "(", "gau1", ",", "c3", ")", "\n", "merge7", "=", "torch", ".", "cat", "(", "[", "c3", ",", "up_7", ",", "gau2", "]", ",", "dim", "=", "1", ")", "\n", "c7", "=", "self", ".", "conv7", "(", "merge7", ")", "\n", "up_8", "=", "self", ".", "up8", "(", "c7", ")", "\n", "gau3", "=", "self", ".", "gau_3", "(", "gau2", ",", "c2", ")", "\n", "merge8", "=", "torch", ".", "cat", "(", "[", "c2", ",", "up_8", ",", "gau3", "]", ",", "dim", "=", "1", ")", "\n", "c8", "=", "self", ".", "conv8", "(", "merge8", ")", "\n", "up_9", "=", "self", ".", "up9", "(", "c8", ")", "\n", "gau4", "=", "self", ".", "gau_4", "(", "gau3", ",", "c1", ")", "\n", "merge9", "=", "torch", ".", "cat", "(", "[", "c1", ",", "up_9", ",", "gau4", "]", ",", "dim", "=", "1", ")", "\n", "c9", "=", "self", ".", "conv9", "(", "merge9", ")", "\n", "c10", "=", "self", ".", "conv10", "(", "c9", ")", "\n", "return", "c10", "", "", "", ""]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Attention_UNet.attention_unet.conv_block.__init__": [[9, 18], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", "conv_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Attention_UNet.attention_unet.conv_block.forward": [[20, 23], ["attention_unet.conv_block.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Attention_UNet.attention_unet.up_conv.__init__": [[26, 33], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Upsample", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", "up_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Attention_UNet.attention_unet.up_conv.forward": [[35, 38], ["attention_unet.up_conv.up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Attention_UNet.attention_unet.Attention_block.__init__": [[41, 60], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "F_g", ",", "F_l", ",", "F_int", ")", ":", "\n", "        ", "super", "(", "Attention_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W_g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_g", ",", "F_int", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "F_int", ")", "\n", ")", "\n", "\n", "self", ".", "W_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_l", ",", "F_int", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "F_int", ")", "\n", ")", "\n", "\n", "self", ".", "psi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_int", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Attention_UNet.attention_unet.Attention_block.forward": [[61, 72], ["attention_unet.Attention_block.W_g", "attention_unet.Attention_block.W_x", "attention_unet.Attention_block.relu", "attention_unet.Attention_block.psi"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "x", ")", ":", "\n", "# \u4e0b\u91c7\u6837\u7684gating signal \u5377\u79ef", "\n", "        ", "g1", "=", "self", ".", "W_g", "(", "g", ")", "\n", "# \u4e0a\u91c7\u6837\u7684 l \u5377\u79ef", "\n", "x1", "=", "self", ".", "W_x", "(", "x", ")", "\n", "# concat + relu", "\n", "psi", "=", "self", ".", "relu", "(", "g1", "+", "x1", ")", "\n", "# channel \u51cf\u4e3a1\uff0c\u5e76Sigmoid,\u5f97\u5230\u6743\u91cd\u77e9\u9635", "\n", "psi", "=", "self", ".", "psi", "(", "psi", ")", "\n", "# \u8fd4\u56de\u52a0\u6743\u7684 x", "\n", "return", "x", "*", "psi", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Attention_UNet.attention_unet.AttU_Net.__init__": [[75, 104], ["torch.nn.Module.__init__", "torch.nn.MaxPool2d", "attention_unet.conv_block", "attention_unet.conv_block", "attention_unet.conv_block", "attention_unet.conv_block", "attention_unet.conv_block", "attention_unet.up_conv", "attention_unet.Attention_block", "attention_unet.conv_block", "attention_unet.up_conv", "attention_unet.Attention_block", "attention_unet.conv_block", "attention_unet.up_conv", "attention_unet.Attention_block", "attention_unet.conv_block", "attention_unet.up_conv", "attention_unet.Attention_block", "attention_unet.conv_block", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "1", ")", ":", "\n", "        ", "super", "(", "AttU_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "Conv1", "=", "conv_block", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Conv2", "=", "conv_block", "(", "ch_in", "=", "64", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Conv3", "=", "conv_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Conv4", "=", "conv_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Conv5", "=", "conv_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "1024", ")", "\n", "\n", "self", ".", "Up5", "=", "up_conv", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Att5", "=", "Attention_block", "(", "F_g", "=", "512", ",", "F_l", "=", "512", ",", "F_int", "=", "256", ")", "\n", "self", ".", "Up_conv5", "=", "conv_block", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ")", "\n", "\n", "self", ".", "Up4", "=", "up_conv", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Att4", "=", "Attention_block", "(", "F_g", "=", "256", ",", "F_l", "=", "256", ",", "F_int", "=", "128", ")", "\n", "self", ".", "Up_conv4", "=", "conv_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ")", "\n", "\n", "self", ".", "Up3", "=", "up_conv", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Att3", "=", "Attention_block", "(", "F_g", "=", "128", ",", "F_l", "=", "128", ",", "F_int", "=", "64", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ")", "\n", "\n", "self", ".", "Up2", "=", "up_conv", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Att2", "=", "Attention_block", "(", "F_g", "=", "64", ",", "F_l", "=", "64", ",", "F_int", "=", "32", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ")", "\n", "\n", "self", ".", "Conv_1x1", "=", "nn", ".", "Conv2d", "(", "64", ",", "output_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.Attention_UNet.attention_unet.AttU_Net.forward": [[105, 146], ["attention_unet.AttU_Net.Conv1", "attention_unet.AttU_Net.Maxpool", "attention_unet.AttU_Net.Conv2", "attention_unet.AttU_Net.Maxpool", "attention_unet.AttU_Net.Conv3", "attention_unet.AttU_Net.Maxpool", "attention_unet.AttU_Net.Conv4", "attention_unet.AttU_Net.Maxpool", "attention_unet.AttU_Net.Conv5", "attention_unet.AttU_Net.Up5", "attention_unet.AttU_Net.Att5", "torch.cat", "attention_unet.AttU_Net.Up_conv5", "attention_unet.AttU_Net.Up4", "attention_unet.AttU_Net.Att4", "torch.cat", "attention_unet.AttU_Net.Up_conv4", "attention_unet.AttU_Net.Up3", "attention_unet.AttU_Net.Att3", "torch.cat", "attention_unet.AttU_Net.Up_conv3", "attention_unet.AttU_Net.Up2", "attention_unet.AttU_Net.Att2", "torch.cat", "attention_unet.AttU_Net.Up_conv2", "attention_unet.AttU_Net.Conv_1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoding path", "\n", "        ", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "Maxpool", "(", "x1", ")", "\n", "x2", "=", "self", ".", "Conv2", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "Maxpool", "(", "x2", ")", "\n", "x3", "=", "self", ".", "Conv3", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "Maxpool", "(", "x3", ")", "\n", "x4", "=", "self", ".", "Conv4", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "Maxpool", "(", "x4", ")", "\n", "x5", "=", "self", ".", "Conv5", "(", "x5", ")", "\n", "\n", "# decoding + concat path", "\n", "d5", "=", "self", ".", "Up5", "(", "x5", ")", "\n", "x4", "=", "self", ".", "Att5", "(", "g", "=", "d5", ",", "x", "=", "x4", ")", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "x4", ",", "d5", ")", ",", "dim", "=", "1", ")", "\n", "d5", "=", "self", ".", "Up_conv5", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "Up4", "(", "d5", ")", "\n", "x3", "=", "self", ".", "Att4", "(", "g", "=", "d4", ",", "x", "=", "x3", ")", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "x3", ",", "d4", ")", ",", "dim", "=", "1", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "Up3", "(", "d4", ")", "\n", "x2", "=", "self", ".", "Att3", "(", "g", "=", "d3", ",", "x", "=", "x2", ")", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "x2", ",", "d3", ")", ",", "dim", "=", "1", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "Up2", "(", "d3", ")", "\n", "x1", "=", "self", ".", "Att2", "(", "g", "=", "d2", ",", "x", "=", "x1", ")", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "x1", ",", "d2", ")", ",", "dim", "=", "1", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d2", ")", "\n", "\n", "d1", "=", "self", ".", "Conv_1x1", "(", "d2", ")", "\n", "# d1 = self.sigmoid(d1)", "\n", "\n", "return", "d1", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.CARN.Block.__init__": [[7, 18], ["torch.Module.__init__", "model.ResidualBlock", "model.ResidualBlock", "model.ResidualBlock", "model.BasicBlock", "model.BasicBlock", "model.BasicBlock"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "out_channels", ",", "\n", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "b1", "=", "ops", ".", "ResidualBlock", "(", "64", ",", "64", ")", "\n", "self", ".", "b2", "=", "ops", ".", "ResidualBlock", "(", "64", ",", "64", ")", "\n", "self", ".", "b3", "=", "ops", ".", "ResidualBlock", "(", "64", ",", "64", ")", "\n", "self", ".", "c1", "=", "ops", ".", "BasicBlock", "(", "64", "*", "2", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "c2", "=", "ops", ".", "BasicBlock", "(", "64", "*", "3", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "c3", "=", "ops", ".", "BasicBlock", "(", "64", "*", "4", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.CARN.Block.forward": [[19, 35], ["CARN.Block.b1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN.Block.c1", "CARN.Block.b2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN.Block.c2", "CARN.Block.b3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN.Block.c3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c0", "=", "o0", "=", "x", "\n", "\n", "b1", "=", "self", ".", "b1", "(", "o0", ")", "\n", "c1", "=", "torch", ".", "cat", "(", "[", "c0", ",", "b1", "]", ",", "dim", "=", "1", ")", "\n", "o1", "=", "self", ".", "c1", "(", "c1", ")", "\n", "\n", "b2", "=", "self", ".", "b2", "(", "o1", ")", "\n", "c2", "=", "torch", ".", "cat", "(", "[", "c1", ",", "b2", "]", ",", "dim", "=", "1", ")", "\n", "o2", "=", "self", ".", "c2", "(", "c2", ")", "\n", "\n", "b3", "=", "self", ".", "b3", "(", "o2", ")", "\n", "c3", "=", "torch", ".", "cat", "(", "[", "c2", ",", "b3", "]", ",", "dim", "=", "1", ")", "\n", "o3", "=", "self", ".", "c3", "(", "c3", ")", "\n", "\n", "return", "o3", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.CARN.Net.__init__": [[38, 50], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "CARN.Block", "CARN.Block", "CARN.Block", "model.BasicBlock", "model.BasicBlock", "model.BasicBlock", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "entry", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "b1", "=", "Block", "(", "64", ",", "64", ")", "\n", "self", ".", "b2", "=", "Block", "(", "64", ",", "64", ")", "\n", "self", ".", "b3", "=", "Block", "(", "64", ",", "64", ")", "\n", "self", ".", "c1", "=", "ops", ".", "BasicBlock", "(", "64", "*", "2", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "c2", "=", "ops", ".", "BasicBlock", "(", "64", "*", "3", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "c3", "=", "ops", ".", "BasicBlock", "(", "64", "*", "4", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "exit", "=", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.CARN.Net.forward": [[51, 70], ["CARN.Net.entry", "CARN.Net.b1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN.Net.c1", "CARN.Net.b2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN.Net.c2", "CARN.Net.b3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN.Net.c3", "CARN.Net.exit"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "entry", "(", "x", ")", "\n", "c0", "=", "o0", "=", "x", "\n", "\n", "b1", "=", "self", ".", "b1", "(", "o0", ")", "\n", "c1", "=", "torch", ".", "cat", "(", "[", "c0", ",", "b1", "]", ",", "dim", "=", "1", ")", "\n", "o1", "=", "self", ".", "c1", "(", "c1", ")", "\n", "\n", "b2", "=", "self", ".", "b2", "(", "o1", ")", "\n", "c2", "=", "torch", ".", "cat", "(", "[", "c1", ",", "b2", "]", ",", "dim", "=", "1", ")", "\n", "o2", "=", "self", ".", "c2", "(", "c2", ")", "\n", "\n", "b3", "=", "self", ".", "b3", "(", "o2", ")", "\n", "c3", "=", "torch", ".", "cat", "(", "[", "c2", ",", "b3", "]", ",", "dim", "=", "1", ")", "\n", "o3", "=", "self", ".", "c3", "(", "c3", ")", "\n", "\n", "out", "=", "self", ".", "exit", "(", "o3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.MeanShift.__init__": [[13, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ops.MeanShift.shifter.parameters", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean_rgb", ",", "sub", ")", ":", "\n", "        ", "super", "(", "MeanShift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "sign", "=", "-", "1", "if", "sub", "else", "1", "\n", "r", "=", "mean_rgb", "[", "0", "]", "*", "sign", "\n", "g", "=", "mean_rgb", "[", "1", "]", "*", "sign", "\n", "b", "=", "mean_rgb", "[", "2", "]", "*", "sign", "\n", "\n", "self", ".", "shifter", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "shifter", ".", "weight", ".", "data", "=", "torch", ".", "eye", "(", "3", ")", ".", "view", "(", "3", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "shifter", ".", "bias", ".", "data", "=", "torch", ".", "Tensor", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n", "# Freeze the mean shift layer", "\n", "for", "params", "in", "self", ".", "shifter", ".", "parameters", "(", ")", ":", "\n", "            ", "params", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.MeanShift.forward": [[29, 32], ["ops.MeanShift.shifter"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "shifter", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.BasicBlock.__init__": [[35, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ops.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "out_channels", ",", "\n", "ksize", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "pad", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "init_weights", "(", "self", ".", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.BasicBlock.forward": [[47, 50], ["ops.BasicBlock.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "body", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.ResidualBlock.__init__": [[53, 64], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ops.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "init_weights", "(", "self", ".", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.ResidualBlock.forward": [[65, 69], ["ops.ResidualBlock.body", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "body", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", "+", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.EResidualBlock.__init__": [[72, 86], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ops.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "out_channels", ",", "\n", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "EResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ")", ",", "\n", ")", "\n", "\n", "init_weights", "(", "self", ".", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.EResidualBlock.forward": [[87, 91], ["ops.EResidualBlock.body", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "body", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", "+", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.UpsampleBlock.__init__": [[94, 107], ["torch.Module.__init__", "ops._UpsampleBlock", "ops._UpsampleBlock", "ops._UpsampleBlock", "ops._UpsampleBlock"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_channels", ",", "scale", ",", "multi_scale", ",", "\n", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "UpsampleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "multi_scale", ":", "\n", "            ", "self", ".", "up2", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "2", ",", "group", "=", "group", ")", "\n", "self", ".", "up3", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "3", ",", "group", "=", "group", ")", "\n", "self", ".", "up4", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "4", ",", "group", "=", "group", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "scale", ",", "group", "=", "group", ")", "\n", "\n", "", "self", ".", "multi_scale", "=", "multi_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.UpsampleBlock.forward": [[108, 118], ["ops.UpsampleBlock.up", "ops.UpsampleBlock.up2", "ops.UpsampleBlock.up3", "ops.UpsampleBlock.up4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "scale", ")", ":", "\n", "        ", "if", "self", ".", "multi_scale", ":", "\n", "            ", "if", "scale", "==", "2", ":", "\n", "                ", "return", "self", ".", "up2", "(", "x", ")", "\n", "", "elif", "scale", "==", "3", ":", "\n", "                ", "return", "self", ".", "up3", "(", "x", ")", "\n", "", "elif", "scale", "==", "4", ":", "\n", "                ", "return", "self", ".", "up4", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "self", ".", "up", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops._UpsampleBlock.__init__": [[121, 137], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ops.init_weights", "range", "int", "math.log", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_channels", ",", "scale", ",", "\n", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "_UpsampleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "modules", "=", "[", "]", "\n", "if", "scale", "==", "2", "or", "scale", "==", "4", "or", "scale", "==", "8", ":", "\n", "            ", "for", "_", "in", "range", "(", "int", "(", "math", ".", "log", "(", "scale", ",", "2", ")", ")", ")", ":", "\n", "                ", "modules", "+=", "[", "nn", ".", "Conv2d", "(", "n_channels", ",", "4", "*", "n_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "modules", "+=", "[", "nn", ".", "PixelShuffle", "(", "2", ")", "]", "\n", "", "", "elif", "scale", "==", "3", ":", "\n", "            ", "modules", "+=", "[", "nn", ".", "Conv2d", "(", "n_channels", ",", "9", "*", "n_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "modules", "+=", "[", "nn", ".", "PixelShuffle", "(", "3", ")", "]", "\n", "\n", "", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "init_weights", "(", "self", ".", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops._UpsampleBlock.forward": [[138, 141], ["ops._UpsampleBlock.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "body", "(", "x", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.ops.init_weights": [[8, 10], ["None"], "function", ["None"], ["def", "init_weights", "(", "modules", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.CARN_m.Block.__init__": [[7, 16], ["torch.Module.__init__", "model.EResidualBlock", "model.BasicBlock", "model.BasicBlock", "model.BasicBlock"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "out_channels", ",", "\n", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "b1", "=", "ops", ".", "EResidualBlock", "(", "64", ",", "64", ",", "group", "=", "group", ")", "\n", "self", ".", "c1", "=", "ops", ".", "BasicBlock", "(", "64", "*", "2", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "c2", "=", "ops", ".", "BasicBlock", "(", "64", "*", "3", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "c3", "=", "ops", ".", "BasicBlock", "(", "64", "*", "4", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.CARN_m.Block.forward": [[17, 33], ["CARN_m.Block.b1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_m.Block.c1", "CARN_m.Block.b1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_m.Block.c2", "CARN_m.Block.b1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_m.Block.c3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c0", "=", "o0", "=", "x", "\n", "\n", "b1", "=", "self", ".", "b1", "(", "o0", ")", "\n", "c1", "=", "torch", ".", "cat", "(", "[", "c0", ",", "b1", "]", ",", "dim", "=", "1", ")", "\n", "o1", "=", "self", ".", "c1", "(", "c1", ")", "\n", "\n", "b2", "=", "self", ".", "b1", "(", "o1", ")", "\n", "c2", "=", "torch", ".", "cat", "(", "[", "c1", ",", "b2", "]", ",", "dim", "=", "1", ")", "\n", "o2", "=", "self", ".", "c2", "(", "c2", ")", "\n", "\n", "b3", "=", "self", ".", "b1", "(", "o2", ")", "\n", "c3", "=", "torch", ".", "cat", "(", "[", "c2", ",", "b3", "]", ",", "dim", "=", "1", ")", "\n", "o3", "=", "self", ".", "c3", "(", "c3", ")", "\n", "\n", "return", "o3", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.CARN_m.Net.__init__": [[36, 52], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "CARN_m.Block", "CARN_m.Block", "CARN_m.Block", "model.BasicBlock", "model.BasicBlock", "model.BasicBlock", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "group", "=", "4", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "group", "=", "group", "\n", "\n", "self", ".", "entry", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "b1", "=", "Block", "(", "64", ",", "64", ",", "group", "=", "self", ".", "group", ")", "\n", "self", ".", "b2", "=", "Block", "(", "64", ",", "64", ",", "group", "=", "self", ".", "group", ")", "\n", "self", ".", "b3", "=", "Block", "(", "64", ",", "64", ",", "group", "=", "self", ".", "group", ")", "\n", "self", ".", "c1", "=", "ops", ".", "BasicBlock", "(", "64", "*", "2", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "c2", "=", "ops", ".", "BasicBlock", "(", "64", "*", "3", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "c3", "=", "ops", ".", "BasicBlock", "(", "64", "*", "4", ",", "64", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "exit", "=", "nn", ".", "Conv2d", "(", "64", ",", "self", ".", "out_channels", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.CARN.CARN_m.Net.forward": [[53, 72], ["CARN_m.Net.entry", "CARN_m.Net.b1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_m.Net.c1", "CARN_m.Net.b2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_m.Net.c2", "CARN_m.Net.b3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_m.Net.c3", "CARN_m.Net.exit"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "entry", "(", "x", ")", "\n", "c0", "=", "o0", "=", "x", "\n", "\n", "b1", "=", "self", ".", "b1", "(", "o0", ")", "\n", "c1", "=", "torch", ".", "cat", "(", "[", "c0", ",", "b1", "]", ",", "dim", "=", "1", ")", "\n", "o1", "=", "self", ".", "c1", "(", "c1", ")", "\n", "\n", "b2", "=", "self", ".", "b2", "(", "o1", ")", "\n", "c2", "=", "torch", ".", "cat", "(", "[", "c1", ",", "b2", "]", ",", "dim", "=", "1", ")", "\n", "o2", "=", "self", ".", "c2", "(", "c2", ")", "\n", "\n", "b3", "=", "self", ".", "b3", "(", "o2", ")", "\n", "c3", "=", "torch", ".", "cat", "(", "[", "c2", ",", "b3", "]", ",", "dim", "=", "1", ")", "\n", "o3", "=", "self", ".", "c3", "(", "c3", ")", "\n", "\n", "out", "=", "self", ".", "exit", "(", "o3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.PixelUnShuffle.PixelUnShuffle.__init__": [[25, 28], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "downscale_factor", ")", ":", "\n", "        ", "super", "(", "PixelUnShuffle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "downscale_factor", "=", "downscale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.PixelUnShuffle.PixelUnShuffle.forward": [[29, 36], ["PixelUnShuffle.pixel_unshuffle"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.PixelUnShuffle.pixel_unshuffle"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "'''\n        input: batchSize * c * k*w * k*h\n        downscale_factor: k\n        batchSize * c * k*w * k*h -> batchSize * k*k*c * w * h\n        '''", "\n", "return", "pixel_unshuffle", "(", "input", ",", "self", ".", "downscale_factor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.PixelUnShuffle.pixel_unshuffle": [[8, 22], ["torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.conv2d", "range"], "function", ["None"], ["def", "pixel_unshuffle", "(", "input", ",", "downscale_factor", ")", ":", "\n", "    ", "'''\n    input: batchSize * c * k*w * k*h\n    downscale_factor: k\n    batchSize * c * k*w * k*h -> batchSize * k*k*c * w * h\n    '''", "\n", "c", "=", "input", ".", "shape", "[", "1", "]", "\n", "kernel", "=", "torch", ".", "zeros", "(", "size", "=", "[", "downscale_factor", "*", "downscale_factor", "*", "c", ",", "1", ",", "downscale_factor", ",", "downscale_factor", "]", ",", "\n", "device", "=", "input", ".", "device", ")", "\n", "for", "y", "in", "range", "(", "downscale_factor", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "downscale_factor", ")", ":", "\n", "            ", "kernel", "[", "x", "+", "y", "*", "downscale_factor", ":", ":", "downscale_factor", "*", "\n", "downscale_factor", ",", "0", ",", "y", ",", "x", "]", "=", "1", "\n", "", "", "return", "F", ".", "conv2d", "(", "input", ",", "kernel", ",", "stride", "=", "downscale_factor", ",", "groups", "=", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.AFB_0.__init__": [[7, 14], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "Channels", ",", "kSize", "=", "3", ")", ":", "\n", "        ", "super", "(", "AFB_0", ",", "self", ")", ".", "__init__", "(", ")", "\n", "Ch", "=", "Channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "Ch", ",", "Ch", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "# self.relu  = nn.ReLU()", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "Ch", ",", "Ch", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.AFB_0.forward": [[15, 17], ["afn.AFB_0.relu", "afn.AFB_0.conv2", "afn.AFB_0.relu", "afn.AFB_0.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "relu", "(", "self", ".", "conv2", "(", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.AFB_L1.__init__": [[20, 30], ["torch.Module.__init__", "afn.AFB_0", "afn.AFB_0", "afn.AFB_0", "torch.Sequential", "torch.Sequential", "model.NTIRE2020_Deblur_top.AFN.SENet.SELayer", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "growRate0", ",", "kSize", "=", "3", ")", ":", "\n", "        ", "super", "(", "AFB_L1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "G0", "=", "self", ".", "G0", "=", "growRate0", "\n", "\n", "self", ".", "conv1", "=", "AFB_0", "(", "G0", ")", "\n", "self", ".", "conv2", "=", "AFB_0", "(", "G0", ")", "\n", "self", ".", "conv3", "=", "AFB_0", "(", "G0", ")", "\n", "self", ".", "LFF", "=", "nn", ".", "Sequential", "(", "\n", "SELayer", "(", "G0", "+", "(", "self", ".", "G0", ")", "*", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "G0", "+", "(", "self", ".", "G0", ")", "*", "2", ",", "G0", ",", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.AFB_L1.forward": [[32, 44], ["afn.AFB_L1.conv1", "res.append", "afn.AFB_L1.conv2", "res.append", "afn.AFB_L1.conv3", "res.append", "afn.AFB_L1.LFF", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "ox", "=", "x", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "\n", "return", "self", ".", "LFF", "(", "torch", ".", "cat", "(", "res", ",", "1", ")", ")", "+", "ox", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.AFB_L2.__init__": [[47, 59], ["torch.Module.__init__", "afn.AFB_L1", "afn.AFB_L1", "afn.AFB_L1", "afn.AFB_L1", "torch.Sequential", "torch.Sequential", "model.NTIRE2020_Deblur_top.AFN.SENet.SELayer", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "growRate0", ",", "kSize", "=", "3", ")", ":", "\n", "        ", "super", "(", "AFB_L2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "G0", "=", "self", ".", "G0", "=", "growRate0", "\n", "\n", "self", ".", "conv1", "=", "AFB_L1", "(", "growRate0", "=", "G0", ")", "\n", "self", ".", "conv2", "=", "AFB_L1", "(", "growRate0", "=", "G0", ")", "\n", "self", ".", "conv3", "=", "AFB_L1", "(", "growRate0", "=", "G0", ")", "\n", "self", ".", "conv4", "=", "AFB_L1", "(", "growRate0", "=", "G0", ")", "\n", "\n", "self", ".", "LFF", "=", "nn", ".", "Sequential", "(", "\n", "SELayer", "(", "G0", "+", "(", "self", ".", "G0", ")", "*", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "G0", "+", "(", "self", ".", "G0", ")", "*", "3", ",", "G0", ",", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.AFB_L2.forward": [[61, 75], ["afn.AFB_L2.conv1", "res.append", "afn.AFB_L2.conv2", "res.append", "afn.AFB_L2.conv3", "res.append", "afn.AFB_L2.conv4", "res.append", "afn.AFB_L2.LFF", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "\n", "ox", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "\n", "return", "self", ".", "LFF", "(", "torch", ".", "cat", "(", "res", ",", "1", ")", ")", "+", "ox", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.AFB_L3.__init__": [[78, 90], ["torch.Module.__init__", "afn.AFB_L2", "afn.AFB_L2", "afn.AFB_L2", "afn.AFB_L2", "torch.Sequential", "torch.Sequential", "model.NTIRE2020_Deblur_top.AFN.SENet.SELayer", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "growRate0", ",", "kSize", "=", "3", ")", ":", "\n", "        ", "super", "(", "AFB_L3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "G0", "=", "self", ".", "G0", "=", "growRate0", "\n", "\n", "self", ".", "conv1", "=", "AFB_L2", "(", "growRate0", "=", "G0", ")", "\n", "self", ".", "conv2", "=", "AFB_L2", "(", "growRate0", "=", "G0", ")", "\n", "self", ".", "conv3", "=", "AFB_L2", "(", "growRate0", "=", "G0", ")", "\n", "self", ".", "conv4", "=", "AFB_L2", "(", "growRate0", "=", "G0", ")", "\n", "\n", "self", ".", "LFF", "=", "nn", ".", "Sequential", "(", "\n", "SELayer", "(", "G0", "+", "(", "self", ".", "G0", ")", "*", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "G0", "+", "(", "self", ".", "G0", ")", "*", "3", ",", "G0", ",", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.AFB_L3.forward": [[92, 106], ["afn.AFB_L3.conv1", "res.append", "afn.AFB_L3.conv2", "res.append", "afn.AFB_L3.conv3", "res.append", "afn.AFB_L3.conv4", "res.append", "afn.AFB_L3.LFF", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "\n", "ox", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "\n", "return", "self", ".", "LFF", "(", "torch", ".", "cat", "(", "res", ",", "1", ")", ")", "+", "ox", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.RDN.__init__": [[109, 139], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "afn.RDN.AFBs.append", "torch.Sequential", "torch.Sequential", "afn.AFB_L3", "model.NTIRE2020_Deblur_top.AFN.SENet.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "out_channels", "=", "3", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", "RDN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "r", "=", "2", "\n", "G0", "=", "128", "\n", "kSize", "=", "3", "\n", "\n", "G", "=", "64", "\n", "\n", "self", ".", "encoding1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "G0", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", "\n", "self", ".", "encoding2", "=", "nn", ".", "Conv2d", "(", "\n", "G0", ",", "G0", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "n_r", "=", "3", "\n", "self", ".", "AFBs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_r", ")", ":", "\n", "            ", "self", ".", "AFBs", ".", "append", "(", "\n", "AFB_L3", "(", "growRate0", "=", "G0", ")", "\n", ")", "\n", "\n", "", "self", ".", "GFF", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "SELayer", "(", "self", ".", "n_r", "*", "G0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "n_r", "*", "G0", ",", "G0", ",", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "G0", ",", "G0", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", "\n", "]", ")", "\n", "\n", "if", "r", "==", "2", ":", "\n", "            ", "self", ".", "decoding", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "G0", ",", "G", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "G", ",", "out_channels", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.RDN.forward": [[142, 161], ["afn.RDN.encoding1", "afn.RDN.encoding2", "range", "afn.RDN.GFF", "afn.RDN.decoding", "AFBs_out.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ori", "=", "x", "\n", "x", "=", "ori", "\n", "\n", "f__1", "=", "self", ".", "encoding1", "(", "x", ")", "\n", "x", "=", "self", ".", "encoding2", "(", "f__1", ")", "\n", "f__2", "=", "x", "\n", "\n", "AFBs_out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_r", ")", ":", "\n", "            ", "x", "=", "self", ".", "AFBs", "[", "i", "]", "(", "x", ")", "\n", "AFBs_out", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "GFF", "(", "torch", ".", "cat", "(", "AFBs_out", ",", "1", ")", ")", "\n", "x", "+=", "f__2", "\n", "\n", "x", "=", "self", ".", "decoding", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.AFN.__init__": [[163, 167], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "afn.RDN"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "s2conv", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "rdn", "=", "RDN", "(", "64", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.afn.AFN.forward": [[168, 174], ["afn.AFN.s2conv", "afn.AFN.rdn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "input", "\n", "x", "=", "self", ".", "s2conv", "(", "x", ")", "\n", "x", "=", "self", ".", "rdn", "(", "x", ")", "\n", "x", "=", "x", "+", "input", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.SENet.SELayer.__init__": [[4, 12], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Linear", "torch.LeakyReLU", "torch.Linear", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.SENet.SELayer.forward": [[14, 22], ["x.size", "SENet.SELayer.avg_pool().view", "SENet.SELayer.fc().view", "SENet.SELayer.expand_as", "SENet.SELayer.avg_pool", "SENet.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "# logger.info(str(y))", "\n", "# logger.info(f\"{y.mean()}, {y.min()}, {y.max()}, {y.std()}\")", "\n", "# embed()", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.SENet.SEBottleneck.__init__": [[27, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "SENet.SELayer"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "\n", "*", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SEBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "# self.bn1 = nn.BatchNorm2d(planes)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# self.bn2 = nn.BatchNorm2d(planes)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "# self.bn3 = nn.BatchNorm2d(planes * 4)", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "se", "=", "SELayer", "(", "planes", "*", "4", ",", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.AFN.SENet.SEBottleneck.forward": [[43, 65], ["SENet.SEBottleneck.conv1", "SENet.SEBottleneck.relu", "SENet.SEBottleneck.conv2", "SENet.SEBottleneck.relu", "SENet.SEBottleneck.conv3", "SENet.SEBottleneck.se", "SENet.SEBottleneck.relu", "SENet.SEBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# out = self.bn1(out)", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "# out = self.bn2(out)", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "# out = self.bn3(out)", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA.model_stage1.AtrousNet.__init__": [[10, 95], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "model_stage1.AtrousNet.downsampling_layers.append", "model_stage1.AtrousNet.downsampling_layers.append", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "model_stage1.AtrousNet.upsampling_layers.append", "model_stage1.AtrousNet.upsampling_layers.append", "torch.Sequential", "torch.Sequential", "model_stage1.AtrousNet.output_layer.append", "model_stage1.AtrousNet.output_layer.append", "torch.Sequential", "torch.Sequential", "model.NTIRE2020_Deblur_top.uniA.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2020_Deblur_top.uniA.layerlib_stage1.Conv2D_ReflectPad", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "model.NTIRE2020_Deblur_top.uniA.layerlib_stage1.Conv2D_ReflectPad", "model.NTIRE2020_Deblur_top.uniA.layerlib_stage1.Conv2D_ReflectPad", "model_stage1.AtrousNet.blocks.append", "model_stage1.AtrousNet.blocks.append", "model.NTIRE2020_Deblur_top.uniA.layerlib_stage1.AtrousBlockPad2", "model.NTIRE2020_Deblur_top.uniA.layerlib_stage1.AtrousBlockPad2"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["atrousDim", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ")", ":", "\n", "        ", "super", "(", "AtrousNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "max_global_stride", "=", "max_global_stride", "\n", "self", ".", "pad_to_fit_global_stride", "=", "pad_to_fit_global_stride", "\n", "self", ".", "d_mult", "=", "d_mult", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "downsampling_layers", "=", "[", "]", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "padding", "=", "1", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "downsampling_layers", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "x", "==", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", ",", "\n", "needs_projection", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "AtrousBlockPad2", "(", "in_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "atrousBlock", "=", "atrousDim", ")", ")", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "upsampling_layers", "=", "[", "]", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "self", ".", "d_mult", "*", "6", ",", "# Error: should be 4", "\n", "out_channels", "=", "self", ".", "d_mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", ",", "\n", "bias", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", ".", "append", "(", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "upsampling_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upsampling_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "[", "]", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", "*", "3", ",", "\n", "out_channels", "=", "self", ".", "d_mult", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "output_layer", ".", "append", "(", "Conv2D_ReflectPad", "(", "in_channels", "=", "self", ".", "d_mult", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_scale", "=", "True", ",", "\n", "padding", "=", "'same'", ",", "\n", "act", "=", "None", ")", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "output_layer", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "downs", "=", "[", "]", "\n", "net", "=", "input_data", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA.model_stage1.AtrousNet.forward": [[96, 115], ["range", "range", "range", "range", "len", "downs.append", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len"], "methods", ["None"], ["for", "x", "in", "range", "(", "len", "(", "self", ".", "downsampling_layers", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "downsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "downs", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "blocks", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "upsampling_layers", ")", ")", ":", "\n", "            ", "idx", "=", "len", "(", "downs", ")", "-", "x", "-", "1", "\n", "net", "=", "torch", ".", "cat", "(", "(", "net", ",", "downs", "[", "idx", "]", ")", ",", "1", ")", "\n", "net", "=", "self", ".", "upsampling_layers", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "self", ".", "output_layer", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "output_layer", "[", "x", "]", "(", "net", ")", "\n", "\n", "", "return", "input_data", "+", "net", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "device", "=", "\"cuda\"", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.config.Config.Config.__init__": [[5, 8], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config_file", ")", ":", "\n", "        ", "super", "(", "Config", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config_file", "=", "config_file", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.config.Config.Config.__call__": [[9, 14], ["dotmap.DotMap", "open", "yaml.load"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "config_file", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "self", ".", "yaml_data", "=", "yaml", ".", "load", "(", "file", ")", "\n", "", "self", ".", "cfg", "=", "DotMap", "(", "self", ".", "yaml_data", ")", "\n", "return", "self", ".", "cfg", "", "", "", ""]], "home.repos.pwc.inspect_result.flyegle_sdwnet.finetune_val.pross_data.make_val_file": [[5, 18], ["open().readlines", "open", "open", "json.loads", "os.path.join", "file.write", "data.strip", "json.dumps"], "function", ["None"], ["def", "make_val_file", "(", "data_file", ",", "output_file", ")", ":", "\n", "    ", "data_list", "=", "open", "(", "data_file", ")", ".", "readlines", "(", ")", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "for", "data", "in", "data_list", ":", "\n", "            ", "data_json", "=", "json", ".", "loads", "(", "data", ".", "strip", "(", ")", ")", "\n", "image_key", "=", "data_json", "[", "\"image_key\"", "]", "\n", "new_image_key", "=", "os", ".", "path", ".", "join", "(", "\"val\"", ",", "image_key", ")", "\n", "image_path", "=", "data_json", "[", "\"image_path\"", "]", "\n", "result", "=", "{", "\n", "\"image_key\"", ":", "new_image_key", ",", "\n", "\"image_path\"", ":", "image_path", "\n", "}", "\n", "file", ".", "write", "(", "json", ".", "dumps", "(", "result", ",", "ensure_ascii", "=", "False", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.paper_prepare.make_data.get_file": [[8, 22], ["os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "blur_image_path.append", "sharp_image_path.append", "os.path.join", "os.path.join"], "function", ["None"], ["def", "get_file", "(", "data_folder", ")", ":", "\n", "    ", "blur_image_path", "=", "[", "]", "\n", "sharp_image_path", "=", "[", "]", "\n", "for", "sub_folder", "in", "os", ".", "listdir", "(", "data_folder", ")", ":", "\n", "        ", "sub_path", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "sub_folder", ")", "\n", "blur_path", "=", "os", ".", "path", ".", "join", "(", "sub_path", ",", "\"blur_gamma\"", ")", "\n", "sharp_path", "=", "os", ".", "path", ".", "join", "(", "sub_path", ",", "\"sharp\"", ")", "\n", "\n", "image_key", "=", "os", ".", "listdir", "(", "sharp_path", ")", "\n", "for", "image", "in", "image_key", ":", "\n", "            ", "blur_image_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "blur_path", ",", "image", ")", ")", "\n", "sharp_image_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "sharp_path", ",", "image", ")", ")", "\n", "\n", "", "", "return", "blur_image_path", ",", "sharp_image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.paper_prepare.make_data.make_log": [[23, 33], ["open", "file.write", "data.split", "json.dumps", "data.split"], "function", ["None"], ["", "def", "make_log", "(", "image_path", ",", "output_file", ")", ":", "\n", "    ", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "for", "data", "in", "image_path", ":", "\n", "            ", "image_key", "=", "data", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "+", "'_'", "+", "data", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "# print(image_key)", "\n", "result", "=", "{", "\n", "\"image_key\"", ":", "image_key", ",", "\n", "\"image_path\"", ":", "data", "\n", "}", "\n", "file", ".", "write", "(", "json", ".", "dumps", "(", "result", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.metric_util.reorder_image": [[6, 32], ["ValueError", "len", "img.transpose.transpose"], "function", ["None"], ["def", "reorder_image", "(", "img", ",", "input_order", "=", "'HWC'", ")", ":", "\n", "    ", "\"\"\"Reorder images to 'HWC' order.\n\n    If the input_order is (h, w), return (h, w, 1);\n    If the input_order is (c, h, w), return (h, w, c);\n    If the input_order is (h, w, c), return as it is.\n\n    Args:\n        img (ndarray): Input image.\n        input_order (str): Whether the input order is 'HWC' or 'CHW'.\n            If the input image shape is (h, w), input_order will not have\n            effects. Default: 'HWC'.\n\n    Returns:\n        ndarray: reordered image.\n    \"\"\"", "\n", "\n", "if", "input_order", "not", "in", "[", "'HWC'", ",", "'CHW'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f'Wrong input_order {input_order}. Supported input_orders are '", "\n", "\"'HWC' and 'CHW'\"", ")", "\n", "", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "        ", "img", "=", "img", "[", "...", ",", "None", "]", "\n", "", "if", "input_order", "==", "'CHW'", ":", "\n", "        ", "img", "=", "img", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.metric_util.to_y_channel": [[34, 48], ["basicsr.utils.matlab_functions.bgr2ycbcr.astype", "basicsr.utils.matlab_functions.bgr2ycbcr"], "function", ["None"], ["", "def", "to_y_channel", "(", "img", ")", ":", "\n", "    ", "\"\"\"Change to Y channel of YCbCr.\n\n    Args:\n        img (ndarray): Images with range [0, 255].\n\n    Returns:\n        (ndarray): Images with range [0, 255] (float type) without round.\n    \"\"\"", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "if", "img", ".", "ndim", "==", "3", "and", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "        ", "img", "=", "bgr2ycbcr", "(", "img", ",", "y_only", "=", "True", ")", "\n", "img", "=", "img", "[", "...", ",", "None", "]", "\n", "", "return", "img", "*", "255.", "\n", "", ""]], "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.psnr_ssim.calculate_psnr": [[7, 52], ["basicsr.metrics.metric_util.reorder_image", "basicsr.metrics.metric_util.reorder_image", "basicsr.metrics.metric_util.to_y_channel.astype", "basicsr.metrics.metric_util.to_y_channel.astype", "numpy.mean", "ValueError", "basicsr.metrics.metric_util.to_y_channel", "basicsr.metrics.metric_util.to_y_channel", "float", "numpy.log10", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.metric_util.reorder_image", "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.metric_util.reorder_image", "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.metric_util.to_y_channel", "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.metric_util.to_y_channel"], ["def", "calculate_psnr", "(", "img1", ",", "\n", "img2", ",", "\n", "crop_border", ",", "\n", "input_order", "=", "'HWC'", ",", "\n", "test_y_channel", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate PSNR (Peak Signal-to-Noise Ratio).\n\n    Ref: https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio\n\n    Args:\n        img1 (ndarray): Images with range [0, 255].\n        img2 (ndarray): Images with range [0, 255].\n        crop_border (int): Cropped pixels in each edge of an image. These\n            pixels are not involved in the PSNR calculation.\n        input_order (str): Whether the input order is 'HWC' or 'CHW'.\n            Default: 'HWC'.\n        test_y_channel (bool): Test on Y channel of YCbCr. Default: False.\n\n    Returns:\n        float: psnr result.\n    \"\"\"", "\n", "\n", "assert", "img1", ".", "shape", "==", "img2", ".", "shape", ",", "(", "\n", "f'Image shapes are differnet: {img1.shape}, {img2.shape}.'", ")", "\n", "if", "input_order", "not", "in", "[", "'HWC'", ",", "'CHW'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f'Wrong input_order {input_order}. Supported input_orders are '", "\n", "'\"HWC\" and \"CHW\"'", ")", "\n", "", "img1", "=", "reorder_image", "(", "img1", ",", "input_order", "=", "input_order", ")", "\n", "img2", "=", "reorder_image", "(", "img2", ",", "input_order", "=", "input_order", ")", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "if", "crop_border", "!=", "0", ":", "\n", "        ", "img1", "=", "img1", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", "...", "]", "\n", "img2", "=", "img2", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", "...", "]", "\n", "\n", "", "if", "test_y_channel", ":", "\n", "        ", "img1", "=", "to_y_channel", "(", "img1", ")", "\n", "img2", "=", "to_y_channel", "(", "img2", ")", "\n", "\n", "", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20.", "*", "np", ".", "log10", "(", "255.", "/", "np", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.psnr_ssim._ssim": [[54, 88], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "def", "_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "\"\"\"Calculate SSIM (structural similarity) for one channel images.\n\n    It is called by func:`calculate_ssim`.\n\n    Args:\n        img1 (ndarray): Images with range [0, 255] with order 'HWC'.\n        img2 (ndarray): Images with range [0, 255] with order 'HWC'.\n\n    Returns:\n        float: ssim result.\n    \"\"\"", "\n", "\n", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "\n", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.psnr_ssim.calculate_ssim": [[90, 142], ["basicsr.metrics.metric_util.reorder_image", "basicsr.metrics.metric_util.reorder_image", "basicsr.metrics.metric_util.to_y_channel.astype", "basicsr.metrics.metric_util.to_y_channel.astype", "range", "numpy.array().mean", "ValueError", "basicsr.metrics.metric_util.to_y_channel", "basicsr.metrics.metric_util.to_y_channel", "ssims.append", "psnr_ssim._ssim", "numpy.array"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.metric_util.reorder_image", "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.metric_util.reorder_image", "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.metric_util.to_y_channel", "home.repos.pwc.inspect_result.flyegle_sdwnet.metrics.metric_util.to_y_channel", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss._ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "\n", "img2", ",", "\n", "crop_border", ",", "\n", "input_order", "=", "'HWC'", ",", "\n", "test_y_channel", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate SSIM (structural similarity).\n\n    Ref:\n    Image quality assessment: From error visibility to structural similarity\n\n    The results are the same as that of the official released MATLAB code in\n    https://ece.uwaterloo.ca/~z70wang/research/ssim/.\n\n    For three-channel images, SSIM is calculated for each channel and then\n    averaged.\n\n    Args:\n        img1 (ndarray): Images with range [0, 255].\n        img2 (ndarray): Images with range [0, 255].\n        crop_border (int): Cropped pixels in each edge of an image. These\n            pixels are not involved in the SSIM calculation.\n        input_order (str): Whether the input order is 'HWC' or 'CHW'.\n            Default: 'HWC'.\n        test_y_channel (bool): Test on Y channel of YCbCr. Default: False.\n\n    Returns:\n        float: ssim result.\n    \"\"\"", "\n", "\n", "assert", "img1", ".", "shape", "==", "img2", ".", "shape", ",", "(", "\n", "f'Image shapes are differnet: {img1.shape}, {img2.shape}.'", ")", "\n", "if", "input_order", "not", "in", "[", "'HWC'", ",", "'CHW'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f'Wrong input_order {input_order}. Supported input_orders are '", "\n", "'\"HWC\" and \"CHW\"'", ")", "\n", "", "img1", "=", "reorder_image", "(", "img1", ",", "input_order", "=", "input_order", ")", "\n", "img2", "=", "reorder_image", "(", "img2", ",", "input_order", "=", "input_order", ")", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "if", "crop_border", "!=", "0", ":", "\n", "        ", "img1", "=", "img1", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", "...", "]", "\n", "img2", "=", "img2", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", "...", "]", "\n", "\n", "", "if", "test_y_channel", ":", "\n", "        ", "img1", "=", "to_y_channel", "(", "img1", ")", "\n", "img2", "=", "to_y_channel", "(", "img2", ")", "\n", "\n", "", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img1", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "ssims", ".", "append", "(", "_ssim", "(", "img1", "[", "...", ",", "i", "]", ",", "img2", "[", "...", ",", "i", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.Compose.__init__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.Compose.__call__": [[22, 27], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "if", "t", "is", "not", "None", ":", "\n", "                ", "lr", ",", "hr", "=", "t", "(", "lr", ",", "hr", ")", "\n", "", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomCrop.__init__": [[30, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ":", "tuple", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomCrop.__call__": [[33, 53], ["random.choice", "random.choice", "isinstance", "list", "list", "lr.crop.crop.crop", "hr.crop.crop.crop", "isinstance", "range", "range", "lr.crop.crop.crop", "hr.crop.crop.crop", "TypeError", "PIL.Image.fromarray", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "w", ",", "h", "=", "lr", ".", "size", "[", "0", "]", ",", "lr", ".", "size", "[", "1", "]", "\n", "x1", "=", "random", ".", "choice", "(", "list", "(", "range", "(", "w", "-", "self", ".", "crop_size", "[", "0", "]", ")", ")", ")", "\n", "y1", "=", "random", ".", "choice", "(", "list", "(", "range", "(", "h", "-", "self", ".", "crop_size", "[", "1", "]", ")", ")", ")", "\n", "x2", "=", "x1", "+", "self", ".", "crop_size", "[", "0", "]", "\n", "y2", "=", "y1", "+", "self", ".", "crop_size", "[", "1", "]", "\n", "\n", "bbox", "=", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "\n", "if", "isinstance", "(", "lr", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "lr", "=", "lr", ".", "crop", "(", "bbox", ")", "\n", "hr", "=", "hr", ".", "crop", "(", "bbox", ")", "\n", "", "elif", "isinstance", "(", "lr", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "lr", ",", "hr", "=", "Image", ".", "fromarray", "(", "lr", ")", ",", "Image", ".", "fromarray", "(", "hr", ")", "\n", "lr", "=", "lr", ".", "crop", "(", "bbox", ")", "\n", "hr", "=", "hr", ".", "crop", "(", "bbox", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"data must be pil or array!!\"", ")", "\n", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.CenterCrop.__init__": [[56, 58], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ":", "tuple", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.CenterCrop.__call__": [[59, 64], ["torchvision.center_crop", "torchvision.center_crop", "torchvision.center_crop", "torchvision.center_crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "lr", "=", "F", ".", "center_crop", "(", "lr", ",", "self", ".", "crop_size", ")", "\n", "hr", "=", "F", ".", "center_crop", "(", "hr", ",", "self", ".", "crop_size", ")", "\n", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomHorizonFlip.__init__": [[67, 69], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "proba", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "proba", "=", "proba", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomHorizonFlip.__call__": [[70, 83], ["random.random", "isinstance", "lr.transpose.transpose.transpose", "hr.transpose.transpose.transpose", "isinstance", "lr.transpose.transpose.transpose", "hr.transpose.transpose.transpose", "TypeError", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "proba", ":", "\n", "            ", "if", "isinstance", "(", "lr", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "                ", "lr", "=", "lr", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "hr", "=", "hr", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "elif", "isinstance", "(", "lr", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "lr", ",", "hr", "=", "Image", ".", "fromarray", "(", "lr", ")", ",", "Image", ".", "fromarray", "(", "hr", ")", "\n", "lr", "=", "lr", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "hr", "=", "hr", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "lr", ",", "hr", "=", "np", ".", "asarray", "(", "lr", ")", ",", "np", ".", "asarray", "(", "hr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"data must be pil or array!!\"", ")", "\n", "", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomVerticalFlip.__init__": [[86, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "proba", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "proba", "=", "proba", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomVerticalFlip.__call__": [[89, 102], ["random.random", "isinstance", "lr.transpose.transpose.transpose", "hr.transpose.transpose.transpose", "isinstance", "lr.transpose.transpose.transpose", "hr.transpose.transpose.transpose", "TypeError", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "proba", ":", "\n", "            ", "if", "isinstance", "(", "lr", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "                ", "lr", "=", "lr", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "hr", "=", "hr", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "elif", "isinstance", "(", "lr", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "lr", ",", "hr", "=", "Image", ".", "fromarray", "(", "lr", ")", ",", "Image", ".", "fromarray", "(", "hr", ")", "\n", "lr", "=", "lr", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "hr", "=", "hr", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "lr", ",", "hr", "=", "np", ".", "asarray", "(", "lr", ")", ",", "np", ".", "asarray", "(", "hr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"data must be pil or array!!\"", ")", "\n", "", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomRotate.__init__": [[105, 108], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.3", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "ROTATE_ANGLE", "=", "[", "90", ",", "180", ",", "270", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomRotate.__call__": [[109, 123], ["random.random", "random.choice", "isinstance", "lr.rotate.rotate.rotate", "hr.rotate.rotate.rotate", "isinstance", "lr.rotate.rotate.rotate", "hr.rotate.rotate.rotate", "TypeError", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "angle", "=", "random", ".", "choice", "(", "self", ".", "ROTATE_ANGLE", ")", "\n", "if", "isinstance", "(", "lr", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "                ", "lr", "=", "lr", ".", "rotate", "(", "angle", ")", "\n", "hr", "=", "hr", ".", "rotate", "(", "angle", ")", "\n", "", "elif", "isinstance", "(", "lr", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "lr", ",", "hr", "=", "Image", ".", "fromarray", "(", "lr", ")", ",", "Image", ".", "fromarray", "(", "hr", ")", "\n", "lr", "=", "lr", ".", "rotate", "(", "angle", ")", "\n", "hr", "=", "hr", ".", "rotate", "(", "angle", ")", "\n", "lr", ",", "hr", "=", "np", ".", "asarray", "(", "lr", ")", ",", "np", ".", "asarray", "(", "hr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"data must be pil or array!!\"", ")", "\n", "", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomGaussianBlur.__init__": [[128, 133], ["object.__init__", "torchvision.GaussianBlur", "torchvision.GaussianBlur"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.2", ",", "kernel_size", "=", "5", ")", ":", "\n", "        ", "super", "(", "RandomGaussianBlur", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "gaussian_blur", "=", "transforms", ".", "GaussianBlur", "(", "kernel_size", ")", "\n", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomGaussianBlur.__call__": [[134, 138], ["random.random", "augments.RandomGaussianBlur.gaussian_blur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "lr", "=", "self", ".", "gaussian_blur", "(", "lr", ")", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomGamma.__init__": [[143, 146], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "gamma_prob", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomGamma.__call__": [[147, 152], ["random.random", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "lr", "=", "transforms", ".", "functional", ".", "adjust_gamma", "(", "lr", ",", "self", ".", "gamma_prob", ")", "\n", "hr", "=", "transforms", ".", "functional", ".", "adjust_gamma", "(", "hr", ",", "self", ".", "gamma_prob", ")", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomSaturation.__init__": [[157, 159], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomSaturation.__call__": [[160, 166], ["random.random", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma", "numpy.random.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "sat_factor", "=", "1", "+", "(", "0.2", "-", "0.4", "*", "np", ".", "random", ".", "rand", "(", ")", ")", "\n", "lr", "=", "transforms", ".", "functional", ".", "adjust_gamma", "(", "lr", ",", "sat_factor", ")", "\n", "hr", "=", "transforms", ".", "functional", ".", "adjust_gamma", "(", "hr", ",", "sat_factor", ")", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.ToTensor.__init__": [[171, 173], ["torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.ToTensor.__call__": [[174, 177], ["augments.ToTensor.to_tensor", "augments.ToTensor.to_tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "lr", ",", "hr", "=", "self", ".", "to_tensor", "(", "lr", ")", ",", "self", ".", "to_tensor", "(", "hr", ")", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.ToTensor2.__init__": [[182, 184], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ToTensor2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.ToTensor2.__call__": [[185, 200], ["type", "torch.as_tensor", "torch.as_tensor", "numpy.array", "torch.as_tensor", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.array", "torch.as_tensor", "lr.transpose", "hr.transpose", "numpy.array.transpose", "numpy.ascontiguousarray", "numpy.array.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "\n", "        ", "if", "type", "(", "lr", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "lr_tensor", "=", "torch", ".", "as_tensor", "(", "np", ".", "ascontiguousarray", "(", "lr", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "hr_tensor", "=", "torch", ".", "as_tensor", "(", "np", ".", "ascontiguousarray", "(", "hr", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "else", ":", "\n", "            ", "lr_array", "=", "np", ".", "array", "(", "lr", ")", "\n", "lr_tensor", "=", "torch", ".", "as_tensor", "(", "np", ".", "ascontiguousarray", "(", "lr_array", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "if", "hr", "is", "not", "None", ":", "\n", "                ", "hr_array", "=", "np", ".", "array", "(", "hr", ")", "\n", "hr_tensor", "=", "torch", ".", "as_tensor", "(", "np", ".", "ascontiguousarray", "(", "hr_array", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "return", "lr_tensor", ",", "hr_tensor", "\n", "", "else", ":", "\n", "                ", "return", "lr_tensor", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomRGB.__init__": [[205, 213], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "channel_range", "=", "[", "\n", "[", "0", ",", "2", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "2", "]", ",", "\n", "[", "1", ",", "2", ",", "0", "]", ",", "\n", "[", "2", ",", "0", ",", "1", "]", ",", "\n", "[", "2", ",", "1", ",", "0", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.RandomRGB.__call__": [[215, 242], ["random.random", "random.choice", "isinstance", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.array", "numpy.array", "isinstance", "TypeError"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "\"\"\"Random Permute the R,G,B\n        Args:\n            lr: pil or ndarray\n            hr: pil or ndarray\n        Returns:\n            PIL image.\n        \"\"\"", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "random_permute", "=", "random", ".", "choice", "(", "self", ".", "channel_range", ")", "\n", "\n", "if", "isinstance", "(", "lr", ",", "Image", ".", "Image", ")", ":", "\n", "                ", "lr", "=", "np", ".", "array", "(", "lr", ")", "\n", "hr", "=", "np", ".", "array", "(", "hr", ")", "\n", "", "elif", "isinstance", "(", "lr", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "lr", "=", "lr", "\n", "hr", "=", "hr", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"input must be PIL or np.ndarray format!!!\"", ")", "\n", "\n", "", "lr", "=", "lr", "[", ":", ",", ":", ",", "random_permute", "]", "\n", "hr", "=", "hr", "[", ":", ",", ":", ",", "random_permute", "]", "\n", "\n", "lr", "=", "Image", ".", "fromarray", "(", "lr", ")", "\n", "hr", "=", "Image", ".", "fromarray", "(", "hr", ")", "\n", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.Blend.__init__": [[247, 251], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ",", "alpha", "=", "0.6", ")", ":", "\n", "        ", "super", "(", "Blend", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.Blend.__call__": [[252, 272], ["torch.empty().uniform_", "torch.empty().uniform_.repeat", "torch.empty().uniform_.repeat", "numpy.random.uniform", "numpy.random.random", "isinstance", "TypeError", "torch.empty"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            lr: torch.Tensor\n            hr: torch.Tensor\n        Returns:\n            torch.Tensor\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "prob", "and", "self", ".", "alpha", ">", "0", ":", "\n", "            ", "if", "not", "isinstance", "(", "lr", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"Input must be the tensor!!!!\"", ")", "\n", "", "c", "=", "torch", ".", "empty", "(", "(", "lr", ".", "shape", "[", "0", "]", ",", "3", ",", "1", ",", "1", ")", ",", "device", "=", "lr", ".", "device", ")", ".", "uniform_", "(", "0", ",", "255", ")", "\n", "rlr", "=", "c", ".", "repeat", "(", "(", "1", ",", "1", ",", "lr", ".", "shape", "[", "2", "]", ",", "lr", ".", "shape", "[", "3", "]", ")", ")", "\n", "rhr", "=", "c", ".", "repeat", "(", "(", "1", ",", "1", ",", "hr", ".", "shape", "[", "2", "]", ",", "hr", ".", "shape", "[", "3", "]", ")", ")", "\n", "\n", "v", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "alpha", ",", "1", ")", "\n", "lr", "=", "v", "*", "lr", "+", "(", "1", "-", "v", ")", "*", "rlr", "\n", "hr", "=", "v", "*", "hr", "+", "(", "1", "-", "v", ")", "*", "rhr", "\n", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.MixUp.__init__": [[277, 280], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.MixUp.__call__": [[281, 299], ["numpy.random.beta", "torch.randperm().to", "numpy.random.random", "isinstance", "TypeError", "torch.randperm"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            lr: torch.tensor\n            hr: torch.tensor\n        Returns:\n            torch.tensor\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "prob", "and", "self", ".", "beta", ">", "0.0", ":", "\n", "            ", "if", "not", "isinstance", "(", "lr", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"Input must be the tensor!!!!\"", ")", "\n", "\n", "", "v", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "beta", ",", "self", ".", "beta", ")", "\n", "r_index", "=", "torch", ".", "randperm", "(", "lr", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "lr", ".", "device", ")", "\n", "\n", "lr", "=", "v", "*", "lr", "+", "(", "1", "-", "v", ")", "*", "lr", "[", "r_index", "]", "\n", "hr", "=", "v", "*", "hr", "+", "(", "1", "-", "v", ")", "*", "hr", "[", "r_index", "]", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.CutBlur.__init__": [[304, 308], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ",", "prob", "=", "1.0", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "CutBlur", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.CutBlur.__call__": [[309, 339], ["min", "numpy.random.randint", "numpy.random.randint", "numpy.random.random", "isinstance", "TypeError", "numpy.int", "numpy.int", "numpy.random.random", "lr.clone", "numpy.random.randn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            lr : torch.tensor\n            hr : torch.tensor\n        Returns:\n            torch.tensor\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "prob", "and", "self", ".", "beta", ">", "0.0", ":", "\n", "            ", "if", "not", "isinstance", "(", "lr", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"Input must be the tensor!!!!\"", ")", "\n", "\n", "", "cut_ratio", "=", "np", ".", "random", ".", "randn", "(", ")", "*", "0.01", "+", "self", ".", "beta", "\n", "cut_ratio", "=", "min", "(", "cut_ratio", ",", "0.25", ")", "# fix the 25% crop size", "\n", "\n", "h", ",", "w", "=", "lr", ".", "shape", "[", "2", "]", ",", "lr", ".", "shape", "[", "3", "]", "\n", "ch", ",", "cw", "=", "np", ".", "int", "(", "h", "*", "cut_ratio", ")", ",", "np", ".", "int", "(", "w", "*", "cut_ratio", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "ch", "+", "1", ")", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "cw", "+", "1", ")", "\n", "\n", "# insdie", "\n", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                ", "hr", "[", "...", ",", "cy", ":", "cy", "+", "ch", ",", "cx", ":", "cx", "+", "cw", "]", "=", "lr", "[", "...", ",", "cy", ":", "cy", "+", "ch", ",", "cx", ":", "cx", "+", "cw", "]", "\n", "# outside", "\n", "", "else", ":", "\n", "                ", "hr_aug", "=", "lr", ".", "clone", "(", ")", "\n", "hr_aug", "[", "...", ",", "cy", ":", "cy", "+", "ch", ",", "cx", ":", "cx", "+", "cw", "]", "=", "hr", "[", "...", ",", "cy", ":", "cy", "+", "ch", ",", "cx", ":", "cx", "+", "cw", "]", "\n", "hr", "=", "hr_aug", "\n", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.CutMix.__init__": [[344, 347], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.CutMix._cutmix": [[348, 371], ["min", "numpy.random.randint", "numpy.random.randint", "torch.randperm().to", "numpy.int", "numpy.int", "numpy.random.randn", "torch.randperm"], "methods", ["None"], ["", "def", "_cutmix", "(", "self", ",", "image", ")", ":", "\n", "        ", "cut_ratio", "=", "np", ".", "random", ".", "randn", "(", ")", "*", "0.01", "+", "self", ".", "beta", "\n", "cut_ratio", "=", "min", "(", "cut_ratio", ",", "0.25", ")", "# fix the 25% crop size", "\n", "\n", "h", ",", "w", "=", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "3", "]", "\n", "ch", ",", "cw", "=", "np", ".", "int", "(", "h", "*", "cut_ratio", ")", ",", "np", ".", "int", "(", "w", "*", "cut_ratio", ")", "\n", "\n", "fcy", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "ch", "+", "1", ")", "\n", "fcx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "cw", "+", "1", ")", "\n", "tcy", ",", "tcx", "=", "fcy", ",", "fcx", "\n", "rindex", "=", "torch", ".", "randperm", "(", "image", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "image", ".", "device", ")", "\n", "\n", "info", "=", "{", "\n", "\"rindex\"", ":", "rindex", ",", "\n", "\"ch\"", ":", "ch", ",", "\n", "\"cw\"", ":", "cw", ",", "\n", "\"tcy\"", ":", "tcy", ",", "\n", "\"tcx\"", ":", "tcx", ",", "\n", "\"fcy\"", ":", "fcy", ",", "\n", "\"fcx\"", ":", "fcx", ",", "\n", "}", "\n", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.CutMix.__call__": [[372, 392], ["augments.CutMix._cutmix", "numpy.random.random", "isinstance", "TypeError"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.CutMix._cutmix"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            lr : torch.tensor\n            hr : torch.tensor\n        Returns:\n            torch.tensor\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "prob", "and", "self", ".", "beta", ">", "0.0", ":", "\n", "            ", "if", "not", "isinstance", "(", "lr", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"Input must be the tensor!!!!\"", ")", "\n", "\n", "", "c", "=", "self", ".", "_cutmix", "(", "lr", ")", "\n", "rindex", ",", "ch", ",", "cw", "=", "c", "[", "\"rindex\"", "]", ",", "c", "[", "\"ch\"", "]", ",", "c", "[", "\"cw\"", "]", "\n", "tcy", ",", "tcx", ",", "fcy", ",", "fcx", "=", "c", "[", "\"tcy\"", "]", ",", "c", "[", "\"tcx\"", "]", ",", "c", "[", "\"fcy\"", "]", ",", "c", "[", "\"fcx\"", "]", "\n", "\n", "lr", "[", "...", ",", "tcy", ":", "tcy", "+", "ch", ",", "tcx", ":", "tcx", "+", "cw", "]", "=", "lr", "[", "rindex", ",", ":", ",", "fcy", ":", "fcy", "+", "ch", ",", "fcx", ":", "fcx", "+", "cw", "]", "\n", "hr", "[", "...", ",", "tcy", ":", "tcy", "+", "ch", ",", "tcx", ":", "tcx", "+", "cw", "]", "=", "hr", "[", "rindex", ",", ":", ",", "fcy", ":", "fcy", "+", "ch", ",", "fcx", ":", "fcx", "+", "cw", "]", "\n", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.Normalize.__init__": [[395, 399], ["torchvision.Normalize", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize", "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.Normalize.__call__": [[400, 403], ["augments.Normalize.normalize", "augments.Normalize.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "lr", ",", "hr", "=", "self", ".", "normalize", "(", "lr", ")", ",", "self", ".", "normalize", "(", "hr", ")", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.DeNormalize.__init__": [[406, 409], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.DeNormalize._denormalize": [[410, 428], ["torch.tensor", "torch.tensor", "input.clone", "len", "torch.add.mul_().add_", "len", "torch.add", "torch.add.mul_", "torch.mul"], "methods", ["None"], ["", "def", "_denormalize", "(", "self", ",", "input", ",", "inplace", "=", "False", ")", ":", "\n", "\n", "        ", "if", "inplace", ":", "\n", "            ", "ret", "=", "input", "\n", "", "else", ":", "\n", "            ", "ret", "=", "input", ".", "clone", "(", ")", "\n", "\n", "", "mean", "=", "torch", ".", "tensor", "(", "self", ".", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "self", ".", "std", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "if", "len", "(", "input", ".", "shape", ")", "==", "4", ":", "\n", "            ", "ret", ".", "mul_", "(", "std", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", ".", "add_", "(", "mean", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "", "elif", "len", "(", "input", ".", "shape", ")", "==", "3", ":", "\n", "            ", "ret", "=", "torch", ".", "add", "(", "torch", ".", "mul", "(", "ret", ",", "std", "[", ":", ",", "None", ",", "None", "]", ")", ",", "mean", "[", ":", ",", "None", ",", "None", "]", ")", "\n", "\n", "# ret.mut_(std[:, None, None]).add_(mean[:, None, None])", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments.DeNormalize.__call__": [[429, 432], ["augments.DeNormalize._denormalize"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.DeNormalize._denormalize"], ["", "def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "        ", "images", "=", "self", ".", "_denormalize", "(", "images", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.Compose.__init__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.Compose.__call__": [[22, 27], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "if", "t", "is", "not", "None", ":", "\n", "                ", "lr", ",", "hr", "=", "t", "(", "lr", ",", "hr", ")", "\n", "", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomCrop.__init__": [[30, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ":", "tuple", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomCrop.__call__": [[33, 53], ["random.choice", "random.choice", "isinstance", "list", "list", "lr.crop.crop.crop", "hr.crop.crop.crop", "isinstance", "range", "range", "lr.crop.crop.crop", "hr.crop.crop.crop", "TypeError", "PIL.Image.fromarray", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "w", ",", "h", "=", "lr", ".", "size", "[", "0", "]", ",", "lr", ".", "size", "[", "1", "]", "\n", "x1", "=", "random", ".", "choice", "(", "list", "(", "range", "(", "w", "-", "self", ".", "crop_size", "[", "0", "]", ")", ")", ")", "\n", "y1", "=", "random", ".", "choice", "(", "list", "(", "range", "(", "h", "-", "self", ".", "crop_size", "[", "1", "]", ")", ")", ")", "\n", "x2", "=", "x1", "+", "self", ".", "crop_size", "[", "0", "]", "\n", "y2", "=", "y1", "+", "self", ".", "crop_size", "[", "1", "]", "\n", "\n", "bbox", "=", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "\n", "if", "isinstance", "(", "lr", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "lr", "=", "lr", ".", "crop", "(", "bbox", ")", "\n", "hr", "=", "hr", ".", "crop", "(", "bbox", ")", "\n", "", "elif", "isinstance", "(", "lr", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "lr", ",", "hr", "=", "Image", ".", "fromarray", "(", "lr", ")", ",", "Image", ".", "fromarray", "(", "hr", ")", "\n", "lr", "=", "lr", ".", "crop", "(", "bbox", ")", "\n", "hr", "=", "hr", ".", "crop", "(", "bbox", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"data must be pil or array!!\"", ")", "\n", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.CenterCrop.__init__": [[56, 58], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ":", "tuple", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.CenterCrop.__call__": [[59, 64], ["torchvision.center_crop", "torchvision.center_crop", "torchvision.center_crop", "torchvision.center_crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "lr", "=", "F", ".", "center_crop", "(", "lr", ",", "self", ".", "crop_size", ")", "\n", "hr", "=", "F", ".", "center_crop", "(", "hr", ",", "self", ".", "crop_size", ")", "\n", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomHorizonFlip.__init__": [[67, 69], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "proba", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "proba", "=", "proba", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomHorizonFlip.__call__": [[70, 83], ["random.random", "isinstance", "lr.transpose.transpose.transpose", "hr.transpose.transpose.transpose", "isinstance", "lr.transpose.transpose.transpose", "hr.transpose.transpose.transpose", "TypeError", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "proba", ":", "\n", "            ", "if", "isinstance", "(", "lr", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "                ", "lr", "=", "lr", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "hr", "=", "hr", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "elif", "isinstance", "(", "lr", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "lr", ",", "hr", "=", "Image", ".", "fromarray", "(", "lr", ")", ",", "Image", ".", "fromarray", "(", "hr", ")", "\n", "lr", "=", "lr", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "hr", "=", "hr", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "lr", ",", "hr", "=", "np", ".", "asarray", "(", "lr", ")", ",", "np", ".", "asarray", "(", "hr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"data must be pil or array!!\"", ")", "\n", "", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomVerticalFlip.__init__": [[86, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "proba", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "proba", "=", "proba", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomVerticalFlip.__call__": [[89, 102], ["random.random", "isinstance", "lr.transpose.transpose.transpose", "hr.transpose.transpose.transpose", "isinstance", "lr.transpose.transpose.transpose", "hr.transpose.transpose.transpose", "TypeError", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "proba", ":", "\n", "            ", "if", "isinstance", "(", "lr", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "                ", "lr", "=", "lr", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "hr", "=", "hr", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "elif", "isinstance", "(", "lr", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "lr", ",", "hr", "=", "Image", ".", "fromarray", "(", "lr", ")", ",", "Image", ".", "fromarray", "(", "hr", ")", "\n", "lr", "=", "lr", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "hr", "=", "hr", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "lr", ",", "hr", "=", "np", ".", "asarray", "(", "lr", ")", ",", "np", ".", "asarray", "(", "hr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"data must be pil or array!!\"", ")", "\n", "", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomRotate.__init__": [[105, 108], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.3", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "ROTATE_ANGLE", "=", "[", "90", ",", "180", ",", "270", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomRotate.__call__": [[109, 123], ["random.random", "random.choice", "isinstance", "lr.rotate.rotate.rotate", "hr.rotate.rotate.rotate", "isinstance", "lr.rotate.rotate.rotate", "hr.rotate.rotate.rotate", "TypeError", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "angle", "=", "random", ".", "choice", "(", "self", ".", "ROTATE_ANGLE", ")", "\n", "if", "isinstance", "(", "lr", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "                ", "lr", "=", "lr", ".", "rotate", "(", "angle", ")", "\n", "hr", "=", "hr", ".", "rotate", "(", "angle", ")", "\n", "", "elif", "isinstance", "(", "lr", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "lr", ",", "hr", "=", "Image", ".", "fromarray", "(", "lr", ")", ",", "Image", ".", "fromarray", "(", "hr", ")", "\n", "lr", "=", "lr", ".", "rotate", "(", "angle", ")", "\n", "hr", "=", "hr", ".", "rotate", "(", "angle", ")", "\n", "lr", ",", "hr", "=", "np", ".", "asarray", "(", "lr", ")", ",", "np", ".", "asarray", "(", "hr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"data must be pil or array!!\"", ")", "\n", "", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomGaussianBlur.__init__": [[128, 133], ["object.__init__", "torchvision.GaussianBlur", "torchvision.GaussianBlur"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.2", ",", "kernel_size", "=", "5", ")", ":", "\n", "        ", "super", "(", "RandomGaussianBlur", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "gaussian_blur", "=", "transforms", ".", "GaussianBlur", "(", "kernel_size", ")", "\n", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomGaussianBlur.__call__": [[134, 138], ["random.random", "augments2.RandomGaussianBlur.gaussian_blur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "lr", "=", "self", ".", "gaussian_blur", "(", "lr", ")", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomGamma.__init__": [[143, 146], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "gamma_prob", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomGamma.__call__": [[147, 152], ["random.random", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "lr", "=", "transforms", ".", "functional", ".", "adjust_gamma", "(", "lr", ",", "self", ".", "gamma_prob", ")", "\n", "hr", "=", "transforms", ".", "functional", ".", "adjust_gamma", "(", "hr", ",", "self", ".", "gamma_prob", ")", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomSaturation.__init__": [[157, 159], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomSaturation.__call__": [[160, 166], ["random.random", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma", "torchvision.functional.adjust_gamma", "numpy.random.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "sat_factor", "=", "1", "+", "(", "0.2", "-", "0.4", "*", "np", ".", "random", ".", "rand", "(", ")", ")", "\n", "lr", "=", "transforms", ".", "functional", ".", "adjust_gamma", "(", "lr", ",", "sat_factor", ")", "\n", "hr", "=", "transforms", ".", "functional", ".", "adjust_gamma", "(", "hr", ",", "sat_factor", ")", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.ToTensor.__init__": [[171, 173], ["torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.ToTensor.__call__": [[174, 177], ["augments2.ToTensor.to_tensor", "augments2.ToTensor.to_tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "lr", ",", "hr", "=", "self", ".", "to_tensor", "(", "lr", ")", ",", "self", ".", "to_tensor", "(", "hr", ")", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.ToTensor2.__init__": [[182, 184], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ToTensor2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.ToTensor2.__call__": [[185, 197], ["type", "torch.as_tensor", "torch.as_tensor", "numpy.array", "numpy.array", "torch.as_tensor", "torch.as_tensor", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "lr.transpose", "hr.transpose", "numpy.array.transpose", "numpy.array.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "\n", "        ", "if", "type", "(", "lr", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "lr_tensor", "=", "torch", ".", "as_tensor", "(", "np", ".", "ascontiguousarray", "(", "lr", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "hr_tensor", "=", "torch", ".", "as_tensor", "(", "np", ".", "ascontiguousarray", "(", "hr", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "else", ":", "\n", "            ", "lr_array", "=", "np", ".", "array", "(", "lr", ")", "\n", "hr_array", "=", "np", ".", "array", "(", "hr", ")", "\n", "lr_tensor", "=", "torch", ".", "as_tensor", "(", "np", ".", "ascontiguousarray", "(", "lr_array", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "hr_tensor", "=", "torch", ".", "as_tensor", "(", "np", ".", "ascontiguousarray", "(", "hr_array", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "return", "lr_tensor", ",", "hr_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.Resize.__init__": [[202, 205], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ",", "resize_size", ")", ":", "\n", "        ", "super", "(", "Resize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resize_size", "=", "resize_size", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.Resize.__call__": [[206, 210], ["lr.resize.resize.resize", "hr.resize.resize.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "lr", "=", "lr", ".", "resize", "(", "self", ".", "resize_size", ",", "Image", ".", "BILINEAR", ")", "\n", "hr", "=", "hr", ".", "resize", "(", "self", ".", "resize_size", ",", "Image", ".", "BILINEAR", ")", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.Padding.__init__": [[215, 219], ["torchvision.Pad", "torchvision.Pad"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "padding_size", ",", "mode", "=", "\"symmetric\"", ")", ":", "\n", "        ", "self", ".", "padding_size", "=", "padding_size", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "worker", "=", "transforms", ".", "Pad", "(", "self", ".", "padding_size", ",", "padding_mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.Padding.__call__": [[220, 224], ["augments2.Padding.worker", "augments2.Padding.worker"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.utils.extract_subimages.worker", "home.repos.pwc.inspect_result.flyegle_sdwnet.utils.extract_subimages.worker"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "lr_pad", "=", "self", ".", "worker", "(", "lr", ")", "\n", "hr_pad", "=", "self", ".", "worker", "(", "hr", ")", "\n", "return", "lr_pad", ",", "hr_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.ResizeRandomCrop.__init__": [[229, 233], ["object.__init__", "augments2.RandomCrop"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ",", "crop_size", ")", ":", "\n", "        ", "super", "(", "ResizeRandomCrop", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "randomcrop", "=", "RandomCrop", "(", "self", ".", "crop_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.ResizeRandomCrop.__call__": [[234, 243], ["min", "augments2.ResizeRandomCrop.randomcrop", "augments2.Resize", "Resize."], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "size", "=", "lr", ".", "size", "\n", "short_size", "=", "min", "(", "[", "size", "[", "0", "]", ",", "size", "[", "1", "]", "]", ")", "\n", "if", "short_size", "<=", "self", ".", "crop_size", "[", "0", "]", ":", "\n", "            ", "resize_size", "=", "(", "size", "[", "0", "]", "+", "self", ".", "crop_size", "[", "0", "]", ",", "size", "[", "1", "]", "+", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "resize_func", "=", "Resize", "(", "resize_size", ")", "\n", "lr", ",", "hr", "=", "resize_func", "(", "lr", ",", "hr", ")", "\n", "", "lr", ",", "hr", "=", "self", ".", "randomcrop", "(", "lr", ",", "hr", ")", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.PaddingRandomCrop.__init__": [[248, 252], ["object.__init__", "augments2.RandomCrop"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ",", "crop_size", ")", ":", "\n", "        ", "super", "(", "PaddingRandomCrop", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "randomcrop", "=", "RandomCrop", "(", "self", ".", "crop_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.PaddingRandomCrop.__call__": [[253, 265], ["min", "augments2.PaddingRandomCrop.randomcrop", "augments2.Padding", "Padding."], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "size", "=", "lr", ".", "size", "\n", "short_size", "=", "min", "(", "[", "size", "[", "0", "]", ",", "size", "[", "1", "]", "]", ")", "\n", "w", ",", "h", "=", "self", ".", "crop_size", "\n", "if", "short_size", "<=", "w", ":", "\n", "            ", "assert", "w", "%", "2", "==", "0", "and", "h", "%", "2", "==", "0", ",", "\"crop size must be divided by 2!!!\"", "\n", "l", ",", "t", ",", "r", ",", "b", "=", "w", "//", "2", ",", "h", "//", "2", ",", "w", "//", "2", ",", "h", "//", "2", "\n", "padding_size", "=", "(", "l", ",", "t", ",", "r", ",", "b", ")", "\n", "padding_func", "=", "Padding", "(", "padding_size", ")", "\n", "lr", ",", "hr", "=", "padding_func", "(", "lr", ",", "hr", ")", "\n", "", "lr", ",", "hr", "=", "self", ".", "randomcrop", "(", "lr", ",", "hr", ")", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomRGB.__init__": [[270, 278], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "channel_range", "=", "[", "\n", "[", "0", ",", "2", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "2", "]", ",", "\n", "[", "1", ",", "2", ",", "0", "]", ",", "\n", "[", "2", ",", "0", ",", "1", "]", ",", "\n", "[", "2", ",", "1", ",", "0", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.RandomRGB.__call__": [[280, 307], ["random.random", "random.choice", "isinstance", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.array", "numpy.array", "isinstance", "TypeError"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "\"\"\"Random Permute the R,G,B\n        Args:\n            lr: pil or ndarray\n            hr: pil or ndarray\n        Returns:\n            PIL image.\n        \"\"\"", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "random_permute", "=", "random", ".", "choice", "(", "self", ".", "channel_range", ")", "\n", "\n", "if", "isinstance", "(", "lr", ",", "Image", ".", "Image", ")", ":", "\n", "                ", "lr", "=", "np", ".", "array", "(", "lr", ")", "\n", "hr", "=", "np", ".", "array", "(", "hr", ")", "\n", "", "elif", "isinstance", "(", "lr", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "lr", "=", "lr", "\n", "hr", "=", "hr", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"input must be PIL or np.ndarray format!!!\"", ")", "\n", "\n", "", "lr", "=", "lr", "[", ":", ",", ":", ",", "random_permute", "]", "\n", "hr", "=", "hr", "[", ":", ",", ":", ",", "random_permute", "]", "\n", "\n", "lr", "=", "Image", ".", "fromarray", "(", "lr", ")", "\n", "hr", "=", "Image", ".", "fromarray", "(", "hr", ")", "\n", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.Blend.__init__": [[312, 316], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ",", "alpha", "=", "0.6", ")", ":", "\n", "        ", "super", "(", "Blend", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.Blend.__call__": [[317, 337], ["torch.empty().uniform_", "torch.empty().uniform_.repeat", "torch.empty().uniform_.repeat", "numpy.random.uniform", "numpy.random.random", "isinstance", "TypeError", "torch.empty"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            lr: torch.Tensor\n            hr: torch.Tensor\n        Returns:\n            torch.Tensor\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "prob", "and", "self", ".", "alpha", ">", "0", ":", "\n", "            ", "if", "not", "isinstance", "(", "lr", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"Input must be the tensor!!!!\"", ")", "\n", "", "c", "=", "torch", ".", "empty", "(", "(", "lr", ".", "shape", "[", "0", "]", ",", "3", ",", "1", ",", "1", ")", ",", "device", "=", "lr", ".", "device", ")", ".", "uniform_", "(", "0", ",", "255", ")", "\n", "rlr", "=", "c", ".", "repeat", "(", "(", "1", ",", "1", ",", "lr", ".", "shape", "[", "2", "]", ",", "lr", ".", "shape", "[", "3", "]", ")", ")", "\n", "rhr", "=", "c", ".", "repeat", "(", "(", "1", ",", "1", ",", "hr", ".", "shape", "[", "2", "]", ",", "hr", ".", "shape", "[", "3", "]", ")", ")", "\n", "\n", "v", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "alpha", ",", "1", ")", "\n", "lr", "=", "v", "*", "lr", "+", "(", "1", "-", "v", ")", "*", "rlr", "\n", "hr", "=", "v", "*", "hr", "+", "(", "1", "-", "v", ")", "*", "rhr", "\n", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.MixUp.__init__": [[342, 345], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.MixUp.__call__": [[346, 364], ["numpy.random.beta", "torch.randperm().to", "numpy.random.random", "isinstance", "TypeError", "torch.randperm"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            lr: torch.tensor\n            hr: torch.tensor\n        Returns:\n            torch.tensor\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "prob", "and", "self", ".", "beta", ">", "0.0", ":", "\n", "            ", "if", "not", "isinstance", "(", "lr", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"Input must be the tensor!!!!\"", ")", "\n", "\n", "", "v", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "beta", ",", "self", ".", "beta", ")", "\n", "r_index", "=", "torch", ".", "randperm", "(", "lr", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "lr", ".", "device", ")", "\n", "\n", "lr", "=", "v", "*", "lr", "+", "(", "1", "-", "v", ")", "*", "lr", "[", "r_index", "]", "\n", "hr", "=", "v", "*", "hr", "+", "(", "1", "-", "v", ")", "*", "hr", "[", "r_index", "]", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.CutBlur.__init__": [[369, 373], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ",", "prob", "=", "1.0", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "CutBlur", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.CutBlur.__call__": [[374, 404], ["min", "numpy.random.randint", "numpy.random.randint", "numpy.random.random", "isinstance", "TypeError", "numpy.int", "numpy.int", "numpy.random.random", "lr.clone", "numpy.random.randn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            lr : torch.tensor\n            hr : torch.tensor\n        Returns:\n            torch.tensor\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "prob", "and", "self", ".", "beta", ">", "0.0", ":", "\n", "            ", "if", "not", "isinstance", "(", "lr", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"Input must be the tensor!!!!\"", ")", "\n", "\n", "", "cut_ratio", "=", "np", ".", "random", ".", "randn", "(", ")", "*", "0.01", "+", "self", ".", "beta", "\n", "cut_ratio", "=", "min", "(", "cut_ratio", ",", "0.25", ")", "# fix the 25% crop size", "\n", "\n", "h", ",", "w", "=", "lr", ".", "shape", "[", "2", "]", ",", "lr", ".", "shape", "[", "3", "]", "\n", "ch", ",", "cw", "=", "np", ".", "int", "(", "h", "*", "cut_ratio", ")", ",", "np", ".", "int", "(", "w", "*", "cut_ratio", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "ch", "+", "1", ")", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "cw", "+", "1", ")", "\n", "\n", "# insdie", "\n", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                ", "hr", "[", "...", ",", "cy", ":", "cy", "+", "ch", ",", "cx", ":", "cx", "+", "cw", "]", "=", "lr", "[", "...", ",", "cy", ":", "cy", "+", "ch", ",", "cx", ":", "cx", "+", "cw", "]", "\n", "# outside", "\n", "", "else", ":", "\n", "                ", "hr_aug", "=", "lr", ".", "clone", "(", ")", "\n", "hr_aug", "[", "...", ",", "cy", ":", "cy", "+", "ch", ",", "cx", ":", "cx", "+", "cw", "]", "=", "hr", "[", "...", ",", "cy", ":", "cy", "+", "ch", ",", "cx", ":", "cx", "+", "cw", "]", "\n", "hr", "=", "hr_aug", "\n", "\n", "", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.CutMix.__init__": [[409, 412], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.CutMix._cutmix": [[413, 436], ["min", "numpy.random.randint", "numpy.random.randint", "torch.randperm().to", "numpy.int", "numpy.int", "numpy.random.randn", "torch.randperm"], "methods", ["None"], ["", "def", "_cutmix", "(", "self", ",", "image", ")", ":", "\n", "        ", "cut_ratio", "=", "np", ".", "random", ".", "randn", "(", ")", "*", "0.01", "+", "self", ".", "beta", "\n", "cut_ratio", "=", "min", "(", "cut_ratio", ",", "0.25", ")", "# fix the 25% crop size", "\n", "\n", "h", ",", "w", "=", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "3", "]", "\n", "ch", ",", "cw", "=", "np", ".", "int", "(", "h", "*", "cut_ratio", ")", ",", "np", ".", "int", "(", "w", "*", "cut_ratio", ")", "\n", "\n", "fcy", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "ch", "+", "1", ")", "\n", "fcx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "cw", "+", "1", ")", "\n", "tcy", ",", "tcx", "=", "fcy", ",", "fcx", "\n", "rindex", "=", "torch", ".", "randperm", "(", "image", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "image", ".", "device", ")", "\n", "\n", "info", "=", "{", "\n", "\"rindex\"", ":", "rindex", ",", "\n", "\"ch\"", ":", "ch", ",", "\n", "\"cw\"", ":", "cw", ",", "\n", "\"tcy\"", ":", "tcy", ",", "\n", "\"tcx\"", ":", "tcx", ",", "\n", "\"fcy\"", ":", "fcy", ",", "\n", "\"fcx\"", ":", "fcx", ",", "\n", "}", "\n", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.CutMix.__call__": [[437, 457], ["augments2.CutMix._cutmix", "numpy.random.random", "isinstance", "TypeError"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.CutMix._cutmix"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            lr : torch.tensor\n            hr : torch.tensor\n        Returns:\n            torch.tensor\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "prob", "and", "self", ".", "beta", ">", "0.0", ":", "\n", "            ", "if", "not", "isinstance", "(", "lr", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"Input must be the tensor!!!!\"", ")", "\n", "\n", "", "c", "=", "self", ".", "_cutmix", "(", "lr", ")", "\n", "rindex", ",", "ch", ",", "cw", "=", "c", "[", "\"rindex\"", "]", ",", "c", "[", "\"ch\"", "]", ",", "c", "[", "\"cw\"", "]", "\n", "tcy", ",", "tcx", ",", "fcy", ",", "fcx", "=", "c", "[", "\"tcy\"", "]", ",", "c", "[", "\"tcx\"", "]", ",", "c", "[", "\"fcy\"", "]", ",", "c", "[", "\"fcx\"", "]", "\n", "\n", "lr", "[", "...", ",", "tcy", ":", "tcy", "+", "ch", ",", "tcx", ":", "tcx", "+", "cw", "]", "=", "lr", "[", "rindex", ",", ":", ",", "fcy", ":", "fcy", "+", "ch", ",", "fcx", ":", "fcx", "+", "cw", "]", "\n", "hr", "[", "...", ",", "tcy", ":", "tcy", "+", "ch", ",", "tcx", ":", "tcx", "+", "cw", "]", "=", "hr", "[", "rindex", ",", ":", ",", "fcy", ":", "fcy", "+", "ch", ",", "fcx", ":", "fcx", "+", "cw", "]", "\n", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.Normalize.__init__": [[460, 464], ["torchvision.Normalize", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize", "home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.Normalize.__call__": [[465, 468], ["augments2.Normalize.normalize", "augments2.Normalize.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lr", ",", "hr", ")", ":", "\n", "        ", "lr", ",", "hr", "=", "self", ".", "normalize", "(", "lr", ")", ",", "self", ".", "normalize", "(", "hr", ")", "\n", "return", "lr", ",", "hr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.DeNormalize.__init__": [[471, 474], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.DeNormalize._denormalize": [[475, 493], ["torch.tensor", "torch.tensor", "input.clone", "len", "torch.add.mul_().add_", "len", "torch.add", "torch.add.mul_", "torch.mul"], "methods", ["None"], ["", "def", "_denormalize", "(", "self", ",", "input", ",", "inplace", "=", "False", ")", ":", "\n", "\n", "        ", "if", "inplace", ":", "\n", "            ", "ret", "=", "input", "\n", "", "else", ":", "\n", "            ", "ret", "=", "input", ".", "clone", "(", ")", "\n", "\n", "", "mean", "=", "torch", ".", "tensor", "(", "self", ".", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "self", ".", "std", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "if", "len", "(", "input", ".", "shape", ")", "==", "4", ":", "\n", "            ", "ret", ".", "mul_", "(", "std", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", ".", "add_", "(", "mean", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "", "elif", "len", "(", "input", ".", "shape", ")", "==", "3", ":", "\n", "            ", "ret", "=", "torch", ".", "add", "(", "torch", ".", "mul", "(", "ret", ",", "std", "[", ":", ",", "None", ",", "None", "]", ")", ",", "mean", "[", ":", ",", "None", ",", "None", "]", ")", "\n", "\n", "# ret.mut_(std[:, None, None]).add_(mean[:, None, None])", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.DeNormalize.__call__": [[494, 497], ["augments2.DeNormalize._denormalize"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.augments2.DeNormalize._denormalize"], ["", "def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "        ", "images", "=", "self", ".", "_denormalize", "(", "images", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.get_cropimage": [[10, 53], ["int", "int", "image.copy", "range", "range", "range", "crop_image_list.append", "crop_image_list.append"], "function", ["None"], ["def", "get_cropimage", "(", "patch_size", ",", "image", ",", "scale", ")", ":", "\n", "    ", "crop_image_list", "=", "[", "]", "\n", "height", ",", "width", "=", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", "\n", "row_step", "=", "patch_size", "[", "0", "]", "//", "scale", "\n", "col_step", "=", "patch_size", "[", "1", "]", "//", "scale", "\n", "\n", "row_interval", "=", "int", "(", "(", "height", "-", "patch_size", "[", "0", "]", ")", "/", "row_step", ")", "\n", "col_interval", "=", "int", "(", "(", "width", "-", "patch_size", "[", "1", "]", ")", "/", "col_step", ")", "\n", "\n", "raw_image", "=", "image", ".", "copy", "(", ")", "\n", "\n", "idx", "=", "0", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "for", "i", "in", "range", "(", "row_interval", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "col_interval", "+", "1", ")", ":", "\n", "            ", "crop_image", "=", "image", "[", "\n", "i", "*", "row_step", ":", "i", "*", "row_step", "+", "patch_size", "[", "0", "]", ",", "\n", "j", "*", "col_step", ":", "j", "*", "col_step", "+", "patch_size", "[", "1", "]", ",", "\n", ":", "\n", "]", "\n", "crop_image_list", ".", "append", "(", "crop_image", ")", "\n", "# cv2.rectangle(raw_image,", "\n", "#                 (j * col_step,i * row_step),", "\n", "#                 (j * col_step + patch_size[1], i * row_step + patch_size[0]),", "\n", "#                 (0,255,255),", "\n", "#                 1", "\n", "#              )", "\n", "# cv2.putText(raw_image, f'{idx}', (j * col_step+10, i * row_step+10), font, 1.0, (255, 255, 255), 2)", "\n", "# cv2.imwrite(f\"/data/remote/dataset/exp/img_{idx}.png\", crop_image, [cv2.IMWRITE_PNG_COMPRESSION, 0])", "\n", "# idx += 1", "\n", "\n", "", "", "for", "i", "in", "range", "(", "row_interval", "+", "1", ")", ":", "\n", "        ", "crop_image", "=", "image", "[", "\n", "i", "*", "row_step", ":", "i", "*", "row_step", "+", "patch_size", "[", "0", "]", ",", "\n", "width", "-", "patch_size", "[", "0", "]", ":", "width", ",", "\n", ":", "\n", "]", "\n", "# cv2.imwrite(f\"/data/remote/dataset/exp/img_{idx}.png\", crop_image, [cv2.IMWRITE_PNG_COMPRESSION, 0])", "\n", "# idx += 1", "\n", "crop_image_list", ".", "append", "(", "crop_image", ")", "\n", "\n", "# cv2.imwrite(\"/data/remote/dataset/exp/img_show.png\", raw_image)", "\n", "", "return", "crop_image_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.get_image_list_lr": [[55, 64], ["os.listdir", "os.path.join", "os.path.join", "os.listdir", "os.path.join", "image_list.append"], "function", ["None"], ["", "def", "get_image_list_lr", "(", "data_folder", ")", ":", "\n", "    ", "image_list", "=", "[", "]", "\n", "for", "image_folder", "in", "os", ".", "listdir", "(", "data_folder", ")", ":", "\n", "        ", "image_folder_path", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "image_folder", ")", "\n", "sub_folder_path", "=", "os", ".", "path", ".", "join", "(", "image_folder_path", ",", "\"blur\"", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "sub_folder_path", ")", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "sub_folder_path", ",", "image", ")", "\n", "image_list", ".", "append", "(", "image_path", ")", "\n", "", "", "return", "image_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.get_image_list_hr": [[65, 74], ["os.listdir", "os.path.join", "os.path.join", "os.listdir", "os.path.join", "image_list.append"], "function", ["None"], ["", "def", "get_image_list_hr", "(", "data_folder", ")", ":", "\n", "    ", "image_list", "=", "[", "]", "\n", "for", "image_folder", "in", "os", ".", "listdir", "(", "data_folder", ")", ":", "\n", "        ", "image_folder_path", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "image_folder", ")", "\n", "sub_folder_path", "=", "os", ".", "path", ".", "join", "(", "image_folder_path", ",", "\"sharp\"", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "sub_folder_path", ")", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "sub_folder_path", ",", "image", ")", "\n", "image_list", ".", "append", "(", "image_path", ")", "\n", "", "", "return", "image_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.make_pair": [[76, 86], ["lr_dict.items", "hr_dict.keys", "pairs_list.append", "[].split", "[].split", "[].split", "[].split", "lr.split", "hr.split", "lr.split", "hr.split"], "function", ["None"], ["", "def", "make_pair", "(", "lr_list", ",", "hr_list", ")", ":", "\n", "    ", "lr_dict", "=", "{", "lr", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "+", "'_'", "+", "lr", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ":", "lr", "for", "lr", "in", "lr_list", "}", "\n", "hr_dict", "=", "{", "hr", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "+", "'_'", "+", "hr", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ":", "hr", "for", "hr", "in", "hr_list", "}", "\n", "\n", "pairs_list", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "lr_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "hr_dict", ".", "keys", "(", ")", ":", "\n", "            ", "pairs_list", ".", "append", "(", "[", "value", ",", "hr_dict", "[", "key", "]", "]", ")", "\n", "\n", "", "", "return", "pairs_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.save_crop": [[88, 93], ["enumerate", "os.path.join", "cv2.imwrite", "str", "[].split", "image_path.split", "image_path.split"], "function", ["None"], ["", "def", "save_crop", "(", "image_path", ",", "crop_image_list", ",", "save_folder", ")", ":", "\n", "    ", "for", "idx", ",", "crop_image", "in", "enumerate", "(", "crop_image_list", ")", ":", "\n", "        ", "image_name", "=", "image_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "+", "'_'", "+", "image_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_'", "+", "str", "(", "idx", "+", "1", ")", "+", "'.png'", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "image_name", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "crop_image", ",", "[", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.process": [[95, 103], ["cv2.imread", "cv2.imread", "process_data.get_cropimage", "process_data.get_cropimage", "process_data.save_crop", "process_data.save_crop"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.get_cropimage", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.get_cropimage", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.save_crop", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.save_crop"], ["", "", "def", "process", "(", "image_list", ")", ":", "\n", "    ", "for", "lr", ",", "hr", "in", "image_list", ":", "\n", "        ", "lr_image", "=", "cv2", ".", "imread", "(", "lr", ")", "\n", "hr_image", "=", "cv2", ".", "imread", "(", "hr", ")", "\n", "lr_crop_image", "=", "get_cropimage", "(", "(", "480", ",", "480", ")", ",", "lr_image", ",", "4", ")", "\n", "hr_crop_image", "=", "get_cropimage", "(", "(", "480", ",", "480", ")", ",", "hr_image", ",", "4", ")", "\n", "save_crop", "(", "lr", ",", "lr_crop_image", ",", "lr_crop_output_folder", ")", "\n", "save_crop", "(", "hr", ",", "hr_crop_image", ",", "hr_crop_output_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.process_mp": [[105, 113], ["cv2.imread", "cv2.imread", "process_data.get_cropimage", "process_data.get_cropimage", "process_data.save_crop", "process_data.save_crop"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.get_cropimage", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.get_cropimage", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.save_crop", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.process_data.save_crop"], ["", "", "def", "process_mp", "(", "data", ")", ":", "\n", "    ", "lr", ",", "hr", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "lr_image", "=", "cv2", ".", "imread", "(", "lr", ")", "\n", "hr_image", "=", "cv2", ".", "imread", "(", "hr", ")", "\n", "lr_crop_image", "=", "get_cropimage", "(", "(", "480", ",", "480", ")", ",", "lr_image", ",", "4", ")", "\n", "hr_crop_image", "=", "get_cropimage", "(", "(", "480", ",", "480", ")", ",", "hr_image", ",", "4", ")", "\n", "save_crop", "(", "lr", ",", "lr_crop_image", ",", "lr_crop_output_folder", ")", "\n", "save_crop", "(", "hr", ",", "hr_crop_image", ",", "hr_crop_output_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.filter_crop_sample.clc_psnr": [[13, 22], ["imageio.imread", "imageio.imread", "skimage.metrics.peak_signal_noise_ratio"], "function", ["None"], ["def", "clc_psnr", "(", "data", ")", ":", "\n", "    ", "lr_image", ",", "hr_image", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "\n", "lr_img", "=", "imageio", ".", "imread", "(", "lr_image", ")", "\n", "hr_img", "=", "imageio", ".", "imread", "(", "hr_image", ")", "\n", "\n", "psnr", "=", "peak_signal_noise_ratio", "(", "lr_img", ",", "hr_img", ")", "\n", "\n", "return", "psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.filter_crop_sample.make_dict": [[24, 31], ["os.path.join", "os.listdir", "[].split", "image.split"], "function", ["None"], ["", "def", "make_dict", "(", "data_folder", ")", ":", "\n", "    ", "image_list", "=", "[", "os", ".", "path", ".", "join", "(", "data_folder", ",", "data", ")", "for", "data", "in", "os", ".", "listdir", "(", "data_folder", ")", "]", "\n", "image_dict", "=", "{", "}", "\n", "for", "image", "in", "image_list", ":", "\n", "        ", "image_name", "=", "image", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "image_dict", "[", "image_name", "]", "=", "image", "\n", "", "return", "image_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.filter_crop_sample.make_pair_list": [[33, 43], ["filter_crop_sample.make_dict", "filter_crop_sample.make_dict", "make_dict.items", "make_dict.keys", "data_paris.append"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.filter_crop_sample.make_dict", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.filter_crop_sample.make_dict"], ["", "def", "make_pair_list", "(", "lr_folder", ",", "hr_folder", ")", ":", "\n", "    ", "lr_dict", "=", "make_dict", "(", "lr_folder", ")", "\n", "hr_dict", "=", "make_dict", "(", "hr_folder", ")", "\n", "\n", "data_paris", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "lr_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "hr_dict", ".", "keys", "(", ")", ":", "\n", "            ", "data_paris", ".", "append", "(", "[", "value", ",", "hr_dcit", "[", "key", "]", "]", ")", "\n", "\n", "", "", "return", "data_paris", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track1.get_filelist": [[22, 37], ["os.walk", "isinstance", "os.path.join().replace", "os.path.splitext", "result.append", "os.path.join"], "methods", ["None"], ["    ", "def", "get_filelist", "(", "self", ",", "path", ",", "ext", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "ext", ",", "list", ")", ":", "\n", "            ", "ext_filter", "=", "[", "ext", "]", "\n", "", "else", ":", "\n", "            ", "ext_filter", "=", "ext", "\n", "\n", "", "result", "=", "[", "]", "\n", "\n", "for", "maindir", ",", "subdir", ",", "filename_list", "in", "os", ".", "walk", "(", "path", ")", ":", "\n", "            ", "for", "fname", "in", "filename_list", ":", "\n", "                ", "apath", "=", "os", ".", "path", ".", "join", "(", "maindir", ",", "fname", ")", ".", "replace", "(", "'//'", ",", "'/'", ")", "\n", "ext", "=", "os", ".", "path", ".", "splitext", "(", "apath", ")", "[", "1", "]", "\n", "if", "ext", "in", "ext_filter", ":", "\n", "                    ", "result", ".", "append", "(", "apath", ")", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track1.get_gt_path": [[38, 41], ["os.path.join"], "methods", ["None"], ["", "def", "get_gt_path", "(", "self", ",", "GT_PATH", ",", "filename", ",", "ext", ")", ":", "\n", "        ", "prob_fname", "=", "os", ".", "path", ".", "join", "(", "GT_PATH", ",", "filename", "+", "ext", ")", "\n", "return", "prob_fname", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track1.get_paired_list": [[42, 51], ["vanilar_dataset.NTIRE_Track1.get_filelist", "vanilar_dataset.NTIRE_Track1.get_gt_path", "gt_list.append", "os.path.splitext", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track1.get_filelist", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track1.get_gt_path"], ["", "def", "get_paired_list", "(", "self", ",", "LR_PATH", ",", "GT_PATH", ")", ":", "\n", "        ", "lr_list", "=", "self", ".", "get_filelist", "(", "LR_PATH", ",", "ext", "=", "'.png'", ")", "\n", "gt_list", "=", "[", "]", "\n", "for", "lr", "in", "lr_list", ":", "\n", "            ", "lr_fname", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "lr", ")", "[", "1", "]", ")", "[", "0", "]", "\n", "gt_path", "=", "self", ".", "get_gt_path", "(", "GT_PATH", ",", "lr_fname", ",", "ext", "=", "'.png'", ")", "\n", "gt_list", ".", "append", "(", "gt_path", ")", "\n", "\n", "", "return", "[", "lr_list", ",", "gt_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track1.__init__": [[52, 61], ["torch.utils.data.dataset.Dataset.__init__", "vanilar_dataset.NTIRE_Track1.get_paired_list"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track1.get_paired_list"], ["", "def", "__init__", "(", "self", ",", "LR_PATH", ",", "GT_PATH", ",", "input_size", "=", "[", "320", ",", "320", "]", ",", "patch", "=", "True", ",", "\n", "base_transforms", "=", "None", ",", "augment_transforms", "=", "None", ",", "batch_transforms", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lr_path", "=", "LR_PATH", "\n", "self", ".", "gt_path", "=", "GT_PATH", "\n", "self", ".", "paired_list", "=", "self", ".", "get_paired_list", "(", "self", ".", "lr_path", ",", "self", ".", "gt_path", ")", "\n", "self", ".", "base_transforms", "=", "base_transforms", "\n", "self", ".", "augment_transforms", "=", "augment_transforms", "\n", "self", ".", "batch_transforms", "=", "batch_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track1.__len__": [[62, 64], ["min", "len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "len", "(", "self", ".", "paired_list", "[", "0", "]", ")", ",", "len", "(", "self", ".", "paired_list", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track1.__getitem__": [[65, 74], ["cv2.imread", "cv2.imread"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "lr_file_path", "=", "self", ".", "paired_list", "[", "0", "]", "[", "index", "]", "\n", "gt_file_path", "=", "self", ".", "paired_list", "[", "1", "]", "[", "index", "]", "\n", "\n", "# TODO: all the augmentations need to be implemented.", "\n", "lr_img", "=", "cv2", ".", "imread", "(", "lr_file_path", ")", "\n", "gt_img", "=", "cv2", ".", "imread", "(", "gt_file_path", ")", "\n", "\n", "return", "lr_img", ",", "gt_img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2.__init__": [[78, 114], ["torch.utils.data.dataset.Dataset.__init__", "vanilar_dataset.NTIRE_Track2._make_pair", "range", "torch.device", "torch.device", "torch.device", "torch.device", "random.shuffle", "vanilar_dataset.NTIRE_Track2.train_preprocess", "vanilar_dataset.NTIRE_Track2.val_preproces", "random.sample", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._make_pair", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2.train_preprocess", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2.val_preproces"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "train", "=", "True", ")", ":", "\n", "        ", "super", "(", "NTIRE_Track2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "range", "=", "self", ".", "cfg", ".", "INPUT", ".", "RANGE", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "lr_path", "=", "self", ".", "cfg", ".", "DATA", ".", "TRAIN", ".", "LR_PATH", "\n", "self", ".", "hr_path", "=", "self", ".", "cfg", ".", "DATA", ".", "TRAIN", ".", "HR_PATH", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr_path", "=", "self", ".", "cfg", ".", "DATA", ".", "VALIDATION", ".", "LR_PATH", "\n", "self", ".", "hr_path", "=", "self", ".", "cfg", ".", "DATA", ".", "VALIDATION", ".", "HR_PATH", "\n", "\n", "", "self", ".", "total_pair", "=", "self", ".", "_make_pair", "(", "self", ".", "lr_path", ",", "self", ".", "hr_path", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "if", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ":", "\n", "                ", "self", ".", "paired_list", "=", "random", ".", "sample", "(", "self", ".", "total_pair", ",", "int", "(", "len", "(", "self", ".", "total_pair", ")", "*", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "paired_list", "=", "self", ".", "total_pair", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "paired_list", "=", "self", ".", "total_pair", "\n", "\n", "", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "paired_list", ")", "\n", "\n", "", "self", ".", "data_length", "=", "[", "x", "for", "x", "in", "range", "(", "len", "(", "self", ".", "paired_list", ")", ")", "]", "\n", "\n", "self", ".", "mean", "=", "self", ".", "cfg", ".", "INPUT", ".", "MEAN", "\n", "self", ".", "std", "=", "self", ".", "cfg", ".", "INPUT", ".", "STD", "\n", "self", ".", "norm", "=", "self", ".", "cfg", ".", "INPUT", ".", "NORM", "\n", "self", ".", "patch_size", "=", "self", ".", "cfg", ".", "PATCH", ".", "PATCH_SIZE", "\n", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "base_transforms", "=", "self", ".", "train_preprocess", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "base_transforms", "=", "self", ".", "val_preproces", "(", ")", "\n", "", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2.train_preprocess": [[115, 130], ["Compose", "RandomRGB", "RandomCrop", "RandomHorizonFlip", "RandomVerticalFlip", "RandomRotate", "RandomGamma", "RandomSaturation", "ToTensor2", "ToTensor", "Normalize"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize"], ["", "def", "train_preprocess", "(", "self", ")", ":", "\n", "# TODO: add the important patch from crop, add blur", "\n", "        ", "base_transforms", "=", "Compose", "(", "[", "\n", "RandomRGB", "(", ")", "if", "self", ".", "cfg", ".", "DATAAUG", ".", "RGB", "else", "None", ",", "\n", "RandomCrop", "(", "self", ".", "patch_size", ")", "if", "self", ".", "cfg", ".", "DATAAUG", ".", "RANDOM_CROP", "else", "None", ",", "\n", "RandomHorizonFlip", "(", ")", "if", "self", ".", "cfg", ".", "DATAAUG", ".", "HFLIP", "else", "None", ",", "\n", "RandomVerticalFlip", "(", ")", "if", "self", ".", "cfg", ".", "DATAAUG", ".", "VFLIP", "else", "None", ",", "\n", "RandomRotate", "(", ")", "if", "self", ".", "cfg", ".", "DATAAUG", ".", "ROTATE", "else", "None", ",", "\n", "RandomGamma", "(", ")", "if", "self", ".", "cfg", ".", "DATAAUG", ".", "GAMMA", "else", "None", ",", "\n", "RandomSaturation", "(", ")", "if", "self", ".", "cfg", ".", "DATAAUG", ".", "SATURATION", "else", "None", ",", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "if", "self", ".", "norm", "else", "None", "\n", "]", ")", "\n", "\n", "return", "base_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2.val_preproces": [[131, 144], ["Compose", "Compose", "Normalize", "CenterCrop", "ToTensor2", "ToTensor", "CenterCrop", "ToTensor2", "ToTensor"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.uniA_ELU.wavelet_deblur_remix.Normalize"], ["", "def", "val_preproces", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "norm", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "CenterCrop", "(", "self", ".", "patch_size", ")", "if", "self", ".", "cfg", ".", "DATAAUG", ".", "CENTERCROP", "else", "None", ",", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "base_transforms", "=", "Compose", "(", "[", "\n", "CenterCrop", "(", "self", ".", "patch_size", ")", "if", "self", ".", "cfg", ".", "DATAAUG", ".", "CENTERCROP", "else", "None", ",", "\n", "ToTensor2", "(", ")", "if", "self", ".", "range", "==", "255", "else", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "", "return", "base_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._make_dict": [[145, 151], ["json.loads", "data_json[].split"], "methods", ["None"], ["", "def", "_make_dict", "(", "self", ",", "data_list", ")", ":", "\n", "        ", "data_dict", "=", "{", "}", "\n", "for", "data", "in", "data_list", ":", "\n", "            ", "data_json", "=", "json", ".", "loads", "(", "data", ")", "\n", "data_dict", "[", "data_json", "[", "\"image_key\"", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "]", "=", "data_json", "[", "\"image_path\"", "]", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._make_pair": [[152, 161], ["vanilar_dataset.NTIRE_Track2._make_dict", "vanilar_dataset.NTIRE_Track2._make_dict", "vanilar_dataset.NTIRE_Track2.items", "len", "len", "pair_list.append", "x.strip", "x.strip", "open().readlines", "open().readlines", "open", "open"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._make_dict", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._make_dict"], ["", "def", "_make_pair", "(", "self", ",", "lr_path", ",", "hr_path", ")", ":", "\n", "        ", "lr_dict", "=", "self", ".", "_make_dict", "(", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "lr_path", ")", ".", "readlines", "(", ")", "]", ")", "\n", "hr_dict", "=", "self", ".", "_make_dict", "(", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "hr_path", ")", ".", "readlines", "(", ")", "]", ")", "\n", "assert", "len", "(", "lr_dict", ")", "==", "len", "(", "hr_dict", ")", ",", "\"the lr and hr data length must be same!!!\"", "\n", "pair_list", "=", "[", "]", "\n", "for", "image_key", ",", "lr_image_path", "in", "lr_dict", ".", "items", "(", ")", ":", "\n", "            ", "hr_image_path", "=", "hr_dict", "[", "image_key", "]", "\n", "pair_list", ".", "append", "(", "[", "lr_image_path", ",", "hr_image_path", "]", ")", "\n", "", "return", "pair_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._load_image": [[162, 170], ["PIL.Image.open().convert", "PIL.Image.open", "img.convert.convert.convert", "PIL.Image.open", "io.BytesIO", "urllib.request.urlopen().read", "urllib.request.urlopen"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "img_path", ")", ":", "\n", "        ", "if", "img_path", "[", ":", "4", "]", "==", "'http'", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "BytesIO", "(", "urllib", ".", "request", ".", "urlopen", "(", "img_path", ")", ".", "read", "(", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# img = np.asarray(img)", "\n", "", "else", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "img", "=", "img", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._build_patches": [[172, 186], ["tqdm.tqdm.tqdm", "range", "time.time", "print", "time.time", "data.utils.get_patches", "print", "vanilar_dataset.NTIRE_Track2.patches_list[].extend", "vanilar_dataset.NTIRE_Track2.patches_list[].extend", "random.shuffle", "len", "vanilar_dataset.NTIRE_Track2._load_image", "vanilar_dataset.NTIRE_Track2._load_image", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.get_patches", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._load_image", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._load_image"], ["", "def", "_build_patches", "(", "self", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "patches_list", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "paired_list", ")", ")", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "lr_image", ",", "hr_image", "=", "self", ".", "_load_image", "(", "self", ".", "paired_list", "[", "i", "]", "[", "0", "]", ")", ",", "self", ".", "_load_image", "(", "self", ".", "paired_list", "[", "i", "]", "[", "1", "]", ")", "\n", "print", "(", "f\"load image time is: {time.time() - start_time}\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "lr_patch_list", ",", "hr_patch_list", "=", "get_patches", "(", "lr_image", ",", "hr_image", ",", "self", ".", "patch_size", ",", "self", ".", "step", ",", "self", ".", "max_nums", ")", "\n", "print", "(", "f\"get_patches time is: {time.time() - start_time}\"", ")", "\n", "self", ".", "patches_list", "[", "0", "]", ".", "extend", "(", "lr_patch_list", ")", "\n", "self", ".", "patches_list", "[", "1", "]", ".", "extend", "(", "hr_patch_list", ")", "\n", "", "if", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "patches_list", ")", "\n", "", "return", "self", ".", "patches_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2.__len__": [[187, 189], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paired_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2.__getitem__": [[190, 204], ["range", "vanilar_dataset.NTIRE_Track2.base_transforms", "vanilar_dataset.NTIRE_Track2._load_image", "vanilar_dataset.NTIRE_Track2._load_image", "random.choice"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._load_image", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.vanilar_dataset.NTIRE_Track2._load_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "20", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "lr_img_path", ",", "gt_img_path", "=", "self", ".", "paired_list", "[", "index", "]", "[", "0", "]", ",", "self", ".", "paired_list", "[", "index", "]", "[", "1", "]", "\n", "lr_img", "=", "self", ".", "_load_image", "(", "lr_img_path", ")", "\n", "gt_img", "=", "self", ".", "_load_image", "(", "gt_img_path", ")", "\n", "break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "index", "=", "random", ".", "choice", "(", "self", ".", "data_length", ")", "\n", "\n", "", "", "if", "self", ".", "base_transforms", "is", "not", "None", ":", "\n", "            ", "lr_img", ",", "gt_img", "=", "self", ".", "base_transforms", "(", "lr_img", ",", "gt_img", ")", "\n", "\n", "", "return", "lr_img", ",", "gt_img", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.data_process.make_data": [[11, 23], ["x.strip", "open", "open", "json.dumps", "file.write", "os.path.join", "data.split", "data.split"], "function", ["None"], ["def", "make_data", "(", "data_file", ",", "data_head", ",", "output_file", ")", ":", "\n", "    ", "data_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "data_file", ")", "]", "\n", "data_dict", "=", "[", "]", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "for", "data", "in", "data_list", ":", "\n", "            ", "image_key", "=", "data", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "+", "'/'", "+", "data", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "data_result", "=", "{", "\n", "\"image_key\"", ":", "image_key", ",", "\n", "\"image_path\"", ":", "os", ".", "path", ".", "join", "(", "data_head", ",", "data", ")", "\n", "}", "\n", "data_json", "=", "json", ".", "dumps", "(", "data_result", ")", "\n", "file", ".", "write", "(", "data_json", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.Metric_rank.__init__": [[24, 28], ["None"], "methods", ["None"], ["\n", "#    ycbcr = np.empty([img.shape[0], img.shape[1], img.shape[2]])", "\n", "\n", "if", "maxVal", "==", "1", ":", "\n", "        ", "O", "=", "O", "/", "255.0", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.Metric_rank.update": [[29, 32], ["None"], "methods", ["None"], ["\n", "#    ycbcr[:,:,0] = ((T[0,0] * r) + (T[0,1] * g) + (T[0,2] * b) + O[0])", "\n", "#    ycbcr[:,:,1] = ((T[1,0] * r) + (T[1,1] * g) + (T[1,2] * b) + O[1])", "\n", "#    ycbcr[:,:,2] = ((T[2,0] * r) + (T[2,1] * g) + (T[2,2] * b) + O[2])", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.Metric_rank.average": [[33, 36], ["None"], "methods", ["None"], ["\n", "", "t", "=", "np", ".", "reshape", "(", "img", ",", "(", "img", ".", "shape", "[", "0", "]", "*", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", ")", "\n", "t", "=", "np", ".", "dot", "(", "t", ",", "np", ".", "transpose", "(", "T", ")", ")", "\n", "t", "[", ":", ",", "0", "]", "+=", "O", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.CalculateSSIM.__init__": [[42, 44], ["None"], "methods", ["None"], ["\n", "return", "ycbcr", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.CalculateSSIM.__call__": [[45, 47], ["None"], "methods", ["None"], ["\n", "", "def", "_load_img_array", "(", "path", ",", "color_mode", "=", "'RGB'", ",", "channel_mean", "=", "None", ",", "modcrop", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.PSNR.__init__": [[53, 60], ["torch.tensor", "torch.tensor"], "methods", ["None"], ["from", "PIL", "import", "Image", "\n", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "if", "color_mode", "==", "'RGB'", ":", "\n", "        ", "cimg", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "x", "=", "np", ".", "asarray", "(", "cimg", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "", "elif", "color_mode", "==", "'YCbCr'", "or", "color_mode", "==", "'Y'", ":", "\n", "        ", "cimg", "=", "img", ".", "convert", "(", "'YCbCr'", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.PSNR.__call__": [[61, 78], ["img1.clone", "img2.clone", "torch.mean", "utils.PSNR.mean.to", "utils.PSNR.std.to", "img1.clone.mul_().add_", "img2.clone.mul_().add_", "torch.log10", "img1.clone.mul_", "img2.clone.mul_", "torch.sqrt"], "methods", ["None"], ["x", "=", "np", ".", "asarray", "(", "cimg", ",", "dtype", "=", "'float32'", ")", "\n", "if", "color_mode", "==", "'Y'", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "\n", "## To 0-1", "\n", "", "", "x", "*=", "1.0", "/", "255.0", "\n", "\n", "if", "channel_mean", ":", "\n", "        ", "x", "[", ":", ",", ":", ",", "0", "]", "-=", "channel_mean", "[", "0", "]", "\n", "x", "[", ":", ",", ":", ",", "1", "]", "-=", "channel_mean", "[", "1", "]", "\n", "x", "[", ":", ",", ":", ",", "2", "]", "-=", "channel_mean", "[", "2", "]", "\n", "\n", "", "if", "modcrop", "[", "0", "]", "*", "modcrop", "[", "1", "]", "*", "modcrop", "[", "2", "]", "*", "modcrop", "[", "3", "]", ":", "\n", "        ", "x", "=", "x", "[", "modcrop", "[", "0", "]", ":", "-", "modcrop", "[", "1", "]", ",", "modcrop", "[", "2", "]", ":", "-", "modcrop", "[", "3", "]", ",", ":", "]", "\n", "\n", "", "return", "x", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.SSIM.__init__": [[83, 85], ["None"], "methods", ["None"], ["\n", "target_data", "=", "np", ".", "array", "(", "y_true", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ref_data", "=", "np", ".", "array", "(", "y_pred", ",", "dtype", "=", "np", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.SSIM.__call__": [[86, 102], ["ValueError", "utils.SSIM._ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "utils.SSIM._ssim", "ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss._ssim", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss._ssim", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.ssim"], ["\n", "diff", "=", "ref_data", "-", "target_data", "\n", "if", "shave_border", ">", "0", ":", "\n", "        ", "diff", "=", "diff", "[", "shave_border", ":", "-", "shave_border", ",", "shave_border", ":", "-", "shave_border", "]", "\n", "", "rmse", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "power", "(", "diff", ",", "2", ")", ")", ")", "\n", "\n", "return", "20", "*", "np", ".", "log10", "(", "255.", "/", "rmse", ")", "\n", "\n", "\n", "# MATLAB imresize function", "\n", "# Key difference from other resize funtions is antialiasing when downsampling", "\n", "# This function only for downsampling", "\n", "", "def", "DownSample2DMatlab", "(", "tensor", ",", "scale", ",", "method", "=", "'cubic'", ",", "antialiasing", "=", "True", ",", "cuda", "=", "True", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.SSIM._ssim": [[103, 126], ["img1.astype.astype.astype", "img2.astype.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "methods", ["None"], ["\n", "\n", "# For cubic interpolation,", "\n", "# Cubic Convolution Interpolation for Digital Image Processing, ASSP, 1981", "\n", "def", "cubic", "(", "x", ")", ":", "\n", "        ", "absx", "=", "np", ".", "abs", "(", "x", ")", "\n", "absx2", "=", "np", ".", "multiply", "(", "absx", ",", "absx", ")", "\n", "absx3", "=", "np", ".", "multiply", "(", "absx2", ",", "absx", ")", "\n", "\n", "f", "=", "np", ".", "multiply", "(", "(", "1.5", "*", "absx3", "-", "2.5", "*", "absx2", "+", "1", ")", ",", "np", ".", "less_equal", "(", "absx", ",", "1", ")", ")", "+", "np", ".", "multiply", "(", "(", "-", "0.5", "*", "absx3", "+", "2.5", "*", "absx2", "-", "4", "*", "absx", "+", "2", ")", ",", "np", ".", "logical_and", "(", "np", ".", "less", "(", "1", ",", "absx", ")", ",", "np", ".", "less_equal", "(", "absx", ",", "2", ")", ")", ")", "\n", "\n", "return", "f", "\n", "\n", "# Generate resize kernel (resize weight computation)", "\n", "", "def", "contributions", "(", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", ":", "\n", "        ", "if", "scale", "<", "1", "and", "antialiasing", ":", "\n", "            ", "kernel_width", "=", "kernel_width", "/", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.BatchAug.__init__": [[199, 207], ["object.__init__", "MixUp", "CutMix", "CutBlur"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["        ", "kernel", "=", "cubic", "\n", "\n", "", "kernel_width", "=", "4", "\n", "\n", "if", "type", "(", "scale", ")", "is", "list", ":", "\n", "        ", "scale_v", "=", "float", "(", "scale", "[", "0", "]", ")", "\n", "scale_h", "=", "float", "(", "scale", "[", "1", "]", ")", "\n", "\n", "weights", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.BatchAug.__call__": [[208, 217], ["utils.BatchAug.mixup", "utils.BatchAug.cutmix", "utils.BatchAug.cutblur"], "methods", ["None"], ["for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "W", "=", "contributions", "(", "float", "(", "scale", "[", "i", "]", ")", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "weights", ".", "append", "(", "W", ")", "\n", "", "", "else", ":", "\n", "        ", "scale", "=", "float", "(", "scale", ")", "\n", "\n", "scale_v", "=", "scale", "\n", "scale_h", "=", "scale", "\n", "\n", "weights", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.sliding_window": [[128, 176], ["isinstance", "numpy.array", "range", "range", "range", "cv2.imwrite", "range", "crop_image_list.append", "print", "crop_image_list.append", "PIL.Image.fromarray", "Image.fromarray.save", "cv2.rectangle", "PIL.Image.fromarray", "PIL.Image.fromarray"], "function", ["None"], ["\n", "u", "=", "x", "/", "scale", "+", "0.5", "*", "(", "1", "-", "1", "/", "scale", ")", "\n", "\n", "left", "=", "np", ".", "floor", "(", "u", "-", "kernel_width", "/", "2", ")", "\n", "\n", "P", "=", "int", "(", "np", ".", "ceil", "(", "kernel_width", ")", "+", "2", ")", "\n", "\n", "indices", "=", "np", ".", "tile", "(", "left", ",", "(", "1", ",", "P", ")", ")", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "0", ",", "P", ")", ",", "0", ")", "\n", "\n", "if", "scale", "<", "1", "and", "antialiasing", ":", "\n", "            ", "weights", "=", "scale", "*", "kernel", "(", "scale", "*", "(", "np", ".", "tile", "(", "u", ",", "(", "1", ",", "P", ")", ")", "-", "indices", ")", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "kernel", "(", "np", ".", "tile", "(", "u", ",", "(", "1", ",", "P", ")", ")", "-", "indices", ")", "\n", "\n", "", "weights", "=", "weights", "/", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "weights", ",", "1", ")", ",", "1", ")", "\n", "\n", "save", "=", "np", ".", "where", "(", "np", ".", "any", "(", "weights", ",", "0", ")", ")", "\n", "weights", "=", "weights", "[", ":", ",", "save", "[", "0", "]", "]", "\n", "\n", "return", "weights", "\n", "\n", "# Resize along a specified dimension", "\n", "", "def", "resizeAlongDim", "(", "tensor", ",", "scale_v", ",", "scale_h", ",", "kernel_width", ",", "weights", ")", ":", "# , indices):", "\n", "        ", "if", "scale_v", "<", "1", "and", "antialiasing", ":", "\n", "            ", "kernel_width_v", "=", "kernel_width", "/", "scale_v", "\n", "", "else", ":", "\n", "            ", "kernel_width_v", "=", "kernel_width", "\n", "", "if", "scale_h", "<", "1", "and", "antialiasing", ":", "\n", "            ", "kernel_width_h", "=", "kernel_width", "/", "scale_h", "\n", "", "else", ":", "\n", "            ", "kernel_width_h", "=", "kernel_width", "\n", "\n", "# Generate filter", "\n", "", "f_height", "=", "np", ".", "transpose", "(", "weights", "[", "0", "]", "[", "0", ":", "1", ",", ":", "]", ")", "\n", "f_width", "=", "weights", "[", "1", "]", "[", "0", ":", "1", ",", ":", "]", "\n", "f", "=", "np", ".", "dot", "(", "f_height", ",", "f_width", ")", "\n", "f", "=", "f", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "F", "=", "torch", ".", "from_numpy", "(", "f", ".", "astype", "(", "'float32'", ")", ")", "\n", "\n", "# Reflect padding", "\n", "i_scale_v", "=", "int", "(", "1", "/", "scale_v", ")", "\n", "i_scale_h", "=", "int", "(", "1", "/", "scale_h", ")", "\n", "pad_top", "=", "int", "(", "(", "kernel_width_v", "-", "i_scale_v", ")", "/", "2", ")", "\n", "if", "i_scale_v", "==", "1", ":", "\n", "            ", "pad_top", "=", "0", "\n", "", "pad_bottom", "=", "int", "(", "(", "kernel_width_h", "-", "i_scale_h", ")", "/", "2", ")", "\n", "if", "i_scale_h", "==", "1", ":", "\n", "            ", "pad_bottom", "=", "0", "\n", "", "pad_array", "=", "(", "[", "pad_bottom", ",", "pad_bottom", ",", "pad_top", ",", "pad_top", "]", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.get_patches": [[178, 194], ["utils.sliding_window", "utils.sliding_window", "len", "random.sample", "range", "len", "new_lr_patches.append", "new_hr_patches.append", "range", "len"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.sliding_window", "home.repos.pwc.inspect_result.flyegle_sdwnet.data.utils.sliding_window"], ["kernel_width_h", "=", "int", "(", "kernel_width_h", ")", "\n", "\n", "#", "\n", "tensor_shape", "=", "tensor", ".", "size", "(", ")", "\n", "num_channel", "=", "tensor_shape", "[", "1", "]", "\n", "FT", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "(", "kernel_width_v", ",", "kernel_width_h", ")", ",", "(", "i_scale_v", ",", "i_scale_h", ")", ",", "bias", "=", "False", ")", "\n", "FT", ".", "weight", ".", "data", "=", "F", "\n", "if", "cuda", ":", "\n", "            ", "FT", ".", "cuda", "(", ")", "\n", "", "FT", ".", "requires_grad", "=", "False", "\n", "\n", "# actually, we want 'symmetric' padding, not 'reflect'", "\n", "outs", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "num_channel", ")", ":", "\n", "            ", "padded", "=", "nn", ".", "functional", ".", "pad", "(", "tensor", "[", ":", ",", "c", ":", "c", "+", "1", ",", ":", ",", ":", "]", ",", "pad_array", ",", "'reflect'", ")", "\n", "outs", ".", "append", "(", "FT", "(", "padded", ")", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "outs", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.SSIM.__init__": [[230, 260], ["super().__init__", "_fspecial_gauss_1d().repeat", "generator_loss._fspecial_gauss_1d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss._fspecial_gauss_1d"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_range", "=", "255", ",", "\n", "size_average", "=", "True", ",", "\n", "win_size", "=", "11", ",", "\n", "win_sigma", "=", "1.5", ",", "\n", "channel", "=", "3", ",", "\n", "spatial_dims", "=", "2", ",", "\n", "K", "=", "(", "0.01", ",", "0.03", ")", ",", "\n", "nonnegative_ssim", "=", "False", ",", "\n", ")", ":", "\n", "        ", "r\"\"\" class for ssim\n        Args:\n            data_range (float or int, optional): value range of input images. (usually 1.0 or 255)\n            size_average (bool, optional): if size_average=True, ssim of all images will be averaged as a scalar\n            win_size: (int, optional): the size of gauss kernel\n            win_sigma: (float, optional): sigma of normal distribution\n            channel (int, optional): input channels (default: 3)\n            K (list or tuple, optional): scalar constants (K1, K2). Try a larger K2 constant (e.g. 0.4) if you get a negative or NaN results.\n            nonnegative_ssim (bool, optional): force the ssim response to be nonnegative with relu.\n        \"\"\"", "\n", "\n", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "win_size", "=", "win_size", "\n", "self", ".", "win", "=", "_fspecial_gauss_1d", "(", "win_size", ",", "win_sigma", ")", ".", "repeat", "(", "\n", "[", "channel", ",", "1", "]", "+", "[", "1", "]", "*", "spatial_dims", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "data_range", "=", "data_range", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "nonnegative_ssim", "=", "nonnegative_ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.SSIM.forward": [[261, 270], ["generator_loss.ssim"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.ssim"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "return", "ssim", "(", "\n", "X", ",", "\n", "Y", ",", "\n", "data_range", "=", "self", ".", "data_range", ",", "\n", "size_average", "=", "self", ".", "size_average", ",", "\n", "win", "=", "self", ".", "win", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "nonnegative_ssim", "=", "self", ".", "nonnegative_ssim", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.MS_SSIM.__init__": [[274, 304], ["super().__init__", "_fspecial_gauss_1d().repeat", "generator_loss._fspecial_gauss_1d"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss._fspecial_gauss_1d"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_range", "=", "255", ",", "\n", "size_average", "=", "True", ",", "\n", "win_size", "=", "11", ",", "\n", "win_sigma", "=", "1.5", ",", "\n", "channel", "=", "3", ",", "\n", "spatial_dims", "=", "2", ",", "\n", "weights", "=", "None", ",", "\n", "K", "=", "(", "0.01", ",", "0.03", ")", ",", "\n", ")", ":", "\n", "        ", "r\"\"\" class for ms-ssim\n        Args:\n            data_range (float or int, optional): value range of input images. (usually 1.0 or 255)\n            size_average (bool, optional): if size_average=True, ssim of all images will be averaged as a scalar\n            win_size: (int, optional): the size of gauss kernel\n            win_sigma: (float, optional): sigma of normal distribution\n            channel (int, optional): input channels (default: 3)\n            weights (list, optional): weights for different levels\n            K (list or tuple, optional): scalar constants (K1, K2). Try a larger K2 constant (e.g. 0.4) if you get a negative or NaN results.\n        \"\"\"", "\n", "\n", "super", "(", "MS_SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "win_size", "=", "win_size", "\n", "self", ".", "win", "=", "_fspecial_gauss_1d", "(", "win_size", ",", "win_sigma", ")", ".", "repeat", "(", "\n", "[", "channel", ",", "1", "]", "+", "[", "1", "]", "*", "spatial_dims", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "data_range", "=", "data_range", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "K", "=", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.MS_SSIM.forward": [[305, 314], ["generator_loss.ms_ssim"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.ms_ssim"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "return", "ms_ssim", "(", "\n", "X", ",", "\n", "Y", ",", "\n", "data_range", "=", "self", ".", "data_range", ",", "\n", "size_average", "=", "self", ".", "size_average", ",", "\n", "win", "=", "self", ".", "win", ",", "\n", "weights", "=", "self", ".", "weights", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.L1_Charbonnier.__init__": [[320, 324], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ",", "eps", "=", "1e-3", ")", ":", "\n", "        ", "super", "(", "L1_Charbonnier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''MSRNet uses 1e-3 as default'''", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.L1_Charbonnier.forward": [[325, 330], ["torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "diff", "=", "torch", ".", "add", "(", "X", ",", "-", "Y", ")", "\n", "error", "=", "torch", ".", "sqrt", "(", "diff", "*", "diff", "+", "self", ".", "eps", "*", "self", ".", "eps", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "error", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.gradient_loss.__init__": [[335, 350], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "gradient_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "sobel_x", "=", "torch", ".", "Tensor", "(", "[", "[", "1", ",", "0", ",", "-", "1", "]", ",", "[", "2", ",", "0", ",", "-", "2", "]", ",", "[", "1", ",", "0", ",", "-", "1", "]", "]", ")", "\n", "sobel_y", "=", "torch", ".", "Tensor", "(", "[", "[", "1", ",", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "2", ",", "-", "1", "]", "]", ")", "\n", "sobel_3x", "=", "torch", ".", "Tensor", "(", "1", ",", "3", ",", "3", ",", "3", ")", "\n", "sobel_3y", "=", "torch", ".", "Tensor", "(", "1", ",", "3", ",", "3", ",", "3", ")", "\n", "sobel_3x", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "=", "sobel_x", "\n", "sobel_3y", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "=", "sobel_y", "\n", "self", ".", "conv_hx", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_hy", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_hx", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "sobel_3x", ")", "\n", "self", ".", "conv_hy", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "sobel_3y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.gradient_loss.forward": [[353, 372], ["generator_loss.gradient_loss.conv_hx", "generator_loss.gradient_loss.conv_hy", "generator_loss.gradient_loss.conv_hx", "generator_loss.gradient_loss.conv_hx.train", "generator_loss.gradient_loss.conv_hy", "generator_loss.gradient_loss.conv_hy.train", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.train", "home.repos.pwc.inspect_result.flyegle_sdwnet.None.train_goprol.train"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "# compute gradient of X", "\n", "# batch_size,C,H,W = X.shape", "\n", "# X_r = X[:, :1, :H, :W]", "\n", "# Y_r = Y[:, :1, :H, :W]", "\n", "        ", "X_hx", "=", "self", ".", "conv_hx", "(", "X", ")", "\n", "X_hy", "=", "self", ".", "conv_hy", "(", "Y", ")", "\n", "G_X", "=", "torch", ".", "abs", "(", "X_hx", ")", "+", "torch", ".", "abs", "(", "X_hy", ")", "\n", "# compute gradient of Y", "\n", "Y_hx", "=", "self", ".", "conv_hx", "(", "Y", ")", "\n", "self", ".", "conv_hx", ".", "train", "(", "False", ")", "\n", "Y_hy", "=", "self", ".", "conv_hy", "(", "Y", ")", "\n", "self", ".", "conv_hy", ".", "train", "(", "False", ")", "\n", "G_Y", "=", "torch", ".", "abs", "(", "Y_hx", ")", "+", "torch", ".", "abs", "(", "Y_hy", ")", "\n", "\n", "# loss = self.L1_loss(G_X,G_Y)", "\n", "loss", "=", "F", ".", "mse_loss", "(", "G_X", ",", "G_Y", ",", "size_average", "=", "True", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.VGG.__init__": [[375, 388], ["torch.Module.__init__", "MeanShift", "torchvision.vgg19", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conv_index", ",", "rgb_range", "=", "1", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "modules", "=", "[", "m", "for", "m", "in", "vgg_features", "]", "\n", "if", "conv_index", "==", "'22'", ":", "\n", "            ", "self", ".", "vgg", "=", "nn", ".", "Sequential", "(", "*", "modules", "[", ":", "8", "]", ")", "\n", "", "elif", "conv_index", "==", "'54'", ":", "\n", "            ", "self", ".", "vgg", "=", "nn", ".", "Sequential", "(", "*", "modules", "[", ":", "35", "]", ")", "\n", "\n", "", "vgg_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "vgg_std", "=", "[", "0.229", "*", "rgb_range", ",", "0.224", "*", "rgb_range", ",", "0.225", "*", "rgb_range", "]", "\n", "self", ".", "sub_mean", "=", "MeanShift", "(", "rgb_range", ",", "vgg_mean", ",", "vgg_std", ")", "\n", "self", ".", "vgg", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.VGG.forward": [[389, 402], ["generator_loss.VGG.forward._forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sr", ",", "hr", ")", ":", "\n", "        ", "def", "_forward", "(", "x", ")", ":", "\n", "            ", "x", "=", "self", ".", "sub_mean", "(", "x", ")", "\n", "x", "=", "self", ".", "vgg", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "vgg_sr", "=", "_forward", "(", "sr", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "vgg_hr", "=", "_forward", "(", "hr", ".", "detach", "(", ")", ")", "\n", "\n", "", "loss", "=", "F", ".", "mse_loss", "(", "vgg_sr", ",", "vgg_hr", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.EdgeLoss2.__init__": [[404, 411], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.matmul().unsqueeze().repeat", "torch.matmul().unsqueeze().repeat", "torch.matmul().unsqueeze().repeat", "torch.matmul().unsqueeze().repeat", "torch.matmul().unsqueeze().repeat", "torch.matmul().unsqueeze().repeat", "torch.matmul().unsqueeze().repeat", "torch.matmul().unsqueeze().repeat", "torch.matmul().unsqueeze().repeat", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "generator_loss.L1_Charbonnier", "generator_loss.EdgeLoss2.kernel.cuda", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.Tensor.t", "torch.Tensor.t", "torch.Tensor.t"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EdgeLoss2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "k", "=", "torch", ".", "Tensor", "(", "[", "[", ".05", ",", ".25", ",", ".4", ",", ".25", ",", ".05", "]", "]", ")", "\n", "self", ".", "kernel", "=", "torch", ".", "matmul", "(", "k", ".", "t", "(", ")", ",", "k", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "kernel", "=", "self", ".", "kernel", ".", "cuda", "(", ")", "\n", "", "self", ".", "loss", "=", "L1_Charbonnier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.EdgeLoss2.conv_gauss": [[412, 416], ["torch.pad", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "conv_gauss", "(", "self", ",", "img", ")", ":", "\n", "        ", "n_channels", ",", "_", ",", "kw", ",", "kh", "=", "self", ".", "kernel", ".", "shape", "\n", "img", "=", "F", ".", "pad", "(", "img", ",", "(", "kw", "//", "2", ",", "kh", "//", "2", ",", "kw", "//", "2", ",", "kh", "//", "2", ")", ",", "mode", "=", "'replicate'", ")", "\n", "return", "F", ".", "conv2d", "(", "img", ",", "self", ".", "kernel", ",", "groups", "=", "n_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.EdgeLoss2.laplacian_kernel": [[417, 425], ["generator_loss.EdgeLoss2.conv_gauss", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "generator_loss.EdgeLoss2.conv_gauss"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.EdgeLoss2.conv_gauss", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.EdgeLoss2.conv_gauss"], ["", "def", "laplacian_kernel", "(", "self", ",", "current", ")", ":", "\n", "        ", "filtered", "=", "self", ".", "conv_gauss", "(", "current", ")", "# filter", "\n", "down", "=", "filtered", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "# downsample", "\n", "new_filter", "=", "torch", ".", "zeros_like", "(", "filtered", ")", "\n", "new_filter", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "=", "down", "*", "4", "# upsample", "\n", "filtered", "=", "self", ".", "conv_gauss", "(", "new_filter", ")", "# filter", "\n", "diff", "=", "current", "-", "filtered", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.EdgeLoss2.forward": [[426, 429], ["generator_loss.EdgeLoss2.loss", "generator_loss.EdgeLoss2.laplacian_kernel", "generator_loss.EdgeLoss2.laplacian_kernel"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.EdgeLoss2.laplacian_kernel", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.EdgeLoss2.laplacian_kernel"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss", "(", "self", ".", "laplacian_kernel", "(", "x", ")", ",", "self", ".", "laplacian_kernel", "(", "y", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.Edge_loss.__init__": [[432, 435], ["torch.Module.__init__", "generator_loss.L1_Charbonnier"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Edge_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "L1_Charbonnier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.Edge_loss.rgb2gray": [[436, 442], ["img.clone().detach", "img.clone"], "methods", ["None"], ["", "def", "rgb2gray", "(", "self", ",", "img", ")", ":", "\n", "        ", "out_img", "=", "img", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "R", ",", "G", ",", "B", "=", "out_img", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "out_img", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "out_img", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "out_img", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "0.299", "*", "R", "+", "0.587", "*", "G", "+", "0.114", "*", "B", "\n", "gray", "=", "out_img", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "return", "gray", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.Edge_loss.laplacian_op": [[443, 455], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "sobel_kernel.reshape.reshape.reshape", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.conv2d", "torch.conv2d", "torch.conv2d", "edge_detect.squeeze().detach.squeeze().detach.squeeze().detach", "generator_loss.Edge_loss.rgb2gray", "edge_detect.squeeze().detach.squeeze().detach.squeeze"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.Edge_loss.rgb2gray"], ["", "def", "laplacian_op", "(", "self", ",", "img", ")", ":", "\n", "        ", "'''Input a gray-scale image'''", "\n", "if", "img", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "img", "=", "self", ".", "rgb2gray", "(", "img", ")", "\n", "# print(\"Color image\")", "\n", "", "sobel_kernel", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "-", "1.", ",", "-", "1.", ",", "-", "1.", "]", ",", "[", "-", "1.", ",", "8.", ",", "-", "1.", "]", ",", "[", "-", "1.", ",", "-", "1.", ",", "-", "1.", "]", "]", ")", "\n", "sobel_kernel", "=", "sobel_kernel", ".", "reshape", "(", "(", "1", ",", "1", ",", "3", ",", "3", ")", ")", "\n", "weight", "=", "torch", ".", "autograd", ".", "Variable", "(", "sobel_kernel", ")", "\n", "edge_detect", "=", "F", ".", "conv2d", "(", "img", ",", "weight", ")", "\n", "edge_detect", "=", "edge_detect", ".", "squeeze", "(", ")", ".", "detach", "(", ")", "\n", "return", "edge_detect", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.Edge_loss.forward": [[456, 459], ["generator_loss.Edge_loss.loss", "generator_loss.Edge_loss.laplacian_op", "generator_loss.Edge_loss.laplacian_op"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.Edge_loss.laplacian_op", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.Edge_loss.laplacian_op"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "edge_X", ",", "edge_Y", "=", "self", ".", "laplacian_op", "(", "X", ")", ",", "self", ".", "laplacian_op", "(", "Y", ")", "\n", "return", "self", ".", "loss", "(", "edge_X", ",", "edge_Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.PerceptualLoss.__init__": [[463, 476], ["torch.Module.__init__", "generator_loss.PerceptualLoss.loss_network.parameters", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torchvision.models.vgg.vgg16", "torch.Sequential().cuda().eval", "torch.Sequential().cuda().eval", "torch.Sequential().cuda().eval", "torchvision.models.vgg.vgg19", "torch.Sequential().cuda().eval", "torch.Sequential().cuda().eval", "torch.Sequential().cuda().eval", "torch.Sequential().cuda", "torch.Sequential().cuda", "torch.Sequential().cuda", "torch.Sequential().cuda", "torch.Sequential().cuda", "torch.Sequential().cuda", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list", "list"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vgg_type", "=", "\"vgg16\"", ")", ":", "\n", "        ", "super", "(", "PerceptualLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg_type", "=", "vgg_type", "\n", "if", "self", ".", "vgg_type", "==", "\"vgg16\"", ":", "\n", "            ", "self", ".", "vgg", "=", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "loss_network", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "vgg", ".", "features", ")", "[", ":", "31", "]", ")", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "", "elif", "self", ".", "vgg_type", "==", "\"vgg19\"", ":", "\n", "            ", "self", ".", "vgg", "=", "vgg19", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "loss_network", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "vgg", ".", "features", ")", "[", ":", "37", "]", ")", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "loss_network", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.PerceptualLoss.forward": [[477, 480], ["generator_loss.PerceptualLoss.mse_loss", "generator_loss.PerceptualLoss.loss_network", "generator_loss.PerceptualLoss.loss_network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sr_images", ",", "hr_images", ")", ":", "\n", "        ", "perception_loss", "=", "self", ".", "mse_loss", "(", "self", ".", "loss_network", "(", "sr_images", ")", ",", "self", ".", "loss_network", "(", "hr_images", ")", ")", "\n", "return", "perception_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.GeneratorLoss.__init__": [[483, 492], ["torch.Module.__init__", "torchvision.models.vgg.vgg16", "torch.Sequential().eval", "torch.Sequential().eval", "torch.Sequential().eval", "torch.Sequential().eval.parameters", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "generator_loss.TVLoss", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GeneratorLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg", "=", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "loss_network", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg", ".", "features", ")", "[", ":", "31", "]", ")", ".", "eval", "(", ")", "\n", "for", "param", "in", "loss_network", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "loss_network", "=", "loss_network", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "tv_loss", "=", "TVLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.GeneratorLoss.forward": [[493, 503], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "generator_loss.GeneratorLoss.mse_loss", "generator_loss.GeneratorLoss.mse_loss", "generator_loss.GeneratorLoss.tv_loss", "generator_loss.GeneratorLoss.loss_network", "generator_loss.GeneratorLoss.loss_network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "out_labels", ",", "out_images", ",", "target_images", ")", ":", "\n", "# Adversarial Loss", "\n", "        ", "adversarial_loss", "=", "torch", ".", "mean", "(", "1", "-", "out_labels", ")", "\n", "# Perception Loss", "\n", "perception_loss", "=", "self", ".", "mse_loss", "(", "self", ".", "loss_network", "(", "out_images", ")", ",", "self", ".", "loss_network", "(", "target_images", ")", ")", "\n", "# Image Loss", "\n", "image_loss", "=", "self", ".", "mse_loss", "(", "out_images", ",", "target_images", ")", "\n", "# TV Loss", "\n", "tv_loss", "=", "self", ".", "tv_loss", "(", "out_images", ")", "\n", "return", "image_loss", "+", "0.001", "*", "adversarial_loss", "+", "0.006", "*", "perception_loss", "+", "2e-8", "*", "tv_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__": [[506, 509], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tv_loss_weight", "=", "1", ")", ":", "\n", "        ", "super", "(", "TVLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tv_loss_weight", "=", "tv_loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.forward": [[510, 519], ["generator_loss.TVLoss.tensor_size", "generator_loss.TVLoss.tensor_size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "x.size", "x.size", "x.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.tensor_size", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.tensor_size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "h_x", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "w_x", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "count_h", "=", "self", ".", "tensor_size", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ")", "\n", "count_w", "=", "self", ".", "tensor_size", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ")", "\n", "h_tv", "=", "torch", ".", "pow", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "h_x", "-", "1", ",", ":", "]", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "w_tv", "=", "torch", ".", "pow", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", ":", "w_x", "-", "1", "]", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "return", "self", ".", "tv_loss_weight", "*", "2", "*", "(", "h_tv", "/", "count_h", "+", "w_tv", "/", "count_w", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.TVLoss.tensor_size": [[520, 523], ["t.size", "t.size", "t.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "tensor_size", "(", "t", ")", ":", "\n", "        ", "return", "t", ".", "size", "(", ")", "[", "1", "]", "*", "t", ".", "size", "(", ")", "[", "2", "]", "*", "t", ".", "size", "(", ")", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss._fspecial_gauss_1d": [[8, 23], ["torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp.sum", "torch.exp.unsqueeze().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.exp.unsqueeze"], "function", ["None"], ["def", "_fspecial_gauss_1d", "(", "size", ",", "sigma", ")", ":", "\n", "    ", "r\"\"\"Create 1-D gauss kernel\n    Args:\n        size (int): the size of gauss kernel\n        sigma (float): sigma of normal distribution\n    Returns:\n        torch.Tensor: 1D kernel (1 x 1 x size)\n    \"\"\"", "\n", "coords", "=", "torch", ".", "arange", "(", "size", ")", ".", "to", "(", "dtype", "=", "torch", ".", "float", ")", "\n", "coords", "-=", "size", "//", "2", "\n", "\n", "g", "=", "torch", ".", "exp", "(", "-", "(", "coords", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "g", "/=", "g", ".", "sum", "(", ")", "\n", "\n", "return", "g", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.gaussian_filter": [[25, 52], ["all", "enumerate", "len", "len", "NotImplementedError", "conv", "warnings.warn", "win.transpose"], "function", ["None"], ["", "def", "gaussian_filter", "(", "input", ",", "win", ")", ":", "\n", "    ", "r\"\"\" Blur input with 1-D kernel\n    Args:\n        input (torch.Tensor): a batch of tensors to be blurred\n        window (torch.Tensor): 1-D gauss kernel\n    Returns:\n        torch.Tensor: blurred tensors\n    \"\"\"", "\n", "assert", "all", "(", "[", "ws", "==", "1", "for", "ws", "in", "win", ".", "shape", "[", "1", ":", "-", "1", "]", "]", ")", ",", "win", ".", "shape", "\n", "if", "len", "(", "input", ".", "shape", ")", "==", "4", ":", "\n", "        ", "conv", "=", "F", ".", "conv2d", "\n", "", "elif", "len", "(", "input", ".", "shape", ")", "==", "5", ":", "\n", "        ", "conv", "=", "F", ".", "conv3d", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "input", ".", "shape", ")", "\n", "\n", "", "C", "=", "input", ".", "shape", "[", "1", "]", "\n", "out", "=", "input", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "input", ".", "shape", "[", "2", ":", "]", ")", ":", "\n", "        ", "if", "s", ">=", "win", ".", "shape", "[", "-", "1", "]", ":", "\n", "            ", "out", "=", "conv", "(", "out", ",", "weight", "=", "win", ".", "transpose", "(", "2", "+", "i", ",", "-", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "C", ")", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "f\"Skipping Gaussian Smoothing at dimension 2+{i} for input: {input.shape} and win size: {win.shape[-1]}\"", "\n", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss._ssim": [[54, 91], ["win.to.to", "generator_loss.gaussian_filter", "generator_loss.gaussian_filter", "gaussian_filter.pow", "gaussian_filter.pow", "torch.flatten().mean", "torch.flatten().mean", "torch.flatten().mean", "torch.flatten().mean", "torch.flatten().mean", "torch.flatten().mean", "generator_loss.gaussian_filter", "generator_loss.gaussian_filter", "generator_loss.gaussian_filter", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.gaussian_filter", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.gaussian_filter", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.gaussian_filter", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.gaussian_filter", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.gaussian_filter"], ["", "def", "_ssim", "(", "X", ",", "Y", ",", "data_range", ",", "win", ",", "size_average", "=", "True", ",", "K", "=", "(", "0.01", ",", "0.03", ")", ")", ":", "\n", "    ", "r\"\"\" Calculate ssim index for X and Y\n    Args:\n        X (torch.Tensor): images\n        Y (torch.Tensor): images\n        win (torch.Tensor): 1-D gauss kernel\n        data_range (float or int, optional): value range of input images. (usually 1.0 or 255)\n        size_average (bool, optional): if size_average=True, ssim of all images will be averaged as a scalar\n    Returns:\n        torch.Tensor: ssim results.\n    \"\"\"", "\n", "K1", ",", "K2", "=", "K", "\n", "# batch, channel, [depth,] height, width = X.shape", "\n", "compensation", "=", "1.0", "\n", "\n", "C1", "=", "(", "K1", "*", "data_range", ")", "**", "2", "\n", "C2", "=", "(", "K2", "*", "data_range", ")", "**", "2", "\n", "\n", "win", "=", "win", ".", "to", "(", "X", ".", "device", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "\n", "mu1", "=", "gaussian_filter", "(", "X", ",", "win", ")", "\n", "mu2", "=", "gaussian_filter", "(", "Y", ",", "win", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "compensation", "*", "(", "gaussian_filter", "(", "X", "*", "X", ",", "win", ")", "-", "mu1_sq", ")", "\n", "sigma2_sq", "=", "compensation", "*", "(", "gaussian_filter", "(", "Y", "*", "Y", ",", "win", ")", "-", "mu2_sq", ")", "\n", "sigma12", "=", "compensation", "*", "(", "gaussian_filter", "(", "X", "*", "Y", ",", "win", ")", "-", "mu1_mu2", ")", "\n", "\n", "cs_map", "=", "(", "2", "*", "sigma12", "+", "C2", ")", "/", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", "# set alpha=beta=gamma=1", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "/", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", ")", "*", "cs_map", "\n", "\n", "ssim_per_channel", "=", "torch", ".", "flatten", "(", "ssim_map", ",", "2", ")", ".", "mean", "(", "-", "1", ")", "\n", "cs", "=", "torch", ".", "flatten", "(", "cs_map", ",", "2", ")", ".", "mean", "(", "-", "1", ")", "\n", "return", "ssim_per_channel", ",", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.ssim": [[93, 151], ["range", "generator_loss._ssim", "ValueError", "X.squeeze.squeeze", "Y.squeeze.squeeze", "len", "ValueError", "ValueError", "ValueError", "generator_loss._fspecial_gauss_1d", "win.repeat.repeat", "torch.relu", "torch.relu", "torch.relu", "torch.relu.mean", "torch.relu.mean", "len", "X.squeeze.type", "Y.squeeze.type", "len"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss._ssim", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss._fspecial_gauss_1d"], ["", "def", "ssim", "(", "\n", "X", ",", "\n", "Y", ",", "\n", "data_range", "=", "255", ",", "\n", "size_average", "=", "True", ",", "\n", "win_size", "=", "11", ",", "\n", "win_sigma", "=", "1.5", ",", "\n", "win", "=", "None", ",", "\n", "K", "=", "(", "0.01", ",", "0.03", ")", ",", "\n", "nonnegative_ssim", "=", "False", ",", "\n", ")", ":", "\n", "    ", "r\"\"\" interface of ssim\n    Args:\n        X (torch.Tensor): a batch of images, (N,C,H,W)\n        Y (torch.Tensor): a batch of images, (N,C,H,W)\n        data_range (float or int, optional): value range of input images. (usually 1.0 or 255)\n        size_average (bool, optional): if size_average=True, ssim of all images will be averaged as a scalar\n        win_size: (int, optional): the size of gauss kernel\n        win_sigma: (float, optional): sigma of normal distribution\n        win (torch.Tensor, optional): 1-D gauss kernel. if None, a new kernel will be created according to win_size and win_sigma\n        K (list or tuple, optional): scalar constants (K1, K2). Try a larger K2 constant (e.g. 0.4) if you get a negative or NaN results.\n        nonnegative_ssim (bool, optional): force the ssim response to be nonnegative with relu\n    Returns:\n        torch.Tensor: ssim results\n    \"\"\"", "\n", "if", "not", "X", ".", "shape", "==", "Y", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input images should have the same dimensions.\"", ")", "\n", "\n", "", "for", "d", "in", "range", "(", "len", "(", "X", ".", "shape", ")", "-", "1", ",", "1", ",", "-", "1", ")", ":", "\n", "        ", "X", "=", "X", ".", "squeeze", "(", "dim", "=", "d", ")", "\n", "Y", "=", "Y", ".", "squeeze", "(", "dim", "=", "d", ")", "\n", "\n", "", "if", "len", "(", "X", ".", "shape", ")", "not", "in", "(", "4", ",", "5", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Input images should be 4-d or 5-d tensors, but got {X.shape}\"", ")", "\n", "\n", "", "if", "not", "X", ".", "type", "(", ")", "==", "Y", ".", "type", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input images should have the same dtype.\"", ")", "\n", "\n", "", "if", "win", "is", "not", "None", ":", "# set win_size", "\n", "        ", "win_size", "=", "win", ".", "shape", "[", "-", "1", "]", "\n", "\n", "", "if", "not", "(", "win_size", "%", "2", "==", "1", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Window size should be odd.\"", ")", "\n", "\n", "", "if", "win", "is", "None", ":", "\n", "        ", "win", "=", "_fspecial_gauss_1d", "(", "win_size", ",", "win_sigma", ")", "\n", "win", "=", "win", ".", "repeat", "(", "[", "X", ".", "shape", "[", "1", "]", "]", "+", "[", "1", "]", "*", "(", "len", "(", "X", ".", "shape", ")", "-", "1", ")", ")", "\n", "\n", "", "ssim_per_channel", ",", "cs", "=", "_ssim", "(", "\n", "X", ",", "Y", ",", "data_range", "=", "data_range", ",", "win", "=", "win", ",", "size_average", "=", "False", ",", "K", "=", "K", ")", "\n", "if", "nonnegative_ssim", ":", "\n", "        ", "ssim_per_channel", "=", "torch", ".", "relu", "(", "ssim_per_channel", ")", "\n", "\n", "", "if", "size_average", ":", "\n", "        ", "return", "ssim_per_channel", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_per_channel", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss.ms_ssim": [[153, 227], ["range", "min", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "range", "torch.relu", "torch.relu", "torch.relu", "torch.stack", "torch.stack", "torch.stack", "torch.prod", "torch.prod", "torch.prod", "ValueError", "avg_pool.squeeze", "avg_pool.squeeze", "ValueError", "len", "ValueError", "generator_loss._fspecial_gauss_1d", "win.repeat.repeat", "generator_loss._ssim", "torch.prod.mean", "torch.prod.mean", "len", "avg_pool.type", "avg_pool.type", "len", "ValueError", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "mcs.append", "avg_pool", "avg_pool", "torch.FloatTensor().to.view", "torch.relu", "torch.relu", "torch.relu", "len"], "function", ["home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss._fspecial_gauss_1d", "home.repos.pwc.inspect_result.flyegle_sdwnet.loss.generator_loss._ssim"], ["", "", "def", "ms_ssim", "(", "\n", "X", ",", "Y", ",", "data_range", "=", "255", ",", "size_average", "=", "True", ",", "win_size", "=", "11", ",", "win_sigma", "=", "1.5", ",", "win", "=", "None", ",", "weights", "=", "None", ",", "K", "=", "(", "0.01", ",", "0.03", ")", ")", ":", "\n", "    ", "r\"\"\" interface of ms-ssim\n    Args:\n        X (torch.Tensor): a batch of images, (N,C,[T,]H,W)\n        Y (torch.Tensor): a batch of images, (N,C,[T,]H,W)\n        data_range (float or int, optional): value range of input images. (usually 1.0 or 255)\n        size_average (bool, optional): if size_average=True, ssim of all images will be averaged as a scalar\n        win_size: (int, optional): the size of gauss kernel\n        win_sigma: (float, optional): sigma of normal distribution\n        win (torch.Tensor, optional): 1-D gauss kernel. if None, a new kernel will be created according to win_size and win_sigma\n        weights (list, optional): weights for different levels\n        K (list or tuple, optional): scalar constants (K1, K2). Try a larger K2 constant (e.g. 0.4) if you get a negative or NaN results.\n    Returns:\n        torch.Tensor: ms-ssim results\n    \"\"\"", "\n", "if", "not", "X", ".", "shape", "==", "Y", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input images should have the same dimensions.\"", ")", "\n", "\n", "", "for", "d", "in", "range", "(", "len", "(", "X", ".", "shape", ")", "-", "1", ",", "1", ",", "-", "1", ")", ":", "\n", "        ", "X", "=", "X", ".", "squeeze", "(", "dim", "=", "d", ")", "\n", "Y", "=", "Y", ".", "squeeze", "(", "dim", "=", "d", ")", "\n", "\n", "", "if", "not", "X", ".", "type", "(", ")", "==", "Y", ".", "type", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input images should have the same dtype.\"", ")", "\n", "\n", "", "if", "len", "(", "X", ".", "shape", ")", "==", "4", ":", "\n", "        ", "avg_pool", "=", "F", ".", "avg_pool2d", "\n", "", "elif", "len", "(", "X", ".", "shape", ")", "==", "5", ":", "\n", "        ", "avg_pool", "=", "F", ".", "avg_pool3d", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Input images should be 4-d or 5-d tensors, but got {X.shape}\"", ")", "\n", "\n", "", "if", "win", "is", "not", "None", ":", "# set win_size", "\n", "        ", "win_size", "=", "win", ".", "shape", "[", "-", "1", "]", "\n", "\n", "", "if", "not", "(", "win_size", "%", "2", "==", "1", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Window size should be odd.\"", ")", "\n", "\n", "", "smaller_side", "=", "min", "(", "X", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "assert", "smaller_side", ">", "(", "win_size", "-", "1", ")", "*", "(", "\n", "2", "**", "4", "\n", ")", ",", "\"Image size should be larger than %d due to the 4 downsamplings in ms-ssim\"", "%", "(", "(", "win_size", "-", "1", ")", "*", "(", "2", "**", "4", ")", ")", "\n", "\n", "if", "weights", "is", "None", ":", "\n", "        ", "weights", "=", "[", "0.0448", ",", "0.2856", ",", "0.3001", ",", "0.2363", ",", "0.1333", "]", "\n", "", "weights", "=", "torch", ".", "FloatTensor", "(", "weights", ")", ".", "to", "(", "X", ".", "device", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "\n", "if", "win", "is", "None", ":", "\n", "        ", "win", "=", "_fspecial_gauss_1d", "(", "win_size", ",", "win_sigma", ")", "\n", "win", "=", "win", ".", "repeat", "(", "[", "X", ".", "shape", "[", "1", "]", "]", "+", "[", "1", "]", "*", "(", "len", "(", "X", ".", "shape", ")", "-", "1", ")", ")", "\n", "\n", "", "levels", "=", "weights", ".", "shape", "[", "0", "]", "\n", "mcs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "levels", ")", ":", "\n", "        ", "ssim_per_channel", ",", "cs", "=", "_ssim", "(", "\n", "X", ",", "Y", ",", "win", "=", "win", ",", "data_range", "=", "data_range", ",", "size_average", "=", "False", ",", "K", "=", "K", ")", "\n", "\n", "if", "i", "<", "levels", "-", "1", ":", "\n", "            ", "mcs", ".", "append", "(", "torch", ".", "relu", "(", "cs", ")", ")", "\n", "padding", "=", "[", "s", "%", "2", "for", "s", "in", "X", ".", "shape", "[", "2", ":", "]", "]", "\n", "X", "=", "avg_pool", "(", "X", ",", "kernel_size", "=", "2", ",", "padding", "=", "padding", ")", "\n", "Y", "=", "avg_pool", "(", "Y", ",", "kernel_size", "=", "2", ",", "padding", "=", "padding", ")", "\n", "\n", "", "", "ssim_per_channel", "=", "torch", ".", "relu", "(", "ssim_per_channel", ")", "# (batch, channel)", "\n", "# (level, batch, channel)", "\n", "mcs_and_ssim", "=", "torch", ".", "stack", "(", "mcs", "+", "[", "ssim_per_channel", "]", ",", "dim", "=", "0", ")", "\n", "ms_ssim_val", "=", "torch", ".", "prod", "(", "mcs_and_ssim", "**", "weights", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "dim", "=", "0", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "return", "ms_ssim_val", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ms_ssim_val", ".", "mean", "(", "1", ")", "\n", "\n"]]}