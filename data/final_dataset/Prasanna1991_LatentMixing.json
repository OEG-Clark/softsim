{"home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.GaussianNoise.__init__": [[92, 98], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "input_shape", ",", "std", "=", "0.05", ",", "image_size", "=", "128", ")", ":", "\n", "        ", "super", "(", "GaussianNoise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shape", "=", "(", "batch_size", ",", ")", "+", "input_shape", "\n", "self", ".", "noise", "=", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "shape", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "image_size", "=", "image_size", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.GaussianNoise.forward": [[98, 106], ["latent-mixing.GaussianNoise.noise.data.normal_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "latent-mixing.GaussianNoise.noise.data.normal_", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "noise", ".", "data", ".", "normal_", "(", "0", ",", "std", "=", "self", ".", "std", ")", "\n", "try", ":", "\n", "            ", "return", "x", "+", "self", ".", "noise", "\n", "", "except", ":", "\n", "            ", "self", ".", "noise", "=", "Variable", "(", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", ")", "+", "(", "1", ",", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "noise", ".", "data", ".", "normal_", "(", "0", ",", "std", "=", "self", ".", "std", ")", "\n", "return", "x", "+", "self", ".", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.__init__": [[108, 143], ["torch.Module.__init__", "latent-mixing.GaussianNoise", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "std", ",", "noise", ",", "input_shape", "=", "(", "1", ",", "128", ",", "128", ")", ",", "p", "=", "0.5", ",", "data", "=", "'xray'", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "noise", "=", "noise", "\n", "self", ".", "gn", "=", "GaussianNoise", "(", "batch_size", ",", "input_shape", "=", "input_shape", ",", "std", "=", "self", ".", "std", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "p", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", "p", ")", "\n", "self", ".", "data", "=", "data", "\n", "if", "data", "==", "'xray'", ":", "\n", "            ", "classCount", "=", "14", "\n", "", "else", ":", "\n", "            ", "classCount", "=", "7", "\n", "\n", "", "if", "data", "==", "'xray'", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "classifierXray", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", "*", "4", "*", "4", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "classCount", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.forward": [[144, 159], ["latent-mixing.Classifier.bn1", "latent-mixing.Classifier.bn2", "latent-mixing.Classifier.bn3", "latent-mixing.Classifier.bn4", "latent-mixing.Classifier.bn5", "latent-mixing.Classifier.view", "latent-mixing.Classifier.classifierXray", "latent-mixing.Classifier.gn", "latent-mixing.Classifier.act", "latent-mixing.Classifier.act", "latent-mixing.Classifier.act", "latent-mixing.Classifier.act", "latent-mixing.Classifier.act", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "latent-mixing.Classifier.conv1", "latent-mixing.Classifier.conv2", "latent-mixing.Classifier.conv3", "latent-mixing.Classifier.conv4", "latent-mixing.Classifier.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "            ", "x", "=", "self", ".", "gn", "(", "x", ")", "\n", "", "x", "=", "self", ".", "bn1", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn4", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn5", "(", "self", ".", "act", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", "*", "4", "*", "4", ")", "\n", "x", "=", "self", ".", "classifierXray", "(", "x", ")", "\n", "if", "self", ".", "data", "==", "'xray'", ":", "\n", "            ", "return", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.HiddenAfterHalf": [[160, 165], ["latent-mixing.Classifier.bn1", "latent-mixing.Classifier.gn", "latent-mixing.Classifier.act", "latent-mixing.Classifier.conv1"], "methods", ["None"], ["", "", "def", "HiddenAfterHalf", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "            ", "x", "=", "self", ".", "gn", "(", "x", ")", "\n", "", "x", "=", "self", ".", "bn1", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.HiddenAfterFirst": [[166, 170], ["latent-mixing.Classifier.HiddenAfterHalf", "latent-mixing.Classifier.bn2", "latent-mixing.Classifier.act", "latent-mixing.Classifier.conv2"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.HiddenAfterHalf"], ["", "def", "HiddenAfterFirst", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "HiddenAfterHalf", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.HiddenAfterOneAndHalf": [[171, 175], ["latent-mixing.Classifier.HiddenAfterFirst", "latent-mixing.Classifier.bn3", "latent-mixing.Classifier.act", "latent-mixing.Classifier.conv3"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.HiddenAfterFirst"], ["", "def", "HiddenAfterOneAndHalf", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "HiddenAfterFirst", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.HiddenAfterSecond": [[176, 180], ["latent-mixing.Classifier.HiddenAfterOneAndHalf", "latent-mixing.Classifier.bn4", "latent-mixing.Classifier.act", "latent-mixing.Classifier.conv4"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.HiddenAfterOneAndHalf"], ["", "def", "HiddenAfterSecond", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "HiddenAfterOneAndHalf", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.LogitAfterHalf": [[181, 184], ["latent-mixing.Classifier.bn2", "latent-mixing.Classifier.LogitAfterFirst", "latent-mixing.Classifier.act", "latent-mixing.Classifier.conv2"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.LogitAfterFirst"], ["", "def", "LogitAfterHalf", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn2", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "return", "self", ".", "LogitAfterFirst", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.LogitAfterFirst": [[185, 188], ["latent-mixing.Classifier.bn3", "latent-mixing.Classifier.LogitAfterOneAndHalf", "latent-mixing.Classifier.act", "latent-mixing.Classifier.conv3"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.LogitAfterOneAndHalf"], ["", "def", "LogitAfterFirst", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn3", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "return", "self", ".", "LogitAfterOneAndHalf", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.LogitAfterOneAndHalf": [[189, 192], ["latent-mixing.Classifier.bn4", "latent-mixing.Classifier.LogitAfterSecond", "latent-mixing.Classifier.act", "latent-mixing.Classifier.conv4"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.LogitAfterSecond"], ["", "def", "LogitAfterOneAndHalf", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn4", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "return", "self", ".", "LogitAfterSecond", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.Classifier.LogitAfterSecond": [[193, 201], ["latent-mixing.Classifier.bn5", "latent-mixing.Classifier.view", "latent-mixing.Classifier.classifierXray", "latent-mixing.Classifier.act", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "latent-mixing.Classifier.conv5"], "methods", ["None"], ["", "def", "LogitAfterSecond", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn5", "(", "self", ".", "act", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", "*", "4", "*", "4", ")", "\n", "x", "=", "self", ".", "classifierXray", "(", "x", ")", "\n", "if", "self", ".", "data", "==", "'xray'", ":", "\n", "            ", "return", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.SemiLossSum.__call__": [[231, 237], ["torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "latent-mixing.linear_rampup"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.linear_rampup"], ["    ", "def", "__call__", "(", "self", ",", "outputs_x", ",", "targets_x", ",", "outputs_u", ",", "targets_u", ",", "epoch", ")", ":", "\n", "\n", "        ", "Lx", "=", "F", ".", "binary_cross_entropy", "(", "outputs_x", ",", "targets_x", ",", "reduction", "=", "'sum'", ")", "\n", "Lu", "=", "F", ".", "mse_loss", "(", "outputs_u", ",", "targets_u", ",", "reduction", "=", "'sum'", ")", "\n", "\n", "return", "Lx", ",", "Lu", ",", "args", ".", "lambda_u", "*", "linear_rampup", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.adjust_learning_rate": [[202, 214], ["zip", "len", "len"], "function", ["None"], ["", "", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "gammas", ",", "schedule", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "assert", "len", "(", "gammas", ")", "==", "len", "(", "schedule", ")", ",", "\"length of gammas and schedule should be equal\"", "\n", "for", "(", "gamma", ",", "step", ")", "in", "zip", "(", "gammas", ",", "schedule", ")", ":", "\n", "        ", "if", "(", "epoch", ">=", "step", ")", ":", "\n", "            ", "lr", "=", "lr", "*", "gamma", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.linear_rampup": [[215, 221], ["numpy.clip", "float"], "function", ["None"], ["", "def", "linear_rampup", "(", "current", ",", "rampup_length", "=", "args", ".", "epochs", ")", ":", "\n", "    ", "if", "rampup_length", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "current", "=", "np", ".", "clip", "(", "current", "/", "rampup_length", ",", "0.0", ",", "1.0", ")", "\n", "return", "float", "(", "current", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.computeAUROC": [[222, 229], ["dataGT.cpu().numpy", "dataPRED.cpu().numpy", "range", "outAUROC.append", "dataGT.cpu", "dataPRED.cpu", "sklearn.metrics.ranking.roc_auc_score"], "function", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append"], ["", "", "def", "computeAUROC", "(", "dataGT", ",", "dataPRED", ",", "classCount", ")", ":", "\n", "    ", "outAUROC", "=", "[", "]", "\n", "datanpGT", "=", "dataGT", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "datanpPRED", "=", "dataPRED", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "classCount", ")", ":", "\n", "        ", "outAUROC", ".", "append", "(", "roc_auc_score", "(", "datanpGT", "[", ":", ",", "i", "]", ",", "datanpPRED", "[", ":", ",", "i", "]", ")", ")", "\n", "", "return", "outAUROC", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.interleave_offsets": [[238, 247], ["range", "offsets.append", "sum"], "function", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append"], ["", "", "def", "interleave_offsets", "(", "batch", ",", "nu", ")", ":", "\n", "    ", "groups", "=", "[", "batch", "//", "(", "nu", "+", "1", ")", "]", "*", "(", "nu", "+", "1", ")", "\n", "for", "x", "in", "range", "(", "batch", "-", "sum", "(", "groups", ")", ")", ":", "\n", "        ", "groups", "[", "-", "x", "-", "1", "]", "+=", "1", "\n", "", "offsets", "=", "[", "0", "]", "\n", "for", "g", "in", "groups", ":", "\n", "        ", "offsets", ".", "append", "(", "offsets", "[", "-", "1", "]", "+", "g", ")", "\n", "", "assert", "offsets", "[", "-", "1", "]", "==", "batch", "\n", "return", "offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.interleave": [[248, 255], ["latent-mixing.interleave_offsets", "range", "len", "torch.cat", "torch.cat", "torch.cat", "range"], "function", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.interleave_offsets"], ["", "def", "interleave", "(", "xy", ",", "batch", ")", ":", "\n", "    ", "nu", "=", "len", "(", "xy", ")", "-", "1", "\n", "offsets", "=", "interleave_offsets", "(", "batch", ",", "nu", ")", "\n", "xy", "=", "[", "[", "v", "[", "offsets", "[", "p", "]", ":", "offsets", "[", "p", "+", "1", "]", "]", "for", "p", "in", "range", "(", "nu", "+", "1", ")", "]", "for", "v", "in", "xy", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "nu", "+", "1", ")", ":", "\n", "        ", "xy", "[", "0", "]", "[", "i", "]", ",", "xy", "[", "i", "]", "[", "i", "]", "=", "xy", "[", "i", "]", "[", "i", "]", ",", "xy", "[", "0", "]", "[", "i", "]", "\n", "", "return", "[", "torch", ".", "cat", "(", "v", ",", "dim", "=", "0", ")", "for", "v", "in", "xy", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.save_checkpoint": [[256, 261], ["os.path.join", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "checkpoint", "=", "args", ".", "out", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filepath", ",", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.main": [[263, 368], ["print", "latent-mixing.Classifier", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "transformList_aug.append", "transformList_aug.append", "transformList_aug.append", "torchvision.Compose", "transformList.append", "torchvision.Compose", "len", "latent-mixing.SemiLossSum", "torch.BCELoss", "tensorboardX.SummaryWriter", "range", "utils.Logger.close", "tensorboardX.SummaryWriter.close", "numpy.argmax", "print", "print", "os.path.isdir", "utils.mkdir_p", "model.cuda.cuda", "model.cuda.parameters", "torchvision.RandomRotation", "torchvision.RandomAffine", "torchvision.ToTensor", "torchvision.ToTensor", "get_dataLoader_mix", "get_dataLoader_mix", "print", "os.path.isfile", "os.path.dirname", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "utils.Logger", "utils.Logger", "utils.Logger.set_names", "latent-mixing.adjust_learning_rate", "print", "latent-mixing.train", "latent-mixing.validate", "latent-mixing.validate", "latent-mixing.validate", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "utils.Logger.append", "max", "latent-mixing.save_checkpoint", "test_AUCS.append", "val_AUCS.append", "os.path.join", "os.path.join", "numpy.max", "numpy.mean", "model.cuda.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.close", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.close", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.mkdir_p", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.get_dataLoader_images.get_dataLoader_mix", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.get_dataLoader_images.get_dataLoader_mix", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.set_names", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.adjust_learning_rate", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.train", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.validate", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.validate", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.validate", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.save_checkpoint", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "print", "(", "\"Working for {}   alpha : {}  numOfLabelled : {}\"", ".", "format", "(", "args", ".", "mixup", ",", "args", ".", "alpha", ",", "args", ".", "howManyLabelled", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "out", ")", ":", "\n", "        ", "mkdir_p", "(", "args", ".", "out", ")", "\n", "\n", "", "minLoss", "=", "100000", "\n", "\n", "#Model and optimizer", "\n", "model", "=", "Classifier", "(", "batch_size", "=", "args", ".", "batch_size", ",", "std", "=", "0.15", ",", "noise", "=", "args", ".", "noise", ",", "data", "=", "args", ".", "dataset", ")", "\n", "if", "use_cuda", ":", "model", "=", "model", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "#Transforms for the data", "\n", "transformList", "=", "[", "]", "\n", "transformList_aug", "=", "[", "]", "\n", "transformList_aug", ".", "append", "(", "transforms", ".", "RandomRotation", "(", "degrees", "=", "(", "-", "10", ",", "10", ")", ")", ")", "\n", "transformList_aug", ".", "append", "(", "transforms", ".", "RandomAffine", "(", "degrees", "=", "0", ",", "translate", "=", "(", "0.1", ",", "0.1", ")", ")", ")", "\n", "transformList_aug", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "trans_aug", "=", "transforms", ".", "Compose", "(", "transformList_aug", ")", "\n", "\n", "transformList", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transformSequence", "=", "transforms", ".", "Compose", "(", "transformList", ")", "\n", "\n", "from", "get_dataLoader_images", "import", "get_dataLoader_mix", "\n", "if", "args", ".", "augu", ":", "\n", "        ", "labeled_trainloader", ",", "unlabeled_trainloader", ",", "val_loader", ",", "test_loader", "=", "get_dataLoader_mix", "(", "\n", "transformSequence", ",", "trans_aug", ",", "labelled", "=", "args", ".", "howManyLabelled", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "        ", "labeled_trainloader", ",", "unlabeled_trainloader", ",", "val_loader", ",", "test_loader", "=", "get_dataLoader_mix", "(", "transformSequence", ",", "\n", "transformSequence", ",", "\n", "labelled", "=", "args", ".", "howManyLabelled", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "\n", "", "ntrain", "=", "len", "(", "labeled_trainloader", ".", "dataset", ")", "\n", "train_criterion", "=", "SemiLossSum", "(", ")", "\n", "criterion", "=", "nn", ".", "BCELoss", "(", ")", "\n", "start_epoch", "=", "0", "\n", "\n", "# Resume", "\n", "title", "=", "'latent-mixing'", "\n", "if", "args", ".", "resume", ":", "\n", "# Load checkpoint.", "\n", "        ", "print", "(", "'==> Resuming from checkpoint..'", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ",", "'Error: no checkpoint directory found!'", "\n", "args", ".", "out", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "resume", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "logger", "=", "Logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'log.txt'", ")", ",", "title", "=", "title", ",", "resume", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "logger", "=", "Logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'log.txt'", ")", ",", "title", "=", "title", ")", "\n", "logger", ".", "set_names", "(", "\n", "[", "'Train Loss'", ",", "'Train Loss X'", ",", "'Train Loss U'", ",", "'Valid Loss'", ",", "'Valid AUC'", ",", "'Test Loss'", ",", "'Test AUC'", "]", ")", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "args", ".", "out", ")", "\n", "step", "=", "0", "\n", "test_AUCS", "=", "[", "]", "\n", "val_AUCS", "=", "[", "]", "\n", "best_AUC", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "        ", "current_learning_rate", "=", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ".", "gammas", ",", "args", ".", "schedule", ")", "\n", "\n", "print", "(", "'\\nEpoch: [%d | %d] LR: %f'", "%", "(", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "current_learning_rate", ")", ")", "\n", "train_loss", ",", "train_loss_x", ",", "train_loss_u", "=", "train", "(", "labeled_trainloader", ",", "unlabeled_trainloader", ",", "model", ",", "optimizer", ",", "\n", "train_criterion", ",", "epoch", ",", "use_cuda", ",", "args", ".", "mixup", ",", "args", ".", "noSharp", ")", "\n", "_", ",", "train_auc", "=", "validate", "(", "labeled_trainloader", ",", "model", ",", "criterion", ",", "epoch", ",", "use_cuda", ",", "mode", "=", "'Train Stats'", ")", "\n", "val_loss", ",", "val_auc", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "use_cuda", ",", "mode", "=", "'Valid Stats'", ")", "\n", "test_loss", ",", "test_auc", "=", "validate", "(", "test_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "use_cuda", ",", "mode", "=", "'Test Stats '", ")", "\n", "\n", "step", "=", "args", ".", "val_iteration", "*", "(", "epoch", "+", "1", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'losses/train_loss'", ",", "train_loss", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'losses/valid_loss'", ",", "val_loss", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'losses/test_loss'", ",", "test_loss", ",", "step", ")", "\n", "\n", "# writer.add_scalar('accuracy/train_acc', train_auc, step)", "\n", "writer", ".", "add_scalar", "(", "'accuracy/val_acc'", ",", "val_auc", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'accuracy/test_acc'", ",", "test_auc", ",", "step", ")", "\n", "\n", "# append logger file", "\n", "logger", ".", "append", "(", "[", "train_loss", ",", "train_loss_x", ",", "train_loss_u", ",", "val_loss", ",", "val_auc", ",", "test_loss", ",", "test_auc", "]", ")", "\n", "\n", "# save model", "\n", "is_best", "=", "val_auc", ">", "best_AUC", "\n", "best_AUC", "=", "max", "(", "val_auc", ",", "best_AUC", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "val_auc", ",", "\n", "'best_acc'", ":", "best_AUC", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ")", "\n", "test_AUCS", ".", "append", "(", "test_auc", ")", "\n", "val_AUCS", ".", "append", "(", "val_auc", ")", "\n", "", "logger", ".", "close", "(", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n", "indx", "=", "np", ".", "argmax", "(", "val_AUCS", ")", "\n", "print", "(", "'Best Val AUC: {} |    Best Test AUC (at best val): {}'", ".", "format", "(", "val_AUCS", "[", "indx", "]", ",", "test_AUCS", "[", "indx", "]", ")", ")", "\n", "print", "(", "'Best Test AUC: {} |    Mean Test AUC: {}'", ".", "format", "(", "np", ".", "max", "(", "test_AUCS", ")", ",", "np", ".", "mean", "(", "test_AUCS", "[", "-", "20", ":", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.train": [[370, 593], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "time.time", "iter", "iter", "model.train", "range", "utils.AverageMeter.update", "inputs_x.size", "torch.cat", "torch.cat", "torch.cat", "numpy.random.beta", "max", "torch.randperm", "torch.randperm", "torch.randperm", "latent-mixing.interleave", "torch.cat", "torch.cat", "torch.cat", "criterion", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "iter.next", "iter.next", "inputs_u.cuda.cuda", "inputs_u2.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "model", "targets_u.detach.detach", "list", "latent-mixing.interleave", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "latent-mixing.train.mixupF"], "function", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.train", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.interleave", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.interleave"], ["", "def", "train", "(", "labeled_trainloader", ",", "unlabeled_trainloader", ",", "model", ",", "optimizer", ",", "criterion", ",", "epoch", ",", "use_cuda", ",", "mixup", "=", "'input'", ",", "noSharp", "=", "False", ",", "alr", "=", "None", ")", ":", "\n", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "losses_x", "=", "AverageMeter", "(", ")", "\n", "losses_u", "=", "AverageMeter", "(", ")", "\n", "ws", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "alrr", "=", "0.", "\n", "\n", "# bar = Bar('Training', max=args.val_iteration)", "\n", "labeled_train_iter", "=", "iter", "(", "labeled_trainloader", ")", "\n", "unlabeled_train_iter", "=", "iter", "(", "unlabeled_trainloader", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", "in", "range", "(", "args", ".", "val_iteration", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "inputs_x", ",", "targets_x", "=", "labeled_train_iter", ".", "next", "(", ")", "\n", "", "except", ":", "\n", "            ", "labeled_train_iter", "=", "iter", "(", "labeled_trainloader", ")", "\n", "inputs_x", ",", "targets_x", "=", "labeled_train_iter", ".", "next", "(", ")", "\n", "\n", "", "try", ":", "\n", "            ", "(", "inputs_u", ",", "inputs_u2", ")", ",", "_", "=", "unlabeled_train_iter", ".", "next", "(", ")", "\n", "", "except", ":", "\n", "            ", "unlabeled_train_iter", "=", "iter", "(", "unlabeled_trainloader", ")", "\n", "(", "inputs_u", ",", "inputs_u2", ")", ",", "_", "=", "unlabeled_train_iter", ".", "next", "(", ")", "\n", "\n", "# measure data loading time", "\n", "", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "batch_size", "=", "inputs_x", ".", "size", "(", "0", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "            ", "inputs_x", ",", "targets_x", "=", "inputs_x", ".", "cuda", "(", ")", ",", "targets_x", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "inputs_u", "=", "inputs_u", ".", "cuda", "(", ")", "\n", "inputs_u2", "=", "inputs_u2", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# compute guessed labels of unlabel samples", "\n", "            ", "outputs_u", "=", "model", "(", "inputs_u", ")", "\n", "outputs_u2", "=", "model", "(", "inputs_u2", ")", "\n", "p", "=", "(", "outputs_u", "+", "outputs_u2", ")", "/", "2", "\n", "if", "not", "noSharp", ":", "\n", "                ", "pt", "=", "p", "**", "(", "1", "/", "args", ".", "T", ")", "\n", "targets_u", "=", "pt", "/", "pt", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "targets_u", "=", "p", "\n", "", "targets_u", "=", "targets_u", ".", "detach", "(", ")", "\n", "\n", "# mixup", "\n", "", "def", "mixupF", "(", "all_inputs", ",", "idx", ",", "l", ")", ":", "\n", "            ", "input_a", ",", "input_b", "=", "all_inputs", ",", "all_inputs", "[", "idx", "]", "\n", "mixed_input", "=", "l", "*", "input_a", "+", "(", "1", "-", "l", ")", "*", "input_b", "\n", "\n", "#interleave labeled and unlabed samples between batches to get correct batchnorm calculation", "\n", "mixed_input", "=", "list", "(", "torch", ".", "split", "(", "mixed_input", ",", "batch_size", ")", ")", "\n", "mixed_input", "=", "interleave", "(", "mixed_input", ",", "batch_size", ")", "\n", "return", "mixed_input", "\n", "\n", "\n", "", "all_targets", "=", "torch", ".", "cat", "(", "[", "targets_x", ",", "targets_u", ",", "targets_u", "]", ",", "dim", "=", "0", ")", "\n", "\n", "l", "=", "np", ".", "random", ".", "beta", "(", "args", ".", "alpha", ",", "args", ".", "alpha", ")", "\n", "l", "=", "max", "(", "l", ",", "1", "-", "l", ")", "\n", "idx", "=", "torch", ".", "randperm", "(", "all_targets", ".", "size", "(", "0", ")", ")", "\n", "\n", "target_a", ",", "target_b", "=", "all_targets", ",", "all_targets", "[", "idx", "]", "\n", "mixed_target", "=", "l", "*", "target_a", "+", "(", "1", "-", "l", ")", "*", "target_b", "\n", "\n", "if", "mixup", "==", "'input'", ":", "\n", "            ", "layer_mix", "=", "0", "\n", "", "elif", "mixup", "==", "'mixup_hidden'", ":", "\n", "            ", "layer_mix", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "", "elif", "mixup", "==", "'only_hidden'", ":", "\n", "            ", "layer_mix", "=", "random", ".", "randint", "(", "1", ",", "2", ")", "\n", "", "elif", "mixup", "==", "'fixHidden05'", ":", "\n", "            ", "layer_mix", "=", "0.5", "\n", "", "elif", "mixup", "==", "'fixHidden1'", ":", "\n", "            ", "layer_mix", "=", "1", "\n", "", "elif", "mixup", "==", "'fixHidden15'", ":", "\n", "            ", "layer_mix", "=", "1.5", "\n", "", "elif", "mixup", "==", "'fixHidden2'", ":", "\n", "            ", "layer_mix", "=", "2", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Unidentified mixup strategy!\"", ")", "\n", "quit", "(", ")", "\n", "\n", "", "out_x", ",", "out_u", ",", "out_u2", "=", "inputs_x", ",", "inputs_u", ",", "inputs_u2", "\n", "\n", "if", "layer_mix", "==", "0", ":", "\n", "            ", "all_inputs", "=", "torch", ".", "cat", "(", "[", "out_x", ",", "out_u", ",", "out_u2", "]", ",", "dim", "=", "0", ")", "\n", "mixed_input", "=", "mixupF", "(", "all_inputs", ",", "idx", ",", "l", ")", "\n", "logits", "=", "[", "model", "(", "mixed_input", "[", "0", "]", ")", "]", "\n", "for", "input", "in", "mixed_input", "[", "1", ":", "]", ":", "\n", "                ", "logits", ".", "append", "(", "model", "(", "input", ")", ")", "\n", "\n", "", "", "elif", "layer_mix", "==", "0.5", ":", "\n", "            ", "all_inputs", "=", "torch", ".", "cat", "(", "[", "out_x", ",", "out_u", ",", "out_u2", "]", ",", "dim", "=", "0", ")", "\n", "mixed_input", "=", "list", "(", "torch", ".", "split", "(", "all_inputs", ",", "batch_size", ")", ")", "\n", "mixed_input", "=", "interleave", "(", "mixed_input", ",", "batch_size", ")", "\n", "\n", "out_x", ",", "out_u", ",", "out_u2", "=", "model", ".", "HiddenAfterHalf", "(", "mixed_input", "[", "0", "]", ")", ",", "model", ".", "HiddenAfterHalf", "(", "mixed_input", "[", "1", "]", ")", ",", "model", ".", "HiddenAfterHalf", "(", "mixed_input", "[", "2", "]", ")", "\n", "logits", "=", "[", "out_x", "]", "\n", "logits", ".", "append", "(", "out_u", ")", "\n", "logits", ".", "append", "(", "out_u2", ")", "\n", "logits", "=", "interleave", "(", "logits", ",", "batch_size", ")", "\n", "out_x", "=", "logits", "[", "0", "]", "\n", "out_u", "=", "logits", "[", "1", "]", "\n", "out_u2", "=", "logits", "[", "2", "]", "\n", "\n", "all_latents", "=", "torch", ".", "cat", "(", "[", "out_x", ",", "out_u", ",", "out_u2", "]", ",", "dim", "=", "0", ")", "\n", "mixed_latents", "=", "mixupF", "(", "all_latents", ",", "idx", ",", "l", ")", "\n", "\n", "logits", "=", "[", "model", ".", "LogitAfterHalf", "(", "mixed_latents", "[", "0", "]", ")", "]", "\n", "for", "input", "in", "mixed_latents", "[", "1", ":", "]", ":", "\n", "                ", "logits", ".", "append", "(", "model", ".", "LogitAfterHalf", "(", "input", ")", ")", "\n", "\n", "", "", "elif", "layer_mix", "==", "1", ":", "\n", "            ", "all_inputs", "=", "torch", ".", "cat", "(", "[", "out_x", ",", "out_u", ",", "out_u2", "]", ",", "dim", "=", "0", ")", "\n", "mixed_input", "=", "list", "(", "torch", ".", "split", "(", "all_inputs", ",", "batch_size", ")", ")", "\n", "mixed_input", "=", "interleave", "(", "mixed_input", ",", "batch_size", ")", "\n", "\n", "out_x", ",", "out_u", ",", "out_u2", "=", "model", ".", "HiddenAfterFirst", "(", "mixed_input", "[", "0", "]", ")", ",", "model", ".", "HiddenAfterFirst", "(", "mixed_input", "[", "1", "]", ")", ",", "model", ".", "HiddenAfterFirst", "(", "mixed_input", "[", "2", "]", ")", "\n", "logits", "=", "[", "out_x", "]", "\n", "logits", ".", "append", "(", "out_u", ")", "\n", "logits", ".", "append", "(", "out_u2", ")", "\n", "logits", "=", "interleave", "(", "logits", ",", "batch_size", ")", "\n", "out_x", "=", "logits", "[", "0", "]", "\n", "out_u", "=", "logits", "[", "1", "]", "\n", "out_u2", "=", "logits", "[", "2", "]", "\n", "\n", "all_latents", "=", "torch", ".", "cat", "(", "[", "out_x", ",", "out_u", ",", "out_u2", "]", ",", "dim", "=", "0", ")", "\n", "mixed_latents", "=", "mixupF", "(", "all_latents", ",", "idx", ",", "l", ")", "\n", "\n", "logits", "=", "[", "model", ".", "LogitAfterFirst", "(", "mixed_latents", "[", "0", "]", ")", "]", "\n", "for", "input", "in", "mixed_latents", "[", "1", ":", "]", ":", "\n", "                ", "logits", ".", "append", "(", "model", ".", "LogitAfterFirst", "(", "input", ")", ")", "\n", "\n", "", "", "elif", "layer_mix", "==", "1.5", ":", "\n", "            ", "all_inputs", "=", "torch", ".", "cat", "(", "[", "out_x", ",", "out_u", ",", "out_u2", "]", ",", "dim", "=", "0", ")", "\n", "mixed_input", "=", "list", "(", "torch", ".", "split", "(", "all_inputs", ",", "batch_size", ")", ")", "\n", "mixed_input", "=", "interleave", "(", "mixed_input", ",", "batch_size", ")", "\n", "\n", "out_x", ",", "out_u", ",", "out_u2", "=", "model", ".", "HiddenAfterOneAndHalf", "(", "mixed_input", "[", "0", "]", ")", ",", "model", ".", "HiddenAfterOneAndHalf", "(", "mixed_input", "[", "1", "]", ")", ",", "model", ".", "HiddenAfterOneAndHalf", "(", "mixed_input", "[", "2", "]", ")", "\n", "logits", "=", "[", "out_x", "]", "\n", "logits", ".", "append", "(", "out_u", ")", "\n", "logits", ".", "append", "(", "out_u2", ")", "\n", "logits", "=", "interleave", "(", "logits", ",", "batch_size", ")", "\n", "out_x", "=", "logits", "[", "0", "]", "\n", "out_u", "=", "logits", "[", "1", "]", "\n", "out_u2", "=", "logits", "[", "2", "]", "\n", "\n", "all_latents", "=", "torch", ".", "cat", "(", "[", "out_x", ",", "out_u", ",", "out_u2", "]", ",", "dim", "=", "0", ")", "\n", "mixed_latents", "=", "mixupF", "(", "all_latents", ",", "idx", ",", "l", ")", "\n", "\n", "logits", "=", "[", "model", ".", "LogitAfterOneAndHalf", "(", "mixed_latents", "[", "0", "]", ")", "]", "\n", "for", "input", "in", "mixed_latents", "[", "1", ":", "]", ":", "\n", "                ", "logits", ".", "append", "(", "model", ".", "LogitAfterOneAndHalf", "(", "input", ")", ")", "\n", "\n", "", "", "elif", "layer_mix", "==", "2", ":", "\n", "            ", "all_inputs", "=", "torch", ".", "cat", "(", "[", "out_x", ",", "out_u", ",", "out_u2", "]", ",", "dim", "=", "0", ")", "\n", "mixed_input", "=", "list", "(", "torch", ".", "split", "(", "all_inputs", ",", "batch_size", ")", ")", "\n", "mixed_input", "=", "interleave", "(", "mixed_input", ",", "batch_size", ")", "\n", "\n", "out_x", ",", "out_u", ",", "out_u2", "=", "model", ".", "HiddenAfterSecond", "(", "mixed_input", "[", "0", "]", ")", ",", "model", ".", "HiddenAfterSecond", "(", "\n", "mixed_input", "[", "1", "]", ")", ",", "model", ".", "HiddenAfterSecond", "(", "mixed_input", "[", "2", "]", ")", "\n", "logits", "=", "[", "out_x", "]", "\n", "logits", ".", "append", "(", "out_u", ")", "\n", "logits", ".", "append", "(", "out_u2", ")", "\n", "logits", "=", "interleave", "(", "logits", ",", "batch_size", ")", "\n", "out_x", "=", "logits", "[", "0", "]", "\n", "out_u", "=", "logits", "[", "1", "]", "\n", "out_u2", "=", "logits", "[", "2", "]", "\n", "\n", "all_latents", "=", "torch", ".", "cat", "(", "[", "out_x", ",", "out_u", ",", "out_u2", "]", ",", "dim", "=", "0", ")", "\n", "mixed_latents", "=", "mixupF", "(", "all_latents", ",", "idx", ",", "l", ")", "\n", "\n", "logits", "=", "[", "model", ".", "LogitAfterSecond", "(", "mixed_latents", "[", "0", "]", ")", "]", "\n", "for", "input", "in", "mixed_latents", "[", "1", ":", "]", ":", "\n", "                ", "logits", ".", "append", "(", "model", ".", "LogitAfterSecond", "(", "input", ")", ")", "\n", "\n", "# put interleaved samples back", "\n", "", "", "logits", "=", "interleave", "(", "logits", ",", "batch_size", ")", "\n", "logits_x", "=", "logits", "[", "0", "]", "\n", "logits_u", "=", "torch", ".", "cat", "(", "logits", "[", "1", ":", "]", ",", "dim", "=", "0", ")", "\n", "\n", "Lx", ",", "Lu", ",", "w", "=", "criterion", "(", "logits_x", ",", "mixed_target", "[", ":", "batch_size", "]", ",", "logits_u", ",", "mixed_target", "[", "batch_size", ":", "]", ",", "epoch", "+", "batch_idx", "/", "args", ".", "val_iteration", ")", "\n", "\n", "loss", "=", "Lx", "+", "w", "*", "Lu", "\n", "\n", "# record loss", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs_x", ".", "size", "(", "0", ")", ")", "\n", "losses_x", ".", "update", "(", "Lx", ".", "item", "(", ")", ",", "inputs_x", ".", "size", "(", "0", ")", ")", "\n", "losses_u", ".", "update", "(", "Lu", ".", "item", "(", ")", ",", "inputs_x", ".", "size", "(", "0", ")", ")", "\n", "ws", ".", "update", "(", "w", ",", "inputs_x", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "#     # uncomment this if you want to plot progress", "\n", "#     bar.suffix  = '({batch}/{size}) Data: {data:.3f}s | Batch: {bt:.3f}s | Total: {total:} | ETA: {eta:} | Loss: {loss:.4f} | Loss_x: {loss_x:.4f} | Loss_u: {loss_u:.4f} | W: {w:.4f}'.format(", "\n", "#                 batch=batch_idx + 1,", "\n", "#                 size=args.val_iteration,", "\n", "#                 data=data_time.avg,", "\n", "#                 bt=batch_time.avg,", "\n", "#                 total=bar.elapsed_td,", "\n", "#                 eta=bar.eta_td,", "\n", "#                 loss=losses.avg,", "\n", "#                 loss_x=losses_x.avg,", "\n", "#                 loss_u=losses_u.avg,", "\n", "#                 w=ws.avg", "\n", "#                 )", "\n", "#     bar.next()", "\n", "# bar.finish()", "\n", "", "return", "(", "losses", ".", "avg", ",", "losses_x", ".", "avg", ",", "losses_u", ".", "avg", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.validate": [[594, 630], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.eval", "time.time", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "latent-mixing.computeAUROC", "numpy.array().mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "utils.AverageMeter.update", "model", "criterion", "criterion.item", "utils.AverageMeter.update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.array", "criterion.item", "inputs.size", "time.time", "inputs.cuda", "targets.cuda", "targets.detach", "model.detach"], "function", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.latent-mixing.computeAUROC", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.update"], ["", "def", "validate", "(", "valloader", ",", "model", ",", "criterion", ",", "epoch", ",", "use_cuda", ",", "mode", ")", ":", "\n", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "# bar = Bar(f'{mode}', max=len(valloader))", "\n", "outGT", "=", "torch", ".", "FloatTensor", "(", ")", ".", "cuda", "(", ")", "\n", "outPRED", "=", "torch", ".", "FloatTensor", "(", ")", ".", "cuda", "(", ")", "\n", "total_val_loss", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "valloader", ")", ":", "\n", "# measure data loading time", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "total_val_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "outGT", "=", "torch", ".", "cat", "(", "(", "outGT", ",", "targets", ".", "detach", "(", ")", ")", ",", "0", ")", "\n", "outPRED", "=", "torch", ".", "cat", "(", "(", "outPRED", ",", "outputs", ".", "detach", "(", ")", ")", ",", "0", ")", "\n", "\n", "", "", "aurocIndividual", "=", "computeAUROC", "(", "outGT", ",", "outPRED", ",", "14", ")", "\n", "aurocMean", "=", "np", ".", "array", "(", "aurocIndividual", ")", ".", "mean", "(", ")", "\n", "\n", "return", "total_val_loss", ",", "aurocMean", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.get_dataLoader_images.TransformTwice.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.get_dataLoader_images.TransformTwice.__call__": [[13, 17], ["get_dataLoader_images.TransformTwice.transform", "get_dataLoader_images.TransformTwice.transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inp", ")", ":", "\n", "        ", "out1", "=", "self", ".", "transform", "(", "inp", ")", "\n", "out2", "=", "self", ".", "transform", "(", "inp", ")", "\n", "return", "out1", ",", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.get_dataLoader_images.DatasetGenerator_Mix.__init__": [[47, 67], ["open", "open.close", "open.readline", "open.readline.split", "os.path.join", "get_dataLoader_images.DatasetGenerator_Mix.listImagePaths.append", "get_dataLoader_images.DatasetGenerator_Mix.listImageLabels.append", "int", "float"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.close", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "textFile", ",", "transform", ")", ":", "\n", "        ", "self", ".", "listImagePaths", "=", "[", "]", "\n", "self", ".", "listImageLabels", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "pathDatasetFile", "=", "textFile", "[", "0", "]", "\n", "fileDescriptor", "=", "open", "(", "pathDatasetFile", ",", "\"r\"", ")", "\n", "line", "=", "True", "\n", "\n", "while", "line", ":", "\n", "            ", "line", "=", "fileDescriptor", ".", "readline", "(", ")", "\n", "if", "line", ":", "\n", "                ", "lineItems", "=", "line", ".", "split", "(", ")", "\n", "imagePath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "lineItems", "[", "0", "]", ")", "\n", "imageLabel", "=", "lineItems", "[", "1", ":", "]", "\n", "imageLabel", "=", "[", "int", "(", "float", "(", "i", ")", ")", "for", "i", "in", "imageLabel", "]", "\n", "\n", "self", ".", "listImagePaths", ".", "append", "(", "imagePath", ")", "\n", "self", ".", "listImageLabels", ".", "append", "(", "imageLabel", ")", "\n", "", "", "fileDescriptor", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.get_dataLoader_images.DatasetGenerator_Mix.__getitem__": [[68, 74], ["PIL.Image.open().convert", "torch.FloatTensor", "get_dataLoader_images.DatasetGenerator_Mix.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imagePath", "=", "self", ".", "listImagePaths", "[", "index", "]", "\n", "imageData", "=", "Image", ".", "open", "(", "imagePath", ")", ".", "convert", "(", "'L'", ")", "\n", "imageLabel", "=", "torch", ".", "FloatTensor", "(", "self", ".", "listImageLabels", "[", "index", "]", ")", "\n", "if", "self", ".", "transform", "!=", "None", ":", "imageData", "=", "self", ".", "transform", "(", "imageData", ")", "\n", "return", "imageData", ",", "imageLabel", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.get_dataLoader_images.DatasetGenerator_Mix.__len__": [[75, 77], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "listImagePaths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.None.get_dataLoader_images.get_dataLoader_mix": [[19, 45], ["get_dataLoader_images.DatasetGenerator_Mix", "get_dataLoader_images.DatasetGenerator_Mix", "get_dataLoader_images.DatasetGenerator_Mix", "get_dataLoader_images.DatasetGenerator_Mix", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "str", "get_dataLoader_images.TransformTwice"], "function", ["None"], ["", "", "def", "get_dataLoader_mix", "(", "transformSequence", ",", "trans_aug", ",", "labelled", "=", "500", ",", "batch_size", "=", "8", ",", "\n", "txtFilePath", "=", "'Labels/'", ",", "\n", "pathDirData", "=", "'/home/pkg2182/Workplace/part_of_all'", ")", ":", "\n", "\n", "    ", "pathFileTrain_L", "=", "txtFilePath", "+", "'/train_'", "+", "str", "(", "labelled", ")", "+", "'.txt'", "\n", "pathFileTrain_U", "=", "txtFilePath", "+", "'/train_500_unlab.txt'", "\n", "validation", "=", "txtFilePath", "+", "'/train_500_val_5000.txt'", "\n", "test", "=", "txtFilePath", "+", "'/train_500_test_10000.txt'", "\n", "\n", "\n", "datasetTrainLabelled", "=", "DatasetGenerator_Mix", "(", "path", "=", "pathDirData", ",", "textFile", "=", "[", "pathFileTrain_L", "]", ",", "\n", "transform", "=", "trans_aug", ")", "\n", "datasetTrainUnLabelled", "=", "DatasetGenerator_Mix", "(", "path", "=", "pathDirData", ",", "textFile", "=", "[", "pathFileTrain_U", "]", ",", "\n", "transform", "=", "TransformTwice", "(", "trans_aug", ")", ")", "\n", "datasetVal", "=", "DatasetGenerator_Mix", "(", "path", "=", "pathDirData", ",", "textFile", "=", "[", "validation", "]", ",", "\n", "transform", "=", "transformSequence", ")", "\n", "datasetTest", "=", "DatasetGenerator_Mix", "(", "path", "=", "pathDirData", ",", "textFile", "=", "[", "test", "]", ",", "\n", "transform", "=", "transformSequence", ")", "\n", "\n", "\n", "dataLoaderTrainLabelled", "=", "DataLoader", "(", "dataset", "=", "datasetTrainLabelled", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ",", "drop_last", "=", "True", ")", "\n", "dataLoaderTrainUnLabelled", "=", "DataLoader", "(", "dataset", "=", "datasetTrainUnLabelled", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ",", "drop_last", "=", "True", ")", "\n", "dataLoaderVal", "=", "DataLoader", "(", "dataset", "=", "datasetVal", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "pin_memory", "=", "True", ")", "\n", "dataLoaderTest", "=", "DataLoader", "(", "dataset", "=", "datasetTest", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "dataLoaderTrainLabelled", ",", "dataLoaderTrainUnLabelled", ",", "dataLoaderVal", ",", "dataLoaderTest", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.eval.accuracy": [[5, 19], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "", "", ""]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.__init__": [[25, 46], ["open", "logger.Logger.file.readline", "logger.Logger.rstrip().split", "enumerate", "logger.Logger.file.close", "open", "open", "numbers.rstrip().split.rstrip().split.rstrip().split", "range", "logger.Logger.rstrip", "len", "logger.Logger.numbers[].append", "numbers.rstrip().split.rstrip().split.rstrip"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.close", "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append"], ["def", "__init__", "(", "self", ",", "fpath", ",", "title", "=", "None", ",", "resume", "=", "False", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "self", ".", "resume", "=", "resume", "\n", "self", ".", "title", "=", "''", "if", "title", "==", "None", "else", "title", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "if", "resume", ":", "\n", "                ", "self", ".", "file", "=", "open", "(", "fpath", ",", "'r'", ")", "\n", "name", "=", "self", ".", "file", ".", "readline", "(", ")", "\n", "self", ".", "names", "=", "name", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "=", "{", "}", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "                    ", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "\n", "", "for", "numbers", "in", "self", ".", "file", ":", "\n", "                    ", "numbers", "=", "numbers", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "numbers", ")", ")", ":", "\n", "                        ", "self", ".", "numbers", "[", "self", ".", "names", "[", "i", "]", "]", ".", "append", "(", "numbers", "[", "i", "]", ")", "\n", "", "", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'a'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.set_names": [[47, 59], ["enumerate", "logger.Logger.file.write", "logger.Logger.file.flush", "logger.Logger.file.write", "logger.Logger.file.write"], "methods", ["None"], ["", "", "", "def", "set_names", "(", "self", ",", "names", ")", ":", "\n", "        ", "if", "self", ".", "resume", ":", "\n", "            ", "pass", "\n", "# initialize numbers as empty list", "\n", "", "self", ".", "numbers", "=", "{", "}", "\n", "self", ".", "names", "=", "names", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "name", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append": [[61, 69], ["enumerate", "logger.Logger.file.write", "logger.Logger.file.flush", "len", "len", "logger.Logger.file.write", "logger.Logger.file.write", "logger.Logger.numbers[].append"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append"], ["", "def", "append", "(", "self", ",", "numbers", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "names", ")", "==", "len", "(", "numbers", ")", ",", "'Numbers do not match names'", "\n", "for", "index", ",", "num", "in", "enumerate", "(", "numbers", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "\"{0:.6f}\"", ".", "format", "(", "num", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "self", ".", "names", "[", "index", "]", "]", ".", "append", "(", "num", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.plot": [[70, 78], ["enumerate", "matplotlib.legend", "matplotlib.grid", "numpy.arange", "matplotlib.plot", "len", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.LoggerMonitor.plot"], ["", "def", "plot", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "names", "=", "self", ".", "names", "if", "names", "==", "None", "else", "names", "\n", "numbers", "=", "self", ".", "numbers", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "            ", "x", "=", "np", ".", "arange", "(", "len", "(", "numbers", "[", "name", "]", ")", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "asarray", "(", "numbers", "[", "name", "]", ")", ")", "\n", "", "plt", ".", "legend", "(", "[", "self", ".", "title", "+", "'('", "+", "name", "+", "')'", "for", "name", "in", "names", "]", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.close": [[79, 82], ["logger.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.LoggerMonitor.__init__": [[85, 91], ["paths.items", "Logger.Logger", "Logger.LoggerMonitor.loggers.append"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.Logger.append"], ["def", "__init__", "(", "self", ",", "paths", ")", ":", "\n", "        ", "'''paths is a distionary with {name:filepath} pair'''", "\n", "self", ".", "loggers", "=", "[", "]", "\n", "for", "title", ",", "path", "in", "paths", ".", "items", "(", ")", ":", "\n", "            ", "logger", "=", "Logger", "(", "path", ",", "title", "=", "title", ",", "resume", "=", "True", ")", "\n", "self", ".", "loggers", ".", "append", "(", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.LoggerMonitor.plot": [[92, 100], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.legend", "matplotlib.grid", "logger.plot_overlap"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.plot_overlap"], ["", "", "def", "plot", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "121", ")", "\n", "legend_text", "=", "[", "]", "\n", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "legend_text", "+=", "plot_overlap", "(", "logger", ",", "names", ")", "\n", "", "plt", ".", "legend", "(", "legend_text", ",", "bbox_to_anchor", "=", "(", "1.05", ",", "1", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.savefig": [[11, 14], ["matplotlib.savefig"], "function", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.savefig"], ["def", "savefig", "(", "fname", ",", "dpi", "=", "None", ")", ":", "\n", "    ", "dpi", "=", "150", "if", "dpi", "==", "None", "else", "dpi", "\n", "plt", ".", "savefig", "(", "fname", ",", "dpi", "=", "dpi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.plot_overlap": [[15, 22], ["enumerate", "numpy.arange", "matplotlib.plot", "len", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.logger.LoggerMonitor.plot"], ["", "def", "plot_overlap", "(", "logger", ",", "names", "=", "None", ")", ":", "\n", "    ", "names", "=", "logger", ".", "names", "if", "names", "==", "None", "else", "names", "\n", "numbers", "=", "logger", ".", "numbers", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "len", "(", "numbers", "[", "name", "]", ")", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "asarray", "(", "numbers", "[", "name", "]", ")", ")", "\n", "", "return", "[", "logger", ".", "title", "+", "'('", "+", "name", "+", "')'", "for", "name", "in", "names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.__init__": [[63, 65], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.reset": [[66, 71], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.AverageMeter.update": [[72, 77], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.get_mean_and_std": [[19, 33], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.init_params": [[34, 48], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prasanna1991_LatentMixing.utils.misc.mkdir_p": [[49, 58], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "", "", "", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "'''make dir if not exist'''", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]]}