{"home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.None.two_camera_player.main": [[11, 121], ["utils.player.Player", "pyrealsense2.pointcloud", "pyrealsense2.pointcloud", "datetime.datetime.now", "datetime.datetime.now.strftime", "os.makedirs", "os.makedirs", "print", "utils.player.Player.stop", "print", "utils.player.Player.getFrames", "frame_left.get_depth_frame", "frame_right.get_depth_frame", "pyrealsense2.colorizer().colorize", "pyrealsense2.colorizer().colorize", "numpy.asanyarray", "numpy.asanyarray", "numpy.hstack", "cv2.resize", "cv2.imshow", "cv2.waitKey", "rs.colorizer().colorize.get_data", "rs.colorizer().colorize.get_data", "rs.pointcloud.calculate", "rs.pointcloud.calculate", "numpy.save", "print", "numpy.save", "print", "rs.pointcloud.calculate", "numpy.array", "numpy.save", "print", "rs.pointcloud.calculate", "numpy.array", "numpy.save", "print", "ord", "frame_left.get_color_frame", "frame_right.get_color_frame", "rs.pointcloud.map_to", "rs.pointcloud.map_to", "rs.pointcloud.calculate", "rs.pointcloud.calculate", "pc_left.calculate.export_to_ply", "print", "pc_right.calculate.export_to_ply", "print", "cv2.destroyAllWindows", "pyrealsense2.colorizer", "pyrealsense2.colorizer", "ord", "numpy.array", "numpy.array", "pc_left.calculate.get_vertices", "pc_right.calculate.get_vertices", "Exception", "pc_left.calculate.get_vertices", "pc_right.calculate.get_vertices", "numpy.nonzero", "numpy.nonzero", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.stop", "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.getFrames"], ["def", "main", "(", ")", ":", "\n", "    ", "record", "=", "True", "\n", "plr", "=", "Player", "(", "colour", "=", "True", ",", "record", "=", "False", ")", "\n", "\n", "# initialize placeholder point clouds", "\n", "pc_left", "=", "rs", ".", "pointcloud", "(", ")", "\n", "pc_right", "=", "rs", ".", "pointcloud", "(", ")", "\n", "\n", "# create prefix and directories for naming files", "\n", "current_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "prefix", "=", "current_time", ".", "strftime", "(", "\"%Y-%m-%d:%H:%M\"", ")", "\n", "\n", "npy_dir", "=", "\"data/\"", "+", "prefix", "+", "\"/npys/\"", "\n", "ply_dir", "=", "\"data/\"", "+", "prefix", "+", "\"/plys/\"", "\n", "\n", "os", ".", "makedirs", "(", "npy_dir", ")", "\n", "os", ".", "makedirs", "(", "ply_dir", ")", "\n", "\n", "\n", "# initialise counters for naming files", "\n", "ply_counter", "=", "npy_counter", "=", "0", "\n", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "[", "frame_left", ",", "frame_right", "]", "=", "plr", ".", "getFrames", "(", ")", "\n", "if", "not", "frame_left", "or", "not", "frame_right", ":", "\n", "                ", "continue", "\n", "", "depth_frame_left", "=", "frame_left", ".", "get_depth_frame", "(", ")", "\n", "depth_frame_right", "=", "frame_right", ".", "get_depth_frame", "(", ")", "\n", "\n", "depth_color_frame_left", "=", "rs", ".", "colorizer", "(", ")", ".", "colorize", "(", "depth_frame_left", ")", "\n", "depth_color_frame_right", "=", "rs", ".", "colorizer", "(", ")", ".", "colorize", "(", "depth_frame_right", ")", "\n", "\n", "# Convert depth_frame to numpy array to render image", "\n", "depth_color_image_left", "=", "np", ".", "asanyarray", "(", "depth_color_frame_left", ".", "get_data", "(", ")", ")", "\n", "depth_color_image_right", "=", "np", ".", "asanyarray", "(", "depth_color_frame_right", ".", "get_data", "(", ")", ")", "\n", "\n", "depth_color_image", "=", "np", ".", "hstack", "(", "(", "depth_color_image_left", ",", "depth_color_image_right", ")", ")", "\n", "\n", "# resize to fit screen, change as desired", "\n", "image", "=", "cv2", ".", "resize", "(", "depth_color_image", ",", "(", "1440", ",", "720", ")", ")", "\n", "\n", "# Render image in opencv window", "\n", "cv2", ".", "imshow", "(", "\"Depth Stream\"", ",", "image", ")", "\n", "key", "=", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n", "# if s is pressed save .npy", "\n", "if", "key", "==", "ord", "(", "'s'", ")", "and", "not", "record", ":", "\n", "\n", "                ", "points_left", "=", "pc_left", ".", "calculate", "(", "depth_frame_left", ")", "\n", "points_right", "=", "pc_right", ".", "calculate", "(", "depth_frame_right", ")", "\n", "\n", "np", ".", "save", "(", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"left\"", ",", "np", ".", "array", "(", "points_left", ".", "get_vertices", "(", ")", ")", ")", "\n", "print", "(", "\"File saved to \"", "+", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"left.npy\"", ")", "\n", "\n", "np", ".", "save", "(", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"right\"", ",", "np", ".", "array", "(", "points_right", ".", "get_vertices", "(", ")", ")", ")", "\n", "print", "(", "\"File saved to \"", "+", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"right.npy\"", ")", "\n", "\n", "npy_counter", "+=", "1", "\n", "", "if", "record", ":", "\n", "# convert and save left file", "\n", "                ", "points_left", "=", "pc_left", ".", "calculate", "(", "depth_frame_left", ")", "\n", "points_left", "=", "np", ".", "array", "(", "points_left", ".", "get_vertices", "(", ")", ")", "\n", "# print(points_left.shape)", "\n", "points_left", "=", "points_left", "[", "np", ".", "nonzero", "(", "points_left", ")", "]", "\n", "np", ".", "save", "(", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"left\"", ",", "points_left", ")", "\n", "print", "(", "\"File saved to \"", "+", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"left.npy\"", ")", "\n", "\n", "# convert and save right file", "\n", "points_right", "=", "pc_right", ".", "calculate", "(", "depth_frame_right", ")", "\n", "points_right", "=", "np", ".", "array", "(", "points_right", ".", "get_vertices", "(", ")", ")", "\n", "points_right", "=", "points_right", "[", "np", ".", "nonzero", "(", "points_right", ")", "]", "\n", "np", ".", "save", "(", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"right\"", ",", "points_right", ")", "\n", "print", "(", "\"File saved to \"", "+", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"right.npy\"", ")", "\n", "\n", "npy_counter", "+=", "1", "\n", "if", "npy_counter", ">", "200", ":", "\n", "                    ", "raise", "Exception", "(", "\"finished recording\"", ")", "\n", "# time.sleep(0.1)", "\n", "\n", "\n", "# if a is pressed save .ply", "\n", "", "", "if", "key", "==", "ord", "(", "'a'", ")", ":", "\n", "\n", "                ", "color_frame_left", "=", "frame_left", ".", "get_color_frame", "(", ")", "\n", "color_frame_right", "=", "frame_right", ".", "get_color_frame", "(", ")", "\n", "\n", "# ply's require a colour mapping", "\n", "pc_left", ".", "map_to", "(", "color_frame_left", ")", "\n", "pc_right", ".", "map_to", "(", "color_frame_right", ")", "\n", "\n", "points_left", "=", "pc_left", ".", "calculate", "(", "depth_frame_left", ")", "\n", "points_right", "=", "pc_right", ".", "calculate", "(", "depth_frame_right", ")", "\n", "\n", "points_left", ".", "export_to_ply", "(", "ply_dir", "+", "str", "(", "ply_counter", ")", "+", "\"left.ply\"", ",", "color_frame_left", ")", "\n", "print", "(", "\"File saved to \"", "+", "ply_dir", "+", "str", "(", "ply_counter", ")", "+", "\"left.ply\"", ")", "\n", "\n", "points_right", ".", "export_to_ply", "(", "ply_dir", "+", "str", "(", "ply_counter", ")", "+", "\"right.ply\"", ",", "color_frame_right", ")", "\n", "print", "(", "\"File saved to \"", "+", "ply_dir", "+", "str", "(", "ply_counter", ")", "+", "\"right.ply\"", ")", "\n", "\n", "ply_counter", "+=", "1", "\n", "\n", "# if pressed escape exit program ", "\n", "", "if", "key", "==", "27", ":", "\n", "                ", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "break", "\n", "", "", "", "finally", ":", "\n", "        ", "print", "(", "\"Stopping pipelines.\"", ")", "\n", "plr", ".", "stop", "(", ")", "\n", "print", "(", "\"Compacting files.\"", ")", "\n", "# pcr = Processor(npy_dir,crop=False, overwrite=True)", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.None.two_camera_reader.main": [[10, 104], ["utils.reader.Player", "pyrealsense2.pointcloud", "pyrealsense2.pointcloud", "datetime.datetime.now", "datetime.datetime.now.strftime", "numpy.zeros", "print", "utils.reader.Player.stop", "print", "utils.processor.Processor", "utils.processor.Processor.compact", "cv2.waitKey", "cv2.imshow", "ord", "utils.reader.Player.playback_left.resume", "utils.reader.Player.playback_right.resume", "utils.reader.Player.getFrames", "frame_left.get_depth_frame", "frame_right.get_depth_frame", "pyrealsense2.colorizer().colorize", "pyrealsense2.colorizer().colorize", "numpy.asanyarray", "numpy.asanyarray", "numpy.hstack", "cv2.resize", "utils.reader.Player.playback_left.pause", "utils.reader.Player.playback_right.pause", "ord", "rs.pointcloud.calculate", "rs.pointcloud.calculate", "numpy.save", "print", "numpy.save", "print", "ord", "frame_left.get_color_frame", "frame_right.get_color_frame", "rs.pointcloud.map_to", "rs.pointcloud.map_to", "rs.pointcloud.calculate", "rs.pointcloud.calculate", "pc_left.calculate.export_to_ply", "print", "pc_right.calculate.export_to_ply", "print", "cv2.destroyAllWindows", "rs.colorizer().colorize.get_data", "rs.colorizer().colorize.get_data", "numpy.array", "numpy.array", "pyrealsense2.colorizer", "pyrealsense2.colorizer", "pc_left.calculate.get_vertices", "pc_right.calculate.get_vertices", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.stop", "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.processor.Processor.compact", "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.getFrames"], ["def", "main", "(", ")", ":", "\n", "    ", "plr", "=", "Player", "(", "colour", "=", "True", ",", "record", "=", "False", ")", "\n", "\n", "# initialize placeholder point clouds", "\n", "pc_left", "=", "rs", ".", "pointcloud", "(", ")", "\n", "pc_right", "=", "rs", ".", "pointcloud", "(", ")", "\n", "\n", "# create prefix and directories for naming files", "\n", "current_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "prefix", "=", "current_time", ".", "strftime", "(", "\"%Y-%m-%d:%H:%M\"", ")", "\n", "\n", "npy_dir", "=", "\"data/\"", "+", "prefix", "+", "\"/npys/\"", "\n", "ply_dir", "=", "\"data/\"", "+", "prefix", "+", "\"/plys/\"", "\n", "\n", "# initialise counters for naming files", "\n", "ply_counter", "=", "npy_counter", "=", "0", "\n", "image", "=", "np", ".", "zeros", "(", "1", ")", "\n", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "key", "=", "cv2", ".", "waitKey", "(", "1", ")", "\n", "if", "key", "==", "ord", "(", "'l'", ")", ":", "\n", "                ", "plr", ".", "playback_left", ".", "resume", "(", ")", "\n", "plr", ".", "playback_right", ".", "resume", "(", ")", "\n", "[", "frame_left", ",", "frame_right", "]", "=", "plr", ".", "getFrames", "(", ")", "\n", "if", "not", "frame_left", "or", "not", "frame_right", ":", "\n", "                    ", "continue", "\n", "", "depth_frame_left", "=", "frame_left", ".", "get_depth_frame", "(", ")", "\n", "depth_frame_right", "=", "frame_right", ".", "get_depth_frame", "(", ")", "\n", "\n", "depth_color_frame_left", "=", "rs", ".", "colorizer", "(", ")", ".", "colorize", "(", "depth_frame_left", ")", "\n", "depth_color_frame_right", "=", "rs", ".", "colorizer", "(", ")", ".", "colorize", "(", "depth_frame_right", ")", "\n", "\n", "# Convert depth_frame to numpy array to render image", "\n", "depth_color_image_left", "=", "np", ".", "asanyarray", "(", "depth_color_frame_left", ".", "get_data", "(", ")", ")", "\n", "depth_color_image_right", "=", "np", ".", "asanyarray", "(", "depth_color_frame_right", ".", "get_data", "(", ")", ")", "\n", "\n", "depth_color_image", "=", "np", ".", "hstack", "(", "(", "depth_color_image_left", ",", "depth_color_image_right", ")", ")", "\n", "\n", "# resize to fit screen, change as desired", "\n", "image", "=", "cv2", ".", "resize", "(", "depth_color_image", ",", "(", "1440", ",", "720", ")", ")", "\n", "", "else", ":", "\n", "                ", "plr", ".", "playback_left", ".", "pause", "(", ")", "\n", "plr", ".", "playback_right", ".", "pause", "(", ")", "\n", "\n", "# Render image in opencv window", "\n", "", "cv2", ".", "imshow", "(", "\"Depth Stream\"", ",", "image", ")", "\n", "\n", "# if s is pressed save .npy", "\n", "if", "key", "==", "ord", "(", "'s'", ")", ":", "\n", "\n", "                ", "points_left", "=", "pc_left", ".", "calculate", "(", "depth_frame_left", ")", "\n", "points_right", "=", "pc_right", ".", "calculate", "(", "depth_frame_right", ")", "\n", "\n", "np", ".", "save", "(", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"left\"", ",", "np", ".", "array", "(", "points_left", ".", "get_vertices", "(", ")", ")", ")", "\n", "print", "(", "\"File saved to \"", "+", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"left.npy\"", ")", "\n", "\n", "np", ".", "save", "(", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"right\"", ",", "np", ".", "array", "(", "points_right", ".", "get_vertices", "(", ")", ")", ")", "\n", "print", "(", "\"File saved to \"", "+", "npy_dir", "+", "str", "(", "npy_counter", ")", "+", "\"right.npy\"", ")", "\n", "\n", "npy_counter", "+=", "1", "\n", "\n", "\n", "# if a is pressed save .ply", "\n", "", "if", "key", "==", "ord", "(", "'a'", ")", ":", "\n", "\n", "                ", "color_frame_left", "=", "frame_left", ".", "get_color_frame", "(", ")", "\n", "color_frame_right", "=", "frame_right", ".", "get_color_frame", "(", ")", "\n", "\n", "# ply's require a colour mapping", "\n", "pc_left", ".", "map_to", "(", "color_frame_left", ")", "\n", "pc_right", ".", "map_to", "(", "color_frame_right", ")", "\n", "\n", "points_left", "=", "pc_left", ".", "calculate", "(", "depth_frame_left", ")", "\n", "points_right", "=", "pc_right", ".", "calculate", "(", "depth_frame_right", ")", "\n", "\n", "points_left", ".", "export_to_ply", "(", "ply_dir", "+", "str", "(", "ply_counter", ")", "+", "\"left.ply\"", ",", "color_frame_left", ")", "\n", "print", "(", "\"File saved to \"", "+", "ply_dir", "+", "str", "(", "ply_counter", ")", "+", "\"left.ply\"", ")", "\n", "\n", "points_right", ".", "export_to_ply", "(", "ply_dir", "+", "str", "(", "ply_counter", ")", "+", "\"right.ply\"", ",", "color_frame_right", ")", "\n", "print", "(", "\"File saved to \"", "+", "ply_dir", "+", "str", "(", "ply_counter", ")", "+", "\"right.ply\"", ")", "\n", "\n", "ply_counter", "+=", "1", "\n", "\n", "# if pressed escape exit program ", "\n", "", "if", "key", "==", "27", ":", "\n", "                ", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "break", "\n", "", "", "", "finally", ":", "\n", "        ", "print", "(", "\"Stopping pipelines.\"", ")", "\n", "plr", ".", "stop", "(", ")", "\n", "print", "(", "\"Compacting files.\"", ")", "\n", "pcr", "=", "Processor", "(", "npy_dir", ",", "crop", "=", "False", ",", "overwrite", "=", "False", ")", "\n", "pcr", ".", "compact", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.processor.Processor.__init__": [[11, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ",", "xlim", "=", "100", ",", "ylim", "=", "100", ",", "zlim", "=", "0.1", ",", "crop", "=", "True", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "xlim", "=", "xlim", "\n", "self", ".", "ylim", "=", "ylim", "\n", "self", ".", "zlim", "=", "zlim", "\n", "self", ".", "file_path", "=", "file_path", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "overwrite", "=", "overwrite", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.processor.Processor.compact": [[19, 42], ["glob.glob", "glob.glob.sort", "numpy.array_split", "range", "enumerate", "len", "threading.Thread", "threads.append", "threading.Thread.start", "text.isdigit", "int", "text.lower", "processor.Processor.compact.atoi"], "methods", ["None"], ["", "def", "compact", "(", "self", ")", ":", "\n", "        ", "def", "atoi", "(", "text", ")", ":", "\n", "            ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", ".", "lower", "(", ")", "\n", "\n", "", "def", "natural_keys", "(", "text", ")", ":", "\n", "            ", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "'(\\d+)'", ",", "text", ")", "]", "\n", "\n", "", "def", "croppedValues", "(", "arr", ")", ":", "\n", "            ", "crop", "=", "[", "]", "\n", "for", "i", ",", "entry", "in", "enumerate", "(", "arr", ")", ":", "\n", "                ", "if", "abs", "(", "entry", "[", "0", "]", ")", "<=", "self", ".", "xlim", "and", "abs", "(", "entry", "[", "1", "]", ")", "<=", "self", ".", "ylim", "and", "abs", "(", "entry", "[", "2", "]", ")", "<=", "self", ".", "zlim", ":", "\n", "                    ", "crop", ".", "append", "(", "i", ")", "\n", "", "", "return", "crop", "\n", "\n", "", "npy_list", "=", "glob", ".", "glob", "(", "self", ".", "file_path", "+", "\"*.npy\"", ")", "\n", "npy_list", ".", "sort", "(", "key", "=", "natural_keys", ")", "\n", "npy_lists", "=", "np", ".", "array_split", "(", "npy_list", ",", "6", ")", "\n", "threads", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "npy_lists", ")", ")", ":", "\n", "# print(npy_list)", "\n", "            ", "t", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "compact_worker", ",", "args", "=", "(", "npy_lists", "[", "i", "]", ",", ")", ")", "\n", "threads", ".", "append", "(", "t", ")", "\n", "t", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.processor.Processor.compact_worker": [[43, 72], ["numpy.load", "print", "type", "type", "numpy.empty", "range", "numpy.asarray", "print", "print", "print", "numpy.void", "len", "numpy.save", "numpy.save", "numpy.nonzero", "len", "os.path.basename", "processor.Processor.compact.croppedValues"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.archive.stitch_two_npy.croppedValues"], ["", "", "def", "compact_worker", "(", "self", ",", "npy_list", ")", ":", "\n", "            ", "for", "npy", "in", "npy_list", ":", "\n", "                ", "points", "=", "np", ".", "load", "(", "npy", ")", "\n", "print", "(", "\"started: \"", ",", "npy", ")", "\n", "# if this is an unprocessed file, process", "\n", "if", "type", "(", "points", "[", "0", "]", ")", "is", "type", "(", "np", ".", "void", "(", "0", ")", ")", ":", "\n", "                    ", "points", "=", "points", "[", "np", ".", "nonzero", "(", "points", ")", "]", "\n", "points_new", "=", "np", ".", "empty", "(", "(", "3", ",", "len", "(", "points", ")", ")", ",", "dtype", "=", "np", ".", "ndarray", ")", "\n", "\n", "# convert np.void (what realsense returns) back into float32 array", "\n", "for", "i", "in", "range", "(", "len", "(", "points", ")", ")", ":", "\n", "                        ", "points_new", "[", "0", "]", "[", "i", "]", "=", "points", "[", "i", "]", "[", "0", "]", "\n", "points_new", "[", "1", "]", "[", "i", "]", "=", "points", "[", "i", "]", "[", "1", "]", "\n", "points_new", "[", "2", "]", "[", "i", "]", "=", "points", "[", "i", "]", "[", "2", "]", "\n", "", "points_new", "=", "np", ".", "asarray", "(", "points_new", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# if crop, crop", "\n", "if", "self", ".", "crop", ":", "\n", "                        ", "points_new", "=", "points_new", "[", "croppedValues", "(", "points_new", ")", "]", "\n", "\n", "", "print", "(", "\"finished: \"", ",", "npy", ")", "\n", "if", "self", ".", "overwrite", ":", "\n", "                        ", "np", ".", "save", "(", "npy", ",", "points_new", ")", "\n", "", "else", ":", "\n", "                        ", "new_name", "=", "self", ".", "file_path", "+", "\"processed\"", "+", "os", ".", "path", ".", "basename", "(", "npy", ")", "\n", "np", ".", "save", "(", "new_name", ",", "points_new", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "\"finished: \"", ",", "npy", ")", "\n", "print", "(", "\"skipped\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.processor.Processor.compactSingleThread": [[73, 118], ["glob.glob", "glob.glob.sort", "enumerate", "numpy.load", "print", "text.isdigit", "int", "text.lower", "processor.Processor.compact.atoi"], "methods", ["None"], ["", "", "", "def", "compactSingleThread", "(", "self", ")", ":", "\n", "        ", "def", "atoi", "(", "text", ")", ":", "\n", "            ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", ".", "lower", "(", ")", "\n", "\n", "", "def", "natural_keys", "(", "text", ")", ":", "\n", "            ", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "'(\\d+)'", ",", "text", ")", "]", "\n", "\n", "", "def", "croppedValues", "(", "arr", ")", ":", "\n", "            ", "crop", "=", "[", "]", "\n", "for", "i", ",", "entry", "in", "enumerate", "(", "arr", ")", ":", "\n", "                ", "if", "abs", "(", "entry", "[", "0", "]", ")", "<=", "self", ".", "xlim", "and", "abs", "(", "entry", "[", "1", "]", ")", "<=", "self", ".", "ylim", "and", "abs", "(", "entry", "[", "2", "]", ")", "<=", "self", ".", "zlim", ":", "\n", "                    ", "crop", ".", "append", "(", "i", ")", "\n", "", "", "return", "crop", "\n", "\n", "", "npy_list", "=", "glob", ".", "glob", "(", "self", ".", "file_path", "+", "\"npys/*.npy\"", ")", "\n", "npy_list", ".", "sort", "(", "key", "=", "natural_keys", ")", "\n", "for", "npy", "in", "npy_list", ":", "\n", "                ", "points", "=", "np", ".", "load", "(", "npy", ")", "\n", "print", "(", "\"started: \"", ",", "npy", ")", "\n", "# if this is an unprocessed file, process", "\n", "if", "type", "(", "points", "[", "0", "]", ")", "is", "type", "(", "np", ".", "void", "(", "0", ")", ")", ":", "\n", "                    ", "points", "=", "points", "[", "np", ".", "nonzero", "(", "points", ")", "]", "\n", "points_new", "=", "np", ".", "array", "(", "[", "[", "points", "[", "0", "]", "[", "0", "]", "]", ",", "[", "points", "[", "0", "]", "[", "1", "]", "]", ",", "[", "points", "[", "0", "]", "[", "2", "]", "]", "]", ")", "\n", "\n", "# convert np.void (what realsense returns) back into float32 array", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "points", ")", ")", ":", "\n", "                        ", "arr", "=", "np", ".", "array", "(", "[", "[", "points", "[", "i", "]", "[", "0", "]", "]", ",", "[", "points", "[", "i", "]", "[", "1", "]", "]", ",", "[", "points", "[", "i", "]", "[", "2", "]", "]", "]", ")", "\n", "points_new", "=", "np", ".", "hstack", "(", "(", "points_new", ",", "arr", ")", ")", "\n", "\n", "# if crop, crop", "\n", "", "if", "self", ".", "crop", ":", "\n", "                        ", "points_new", "=", "points_new", "[", "croppedValues", "(", "points_new", ")", "]", "\n", "\n", "", "self", ".", "plot", "(", "points_new", ")", "\n", "\n", "print", "(", "\"finished: \"", ",", "npy", ")", "\n", "if", "self", ".", "overwrite", ":", "\n", "                        ", "np", ".", "save", "(", "npy", ",", "points_new", ")", "\n", "", "else", ":", "\n", "                        ", "new_name", "=", "self", ".", "file_path", "+", "\"npys/processed\"", "+", "os", ".", "path", ".", "basename", "(", "npy", ")", "\n", "np", ".", "save", "(", "new_name", ",", "points_new", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "\"finished: \"", ",", "npy", ")", "\n", "print", "(", "\"skipped\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.processor.Processor.plot": [[119, 126], ["numpy.transpose", "range", "open3d.PointCloud", "open3d.Vector3dVector", "open3d.draw_geometries", "len"], "methods", ["None"], ["", "", "", "def", "plot", "(", "self", ",", "arr", ")", ":", "\n", "        ", "arr", "=", "np", ".", "transpose", "(", "arr", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "arr", ")", ")", ":", "\n", "            ", "arr", "[", "i", "]", "=", "(", "arr", "[", "i", "]", "[", "0", "]", ",", "arr", "[", "i", "]", "[", "1", "]", ",", "arr", "[", "i", "]", "[", "2", "]", ")", "\n", "", "pcd", "=", "od", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "od", ".", "Vector3dVector", "(", "arr", ")", "\n", "od", ".", "draw_geometries", "(", "[", "pcd", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.processor.Processor.fuse": [[127, 153], ["numpy.load", "glob.glob", "glob.glob.sort", "glob.glob", "glob.glob.sort", "numpy.array_split", "numpy.array_split", "range", "len", "len", "Exception", "len", "threading.Thread", "threads.append", "threading.Thread.start", "text.isdigit", "int", "text.lower", "processor.Processor.compact.atoi"], "methods", ["None"], ["", "def", "fuse", "(", "self", ")", ":", "\n", "        ", "def", "atoi", "(", "text", ")", ":", "\n", "            ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", ".", "lower", "(", ")", "\n", "\n", "", "def", "natural_keys", "(", "text", ")", ":", "\n", "            ", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "'(\\d+)'", ",", "text", ")", "]", "\n", "\n", "", "transform", "=", "np", ".", "load", "(", "\"base_transform_new.npy\"", ")", "\n", "\n", "npy_list_left", "=", "glob", ".", "glob", "(", "self", ".", "file_path", "+", "\"*left.npy\"", ")", "\n", "npy_list_left", ".", "sort", "(", "key", "=", "natural_keys", ")", "\n", "\n", "npy_list_right", "=", "glob", ".", "glob", "(", "self", ".", "file_path", "+", "\"*right.npy\"", ")", "\n", "npy_list_right", ".", "sort", "(", "key", "=", "natural_keys", ")", "\n", "# print(npy_list_right)", "\n", "if", "len", "(", "npy_list_left", ")", "!=", "len", "(", "npy_list_right", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Mismatch in file numbers.\"", ")", "\n", "\n", "", "npy_lists_left", "=", "np", ".", "array_split", "(", "npy_list_left", ",", "6", ")", "\n", "npy_lists_right", "=", "np", ".", "array_split", "(", "npy_list_right", ",", "6", ")", "\n", "\n", "threads", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "npy_lists_left", ")", ")", ":", "\n", "            ", "t", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "fuse_worker", ",", "args", "=", "(", "npy_lists_left", "[", "i", "]", ",", "npy_lists_right", "[", "i", "]", ",", "transform", ",", ")", ")", "\n", "threads", ".", "append", "(", "t", ")", "\n", "t", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.processor.Processor.fuse_worker": [[154, 226], ["range", "numpy.histogram", "print", "scipy.signal.find_peaks", "enumerate", "len", "numpy.load", "numpy.load", "print", "numpy.transpose", "numpy.transpose", "open3d.PointCloud", "open3d.Vector3dVector", "open3d.PointCloud", "open3d.Vector3dVector", "open3d.voxel_down_sample", "open3d.voxel_down_sample", "numpy.save", "open3d.voxel_down_sample.transform", "numpy.save", "numpy.save", "numpy.save", "print", "len", "max", "len", "enumerate", "numpy.asarray", "numpy.asarray", "numpy.concatenate", "len", "crop.append", "min", "len", "list", "processor.Processor.compact.croppedValues"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.archive.stitch_two_npy.croppedValues"], ["", "", "def", "fuse_worker", "(", "self", ",", "npy_list_left", ",", "npy_list_right", ",", "transform", ")", ":", "\n", "        ", "def", "croppedValues", "(", "arr", ")", ":", "\n", "            ", "crop", "=", "[", "]", "\n", "hist", "=", "np", ".", "histogram", "(", "arr", "[", ":", ",", "2", "]", ",", "30", ")", "\n", "print", "(", "hist", ")", "\n", "peaks", "=", "scipy", ".", "signal", ".", "find_peaks", "(", "hist", "[", "0", "]", ",", "height", "=", "len", "(", "arr", "[", ":", ",", "2", "]", ")", "/", "40", ",", "distance", "=", "15", ")", "\n", "# print(peaks)", "\n", "\n", "if", "len", "(", "peaks", "[", "0", "]", ")", ">=", "2", ":", "# two peaks, cut face/body, isolate hand", "\n", "                ", "peak1", "=", "peaks", "[", "0", "]", "[", "0", "]", "\n", "peak2", "=", "peaks", "[", "0", "]", "[", "1", "]", "\n", "min_z", "=", "max", "(", "hist", "[", "1", "]", "[", "peak1", "+", "5", "]", ",", "hist", "[", "1", "]", "[", "peak2", "-", "5", "]", ")", "\n", "\n", "", "elif", "len", "(", "peaks", "[", "0", "]", ")", "==", "1", ":", "# one peak, isolate hand", "\n", "                ", "peak", "=", "peaks", "[", "0", "]", "[", "0", "]", "\n", "min_z", "=", "hist", "[", "1", "]", "[", "peak", "+", "5", "]", "\n", "\n", "", "else", ":", "# no peaks, um, try something else...", "\n", "                ", "min_z", "=", "hist", "[", "1", "]", "[", "2", "]", "+", "0.2", "\n", "\n", "", "for", "i", ",", "entry", "in", "enumerate", "(", "arr", ")", ":", "\n", "                ", "if", "entry", "[", "2", "]", "<=", "(", "min_z", ")", ":", "\n", "                    ", "crop", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "crop", ")", "<", "320", ":", "# we accidentally cropped the whole thing", "\n", "                ", "min_z", "=", "min", "(", "arr", "[", ":", ",", "2", "]", ")", "+", "0.15", "\n", "\n", "for", "i", ",", "entry", "in", "enumerate", "(", "arr", ")", ":", "\n", "                    ", "if", "entry", "[", "2", "]", "<=", "(", "min_z", ")", ":", "\n", "                        ", "crop", ".", "append", "(", "i", ")", "\n", "", "", "if", "len", "(", "crop", ")", "<", "320", ":", "\n", "                    ", "return", "list", "(", "range", "(", "0", ",", "len", "(", "arr", ".", "T", "[", "0", "]", ")", ")", ")", "\n", "", "", "return", "crop", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "npy_list_left", ")", ")", ":", "\n", "            ", "source_name", "=", "npy_list_right", "[", "i", "]", "\n", "target_name", "=", "npy_list_left", "[", "i", "]", "\n", "source", "=", "np", ".", "load", "(", "source_name", ")", "\n", "target", "=", "np", ".", "load", "(", "target_name", ")", "\n", "print", "(", "\"loaded: \"", ",", "source_name", ",", "\" and \"", ",", "target_name", ")", "\n", "\n", "source", "=", "np", ".", "transpose", "(", "source", ")", "\n", "target", "=", "np", ".", "transpose", "(", "target", ")", "\n", "\n", "source_pcd", "=", "od", ".", "PointCloud", "(", ")", "\n", "source_pcd", ".", "points", "=", "od", ".", "Vector3dVector", "(", "source", ")", "\n", "\n", "target_pcd", "=", "od", ".", "PointCloud", "(", ")", "\n", "target_pcd", ".", "points", "=", "od", ".", "Vector3dVector", "(", "target", ")", "\n", "\n", "source", "=", "source", "[", "croppedValues", "(", "source", ")", "]", "\n", "target", "=", "target", "[", "croppedValues", "(", "target", ")", "]", "\n", "\n", "# voxel downsampling", "\n", "source_pcd", "=", "od", ".", "voxel_down_sample", "(", "source_pcd", ",", "voxel_size", "=", "0.008", ")", "\n", "target_pcd", "=", "od", ".", "voxel_down_sample", "(", "target_pcd", ",", "voxel_size", "=", "0.008", ")", "\n", "\n", "np", ".", "save", "(", "source_name", "[", ":", "-", "4", "]", "+", "\"reduced\"", ",", "np", ".", "asarray", "(", "source_pcd", ".", "points", ")", ".", "T", ")", "\n", "source_pcd", ".", "transform", "(", "transform", ")", "\n", "np", ".", "save", "(", "source_name", "[", ":", "-", "4", "]", "+", "\"reducedtrans\"", ",", "np", ".", "asarray", "(", "source_pcd", ".", "points", ")", ".", "T", ")", "\n", "\n", "\n", "# od.draw_geometries([source_pcd])", "\n", "# od.draw_geometries([target_pcd])", "\n", "\n", "source", "=", "np", ".", "asarray", "(", "source_pcd", ".", "points", ")", ".", "T", "\n", "target", "=", "np", ".", "asarray", "(", "target_pcd", ".", "points", ")", ".", "T", "\n", "\n", "np", ".", "save", "(", "target_name", "[", ":", "-", "4", "]", "+", "\"reduced\"", ",", "target", ")", "\n", "np", ".", "save", "(", "target_name", "[", ":", "-", "8", "]", "+", "\"fused\"", ",", "np", ".", "concatenate", "(", "(", "source", ",", "target", ")", ",", "axis", "=", "1", ")", ")", "\n", "print", "(", "\"reduced: \"", ",", "source_name", ",", "\" and \"", ",", "target_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.player.Player.__init__": [[12, 108], ["pyrealsense2.context", "player.Player.ctx.query_devices", "print", "print", "print", "open().read", "json.loads", "str().replace", "pyrealsense2.rs400_advanced_mode", "pyrealsense2.rs400_advanced_mode", "pyrealsense2.rs400_advanced_mode.load_json", "pyrealsense2.rs400_advanced_mode.load_json", "datetime.datetime.now", "datetime.datetime.now.strftime", "pyrealsense2.pipeline", "pyrealsense2.config", "player.Player.config_left.enable_device", "player.Player.config_left.enable_stream", "pyrealsense2.pipeline", "pyrealsense2.config", "player.Player.config_right.enable_device", "player.Player.config_right.enable_stream", "player.Player.pipeline_left.start", "time.time", "player.Player.pipeline_right.start", "print", "player.Player.playback_left.get_stream", "player.Player.profile_left.as_video_stream_profile().get_intrinsics", "print", "player.Player.playback_right.get_stream", "player.Player.profile_right.as_video_stream_profile().get_intrinsics", "print", "player.Player.devices[].get_info", "player.Player.devices[].get_info", "os.path.exists", "os.makedirs", "shutil.rmtree", "os.makedirs", "player.Player.config_left.enable_stream", "player.Player.config_left.enable_stream", "player.Player.config_left.enable_record_to_file", "player.Player.config_right.enable_stream", "player.Player.config_right.enable_stream", "player.Player.config_right.enable_record_to_file", "player.Player.ds_left.set_option", "print", "player.Player.ds_right.set_option", "print", "Exception", "open", "str", "time.time", "player.Player.profile_left.as_video_stream_profile", "player.Player.profile_right.as_video_stream_profile", "player.Player.devices[].query_sensors", "player.Player.devices[].query_sensors", "int", "int", "player.Player.ds_left.get_option", "player.Player.ds_right.get_option"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "colour", "=", "False", ",", "infrared", "=", "False", ",", "record", "=", "True", ",", "hw_sync", "=", "True", ")", ":", "\n", "        ", "self", ".", "colour", "=", "colour", "\n", "self", ".", "ctx", "=", "rs", ".", "context", "(", ")", "\n", "self", ".", "devices", "=", "self", ".", "ctx", ".", "query_devices", "(", ")", "\n", "print", "(", "\"Detected device serial numbers: \"", ")", "\n", "try", ":", "\n", "            ", "self", ".", "device_left", "=", "self", ".", "devices", "[", "0", "]", ".", "get_info", "(", "rs", ".", "camera_info", ".", "serial_number", ")", "\n", "self", ".", "device_right", "=", "self", ".", "devices", "[", "1", "]", ".", "get_info", "(", "rs", ".", "camera_info", ".", "serial_number", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "raise", "(", "Exception", "(", "\"Two devices not found.\"", ")", ")", "\n", "\n", "", "print", "(", "self", ".", "device_left", ")", "\n", "print", "(", "self", ".", "device_right", ")", "\n", "\n", "# load settings from json", "\n", "\n", "json_data", "=", "open", "(", "\"hand.json\"", ")", ".", "read", "(", ")", "\n", "adv_string", "=", "json", ".", "loads", "(", "json_data", ")", "\n", "json_string", "=", "str", "(", "adv_string", ")", ".", "replace", "(", "\"'\"", ",", "'\\\"'", ")", "\n", "advnc_mode_left", "=", "rs", ".", "rs400_advanced_mode", "(", "self", ".", "devices", "[", "0", "]", ")", "\n", "advnc_mode_right", "=", "rs", ".", "rs400_advanced_mode", "(", "self", ".", "devices", "[", "1", "]", ")", "\n", "advnc_mode_left", ".", "load_json", "(", "json_string", ")", "\n", "advnc_mode_right", ".", "load_json", "(", "json_string", ")", "\n", "\n", "# create save folder", "\n", "current_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "prefix", "=", "current_time", ".", "strftime", "(", "\"%Y-%m-%d:%H:%M\"", ")", "\n", "\n", "path", "=", "\"data/\"", "+", "prefix", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "\n", "", "self", ".", "pipeline_left", "=", "rs", ".", "pipeline", "(", ")", "\n", "self", ".", "config_left", "=", "rs", ".", "config", "(", ")", "\n", "self", ".", "config_left", ".", "enable_device", "(", "self", ".", "device_left", ")", "\n", "self", ".", "config_left", ".", "enable_stream", "(", "rs", ".", "stream", ".", "depth", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "z16", ",", "30", ")", "\n", "\n", "\n", "if", "infrared", ":", "\n", "            ", "self", ".", "config_left", ".", "enable_stream", "(", "rs", ".", "stream", ".", "infrared", ",", "1", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "y8", ",", "30", ")", "\n", "", "if", "colour", ":", "\n", "            ", "self", ".", "config_left", ".", "enable_stream", "(", "rs", ".", "stream", ".", "color", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "rgb8", ",", "30", ")", "\n", "", "if", "record", ":", "\n", "            ", "self", ".", "config_left", ".", "enable_record_to_file", "(", "\"data/\"", "+", "prefix", "+", "\"/left.bag\"", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "self", ".", "pipeline_right", "=", "rs", ".", "pipeline", "(", ")", "\n", "self", ".", "config_right", "=", "rs", ".", "config", "(", ")", "\n", "self", ".", "config_right", ".", "enable_device", "(", "self", ".", "device_right", ")", "\n", "self", ".", "config_right", ".", "enable_stream", "(", "rs", ".", "stream", ".", "depth", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "z16", ",", "30", ")", "\n", "if", "infrared", ":", "\n", "            ", "self", ".", "config_right", ".", "enable_stream", "(", "rs", ".", "stream", ".", "infrared", ",", "1", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "y8", ",", "30", ")", "\n", "", "if", "colour", ":", "\n", "            ", "self", ".", "config_right", ".", "enable_stream", "(", "rs", ".", "stream", ".", "color", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "rgb8", ",", "30", ")", "\n", "", "if", "record", ":", "\n", "            ", "self", ".", "config_right", ".", "enable_record_to_file", "(", "\"data/\"", "+", "prefix", "+", "\"/right.bag\"", ")", "\n", "\n", "\n", "#print(\"Starting Recording in:\")", "\n", "# print(\"3\")", "\n", "# time.sleep(1)", "\n", "# print(\"2\")", "\n", "# time.sleep(1)", "\n", "# print(\"1\")", "\n", "# time.sleep(1)", "\n", "# print(\"now\")", "\n", "\n", "# Start streaming", "\n", "\n", "", "self", ".", "playback_left", "=", "self", ".", "pipeline_left", ".", "start", "(", "self", ".", "config_left", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "playback_right", "=", "self", ".", "pipeline_right", ".", "start", "(", "self", ".", "config_right", ")", "\n", "print", "(", "\"Stream desync: \"", ",", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "self", ".", "profile_left", "=", "self", ".", "playback_left", ".", "get_stream", "(", "rs", ".", "stream", ".", "depth", ")", "\n", "self", ".", "intrinsics_left", "=", "self", ".", "profile_left", ".", "as_video_stream_profile", "(", ")", ".", "get_intrinsics", "(", ")", "\n", "print", "(", "\"left intrinsics: \"", ",", "self", ".", "intrinsics_left", ")", "\n", "\n", "self", ".", "profile_right", "=", "self", ".", "playback_right", ".", "get_stream", "(", "rs", ".", "stream", ".", "depth", ")", "\n", "self", ".", "intrinsics_right", "=", "self", ".", "profile_right", ".", "as_video_stream_profile", "(", ")", ".", "get_intrinsics", "(", ")", "\n", "print", "(", "\"right intrinsics: \"", ",", "self", ".", "intrinsics_right", ")", "\n", "if", "hw_sync", ":", "\n", "            ", "self", ".", "ds_left", "=", "self", ".", "devices", "[", "0", "]", ".", "query_sensors", "(", ")", "[", "0", "]", "\n", "self", ".", "ds_left", ".", "set_option", "(", "rs", ".", "option", ".", "inter_cam_sync_mode", ",", "1", ")", "\n", "print", "(", "\"left option: \"", ",", "[", "\"null\"", ",", "\"master\"", ",", "\"slave\"", "]", "[", "int", "(", "self", ".", "ds_left", ".", "get_option", "(", "rs", ".", "option", ".", "inter_cam_sync_mode", ")", ")", "]", ")", "\n", "\n", "self", ".", "ds_right", "=", "self", ".", "devices", "[", "1", "]", ".", "query_sensors", "(", ")", "[", "0", "]", "\n", "self", ".", "ds_right", ".", "set_option", "(", "rs", ".", "option", ".", "inter_cam_sync_mode", ",", "2", ")", "\n", "print", "(", "\"right option: \"", ",", "[", "\"null\"", ",", "\"master\"", ",", "\"slave\"", "]", "[", "int", "(", "self", ".", "ds_right", ".", "get_option", "(", "rs", ".", "option", ".", "inter_cam_sync_mode", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.player.Player.getFrames": [[112, 139], ["player.Player.pipeline_left.wait_for_frames", "player.Player.pipeline_right.wait_for_frames"], "methods", ["None"], ["", "", "def", "getFrames", "(", "self", ")", ":", "\n", "#frameset_left = rs.composite_frame(rs.frame())", "\n", "#frameset_right = rs.composite_frame(rs.frame())", "\n", "#frame_right = self.pipeline_right.wait_for_frames()", "\n", "#frame_left = self.pipeline_left.poll_for_frames(frameset_left)", "\n", "\n", "#self.playback_left.resume()    ", "\n", "        ", "frame_left", "=", "self", ".", "pipeline_left", ".", "wait_for_frames", "(", ")", "\n", "#self.playback_left.pause()", "\n", "\n", "#self.playback_right.resume()", "\n", "frame_right", "=", "self", ".", "pipeline_right", ".", "wait_for_frames", "(", ")", "\n", "#self.playback_right.pause()", "\n", "\n", "ret_frames", "=", "[", "None", ",", "None", "]", "\n", "\n", "if", "frame_left", ":", "\n", "            ", "ret_frames", "[", "0", "]", "=", "frame_left", "\n", "# else:", "\n", "#     time.sleep(0.015)", "\n", "\n", "", "if", "frame_right", ":", "\n", "            ", "ret_frames", "[", "1", "]", "=", "frame_right", "\n", "# else:", "\n", "#     time.sleep(0.015) ", "\n", "#print(ret_frames[0].timestamp - ret_frames[1].timestamp)", "\n", "", "return", "ret_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.player.Player.stop": [[142, 145], ["player.Player.pipeline_right.stop", "player.Player.pipeline_left.stop"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.stop", "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.stop"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "self", ".", "pipeline_right", ".", "stop", "(", ")", "\n", "self", ".", "pipeline_left", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.pointnet.PointNet.__init__": [[21, 42], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batchsize", "=", "32", ",", "num_points", "=", "2500", ",", "num_epoch", "=", "25", ",", "outf", "=", "'cls'", ",", "model", "=", "''", ",", "num_classes", "=", "2", ",", "alpha", "=", "0.01", ",", "beta", "=", "0.02", ",", "ptype", "=", "''", ")", ":", "\n", "        ", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "num_epoch", "=", "num_epoch", "\n", "self", ".", "outf", "=", "outf", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "\n", "global", "PointNetCls", ",", "PointNetDenseCls", "\n", "if", "ptype", "==", "''", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "pointnet", "import", "PointNetCls", ",", "PointNetDenseCls", "\n", "", "elif", "ptype", "==", "'small'", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "pointnet_small", "import", "PointNetCls", ",", "PointNetDenseCls", "\n", "", "elif", "ptype", "==", "'dropout'", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "pointnet_dropout", "import", "PointNetCls", ",", "PointNetDenseCls", "\n", "", "elif", "ptype", "==", "'normless'", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "pointnet_normless", "import", "PointNetCls", ",", "PointNetDenseCls", "\n", "", "elif", "ptype", "==", "'small+dropout'", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "pointnet_small_dropout", "import", "PointNetCls", ",", "PointNetDenseCls", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.pointnet.PointNet.train": [[45, 155], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "PointNetCls", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "classifier.eval.eval.cuda", "range", "numpy.zeros", "numpy.zeros", "classifier.eval.eval.eval", "print", "numpy.tile", "numpy.random.normal", "range", "len", "len", "os.makedirs", "classifier.eval.eval.load_state_dict", "classifier.eval.eval.parameters", "len", "enumerate", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "numpy.random.rand", "len", "points[].add", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "pointnet.PointNet.train.randomAugment"], "methods", ["None"], ["", "", "def", "train", "(", "self", ",", "dataset", ",", "test_dataset", ")", ":", "\n", "\n", "        ", "def", "randomAugment", "(", "points", ",", "alpha", ",", "beta", ")", ":", "\n", "            ", "disp", "=", "np", ".", "random", ".", "rand", "(", "3", ",", "1", ")", "*", "beta", "\n", "disp", "=", "np", ".", "tile", "(", "disp", ",", "self", ".", "num_points", ")", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "alpha", ",", "(", "3", ",", "self", ".", "num_points", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "points", ")", ")", ":", "\n", "                ", "points", "[", "i", "]", "=", "points", "[", "i", "]", ".", "add", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "disp", "+", "noise", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "\n", "", "", "blue", "=", "lambda", "x", ":", "'\\033[94m'", "+", "x", "+", "'\\033[0m'", "\n", "\n", "# initialise dataloader as single thread else socket errors", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "\n", "shuffle", "=", "True", ")", "#, num_workers=int(self.workers))", "\n", "\n", "testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "\n", "shuffle", "=", "True", ")", "#, num_workers=int(self.workers))", "\n", "\n", "print", "(", "\"size of train: \"", ",", "len", "(", "dataset", ")", ")", "\n", "print", "(", "\"size of test: \"", ",", "len", "(", "test_dataset", ")", ")", "\n", "\n", "print", "(", "'classes: '", ",", "self", ".", "num_classes", ")", "\n", "\n", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "outf", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n", "\n", "", "classifier", "=", "PointNetCls", "(", "k", "=", "self", ".", "num_classes", ")", "\n", "\n", "\n", "if", "self", ".", "model", "!=", "''", ":", "\n", "            ", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "model", ")", ")", "\n", "\n", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ",", "momentum", "=", "0.99", ")", "\n", "classifier", ".", "cuda", "(", ")", "\n", "\n", "num_batch", "=", "len", "(", "dataset", ")", "/", "self", ".", "batchsize", "\n", "test_acc", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "self", ".", "num_epoch", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "dataloader", ",", "0", ")", ":", "\n", "                ", "points", ",", "target", "=", "data", "[", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "\n", "# add translation/jitter augmentation", "\n", "randomAugment", "(", "points", ",", "self", ".", "alpha", ",", "self", ".", "beta", ")", "\n", "\n", "points", ",", "target", "=", "Variable", "(", "points", ")", ",", "Variable", "(", "target", ")", "\n", "points", ",", "target", "=", "points", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "classifier", "=", "classifier", ".", "train", "(", ")", "\n", "pred", ",", "_", "=", "classifier", "(", "points", ")", "\n", "# print(pred)", "\n", "loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "# print('[%d: %d/%d] train loss: %f accuracy: %f' %(epoch, i, num_batch, loss.item(),correct.item() / float(self.batchsize)))", "\n", "\n", "if", "i", "%", "50", "==", "0", ":", "\n", "                    ", "j", ",", "data", "=", "next", "(", "enumerate", "(", "testdataloader", ",", "0", ")", ")", "\n", "points", ",", "target", "=", "data", "[", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "points", ",", "target", "=", "Variable", "(", "points", ")", ",", "Variable", "(", "target", ")", "\n", "# points = points.transpose(2,1)", "\n", "points", ",", "target", "=", "points", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "classifier", "=", "classifier", ".", "eval", "(", ")", "\n", "pred", ",", "_", "=", "classifier", "(", "points", ")", "\n", "# print(pred)", "\n", "loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "print", "(", "'[%d: %d/%d] %s loss: %f accuracy: %f'", "%", "(", "epoch", ",", "i", ",", "num_batch", ",", "blue", "(", "'test'", ")", ",", "loss", ".", "item", "(", ")", ",", "correct", ".", "item", "(", ")", "/", "float", "(", "self", ".", "batchsize", ")", ")", ")", "\n", "\n", "# out, _ = classifier.sim_data", "\n", "# print(out[0:10])", "\n", "", "", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "\"model\"", ")", "# '%s/cls_model_%d.pth' % (self.outf, epoch))", "\n", "\n", "", "acc", "=", "0", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", ")", "\n", "# empty matrix for recording instance accuracies", "\n", "accuracy_matrix", "=", "np", ".", "zeros", "(", "len", "(", "test_dataset", ")", ")", "\n", "\n", "classifier", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# self.batchsize = 1", "\n", "            ", "testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "self", ".", "batchsize", ",", "shuffle", "=", "True", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "testdataloader", ",", "0", ")", ":", "\n", "                ", "points", ",", "target", ",", "identifier", "=", "data", "[", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ",", "data", "[", "2", "]", "\n", "points", ",", "target", "=", "Variable", "(", "points", ")", ",", "Variable", "(", "target", ")", "\n", "points", ",", "target", "=", "points", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "pred", ",", "_", "=", "classifier", "(", "points", ")", "\n", "# print(\"time: \", time.time()-start)", "\n", "# print(target, pred)", "\n", "loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "# print(correct.item())", "\n", "acc", "+=", "correct", ".", "item", "(", ")", "\n", "\n", "# update confusion matrix and accuracy", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "target", ")", ":", "\n", "                    ", "confusion_matrix", "[", "int", "(", "t", ")", ",", "int", "(", "pred_choice", "[", "i", "]", ")", "]", "+=", "1", "\n", "if", "int", "(", "t", ")", "==", "int", "(", "pred_choice", "[", "i", "]", ")", ":", "# if correct set to 1", "\n", "                        ", "accuracy_matrix", "[", "int", "(", "identifier", "[", "i", "]", ")", "]", "=", "1", "\n", "\n", "", "", "", "", "print", "(", "\"final acc: \"", ",", "acc", "/", "len", "(", "test_dataset", ")", ")", "\n", "return", "acc", "/", "len", "(", "test_dataset", ")", ",", "confusion_matrix", ",", "accuracy_matrix", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.fuser.Fuser.__init__": [[9, 17], ["numpy.linalg.inv", "numpy.linalg.inv", "numpy.load", "numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "self", ".", "file_path", "=", "file_path", "\n", "self", ".", "base_transform", "=", "np", ".", "linalg", ".", "inv", "(", "np", ".", "load", "(", "\"base_transform_new.npy\"", ")", ")", "\n", "self", ".", "voxel_radius", "=", "[", "0.01", ",", "0.01", ",", "0.01", "]", "\n", "self", ".", "max_iter", "=", "[", "50", ",", "50", ",", "50", "]", "\n", "self", ".", "max_nn", "=", "3", "\n", "self", ".", "relative_fitness", "=", "1e-6", "\n", "self", ".", "relative_rmse", "=", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.fuser.Fuser.draw_registration_result_original_color": [[18, 22], ["copy.deepcopy", "copy.deepcopy.transform", "open3d.draw_geometries"], "methods", ["None"], ["", "def", "draw_registration_result_original_color", "(", "self", ",", "source", ",", "target", ",", "transformation", ")", ":", "\n", "        ", "source_temp", "=", "copy", ".", "deepcopy", "(", "source", ")", "\n", "source_temp", ".", "transform", "(", "transformation", ")", "\n", "od", ".", "draw_geometries", "(", "[", "source_temp", ",", "target", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.fuser.Fuser.estimateAverageTransform": [[23, 49], ["glob.glob", "glob.glob", "range", "numpy.mean", "numpy.mean", "print", "range", "numpy.save", "numpy.save", "print", "len", "len", "len", "fuser.Fuser.estimateTransform", "transform_list.append", "open3d.read_point_cloud", "open3d.read_point_cloud", "fuser.Fuser.draw_registration_result_original_color", "numpy.linalg.norm", "numpy.linalg.norm", "len"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.fuser.Fuser.estimateTransform", "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.archive.estimate_transform.draw_registration_result_original_color"], ["", "def", "estimateAverageTransform", "(", "self", ")", ":", "\n", "        ", "targets", "=", "glob", ".", "glob", "(", "self", ".", "file_path", "+", "\"*left.ply\"", ")", "\n", "sources", "=", "glob", ".", "glob", "(", "self", ".", "file_path", "+", "\"*right.ply\"", ")", "\n", "assert", "len", "(", "sources", ")", "==", "len", "(", "targets", ")", "\n", "transform_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sources", ")", ")", ":", "\n", "            ", "tran", "=", "(", "self", ".", "estimateTransform", "(", "sources", "[", "i", "]", ",", "targets", "[", "i", "]", ")", ")", "\n", "transform_list", ".", "append", "(", "tran", ")", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "base_transform", "-", "tran", ")", "<", "0.1", ":", "\n", "                ", "self", ".", "base_transform", "=", "tran", "\n", "\n", "# estimate good average transform", "\n", "# avg_transformation = self.base_transform", "\n", "\n", "", "", "avg_transformation", "=", "np", ".", "mean", "(", "transform_list", ",", "axis", "=", "0", ")", "\n", "print", "(", "avg_transformation", ")", "\n", "# print(transform_list)", "\n", "\n", "# display final result", "\n", "for", "i", "in", "range", "(", "len", "(", "transform_list", ")", "-", "1", ")", ":", "\n", "            ", "source", "=", "od", ".", "read_point_cloud", "(", "sources", "[", "i", "]", ")", "\n", "target", "=", "od", ".", "read_point_cloud", "(", "targets", "[", "i", "]", ")", "\n", "self", ".", "draw_registration_result_original_color", "(", "\n", "source", ",", "target", ",", "avg_transformation", ")", "\n", "", "np", ".", "save", "(", "self", ".", "file_path", "+", "\"transform\"", ",", "avg_transformation", ")", "\n", "print", "(", "avg_transformation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.fuser.Fuser.estimateTransform": [[51, 78], ["open3d.read_point_cloud", "open3d.read_point_cloud", "range", "len", "open3d.voxel_down_sample", "open3d.voxel_down_sample", "open3d.estimate_normals", "open3d.estimate_normals", "open3d.registration_colored_icp", "open3d.KDTreeSearchParamHybrid", "open3d.KDTreeSearchParamHybrid", "open3d.ICPConvergenceCriteria"], "methods", ["None"], ["", "def", "estimateTransform", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "source", "=", "od", ".", "read_point_cloud", "(", "source", ")", "\n", "target", "=", "od", ".", "read_point_cloud", "(", "target", ")", "\n", "current_transformation", "=", "self", ".", "base_transform", "\n", "\n", "for", "scale", "in", "range", "(", "len", "(", "self", ".", "voxel_radius", ")", ")", ":", "\n", "            ", "iterations", "=", "self", ".", "max_iter", "[", "scale", "]", "\n", "radius", "=", "self", ".", "voxel_radius", "[", "scale", "]", "\n", "\n", "source_down", "=", "od", ".", "voxel_down_sample", "(", "source", ",", "radius", ")", "\n", "target_down", "=", "od", ".", "voxel_down_sample", "(", "target", ",", "radius", ")", "\n", "\n", "od", ".", "estimate_normals", "(", "source_down", ",", "od", ".", "KDTreeSearchParamHybrid", "(", "\n", "radius", "=", "2", "*", "radius", ",", "max_nn", "=", "self", ".", "max_nn", ")", ")", "\n", "od", ".", "estimate_normals", "(", "target_down", ",", "od", ".", "KDTreeSearchParamHybrid", "(", "\n", "radius", "=", "2", "*", "radius", ",", "max_nn", "=", "self", ".", "max_nn", ")", ")", "\n", "\n", "result_icp", "=", "od", ".", "registration_colored_icp", "(", "source_down", ",", "target_down", ",", "\n", "radius", ",", "current_transformation", ",", "\n", "od", ".", "ICPConvergenceCriteria", "(", "relative_fitness", "=", "self", ".", "relative_fitness", ",", "\n", "relative_rmse", "=", "self", ".", "relative_rmse", ",", "max_iteration", "=", "iterations", ")", ")", "\n", "\n", "current_transformation", "=", "result_icp", ".", "transformation", "\n", "# self.draw_registration_result_original_color(", "\n", "# source_down, target_down, current_transformation)", "\n", "\n", "", "return", "current_transformation", "", "", "", ""]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.dualnet.DualNet.__init__": [[21, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batchsize", "=", "32", ",", "num_points", "=", "2500", ",", "num_epoch", "=", "25", ",", "outf", "=", "'cls'", ",", "model", "=", "''", ",", "num_classes", "=", "2", ",", "alpha", "=", "0.01", ",", "beta", "=", "0", ",", "ptype", "=", "''", ")", ":", "\n", "        ", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "num_epoch", "=", "num_epoch", "\n", "self", ".", "outf", "=", "outf", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "\n", "global", "DualNetCls", ",", "PointNetDenseCls", "\n", "if", "ptype", "==", "''", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "dualnet", "import", "DualNetCls", "\n", "", "elif", "ptype", "==", "'modified'", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "dualnet_modified", "import", "DualNetCls", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.dualnet.DualNet.train": [[37, 149], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "DualNetCls", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "classifier.eval.eval.cuda", "range", "numpy.zeros", "numpy.zeros", "classifier.eval.eval.eval", "print", "numpy.tile", "numpy.random.normal", "numpy.random.normal", "range", "len", "len", "os.makedirs", "classifier.eval.eval.load_state_dict", "classifier.eval.eval.parameters", "len", "enumerate", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "numpy.random.rand", "len", "points_left[].add", "points_right[].add", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "dualnet.DualNet.train.randomAugment"], "methods", ["None"], ["", "", "def", "train", "(", "self", ",", "dataset", ",", "test_dataset", ")", ":", "\n", "\n", "        ", "def", "randomAugment", "(", "points_left", ",", "points_right", ",", "alpha", ",", "beta", ")", ":", "\n", "            ", "disp", "=", "np", ".", "random", ".", "rand", "(", "3", ",", "1", ")", "*", "beta", "\n", "disp", "=", "np", ".", "tile", "(", "disp", ",", "self", ".", "num_points", ")", "\n", "noise_left", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "alpha", ",", "(", "3", ",", "self", ".", "num_points", ")", ")", "\n", "noise_right", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "alpha", ",", "(", "3", ",", "self", ".", "num_points", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "points_left", ")", ")", ":", "\n", "                ", "points_left", "[", "i", "]", "=", "points_left", "[", "i", "]", ".", "add", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "disp", "+", "noise_left", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "points_right", "[", "i", "]", "=", "points_right", "[", "i", "]", ".", "add", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "disp", "+", "noise_right", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "\n", "", "", "blue", "=", "lambda", "x", ":", "'\\033[94m'", "+", "x", "+", "'\\033[0m'", "\n", "\n", "# initialise dataloader as single thread else socket errors", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "\n", "shuffle", "=", "True", ")", "#, num_workers=int(self.workers))", "\n", "\n", "testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "\n", "shuffle", "=", "True", ")", "#, num_workers=int(self.workers))", "\n", "\n", "print", "(", "\"size of train: \"", ",", "len", "(", "dataset", ")", ")", "\n", "print", "(", "\"size of test: \"", ",", "len", "(", "test_dataset", ")", ")", "\n", "\n", "print", "(", "'classes: '", ",", "self", ".", "num_classes", ")", "\n", "\n", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "outf", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n", "\n", "", "classifier", "=", "DualNetCls", "(", "k", "=", "self", ".", "num_classes", ")", "\n", "\n", "\n", "if", "self", ".", "model", "!=", "''", ":", "\n", "            ", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "model", ")", ")", "\n", "\n", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ",", "momentum", "=", "0.99", ")", "\n", "classifier", ".", "cuda", "(", ")", "\n", "\n", "num_batch", "=", "len", "(", "dataset", ")", "/", "self", ".", "batchsize", "\n", "test_acc", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "self", ".", "num_epoch", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "dataloader", ",", "0", ")", ":", "\n", "                ", "points_left", ",", "points_right", ",", "target", "=", "data", "[", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "1", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "\n", "# add translation/jitter augmentation", "\n", "randomAugment", "(", "points_left", ",", "points_right", ",", "self", ".", "alpha", ",", "self", ".", "beta", ")", "\n", "\n", "points_left", ",", "points_right", ",", "target", "=", "Variable", "(", "points_left", ")", ",", "Variable", "(", "points_right", ")", ",", "Variable", "(", "target", ")", "\n", "points_left", ",", "points_right", ",", "target", "=", "points_left", ".", "cuda", "(", ")", ",", "points_right", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "classifier", "=", "classifier", ".", "train", "(", ")", "\n", "pred", ",", "_", "=", "classifier", "(", "points_left", ",", "points_right", ")", "\n", "# print(pred)", "\n", "loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "# print('[%d: %d/%d] train loss: %f accuracy: %f' %(epoch, i, num_batch, loss.item(),correct.item() / float(self.batchsize)))", "\n", "\n", "if", "i", "%", "50", "==", "0", ":", "\n", "                    ", "j", ",", "data", "=", "next", "(", "enumerate", "(", "testdataloader", ",", "0", ")", ")", "\n", "points_left", ",", "points_right", ",", "target", "=", "data", "[", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "1", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "points_left", ",", "points_right", ",", "target", "=", "Variable", "(", "points_left", ")", ",", "Variable", "(", "points_right", ")", ",", "Variable", "(", "target", ")", "\n", "points_left", ",", "points_right", ",", "target", "=", "points_left", ".", "cuda", "(", ")", ",", "points_right", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "classifier", "=", "classifier", ".", "eval", "(", ")", "\n", "pred", ",", "_", "=", "classifier", "(", "points_left", ",", "points_right", ")", "\n", "# print(pred)", "\n", "loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "print", "(", "'[%d: %d/%d] %s loss: %f accuracy: %f'", "%", "(", "epoch", ",", "i", ",", "num_batch", ",", "blue", "(", "'test'", ")", ",", "loss", ".", "item", "(", ")", ",", "correct", ".", "item", "(", ")", "/", "float", "(", "self", ".", "batchsize", ")", ")", ")", "\n", "\n", "# out, _ = classifier.sim_data", "\n", "# print(out[0:10])", "\n", "", "", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "\"model\"", ")", "# '%s/cls_model_%d.pth' % (self.outf, epoch))", "\n", "\n", "", "acc", "=", "0", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", ")", "\n", "# empty matrix for recording instance accuracies", "\n", "accuracy_matrix", "=", "np", ".", "zeros", "(", "len", "(", "test_dataset", ")", ")", "\n", "\n", "classifier", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# self.batchsize = 1", "\n", "            ", "testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "self", ".", "batchsize", ",", "shuffle", "=", "True", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "testdataloader", ",", "0", ")", ":", "\n", "                ", "points_left", ",", "points_right", ",", "target", ",", "identifier", "=", "data", "[", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "1", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ",", "data", "[", "3", "]", "\n", "points_left", ",", "points_right", ",", "target", "=", "Variable", "(", "points_left", ")", ",", "Variable", "(", "points_right", ")", ",", "Variable", "(", "target", ")", "\n", "points_left", ",", "points_right", ",", "target", "=", "points_left", ".", "cuda", "(", ")", ",", "points_right", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "# start = time.time()", "\n", "pred", ",", "_", "=", "classifier", "(", "points_left", ",", "points_right", ")", "\n", "# print(\"time: \", time.time()-start)", "\n", "# print(target, pred)", "\n", "loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "# print(correct.item())", "\n", "acc", "+=", "correct", ".", "item", "(", ")", "\n", "\n", "# update confusion matrix and accuracy", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "target", ")", ":", "\n", "                    ", "confusion_matrix", "[", "int", "(", "t", ")", ",", "int", "(", "pred_choice", "[", "i", "]", ")", "]", "+=", "1", "\n", "if", "int", "(", "t", ")", "==", "int", "(", "pred_choice", "[", "i", "]", ")", ":", "# if correct set to 1", "\n", "                        ", "accuracy_matrix", "[", "int", "(", "identifier", "[", "i", "]", ")", "]", "=", "1", "\n", "\n", "", "", "", "", "print", "(", "\"final acc: \"", ",", "acc", "/", "len", "(", "test_dataset", ")", ")", "\n", "return", "acc", "/", "len", "(", "test_dataset", ")", ",", "confusion_matrix", ",", "accuracy_matrix", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.__init__": [[9, 67], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pyrealsense2.pipeline", "pyrealsense2.config", "pyrealsense2.config.enable_device_from_file", "reader.Player.config_left.enable_stream", "pyrealsense2.pipeline", "pyrealsense2.config", "pyrealsense2.config.enable_device_from_file", "reader.Player.config_right.enable_stream", "reader.Player.pipeline_left.start", "reader.Player.start_left.get_device().as_playback", "time.sleep", "reader.Player.pipeline_right.start", "reader.Player.start_right.get_device().as_playback", "cv2.namedWindow", "reader.Player.start_left.get_stream", "reader.Player.profile_left.as_video_stream_profile().get_intrinsics", "print", "reader.Player.start_right.get_stream", "reader.Player.profile_right.as_video_stream_profile().get_intrinsics", "print", "print", "print", "exit", "print", "print", "exit", "reader.Player.config_left.enable_stream", "reader.Player.config_left.enable_stream", "reader.Player.config_right.enable_stream", "reader.Player.config_right.enable_stream", "reader.Player.start_left.get_device", "reader.Player.start_right.get_device", "reader.Player.profile_left.as_video_stream_profile", "reader.Player.profile_right.as_video_stream_profile", "os.path.splitext", "os.path.splitext"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "colour", "=", "False", ",", "infrared", "=", "False", ",", "record", "=", "False", ",", "hw_sync", "=", "False", ")", ":", "\n", "# Create object for parsing command-line options", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Read recorded bag file and display depth stream in jet colormap.\\\n                                        Remember to change the stream resolution, fps and format to match the recorded.\"", ")", "\n", "# Add argument which takes path to a bag file as an input", "\n", "parser", ".", "add_argument", "(", "\"-i1\"", ",", "\"--input1\"", ",", "type", "=", "str", ",", "help", "=", "\"Path to the left bag file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-i2\"", ",", "\"--input2\"", ",", "type", "=", "str", ",", "help", "=", "\"Path to the right bag file\"", ")", "\n", "# Parse the command line arguments to an object", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# Safety if no parameter have been given", "\n", "if", "not", "args", ".", "input1", "or", "not", "args", ".", "input2", ":", "\n", "            ", "print", "(", "\"No input paramater have been given.\"", ")", "\n", "print", "(", "\"For help type --help\"", ")", "\n", "exit", "(", ")", "\n", "# Check if the given file have bag extension", "\n", "", "if", "os", ".", "path", ".", "splitext", "(", "args", ".", "input1", ")", "[", "1", "]", "!=", "\".bag\"", "or", "os", ".", "path", ".", "splitext", "(", "args", ".", "input2", ")", "[", "1", "]", "!=", "\".bag\"", ":", "\n", "            ", "print", "(", "\"The given file is not of correct file format.\"", ")", "\n", "print", "(", "\"Only .bag files are accepted\"", ")", "\n", "exit", "(", ")", "\n", "\n", "\n", "", "self", ".", "pipeline_left", "=", "rs", ".", "pipeline", "(", ")", "\n", "self", ".", "config_left", "=", "rs", ".", "config", "(", ")", "\n", "rs", ".", "config", ".", "enable_device_from_file", "(", "self", ".", "config_left", ",", "args", ".", "input1", ")", "\n", "self", ".", "config_left", ".", "enable_stream", "(", "rs", ".", "stream", ".", "depth", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "z16", ",", "30", ")", "\n", "\n", "if", "infrared", ":", "\n", "            ", "self", ".", "config_left", ".", "enable_stream", "(", "rs", ".", "stream", ".", "infrared", ",", "1", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "y8", ",", "30", ")", "\n", "", "if", "colour", ":", "\n", "            ", "self", ".", "config_left", ".", "enable_stream", "(", "rs", ".", "stream", ".", "color", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "rgb8", ",", "30", ")", "\n", "\n", "", "self", ".", "pipeline_right", "=", "rs", ".", "pipeline", "(", ")", "\n", "self", ".", "config_right", "=", "rs", ".", "config", "(", ")", "\n", "rs", ".", "config", ".", "enable_device_from_file", "(", "self", ".", "config_right", ",", "args", ".", "input2", ")", "\n", "self", ".", "config_right", ".", "enable_stream", "(", "rs", ".", "stream", ".", "depth", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "z16", ",", "30", ")", "\n", "if", "infrared", ":", "\n", "            ", "self", ".", "config_right", ".", "enable_stream", "(", "rs", ".", "stream", ".", "infrared", ",", "1", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "y8", ",", "30", ")", "\n", "", "if", "colour", ":", "\n", "            ", "self", ".", "config_right", ".", "enable_stream", "(", "rs", ".", "stream", ".", "color", ",", "1280", ",", "720", ",", "rs", ".", "format", ".", "rgb8", ",", "30", ")", "\n", "\n", "# Start streaming from file and pause the streams", "\n", "", "self", ".", "start_left", "=", "self", ".", "pipeline_left", ".", "start", "(", "self", ".", "config_left", ")", "\n", "self", ".", "playback_left", "=", "self", ".", "start_left", ".", "get_device", "(", ")", ".", "as_playback", "(", ")", "\n", "time", ".", "sleep", "(", "0.2", ")", "\n", "# time.sleep(0.219)", "\n", "self", ".", "start_right", "=", "self", ".", "pipeline_right", ".", "start", "(", "self", ".", "config_right", ")", "\n", "self", ".", "playback_right", "=", "self", ".", "start_right", ".", "get_device", "(", ")", ".", "as_playback", "(", ")", "\n", "\n", "# Create opencv window to render image in", "\n", "cv2", ".", "namedWindow", "(", "\"Depth Stream\"", ",", "cv2", ".", "WINDOW_AUTOSIZE", ")", "\n", "\n", "self", ".", "profile_left", "=", "self", ".", "start_left", ".", "get_stream", "(", "rs", ".", "stream", ".", "depth", ")", "\n", "self", ".", "intrinsics_left", "=", "self", ".", "profile_left", ".", "as_video_stream_profile", "(", ")", ".", "get_intrinsics", "(", ")", "\n", "print", "(", "\"left intrinsics: \"", ",", "self", ".", "intrinsics_left", ")", "\n", "\n", "self", ".", "profile_right", "=", "self", ".", "start_right", ".", "get_stream", "(", "rs", ".", "stream", ".", "depth", ")", "\n", "self", ".", "intrinsics_right", "=", "self", ".", "profile_right", ".", "as_video_stream_profile", "(", ")", ".", "get_intrinsics", "(", ")", "\n", "print", "(", "\"right intrinsics: \"", ",", "self", ".", "intrinsics_right", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.getFrames": [[71, 89], ["time.sleep", "pyrealsense2.composite_frame", "pyrealsense2.composite_frame", "reader.Player.playback_right.resume", "reader.Player.pipeline_right.poll_for_frames", "reader.Player.playback_right.pause", "reader.Player.playback_left.resume", "reader.Player.pipeline_left.poll_for_frames", "reader.Player.playback_left.pause", "pyrealsense2.frame", "pyrealsense2.frame", "reader.Player.getFrames"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.getFrames"], ["", "def", "getFrames", "(", "self", ")", ":", "\n", "# frame_right = self.pipeline_right.wait_for_frames() ", "\n", "# frame_left = self.pipeline_left.wait_for_frames()", "\n", "        ", "time", ".", "sleep", "(", "0.04", ")", "\n", "frame_left", "=", "rs", ".", "composite_frame", "(", "rs", ".", "frame", "(", ")", ")", "\n", "frame_right", "=", "rs", ".", "composite_frame", "(", "rs", ".", "frame", "(", ")", ")", "\n", "\n", "self", ".", "playback_right", ".", "resume", "(", ")", "\n", "s_left", "=", "self", ".", "pipeline_right", ".", "poll_for_frames", "(", "frame_left", ")", "\n", "self", ".", "playback_right", ".", "pause", "(", ")", "\n", "\n", "self", ".", "playback_left", ".", "resume", "(", ")", "\n", "s_right", "=", "self", ".", "pipeline_left", ".", "poll_for_frames", "(", "frame_right", ")", "\n", "self", ".", "playback_left", ".", "pause", "(", ")", "\n", "if", "not", "s_right", "or", "not", "s_left", ":", "\n", "            ", "[", "frame_left", ",", "frame_right", "]", "=", "self", ".", "getFrames", "(", ")", "\n", "\n", "", "return", "[", "frame_left", ",", "frame_right", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.stop": [[92, 95], ["reader.Player.pipeline_right.stop", "reader.Player.pipeline_left.stop"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.stop", "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.reader.Player.stop"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "self", ".", "pipeline_right", ".", "stop", "(", ")", "\n", "self", ".", "pipeline_left", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.datasets.MonoDataset.__init__": [[8, 45], ["enumerate", "numpy.linspace", "numpy.asarray", "glob.glob", "print", "print", "numpy.zeros", "len", "numpy.load", "datasets.MonoDataset.__init__.subsampleColumns"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.archive.stitch_two_npy.subsampleColumns"], ["    ", "def", "__init__", "(", "self", ",", "transform", "=", "None", ",", "left", "=", "True", ",", "right", "=", "True", ",", "num_points", "=", "320", ",", "file_paths", "=", "''", ")", ":", "\n", "        ", "self", ".", "identifiers", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "data", "=", "[", "]", "\n", "\n", "def", "subsampleColumns", "(", "arr", ",", "num_points", ")", ":", "\n", "# no camera data", "\n", "            ", "if", "arr", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                ", "return", "np", ".", "zeros", "(", "(", "3", ",", "num_points", ")", ")", "\n", "\n", "", "subsampling", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "arr", "[", "0", "]", ")", "-", "1", ",", "num_points", ")", "\n", "subsampling", "=", "np", ".", "asarray", "(", "subsampling", ",", "dtype", "=", "np", ".", "int", ")", "\n", "return", "arr", "[", ":", ",", "subsampling", "]", "\n", "", "identity", "=", "0", "\n", "for", "target", ",", "path", "in", "enumerate", "(", "file_paths", ")", ":", "\n", "# define what files to load", "\n", "            ", "if", "left", "and", "right", ":", "\n", "                ", "file_type", "=", "\"*/npys/*fused.npy\"", "\n", "", "elif", "left", ":", "\n", "                ", "file_type", "=", "\"*/npys/*leftreduced.npy\"", "\n", "", "else", ":", "\n", "                ", "file_type", "=", "\"*/npys/*rightreduced.npy\"", "\n", "\n", "", "filenames", "=", "glob", ".", "glob", "(", "path", "+", "file_type", ")", "\n", "print", "(", "path", "+", "file_type", ",", "len", "(", "filenames", ")", ")", "\n", "for", "name", "in", "filenames", ":", "\n", "                ", "arr", "=", "np", ".", "load", "(", "name", ")", "\n", "arr", "=", "subsampleColumns", "(", "arr", ",", "num_points", ")", "\n", "# attach point cloud tensor", "\n", "self", ".", "data", ".", "append", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "arr", ")", ")", ")", "\n", "# attach label to each sample for error energy calculation", "\n", "self", ".", "identifiers", ".", "append", "(", "identity", ")", "\n", "identity", "+=", "1", "\n", "# attach class target", "\n", "self", ".", "targets", ".", "append", "(", "target", ")", "\n", "\n", "", "print", "(", "\"loaded: \"", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.datasets.MonoDataset.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.datasets.MonoDataset.__getitem__": [[49, 54], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "#get images and labels here ", "\n", "#returned images must be tensor", "\n", "#labels should be int", "\n", "        ", "return", "self", ".", "data", "[", "idx", "]", ",", "self", ".", "targets", "[", "idx", "]", ",", "self", ".", "identifiers", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.datasets.DuoDataset.__init__": [[56, 93], ["enumerate", "numpy.linspace", "numpy.asarray", "glob.glob", "glob.glob", "range", "print", "numpy.zeros", "len", "numpy.load", "numpy.load", "datasets.DuoDataset.__init__.subsampleColumns"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.archive.stitch_two_npy.subsampleColumns"], ["    ", "def", "__init__", "(", "self", ",", "transform", "=", "None", ",", "num_points", "=", "320", ",", "file_paths", "=", "''", ")", ":", "\n", "        ", "self", ".", "identifiers", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "data_left", "=", "[", "]", "\n", "self", ".", "data_right", "=", "[", "]", "\n", "\n", "def", "subsampleColumns", "(", "arr", ",", "num_points", ")", ":", "\n", "# no camera data", "\n", "            ", "if", "arr", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                ", "return", "np", ".", "zeros", "(", "(", "3", ",", "num_points", ")", ")", "\n", "", "subsampling", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "arr", "[", "0", "]", ")", "-", "1", ",", "num_points", ")", "\n", "subsampling", "=", "np", ".", "asarray", "(", "subsampling", ",", "dtype", "=", "np", ".", "int", ")", "\n", "return", "arr", "[", ":", ",", "subsampling", "]", "\n", "", "identity", "=", "0", "\n", "for", "target", ",", "path", "in", "enumerate", "(", "file_paths", ")", ":", "\n", "# define what files to load", "\n", "            ", "filenames_left", "=", "glob", ".", "glob", "(", "path", "+", "\"*/npys/*leftreduced.npy\"", ")", "\n", "filenames_right", "=", "glob", ".", "glob", "(", "path", "+", "\"*/npys/*rightreduced.npy\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "filenames_left", ")", ")", ":", "\n", "                ", "arr_left", "=", "np", ".", "load", "(", "filenames_left", "[", "i", "]", ")", "\n", "arr_right", "=", "np", ".", "load", "(", "filenames_right", "[", "i", "]", ")", "\n", "\n", "arr_left", "=", "subsampleColumns", "(", "arr_left", ",", "num_points", ")", "\n", "arr_right", "=", "subsampleColumns", "(", "arr_right", ",", "num_points", ")", "\n", "\n", "# attach point cloud tensor", "\n", "self", ".", "data_left", ".", "append", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "arr_left", ")", ")", ")", "\n", "self", ".", "data_right", ".", "append", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "arr_right", ")", ")", ")", "\n", "\n", "# attach label to each sample for error energy calculation", "\n", "self", ".", "identifiers", ".", "append", "(", "identity", ")", "\n", "identity", "+=", "1", "\n", "# attach class target", "\n", "self", ".", "targets", ".", "append", "(", "target", ")", "\n", "\n", "", "print", "(", "\"loaded: \"", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.datasets.DuoDataset.__len__": [[94, 96], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.utils.datasets.DuoDataset.__getitem__": [[97, 102], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "#get images and labels here ", "\n", "#returned images must be tensor", "\n", "#labels should be int", "\n", "        ", "return", "self", ".", "data_left", "[", "idx", "]", ",", "self", ".", "data_right", "[", "idx", "]", ",", "self", ".", "targets", "[", "idx", "]", ",", "self", ".", "identifiers", "[", "idx", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_normless.STN3d.__init__": [[22, 31], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STN3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "9", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_normless.STN3d.forward": [[39, 57], ["torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "x.view.view.view", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "pointnet_normless.STN3d.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "pointnet_normless.STN3d.conv1", "pointnet_normless.STN3d.conv2", "pointnet_normless.STN3d.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pointnet_normless.STN3d.fc1", "pointnet_normless.STN3d.fc2", "iden.cuda.cuda.cuda", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "selu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "selu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "selu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "F", ".", "selu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "selu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "view", "(", "1", ",", "9", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_normless.PointNetfeat.__init__": [[60, 70], ["torch.Module.__init__", "pointnet_normless.STN3d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_feat", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNetfeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stn", "=", "STN3d", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "# self.bn1 = nn.BatchNorm1d(64)", "\n", "# self.bn2 = nn.BatchNorm1d(128)", "\n", "# self.bn3 = nn.BatchNorm1d(1024)", "\n", "self", ".", "global_feat", "=", "global_feat", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_normless.PointNetfeat.forward": [[70, 88], ["pointnet_normless.PointNetfeat.stn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "pointnet_normless.PointNetfeat.conv3", "x.view().repeat.view().repeat.view", "x.view().repeat.view().repeat.size", "x.view().repeat.view().repeat.size", "pointnet_normless.PointNetfeat.conv1", "pointnet_normless.PointNetfeat.conv2", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "trans", "=", "self", ".", "stn", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "F", ".", "selu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "pointfeat", "=", "x", "\n", "x", "=", "F", ".", "selu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "if", "self", ".", "global_feat", ":", "\n", "            ", "return", "x", ",", "trans", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "pointfeat", "]", ",", "1", ")", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_normless.PointNetCls.__init__": [[90, 100], ["torch.Module.__init__", "pointnet_normless.PointNetfeat", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "2", ")", ":", "\n", "        ", "super", "(", "PointNetCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "True", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "k", ")", "\n", "self", ".", "fc_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "# self.bn1 = nn.BatchNorm1d(512)", "\n", "# self.bn2 = nn.BatchNorm1d(256)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_normless.PointNetCls.forward": [[100, 109], ["pointnet_normless.PointNetCls.feat", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "torch.selu", "pointnet_normless.PointNetCls.fc3", "pointnet_normless.PointNetCls.fc1", "pointnet_normless.PointNetCls.fc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "trans", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "selu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "selu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "# x = F.relu(self.bn2(self.fc2(self.fc_drop(x)))) # added dropout", "\n", "# x = F.dropout(x, training=self.training)", "\n", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "0", ")", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_normless.PointNetDenseCls.__init__": [[111, 119], ["torch.Module.__init__", "pointnet_normless.PointNetfeat", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "2", ")", ":", "\n", "        ", "super", "(", "PointNetDenseCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "False", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1088", ",", "512", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "256", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "self", ".", "k", ",", "1", ")", "\n", "# self.bn1 = nn.BatchNorm1d(512)", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_normless.PointNetDenseCls.forward": [[123, 135], ["pointnet_normless.PointNetDenseCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_normless.PointNetDenseCls.conv4", "x.view.view.transpose().contiguous", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "x.view.view.view", "x.view.view.size", "x.view.view.size", "pointnet_normless.PointNetDenseCls.bn1", "pointnet_normless.PointNetDenseCls.bn2", "pointnet_normless.PointNetDenseCls.bn3", "x.view.view.view", "pointnet_normless.PointNetDenseCls.conv1", "pointnet_normless.PointNetDenseCls.conv2", "pointnet_normless.PointNetDenseCls.conv3", "x.view.view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "x", ",", "trans", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "k", ")", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "n_pts", ",", "self", ".", "k", ")", "\n", "return", "x", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet_modified.STN3d.__init__": [[22, 37], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STN3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "256", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "256", ",", "128", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "64", ",", "9", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet_modified.STN3d.forward": [[39, 57], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dualnet_modified.STN3d.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "dualnet_modified.STN3d.bn1", "dualnet_modified.STN3d.bn2", "dualnet_modified.STN3d.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "dualnet_modified.STN3d.bn4", "dualnet_modified.STN3d.bn5", "iden.cuda.cuda.cuda", "dualnet_modified.STN3d.conv1", "dualnet_modified.STN3d.conv2", "dualnet_modified.STN3d.conv3", "dualnet_modified.STN3d.fc1", "dualnet_modified.STN3d.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "256", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "view", "(", "1", ",", "9", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet_modified.PointNetfeat.__init__": [[60, 70], ["torch.Module.__init__", "dualnet_modified.STN3d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_feat", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNetfeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stn", "=", "STN3d", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "128", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "256", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "512", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "global_feat", "=", "global_feat", "\n", "", "def", "forward", "(", "self", ",", "x_left", ",", "x_right", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet_modified.PointNetfeat.forward": [[70, 98], ["dualnet_modified.PointNetfeat.stn", "dualnet_modified.PointNetfeat.stn", "x_right.transpose.transpose.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x_right.transpose.transpose.transpose", "x_left.transpose.transpose.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x_left.transpose.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dualnet_modified.PointNetfeat.bn3", "x.view().repeat.view().repeat.view", "x_left.transpose.transpose.size", "x_left.transpose.transpose.size", "dualnet_modified.PointNetfeat.bn1", "dualnet_modified.PointNetfeat.bn2", "dualnet_modified.PointNetfeat.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "dualnet_modified.PointNetfeat.conv1", "dualnet_modified.PointNetfeat.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_left", ",", "x_right", ")", ":", "\n", "        ", "batchsize", "=", "x_left", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x_left", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "trans_left", "=", "self", ".", "stn", "(", "x_left", ")", "\n", "trans_right", "=", "self", ".", "stn", "(", "x_right", ")", "\n", "\n", "x_right", "=", "x_right", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x_right", "=", "torch", ".", "bmm", "(", "x_right", ",", "trans_right", ")", "\n", "x_right", "=", "x_right", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "x_left", "=", "x_left", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x_left", "=", "torch", ".", "bmm", "(", "x_left", ",", "trans_left", ")", "\n", "x_left", "=", "x_left", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_left", ",", "x_right", ")", ",", "2", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "pointfeat", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "if", "self", ".", "global_feat", ":", "\n", "            ", "return", "x", ",", "trans_left", ",", "trans_right", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "512", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "pointfeat", "]", ",", "1", ")", ",", "trans_left", ",", "trans_right", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet_modified.DualNetCls.__init__": [[100, 110], ["torch.Module.__init__", "dualnet_modified.PointNetfeat", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "2", ")", ":", "\n", "        ", "super", "(", "DualNetCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "True", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "256", ",", "64", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "64", ",", "k", ")", "\n", "self", ".", "fc_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet_modified.DualNetCls.forward": [[111, 117], ["dualnet_modified.DualNetCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dualnet_modified.DualNetCls.fc3", "dualnet_modified.DualNetCls.bn1", "dualnet_modified.DualNetCls.bn2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "dualnet_modified.DualNetCls.fc1", "dualnet_modified.DualNetCls.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_left", ",", "x_right", ")", ":", "\n", "        ", "x", ",", "trans_left", ",", "trans_right", "=", "self", ".", "feat", "(", "x_left", ",", "x_right", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "0", ")", ",", "(", "trans_left", ",", "trans_right", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_dropout.STN3d.__init__": [[22, 37], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STN3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "9", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_dropout.STN3d.forward": [[39, 57], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_dropout.STN3d.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "pointnet_dropout.STN3d.bn1", "pointnet_dropout.STN3d.bn2", "pointnet_dropout.STN3d.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pointnet_dropout.STN3d.bn4", "pointnet_dropout.STN3d.bn5", "iden.cuda.cuda.cuda", "pointnet_dropout.STN3d.conv1", "pointnet_dropout.STN3d.conv2", "pointnet_dropout.STN3d.conv3", "pointnet_dropout.STN3d.fc1", "pointnet_dropout.STN3d.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "view", "(", "1", ",", "9", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_dropout.PointNetfeat.__init__": [[60, 70], ["torch.Module.__init__", "pointnet_dropout.STN3d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_feat", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNetfeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stn", "=", "STN3d", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "global_feat", "=", "global_feat", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_dropout.PointNetfeat.forward": [[70, 88], ["pointnet_dropout.PointNetfeat.stn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_dropout.PointNetfeat.bn3", "x.view().repeat.view().repeat.view", "x.view().repeat.view().repeat.size", "x.view().repeat.view().repeat.size", "pointnet_dropout.PointNetfeat.bn1", "pointnet_dropout.PointNetfeat.bn2", "pointnet_dropout.PointNetfeat.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "pointnet_dropout.PointNetfeat.conv1", "pointnet_dropout.PointNetfeat.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "trans", "=", "self", ".", "stn", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "pointfeat", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "if", "self", ".", "global_feat", ":", "\n", "            ", "return", "x", ",", "trans", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "pointfeat", "]", ",", "1", ")", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_dropout.PointNetCls.__init__": [[90, 100], ["torch.Module.__init__", "pointnet_dropout.PointNetfeat", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "2", ")", ":", "\n", "        ", "super", "(", "PointNetCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "True", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "k", ")", "\n", "self", ".", "fc_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_dropout.PointNetCls.forward": [[100, 108], ["pointnet_dropout.PointNetCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "pointnet_dropout.PointNetCls.fc3", "pointnet_dropout.PointNetCls.bn1", "pointnet_dropout.PointNetCls.bn2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pointnet_dropout.PointNetCls.fc1", "pointnet_dropout.PointNetCls.fc2", "pointnet_dropout.PointNetCls.fc_drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "trans", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "self", ".", "fc_drop", "(", "x", ")", ")", ")", ")", "# added dropout", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "0", ")", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_dropout.PointNetDenseCls.__init__": [[110, 121], ["torch.Module.__init__", "pointnet_dropout.PointNetfeat", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "2", ")", ":", "\n", "        ", "super", "(", "PointNetDenseCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "False", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1088", ",", "512", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "256", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "self", ".", "k", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_dropout.PointNetDenseCls.forward": [[122, 134], ["pointnet_dropout.PointNetDenseCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_dropout.PointNetDenseCls.conv4", "x.view.view.transpose().contiguous", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "x.view.view.view", "x.view.view.size", "x.view.view.size", "pointnet_dropout.PointNetDenseCls.bn1", "pointnet_dropout.PointNetDenseCls.bn2", "pointnet_dropout.PointNetDenseCls.bn3", "x.view.view.view", "pointnet_dropout.PointNetDenseCls.conv1", "pointnet_dropout.PointNetDenseCls.conv2", "pointnet_dropout.PointNetDenseCls.conv3", "x.view.view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "x", ",", "trans", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "k", ")", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "n_pts", ",", "self", ".", "k", ")", "\n", "return", "x", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small_dropout.STN3d.__init__": [[22, 37], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STN3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "256", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "256", ",", "128", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "64", ",", "9", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small_dropout.STN3d.forward": [[39, 57], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_small_dropout.STN3d.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "pointnet_small_dropout.STN3d.bn1", "pointnet_small_dropout.STN3d.bn2", "pointnet_small_dropout.STN3d.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pointnet_small_dropout.STN3d.bn4", "pointnet_small_dropout.STN3d.bn5", "iden.cuda.cuda.cuda", "pointnet_small_dropout.STN3d.conv1", "pointnet_small_dropout.STN3d.conv2", "pointnet_small_dropout.STN3d.conv3", "pointnet_small_dropout.STN3d.fc1", "pointnet_small_dropout.STN3d.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "256", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "view", "(", "1", ",", "9", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small_dropout.PointNetfeat.__init__": [[60, 70], ["torch.Module.__init__", "pointnet_small_dropout.STN3d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_feat", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNetfeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stn", "=", "STN3d", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "256", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "global_feat", "=", "global_feat", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small_dropout.PointNetfeat.forward": [[70, 88], ["pointnet_small_dropout.PointNetfeat.stn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_small_dropout.PointNetfeat.bn3", "x.view().repeat.view().repeat.view", "x.view().repeat.view().repeat.size", "x.view().repeat.view().repeat.size", "pointnet_small_dropout.PointNetfeat.bn1", "pointnet_small_dropout.PointNetfeat.bn2", "pointnet_small_dropout.PointNetfeat.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "pointnet_small_dropout.PointNetfeat.conv1", "pointnet_small_dropout.PointNetfeat.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "trans", "=", "self", ".", "stn", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "pointfeat", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "256", ")", "\n", "if", "self", ".", "global_feat", ":", "\n", "            ", "return", "x", ",", "trans", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "256", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "pointfeat", "]", ",", "1", ")", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small_dropout.PointNetCls.__init__": [[90, 100], ["torch.Module.__init__", "pointnet_small_dropout.PointNetfeat", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "2", ")", ":", "\n", "        ", "super", "(", "PointNetCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "True", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "256", ",", "128", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "64", ",", "k", ")", "\n", "self", ".", "fc_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small_dropout.PointNetCls.forward": [[100, 107], ["pointnet_small_dropout.PointNetCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_small_dropout.PointNetCls.fc3", "pointnet_small_dropout.PointNetCls.bn1", "pointnet_small_dropout.PointNetCls.bn2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pointnet_small_dropout.PointNetCls.fc1", "pointnet_small_dropout.PointNetCls.fc2", "pointnet_small_dropout.PointNetCls.fc_drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "trans", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "self", ".", "fc_drop", "(", "x", ")", ")", ")", ")", "# added dropout", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "0", ")", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small_dropout.PointNetDenseCls.__init__": [[109, 120], ["torch.Module.__init__", "pointnet_small_dropout.PointNetfeat", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "2", ")", ":", "\n", "        ", "super", "(", "PointNetDenseCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "False", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1088", ",", "512", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "256", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "self", ".", "k", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small_dropout.PointNetDenseCls.forward": [[121, 133], ["pointnet_small_dropout.PointNetDenseCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_small_dropout.PointNetDenseCls.conv4", "x.view.view.transpose().contiguous", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "x.view.view.view", "x.view.view.size", "x.view.view.size", "pointnet_small_dropout.PointNetDenseCls.bn1", "pointnet_small_dropout.PointNetDenseCls.bn2", "pointnet_small_dropout.PointNetDenseCls.bn3", "x.view.view.view", "pointnet_small_dropout.PointNetDenseCls.conv1", "pointnet_small_dropout.PointNetDenseCls.conv2", "pointnet_small_dropout.PointNetDenseCls.conv3", "x.view.view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "x", ",", "trans", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "k", ")", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "n_pts", ",", "self", ".", "k", ")", "\n", "return", "x", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small.STN3d.__init__": [[22, 37], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STN3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "256", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "256", ",", "128", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "64", ",", "9", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small.STN3d.forward": [[39, 57], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_small.STN3d.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "pointnet_small.STN3d.bn1", "pointnet_small.STN3d.bn2", "pointnet_small.STN3d.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pointnet_small.STN3d.bn4", "pointnet_small.STN3d.bn5", "iden.cuda.cuda.cuda", "pointnet_small.STN3d.conv1", "pointnet_small.STN3d.conv2", "pointnet_small.STN3d.conv3", "pointnet_small.STN3d.fc1", "pointnet_small.STN3d.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "256", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "view", "(", "1", ",", "9", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small.PointNetfeat.__init__": [[60, 70], ["torch.Module.__init__", "pointnet_small.STN3d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_feat", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNetfeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stn", "=", "STN3d", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "256", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "global_feat", "=", "global_feat", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small.PointNetfeat.forward": [[70, 88], ["pointnet_small.PointNetfeat.stn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_small.PointNetfeat.bn3", "x.view().repeat.view().repeat.view", "x.view().repeat.view().repeat.size", "x.view().repeat.view().repeat.size", "pointnet_small.PointNetfeat.bn1", "pointnet_small.PointNetfeat.bn2", "pointnet_small.PointNetfeat.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "pointnet_small.PointNetfeat.conv1", "pointnet_small.PointNetfeat.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "trans", "=", "self", ".", "stn", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "pointfeat", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "256", ")", "\n", "if", "self", ".", "global_feat", ":", "\n", "            ", "return", "x", ",", "trans", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "256", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "pointfeat", "]", ",", "1", ")", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small.PointNetCls.__init__": [[90, 100], ["torch.Module.__init__", "pointnet_small.PointNetfeat", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "2", ")", ":", "\n", "        ", "super", "(", "PointNetCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "True", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "256", ",", "128", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "64", ",", "k", ")", "\n", "self", ".", "fc_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small.PointNetCls.forward": [[100, 106], ["pointnet_small.PointNetCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_small.PointNetCls.fc3", "pointnet_small.PointNetCls.bn1", "pointnet_small.PointNetCls.bn2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pointnet_small.PointNetCls.fc1", "pointnet_small.PointNetCls.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "trans", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "0", ")", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small.PointNetDenseCls.__init__": [[108, 119], ["torch.Module.__init__", "pointnet_small.PointNetfeat", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "2", ")", ":", "\n", "        ", "super", "(", "PointNetDenseCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "False", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1088", ",", "512", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "256", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "self", ".", "k", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet_small.PointNetDenseCls.forward": [[120, 132], ["pointnet_small.PointNetDenseCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet_small.PointNetDenseCls.conv4", "x.view.view.transpose().contiguous", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "x.view.view.view", "x.view.view.size", "x.view.view.size", "pointnet_small.PointNetDenseCls.bn1", "pointnet_small.PointNetDenseCls.bn2", "pointnet_small.PointNetDenseCls.bn3", "x.view.view.view", "pointnet_small.PointNetDenseCls.conv1", "pointnet_small.PointNetDenseCls.conv2", "pointnet_small.PointNetDenseCls.conv3", "x.view.view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "x", ",", "trans", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "k", ")", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "n_pts", ",", "self", ".", "k", ")", "\n", "return", "x", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet.STN3d.__init__": [[22, 37], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["        ", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "num_epoch", "=", "num_epoch", "\n", "self", ".", "outf", "=", "outf", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "\n", "global", "PointNetCls", ",", "PointNetDenseCls", "\n", "if", "ptype", "==", "''", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "pointnet", "import", "PointNetCls", ",", "PointNetDenseCls", "\n", "", "elif", "ptype", "==", "'small'", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "pointnet_small", "import", "PointNetCls", ",", "PointNetDenseCls", "\n", "", "elif", "ptype", "==", "'dropout'", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "pointnet_dropout", "import", "PointNetCls", ",", "PointNetDenseCls", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet.STN3d.forward": [[39, 57], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.STN3d.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "pointnet.STN3d.bn1", "pointnet.STN3d.bn2", "pointnet.STN3d.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pointnet.STN3d.bn4", "pointnet.STN3d.bn5", "iden.cuda.cuda.cuda", "pointnet.STN3d.conv1", "pointnet.STN3d.conv2", "pointnet.STN3d.conv3", "pointnet.STN3d.fc1", "pointnet.STN3d.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["            ", "from", "utils", ".", "torchnet", ".", "pointnet_normless", "import", "PointNetCls", ",", "PointNetDenseCls", "\n", "", "elif", "ptype", "==", "'small+dropout'", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "pointnet_small_dropout", "import", "PointNetCls", ",", "PointNetDenseCls", "\n", "\n", "\n", "\n", "", "", "def", "train", "(", "self", ",", "dataset", ",", "test_dataset", ")", ":", "\n", "\n", "        ", "def", "randomAugment", "(", "points", ",", "alpha", ",", "beta", ")", ":", "\n", "            ", "disp", "=", "np", ".", "random", ".", "rand", "(", "3", ",", "1", ")", "*", "beta", "\n", "disp", "=", "np", ".", "tile", "(", "disp", ",", "self", ".", "num_points", ")", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "alpha", ",", "(", "3", ",", "self", ".", "num_points", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "points", ")", ")", ":", "\n", "                ", "points", "[", "i", "]", "=", "points", "[", "i", "]", ".", "add", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "disp", "+", "noise", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "\n", "", "", "blue", "=", "lambda", "x", ":", "'\\033[94m'", "+", "x", "+", "'\\033[0m'", "\n", "\n", "# initialise dataloader as single thread else socket errors", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet.PointNetfeat.__init__": [[60, 70], ["torch.Module.__init__", "pointnet.STN3d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "\n", "shuffle", "=", "True", ")", "#, num_workers=int(self.workers))", "\n", "\n", "print", "(", "\"size of train: \"", ",", "len", "(", "dataset", ")", ")", "\n", "print", "(", "\"size of test: \"", ",", "len", "(", "test_dataset", ")", ")", "\n", "\n", "print", "(", "'classes: '", ",", "self", ".", "num_classes", ")", "\n", "\n", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "outf", ")", "\n", "", "except", "OSError", ":", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet.PointNetfeat.forward": [[70, 88], ["pointnet.PointNetfeat.stn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetfeat.bn3", "x.view().repeat.view().repeat.view", "x.view().repeat.view().repeat.size", "x.view().repeat.view().repeat.size", "pointnet.PointNetfeat.bn1", "pointnet.PointNetfeat.bn2", "pointnet.PointNetfeat.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "pointnet.PointNetfeat.conv1", "pointnet.PointNetfeat.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n", "\n", "", "classifier", "=", "PointNetCls", "(", "k", "=", "self", ".", "num_classes", ")", "\n", "\n", "\n", "if", "self", ".", "model", "!=", "''", ":", "\n", "            ", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "model", ")", ")", "\n", "\n", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ",", "momentum", "=", "0.99", ")", "\n", "classifier", ".", "cuda", "(", ")", "\n", "\n", "num_batch", "=", "len", "(", "dataset", ")", "/", "self", ".", "batchsize", "\n", "test_acc", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "self", ".", "num_epoch", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "dataloader", ",", "0", ")", ":", "\n", "                ", "points", ",", "target", "=", "data", "[", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet.PointNetCls.__init__": [[90, 100], ["torch.Module.__init__", "pointnet.PointNetfeat", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["# add translation/jitter augmentation", "\n", "randomAugment", "(", "points", ",", "self", ".", "alpha", ",", "self", ".", "beta", ")", "\n", "\n", "points", ",", "target", "=", "Variable", "(", "points", ")", ",", "Variable", "(", "target", ")", "\n", "points", ",", "target", "=", "points", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "classifier", "=", "classifier", ".", "train", "(", ")", "\n", "pred", ",", "_", "=", "classifier", "(", "points", ")", "\n", "# print(pred)", "\n", "loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet.PointNetCls.forward": [[100, 110], ["pointnet.PointNetCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetCls.fc3", "pointnet.PointNetCls.bn1", "pointnet.PointNetCls.bn2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pointnet.PointNetCls.fc1", "pointnet.PointNetCls.fc2"], "methods", ["None"], ["loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "# print('[%d: %d/%d] train loss: %f accuracy: %f' %(epoch, i, num_batch, loss.item(),correct.item() / float(self.batchsize)))", "\n", "\n", "if", "i", "%", "50", "==", "0", ":", "\n", "                    ", "j", ",", "data", "=", "next", "(", "enumerate", "(", "testdataloader", ",", "0", ")", ")", "\n", "points", ",", "target", "=", "data", "[", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "points", ",", "target", "=", "Variable", "(", "points", ")", ",", "Variable", "(", "target", ")", "\n", "# points = points.transpose(2,1)", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet.PointNetDenseCls.__init__": [[112, 123], ["torch.Module.__init__", "pointnet.PointNetfeat", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["classifier", "=", "classifier", ".", "eval", "(", ")", "\n", "pred", ",", "_", "=", "classifier", "(", "points", ")", "\n", "# print(pred)", "\n", "loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "print", "(", "'[%d: %d/%d] %s loss: %f accuracy: %f'", "%", "(", "epoch", ",", "i", ",", "num_batch", ",", "blue", "(", "'test'", ")", ",", "loss", ".", "item", "(", ")", ",", "correct", ".", "item", "(", ")", "/", "float", "(", "self", ".", "batchsize", ")", ")", ")", "\n", "\n", "# out, _ = classifier.sim_data", "\n", "# print(out[0:10])", "\n", "", "", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "\"model\"", ")", "# '%s/cls_model_%d.pth' % (self.outf, epoch))", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.pointnet.PointNetDenseCls.forward": [[124, 136], ["pointnet.PointNetDenseCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetDenseCls.conv4", "x.view.view.transpose().contiguous", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "x.view.view.view", "x.view.view.size", "x.view.view.size", "pointnet.PointNetDenseCls.bn1", "pointnet.PointNetDenseCls.bn2", "pointnet.PointNetDenseCls.bn3", "x.view.view.view", "pointnet.PointNetDenseCls.conv1", "pointnet.PointNetDenseCls.conv2", "pointnet.PointNetDenseCls.conv3", "x.view.view.transpose"], "methods", ["None"], ["", "acc", "=", "0", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", ")", "\n", "# empty matrix for recording instance accuracies", "\n", "accuracy_matrix", "=", "np", ".", "zeros", "(", "len", "(", "test_dataset", ")", ")", "\n", "\n", "classifier", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# self.batchsize = 1", "\n", "            ", "testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "self", ".", "batchsize", ",", "shuffle", "=", "True", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "testdataloader", ",", "0", ")", ":", "\n", "                ", "points", ",", "target", ",", "identifier", "=", "data", "[", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ",", "data", "[", "2", "]", "\n", "points", ",", "target", "=", "Variable", "(", "points", ")", ",", "Variable", "(", "target", ")", "\n", "points", ",", "target", "=", "points", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.train_classification.loadData": [[44, 68], ["glob.glob", "numpy.load", "train_classification.loadData.subsampleColumns"], "function", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.archive.stitch_two_npy.subsampleColumns"], ["def", "loadData", "(", "file_path", ",", "class_num", ",", "num_points", "=", "2500", ",", "file_type", "=", "\"*.npy\"", ")", ":", "\n", "#helper function for subsampling", "\n", "    ", "def", "subsampleColumns", "(", "arr", ",", "num_points", ")", ":", "\n", "        ", "subsampling", "=", "np", ".", "random", ".", "choice", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "arr", "[", "0", "]", ")", ")", "]", ",", "num_points", ")", "\n", "return", "arr", "[", ":", ",", "subsampling", "]", "\n", "\n", "", "filenames", "=", "glob", ".", "glob", "(", "file_path", "+", "file_type", ")", "\n", "datum", "=", "np", ".", "load", "(", "filenames", "[", "0", "]", ")", "\n", "datum", "=", "subsampleColumns", "(", "datum", ",", "num_points", ")", "\n", "\n", "# add class label", "\n", "datum", "=", "np", ".", "concatenate", "(", "(", "datum", ",", "np", ".", "array", "(", "[", "[", "class_num", "]", ",", "[", "class_num", "]", ",", "[", "class_num", "]", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "datum", "=", "np", ".", "expand_dims", "(", "datum", ",", "axis", "=", "0", ")", "\n", "print", "(", "datum", ".", "shape", ")", "\n", "\n", "for", "name", "in", "filenames", "[", "1", ":", "]", ":", "\n", "        ", "arr", "=", "np", ".", "load", "(", "name", ")", "\n", "arr", "=", "subsampleColumns", "(", "arr", ",", "num_points", ")", "\n", "arr", "=", "np", ".", "concatenate", "(", "(", "arr", ",", "np", ".", "array", "(", "[", "[", "class_num", "]", ",", "[", "class_num", "]", ",", "[", "class_num", "]", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "arr", "=", "np", ".", "expand_dims", "(", "arr", ",", "axis", "=", "0", ")", "\n", "datum", "=", "np", ".", "concatenate", "(", "(", "datum", ",", "arr", ")", ",", "axis", "=", "0", ")", "\n", "", "print", "(", "datum", ".", "shape", ")", "\n", "\n", "return", "datum", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.STN3d.__init__": [[22, 37], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["        ", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "num_epoch", "=", "num_epoch", "\n", "self", ".", "outf", "=", "outf", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "\n", "global", "DualNetCls", ",", "PointNetDenseCls", "\n", "if", "ptype", "==", "''", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "dualnet", "import", "DualNetCls", "\n", "", "elif", "ptype", "==", "'modified'", ":", "\n", "            ", "from", "utils", ".", "torchnet", ".", "dualnet_modified", "import", "DualNetCls", "\n", "\n", "", "", "def", "train", "(", "self", ",", "dataset", ",", "test_dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.STN3d.forward": [[39, 57], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dualnet.STN3d.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "dualnet.STN3d.bn1", "dualnet.STN3d.bn2", "dualnet.STN3d.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "dualnet.STN3d.bn4", "dualnet.STN3d.bn5", "iden.cuda.cuda.cuda", "dualnet.STN3d.conv1", "dualnet.STN3d.conv2", "dualnet.STN3d.conv3", "dualnet.STN3d.fc1", "dualnet.STN3d.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["        ", "def", "randomAugment", "(", "points_left", ",", "points_right", ",", "alpha", ",", "beta", ")", ":", "\n", "            ", "disp", "=", "np", ".", "random", ".", "rand", "(", "3", ",", "1", ")", "*", "beta", "\n", "disp", "=", "np", ".", "tile", "(", "disp", ",", "self", ".", "num_points", ")", "\n", "noise_left", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "alpha", ",", "(", "3", ",", "self", ".", "num_points", ")", ")", "\n", "noise_right", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "alpha", ",", "(", "3", ",", "self", ".", "num_points", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "points_left", ")", ")", ":", "\n", "                ", "points_left", "[", "i", "]", "=", "points_left", "[", "i", "]", ".", "add", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "disp", "+", "noise_left", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "points_right", "[", "i", "]", "=", "points_right", "[", "i", "]", ".", "add", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "disp", "+", "noise_right", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "\n", "", "", "blue", "=", "lambda", "x", ":", "'\\033[94m'", "+", "x", "+", "'\\033[0m'", "\n", "\n", "# initialise dataloader as single thread else socket errors", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "\n", "shuffle", "=", "True", ")", "#, num_workers=int(self.workers))", "\n", "\n", "testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "\n", "shuffle", "=", "True", ")", "#, num_workers=int(self.workers))", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.PointNetfeat.__init__": [[60, 70], ["torch.Module.__init__", "dualnet.STN3d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["\n", "print", "(", "'classes: '", ",", "self", ".", "num_classes", ")", "\n", "\n", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "outf", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n", "\n", "", "classifier", "=", "DualNetCls", "(", "k", "=", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.PointNetfeat.forward": [[70, 88], ["dualnet.PointNetfeat.stn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dualnet.PointNetfeat.bn3", "x.view().repeat.view().repeat.view", "x.view().repeat.view().repeat.size", "x.view().repeat.view().repeat.size", "dualnet.PointNetfeat.bn1", "dualnet.PointNetfeat.bn2", "dualnet.PointNetfeat.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "dualnet.PointNetfeat.conv1", "dualnet.PointNetfeat.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["\n", "\n", "if", "self", ".", "model", "!=", "''", ":", "\n", "            ", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "model", ")", ")", "\n", "\n", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ",", "momentum", "=", "0.99", ")", "\n", "classifier", ".", "cuda", "(", ")", "\n", "\n", "num_batch", "=", "len", "(", "dataset", ")", "/", "self", ".", "batchsize", "\n", "test_acc", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "self", ".", "num_epoch", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "dataloader", ",", "0", ")", ":", "\n", "                ", "points_left", ",", "points_right", ",", "target", "=", "data", "[", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "1", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "\n", "# add translation/jitter augmentation", "\n", "randomAugment", "(", "points_left", ",", "points_right", ",", "self", ".", "alpha", ",", "self", ".", "beta", ")", "\n", "\n", "points_left", ",", "points_right", ",", "target", "=", "Variable", "(", "points_left", ")", ",", "Variable", "(", "points_right", ")", ",", "Variable", "(", "target", ")", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__": [[90, 102], ["torch.Module.__init__", "dualnet.PointNetfeat", "dualnet.PointNetfeat", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.__init__"], ["optimizer", ".", "zero_grad", "(", ")", "\n", "classifier", "=", "classifier", ".", "train", "(", ")", "\n", "pred", ",", "_", "=", "classifier", "(", "points_left", ",", "points_right", ")", "\n", "# print(pred)", "\n", "loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "# print('[%d: %d/%d] train loss: %f accuracy: %f' %(epoch, i, num_batch, loss.item(),correct.item() / float(self.batchsize)))", "\n", "\n", "if", "i", "%", "50", "==", "0", ":", "\n", "                    ", "j", ",", "data", "=", "next", "(", "enumerate", "(", "testdataloader", ",", "0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.torchnet.dualnet.DualNetCls.forward": [[102, 110], ["dualnet.DualNetCls.feat_left", "dualnet.DualNetCls.feat_right", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dualnet.DualNetCls.fc3", "dualnet.DualNetCls.bn1", "dualnet.DualNetCls.bn2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "dualnet.DualNetCls.fc1", "dualnet.DualNetCls.fc2"], "methods", ["None"], ["                    ", "j", ",", "data", "=", "next", "(", "enumerate", "(", "testdataloader", ",", "0", ")", ")", "\n", "points_left", ",", "points_right", ",", "target", "=", "data", "[", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "1", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "data", "[", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "points_left", ",", "points_right", ",", "target", "=", "Variable", "(", "points_left", ")", ",", "Variable", "(", "points_right", ")", ",", "Variable", "(", "target", ")", "\n", "points_left", ",", "points_right", ",", "target", "=", "points_left", ".", "cuda", "(", ")", ",", "points_right", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "classifier", "=", "classifier", ".", "eval", "(", ")", "\n", "pred", ",", "_", "=", "classifier", "(", "points_left", ",", "points_right", ")", "\n", "# print(pred)", "\n", "loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.archive.estimate_transform.draw_registration_result_original_color": [[7, 11], ["copy.deepcopy", "copy.deepcopy.transform", "open3d.draw_geometries"], "function", ["None"], ["def", "draw_registration_result_original_color", "(", "source", ",", "target", ",", "transformation", ")", ":", "\n", "    ", "source_temp", "=", "copy", ".", "deepcopy", "(", "source", ")", "\n", "source_temp", ".", "transform", "(", "transformation", ")", "\n", "od", ".", "draw_geometries", "(", "[", "source_temp", ",", "target", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.archive.stitch_two_npy.applyTransform": [[23, 31], ["range", "len", "numpy.array", "numpy.dot"], "function", ["None"], ["def", "applyTransform", "(", "points", ",", "transform", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "points", "[", "0", "]", ")", ")", ":", "\n", "        ", "pt", "=", "np", ".", "array", "(", "[", "[", "points", "[", "0", "]", "[", "i", "]", "]", ",", "[", "points", "[", "1", "]", "[", "i", "]", "]", ",", "[", "points", "[", "2", "]", "[", "i", "]", "]", ",", "[", "1", "]", "]", ")", "\n", "# print(pt)", "\n", "pt_new", "=", "np", ".", "dot", "(", "transform", ",", "pt", ")", "\n", "points", "[", "0", "]", "[", "i", "]", "=", "pt_new", "[", "0", ",", "0", "]", "\n", "points", "[", "1", "]", "[", "i", "]", "=", "pt_new", "[", "1", ",", "0", "]", "\n", "points", "[", "2", "]", "[", "i", "]", "=", "pt_new", "[", "2", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.archive.stitch_two_npy.croppedValues": [[32, 38], ["enumerate", "crop.append", "abs", "abs", "abs"], "function", ["None"], ["", "", "def", "croppedValues", "(", "arr", ",", "xlim", ",", "ylim", ",", "zlim", ")", ":", "\n", "    ", "crop", "=", "[", "]", "\n", "for", "i", ",", "entry", "in", "enumerate", "(", "arr", ")", ":", "\n", "        ", "if", "abs", "(", "entry", "[", "0", "]", ")", "<=", "xlim", "and", "abs", "(", "entry", "[", "1", "]", ")", "<=", "ylim", "and", "abs", "(", "entry", "[", "2", "]", ")", "<=", "zlim", ":", "\n", "            ", "crop", ".", "append", "(", "i", ")", "\n", "", "", "return", "crop", "\n", "\n"]], "home.repos.pwc.inspect_result.Ilya-Muromets_DuoDepth.archive.stitch_two_npy.subsampleColumns": [[39, 44], ["numpy.random.choice", "numpy.linspace", "numpy.asarray", "len", "range", "len"], "function", ["None"], ["", "def", "subsampleColumns", "(", "arr", ",", "num_points", ")", ":", "\n", "    ", "subsampling", "=", "np", ".", "random", ".", "choice", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "arr", "[", "0", "]", ")", ")", "]", ",", "num_points", ")", "\n", "subsampling", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "arr", "[", "0", "]", ")", "-", "1", ",", "num_points", ")", "\n", "subsampling", "=", "np", ".", "asarray", "(", "subsampling", ",", "dtype", "=", "np", ".", "int", ")", "\n", "return", "arr", "[", ":", ",", "subsampling", "]", "\n", "\n"]]}