{"home.repos.pwc.inspect_result.d909b_perfect_match.apps.run_all_experiments.model_is_pbm_variant": [[106, 108], ["None"], "function", ["None"], ["def", "model_is_pbm_variant", "(", "model_type", ")", ":", "\n", "    ", "return", "model_type", "==", "\"pbm\"", "or", "model_type", "==", "\"pbm_mahal\"", "or", "model_type", "==", "\"pbm_no_tarnet\"", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.run_all_experiments.dataset_is_binary_and_has_counterfactuals": [[110, 112], ["None"], "function", ["None"], ["", "def", "dataset_is_binary_and_has_counterfactuals", "(", ")", ":", "\n", "    ", "return", "DATASET", "==", "\"ihdp\"", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.run_all_experiments.get_dataset_params": [[114, 197], ["len", "len", "len", "len", "len", "numpy.rint().tolist", "len", "len", "len", "len", "numpy.arange().tolist", "numpy.rint", "len", "len", "numpy.arange", "len", "len", "len", "len", "numpy.arange"], "function", ["None"], ["", "def", "get_dataset_params", "(", "DATASET", ")", ":", "\n", "    ", "num_tcga_features", "=", "None", "\n", "if", "DATASET", "==", "\"ihdp\"", ":", "# IHDP - Table 3 (IHDP)", "\n", "        ", "num_hyperopt_runs", "=", "30", "\n", "num_epochs", "=", "400", "\n", "early_stopping_patience", "=", "30", "\n", "num_repeats", "=", "1000", "\n", "treatment_set", "=", "[", "2", "]", "\n", "kappa_set", "=", "[", "0", "]", "\n", "model_set", "=", "[", "\n", "\"pbm\"", ",", "\"pbm_mahal\"", ",", "\"pbm_no_tarnet\"", ",", "\n", "\"knn\"", ",", "\"psm\"", ",", "\"psmpbm\"", ",", "\n", "\"rf\"", ",", "\"cf\"", ",", "\"bart\"", ",", "\n", "\"ganite\"", ",", "\"tarnetpd\"", ",", "\"tarnet\"", ",", "\"cfrnet\"", "\n", "]", "\n", "es_set", "=", "[", "\"mse\"", "]", "*", "len", "(", "model_set", ")", "\n", "pbm_percentages", "=", "[", "1.0", "]", "*", "len", "(", "es_set", ")", "\n", "", "elif", "DATASET", "==", "\"jobs\"", ":", "# Jobs - Table 3 (Jobs)", "\n", "        ", "num_hyperopt_runs", "=", "30", "\n", "num_epochs", "=", "400", "\n", "early_stopping_patience", "=", "30", "\n", "num_repeats", "=", "10", "\n", "treatment_set", "=", "[", "2", "]", "\n", "kappa_set", "=", "[", "0", "]", "\n", "model_set", "=", "[", "\"pbm\"", ",", "\"pbm_mahal\"", ",", "\"pbm_no_tarnet\"", ",", "\"psm\"", ",", "\"psmpbm\"", ",", "\"tarnetpd\"", "]", "\n", "es_set", "=", "[", "\"mse\"", "]", "*", "len", "(", "model_set", ")", "\n", "pbm_percentages", "=", "[", "1.0", "]", "*", "len", "(", "es_set", ")", "\n", "", "elif", "DATASET", "==", "\"tcga\"", ":", "# Influence of higher hidden confounding - Fig. 4", "\n", "        ", "num_hyperopt_runs", "=", "5", "\n", "num_epochs", "=", "100", "\n", "early_stopping_patience", "=", "30", "\n", "num_repeats", "=", "5", "\n", "max_tcga_features", "=", "20531", "\n", "num_tcga_features", "=", "np", ".", "rint", "(", "np", ".", "arange", "(", "0.1", ",", "1.0", ",", "0.1", ")", "*", "max_tcga_features", ")", ".", "tolist", "(", ")", "\n", "treatment_set", "=", "[", "8", "]", "*", "len", "(", "num_tcga_features", ")", "\n", "kappa_set", "=", "[", "10", "]", "*", "len", "(", "num_tcga_features", ")", "\n", "model_set", "=", "[", "\"pbm\"", ",", "\"tarnetpd\"", ",", "\"tarnet\"", ",", "\"cfrnet\"", "]", "\n", "es_set", "=", "[", "\"mse\"", "]", "*", "len", "(", "model_set", ")", "\n", "pbm_percentages", "=", "[", "1.0", "]", "*", "len", "(", "es_set", ")", "\n", "", "else", ":", "# case: News", "\n", "        ", "if", "DATASET", "==", "\"news_matching_percentage\"", ":", "# PBM matching percentage influence - Fig. 2", "\n", "            ", "num_hyperopt_runs", "=", "10", "\n", "num_epochs", "=", "100", "\n", "early_stopping_patience", "=", "30", "\n", "num_repeats", "=", "50", "\n", "treatment_set", "=", "[", "8", "]", "\n", "kappa_set", "=", "[", "10", "]", "\n", "pbm_percentages", "=", "np", ".", "arange", "(", "0.1", ",", "1.0", ",", "0.1", ")", ".", "tolist", "(", ")", "\n", "model_set", "=", "[", "\"pbm\"", "]", "*", "len", "(", "pbm_percentages", ")", "\n", "es_set", "=", "[", "\"mse\"", "]", "*", "len", "(", "pbm_percentages", ")", "\n", "DATASET", "=", "\"news\"", "\n", "", "elif", "DATASET", "==", "\"news_treatment_assignment\"", ":", "# Treatment assignment bias influence Kappa News-8 - Fig. 3", "\n", "            ", "num_hyperopt_runs", "=", "10", "\n", "num_epochs", "=", "100", "\n", "early_stopping_patience", "=", "30", "\n", "num_repeats", "=", "50", "\n", "treatment_set", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", "\n", "kappa_set", "=", "[", "5", ",", "7", ",", "10", ",", "12", ",", "15", ",", "17", ",", "20", "]", "\n", "model_set", "=", "[", "\"pbm\"", ",", "\"tarnetpd\"", ",", "\"tarnet\"", ",", "\"cfrnet\"", ",", "\"cf\"", "]", "\n", "es_set", "=", "[", "\"mse\"", "]", "*", "len", "(", "model_set", ")", "\n", "pbm_percentages", "=", "[", "1.0", "]", "*", "len", "(", "es_set", ")", "\n", "DATASET", "=", "\"news\"", "\n", "", "else", ":", "# News-k - Table 3 (News-2) and Table 4 (News-4, News-8, News-16)", "\n", "            ", "num_hyperopt_runs", "=", "10", "\n", "num_epochs", "=", "100", "\n", "early_stopping_patience", "=", "30", "\n", "num_repeats", "=", "50", "\n", "treatment_set", "=", "[", "2", ",", "4", ",", "8", ",", "16", "]", "\n", "kappa_set", "=", "[", "10", ",", "10", ",", "10", ",", "7", "]", "\n", "model_set", "=", "[", "\n", "\"pbm\"", ",", "\"pbm_mahal\"", ",", "\"pbm_no_tarnet\"", ",", "\n", "\"knn\"", ",", "\"psm\"", ",", "\"psmpbm\"", ",", "\n", "\"rf\"", ",", "\"cf\"", ",", "\"bart\"", ",", "\n", "\"ganite\"", ",", "\"tarnetpd\"", ",", "\"tarnet\"", ",", "\"cfrnet\"", "\n", "]", "\n", "es_set", "=", "[", "\"mse\"", "]", "*", "len", "(", "model_set", ")", "\n", "pbm_percentages", "=", "[", "1.0", "]", "*", "len", "(", "es_set", ")", "\n", "\n", "", "", "if", "num_tcga_features", "is", "None", ":", "\n", "        ", "num_tcga_features", "=", "[", "0", "]", "*", "len", "(", "kappa_set", ")", "\n", "\n", "", "return", "DATASET", ",", "num_hyperopt_runs", ",", "num_epochs", ",", "early_stopping_patience", ",", "num_repeats", ",", "treatment_set", ",", "kappa_set", ",", "model_set", ",", "es_set", ",", "pbm_percentages", ",", "num_tcga_features", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.run_all_experiments.run": [[199, 274], ["run_all_experiments.get_dataset_params", "zip", "zip", "run_all_experiments.model_is_pbm_variant", "range", "run_all_experiments.dataset_is_binary_and_has_counterfactuals", "LOG_FILE.format", "print", "command_params.format.format", "command_params.format.format", "int", "int"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.run_all_experiments.get_dataset_params", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.run_all_experiments.model_is_pbm_variant", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.run_all_experiments.dataset_is_binary_and_has_counterfactuals"], ["", "def", "run", "(", "DATASET", ",", "DATASET_PATH", ",", "OUTPUT_FOLDER", ",", "SUB_COMMAND", ",", "LOG_FILE", ")", ":", "\n", "    ", "DATASET", ",", "num_hyperopt_runs", ",", "num_epochs", ",", "early_stopping_patience", ",", "num_repeats", ",", "treatment_set", ",", "kappa_set", ",", "model_set", ",", "es_set", ",", "pbm_percentages", ",", "num_tcga_features", "=", "get_dataset_params", "(", "DATASET", ")", "\n", "\n", "for", "num_treatments", ",", "kappa", ",", "tcga_features", "in", "zip", "(", "treatment_set", ",", "kappa_set", ",", "num_tcga_features", ")", ":", "\n", "        ", "for", "model_type", ",", "early_stopping_type", ",", "pbm_percentage", "in", "zip", "(", "model_set", ",", "es_set", ",", "pbm_percentages", ")", ":", "\n", "            ", "if", "model_type", "==", "\"pbm\"", ":", "\n", "                ", "command_params", "=", "command_params_pbm", "\n", "", "elif", "model_type", "==", "\"ganite\"", ":", "\n", "                ", "command_params", "=", "command_params_ganite", "\n", "", "elif", "model_type", "==", "\"pbm_mahal\"", ":", "\n", "                ", "command_params", "=", "command_params_pbm_mahalanobis", "\n", "", "elif", "model_type", "==", "\"pbm_no_tarnet\"", ":", "\n", "                ", "command_params", "=", "command_params_pbm_no_tarnet", "\n", "", "elif", "model_type", "==", "\"psm\"", ":", "\n", "                ", "command_params", "=", "command_params_psm", "\n", "", "elif", "model_type", "==", "\"psmpbm\"", ":", "\n", "                ", "command_params", "=", "command_params_psmpbm", "\n", "", "elif", "model_type", "==", "\"knn\"", ":", "\n", "                ", "command_params", "=", "command_params_knn", "\n", "", "elif", "model_type", "==", "\"tarnet\"", ":", "\n", "                ", "command_params", "=", "command_params_tarnet", "\n", "", "elif", "model_type", "==", "\"tarnetpd\"", ":", "\n", "                ", "command_params", "=", "command_params_tarnetpd", "\n", "", "elif", "model_type", "==", "\"cfrnet\"", ":", "\n", "                ", "command_params", "=", "command_params_cfrnet", "\n", "", "elif", "model_type", "==", "\"cf\"", ":", "\n", "                ", "command_params", "=", "command_params_cf", "\n", "", "elif", "model_type", "==", "\"rf\"", ":", "\n", "                ", "command_params", "=", "command_params_rf", "\n", "", "elif", "model_type", "==", "\"bart\"", ":", "\n", "                ", "command_params", "=", "command_params_bart", "\n", "", "else", ":", "\n", "                ", "command_params", "=", "command_params_tarnet", "\n", "\n", "", "if", "model_is_pbm_variant", "(", "model_type", ")", ":", "\n", "                ", "if", "dataset_is_binary_and_has_counterfactuals", "(", ")", ":", "\n", "                    ", "command_params", "=", "command_params", ".", "format", "(", "MODEL_TYPE", "=", "\"nn\"", ")", "\n", "", "else", ":", "\n", "                    ", "command_params", "=", "command_params", ".", "format", "(", "MODEL_TYPE", "=", "\"nn+\"", ")", "\n", "\n", "", "", "if", "early_stopping_type", "==", "\"pehe\"", ":", "\n", "                ", "command_early_stopping", "=", "command_params_pehe", "\n", "", "else", ":", "\n", "                ", "command_early_stopping", "=", "command_params_mse", "\n", "\n", "", "name", "=", "\"pm_{DATASET}{NUM_TREATMENTS}a{KAPPA}k{PBM_P}{TCGA}_{MODEL_TYPE}_{EARLY_STOPPING_TYPE}_{BATCH_NUMBER}\"", ".", "format", "(", "DATASET", "=", "DATASET", ",", "\n", "KAPPA", "=", "kappa", ",", "\n", "PBM_P", "=", "\"{0:.2f}\"", ".", "format", "(", "pbm_percentage", ")", "+", "\"p\"", "if", "pbm_percentage", "!=", "1.0", "else", "\"\"", ",", "\n", "TCGA", "=", "\"{0:d}\"", ".", "format", "(", "int", "(", "tcga_features", ")", ")", "+", "\"f\"", "if", "tcga_features", "!=", "0", "else", "\"\"", ",", "\n", "NUM_TREATMENTS", "=", "num_treatments", ",", "\n", "BATCH_NUMBER", "=", "BATCH_NUMBER", ",", "\n", "MODEL_TYPE", "=", "model_type", ",", "\n", "EARLY_STOPPING_TYPE", "=", "early_stopping_type", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "num_repeats", ")", ":", "\n", "                ", "local_log_file", "=", "LOG_FILE", ".", "format", "(", "NAME", "=", "name", ",", "i", "=", "i", ")", "\n", "\n", "print", "(", "(", "command_template", "+", "default_params", "+", "command_params", "+", "command_early_stopping", "+", "\"&> {LOG_FILE}\"", ")", "\n", ".", "format", "(", "SUB_COMMAND", "=", "SUB_COMMAND", ",", "\n", "LOG_FILE", "=", "local_log_file", ",", "\n", "NAME", "=", "name", ",", "\n", "DATASET", "=", "DATASET", ",", "\n", "DATASET_PATH", "=", "DATASET_PATH", ",", "\n", "OUTPUT_FOLDER", "=", "OUTPUT_FOLDER", ",", "\n", "KAPPA", "=", "kappa", ",", "\n", "TCGA_FEATURES", "=", "int", "(", "tcga_features", ")", ",", "\n", "NUM_TREATMENTS", "=", "num_treatments", ",", "\n", "NUM_HYPEROPT_RUNS", "=", "num_hyperopt_runs", ",", "\n", "NUM_EPOCHS", "=", "num_epochs", ",", "\n", "PBM_PROBABILITY", "=", "pbm_percentage", ",", "\n", "EARLY_STOPPING_PATIENCE", "=", "early_stopping_patience", ",", "\n", "i", "=", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.__init__": [[55, 57], ["perfect_match.apps.evaluate.EvaluationApplication.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "MainApplication", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.setup": [[58, 60], ["super().setup"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.setup"], ["", "def", "setup", "(", "self", ")", ":", "\n", "        ", "super", "(", "MainApplication", ",", "self", ")", ".", "setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.make_train_generator": [[61, 76], ["int", "perfect_match.apps.parameters.clip_percentage", "perfect_match.apps.parameters.clip_percentage", "perfect_match.data_access.patient_generator.make_generator", "numpy.rint"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.patient_generator.make_generator"], ["", "def", "make_train_generator", "(", "self", ",", "randomise", "=", "True", ",", "stratify", "=", "True", ")", ":", "\n", "        ", "seed", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"seed\"", "]", ")", ")", "\n", "validation_fraction", "=", "clip_percentage", "(", "self", ".", "args", "[", "\"validation_set_fraction\"", "]", ")", "\n", "test_fraction", "=", "clip_percentage", "(", "self", ".", "args", "[", "\"test_set_fraction\"", "]", ")", "\n", "\n", "train_generator", ",", "train_steps", "=", "make_generator", "(", "self", ".", "args", ",", "\n", "self", ".", "benchmark", ",", "\n", "is_validation", "=", "False", ",", "\n", "is_test", "=", "False", ",", "\n", "validation_fraction", "=", "validation_fraction", ",", "\n", "test_fraction", "=", "test_fraction", ",", "\n", "seed", "=", "seed", ",", "\n", "randomise", "=", "randomise", ",", "\n", "stratify", "=", "stratify", ")", "\n", "return", "train_generator", ",", "train_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.make_validation_generator": [[77, 91], ["int", "perfect_match.apps.parameters.clip_percentage", "perfect_match.apps.parameters.clip_percentage", "perfect_match.data_access.patient_generator.make_generator", "numpy.rint"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.patient_generator.make_generator"], ["", "def", "make_validation_generator", "(", "self", ",", "randomise", "=", "False", ")", ":", "\n", "        ", "seed", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"seed\"", "]", ")", ")", "\n", "validation_fraction", "=", "clip_percentage", "(", "self", ".", "args", "[", "\"validation_set_fraction\"", "]", ")", "\n", "test_fraction", "=", "clip_percentage", "(", "self", ".", "args", "[", "\"test_set_fraction\"", "]", ")", "\n", "\n", "val_generator", ",", "val_steps", "=", "make_generator", "(", "self", ".", "args", ",", "\n", "self", ".", "benchmark", ",", "\n", "is_validation", "=", "True", ",", "\n", "is_test", "=", "False", ",", "\n", "validation_fraction", "=", "validation_fraction", ",", "\n", "test_fraction", "=", "test_fraction", ",", "\n", "seed", "=", "seed", ",", "\n", "randomise", "=", "randomise", ")", "\n", "return", "val_generator", ",", "val_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.make_test_generator": [[92, 106], ["int", "perfect_match.apps.parameters.clip_percentage", "perfect_match.apps.parameters.clip_percentage", "perfect_match.data_access.patient_generator.make_generator", "numpy.rint"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.patient_generator.make_generator"], ["", "def", "make_test_generator", "(", "self", ",", "randomise", "=", "False", ",", "do_not_sample_equalised", "=", "False", ")", ":", "\n", "        ", "seed", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"seed\"", "]", ")", ")", "\n", "validation_fraction", "=", "clip_percentage", "(", "self", ".", "args", "[", "\"validation_set_fraction\"", "]", ")", "\n", "test_fraction", "=", "clip_percentage", "(", "self", ".", "args", "[", "\"test_set_fraction\"", "]", ")", "\n", "\n", "test_generator", ",", "test_steps", "=", "make_generator", "(", "self", ".", "args", ",", "\n", "self", ".", "benchmark", ",", "\n", "is_validation", "=", "False", ",", "\n", "is_test", "=", "True", ",", "\n", "validation_fraction", "=", "validation_fraction", ",", "\n", "test_fraction", "=", "test_fraction", ",", "\n", "seed", "=", "seed", ",", "\n", "randomise", "=", "randomise", ")", "\n", "return", "test_generator", ",", "test_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.get_best_model_path": [[107, 109], ["os.path.join"], "methods", ["None"], ["", "def", "get_best_model_path", "(", "self", ")", ":", "\n", "        ", "return", "join", "(", "self", ".", "args", "[", "\"output_directory\"", "]", ",", "\"model.npz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.get_prediction_path": [[110, 112], ["os.path.join"], "methods", ["None"], ["", "def", "get_prediction_path", "(", "self", ")", ":", "\n", "        ", "return", "join", "(", "self", ".", "args", "[", "\"output_directory\"", "]", ",", "\"predictions.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.get_hyperopt_parameters": [[113, 151], ["hyper_params.update", "perfect_match.apps.evaluate.EvaluationApplication.method_is_neural_network", "float", "hyper_params.update", "hyper_params.update", "hyper_params.update"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.method_is_neural_network"], ["", "def", "get_hyperopt_parameters", "(", "self", ")", ":", "\n", "        ", "hyper_params", "=", "{", "}", "\n", "\n", "base_params", "=", "{", "\n", "}", "\n", "\n", "hyper_params", ".", "update", "(", "base_params", ")", "\n", "method", "=", "self", ".", "args", "[", "\"method\"", "]", "\n", "if", "EvaluationApplication", ".", "method_is_neural_network", "(", "method", ")", ":", "\n", "            ", "if", "self", ".", "args", "[", "\"benchmark\"", "]", "==", "\"ihdp\"", ":", "\n", "                ", "nn_params", "=", "{", "\n", "\"batch_size\"", ":", "(", "16", ",", "100", ",", "200", ",", "500", ")", "if", "not", "self", ".", "args", "[", "\"with_propensity_batch\"", "]", "else", "(", "4", ",", "8", ",", "50", ",", "100", ",", ")", ",", "\n", "\"num_layers\"", ":", "(", "1", ",", "2", ",", "3", ")", ",", "\n", "\"num_units\"", ":", "(", "50", ",", "100", ",", "200", ",", ")", ",", "\n", "}", "\n", "hyper_params", ".", "update", "(", "nn_params", ")", "\n", "", "elif", "self", ".", "args", "[", "\"benchmark\"", "]", "==", "\"jobs\"", ":", "\n", "                ", "nn_params", "=", "{", "\n", "\"batch_size\"", ":", "(", "50", ",", ")", ",", "\n", "\"num_units\"", ":", "(", "60", ",", ")", ",", "\n", "}", "\n", "hyper_params", ".", "update", "(", "nn_params", ")", "\n", "", "else", ":", "\n", "                ", "nn_params", "=", "{", "\n", "\"batch_size\"", ":", "(", "50", ",", ")", ",", "\n", "\"num_layers\"", ":", "(", "2", ",", "3", ")", "if", "not", "self", ".", "args", "[", "\"with_propensity_dropout\"", "]", "else", "(", "3", ",", ")", ",", "\n", "\"num_units\"", ":", "(", "40", ",", "60", ",", "80", ")", ",", "\n", "}", "\n", "hyper_params", ".", "update", "(", "nn_params", ")", "\n", "\n", "", "", "if", "float", "(", "self", ".", "args", "[", "\"imbalance_loss_weight\"", "]", ")", "!=", "0.0", ":", "\n", "            ", "hyper_params", "[", "\"imbalance_loss_weight\"", "]", "=", "(", "0.1", ",", "1.0", ",", "10.0", ")", "\n", "\n", "", "if", "method", "==", "\"ganite\"", ":", "\n", "            ", "hyper_params", "[", "\"ganite_weight_alpha\"", "]", "=", "(", "0.1", ",", "1", ",", "10", ")", "\n", "hyper_params", "[", "\"ganite_weight_beta\"", "]", "=", "(", "0.1", ",", "1", ",", "10", ")", "\n", "\n", "", "return", "hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.time_steps": [[152, 156], ["perfect_match.apps.util.time_function", "range", "next"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.time_function"], ["", "@", "time_function", "(", "\"time_steps\"", ")", "\n", "def", "time_steps", "(", "self", ",", "generator", ",", "num_steps", "=", "10", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "_", "=", "next", "(", "generator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.train_model": [[157, 277], ["print", "int", "int", "float", "float", "int", "int", "float", "int", "int", "float", "main.MainApplication.get_best_model_path", "int", "float", "int", "float", "float", "perfect_match.data_access.generator.make_keras_generator", "perfect_match.data_access.generator.make_keras_generator", "method_type", "method_type.build", "numpy.rint", "numpy.rint", "numpy.rint", "numpy.rint", "numpy.rint", "numpy.rint", "main.MainApplication.get_method_name_map", "numpy.rint", "numpy.rint", "main.MainApplication.benchmark.get_num_treatments", "os.path.join", "perfect_match.data_access.generator.make_keras_generator", "print", "method_type.load", "method_type.fit_generator", "method_type.save", "perfect_match.models.model_eval.ModelEvaluation.evaluate", "perfect_match.models.model_eval.ModelEvaluation.evaluate", "main.MainApplication.benchmark.get_input_shapes", "main.MainApplication.benchmark.get_output_shapes", "main.MainApplication.build_tensorboard", "perfect_match.apps.evaluate.EvaluationApplication.method_is_neural_network", "perfect_match.apps.evaluate.EvaluationApplication.method_is_neural_network", "main.MainApplication.benchmark.get_num_treatments"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.get_best_model_path", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.make_keras_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.make_keras_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.get_method_name_map", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.make_keras_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM.fit_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.PickleableMixin.save", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.evaluate", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.evaluate", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_input_shapes", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_output_shapes", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.build_tensorboard", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.method_is_neural_network", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.method_is_neural_network", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments"], ["", "", "def", "train_model", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ")", ":", "\n", "        ", "print", "(", "\"INFO: Started training feature extraction.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "with_tensorboard", "=", "self", ".", "args", "[", "\"with_tensorboard\"", "]", "\n", "\n", "n_jobs", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"n_jobs\"", "]", ")", ")", "\n", "num_epochs", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"num_epochs\"", "]", ")", ")", "\n", "learning_rate", "=", "float", "(", "self", ".", "args", "[", "\"learning_rate\"", "]", ")", "\n", "l2_weight", "=", "float", "(", "self", ".", "args", "[", "\"l2_weight\"", "]", ")", "\n", "batch_size", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"batch_size\"", "]", ")", ")", "\n", "early_stopping_patience", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"early_stopping_patience\"", "]", ")", ")", "\n", "early_stopping_on_pehe", "=", "self", ".", "args", "[", "\"early_stopping_on_pehe\"", "]", "\n", "imbalance_loss_weight", "=", "float", "(", "self", ".", "args", "[", "\"imbalance_loss_weight\"", "]", ")", "\n", "num_layers", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"num_layers\"", "]", ")", ")", "\n", "num_units", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"num_units\"", "]", ")", ")", "\n", "dropout", "=", "float", "(", "self", ".", "args", "[", "\"dropout\"", "]", ")", "\n", "method", "=", "self", ".", "args", "[", "\"method\"", "]", "\n", "method_type", "=", "MainApplication", ".", "get_method_name_map", "(", ")", "[", "method", "]", "\n", "best_model_path", "=", "self", ".", "get_best_model_path", "(", ")", "\n", "with_propensity_dropout", "=", "self", ".", "args", "[", "\"with_propensity_dropout\"", "]", "\n", "with_pehe_loss", "=", "self", ".", "args", "[", "\"with_pehe_loss\"", "]", "\n", "use_tarnet", "=", "self", ".", "args", "[", "\"use_tarnet\"", "]", "\n", "match_on_covariates", "=", "self", ".", "args", "[", "\"match_on_covariates\"", "]", "\n", "num_randomised_neighbours", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"num_randomised_neighbours\"", "]", ")", ")", "\n", "propensity_batch_probability", "=", "float", "(", "self", ".", "args", "[", "\"propensity_batch_probability\"", "]", ")", "\n", "strength_of_assignment_bias", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"strength_of_assignment_bias\"", "]", ")", ")", "\n", "ganite_weight_alpha", "=", "float", "(", "self", ".", "args", "[", "\"ganite_weight_alpha\"", "]", ")", "\n", "ganite_weight_beta", "=", "float", "(", "self", ".", "args", "[", "\"ganite_weight_beta\"", "]", ")", "\n", "\n", "network_params", "=", "{", "\n", "\"with_propensity_dropout\"", ":", "with_propensity_dropout", ",", "\n", "\"imbalance_loss_weight\"", ":", "imbalance_loss_weight", ",", "\n", "\"early_stopping_patience\"", ":", "early_stopping_patience", ",", "\n", "\"early_stopping_on_pehe\"", ":", "early_stopping_on_pehe", ",", "\n", "\"num_layers\"", ":", "num_layers", ",", "\n", "\"num_units\"", ":", "num_units", ",", "\n", "\"dropout\"", ":", "dropout", ",", "\n", "\"batch_size\"", ":", "batch_size", ",", "\n", "\"num_treatments\"", ":", "self", ".", "benchmark", ".", "get_num_treatments", "(", ")", ",", "\n", "\"input_dim\"", ":", "self", ".", "benchmark", ".", "get_input_shapes", "(", "self", ".", "args", ")", "[", "0", "]", ",", "\n", "\"output_dim\"", ":", "self", ".", "benchmark", ".", "get_output_shapes", "(", "self", ".", "args", ")", "[", "0", "]", ",", "\n", "\"best_model_path\"", ":", "best_model_path", ",", "\n", "\"l2_weight\"", ":", "l2_weight", ",", "\n", "\"learning_rate\"", ":", "learning_rate", ",", "\n", "\"with_tensorboard\"", ":", "with_tensorboard", ",", "\n", "\"n_jobs\"", ":", "n_jobs", ",", "\n", "\"benchmark\"", ":", "self", ".", "benchmark", ",", "\n", "\"with_pehe_loss\"", ":", "with_pehe_loss", ",", "\n", "\"use_tarnet\"", ":", "use_tarnet", ",", "\n", "\"strength_of_assignment_bias\"", ":", "strength_of_assignment_bias", ",", "\n", "\"ganite_weight_alpha\"", ":", "ganite_weight_alpha", ",", "\n", "\"ganite_weight_beta\"", ":", "ganite_weight_beta", ",", "\n", "\"propensity_batch_probability\"", ":", "propensity_batch_probability", ",", "\n", "\"match_on_covariates\"", ":", "match_on_covariates", ",", "\n", "\"num_randomised_neighbours\"", ":", "num_randomised_neighbours", ",", "\n", "}", "\n", "\n", "num_losses", "=", "1", "\n", "\n", "train_generator", ",", "train_steps", "=", "make_keras_generator", "(", "self", ".", "args", ",", "\n", "train_generator", ",", "\n", "train_steps", ",", "\n", "batch_size", "=", "batch_size", "\n", "if", "EvaluationApplication", ".", "method_is_neural_network", "(", "method", ")", "\n", "else", "train_steps", ",", "\n", "num_losses", "=", "num_losses", ",", "\n", "benchmark", "=", "self", ".", "benchmark", ",", "\n", "is_train", "=", "True", ")", "\n", "\n", "inner_val_generator", ",", "inner_val_steps", "=", "val_generator", ",", "val_steps", "\n", "val_generator", ",", "val_steps", "=", "make_keras_generator", "(", "self", ".", "args", ",", "\n", "inner_val_generator", ",", "\n", "inner_val_steps", ",", "\n", "batch_size", "=", "inner_val_steps", ",", "\n", "num_losses", "=", "num_losses", ",", "\n", "benchmark", "=", "self", ".", "benchmark", ")", "\n", "\n", "assert", "train_steps", ">", "0", ",", "\"You specified a batch_size that is bigger than the size of the train set.\"", "\n", "assert", "val_steps", ">", "0", ",", "\"You specified a batch_size that is bigger than the size of the validation set.\"", "\n", "\n", "if", "with_tensorboard", ":", "\n", "            ", "tb_folder", "=", "join", "(", "self", ".", "args", "[", "\"output_directory\"", "]", ",", "\"tensorboard\"", ")", "\n", "tmp_generator", ",", "tmp_steps", "=", "make_keras_generator", "(", "self", ".", "args", ",", "\n", "inner_val_generator", ",", "\n", "inner_val_steps", ",", "\n", "batch_size", "=", "2", ",", "\n", "num_losses", "=", "num_losses", ",", "\n", "benchmark", "=", "self", ".", "benchmark", ")", "\n", "tb", "=", "[", "MainApplication", ".", "build_tensorboard", "(", "tmp_generator", ",", "tb_folder", ")", "]", "\n", "", "else", ":", "\n", "            ", "tb", "=", "[", "]", "\n", "\n", "", "network_params", "[", "\"tensorboard_callback\"", "]", "=", "tb", "\n", "\n", "model", "=", "method_type", "(", ")", "\n", "model", ".", "build", "(", "**", "network_params", ")", "\n", "\n", "if", "self", ".", "args", "[", "\"load_existing\"", "]", ":", "\n", "            ", "print", "(", "\"INFO: Loading existing model from\"", ",", "self", ".", "args", "[", "\"load_existing\"", "]", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "model", ".", "load", "(", "self", ".", "args", "[", "\"load_existing\"", "]", ")", "\n", "\n", "", "if", "self", ".", "args", "[", "\"do_train\"", "]", ":", "\n", "            ", "if", "EvaluationApplication", ".", "method_is_neural_network", "(", "self", ".", "args", "[", "\"method\"", "]", ")", "and", "self", ".", "args", "[", "\"with_propensity_batch\"", "]", ":", "\n", "                ", "adjusted_train_steps", "=", "train_steps", "/", "self", ".", "benchmark", ".", "get_num_treatments", "(", ")", "\n", "", "else", ":", "\n", "                ", "adjusted_train_steps", "=", "train_steps", "\n", "", "model", ".", "fit_generator", "(", "train_generator", "=", "train_generator", ",", "\n", "train_steps", "=", "adjusted_train_steps", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "val_generator", "=", "val_generator", ",", "\n", "val_steps", "=", "val_steps", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "model", ".", "save", "(", "best_model_path", ")", "\n", "\n", "ModelEvaluation", ".", "evaluate", "(", "model", ",", "train_generator", ",", "train_steps", ",", "\"train\"", ")", "\n", "ModelEvaluation", ".", "evaluate", "(", "model", ",", "val_generator", ",", "val_steps", ",", "\"validation\"", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.evaluate_model": [[278, 296], ["perfect_match.data_access.generator.make_keras_generator", "perfect_match.models.model_eval.ModelEvaluation.evaluate", "perfect_match.models.model_eval.ModelEvaluation.evaluate_counterfactual", "perfect_match.models.model_eval.ModelEvaluation.evaluate.update", "print"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.make_keras_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.evaluate", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.evaluate_counterfactual"], ["", "def", "evaluate_model", "(", "self", ",", "model", ",", "test_generator", ",", "test_steps", ",", "with_print", "=", "True", ",", "set_name", "=", "\"test\"", ")", ":", "\n", "        ", "if", "with_print", ":", "\n", "            ", "print", "(", "\"INFO: Started evaluation.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "test_generator", ",", "test_steps", "=", "make_keras_generator", "(", "self", ".", "args", ",", "\n", "test_generator", ",", "\n", "test_steps", ",", "\n", "batch_size", "=", "test_steps", ",", "\n", "num_losses", "=", "1", ",", "\n", "benchmark", "=", "self", ".", "benchmark", ")", "\n", "\n", "auc_score", "=", "ModelEvaluation", ".", "evaluate", "(", "model", ",", "test_generator", ",", "\n", "test_steps", ",", "set_name", ",", "with_print", "=", "with_print", ")", "\n", "cf_score", "=", "ModelEvaluation", ".", "evaluate_counterfactual", "(", "model", ",", "test_generator", ",", "\n", "test_steps", ",", "self", ".", "benchmark", ",", "\n", "set_name", "+", "\"_cf\"", ",", "with_print", "=", "with_print", ")", "\n", "auc_score", ".", "update", "(", "cf_score", ")", "\n", "return", "auc_score", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.save_predictions": [[297, 327], ["print", "perfect_match.apps.parameters.clip_percentage", "main.MainApplication.get_prediction_path", "pandas.DataFrame", "pandas.DataFrame.to_csv", "print", "generator_fun", "perfect_match.data_access.generator.make_keras_generator", "int", "range", "numpy.rint", "next", "perfect_match.data_access.patient_generator.get_last_row_id", "predictions.append", "numpy.squeeze", "model.predict"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.get_prediction_path", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.make_keras_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.patient_generator.get_last_row_id", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.predict"], ["", "def", "save_predictions", "(", "self", ",", "model", ")", ":", "\n", "        ", "print", "(", "\"INFO: Saving model predictions.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "fraction_of_data_set", "=", "clip_percentage", "(", "self", ".", "args", "[", "\"fraction_of_data_set\"", "]", ")", "\n", "file_path", "=", "self", ".", "get_prediction_path", "(", ")", "\n", "\n", "generators", "=", "[", "self", ".", "make_train_generator", ",", "self", ".", "make_validation_generator", ",", "self", ".", "make_test_generator", "]", "\n", "\n", "predictions", "=", "[", "]", "\n", "for", "generator_fun", "in", "generators", ":", "\n", "            ", "generator", ",", "steps", "=", "generator_fun", "(", "randomise", "=", "False", ")", "\n", "generator", ",", "steps", "=", "make_keras_generator", "(", "self", ".", "args", ",", "\n", "generator", ",", "\n", "steps", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_losses", "=", "1", ",", "\n", "benchmark", "=", "self", ".", "benchmark", ")", "\n", "steps", "=", "int", "(", "np", ".", "rint", "(", "steps", "*", "fraction_of_data_set", ")", ")", "\n", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "                ", "x", ",", "y", "=", "next", "(", "generator", ")", "\n", "\n", "last_id", "=", "get_last_row_id", "(", ")", "\n", "\n", "predictions", ".", "append", "(", "[", "last_id", ",", "np", ".", "squeeze", "(", "model", ".", "predict", "(", "x", ")", ")", "]", ")", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "predictions", ",", "columns", "=", "[", "\"recordId\"", ",", "\"prediction\"", "]", ")", "\n", "df", ".", "to_csv", "(", "file_path", ")", "\n", "\n", "print", "(", "\"INFO: Saved model predictions to\"", ",", "file_path", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.build_tensorboard": [[328, 352], ["os.listdir", "keras.callbacks.TensorBoard", "next", "numpy.expand_dims", "isinstance", "os.path.join", "len", "os.path.isfile", "os.unlink", "print", "numpy.ones"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "build_tensorboard", "(", "tmp_generator", ",", "tb_folder", ")", ":", "\n", "        ", "for", "a_file", "in", "os", ".", "listdir", "(", "tb_folder", ")", ":", "\n", "            ", "file_path", "=", "join", "(", "tb_folder", ",", "a_file", ")", "\n", "try", ":", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "                    ", "os", ".", "unlink", "(", "file_path", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "", "tb", "=", "TensorBoard", "(", "tb_folder", ",", "write_graph", "=", "False", ",", "histogram_freq", "=", "1", ",", "write_grads", "=", "True", ",", "write_images", "=", "False", ")", "\n", "x", ",", "y", "=", "next", "(", "tmp_generator", ")", "\n", "\n", "tb", ".", "validation_data", "=", "x", "\n", "tb", ".", "validation_data", "[", "1", "]", "=", "np", ".", "expand_dims", "(", "tb", ".", "validation_data", "[", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "isinstance", "(", "y", ",", "list", ")", ":", "\n", "            ", "num_targets", "=", "len", "(", "y", ")", "\n", "tb", ".", "validation_data", "+=", "[", "y", "[", "0", "]", "]", "+", "y", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "tb", ".", "validation_data", "+=", "[", "y", "]", "\n", "num_targets", "=", "1", "\n", "\n", "", "tb", ".", "validation_data", "+=", "[", "np", ".", "ones", "(", "x", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "]", "*", "num_targets", "+", "[", "0.0", "]", "\n", "return", "tb", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.main.MainApplication.get_method_name_map": [[353, 369], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_method_name_map", "(", ")", ":", "\n", "        ", "return", "{", "\n", "'knn'", ":", "KNearestNeighbours", ",", "\n", "'ols1'", ":", "OrdinaryLeastSquares1", ",", "\n", "'ols2'", ":", "OrdinaryLeastSquares2", ",", "\n", "'cf'", ":", "CausalForest", ",", "\n", "'rf'", ":", "RandomForest", ",", "\n", "'bart'", ":", "BayesianAdditiveRegressionTrees", ",", "\n", "'nn'", ":", "TFNeuralNetwork", ",", "\n", "'nn+'", ":", "NeuralNetwork", ",", "\n", "'xgb'", ":", "GradientBoostedTrees", ",", "\n", "'gp'", ":", "GaussianProcess", ",", "\n", "'psm'", ":", "PSM", ",", "\n", "'psmpbm'", ":", "PSM_PBM", ",", "\n", "'ganite'", ":", "GANITE", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.__init__": [[40, 67], ["print", "print", "benchmark_type.get_db_file_name", "benchmark_type", "evaluate.EvaluationApplication.setup", "str", "evaluate.EvaluationApplication.get_benchmark_name_map", "os.environ.get", "numpy.finfo", "datetime.datetime.datetime.now", "print", "print", "shutil.copy", "os.path.join", "benchmark_type.get_db_file_name"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_db_file_name", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.setup", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.get_benchmark_name_map", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_db_file_name"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "print", "(", "\"INFO: Args are:\"", ",", "self", ".", "args", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "\"INFO: Running at\"", ",", "str", "(", "datetime", ".", "now", "(", ")", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "data_dir", "=", "self", ".", "args", "[", "\"dataset\"", "]", "\n", "copy_to_local", "=", "self", ".", "args", "[", "\"copy_to_local\"", "]", "\n", "do_hyperopt_on_lsf", "=", "self", ".", "args", "[", "\"do_hyperopt_on_lsf\"", "]", "\n", "benchmark_type", "=", "EvaluationApplication", ".", "get_benchmark_name_map", "(", ")", "[", "self", ".", "args", "[", "\"benchmark\"", "]", "]", "\n", "benchmark_type", ".", "get_db_file_name", "(", ")", "\n", "if", "copy_to_local", "and", "not", "do_hyperopt_on_lsf", ":", "\n", "            ", "tmp_dir", "=", "os", ".", "environ", ".", "get", "(", "\"TMPDIR\"", ")", "\n", "if", "tmp_dir", "is", "None", ":", "\n", "                ", "print", "(", "\"ERROR: Couldn't copy to local because TMPDIR was not set.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"INFO: Copying dataset from\"", ",", "data_dir", ",", "\"to local directory\"", ",", "tmp_dir", ",", "\".\"", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "copy", "(", "join", "(", "data_dir", ",", "benchmark_type", ".", "get_db_file_name", "(", ")", ")", ",", "tmp_dir", ")", "\n", "data_dir", "=", "tmp_dir", "\n", "self", ".", "args", "[", "\"dataset\"", "]", "=", "data_dir", "\n", "\n", "", "", "self", ".", "best_score_index", "=", "0", "\n", "self", ".", "best_score", "=", "np", ".", "finfo", "(", "float", ")", ".", "max", "\n", "self", ".", "best_params", "=", "\"\"", "\n", "self", ".", "best_model_name", "=", "\"best_model.npy\"", "\n", "self", ".", "benchmark", "=", "benchmark_type", "(", "self", ".", "args", "[", "\"dataset\"", "]", ",", "**", "self", ".", "args", ")", "\n", "self", ".", "setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.get_benchmark_name_map": [[68, 76], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_benchmark_name_map", "(", ")", ":", "\n", "        ", "return", "{", "\n", "\"tcga\"", ":", "TCGABenchmark", ",", "\n", "\"twins\"", ":", "TwinsBenchmark", ",", "\n", "\"news\"", ":", "NewsBenchmark", ",", "\n", "\"ihdp\"", ":", "IHDPBenchmark", ",", "\n", "\"jobs\"", ":", "JobsBenchmark", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.method_is_neural_network": [[78, 81], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "method_is_neural_network", "(", "method", ")", ":", "\n", "        ", "return", "method", "==", "\"nn+\"", "or", "method", "==", "\"nn\"", "or", "method", "==", "\"psm\"", "or", "method", "==", "\"ganite\"", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.setup": [[82, 94], ["print", "numpy.random.seed", "tf.set_random_seed", "tf.ConfigProto", "tf.Session"], "methods", ["None"], ["", "def", "setup", "(", "self", ")", ":", "\n", "        ", "seed", "=", "self", ".", "args", "[", "\"seed\"", "]", "\n", "print", "(", "\"INFO: Seed is\"", ",", "seed", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "import", "tensorflow", "as", "tf", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "tf", ".", "set_random_seed", "(", "seed", ")", "\n", "\n", "# Configure tensorflow not to use the entirety of GPU memory at start.", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "session", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.store_cache": [[95, 97], ["print"], "methods", ["None"], ["", "def", "store_cache", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"INFO: Nothing to store.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.train_model": [[98, 100], ["None"], "methods", ["None"], ["", "def", "train_model", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.evaluate_model": [[101, 103], ["None"], "methods", ["None"], ["", "def", "evaluate_model", "(", "self", ",", "model", ",", "test_generator", ",", "test_steps", ",", "with_print", "=", "True", ",", "set_name", "=", "\"\"", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.make_train_generator": [[104, 106], ["None"], "methods", ["None"], ["", "def", "make_train_generator", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.make_validation_generator": [[107, 109], ["None"], "methods", ["None"], ["", "def", "make_validation_generator", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.make_test_generator": [[110, 112], ["None"], "methods", ["None"], ["", "def", "make_test_generator", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.get_hyperopt_parameters": [[113, 115], ["None"], "methods", ["None"], ["", "def", "get_hyperopt_parameters", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.get_best_model_path": [[116, 118], ["None"], "methods", ["None"], ["", "def", "get_best_model_path", "(", "self", ")", ":", "\n", "        ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.get_prediction_path": [[119, 121], ["None"], "methods", ["None"], ["", "def", "get_prediction_path", "(", "self", ")", ":", "\n", "        ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.save_predictions": [[122, 124], ["None"], "methods", ["None"], ["", "def", "save_predictions", "(", "self", ",", "model", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run": [[125, 132], ["evaluate.EvaluationApplication.merge_lsf_runs", "evaluate.EvaluationApplication.run_hyperopt", "evaluate.EvaluationApplication.run_single"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.merge_lsf_runs", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run_hyperopt", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run_single"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", "[", "\"do_merge_lsf\"", "]", ":", "\n", "            ", "self", ".", "merge_lsf_runs", "(", ")", "\n", "", "elif", "self", ".", "args", "[", "\"do_hyperopt\"", "]", ":", "\n", "            ", "return", "self", ".", "run_hyperopt", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "run_single", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run_single": [[133, 179], ["print", "evaluate.EvaluationApplication.benchmark.initialise", "evaluate.EvaluationApplication.make_train_generator", "perfect_match.data_access.generator.make_keras_generator", "evaluate.EvaluationApplication.benchmark.fit", "evaluate.EvaluationApplication.make_train_generator", "evaluate.EvaluationApplication.make_validation_generator", "evaluate.EvaluationApplication.make_test_generator", "print", "evaluate.EvaluationApplication.train_model", "evaluate.EvaluationApplication.evaluate_model", "evaluate.EvaluationApplication.evaluate_model", "evaluate.EvaluationApplication.save_predictions"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.initialise", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.make_train_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.make_keras_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.fit", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.make_train_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.make_validation_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.make_test_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.train_model", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.evaluate_model", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.evaluate_model", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.save_predictions"], ["", "", "def", "run_single", "(", "self", ",", "evaluate_against", "=", "\"test\"", ")", ":", "\n", "        ", "print", "(", "\"INFO: Run with args:\"", ",", "self", ".", "args", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "save_predictions", "=", "self", ".", "args", "[", "\"save_predictions\"", "]", "\n", "\n", "self", ".", "benchmark", ".", "initialise", "(", "self", ".", "args", ")", "\n", "benchmark_generator", ",", "orig_benchmark_steps", "=", "self", ".", "make_train_generator", "(", "stratify", "=", "False", ")", "\n", "benchmark_generator", ",", "benchmark_steps", "=", "make_keras_generator", "(", "self", ".", "args", ",", "\n", "benchmark_generator", ",", "\n", "orig_benchmark_steps", ",", "\n", "batch_size", "=", "orig_benchmark_steps", ",", "\n", "num_losses", "=", "1", ",", "\n", "benchmark", "=", "self", ".", "benchmark", ")", "\n", "\n", "self", ".", "benchmark", ".", "fit", "(", "benchmark_generator", ",", "benchmark_steps", ",", "orig_benchmark_steps", ")", "\n", "\n", "train_generator", ",", "train_steps", "=", "self", ".", "make_train_generator", "(", ")", "\n", "val_generator", ",", "val_steps", "=", "self", ".", "make_validation_generator", "(", ")", "\n", "test_generator", ",", "test_steps", "=", "self", ".", "make_test_generator", "(", ")", "\n", "\n", "print", "(", "\"INFO: Built generators with\"", ",", "train_steps", ",", "\n", "\"training samples, \"", ",", "val_steps", ",", "\n", "\"validation samples and\"", ",", "test_steps", ",", "\"test samples.\"", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "model", "=", "self", ".", "train_model", "(", "train_generator", ",", "\n", "train_steps", ",", "\n", "val_generator", ",", "\n", "val_steps", ")", "\n", "\n", "if", "self", ".", "args", "[", "\"do_evaluate\"", "]", ":", "\n", "            ", "if", "evaluate_against", "==", "\"val\"", ":", "\n", "                ", "eval_generator", ",", "eval_steps", "=", "val_generator", ",", "val_steps", "\n", "", "else", ":", "\n", "                ", "eval_generator", ",", "eval_steps", "=", "test_generator", ",", "test_steps", "\n", "\n", "", "eval_score", "=", "self", ".", "evaluate_model", "(", "model", ",", "eval_generator", ",", "eval_steps", ",", "set_name", "=", "evaluate_against", ")", "\n", "", "else", ":", "\n", "            ", "eval_score", "=", "None", "\n", "\n", "", "if", "save_predictions", ":", "\n", "            ", "self", ".", "save_predictions", "(", "model", ")", "\n", "\n", "", "test_score", "=", "self", ".", "evaluate_model", "(", "model", ",", "test_generator", ",", "test_steps", ",", "\n", "with_print", "=", "evaluate_against", "==", "\"val\"", ",", "set_name", "=", "\"test\"", ")", "\n", "return", "eval_score", ",", "test_score", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.bsub_with_args": [[180, 213], ["os.path.dirname", "os.path.join", "subprocess.check_output", "os.path.abspath", "os.path.join", "evaluate.EvaluationApplication.bsub_with_args.arg_for_key_value"], "methods", ["None"], ["", "def", "bsub_with_args", "(", "self", ",", "args", ",", "dependencies", "=", "None", ",", "is_gpu", "=", "False", ")", ":", "\n", "        ", "this_directory", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "log_file", "=", "join", "(", "args", "[", "\"output_directory\"", "]", ",", "\"run.txt\"", ")", "\n", "\n", "def", "arg_for_key_value", "(", "k", ",", "v", ")", ":", "\n", "            ", "if", "v", "is", "True", ":", "\n", "                ", "return", "\"--\"", "+", "k", "\n", "", "elif", "v", "is", "False", ":", "\n", "                ", "return", "\"\"", "\n", "", "else", ":", "\n", "                ", "return", "\"--\"", "+", "k", "+", "\"=\"", "+", "str", "(", "args", "[", "k", "]", ")", "\n", "\n", "", "", "gpu_requested", "=", "\"-R \\\"rusage[ngpus_excl_p=1]\\\"\"", "if", "is_gpu", "else", "\"\"", "\n", "extra_resources", "=", "\"-R \\\"rusage[mem=16000,scratch=11000]\\\" {gpu_requested} -n 4 -W 120:00\"", ".", "format", "(", "gpu_requested", "=", "gpu_requested", ")", "\n", "sub_command", "=", "\"python \"", "+", "join", "(", "this_directory", ",", "\"main.py\"", ")", "\n", "arguments", "=", "\" \"", ".", "join", "(", "[", "arg_for_key_value", "(", "k", ",", "args", "[", "k", "]", ")", "for", "k", "in", "args", "]", ")", "\n", "dependencies", "=", "\"\"", "if", "dependencies", "is", "None", "else", "\"-w \\\"\"", "+", "\" && \"", ".", "join", "(", "map", "(", "str", ",", "dependencies", ")", ")", "+", "\"\\\"\"", "\n", "bash_profile", "=", "\"~/.gpu_bash_profile\"", "if", "is_gpu", "else", "\"~/.bash_profile\"", "\n", "\n", "command", "=", "\"bsub {extra_resources} {dependencies} -N -o {log_file} /bin/bash -c \"", "\"\\\"source ~/venv/bin/activate && \"", "\"source {bash_profile} && cd ~/bin/ && \"", "\"{sub_command} {arguments}\\\"\"", ".", "format", "(", "sub_command", "=", "sub_command", ",", "\n", "arguments", "=", "arguments", ",", "\n", "log_file", "=", "log_file", ",", "\n", "extra_resources", "=", "extra_resources", ",", "\n", "dependencies", "=", "dependencies", ",", "\n", "bash_profile", "=", "bash_profile", ")", "\n", "\n", "output", "=", "subprocess", ".", "check_output", "(", "command", ",", "shell", "=", "True", ")", "\n", "job_id", "=", "output", "[", "output", ".", "find", "(", "\"<\"", ")", "+", "1", ":", "output", ".", "find", "(", "\">\"", ")", "]", "\n", "return", "job_id", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run_singe_on_lsf": [[214, 230], ["os.path.join", "dict", "dict.update", "evaluate.EvaluationApplication.bsub_with_args", "os.path.isdir", "os.mkdir", "str"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.bsub_with_args"], ["", "def", "run_singe_on_lsf", "(", "self", ",", "initial_args", ",", "hyperopt_offset", ")", ":", "\n", "        ", "run_directory", "=", "join", "(", "initial_args", "[", "\"output_directory\"", "]", ",", "\"run_\"", "+", "str", "(", "hyperopt_offset", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "run_directory", ")", ":", "\n", "# Create a sub directory for the LSF job.", "\n", "            ", "os", ".", "mkdir", "(", "run_directory", ")", "\n", "\n", "", "initial_args", "=", "dict", "(", "initial_args", ")", "\n", "new_args", "=", "{", "\n", "\"hyperopt_offset\"", ":", "hyperopt_offset", ",", "\n", "\"num_hyperopt_runs\"", ":", "hyperopt_offset", "+", "1", ",", "\n", "\"do_hyperopt_on_lsf\"", ":", "False", ",", "\n", "\"output_directory\"", ":", "run_directory", "\n", "}", "\n", "initial_args", ".", "update", "(", "new_args", ")", "\n", "return", "self", ".", "bsub_with_args", "(", "initial_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.post_merge_job": [[231, 239], ["dict", "dict.update", "evaluate.EvaluationApplication.bsub_with_args"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.bsub_with_args"], ["", "def", "post_merge_job", "(", "self", ",", "initial_args", ",", "job_ids", ")", ":", "\n", "        ", "initial_args", "=", "dict", "(", "initial_args", ")", "\n", "new_args", "=", "{", "\n", "\"do_merge_lsf\"", ":", "True", ",", "\n", "\"copy_to_local\"", ":", "False", "\n", "}", "\n", "initial_args", ".", "update", "(", "new_args", ")", "\n", "return", "self", ".", "bsub_with_args", "(", "initial_args", ",", "dependencies", "=", "job_ids", ",", "is_gpu", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.merge_lsf_runs": [[240, 261], ["sorted", "haystack.split", "glob.glob", "open", "len", "len", "os.path.join", "os.path.join", "len", "len", "open", "infile.read", "infile.read.count", "outfile.write", "evaluate.EvaluationApplication.merge_lsf_runs.find_nth"], "methods", ["None"], ["", "def", "merge_lsf_runs", "(", "self", ")", ":", "\n", "        ", "def", "find_nth", "(", "haystack", ",", "needle", ",", "n", ")", ":", "\n", "            ", "parts", "=", "haystack", ".", "split", "(", "needle", ",", "n", "+", "1", ")", "\n", "if", "len", "(", "parts", ")", "<=", "n", "+", "1", ":", "\n", "                ", "return", "-", "1", "\n", "", "return", "len", "(", "haystack", ")", "-", "len", "(", "parts", "[", "-", "1", "]", ")", "-", "len", "(", "needle", ")", "\n", "\n", "", "output_directory", "=", "self", ".", "args", "[", "\"output_directory\"", "]", "\n", "filenames", "=", "sorted", "(", "glob", ".", "glob", "(", "join", "(", "output_directory", ",", "\"*/run.txt\"", ")", ")", ")", "\n", "with", "open", "(", "join", "(", "output_directory", ",", "\"summary.txt\"", ")", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "for", "fname", "in", "filenames", ":", "\n", "                ", "with", "open", "(", "fname", ")", "as", "infile", ":", "\n", "                    ", "contents", "=", "infile", ".", "read", "(", ")", "\n", "contents", "=", "contents", "+", "contents", "\n", "num_run_results", "=", "contents", ".", "count", "(", "\"Best_test_score\"", ")", "\n", "if", "num_run_results", ">", "1", ":", "\n", "# Only merge the latest result.", "\n", "                        ", "last_idx", "=", "find_nth", "(", "contents", ",", "\"Best_test_score\"", ",", "num_run_results", "-", "2", ")", "\n", "contents", "=", "contents", "[", "last_idx", ":", "]", "\n", "contents", "=", "contents", "[", "contents", ".", "find", "(", "\"}\"", ")", "+", "1", ":", "]", "# Remove the last line too.", "\n", "", "outfile", ".", "write", "(", "contents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.get_random_hyperopt_parameters": [[262, 274], ["dict", "hyperopt_parameters.iteritems", "isinstance", "numpy.random.uniform", "isinstance", "numpy.random.choice"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "get_random_hyperopt_parameters", "(", "initial_args", ",", "hyperopt_parameters", ",", "hyperopt_index", ")", ":", "\n", "        ", "new_params", "=", "dict", "(", "initial_args", ")", "\n", "for", "k", ",", "v", "in", "hyperopt_parameters", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "                ", "min_val", ",", "max_val", "=", "v", "\n", "new_params", "[", "k", "]", "=", "np", ".", "random", ".", "uniform", "(", "min_val", ",", "max_val", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "tuple", ")", ":", "\n", "                ", "choice", "=", "np", ".", "random", ".", "choice", "(", "v", ")", "\n", "new_params", "[", "k", "]", "=", "choice", "\n", "# new_params[\"experiment_index\"] = hyperopt_index", "\n", "", "", "return", "new_params", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.print_run_results": [[275, 284], ["print", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print_run_results", "(", "args", ",", "hyperopt_parameters", ",", "run_index", ",", "score", ",", "run_time", ")", ":", "\n", "        ", "message", "=", "\"Hyperopt run [\"", "+", "str", "(", "run_index", ")", "+", "\"]:\"", "\n", "best_params_message", "=", "\"\"", "\n", "for", "k", "in", "hyperopt_parameters", ":", "\n", "            ", "best_params_message", "+=", "k", "+", "\"=\"", "+", "\"{:.4f}\"", ".", "format", "(", "args", "[", "k", "]", ")", "+", "\", \"", "\n", "", "best_params_message", "+=", "\"time={:.4f},\"", ".", "format", "(", "run_time", ")", "+", "\"score={:.4f}\"", ".", "format", "(", "score", ")", "\n", "print", "(", "\"INFO:\"", ",", "message", ",", "best_params_message", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "best_params_message", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run_hyperopt": [[285, 358], ["int", "int", "dict", "print", "range", "numpy.rint", "numpy.rint", "time.time", "evaluate.EvaluationApplication.get_hyperopt_parameters", "evaluate.EvaluationApplication.get_random_hyperopt_parameters", "evaluate.EvaluationApplication.post_merge_job", "print", "print", "score_dicts[].keys", "len", "evaluate.EvaluationApplication.run_singe_on_lsf", "job_ids.append", "evaluate.EvaluationApplication.run_single", "score_dicts.append", "test_score_dicts.append", "keras.clear_session", "evaluate.EvaluationApplication.print_run_results", "time.time", "evaluate.EvaluationApplication.get_best_model_path", "os.path.dirname", "os.path.isfile", "os.path.isfile", "map", "print", "os.rename", "os.rename", "numpy.mean", "numpy.std", "numpy.percentile", "numpy.percentile", "numpy.median", "numpy.min", "numpy.max", "print", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.get_hyperopt_parameters", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.get_random_hyperopt_parameters", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.post_merge_job", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run_singe_on_lsf", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run_single", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.print_run_results", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.get_best_model_path"], ["", "def", "run_hyperopt", "(", "self", ")", ":", "\n", "        ", "num_hyperopt_runs", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"num_hyperopt_runs\"", "]", ")", ")", "\n", "hyperopt_offset", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "args", "[", "\"hyperopt_offset\"", "]", ")", ")", "\n", "do_hyperopt_on_lsf", "=", "self", ".", "args", "[", "\"do_hyperopt_on_lsf\"", "]", "\n", "\n", "initial_args", "=", "dict", "(", "self", ".", "args", ")", "\n", "\n", "print", "(", "\"INFO: Performing hyperparameter optimisation.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "job_ids", ",", "score_dicts", ",", "test_score_dicts", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_hyperopt_runs", ")", ":", "\n", "            ", "run_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "hyperopt_parameters", "=", "self", ".", "get_hyperopt_parameters", "(", ")", "\n", "self", ".", "args", "=", "EvaluationApplication", ".", "get_random_hyperopt_parameters", "(", "initial_args", ",", "\n", "hyperopt_parameters", ",", "\n", "hyperopt_index", "=", "i", ")", "\n", "\n", "if", "i", "<", "hyperopt_offset", ":", "\n", "# Skip until we reached the hyperopt offset.", "\n", "                ", "continue", "\n", "\n", "", "if", "do_hyperopt_on_lsf", ":", "\n", "                ", "job_id", "=", "self", ".", "run_singe_on_lsf", "(", "initial_args", ",", "i", ")", "\n", "job_ids", ".", "append", "(", "job_id", ")", "\n", "", "else", ":", "\n", "                ", "eval_set", "=", "\"test\"", "if", "self", ".", "args", "[", "\"hyperopt_against_eval_set\"", "]", "else", "\"val\"", "\n", "score_dict", ",", "test_dict", "=", "self", ".", "run_single", "(", "evaluate_against", "=", "eval_set", ")", "\n", "score_dicts", ".", "append", "(", "score_dict", ")", "\n", "test_score_dicts", ".", "append", "(", "test_dict", ")", "\n", "\n", "score", "=", "score_dict", "[", "\"cf_pehe_nn\"", "]", "\n", "\n", "run_time", "=", "time", ".", "time", "(", ")", "-", "run_start_time", "\n", "\n", "# This is necessary to avoid memory leaks when repeatedly building new models.", "\n", "K", ".", "clear_session", "(", ")", "\n", "\n", "best_params_message", "=", "EvaluationApplication", ".", "print_run_results", "(", "self", ".", "args", ",", "\n", "hyperopt_parameters", ",", "\n", "i", ",", "score", ",", "run_time", ")", "\n", "if", "score", "<", "self", ".", "best_score", "and", "self", ".", "args", "[", "\"do_train\"", "]", ":", "\n", "                    ", "self", ".", "best_score_index", "=", "i", "\n", "self", ".", "best_score", "=", "score", "\n", "self", ".", "best_params", "=", "best_params_message", "\n", "best_model_path", "=", "self", ".", "get_best_model_path", "(", ")", "\n", "best_model_dir", "=", "os", ".", "path", ".", "dirname", "(", "best_model_path", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "best_model_path", ")", ":", "\n", "                        ", "os", ".", "rename", "(", "best_model_path", ",", "join", "(", "best_model_dir", ",", "self", ".", "best_model_name", ")", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "best_model_path", "+", "\".json\"", ")", ":", "\n", "                        ", "os", ".", "rename", "(", "best_model_path", "+", "\".json\"", ",", "join", "(", "best_model_dir", ",", "self", ".", "best_model_name", "+", "\".json\"", ")", ")", "\n", "\n", "", "", "", "", "if", "do_hyperopt_on_lsf", ":", "\n", "            ", "self", ".", "post_merge_job", "(", "initial_args", ",", "job_ids", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"INFO: Best[\"", ",", "self", ".", "best_score_index", ",", "\"] config was\"", ",", "self", ".", "best_params", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "self", ".", "args", "=", "initial_args", "\n", "\n", "print", "(", "\"INFO: Best_test_score:\"", ",", "test_score_dicts", "[", "self", ".", "best_score_index", "]", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "for", "key", "in", "score_dicts", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "values", "=", "map", "(", "lambda", "x", ":", "x", "[", "key", "]", ",", "score_dicts", ")", "\n", "print", "(", "key", ",", "\"=\"", ",", "np", ".", "mean", "(", "values", ")", ",", "np", ".", "std", "(", "values", ")", ",", "\n", "\"(\"", ",", "np", ".", "percentile", "(", "values", ",", "2.5", ")", ",", "\",\"", ",", "np", ".", "percentile", "(", "values", ",", "97.5", ")", ",", "\"),\"", ",", "\n", "\"median=\"", ",", "np", ".", "median", "(", "values", ")", ",", "\n", "\"(\"", ",", "np", ".", "min", "(", "values", ")", ",", "\",\"", ",", "np", ".", "max", "(", "values", ")", ",", "\"),\"", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "\"ERROR: Could not get key\"", ",", "key", ",", "\"for all score dicts.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "", "", "if", "len", "(", "score_dicts", ")", "!=", "0", ":", "\n", "            ", "return", "score_dicts", "[", "self", ".", "best_score_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.ReadableDir.__call__": [[25, 33], ["os.access", "os.path.isdir", "argparse.ArgumentTypeError", "setattr", "argparse.ArgumentTypeError"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "        ", "prospective_dir", "=", "values", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "prospective_dir", ")", ":", "\n", "            ", "raise", "ArgumentTypeError", "(", "\"readable_dir:{} is not a valid path\"", ".", "format", "(", "prospective_dir", ")", ")", "\n", "", "if", "os", ".", "access", "(", "prospective_dir", ",", "os", ".", "R_OK", ")", ":", "\n", "            ", "setattr", "(", "namespace", ",", "self", ".", "dest", ",", "prospective_dir", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ArgumentTypeError", "(", "\"readable_dir:{} is not a readable dir\"", ".", "format", "(", "prospective_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.parse_parameters": [[35, 154], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "", "def", "parse_parameters", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Implicit ensemble.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "action", "=", "ReadableDir", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Folder containing the data set to be loaded.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "909", ",", "\n", "help", "=", "\"Seed for the random number generator.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_directory\"", ",", "default", "=", "\"./models\"", ",", "\n", "help", "=", "\"Base directory of all output files.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_name\"", ",", "default", "=", "\"forecast.h5.npz\"", ",", "\n", "help", "=", "\"Base directory of all output files.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--load_existing\"", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "\"Existing model to load.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_jobs\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "\"Number of processes to use where available for multitasking.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "default", "=", "0.0001", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Learning rate to use for training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--l2_weight\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"L2 weight decay used on neural network weights.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_epochs\"", ",", "type", "=", "int", ",", "default", "=", "150", ",", "\n", "help", "=", "\"Number of epochs to train for.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "\"Batch size to use for training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--early_stopping_patience\"", ",", "type", "=", "int", ",", "default", "=", "12", ",", "\n", "help", "=", "\"Number of stale epochs to wait before terminating training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_units\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "\"Number of neurons to use in DNN layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_layers\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "\"Number of layers to use in DNNs.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Value of the dropout parameter used in training in the network.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--imbalance_loss_weight\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Value of the imbalance penalty weight for balancing the learnt representation.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fraction_of_data_set\"", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Fraction of time_series to use for folds.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--validation_set_fraction\"", ",", "type", "=", "float", ",", "default", "=", "0.27", ",", "\n", "help", "=", "\"Fraction of time_series to hold out for the validation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_set_fraction\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "\"Fraction of time_series to hold out for the test set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_hyperopt_runs\"", ",", "type", "=", "int", ",", "default", "=", "35", ",", "\n", "help", "=", "\"Number of hyperopt runs to perform.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--hyperopt_offset\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Offset at which to start the hyperopt runs.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tcga_num_features\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "\"Number of features to use from TCGA dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--experiment_index\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Index into repeatable experiments' datasets.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_treatments\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "\"Number of treatments to use when benchmark supports variable numbers of treatments.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_randomised_neighbours\"", ",", "type", "=", "int", ",", "default", "=", "6", ",", "\n", "help", "=", "\"Number of neighbours to use for randomised match assignment in PM.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--strength_of_assignment_bias\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "\"Strenght of assignment bias (kappa) to use for semi-synthetic datasets.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--propensity_batch_probability\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "\"Fraction of batch samples matched with their propensity matched nearest neighbor.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ganite_weight_alpha\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "\"Supervised loss weight alpha for the counterfactual block when using method = GANITE.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ganite_weight_beta\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "\"Supervised loss weight beta for the ITE block when using method = GANITE.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--benchmark\"", ",", "default", "=", "\"tcga\"", ",", "\n", "help", "=", "\"Benchmark dataset to use. One of ['news', 'tcga', 'ihdp', 'jobs'].\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--method\"", ",", "default", "=", "\"ols1\"", ",", "\n", "help", "=", "\"Method to use. One of \"", "\n", "\"['knn', 'ols1', 'ols2', 'cf', 'rf', 'bart', 'nn', 'nn+', 'xgb', 'gp', 'psm', 'ganite'].\"", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "with_rnaseq", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--with_rnaseq\"", ",", "dest", "=", "'with_rnaseq'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to use RNASeq data.\"", ")", "\n", "parser", ".", "set_defaults", "(", "use_tarnet", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_not_use_tarnet\"", ",", "dest", "=", "'use_tarnet'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "\"Whether or not to use the TARNET architecture.\"", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "do_train", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_train\"", ",", "dest", "=", "'do_train'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to train a model.\"", ")", "\n", "parser", ".", "set_defaults", "(", "do_hyperopt", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_hyperopt\"", ",", "dest", "=", "'do_hyperopt'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to perform hyperparameter optimisation.\"", ")", "\n", "parser", ".", "set_defaults", "(", "do_evaluate", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_evaluate\"", ",", "dest", "=", "'do_evaluate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to evaluate a model.\"", ")", "\n", "parser", ".", "set_defaults", "(", "hyperopt_against_eval_set", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--hyperopt_against_eval_set\"", ",", "dest", "=", "'hyperopt_against_eval_set'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to evaluate hyperopt runs against the evaluation set.\"", ")", "\n", "parser", ".", "set_defaults", "(", "copy_to_local", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--copy_to_local\"", ",", "dest", "=", "'copy_to_local'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to copy the dataset to a local cache before training.\"", ")", "\n", "parser", ".", "set_defaults", "(", "do_hyperopt_on_lsf", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_hyperopt_on_lsf\"", ",", "dest", "=", "'do_hyperopt_on_lsf'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to perform hyperparameter optimisation split into multiple jobs on LSF.\"", ")", "\n", "parser", ".", "set_defaults", "(", "do_merge_lsf", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_merge_lsf\"", ",", "dest", "=", "'do_merge_lsf'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to merge LSF hyperopt runs.\"", ")", "\n", "parser", ".", "set_defaults", "(", "with_tensorboard", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--with_tensorboard\"", ",", "dest", "=", "'with_tensorboard'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to serve tensorboard data.\"", ")", "\n", "parser", ".", "set_defaults", "(", "with_propensity_dropout", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--with_propensity_dropout\"", ",", "dest", "=", "'with_propensity_dropout'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to use propensity dropout.\"", ")", "\n", "parser", ".", "set_defaults", "(", "with_propensity_batch", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--with_propensity_batch\"", ",", "dest", "=", "'with_propensity_batch'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to use propensity batching.\"", ")", "\n", "parser", ".", "set_defaults", "(", "early_stopping_on_pehe", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--early_stopping_on_pehe\"", ",", "dest", "=", "'early_stopping_on_pehe'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to use early stopping on nearest-neighbour PEHE.\"", ")", "\n", "parser", ".", "set_defaults", "(", "with_pehe_loss", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--with_pehe_loss\"", ",", "dest", "=", "'with_pehe_loss'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to use the PEHE objective.\"", ")", "\n", "parser", ".", "set_defaults", "(", "match_on_covariates", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--match_on_covariates\"", ",", "dest", "=", "'match_on_covariates'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to match on covariates (alternative is to match on propensity score).\"", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "save_predictions", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_not_save_predictions\"", ",", "dest", "=", "'save_predictions'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "\"Whether or not to save predictions.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_predictions\"", ",", "dest", "=", "'save_predictions'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether or not to save predictions.\"", ")", "\n", "\n", "return", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage": [[156, 158], ["max", "min", "float"], "function", ["None"], ["", "def", "clip_percentage", "(", "value", ")", ":", "\n", "    ", "return", "max", "(", "0.", ",", "min", "(", "1.", ",", "float", "(", "value", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.random_cycle_generator": [[26, 32], ["numpy.random.RandomState", "np.random.RandomState.permutation"], "function", ["None"], ["def", "random_cycle_generator", "(", "num_origins", ",", "seed", "=", "505", ")", ":", "\n", "    ", "while", "1", ":", "\n", "        ", "random_generator", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "samples", "=", "random_generator", ".", "permutation", "(", "num_origins", ")", "\n", "for", "sample", "in", "samples", ":", "\n", "            ", "yield", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.resample_with_replacement_generator": [[34, 39], ["range", "len", "numpy.random.randint", "len"], "function", ["None"], ["", "", "", "def", "resample_with_replacement_generator", "(", "array", ")", ":", "\n", "    ", "while", "1", ":", "\n", "        ", "for", "_", "in", "range", "(", "len", "(", "array", ")", ")", ":", "\n", "            ", "sample_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "array", ")", ")", "\n", "yield", "array", "[", "sample_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.get_num_available_gpus": [[41, 44], ["tensorflow.python.client.device_lib.list_local_devices", "len"], "function", ["None"], ["", "", "", "def", "get_num_available_gpus", "(", ")", ":", "\n", "    ", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "return", "len", "(", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.error": [[46, 48], ["util.log"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.log"], ["", "def", "error", "(", "*", "msg", ")", ":", "\n", "    ", "log", "(", "log_level", "=", "\"ERROR\"", ",", "*", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.log": [[50, 52], ["print"], "function", ["None"], ["", "def", "log", "(", "log_level", "=", "\"INFO\"", ",", "*", "msg", ")", ":", "\n", "    ", "print", "(", "log_level", ",", "\":\"", ",", "*", "msg", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.report_duration": [[54, 56], ["util.log"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.log"], ["", "def", "report_duration", "(", "task", ",", "duration", ")", ":", "\n", "    ", "log", "(", "task", ",", "\"took\"", ",", "duration", ",", "\"seconds.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.time_function": [[58, 68], ["time.time", "func", "util.report_duration", "time.time"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.report_duration"], ["", "def", "time_function", "(", "task_name", ")", ":", "\n", "    ", "def", "time_function", "(", "func", ")", ":", "\n", "        ", "def", "func_wrapper", "(", "*", "args", ",", "**", "kargs", ")", ":", "\n", "            ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "return_value", "=", "func", "(", "*", "args", ",", "**", "kargs", ")", "\n", "t_dur", "=", "time", ".", "time", "(", ")", "-", "t_start", "\n", "report_duration", "(", "task_name", ",", "t_dur", ")", "\n", "return", "return_value", "\n", "", "return", "func_wrapper", "\n", "", "return", "time_function", "\n", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.batch_augmentation.BatchAugmentation.make_propensity_lists": [[25, 32], ["batch_augmentation.BatchAugmentation.batch_augmentation.make_propensity_lists", "mahalanobis_batch.MahalanobisBatch", "propensity_batch.PropensityBatch"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.make_propensity_lists"], ["    ", "def", "make_propensity_lists", "(", "self", ",", "train_ids", ",", "benchmark_implementation", ",", "**", "kwargs", ")", ":", "\n", "        ", "match_on_covariates", "=", "kwargs", "[", "\"match_on_covariates\"", "]", "\n", "if", "match_on_covariates", ":", "\n", "            ", "self", ".", "batch_augmentation", "=", "MahalanobisBatch", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "batch_augmentation", "=", "PropensityBatch", "(", ")", "\n", "", "self", ".", "batch_augmentation", ".", "make_propensity_lists", "(", "train_ids", ",", "benchmark_implementation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.batch_augmentation.BatchAugmentation.enhance_batch_with_propensity_matches": [[33, 42], ["batch_augmentation.BatchAugmentation.batch_augmentation.enhance_batch_with_propensity_matches", "Exception"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.enhance_batch_with_propensity_matches"], ["", "def", "enhance_batch_with_propensity_matches", "(", "self", ",", "benchmark", ",", "treatment_data", ",", "input_data", ",", "batch_y", ",", "\n", "match_probability", "=", "1.0", ",", "num_randomised_neighbours", "=", "6", ")", ":", "\n", "        ", "if", "self", ".", "batch_augmentation", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "batch_augmentation", ".", "enhance_batch_with_propensity_matches", "(", "benchmark", ",", "treatment_data", ",", "\n", "input_data", ",", "batch_y", ",", "\n", "match_probability", ",", "\n", "num_randomised_neighbours", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Batch augmentation mode must be set.\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.get_last_id_set": [[28, 30], ["None"], "function", ["None"], ["def", "get_last_id_set", "(", ")", ":", "\n", "    ", "return", "LAST_ID_SET", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.make_keras_generator": [[32, 58], ["generator.make_keras_generator.generator"], "function", ["None"], ["", "def", "make_keras_generator", "(", "args", ",", "wrapped_generator", ",", "num_steps", ",", "\n", "batch_size", "=", "1", ",", "num_losses", "=", "1", ",", "\n", "benchmark", "=", "None", ",", "is_train", "=", "False", ")", ":", "\n", "    ", "method", "=", "args", "[", "\"method\"", "]", "\n", "with_propensity_dropout", "=", "args", "[", "\"with_propensity_dropout\"", "]", "\n", "num_steps", "=", "num_steps", "//", "batch_size", "\n", "\n", "def", "generator", "(", ")", ":", "\n", "        ", "global", "LAST_ID_SET", "\n", "while", "True", ":", "\n", "            ", "batch_data", ",", "ids", "=", "zip", "(", "*", "map", "(", "lambda", "_", ":", "(", "next", "(", "wrapped_generator", ")", ",", "get_last_row_id", "(", ")", ")", ",", "\n", "range", "(", "batch_size", ")", ")", ")", "\n", "\n", "LAST_ID_SET", "=", "ids", "\n", "\n", "batch_x", ",", "batch_y", "=", "benchmark", ".", "get_data_access", "(", ")", ".", "prepare_batch", "(", "args", ",", "batch_data", ",", "benchmark", ",", "is_train", ")", "\n", "\n", "if", "num_losses", "!=", "1", ":", "\n", "                ", "batch_y", "=", "batch_y", "*", "num_losses", "\n", "\n", "", "if", "with_propensity_dropout", "and", "(", "method", "==", "\"nn\"", "or", "method", "==", "\"nn+\"", ")", ":", "\n", "                ", "batch_y", "=", "[", "to_categorical", "(", "batch_x", "[", "1", "]", ",", "num_classes", "=", "benchmark", ".", "get_num_treatments", "(", ")", ")", ",", "batch_y", "]", "\n", "\n", "", "yield", "batch_x", ",", "batch_y", "\n", "\n", "", "", "return", "generator", "(", ")", ",", "num_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.wrap_generator_with_constant_y": [[60, 67], ["generator.make_keras_generator.generator"], "function", ["None"], ["", "def", "wrap_generator_with_constant_y", "(", "wrapped_generator", ",", "y", ")", ":", "\n", "\n", "    ", "def", "generator", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "x", ",", "_", "=", "next", "(", "wrapped_generator", ")", "\n", "yield", "x", ",", "np", ".", "array", "(", "[", "y", "]", "*", "len", "(", "x", "[", "0", "]", ")", ")", "\n", "", "", "return", "generator", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.mahalanobis_batch.MahalanobisBatch.propensity_list_is_initialised": [[26, 28], ["None"], "methods", ["None"], ["    ", "def", "propensity_list_is_initialised", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ball_trees", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.mahalanobis_batch.MahalanobisBatch.make_propensity_lists": [[29, 51], ["benchmark.get_data_access().get_rows", "map", "zip", "numpy.array", "sklearn.decomposition.PCA", "mahalanobis_batch.MahalanobisBatch.pca.fit_transform", "sklearn.neighbors.BallTree", "benchmark.get_data_access", "range", "range", "range", "benchmark.get_num_treatments", "benchmark.get_num_treatments", "benchmark.get_num_treatments"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_rows", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_data_access", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments"], ["", "def", "make_propensity_lists", "(", "self", ",", "train_ids", ",", "benchmark", ")", ":", "\n", "        ", "input_data", ",", "ids", ",", "pair_data", "=", "benchmark", ".", "get_data_access", "(", ")", ".", "get_rows", "(", "train_ids", ")", "\n", "assignments", "=", "map", "(", "benchmark", ".", "get_assignment", ",", "ids", ",", "input_data", ")", "\n", "treatment_data", ",", "batch_y", "=", "zip", "(", "*", "assignments", ")", "\n", "treatment_data", "=", "np", ".", "array", "(", "treatment_data", ")", "\n", "\n", "if", "pair_data", ".", "shape", "[", "-", "1", "]", ">", "200", "and", "False", ":", "\n", "            ", "self", ".", "pca", "=", "PCA", "(", "50", ",", "svd_solver", "=", "\"randomized\"", ")", "\n", "pair_data", "=", "self", ".", "pca", ".", "fit_transform", "(", "pair_data", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pca", "=", "None", "\n", "\n", "# covariance_matrix = np.cov(pair_data, rowvar=False)", "\n", "", "self", ".", "original_data", "=", "[", "pair_data", "[", "treatment_data", "==", "t", "]", "\n", "for", "t", "in", "range", "(", "benchmark", ".", "get_num_treatments", "(", ")", ")", "]", "\n", "# self.ball_trees = [BallTree(pair_data[treatment_data == t], metric=\"mahalanobis\",", "\n", "#                             V=covariance_matrix)", "\n", "#                    for t in range(benchmark.get_num_treatments())]", "\n", "self", ".", "ball_trees", "=", "[", "BallTree", "(", "pair_data", "[", "treatment_data", "==", "t", "]", ")", "\n", "for", "t", "in", "range", "(", "benchmark", ".", "get_num_treatments", "(", ")", ")", "]", "\n", "self", ".", "treatment_ids", "=", "[", "ids", "[", "treatment_data", "==", "t", "]", "\n", "for", "t", "in", "range", "(", "benchmark", ".", "get_num_treatments", "(", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.mahalanobis_batch.MahalanobisBatch.get_closest_in_propensity_lists": [[52, 65], ["min", "numpy.random.randint", "mahalanobis_batch.MahalanobisBatch.ball_trees[].query", "mahalanobis_batch.MahalanobisBatch.ball_trees[].query", "len", "x.reshape", "mahalanobis_batch.MahalanobisBatch.pca.transform", "x.reshape"], "methods", ["None"], ["", "def", "get_closest_in_propensity_lists", "(", "self", ",", "x", ",", "t", ",", "k", ")", ":", "\n", "        ", "max_k", "=", "self", ".", "ball_trees", "[", "t", "]", ".", "data", ".", "shape", "[", "0", "]", "\n", "adjusted_k", "=", "min", "(", "k", ",", "max_k", ")", "\n", "if", "self", ".", "pca", "is", "None", ":", "\n", "            ", "distance", ",", "indices", "=", "self", ".", "ball_trees", "[", "t", "]", ".", "query", "(", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "k", "=", "adjusted_k", ")", "\n", "", "else", ":", "\n", "            ", "distance", ",", "indices", "=", "self", ".", "ball_trees", "[", "t", "]", ".", "query", "(", "self", ".", "pca", ".", "transform", "(", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ",", "k", "=", "adjusted_k", ")", "\n", "\n", "", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "indices", ")", ")", "\n", "idx", "=", "indices", "[", "0", "]", "[", "idx", "]", "\n", "\n", "chosen_sample", ",", "chosen_id", "=", "self", ".", "original_data", "[", "t", "]", "[", "idx", "]", ",", "self", ".", "treatment_ids", "[", "t", "]", "[", "idx", "]", "\n", "return", "chosen_sample", ",", "chosen_id", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.mahalanobis_batch.MahalanobisBatch.enhance_batch_with_propensity_matches": [[66, 100], ["range", "map", "numpy.array", "isinstance", "map", "zip", "benchmark.get_num_treatments", "map", "map", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.where", "len", "reduce", "numpy.random.permutation", "map", "int", "range", "mahalanobis_batch.MahalanobisBatch.get_closest_in_propensity_lists", "benchmark.get_num_treatments", "len"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.get_closest_in_propensity_lists", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments"], ["", "def", "enhance_batch_with_propensity_matches", "(", "self", ",", "benchmark", ",", "treatment_data", ",", "input_data", ",", "batch_y", ",", "\n", "match_probability", "=", "1.0", ",", "num_randomised_neighbours", "=", "6", ")", ":", "\n", "        ", "all_matches", "=", "[", "]", "\n", "for", "treatment_idx", "in", "range", "(", "benchmark", ".", "get_num_treatments", "(", ")", ")", ":", "\n", "            ", "this_treatment_indices", "=", "np", ".", "where", "(", "treatment_data", "==", "treatment_idx", ")", "[", "0", "]", "\n", "matches", "=", "map", "(", "lambda", "t", ":", "\n", "map", "(", "lambda", "idx", ":", "self", ".", "get_closest_in_propensity_lists", "(", "input_data", "[", "idx", "]", ",", "t", ",", "\n", "k", "=", "num_randomised_neighbours", ")", ",", "\n", "this_treatment_indices", ")", ",", "\n", "[", "t_idx", "for", "t_idx", "in", "range", "(", "benchmark", ".", "get_num_treatments", "(", ")", ")", "\n", "if", "t_idx", "!=", "treatment_idx", "]", ")", "\n", "\n", "if", "len", "(", "matches", ")", "!=", "0", ":", "\n", "                ", "all_matches", "+=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "matches", ")", "\n", "\n", "", "", "if", "match_probability", "!=", "1.0", ":", "\n", "            ", "all_matches", "=", "np", ".", "random", ".", "permutation", "(", "all_matches", ")", "[", ":", "int", "(", "len", "(", "all_matches", ")", "*", "match_probability", ")", "]", "\n", "", "match_ids", "=", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "all_matches", ")", "\n", "all_matches", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "all_matches", ")", ")", "\n", "\n", "from", "perfect_match", ".", "models", ".", "benchmarks", ".", "twins_benchmark", "import", "TwinsBenchmark", "\n", "if", "isinstance", "(", "benchmark", ",", "TwinsBenchmark", ")", ":", "\n", "            ", "match_input_data", "=", "all_matches", "[", ":", ",", "7", ":", "]", "\n", "", "else", ":", "\n", "            ", "match_input_data", "=", "all_matches", "\n", "\n", "# match_input_data = match_input_data + np.random.normal(0, 0.1, size=match_input_data.shape)", "\n", "\n", "", "match_assignments", "=", "map", "(", "benchmark", ".", "get_assignment", ",", "match_ids", ",", "all_matches", ")", "\n", "match_treatment_data", ",", "match_batch_y", "=", "zip", "(", "*", "match_assignments", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "input_data", ",", "match_input_data", "]", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "[", "treatment_data", ",", "match_treatment_data", "]", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "[", "batch_y", ",", "match_batch_y", "]", ",", "axis", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.patient_generator.get_last_row_id": [[28, 30], ["None"], "function", ["None"], ["def", "get_last_row_id", "(", ")", ":", "\n", "    ", "return", "LAST_ROW_ID", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.patient_generator.report_distribution": [[32, 37], ["numpy.zeros", "range", "perfect_match.apps.util.log", "len", "numpy.sum", "float", "len"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.log"], ["", "def", "report_distribution", "(", "data", ",", "labels", ",", "num_classes", ",", "set_name", ")", ":", "\n", "    ", "counts", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "counts", "[", "i", "]", "=", "np", ".", "sum", "(", "labels", "==", "i", ")", "/", "float", "(", "len", "(", "labels", ")", ")", "\n", "", "log", "(", "\"INFO: Using\"", ",", "set_name", ",", "\"set (n=\"", ",", "len", "(", "data", ")", ",", "\") with distribution\"", ",", "counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.patient_generator.make_generator": [[39, 119], ["benchmark.get_data_access().get_labelled_patients", "benchmark.filter", "len", "int", "int", "benchmark.get_data_access().get_split_indices", "len", "int", "numpy.floor", "numpy.floor", "benchmark.get_data_access().get_labels", "sklearn.model_selection.StratifiedShuffleSplit", "next", "numpy.random.permutation", "patient_generator.make_generator.generator"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_labelled_patients", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.filter", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_split_indices", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_labels"], ["", "def", "make_generator", "(", "args", ",", "benchmark", ",", "is_validation", "=", "False", ",", "is_test", "=", "False", ",", "\n", "validation_fraction", "=", "0.2", ",", "test_fraction", "=", "0.2", ",", "seed", "=", "909", ",", "randomise", "=", "True", ",", "\n", "stratify", "=", "True", ",", "resample_with_replacement", "=", "False", ")", ":", "\n", "    ", "fraction_of_data_set", "=", "args", "[", "\"fraction_of_data_set\"", "]", "\n", "\n", "patients", "=", "benchmark", ".", "get_data_access", "(", ")", ".", "get_labelled_patients", "(", ")", "\n", "patients", "=", "benchmark", ".", "filter", "(", "patients", ")", "\n", "\n", "num_patients", "=", "len", "(", "patients", ")", "\n", "\n", "if", "fraction_of_data_set", "<", "1.0", ":", "\n", "        ", "num_patients", "=", "int", "(", "np", ".", "rint", "(", "num_patients", "*", "fraction_of_data_set", ")", ")", "\n", "patients", "=", "np", ".", "random", ".", "permutation", "(", "patients", ")", "[", ":", "num_patients", "]", "\n", "\n", "", "num_validation_patients", "=", "int", "(", "np", ".", "floor", "(", "num_patients", "*", "validation_fraction", ")", ")", "\n", "num_test_patients", "=", "int", "(", "np", ".", "floor", "(", "num_patients", "*", "test_fraction", ")", ")", "\n", "\n", "split_indices", "=", "benchmark", ".", "get_data_access", "(", ")", ".", "get_split_indices", "(", ")", "\n", "if", "stratify", ":", "\n", "        ", "labels", ",", "num_labels", "=", "benchmark", ".", "get_data_access", "(", ")", ".", "get_labels", "(", "args", ",", "map", "(", "lambda", "x", ":", "(", "x", ",", ")", ",", "patients", ")", ",", "benchmark", ")", "\n", "if", "split_indices", "[", "0", "]", "is", "None", ":", "\n", "            ", "test_sss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "num_test_patients", ",", "random_state", "=", "seed", ")", "\n", "rest_indices", ",", "test_indices", "=", "next", "(", "test_sss", ".", "split", "(", "patients", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "            ", "rest_indices", ",", "test_indices", "=", "split_indices", "\n", "\n", "", "val_sss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "num_validation_patients", ",", "random_state", "=", "seed", ")", "\n", "train_indices", ",", "val_indices", "=", "next", "(", "val_sss", ".", "split", "(", "patients", "[", "rest_indices", "]", ",", "labels", "[", "rest_indices", "]", ")", ")", "\n", "\n", "if", "is_test", ":", "\n", "            ", "report_distribution", "(", "patients", "[", "rest_indices", "]", "[", "train_indices", "]", ",", "\n", "labels", "[", "rest_indices", "]", "[", "train_indices", "]", ",", "\n", "num_labels", ",", "\"train\"", ")", "\n", "report_distribution", "(", "patients", "[", "rest_indices", "]", "[", "val_indices", "]", ",", "\n", "labels", "[", "rest_indices", "]", "[", "val_indices", "]", ",", "\n", "num_labels", ",", "\"validation\"", ")", "\n", "report_distribution", "(", "patients", "[", "test_indices", "]", ",", "\n", "labels", "[", "test_indices", "]", ",", "\n", "num_labels", ",", "\"test\"", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "split_indices", "[", "0", "]", "is", "None", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "num_patients", ")", "\n", "rest_indices", ",", "test_indices", "=", "indices", "[", "num_test_patients", ":", "]", ",", "indices", "[", ":", "num_test_patients", "]", "\n", "", "else", ":", "\n", "            ", "rest_indices", ",", "test_indices", "=", "split_indices", "\n", "\n", "", "remaining_indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "rest_indices", ")", ")", "\n", "train_indices", ",", "val_indices", "=", "remaining_indices", "[", "num_validation_patients", ":", "]", ",", "remaining_indices", "[", ":", "num_validation_patients", "]", "\n", "\n", "", "if", "is_test", ":", "\n", "        ", "patients", "=", "patients", "[", "test_indices", "]", "\n", "", "elif", "is_validation", ":", "\n", "        ", "patients", "=", "patients", "[", "rest_indices", "]", "[", "val_indices", "]", "\n", "", "else", ":", "\n", "        ", "patients", "=", "patients", "[", "rest_indices", "]", "[", "train_indices", "]", "\n", "if", "stratify", "and", "args", "[", "\"with_propensity_batch\"", "]", ":", "\n", "            ", "benchmark", ".", "get_data_access", "(", ")", ".", "make_propensity_lists", "(", "patients", ",", "benchmark", ",", "**", "args", ")", "\n", "\n", "", "", "num_steps", "=", "len", "(", "patients", ")", "\n", "\n", "def", "generator", "(", ")", ":", "\n", "        ", "global", "LAST_ROW_ID", "\n", "\n", "if", "resample_with_replacement", ":", "\n", "            ", "id_generator", "=", "resample_with_replacement_generator", "(", "patients", ")", "\n", "", "else", ":", "\n", "            ", "if", "randomise", ":", "\n", "                ", "id_generator", "=", "random_cycle_generator", "(", "patients", ")", "\n", "", "else", ":", "\n", "                ", "id_generator", "=", "cycle", "(", "patients", ")", "\n", "\n", "", "", "while", "True", ":", "\n", "            ", "next_patient_id", "=", "next", "(", "id_generator", ")", "\n", "patient_id", ",", "result", "=", "benchmark", ".", "get_data_access", "(", ")", ".", "get_entry_with_id", "(", "next_patient_id", ",", "args", ")", "\n", "\n", "LAST_ROW_ID", "=", "patient_id", "\n", "yield", "result", "\n", "\n", "", "", "return", "generator", "(", ")", ",", "num_steps", "\n", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.propensity_list_is_initialised": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "propensity_list_is_initialised", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "treatment_lists", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.make_propensity_lists": [[31, 59], ["benchmark.get_data_access().get_rows", "map", "zip", "numpy.array", "isinstance", "sklearn.svm.SVC", "propensity_batch.PropensityBatch.clf.fit", "propensity_batch.PropensityBatch.clf.predict_proba", "zip", "range", "print", "benchmark.select_features", "sklearn.decomposition.PCA", "propensity_batch.PropensityBatch.pca.fit_transform", "benchmark.get_num_treatments", "propensity_batch.PropensityBatch.treatment_lists.append", "benchmark.get_data_access", "sorted", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_rows", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.fit", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.select_features", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_data_access"], ["", "def", "make_propensity_lists", "(", "self", ",", "train_ids", ",", "benchmark", ")", ":", "\n", "        ", "from", "perfect_match", ".", "models", ".", "benchmarks", ".", "tcga_benchmark", "import", "TCGABenchmark", "\n", "\n", "input_data", ",", "ids", ",", "pair_data", "=", "benchmark", ".", "get_data_access", "(", ")", ".", "get_rows", "(", "train_ids", ")", "\n", "assignments", "=", "map", "(", "benchmark", ".", "get_assignment", ",", "ids", ",", "input_data", ")", "\n", "treatment_data", ",", "batch_y", "=", "zip", "(", "*", "assignments", ")", "\n", "treatment_data", "=", "np", ".", "array", "(", "treatment_data", ")", "\n", "\n", "if", "isinstance", "(", "benchmark", ",", "TCGABenchmark", ")", ":", "\n", "            ", "pair_data", "=", "benchmark", ".", "select_features", "(", "pair_data", ")", "\n", "\n", "", "if", "pair_data", ".", "shape", "[", "-", "1", "]", ">", "200", ":", "\n", "            ", "self", ".", "pca", "=", "PCA", "(", "50", ",", "svd_solver", "=", "\"randomized\"", ")", "\n", "pair_data", "=", "self", ".", "pca", ".", "fit_transform", "(", "pair_data", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pca", "=", "None", "\n", "\n", "", "self", ".", "clf", "=", "SVC", "(", "probability", "=", "True", ",", "class_weight", "=", "\"balanced\"", ")", "\n", "self", ".", "clf", ".", "fit", "(", "pair_data", ",", "treatment_data", ")", "\n", "propensity_scores", "=", "self", ".", "clf", ".", "predict_proba", "(", "pair_data", ")", "\n", "\n", "linked_data", "=", "zip", "(", "input_data", ",", "propensity_scores", ",", "ids", ")", "\n", "\n", "self", ".", "treatment_lists", "=", "[", "]", "\n", "for", "treatment_idx", "in", "range", "(", "benchmark", ".", "get_num_treatments", "(", ")", ")", ":", "\n", "            ", "this_treatment_data", "=", "[", "linked_data", "[", "idx", "]", "for", "idx", "in", "np", ".", "where", "(", "treatment_data", "==", "treatment_idx", ")", "[", "0", "]", "]", "\n", "self", ".", "treatment_lists", ".", "append", "(", "sorted", "(", "this_treatment_data", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "treatment_idx", "]", ")", ")", "\n", "", "print", "(", "\"INFO: Prepared propensity lists.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.get_closest_in_propensity_lists": [[60, 84], ["bisect.bisect_left", "TreatmentListWrapper", "len", "max", "propensity_batch.PropensityBatch.clf.predict_proba", "propensity_batch.PropensityBatch.clf.predict_proba", "len", "x.reshape", "propensity_batch.PropensityBatch.pca.transform", "numpy.random.randint", "x.reshape"], "methods", ["None"], ["", "def", "get_closest_in_propensity_lists", "(", "self", ",", "x", ",", "t", ",", "k", ")", ":", "\n", "        ", "if", "self", ".", "pca", "is", "None", ":", "\n", "            ", "propensity_score", "=", "self", ".", "clf", ".", "predict_proba", "(", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", ",", "t", "]", "\n", "", "else", ":", "\n", "            ", "propensity_score", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "pca", ".", "transform", "(", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ")", "[", "0", ",", "t", "]", "\n", "\n", "", "class", "TreatmentListWrapper", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "obj", ")", ":", "\n", "                ", "self", ".", "obj", "=", "obj", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "                ", "return", "self", ".", "obj", "[", "key", "]", "[", "1", "]", "[", "t", "]", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "                ", "return", "len", "(", "self", ".", "obj", ")", "\n", "\n", "", "", "idx", "=", "bisect_left", "(", "TreatmentListWrapper", "(", "self", ".", "treatment_lists", "[", "t", "]", ")", ",", "propensity_score", ")", "\n", "if", "idx", "==", "len", "(", "self", ".", "treatment_lists", "[", "t", "]", ")", ":", "\n", "            ", "idx", "-=", "1", "\n", "\n", "", "if", "idx", "!=", "0", ":", "\n", "            ", "idx", "=", "max", "(", "0", ",", "idx", "-", "np", ".", "random", ".", "randint", "(", "0", ",", "k", ")", ")", "\n", "\n", "", "return", "self", ".", "treatment_lists", "[", "t", "]", "[", "idx", "]", "[", "0", "]", ",", "self", ".", "treatment_lists", "[", "t", "]", "[", "idx", "]", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.enhance_batch_with_propensity_matches": [[85, 120], ["range", "map", "numpy.array", "isinstance", "map", "zip", "benchmark.get_num_treatments", "map", "reduce", "map", "isinstance", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.where", "numpy.random.permutation", "benchmark.select_features", "map", "int", "range", "propensity_batch.PropensityBatch.get_closest_in_propensity_lists", "benchmark.get_num_treatments", "len"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.select_features", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.get_closest_in_propensity_lists", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments"], ["", "def", "enhance_batch_with_propensity_matches", "(", "self", ",", "benchmark", ",", "treatment_data", ",", "input_data", ",", "batch_y", ",", "\n", "match_probability", "=", "1.0", ",", "num_randomised_neighbours", "=", "6", ")", ":", "\n", "        ", "all_matches", "=", "[", "]", "\n", "for", "treatment_idx", "in", "range", "(", "benchmark", ".", "get_num_treatments", "(", ")", ")", ":", "\n", "            ", "this_treatment_indices", "=", "np", ".", "where", "(", "treatment_data", "==", "treatment_idx", ")", "[", "0", "]", "\n", "matches", "=", "map", "(", "lambda", "t", ":", "\n", "map", "(", "lambda", "idx", ":", "self", ".", "get_closest_in_propensity_lists", "(", "input_data", "[", "idx", "]", ",", "t", ",", "\n", "k", "=", "num_randomised_neighbours", ")", ",", "\n", "this_treatment_indices", ")", ",", "\n", "[", "t_idx", "for", "t_idx", "in", "range", "(", "benchmark", ".", "get_num_treatments", "(", ")", ")", "if", "t_idx", "!=", "treatment_idx", "]", ")", "\n", "all_matches", "+=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "matches", ")", "\n", "\n", "", "if", "match_probability", "!=", "1.0", ":", "\n", "            ", "all_matches", "=", "np", ".", "random", ".", "permutation", "(", "all_matches", ")", "[", ":", "int", "(", "len", "(", "all_matches", ")", "*", "match_probability", ")", "]", "\n", "\n", "", "match_ids", "=", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "all_matches", ")", "\n", "all_matches", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "all_matches", ")", ")", "\n", "\n", "from", "perfect_match", ".", "models", ".", "benchmarks", ".", "twins_benchmark", "import", "TwinsBenchmark", "\n", "from", "perfect_match", ".", "models", ".", "benchmarks", ".", "tcga_benchmark", "import", "TCGABenchmark", "\n", "if", "isinstance", "(", "benchmark", ",", "TwinsBenchmark", ")", ":", "\n", "            ", "match_input_data", "=", "all_matches", "[", ":", ",", "7", ":", "]", "\n", "", "elif", "isinstance", "(", "benchmark", ",", "TCGABenchmark", ")", ":", "\n", "            ", "match_input_data", "=", "benchmark", ".", "select_features", "(", "all_matches", ")", "\n", "", "else", ":", "\n", "            ", "match_input_data", "=", "all_matches", "\n", "\n", "# match_input_data = match_input_data + np.random.normal(0, 0.1, size=match_input_data.shape)", "\n", "\n", "", "match_assignments", "=", "map", "(", "benchmark", ".", "get_assignment", ",", "match_ids", ",", "all_matches", ")", "\n", "match_treatment_data", ",", "match_batch_y", "=", "zip", "(", "*", "match_assignments", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "input_data", ",", "match_input_data", "]", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "[", "treatment_data", ",", "match_treatment_data", "]", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "[", "batch_y", ",", "match_batch_y", "]", ",", "axis", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.__init__": [[28, 35], ["data_access.DataAccess.connect", "data_access.DataAccess.setup_schema"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.connect", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.setup_schema"], ["def", "__init__", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "db", "=", "None", "\n", "self", ".", "connect", "(", ")", "\n", "self", ".", "setup_schema", "(", ")", "\n", "self", ".", "cache_rowid", "=", "{", "}", "\n", "self", ".", "cache_no_rowid", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.get_split_indices": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_split_indices", "(", "self", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.connect": [[39, 47], ["sqlite3.connect", "data_access.DataAccess.db.execute", "data_access.DataAccess.db.execute", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.connect"], ["", "def", "connect", "(", "self", ")", ":", "\n", "        ", "self", ".", "db", "=", "sqlite3", ".", "connect", "(", "join", "(", "self", ".", "data_dir", ",", "DataAccess", ".", "DB_FILE_NAME", ")", ",", "\n", "check_same_thread", "=", "False", ",", "\n", "detect_types", "=", "sqlite3", ".", "PARSE_DECLTYPES", ")", "\n", "\n", "# Disable journaling.", "\n", "self", ".", "db", ".", "execute", "(", "\"PRAGMA journal_mode = OFF;\"", ")", "\n", "self", ".", "db", ".", "execute", "(", "\"PRAGMA page_size = 16384;\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.setup_schema": [[48, 52], ["data_access.DataAccess.setup_news", "data_access.DataAccess.db.commit"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.setup_news"], ["", "def", "setup_schema", "(", "self", ")", ":", "\n", "        ", "self", ".", "setup_news", "(", ")", "\n", "\n", "self", ".", "db", ".", "commit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.setup_news": [[53, 59], ["data_access.DataAccess.db.execute"], "methods", ["None"], ["", "def", "setup_news", "(", "self", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "(", "\"CREATE TABLE IF NOT EXISTS {table_name}\"", "\n", "\"(\"", "\n", "\"x ARRAY, \"", "\n", "\"z ARRAY \"", "\n", "\");\"", ")", ".", "format", "(", "table_name", "=", "DataAccess", ".", "TABLE_NEWS", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.insert_many": [[60, 65], ["data_access.DataAccess.db.executemany", "len"], "methods", ["None"], ["", "def", "insert_many", "(", "self", ",", "table_name", ",", "values", ")", ":", "\n", "        ", "self", ".", "db", ".", "executemany", "(", "\"INSERT INTO {table_name} VALUES ({question_marks});\"", "\n", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "question_marks", "=", "\",\"", ".", "join", "(", "[", "\"?\"", "]", "*", "len", "(", "values", "[", "0", "]", ")", ")", ")", ",", "\n", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.insert_news": [[66, 68], ["data_access.DataAccess.insert_many"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_many"], ["", "def", "insert_news", "(", "self", ",", "values", ")", ":", "\n", "        ", "self", ".", "insert_many", "(", "DataAccess", ".", "TABLE_NEWS", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.get_column": [[69, 81], ["data_access.DataAccess.create_temporary_table", "data_access.DataAccess.db.execute().fetchall", "data_access.DataAccess.drop_temporary_table", "data_access.DataAccess.db.execute"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table"], ["", "def", "get_column", "(", "self", ",", "table_name", ",", "ids", ",", "column_name", ")", ":", "\n", "        ", "tmp_name", "=", "\"tmp_ids\"", "\n", "self", ".", "create_temporary_table", "(", "tmp_name", ",", "ids", ")", "\n", "return_value", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT {column_name} \"", "\n", "\"FROM {table_name} \"", "\n", "\"WHERE rowid IN (SELECT id FROM {tmp_table}) \"", "\n", "\"ORDER BY rowid;\"", "\n", ".", "format", "(", "column_name", "=", "column_name", ",", "\n", "table_name", "=", "table_name", ",", "\n", "tmp_table", "=", "tmp_name", ")", ")", ".", "fetchall", "(", ")", "\n", "self", ".", "drop_temporary_table", "(", "tmp_name", ")", "\n", "return", "return_value", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.get_num_rows": [[82, 86], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["", "def", "get_num_rows", "(", "self", ",", "table_name", ")", ":", "\n", "# NOTE: This query assumes that there has never been any deletions in the time series table.", "\n", "        ", "return", "self", ".", "db", ".", "execute", "(", "\"SELECT MAX(_ROWID_) FROM {} LIMIT 1;\"", ".", "format", "(", "table_name", ")", ")", ".", "fetchone", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.get_row": [[87, 105], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["", "def", "get_row", "(", "self", ",", "table_name", ",", "id", ",", "with_rowid", "=", "False", ")", ":", "\n", "        ", "cache", "=", "self", ".", "cache_rowid", "if", "with_rowid", "else", "self", ".", "cache_no_rowid", "\n", "if", "id", "in", "cache", ":", "\n", "            ", "return_value", "=", "cache", "[", "id", "]", "\n", "return", "return_value", "\n", "\n", "", "columns", "=", "\"*\"", "\n", "if", "with_rowid", ":", "\n", "            ", "columns", "=", "\"rowid, \"", "+", "columns", "\n", "\n", "", "query", "=", "\"SELECT \"", "\"{columns} \"", "\"FROM {table_name} \"", "\"WHERE rowid = ?;\"", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "columns", "=", "columns", ")", "\n", "return_value", "=", "self", ".", "db", ".", "execute", "(", "query", ",", "(", "id", ",", ")", ")", ".", "fetchone", "(", ")", "\n", "cache", "[", "id", "]", "=", "return_value", "\n", "return", "return_value", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.get_rows": [[106, 122], ["data_access.DataAccess.create_temporary_table", "data_access.DataAccess.db.execute().fetchall", "data_access.DataAccess.drop_temporary_table", "numpy.array", "map", "numpy.array", "map", "map", "data_access.DataAccess.db.execute"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table"], ["", "def", "get_rows", "(", "self", ",", "train_ids", ")", ":", "\n", "        ", "tmp_name", "=", "\"tmp_pairs\"", "\n", "self", ".", "create_temporary_table", "(", "tmp_name", ",", "map", "(", "lambda", "x", ":", "(", "x", ",", ")", ",", "train_ids", ")", ")", "\n", "\n", "news", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT rowid, * \"", "\n", "\"FROM {table_pairs} \"", "\n", "\"WHERE rowid IN (SELECT id FROM {tmp_table});\"", "\n", ".", "format", "(", "table_pairs", "=", "DataAccess", ".", "TABLE_NEWS", ",", "\n", "tmp_table", "=", "tmp_name", ")", ")", ".", "fetchall", "(", ")", "\n", "\n", "self", ".", "drop_temporary_table", "(", "tmp_name", ")", "\n", "\n", "ids", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "news", ")", ")", "\n", "news_data", "=", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "news", ")", "\n", "news_data", "=", "np", ".", "array", "(", "news_data", ")", "\n", "return", "news_data", ",", "ids", ",", "news_data", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.get_row_by_id": [[123, 134], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["", "def", "get_row_by_id", "(", "self", ",", "table_name", ",", "id", ",", "with_rowid", "=", "False", ")", ":", "\n", "        ", "columns", "=", "\"*\"", "\n", "if", "with_rowid", ":", "\n", "            ", "columns", "=", "\"rowid, \"", "+", "columns", "\n", "\n", "", "query", "=", "\"SELECT \"", "\"{columns} \"", "\"FROM {table_name} \"", "\"WHERE id = ?;\"", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "columns", "=", "columns", ")", "\n", "return", "self", ".", "db", ".", "execute", "(", "query", ",", "(", "id", ",", ")", ")", ".", "fetchone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.get_labelled_patients": [[135, 137], ["numpy.arange", "data_access.DataAccess.get_num_rows"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_num_rows"], ["", "def", "get_labelled_patients", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "arange", "(", "self", ".", "get_num_rows", "(", "DataAccess", ".", "TABLE_NEWS", ")", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.create_temporary_table": [[138, 143], ["data_access.DataAccess.db.execute", "len", "data_access.DataAccess.db.executemany"], "methods", ["None"], ["", "def", "create_temporary_table", "(", "self", ",", "table_name", ",", "values", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "\"CREATE TEMP TABLE {table_name} (id INT);\"", ".", "format", "(", "table_name", "=", "table_name", ")", ")", "\n", "if", "len", "(", "values", ")", "!=", "0", ":", "\n", "            ", "self", ".", "db", ".", "executemany", "(", "\"INSERT INTO {table_name} VALUES (?);\"", ".", "format", "(", "table_name", "=", "table_name", ")", ",", "values", ")", "\n", "", "return", "table_name", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.drop_temporary_table": [[144, 146], ["data_access.DataAccess.db.execute"], "methods", ["None"], ["", "def", "drop_temporary_table", "(", "self", ",", "table_name", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "\"drop table {tmp_table_name};\"", ".", "format", "(", "tmp_table_name", "=", "table_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.get_news_dimension": [[147, 151], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["", "def", "get_news_dimension", "(", "self", ")", ":", "\n", "        ", "news", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT * FROM {table_name} WHERE rowid = 1;\"", "\n", ".", "format", "(", "table_name", "=", "DataAccess", ".", "TABLE_NEWS", ")", ")", ".", "fetchone", "(", ")", "\n", "return", "news", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.get_labels": [[152, 161], ["numpy.array", "benchmark.get_num_treatments", "data_access.DataAccess.get_row", "numpy.array.append", "benchmark.get_assignment"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_assignment"], ["", "def", "get_labels", "(", "self", ",", "args", ",", "ids", ",", "benchmark", ")", ":", "\n", "        ", "assignments", "=", "[", "]", "\n", "for", "id", "in", "ids", ":", "\n", "            ", "news", "=", "self", ".", "get_row", "(", "DataAccess", ".", "TABLE_NEWS", ",", "id", "[", "0", "]", ")", "\n", "assignment", "=", "benchmark", ".", "get_assignment", "(", "id", "[", "0", "]", ",", "news", "[", "0", "]", ")", "[", "0", "]", "\n", "assignments", ".", "append", "(", "assignment", ")", "\n", "", "assignments", "=", "np", ".", "array", "(", "assignments", ")", "\n", "num_labels", "=", "benchmark", ".", "get_num_treatments", "(", ")", "\n", "return", "assignments", ",", "num_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.get_entry_with_id": [[162, 169], ["data_access.DataAccess.get_row"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row"], ["", "def", "get_entry_with_id", "(", "self", ",", "id", ",", "args", "=", "{", "}", ")", ":", "\n", "        ", "news", "=", "self", ".", "get_row", "(", "DataAccess", ".", "TABLE_NEWS", ",", "id", ",", "with_rowid", "=", "True", ")", "\n", "\n", "patient_id", "=", "news", "[", "0", "]", "\n", "result", "=", "{", "\"id\"", ":", "patient_id", ",", "\"x\"", ":", "news", "[", "1", "]", ",", "\"z\"", ":", "news", "[", "2", "]", "}", "\n", "\n", "return", "patient_id", ",", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.standardise_entry": [[170, 172], ["None"], "methods", ["None"], ["", "def", "standardise_entry", "(", "self", ",", "entry", ")", ":", "\n", "        ", "return", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.prepare_batch": [[173, 199], ["numpy.array", "map", "map", "zip", "numpy.array", "numpy.asarray().astype", "numpy.array", "map", "float", "int", "data_access.DataAccess.enhance_batch_with_propensity_matches", "numpy.rint", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.enhance_batch_with_propensity_matches"], ["", "def", "prepare_batch", "(", "self", ",", "args", ",", "batch_data", ",", "benchmark", ",", "is_train", "=", "False", ")", ":", "\n", "        ", "ids", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"id\"", "]", ",", "batch_data", ")", ")", "\n", "news_data", "=", "map", "(", "lambda", "x", ":", "x", "[", "\"x\"", "]", ",", "batch_data", ")", "\n", "\n", "assignments", "=", "map", "(", "benchmark", ".", "get_assignment", ",", "ids", ",", "news_data", ")", "\n", "treatment_data", ",", "batch_y", "=", "zip", "(", "*", "assignments", ")", "\n", "treatment_data", "=", "np", ".", "array", "(", "treatment_data", ")", "\n", "\n", "if", "args", "[", "\"with_propensity_batch\"", "]", "and", "is_train", ":", "\n", "            ", "propensity_batch_probability", "=", "float", "(", "args", "[", "\"propensity_batch_probability\"", "]", ")", "\n", "num_randomised_neighbours", "=", "int", "(", "np", ".", "rint", "(", "args", "[", "\"num_randomised_neighbours\"", "]", ")", ")", "\n", "news_data", ",", "treatment_data", ",", "batch_y", "=", "self", ".", "enhance_batch_with_propensity_matches", "(", "benchmark", ",", "\n", "treatment_data", ",", "\n", "news_data", ",", "\n", "batch_y", ",", "\n", "propensity_batch_probability", ",", "\n", "num_randomised_neighbours", ")", "\n", "\n", "", "input_data", "=", "np", ".", "asarray", "(", "news_data", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "batch_y", "=", "np", ".", "array", "(", "batch_y", ")", "\n", "batch_x", "=", "[", "\n", "input_data", ",", "\n", "treatment_data", ",", "\n", "]", "\n", "return", "batch_x", ",", "batch_y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.__init__": [[66, 80], ["int", "os.path.dirname", "os.path.join", "os.path.join", "data_access.DataAccess.connect", "data_access.DataAccess.setup_schema", "numpy.rint", "os.path.realpath", "os.path.exists", "os.path.exists", "numpy.load", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.connect", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.setup_schema", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load"], ["", "def", "insert_news", "(", "self", ",", "values", ")", ":", "\n", "        ", "self", ".", "insert_many", "(", "DataAccess", ".", "TABLE_NEWS", ",", "values", ")", "\n", "\n", "", "def", "get_column", "(", "self", ",", "table_name", ",", "ids", ",", "column_name", ")", ":", "\n", "        ", "tmp_name", "=", "\"tmp_ids\"", "\n", "self", ".", "create_temporary_table", "(", "tmp_name", ",", "ids", ")", "\n", "return_value", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT {column_name} \"", "\n", "\"FROM {table_name} \"", "\n", "\"WHERE rowid IN (SELECT id FROM {tmp_table}) \"", "\n", "\"ORDER BY rowid;\"", "\n", ".", "format", "(", "column_name", "=", "column_name", ",", "\n", "table_name", "=", "table_name", ",", "\n", "tmp_table", "=", "tmp_name", ")", ")", ".", "fetchall", "(", ")", "\n", "self", ".", "drop_temporary_table", "(", "tmp_name", ")", "\n", "return", "return_value", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_split_indices": [[81, 83], ["None"], "methods", ["None"], ["\n", "", "def", "get_num_rows", "(", "self", ",", "table_name", ")", ":", "\n", "# NOTE: This query assumes that there has never been any deletions in the time series table.", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.connect": [[84, 92], ["sqlite3.connect", "data_access.DataAccess.db.execute", "data_access.DataAccess.db.execute", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.connect"], ["        ", "return", "self", ".", "db", ".", "execute", "(", "\"SELECT MAX(_ROWID_) FROM {} LIMIT 1;\"", ".", "format", "(", "table_name", ")", ")", ".", "fetchone", "(", ")", "[", "0", "]", "\n", "\n", "", "def", "get_row", "(", "self", ",", "table_name", ",", "id", ",", "with_rowid", "=", "False", ")", ":", "\n", "        ", "cache", "=", "self", ".", "cache_rowid", "if", "with_rowid", "else", "self", ".", "cache_no_rowid", "\n", "if", "id", "in", "cache", ":", "\n", "            ", "return_value", "=", "cache", "[", "id", "]", "\n", "return", "return_value", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.setup_schema": [[93, 100], ["data_access.DataAccess.setup_clinical", "data_access.DataAccess.setup_rnaseq", "data_access.DataAccess.setup_methylation", "data_access.DataAccess.setup_snp", "data_access.DataAccess.db.commit"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.setup_clinical", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.setup_rnaseq", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.setup_methylation", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.setup_snp"], ["", "columns", "=", "\"*\"", "\n", "if", "with_rowid", ":", "\n", "            ", "columns", "=", "\"rowid, \"", "+", "columns", "\n", "\n", "", "query", "=", "\"SELECT \"", "\"{columns} \"", "\"FROM {table_name} \"", "\"WHERE rowid = ?;\"", ".", "format", "(", "table_name", "=", "table_name", ",", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.setup_clinical": [[101, 115], ["data_access.DataAccess.db.execute"], "methods", ["None"], ["columns", "=", "columns", ")", "\n", "return_value", "=", "self", ".", "db", ".", "execute", "(", "query", ",", "(", "id", ",", ")", ")", ".", "fetchone", "(", ")", "\n", "cache", "[", "id", "]", "=", "return_value", "\n", "return", "return_value", "\n", "\n", "", "def", "get_rows", "(", "self", ",", "train_ids", ")", ":", "\n", "        ", "tmp_name", "=", "\"tmp_pairs\"", "\n", "self", ".", "create_temporary_table", "(", "tmp_name", ",", "map", "(", "lambda", "x", ":", "(", "x", ",", ")", ",", "train_ids", ")", ")", "\n", "\n", "news", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT rowid, * \"", "\n", "\"FROM {table_pairs} \"", "\n", "\"WHERE rowid IN (SELECT id FROM {tmp_table});\"", "\n", ".", "format", "(", "table_pairs", "=", "DataAccess", ".", "TABLE_NEWS", ",", "\n", "tmp_table", "=", "tmp_name", ")", ")", ".", "fetchall", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.setup_rnaseq": [[116, 126], ["data_access.DataAccess.db.execute"], "methods", ["None"], ["self", ".", "drop_temporary_table", "(", "tmp_name", ")", "\n", "\n", "ids", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "news", ")", ")", "\n", "news_data", "=", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "news", ")", "\n", "news_data", "=", "np", ".", "array", "(", "news_data", ")", "\n", "return", "news_data", ",", "ids", ",", "news_data", "\n", "\n", "", "def", "get_row_by_id", "(", "self", ",", "table_name", ",", "id", ",", "with_rowid", "=", "False", ")", ":", "\n", "        ", "columns", "=", "\"*\"", "\n", "if", "with_rowid", ":", "\n", "            ", "columns", "=", "\"rowid, \"", "+", "columns", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.setup_methylation": [[127, 137], ["data_access.DataAccess.db.execute"], "methods", ["None"], ["\n", "", "query", "=", "\"SELECT \"", "\"{columns} \"", "\"FROM {table_name} \"", "\"WHERE id = ?;\"", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "columns", "=", "columns", ")", "\n", "return", "self", ".", "db", ".", "execute", "(", "query", ",", "(", "id", ",", ")", ")", ".", "fetchone", "(", ")", "\n", "\n", "", "def", "get_labelled_patients", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "arange", "(", "self", ".", "get_num_rows", "(", "DataAccess", ".", "TABLE_NEWS", ")", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.setup_snp": [[138, 148], ["data_access.DataAccess.db.execute"], "methods", ["None"], ["", "def", "create_temporary_table", "(", "self", ",", "table_name", ",", "values", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "\"CREATE TEMP TABLE {table_name} (id INT);\"", ".", "format", "(", "table_name", "=", "table_name", ")", ")", "\n", "if", "len", "(", "values", ")", "!=", "0", ":", "\n", "            ", "self", ".", "db", ".", "executemany", "(", "\"INSERT INTO {table_name} VALUES (?);\"", ".", "format", "(", "table_name", "=", "table_name", ")", ",", "values", ")", "\n", "", "return", "table_name", "\n", "\n", "", "def", "drop_temporary_table", "(", "self", ",", "table_name", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "\"drop table {tmp_table_name};\"", ".", "format", "(", "tmp_table_name", "=", "table_name", ")", ")", "\n", "\n", "", "def", "get_news_dimension", "(", "self", ")", ":", "\n", "        ", "news", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT * FROM {table_name} WHERE rowid = 1;\"", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.insert_many": [[149, 154], ["data_access.DataAccess.db.executemany", "len"], "methods", ["None"], [".", "format", "(", "table_name", "=", "DataAccess", ".", "TABLE_NEWS", ")", ")", ".", "fetchone", "(", ")", "\n", "return", "news", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "get_labels", "(", "self", ",", "args", ",", "ids", ",", "benchmark", ")", ":", "\n", "        ", "assignments", "=", "[", "]", "\n", "for", "id", "in", "ids", ":", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.insert_clinical": [[155, 157], ["data_access.DataAccess.insert_many"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_many"], ["            ", "news", "=", "self", ".", "get_row", "(", "DataAccess", ".", "TABLE_NEWS", ",", "id", "[", "0", "]", ")", "\n", "assignment", "=", "benchmark", ".", "get_assignment", "(", "id", "[", "0", "]", ",", "news", "[", "0", "]", ")", "[", "0", "]", "\n", "assignments", ".", "append", "(", "assignment", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.insert_rnaseq": [[158, 160], ["data_access.DataAccess.insert_many"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_many"], ["", "assignments", "=", "np", ".", "array", "(", "assignments", ")", "\n", "num_labels", "=", "benchmark", ".", "get_num_treatments", "(", ")", "\n", "return", "assignments", ",", "num_labels", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.insert_methylation": [[161, 163], ["data_access.DataAccess.insert_many"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_many"], ["\n", "", "def", "get_entry_with_id", "(", "self", ",", "id", ",", "args", "=", "{", "}", ")", ":", "\n", "        ", "news", "=", "self", ".", "get_row", "(", "DataAccess", ".", "TABLE_NEWS", ",", "id", ",", "with_rowid", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.insert_snp": [[164, 166], ["data_access.DataAccess.insert_many"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_many"], ["\n", "patient_id", "=", "news", "[", "0", "]", "\n", "result", "=", "{", "\"id\"", ":", "patient_id", ",", "\"x\"", ":", "news", "[", "1", "]", ",", "\"z\"", ":", "news", "[", "2", "]", "}", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_dataset_names": [[167, 169], ["data_access.DataAccess.get_column"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_column"], ["\n", "return", "patient_id", ",", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_days_to_death": [[170, 172], ["data_access.DataAccess.get_column"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_column"], ["", "def", "standardise_entry", "(", "self", ",", "entry", ")", ":", "\n", "        ", "return", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_days_to_recurrence": [[173, 175], ["data_access.DataAccess.get_column"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_column"], ["", "def", "prepare_batch", "(", "self", ",", "args", ",", "batch_data", ",", "benchmark", ",", "is_train", "=", "False", ")", ":", "\n", "        ", "ids", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"id\"", "]", ",", "batch_data", ")", ")", "\n", "news_data", "=", "map", "(", "lambda", "x", ":", "x", "[", "\"x\"", "]", ",", "batch_data", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_days_to_surgery": [[176, 178], ["data_access.DataAccess.get_column"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_column"], ["\n", "assignments", "=", "map", "(", "benchmark", ".", "get_assignment", ",", "ids", ",", "news_data", ")", "\n", "treatment_data", ",", "batch_y", "=", "zip", "(", "*", "assignments", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_did_radiation_therapy": [[179, 181], ["data_access.DataAccess.get_column"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_column"], ["treatment_data", "=", "np", ".", "array", "(", "treatment_data", ")", "\n", "\n", "if", "args", "[", "\"with_propensity_batch\"", "]", "and", "is_train", ":", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_column": [[182, 194], ["data_access.DataAccess.create_temporary_table", "data_access.DataAccess.db.execute().fetchall", "data_access.DataAccess.drop_temporary_table", "data_access.DataAccess.db.execute"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table"], ["            ", "propensity_batch_probability", "=", "float", "(", "args", "[", "\"propensity_batch_probability\"", "]", ")", "\n", "num_randomised_neighbours", "=", "int", "(", "np", ".", "rint", "(", "args", "[", "\"num_randomised_neighbours\"", "]", ")", ")", "\n", "news_data", ",", "treatment_data", ",", "batch_y", "=", "self", ".", "enhance_batch_with_propensity_matches", "(", "benchmark", ",", "\n", "treatment_data", ",", "\n", "news_data", ",", "\n", "batch_y", ",", "\n", "propensity_batch_probability", ",", "\n", "num_randomised_neighbours", ")", "\n", "\n", "", "input_data", "=", "np", ".", "asarray", "(", "news_data", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "batch_y", "=", "np", ".", "array", "(", "batch_y", ")", "\n", "batch_x", "=", "[", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_num_rows": [[195, 199], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["input_data", ",", "\n", "treatment_data", ",", "\n", "]", "\n", "return", "batch_x", ",", "batch_y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_row": [[200, 215], ["data_access.DataAccess.db.execute().fetchone", "isinstance", "data_access.DataAccess.db.execute"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_rows": [[216, 252], ["data_access.DataAccess.create_temporary_table", "data_access.DataAccess.db.execute().fetchall", "data_access.DataAccess.drop_temporary_table", "map", "map", "data_access.DataAccess.create_temporary_table", "data_access.DataAccess.db.execute().fetchall", "data_access.DataAccess.drop_temporary_table", "map", "numpy.array", "map", "map", "map", "data_access.DataAccess.db.execute", "data_access.DataAccess.db.execute"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_row_by_id": [[253, 264], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_rows_by_clinical_id": [[265, 276], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_labelled_patients": [[277, 286], ["data_access.DataAccess.db.execute().fetchall", "numpy.squeeze", "data_access.DataAccess.db.execute"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.create_temporary_table": [[287, 292], ["data_access.DataAccess.db.execute", "len", "data_access.DataAccess.db.executemany"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.drop_temporary_table": [[293, 295], ["data_access.DataAccess.db.execute"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_rnaseq_dimension": [[296, 301], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_clinical_data": [[302, 306], ["pandas.read_csv"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_rnaseq_data": [[307, 312], ["pandas.read_csv"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.binarize_days": [[313, 319], ["numpy.copy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_labels": [[320, 354], ["int", "numpy.array", "benchmark.get_num_treatments", "data_access.DataAccess.get_dataset_names", "set", "len", "dict", "data_access.DataAccess.binarize_days", "data_access.DataAccess.binarize_days", "data_access.DataAccess.binarize_days", "data_access.DataAccess.binarize_days", "numpy.rint", "numpy.array", "numpy.array.append", "zip", "data_access.DataAccess.get_days_to_death", "data_access.DataAccess.get_days_to_recurrence", "data_access.DataAccess.get_days_to_surgery", "data_access.DataAccess.get_did_radiation_therapy", "data_access.DataAccess.get_entry_with_id", "benchmark.get_assignment", "range", "len"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_dataset_names", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.binarize_days", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.binarize_days", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.binarize_days", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.binarize_days", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_days_to_death", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_days_to_recurrence", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_days_to_surgery", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_did_radiation_therapy", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_entry_with_id", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_assignment"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_entry_with_id": [[355, 369], ["data_access.DataAccess.get_row", "data_access.DataAccess.get_rows_by_clinical_id"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row", "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_rows_by_clinical_id"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.prepare_batch": [[370, 409], ["numpy.array", "numpy.array", "numpy.array", "map", "map", "map", "map", "zip", "numpy.array", "benchmark.select_features", "float", "int", "data_access.DataAccess.enhance_batch_with_propensity_matches", "numpy.rint", "numpy.array", "numpy.array", "map", "map"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.select_features", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.enhance_batch_with_propensity_matches"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.adapt_array": [[28, 36], ["io.BytesIO", "numpy.save", "io.BytesIO.seek", "sqlite3.Binary", "io.BytesIO.read"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.PickleableMixin.save"], ["def", "__init__", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "db", "=", "None", "\n", "self", ".", "connect", "(", ")", "\n", "self", ".", "setup_schema", "(", ")", "\n", "self", ".", "cache_rowid", "=", "{", "}", "\n", "self", ".", "cache_no_rowid", "=", "{", "}", "\n", "\n", "", "def", "get_split_indices", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.convert_array": [[38, 42], ["io.BytesIO", "io.BytesIO.seek", "numpy.load"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load"], ["\n", "", "def", "connect", "(", "self", ")", ":", "\n", "        ", "self", ".", "db", "=", "sqlite3", ".", "connect", "(", "join", "(", "self", ".", "data_dir", ",", "DataAccess", ".", "DB_FILE_NAME", ")", ",", "\n", "check_same_thread", "=", "False", ",", "\n", "detect_types", "=", "sqlite3", ".", "PARSE_DECLTYPES", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.__init__": [[35, 40], ["data_access.DataAccess.connect", "data_access.DataAccess.setup_schema"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.connect", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.setup_schema"], ["\n", "", "def", "get_split_indices", "(", "self", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "", "def", "connect", "(", "self", ")", ":", "\n", "        ", "self", ".", "db", "=", "sqlite3", ".", "connect", "(", "join", "(", "self", ".", "data_dir", ",", "DataAccess", ".", "DB_FILE_NAME", ")", ",", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_split_indices": [[41, 43], ["None"], "methods", ["None"], ["check_same_thread", "=", "False", ",", "\n", "detect_types", "=", "sqlite3", ".", "PARSE_DECLTYPES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.connect": [[44, 52], ["sqlite3.connect", "data_access.DataAccess.db.execute", "data_access.DataAccess.db.execute", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.connect"], ["# Disable journaling.", "\n", "self", ".", "db", ".", "execute", "(", "\"PRAGMA journal_mode = OFF;\"", ")", "\n", "self", ".", "db", ".", "execute", "(", "\"PRAGMA page_size = 16384;\"", ")", "\n", "\n", "", "def", "setup_schema", "(", "self", ")", ":", "\n", "        ", "self", ".", "setup_news", "(", ")", "\n", "\n", "self", ".", "db", ".", "commit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.setup_schema": [[53, 57], ["data_access.DataAccess.setup_pairs", "data_access.DataAccess.db.commit"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.setup_pairs"], ["", "def", "setup_news", "(", "self", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "(", "\"CREATE TABLE IF NOT EXISTS {table_name}\"", "\n", "\"(\"", "\n", "\"x ARRAY, \"", "\n", "\"z ARRAY \"", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.setup_pairs": [[58, 72], ["enumerate", "data_access.DataAccess.db.execute", "data_access.DataAccess.get_ordered_fields"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_ordered_fields"], ["\");\"", ")", ".", "format", "(", "table_name", "=", "DataAccess", ".", "TABLE_NEWS", ")", ")", "\n", "\n", "", "def", "insert_many", "(", "self", ",", "table_name", ",", "values", ")", ":", "\n", "        ", "self", ".", "db", ".", "executemany", "(", "\"INSERT INTO {table_name} VALUES ({question_marks});\"", "\n", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "question_marks", "=", "\",\"", ".", "join", "(", "[", "\"?\"", "]", "*", "len", "(", "values", "[", "0", "]", ")", ")", ")", ",", "\n", "values", ")", "\n", "\n", "", "def", "insert_news", "(", "self", ",", "values", ")", ":", "\n", "        ", "self", ".", "insert_many", "(", "DataAccess", ".", "TABLE_NEWS", ",", "values", ")", "\n", "\n", "", "def", "get_column", "(", "self", ",", "table_name", ",", "ids", ",", "column_name", ")", ":", "\n", "        ", "tmp_name", "=", "\"tmp_ids\"", "\n", "self", ".", "create_temporary_table", "(", "tmp_name", ",", "ids", ")", "\n", "return_value", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT {column_name} \"", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.insert_many": [[73, 78], ["data_access.DataAccess.db.executemany", "len"], "methods", ["None"], ["\"FROM {table_name} \"", "\n", "\"WHERE rowid IN (SELECT id FROM {tmp_table}) \"", "\n", "\"ORDER BY rowid;\"", "\n", ".", "format", "(", "column_name", "=", "column_name", ",", "\n", "table_name", "=", "table_name", ",", "\n", "tmp_table", "=", "tmp_name", ")", ")", ".", "fetchall", "(", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.insert_clinical": [[79, 81], ["data_access.DataAccess.insert_many"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_many"], ["self", ".", "drop_temporary_table", "(", "tmp_name", ")", "\n", "return", "return_value", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_column": [[82, 94], ["data_access.DataAccess.create_temporary_table", "data_access.DataAccess.db.execute().fetchall", "data_access.DataAccess.drop_temporary_table", "data_access.DataAccess.db.execute"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table"], ["", "def", "get_num_rows", "(", "self", ",", "table_name", ")", ":", "\n", "# NOTE: This query assumes that there has never been any deletions in the time series table.", "\n", "        ", "return", "self", ".", "db", ".", "execute", "(", "\"SELECT MAX(_ROWID_) FROM {} LIMIT 1;\"", ".", "format", "(", "table_name", ")", ")", ".", "fetchone", "(", ")", "[", "0", "]", "\n", "\n", "", "def", "get_row", "(", "self", ",", "table_name", ",", "id", ",", "with_rowid", "=", "False", ")", ":", "\n", "        ", "cache", "=", "self", ".", "cache_rowid", "if", "with_rowid", "else", "self", ".", "cache_no_rowid", "\n", "if", "id", "in", "cache", ":", "\n", "            ", "return_value", "=", "cache", "[", "id", "]", "\n", "return", "return_value", "\n", "\n", "", "columns", "=", "\"*\"", "\n", "if", "with_rowid", ":", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_num_rows": [[95, 99], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["            ", "columns", "=", "\"rowid, \"", "+", "columns", "\n", "\n", "", "query", "=", "\"SELECT \"", "\"{columns} \"", "\"FROM {table_name} \""]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_row": [[100, 111], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["\"WHERE rowid = ?;\"", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "columns", "=", "columns", ")", "\n", "return_value", "=", "self", ".", "db", ".", "execute", "(", "query", ",", "(", "id", ",", ")", ")", ".", "fetchone", "(", ")", "\n", "cache", "[", "id", "]", "=", "return_value", "\n", "return", "return_value", "\n", "\n", "", "def", "get_rows", "(", "self", ",", "train_ids", ")", ":", "\n", "        ", "tmp_name", "=", "\"tmp_pairs\"", "\n", "self", ".", "create_temporary_table", "(", "tmp_name", ",", "map", "(", "lambda", "x", ":", "(", "x", ",", ")", ",", "train_ids", ")", ")", "\n", "\n", "news", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT rowid, * \"", "\n", "\"FROM {table_pairs} \"", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_rows": [[112, 127], ["data_access.DataAccess.create_temporary_table", "data_access.DataAccess.db.execute().fetchall", "data_access.DataAccess.drop_temporary_table", "numpy.array", "map", "data_access.DataAccess.db.execute"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table"], ["\"WHERE rowid IN (SELECT id FROM {tmp_table});\"", "\n", ".", "format", "(", "table_pairs", "=", "DataAccess", ".", "TABLE_NEWS", ",", "\n", "tmp_table", "=", "tmp_name", ")", ")", ".", "fetchall", "(", ")", "\n", "\n", "self", ".", "drop_temporary_table", "(", "tmp_name", ")", "\n", "\n", "ids", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "news", ")", ")", "\n", "news_data", "=", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "news", ")", "\n", "news_data", "=", "np", ".", "array", "(", "news_data", ")", "\n", "return", "news_data", ",", "ids", ",", "news_data", "\n", "\n", "", "def", "get_row_by_id", "(", "self", ",", "table_name", ",", "id", ",", "with_rowid", "=", "False", ")", ":", "\n", "        ", "columns", "=", "\"*\"", "\n", "if", "with_rowid", ":", "\n", "            ", "columns", "=", "\"rowid, \"", "+", "columns", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_row_by_id": [[128, 139], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["", "query", "=", "\"SELECT \"", "\"{columns} \"", "\"FROM {table_name} \"", "\"WHERE id = ?;\"", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "columns", "=", "columns", ")", "\n", "return", "self", ".", "db", ".", "execute", "(", "query", ",", "(", "id", ",", ")", ")", ".", "fetchone", "(", ")", "\n", "\n", "", "def", "get_labelled_patients", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "arange", "(", "self", ".", "get_num_rows", "(", "DataAccess", ".", "TABLE_NEWS", ")", ")", "+", "1", "\n", "\n", "", "def", "create_temporary_table", "(", "self", ",", "table_name", ",", "values", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "\"CREATE TEMP TABLE {table_name} (id INT);\"", ".", "format", "(", "table_name", "=", "table_name", ")", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_rows_by_clinical_id": [[140, 149], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["if", "len", "(", "values", ")", "!=", "0", ":", "\n", "            ", "self", ".", "db", ".", "executemany", "(", "\"INSERT INTO {table_name} VALUES (?);\"", ".", "format", "(", "table_name", "=", "table_name", ")", ",", "values", ")", "\n", "", "return", "table_name", "\n", "\n", "", "def", "drop_temporary_table", "(", "self", ",", "table_name", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "\"drop table {tmp_table_name};\"", ".", "format", "(", "tmp_table_name", "=", "table_name", ")", ")", "\n", "\n", "", "def", "get_news_dimension", "(", "self", ")", ":", "\n", "        ", "news", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT * FROM {table_name} WHERE rowid = 1;\"", "\n", ".", "format", "(", "table_name", "=", "DataAccess", ".", "TABLE_NEWS", ")", ")", ".", "fetchone", "(", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_labelled_patients": [[150, 152], ["numpy.arange", "data_access.DataAccess.get_num_rows"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_num_rows"], ["return", "news", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "get_labels", "(", "self", ",", "args", ",", "ids", ",", "benchmark", ")", ":", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.create_temporary_table": [[153, 158], ["data_access.DataAccess.db.execute", "len", "data_access.DataAccess.db.executemany"], "methods", ["None"], ["        ", "assignments", "=", "[", "]", "\n", "for", "id", "in", "ids", ":", "\n", "            ", "news", "=", "self", ".", "get_row", "(", "DataAccess", ".", "TABLE_NEWS", ",", "id", "[", "0", "]", ")", "\n", "assignment", "=", "benchmark", ".", "get_assignment", "(", "id", "[", "0", "]", ",", "news", "[", "0", "]", ")", "[", "0", "]", "\n", "assignments", ".", "append", "(", "assignment", ")", "\n", "", "assignments", "=", "np", ".", "array", "(", "assignments", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.drop_temporary_table": [[159, 161], ["data_access.DataAccess.db.execute"], "methods", ["None"], ["num_labels", "=", "benchmark", ".", "get_num_treatments", "(", ")", "\n", "return", "assignments", ",", "num_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_pairs_dimension": [[162, 166], ["data_access.DataAccess.db.execute().fetchone", "len", "data_access.DataAccess.db.execute"], "methods", ["None"], ["", "def", "get_entry_with_id", "(", "self", ",", "id", ",", "args", "=", "{", "}", ")", ":", "\n", "        ", "news", "=", "self", ".", "get_row", "(", "DataAccess", ".", "TABLE_NEWS", ",", "id", ",", "with_rowid", "=", "True", ")", "\n", "\n", "patient_id", "=", "news", "[", "0", "]", "\n", "result", "=", "{", "\"id\"", ":", "patient_id", ",", "\"x\"", ":", "news", "[", "1", "]", ",", "\"z\"", ":", "news", "[", "2", "]", "}", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_ordered_fields": [[167, 223], ["divide_by", "divide_by", "divide_by", "divide_by", "divide_by", "divide_by", "divide_by", "divide_by", "divide_by", "float", "float", "numpy.isnan"], "methods", ["None"], ["\n", "return", "patient_id", ",", "result", "\n", "\n", "", "def", "standardise_entry", "(", "self", ",", "entry", ")", ":", "\n", "        ", "return", "entry", "\n", "\n", "", "def", "prepare_batch", "(", "self", ",", "args", ",", "batch_data", ",", "benchmark", ",", "is_train", "=", "False", ")", ":", "\n", "        ", "ids", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"id\"", "]", ",", "batch_data", ")", ")", "\n", "news_data", "=", "map", "(", "lambda", "x", ":", "x", "[", "\"x\"", "]", ",", "batch_data", ")", "\n", "\n", "assignments", "=", "map", "(", "benchmark", ".", "get_assignment", ",", "ids", ",", "news_data", ")", "\n", "treatment_data", ",", "batch_y", "=", "zip", "(", "*", "assignments", ")", "\n", "treatment_data", "=", "np", ".", "array", "(", "treatment_data", ")", "\n", "\n", "if", "args", "[", "\"with_propensity_batch\"", "]", "and", "is_train", ":", "\n", "            ", "propensity_batch_probability", "=", "float", "(", "args", "[", "\"propensity_batch_probability\"", "]", ")", "\n", "num_randomised_neighbours", "=", "int", "(", "np", ".", "rint", "(", "args", "[", "\"num_randomised_neighbours\"", "]", ")", ")", "\n", "news_data", ",", "treatment_data", ",", "batch_y", "=", "self", ".", "enhance_batch_with_propensity_matches", "(", "benchmark", ",", "\n", "treatment_data", ",", "\n", "news_data", ",", "\n", "batch_y", ",", "\n", "propensity_batch_probability", ",", "\n", "num_randomised_neighbours", ")", "\n", "\n", "", "input_data", "=", "np", ".", "asarray", "(", "news_data", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "batch_y", "=", "np", ".", "array", "(", "batch_y", ")", "\n", "batch_x", "=", "[", "\n", "input_data", ",", "\n", "treatment_data", ",", "\n", "]", "\n", "return", "batch_x", ",", "batch_y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_pairs_data": [[225, 229], ["pandas.read_csv"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_labels": [[230, 249], ["numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "data_access.DataAccess.get_row", "assignments.append", "data_access.DataAccess.get_column", "data_access.DataAccess.get_column", "data_access.DataAccess.get_column", "data_access.DataAccess.get_column", "benchmark.get_assignment", "enumerate", "enumerate", "numpy.stack", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_column", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_column", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_column", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_column", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_assignment"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_entry_with_id": [[250, 257], ["data_access.DataAccess.get_row"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.standardise_entry": [[258, 263], ["map", "range", "len", "data_access.DataAccess.get_ordered_fields"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_ordered_fields"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.prepare_batch": [[264, 291], ["numpy.array", "map", "zip", "numpy.array", "numpy.array.astype", "numpy.array", "numpy.array", "map", "float", "int", "data_access.DataAccess.enhance_batch_with_propensity_matches", "map", "numpy.rint"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.enhance_batch_with_propensity_matches"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.__init__": [[32, 40], ["data_access.DataAccess.generate_new_dataset", "data_access.DataAccess.connect", "data_access.DataAccess.setup_schema", "data_access.DataAccess.initialise_data"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.generate_new_dataset", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.connect", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.setup_schema", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.initialise_data"], ["self", ".", "setup_schema", "(", ")", "\n", "self", ".", "cache_rowid", "=", "{", "}", "\n", "self", ".", "cache_no_rowid", "=", "{", "}", "\n", "\n", "", "def", "get_split_indices", "(", "self", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "", "def", "connect", "(", "self", ")", ":", "\n", "        ", "self", ".", "db", "=", "sqlite3", ".", "connect", "(", "join", "(", "self", ".", "data_dir", ",", "DataAccess", ".", "DB_FILE_NAME", ")", ",", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.get_split_indices": [[41, 43], ["None"], "methods", ["None"], ["check_same_thread", "=", "False", ",", "\n", "detect_types", "=", "sqlite3", ".", "PARSE_DECLTYPES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.generate_new_dataset": [[44, 72], ["os.path.dirname", "os.path.join", "os.path.join", "print", "numpy.load", "numpy.load", "numpy.arange", "numpy.arange", "data_access.DataAccess.generate_new_dataset.get_field"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load"], ["# Disable journaling.", "\n", "self", ".", "db", ".", "execute", "(", "\"PRAGMA journal_mode = OFF;\"", ")", "\n", "self", ".", "db", ".", "execute", "(", "\"PRAGMA page_size = 16384;\"", ")", "\n", "\n", "", "def", "setup_schema", "(", "self", ")", ":", "\n", "        ", "self", ".", "setup_news", "(", ")", "\n", "\n", "self", ".", "db", ".", "commit", "(", ")", "\n", "\n", "", "def", "setup_news", "(", "self", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "(", "\"CREATE TABLE IF NOT EXISTS {table_name}\"", "\n", "\"(\"", "\n", "\"x ARRAY, \"", "\n", "\"z ARRAY \"", "\n", "\");\"", ")", ".", "format", "(", "table_name", "=", "DataAccess", ".", "TABLE_NEWS", ")", ")", "\n", "\n", "", "def", "insert_many", "(", "self", ",", "table_name", ",", "values", ")", ":", "\n", "        ", "self", ".", "db", ".", "executemany", "(", "\"INSERT INTO {table_name} VALUES ({question_marks});\"", "\n", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "question_marks", "=", "\",\"", ".", "join", "(", "[", "\"?\"", "]", "*", "len", "(", "values", "[", "0", "]", ")", ")", ")", ",", "\n", "values", ")", "\n", "\n", "", "def", "insert_news", "(", "self", ",", "values", ")", ":", "\n", "        ", "self", ".", "insert_many", "(", "DataAccess", ".", "TABLE_NEWS", ",", "values", ")", "\n", "\n", "", "def", "get_column", "(", "self", ",", "table_name", ",", "ids", ",", "column_name", ")", ":", "\n", "        ", "tmp_name", "=", "\"tmp_ids\"", "\n", "self", ".", "create_temporary_table", "(", "tmp_name", ",", "ids", ")", "\n", "return_value", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT {column_name} \"", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.connect": [[73, 85], ["os.path.join", "os.path.isfile", "sqlite3.connect", "data_access.DataAccess.db.execute", "data_access.DataAccess.db.execute", "os.remove"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.connect"], ["\"FROM {table_name} \"", "\n", "\"WHERE rowid IN (SELECT id FROM {tmp_table}) \"", "\n", "\"ORDER BY rowid;\"", "\n", ".", "format", "(", "column_name", "=", "column_name", ",", "\n", "table_name", "=", "table_name", ",", "\n", "tmp_table", "=", "tmp_name", ")", ")", ".", "fetchall", "(", ")", "\n", "self", ".", "drop_temporary_table", "(", "tmp_name", ")", "\n", "return", "return_value", "\n", "\n", "", "def", "get_num_rows", "(", "self", ",", "table_name", ")", ":", "\n", "# NOTE: This query assumes that there has never been any deletions in the time series table.", "\n", "        ", "return", "self", ".", "db", ".", "execute", "(", "\"SELECT MAX(_ROWID_) FROM {} LIMIT 1;\"", ".", "format", "(", "table_name", ")", ")", ".", "fetchone", "(", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.initialise_data": [[86, 91], ["data_access.DataAccess.insert_many", "zip"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_many"], ["\n", "", "def", "get_row", "(", "self", ",", "table_name", ",", "id", ",", "with_rowid", "=", "False", ")", ":", "\n", "        ", "cache", "=", "self", ".", "cache_rowid", "if", "with_rowid", "else", "self", ".", "cache_no_rowid", "\n", "if", "id", "in", "cache", ":", "\n", "            ", "return_value", "=", "cache", "[", "id", "]", "\n", "return", "return_value", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.setup_schema": [[92, 95], ["data_access.DataAccess.setup_jobs", "data_access.DataAccess.db.commit"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.setup_jobs"], ["\n", "", "columns", "=", "\"*\"", "\n", "if", "with_rowid", ":", "\n", "            ", "columns", "=", "\"rowid, \"", "+", "columns", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.setup_jobs": [[96, 106], ["data_access.DataAccess.db.execute"], "methods", ["None"], ["\n", "", "query", "=", "\"SELECT \"", "\"{columns} \"", "\"FROM {table_name} \"", "\"WHERE rowid = ?;\"", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "columns", "=", "columns", ")", "\n", "return_value", "=", "self", ".", "db", ".", "execute", "(", "query", ",", "(", "id", ",", ")", ")", ".", "fetchone", "(", ")", "\n", "cache", "[", "id", "]", "=", "return_value", "\n", "return", "return_value", "\n", "\n", "", "def", "get_rows", "(", "self", ",", "train_ids", ")", ":", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.insert_many": [[107, 112], ["data_access.DataAccess.db.executemany", "len"], "methods", ["None"], ["        ", "tmp_name", "=", "\"tmp_pairs\"", "\n", "self", ".", "create_temporary_table", "(", "tmp_name", ",", "map", "(", "lambda", "x", ":", "(", "x", ",", ")", ",", "train_ids", ")", ")", "\n", "\n", "news", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT rowid, * \"", "\n", "\"FROM {table_pairs} \"", "\n", "\"WHERE rowid IN (SELECT id FROM {tmp_table});\"", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.insert_ihdp": [[113, 115], ["data_access.DataAccess.insert_many"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_many"], [".", "format", "(", "table_pairs", "=", "DataAccess", ".", "TABLE_NEWS", ",", "\n", "tmp_table", "=", "tmp_name", ")", ")", ".", "fetchall", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.get_column": [[116, 128], ["data_access.DataAccess.create_temporary_table", "data_access.DataAccess.db.execute().fetchall", "data_access.DataAccess.drop_temporary_table", "data_access.DataAccess.db.execute"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table"], ["self", ".", "drop_temporary_table", "(", "tmp_name", ")", "\n", "\n", "ids", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "news", ")", ")", "\n", "news_data", "=", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "news", ")", "\n", "news_data", "=", "np", ".", "array", "(", "news_data", ")", "\n", "return", "news_data", ",", "ids", ",", "news_data", "\n", "\n", "", "def", "get_row_by_id", "(", "self", ",", "table_name", ",", "id", ",", "with_rowid", "=", "False", ")", ":", "\n", "        ", "columns", "=", "\"*\"", "\n", "if", "with_rowid", ":", "\n", "            ", "columns", "=", "\"rowid, \"", "+", "columns", "\n", "\n", "", "query", "=", "\"SELECT \""]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.get_num_rows": [[129, 133], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["\"{columns} \"", "\"FROM {table_name} \"", "\"WHERE id = ?;\"", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "columns", "=", "columns", ")", "\n", "return", "self", ".", "db", ".", "execute", "(", "query", ",", "(", "id", ",", ")", ")", ".", "fetchone", "(", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.get_row": [[134, 144], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["\n", "", "def", "get_labelled_patients", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "arange", "(", "self", ".", "get_num_rows", "(", "DataAccess", ".", "TABLE_NEWS", ")", ")", "+", "1", "\n", "\n", "", "def", "create_temporary_table", "(", "self", ",", "table_name", ",", "values", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "\"CREATE TEMP TABLE {table_name} (id INT);\"", ".", "format", "(", "table_name", "=", "table_name", ")", ")", "\n", "if", "len", "(", "values", ")", "!=", "0", ":", "\n", "            ", "self", ".", "db", ".", "executemany", "(", "\"INSERT INTO {table_name} VALUES (?);\"", ".", "format", "(", "table_name", "=", "table_name", ")", ",", "values", ")", "\n", "", "return", "table_name", "\n", "\n", "", "def", "drop_temporary_table", "(", "self", ",", "table_name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.get_rows": [[145, 165], ["data_access.DataAccess.create_temporary_table", "data_access.DataAccess.db.execute().fetchall", "data_access.DataAccess.drop_temporary_table", "map", "numpy.array", "map", "numpy.array", "data_access.DataAccess.db.execute", "map"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table"], ["        ", "self", ".", "db", ".", "execute", "(", "\"drop table {tmp_table_name};\"", ".", "format", "(", "tmp_table_name", "=", "table_name", ")", ")", "\n", "\n", "", "def", "get_news_dimension", "(", "self", ")", ":", "\n", "        ", "news", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT * FROM {table_name} WHERE rowid = 1;\"", "\n", ".", "format", "(", "table_name", "=", "DataAccess", ".", "TABLE_NEWS", ")", ")", ".", "fetchone", "(", ")", "\n", "return", "news", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "get_labels", "(", "self", ",", "args", ",", "ids", ",", "benchmark", ")", ":", "\n", "        ", "assignments", "=", "[", "]", "\n", "for", "id", "in", "ids", ":", "\n", "            ", "news", "=", "self", ".", "get_row", "(", "DataAccess", ".", "TABLE_NEWS", ",", "id", "[", "0", "]", ")", "\n", "assignment", "=", "benchmark", ".", "get_assignment", "(", "id", "[", "0", "]", ",", "news", "[", "0", "]", ")", "[", "0", "]", "\n", "assignments", ".", "append", "(", "assignment", ")", "\n", "", "assignments", "=", "np", ".", "array", "(", "assignments", ")", "\n", "num_labels", "=", "benchmark", ".", "get_num_treatments", "(", ")", "\n", "return", "assignments", ",", "num_labels", "\n", "\n", "", "def", "get_entry_with_id", "(", "self", ",", "id", ",", "args", "=", "{", "}", ")", ":", "\n", "        ", "news", "=", "self", ".", "get_row", "(", "DataAccess", ".", "TABLE_NEWS", ",", "id", ",", "with_rowid", "=", "True", ")", "\n", "\n", "patient_id", "=", "news", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.get_labelled_patients": [[166, 168], ["numpy.arange", "data_access.DataAccess.get_num_rows"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_num_rows"], ["result", "=", "{", "\"id\"", ":", "patient_id", ",", "\"x\"", ":", "news", "[", "1", "]", ",", "\"z\"", ":", "news", "[", "2", "]", "}", "\n", "\n", "return", "patient_id", ",", "result", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.create_temporary_table": [[169, 174], ["data_access.DataAccess.db.execute", "len", "data_access.DataAccess.db.executemany"], "methods", ["None"], ["\n", "", "def", "standardise_entry", "(", "self", ",", "entry", ")", ":", "\n", "        ", "return", "entry", "\n", "\n", "", "def", "prepare_batch", "(", "self", ",", "args", ",", "batch_data", ",", "benchmark", ",", "is_train", "=", "False", ")", ":", "\n", "        ", "ids", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"id\"", "]", ",", "batch_data", ")", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.drop_temporary_table": [[175, 177], ["data_access.DataAccess.db.execute"], "methods", ["None"], ["news_data", "=", "map", "(", "lambda", "x", ":", "x", "[", "\"x\"", "]", ",", "batch_data", ")", "\n", "\n", "assignments", "=", "map", "(", "benchmark", ".", "get_assignment", ",", "ids", ",", "news_data", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.get_labels": [[178, 187], ["numpy.array", "benchmark.get_num_treatments", "data_access.DataAccess.get_row", "numpy.array.append", "benchmark.get_assignment"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_assignment"], ["treatment_data", ",", "batch_y", "=", "zip", "(", "*", "assignments", ")", "\n", "treatment_data", "=", "np", ".", "array", "(", "treatment_data", ")", "\n", "\n", "if", "args", "[", "\"with_propensity_batch\"", "]", "and", "is_train", ":", "\n", "            ", "propensity_batch_probability", "=", "float", "(", "args", "[", "\"propensity_batch_probability\"", "]", ")", "\n", "num_randomised_neighbours", "=", "int", "(", "np", ".", "rint", "(", "args", "[", "\"num_randomised_neighbours\"", "]", ")", ")", "\n", "news_data", ",", "treatment_data", ",", "batch_y", "=", "self", ".", "enhance_batch_with_propensity_matches", "(", "benchmark", ",", "\n", "treatment_data", ",", "\n", "news_data", ",", "\n", "batch_y", ",", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.get_entry_with_id": [[188, 195], ["data_access.DataAccess.get_row"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row"], ["propensity_batch_probability", ",", "\n", "num_randomised_neighbours", ")", "\n", "\n", "", "input_data", "=", "np", ".", "asarray", "(", "news_data", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "batch_y", "=", "np", ".", "array", "(", "batch_y", ")", "\n", "batch_x", "=", "[", "\n", "input_data", ",", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.standardise_entry": [[196, 198], ["None"], "methods", ["None"], ["treatment_data", ",", "\n", "]", "\n", "return", "batch_x", ",", "batch_y", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.jobs.data_access.DataAccess.prepare_batch": [[199, 225], ["numpy.array", "map", "map", "zip", "numpy.array", "numpy.asarray().astype", "numpy.array", "map", "float", "int", "data_access.DataAccess.enhance_batch_with_propensity_matches", "numpy.rint", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.enhance_batch_with_propensity_matches"], ["", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.__init__": [[41, 49], ["data_access.DataAccess.generate_new_dataset", "data_access.DataAccess.connect", "data_access.DataAccess.setup_schema", "data_access.DataAccess.initialise_data"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.generate_new_dataset", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.connect", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.setup_schema", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.initialise_data"], ["check_same_thread", "=", "False", ",", "\n", "detect_types", "=", "sqlite3", ".", "PARSE_DECLTYPES", ")", "\n", "\n", "# Disable journaling.", "\n", "self", ".", "db", ".", "execute", "(", "\"PRAGMA journal_mode = OFF;\"", ")", "\n", "self", ".", "db", ".", "execute", "(", "\"PRAGMA page_size = 16384;\"", ")", "\n", "\n", "", "def", "setup_schema", "(", "self", ")", ":", "\n", "        ", "self", ".", "setup_news", "(", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_split_indices": [[50, 52], ["None"], "methods", ["None"], ["\n", "self", ".", "db", ".", "commit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.generate_new_dataset": [[53, 99], ["os.path.dirname", "os.path.realpath", "os.path.join", "subprocess.check_output", "print", "os.path.join", "os.path.join", "print", "numpy.load", "numpy.load", "numpy.arange", "numpy.arange", "get_field().astype", "numpy.zeros", "data_access.DataAccess.generate_new_dataset.get_field"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load"], ["", "def", "setup_news", "(", "self", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "(", "\"CREATE TABLE IF NOT EXISTS {table_name}\"", "\n", "\"(\"", "\n", "\"x ARRAY, \"", "\n", "\"z ARRAY \"", "\n", "\");\"", ")", ".", "format", "(", "table_name", "=", "DataAccess", ".", "TABLE_NEWS", ")", ")", "\n", "\n", "", "def", "insert_many", "(", "self", ",", "table_name", ",", "values", ")", ":", "\n", "        ", "self", ".", "db", ".", "executemany", "(", "\"INSERT INTO {table_name} VALUES ({question_marks});\"", "\n", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "question_marks", "=", "\",\"", ".", "join", "(", "[", "\"?\"", "]", "*", "len", "(", "values", "[", "0", "]", ")", ")", ")", ",", "\n", "values", ")", "\n", "\n", "", "def", "insert_news", "(", "self", ",", "values", ")", ":", "\n", "        ", "self", ".", "insert_many", "(", "DataAccess", ".", "TABLE_NEWS", ",", "values", ")", "\n", "\n", "", "def", "get_column", "(", "self", ",", "table_name", ",", "ids", ",", "column_name", ")", ":", "\n", "        ", "tmp_name", "=", "\"tmp_ids\"", "\n", "self", ".", "create_temporary_table", "(", "tmp_name", ",", "ids", ")", "\n", "return_value", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT {column_name} \"", "\n", "\"FROM {table_name} \"", "\n", "\"WHERE rowid IN (SELECT id FROM {tmp_table}) \"", "\n", "\"ORDER BY rowid;\"", "\n", ".", "format", "(", "column_name", "=", "column_name", ",", "\n", "table_name", "=", "table_name", ",", "\n", "tmp_table", "=", "tmp_name", ")", ")", ".", "fetchall", "(", ")", "\n", "self", ".", "drop_temporary_table", "(", "tmp_name", ")", "\n", "return", "return_value", "\n", "\n", "", "def", "get_num_rows", "(", "self", ",", "table_name", ")", ":", "\n", "# NOTE: This query assumes that there has never been any deletions in the time series table.", "\n", "        ", "return", "self", ".", "db", ".", "execute", "(", "\"SELECT MAX(_ROWID_) FROM {} LIMIT 1;\"", ".", "format", "(", "table_name", ")", ")", ".", "fetchone", "(", ")", "[", "0", "]", "\n", "\n", "", "def", "get_row", "(", "self", ",", "table_name", ",", "id", ",", "with_rowid", "=", "False", ")", ":", "\n", "        ", "cache", "=", "self", ".", "cache_rowid", "if", "with_rowid", "else", "self", ".", "cache_no_rowid", "\n", "if", "id", "in", "cache", ":", "\n", "            ", "return_value", "=", "cache", "[", "id", "]", "\n", "return", "return_value", "\n", "\n", "", "columns", "=", "\"*\"", "\n", "if", "with_rowid", ":", "\n", "            ", "columns", "=", "\"rowid, \"", "+", "columns", "\n", "\n", "", "query", "=", "\"SELECT \"", "\"{columns} \"", "\"FROM {table_name} \""]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.connect": [[100, 112], ["os.path.join", "os.path.isfile", "sqlite3.connect", "data_access.DataAccess.db.execute", "data_access.DataAccess.db.execute", "os.remove"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.connect"], ["\"WHERE rowid = ?;\"", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "columns", "=", "columns", ")", "\n", "return_value", "=", "self", ".", "db", ".", "execute", "(", "query", ",", "(", "id", ",", ")", ")", ".", "fetchone", "(", ")", "\n", "cache", "[", "id", "]", "=", "return_value", "\n", "return", "return_value", "\n", "\n", "", "def", "get_rows", "(", "self", ",", "train_ids", ")", ":", "\n", "        ", "tmp_name", "=", "\"tmp_pairs\"", "\n", "self", ".", "create_temporary_table", "(", "tmp_name", ",", "map", "(", "lambda", "x", ":", "(", "x", ",", ")", ",", "train_ids", ")", ")", "\n", "\n", "news", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT rowid, * \"", "\n", "\"FROM {table_pairs} \"", "\n", "\"WHERE rowid IN (SELECT id FROM {tmp_table});\"", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.initialise_data": [[113, 118], ["data_access.DataAccess.insert_many", "zip"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_many"], [".", "format", "(", "table_pairs", "=", "DataAccess", ".", "TABLE_NEWS", ",", "\n", "tmp_table", "=", "tmp_name", ")", ")", ".", "fetchall", "(", ")", "\n", "\n", "self", ".", "drop_temporary_table", "(", "tmp_name", ")", "\n", "\n", "ids", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "news", ")", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.setup_schema": [[119, 122], ["data_access.DataAccess.setup_ihdp", "data_access.DataAccess.db.commit"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.setup_ihdp"], ["news_data", "=", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "news", ")", "\n", "news_data", "=", "np", ".", "array", "(", "news_data", ")", "\n", "return", "news_data", ",", "ids", ",", "news_data", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.setup_ihdp": [[123, 134], ["data_access.DataAccess.db.execute"], "methods", ["None"], ["", "def", "get_row_by_id", "(", "self", ",", "table_name", ",", "id", ",", "with_rowid", "=", "False", ")", ":", "\n", "        ", "columns", "=", "\"*\"", "\n", "if", "with_rowid", ":", "\n", "            ", "columns", "=", "\"rowid, \"", "+", "columns", "\n", "\n", "", "query", "=", "\"SELECT \"", "\"{columns} \"", "\"FROM {table_name} \"", "\"WHERE id = ?;\"", ".", "format", "(", "table_name", "=", "table_name", ",", "\n", "columns", "=", "columns", ")", "\n", "return", "self", ".", "db", ".", "execute", "(", "query", ",", "(", "id", ",", ")", ")", ".", "fetchone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_many": [[135, 140], ["data_access.DataAccess.db.executemany", "len"], "methods", ["None"], ["", "def", "get_labelled_patients", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "arange", "(", "self", ".", "get_num_rows", "(", "DataAccess", ".", "TABLE_NEWS", ")", ")", "+", "1", "\n", "\n", "", "def", "create_temporary_table", "(", "self", ",", "table_name", ",", "values", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "\"CREATE TEMP TABLE {table_name} (id INT);\"", ".", "format", "(", "table_name", "=", "table_name", ")", ")", "\n", "if", "len", "(", "values", ")", "!=", "0", ":", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_ihdp": [[141, 143], ["data_access.DataAccess.insert_many"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.insert_many"], ["            ", "self", ".", "db", ".", "executemany", "(", "\"INSERT INTO {table_name} VALUES (?);\"", ".", "format", "(", "table_name", "=", "table_name", ")", ",", "values", ")", "\n", "", "return", "table_name", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_column": [[144, 156], ["data_access.DataAccess.create_temporary_table", "data_access.DataAccess.db.execute().fetchall", "data_access.DataAccess.drop_temporary_table", "data_access.DataAccess.db.execute"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table"], ["", "def", "drop_temporary_table", "(", "self", ",", "table_name", ")", ":", "\n", "        ", "self", ".", "db", ".", "execute", "(", "\"drop table {tmp_table_name};\"", ".", "format", "(", "tmp_table_name", "=", "table_name", ")", ")", "\n", "\n", "", "def", "get_news_dimension", "(", "self", ")", ":", "\n", "        ", "news", "=", "self", ".", "db", ".", "execute", "(", "\"SELECT * FROM {table_name} WHERE rowid = 1;\"", "\n", ".", "format", "(", "table_name", "=", "DataAccess", ".", "TABLE_NEWS", ")", ")", ".", "fetchone", "(", ")", "\n", "return", "news", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "get_labels", "(", "self", ",", "args", ",", "ids", ",", "benchmark", ")", ":", "\n", "        ", "assignments", "=", "[", "]", "\n", "for", "id", "in", "ids", ":", "\n", "            ", "news", "=", "self", ".", "get_row", "(", "DataAccess", ".", "TABLE_NEWS", ",", "id", "[", "0", "]", ")", "\n", "assignment", "=", "benchmark", ".", "get_assignment", "(", "id", "[", "0", "]", ",", "news", "[", "0", "]", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_num_rows": [[157, 161], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["assignments", ".", "append", "(", "assignment", ")", "\n", "", "assignments", "=", "np", ".", "array", "(", "assignments", ")", "\n", "num_labels", "=", "benchmark", ".", "get_num_treatments", "(", ")", "\n", "return", "assignments", ",", "num_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row": [[162, 172], ["data_access.DataAccess.db.execute().fetchone", "data_access.DataAccess.db.execute"], "methods", ["None"], ["", "def", "get_entry_with_id", "(", "self", ",", "id", ",", "args", "=", "{", "}", ")", ":", "\n", "        ", "news", "=", "self", ".", "get_row", "(", "DataAccess", ".", "TABLE_NEWS", ",", "id", ",", "with_rowid", "=", "True", ")", "\n", "\n", "patient_id", "=", "news", "[", "0", "]", "\n", "result", "=", "{", "\"id\"", ":", "patient_id", ",", "\"x\"", ":", "news", "[", "1", "]", ",", "\"z\"", ":", "news", "[", "2", "]", "}", "\n", "\n", "return", "patient_id", ",", "result", "\n", "\n", "", "def", "standardise_entry", "(", "self", ",", "entry", ")", ":", "\n", "        ", "return", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_rows": [[173, 193], ["data_access.DataAccess.create_temporary_table", "data_access.DataAccess.db.execute().fetchall", "data_access.DataAccess.drop_temporary_table", "map", "numpy.array", "map", "numpy.array", "data_access.DataAccess.db.execute", "map"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table"], ["", "def", "prepare_batch", "(", "self", ",", "args", ",", "batch_data", ",", "benchmark", ",", "is_train", "=", "False", ")", ":", "\n", "        ", "ids", "=", "np", ".", "array", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"id\"", "]", ",", "batch_data", ")", ")", "\n", "news_data", "=", "map", "(", "lambda", "x", ":", "x", "[", "\"x\"", "]", ",", "batch_data", ")", "\n", "\n", "assignments", "=", "map", "(", "benchmark", ".", "get_assignment", ",", "ids", ",", "news_data", ")", "\n", "treatment_data", ",", "batch_y", "=", "zip", "(", "*", "assignments", ")", "\n", "treatment_data", "=", "np", ".", "array", "(", "treatment_data", ")", "\n", "\n", "if", "args", "[", "\"with_propensity_batch\"", "]", "and", "is_train", ":", "\n", "            ", "propensity_batch_probability", "=", "float", "(", "args", "[", "\"propensity_batch_probability\"", "]", ")", "\n", "num_randomised_neighbours", "=", "int", "(", "np", ".", "rint", "(", "args", "[", "\"num_randomised_neighbours\"", "]", ")", ")", "\n", "news_data", ",", "treatment_data", ",", "batch_y", "=", "self", ".", "enhance_batch_with_propensity_matches", "(", "benchmark", ",", "\n", "treatment_data", ",", "\n", "news_data", ",", "\n", "batch_y", ",", "\n", "propensity_batch_probability", ",", "\n", "num_randomised_neighbours", ")", "\n", "\n", "", "input_data", "=", "np", ".", "asarray", "(", "news_data", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "batch_y", "=", "np", ".", "array", "(", "batch_y", ")", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_labelled_patients": [[194, 196], ["numpy.arange", "data_access.DataAccess.get_num_rows"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_num_rows"], ["batch_x", "=", "[", "\n", "input_data", ",", "\n", "treatment_data", ",", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.create_temporary_table": [[197, 202], ["data_access.DataAccess.db.execute", "len", "data_access.DataAccess.db.executemany"], "methods", ["None"], ["]", "\n", "return", "batch_x", ",", "batch_y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.drop_temporary_table": [[203, 205], ["data_access.DataAccess.db.execute"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_labels": [[206, 215], ["numpy.array", "benchmark.get_num_treatments", "data_access.DataAccess.get_row", "numpy.array.append", "benchmark.get_assignment"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_assignment"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_entry_with_id": [[216, 223], ["data_access.DataAccess.get_row"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.standardise_entry": [[224, 226], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.prepare_batch": [[227, 253], ["numpy.array", "map", "map", "zip", "numpy.array", "numpy.asarray().astype", "numpy.array", "map", "float", "int", "data_access.DataAccess.enhance_batch_with_propensity_matches", "numpy.rint", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.enhance_batch_with_propensity_matches"], []], "home.repos.pwc.inspect_result.d909b_perfect_match.models.per_sample_dropout.PerSampleDropout.__init__": [[44, 51], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["@", "interfaces", ".", "legacy_dropout_support", "\n", "def", "__init__", "(", "self", ",", "rate", ",", "noise_shape", "=", "None", ",", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PerSampleDropout", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "rate", "=", "rate", "\n", "self", ".", "noise_shape", "=", "noise_shape", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "supports_masking", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.per_sample_dropout.PerSampleDropout._get_noise_shape": [[52, 54], ["None"], "methods", ["None"], ["", "def", "_get_noise_shape", "(", "self", ",", "_", ")", ":", "\n", "        ", "return", "self", ".", "noise_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.per_sample_dropout.PerSampleDropout.call": [[55, 65], ["keras.in_train_phase", "tensorflow.expand_dims", "keras.tile", "tensorflow.transpose", "tensorflow.floor", "keras.reshape", "tensorflow.shape", "keras.random_uniform", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "None", ")", ":", "\n", "        ", "def", "dropped_inputs", "(", ")", ":", "\n", "            ", "keep_prob", "=", "1.", "-", "self", ".", "rate", "\n", "tile_shape", "=", "tf", ".", "expand_dims", "(", "tf", ".", "shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "axis", "=", "0", ")", "\n", "tiled_keep_prob", "=", "K", ".", "tile", "(", "keep_prob", ",", "tile_shape", ")", "\n", "keep_prob", "=", "tf", ".", "transpose", "(", "K", ".", "reshape", "(", "tiled_keep_prob", ",", "[", "tile_shape", "[", "0", "]", ",", "tf", ".", "shape", "(", "keep_prob", ")", "[", "0", "]", "]", ")", ")", "\n", "binary_tensor", "=", "tf", ".", "floor", "(", "keep_prob", "+", "K", ".", "random_uniform", "(", "shape", "=", "tf", ".", "shape", "(", "inputs", ")", ")", ")", "\n", "return", "inputs", "*", "binary_tensor", "\n", "", "return", "K", ".", "in_train_phase", "(", "dropped_inputs", ",", "inputs", ",", "\n", "training", "=", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.per_sample_dropout.PerSampleDropout.get_config": [[66, 70], ["super().get_config", "dict", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.per_sample_dropout.PerSampleDropout.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "base_config", "=", "super", "(", "PerSampleDropout", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.cf_early_stopping.CounterfactualEarlyStopping.__init__": [[27, 63], ["keras.callbacks.Callback.__init__", "benchmark.set_assign_counterfactuals", "next", "benchmark.set_assign_counterfactuals", "warnings.warn", "cf_early_stopping.CounterfactualEarlyStopping.monitor.startswith"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.set_assign_counterfactuals", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.set_assign_counterfactuals"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "val_generator", ",", "val_steps", ",", "benchmark", ",", "\n", "min_delta", "=", "0", ",", "patience", "=", "0", ",", "verbose", "=", "0", ",", "mode", "=", "'auto'", ")", ":", "\n", "        ", "super", "(", "CounterfactualEarlyStopping", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "benchmark", ".", "set_assign_counterfactuals", "(", "True", ")", "\n", "self", ".", "validation_data", "=", "next", "(", "val_generator", ")", "\n", "benchmark", ".", "set_assign_counterfactuals", "(", "False", ")", "\n", "self", ".", "val_steps", "=", "val_steps", "\n", "self", ".", "benchmark", "=", "benchmark", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "min_delta", "=", "min_delta", "\n", "self", ".", "wait", "=", "0", "\n", "self", ".", "stopped_epoch", "=", "0", "\n", "\n", "if", "mode", "not", "in", "[", "'auto'", ",", "'min'", ",", "'max'", "]", ":", "\n", "            ", "warnings", ".", "warn", "(", "'EarlyStopping mode %s is unknown, '", "\n", "'fallback to auto mode.'", "%", "(", "self", ".", "mode", ")", ",", "\n", "RuntimeWarning", ")", "\n", "mode", "=", "'auto'", "\n", "\n", "", "if", "mode", "==", "'min'", ":", "\n", "            ", "self", ".", "monitor_op", "=", "np", ".", "less", "\n", "", "elif", "mode", "==", "'max'", ":", "\n", "            ", "self", ".", "monitor_op", "=", "np", ".", "greater", "\n", "", "else", ":", "\n", "            ", "if", "'acc'", "in", "self", ".", "monitor", "or", "self", ".", "monitor", ".", "startswith", "(", "'fmeasure'", ")", ":", "\n", "                ", "self", ".", "monitor_op", "=", "np", ".", "greater", "\n", "", "else", ":", "\n", "                ", "self", ".", "monitor_op", "=", "np", ".", "less", "\n", "\n", "", "", "if", "self", ".", "monitor_op", "==", "np", ".", "greater", ":", "\n", "            ", "self", ".", "min_delta", "*=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_delta", "*=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.cf_early_stopping.CounterfactualEarlyStopping.on_train_begin": [[64, 69], ["None"], "methods", ["None"], ["", "", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "# Allow instances to be re-used", "\n", "        ", "self", ".", "wait", "=", "0", "\n", "self", ".", "stopped_epoch", "=", "0", "\n", "self", ".", "best", "=", "np", ".", "Inf", "if", "self", ".", "monitor_op", "==", "np", ".", "less", "else", "-", "np", ".", "Inf", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.cf_early_stopping.CounterfactualEarlyStopping.on_epoch_end": [[70, 99], ["model_eval.ModelEvaluation.evaluate_counterfactual", "cf_early_stopping.CounterfactualEarlyStopping.monitor_op", "_generator"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.evaluate_counterfactual"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "def", "make_tmp_generator", "(", ")", ":", "\n", "            ", "def", "_generator", "(", ")", ":", "\n", "                ", "while", "True", ":", "\n", "                    ", "yield", "self", ".", "validation_data", "\n", "", "", "return", "_generator", "(", ")", "\n", "\n", "", "score_dict", "=", "ModelEvaluation", ".", "evaluate_counterfactual", "(", "self", ".", "model", ",", "\n", "make_tmp_generator", "(", ")", ",", "\n", "self", ".", "val_steps", ",", "\n", "self", ".", "benchmark", ",", "\n", "set_name", "=", "\"val\"", ",", "\n", "with_print", "=", "True", ",", "\n", "stateful_benchmark", "=", "False", ")", "\n", "\n", "current", "=", "score_dict", "[", "\"cf_pehe_nn\"", "]", "\n", "\n", "if", "current", "is", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Early stopping requires %s available!'", "%", "\n", "(", "self", ".", "monitor", ")", ",", "RuntimeWarning", ")", "\n", "\n", "", "if", "self", ".", "monitor_op", "(", "current", "-", "self", ".", "min_delta", ",", "self", ".", "best", ")", ":", "\n", "            ", "self", ".", "best", "=", "current", "\n", "self", ".", "wait", "=", "0", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "wait", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "stopped_epoch", "=", "epoch", "\n", "self", ".", "model", ".", "stop_training", "=", "True", "\n", "", "self", ".", "wait", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.cf_early_stopping.CounterfactualEarlyStopping.on_train_end": [[100, 103], ["print"], "methods", ["None"], ["", "", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "stopped_epoch", ">", "0", "and", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "'Epoch %05d: early stopping'", "%", "(", "self", ".", "stopped_epoch", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_object": [[36, 39], ["pickle.dump", "open"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "save_object", "(", "object", ",", "file_path", ")", ":", "\n", "        ", "pickle", ".", "dump", "(", "object", ",", "open", "(", "file_path", ",", "\"w\"", ")", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.load_object": [[40, 43], ["pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load"], ["", "@", "staticmethod", "\n", "def", "load_object", "(", "file_path", ")", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "open", "(", "file_path", ",", "\"r\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.get_file_names": [[44, 49], ["os.path.join", "os.path.join"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_file_names", "(", "folder_name", ")", ":", "\n", "        ", "model_file", "=", "join", "(", "folder_name", ",", "ModelFactory", ".", "MODEL_NAME", ")", "\n", "weights_file", "=", "join", "(", "folder_name", ",", "ModelFactory", ".", "WEIGHTS_NAME", ")", "\n", "return", "model_file", ",", "weights_file", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.load_model": [[50, 60], ["model_factory.ModelFactory.get_file_names", "model_factory.ModelFactory.load_model_specification", "keras.models.model_from_json", "model_factory.ModelFactory.load_weights", "keras.models.model_from_json.set_weights"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.get_file_names", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.load_model_specification", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.load_weights"], ["", "@", "staticmethod", "\n", "def", "load_model", "(", "folder_name", ")", ":", "\n", "        ", "model_file", ",", "weights_file", "=", "ModelFactory", ".", "get_file_names", "(", "folder_name", ")", "\n", "\n", "model_specification", "=", "ModelFactory", ".", "load_model_specification", "(", "model_file", ")", "\n", "model", "=", "model_from_json", "(", "model_specification", ")", "\n", "\n", "weights", "=", "ModelFactory", ".", "load_weights", "(", "weights_file", ")", "\n", "model", ".", "set_weights", "(", "weights", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_model": [[61, 74], ["model_factory.ModelFactory.get_file_names", "model_factory.ModelFactory.save_model_specification", "model_factory.ModelFactory.save_weights", "os.path.exists", "apps.util.error", "Exception", "os.path.exists", "os.mkdir", "os.path.isdir"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.get_file_names", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_model_specification", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_weights", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.error"], ["", "@", "staticmethod", "\n", "def", "save_model", "(", "model", ",", "folder_name", ")", ":", "\n", "        ", "model_file", ",", "weights_file", "=", "ModelFactory", ".", "get_file_names", "(", "folder_name", ")", "\n", "\n", "if", "exists", "(", "folder_name", ")", "and", "not", "isdir", "(", "folder_name", ")", ":", "\n", "            ", "error", "(", "folder_name", ",", "\"exists and is not a directory. Could not save.\"", ")", "\n", "raise", "Exception", "(", "folder_name", "+", "\"exists and is not a directory.\"", ")", "\n", "\n", "", "if", "not", "exists", "(", "folder_name", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "folder_name", ")", "\n", "\n", "", "ModelFactory", ".", "save_model_specification", "(", "model", ",", "model_file", ")", "\n", "ModelFactory", ".", "save_weights", "(", "model", ",", "weights_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.load_model_specification": [[75, 80], ["open", "model_specification_file.read"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_model_specification", "(", "file_path", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "model_specification_file", ":", "\n", "            ", "content", "=", "model_specification_file", ".", "read", "(", ")", "\n", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_model_specification": [[81, 86], ["model.to_json", "open", "model_specification_file.write"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "save_model_specification", "(", "model", ",", "file_path", ")", ":", "\n", "        ", "json_string", "=", "model", ".", "to_json", "(", ")", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "model_specification_file", ":", "\n", "            ", "model_specification_file", ".", "write", "(", "json_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_weights": [[87, 92], ["dict", "numpy.savez", "str", "enumerate", "model.get_weights"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "save_weights", "(", "model", ",", "file_path", ")", ":", "\n", "        ", "weights", "=", "dict", "(", "[", "(", "str", "(", "i", ")", ",", "weight", ")", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "model", ".", "get_weights", "(", ")", ")", "]", ")", "\n", "np", ".", "savez", "(", "file_path", ",", "**", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.load_weights": [[93, 99], ["numpy.load", "len", "range", "str"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load"], ["", "@", "staticmethod", "\n", "def", "load_weights", "(", "file_path", ")", ":", "\n", "        ", "weights", "=", "np", ".", "load", "(", "file_path", ")", "\n", "num_weights", "=", "len", "(", "weights", ".", "files", ")", "\n", "weight_list", "=", "[", "weights", "[", "str", "(", "idx", ")", "+", "\".npy\"", "]", "for", "idx", "in", "range", "(", "num_weights", ")", "]", "\n", "return", "weight_list", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactoryCheckpoint.__init__": [[102, 107], ["keras.callbacks.ModelCheckpoint.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "filepath", ",", "monitor", "=", "'val_loss'", ",", "verbose", "=", "0", ",", "\n", "save_best_only", "=", "False", ",", "save_weights_only", "=", "False", ",", "\n", "mode", "=", "'auto'", ",", "period", "=", "1", ")", ":", "\n", "        ", "super", "(", "ModelFactoryCheckpoint", ",", "self", ")", ".", "__init__", "(", "filepath", ",", "monitor", ",", "verbose", ",", "save_best_only", ",", "save_weights_only", ",", "mode", ",", "period", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactoryCheckpoint.on_epoch_end": [[108, 142], ["model_factory.ModelFactoryCheckpoint.filepath.format", "logs.get", "apps.util.error", "model_factory.ModelFactoryCheckpoint.monitor_op", "apps.util.error", "model_factory.ModelFactory.save_weights", "model_factory.ModelFactory.save_model", "apps.util.error", "model_factory.ModelFactory.save_weights", "model_factory.ModelFactory.save_model", "apps.util.error"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.error", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.error", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_weights", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_model", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.error", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_weights", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_model", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.error"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "self", ".", "epochs_since_last_save", "+=", "1", "\n", "if", "self", ".", "epochs_since_last_save", ">=", "self", ".", "period", ":", "\n", "            ", "self", ".", "epochs_since_last_save", "=", "0", "\n", "filepath", "=", "self", ".", "filepath", ".", "format", "(", "epoch", "=", "epoch", ",", "**", "logs", ")", "\n", "if", "self", ".", "save_best_only", ":", "\n", "                ", "current", "=", "logs", ".", "get", "(", "self", ".", "monitor", ")", "\n", "if", "current", "is", "None", ":", "\n", "                    ", "error", "(", "'Can save best model only with %s available, '", "\n", "'skipping.'", "%", "(", "self", ".", "monitor", ")", ",", "RuntimeWarning", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "monitor_op", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "                        ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                            ", "error", "(", "'Epoch %05d: %s improved from %0.5f to %0.5f,'", "\n", "' saving model to %s'", "\n", "%", "(", "epoch", ",", "self", ".", "monitor", ",", "self", ".", "best", ",", "\n", "current", ",", "filepath", ")", ")", "\n", "", "self", ".", "best", "=", "current", "\n", "if", "self", ".", "save_weights_only", ":", "\n", "                            ", "ModelFactory", ".", "save_weights", "(", "self", ".", "model", ",", "filepath", ")", "\n", "", "else", ":", "\n", "                            ", "ModelFactory", ".", "save_model", "(", "self", ".", "model", ",", "filepath", ")", "\n", "", "", "else", ":", "\n", "                        ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                            ", "error", "(", "'Epoch %05d: %s did not improve'", "%", "\n", "(", "epoch", ",", "self", ".", "monitor", ")", ")", "\n", "", "", "", "", "else", ":", "\n", "                ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                    ", "error", "(", "'Epoch %05d: saving model to %s'", "%", "(", "epoch", ",", "filepath", ")", ")", "\n", "", "if", "self", ".", "save_weights_only", ":", "\n", "                    ", "ModelFactory", ".", "save_weights", "(", "self", ".", "model", ",", "filepath", ")", "\n", "", "else", ":", "\n", "                    ", "ModelFactory", ".", "save_model", "(", "self", ".", "model", ",", "filepath", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.compile_model": [[31, 57], ["list", "model.compile", "isinstance", "keras.optimizers.RMSprop", "keras.optimizers.Adam", "len", "range", "len", "len"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "compile_model", "(", "model", ",", "learning_rate", ",", "optimizer", "=", "\"adam\"", ",", "loss_weights", "=", "list", "(", "[", "1.0", "]", ")", ",", "\n", "main_loss", "=", "\"mse\"", ",", "extra_loss", "=", "None", ",", "metrics", "=", "{", "}", ")", ":", "\n", "\n", "        ", "losses", "=", "main_loss", "\n", "\n", "if", "loss_weights", "is", "not", "None", ":", "\n", "            ", "losses", "=", "[", "losses", "]", "*", "len", "(", "loss_weights", ")", "\n", "\n", "", "if", "extra_loss", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "extra_loss", ",", "list", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "1", "+", "len", "(", "extra_loss", ")", ")", ":", "\n", "                    ", "losses", "[", "i", "]", "=", "extra_loss", "[", "i", "-", "1", "]", "\n", "", "", "else", ":", "\n", "                ", "losses", "[", "1", "]", "=", "extra_loss", "\n", "\n", "", "", "if", "optimizer", "==", "\"rmsprop\"", ":", "\n", "            ", "opt", "=", "RMSprop", "(", "lr", "=", "learning_rate", ")", "\n", "", "else", ":", "\n", "            ", "opt", "=", "Adam", "(", "lr", "=", "learning_rate", ")", "\n", "\n", "", "model", ".", "compile", "(", "loss", "=", "losses", "if", "len", "(", "losses", ")", ">", "1", "else", "losses", "[", "0", "]", ",", "\n", "loss_weights", "=", "loss_weights", ",", "\n", "optimizer", "=", "opt", ",", "\n", "metrics", "=", "metrics", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp": [[58, 91], ["range", "keras.layers.Lambda", "keras.layers.Lambda.", "keras.int_shape", "keras.layers.Dense", "keras.layers.advanced_activations.ELU", "keras.layers.Dropout", "keras.layers.Lambda", "keras.layers.normalization.BatchNormalization", "perfect_match.models.per_sample_dropout.PerSampleDropout", "keras.regularizers.L1L2", "keras.regularizers.L1L2", "keras.regularizers.L1L2", "keras.regularizers.L1L2", "perfect_match.models.distributions.safe_sqrt", "tensorflow.reduce_sum", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.safe_sqrt"], ["", "@", "staticmethod", "\n", "def", "build_mlp", "(", "last_layer", ",", "p_dropout", "=", "0.0", ",", "num_layers", "=", "1", ",", "with_bn", "=", "True", ",", "dim", "=", "None", ",", "l2_weight", "=", "0.0", ",", "\n", "last_activity_regulariser", "=", "None", ",", "propensity_dropout", "=", "None", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "if", "dim", "is", "None", ":", "\n", "            ", "dim", "=", "K", ".", "int_shape", "(", "last_layer", ")", "[", "-", "1", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "last_layer", "=", "Dense", "(", "dim", ",", "\n", "kernel_regularizer", "=", "L1L2", "(", "l2", "=", "l2_weight", ")", ",", "\n", "bias_regularizer", "=", "L1L2", "(", "l2", "=", "l2_weight", ")", ",", "\n", "use_bias", "=", "not", "with_bn", ",", "\n", "activity_regularizer", "=", "last_activity_regulariser", "if", "i", "==", "num_layers", "-", "1", "else", "None", ")", "(", "last_layer", ")", "\n", "\n", "if", "with_bn", ":", "\n", "                ", "last_layer", "=", "BatchNormalization", "(", "gamma_regularizer", "=", "L1L2", "(", "l2", "=", "l2_weight", ")", ",", "\n", "beta_regularizer", "=", "L1L2", "(", "l2", "=", "l2_weight", ")", ")", "(", "last_layer", ")", "\n", "", "last_layer", "=", "ELU", "(", ")", "(", "last_layer", ")", "\n", "last_layer", "=", "Dropout", "(", "p_dropout", ")", "(", "last_layer", ")", "\n", "if", "propensity_dropout", "is", "not", "None", ":", "\n", "                ", "last_layer", "=", "PerSampleDropout", "(", "propensity_dropout", ")", "(", "last_layer", ")", "\n", "\n", "", "", "if", "normalize", ":", "\n", "            ", "last_layer", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "safe_sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "x", ")", ",", "\n", "axis", "=", "1", ",", "\n", "keep_dims", "=", "True", ")", ")", ")", "(", "last_layer", ")", "\n", "\n", "", "if", "last_activity_regulariser", "is", "not", "None", ":", "\n", "            ", "identity_layer", "=", "Lambda", "(", "lambda", "x", ":", "x", ")", "\n", "identity_layer", ".", "activity_regularizer", "=", "last_activity_regulariser", "\n", "last_layer", "=", "identity_layer", "(", "last_layer", ")", "\n", "\n", "", "return", "last_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_simple": [[92, 154], ["keras.layers.Input", "keras.layers.Input", "model_builder.ModelBuilder.build_mlp", "range", "model_outputs.append", "loss_weights.append", "keras.models.Model", "keras.models.Model.summary", "model_builder.ModelBuilder.compile_model", "keras.layers.Dense", "all_indices.append", "outputs.append", "len", "map", "map", "tensorflow.dynamic_stitch", "keras.reshape", "keras.layers.Lambda", "tensorflow.reshape", "keras.layers.Lambda", "keras.layers.Lambda", "tensorflow.to_int32", "tensorflow.gather", "tensorflow.where", "tensorflow.equal", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.compile_model"], ["", "@", "staticmethod", "\n", "def", "build_simple", "(", "input_dim", ",", "output_dim", ",", "num_units", "=", "128", ",", "dropout", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "learning_rate", "=", "0.0001", ",", "num_layers", "=", "2", ",", "\n", "num_treatments", "=", "2", ",", "p_ipm", "=", "0.5", ",", "imbalance_loss_weight", "=", "1.0", ",", "with_bn", "=", "False", ",", "with_propensity_dropout", "=", "True", ",", "\n", "normalize", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "rnaseq_input", "=", "Input", "(", "shape", "=", "(", "input_dim", ",", ")", ")", "\n", "treatment_input", "=", "Input", "(", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "\"int32\"", ")", "\n", "model_outputs", ",", "loss_weights", "=", "[", "]", ",", "[", "]", "\n", "propensity_dropout", "=", "None", "\n", "regulariser", "=", "None", "\n", "\n", "last_layer", "=", "ModelBuilder", ".", "build_mlp", "(", "rnaseq_input", ",", "\n", "dim", "=", "num_units", ",", "\n", "p_dropout", "=", "dropout", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "with_bn", "=", "with_bn", ",", "\n", "l2_weight", "=", "l2_weight", ",", "\n", "propensity_dropout", "=", "propensity_dropout", ",", "\n", "normalize", "=", "normalize", ",", "\n", "last_activity_regulariser", "=", "regulariser", ")", "\n", "\n", "all_outputs", "=", "Dense", "(", "num_treatments", "*", "output_dim", ",", "activation", "=", "\"linear\"", ",", "name", "=", "\"head\"", ")", "(", "last_layer", ")", "\n", "\n", "all_indices", ",", "outputs", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_treatments", ")", ":", "\n", "\n", "            ", "def", "get_indices_equal_to", "(", "x", ")", ":", "\n", "                ", "return", "tf", ".", "reshape", "(", "tf", ".", "to_int32", "(", "tf", ".", "where", "(", "tf", ".", "equal", "(", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", ")", ")", ",", "i", ")", ")", ")", ",", "(", "-", "1", ",", ")", ")", "\n", "\n", "", "indices", "=", "Lambda", "(", "get_indices_equal_to", ")", "(", "treatment_input", ")", "\n", "\n", "def", "get_output_at", "(", "x", ")", ":", "\n", "                ", "return", "tf", ".", "gather", "(", "x", ",", "indices", ")", "[", ":", ",", "i", "]", "\n", "\n", "", "output", "=", "Lambda", "(", "get_output_at", ")", "(", "all_outputs", ")", "\n", "\n", "all_indices", ".", "append", "(", "indices", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "\n", "", "def", "do_dynamic_stitch", "(", "x", ")", ":", "\n", "            ", "num_tensors", "=", "len", "(", "x", ")", "\n", "\n", "data_indices", "=", "map", "(", "tf", ".", "to_int32", ",", "x", "[", ":", "num_tensors", "/", "2", "]", ")", "\n", "data", "=", "map", "(", "tf", ".", "to_float", ",", "x", "[", "num_tensors", "/", "2", ":", "]", ")", "\n", "\n", "stitched", "=", "tf", ".", "dynamic_stitch", "(", "data_indices", ",", "data", ")", "\n", "return", "K", ".", "reshape", "(", "stitched", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "output", "=", "Lambda", "(", "do_dynamic_stitch", ",", "name", "=", "\"dynamic_stitch\"", ")", "(", "all_indices", "+", "outputs", ")", "\n", "\n", "model_outputs", ".", "append", "(", "output", ")", "\n", "loss_weights", ".", "append", "(", "1", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "rnaseq_input", ",", "treatment_input", "]", ",", "\n", "outputs", "=", "model_outputs", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "main_model", "=", "ModelBuilder", ".", "compile_model", "(", "model", ",", "learning_rate", ",", "\n", "loss_weights", "=", "loss_weights", ",", "\n", "main_loss", "=", "\"mse\"", ")", "\n", "\n", "return", "main_model", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_tarnet": [[155, 261], ["keras.layers.Input", "keras.layers.Input", "model_builder.ModelBuilder.build_mlp", "range", "model_outputs.append", "loss_weights.append", "keras.models.Model", "keras.models.Model.summary", "model_builder.ModelBuilder.compile_model", "model_builder.ModelBuilder.build_mlp", "model_outputs.append", "loss_weights.append", "model_builder.ModelBuilder.build_mlp", "all_indices.append", "outputs.append", "len", "map", "map", "tensorflow.dynamic_stitch", "keras.layers.Lambda", "keras.layers.Dense", "keras.layers.Lambda", "tensorflow.stack", "tensorflow.gather_nd", "keras.layers.Lambda", "keras.layers.Lambda", "tensorflow.reshape", "keras.layers.Lambda", "keras.layers.Lambda", "keras.layers.Dense", "perfect_match.models.distributions.wasserstein", "tensorflow.to_int32", "keras.layers.Lambda", "tensorflow.stop_gradient", "tensorflow.range", "keras.squeeze", "tensorflow.where", "tensorflow.gather", "tensorflow.cast", "tensorflow.equal", "tensorflow.gather", "str", "tensorflow.shape", "tensorflow.reshape", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.compile_model", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp", "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.wasserstein", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.log", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.log"], ["", "@", "staticmethod", "\n", "def", "build_tarnet", "(", "input_dim", ",", "output_dim", ",", "num_units", "=", "128", ",", "dropout", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "learning_rate", "=", "0.0001", ",", "num_layers", "=", "2", ",", "\n", "num_treatments", "=", "2", ",", "p_ipm", "=", "0.5", ",", "imbalance_loss_weight", "=", "1.0", ",", "with_bn", "=", "False", ",", "with_propensity_dropout", "=", "True", ",", "\n", "normalize", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "rnaseq_input", "=", "Input", "(", "shape", "=", "(", "input_dim", ",", ")", ")", "\n", "treatment_input", "=", "Input", "(", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "\"int32\"", ")", "\n", "model_outputs", ",", "loss_weights", "=", "[", "]", ",", "[", "]", "\n", "\n", "if", "with_propensity_dropout", ":", "\n", "            ", "dropout", "=", "0", "\n", "propensity_output", "=", "ModelBuilder", ".", "build_mlp", "(", "rnaseq_input", ",", "\n", "dim", "=", "num_units", ",", "\n", "p_dropout", "=", "dropout", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "with_bn", "=", "with_bn", ",", "\n", "l2_weight", "=", "l2_weight", ")", "\n", "propensity_output", "=", "Dense", "(", "num_treatments", ",", "activation", "=", "\"softmax\"", ",", "name", "=", "\"propensity\"", ")", "(", "propensity_output", ")", "\n", "model_outputs", ".", "append", "(", "propensity_output", ")", "\n", "loss_weights", ".", "append", "(", "1", ")", "\n", "gamma", "=", "0.5", "\n", "propensity_dropout", "=", "Lambda", "(", "lambda", "x", ":", "tf", ".", "stop_gradient", "(", "x", ")", ")", "(", "propensity_output", ")", "\n", "\n", "def", "get_treatment_propensities", "(", "x", ")", ":", "\n", "                ", "cat_idx", "=", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "0", ",", "tf", ".", "shape", "(", "x", "[", "0", "]", ")", "[", "0", "]", ")", ",", "K", ".", "squeeze", "(", "tf", ".", "cast", "(", "x", "[", "1", "]", ",", "\"int32\"", ")", ",", "axis", "=", "-", "1", ")", "]", ",", "\n", "axis", "=", "1", ")", "\n", "return", "tf", ".", "gather_nd", "(", "x", "[", "0", "]", ",", "cat_idx", ")", "\n", "\n", "", "propensity_dropout", "=", "Lambda", "(", "get_treatment_propensities", ")", "(", "[", "propensity_dropout", ",", "treatment_input", "]", ")", "\n", "propensity_dropout", "=", "Lambda", "(", "lambda", "x", ":", "1.", "-", "gamma", "-", "1.", "/", "2.", "*", "(", "-", "x", "*", "tf", ".", "log", "(", "x", ")", "-", "(", "1", "-", "x", ")", "*", "tf", ".", "log", "(", "1", "-", "x", ")", ")", ")", "(", "propensity_dropout", ")", "\n", "", "else", ":", "\n", "            ", "propensity_dropout", "=", "None", "\n", "\n", "", "regulariser", "=", "None", "\n", "if", "imbalance_loss_weight", "!=", "0.0", ":", "\n", "\n", "            ", "def", "wasserstein_distance_regulariser", "(", "x", ")", ":", "\n", "                ", "return", "imbalance_loss_weight", "*", "wasserstein", "(", "x", ",", "treatment_input", ",", "p_ipm", ",", "\n", "num_treatments", "=", "num_treatments", ")", "\n", "\n", "", "regulariser", "=", "wasserstein_distance_regulariser", "\n", "\n", "# Build shared representation.", "\n", "", "last_layer", "=", "ModelBuilder", ".", "build_mlp", "(", "rnaseq_input", ",", "\n", "dim", "=", "num_units", ",", "\n", "p_dropout", "=", "dropout", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "with_bn", "=", "with_bn", ",", "\n", "l2_weight", "=", "l2_weight", ",", "\n", "propensity_dropout", "=", "propensity_dropout", ",", "\n", "normalize", "=", "normalize", ",", "\n", "last_activity_regulariser", "=", "regulariser", ")", "\n", "\n", "last_layer_h", "=", "last_layer", "\n", "\n", "all_indices", ",", "outputs", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_treatments", ")", ":", "\n", "\n", "            ", "def", "get_indices_equal_to", "(", "x", ")", ":", "\n", "                ", "return", "tf", ".", "reshape", "(", "tf", ".", "to_int32", "(", "tf", ".", "where", "(", "tf", ".", "equal", "(", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", ")", ")", ",", "i", ")", ")", ")", ",", "(", "-", "1", ",", ")", ")", "\n", "\n", "", "indices", "=", "Lambda", "(", "get_indices_equal_to", ")", "(", "treatment_input", ")", "\n", "\n", "current_last_layer_h", "=", "Lambda", "(", "lambda", "x", ":", "tf", ".", "gather", "(", "x", ",", "indices", ")", ")", "(", "last_layer_h", ")", "\n", "\n", "if", "with_propensity_dropout", ":", "\n", "                ", "current_propensity_dropout", "=", "Lambda", "(", "lambda", "x", ":", "tf", ".", "gather", "(", "propensity_dropout", ",", "indices", ")", ")", "(", "propensity_dropout", ")", "\n", "", "else", ":", "\n", "                ", "current_propensity_dropout", "=", "None", "\n", "\n", "", "last_layer", "=", "ModelBuilder", ".", "build_mlp", "(", "current_last_layer_h", ",", "\n", "dim", "=", "num_units", ",", "\n", "p_dropout", "=", "dropout", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "with_bn", "=", "with_bn", ",", "\n", "propensity_dropout", "=", "current_propensity_dropout", ",", "\n", "l2_weight", "=", "l2_weight", ")", "\n", "\n", "output", "=", "Dense", "(", "output_dim", ",", "activation", "=", "\"linear\"", ",", "name", "=", "\"head_\"", "+", "str", "(", "i", ")", ")", "(", "last_layer", ")", "\n", "\n", "all_indices", ".", "append", "(", "indices", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "\n", "", "def", "do_dynamic_stitch", "(", "x", ")", ":", "\n", "            ", "num_tensors", "=", "len", "(", "x", ")", "\n", "\n", "data_indices", "=", "map", "(", "tf", ".", "to_int32", ",", "x", "[", ":", "num_tensors", "/", "2", "]", ")", "\n", "data", "=", "map", "(", "tf", ".", "to_float", ",", "x", "[", "num_tensors", "/", "2", ":", "]", ")", "\n", "\n", "stitched", "=", "tf", ".", "dynamic_stitch", "(", "data_indices", ",", "data", ")", "\n", "return", "stitched", "\n", "\n", "", "output", "=", "Lambda", "(", "do_dynamic_stitch", ",", "name", "=", "\"dynamic_stitch\"", ")", "(", "all_indices", "+", "outputs", ")", "\n", "model_outputs", ".", "append", "(", "output", ")", "\n", "loss_weights", ".", "append", "(", "1", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "rnaseq_input", ",", "treatment_input", "]", ",", "\n", "outputs", "=", "model_outputs", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "main_model", "=", "ModelBuilder", ".", "compile_model", "(", "model", ",", "learning_rate", ",", "\n", "loss_weights", "=", "loss_weights", ",", "\n", "main_loss", "=", "\"mse\"", ")", "\n", "\n", "return", "main_model", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.set_layers_trainable": [[262, 268], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "set_layers_trainable", "(", "model", ",", "trainable", ")", ":", "\n", "        ", "model", ".", "trainable", "=", "trainable", "\n", "for", "layer", "in", "model", ".", "layers", ":", "\n", "            ", "layer", ".", "trainable", "=", "trainable", "\n", "", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.pdist2sq": [[26, 33], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.square", "tensorflow.square", "tensorflow.transpose", "tensorflow.transpose"], "function", ["None"], ["def", "pdist2sq", "(", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Computes the squared Euclidean distance between all pairs x in X, y in Y \"\"\"", "\n", "C", "=", "-", "2", "*", "tf", ".", "matmul", "(", "X", ",", "tf", ".", "transpose", "(", "Y", ")", ")", "\n", "nx", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "X", ")", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "ny", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "Y", ")", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "D", "=", "(", "C", "+", "tf", ".", "transpose", "(", "ny", ")", ")", "+", "nx", "\n", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.safe_sqrt": [[36, 39], ["tensorflow.sqrt", "tensorflow.clip_by_value"], "function", ["None"], ["", "def", "safe_sqrt", "(", "x", ",", "lbound", "=", "SQRT_CONST", ")", ":", "\n", "    ", "''' Numerically safe version of TensorFlow sqrt '''", "\n", "return", "tf", ".", "sqrt", "(", "tf", ".", "clip_by_value", "(", "x", ",", "lbound", ",", "np", ".", "inf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.calculate_distance": [[41, 94], ["tensorflow.gather", "tensorflow.to_float", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.nn.dropout", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "range", "distributions.pdist2sq", "distributions.safe_sqrt", "tensorflow.reduce_max", "tensorflow.ones", "tensorflow.exp", "tensorflow.transpose", "tensorflow.stop_gradient", "tensorflow.reduce_sum", "tensorflow.shape", "distributions.pdist2sq", "tensorflow.shape", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.ones", "tensorflow.ones", "tensorflow.transpose", "tensorflow.ones", "tensorflow.shape", "tensorflow.transpose", "tensorflow.shape", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.where", "tensorflow.equal"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.pdist2sq", "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.safe_sqrt", "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.pdist2sq"], ["", "def", "calculate_distance", "(", "i", ",", "it", ",", "X", ",", "Xc", ",", "nc", ",", "b", ",", "t", ",", "p", "=", "0.5", ",", "lam", "=", "10", ",", "its", "=", "10", ",", "sq", "=", "False", ",", "backpropT", "=", "False", ")", ":", "\n", "    ", "Xt", "=", "tf", ".", "gather", "(", "X", ",", "it", ")", "\n", "nt", "=", "tf", ".", "to_float", "(", "tf", ".", "shape", "(", "Xt", ")", "[", "0", "]", ")", "\n", "\n", "# Marginal vector for treatment.", "\n", "a", "=", "tf", ".", "concat", "(", "[", "p", "*", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "tf", ".", "where", "(", "tf", ".", "equal", "(", "t", ",", "i", ")", ")", "[", ":", ",", "0", ":", "1", "]", ")", ")", "/", "nt", ",", "(", "1", "-", "p", ")", "*", "tf", ".", "ones", "(", "(", "1", ",", "1", ")", ")", "]", ",", "0", ")", "\n", "\n", "# Xt = tf.Print(Xt, [Xt], message=\"Xt=\")", "\n", "# Xc = tf.Print(Xc, [Xc], message=\"Xc=\")", "\n", "\n", "''' Compute distance matrix'''", "\n", "if", "sq", ":", "\n", "        ", "M", "=", "pdist2sq", "(", "Xt", ",", "Xc", ")", "\n", "", "else", ":", "\n", "        ", "M", "=", "safe_sqrt", "(", "pdist2sq", "(", "Xt", ",", "Xc", ")", ")", "\n", "\n", "", "''' Estimate lambda and delta '''", "\n", "M_mean", "=", "tf", ".", "reduce_mean", "(", "M", ")", "\n", "M_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "M", ",", "10", "/", "(", "nc", "*", "nt", ")", ")", "\n", "delta", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "reduce_max", "(", "M", ")", ")", "\n", "eff_lam", "=", "tf", ".", "stop_gradient", "(", "lam", "/", "M_mean", ")", "\n", "\n", "''' Compute new distance matrix '''", "\n", "Mt", "=", "M", "\n", "row", "=", "delta", "*", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "M", "[", "0", ":", "1", ",", ":", "]", ")", ")", "\n", "col", "=", "tf", ".", "concat", "(", "[", "delta", "*", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "M", "[", ":", ",", "0", ":", "1", "]", ")", ")", ",", "tf", ".", "zeros", "(", "(", "1", ",", "1", ")", ")", "]", ",", "0", ")", "\n", "\n", "# M = tf.Print(M, [M], message=\"M=\")", "\n", "# col = tf.Print(col, [col], message=\"col=\")", "\n", "# row = tf.Print(row, [row], message=\"row=\")", "\n", "\n", "Mt", "=", "tf", ".", "concat", "(", "[", "M", ",", "row", "]", ",", "0", ")", "\n", "Mt", "=", "tf", ".", "concat", "(", "[", "Mt", ",", "col", "]", ",", "1", ")", "\n", "\n", "''' Compute kernel matrix'''", "\n", "Mlam", "=", "eff_lam", "*", "Mt", "\n", "K", "=", "tf", ".", "exp", "(", "-", "Mlam", ")", "+", "1e-6", "# added constant to avoid nan", "\n", "U", "=", "K", "*", "Mt", "\n", "ainvK", "=", "K", "/", "a", "\n", "\n", "u", "=", "a", "\n", "for", "i", "in", "range", "(", "0", ",", "its", ")", ":", "\n", "        ", "u", "=", "1.0", "/", "(", "tf", ".", "matmul", "(", "ainvK", ",", "(", "b", "/", "tf", ".", "transpose", "(", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "u", ")", ",", "K", ")", ")", ")", ")", ")", "\n", "", "v", "=", "b", "/", "(", "tf", ".", "transpose", "(", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "u", ")", ",", "K", ")", ")", ")", "\n", "\n", "T", "=", "u", "*", "(", "tf", ".", "transpose", "(", "v", ")", "*", "K", ")", "\n", "\n", "if", "not", "backpropT", ":", "\n", "        ", "T", "=", "tf", ".", "stop_gradient", "(", "T", ")", "\n", "\n", "", "E", "=", "T", "*", "Mt", "\n", "D", "=", "2", "*", "tf", ".", "reduce_sum", "(", "E", ")", "\n", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.calculate_distances": [[96, 117], ["tensorflow.gather", "tensorflow.to_float", "tensorflow.concat", "tensorflow.zeros", "range", "tensorflow.equal", "tensorflow.cond", "tensorflow.shape", "tensorflow.where", "tensorflow.size", "tensorflow.ones", "tensorflow.equal", "tensorflow.zeros", "distributions.calculate_distance", "tensorflow.ones", "tensorflow.shape", "tensorflow.where", "tensorflow.equal"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.calculate_distance"], ["", "def", "calculate_distances", "(", "X", ",", "t", ",", "ic", ",", "p", "=", "0.5", ",", "lam", "=", "10", ",", "its", "=", "10", ",", "sq", "=", "False", ",", "backpropT", "=", "False", ",", "num_treatments", "=", "2", ")", ":", "\n", "    ", "Xc", "=", "tf", ".", "gather", "(", "X", ",", "ic", ")", "\n", "nc", "=", "tf", ".", "to_float", "(", "tf", ".", "shape", "(", "Xc", ")", "[", "0", "]", ")", "\n", "\n", "# Marginal vector for control.", "\n", "b", "=", "tf", ".", "concat", "(", "[", "(", "1", "-", "p", ")", "*", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "tf", ".", "where", "(", "tf", ".", "equal", "(", "t", ",", "0", ")", ")", "[", ":", ",", "0", ":", "1", "]", ")", ")", "/", "nc", ",", "p", "*", "tf", ".", "ones", "(", "(", "1", ",", "1", ")", ")", "]", ",", "0", ")", "\n", "\n", "# Gather the treatment distributions.", "\n", "total_D", "=", "tf", ".", "zeros", "(", "(", "1", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_treatments", ")", ":", "\n", "        ", "it", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "t", ",", "i", ")", ")", "[", ":", ",", "0", "]", "\n", "is_empty", "=", "tf", ".", "equal", "(", "tf", ".", "size", "(", "it", ")", ",", "0", ")", "\n", "\n", "D", "=", "tf", ".", "cond", "(", "\n", "is_empty", ",", "\n", "lambda", ":", "tf", ".", "zeros", "(", "(", "1", ",", ")", ")", ",", "\n", "lambda", ":", "calculate_distance", "(", "i", ",", "it", ",", "X", ",", "Xc", ",", "nc", ",", "b", ",", "t", ",", "p", ",", "lam", ",", "its", ",", "sq", ",", "backpropT", ")", "\n", ")", "\n", "total_D", "+=", "D", "\n", "\n", "", "return", "total_D", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.wasserstein": [[120, 132], ["tensorflow.equal", "tensorflow.cond", "tensorflow.where", "tensorflow.size", "tensorflow.equal", "tensorflow.zeros", "distributions.calculate_distances"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.calculate_distances"], ["", "def", "wasserstein", "(", "X", ",", "t", ",", "p", "=", "0.5", ",", "lam", "=", "10", ",", "its", "=", "10", ",", "sq", "=", "False", ",", "backpropT", "=", "True", ",", "num_treatments", "=", "2", ")", ":", "\n", "    ", "\"\"\" Returns the Wasserstein distance between treatment groups \"\"\"", "\n", "\n", "# Gather the control distribution.", "\n", "ic", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "t", ",", "0", ")", ")", "[", ":", ",", "0", "]", "\n", "is_empty", "=", "tf", ".", "equal", "(", "tf", ".", "size", "(", "ic", ")", ",", "0", ")", "\n", "total_D", "=", "tf", ".", "cond", "(", "\n", "is_empty", ",", "\n", "lambda", ":", "tf", ".", "zeros", "(", "(", "1", ",", ")", ")", ",", "\n", "lambda", ":", "calculate_distances", "(", "X", ",", "t", ",", "ic", ",", "p", ",", "lam", ",", "its", ",", "sq", ",", "backpropT", ",", "num_treatments", ")", "\n", ")", "\n", "return", "total_D", "[", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.pehe_loss.pdist2": [[22, 30], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.matmul", "tensorflow.square", "tensorflow.square", "tensorflow.transpose", "tensorflow.transpose"], "function", ["None"], ["def", "pdist2", "(", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Computes the squared Euclidean distance between all pairs x in X, y in Y \"\"\"", "\n", "C", "=", "-", "2", "*", "tf", ".", "matmul", "(", "X", ",", "tf", ".", "transpose", "(", "Y", ")", ")", "\n", "nx", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "X", ")", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "ny", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "Y", ")", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "D", "=", "(", "C", "+", "tf", ".", "transpose", "(", "ny", ")", ")", "+", "nx", "\n", "\n", "return", "tf", ".", "sqrt", "(", "D", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.pehe_loss.cf_nn": [[33, 46], ["tensorflow.gather", "tensorflow.gather", "pehe_loss.pdist2", "tensorflow.gather", "tensorflow.gather", "tensorflow.where", "tensorflow.where", "tensorflow.argmin", "tensorflow.argmin", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.equal", "tensorflow.equal"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.pdist2"], ["", "def", "cf_nn", "(", "x", ",", "t", ")", ":", "\n", "    ", "It", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "t", ",", "1", ")", ")", "[", ":", ",", "0", "]", "\n", "Ic", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "t", ",", "0", ")", ")", "[", ":", ",", "0", "]", "\n", "\n", "x_c", "=", "tf", ".", "gather", "(", "x", ",", "Ic", ")", "\n", "x_t", "=", "tf", ".", "gather", "(", "x", ",", "It", ")", "\n", "\n", "D", "=", "pdist2", "(", "x_c", ",", "x_t", ")", "\n", "\n", "nn_t", "=", "tf", ".", "gather", "(", "Ic", ",", "tf", ".", "argmin", "(", "D", ",", "0", ")", ")", "\n", "nn_c", "=", "tf", ".", "gather", "(", "It", ",", "tf", ".", "argmin", "(", "D", ",", "1", ")", ")", "\n", "\n", "return", "tf", ".", "stop_gradient", "(", "nn_t", ")", ",", "tf", ".", "stop_gradient", "(", "nn_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.pehe_loss.pehe_nn": [[49, 65], ["tensorflow.sqrt", "pehe_loss.cf_nn", "tensorflow.where", "tensorflow.where", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.reduce_mean", "tensorflow.equal", "tensorflow.equal", "tensorflow.gather", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.cf_nn"], ["", "def", "pehe_nn", "(", "yf_p", ",", "ycf_p", ",", "y", ",", "x", ",", "t", ",", "nn_t", "=", "None", ",", "nn_c", "=", "None", ")", ":", "\n", "    ", "if", "nn_t", "is", "None", "or", "nn_c", "is", "None", ":", "\n", "        ", "nn_t", ",", "nn_c", "=", "cf_nn", "(", "x", ",", "t", ")", "\n", "\n", "", "It", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "t", ",", "1", ")", ")", "[", ":", ",", "0", "]", "\n", "Ic", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "t", ",", "0", ")", ")", "[", ":", ",", "0", "]", "\n", "\n", "ycf_t", "=", "1.0", "*", "tf", ".", "gather", "(", "y", ",", "nn_t", ")", "\n", "eff_nn_t", "=", "ycf_t", "-", "1.0", "*", "tf", ".", "gather", "(", "y", ",", "It", ")", "\n", "eff_pred_t", "=", "tf", ".", "gather", "(", "ycf_p", ",", "It", ")", "-", "tf", ".", "gather", "(", "yf_p", ",", "It", ")", "\n", "\n", "eff_pred", "=", "eff_pred_t", "\n", "eff_nn", "=", "eff_nn_t", "\n", "\n", "pehe_nn", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "eff_pred", "-", "eff_nn", ")", ")", ")", "\n", "return", "pehe_nn", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.pehe_loss.pehe_loss": [[67, 106], ["range", "range", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.gather", "tensorflow.concat", "tensorflow.gather", "tensorflow.concat", "pehe_loss.pehe_nn", "tensorflow.where", "tensorflow.where", "tensorflow.concat", "tensorflow.concat", "tensorflow.equal", "tensorflow.equal", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.zeros", "tensorflow.ones", "tensorflow.ones", "tensorflow.ones", "tensorflow.range", "tensorflow.ones", "tensorflow.ones", "tensorflow.range", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.pehe_nn"], ["", "def", "pehe_loss", "(", "y_true", ",", "y_pred", ",", "t", ",", "x", ",", "num_treatments", ")", ":", "\n", "    ", "total", ",", "num_elements", "=", "0", ",", "0.", "\n", "for", "i", "in", "range", "(", "num_treatments", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_treatments", ")", ":", "\n", "            ", "if", "j", ">=", "i", ":", "\n", "                ", "continue", "\n", "\n", "", "t1_indices", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "t", ",", "i", ")", ")", "[", ":", ",", "0", "]", "\n", "t2_indices", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "t", ",", "j", ")", ")", "[", ":", ",", "0", "]", "\n", "\n", "these_x", "=", "tf", ".", "concat", "(", "[", "tf", ".", "gather", "(", "x", ",", "t1_indices", ")", ",", "tf", ".", "gather", "(", "x", ",", "t2_indices", ")", "]", ",", "axis", "=", "0", ")", "\n", "y_pred_these_treatments", "=", "tf", ".", "concat", "(", "[", "tf", ".", "gather", "(", "y_pred", ",", "t1_indices", ")", ",", "\n", "tf", ".", "gather", "(", "y_pred", ",", "t2_indices", ")", "]", ",", "axis", "=", "0", ")", "\n", "y_true_these_treatments", "=", "tf", ".", "concat", "(", "[", "tf", ".", "gather", "(", "y_true", ",", "t1_indices", ")", ",", "\n", "tf", ".", "gather", "(", "y_true", ",", "t2_indices", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "these_treatments", "=", "tf", ".", "concat", "(", "[", "tf", ".", "ones", "(", "(", "tf", ".", "shape", "(", "t1_indices", ")", "[", "0", "]", ",", ")", ",", "dtype", "=", "\"int32\"", ")", "*", "i", ",", "\n", "tf", ".", "ones", "(", "(", "tf", ".", "shape", "(", "t2_indices", ")", "[", "0", "]", ",", ")", ",", "dtype", "=", "\"int32\"", ")", "*", "j", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "these_y_pred_f", "=", "tf", ".", "gather", "(", "y_pred_these_treatments", ",", "\n", "tf", ".", "concat", "(", "[", "tf", ".", "range", "(", "tf", ".", "shape", "(", "y_pred_these_treatments", ")", "[", "0", "]", ")", ",", "\n", "these_treatments", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "these_y_true_f", "=", "y_true_these_treatments", "\n", "\n", "inverse_treatments", "=", "tf", ".", "concat", "(", "[", "tf", ".", "ones", "(", "(", "tf", ".", "shape", "(", "t1_indices", ")", "[", "0", "]", ",", ")", ",", "dtype", "=", "\"int32\"", ")", "*", "j", ",", "\n", "tf", ".", "ones", "(", "(", "tf", ".", "shape", "(", "t2_indices", ")", "[", "0", "]", ",", ")", ",", "dtype", "=", "\"int32\"", ")", "*", "i", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "these_y_pred_cf", "=", "tf", ".", "gather", "(", "y_pred_these_treatments", ",", "\n", "tf", ".", "concat", "(", "[", "tf", ".", "range", "(", "tf", ".", "shape", "(", "y_pred_these_treatments", ")", "[", "0", "]", ")", ",", "\n", "inverse_treatments", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "these_treatments", "=", "tf", ".", "concat", "(", "[", "tf", ".", "zeros", "(", "(", "tf", ".", "shape", "(", "t1_indices", ")", "[", "0", "]", ",", ")", ",", "dtype", "=", "\"int32\"", ")", ",", "\n", "tf", ".", "ones", "(", "(", "tf", ".", "shape", "(", "t2_indices", ")", "[", "0", "]", ",", ")", ",", "dtype", "=", "\"int32\"", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "total", "+=", "pehe_nn", "(", "these_y_pred_f", ",", "these_y_pred_cf", ",", "these_y_true_f", ",", "these_x", ",", "these_treatments", ")", "\n", "num_elements", "+=", "1.", "\n", "", "", "return", "total", "/", "num_elements", "\n", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.make_y": [[31, 40], ["numpy.zeros"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "make_y", "(", "y_f", ",", "y_cf", ",", "t", ")", ":", "\n", "        ", "y", "=", "np", ".", "zeros", "(", "(", "y_f", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "y", "[", "t", "==", "0", ",", "0", "]", "=", "y_f", "[", "t", "==", "0", "]", "\n", "y", "[", "t", "==", "0", ",", "1", "]", "=", "y_cf", "[", "t", "==", "0", "]", "\n", "y", "[", "t", "==", "1", ",", "1", "]", "=", "y_f", "[", "t", "==", "1", "]", "\n", "y", "[", "t", "==", "1", ",", "0", "]", "=", "y_cf", "[", "t", "==", "1", "]", "\n", "y0", ",", "y1", "=", "y", "[", ":", ",", "0", "]", ",", "y", "[", ":", ",", "1", "]", "\n", "return", "y0", ",", "y1", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_pehe": [[41, 71], ["model_eval.ModelEvaluation.make_y", "model_eval.ModelEvaluation.pehe_nn", "numpy.sqrt", "numpy.abs", "range", "numpy.mean", "pehe_nn_k.append", "print", "numpy.square", "numpy.mean", "numpy.mean", "model_eval.ModelEvaluation.pehe_nn"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.make_y", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.pehe_nn", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.pehe_nn"], ["", "@", "staticmethod", "\n", "def", "calculate_pehe", "(", "y_true_f", ",", "y_pred_f", ",", "y_true_cf", ",", "y_pred_cf", ",", "t", ",", "mu0", ",", "mu1", ",", "x", ",", "\n", "set_name", "=", "\"test\"", ",", "with_print", "=", "True", ",", "prefix", "=", "\"\"", ",", "num_neighbours", "=", "15", ",", "reject_outliers", "=", "True", ")", ":", "\n", "        ", "y0", ",", "y1", "=", "ModelEvaluation", ".", "make_y", "(", "y_pred_f", ",", "y_pred_cf", ",", "t", ")", "\n", "\n", "eff_pred", "=", "y1", "-", "y0", "\n", "eff_true", "=", "mu1", "-", "mu0", "\n", "\n", "pehe_nn", "=", "ModelEvaluation", ".", "pehe_nn", "(", "y1", ",", "y0", ",", "y_true_f", ",", "x", ",", "t", ",", "\n", "k", "=", "num_neighbours", ",", "reject_outliers", "=", "reject_outliers", ")", "\n", "pehe_score", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "square", "(", "eff_pred", "-", "eff_true", ")", ")", ")", "\n", "ate", "=", "np", ".", "abs", "(", "np", ".", "mean", "(", "eff_pred", ")", "-", "np", ".", "mean", "(", "eff_true", ")", ")", "\n", "\n", "pehe_nn_k", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "1", ",", "num_neighbours", "+", "1", ")", ":", "\n", "            ", "pehe_nn_k", ".", "append", "(", "ModelEvaluation", ".", "pehe_nn", "(", "y1", ",", "y0", ",", "y_true_f", ",", "x", ",", "t", ",", "\n", "k", "=", "k", ",", "\n", "reject_outliers", "=", "False", ")", ")", "\n", "\n", "", "if", "with_print", ":", "\n", "            ", "print", "(", "\"INFO: Performance on\"", ",", "set_name", ",", "\n", "\"RPEHE =\"", ",", "pehe_score", ",", "\n", "\"PEHE_NN =\"", ",", "pehe_nn", ",", "\n", "\"ATE =\"", ",", "ate", ",", "\n", "\"PEHE_NN_k =\"", ",", "pehe_nn_k", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "", "return", "{", "\n", "prefix", "+", "\"pehe\"", ":", "pehe_score", ",", "\n", "prefix", "+", "\"pehe_nn\"", ":", "pehe_nn", ",", "\n", "prefix", "+", "\"ate\"", ":", "ate", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_est_pehe": [[73, 134], ["model_eval.ModelEvaluation.make_y", "model_eval.ModelEvaluation.make_y", "model_eval.ModelEvaluation.pehe_nn", "numpy.sqrt", "numpy.abs", "range", "numpy.mean", "pehe_nn_k.append", "numpy.mean", "numpy.abs", "model_eval.ModelEvaluation.policy_val", "numpy.square", "numpy.mean", "numpy.mean", "model_eval.ModelEvaluation.pehe_nn", "numpy.mean", "numpy.mean", "print", "print"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.make_y", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.make_y", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.pehe_nn", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.policy_val", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.pehe_nn"], ["", "@", "staticmethod", "\n", "def", "calculate_est_pehe", "(", "y_true_f", ",", "y_pred_f", ",", "y_true_cf", ",", "y_pred_cf", ",", "t", ",", "x", ",", "e", ",", "\n", "set_name", "=", "\"test\"", ",", "with_print", "=", "True", ",", "prefix", "=", "\"\"", ",", "num_neighbours", "=", "1", ",", "reject_outliers", "=", "False", ",", "\n", "is_jobs", "=", "False", ")", ":", "\n", "        ", "y0_p", ",", "y1_p", "=", "ModelEvaluation", ".", "make_y", "(", "y_pred_f", ",", "y_pred_cf", ",", "t", ")", "\n", "y0_t", ",", "y1_t", "=", "ModelEvaluation", ".", "make_y", "(", "y_true_f", ",", "y_true_cf", ",", "t", ")", "\n", "\n", "eff_pred", "=", "y1_p", "-", "y0_p", "\n", "eff_true", "=", "y1_t", "-", "y0_t", "\n", "\n", "pehe_nn", "=", "ModelEvaluation", ".", "pehe_nn", "(", "y1_p", ",", "y0_p", ",", "y_true_f", ",", "x", ",", "t", ",", "\n", "k", "=", "num_neighbours", ",", "\n", "reject_outliers", "=", "reject_outliers", ")", "\n", "pehe_score", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "square", "(", "eff_pred", "-", "eff_true", ")", ")", ")", "\n", "ate", "=", "np", ".", "abs", "(", "np", ".", "mean", "(", "eff_pred", ")", "-", "np", ".", "mean", "(", "eff_true", ")", ")", "\n", "\n", "pehe_nn_k", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "1", ",", "num_neighbours", "+", "1", ")", ":", "\n", "            ", "pehe_nn_k", ".", "append", "(", "ModelEvaluation", ".", "pehe_nn", "(", "y1_p", ",", "y0_p", ",", "y_true_f", ",", "x", ",", "t", ",", "\n", "k", "=", "k", ",", "\n", "reject_outliers", "=", "False", ")", ")", "\n", "\n", "", "if", "is_jobs", ":", "\n", "            ", "att", "=", "np", ".", "mean", "(", "y_true_f", "[", "t", ">", "0", "]", ")", "-", "np", ".", "mean", "(", "y_true_f", "[", "(", "1", "-", "t", "+", "e", ")", ">", "1", "]", ")", "\n", "att_pred", "=", "np", ".", "mean", "(", "eff_pred", "[", "(", "t", "+", "e", ")", ">", "1", "]", ")", "\n", "bias_att", "=", "np", ".", "abs", "(", "att_pred", "-", "att", ")", "\n", "policy_value", "=", "ModelEvaluation", ".", "policy_val", "(", "t", "[", "e", ">", "0", "]", ",", "y_true_f", "[", "e", ">", "0", "]", ",", "eff_pred", "[", "e", ">", "0", "]", ")", "\n", "policy_risk", "=", "1.0", "-", "policy_value", "\n", "\n", "if", "with_print", ":", "\n", "                ", "print", "(", "\"INFO: Performance on\"", ",", "set_name", ",", "\n", "\"RPEHE =\"", ",", "pehe_score", ",", "\n", "\"PEHE_NN =\"", ",", "pehe_nn", ",", "\n", "\"PEHE_NN_k_1 =\"", ",", "pehe_nn_k", ",", "\n", "\"ATE =\"", ",", "ate", ",", "\n", "\"ATT =\"", ",", "att", ",", "\n", "\"ATT_pred =\"", ",", "att_pred", ",", "\n", "\"ATT_error =\"", ",", "bias_att", ",", "\n", "\"R_POL =\"", ",", "policy_risk", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "", "return", "{", "\n", "prefix", "+", "\"pehe\"", ":", "pehe_score", ",", "\n", "prefix", "+", "\"pehe_nn\"", ":", "pehe_nn", ",", "\n", "prefix", "+", "\"ate\"", ":", "ate", ",", "\n", "prefix", "+", "\"att\"", ":", "att", ",", "\n", "prefix", "+", "\"att_pred\"", ":", "att_pred", ",", "\n", "prefix", "+", "\"att_error\"", ":", "bias_att", ",", "\n", "prefix", "+", "\"policy_risk\"", ":", "policy_risk", "\n", "}", "\n", "", "else", ":", "\n", "            ", "if", "with_print", ":", "\n", "                ", "print", "(", "\"INFO: Performance on\"", ",", "set_name", ",", "\n", "\"RPEHE =\"", ",", "pehe_score", ",", "\n", "\"PEHE_NN =\"", ",", "pehe_nn", ",", "\n", "\"PEHE_NN_k_1 =\"", ",", "pehe_nn_k", ",", "\n", "\"ATE =\"", ",", "ate", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "", "return", "{", "\n", "prefix", "+", "\"pehe\"", ":", "pehe_score", ",", "\n", "prefix", "+", "\"pehe_nn\"", ":", "pehe_nn", ",", "\n", "prefix", "+", "\"ate\"", ":", "ate", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_binary": [[136, 201], ["sklearn.metrics.roc_curve", "numpy.argmin", "sklearn.metrics.confusion_matrix().ravel", "sklearn.metrics.roc_auc_score", "bisect.bisect_right", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc", "sklearn.metrics.r2_score", "sklearn.metrics.f1_score", "numpy.linalg.norm", "print", "print", "print", "sklearn.metrics.confusion_matrix", "float", "float", "float", "float", "sklearn.metrics.accuracy_score", "numpy.mean", "numpy.repeat", "numpy.stack"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "calculate_statistics_binary", "(", "y_true", ",", "y_pred", ",", "set_name", ",", "with_print", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "\n", "# Choose optimal threshold based on closest-to-top-left selection on ROC curve.", "\n", "optimal_threshold_idx", "=", "np", ".", "argmin", "(", "np", ".", "linalg", ".", "norm", "(", "np", ".", "stack", "(", "(", "fpr", ",", "tpr", ")", ")", ".", "T", "-", "\n", "np", ".", "repeat", "(", "[", "[", "0.", ",", "1.", "]", "]", ",", "fpr", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", ")", "\n", "threshold", "=", "thresholds", "[", "optimal_threshold_idx", "]", "\n", "y_pred_thresholded", "=", "(", "y_pred", ">", "threshold", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "tn", ",", "fp", ",", "fn", ",", "tp", "=", "confusion_matrix", "(", "y_true", ",", "y_pred_thresholded", ")", ".", "ravel", "(", ")", "\n", "auc_score", "=", "roc_auc_score", "(", "y_true", ",", "y_pred", ")", "\n", "\n", "sens_at_95spec_idx", "=", "bisect_right", "(", "fpr", ",", "0.05", ")", "\n", "if", "sens_at_95spec_idx", "==", "0", ":", "\n", "# Report 0.0 if specificity goal can not be met.", "\n", "                ", "sens_at_95spec", "=", "0.0", "\n", "", "else", ":", "\n", "                ", "sens_at_95spec", "=", "tpr", "[", "sens_at_95spec_idx", "-", "1", "]", "\n", "\n", "", "if", "auc_score", "<", "0.5", ":", "\n", "                ", "print", "(", "\"INFO: Inverting AUC.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "auc_score", "=", "1.", "-", "auc_score", "\n", "\n", "", "precision", ",", "recall", ",", "_", "=", "precision_recall_curve", "(", "y_true", ",", "y_pred", ")", "\n", "auprc_score", "=", "auc", "(", "recall", ",", "precision", ",", "reorder", "=", "False", ")", "\n", "\n", "r2", "=", "r2_score", "(", "y_true", ",", "y_pred", ")", "\n", "\n", "specificity", "=", "float", "(", "tn", ")", "/", "(", "tn", "+", "fp", ")", "if", "tp", "+", "fp", "!=", "0", "else", "0", "\n", "sensitivity", "=", "float", "(", "tp", ")", "/", "(", "tp", "+", "fn", ")", "if", "tp", "+", "fn", "!=", "0", "else", "0", "\n", "ppv", "=", "float", "(", "tp", ")", "/", "(", "tp", "+", "fp", ")", "if", "tp", "+", "fp", "!=", "0", "else", "0", "\n", "npv", "=", "float", "(", "tn", ")", "/", "(", "tn", "+", "fn", ")", "if", "tn", "+", "fn", "!=", "0", "else", "0", "\n", "\n", "f1_value", "=", "f1_score", "(", "y_true", ",", "y_pred_thresholded", ")", "\n", "\n", "if", "with_print", ":", "\n", "                ", "print", "(", "\"INFO: Performance on\"", ",", "set_name", ",", "\n", "\"AUROC =\"", ",", "auc_score", ",", "\n", "\", with AUPRC =\"", ",", "auprc_score", ",", "\n", "\", with r^2 =\"", ",", "r2", ",", "\n", "\", with accuracy =\"", ",", "accuracy_score", "(", "y_true", ",", "y_pred_thresholded", ")", ",", "\n", "\", with mean =\"", ",", "np", ".", "mean", "(", "y_true", ")", ",", "\n", "\", with f1 =\"", ",", "f1_value", ",", "\n", "\", with specificity =\"", ",", "specificity", ",", "\n", "\", with sensitivity =\"", ",", "sensitivity", ",", "\n", "\", with sens@95spec =\"", ",", "sens_at_95spec", ",", "\n", "\", with PPV =\"", ",", "ppv", ",", "\n", "\", with NPV =\"", ",", "npv", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "", "return", "{", "\n", "\"auroc\"", ":", "auc_score", ",", "\n", "\"auprc\"", ":", "auprc_score", ",", "\n", "\"f1\"", ":", "f1_value", ",", "\n", "\"sens@95spec\"", ":", "sens_at_95spec", ",", "\n", "\"ppv\"", ":", "ppv", ",", "\n", "\"npv\"", ":", "npv", ",", "\n", "\"specificity\"", ":", "specificity", ",", "\n", "\"sensitivity\"", ":", "sensitivity", "\n", "}", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"WARN: Score calculation failed. Most likely, there was only one class present in y_true.\"", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_multiclass": [[202, 243], ["y_true.any", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "sklearn.metrics.r2_score", "to_categorical", "sklearn.metrics.f1_score", "print", "numpy.argmax", "print", "print"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "calculate_statistics_multiclass", "(", "y_true", ",", "y_pred", ",", "set_name", ",", "with_print", ")", ":", "\n", "        ", "from", "keras", ".", "utils", "import", "to_categorical", "\n", "\n", "# Remove columns where all y_true are 0 - this would cause an error in calculating the statistics.", "\n", "present_columns", "=", "y_true", ".", "any", "(", "axis", "=", "0", ")", "\n", "y_true", "=", "y_true", "[", ":", ",", "present_columns", "]", "\n", "y_pred", "=", "y_pred", "[", ":", ",", "present_columns", "]", "\n", "\n", "# TODO: Check for all columns being not present.", "\n", "\n", "try", ":", "\n", "            ", "auc_score", "=", "roc_auc_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "\"weighted\"", ")", "\n", "\n", "if", "auc_score", "<", "0.5", ":", "\n", "                ", "print", "(", "\"INFO: Inverting AUC.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "auc_score", "=", "1.", "-", "auc_score", "\n", "\n", "", "auprc_score", "=", "average_precision_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "\"weighted\"", ")", "\n", "r2", "=", "r2_score", "(", "y_true", ",", "y_pred", ",", "multioutput", "=", "\"variance_weighted\"", ")", "\n", "\n", "y_thresh", "=", "to_categorical", "(", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", ",", "num_classes", "=", "y_pred", ".", "shape", "[", "-", "1", "]", ")", "\n", "f1", "=", "f1_score", "(", "y_true", ",", "y_thresh", ",", "average", "=", "\"weighted\"", ")", "\n", "\n", "if", "with_print", ":", "\n", "                ", "print", "(", "\"INFO: Performance on\"", ",", "set_name", ",", "\n", "\"AUROC (weighted) =\"", ",", "auc_score", ",", "\n", "\", with AUPRC (weighted) =\"", ",", "auprc_score", ",", "\n", "\", with r^2 (weighted) =\"", ",", "r2", ",", "\n", "\", with f1 (weighted) =\"", ",", "f1", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "", "return", "{", "\n", "\"auroc\"", ":", "auc_score", ",", "\n", "\"auprc\"", ":", "auprc_score", ",", "\n", "\"f1\"", ":", "f1", ",", "\n", "\"r2\"", ":", "r2", ",", "\n", "}", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"WARN: Score calculation failed. Most likely, there was only one class present in y_true.\"", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.policy_val": [[244, 267], ["numpy.any", "numpy.mean", "numpy.isnan", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.mean"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "policy_val", "(", "t", ",", "yf", ",", "eff_pred", ")", ":", "\n", "# SOURCE: https://github.com/clinicalml/cfrnet, MIT-License", "\n", "        ", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "eff_pred", ")", ")", ":", "\n", "            ", "return", "np", ".", "nan", ",", "np", ".", "nan", "\n", "\n", "", "policy", "=", "eff_pred", ">", "0", "\n", "treat_overlap", "=", "(", "policy", "==", "t", ")", "*", "(", "t", ">", "0", ")", "\n", "control_overlap", "=", "(", "policy", "==", "t", ")", "*", "(", "t", "<", "1", ")", "\n", "\n", "if", "np", ".", "sum", "(", "treat_overlap", ")", "==", "0", ":", "\n", "            ", "treat_value", "=", "0", "\n", "", "else", ":", "\n", "            ", "treat_value", "=", "np", ".", "mean", "(", "yf", "[", "treat_overlap", "]", ")", "\n", "\n", "", "if", "np", ".", "sum", "(", "control_overlap", ")", "==", "0", ":", "\n", "            ", "control_value", "=", "0", "\n", "", "else", ":", "\n", "            ", "control_value", "=", "np", ".", "mean", "(", "yf", "[", "control_overlap", "]", ")", "\n", "\n", "", "pit", "=", "np", ".", "mean", "(", "policy", ")", "\n", "policy_value", "=", "pit", "*", "treat_value", "+", "(", "1", "-", "pit", ")", "*", "control_value", "\n", "return", "policy_value", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.pdist2": [[268, 278], ["numpy.sum", "numpy.sum", "numpy.sqrt", "X.dot", "numpy.square", "numpy.square"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "pdist2", "(", "X", ",", "Y", ")", ":", "\n", "# SOURCE: https://github.com/clinicalml/cfrnet, MIT-License", "\n", "        ", "\"\"\" Computes the squared Euclidean distance between all pairs x in X, y in Y \"\"\"", "\n", "C", "=", "-", "2", "*", "X", ".", "dot", "(", "Y", ".", "T", ")", "\n", "nx", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "X", ")", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "ny", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "Y", ")", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "D", "=", "(", "C", "+", "ny", ".", "T", ")", "+", "nx", "\n", "\n", "return", "np", ".", "sqrt", "(", "D", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.cf_nn": [[279, 299], ["model_eval.ModelEvaluation.pdist2", "numpy.argsort", "numpy.argsort", "range", "numpy.array", "numpy.array", "nn_t.append", "nn_c.append", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.pdist2"], ["", "@", "staticmethod", "\n", "def", "cf_nn", "(", "x", ",", "t", ",", "k", "=", "5", ")", ":", "\n", "# SOURCE: https://github.com/clinicalml/cfrnet, MIT-License", "\n", "        ", "It", "=", "np", ".", "array", "(", "np", ".", "where", "(", "t", "==", "1", ")", ")", "[", "0", ",", ":", "]", "\n", "Ic", "=", "np", ".", "array", "(", "np", ".", "where", "(", "t", "==", "0", ")", ")", "[", "0", ",", ":", "]", "\n", "\n", "x_c", "=", "x", "[", "Ic", ",", ":", "]", "\n", "x_t", "=", "x", "[", "It", ",", ":", "]", "\n", "\n", "D", "=", "ModelEvaluation", ".", "pdist2", "(", "x_c", ",", "x_t", ")", "\n", "\n", "sorted_t", "=", "np", ".", "argsort", "(", "D", ",", "0", ")", "\n", "sorted_c", "=", "np", ".", "argsort", "(", "D", ",", "1", ")", "\n", "\n", "nn_t", ",", "nn_c", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "nn_t", ".", "append", "(", "Ic", "[", "sorted_t", "[", "i", "]", "]", ")", "\n", "nn_c", ".", "append", "(", "It", "[", "sorted_c", "[", ":", ",", "i", "]", "]", ")", "\n", "\n", "", "return", "nn_t", ",", "nn_c", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.pehe_nn": [[300, 329], ["range", "numpy.mean", "numpy.sqrt", "numpy.array", "numpy.array", "min", "model_eval.ModelEvaluation.cf_nn", "len", "numpy.copy", "model_eval.ModelEvaluation.make_y", "numpy.mean.append", "model_eval.ModelEvaluation.pehe_nn.do_reject_outliers"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.cf_nn", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.make_y"], ["", "@", "staticmethod", "\n", "def", "pehe_nn", "(", "y1", ",", "y0", ",", "y", ",", "x", ",", "t", ",", "k", "=", "5", ",", "nn_t", "=", "None", ",", "nn_c", "=", "None", ",", "reject_outliers", "=", "True", ")", ":", "\n", "# SOURCE: https://github.com/clinicalml/cfrnet, MIT-License", "\n", "        ", "It", "=", "np", ".", "array", "(", "np", ".", "where", "(", "t", "==", "1", ")", ")", "[", "0", ",", ":", "]", "\n", "Ic", "=", "np", ".", "array", "(", "np", ".", "where", "(", "t", "==", "0", ")", ")", "[", "0", ",", ":", "]", "\n", "\n", "if", "nn_t", "is", "None", "or", "nn_c", "is", "None", ":", "\n", "            ", "k", "=", "min", "(", "len", "(", "It", ")", ",", "len", "(", "Ic", ")", ",", "k", ")", "\n", "nn_t", ",", "nn_c", "=", "ModelEvaluation", ".", "cf_nn", "(", "x", ",", "t", ",", "k", ")", "\n", "\n", "", "def", "do_reject_outliers", "(", "data", ",", "m", "=", "3", ")", ":", "\n", "            ", "return", "data", "[", "abs", "(", "data", "-", "np", ".", "mean", "(", "data", ")", ")", "<", "m", "*", "np", ".", "std", "(", "data", ")", "]", "\n", "\n", "", "eff_nn", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "nn_t", ")", ")", ":", "\n", "            ", "y_cf_approx", "=", "np", ".", "copy", "(", "y", ")", "\n", "y_cf_approx", "[", "It", "]", "=", "y", "[", "nn_t", "[", "idx", "]", "]", "\n", "y_cf_approx", "[", "Ic", "]", "=", "y", "[", "nn_c", "[", "idx", "]", "]", "\n", "y_m0", ",", "y_m1", "=", "ModelEvaluation", ".", "make_y", "(", "y", ",", "y_cf_approx", ",", "t", ")", "\n", "eff_nn", ".", "append", "(", "y_m1", "-", "y_m0", ")", "\n", "", "eff_nn", "=", "np", ".", "mean", "(", "eff_nn", ",", "axis", "=", "0", ")", "\n", "\n", "eff_pred", "=", "y1", "-", "y0", "\n", "if", "reject_outliers", ":", "\n", "            ", "delta", "=", "do_reject_outliers", "(", "eff_pred", "-", "eff_nn", ")", "\n", "", "else", ":", "\n", "            ", "delta", "=", "eff_pred", "-", "eff_nn", "\n", "", "pehe_nn", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "square", "(", "delta", ")", ")", ")", "\n", "return", "pehe_nn", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_counterfactual": [[330, 342], ["numpy.mean", "numpy.sqrt", "numpy.square", "print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "calculate_statistics_counterfactual", "(", "y_true", ",", "y_pred", ",", "set_name", ",", "with_print", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "mse_score", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "y_true", "-", "y_pred", ")", ")", "\n", "rmse_score", "=", "np", ".", "sqrt", "(", "mse_score", ")", "\n", "if", "with_print", ":", "\n", "            ", "print", "(", "\"INFO: Performance on\"", ",", "set_name", ",", "\n", "\"MSE =\"", ",", "mse_score", ",", "\n", "\"RMSE =\"", ",", "rmse_score", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "", "return", "{", "\n", "prefix", "+", "\"mse\"", ":", "mse_score", ",", "\n", "prefix", "+", "\"rmse\"", ":", "rmse_score", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.collect_all_outputs": [[344, 356], ["range", "next", "all_outputs.append", "len", "model.predict"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.predict"], ["", "@", "staticmethod", "\n", "def", "collect_all_outputs", "(", "model", ",", "generator", ",", "num_steps", ")", ":", "\n", "        ", "all_outputs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "generator_outputs", "=", "next", "(", "generator", ")", "\n", "if", "len", "(", "generator_outputs", ")", "==", "3", ":", "\n", "                ", "batch_input", ",", "labels_batch", ",", "sample_weight", "=", "generator_outputs", "\n", "", "else", ":", "\n", "                ", "batch_input", ",", "labels_batch", "=", "generator_outputs", "\n", "\n", "", "all_outputs", ".", "append", "(", "(", "model", ".", "predict", "(", "batch_input", ")", ",", "labels_batch", ")", ")", "\n", "", "return", "all_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.get_y_from_outputs": [[357, 402], ["hasattr", "range", "numpy.concatenate", "isinstance", "isinstance", "numpy.expand_dims.append", "y_true.reshape.reshape.append", "numpy.array", "numpy.concatenate", "y_true.reshape.reshape.reshape", "numpy.expand_dims.reshape", "numpy.squeeze", "numpy.expand_dims", "isinstance", "isinstance", "len", "isinstance", "isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_y_from_outputs", "(", "model", ",", "all_outputs", ",", "num_steps", ",", "selected_slice", ",", "selected_index", ")", ":", "\n", "        ", "batch_size", ",", "y_pred", ",", "y_true", "=", "0", ",", "[", "]", ",", "[", "]", "\n", "if", "hasattr", "(", "model", ",", "\"output\"", ")", ":", "\n", "            ", "output_dim", "=", "model", ".", "output", "[", "selected_index", "]", ".", "shape", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "output_dim", "=", "1", "\n", "\n", "", "for", "current_step", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "model_outputs", ",", "labels_batch", "=", "all_outputs", "[", "current_step", "]", "\n", "\n", "if", "isinstance", "(", "model_outputs", ",", "list", ")", ":", "\n", "                ", "model_outputs", "=", "model_outputs", "[", "selected_slice", "]", "\n", "\n", "", "if", "isinstance", "(", "labels_batch", ",", "list", ")", ":", "\n", "                ", "labels_batch", "=", "labels_batch", "[", "selected_slice", "]", "\n", "\n", "", "if", "isinstance", "(", "labels_batch", ",", "list", ")", "or", "isinstance", "(", "labels_batch", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "batch_size", "=", "len", "(", "labels_batch", ")", "\n", "", "else", ":", "\n", "                ", "batch_size", "=", "1", "\n", "\n", "", "y_pred", ".", "append", "(", "model_outputs", ")", "\n", "y_true", ".", "append", "(", "labels_batch", ")", "\n", "\n", "", "if", "not", "(", "isinstance", "(", "y_true", "[", "0", "]", ",", "list", ")", "or", "isinstance", "(", "y_true", "[", "0", "]", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "y_true", "=", "np", ".", "array", "(", "y_true", ")", "\n", "", "else", ":", "\n", "            ", "y_true", "=", "np", ".", "concatenate", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "", "y_pred", "=", "np", ".", "concatenate", "(", "y_pred", ",", "axis", "=", "0", ")", "\n", "\n", "if", "output_dim", "!=", "1", ":", "\n", "            ", "y_true", "=", "y_true", ".", "reshape", "(", "(", "-", "1", ",", "output_dim", ")", ")", "\n", "y_pred", "=", "y_pred", ".", "reshape", "(", "(", "-", "1", ",", "output_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "y_pred", "=", "np", ".", "squeeze", "(", "y_pred", ")", "\n", "\n", "", "if", "(", "y_true", ".", "ndim", "==", "2", "and", "y_true", ".", "shape", "[", "-", "1", "]", "==", "1", ")", "and", "(", "y_pred", ".", "ndim", "==", "1", "and", "y_pred", ".", "shape", "[", "0", "]", "==", "y_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "y_pred", "=", "np", ".", "expand_dims", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "assert", "y_true", ".", "shape", "[", "-", "1", "]", "==", "y_pred", ".", "shape", "[", "-", "1", "]", "\n", "assert", "y_true", ".", "shape", "[", "0", "]", "==", "y_pred", ".", "shape", "[", "0", "]", "\n", "assert", "y_true", ".", "shape", "[", "0", "]", "==", "num_steps", "*", "batch_size", "\n", "return", "y_pred", ",", "y_true", ",", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.evaluate": [[403, 419], ["list", "model_eval.ModelEvaluation.collect_all_outputs", "enumerate", "model_eval.ModelEvaluation.get_y_from_outputs", "model_eval.ModelEvaluation.calculate_statistics_binary", "model_eval.ModelEvaluation.calculate_statistics_multiclass", "str", "str"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.collect_all_outputs", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.get_y_from_outputs", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_binary", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_multiclass"], ["", "@", "staticmethod", "\n", "def", "evaluate", "(", "model", ",", "generator", ",", "num_steps", ",", "set_name", "=", "\"Test set\"", ",", "selected_slices", "=", "list", "(", "[", "-", "1", "]", ")", ",", "with_print", "=", "True", ")", ":", "\n", "        ", "all_outputs", "=", "ModelEvaluation", ".", "collect_all_outputs", "(", "model", ",", "generator", ",", "num_steps", ")", "\n", "\n", "for", "i", ",", "selected_slice", "in", "enumerate", "(", "selected_slices", ")", ":", "\n", "            ", "y_pred", ",", "y_true", ",", "output_dim", "=", "ModelEvaluation", ".", "get_y_from_outputs", "(", "model", ",", "all_outputs", ",", "num_steps", ",", "\n", "selected_slice", ",", "i", ")", "\n", "\n", "if", "output_dim", "==", "1", ":", "\n", "# TODO: Switch for regression setting.", "\n", "                ", "score_dict", "=", "ModelEvaluation", ".", "calculate_statistics_binary", "(", "y_true", ",", "y_pred", ",", "\n", "set_name", "+", "str", "(", "i", ")", ",", "with_print", ")", "\n", "", "else", ":", "\n", "                ", "score_dict", "=", "ModelEvaluation", ".", "calculate_statistics_multiclass", "(", "y_true", ",", "y_pred", ",", "\n", "set_name", "+", "str", "(", "i", ")", ",", "with_print", ")", "\n", "", "", "return", "score_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.evaluate_counterfactual": [[420, 597], ["isinstance", "isinstance", "range", "numpy.concatenate", "numpy.concatenate", "model_eval.ModelEvaluation.get_y_from_outputs", "benchmark.get_num_treatments", "range", "model_eval.ModelEvaluation.calculate_statistics_counterfactual", "model_eval.ModelEvaluation.calculate_statistics_counterfactual", "numpy.concatenate", "numpy.concatenate", "model_eval.ModelEvaluation.calculate_statistics_counterfactual", "model_eval.ModelEvaluation.calculate_statistics_counterfactual", "model_eval.ModelEvaluation.calculate_statistics_counterfactual", "benchmark.set_assign_counterfactuals", "next", "isinstance", "range", "numpy.column_stack", "numpy.column_stack", "all_outputs.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "range", "model_eval.ModelEvaluation.calculate_statistics_counterfactual", "range", "list_score_dicts_pehe[].keys", "model_eval.ModelEvaluation.calculate_statistics_counterfactual", "benchmark.set_assign_counterfactuals", "len", "perfect_match.data_access.generator.get_last_id_set", "numpy.array", "numpy.concatenate.append", "numpy.concatenate.append", "benchmark.get_num_treatments", "model.predict", "isinstance", "treatment_outputs.append", "map", "map", "numpy.concatenate", "len", "numpy.arange", "numpy.delete", "model_eval.ModelEvaluation.calculate_pehe", "model_eval.ModelEvaluation.calculate_est_pehe", "range", "numpy.mean", "numpy.std", "print", "benchmark.data_access.get_rows", "perfect_match.data_access.generator.get_last_id_set", "numpy.array", "numpy.concatenate.append", "numpy.where", "len", "numpy.copy", "numpy.where", "len", "len", "numpy.array", "len", "len", "[].tolist", "[].tolist", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "model_eval.ModelEvaluation.calculate_est_pehe", "list_score_dicts_pehe.append", "benchmark.data_access.get_rows", "numpy.not_equal", "numpy.ones_like", "numpy.equal", "numpy.arange", "numpy.arange", "range", "len", "len", "numpy.zeros", "numpy.ones", "len", "len", "len", "numpy.where", "numpy.where", "numpy.ones", "numpy.ones", "numpy.arange", "numpy.arange", "numpy.ones", "numpy.ones", "numpy.arange", "numpy.arange", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.get_y_from_outputs", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_counterfactual", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_counterfactual", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_counterfactual", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_counterfactual", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_counterfactual", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.set_assign_counterfactuals", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_counterfactual", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_statistics_counterfactual", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.set_assign_counterfactuals", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.get_last_id_set", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.predict", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_pehe", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_est_pehe", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_rows", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.get_last_id_set", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.calculate_est_pehe", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_rows"], ["", "@", "staticmethod", "\n", "def", "evaluate_counterfactual", "(", "model", ",", "generator", ",", "num_steps", ",", "benchmark", ",", "set_name", "=", "\"Test set\"", ",", "with_print", "=", "True", ",", "\n", "selected_slice", "=", "-", "1", ",", "stateful_benchmark", "=", "True", ")", ":", "\n", "        ", "if", "stateful_benchmark", ":", "\n", "            ", "benchmark", ".", "set_assign_counterfactuals", "(", "True", ")", "\n", "\n", "", "is_ihdp", "=", "isinstance", "(", "benchmark", ",", "IHDPBenchmark", ")", "\n", "is_jobs", "=", "isinstance", "(", "benchmark", ",", "JobsBenchmark", ")", "\n", "\n", "all_outputs", ",", "all_x", ",", "all_treatments", ",", "all_mu0", ",", "all_mu1", ",", "all_e", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "generator_outputs", "=", "next", "(", "generator", ")", "\n", "if", "len", "(", "generator_outputs", ")", "==", "3", ":", "\n", "                ", "batch_input", ",", "labels_batch", ",", "sample_weight", "=", "generator_outputs", "\n", "", "else", ":", "\n", "                ", "batch_input", ",", "labels_batch", "=", "generator_outputs", "\n", "\n", "", "if", "isinstance", "(", "labels_batch", ",", "list", ")", ":", "\n", "                ", "labels_batch", "=", "labels_batch", "[", "selected_slice", "]", "\n", "\n", "", "if", "is_ihdp", ":", "\n", "                ", "id_set", "=", "get_last_id_set", "(", ")", "\n", "result", "=", "np", ".", "array", "(", "benchmark", ".", "data_access", ".", "get_rows", "(", "id_set", ",", "columns", "=", "\"mu0, mu1\"", ")", ")", "\n", "all_mu0", ".", "append", "(", "result", "[", ":", ",", "0", "]", ")", "\n", "all_mu1", ".", "append", "(", "result", "[", ":", ",", "1", "]", ")", "\n", "", "elif", "is_jobs", ":", "\n", "                ", "id_set", "=", "get_last_id_set", "(", ")", "\n", "result", "=", "np", ".", "array", "(", "benchmark", ".", "data_access", ".", "get_rows", "(", "id_set", ",", "columns", "=", "\"e\"", ")", ")", "\n", "all_e", ".", "append", "(", "result", "[", ":", ",", "0", "]", ")", "\n", "\n", "", "treatment_outputs", "=", "[", "]", "\n", "for", "treatment_idx", "in", "range", "(", "benchmark", ".", "get_num_treatments", "(", ")", ")", ":", "\n", "                ", "not_none_indices", "=", "np", ".", "where", "(", "np", ".", "not_equal", "(", "labels_batch", "[", ":", ",", "treatment_idx", "]", ",", "None", ")", ")", "[", "0", "]", "\n", "if", "len", "(", "not_none_indices", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "original_treatment", "=", "batch_input", "[", "1", "]", "[", "not_none_indices", "]", "\n", "current_batch_input", "=", "[", "np", ".", "copy", "(", "batch_input", "[", "0", "]", ")", ",", "np", ".", "ones_like", "(", "batch_input", "[", "1", "]", ")", "*", "treatment_idx", "]", "\n", "\n", "model_output", "=", "model", ".", "predict", "(", "current_batch_input", ")", "\n", "if", "isinstance", "(", "model_output", ",", "list", ")", ":", "\n", "                    ", "model_output", "=", "model_output", "[", "selected_slice", "]", "\n", "\n", "", "none_indices", "=", "np", ".", "where", "(", "np", ".", "equal", "(", "labels_batch", "[", ":", ",", "treatment_idx", "]", ",", "None", ")", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "none_indices", ")", "!=", "0", ":", "\n", "                    ", "full_length", "=", "len", "(", "labels_batch", ")", "\n", "inferred_labels", "=", "np", ".", "array", "(", "[", "None", "]", "*", "full_length", ")", "\n", "inferred_labels", "[", "not_none_indices", "]", "=", "labels_batch", "[", "not_none_indices", ",", "treatment_idx", "]", "\n", "result", "=", "(", "model_output", ",", "inferred_labels", ")", "\n", "", "else", ":", "\n", "                    ", "result", "=", "(", "model_output", ",", "labels_batch", "[", "not_none_indices", ",", "treatment_idx", "]", ")", "\n", "", "treatment_outputs", ".", "append", "(", "result", ")", "\n", "\n", "", "y_pred", "=", "np", ".", "column_stack", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "treatment_outputs", ")", ")", "\n", "y_true", "=", "np", ".", "column_stack", "(", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "treatment_outputs", ")", ")", "\n", "\n", "all_outputs", ".", "append", "(", "(", "y_pred", ",", "y_true", ")", ")", "\n", "all_x", ".", "append", "(", "batch_input", "[", "0", "]", ")", "\n", "all_treatments", ".", "append", "(", "batch_input", "[", "1", "]", ")", "\n", "\n", "", "all_x", "=", "np", ".", "concatenate", "(", "all_x", ",", "axis", "=", "0", ")", "\n", "all_treatments", "=", "np", ".", "concatenate", "(", "all_treatments", ",", "axis", "=", "0", ")", "\n", "\n", "if", "is_ihdp", ":", "\n", "            ", "all_mu0", "=", "np", ".", "concatenate", "(", "all_mu0", ",", "axis", "=", "0", ")", "\n", "all_mu1", "=", "np", ".", "concatenate", "(", "all_mu1", ",", "axis", "=", "0", ")", "\n", "", "elif", "is_jobs", ":", "\n", "            ", "all_e", "=", "np", ".", "concatenate", "(", "all_e", ",", "axis", "=", "0", ")", "\n", "\n", "", "y_pred", ",", "y_true", ",", "_", "=", "ModelEvaluation", ".", "get_y_from_outputs", "(", "model", ",", "all_outputs", ",", "num_steps", ",", "\n", "selected_slice", "=", "-", "1", ",", "selected_index", "=", "0", ")", "\n", "\n", "y_pred_f", ",", "y_true_f", "=", "y_pred", "[", "np", ".", "arange", "(", "len", "(", "y_pred", ")", ")", ",", "all_treatments", "]", ",", "y_true", "[", "np", ".", "arange", "(", "len", "(", "y_true", ")", ")", ",", "all_treatments", "]", "\n", "\n", "num_treatments", "=", "benchmark", ".", "get_num_treatments", "(", ")", "\n", "y_pred_cf", ",", "y_true_cf", "=", "np", ".", "zeros", "(", "(", "len", "(", "y_pred_f", ")", "*", "(", "num_treatments", "-", "1", ")", ")", ")", ",", "np", ".", "zeros", "(", "(", "len", "(", "y_pred_f", ")", "*", "(", "num_treatments", "-", "1", ")", ")", ")", "\n", "\n", "for", "treatment", "in", "range", "(", "num_treatments", "-", "1", ")", ":", "\n", "            ", "for", "idx", "in", "range", "(", "len", "(", "y_pred_f", ")", ")", ":", "\n", "                ", "cf_indices", "=", "np", ".", "arange", "(", "num_treatments", ")", "\n", "cf_indices", "=", "np", ".", "delete", "(", "cf_indices", ",", "all_treatments", "[", "idx", "]", ")", "\n", "y_pred_cf", "[", "idx", "+", "len", "(", "y_pred_f", ")", "*", "treatment", "]", "=", "y_pred", "[", "idx", ",", "cf_indices", "[", "treatment", "]", "]", "\n", "y_true_cf", "[", "idx", "+", "len", "(", "y_pred_f", ")", "*", "treatment", "]", "=", "y_true", "[", "idx", ",", "cf_indices", "[", "treatment", "]", "]", "\n", "\n", "", "", "score_dict_f", "=", "ModelEvaluation", ".", "calculate_statistics_counterfactual", "(", "y_true_f", ",", "y_pred_f", ",", "\n", "set_name", "+", "\"_f\"", ",", "with_print", ",", "prefix", "=", "\"f_\"", ")", "\n", "score_dict_cf", "=", "ModelEvaluation", ".", "calculate_statistics_counterfactual", "(", "y_true_cf", ",", "y_pred_cf", ",", "\n", "set_name", "+", "\"_cf\"", ",", "with_print", ",", "prefix", "=", "\"cf_\"", ")", "\n", "\n", "y_true_w", "=", "np", ".", "concatenate", "(", "[", "y_true_f", ",", "y_true_cf", "]", ",", "axis", "=", "0", ")", "\n", "y_pred_w", "=", "np", ".", "concatenate", "(", "[", "y_pred_f", ",", "y_pred_cf", "]", ",", "axis", "=", "0", ")", "\n", "score_dict_w", "=", "ModelEvaluation", ".", "calculate_statistics_counterfactual", "(", "y_true_w", ",", "\n", "y_pred_w", ",", "\n", "set_name", "+", "\"_w\"", ",", "with_print", ",", "prefix", "=", "\"w_\"", ")", "\n", "\n", "score_dict_f", ".", "update", "(", "score_dict_cf", ")", "\n", "score_dict_f", ".", "update", "(", "score_dict_w", ")", "\n", "\n", "if", "num_treatments", "==", "2", ":", "\n", "            ", "if", "is_ihdp", ":", "\n", "                ", "score_dict_pehe", "=", "ModelEvaluation", ".", "calculate_pehe", "(", "y_true_f", ",", "y_pred_f", ",", "y_true_cf", ",", "y_pred_cf", ",", "\n", "all_treatments", ",", "\n", "all_mu0", ",", "all_mu1", ",", "all_x", ",", "\n", "set_name", "=", "set_name", "+", "\"_pehe\"", ",", "prefix", "=", "\"cf_\"", ",", "\n", "with_print", "=", "with_print", ")", "\n", "", "else", ":", "\n", "                ", "score_dict_pehe", "=", "ModelEvaluation", ".", "calculate_est_pehe", "(", "y_true_f", ",", "y_pred_f", ",", "y_true_cf", ",", "y_pred_cf", ",", "\n", "all_treatments", ",", "all_x", ",", "all_e", ",", "\n", "set_name", "=", "set_name", "+", "\"_pehe\"", ",", "prefix", "=", "\"cf_\"", ",", "\n", "with_print", "=", "with_print", ",", "\n", "is_jobs", "=", "is_jobs", ")", "\n", "", "score_dict_f", ".", "update", "(", "score_dict_pehe", ")", "\n", "", "else", ":", "\n", "            ", "list_score_dicts_pehe", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_treatments", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_treatments", ")", ":", "\n", "                    ", "if", "j", ">=", "i", ":", "\n", "                        ", "continue", "\n", "\n", "# i = t0, j = t1", "\n", "", "t1_indices", "=", "np", ".", "where", "(", "all_treatments", "==", "i", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "t2_indices", "=", "np", ".", "where", "(", "all_treatments", "==", "j", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "these_x", "=", "np", ".", "concatenate", "(", "[", "all_x", "[", "t1_indices", "]", ",", "all_x", "[", "t2_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "y_pred_these_treatments", "=", "np", ".", "concatenate", "(", "[", "y_pred", "[", "t1_indices", "]", ",", "y_pred", "[", "t2_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "y_true_these_treatments", "=", "np", ".", "concatenate", "(", "[", "y_true", "[", "t1_indices", "]", ",", "y_true", "[", "t2_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "these_treatments", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "(", "len", "(", "t1_indices", ")", ",", ")", ",", "dtype", "=", "int", ")", "*", "i", ",", "\n", "np", ".", "ones", "(", "(", "len", "(", "t2_indices", ")", ",", ")", ",", "dtype", "=", "int", ")", "*", "j", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "these_y_pred_f", "=", "y_pred_these_treatments", "[", "np", ".", "arange", "(", "len", "(", "y_pred_these_treatments", ")", ")", ",", "\n", "these_treatments", "]", "\n", "these_y_true_f", "=", "y_true_these_treatments", "[", "np", ".", "arange", "(", "len", "(", "y_pred_these_treatments", ")", ")", ",", "\n", "these_treatments", "]", "\n", "\n", "inverse_treatments", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "(", "len", "(", "t1_indices", ")", ",", ")", ",", "dtype", "=", "int", ")", "*", "j", ",", "\n", "np", ".", "ones", "(", "(", "len", "(", "t2_indices", ")", ",", ")", ",", "dtype", "=", "int", ")", "*", "i", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "these_y_pred_cf", "=", "y_pred_these_treatments", "[", "np", ".", "arange", "(", "len", "(", "y_pred_these_treatments", ")", ")", ",", "\n", "inverse_treatments", "]", "\n", "these_y_true_cf", "=", "y_true_these_treatments", "[", "np", ".", "arange", "(", "len", "(", "y_pred_these_treatments", ")", ")", ",", "\n", "inverse_treatments", "]", "\n", "\n", "these_treatments", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "len", "(", "t1_indices", ")", ",", ")", ",", "dtype", "=", "int", ")", ",", "\n", "np", ".", "ones", "(", "(", "len", "(", "t2_indices", ")", ",", ")", ",", "dtype", "=", "int", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "score_dict_pehe", "=", "ModelEvaluation", ".", "calculate_est_pehe", "(", "these_y_true_f", ",", "these_y_pred_f", ",", "\n", "these_y_true_cf", ",", "these_y_pred_cf", ",", "\n", "these_treatments", ",", "these_x", ",", "all_e", ",", "\n", "set_name", "=", "set_name", "+", "\"_pehe\"", ",", "prefix", "=", "\"cf_\"", ",", "\n", "with_print", "=", "False", ")", "\n", "list_score_dicts_pehe", ".", "append", "(", "score_dict_pehe", ")", "\n", "\n", "", "", "score_dict_pehe", "=", "{", "}", "\n", "for", "key", "in", "list_score_dicts_pehe", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                ", "all_values", "=", "[", "list_score_dicts_pehe", "[", "i", "]", "[", "key", "]", "for", "i", "in", "range", "(", "len", "(", "list_score_dicts_pehe", ")", ")", "]", "\n", "score_dict_pehe", "[", "key", "]", "=", "np", ".", "mean", "(", "all_values", ")", "\n", "score_dict_pehe", "[", "key", "+", "\"_std\"", "]", "=", "np", ".", "std", "(", "all_values", ")", "\n", "", "score_dict_f", ".", "update", "(", "score_dict_pehe", ")", "\n", "\n", "if", "with_print", ":", "\n", "                ", "print", "(", "\"INFO: Performance on\"", ",", "set_name", ",", "\n", "\"RPEHE =\"", ",", "score_dict_pehe", "[", "\"cf_pehe\"", "]", ",", "\"+-\"", ",", "score_dict_pehe", "[", "\"cf_pehe_std\"", "]", ",", "\n", "\"PEHE_NN =\"", ",", "score_dict_pehe", "[", "\"cf_pehe_nn\"", "]", ",", "\"+-\"", ",", "score_dict_pehe", "[", "\"cf_pehe_nn_std\"", "]", ",", "\n", "\"ATE =\"", ",", "score_dict_pehe", "[", "\"cf_ate\"", "]", ",", "\"+-\"", ",", "score_dict_pehe", "[", "\"cf_ate_std\"", "]", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "", "if", "stateful_benchmark", ":", "\n", "            ", "benchmark", ".", "set_assign_counterfactuals", "(", "False", ")", "\n", "", "return", "score_dict_f", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.__init__": [[27, 46], ["perfect_match.data_access.twins.data_access.DataAccess"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "is_v2", "=", "False", ",", "is_binary", "=", "True", ",", "\n", "response_mean_of_mean", "=", "0.45", ",", "response_std_of_mean", "=", "0.15", ",", "\n", "response_mean_of_std", "=", "0.1", ",", "response_std_of_std", "=", "0.05", ",", "\n", "strength_of_assignment_bias", "=", "10", ",", "epsilon_std", "=", "0.15", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "centroids", "=", "None", "\n", "self", ".", "data_access", "=", "DataAccess", "(", "data_dir", ")", "\n", "self", ".", "assignment_cache", "=", "{", "}", "\n", "self", ".", "assign_counterfactuals", "=", "False", "\n", "self", ".", "is_v2", "=", "is_v2", "\n", "self", ".", "num_treatments", "=", "2", "if", "is_binary", "else", "4", "\n", "self", ".", "response_mean_of_mean", "=", "response_mean_of_mean", "\n", "self", ".", "response_std_of_mean", "=", "response_std_of_mean", "\n", "self", ".", "response_mean_of_std", "=", "response_mean_of_std", "\n", "self", ".", "response_std_of_std", "=", "response_std_of_std", "\n", "self", ".", "strength_of_assignment_bias", "=", "strength_of_assignment_bias", "\n", "self", ".", "epsilon_std", "=", "epsilon_std", "\n", "self", ".", "seed", "=", "kwargs", "[", "\"seed\"", "]", "\n", "self", ".", "random_generator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.get_db_file_name": [[47, 50], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_db_file_name", "(", ")", ":", "\n", "        ", "return", "DataAccess", ".", "DB_FILE_NAME", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.filter": [[51, 53], ["None"], "methods", ["None"], ["", "def", "filter", "(", "self", ",", "patients", ")", ":", "\n", "        ", "return", "patients", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.set_assign_counterfactuals": [[54, 56], ["None"], "methods", ["None"], ["", "def", "set_assign_counterfactuals", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "assign_counterfactuals", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.get_num_treatments": [[57, 60], ["None"], "methods", ["None"], ["", "def", "get_num_treatments", "(", "self", ")", ":", "\n", "# 0 = lighter, male, 1 = heavier, male, 2 = lighter, female, 3 = heavier, female", "\n", "        ", "return", "self", ".", "num_treatments", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.get_data_access": [[61, 63], ["None"], "methods", ["None"], ["", "def", "get_data_access", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_access", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.get_input_shapes": [[64, 66], ["twins_benchmark.TwinsBenchmark.data_access.get_pairs_dimension"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_pairs_dimension"], ["", "def", "get_input_shapes", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "(", "self", ".", "data_access", ".", "get_pairs_dimension", "(", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.get_output_shapes": [[67, 69], ["None"], "methods", ["None"], ["", "def", "get_output_shapes", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.initialise": [[70, 76], ["numpy.random.RandomState", "twins_benchmark.TwinsBenchmark.random_generator.uniform", "twins_benchmark.TwinsBenchmark.data_access.get_pairs_dimension"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.twins.data_access.DataAccess.get_pairs_dimension"], ["", "def", "initialise", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "random_generator", "=", "np", ".", "random", ".", "RandomState", "(", "909", ")", "\n", "if", "not", "self", ".", "is_v2", ":", "\n", "            ", "self", ".", "centroids", "=", "self", ".", "random_generator", ".", "uniform", "(", "-", "0.1", ",", "0.1", ",", "size", "=", "(", "self", ".", "data_access", ".", "get_pairs_dimension", "(", ")", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "centroids", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.fit": [[77, 104], ["sorted", "len", "next", "len", "twins_benchmark.TwinsBenchmark.random_generator.permutation", "perfect_match.apps.parameters.clip_percentage", "perfect_match.apps.parameters.clip_percentage", "centroids_tmp.append", "len", "len", "twins_benchmark.TwinsBenchmark.random_generator.normal", "twins_benchmark.TwinsBenchmark.random_generator.normal", "len"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage"], ["", "", "def", "fit", "(", "self", ",", "generator", ",", "steps", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "is_v2", ":", "\n", "            ", "centroids_tmp", "=", "[", "]", "\n", "centroid_indices", "=", "sorted", "(", "self", ".", "random_generator", ".", "permutation", "(", "steps", "*", "batch_size", ")", "[", ":", "self", ".", "num_treatments", "+", "1", "]", ")", "\n", "\n", "current_idx", "=", "0", "\n", "while", "len", "(", "centroid_indices", ")", "!=", "0", ":", "\n", "                ", "x", ",", "_", "=", "next", "(", "generator", ")", "\n", "while", "len", "(", "centroid_indices", ")", "!=", "0", "and", "centroid_indices", "[", "0", "]", "<=", "current_idx", "+", "len", "(", "x", "[", "0", "]", ")", ":", "\n", "                    ", "next_index", "=", "centroid_indices", "[", "0", "]", "\n", "del", "centroid_indices", "[", "0", "]", "\n", "\n", "is_last_treatment", "=", "len", "(", "centroid_indices", ")", "==", "0", "\n", "if", "is_last_treatment", ":", "\n", "# Last treatment is control = worse expected outcomes.", "\n", "                        ", "response_mean_of_mean", "=", "1", "-", "self", ".", "response_mean_of_mean", "\n", "", "else", ":", "\n", "                        ", "response_mean_of_mean", "=", "self", ".", "response_mean_of_mean", "\n", "\n", "", "response_mean", "=", "clip_percentage", "(", "self", ".", "random_generator", ".", "normal", "(", "response_mean_of_mean", ",", "\n", "self", ".", "response_std_of_mean", ")", ")", "\n", "response_std", "=", "clip_percentage", "(", "self", ".", "random_generator", ".", "normal", "(", "self", ".", "response_mean_of_std", ",", "\n", "self", ".", "response_std_of_std", ")", ")", "\n", "centroids_tmp", ".", "append", "(", "(", "x", "[", "0", "]", "[", "next_index", "]", ",", "response_mean", ",", "response_std", ")", ")", "\n", "", "current_idx", "+=", "len", "(", "x", "[", "0", "]", ")", "\n", "", "self", ".", "centroids", "=", "centroids_tmp", "\n", "self", ".", "assignment_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.get_assignment": [[105, 119], ["twins_benchmark.TwinsBenchmark._assign"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark._assign"], ["", "", "def", "get_assignment", "(", "self", ",", "id", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "centroids", "is", "None", ":", "\n", "            ", "return", "0", ",", "0", "\n", "\n", "", "if", "id", "not", "in", "self", ".", "assignment_cache", ":", "\n", "            ", "assigned_treatment", ",", "assigned_y", "=", "self", ".", "_assign", "(", "x", ")", "\n", "self", ".", "assignment_cache", "[", "id", "]", "=", "assigned_treatment", ",", "assigned_y", "\n", "\n", "", "assigned_treatment", ",", "assigned_y", "=", "self", ".", "assignment_cache", "[", "id", "]", "\n", "\n", "if", "self", ".", "assign_counterfactuals", ":", "\n", "            ", "return", "assigned_treatment", ",", "assigned_y", "\n", "", "else", ":", "\n", "            ", "return", "assigned_treatment", ",", "assigned_y", "[", "assigned_treatment", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.sigmoid": [[120, 123], ["math.exp"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "sigmoid", "(", "x", ")", ":", "\n", "        ", "return", "1", "/", "(", "1", "+", "math", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark._assign": [[124, 173], ["twins_benchmark.TwinsBenchmark.random_generator.binomial", "twins_benchmark.TwinsBenchmark.get_centroid_weights", "range", "numpy.array", "perfect_match.models.benchmarks.tcga_benchmark.TCGABenchmark.stable_softmax", "twins_benchmark.TwinsBenchmark.random_generator.choice", "numpy.dot", "twins_benchmark.TwinsBenchmark.random_generator.normal", "numpy.array.append", "twins_benchmark.TwinsBenchmark.sigmoid", "twins_benchmark.TwinsBenchmark.random_generator.normal"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.get_centroid_weights", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.stable_softmax", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.sigmoid"], ["", "def", "_assign", "(", "self", ",", "x", ")", ":", "\n", "# Assignment should be biased towards treatments that help more.", "\n", "        ", "assert", "self", ".", "centroids", "is", "not", "None", ",", "\"Must call __fit__ before __assign__.\"", "\n", "\n", "if", "not", "self", ".", "is_v2", ":", "\n", "# TODO: Assignment and Y are independent = no assignment bias.", "\n", "            ", "expected_responses", "=", "np", ".", "dot", "(", "self", ".", "centroids", ".", "T", ",", "x", "[", "7", ":", "]", ")", "+", "self", ".", "random_generator", ".", "normal", "(", "0", ",", "0.1", ")", "\n", "\n", "treatment_chosen", "=", "self", ".", "random_generator", ".", "binomial", "(", "1", ",", "p", "=", "TwinsBenchmark", ".", "sigmoid", "(", "expected_responses", ")", ")", "\n", "\n", "lighter_sex", ",", "heavier_sex", "=", "x", "[", "3", "]", ",", "x", "[", "4", "]", "\n", "\n", "if", "self", ".", "num_treatments", "==", "2", ":", "\n", "                ", "outcomes", "=", "[", "x", "[", "5", "]", ",", "x", "[", "6", "]", "]", "\n", "", "else", ":", "\n", "                ", "outcomes", "=", "[", "\n", "None", ",", "None", ",", "None", ",", "None", "\n", "]", "\n", "\n", "if", "lighter_sex", "==", "DataAccess", ".", "GENDER_MALE", ":", "\n", "                    ", "outcomes", "[", "0", "]", "=", "x", "[", "5", "]", "\n", "", "else", ":", "\n", "                    ", "outcomes", "[", "2", "]", "=", "x", "[", "5", "]", "\n", "\n", "", "if", "heavier_sex", "==", "DataAccess", ".", "GENDER_MALE", ":", "\n", "                    ", "outcomes", "[", "1", "]", "=", "x", "[", "6", "]", "\n", "", "else", ":", "\n", "                    ", "outcomes", "[", "3", "]", "=", "x", "[", "6", "]", "\n", "\n", "", "if", "(", "treatment_chosen", "==", "0", "and", "lighter_sex", "==", "DataAccess", ".", "GENDER_FEMALE", ")", "or", "(", "treatment_chosen", "==", "1", "and", "heavier_sex", "==", "DataAccess", ".", "GENDER_FEMALE", ")", ":", "\n", "                    ", "treatment_chosen", "+=", "2", "\n", "\n", "", "", "return", "treatment_chosen", ",", "outcomes", "\n", "", "else", ":", "\n", "            ", "distances", "=", "self", ".", "get_centroid_weights", "(", "x", ")", "\n", "\n", "y", "=", "[", "]", "\n", "control_distance", "=", "distances", "[", "-", "1", "]", "\n", "for", "treatment_idx", "in", "range", "(", "self", ".", "num_treatments", ")", ":", "\n", "                ", "this_distance", "=", "distances", "[", "treatment_idx", "]", "\n", "y", ".", "append", "(", "50", "*", "(", "this_distance", "+", "control_distance", ")", "+", "self", ".", "random_generator", ".", "normal", "(", "0.0", ",", "1.0", ")", ")", "\n", "", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "\n", "# Invert the expected responses, because a lower percentage of recurrence/death is a better outcome.", "\n", "choice_percentage", "=", "TCGABenchmark", ".", "stable_softmax", "(", "self", ".", "strength_of_assignment_bias", "*", "distances", "[", ":", "-", "1", "]", ")", "\n", "treatment_chosen", "=", "self", ".", "random_generator", ".", "choice", "(", "self", ".", "num_treatments", ",", "p", "=", "choice_percentage", ")", "\n", "\n", "return", "treatment_chosen", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.twins_benchmark.TwinsBenchmark.get_centroid_weights": [[174, 183], ["map", "numpy.squeeze", "map", "sklearn.metrics.pairwise.cosine_similarity", "twins_benchmark.TwinsBenchmark.data_access.standardise_entry().reshape", "centroid.reshape", "twins_benchmark.TwinsBenchmark.data_access.standardise_entry", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.standardise_entry"], ["", "", "def", "get_centroid_weights", "(", "self", ",", "x", ")", ":", "\n", "        ", "similarities", "=", "map", "(", "\n", "lambda", "centroid", ":", "cosine_similarity", "(", "self", ".", "data_access", ".", "standardise_entry", "(", "\n", "np", ".", "array", "(", "x", "[", "7", ":", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "\n", "centroid", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "\n", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "self", ".", "centroids", ")", "\n", ")", "\n", "return", "np", ".", "squeeze", "(", "similarities", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.__init__": [[26, 51], ["perfect_match.data_access.tcga.data_access.DataAccess", "int", "numpy.rint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "num_treatments", "=", "2", ",", "\n", "num_centroids_mean", "=", "7", ",", "num_centroids_std", "=", "2", ",", "\n", "num_relevant_gene_loci_mean", "=", "10", ",", "num_relevant_gene_loci_std", "=", "3", ",", "\n", "response_mean_of_mean", "=", "0.45", ",", "response_std_of_mean", "=", "0.15", ",", "\n", "response_mean_of_std", "=", "0.1", ",", "response_std_of_std", "=", "0.05", ",", "\n", "strength_of_assignment_bias", "=", "10", ",", "epsilon_std", "=", "0.15", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "centroids", "=", "None", "\n", "self", ".", "data_access", "=", "DataAccess", "(", "data_dir", ",", "**", "kwargs", ")", "\n", "self", ".", "assignment_cache", "=", "{", "}", "\n", "self", ".", "num_treatments", "=", "num_treatments", "\n", "self", ".", "num_centroids_mean", "=", "num_centroids_mean", "\n", "self", ".", "num_centroids_std", "=", "num_centroids_std", "\n", "self", ".", "num_relevant_gene_loci_mean", "=", "num_relevant_gene_loci_mean", "\n", "self", ".", "num_relevant_gene_loci_std", "=", "num_relevant_gene_loci_std", "\n", "self", ".", "response_mean_of_mean", "=", "response_mean_of_mean", "\n", "self", ".", "response_std_of_mean", "=", "response_std_of_mean", "\n", "self", ".", "response_mean_of_std", "=", "response_mean_of_std", "\n", "self", ".", "response_std_of_std", "=", "response_std_of_std", "\n", "self", ".", "strength_of_assignment_bias", "=", "strength_of_assignment_bias", "\n", "self", ".", "epsilon_std", "=", "epsilon_std", "\n", "self", ".", "assign_counterfactuals", "=", "False", "\n", "self", ".", "seed", "=", "kwargs", "[", "\"seed\"", "]", "\n", "self", ".", "random_generator", "=", "None", "\n", "self", ".", "num_features", "=", "int", "(", "np", ".", "rint", "(", "kwargs", "[", "\"tcga_num_features\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.get_db_file_name": [[52, 55], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_db_file_name", "(", ")", ":", "\n", "        ", "return", "DataAccess", ".", "DB_FILE_NAME", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.filter": [[56, 58], ["None"], "methods", ["None"], ["", "def", "filter", "(", "self", ",", "patients", ")", ":", "\n", "        ", "return", "patients", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.set_assign_counterfactuals": [[59, 61], ["None"], "methods", ["None"], ["", "def", "set_assign_counterfactuals", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "assign_counterfactuals", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.get_num_treatments": [[62, 64], ["None"], "methods", ["None"], ["", "def", "get_num_treatments", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_treatments", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.get_data_access": [[65, 67], ["None"], "methods", ["None"], ["", "def", "get_data_access", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_access", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.get_input_shapes": [[68, 73], ["tcga_benchmark.TCGABenchmark.data_access.get_rnaseq_dimension"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_rnaseq_dimension"], ["", "def", "get_input_shapes", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "self", ".", "num_features", ">", "0", ":", "\n", "            ", "return", "(", "self", ".", "num_features", ",", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "self", ".", "data_access", ".", "get_rnaseq_dimension", "(", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.get_output_shapes": [[74, 76], ["None"], "methods", ["None"], ["", "", "def", "get_output_shapes", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.initialise": [[77, 87], ["numpy.random.RandomState", "tcga_benchmark.TCGABenchmark.data_access.get_rnaseq_dimension", "tcga_benchmark.TCGABenchmark.random_generator.choice", "numpy.arange", "tcga_benchmark.TCGABenchmark.data_access.get_rnaseq_dimension"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_rnaseq_dimension", "home.repos.pwc.inspect_result.d909b_perfect_match.tcga.data_access.DataAccess.get_rnaseq_dimension"], ["", "def", "initialise", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "random_generator", "=", "np", ".", "random", ".", "RandomState", "(", "909", ")", "\n", "self", ".", "centroids", "=", "None", "\n", "\n", "all_features", "=", "self", ".", "data_access", ".", "get_rnaseq_dimension", "(", ")", "\n", "if", "self", ".", "num_features", ">", "0", "and", "self", ".", "num_features", "!=", "all_features", ":", "\n", "            ", "self", ".", "selected_features", "=", "self", ".", "random_generator", ".", "choice", "(", "self", ".", "data_access", ".", "get_rnaseq_dimension", "(", ")", ",", "\n", "self", ".", "num_features", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "selected_features", "=", "np", ".", "arange", "(", "all_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.fit": [[88, 120], ["sorted", "len", "next", "perfect_match.data_access.generator.get_last_id_set", "len", "tcga_benchmark.TCGABenchmark.random_generator.permutation", "perfect_match.apps.parameters.clip_percentage", "perfect_match.apps.parameters.clip_percentage", "numpy.arange", "centroids_tmp.append", "len", "len", "tcga_benchmark.TCGABenchmark.random_generator.normal", "tcga_benchmark.TCGABenchmark.random_generator.normal", "len", "len", "tcga_benchmark.TCGABenchmark.data_access.get_entry_with_id"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.get_last_id_set", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_entry_with_id"], ["", "", "def", "fit", "(", "self", ",", "generator", ",", "steps", ",", "batch_size", ")", ":", "\n", "        ", "centroids_tmp", "=", "[", "]", "\n", "centroid_indices", "=", "sorted", "(", "self", ".", "random_generator", ".", "permutation", "(", "steps", "*", "batch_size", ")", "[", ":", "self", ".", "num_treatments", "+", "1", "]", ")", "\n", "\n", "current_idx", "=", "0", "\n", "while", "len", "(", "centroid_indices", ")", "!=", "0", ":", "\n", "            ", "x", ",", "_", "=", "next", "(", "generator", ")", "\n", "ids", "=", "get_last_id_set", "(", ")", "\n", "\n", "while", "len", "(", "centroid_indices", ")", "!=", "0", "and", "centroid_indices", "[", "0", "]", "<=", "current_idx", "+", "len", "(", "x", "[", "0", "]", ")", ":", "\n", "                ", "next_index", "=", "centroid_indices", "[", "0", "]", "\n", "del", "centroid_indices", "[", "0", "]", "\n", "\n", "is_last_treatment", "=", "len", "(", "centroid_indices", ")", "==", "0", "\n", "if", "is_last_treatment", ":", "\n", "# Last treatment is control = worse expected outcomes.", "\n", "                    ", "response_mean_of_mean", "=", "1", "-", "self", ".", "response_mean_of_mean", "\n", "", "else", ":", "\n", "                    ", "response_mean_of_mean", "=", "self", ".", "response_mean_of_mean", "\n", "\n", "", "response_mean", "=", "clip_percentage", "(", "self", ".", "random_generator", ".", "normal", "(", "response_mean_of_mean", ",", "\n", "self", ".", "response_std_of_mean", ")", ")", "\n", "response_std", "=", "clip_percentage", "(", "self", ".", "random_generator", ".", "normal", "(", "self", ".", "response_mean_of_std", ",", "\n", "self", ".", "response_std_of_std", ")", ")", "\n", "gene_loci_indices", "=", "np", ".", "arange", "(", "len", "(", "x", "[", "0", "]", "[", "next_index", "]", ")", ")", "\n", "\n", "rnaseq_data", "=", "self", ".", "data_access", ".", "get_entry_with_id", "(", "ids", "[", "next_index", "]", ")", "[", "1", "]", "[", "\"rnaseq\"", "]", "[", "1", "]", "\n", "\n", "centroids_tmp", ".", "append", "(", "(", "gene_loci_indices", ",", "rnaseq_data", "[", "gene_loci_indices", "]", ",", "response_mean", ",", "response_std", ")", ")", "\n", "", "current_idx", "+=", "len", "(", "x", "[", "0", "]", ")", "\n", "", "self", ".", "centroids", "=", "centroids_tmp", "\n", "self", ".", "assignment_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.get_assignment": [[121, 136], ["tcga_benchmark.TCGABenchmark._assign", "tcga_benchmark.TCGABenchmark.data_access.get_entry_with_id"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark._assign", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_entry_with_id"], ["", "def", "get_assignment", "(", "self", ",", "id", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "centroids", "is", "None", ":", "\n", "            ", "return", "0", ",", "0", "\n", "\n", "", "if", "id", "not", "in", "self", ".", "assignment_cache", ":", "\n", "            ", "rnaseq_data", "=", "self", ".", "data_access", ".", "get_entry_with_id", "(", "id", ")", "[", "1", "]", "[", "\"rnaseq\"", "]", "[", "1", "]", "\n", "assigned_treatment", ",", "assigned_y", "=", "self", ".", "_assign", "(", "rnaseq_data", ")", "\n", "self", ".", "assignment_cache", "[", "id", "]", "=", "assigned_treatment", ",", "assigned_y", "\n", "\n", "", "assigned_treatment", ",", "assigned_y", "=", "self", ".", "assignment_cache", "[", "id", "]", "\n", "\n", "if", "self", ".", "assign_counterfactuals", ":", "\n", "            ", "return", "assigned_treatment", ",", "assigned_y", "\n", "", "else", ":", "\n", "            ", "return", "assigned_treatment", ",", "assigned_y", "[", "assigned_treatment", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.stable_softmax": [[137, 141], ["numpy.exp", "numpy.exp.sum", "numpy.max"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "stable_softmax", "(", "x", ")", ":", "\n", "        ", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.select_features": [[142, 144], ["None"], "methods", ["None"], ["", "def", "select_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", "self", ".", "selected_features", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark._assign": [[145, 174], ["tcga_benchmark.TCGABenchmark.get_centroid_weights", "range", "numpy.array", "range", "numpy.array", "tcga_benchmark.TCGABenchmark.random_generator.choice", "tcga_benchmark.TCGABenchmark.random_generator.normal", "numpy.array.append", "numpy.array.append", "perfect_match.apps.parameters.clip_percentage", "tcga_benchmark.TCGABenchmark.stable_softmax", "tcga_benchmark.TCGABenchmark.random_generator.normal"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.get_centroid_weights", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.stable_softmax"], ["", "def", "_assign", "(", "self", ",", "x", ")", ":", "\n", "# Assignment should be biased towards treatments that help more.", "\n", "        ", "assert", "self", ".", "centroids", "is", "not", "None", ",", "\"Must call __fit__ before __assign__.\"", "\n", "\n", "distances", "=", "self", ".", "get_centroid_weights", "(", "x", ")", "\n", "\n", "expected_responses", "=", "[", "]", "\n", "for", "treatment", "in", "range", "(", "self", ".", "num_treatments", "+", "1", ")", ":", "\n", "            ", "_", ",", "_", ",", "response_mean", ",", "response_std", "=", "self", ".", "centroids", "[", "treatment", "]", "\n", "y_this_treatment", "=", "self", ".", "random_generator", ".", "normal", "(", "response_mean", ",", "response_std", ")", "\n", "expected_responses", ".", "append", "(", "\n", "clip_percentage", "(", "y_this_treatment", "+", "self", ".", "random_generator", ".", "normal", "(", "0.0", ",", "self", ".", "epsilon_std", ")", ")", "\n", ")", "\n", "", "expected_responses", "=", "np", ".", "array", "(", "expected_responses", ")", "\n", "\n", "y", "=", "[", "]", "\n", "control_response", ",", "control_distance", "=", "expected_responses", "[", "-", "1", "]", ",", "distances", "[", "-", "1", "]", "\n", "for", "treatment_idx", "in", "range", "(", "self", ".", "num_treatments", ")", ":", "\n", "            ", "this_response", ",", "this_distance", "=", "expected_responses", "[", "treatment_idx", "]", ",", "distances", "[", "treatment_idx", "]", "\n", "y", ".", "append", "(", "this_response", "*", "(", "this_distance", "+", "control_distance", ")", ")", "\n", "", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "\n", "# Invert the expected responses, because a lower percentage of recurrence/death is a better outcome.", "\n", "treatment_chosen", "=", "self", ".", "random_generator", ".", "choice", "(", "self", ".", "num_treatments", ",", "\n", "p", "=", "TCGABenchmark", ".", "stable_softmax", "(", "\n", "self", ".", "strength_of_assignment_bias", "*", "y", ")", "\n", ")", "\n", "\n", "return", "treatment_chosen", ",", "50", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.get_centroid_weights": [[175, 181], ["map", "numpy.squeeze", "map", "map", "sklearn.metrics.pairwise.cosine_similarity", "x[].reshape", "centroid.reshape"], "methods", ["None"], ["", "def", "get_centroid_weights", "(", "self", ",", "x", ")", ":", "\n", "        ", "similarities", "=", "map", "(", "lambda", "indices", ",", "centroid", ":", "cosine_similarity", "(", "x", "[", "indices", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "\n", "centroid", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ",", "\n", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "self", ".", "centroids", ")", ",", "\n", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "self", ".", "centroids", ")", ")", "\n", "return", "np", ".", "squeeze", "(", "similarities", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.__init__": [[24, 33], ["perfect_match.data_access.jobs.data_access.DataAccess"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "data_dir", "=", "kwargs", "[", "\"output_directory\"", "]", "\n", "self", ".", "data_access", "=", "DataAccess", "(", "data_dir", ",", "kwargs", "[", "\"seed\"", "]", ",", "kwargs", "[", "\"experiment_index\"", "]", ")", "\n", "self", ".", "assignment_cache", "=", "{", "}", "\n", "self", ".", "assign_counterfactuals", "=", "False", "\n", "self", ".", "num_treatments", "=", "2", "\n", "self", ".", "seed", "=", "kwargs", "[", "\"seed\"", "]", "\n", "self", ".", "random_generator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.get_db_file_name": [[34, 37], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_db_file_name", "(", ")", ":", "\n", "        ", "return", "DataAccess", ".", "DB_FILE_NAME", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.filter": [[38, 40], ["None"], "methods", ["None"], ["", "def", "filter", "(", "self", ",", "patients", ")", ":", "\n", "        ", "return", "patients", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.set_assign_counterfactuals": [[41, 43], ["None"], "methods", ["None"], ["", "def", "set_assign_counterfactuals", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "assign_counterfactuals", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.get_num_treatments": [[44, 46], ["None"], "methods", ["None"], ["", "def", "get_num_treatments", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_treatments", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.get_data_access": [[47, 49], ["None"], "methods", ["None"], ["", "def", "get_data_access", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_access", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.get_input_shapes": [[50, 52], ["None"], "methods", ["None"], ["", "def", "get_input_shapes", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "(", "17", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.get_output_shapes": [[53, 55], ["None"], "methods", ["None"], ["", "def", "get_output_shapes", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.initialise": [[56, 60], ["perfect_match.data_access.jobs.data_access.DataAccess", "numpy.random.RandomState"], "methods", ["None"], ["", "def", "initialise", "(", "self", ",", "args", ")", ":", "\n", "        ", "data_dir", "=", "args", "[", "\"output_directory\"", "]", "\n", "self", ".", "data_access", "=", "DataAccess", "(", "data_dir", ",", "args", "[", "\"seed\"", "]", ",", "args", "[", "\"experiment_index\"", "]", ")", "\n", "self", ".", "random_generator", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.fit": [[61, 63], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "generator", ",", "steps", ",", "batch_size", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.get_assignment": [[64, 75], ["jobs_benchmark.JobsBenchmark._assign"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark._assign"], ["", "def", "get_assignment", "(", "self", ",", "id", ",", "x", ")", ":", "\n", "        ", "if", "id", "not", "in", "self", ".", "assignment_cache", ":", "\n", "            ", "assigned_treatment", ",", "assigned_y", "=", "self", ".", "_assign", "(", "id", ")", "\n", "self", ".", "assignment_cache", "[", "id", "]", "=", "assigned_treatment", ",", "assigned_y", "\n", "\n", "", "assigned_treatment", ",", "assigned_y", "=", "self", ".", "assignment_cache", "[", "id", "]", "\n", "\n", "if", "self", ".", "assign_counterfactuals", ":", "\n", "            ", "return", "assigned_treatment", ",", "assigned_y", "\n", "", "else", ":", "\n", "            ", "return", "assigned_treatment", ",", "assigned_y", "[", "assigned_treatment", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark.sigmoid": [[76, 79], ["math.exp"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "sigmoid", "(", "x", ")", ":", "\n", "        ", "return", "1", "/", "(", "1", "+", "math", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.jobs_benchmark.JobsBenchmark._assign": [[80, 90], ["numpy.array", "jobs_benchmark.JobsBenchmark.data_access.get_row", "jobs_benchmark.JobsBenchmark.data_access.get_row"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row"], ["", "def", "_assign", "(", "self", ",", "id", ")", ":", "\n", "        ", "treatment_chosen", "=", "self", ".", "data_access", ".", "get_row", "(", "DataAccess", ".", "TABLE_JOBS", ",", "id", ",", "columns", "=", "\"t\"", ")", "[", "0", "]", "\n", "y", "=", "np", ".", "array", "(", "self", ".", "data_access", ".", "get_row", "(", "DataAccess", ".", "TABLE_JOBS", ",", "id", ",", "columns", "=", "\"y0,y1\"", ")", ")", "\n", "\n", "# We do not have counterfactual outcomes in this experiment.", "\n", "if", "treatment_chosen", "==", "0", ":", "\n", "            ", "y", "=", "[", "y", "[", "0", "]", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "y", "=", "[", "None", ",", "y", "[", "1", "]", "]", "\n", "", "return", "treatment_chosen", ",", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.__init__": [[27, 47], ["perfect_match.data_access.news.data_access.DataAccess"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "\n", "response_mean_of_mean", "=", "0.45", ",", "response_std_of_mean", "=", "0.15", ",", "\n", "response_mean_of_std", "=", "0.1", ",", "response_std_of_std", "=", "0.05", ",", "\n", "strength_of_assignment_bias", "=", "10", ",", "epsilon_std", "=", "0.15", ",", "\n", "num_samples", "=", "5000", ",", "num_treatments", "=", "16", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "centroids", "=", "None", "\n", "self", ".", "data_access", "=", "DataAccess", "(", "data_dir", ")", "\n", "self", ".", "assignment_cache", "=", "{", "}", "\n", "self", ".", "assign_counterfactuals", "=", "False", "\n", "self", ".", "num_treatments", "=", "num_treatments", "\n", "self", ".", "response_mean_of_mean", "=", "response_mean_of_mean", "\n", "self", ".", "response_std_of_mean", "=", "response_std_of_mean", "\n", "self", ".", "response_mean_of_std", "=", "response_mean_of_std", "\n", "self", ".", "response_std_of_std", "=", "response_std_of_std", "\n", "self", ".", "strength_of_assignment_bias", "=", "strength_of_assignment_bias", "\n", "self", ".", "epsilon_std", "=", "epsilon_std", "\n", "self", ".", "seed", "=", "kwargs", "[", "\"seed\"", "]", "\n", "self", ".", "random_generator", "=", "None", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.get_db_file_name": [[48, 51], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_db_file_name", "(", ")", ":", "\n", "        ", "return", "DataAccess", ".", "DB_FILE_NAME", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.filter": [[52, 54], ["news_benchmark.NewsBenchmark.random_generator.choice"], "methods", ["None"], ["", "def", "filter", "(", "self", ",", "patients", ")", ":", "\n", "        ", "return", "self", ".", "random_generator", ".", "choice", "(", "patients", ",", "size", "=", "self", ".", "num_samples", ",", "replace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.set_assign_counterfactuals": [[55, 57], ["None"], "methods", ["None"], ["", "def", "set_assign_counterfactuals", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "assign_counterfactuals", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.get_num_treatments": [[58, 60], ["None"], "methods", ["None"], ["", "def", "get_num_treatments", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_treatments", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.get_data_access": [[61, 63], ["None"], "methods", ["None"], ["", "def", "get_data_access", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_access", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.get_input_shapes": [[64, 66], ["news_benchmark.NewsBenchmark.data_access.get_news_dimension"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.news.data_access.DataAccess.get_news_dimension"], ["", "def", "get_input_shapes", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "(", "self", ".", "data_access", ".", "get_news_dimension", "(", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.get_output_shapes": [[67, 69], ["None"], "methods", ["None"], ["", "def", "get_output_shapes", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.initialise": [[70, 73], ["numpy.random.RandomState"], "methods", ["None"], ["", "def", "initialise", "(", "self", ",", "args", ",", "seed", "=", "909", ")", ":", "\n", "        ", "self", ".", "random_generator", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "self", ".", "centroids", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.fit": [[74, 108], ["sorted", "len", "next", "get_last_id_set", "len", "news_benchmark.NewsBenchmark.random_generator.permutation", "perfect_match.apps.parameters.clip_percentage", "perfect_match.apps.parameters.clip_percentage", "news_benchmark.NewsBenchmark.data_access.get_entry_with_id", "centroids_tmp.append", "len", "len", "news_benchmark.NewsBenchmark.random_generator.normal", "news_benchmark.NewsBenchmark.random_generator.normal", "len"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.data_access.generator.get_last_id_set", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_entry_with_id"], ["", "def", "fit", "(", "self", ",", "generator", ",", "steps", ",", "batch_size", ")", ":", "\n", "        ", "from", "perfect_match", ".", "data_access", ".", "generator", "import", "get_last_id_set", "\n", "\n", "centroids_tmp", "=", "[", "]", "\n", "centroid_indices", "=", "sorted", "(", "self", ".", "random_generator", ".", "permutation", "(", "steps", "*", "batch_size", ")", "[", ":", "self", ".", "num_treatments", "+", "1", "]", ")", "\n", "\n", "current_idx", "=", "0", "\n", "while", "len", "(", "centroid_indices", ")", "!=", "0", ":", "\n", "            ", "x", ",", "_", "=", "next", "(", "generator", ")", "\n", "ids", "=", "get_last_id_set", "(", ")", "\n", "\n", "while", "len", "(", "centroid_indices", ")", "!=", "0", "and", "centroid_indices", "[", "0", "]", "<=", "current_idx", "+", "len", "(", "x", "[", "0", "]", ")", ":", "\n", "                ", "next_index", "=", "centroid_indices", "[", "0", "]", "\n", "del", "centroid_indices", "[", "0", "]", "\n", "\n", "is_last_treatment", "=", "len", "(", "centroid_indices", ")", "==", "0", "\n", "if", "is_last_treatment", ":", "\n", "# Last treatment is control = worse expected outcomes.", "\n", "                    ", "response_mean_of_mean", "=", "1", "-", "self", ".", "response_mean_of_mean", "\n", "", "else", ":", "\n", "                    ", "response_mean_of_mean", "=", "self", ".", "response_mean_of_mean", "\n", "\n", "", "response_mean", "=", "clip_percentage", "(", "self", ".", "random_generator", ".", "normal", "(", "response_mean_of_mean", ",", "\n", "self", ".", "response_std_of_mean", ")", ")", "\n", "response_std", "=", "clip_percentage", "(", "self", ".", "random_generator", ".", "normal", "(", "self", ".", "response_mean_of_std", ",", "\n", "self", ".", "response_std_of_std", ")", ")", "\n", "\n", "id", ",", "data", "=", "self", ".", "data_access", ".", "get_entry_with_id", "(", "ids", "[", "next_index", "]", ")", "\n", "z", "=", "data", "[", "\"z\"", "]", "\n", "\n", "centroids_tmp", ".", "append", "(", "(", "z", ",", "response_mean", ",", "response_std", ")", ")", "\n", "", "current_idx", "+=", "len", "(", "x", "[", "0", "]", ")", "\n", "", "self", ".", "centroids", "=", "centroids_tmp", "\n", "self", ".", "assignment_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.get_assignment": [[109, 125], ["news_benchmark.NewsBenchmark.data_access.get_entry_with_id", "news_benchmark.NewsBenchmark._assign"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_entry_with_id", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark._assign"], ["", "def", "get_assignment", "(", "self", ",", "id", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "centroids", "is", "None", ":", "\n", "            ", "return", "0", ",", "0", "\n", "\n", "", "if", "id", "not", "in", "self", ".", "assignment_cache", ":", "\n", "            ", "id", ",", "data", "=", "self", ".", "data_access", ".", "get_entry_with_id", "(", "id", ")", "\n", "z", "=", "data", "[", "\"z\"", "]", "\n", "assigned_treatment", ",", "assigned_y", "=", "self", ".", "_assign", "(", "z", ")", "\n", "self", ".", "assignment_cache", "[", "id", "]", "=", "assigned_treatment", ",", "assigned_y", "\n", "\n", "", "assigned_treatment", ",", "assigned_y", "=", "self", ".", "assignment_cache", "[", "id", "]", "\n", "\n", "if", "self", ".", "assign_counterfactuals", ":", "\n", "            ", "return", "assigned_treatment", ",", "assigned_y", "\n", "", "else", ":", "\n", "            ", "return", "assigned_treatment", ",", "assigned_y", "[", "assigned_treatment", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.sigmoid": [[126, 129], ["math.exp"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "sigmoid", "(", "x", ")", ":", "\n", "        ", "return", "1", "/", "(", "1", "+", "math", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark._assign": [[130, 159], ["news_benchmark.NewsBenchmark.get_centroid_weights", "range", "numpy.array", "range", "numpy.array", "news_benchmark.NewsBenchmark.random_generator.choice", "news_benchmark.NewsBenchmark.random_generator.normal", "numpy.array.append", "numpy.array.append", "perfect_match.apps.parameters.clip_percentage", "perfect_match.models.benchmarks.tcga_benchmark.TCGABenchmark.stable_softmax", "news_benchmark.NewsBenchmark.random_generator.normal"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.get_centroid_weights", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.parameters.clip_percentage", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.tcga_benchmark.TCGABenchmark.stable_softmax"], ["", "def", "_assign", "(", "self", ",", "x", ")", ":", "\n", "# Assignment should be biased towards treatments that help more.", "\n", "        ", "assert", "self", ".", "centroids", "is", "not", "None", ",", "\"Must call __fit__ before __assign__.\"", "\n", "\n", "distances", "=", "self", ".", "get_centroid_weights", "(", "x", ")", "\n", "\n", "expected_responses", "=", "[", "]", "\n", "for", "treatment", "in", "range", "(", "self", ".", "num_treatments", "+", "1", ")", ":", "\n", "            ", "_", ",", "response_mean", ",", "response_std", "=", "self", ".", "centroids", "[", "treatment", "]", "\n", "y_this_treatment", "=", "self", ".", "random_generator", ".", "normal", "(", "response_mean", ",", "response_std", ")", "\n", "expected_responses", ".", "append", "(", "\n", "clip_percentage", "(", "y_this_treatment", "+", "self", ".", "random_generator", ".", "normal", "(", "0.0", ",", "self", ".", "epsilon_std", ")", ")", "\n", ")", "\n", "", "expected_responses", "=", "np", ".", "array", "(", "expected_responses", ")", "\n", "\n", "y", "=", "[", "]", "\n", "control_response", ",", "control_distance", "=", "expected_responses", "[", "-", "1", "]", ",", "distances", "[", "-", "1", "]", "\n", "for", "treatment_idx", "in", "range", "(", "self", ".", "num_treatments", ")", ":", "\n", "            ", "this_response", ",", "this_distance", "=", "expected_responses", "[", "treatment_idx", "]", ",", "distances", "[", "treatment_idx", "]", "\n", "y", ".", "append", "(", "this_response", "*", "(", "this_distance", "+", "control_distance", ")", ")", "\n", "", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "\n", "# Invert the expected responses, because a lower percentage of recurrence/death is a better outcome.", "\n", "treatment_chosen", "=", "self", ".", "random_generator", ".", "choice", "(", "self", ".", "num_treatments", ",", "\n", "p", "=", "TCGABenchmark", ".", "stable_softmax", "(", "\n", "self", ".", "strength_of_assignment_bias", "*", "y", ")", "\n", ")", "\n", "\n", "return", "treatment_chosen", ",", "50", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.news_benchmark.NewsBenchmark.get_centroid_weights": [[160, 167], ["map", "numpy.squeeze", "map", "sklearn.metrics.pairwise.euclidean_distances", "news_benchmark.NewsBenchmark.data_access.standardise_entry().reshape", "centroid.reshape", "news_benchmark.NewsBenchmark.data_access.standardise_entry"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.standardise_entry"], ["", "def", "get_centroid_weights", "(", "self", ",", "x", ")", ":", "\n", "        ", "similarities", "=", "map", "(", "\n", "lambda", "centroid", ":", "euclidean_distances", "(", "self", ".", "data_access", ".", "standardise_entry", "(", "x", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "\n", "centroid", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "\n", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "self", ".", "centroids", ")", "\n", ")", "\n", "return", "np", ".", "squeeze", "(", "similarities", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.__init__": [[24, 33], ["perfect_match.data_access.ihdp.data_access.DataAccess"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "data_dir", "=", "kwargs", "[", "\"output_directory\"", "]", "\n", "self", ".", "data_access", "=", "DataAccess", "(", "data_dir", ",", "kwargs", "[", "\"seed\"", "]", ",", "kwargs", "[", "\"experiment_index\"", "]", ")", "\n", "self", ".", "assignment_cache", "=", "{", "}", "\n", "self", ".", "assign_counterfactuals", "=", "False", "\n", "self", ".", "num_treatments", "=", "2", "\n", "self", ".", "seed", "=", "kwargs", "[", "\"seed\"", "]", "\n", "self", ".", "random_generator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_db_file_name": [[34, 37], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_db_file_name", "(", ")", ":", "\n", "        ", "return", "DataAccess", ".", "DB_FILE_NAME", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.filter": [[38, 40], ["None"], "methods", ["None"], ["", "def", "filter", "(", "self", ",", "patients", ")", ":", "\n", "        ", "return", "patients", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.set_assign_counterfactuals": [[41, 43], ["None"], "methods", ["None"], ["", "def", "set_assign_counterfactuals", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "assign_counterfactuals", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_num_treatments": [[44, 46], ["None"], "methods", ["None"], ["", "def", "get_num_treatments", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_treatments", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_data_access": [[47, 49], ["None"], "methods", ["None"], ["", "def", "get_data_access", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_access", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_input_shapes": [[50, 52], ["None"], "methods", ["None"], ["", "def", "get_input_shapes", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "(", "25", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_output_shapes": [[53, 55], ["None"], "methods", ["None"], ["", "def", "get_output_shapes", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.initialise": [[56, 60], ["perfect_match.data_access.ihdp.data_access.DataAccess", "numpy.random.RandomState"], "methods", ["None"], ["", "def", "initialise", "(", "self", ",", "args", ")", ":", "\n", "        ", "data_dir", "=", "args", "[", "\"output_directory\"", "]", "\n", "self", ".", "data_access", "=", "DataAccess", "(", "data_dir", ",", "args", "[", "\"seed\"", "]", ",", "args", "[", "\"experiment_index\"", "]", ")", "\n", "self", ".", "random_generator", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.fit": [[61, 63], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "generator", ",", "steps", ",", "batch_size", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.get_assignment": [[64, 75], ["ihdp_benchmark.IHDPBenchmark._assign"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark._assign"], ["", "def", "get_assignment", "(", "self", ",", "id", ",", "x", ")", ":", "\n", "        ", "if", "id", "not", "in", "self", ".", "assignment_cache", ":", "\n", "            ", "assigned_treatment", ",", "assigned_y", "=", "self", ".", "_assign", "(", "id", ")", "\n", "self", ".", "assignment_cache", "[", "id", "]", "=", "assigned_treatment", ",", "assigned_y", "\n", "\n", "", "assigned_treatment", ",", "assigned_y", "=", "self", ".", "assignment_cache", "[", "id", "]", "\n", "\n", "if", "self", ".", "assign_counterfactuals", ":", "\n", "            ", "return", "assigned_treatment", ",", "assigned_y", "\n", "", "else", ":", "\n", "            ", "return", "assigned_treatment", ",", "assigned_y", "[", "assigned_treatment", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.sigmoid": [[76, 79], ["math.exp"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "sigmoid", "(", "x", ")", ":", "\n", "        ", "return", "1", "/", "(", "1", "+", "math", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark._assign": [[80, 84], ["numpy.array", "ihdp_benchmark.IHDPBenchmark.data_access.get_row", "ihdp_benchmark.IHDPBenchmark.data_access.get_row"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row", "home.repos.pwc.inspect_result.d909b_perfect_match.ihdp.data_access.DataAccess.get_row"], ["", "def", "_assign", "(", "self", ",", "id", ")", ":", "\n", "        ", "treatment_chosen", "=", "self", ".", "data_access", ".", "get_row", "(", "DataAccess", ".", "TABLE_IHDP", ",", "id", ",", "columns", "=", "\"t\"", ")", "[", "0", "]", "\n", "y", "=", "np", ".", "array", "(", "self", ".", "data_access", ".", "get_row", "(", "DataAccess", ".", "TABLE_IHDP", ",", "id", ",", "columns", "=", "\"y0,y1\"", ")", ")", "\n", "return", "treatment_chosen", ",", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm.PSM.__init__": [[27, 29], ["perfect_match.models.baselines.neural_network.NeuralNetwork.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PSM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm.PSM.install_matchit": [[30, 47], ["importr", "len", "robjects.r.options", "rpackages.importr", "rpackages.importr.chooseCRANmirror", "rpackages.importr.chooseCRANmirror", "rpackages.importr.install_packages", "StrVector", "rpackages.isinstalled"], "methods", ["None"], ["", "def", "install_matchit", "(", "self", ")", ":", "\n", "        ", "from", "rpy2", ".", "robjects", ".", "packages", "import", "importr", "\n", "import", "rpy2", ".", "robjects", ".", "packages", "as", "rpackages", "\n", "from", "rpy2", ".", "robjects", ".", "vectors", "import", "StrVector", "\n", "import", "rpy2", ".", "robjects", "as", "robjects", "\n", "\n", "package_names", "=", "[", "\"MatchIt\"", "]", "\n", "\n", "names_to_install", "=", "[", "x", "for", "x", "in", "package_names", "if", "not", "rpackages", ".", "isinstalled", "(", "x", ")", "]", "\n", "if", "len", "(", "names_to_install", ")", ">", "0", ":", "\n", "            ", "robjects", ".", "r", ".", "options", "(", "download_file_method", "=", "'curl'", ")", "\n", "utils", "=", "rpackages", ".", "importr", "(", "'utils'", ")", "\n", "utils", ".", "chooseCRANmirror", "(", "ind", "=", "0", ")", "\n", "utils", ".", "chooseCRANmirror", "(", "ind", "=", "0", ")", "\n", "utils", ".", "install_packages", "(", "StrVector", "(", "names_to_install", ")", ")", "\n", "\n", "", "return", "importr", "(", "\"MatchIt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm.PSM._build": [[48, 59], ["psm.PSM.install_matchit", "numpy2ri.activate", "pandas2ri.activate", "super()._build"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm.PSM.install_matchit", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM._build"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "rpy2", ".", "robjects", "import", "numpy2ri", ",", "pandas2ri", "\n", "match_it", "=", "self", ".", "install_matchit", "(", ")", "\n", "\n", "self", ".", "num_treatments", "=", "kwargs", "[", "\"num_treatments\"", "]", "\n", "self", ".", "batch_size", "=", "kwargs", "[", "\"batch_size\"", "]", "\n", "self", ".", "match_it", "=", "match_it", "\n", "numpy2ri", ".", "activate", "(", ")", "\n", "pandas2ri", ".", "activate", "(", ")", "\n", "\n", "return", "super", "(", "PSM", ",", "self", ")", ".", "_build", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm.PSM.fit_generator": [[60, 63], ["psm.PSM.get_matched_generator", "super().fit_generator"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM.get_matched_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM.fit_generator"], ["", "def", "fit_generator", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "batch_size", ")", ":", "\n", "        ", "train_generator", ",", "train_steps", "=", "self", ".", "get_matched_generator", "(", "train_generator", ",", "train_steps", ")", "\n", "super", "(", "PSM", ",", "self", ")", ".", "fit_generator", "(", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm.PSM.get_matched_generator": [[64, 143], ["range", "Formula", "map", "map", "range", "psm.PSM.get_matched_generator.inner_generator"], "methods", ["None"], ["", "def", "get_matched_generator", "(", "self", ",", "train_generator", ",", "train_steps", ")", ":", "\n", "        ", "from", "rpy2", ".", "robjects", "import", "pandas2ri", "\n", "from", "rpy2", ".", "robjects", "import", "Formula", "\n", "\n", "all_x", ",", "all_y", "=", "[", "]", ",", "[", "]", "\n", "for", "_", "in", "range", "(", "train_steps", ")", ":", "\n", "            ", "x", ",", "y", "=", "next", "(", "train_generator", ")", "\n", "all_x", ".", "append", "(", "x", ")", "\n", "all_y", ".", "append", "(", "y", ")", "\n", "\n", "", "x", ",", "t", ",", "y", "=", "np", ".", "concatenate", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "all_x", ")", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "all_x", ")", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "all_y", ",", "axis", "=", "0", ")", "\n", "\n", "num_features", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "\n", "formula", "=", "Formula", "(", "'t ~ '", "+", "\"+\"", ".", "join", "(", "[", "\"x\"", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "num_features", ")", "]", ")", ")", "\n", "env", "=", "formula", ".", "environment", "\n", "env", "[", "'x'", "]", "=", "x", "\n", "env", "[", "'t'", "]", "=", "t", "\n", "\n", "t_indices", "=", "map", "(", "lambda", "t_idx", ":", "np", ".", "where", "(", "t", "==", "t_idx", ")", "[", "0", "]", ",", "range", "(", "self", ".", "num_treatments", ")", ")", "\n", "t_lens", "=", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "t_indices", ")", "\n", "\n", "undersample", "=", "True", "\n", "base_treatment_idx", "=", "np", ".", "argmin", "(", "t_lens", ")", "if", "undersample", "else", "np", ".", "argmax", "(", "t_lens", ")", "\n", "base_indices", "=", "t_indices", "[", "base_treatment_idx", "]", "\n", "\n", "outer_x", ",", "outer_t", ",", "outer_y", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "treatment_idx", "in", "range", "(", "self", ".", "num_treatments", ")", ":", "\n", "            ", "if", "treatment_idx", "==", "base_treatment_idx", ":", "\n", "                ", "inner_x", ",", "inner_t", ",", "inner_y", "=", "x", "[", "base_indices", "]", ",", "t", "[", "base_indices", "]", ",", "y", "[", "base_indices", "]", "\n", "", "else", ":", "\n", "                ", "other_indices", "=", "t_indices", "[", "treatment_idx", "]", "\n", "\n", "this_x", "=", "np", ".", "concatenate", "(", "[", "x", "[", "base_indices", "]", ",", "x", "[", "other_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "this_t", "=", "np", ".", "concatenate", "(", "[", "[", "0", "]", "*", "len", "(", "base_indices", ")", ",", "[", "1", "]", "*", "len", "(", "other_indices", ")", "]", ",", "axis", "=", "0", ")", "\n", "this_y", "=", "np", ".", "concatenate", "(", "[", "y", "[", "base_indices", "]", ",", "y", "[", "other_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "data", "=", "pd", ".", "DataFrame", "(", "data", "=", "np", ".", "column_stack", "(", "[", "this_x", ",", "this_t", ",", "this_y", "]", ")", ",", "\n", "index", "=", "np", ".", "arange", "(", "len", "(", "this_x", ")", ")", ",", "\n", "columns", "=", "[", "\"x\"", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "num_features", ")", "]", "+", "[", "\"t\"", ",", "\"y\"", "]", ")", "\n", "\n", "try", ":", "\n", "                    ", "out_data", "=", "pandas2ri", ".", "ri2py_dataframe", "(", "\n", "self", ".", "match_it", ".", "match_data", "(", "self", ".", "match_it", ".", "matchit", "(", "formula", ",", "data", "=", "data", ",", "method", "=", "\"nearest\"", ")", ")", "\n", ")", ".", "values", "\n", "inner_x", ",", "inner_t", ",", "inner_y", "=", "out_data", "[", ":", ",", ":", "-", "4", "]", ",", "out_data", "[", ":", ",", "-", "4", "]", ",", "out_data", "[", ":", ",", "-", "3", "]", "\n", "", "except", ":", "\n", "                    ", "print", "(", "\"WARN: MatchIt failed.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "inner_x", ",", "inner_t", ",", "inner_y", "=", "x", "[", "other_indices", "[", "0", ":", "1", "]", "]", ",", "np", ".", "array", "(", "[", "1", "]", ")", ",", "y", "[", "other_indices", "[", "0", ":", "1", "]", "]", "\n", "\n", "", "other_indices", "=", "np", ".", "where", "(", "inner_t", "==", "1", ")", "[", "0", "]", "\n", "inner_x", ",", "inner_t", ",", "inner_y", "=", "inner_x", "[", "other_indices", "]", ",", "inner_t", "[", "other_indices", "]", "*", "treatment_idx", ",", "inner_y", "[", "other_indices", "]", "\n", "", "outer_x", ".", "append", "(", "inner_x", ")", "\n", "outer_t", ".", "append", "(", "inner_t", ")", "\n", "outer_y", ".", "append", "(", "inner_y", ")", "\n", "\n", "", "outer_x", ",", "outer_t", ",", "outer_y", "=", "np", ".", "concatenate", "(", "outer_x", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "outer_t", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "outer_y", ",", "axis", "=", "0", ")", "\n", "\n", "def", "outer_generator", "(", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "out_data", ".", "shape", "[", "0", "]", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "indices", ")", ")", ":", "\n", "                    ", "yield", "outer_x", "[", "idx", "]", ",", "outer_t", "[", "idx", "]", ",", "outer_y", "[", "idx", "]", "\n", "\n", "", "", "", "def", "inner_generator", "(", "wrapped_generator", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "batch_data", "=", "zip", "(", "*", "map", "(", "lambda", "_", ":", "next", "(", "wrapped_generator", ")", ",", "range", "(", "self", ".", "batch_size", ")", ")", ")", "\n", "yield", "[", "np", ".", "array", "(", "batch_data", "[", "0", "]", ")", ",", "np", ".", "array", "(", "batch_data", "[", "1", "]", ")", "]", ",", "np", ".", "array", "(", "batch_data", "[", "2", "]", ")", "\n", "\n", "", "", "new_generator", "=", "inner_generator", "(", "outer_generator", "(", ")", ")", "\n", "train_steps", "=", "max", "(", "outer_x", ".", "shape", "[", "0", "]", "//", "self", ".", "batch_size", ",", "1", ")", "\n", "\n", "return", "new_generator", ",", "train_steps", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ganite.GANITE.__init__": [[26, 29], ["perfect_match.models.baselines.baseline.Baseline.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GANITE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "callbacks", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ganite.GANITE.load": [[30, 32], ["ganite.GANITE.model.load"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "model", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ganite.GANITE._build": [[33, 60], ["perfect_match.models.baselines.ganite_package.ganite_model.GANITEModel"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "best_model_path", "=", "kwargs", "[", "\"best_model_path\"", "]", "\n", "self", ".", "learning_rate", "=", "kwargs", "[", "\"learning_rate\"", "]", "\n", "self", ".", "dropout", "=", "kwargs", "[", "\"dropout\"", "]", "\n", "self", ".", "l2_weight", "=", "kwargs", "[", "\"l2_weight\"", "]", "\n", "self", ".", "num_units", "=", "kwargs", "[", "\"num_units\"", "]", "\n", "self", ".", "num_layers", "=", "kwargs", "[", "\"num_layers\"", "]", "\n", "self", ".", "num_treatments", "=", "kwargs", "[", "\"num_treatments\"", "]", "\n", "self", ".", "imbalance_loss_weight", "=", "kwargs", "[", "\"imbalance_loss_weight\"", "]", "\n", "self", ".", "early_stopping_patience", "=", "kwargs", "[", "\"early_stopping_patience\"", "]", "\n", "self", ".", "early_stopping_on_pehe", "=", "kwargs", "[", "\"early_stopping_on_pehe\"", "]", "\n", "self", ".", "input_dim", "=", "kwargs", "[", "\"input_dim\"", "]", "\n", "self", ".", "output_dim", "=", "kwargs", "[", "\"output_dim\"", "]", "\n", "self", ".", "ganite_weight_alpha", "=", "kwargs", "[", "\"ganite_weight_alpha\"", "]", "\n", "self", ".", "ganite_weight_beta", "=", "kwargs", "[", "\"ganite_weight_beta\"", "]", "\n", "return", "GANITEModel", "(", "self", ".", "input_dim", ",", "\n", "self", ".", "output_dim", ",", "\n", "num_units", "=", "self", ".", "num_units", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "l2_weight", "=", "self", ".", "l2_weight", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "num_layers", "=", "self", ".", "num_layers", ",", "\n", "num_treatments", "=", "self", ".", "num_treatments", ",", "\n", "with_bn", "=", "False", ",", "\n", "nonlinearity", "=", "\"elu\"", ",", "\n", "alpha", "=", "self", ".", "ganite_weight_alpha", ",", "\n", "beta", "=", "self", ".", "ganite_weight_beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ganite.GANITE.fit_generator": [[61, 75], ["ganite.GANITE.model.train"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.train"], ["", "def", "fit_generator", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "batch_size", ")", ":", "\n", "# num_epochs = int(np.ceil(3000 / batch_size))", "\n", "        ", "self", ".", "model", ".", "train", "(", "train_generator", ",", "\n", "train_steps", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "val_generator", "=", "val_generator", ",", "\n", "val_steps", "=", "val_steps", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "l2_weight", "=", "self", ".", "l2_weight", ",", "\n", "imbalance_loss_weight", "=", "self", ".", "imbalance_loss_weight", ",", "\n", "checkpoint_path", "=", "self", ".", "best_model_path", ",", "\n", "early_stopping_patience", "=", "self", ".", "early_stopping_patience", ",", "\n", "early_stopping_on_pehe", "=", "self", ".", "early_stopping_on_pehe", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.tf_neural_network.NeuralNetwork.__init__": [[27, 30], ["perfect_match.models.baselines.baseline.Baseline.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NeuralNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "callbacks", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.tf_neural_network.NeuralNetwork.load": [[31, 33], ["tf_neural_network.NeuralNetwork.model.load"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "model", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.tf_neural_network.NeuralNetwork._build": [[34, 43], ["perfect_match.models.baselines.cfr.cfr_net.CFRNet"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "best_model_path", "=", "kwargs", "[", "\"best_model_path\"", "]", "\n", "self", ".", "learning_rate", "=", "kwargs", "[", "\"learning_rate\"", "]", "\n", "self", ".", "dropout", "=", "kwargs", "[", "\"dropout\"", "]", "\n", "self", ".", "l2_weight", "=", "kwargs", "[", "\"l2_weight\"", "]", "\n", "self", ".", "imbalance_loss_weight", "=", "kwargs", "[", "\"imbalance_loss_weight\"", "]", "\n", "self", ".", "early_stopping_patience", "=", "kwargs", "[", "\"early_stopping_patience\"", "]", "\n", "self", ".", "early_stopping_on_pehe", "=", "kwargs", "[", "\"early_stopping_on_pehe\"", "]", "\n", "return", "CFRNet", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.tf_neural_network.NeuralNetwork.fit_generator": [[44, 62], ["tf_neural_network.NeuralNetwork.model.train", "print", "tf_neural_network.NeuralNetwork.load"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.train", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load"], ["", "def", "fit_generator", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", "train_generator", ",", "\n", "train_steps", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "val_generator", "=", "val_generator", ",", "\n", "val_steps", "=", "val_steps", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "l2_weight", "=", "self", ".", "l2_weight", ",", "\n", "imbalance_loss_weight", "=", "self", ".", "imbalance_loss_weight", ",", "\n", "checkpoint_path", "=", "self", ".", "best_model_path", ",", "\n", "early_stopping_patience", "=", "self", ".", "early_stopping_patience", ",", "\n", "early_stopping_on_pehe", "=", "self", ".", "early_stopping_on_pehe", ")", "\n", "\n", "print", "(", "\"INFO: Resetting to best encountered model at\"", ",", "self", ".", "best_model_path", ",", "\".\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "# Reset to the best model observed in training.", "\n", "self", ".", "load", "(", "self", ".", "best_model_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ordinary_least_squares.OrdinaryLeastSquares1.__init__": [[25, 27], ["perfect_match.models.baselines.baseline.PickleableMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OrdinaryLeastSquares1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ordinary_least_squares.OrdinaryLeastSquares1._build": [[28, 30], ["sklearn.linear_model.LinearRegression"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "LinearRegression", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ordinary_least_squares.OrdinaryLeastSquares1.preprocess": [[31, 33], ["numpy.concatenate", "numpy.expand_dims"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "x", "[", "0", "]", ",", "np", ".", "expand_dims", "(", "x", "[", "1", "]", ",", "axis", "=", "-", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ordinary_least_squares.OrdinaryLeastSquares1.postprocess": [[34, 39], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "y", ")", ":", "\n", "        ", "if", "y", ".", "ndim", ">", "1", ":", "\n", "            ", "return", "y", "[", ":", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ordinary_least_squares.OrdinaryLeastSquares2.__init__": [[42, 44], ["perfect_match.models.baselines.baseline.PickleableMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OrdinaryLeastSquares2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ordinary_least_squares.OrdinaryLeastSquares2._build": [[45, 48], ["sklearn.linear_model.LinearRegression", "range"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "num_treatments", "=", "kwargs", "[", "\"num_treatments\"", "]", "\n", "return", "[", "LinearRegression", "(", ")", "for", "_", "in", "range", "(", "num_treatments", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ordinary_least_squares.OrdinaryLeastSquares2.preprocess": [[49, 51], ["None"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ordinary_least_squares.OrdinaryLeastSquares2.postprocess": [[52, 57], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "y", ")", ":", "\n", "        ", "if", "y", ".", "ndim", ">", "1", ":", "\n", "            ", "return", "y", "[", ":", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ordinary_least_squares.OrdinaryLeastSquares2.predict": [[58, 62], ["numpy.array", "map", "numpy.arange", "ordinary_least_squares.OrdinaryLeastSquares2.predict_for_model", "len", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.predict_for_model"], ["", "", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "map", "(", "lambda", "idx", ":", "self", ".", "predict_for_model", "(", "self", ".", "model", "[", "x", "[", "1", "]", "[", "idx", "]", "]", ",", "\n", "[", "np", ".", "expand_dims", "(", "x", "[", "0", "]", "[", "idx", "]", ",", "axis", "=", "0", ")", ",", "x", "[", "1", "]", "[", "idx", "]", "]", ")", ",", "\n", "np", ".", "arange", "(", "len", "(", "x", "[", "1", "]", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ordinary_least_squares.OrdinaryLeastSquares2.fit_generator": [[63, 77], ["range", "zip", "map", "numpy.concatenate", "ordinary_least_squares.OrdinaryLeastSquares2.split_by_treatment", "ordinary_least_squares.OrdinaryLeastSquares2.keys", "next", "all_outputs.append", "functools.partial", "zip", "ordinary_least_squares.OrdinaryLeastSquares2.model[].fit", "int"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.split_by_treatment", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.fit"], ["", "def", "fit_generator", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "batch_size", ")", ":", "\n", "        ", "all_outputs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "train_steps", ")", ":", "\n", "            ", "generator_output", "=", "next", "(", "train_generator", ")", "\n", "x", ",", "y", "=", "generator_output", "[", "0", "]", ",", "generator_output", "[", "1", "]", "\n", "all_outputs", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "", "x", ",", "y", "=", "zip", "(", "*", "all_outputs", ")", "\n", "x", "=", "map", "(", "partial", "(", "np", ".", "concatenate", ",", "axis", "=", "0", ")", ",", "zip", "(", "*", "x", ")", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "y", ",", "axis", "=", "0", ")", "\n", "\n", "treatment_xy", "=", "self", ".", "split_by_treatment", "(", "x", ",", "y", ")", "\n", "for", "key", "in", "treatment_xy", ".", "keys", "(", ")", ":", "\n", "            ", "x", ",", "y", "=", "treatment_xy", "[", "key", "]", "\n", "self", ".", "model", "[", "int", "(", "key", ")", "]", ".", "fit", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.ordinary_least_squares.OrdinaryLeastSquares2.split_by_treatment": [[78, 84], ["range", "len", "filter", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.filter"], ["", "", "def", "split_by_treatment", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "treatment_xy", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "model", ")", ")", ":", "\n", "            ", "indices", "=", "filter", "(", "lambda", "idx", ":", "x", "[", "1", "]", "[", "idx", "]", "==", "i", ",", "np", ".", "arange", "(", "len", "(", "x", "[", "0", "]", ")", ")", ")", "\n", "treatment_xy", "[", "i", "]", "=", "(", "x", "[", "0", "]", "[", "indices", "]", ",", "y", "[", "indices", "]", ")", "\n", "", "return", "treatment_xy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.gaussian_process.GaussianProcess.__init__": [[24, 26], ["perfect_match.models.baselines.baseline.PickleableMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GaussianProcess", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.gaussian_process.GaussianProcess._build": [[27, 29], ["sklearn.gaussian_process.GaussianProcessRegressor"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "GaussianProcessRegressor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.gaussian_process.GaussianProcess.preprocess": [[30, 32], ["numpy.concatenate", "numpy.atleast_2d", "numpy.expand_dims"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "x", "[", "0", "]", ",", "np", ".", "atleast_2d", "(", "np", ".", "expand_dims", "(", "x", "[", "1", "]", ",", "axis", "=", "-", "1", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.gaussian_process.GaussianProcess.postprocess": [[33, 38], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "y", ")", ":", "\n", "        ", "if", "y", ".", "ndim", ">", "1", ":", "\n", "            ", "return", "y", "[", ":", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.neural_network.NeuralNetwork.__init__": [[30, 33], ["perfect_match.models.baselines.baseline.Baseline.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NeuralNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "callbacks", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.neural_network.NeuralNetwork.load": [[34, 37], ["perfect_match.models.model_factory.ModelFactory.load_weights", "neural_network.NeuralNetwork.model.set_weights"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.load_weights"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "weight_list", "=", "ModelFactory", ".", "load_weights", "(", "path", ")", "\n", "self", ".", "model", ".", "set_weights", "(", "weight_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.neural_network.NeuralNetwork._build": [[38, 45], ["perfect_match.models.model_builder.ModelBuilder.build_tarnet", "perfect_match.models.model_builder.ModelBuilder.build_simple"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_tarnet", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_simple"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "best_model_path", "=", "kwargs", "[", "\"best_model_path\"", "]", "\n", "if", "kwargs", "[", "\"use_tarnet\"", "]", ":", "\n", "            ", "return", "ModelBuilder", ".", "build_tarnet", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "ModelBuilder", ".", "build_simple", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.neural_network.NeuralNetwork.make_callbacks": [[46, 81], ["print", "perfect_match.models.cf_early_stopping.CounterfactualEarlyStopping", "print", "keras.callbacks.EarlyStopping", "perfect_match.models.model_factory.ModelFactoryCheckpoint"], "methods", ["None"], ["", "", "def", "make_callbacks", "(", "self", ",", "val_generator", ",", "val_steps", ",", "**", "kwargs", ")", ":", "\n", "        ", "with_propensity_dropout", "=", "kwargs", "[", "\"with_propensity_dropout\"", "]", "\n", "early_stopping_patience", "=", "kwargs", "[", "\"early_stopping_patience\"", "]", "\n", "early_stopping_on_pehe", "=", "kwargs", "[", "\"early_stopping_on_pehe\"", "]", "\n", "best_model_path", "=", "kwargs", "[", "\"best_model_path\"", "]", "\n", "tb", "=", "kwargs", "[", "\"tensorboard_callback\"", "]", "\n", "\n", "monitor_name", "=", "\"val_dynamic_stitch_loss\"", "if", "with_propensity_dropout", "else", "\"val_loss\"", "\n", "monitor_mode", "=", "\"min\"", "\n", "\n", "if", "early_stopping_on_pehe", ":", "\n", "            ", "print", "(", "\"INFO: Using early stopping on nearest neighbour PEHE.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "early_stopping", "=", "CounterfactualEarlyStopping", "(", "patience", "=", "early_stopping_patience", ",", "\n", "val_generator", "=", "val_generator", ",", "\n", "val_steps", "=", "val_steps", ",", "\n", "benchmark", "=", "self", ".", "kwargs", "[", "\"benchmark\"", "]", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "mode", "=", "monitor_mode", ",", "\n", "min_delta", "=", "0.0001", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"INFO: Using early stopping on the main loss.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "early_stopping", "=", "EarlyStopping", "(", "patience", "=", "early_stopping_patience", ",", "\n", "monitor", "=", "monitor_name", ",", "\n", "mode", "=", "monitor_mode", ",", "\n", "min_delta", "=", "0.0001", ")", "\n", "\n", "", "callbacks", "=", "[", "\n", "early_stopping", ",", "\n", "ModelFactoryCheckpoint", "(", "filepath", "=", "best_model_path", ",", "\n", "save_best_only", "=", "True", ",", "\n", "save_weights_only", "=", "True", ",", "\n", "monitor", "=", "monitor_name", ",", "\n", "mode", "=", "monitor_mode", ")", ",", "\n", "]", "+", "tb", "\n", "return", "callbacks", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.neural_network.NeuralNetwork.fit_generator": [[82, 102], ["perfect_match.models.model_factory.ModelFactory.save_weights", "neural_network.NeuralNetwork.model.fit_generator", "print", "perfect_match.models.model_factory.ModelFactory.load_weights", "neural_network.NeuralNetwork.model.set_weights", "neural_network.NeuralNetwork.make_callbacks"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_weights", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM.fit_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.load_weights", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.neural_network.NeuralNetwork.make_callbacks"], ["", "def", "fit_generator", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "batch_size", ")", ":", "\n", "# Save once in case training does not converge.", "\n", "        ", "ModelFactory", ".", "save_weights", "(", "self", ".", "model", ",", "self", ".", "best_model_path", ")", "\n", "\n", "self", ".", "model", ".", "fit_generator", "(", "train_generator", ",", "\n", "train_steps", ",", "\n", "epochs", "=", "num_epochs", ",", "\n", "validation_data", "=", "val_generator", ",", "\n", "validation_steps", "=", "val_steps", ",", "\n", "callbacks", "=", "self", ".", "make_callbacks", "(", "val_generator", ",", "\n", "val_steps", ",", "\n", "**", "self", ".", "kwargs", ")", ",", "\n", "verbose", "=", "2", ",", "\n", "workers", "=", "0", ")", "\n", "\n", "print", "(", "\"INFO: Resetting to best encountered model at\"", ",", "self", ".", "best_model_path", ",", "\".\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "# Reset to the best model observed in training.", "\n", "weights", "=", "ModelFactory", ".", "load_weights", "(", "self", ".", "best_model_path", ")", "\n", "self", ".", "model", ".", "set_weights", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.random_forest.RandomForest.__init__": [[24, 26], ["perfect_match.models.baselines.baseline.PickleableMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RandomForest", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.random_forest.RandomForest._build": [[27, 31], ["int", "int", "sklearn.ensemble.RandomForestRegressor", "numpy.rint", "numpy.rint"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "num_units", "=", "int", "(", "np", ".", "rint", "(", "kwargs", "[", "\"num_units\"", "]", ")", ")", "\n", "num_layers", "=", "int", "(", "np", ".", "rint", "(", "kwargs", "[", "\"num_layers\"", "]", ")", ")", "\n", "return", "RandomForestRegressor", "(", "n_estimators", "=", "num_units", ",", "max_depth", "=", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.random_forest.RandomForest.preprocess": [[32, 34], ["numpy.concatenate", "numpy.atleast_2d", "numpy.expand_dims"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "x", "[", "0", "]", ",", "np", ".", "atleast_2d", "(", "np", ".", "expand_dims", "(", "x", "[", "1", "]", ",", "axis", "=", "-", "1", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.random_forest.RandomForest.postprocess": [[35, 40], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "y", ")", ":", "\n", "        ", "if", "y", ".", "ndim", ">", "1", ":", "\n", "            ", "return", "y", "[", ":", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.knn.KNearestNeighbours.__init__": [[24, 26], ["perfect_match.models.baselines.baseline.PickleableMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "KNearestNeighbours", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.knn.KNearestNeighbours._build": [[27, 29], ["sklearn.neighbors.KNeighborsRegressor"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "KNeighborsRegressor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.knn.KNearestNeighbours.preprocess": [[30, 32], ["numpy.concatenate", "numpy.expand_dims"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "x", "[", "0", "]", ",", "np", ".", "expand_dims", "(", "x", "[", "1", "]", ",", "axis", "=", "-", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.knn.KNearestNeighbours.postprocess": [[33, 38], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "y", ")", ":", "\n", "        ", "if", "y", ".", "ndim", ">", "1", ":", "\n", "            ", "return", "y", "[", ":", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.bart.BayesianAdditiveRegressionTrees.__init__": [[26, 29], ["perfect_match.models.baselines.baseline.PickleableMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BayesianAdditiveRegressionTrees", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bart", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.bart.BayesianAdditiveRegressionTrees.install_bart": [[30, 54], ["robjects.r.options", "importr", "importr._jinit", "print", "rpackages.importr", "rpackages.importr.chooseCRANmirror", "rpackages.importr.chooseCRANmirror", "importr", "len", "rpackages.importr.install_packages", "StrVector", "numpy.array", "rpackages.isinstalled", "importr._jcall", "importr._jnew"], "methods", ["None"], ["", "def", "install_bart", "(", "self", ")", ":", "\n", "        ", "import", "rpy2", ".", "robjects", ".", "packages", "as", "rpackages", "\n", "from", "rpy2", ".", "robjects", ".", "packages", "import", "importr", "\n", "from", "rpy2", ".", "robjects", ".", "vectors", "import", "StrVector", "\n", "import", "rpy2", ".", "robjects", "as", "robjects", "\n", "\n", "robjects", ".", "r", ".", "options", "(", "download_file_method", "=", "'curl'", ")", "\n", "\n", "# install.packages(\"rJava\")", "\n", "rj", "=", "importr", "(", "\"rJava\"", ",", "robject_translations", "=", "{", "'.env'", ":", "'rj_env'", "}", ")", "\n", "rj", ".", "_jinit", "(", "parameters", "=", "\"-Xmx16g\"", ",", "force_init", "=", "True", ")", "\n", "print", "(", "\"rJava heap size is\"", ",", "np", ".", "array", "(", "rj", ".", "_jcall", "(", "rj", ".", "_jnew", "(", "\"java/lang/Runtime\"", ")", ",", "\"J\"", ",", "\"maxMemory\"", ")", ")", "[", "0", "]", "/", "1e9", ",", "\n", "\"GB.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "package_names", "=", "[", "\"bartMachine\"", "]", "\n", "utils", "=", "rpackages", ".", "importr", "(", "'utils'", ")", "\n", "utils", ".", "chooseCRANmirror", "(", "ind", "=", "0", ")", "\n", "utils", ".", "chooseCRANmirror", "(", "ind", "=", "0", ")", "\n", "\n", "names_to_install", "=", "[", "x", "for", "x", "in", "package_names", "if", "not", "rpackages", ".", "isinstalled", "(", "x", ")", "]", "\n", "if", "len", "(", "names_to_install", ")", ">", "0", ":", "\n", "            ", "utils", ".", "install_packages", "(", "StrVector", "(", "names_to_install", ")", ")", "\n", "\n", "", "return", "importr", "(", "\"bartMachine\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.bart.BayesianAdditiveRegressionTrees._build": [[55, 67], ["int", "bart.BayesianAdditiveRegressionTrees.BayesianAdditiveRegressionTrees.install_bart", "bart.BayesianAdditiveRegressionTrees.BayesianAdditiveRegressionTrees.set_bart_machine_num_cores", "numpy2ri.activate", "pandas2ri.activate", "numpy.rint"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.bart.BayesianAdditiveRegressionTrees.install_bart"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "rpy2", ".", "robjects", "import", "numpy2ri", ",", "pandas2ri", "\n", "n_jobs", "=", "int", "(", "np", ".", "rint", "(", "kwargs", "[", "\"n_jobs\"", "]", ")", ")", "\n", "\n", "bart", "=", "self", ".", "install_bart", "(", ")", "\n", "bart", ".", "set_bart_machine_num_cores", "(", "n_jobs", ")", "\n", "\n", "self", ".", "bart", "=", "bart", "\n", "numpy2ri", ".", "activate", "(", ")", "\n", "pandas2ri", ".", "activate", "(", ")", "\n", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.bart.BayesianAdditiveRegressionTrees.predict_for_model": [[68, 72], ["numpy.array", "r.predict", "perfect_match.models.baselines.baseline.Baseline.to_data_frame", "bart.BayesianAdditiveRegressionTrees.preprocess"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.predict", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.to_data_frame", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.preprocess"], ["", "def", "predict_for_model", "(", "self", ",", "model", ",", "x", ")", ":", "\n", "        ", "import", "rpy2", ".", "robjects", "as", "robjects", "\n", "r", "=", "robjects", ".", "r", "\n", "return", "np", ".", "array", "(", "r", ".", "predict", "(", "self", ".", "model", ",", "Baseline", ".", "to_data_frame", "(", "self", ".", "preprocess", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.bart.BayesianAdditiveRegressionTrees.fit_generator_for_model": [[73, 82], ["bart.BayesianAdditiveRegressionTrees.collect_generator", "bart.BayesianAdditiveRegressionTrees.bart.bartMachine", "perfect_match.models.baselines.baseline.Baseline.to_data_frame", "FloatVector"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.collect_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.to_data_frame"], ["", "def", "fit_generator_for_model", "(", "self", ",", "model", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ")", ":", "\n", "        ", "from", "rpy2", ".", "robjects", ".", "vectors", "import", "StrVector", ",", "IntVector", ",", "FactorVector", ",", "FloatVector", "\n", "x", ",", "y", "=", "self", ".", "collect_generator", "(", "train_generator", ",", "train_steps", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "bart", ".", "bartMachine", "(", "X", "=", "Baseline", ".", "to_data_frame", "(", "x", ")", ",", "\n", "y", "=", "FloatVector", "(", "[", "yy", "for", "yy", "in", "y", "]", ")", ",", "\n", "mem_cache_for_speed", "=", "False", ",", "\n", "seed", "=", "909", ",", "\n", "run_in_sample", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.bart.BayesianAdditiveRegressionTrees.preprocess": [[83, 85], ["numpy.concatenate", "numpy.atleast_2d", "numpy.expand_dims"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "x", "[", "0", "]", ",", "np", ".", "atleast_2d", "(", "np", ".", "expand_dims", "(", "x", "[", "1", "]", ",", "axis", "=", "-", "1", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.bart.BayesianAdditiveRegressionTrees.postprocess": [[86, 88], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "y", "[", ":", ",", "-", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.gradientboosted.GradientBoostedTrees.__init__": [[24, 26], ["perfect_match.models.baselines.baseline.PickleableMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GradientBoostedTrees", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.gradientboosted.GradientBoostedTrees._build": [[27, 31], ["int", "int", "sklearn.ensemble.GradientBoostingClassifier", "numpy.rint", "numpy.rint"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "num_units", "=", "int", "(", "np", ".", "rint", "(", "kwargs", "[", "\"num_units\"", "]", ")", ")", "\n", "num_layers", "=", "int", "(", "np", ".", "rint", "(", "kwargs", "[", "\"num_layers\"", "]", ")", ")", "\n", "return", "GradientBoostingClassifier", "(", "n_estimators", "=", "num_units", ",", "max_depth", "=", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.gradientboosted.GradientBoostedTrees.preprocess": [[32, 34], ["numpy.concatenate", "numpy.atleast_2d", "numpy.expand_dims"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "x", "[", "0", "]", ",", "np", ".", "atleast_2d", "(", "np", ".", "expand_dims", "(", "x", "[", "1", "]", ",", "axis", "=", "-", "1", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.gradientboosted.GradientBoostedTrees.postprocess": [[35, 37], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "y", "[", ":", ",", "-", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.__init__": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.to_data_frame": [[28, 31], ["pandas.DataFrame", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "to_data_frame", "(", "x", ")", ":", "\n", "        ", "return", "pd", ".", "DataFrame", "(", "data", "=", "x", ",", "index", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "columns", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline._build": [[32, 34], ["None"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.build": [[35, 37], ["baseline.Baseline._build"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM._build"], ["", "def", "build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", "=", "self", ".", "_build", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.preprocess": [[38, 40], ["None"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.postprocess": [[41, 43], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.load": [[44, 46], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.save": [[47, 49], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.predict_for_model": [[50, 55], ["hasattr", "baseline.Baseline.postprocess", "baseline.Baseline.postprocess", "model.predict_proba", "model.predict", "baseline.Baseline.preprocess", "baseline.Baseline.preprocess"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.postprocess", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.postprocess", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.predict", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.preprocess", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.preprocess"], ["", "def", "predict_for_model", "(", "self", ",", "model", ",", "x", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "model", ",", "\"predict_proba\"", ")", ":", "\n", "            ", "return", "self", ".", "postprocess", "(", "model", ".", "predict_proba", "(", "self", ".", "preprocess", "(", "x", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "postprocess", "(", "model", ".", "predict", "(", "self", ".", "preprocess", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.predict": [[56, 58], ["baseline.Baseline.predict_for_model"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.predict_for_model"], ["", "", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "predict_for_model", "(", "self", ".", "model", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.fit_generator_for_model": [[59, 62], ["baseline.Baseline.collect_generator", "model.fit"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.collect_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.fit"], ["", "def", "fit_generator_for_model", "(", "self", ",", "model", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "collect_generator", "(", "train_generator", ",", "train_steps", ")", "\n", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.fit_generator": [[63, 65], ["baseline.Baseline.fit_generator_for_model"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.fit_generator_for_model"], ["", "def", "fit_generator", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "fit_generator_for_model", "(", "self", ".", "model", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.Baseline.collect_generator": [[66, 73], ["range", "map", "next", "all_outputs.append", "functools.partial", "zip", "baseline.Baseline.preprocess"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.preprocess"], ["", "def", "collect_generator", "(", "self", ",", "generator", ",", "generator_steps", ")", ":", "\n", "        ", "all_outputs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "generator_steps", ")", ":", "\n", "            ", "generator_output", "=", "next", "(", "generator", ")", "\n", "x", ",", "y", "=", "generator_output", "[", "0", "]", ",", "generator_output", "[", "1", "]", "\n", "all_outputs", ".", "append", "(", "(", "self", ".", "preprocess", "(", "x", ")", ",", "y", ")", ")", "\n", "", "return", "map", "(", "partial", "(", "np", ".", "concatenate", ",", "axis", "=", "0", ")", ",", "zip", "(", "*", "all_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.PickleableMixin.load": [[76, 78], ["perfect_match.models.model_factory.ModelFactory.load_object"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.load_object"], ["    ", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "model", "=", "ModelFactory", ".", "load_object", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.PickleableMixin.save": [[79, 81], ["perfect_match.models.model_factory.ModelFactory.save_object"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_factory.ModelFactory.save_object"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "ModelFactory", ".", "save_object", "(", "self", ".", "model", ",", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.__init__": [[24, 27], ["perfect_match.models.baselines.baseline.PickleableMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CausalForest", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bart", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.install_grf": [[28, 46], ["robjects.r.options", "rpackages.importr", "rpackages.importr.chooseCRANmirror", "rpackages.importr.chooseCRANmirror", "importr", "len", "rpackages.importr.install_packages", "StrVector", "rpackages.isinstalled"], "methods", ["None"], ["", "def", "install_grf", "(", "self", ")", ":", "\n", "        ", "from", "rpy2", ".", "robjects", ".", "packages", "import", "importr", "\n", "import", "rpy2", ".", "robjects", ".", "packages", "as", "rpackages", "\n", "from", "rpy2", ".", "robjects", ".", "vectors", "import", "StrVector", "\n", "import", "rpy2", ".", "robjects", "as", "robjects", "\n", "\n", "robjects", ".", "r", ".", "options", "(", "download_file_method", "=", "'curl'", ")", "\n", "\n", "package_names", "=", "[", "\"grf\"", "]", "\n", "utils", "=", "rpackages", ".", "importr", "(", "'utils'", ")", "\n", "utils", ".", "chooseCRANmirror", "(", "ind", "=", "0", ")", "\n", "utils", ".", "chooseCRANmirror", "(", "ind", "=", "0", ")", "\n", "\n", "names_to_install", "=", "[", "x", "for", "x", "in", "package_names", "if", "not", "rpackages", ".", "isinstalled", "(", "x", ")", "]", "\n", "if", "len", "(", "names_to_install", ")", ">", "0", ":", "\n", "            ", "utils", ".", "install_packages", "(", "StrVector", "(", "names_to_install", ")", ")", "\n", "\n", "", "return", "importr", "(", "\"grf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest._build": [[47, 58], ["causal_forest.CausalForest.install_grf", "numpy2ri.activate", "linear_model.Ridge", "range"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.install_grf"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "rpy2", ".", "robjects", "import", "numpy2ri", "\n", "from", "sklearn", "import", "linear_model", "\n", "grf", "=", "self", ".", "install_grf", "(", ")", "\n", "\n", "self", ".", "grf", "=", "grf", "\n", "numpy2ri", ".", "activate", "(", ")", "\n", "\n", "num_treatments", "=", "kwargs", "[", "\"num_treatments\"", "]", "\n", "return", "[", "linear_model", ".", "Ridge", "(", "alpha", "=", ".5", ")", "]", "+", "[", "None", "for", "_", "in", "range", "(", "num_treatments", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.predict_for_model": [[59, 69], ["perfect_match.models.baselines.baseline.Baseline.predict_for_model", "r.predict", "numpy.array", "causal_forest.CausalForest.preprocess"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.predict_for_model", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.predict", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.preprocess"], ["", "def", "predict_for_model", "(", "self", ",", "model", ",", "x", ")", ":", "\n", "        ", "base_y", "=", "Baseline", ".", "predict_for_model", "(", "self", ",", "self", ".", "model", "[", "0", "]", ",", "x", ")", "\n", "if", "model", "==", "self", ".", "model", "[", "0", "]", ":", "\n", "            ", "return", "base_y", "\n", "", "else", ":", "\n", "            ", "import", "rpy2", ".", "robjects", "as", "robjects", "\n", "r", "=", "robjects", ".", "r", "\n", "result", "=", "r", ".", "predict", "(", "model", ",", "self", ".", "preprocess", "(", "x", ")", ")", "\n", "y", "=", "np", ".", "array", "(", "result", "[", "0", "]", ")", "\n", "return", "y", "[", ":", ",", "-", "1", "]", "+", "base_y", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.fit_grf_model": [[70, 75], ["causal_forest.CausalForest.grf.causal_forest", "FloatVector", "FloatVector", "float", "float"], "methods", ["None"], ["", "", "def", "fit_grf_model", "(", "self", ",", "x", ",", "t", ",", "y", ")", ":", "\n", "        ", "from", "rpy2", ".", "robjects", ".", "vectors", "import", "StrVector", ",", "FactorVector", ",", "FloatVector", ",", "IntVector", "\n", "return", "self", ".", "grf", ".", "causal_forest", "(", "x", ",", "\n", "FloatVector", "(", "[", "float", "(", "yy", ")", "for", "yy", "in", "y", "]", ")", ",", "\n", "FloatVector", "(", "[", "float", "(", "tt", ")", "for", "tt", "in", "t", "]", ")", ",", "seed", "=", "909", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.preprocess": [[76, 78], ["None"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.postprocess": [[79, 81], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.predict": [[82, 101], ["numpy.zeros", "range", "len", "len", "causal_forest.CausalForest.predict.get_x_by_idx"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "def", "get_x_by_idx", "(", "idx", ")", ":", "\n", "            ", "data", "=", "[", "x", "[", "0", "]", "[", "idx", "]", ",", "x", "[", "1", "]", "[", "idx", "]", "]", "\n", "if", "len", "(", "x", ")", "==", "1", ":", "\n", "                ", "data", "[", "0", "]", "=", "np", ".", "expand_dims", "(", "data", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "data", "\n", "\n", "", "results", "=", "np", ".", "zeros", "(", "(", "len", "(", "x", "[", "0", "]", ",", ")", ")", ")", "\n", "for", "treatment_idx", "in", "range", "(", "len", "(", "self", ".", "model", ")", ")", ":", "\n", "            ", "indices", "=", "np", ".", "where", "(", "x", "[", "1", "]", "==", "treatment_idx", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "indices", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "this_x", "=", "get_x_by_idx", "(", "indices", ")", "\n", "y_pred", "=", "np", ".", "array", "(", "self", ".", "predict_for_model", "(", "self", ".", "model", "[", "treatment_idx", "]", ",", "this_x", ")", ")", "\n", "results", "[", "indices", "]", "=", "y_pred", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.fit_generator": [[102, 124], ["range", "zip", "map", "numpy.concatenate", "causal_forest.CausalForest.split_by_treatment", "causal_forest.CausalForest.model[].fit", "causal_forest.CausalForest.keys", "next", "all_outputs.append", "functools.partial", "zip", "causal_forest.CausalForest.fit_grf_model", "numpy.concatenate", "numpy.concatenate", "len", "len", "int"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.split_by_treatment", "home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.fit", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.fit_grf_model"], ["", "def", "fit_generator", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "batch_size", ")", ":", "\n", "        ", "all_outputs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "train_steps", ")", ":", "\n", "            ", "generator_output", "=", "next", "(", "train_generator", ")", "\n", "x", ",", "y", "=", "generator_output", "[", "0", "]", ",", "generator_output", "[", "1", "]", "\n", "all_outputs", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "", "x", ",", "y", "=", "zip", "(", "*", "all_outputs", ")", "\n", "x", "=", "map", "(", "partial", "(", "np", ".", "concatenate", ",", "axis", "=", "0", ")", ",", "zip", "(", "*", "x", ")", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "y", ",", "axis", "=", "0", ")", "\n", "\n", "treatment_xy", "=", "self", ".", "split_by_treatment", "(", "x", ",", "y", ")", "\n", "x_c", ",", "y_c", "=", "treatment_xy", "[", "0", "]", "\n", "self", ".", "model", "[", "0", "]", ".", "fit", "(", "x_c", ",", "y_c", ")", "\n", "\n", "for", "key", "in", "treatment_xy", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "x_i", ",", "y_i", "=", "treatment_xy", "[", "key", "]", "\n", "x", ",", "y", "=", "np", ".", "concatenate", "(", "[", "x_c", ",", "x_i", "]", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "[", "y_c", ",", "y_i", "]", ",", "axis", "=", "0", ")", "\n", "t", "=", "[", "0", "]", "*", "len", "(", "x_c", ")", "+", "[", "1", "]", "*", "len", "(", "x_i", ")", "\n", "self", ".", "model", "[", "int", "(", "key", ")", "]", "=", "self", ".", "fit_grf_model", "(", "x", ",", "t", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.causal_forest.CausalForest.split_by_treatment": [[125, 131], ["range", "len", "filter", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.benchmarks.ihdp_benchmark.IHDPBenchmark.filter"], ["", "", "def", "split_by_treatment", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "treatment_xy", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "model", ")", ")", ":", "\n", "            ", "indices", "=", "filter", "(", "lambda", "idx", ":", "x", "[", "1", "]", "[", "idx", "]", "==", "i", ",", "np", ".", "arange", "(", "len", "(", "x", "[", "0", "]", ")", ")", ")", "\n", "treatment_xy", "[", "i", "]", "=", "(", "x", "[", "0", "]", "[", "indices", "]", ",", "y", "[", "indices", "]", ")", "\n", "", "return", "treatment_xy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM.__init__": [[27, 29], ["perfect_match.models.baselines.neural_network.NeuralNetwork.__init__"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PSM_PBM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM._build": [[30, 40], ["perfect_match.data_access.batch_augmentation.BatchAugmentation", "float", "int", "super()._build", "numpy.rint"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM._build"], ["", "def", "_build", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "kwargs", "\n", "self", ".", "num_treatments", "=", "kwargs", "[", "\"num_treatments\"", "]", "\n", "self", ".", "batch_size", "=", "kwargs", "[", "\"batch_size\"", "]", "\n", "self", ".", "benchmark", "=", "kwargs", "[", "\"benchmark\"", "]", "\n", "self", ".", "batch_augmentation", "=", "BatchAugmentation", "(", ")", "\n", "self", ".", "propensity_batch_probability", "=", "float", "(", "kwargs", "[", "\"propensity_batch_probability\"", "]", ")", "\n", "self", ".", "num_randomised_neighbours", "=", "int", "(", "np", ".", "rint", "(", "kwargs", "[", "\"num_randomised_neighbours\"", "]", ")", ")", "\n", "\n", "return", "super", "(", "PSM_PBM", ",", "self", ")", ".", "_build", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM.fit_generator": [[41, 44], ["psm_pbm.PSM_PBM.get_matched_generator", "super().fit_generator"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM.get_matched_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM.fit_generator"], ["", "def", "fit_generator", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "batch_size", ")", ":", "\n", "        ", "train_generator", ",", "train_steps", "=", "self", ".", "get_matched_generator", "(", "train_generator", ",", "train_steps", ")", "\n", "super", "(", "PSM_PBM", ",", "self", ")", ".", "fit_generator", "(", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.psm_pbm.PSM_PBM.get_matched_generator": [[45, 91], ["range", "map", "map", "psm_pbm.PSM_PBM.batch_augmentation.make_propensity_lists", "psm_pbm.PSM_PBM.batch_augmentation.enhance_batch_with_propensity_matches", "psm_pbm.PSM_PBM.get_matched_generator.inner_generator"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.make_propensity_lists", "home.repos.pwc.inspect_result.d909b_perfect_match.data_access.propensity_batch.PropensityBatch.enhance_batch_with_propensity_matches"], ["", "def", "get_matched_generator", "(", "self", ",", "train_generator", ",", "train_steps", ")", ":", "\n", "        ", "all_x", ",", "all_y", ",", "all_ids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "_", "in", "range", "(", "train_steps", ")", ":", "\n", "            ", "x", ",", "y", "=", "next", "(", "train_generator", ")", "\n", "all_x", ".", "append", "(", "x", ")", "\n", "all_y", ".", "append", "(", "y", ")", "\n", "all_ids", ".", "append", "(", "get_last_id_set", "(", ")", ")", "\n", "\n", "", "x", ",", "t", ",", "y", ",", "ids", "=", "np", ".", "concatenate", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "all_x", ")", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "all_x", ")", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "all_y", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "all_ids", ",", "axis", "=", "0", ")", "\n", "\n", "t_indices", "=", "map", "(", "lambda", "t_idx", ":", "np", ".", "where", "(", "t", "==", "t_idx", ")", "[", "0", "]", ",", "range", "(", "self", ".", "num_treatments", ")", ")", "\n", "t_lens", "=", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "t_indices", ")", "\n", "\n", "self", ".", "batch_augmentation", ".", "make_propensity_lists", "(", "ids", ",", "self", ".", "benchmark", ",", "**", "self", ".", "args", ")", "\n", "\n", "undersample", "=", "True", "\n", "base_treatment_idx", "=", "np", ".", "argmin", "(", "t_lens", ")", "if", "undersample", "else", "np", ".", "argmax", "(", "t_lens", ")", "\n", "base_indices", "=", "t_indices", "[", "base_treatment_idx", "]", "\n", "inner_x", ",", "inner_t", ",", "inner_y", "=", "x", "[", "base_indices", "]", ",", "t", "[", "base_indices", "]", ",", "y", "[", "base_indices", "]", "\n", "\n", "outer_x", ",", "outer_t", ",", "outer_y", "=", "self", ".", "batch_augmentation", ".", "enhance_batch_with_propensity_matches", "(", "self", ".", "benchmark", ",", "\n", "inner_t", ",", "\n", "inner_x", ",", "\n", "inner_y", ",", "\n", "self", ".", "propensity_batch_probability", ",", "\n", "self", ".", "num_randomised_neighbours", ")", "\n", "\n", "def", "outer_generator", "(", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "outer_x", ".", "shape", "[", "0", "]", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "indices", ")", ")", ":", "\n", "                    ", "yield", "outer_x", "[", "idx", "]", ",", "outer_t", "[", "idx", "]", ",", "outer_y", "[", "idx", "]", "\n", "\n", "", "", "", "def", "inner_generator", "(", "wrapped_generator", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "batch_data", "=", "zip", "(", "*", "map", "(", "lambda", "_", ":", "next", "(", "wrapped_generator", ")", ",", "range", "(", "self", ".", "batch_size", ")", ")", ")", "\n", "yield", "[", "np", ".", "array", "(", "batch_data", "[", "0", "]", ")", ",", "np", ".", "array", "(", "batch_data", "[", "1", "]", ")", "]", ",", "np", ".", "array", "(", "batch_data", "[", "2", "]", ")", "\n", "\n", "", "", "new_generator", "=", "inner_generator", "(", "outer_generator", "(", ")", ")", "\n", "train_steps", "=", "max", "(", "outer_x", ".", "shape", "[", "0", "]", "//", "self", ".", "batch_size", ",", "1", ")", "\n", "\n", "return", "new_generator", ",", "train_steps", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build": [[23, 73], ["tensorflow.variance_scaling_initializer", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "ganite_builder.GANITEBuilder.build_counterfactual_block", "ganite_builder.GANITEBuilder.build_ite_block", "tensorflow.one_hot", "tensorflow.reduce_mean", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.cast", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.shape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.range", "tensorflow.squared_difference", "tensorflow.log", "tensorflow.log", "tensorflow.squared_difference", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_counterfactual_block", "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_ite_block", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.log", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.log"], ["    ", "@", "staticmethod", "\n", "def", "build", "(", "input_dim", ",", "output_dim", ",", "num_units", "=", "128", ",", "dropout", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "learning_rate", "=", "0.0001", ",", "num_layers", "=", "2", ",", "\n", "num_treatments", "=", "2", ",", "with_bn", "=", "False", ",", "nonlinearity", "=", "\"elu\"", ",", "initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "alpha", "=", "1.0", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "x", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "shape", "=", "[", "None", ",", "input_dim", "]", ",", "name", "=", "'x'", ")", "\n", "t", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "shape", "=", "[", "None", ",", "1", "]", ",", "name", "=", "'t'", ")", "\n", "y_f", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "shape", "=", "[", "None", ",", "1", "]", ",", "name", "=", "'y_f'", ")", "\n", "y_full", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "shape", "=", "[", "None", ",", "num_treatments", "]", ",", "name", "=", "'y_full'", ")", "\n", "\n", "y_pred_cf", ",", "propensity_scores", ",", "z_g", "=", "GANITEBuilder", ".", "build_counterfactual_block", "(", "input_dim", ",", "x", ",", "t", ",", "y_f", ",", "\n", "num_units", ",", "dropout", ",", "l2_weight", ",", "\n", "learning_rate", ",", "num_layers", ",", "\n", "num_treatments", ",", "with_bn", ",", "\n", "nonlinearity", ",", "initializer", ")", "\n", "\n", "y_pred_ite", ",", "d_ite_pred", ",", "d_ite_true", ",", "z_i", "=", "GANITEBuilder", ".", "build_ite_block", "(", "input_dim", ",", "x", ",", "t", ",", "y_f", ",", "y_full", ",", "\n", "num_units", ",", "dropout", ",", "l2_weight", ",", "\n", "learning_rate", ",", "num_layers", ",", "\n", "num_treatments", ",", "with_bn", ",", "\n", "nonlinearity", ",", "initializer", ")", "\n", "\n", "# Build losses and optimizers.", "\n", "t_one_hot", "=", "tf", ".", "one_hot", "(", "tf", ".", "cast", "(", "t", ",", "\"int32\"", ")", ",", "num_treatments", ")", "\n", "\n", "propensity_loss_cf", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "propensity_scores", ",", "\n", "labels", "=", "t_one_hot", ")", ")", "\n", "\n", "batch_size", "=", "tf", ".", "shape", "(", "y_pred_cf", ")", "[", "0", "]", "\n", "indices", "=", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "batch_size", ")", ",", "tf", ".", "cast", "(", "t", ",", "\"int32\"", ")", "[", ":", ",", "0", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "y_f_pred", "=", "tf", ".", "gather_nd", "(", "y_pred_cf", ",", "indices", ")", "\n", "\n", "y_f_i", "=", "y_f", "# tf.Print(y_f, [y_f[:, 0]], message=\"y_f=\", summarize=8)", "\n", "y_f_pred_i", "=", "y_f_pred", "# tf.Print(y_f_pred, [y_f_pred], message=\"y_f_pred=\", summarize=8)", "\n", "\n", "supervised_loss_cf", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "squared_difference", "(", "y_f_i", "[", ":", ",", "0", "]", ",", "y_f_pred_i", ")", ")", ")", "\n", "\n", "cf_discriminator_loss", "=", "propensity_loss_cf", "\n", "cf_generator_loss", "=", "-", "propensity_loss_cf", "+", "alpha", "*", "supervised_loss_cf", "\n", "\n", "# D_ITE goal: 0 when True, 1 when Pred", "\n", "ite_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "d_ite_true", ")", ")", "+", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "1", "-", "d_ite_pred", ")", ")", "\n", "\n", "y_full_i", "=", "y_full", "# tf.Print(y_full, [y_full], message=\"y_full=\", summarize=8)", "\n", "y_pred_ite_i", "=", "y_pred_ite", "# tf.Print(y_pred_ite, [y_pred_ite], message=\"y_pred_ite=\", summarize=8)", "\n", "supervised_loss_ite", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "squared_difference", "(", "y_full_i", ",", "y_pred_ite_i", ")", ")", ")", "\n", "\n", "ite_discriminator_loss", "=", "-", "ite_loss", "\n", "ite_generator_loss", "=", "ite_loss", "+", "beta", "*", "supervised_loss_ite", "\n", "return", "cf_generator_loss", ",", "cf_discriminator_loss", ",", "ite_generator_loss", ",", "ite_discriminator_loss", ",", "x", ",", "t", ",", "y_f", ",", "y_full", ",", "y_pred_cf", ",", "y_pred_ite", ",", "z_g", ",", "z_i", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_tarnet": [[74, 92], ["tensorflow.variance_scaling_initializer", "cfr.util.build_mlp", "range", "tensorflow.reshape", "tensorflow.gather", "cfr.util.build_mlp", "tensorflow.layers.dense", "all_indices.append", "outputs.append", "tensorflow.concat", "tensorflow.to_int32", "tensorflow.where", "tensorflow.equal", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp"], ["", "@", "staticmethod", "\n", "def", "build_tarnet", "(", "mlp_input", ",", "t", ",", "input_dim", ",", "num_layers", ",", "num_units", ",", "dropout", ",", "num_treatments", ",", "nonlinearity", ")", ":", "\n", "        ", "initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", "\n", "x", "=", "build_mlp", "(", "mlp_input", ",", "num_layers", ",", "num_units", ",", "dropout", ",", "nonlinearity", ")", "\n", "\n", "all_indices", ",", "outputs", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_treatments", ")", ":", "\n", "            ", "indices", "=", "tf", ".", "reshape", "(", "tf", ".", "to_int32", "(", "tf", ".", "where", "(", "tf", ".", "equal", "(", "tf", ".", "reshape", "(", "t", ",", "(", "-", "1", ",", ")", ")", ",", "i", ")", ")", ")", ",", "(", "-", "1", ",", ")", ")", "\n", "current_last_layer_h", "=", "tf", ".", "gather", "(", "x", ",", "indices", ")", "\n", "\n", "last_layer", "=", "build_mlp", "(", "current_last_layer_h", ",", "num_layers", ",", "num_units", ",", "dropout", ",", "nonlinearity", ")", "\n", "\n", "output", "=", "tf", ".", "layers", ".", "dense", "(", "last_layer", ",", "units", "=", "num_treatments", ",", "use_bias", "=", "True", ",", "\n", "bias_initializer", "=", "initializer", ")", "\n", "\n", "all_indices", ".", "append", "(", "indices", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "", "return", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "-", "1", ")", ",", "all_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_counterfactual_block": [[93, 111], ["tensorflow.variance_scaling_initializer", "ganite_builder.GANITEBuilder.build_counterfactual_generator", "ganite_builder.GANITEBuilder.build_counterfactual_discriminator"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_counterfactual_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_counterfactual_discriminator"], ["", "@", "staticmethod", "\n", "def", "build_counterfactual_block", "(", "input_dim", ",", "x", ",", "t", ",", "y_f", ",", "num_units", "=", "128", ",", "dropout", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "\n", "learning_rate", "=", "0.0001", ",", "num_layers", "=", "2", ",", "\n", "num_treatments", "=", "2", ",", "with_bn", "=", "False", ",", "nonlinearity", "=", "\"elu\"", ",", "\n", "initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", ")", ":", "\n", "\n", "        ", "y_pred", ",", "z_g", "=", "GANITEBuilder", ".", "build_counterfactual_generator", "(", "input_dim", ",", "x", ",", "t", ",", "y_f", ",", "num_units", ",", "\n", "dropout", ",", "l2_weight", ",", "learning_rate", ",", "\n", "num_layers", ",", "num_treatments", ",", "with_bn", ",", "\n", "nonlinearity", ",", "\n", "initializer", ")", "\n", "\n", "propensity_scores", "=", "GANITEBuilder", ".", "build_counterfactual_discriminator", "(", "input_dim", ",", "x", ",", "t", ",", "y_pred", ",", "num_units", ",", "\n", "dropout", ",", "l2_weight", ",", "learning_rate", ",", "\n", "num_layers", ",", "num_treatments", ",", "with_bn", ",", "\n", "nonlinearity", ",", "\n", "initializer", ")", "\n", "return", "y_pred", ",", "propensity_scores", ",", "z_g", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_counterfactual_generator": [[112, 127], ["tensorflow.variance_scaling_initializer", "cfr.util.get_nonlinearity_by_name", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.concat", "cfr.util.build_mlp", "tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp"], ["", "@", "staticmethod", "\n", "def", "build_counterfactual_generator", "(", "input_dim", ",", "x", ",", "t", ",", "y_f", ",", "num_units", "=", "128", ",", "dropout", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "\n", "learning_rate", "=", "0.0001", ",", "num_layers", "=", "2", ",", "\n", "num_treatments", "=", "2", ",", "with_bn", "=", "False", ",", "nonlinearity", "=", "\"elu\"", ",", "\n", "initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", ")", ":", "\n", "        ", "nonlinearity", "=", "get_nonlinearity_by_name", "(", "nonlinearity", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"g_cf\"", ",", "\n", "initializer", "=", "initializer", ")", ":", "\n", "            ", "z_g", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "shape", "=", "[", "None", ",", "num_treatments", "-", "1", "]", ",", "name", "=", "'z_g'", ")", "\n", "\n", "mlp_input", "=", "tf", ".", "concat", "(", "[", "x", ",", "y_f", ",", "t", ",", "z_g", "]", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "build_mlp", "(", "mlp_input", ",", "num_layers", ",", "num_units", ",", "dropout", ",", "nonlinearity", ")", "\n", "y", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "units", "=", "num_treatments", ",", "use_bias", "=", "True", ",", "\n", "bias_initializer", "=", "initializer", ")", "\n", "return", "y", ",", "z_g", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_counterfactual_discriminator": [[128, 143], ["tensorflow.variance_scaling_initializer", "cfr.util.get_nonlinearity_by_name", "tensorflow.variable_scope", "tensorflow.concat", "cfr.util.build_mlp", "tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp"], ["", "", "@", "staticmethod", "\n", "def", "build_counterfactual_discriminator", "(", "input_dim", ",", "x", ",", "t", ",", "y_pred", ",", "num_units", "=", "128", ",", "dropout", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "\n", "learning_rate", "=", "0.0001", ",", "num_layers", "=", "2", ",", "\n", "num_treatments", "=", "2", ",", "with_bn", "=", "False", ",", "nonlinearity", "=", "\"elu\"", ",", "\n", "initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "reuse", "=", "False", ")", ":", "\n", "        ", "nonlinearity", "=", "get_nonlinearity_by_name", "(", "nonlinearity", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"d_cf\"", ",", "\n", "reuse", "=", "reuse", ",", "\n", "initializer", "=", "initializer", ")", ":", "\n", "            ", "mlp_input", "=", "tf", ".", "concat", "(", "[", "x", ",", "y_pred", "]", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "build_mlp", "(", "mlp_input", ",", "num_layers", ",", "num_units", ",", "dropout", ",", "nonlinearity", ")", "\n", "propensity_scores", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "units", "=", "num_treatments", ",", "use_bias", "=", "True", ",", "\n", "bias_initializer", "=", "initializer", ")", "\n", "return", "propensity_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_ite_block": [[145, 166], ["tensorflow.variance_scaling_initializer", "ganite_builder.GANITEBuilder.build_ite_generator", "ganite_builder.GANITEBuilder.build_ite_discriminator", "ganite_builder.GANITEBuilder.build_ite_discriminator"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_ite_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_ite_discriminator", "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_ite_discriminator"], ["", "", "@", "staticmethod", "\n", "def", "build_ite_block", "(", "input_dim", ",", "x", ",", "t", ",", "y_f", ",", "y_full", ",", "num_units", "=", "128", ",", "dropout", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "\n", "learning_rate", "=", "0.0001", ",", "num_layers", "=", "2", ",", "\n", "num_treatments", "=", "2", ",", "with_bn", "=", "False", ",", "nonlinearity", "=", "\"elu\"", ",", "\n", "initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", ")", ":", "\n", "        ", "y_pred_ite", ",", "z_i", "=", "GANITEBuilder", ".", "build_ite_generator", "(", "input_dim", ",", "x", ",", "t", ",", "y_f", ",", "num_units", ",", "\n", "dropout", ",", "l2_weight", ",", "learning_rate", ",", "\n", "num_layers", ",", "num_treatments", ",", "with_bn", ",", "\n", "nonlinearity", ",", "initializer", ")", "\n", "\n", "d_ite_pred", "=", "GANITEBuilder", ".", "build_ite_discriminator", "(", "input_dim", ",", "x", ",", "t", ",", "y_pred_ite", ",", "num_units", ",", "\n", "dropout", ",", "l2_weight", ",", "learning_rate", ",", "\n", "num_layers", ",", "num_treatments", ",", "with_bn", ",", "\n", "nonlinearity", ",", "initializer", ",", "reuse", "=", "False", ")", "\n", "\n", "d_ite_true", "=", "GANITEBuilder", ".", "build_ite_discriminator", "(", "input_dim", ",", "x", ",", "t", ",", "y_full", ",", "num_units", ",", "\n", "dropout", ",", "l2_weight", ",", "learning_rate", ",", "\n", "num_layers", ",", "num_treatments", ",", "with_bn", ",", "\n", "nonlinearity", ",", "initializer", ",", "reuse", "=", "True", ")", "\n", "\n", "return", "y_pred_ite", ",", "d_ite_pred", ",", "d_ite_true", ",", "z_i", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_ite_generator": [[167, 181], ["tensorflow.variance_scaling_initializer", "cfr.util.get_nonlinearity_by_name", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.concat", "cfr.util.build_mlp", "tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp"], ["", "@", "staticmethod", "\n", "def", "build_ite_generator", "(", "input_dim", ",", "x", ",", "t", ",", "y_f", ",", "num_units", "=", "128", ",", "dropout", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "\n", "learning_rate", "=", "0.0001", ",", "num_layers", "=", "2", ",", "\n", "num_treatments", "=", "2", ",", "with_bn", "=", "False", ",", "nonlinearity", "=", "\"elu\"", ",", "\n", "initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", ")", ":", "\n", "        ", "nonlinearity", "=", "get_nonlinearity_by_name", "(", "nonlinearity", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"g_ite\"", ",", "\n", "initializer", "=", "initializer", ")", ":", "\n", "            ", "z_i", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "shape", "=", "[", "None", ",", "num_treatments", "]", ",", "name", "=", "'z_i'", ")", "\n", "mlp_input", "=", "tf", ".", "concat", "(", "[", "x", ",", "z_i", "]", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "build_mlp", "(", "mlp_input", ",", "num_layers", ",", "num_units", ",", "dropout", ",", "nonlinearity", ")", "\n", "y_pred", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "units", "=", "num_treatments", ",", "use_bias", "=", "True", ",", "\n", "bias_initializer", "=", "initializer", ")", "\n", "return", "y_pred", ",", "z_i", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build_ite_discriminator": [[182, 197], ["tensorflow.variance_scaling_initializer", "cfr.util.get_nonlinearity_by_name", "tensorflow.variable_scope", "tensorflow.concat", "cfr.util.build_mlp", "tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp"], ["", "", "@", "staticmethod", "\n", "def", "build_ite_discriminator", "(", "input_dim", ",", "x", ",", "t", ",", "y_pred", ",", "num_units", "=", "128", ",", "dropout", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "\n", "learning_rate", "=", "0.0001", ",", "num_layers", "=", "2", ",", "\n", "num_treatments", "=", "2", ",", "with_bn", "=", "False", ",", "nonlinearity", "=", "\"elu\"", ",", "\n", "initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "reuse", "=", "False", ")", ":", "\n", "        ", "nonlinearity", "=", "get_nonlinearity_by_name", "(", "nonlinearity", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"d_ite\"", ",", "\n", "reuse", "=", "reuse", ",", "\n", "initializer", "=", "initializer", ")", ":", "\n", "            ", "mlp_input", "=", "tf", ".", "concat", "(", "[", "x", ",", "y_pred", "]", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "build_mlp", "(", "mlp_input", ",", "num_layers", ",", "num_units", ",", "dropout", ",", "nonlinearity", ")", "\n", "y", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "units", "=", "1", ",", "use_bias", "=", "True", ",", "\n", "bias_initializer", "=", "initializer", ",", "activation", "=", "tf", ".", "nn", ".", "sigmoid", ")", "\n", "return", "y", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.__init__": [[27, 51], ["tensorflow.variance_scaling_initializer", "tensorflow.ConfigProto", "tensorflow.Session", "perfect_match.models.baselines.ganite_package.ganite_builder.GANITEBuilder.build"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_builder.GANITEBuilder.build"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "num_units", "=", "128", ",", "dropout", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "learning_rate", "=", "0.0001", ",", "num_layers", "=", "2", ",", "\n", "num_treatments", "=", "2", ",", "with_bn", "=", "False", ",", "nonlinearity", "=", "\"elu\"", ",", "initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "alpha", "=", "1.0", ",", "beta", "=", "1.0", ")", ":", "\n", "\n", "        ", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "self", ".", "num_treatments", "=", "num_treatments", "\n", "\n", "self", ".", "cf_generator_loss", ",", "self", ".", "cf_discriminator_loss", ",", "self", ".", "ite_generator_loss", ",", "self", ".", "ite_discriminator_loss", ",", "self", ".", "x", ",", "self", ".", "t", ",", "self", ".", "y_f", ",", "self", ".", "y_full", ",", "self", ".", "y_pred_cf", ",", "self", ".", "y_pred_ite", ",", "self", ".", "z_g", ",", "self", ".", "z_i", "=", "GANITEBuilder", ".", "build", "(", "input_dim", ",", "output_dim", ",", "\n", "num_units", "=", "num_units", ",", "\n", "dropout", "=", "dropout", ",", "\n", "l2_weight", "=", "l2_weight", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "num_treatments", "=", "num_treatments", ",", "\n", "with_bn", "=", "with_bn", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "\n", "initializer", "=", "initializer", ",", "\n", "alpha", "=", "alpha", ",", "\n", "beta", "=", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_scoped_variables": [[52, 57], ["tensorflow.trainable_variables"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_scoped_variables", "(", "scope_name", ")", ":", "\n", "        ", "t_vars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "vars", "=", "[", "var", "for", "var", "in", "t_vars", "if", "scope_name", "in", "var", ".", "name", "]", "\n", "return", "vars", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_cf_generator_vairables": [[58, 61], ["ganite_model.GANITEModel.get_scoped_variables"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_scoped_variables"], ["", "@", "staticmethod", "\n", "def", "get_cf_generator_vairables", "(", ")", ":", "\n", "        ", "return", "GANITEModel", ".", "get_scoped_variables", "(", "\"g_cf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_cf_discriminator_vairables": [[62, 65], ["ganite_model.GANITEModel.get_scoped_variables"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_scoped_variables"], ["", "@", "staticmethod", "\n", "def", "get_cf_discriminator_vairables", "(", ")", ":", "\n", "        ", "return", "GANITEModel", ".", "get_scoped_variables", "(", "\"d_cf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_ite_generator_vairables": [[66, 69], ["ganite_model.GANITEModel.get_scoped_variables"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_scoped_variables"], ["", "@", "staticmethod", "\n", "def", "get_ite_generator_vairables", "(", ")", ":", "\n", "        ", "return", "GANITEModel", ".", "get_scoped_variables", "(", "\"g_ite\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_ite_discriminator_vairables": [[70, 73], ["ganite_model.GANITEModel.get_scoped_variables"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_scoped_variables"], ["", "@", "staticmethod", "\n", "def", "get_ite_discriminator_vairables", "(", ")", ":", "\n", "        ", "return", "GANITEModel", ".", "get_scoped_variables", "(", "\"d_ite\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.load": [[74, 76], ["tensorflow.train.Saver"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "# saver.restore(self.sess, path)", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.train": [[78, 156], ["tensorflow.train.Saver", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.train.AdamOptimizer.minimize", "ganite_model.GANITEModel.sess.run", "range", "range", "tensorflow.global_variables_initializer", "range", "ganite_model.GANITEModel.run_generator", "ganite_model.GANITEModel.run_generator", "ganite_model.GANITEModel.print_losses", "range", "ganite_model.GANITEModel.run_generator", "ganite_model.GANITEModel.run_generator", "ganite_model.GANITEModel.print_losses", "ganite_model.GANITEModel.get_cf_generator_vairables", "ganite_model.GANITEModel.get_cf_discriminator_vairables", "ganite_model.GANITEModel.get_ite_generator_vairables", "ganite_model.GANITEModel.get_ite_discriminator_vairables", "numpy.finfo", "ganite_model.GANITEModel.run_generator", "ganite_model.GANITEModel.run_generator", "numpy.finfo", "ganite_model.GANITEModel.run_generator", "ganite_model.GANITEModel.run_generator"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.run_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.run_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.print_losses", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.run_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.run_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.print_losses", "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_cf_generator_vairables", "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_cf_discriminator_vairables", "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_ite_generator_vairables", "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.get_ite_discriminator_vairables", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.run_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.run_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.run_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.run_generator"], ["", "def", "train", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "\n", "learning_rate", ",", "learning_rate_decay", "=", "0.97", ",", "iterations_per_decay", "=", "100", ",", "\n", "dropout", "=", "0.0", ",", "imbalance_loss_weight", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "checkpoint_path", "=", "\"\"", ",", "\n", "early_stopping_patience", "=", "12", ",", "early_stopping_on_pehe", "=", "False", ")", ":", "\n", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "0", ")", "\n", "\n", "global_step_1", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "dtype", "=", "\"int64\"", ")", "\n", "global_step_2", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "dtype", "=", "\"int64\"", ")", "\n", "global_step_3", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "dtype", "=", "\"int64\"", ")", "\n", "global_step_4", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "dtype", "=", "\"int64\"", ")", "\n", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", "\n", "train_step_g_cf", "=", "opt", ".", "minimize", "(", "self", ".", "cf_generator_loss", ",", "global_step", "=", "global_step_1", ",", "\n", "var_list", "=", "GANITEModel", ".", "get_cf_generator_vairables", "(", ")", ")", "\n", "train_step_d_cf", "=", "opt", ".", "minimize", "(", "self", ".", "cf_discriminator_loss", ",", "global_step", "=", "global_step_2", ",", "\n", "var_list", "=", "GANITEModel", ".", "get_cf_discriminator_vairables", "(", ")", ")", "\n", "train_step_g_ite", "=", "opt", ".", "minimize", "(", "self", ".", "ite_generator_loss", ",", "global_step", "=", "global_step_3", ",", "\n", "var_list", "=", "GANITEModel", ".", "get_ite_generator_vairables", "(", ")", ")", "\n", "train_step_d_ite", "=", "opt", ".", "minimize", "(", "self", ".", "ite_discriminator_loss", ",", "global_step", "=", "global_step_4", ",", "\n", "var_list", "=", "GANITEModel", ".", "get_ite_discriminator_vairables", "(", ")", ")", "\n", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "best_val_loss", ",", "num_epochs_without_improvement", "=", "np", ".", "finfo", "(", "float", ")", ".", "max", ",", "0", "\n", "for", "epoch_idx", "in", "range", "(", "num_epochs", ")", ":", "\n", "            ", "for", "step_idx", "in", "range", "(", "train_steps", ")", ":", "\n", "                ", "train_losses_g", "=", "self", ".", "run_generator", "(", "train_generator", ",", "1", ",", "self", ".", "cf_generator_loss", ",", "train_step_g_cf", ")", "\n", "train_losses_d", "=", "self", ".", "run_generator", "(", "train_generator", ",", "1", ",", "self", ".", "cf_discriminator_loss", ",", "train_step_d_cf", ")", "\n", "\n", "", "val_losses_g", "=", "self", ".", "run_generator", "(", "val_generator", ",", "val_steps", ",", "self", ".", "cf_generator_loss", ")", "\n", "val_losses_d", "=", "self", ".", "run_generator", "(", "val_generator", ",", "val_steps", ",", "self", ".", "cf_discriminator_loss", ")", "\n", "\n", "current_val_loss", "=", "val_losses_g", "[", "0", "]", "\n", "do_save", "=", "current_val_loss", "<", "best_val_loss", "\n", "if", "do_save", ":", "\n", "                ", "num_epochs_without_improvement", "=", "0", "\n", "best_val_loss", "=", "current_val_loss", "\n", "# saver.save(self.sess, checkpoint_path)", "\n", "", "else", ":", "\n", "                ", "num_epochs_without_improvement", "+=", "1", "\n", "\n", "", "self", ".", "print_losses", "(", "epoch_idx", ",", "num_epochs", ",", "\n", "[", "train_losses_g", "[", "0", "]", ",", "train_losses_d", "[", "0", "]", "]", ",", "\n", "[", "val_losses_g", "[", "0", "]", ",", "val_losses_d", "[", "0", "]", "]", ",", "\n", "do_save", ")", "\n", "\n", "if", "num_epochs_without_improvement", ">=", "early_stopping_patience", ":", "\n", "                ", "break", "\n", "\n", "", "", "best_val_loss", ",", "num_epochs_without_improvement", "=", "np", ".", "finfo", "(", "float", ")", ".", "max", ",", "0", "\n", "for", "epoch_idx", "in", "range", "(", "num_epochs", ")", ":", "\n", "            ", "for", "step_idx", "in", "range", "(", "train_steps", ")", ":", "\n", "                ", "train_losses_g", "=", "self", ".", "run_generator", "(", "train_generator", ",", "1", ",", "self", ".", "ite_generator_loss", ",", "train_step_g_ite", ",", "\n", "include_y_full", "=", "True", ")", "\n", "train_losses_d", "=", "self", ".", "run_generator", "(", "train_generator", ",", "1", ",", "self", ".", "ite_discriminator_loss", ",", "train_step_d_ite", ",", "\n", "include_y_full", "=", "True", ")", "\n", "", "val_losses_g", "=", "self", ".", "run_generator", "(", "val_generator", ",", "val_steps", ",", "self", ".", "ite_generator_loss", ",", "\n", "include_y_full", "=", "True", ")", "\n", "val_losses_d", "=", "self", ".", "run_generator", "(", "val_generator", ",", "val_steps", ",", "self", ".", "ite_discriminator_loss", ",", "\n", "include_y_full", "=", "True", ")", "\n", "\n", "current_val_loss", "=", "val_losses_g", "[", "0", "]", "\n", "do_save", "=", "current_val_loss", "<", "best_val_loss", "\n", "if", "do_save", ":", "\n", "                ", "num_epochs_without_improvement", "=", "0", "\n", "best_val_loss", "=", "current_val_loss", "\n", "# saver.save(self.sess, checkpoint_path)", "\n", "", "else", ":", "\n", "                ", "num_epochs_without_improvement", "+=", "1", "\n", "\n", "", "self", ".", "print_losses", "(", "epoch_idx", ",", "num_epochs", ",", "\n", "[", "train_losses_g", "[", "0", "]", ",", "train_losses_d", "[", "0", "]", "]", ",", "\n", "[", "val_losses_g", "[", "0", "]", ",", "val_losses_d", "[", "0", "]", "]", ",", "\n", "do_save", ")", "\n", "\n", "if", "num_epochs_without_improvement", ">=", "early_stopping_patience", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.print_losses": [[157, 166], ["print"], "methods", ["None"], ["", "", "", "def", "print_losses", "(", "self", ",", "epoch_idx", ",", "num_epochs", ",", "train_losses", ",", "val_losses", ",", "did_save", "=", "False", ")", ":", "\n", "        ", "print", "(", "\"Epoch [{:04d}/{:04d}] {:} TRAIN: G={:.3f} D={:.3f} VAL: G={:.3f} D={:.3f}\"", "\n", ".", "format", "(", "\n", "epoch_idx", ",", "num_epochs", ",", "\n", "\"xx\"", "if", "did_save", "else", "\"::\"", ",", "\n", "train_losses", "[", "0", "]", ",", "train_losses", "[", "1", "]", ",", "\n", "val_losses", "[", "0", "]", ",", "val_losses", "[", "1", "]", "\n", ")", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.run_generator": [[167, 193], ["range", "numpy.mean", "next", "numpy.expand_dims", "numpy.expand_dims", "len", "losses.append", "numpy.random.uniform", "numpy.random.uniform", "ganite_model.GANITEModel._predict_g_cf", "ganite_model.GANITEModel.sess.run", "ganite_model.GANITEModel.sess.run", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel._predict_g_cf", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run"], ["", "def", "run_generator", "(", "self", ",", "generator", ",", "steps", ",", "loss", ",", "train_step", "=", "None", ",", "include_y_full", "=", "False", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "for", "iter_idx", "in", "range", "(", "steps", ")", ":", "\n", "            ", "(", "x_batch", ",", "t_batch", ")", ",", "y_batch", "=", "next", "(", "generator", ")", "\n", "t_batch", "=", "np", ".", "expand_dims", "(", "t_batch", ",", "axis", "=", "-", "1", ")", "\n", "y_batch", "=", "np", ".", "expand_dims", "(", "y_batch", ",", "axis", "=", "-", "1", ")", "\n", "\n", "batch_size", "=", "len", "(", "x_batch", ")", "\n", "feed_dict", "=", "{", "\n", "self", ".", "x", ":", "x_batch", ",", "\n", "self", ".", "t", ":", "t_batch", ",", "\n", "self", ".", "y_f", ":", "y_batch", ",", "\n", "self", ".", "z_g", ":", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "batch_size", ",", "self", ".", "num_treatments", "-", "1", ")", ")", ",", "\n", "self", ".", "z_i", ":", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "batch_size", ",", "self", ".", "num_treatments", ")", ")", "\n", "}", "\n", "if", "include_y_full", ":", "\n", "                ", "y_pred", "=", "self", ".", "_predict_g_cf", "(", "[", "x_batch", ",", "t_batch", "]", ",", "y_batch", ")", "\n", "y_pred", "[", "np", ".", "arange", "(", "len", "(", "y_pred", ")", ")", ",", "t_batch", "]", "=", "y_batch", "\n", "feed_dict", "[", "self", ".", "y_full", "]", "=", "y_pred", "\n", "\n", "", "if", "train_step", "is", "not", "None", ":", "\n", "                ", "self", ".", "sess", ".", "run", "(", "train_step", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "", "losses", ".", "append", "(", "self", ".", "sess", ".", "run", "(", "[", "loss", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "losses", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel._predict_g_cf": [[194, 203], ["len", "ganite_model.GANITEModel.sess.run", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run"], ["", "def", "_predict_g_cf", "(", "self", ",", "x", ",", "y_f", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "x", "[", "0", "]", ")", "\n", "y_pred", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "y_pred_cf", ",", "feed_dict", "=", "{", "\n", "self", ".", "x", ":", "x", "[", "0", "]", ",", "\n", "self", ".", "t", ":", "x", "[", "1", "]", ",", "\n", "self", ".", "y_f", ":", "y_f", ",", "\n", "self", ".", "z_g", ":", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "batch_size", ",", "self", ".", "num_treatments", "-", "1", ")", ")", "\n", "}", ")", "\n", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.ganite_package.ganite_model.GANITEModel.predict": [[204, 212], ["len", "ganite_model.GANITEModel.sess.run", "numpy.array", "map", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "x", "[", "0", "]", ")", "\n", "y_pred", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "y_pred_ite", ",", "feed_dict", "=", "{", "\n", "self", ".", "x", ":", "x", "[", "0", "]", ",", "\n", "self", ".", "z_i", ":", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "batch_size", ",", "self", ".", "num_treatments", ")", ")", "\n", "}", ")", "\n", "y_pred", "=", "np", ".", "array", "(", "map", "(", "lambda", "inner", ",", "idx", ":", "inner", "[", "idx", "]", ",", "y_pred", ",", "x", "[", "1", "]", ")", ")", "\n", "return", "y_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.__init__": [[20, 37], ["tensorflow.ConfigProto", "tensorflow.Session", "get_nonlinearity_by_name", "cfr_net.CFRNet._build_graph"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._build_graph"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "num_units", ",", "num_layers", "=", "1", ",", "nonlinearity", "=", "\"elu\"", ",", "\n", "weight_initialisation_std", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "variables", "=", "{", "}", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "self", ".", "weight_decay_loss", "=", "0", "\n", "self", ".", "imbalance_loss_weight_param", "=", "kwargs", "[", "\"imbalance_loss_weight\"", "]", "\n", "self", ".", "benchmark", "=", "kwargs", "[", "\"benchmark\"", "]", "\n", "self", ".", "with_pehe_loss", "=", "kwargs", "[", "\"with_pehe_loss\"", "]", "\n", "self", ".", "num_treatments", "=", "kwargs", "[", "\"num_treatments\"", "]", "\n", "self", ".", "nonlinearity", "=", "get_nonlinearity_by_name", "(", "nonlinearity", ")", "\n", "\n", "self", ".", "_build_graph", "(", "input_dim", ",", "num_units", ",", "\n", "num_representation_layers", "=", "num_layers", ",", "\n", "num_regression_layers", "=", "num_layers", ",", "\n", "weight_initialisation_std", "=", "weight_initialisation_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.load": [[38, 41], ["tensorflow.train.Saver", "tensorflow.train.Saver.restore"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "self", ".", "variables", ")", "\n", "saver", ".", "restore", "(", "self", ".", "sess", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._add_variable": [[42, 51], ["None"], "methods", ["None"], ["", "def", "_add_variable", "(", "self", ",", "var", ",", "name", ")", ":", "\n", "        ", "''' Adds variables to the internal track-keeper '''", "\n", "basename", "=", "name", "\n", "i", "=", "0", "\n", "while", "name", "in", "self", ".", "variables", ":", "\n", "            ", "name", "=", "'%s_%d'", "%", "(", "basename", ",", "i", ")", "#@TODO: not consistent with TF internally if changed", "\n", "i", "+=", "1", "\n", "\n", "", "self", ".", "variables", "[", "name", "]", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._create_variable": [[52, 58], ["tensorflow.Variable", "cfr_net.CFRNet._add_variable"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._add_variable"], ["", "def", "_create_variable", "(", "self", ",", "var", ",", "name", ")", ":", "\n", "        ", "''' Create and adds variables to the internal track-keeper '''", "\n", "\n", "var", "=", "tf", ".", "Variable", "(", "var", ",", "name", "=", "name", ")", "\n", "self", ".", "_add_variable", "(", "var", ",", "name", ")", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._create_variable_with_weight_decay": [[59, 65], ["cfr_net.CFRNet._create_variable", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._create_variable"], ["", "def", "_create_variable_with_weight_decay", "(", "self", ",", "initializer", ",", "name", ",", "wd", ")", ":", "\n", "        ", "''' Create and adds variables to the internal track-keeper\n            and adds it to the list of weight decayed variables '''", "\n", "var", "=", "self", ".", "_create_variable", "(", "initializer", ",", "name", ")", "\n", "self", ".", "weight_decay_loss", "+=", "wd", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._build_graph": [[66, 195], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "build_mlp", "cfr_net.CFRNet._build_output_graph", "range", "safe_sqrt", "tensorflow.nn.l2_loss", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.sqrt", "mmd2_rbf", "tensorflow.square", "perfect_match.models.pehe_loss.pehe_loss", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "mmd2_lin", "tensorflow.square", "tensorflow.log", "tensorflow.log", "tensorflow.square", "tensorflow.square", "mmd2_lin", "tensorflow.abs", "safe_sqrt", "tensorflow.exp", "mmd2_rbf", "mmd2_lin", "safe_sqrt", "tensorflow.square", "wasserstein", "tensorflow.square", "wasserstein", "lindisc"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.models.model_builder.ModelBuilder.build_mlp", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._build_output_graph", "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.safe_sqrt", "home.repos.pwc.inspect_result.d909b_perfect_match.models.pehe_loss.pehe_loss", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.log", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.util.log", "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.safe_sqrt", "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.safe_sqrt", "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.wasserstein", "home.repos.pwc.inspect_result.d909b_perfect_match.models.distributions.wasserstein"], ["", "def", "_build_graph", "(", "self", ",", "input_dim", ",", "num_units", ",", "\n", "num_representation_layers", ",", "num_regression_layers", ",", "weight_initialisation_std", ",", "\n", "reweight_sample", "=", "False", ",", "loss_function", "=", "\"l2\"", ",", "\n", "imbalance_penalty_function", "=", "\"wass\"", ",", "rbf_sigma", "=", "0.1", ",", "\n", "wass_lambda", "=", "10.0", ",", "wass_iterations", "=", "10", ",", "wass_bpt", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Constructs a TensorFlow subgraph for counterfactual regression.\n        Sets the following member variables (to TF nodes):\n        self.output         The output prediction \"y\"\n        self.tot_loss       The total objective to minimize\n        self.imb_loss       The imbalance term of the objective\n        self.pred_loss      The prediction term of the objective\n        self.weights_in     The input/representation layer weights\n        self.weights_out    The output/post-representation layer weights\n        self.weights_pred   The (linear) prediction layer weights\n        self.h_rep          The layer of the penalized representation\n        \"\"\"", "\n", "''' Initialize input placeholders '''", "\n", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "shape", "=", "[", "None", ",", "input_dim", "]", ",", "name", "=", "'x'", ")", "\n", "self", ".", "t", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "shape", "=", "[", "None", ",", "1", "]", ",", "name", "=", "'t'", ")", "\n", "self", ".", "y_", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "shape", "=", "[", "None", ",", "1", "]", ",", "name", "=", "'y_'", ")", "\n", "\n", "''' Parameter placeholders '''", "\n", "self", ".", "imbalance_loss_weight", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "name", "=", "'r_alpha'", ")", "\n", "self", ".", "l2_weight", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "name", "=", "'r_lambda'", ")", "\n", "self", ".", "dropout_representation", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "name", "=", "'dropout_in'", ")", "\n", "self", ".", "dropout_regression", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "name", "=", "'dropout_out'", ")", "\n", "self", ".", "p_t", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "name", "=", "'p_treated'", ")", "\n", "\n", "dim_input", "=", "input_dim", "\n", "dim_in", "=", "num_units", "\n", "dim_out", "=", "num_units", "\n", "\n", "weights_in", ",", "biases_in", "=", "[", "]", ",", "[", "]", "\n", "\n", "if", "num_representation_layers", "==", "0", ":", "\n", "            ", "dim_in", "=", "dim_input", "\n", "", "if", "num_regression_layers", "==", "0", ":", "\n", "            ", "dim_out", "=", "dim_in", "\n", "\n", "", "''' Construct input/representation layers '''", "\n", "h_rep", ",", "weights_in", ",", "biases_in", "=", "build_mlp", "(", "self", ".", "x", ",", "num_representation_layers", ",", "dim_in", ",", "\n", "self", ".", "dropout_representation", ",", "self", ".", "nonlinearity", ",", "\n", "weight_initialisation_std", "=", "weight_initialisation_std", ")", "\n", "\n", "# Normalize representation.", "\n", "h_rep_norm", "=", "h_rep", "/", "safe_sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "h_rep", ")", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", ")", "\n", "\n", "''' Construct ouput layers '''", "\n", "y", ",", "y_concat", ",", "weights_out", ",", "weights_pred", "=", "self", ".", "_build_output_graph", "(", "h_rep_norm", ",", "self", ".", "t", ",", "dim_in", ",", "dim_out", ",", "\n", "self", ".", "dropout_regression", ",", "\n", "num_regression_layers", ",", "\n", "weight_initialisation_std", ")", "\n", "\n", "''' Compute sample reweighting '''", "\n", "if", "reweight_sample", ":", "\n", "            ", "w_t", "=", "self", ".", "t", "/", "(", "2", "*", "self", ".", "p_t", ")", "\n", "w_c", "=", "(", "1", "-", "self", ".", "t", ")", "/", "(", "2", "*", "(", "1", "-", "self", ".", "p_t", ")", ")", "\n", "sample_weight", "=", "w_t", "+", "w_c", "\n", "", "else", ":", "\n", "            ", "sample_weight", "=", "1.0", "\n", "\n", "", "self", ".", "sample_weight", "=", "sample_weight", "\n", "\n", "''' Construct factual loss function '''", "\n", "if", "self", ".", "with_pehe_loss", ":", "\n", "            ", "risk", "=", "pred_error", "=", "tf", ".", "reduce_mean", "(", "sample_weight", "*", "tf", ".", "square", "(", "self", ".", "y_", "-", "y", ")", ")", "+", "pehe_loss", "(", "self", ".", "y_", ",", "y_concat", ",", "self", ".", "t", ",", "self", ".", "x", ",", "self", ".", "num_treatments", ")", "/", "10.", "\n", "", "elif", "loss_function", "==", "'log'", ":", "\n", "            ", "y", "=", "0.995", "/", "(", "1.0", "+", "tf", ".", "exp", "(", "-", "y", ")", ")", "+", "0.0025", "\n", "res", "=", "self", ".", "y_", "*", "tf", ".", "log", "(", "y", ")", "+", "(", "1.0", "-", "self", ".", "y_", ")", "*", "tf", ".", "log", "(", "1.0", "-", "y", ")", "\n", "\n", "risk", "=", "-", "tf", ".", "reduce_mean", "(", "sample_weight", "*", "res", ")", "\n", "pred_error", "=", "-", "tf", ".", "reduce_mean", "(", "res", ")", "\n", "", "else", ":", "\n", "            ", "risk", "=", "tf", ".", "reduce_mean", "(", "sample_weight", "*", "tf", ".", "square", "(", "self", ".", "y_", "-", "y", ")", ")", "\n", "pred_error", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "y_", "-", "y", ")", ")", ")", "\n", "\n", "", "''' Regularization '''", "\n", "for", "i", "in", "range", "(", "0", ",", "num_representation_layers", ")", ":", "\n", "            ", "self", ".", "weight_decay_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "weights_in", "[", "i", "]", ")", "\n", "\n", "", "p_ipm", "=", "0.5", "\n", "\n", "if", "self", ".", "imbalance_loss_weight_param", "==", "0.0", ":", "\n", "            ", "imb_dist", "=", "tf", ".", "reduce_mean", "(", "self", ".", "t", ")", "\n", "imb_error", "=", "0", "\n", "", "elif", "imbalance_penalty_function", "==", "'mmd2_rbf'", ":", "\n", "            ", "imb_dist", "=", "mmd2_rbf", "(", "h_rep_norm", ",", "self", ".", "t", ",", "p_ipm", ",", "rbf_sigma", ")", "\n", "imb_error", "=", "self", ".", "imbalance_loss_weight", "*", "imb_dist", "\n", "", "elif", "imbalance_penalty_function", "==", "'mmd2_lin'", ":", "\n", "            ", "imb_dist", "=", "mmd2_lin", "(", "h_rep_norm", ",", "self", ".", "t", ",", "p_ipm", ")", "\n", "imb_error", "=", "self", ".", "imbalance_loss_weight", "*", "mmd2_lin", "(", "h_rep_norm", ",", "self", ".", "t", ",", "p_ipm", ")", "\n", "", "elif", "imbalance_penalty_function", "==", "'mmd_rbf'", ":", "\n", "            ", "imb_dist", "=", "tf", ".", "abs", "(", "mmd2_rbf", "(", "h_rep_norm", ",", "self", ".", "t", ",", "p_ipm", ",", "rbf_sigma", ")", ")", "\n", "imb_error", "=", "safe_sqrt", "(", "tf", ".", "square", "(", "self", ".", "imbalance_loss_weight", ")", "*", "imb_dist", ")", "\n", "", "elif", "imbalance_penalty_function", "==", "'mmd_lin'", ":", "\n", "            ", "imb_dist", "=", "mmd2_lin", "(", "h_rep_norm", ",", "self", ".", "t", ",", "p_ipm", ")", "\n", "imb_error", "=", "safe_sqrt", "(", "tf", ".", "square", "(", "self", ".", "imbalance_loss_weight", ")", "*", "imb_dist", ")", "\n", "", "elif", "imbalance_penalty_function", "==", "'wass'", ":", "\n", "            ", "imb_dist", ",", "imb_mat", "=", "wasserstein", "(", "h_rep_norm", ",", "self", ".", "t", ",", "p_ipm", ",", "sq", "=", "True", ",", "\n", "its", "=", "wass_iterations", ",", "lam", "=", "wass_lambda", ",", "backpropT", "=", "wass_bpt", ")", "\n", "imb_error", "=", "self", ".", "imbalance_loss_weight", "*", "imb_dist", "\n", "self", ".", "imb_mat", "=", "imb_mat", "# FOR DEBUG", "\n", "", "elif", "imbalance_penalty_function", "==", "'wass2'", ":", "\n", "            ", "imb_dist", ",", "imb_mat", "=", "wasserstein", "(", "h_rep_norm", ",", "self", ".", "t", ",", "p_ipm", ",", "sq", "=", "True", ",", "\n", "its", "=", "wass_iterations", ",", "lam", "=", "wass_lambda", ",", "backpropT", "=", "wass_bpt", ")", "\n", "imb_error", "=", "self", ".", "imbalance_loss_weight", "*", "imb_dist", "\n", "self", ".", "imb_mat", "=", "imb_mat", "# FOR DEBUG", "\n", "", "else", ":", "\n", "            ", "imb_dist", "=", "lindisc", "(", "h_rep_norm", ",", "p_ipm", ",", "self", ".", "t", ")", "\n", "imb_error", "=", "self", ".", "imbalance_loss_weight", "*", "imb_dist", "\n", "\n", "", "''' Total error '''", "\n", "tot_error", "=", "risk", "\n", "if", "self", ".", "imbalance_loss_weight_param", "!=", "0.0", ":", "\n", "            ", "tot_error", "=", "tot_error", "+", "imb_error", "\n", "", "tot_error", "=", "tot_error", "+", "self", ".", "l2_weight", "*", "self", ".", "weight_decay_loss", "\n", "\n", "self", ".", "output", "=", "y", "\n", "self", ".", "tot_loss", "=", "tot_error", "\n", "self", ".", "imb_loss", "=", "imb_error", "\n", "self", ".", "imb_dist", "=", "imb_dist", "\n", "self", ".", "pred_loss", "=", "pred_error", "\n", "self", ".", "weights_in", "=", "weights_in", "\n", "self", ".", "weights_out", "=", "weights_out", "\n", "self", ".", "weights_pred", "=", "weights_pred", "\n", "self", ".", "h_rep", "=", "h_rep", "\n", "self", ".", "h_rep_norm", "=", "h_rep_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._build_output": [[196, 229], ["range", "cfr_net.CFRNet._create_variable", "cfr_net.CFRNet._create_variable", "tensorflow.nn.l2_loss", "cfr_net.CFRNet._create_variable_with_weight_decay", "weights_out.append", "biases_out.append", "h_out.append", "tensorflow.nn.dropout", "tensorflow.random_normal", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.random_normal", "tensorflow.Variable", "tensorflow.matmul", "cfr_net.CFRNet.nonlinearity", "tensorflow.zeros", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._create_variable", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._create_variable", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._create_variable_with_weight_decay"], ["", "def", "_build_output", "(", "self", ",", "h_input", ",", "dim_in", ",", "dim_out", ",", "dropout_regression", ",", "num_regression_layers", ",", "weight_initialisation_std", ")", ":", "\n", "        ", "h_out", "=", "[", "h_input", "]", "\n", "dims", "=", "[", "dim_in", "]", "+", "(", "[", "dim_out", "]", "*", "num_regression_layers", ")", "\n", "\n", "weights_out", "=", "[", "]", ";", "biases_out", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "num_regression_layers", ")", ":", "\n", "            ", "wo", "=", "self", ".", "_create_variable_with_weight_decay", "(", "\n", "tf", ".", "random_normal", "(", "[", "dims", "[", "i", "]", ",", "dims", "[", "i", "+", "1", "]", "]", ",", "\n", "stddev", "=", "weight_initialisation_std", "/", "np", ".", "sqrt", "(", "dims", "[", "i", "]", ")", ")", ",", "\n", "'w_out_%d'", "%", "i", ",", "1.0", ")", "\n", "weights_out", ".", "append", "(", "wo", ")", "\n", "\n", "biases_out", ".", "append", "(", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "dim_out", "]", ")", ")", ")", "\n", "z", "=", "tf", ".", "matmul", "(", "h_out", "[", "i", "]", ",", "weights_out", "[", "i", "]", ")", "+", "biases_out", "[", "i", "]", "\n", "# No batch norm on output because p_cf != p_f", "\n", "\n", "h_out", ".", "append", "(", "self", ".", "nonlinearity", "(", "z", ")", ")", "\n", "h_out", "[", "i", "+", "1", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "h_out", "[", "i", "+", "1", "]", ",", "1.0", "-", "dropout_regression", ")", "\n", "\n", "", "weights_pred", "=", "self", ".", "_create_variable", "(", "tf", ".", "random_normal", "(", "[", "dim_out", ",", "1", "]", ",", "\n", "stddev", "=", "weight_initialisation_std", "/", "np", ".", "sqrt", "(", "dim_out", ")", ")", ",", "\n", "'w_pred'", ")", "\n", "\n", "bias_pred", "=", "self", ".", "_create_variable", "(", "tf", ".", "zeros", "(", "[", "1", "]", ")", ",", "'b_pred'", ")", "\n", "\n", "self", ".", "weight_decay_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "weights_pred", ")", "\n", "\n", "''' Construct linear classifier '''", "\n", "h_pred", "=", "h_out", "[", "-", "1", "]", "\n", "y", "=", "tf", ".", "matmul", "(", "h_pred", ",", "weights_pred", ")", "+", "bias_pred", "\n", "\n", "return", "y", ",", "weights_out", ",", "weights_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._build_output_graph": [[230, 255], ["tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.gather", "tensorflow.gather", "cfr_net.CFRNet._build_output", "cfr_net.CFRNet._build_output", "tensorflow.dynamic_stitch", "tensorflow.concat", "tensorflow.where", "tensorflow.where"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._build_output", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet._build_output"], ["", "def", "_build_output_graph", "(", "self", ",", "rep", ",", "t", ",", "dim_in", ",", "dropout_representation", ",", "dropout_regression", ",", "\n", "num_regression_layers", ",", "weight_initialisation_std", ")", ":", "\n", "        ", "''' Construct output/regression layers '''", "\n", "i0", "=", "tf", ".", "to_int32", "(", "tf", ".", "where", "(", "t", "<", "1", ")", "[", ":", ",", "0", "]", ")", "\n", "i1", "=", "tf", ".", "to_int32", "(", "tf", ".", "where", "(", "t", ">", "0", ")", "[", ":", ",", "0", "]", ")", "\n", "\n", "rep0", "=", "tf", ".", "gather", "(", "rep", ",", "i0", ")", "\n", "rep1", "=", "tf", ".", "gather", "(", "rep", ",", "i1", ")", "\n", "\n", "y0", ",", "weights_out0", ",", "weights_pred0", "=", "self", ".", "_build_output", "(", "rep0", ",", "dim_in", ",", "\n", "dropout_representation", ",", "dropout_regression", ",", "\n", "num_regression_layers", ",", "\n", "weight_initialisation_std", ")", "\n", "y1", ",", "weights_out1", ",", "weights_pred1", "=", "self", ".", "_build_output", "(", "rep1", ",", "dim_in", ",", "\n", "dropout_representation", ",", "dropout_regression", ",", "\n", "num_regression_layers", ",", "\n", "weight_initialisation_std", ")", "\n", "\n", "y", "=", "tf", ".", "dynamic_stitch", "(", "[", "i0", ",", "i1", "]", ",", "[", "y0", ",", "y1", "]", ")", "\n", "weights_out", "=", "weights_out0", "+", "weights_out1", "\n", "weights_pred", "=", "weights_pred0", "+", "weights_pred1", "\n", "\n", "y_concat", "=", "tf", ".", "concat", "(", "[", "y0", ",", "y1", "]", ",", "axis", "=", "0", ")", "\n", "\n", "return", "y", ",", "y_concat", ",", "weights_out", ",", "weights_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.train": [[256, 301], ["tensorflow.train.Saver", "tensorflow.Variable", "tensorflow.train.exponential_decay", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "cfr_net.CFRNet.sess.run", "range", "tensorflow.global_variables_initializer", "cfr_net.CFRNet.run_generator", "cfr_net.CFRNet.run_generator", "cfr_net.CFRNet.print_losses", "numpy.finfo", "perfect_match.models.model_eval.ModelEvaluation.evaluate_counterfactual", "tensorflow.train.Saver.save"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.run_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.run_generator", "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.print_losses", "home.repos.pwc.inspect_result.d909b_perfect_match.models.model_eval.ModelEvaluation.evaluate_counterfactual", "home.repos.pwc.inspect_result.d909b_perfect_match.baselines.baseline.PickleableMixin.save"], ["", "def", "train", "(", "self", ",", "train_generator", ",", "train_steps", ",", "val_generator", ",", "val_steps", ",", "num_epochs", ",", "\n", "learning_rate", ",", "learning_rate_decay", "=", "0.97", ",", "iterations_per_decay", "=", "100", ",", "\n", "dropout", "=", "0.0", ",", "imbalance_loss_weight", "=", "0.0", ",", "l2_weight", "=", "0.0", ",", "checkpoint_path", "=", "\"\"", ",", "\n", "early_stopping_patience", "=", "12", ",", "early_stopping_on_pehe", "=", "False", ")", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "self", ".", "variables", ",", "max_to_keep", "=", "0", ")", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "dtype", "=", "\"int64\"", ")", "\n", "\n", "lr", "=", "tf", ".", "train", ".", "exponential_decay", "(", "learning_rate", ",", "global_step", ",", "\n", "iterations_per_decay", ",", "learning_rate_decay", ",", "staircase", "=", "True", ")", "\n", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ")", "\n", "train_step", "=", "opt", ".", "minimize", "(", "self", ".", "tot_loss", ",", "global_step", "=", "global_step", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "best_val_loss", ",", "num_epochs_without_improvement", "=", "np", ".", "finfo", "(", "float", ")", ".", "max", ",", "0", "\n", "for", "epoch_idx", "in", "range", "(", "num_epochs", ")", ":", "\n", "            ", "train_losses", "=", "self", ".", "run_generator", "(", "train_generator", ",", "train_steps", ",", "dropout", ",", "\n", "imbalance_loss_weight", ",", "l2_weight", ",", "train_step", ")", "\n", "\n", "val_losses", "=", "self", ".", "run_generator", "(", "val_generator", ",", "val_steps", ",", "0", ",", "0", ",", "0", ")", "\n", "\n", "if", "early_stopping_on_pehe", ":", "\n", "                ", "score_dict", "=", "ModelEvaluation", ".", "evaluate_counterfactual", "(", "self", ",", "\n", "val_generator", ",", "\n", "val_steps", ",", "\n", "self", ".", "benchmark", ",", "\n", "set_name", "=", "\"val\"", ",", "\n", "with_print", "=", "True", ",", "\n", "stateful_benchmark", "=", "True", ")", "\n", "\n", "current_val_loss", "=", "score_dict", "[", "\"cf_pehe_nn\"", "]", "\n", "", "else", ":", "\n", "                ", "current_val_loss", "=", "val_losses", "[", "1", "]", "\n", "", "do_save", "=", "current_val_loss", "<", "best_val_loss", "\n", "if", "do_save", ":", "\n", "                ", "num_epochs_without_improvement", "=", "0", "\n", "best_val_loss", "=", "current_val_loss", "\n", "saver", ".", "save", "(", "self", ".", "sess", ",", "checkpoint_path", ")", "\n", "", "else", ":", "\n", "                ", "num_epochs_without_improvement", "+=", "1", "\n", "\n", "", "self", ".", "print_losses", "(", "epoch_idx", ",", "num_epochs", ",", "train_losses", ",", "val_losses", ",", "do_save", ")", "\n", "\n", "if", "num_epochs_without_improvement", ">=", "early_stopping_patience", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.print_losses": [[302, 311], ["print"], "methods", ["None"], ["", "", "", "def", "print_losses", "(", "self", ",", "epoch_idx", ",", "num_epochs", ",", "train_losses", ",", "val_losses", ",", "did_save", "=", "False", ")", ":", "\n", "        ", "print", "(", "\"Epoch [{:04d}/{:04d}] {:} TRAIN: {:.3f} MSE: {:.3f} IMB: {:.3f} VAL: {:.3f} vPRED {:.3f} vIMB {:.3f}\"", "\n", ".", "format", "(", "\n", "epoch_idx", ",", "num_epochs", ",", "\n", "\"xx\"", "if", "did_save", "else", "\"::\"", ",", "\n", "train_losses", "[", "0", "]", ",", "train_losses", "[", "1", "]", ",", "train_losses", "[", "2", "]", ",", "\n", "val_losses", "[", "0", "]", ",", "val_losses", "[", "1", "]", ",", "val_losses", "[", "2", "]", ",", "\n", ")", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.run_generator": [[312, 336], ["range", "numpy.mean", "next", "numpy.expand_dims", "numpy.expand_dims", "losses.append", "cfr_net.CFRNet.sess.run", "cfr_net.CFRNet.sess.run"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run", "home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run"], ["", "def", "run_generator", "(", "self", ",", "generator", ",", "steps", ",", "dropout", ",", "imbalance_loss_weight", ",", "l2_weight", ",", "train_step", "=", "None", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "for", "iter_idx", "in", "range", "(", "steps", ")", ":", "\n", "            ", "(", "x_batch", ",", "t_batch", ")", ",", "y_batch", "=", "next", "(", "generator", ")", "\n", "t_batch", "=", "np", ".", "expand_dims", "(", "t_batch", ",", "axis", "=", "-", "1", ")", "\n", "y_batch", "=", "np", ".", "expand_dims", "(", "y_batch", ",", "axis", "=", "-", "1", ")", "\n", "\n", "feed_dict", "=", "{", "\n", "self", ".", "x", ":", "x_batch", ",", "\n", "self", ".", "t", ":", "t_batch", ",", "\n", "self", ".", "y_", ":", "y_batch", ",", "\n", "self", ".", "dropout_regression", ":", "dropout", ",", "\n", "self", ".", "dropout_representation", ":", "dropout", ",", "\n", "self", ".", "imbalance_loss_weight", ":", "imbalance_loss_weight", ",", "\n", "self", ".", "l2_weight", ":", "l2_weight", ",", "\n", "self", ".", "p_t", ":", "0.5", "\n", "}", "\n", "\n", "if", "train_step", "is", "not", "None", ":", "\n", "                ", "self", ".", "sess", ".", "run", "(", "train_step", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "", "losses", ".", "append", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "tot_loss", ",", "self", ".", "pred_loss", ",", "self", ".", "imb_dist", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "losses", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d909b_perfect_match.cfr.cfr_net.CFRNet.predict": [[337, 346], ["cfr_net.CFRNet.sess.run", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.d909b_perfect_match.apps.evaluate.EvaluationApplication.run"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "y_pred", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output", ",", "feed_dict", "=", "{", "\n", "self", ".", "x", ":", "x", "[", "0", "]", ",", "\n", "self", ".", "t", ":", "np", ".", "expand_dims", "(", "x", "[", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "self", ".", "dropout_representation", ":", "0.0", ",", "\n", "self", ".", "dropout_regression", ":", "0.0", ",", "\n", "self", ".", "l2_weight", ":", "0.0", "\n", "}", ")", "\n", "return", "y_pred", "\n", "", "", ""]]}