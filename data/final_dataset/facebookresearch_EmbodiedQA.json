{"home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.make_houses.extract_threaded": [[32, 38], ["os.chdir", "subprocess.call", "print", "os.path.join", "shlex.split", "os.path.join"], "function", ["None"], ["def", "extract_threaded", "(", "house", ")", ":", "\n", "    ", "os", ".", "chdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "suncg_data_path", ",", "'house'", ",", "house", ")", ")", "\n", "subprocess", ".", "call", "(", "\n", "shlex", ".", "split", "(", "'%s house.json house.obj'", "%", "(", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "suncg_toolbox_path", ",", "'gaps'", ",", "'bin'", ",", "'x86_64'", ",", "'scn2scn'", ")", ",", ")", ")", ")", "\n", "print", "(", "'extracted'", ",", "house", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.__init__": [[21, 73], ["house3d.House3DUtils.calibrate_steps", "house3d.House3DUtils._parse", "numpy.array().mean", "os.path.exists", "house3d.House3DUtils._load_semantic_classes", "range", "os.path.join", "house3d.House3DUtils.load_graph", "house3d.House3DUtils.build_graph", "numpy.array", "os.path.join", "os.path.join", "numpy.abs().sum", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.calibrate_steps", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils._parse", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils._load_semantic_classes", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.load_graph", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.build_graph"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "rotation_sensitivity", "=", "9", ",", "\n", "move_sensitivity", "=", "0.5", ",", "\n", "build_graph", "=", "False", ",", "\n", "graph_dir", "=", "'/path/to/3d-graphs'", ",", "\n", "target_obj_conn_map_dir", "=", "'/path/to/target_obj_connmaps'", ",", "\n", "debug", "=", "True", ",", "\n", "load_semantic_classes", "=", "True", ",", "\n", "collision_reward", "=", "0.0", ",", "\n", "success_reward", "=", "1.0", ",", "\n", "dist_reward_scale", "=", "0.005", ",", "\n", "seeing_rwd", "=", "False", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "debug", "=", "debug", "\n", "\n", "self", ".", "rotation_sensitivity", "=", "rotation_sensitivity", "\n", "self", ".", "move_sensitivity", "=", "move_sensitivity", "\n", "\n", "self", ".", "angles", "=", "[", "x", "for", "x", "in", "range", "(", "-", "180", ",", "180", ",", "self", ".", "rotation_sensitivity", ")", "]", "\n", "self", ".", "angle_strings", "=", "{", "1", ":", "'right'", ",", "-", "1", ":", "'left'", "}", "\n", "\n", "self", ".", "dirs", ",", "self", ".", "angle_map", "=", "self", ".", "calibrate_steps", "(", "reset", "=", "True", ")", "\n", "self", ".", "move_multiplier", "=", "self", ".", "move_sensitivity", "/", "np", ".", "array", "(", "[", "np", ".", "abs", "(", "x", ")", ".", "sum", "(", ")", "for", "x", "in", "self", ".", "dirs", "]", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "graph_dir", "=", "graph_dir", "\n", "self", ".", "graph", "=", "None", "\n", "\n", "self", ".", "target_obj_conn_map_dir", "=", "target_obj_conn_map_dir", "\n", "\n", "if", "build_graph", "==", "True", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "graph_dir", ",", "\n", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'.pkl'", ")", ")", ":", "\n", "                ", "self", ".", "load_graph", "(", "\n", "os", ".", "path", ".", "join", "(", "graph_dir", ",", "\n", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'.pkl'", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "build_graph", "(", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "\n", "graph_dir", ",", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'.pkl'", ")", ")", "\n", "\n", "", "", "self", ".", "rooms", ",", "self", ".", "objects", "=", "self", ".", "_parse", "(", ")", "\n", "\n", "self", ".", "collision_reward", "=", "collision_reward", "\n", "self", ".", "success_reward", "=", "success_reward", "\n", "self", ".", "dist_reward_scale", "=", "dist_reward_scale", "\n", "self", ".", "seeing_rwd", "=", "seeing_rwd", "\n", "\n", "if", "load_semantic_classes", "==", "True", ":", "\n", "            ", "self", ".", "_load_semantic_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.calibrate_steps": [[83, 111], ["house3d.House3DUtils.env.house.to_coor", "range", "house3d.House3DUtils.env.reset", "len", "house3d.House3DUtils.env.cam.updateDirection", "house3d.House3DUtils.env.house.to_grid", "house3d.House3DUtils.env.house.to_grid", "mults.append", "numpy.array", "numpy.array"], "methods", ["None"], ["", "", "def", "calibrate_steps", "(", "self", ",", "reset", "=", "True", ")", ":", "\n", "        ", "mults", ",", "angle_map", "=", "[", "]", ",", "{", "}", "\n", "\n", "cx", ",", "cy", "=", "self", ".", "env", ".", "house", ".", "to_coor", "(", "50", ",", "50", ")", "\n", "if", "reset", "==", "True", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "x", "=", "cx", ",", "y", "=", "cy", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "angles", ")", ")", ":", "\n", "            ", "yaw", "=", "self", ".", "angles", "[", "i", "]", "\n", "\n", "self", ".", "env", ".", "cam", ".", "yaw", "=", "yaw", "\n", "self", ".", "env", ".", "cam", ".", "updateDirection", "(", ")", "\n", "\n", "x1", ",", "y1", "=", "self", ".", "env", ".", "house", ".", "to_grid", "(", "self", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "\n", "self", ".", "env", ".", "cam", ".", "pos", ".", "z", ")", "\n", "\n", "pos", "=", "self", ".", "env", ".", "cam", ".", "pos", "\n", "pos", "=", "pos", "+", "self", ".", "env", ".", "cam", ".", "front", "*", "self", ".", "move_sensitivity", "\n", "\n", "x2", ",", "y2", "=", "self", ".", "env", ".", "house", ".", "to_grid", "(", "pos", ".", "x", ",", "pos", ".", "z", ")", "\n", "\n", "mult", "=", "np", ".", "array", "(", "[", "x2", ",", "y2", "]", ")", "-", "np", ".", "array", "(", "[", "x1", ",", "y1", "]", ")", "\n", "mult", "=", "(", "mult", "[", "0", "]", ",", "mult", "[", "1", "]", ")", "\n", "\n", "angle_map", "[", "mult", "]", "=", "yaw", "\n", "mults", ".", "append", "(", "mult", ")", "\n", "\n", "", "return", "mults", ",", "angle_map", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step": [[118, 157], ["house3d.House3DUtils.env.house.to_grid", "house3d.House3DUtils.env.move_forward", "house3d.House3DUtils.env.render", "house3d.House3DUtils.env.rotate", "house3d.House3DUtils.env.render", "house3d.House3DUtils.env.house.to_grid", "house3d.House3DUtils.env.rotate", "house3d.House3DUtils.env.render", "house3d.House3DUtils.env.render", "numpy.abs().sum", "numpy.abs", "house3d.House3DUtils.angles.index"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.render", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.render", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.render", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.render"], ["", "def", "step", "(", "self", ",", "action", ",", "step_reward", "=", "False", ")", ":", "\n", "        ", "if", "action", "not", "in", "[", "0", ",", "1", ",", "2", ",", "3", "]", ":", "\n", "            ", "raise", "IndexError", "\n", "\n", "", "if", "step_reward", "==", "True", ":", "\n", "            ", "pos", "=", "self", ".", "env", ".", "cam", ".", "pos", "\n", "x1", ",", "y1", "=", "self", ".", "env", ".", "house", ".", "to_grid", "(", "self", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "self", ".", "env", ".", "cam", ".", "pos", ".", "z", ")", "\n", "init_target_dist", "=", "self", ".", "env", ".", "house", ".", "connMap", "[", "x1", ",", "y1", "]", "\n", "\n", "", "reward", "=", "0", "\n", "done", "=", "False", "\n", "\n", "if", "action", "==", "0", ":", "\n", "            ", "mv", "=", "self", ".", "env", ".", "move_forward", "(", "\n", "dist_fwd", "=", "self", ".", "move_sensitivity", ",", "dist_hor", "=", "0", ")", "\n", "obs", "=", "self", ".", "env", ".", "render", "(", ")", "\n", "if", "mv", "==", "False", ":", "# collision", "\n", "                ", "reward", "-=", "self", ".", "collision_reward", "\n", "", "elif", "mv", "!=", "False", "and", "step_reward", "==", "True", ":", "\n", "# evaluate connMap dist here", "\n", "                ", "x2", ",", "y2", "=", "self", ".", "env", ".", "house", ".", "to_grid", "(", "self", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "\n", "self", ".", "env", ".", "cam", ".", "pos", ".", "z", ")", "\n", "final_target_dist", "=", "self", ".", "env", ".", "house", ".", "connMap", "[", "x2", ",", "y2", "]", "\n", "reward", "+=", "self", ".", "dist_reward_scale", "*", "(", "(", "init_target_dist", "-", "final_target_dist", ")", "/", "np", ".", "abs", "(", "\n", "self", ".", "dirs", "[", "self", ".", "angles", ".", "index", "(", "self", ".", "env", ".", "cam", ".", "yaw", "%", "180", ")", "]", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "", "elif", "action", "==", "1", ":", "\n", "            ", "self", ".", "env", ".", "rotate", "(", "-", "self", ".", "rotation_sensitivity", ")", "\n", "obs", "=", "self", ".", "env", ".", "render", "(", ")", "\n", "\n", "", "elif", "action", "==", "2", ":", "\n", "            ", "self", ".", "env", ".", "rotate", "(", "self", ".", "rotation_sensitivity", ")", "\n", "obs", "=", "self", ".", "env", ".", "render", "(", ")", "\n", "\n", "", "elif", "action", "==", "3", ":", "\n", "            ", "done", "=", "True", "\n", "obs", "=", "self", ".", "env", ".", "render", "(", ")", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_dist_to_target": [[159, 166], ["isinstance", "house3d.House3DUtils.env.house.to_grid", "house3d.House3DUtils.env.house.to_grid"], "methods", ["None"], ["", "def", "get_dist_to_target", "(", "self", ",", "pos", ")", ":", "\n", "        ", "if", "isinstance", "(", "pos", ",", "Vec3", ")", "==", "True", ":", "\n", "            ", "x", ",", "y", "=", "self", ".", "env", ".", "house", ".", "to_grid", "(", "pos", ".", "x", ",", "pos", ".", "z", ")", "\n", "", "else", ":", "\n", "            ", "x", ",", "y", "=", "self", ".", "env", ".", "house", ".", "to_grid", "(", "pos", "[", "0", "]", ",", "pos", "[", "2", "]", ")", "\n", "", "dist", "=", "self", ".", "env", ".", "house", ".", "connMap", "[", "x", ",", "y", "]", "\n", "return", "self", ".", "move_multiplier", "*", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.is_inside_room": [[167, 178], ["isinstance"], "methods", ["None"], ["", "def", "is_inside_room", "(", "self", ",", "pos", ",", "room", ")", ":", "\n", "        ", "if", "isinstance", "(", "pos", ",", "Vec3", ")", "==", "True", ":", "\n", "            ", "x", "=", "pos", ".", "x", "\n", "y", "=", "pos", ".", "z", "\n", "", "else", ":", "\n", "            ", "x", "=", "pos", "[", "0", "]", "\n", "y", "=", "pos", "[", "2", "]", "\n", "", "if", "x", ">=", "room", "[", "'bbox'", "]", "[", "'min'", "]", "[", "0", "]", "and", "x", "<=", "room", "[", "'bbox'", "]", "[", "'max'", "]", "[", "0", "]", "and", "y", ">=", "room", "[", "'bbox'", "]", "[", "'min'", "]", "[", "2", "]", "and", "y", "<=", "room", "[", "'bbox'", "]", "[", "'max'", "]", "[", "2", "]", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.build_graph": [[180, 265], ["time.time", "dict", "Graph", "numpy.zeros", "range", "range", "print", "time.time", "print", "house3d.House3DUtils.graph.dump", "numpy.where", "print", "house3d.House3DUtils.env.house.canMove", "len", "range", "house3d.House3DUtils.graph.add_edge", "house3d.House3DUtils.graph.add_edge", "range", "time.time", "house3d.House3DUtils.graph.add_edge", "house3d.House3DUtils.graph.add_edge", "len", "time.time", "len", "house3d.House3DUtils.env.house.inside", "house3d.House3DUtils.graph.add_edge", "house3d.House3DUtils.mock_obs_map[].sum", "que.append", "min", "min", "max", "max"], "methods", ["None"], ["", "def", "build_graph", "(", "self", ",", "save_path", "=", "None", ")", ":", "\n", "        ", "import", "time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "collide_res", "=", "self", ".", "env", ".", "house", ".", "n_row", "\n", "\n", "from", "dijkstar", "import", "Graph", "\n", "\n", "visit", "=", "dict", "(", ")", "\n", "self", ".", "graph", "=", "Graph", "(", ")", "\n", "\n", "self", ".", "mock_obs_map", "=", "np", ".", "zeros", "(", "\n", "(", "collide_res", "+", "1", ",", "collide_res", "+", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "mock_obs_map", "[", "np", ".", "where", "(", "self", ".", "env", ".", "house", ".", "connMap", "==", "-", "1", ")", "]", "=", "1", "\n", "\n", "for", "x", "in", "range", "(", "collide_res", "+", "1", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "collide_res", "+", "1", ")", ":", "\n", "                ", "pos", "=", "(", "x", ",", "y", ")", "\n", "if", "self", ".", "env", ".", "house", ".", "canMove", "(", "x", ",", "y", ")", "and", "pos", "not", "in", "visit", ":", "\n", "                    ", "que", "=", "[", "pos", "]", "\n", "visit", "[", "pos", "]", "=", "True", "\n", "ptr", "=", "0", "\n", "while", "ptr", "<", "len", "(", "que", ")", ":", "\n", "                        ", "cx", ",", "cy", "=", "que", "[", "ptr", "]", "\n", "ptr", "+=", "1", "\n", "\n", "# add all angles for (cx, cy) here", "\n", "# connect first and last", "\n", "for", "ang", "in", "range", "(", "len", "(", "self", ".", "angles", ")", "-", "1", ")", ":", "\n", "                            ", "self", ".", "graph", ".", "add_edge", "(", "(", "cx", ",", "cy", ",", "self", ".", "angles", "[", "ang", "]", ")", ",", "\n", "(", "cx", ",", "cy", ",", "self", ".", "angles", "[", "ang", "+", "1", "]", ")", ",", "\n", "{", "\n", "'cost'", ":", "1", "\n", "}", ")", "\n", "self", ".", "graph", ".", "add_edge", "(", "(", "cx", ",", "cy", ",", "self", ".", "angles", "[", "ang", "+", "1", "]", ")", ",", "\n", "(", "cx", ",", "cy", ",", "self", ".", "angles", "[", "ang", "]", ")", ",", "{", "\n", "'cost'", ":", "1", "\n", "}", ")", "\n", "", "self", ".", "graph", ".", "add_edge", "(", "(", "cx", ",", "cy", ",", "self", ".", "angles", "[", "-", "1", "]", ")", ",", "\n", "(", "cx", ",", "cy", ",", "self", ".", "angles", "[", "0", "]", ")", ",", "{", "\n", "'cost'", ":", "1", "\n", "}", ")", "\n", "self", ".", "graph", ".", "add_edge", "(", "(", "cx", ",", "cy", ",", "self", ".", "angles", "[", "0", "]", ")", ",", "\n", "(", "cx", ",", "cy", ",", "self", ".", "angles", "[", "-", "1", "]", ")", ",", "{", "\n", "'cost'", ":", "1", "\n", "}", ")", "\n", "\n", "for", "deti", "in", "range", "(", "len", "(", "self", ".", "dirs", ")", ")", ":", "\n", "                            ", "det", "=", "self", ".", "dirs", "[", "deti", "]", "\n", "tx", ",", "ty", "=", "cx", "+", "det", "[", "0", "]", ",", "cy", "+", "det", "[", "1", "]", "\n", "if", "(", "self", ".", "env", ".", "house", ".", "inside", "(", "tx", ",", "ty", ")", "and", "\n", "self", ".", "mock_obs_map", "[", "min", "(", "cx", ",", "tx", ")", ":", "max", "(", "cx", ",", "tx", ")", "+", "1", ",", "\n", "min", "(", "cy", ",", "ty", ")", ":", "max", "(", "cy", ",", "ty", ")", "+", "1", "]", ".", "sum", "(", ")", "==", "0", ")", ":", "\n", "# make changes here to add edges for angle increments as well", "\n", "#", "\n", "# cost = 1 from one angle to the next,", "\n", "# and connect first and last", "\n", "# this would be for different angles for same tx, ty", "\n", "#", "\n", "# then there would be connections for same angle", "\n", "# and from (cx, cy) to (tx, ty)", "\n", "                                ", "self", ".", "graph", ".", "add_edge", "(", "\n", "(", "cx", ",", "cy", ",", "self", ".", "angle_map", "[", "self", ".", "dirs", "[", "deti", "]", "]", ")", ",", "\n", "(", "tx", ",", "ty", ",", "self", ".", "angle_map", "[", "self", ".", "dirs", "[", "deti", "]", "]", ")", ",", "\n", "{", "\n", "'cost'", ":", "1", "\n", "}", ")", "\n", "tp", "=", "(", "tx", ",", "ty", ")", "\n", "if", "tp", "not", "in", "visit", ":", "\n", "                                    ", "visit", "[", "tp", "]", "=", "True", "\n", "que", ".", "append", "(", "tp", ")", "\n", "\n", "", "", "", "", "", "", "", "if", "self", ".", "debug", "==", "True", ":", "\n", "            ", "print", "(", "\"--- %s seconds to build the graph ---\"", "%", "\n", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "", "if", "save_path", "!=", "None", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "\"saving graph to %s\"", "%", "(", "save_path", ")", ")", "\n", "self", ".", "graph", ".", "dump", "(", "save_path", ")", "\n", "\n", "if", "self", ".", "debug", "==", "True", ":", "\n", "                ", "print", "(", "\"--- %s seconds to save the graph ---\"", "%", "\n", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.load_graph": [[266, 278], ["time.time", "Graph", "house3d.House3DUtils.graph.load", "print", "time.time"], "methods", ["None"], ["", "", "", "def", "load_graph", "(", "self", ",", "path", ")", ":", "\n", "        ", "import", "time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "from", "dijkstar", "import", "Graph", "\n", "\n", "self", ".", "graph", "=", "Graph", "(", ")", "\n", "self", ".", "graph", ".", "load", "(", "path", ")", "\n", "\n", "if", "self", ".", "debug", "==", "True", ":", "\n", "            ", "print", "(", "\"--- %s seconds to load the graph ---\"", "%", "\n", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.compute_shortest_path": [[280, 301], ["find_path", "os.path.exists", "os.path.join", "house3d.House3DUtils.load_graph", "house3d.House3DUtils.build_graph", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.load_graph", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.build_graph"], ["", "", "def", "compute_shortest_path", "(", "self", ",", "source", ",", "target", ",", "graph", "=", "None", ")", ":", "\n", "        ", "from", "dijkstar", "import", "find_path", "\n", "\n", "if", "graph", "==", "None", ":", "\n", "            ", "if", "self", ".", "graph", "==", "None", ":", "\n", "                ", "if", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "graph_dir", ",", "\n", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'.pkl'", ")", ")", ":", "\n", "                    ", "self", ".", "load_graph", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "graph_dir", ",", "\n", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'.pkl'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "build_graph", "(", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "\n", "graph_dir", ",", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'.pkl'", ")", ")", "\n", "", "", "graph", "=", "self", ".", "graph", "\n", "\n", "", "cost_func", "=", "lambda", "u", ",", "v", ",", "e", ",", "prev_e", ":", "e", "[", "'cost'", "]", "\n", "shortest_path", "=", "find_path", "(", "graph", ",", "source", ",", "target", ",", "cost_func", "=", "cost_func", ")", "\n", "\n", "return", "shortest_path", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.fit_grid_path_to_suncg": [[302, 391], ["copy.deepcopy", "house3d.House3DUtils.env.house.to_coor", "house3d.House3DUtils.env.cam.updateDirection", "house3d.House3DUtils._vec_to_array", "action_queue.append", "x.astype().item", "y.astype().item", "numpy.random.choice", "house3d.House3DUtils.env.house.to_coor", "len", "house3d.House3DUtils.get_rotate_steps", "house3d.House3DUtils.env.cam.updateDirection", "house3d.House3DUtils._vec_to_array", "house3d.House3DUtils.env.move", "house3d.House3DUtils.compute_shortest_path", "house3d.House3DUtils._vec_to_array", "x.astype", "y.astype", "tuple", "print", "numpy.array", "numpy.array", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils._vec_to_array", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_rotate_steps", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils._vec_to_array", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.compute_shortest_path", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils._vec_to_array"], ["", "def", "fit_grid_path_to_suncg", "(", "self", ",", "nodes", ",", "init_yaw", "=", "None", ",", "back_skip", "=", "2", ")", ":", "\n", "\n", "# don't mess with the originals", "\n", "        ", "nodes", "=", "copy", ".", "deepcopy", "(", "nodes", ")", "\n", "\n", "# set initial position", "\n", "x", ",", "y", "=", "self", ".", "env", ".", "house", ".", "to_coor", "(", "nodes", "[", "0", "]", "[", "0", "]", ",", "nodes", "[", "0", "]", "[", "1", "]", ",", "True", ")", "\n", "x", ",", "y", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", ".", "item", "(", ")", ",", "y", ".", "astype", "(", "np", ".", "float32", ")", ".", "item", "(", ")", "\n", "\n", "self", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "self", ".", "env", ".", "cam", ".", "pos", ".", "y", ",", "self", ".", "env", ".", "cam", ".", "pos", ".", "z", "=", "x", ",", "self", ".", "env", ".", "house", ".", "robotHei", ",", "y", "\n", "if", "init_yaw", "==", "None", ":", "\n", "            ", "self", ".", "env", ".", "cam", ".", "yaw", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "angles", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "env", ".", "cam", ".", "yaw", "=", "init_yaw", "\n", "", "self", ".", "env", ".", "cam", ".", "updateDirection", "(", ")", "\n", "\n", "pos_queue", ",", "action_queue", "=", "[", "]", ",", "[", "]", "\n", "\n", "current_pos", "=", "self", ".", "_vec_to_array", "(", "self", ".", "env", ".", "cam", ".", "pos", ",", "self", ".", "env", ".", "cam", ".", "yaw", ")", "\n", "pos_queue", "=", "pos_queue", "+", "[", "current_pos", "]", "\n", "\n", "ptr", "=", "0", "\n", "\n", "while", "ptr", "<", "len", "(", "nodes", ")", "-", "1", ":", "\n", "            ", "turned", "=", "False", "\n", "\n", "# target rotation", "\n", "target_yaw", "=", "self", ".", "angle_map", "[", "tuple", "(", "\n", "np", ".", "array", "(", "nodes", "[", "ptr", "]", ")", "-", "np", ".", "array", "(", "nodes", "[", "ptr", "+", "1", "]", ")", ")", "]", "\n", "\n", "# turn", "\n", "if", "target_yaw", "!=", "current_pos", "[", "3", "]", ":", "\n", "                ", "p_q", ",", "a_q", "=", "self", ".", "get_rotate_steps", "(", "current_pos", ",", "target_yaw", ")", "\n", "\n", "pos_queue", "=", "pos_queue", "+", "p_q", "\n", "action_queue", "=", "action_queue", "+", "a_q", "\n", "\n", "self", ".", "env", ".", "cam", ".", "yaw", "=", "target_yaw", "\n", "self", ".", "env", ".", "cam", ".", "updateDirection", "(", ")", "\n", "\n", "turned", "=", "True", "\n", "current_pos", "=", "self", ".", "_vec_to_array", "(", "self", ".", "env", ".", "cam", ".", "pos", ",", "\n", "self", ".", "env", ".", "cam", ".", "yaw", ")", "\n", "\n", "# move", "\n", "", "cx", ",", "cz", "=", "self", ".", "env", ".", "house", ".", "to_coor", "(", "nodes", "[", "ptr", "+", "1", "]", "[", "0", "]", ",", "\n", "nodes", "[", "ptr", "+", "1", "]", "[", "1", "]", ",", "True", ")", "\n", "\n", "# if collision, find another sub-path, and delete that edge", "\n", "if", "self", ".", "env", ".", "move", "(", "cx", ",", "cz", ")", "==", "False", ":", "\n", "                ", "if", "nodes", "[", "ptr", "+", "1", "]", "in", "self", ".", "graph", "[", "nodes", "[", "ptr", "]", "]", ":", "\n", "                    ", "del", "self", ".", "graph", "[", "nodes", "[", "ptr", "]", "]", "[", "nodes", "[", "ptr", "+", "1", "]", "]", "\n", "print", "(", "'deleted'", ",", "nodes", "[", "ptr", "]", ",", "nodes", "[", "ptr", "+", "1", "]", ")", "\n", "\n", "# delete the turns", "\n", "", "if", "turned", "==", "True", ":", "\n", "                    ", "pos_queue", "=", "pos_queue", "[", ":", "-", "len", "(", "p_q", ")", "]", "\n", "action_queue", "=", "action_queue", "[", ":", "-", "len", "(", "a_q", ")", "]", "\n", "\n", "", "if", "back_skip", "!=", "0", ":", "\n", "                    ", "pos_queue", "=", "pos_queue", "[", ":", "-", "back_skip", "]", "\n", "action_queue", "=", "action_queue", "[", ":", "-", "back_skip", "]", "\n", "\n", "", "dest_ptr", "=", "ptr", "+", "1", "\n", "ptr", "=", "ptr", "-", "back_skip", "\n", "\n", "sub_shortest_path", "=", "self", ".", "compute_shortest_path", "(", "\n", "nodes", "[", "ptr", "]", ",", "nodes", "[", "dest_ptr", "]", ")", "\n", "nodes", "=", "nodes", "[", ":", "ptr", "]", "+", "sub_shortest_path", ".", "nodes", "+", "nodes", "[", "dest_ptr", "\n", "+", "1", ":", "]", "\n", "\n", "current_pos", "=", "pos_queue", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "# this is the new position the agent moved to", "\n", "                ", "current_pos", "=", "self", ".", "_vec_to_array", "(", "self", ".", "env", ".", "cam", ".", "pos", ",", "\n", "self", ".", "env", ".", "cam", ".", "yaw", ")", "\n", "\n", "assert", "current_pos", "[", "3", "]", "==", "pos_queue", "[", "-", "1", "]", "[", "3", "]", "and", "(", "\n", "current_pos", "[", "0", "]", "!=", "pos_queue", "[", "-", "1", "]", "[", "0", "]", "\n", "or", "current_pos", "[", "2", "]", "!=", "pos_queue", "[", "-", "1", "]", "[", "2", "]", ")", "\n", "\n", "pos_queue", "=", "pos_queue", "+", "[", "current_pos", "]", "\n", "action_queue", "=", "action_queue", "+", "[", "'fwd'", "]", "\n", "\n", "ptr", "=", "ptr", "+", "1", "\n", "\n", "", "", "action_queue", ".", "append", "(", "'stop'", ")", "\n", "\n", "return", "pos_queue", ",", "action_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_rotate_steps": [[395, 418], ["numpy.random.choice", "house3d.House3DUtils.angles.index", "pos_queue.append", "action_queue.append", "len", "house3d.House3DUtils.angles.index", "len", "len"], "methods", ["None"], ["", "def", "get_rotate_steps", "(", "self", ",", "pos", ",", "target_yaw", ")", ":", "\n", "\n", "        ", "direction", "=", "np", ".", "random", ".", "choice", "(", "[", "1", ",", "-", "1", "]", ")", "\n", "\n", "cur_yaw", "=", "pos", "[", "-", "1", "]", "\n", "ptr", "=", "self", ".", "angles", ".", "index", "(", "cur_yaw", ")", "\n", "pos_queue", ",", "action_queue", "=", "[", "]", ",", "[", "]", "\n", "\n", "while", "cur_yaw", "!=", "target_yaw", ":", "\n", "            ", "if", "len", "(", "pos_queue", ")", "==", "len", "(", "self", ".", "angles", ")", "//", "2", ":", "\n", "# reset", "\n", "                ", "direction", "=", "direction", "*", "-", "1", "\n", "cur_yaw", "=", "pos", "[", "-", "1", "]", "\n", "ptr", "=", "self", ".", "angles", ".", "index", "(", "cur_yaw", ")", "\n", "pos_queue", ",", "action_queue", "=", "[", "]", ",", "[", "]", "\n", "\n", "", "ptr", "=", "(", "ptr", "+", "direction", ")", "%", "len", "(", "self", ".", "angles", ")", "\n", "cur_yaw", "=", "self", ".", "angles", "[", "ptr", "]", "\n", "\n", "pos_queue", ".", "append", "(", "[", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", ",", "pos", "[", "2", "]", ",", "self", ".", "angles", "[", "ptr", "]", "]", ")", "\n", "action_queue", ".", "append", "(", "self", ".", "angle_strings", "[", "direction", "]", ")", "\n", "\n", "", "return", "pos_queue", ",", "action_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils._vec_to_array": [[419, 421], ["None"], "methods", ["None"], ["", "def", "_vec_to_array", "(", "self", ",", "pos", ",", "yaw", ")", ":", "\n", "        ", "return", "[", "pos", ".", "x", ",", "pos", ".", "y", ",", "pos", ".", "z", ",", "yaw", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.render_images_from_pos_queue": [[423, 474], ["house3d.House3DUtils.env.house.to_grid", "house3d.House3DUtils.env.house.to_grid", "range", "len", "len", "house3d.House3DUtils.env.reset", "numpy.array", "cv2.putText", "scipy.misc.toimage().save", "house3d.House3DUtils.env.render", "len", "len", "len", "numpy.copy", "scipy.misc.toimage", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.render"], ["", "def", "render_images_from_pos_queue", "(", "self", ",", "\n", "pos_queue", "=", "[", "]", ",", "\n", "img_dir", "=", "'tmp/images'", ",", "\n", "actions", "=", "None", ",", "\n", "values", "=", "None", ",", "\n", "rewards", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "pos_queue", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "\n", "", "action_map", "=", "{", "0", ":", "'FRWD'", ",", "1", ":", "'LEFT'", ",", "2", ":", "'RGHT'", ",", "3", ":", "'STOP'", "}", "\n", "\n", "import", "scipy", ".", "misc", "\n", "\n", "sgx", ",", "sgy", "=", "self", ".", "env", ".", "house", ".", "to_grid", "(", "pos_queue", "[", "0", "]", "[", "0", "]", ",", "pos_queue", "[", "0", "]", "[", "2", "]", ")", "\n", "tgx", ",", "tgy", "=", "self", ".", "env", ".", "house", ".", "to_grid", "(", "pos_queue", "[", "-", "1", "]", "[", "0", "]", ",", "pos_queue", "[", "-", "1", "]", "[", "2", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "pos_queue", ")", ")", ":", "\n", "# set position", "\n", "            ", "p", "=", "pos_queue", "[", "i", "]", "\n", "self", ".", "env", ".", "reset", "(", "x", "=", "p", "[", "0", "]", ",", "y", "=", "p", "[", "2", "]", ",", "yaw", "=", "p", "[", "3", "]", ")", "\n", "\n", "# save image", "\n", "image", "=", "np", ".", "array", "(", "self", ".", "env", ".", "render", "(", ")", ",", "copy", "=", "False", ")", "\n", "\n", "# put some text", "\n", "text", "=", "\"[%02d]\"", "%", "(", "i", "+", "1", ")", "\n", "\n", "if", "actions", "!=", "None", "and", "i", "<", "len", "(", "actions", ")", ":", "\n", "                ", "text", "+=", "\"[%s]\"", "%", "action_map", "[", "actions", "[", "i", "]", "]", "\n", "\n", "", "if", "values", "!=", "None", "and", "i", "<", "len", "(", "values", ")", ":", "\n", "                ", "text", "+=", "\"[V%.03f]\"", "%", "values", "[", "i", "]", "\n", "\n", "", "if", "rewards", "!=", "None", "and", "i", ">", "0", "and", "i", "<=", "len", "(", "rewards", ")", ":", "\n", "                ", "text", "+=", "\"[R%.03f]\"", "%", "rewards", "[", "i", "-", "1", "]", "\n", "\n", "", "image", "=", "cv2", ".", "putText", "(", "\n", "img", "=", "np", ".", "copy", "(", "image", ")", ",", "\n", "text", "=", "text", ",", "\n", "org", "=", "(", "20", ",", "30", ")", ",", "\n", "fontFace", "=", "3", ",", "\n", "fontScale", "=", "0.4", ",", "\n", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "\n", "thickness", "=", "1", ")", "\n", "\n", "scipy", ".", "misc", ".", "toimage", "(", "image", ")", ".", "save", "(", "\n", "'%s/%s_%04d_%04d_%04d_%04d_%05d_%05d.jpg'", "%", "\n", "(", "img_dir", ",", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", ",", "sgx", ",", "sgy", ",", "tgx", ",", "tgy", ",", "\n", "i", "+", "1", ",", "len", "(", "pos_queue", ")", ")", ")", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.render_video_from_pos_queue": [[478, 512], ["house3d.House3DUtils.env.house.to_grid", "house3d.House3DUtils.env.house.to_grid", "len", "subprocess.Popen", "print", "str", "len"], "methods", ["None"], ["", "def", "render_video_from_pos_queue", "(", "self", ",", "\n", "pos_queue", "=", "[", "]", ",", "\n", "img_dir", "=", "'tmp/images'", ",", "\n", "vid_dir", "=", "'tmp/videos'", ",", "\n", "fps", "=", "[", "5", "]", ",", "\n", "tag_name", "=", "'piano'", ")", ":", "\n", "        ", "if", "len", "(", "pos_queue", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "\n", "", "import", "subprocess", "\n", "\n", "sgx", ",", "sgy", "=", "self", ".", "env", ".", "house", ".", "to_grid", "(", "pos_queue", "[", "0", "]", "[", "0", "]", ",", "pos_queue", "[", "0", "]", "[", "2", "]", ")", "\n", "tgx", ",", "tgy", "=", "self", ".", "env", ".", "house", ".", "to_grid", "(", "pos_queue", "[", "-", "1", "]", "[", "0", "]", ",", "pos_queue", "[", "-", "1", "]", "[", "2", "]", ")", "\n", "\n", "for", "fp", "in", "fps", ":", "\n", "            ", "subprocess", ".", "Popen", "(", "[", "\n", "'/srv/share/abhshkdz/local/bin/ffmpeg'", ",", "'-f'", ",", "'image2'", ",", "'-r'", ",", "\n", "str", "(", "fp", ")", ",", "'-i'", ",", "\n", "'%s/%s_%04d_%04d_%04d_%04d'", "%", "\n", "(", "img_dir", ",", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", ",", "sgx", ",", "sgy", ",", "tgx", ",", "tgy", ")", "+", "\n", "'_%05d_'", "+", "'%05d.jpg'", "%", "(", "len", "(", "pos_queue", ")", ")", ",", "'-vcodec'", ",", "'libx264'", ",", "\n", "'-crf'", ",", "'25'", ",", "'-y'", ",", "\n", "'%s/%s_%04d_%04d_%s_%04d_%04d_%d.mp4'", "%", "\n", "(", "vid_dir", ",", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", ",", "sgx", ",", "sgy", ",", "tag_name", ",", "tgx", ",", "\n", "tgy", ",", "fp", ")", "\n", "]", ")", "\n", "\n", "if", "self", ".", "debug", "==", "True", ":", "\n", "                ", "print", "(", "'Rendered video to '", "+", "\n", "'%s/%s_%04d_%04d_%s_%04d_%04d_%d.mp4'", "%", "\n", "(", "vid_dir", ",", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", ",", "sgx", ",", "sgy", ",", "tag_name", ",", "\n", "tgx", ",", "tgy", ",", "fp", ")", ")", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils._parse": [[514, 590], ["csv.reader", "next", "open", "range", "len", "range", "rooms.append", "len", "x.lower", "next.index"], "methods", ["None"], ["", "def", "_parse", "(", "self", ",", "levelsToExplore", "=", "[", "0", "]", ")", ":", "\n", "        ", "rooms", ",", "objects", "=", "[", "]", ",", "{", "}", "\n", "data", "=", "self", ".", "env", ".", "house", ".", "house", "\n", "\n", "modelCategoryMapping", "=", "{", "}", "\n", "\n", "import", "csv", "\n", "csvFile", "=", "csv", ".", "reader", "(", "open", "(", "self", ".", "env", ".", "house", ".", "metaDataFile", ",", "'r'", ")", ")", "\n", "headers", "=", "next", "(", "csvFile", ")", "\n", "\n", "for", "row", "in", "csvFile", ":", "\n", "            ", "modelCategoryMapping", "[", "row", "[", "headers", ".", "index", "(", "'model_id'", ")", "]", "]", "=", "{", "\n", "headers", "[", "x", "]", ":", "row", "[", "x", "]", "\n", "for", "x", "in", "range", "(", "2", ",", "len", "(", "headers", ")", ")", "# 0 is index, 1 is model_id", "\n", "}", "\n", "\n", "", "for", "i", "in", "levelsToExplore", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", ")", ")", ":", "\n", "                ", "assert", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'type'", "]", "!=", "'Box'", "\n", "\n", "if", "'valid'", "in", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", ":", "\n", "                    ", "assert", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'valid'", "]", "==", "1", "\n", "\n", "# Rooms", "\n", "", "if", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'type'", "]", "==", "'Room'", ":", "\n", "                    ", "if", "'roomTypes'", "not", "in", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", ":", "\n", "                        ", "continue", "\n", "\n", "# Can rooms have more than one type?", "\n", "# Yes, they can; just found ['Living_Room', 'Dining_Room', 'Kitchen']", "\n", "# assert len(data['levels'][i]['nodes'][j]['roomTypes']) <= 3", "\n", "\n", "", "roomType", "=", "[", "\n", "# ' '.join(x.lower().split('_'))", "\n", "x", ".", "lower", "(", ")", "\n", "for", "x", "in", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'roomTypes'", "]", "\n", "]", "\n", "\n", "nodes", "=", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "\n", "'nodeIndices'", "]", "if", "'nodeIndices'", "in", "data", "[", "'levels'", "]", "[", "i", "]", "[", "\n", "'nodes'", "]", "[", "j", "]", "else", "[", "]", "\n", "rooms", ".", "append", "(", "{", "\n", "'type'", ":", "\n", "roomType", ",", "\n", "'bbox'", ":", "\n", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'bbox'", "]", ",", "\n", "'nodes'", ":", "\n", "nodes", ",", "\n", "'model_id'", ":", "\n", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'modelId'", "]", "\n", "}", ")", "\n", "\n", "# Objects", "\n", "", "elif", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'type'", "]", "==", "'Object'", ":", "\n", "                    ", "if", "'materials'", "not", "in", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", ":", "\n", "                        ", "material", "=", "[", "]", "\n", "", "else", ":", "\n", "                        ", "material", "=", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'materials'", "]", "\n", "", "objects", "[", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'id'", "]", "]", "=", "{", "\n", "'id'", ":", "\n", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'id'", "]", ",", "\n", "'model_id'", ":", "\n", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'modelId'", "]", ",", "\n", "'fine_class'", ":", "\n", "modelCategoryMapping", "[", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "\n", "'modelId'", "]", "]", "[", "'fine_grained_class'", "]", ",", "\n", "'coarse_class'", ":", "\n", "modelCategoryMapping", "[", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "\n", "'modelId'", "]", "]", "[", "'coarse_grained_class'", "]", ",", "\n", "'bbox'", ":", "\n", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'bbox'", "]", ",", "\n", "'mat'", ":", "\n", "material", "\n", "}", "\n", "\n", "", "", "", "return", "rooms", ",", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.spawn_room": [[592, 617], ["house3d.House3DUtils.env.house._getRooms", "numpy.random.choice", "house3d.House3DUtils.env.house._getRoomBounds", "range", "numpy.random.choice", "numpy.random.choice.lower().split", "house3d.House3DUtils.env.house.hasRoomType", "range", "len", "numpy.random.choice.lower", "available_coords.append"], "methods", ["None"], ["", "def", "spawn_room", "(", "self", ",", "room", "=", "None", ")", ":", "\n", "        ", "if", "room", "==", "None", ":", "\n", "            ", "return", "False", ",", "None", "\n", "\n", "", "target_room", "=", "'_'", ".", "join", "(", "room", ".", "lower", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "\n", "if", "self", ".", "env", ".", "house", ".", "hasRoomType", "(", "target_room", ")", "==", "False", ":", "\n", "            ", "return", "False", ",", "None", "\n", "\n", "", "rooms", "=", "self", ".", "env", ".", "house", ".", "_getRooms", "(", "target_room", ")", "\n", "room", "=", "np", ".", "random", ".", "choice", "(", "rooms", ")", "\n", "\n", "gx1", ",", "gy1", ",", "gx2", ",", "gy2", "=", "self", ".", "env", ".", "house", ".", "_getRoomBounds", "(", "room", ")", "\n", "\n", "available_coords", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "gx1", ",", "gx2", "+", "1", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "gy1", ",", "gy2", "+", "1", ")", ":", "\n", "                ", "if", "self", ".", "env", ".", "house", ".", "moveMap", "[", "x", ",", "y", "]", ">", "0", ":", "\n", "                    ", "available_coords", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "\n", "# print(available_coords)", "\n", "", "", "", "spawn_coord_idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "available_coords", ")", ")", "\n", "spawn_coord", "=", "available_coords", "[", "spawn_coord_idx", "]", "\n", "\n", "return", "spawn_coord", ",", "room", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.spawn_object": [[620, 682], ["numpy.random.choice", "obj[].lower", "house3d.House3DUtils.env.house._getRoomBounds", "house3d.House3DUtils.set_target_object", "numpy.where", "range", "isinstance", "list", "len", "len", "int", "len", "len", "spawn_coords.append", "x.lower().split", "itertools.chain.from_iterable", "x.lower", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.set_target_object"], ["", "def", "spawn_object", "(", "self", ",", "obj", "=", "None", ",", "room", "=", "None", ")", ":", "\n", "        ", "if", "object", "==", "None", ":", "\n", "            ", "return", "False", ",", "None", "\n", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", "==", "False", ":", "\n", "            ", "obj", "=", "[", "obj", "]", "\n", "\n", "", "is_door", "=", "False", "\n", "if", "'door'", "in", "obj", ":", "\n", "            ", "is_door", "=", "True", "\n", "\n", "", "target_obj", "=", "[", "'_'", ".", "join", "(", "x", ".", "lower", "(", ")", ".", "split", "(", "' '", ")", ")", "for", "x", "in", "obj", "]", "\n", "\n", "if", "room", "!=", "None", ":", "\n", "            ", "if", "'nodeIndices'", "in", "room", ":", "\n", "                ", "objs", "=", "[", "\n", "self", ".", "objects", "[", "'0_'", "+", "str", "(", "x", ")", "]", "for", "x", "in", "room", "[", "'nodeIndices'", "]", "\n", "if", "self", ".", "objects", "[", "'0_'", "+", "str", "(", "x", ")", "]", "[", "'fine_class'", "]", "in", "target_obj", "\n", "]", "\n", "", "else", ":", "\n", "                ", "objs", "=", "[", "\n", "self", ".", "objects", "[", "'0_'", "+", "str", "(", "x", ")", "]", "for", "x", "in", "room", "[", "'nodes'", "]", "\n", "if", "self", ".", "objects", "[", "'0_'", "+", "str", "(", "x", ")", "]", "[", "'fine_class'", "]", "in", "target_obj", "\n", "]", "\n", "", "", "else", ":", "\n", "            ", "obj_id_list", "=", "list", "(", "\n", "itertools", ".", "chain", ".", "from_iterable", "(", "\n", "[", "x", "[", "'nodes'", "]", "for", "x", "in", "self", ".", "rooms", "if", "x", "[", "'type'", "]", "!=", "[", "]", "]", ")", ")", "\n", "objs", "=", "[", "\n", "self", ".", "objects", "[", "'0_'", "+", "str", "(", "x", ")", "]", "for", "x", "in", "obj_id_list", "\n", "if", "self", ".", "objects", "[", "'0_'", "+", "str", "(", "x", ")", "]", "[", "'fine_class'", "]", "in", "target_obj", "\n", "]", "\n", "\n", "", "if", "len", "(", "objs", ")", "==", "0", ":", "\n", "            ", "return", "False", ",", "None", ",", "None", "\n", "\n", "", "obj_idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "objs", ")", ")", "\n", "obj", "=", "objs", "[", "obj_idx", "]", "\n", "\n", "self", ".", "target_obj_class", "=", "obj", "[", "'fine_class'", "]", ".", "lower", "(", ")", "\n", "\n", "gx1", ",", "gy1", ",", "gx2", ",", "gy2", "=", "self", ".", "env", ".", "house", ".", "_getRoomBounds", "(", "obj", ")", "\n", "\n", "if", "room", "==", "None", ":", "\n", "            ", "obj_node_idx", "=", "int", "(", "obj", "[", "'id'", "]", "[", "2", ":", "]", ")", "\n", "room", "=", "[", "\n", "x", "for", "x", "in", "self", ".", "env", ".", "house", ".", "all_rooms", "\n", "if", "'nodeIndices'", "in", "x", "and", "obj_node_idx", "in", "x", "[", "'nodeIndices'", "]", "\n", "]", "[", "0", "]", "\n", "\n", "", "self", ".", "set_target_object", "(", "obj", ",", "room", ")", "\n", "\n", "available_x", ",", "available_y", "=", "np", ".", "where", "(", "self", ".", "env", ".", "house", ".", "connMap", "==", "0", ")", "\n", "\n", "if", "len", "(", "available_x", ")", "==", "0", ":", "\n", "            ", "return", "False", ",", "None", ",", "None", "\n", "\n", "", "spawn_coords", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "available_x", ")", ")", ":", "\n", "            ", "spawn_coords", ".", "append", "(", "(", "available_x", "[", "i", "]", ",", "available_y", "[", "i", "]", ")", ")", "\n", "\n", "", "return", "spawn_coords", ",", "obj", ",", "room", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.set_target_object": [[684, 816], ["house3d.House3DUtils.env.house.rescale", "range", "numpy.save", "print", "obj[].lower", "os.path.exists", "numpy.ones", "numpy.ones", "house3d.House3DUtils.env.house.rescale", "house3d.House3DUtils.env.house._find_components", "isinstance", "len", "os.path.join", "os.path.join", "numpy.load", "len", "print", "ValueError", "list", "house3d.House3DUtils.env.house.to_coor", "numpy.sqrt", "len", "os.path.join", "itertools.chain", "range", "range", "numpy.sqrt", "int", "que.append", "house3d.House3DUtils.env.house.inside", "house3d.House3DUtils.env.house.canMove", "que.append", "numpy.ceil", "range", "range", "house3d.House3DUtils.env.house.isConnect"], "methods", ["None"], ["", "def", "set_target_object", "(", "self", ",", "obj", ",", "room", ")", ":", "\n", "        ", "object_tp", "=", "room", "[", "'id'", "]", "+", "'_'", "+", "obj", "[", "'id'", "]", "+", "'_'", "+", "obj", "[", "'fine_class'", "]", ".", "lower", "(", "\n", ")", "\n", "# Caching", "\n", "if", "object_tp", "in", "self", ".", "env", ".", "house", ".", "connMapDict", ":", "\n", "            ", "self", ".", "env", ".", "house", ".", "connMap", ",", "self", ".", "env", ".", "house", ".", "connectedCoors", ",", "self", ".", "env", ".", "house", ".", "inroomDist", ",", "self", ".", "env", ".", "house", ".", "maxConnDist", "=", "self", ".", "env", ".", "house", ".", "connMapDict", "[", "\n", "object_tp", "]", "\n", "return", "True", "# object changed!", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "target_obj_conn_map_dir", ",", "\n", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'_'", "+", "object_tp", "+", "'.npy'", ")", ")", ":", "\n", "            ", "self", ".", "env", ".", "house", ".", "connMap", "=", "np", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "target_obj_conn_map_dir", ",", "\n", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'_'", "+", "object_tp", "+", "'.npy'", ")", ")", "\n", "\n", "if", "self", ".", "env", ".", "house", ".", "connMap", ".", "shape", "[", "0", "]", "==", "self", ".", "env", ".", "house", ".", "n_row", "+", "1", ":", "\n", "                ", "self", ".", "env", ".", "house", ".", "connectedCoors", ",", "self", ".", "env", ".", "house", ".", "inroomDist", ",", "self", ".", "env", ".", "house", ".", "maxConnDist", "=", "None", ",", "None", ",", "None", "\n", "return", "True", "\n", "\n", "", "", "self", ".", "env", ".", "house", ".", "connMap", "=", "connMap", "=", "np", ".", "ones", "(", "\n", "(", "self", ".", "env", ".", "house", ".", "n_row", "+", "1", ",", "self", ".", "env", ".", "house", ".", "n_row", "+", "1", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "*", "-", "1", "\n", "self", ".", "env", ".", "house", ".", "inroomDist", "=", "inroomDist", "=", "np", ".", "ones", "(", "\n", "(", "self", ".", "env", ".", "house", ".", "n_row", "+", "1", ",", "self", ".", "env", ".", "house", ".", "n_row", "+", "1", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "*", "-", "1", "\n", "dirs", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "-", "1", ",", "0", "]", ",", "[", "0", ",", "-", "1", "]", "]", "\n", "que", "=", "[", "]", "\n", "flag_find_open_components", "=", "True", "\n", "\n", "_ox1", ",", "_", ",", "_oy1", "=", "obj", "[", "'bbox'", "]", "[", "'min'", "]", "\n", "_ox2", ",", "_", ",", "_oy2", "=", "obj", "[", "'bbox'", "]", "[", "'max'", "]", "\n", "ocx", ",", "ocy", "=", "(", "_ox1", "+", "_ox2", ")", "/", "2", ",", "(", "_oy1", "+", "_oy2", ")", "/", "2", "\n", "ox1", ",", "oy1", ",", "ox2", ",", "oy2", "=", "self", ".", "env", ".", "house", ".", "rescale", "(", "_ox1", ",", "_oy1", ",", "_ox2", ",", "_oy2", ")", "\n", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "_x1", ",", "_", ",", "_y1", "=", "room", "[", "'bbox'", "]", "[", "'min'", "]", "\n", "_x2", ",", "_", ",", "_y2", "=", "room", "[", "'bbox'", "]", "[", "'max'", "]", "\n", "cx", ",", "cy", "=", "(", "_x1", "+", "_x2", ")", "/", "2", ",", "(", "_y1", "+", "_y2", ")", "/", "2", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "self", ".", "env", ".", "house", ".", "rescale", "(", "_x1", ",", "_y1", ",", "_x2", ",", "_y2", ")", "\n", "\n", "curr_components", "=", "self", ".", "env", ".", "house", ".", "_find_components", "(", "\n", "x1", ",", "\n", "y1", ",", "\n", "x2", ",", "\n", "y2", ",", "\n", "dirs", "=", "dirs", ",", "\n", "return_open", "=", "flag_find_open_components", "\n", ")", "# find all the open components", "\n", "if", "len", "(", "curr_components", ")", "==", "0", ":", "\n", "                ", "print", "(", "'No space found! =('", ")", "\n", "raise", "ValueError", "(", "'no space'", ")", "\n", "", "if", "isinstance", "(", "curr_components", "[", "0", "]", ",", "\n", "list", ")", ":", "# join all the coors in the open components", "\n", "                ", "curr_major_coors", "=", "list", "(", "itertools", ".", "chain", "(", "*", "curr_components", ")", ")", "\n", "", "else", ":", "\n", "                ", "curr_major_coors", "=", "curr_components", "\n", "", "min_dist_to_center", ",", "min_dist_to_edge", "=", "1e50", ",", "1e50", "\n", "for", "x", ",", "y", "in", "curr_major_coors", ":", "\n", "###", "\n", "# Compute minimum dist to edge here", "\n", "                ", "if", "x", "in", "range", "(", "ox1", ",", "ox2", ")", ":", "\n", "                    ", "dx", "=", "0", "\n", "", "elif", "x", "<", "ox1", ":", "\n", "                    ", "dx", "=", "ox1", "-", "x", "\n", "", "else", ":", "\n", "                    ", "dx", "=", "x", "-", "ox2", "\n", "\n", "", "if", "y", "in", "range", "(", "oy1", ",", "oy2", ")", ":", "\n", "                    ", "dy", "=", "0", "\n", "", "elif", "y", "<", "oy1", ":", "\n", "                    ", "dy", "=", "oy1", "-", "y", "\n", "", "else", ":", "\n", "                    ", "dy", "=", "y", "-", "oy2", "\n", "\n", "", "assert", "dx", ">=", "0", "and", "dy", ">=", "0", "\n", "\n", "if", "dx", "!=", "0", "or", "dy", "!=", "0", ":", "\n", "                    ", "dd", "=", "np", ".", "sqrt", "(", "dx", "**", "2", "+", "dy", "**", "2", ")", "\n", "", "elif", "dx", "==", "0", ":", "\n", "                    ", "dd", "=", "dy", "\n", "", "else", ":", "\n", "                    ", "dd", "=", "dx", "\n", "\n", "", "if", "dd", "<", "min_dist_to_edge", ":", "\n", "                    ", "min_dist_to_edge", "=", "int", "(", "np", ".", "ceil", "(", "dd", ")", ")", "\n", "###", "\n", "", "tx", ",", "ty", "=", "self", ".", "env", ".", "house", ".", "to_coor", "(", "x", ",", "y", ")", "\n", "tdist", "=", "np", ".", "sqrt", "(", "(", "tx", "-", "ocx", ")", "**", "2", "+", "(", "ty", "-", "ocy", ")", "**", "2", ")", "\n", "if", "tdist", "<", "min_dist_to_center", ":", "\n", "                    ", "min_dist_to_center", "=", "tdist", "\n", "", "inroomDist", "[", "x", ",", "y", "]", "=", "tdist", "\n", "", "margin", "=", "min_dist_to_edge", "+", "1", "\n", "for", "x", ",", "y", "in", "curr_major_coors", ":", "\n", "                ", "inroomDist", "[", "x", ",", "y", "]", "-=", "min_dist_to_center", "\n", "", "for", "x", ",", "y", "in", "curr_major_coors", ":", "\n", "                ", "if", "x", "in", "range", "(", "ox1", "-", "margin", ",", "ox2", "+", "margin", ")", "and", "y", "in", "range", "(", "\n", "oy1", "-", "margin", ",", "oy2", "+", "margin", ")", ":", "\n", "                    ", "connMap", "[", "x", ",", "y", "]", "=", "0", "\n", "que", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "", "", "if", "len", "(", "que", ")", ">", "0", ":", "break", "\n", "if", "flag_find_open_components", ":", "\n", "                ", "flag_find_open_components", "=", "False", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "raise", "ValueError", "\n", "\n", "", "ptr", "=", "0", "\n", "self", ".", "env", ".", "house", ".", "maxConnDist", "=", "1", "\n", "while", "ptr", "<", "len", "(", "que", ")", ":", "\n", "            ", "x", ",", "y", "=", "que", "[", "ptr", "]", "\n", "cur_dist", "=", "connMap", "[", "x", ",", "y", "]", "\n", "ptr", "+=", "1", "\n", "for", "dx", ",", "dy", "in", "dirs", ":", "\n", "                ", "tx", ",", "ty", "=", "x", "+", "dx", ",", "y", "+", "dy", "\n", "if", "self", ".", "env", ".", "house", ".", "inside", "(", "tx", ",", "ty", ")", "and", "self", ".", "env", ".", "house", ".", "canMove", "(", "\n", "tx", ",", "ty", ")", "and", "not", "self", ".", "env", ".", "house", ".", "isConnect", "(", "tx", ",", "ty", ")", ":", "\n", "                    ", "que", ".", "append", "(", "(", "tx", ",", "ty", ")", ")", "\n", "connMap", "[", "tx", ",", "ty", "]", "=", "cur_dist", "+", "1", "\n", "if", "cur_dist", "+", "1", ">", "self", ".", "env", ".", "house", ".", "maxConnDist", ":", "\n", "                        ", "self", ".", "env", ".", "house", ".", "maxConnDist", "=", "cur_dist", "+", "1", "\n", "", "", "", "", "self", ".", "env", ".", "house", ".", "connMapDict", "[", "object_tp", "]", "=", "(", "connMap", ",", "que", ",", "inroomDist", ",", "\n", "self", ".", "env", ".", "house", ".", "maxConnDist", ")", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "target_obj_conn_map_dir", ",", "\n", "self", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'_'", "+", "object_tp", "+", "'.npy'", ")", ",", "\n", "connMap", ")", "\n", "self", ".", "connectedCoors", "=", "que", "\n", "print", "(", "' >>>> ConnMap Cached!'", ")", "\n", "return", "True", "# room changed!", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils._load_semantic_classes": [[817, 831], ["open", "csv.DictReader", "numpy.array", "row[].lower"], "methods", ["None"], ["", "def", "_load_semantic_classes", "(", "self", ",", "color_file", "=", "None", ")", ":", "\n", "        ", "if", "color_file", "==", "None", ":", "\n", "            ", "color_file", "=", "self", ".", "env", ".", "config", "[", "'colorFile'", "]", "\n", "\n", "", "self", ".", "semantic_classes", "=", "{", "}", "\n", "\n", "with", "open", "(", "color_file", ")", "as", "csv_file", ":", "\n", "            ", "reader", "=", "csv", ".", "DictReader", "(", "csv_file", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "c", "=", "np", ".", "array", "(", "(", "row", "[", "'r'", "]", ",", "row", "[", "'g'", "]", ",", "row", "[", "'b'", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "fine_cat", "=", "row", "[", "'name'", "]", ".", "lower", "(", ")", "\n", "self", ".", "semantic_classes", "[", "fine_cat", "]", "=", "c", "\n", "\n", "", "", "return", "self", ".", "semantic_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils._get_best_yaw_obj_from_pos": [[832, 862], ["house3d.House3DUtils.env.house.to_coor", "house3d.House3DUtils.env.cam.updateDirection", "house3d.House3DUtils.env.render", "numpy.all", "numpy.sum", "obj_fine_class.lower"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.render"], ["", "def", "_get_best_yaw_obj_from_pos", "(", "self", ",", "obj_id", ",", "grid_pos", ",", "height", "=", "1.0", ")", ":", "\n", "        ", "obj", "=", "self", ".", "objects", "[", "obj_id", "]", "\n", "obj_fine_class", "=", "obj", "[", "'fine_class'", "]", "\n", "\n", "cx", ",", "cy", "=", "self", ".", "env", ".", "house", ".", "to_coor", "(", "grid_pos", "[", "0", "]", ",", "grid_pos", "[", "1", "]", ")", "\n", "\n", "self", ".", "env", ".", "cam", ".", "pos", ".", "x", "=", "cx", "\n", "self", ".", "env", ".", "cam", ".", "pos", ".", "y", "=", "height", "\n", "self", ".", "env", ".", "cam", ".", "pos", ".", "z", "=", "cy", "\n", "\n", "best_yaw", ",", "best_coverage", "=", "None", ",", "0", "\n", "\n", "for", "yaw", "in", "self", ".", "angles", ":", "\n", "            ", "self", ".", "env", ".", "cam", ".", "yaw", "=", "yaw", "\n", "self", ".", "env", ".", "cam", ".", "updateDirection", "(", ")", "\n", "\n", "seg", "=", "self", ".", "env", ".", "render", "(", "mode", "=", "'semantic'", ")", "\n", "c", "=", "self", ".", "semantic_classes", "[", "obj_fine_class", ".", "lower", "(", ")", "]", "\n", "mask", "=", "np", ".", "all", "(", "seg", "==", "c", ",", "axis", "=", "2", ")", "\n", "coverage", "=", "np", ".", "sum", "(", "mask", ")", "/", "(", "seg", ".", "shape", "[", "0", "]", "*", "seg", ".", "shape", "[", "1", "]", ")", "\n", "\n", "if", "best_yaw", "==", "None", ":", "\n", "                ", "best_yaw", "=", "yaw", "\n", "best_coverage", "=", "coverage", "\n", "", "else", ":", "\n", "                ", "if", "coverage", ">", "best_coverage", ":", "\n", "                    ", "best_yaw", "=", "yaw", "\n", "best_coverage", "=", "coverage", "\n", "\n", "", "", "", "return", "best_yaw", ",", "best_coverage", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils._get_best_view_obj": [[863, 916], ["numpy.asarray", "numpy.asarray", "numpy.sqrt", "house3d.House3DUtils.env.cam.updateDirection", "house3d.House3DUtils.env.render", "numpy.all", "returned_pos_cov.append", "min", "numpy.sum", "max", "obj_fine_class.lower", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.render"], ["", "def", "_get_best_view_obj", "(", "self", ",", "\n", "obj", ",", "\n", "coverage_thres", "=", "0.5", ",", "\n", "dist_add", "=", "0.5", ",", "\n", "robot_height", "=", "False", ")", ":", "\n", "        ", "bbox", "=", "obj", "[", "'bbox'", "]", "\n", "obj_fine_class", "=", "obj", "[", "'fine_class'", "]", "\n", "\n", "obj_max", "=", "np", ".", "asarray", "(", "bbox", "[", "'max'", "]", ")", "\n", "obj_min", "=", "np", ".", "asarray", "(", "bbox", "[", "'min'", "]", ")", "\n", "obj_center", "=", "(", "obj_min", "+", "obj_max", ")", "/", "2", "\n", "\n", "c_x", ",", "c_y", ",", "c_z", "=", "obj_center", "\n", "max_radius", "=", "np", ".", "sqrt", "(", "\n", "(", "obj_max", "[", "0", "]", "-", "obj_min", "[", "0", "]", ")", "*", "(", "obj_max", "[", "0", "]", "-", "obj_min", "[", "0", "]", ")", "+", "\n", "(", "obj_max", "[", "2", "]", "-", "obj_min", "[", "2", "]", ")", "*", "(", "obj_max", "[", "2", "]", "-", "obj_min", "[", "2", "]", ")", ")", "/", "2.0", "\n", "max_radius", "+=", "dist_add", "\n", "\n", "best_pos", "=", "None", "\n", "best_coverage", "=", "0", "\n", "\n", "returned_pos_cov", "=", "[", "]", "\n", "\n", "for", "yaw", "in", "self", ".", "angles", ":", "\n", "            ", "pos", "=", "[", "\n", "c_x", "-", "max_radius", "*", "np", ".", "cos", "(", "yaw", "*", "(", "2", "*", "np", ".", "pi", ")", "/", "360.0", ")", ",", "c_y", ",", "\n", "c_z", "-", "max_radius", "*", "np", ".", "sin", "(", "yaw", "*", "(", "2", "*", "np", ".", "pi", ")", "/", "360.0", ")", ",", "yaw", "\n", "]", "\n", "\n", "if", "robot_height", "==", "True", ":", "\n", "                ", "pos", "[", "1", "]", "=", "min", "(", "max", "(", "0.75", ",", "c_y", ")", ",", "2.00", ")", "\n", "\n", "", "self", ".", "env", ".", "cam", ".", "pos", ".", "x", "=", "pos", "[", "0", "]", "\n", "self", ".", "env", ".", "cam", ".", "pos", ".", "y", "=", "pos", "[", "1", "]", "\n", "self", ".", "env", ".", "cam", ".", "pos", ".", "z", "=", "pos", "[", "2", "]", "\n", "self", ".", "env", ".", "cam", ".", "yaw", "=", "pos", "[", "3", "]", "\n", "\n", "self", ".", "env", ".", "cam", ".", "updateDirection", "(", ")", "\n", "\n", "seg", "=", "self", ".", "env", ".", "render", "(", "mode", "=", "'semantic'", ")", "\n", "c", "=", "self", ".", "semantic_classes", "[", "obj_fine_class", ".", "lower", "(", ")", "]", "\n", "mask", "=", "np", ".", "all", "(", "seg", "==", "c", ",", "axis", "=", "2", ")", "\n", "coverage", "=", "np", ".", "sum", "(", "mask", ")", "/", "(", "seg", ".", "shape", "[", "0", "]", "*", "seg", ".", "shape", "[", "1", "]", ")", "\n", "\n", "returned_pos_cov", ".", "append", "(", "[", "pos", ",", "coverage", "]", ")", "\n", "\n", "if", "coverage", ">", "coverage_thres", ":", "\n", "                ", "return", "pos", ",", "coverage", ",", "returned_pos_cov", "\n", "", "elif", "coverage", ">", "best_coverage", ":", "\n", "                ", "best_coverage", "=", "coverage", "\n", "best_pos", "=", "pos", "\n", "\n", "", "", "return", "best_pos", ",", "best_coverage", ",", "returned_pos_cov", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions_pkl.tokenize": [[17, 35], ["str().split", "str().split.insert", "str().split.append", "str().replace", "str", "str"], "function", ["None"], ["def", "tokenize", "(", "seq", ",", "\n", "delim", "=", "' '", ",", "\n", "punctToRemove", "=", "None", ",", "\n", "addStartToken", "=", "True", ",", "\n", "addEndToken", "=", "True", ")", ":", "\n", "\n", "    ", "if", "punctToRemove", "is", "not", "None", ":", "\n", "        ", "for", "p", "in", "punctToRemove", ":", "\n", "            ", "seq", "=", "str", "(", "seq", ")", ".", "replace", "(", "p", ",", "''", ")", "\n", "\n", "", "", "tokens", "=", "str", "(", "seq", ")", ".", "split", "(", "delim", ")", "\n", "if", "addStartToken", ":", "\n", "        ", "tokens", ".", "insert", "(", "0", ",", "'<START>'", ")", "\n", "\n", "", "if", "addEndToken", ":", "\n", "        ", "tokens", ".", "append", "(", "'<END>'", ")", "\n", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions_pkl.buildVocab": [[37, 71], ["sorted", "preprocess_questions_pkl.tokenize", "SPECIAL_TOKENS.items", "tokenToCount.items", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions.tokenize"], ["", "def", "buildVocab", "(", "sequences", ",", "\n", "minTokenCount", "=", "1", ",", "\n", "delim", "=", "' '", ",", "\n", "punctToRemove", "=", "None", ",", "\n", "addSpecialTok", "=", "False", ")", ":", "\n", "    ", "SPECIAL_TOKENS", "=", "{", "\n", "'<NULL>'", ":", "0", ",", "\n", "'<START>'", ":", "1", ",", "\n", "'<END>'", ":", "2", ",", "\n", "'<UNK>'", ":", "3", ",", "\n", "}", "\n", "\n", "tokenToCount", "=", "{", "}", "\n", "for", "seq", "in", "sequences", ":", "\n", "        ", "seqTokens", "=", "tokenize", "(", "\n", "seq", ",", "\n", "delim", "=", "delim", ",", "\n", "punctToRemove", "=", "punctToRemove", ",", "\n", "addStartToken", "=", "False", ",", "\n", "addEndToken", "=", "False", ")", "\n", "for", "token", "in", "seqTokens", ":", "\n", "            ", "if", "token", "not", "in", "tokenToCount", ":", "\n", "                ", "tokenToCount", "[", "token", "]", "=", "0", "\n", "", "tokenToCount", "[", "token", "]", "+=", "1", "\n", "\n", "", "", "tokenToIdx", "=", "{", "}", "\n", "if", "addSpecialTok", "==", "True", ":", "\n", "        ", "for", "token", ",", "idx", "in", "SPECIAL_TOKENS", ".", "items", "(", ")", ":", "\n", "            ", "tokenToIdx", "[", "token", "]", "=", "idx", "\n", "", "", "for", "token", ",", "count", "in", "sorted", "(", "tokenToCount", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "count", ">=", "minTokenCount", ":", "\n", "            ", "tokenToIdx", "[", "token", "]", "=", "len", "(", "tokenToIdx", ")", "\n", "\n", "", "", "return", "tokenToIdx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions_pkl.encode": [[73, 83], ["seqIdx.append", "KeyError"], "function", ["None"], ["", "def", "encode", "(", "seqTokens", ",", "tokenToIdx", ",", "allowUnk", "=", "False", ")", ":", "\n", "    ", "seqIdx", "=", "[", "]", "\n", "for", "token", "in", "seqTokens", ":", "\n", "        ", "if", "token", "not", "in", "tokenToIdx", ":", "\n", "            ", "if", "allowUnk", ":", "\n", "                ", "token", "=", "'<UNK>'", "\n", "", "else", ":", "\n", "                ", "raise", "KeyError", "(", "'Token \"%s\" not in vocab'", "%", "token", ")", "\n", "", "", "seqIdx", ".", "append", "(", "tokenToIdx", "[", "token", "]", ")", "\n", "", "return", "seqIdx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions_pkl.decode": [[85, 95], ["tokens.append", "delim.join"], "function", ["None"], ["", "def", "decode", "(", "seqIdx", ",", "idxToToken", ",", "delim", "=", "None", ",", "stopAtEnd", "=", "True", ")", ":", "\n", "    ", "tokens", "=", "[", "]", "\n", "for", "idx", "in", "seqIdx", ":", "\n", "        ", "tokens", ".", "append", "(", "idxToToken", "[", "idx", "]", ")", "\n", "if", "stopAtEnd", "and", "tokens", "[", "-", "1", "]", "==", "'<END>'", ":", "\n", "            ", "break", "\n", "", "", "if", "delim", "is", "None", ":", "\n", "        ", "return", "tokens", "\n", "", "else", ":", "\n", "        ", "return", "delim", ".", "join", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions_pkl.preprocessImages": [[97, 117], ["os.path.join", "range", "image_paths.append", "imread", "imresize", "img.transpose.transpose", "image_frames.append", "len", "os.path.isfile", "print"], "function", ["None"], ["", "", "def", "preprocessImages", "(", "obj", ",", "render_dir", "=", "False", ")", ":", "\n", "    ", "working_dir", "=", "os", ".", "path", ".", "join", "(", "render_dir", ",", "'working'", ")", "\n", "path_id", "=", "obj", "[", "'path_id'", "]", "\n", "image_paths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "obj", "[", "'pos_queue'", "]", ")", "-", "1", ")", ":", "\n", "        ", "image_paths", ".", "append", "(", "'%s/%s_%05d.jpg'", "%", "(", "working_dir", ",", "path_id", ",", "i", "+", "1", ")", ")", "\n", "\n", "", "image_frames", "=", "[", "]", "\n", "for", "i", "in", "image_paths", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "i", ")", "==", "False", ":", "\n", "            ", "print", "(", "i", ")", "\n", "return", "False", "\n", "", "img", "=", "imread", "(", "i", ",", "mode", "=", "'RGB'", ")", "\n", "img", "=", "imresize", "(", "img", ",", "(", "224", ",", "224", ")", ",", "interp", "=", "'bicubic'", ")", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "img", "/", "255.0", "\n", "image_frames", ".", "append", "(", "img", ")", "\n", "# TODO: mean subtraction", "\n", "\n", "", "return", "image_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions_pkl.processActions": [[119, 141], ["action_ids.append"], "function", ["None"], ["", "def", "processActions", "(", "actions", ")", ":", "\n", "# from shortest-path-gen format", "\n", "# 0: forward", "\n", "# 1: left", "\n", "# 2: right", "\n", "# 3: stop", "\n", "#", "\n", "# to", "\n", "# 0: null", "\n", "# 1: start", "\n", "# 2: forward", "\n", "# 3: left", "\n", "# 4: right", "\n", "# 5: stop", "\n", "# for model training", "\n", "    ", "action_translations", "=", "{", "0", ":", "2", ",", "1", ":", "3", ",", "2", ":", "4", ",", "3", ":", "5", "}", "\n", "\n", "action_ids", "=", "[", "1", "]", "\n", "\n", "for", "i", "in", "actions", ":", "\n", "        ", "action_ids", ".", "append", "(", "action_translations", "[", "i", "]", ")", "\n", "", "return", "action_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions.tokenize": [[21, 39], ["str().split", "str().split.insert", "str().split.append", "str().replace", "str", "str"], "function", ["None"], ["def", "tokenize", "(", "seq", ",", "\n", "delim", "=", "' '", ",", "\n", "punctToRemove", "=", "None", ",", "\n", "addStartToken", "=", "True", ",", "\n", "addEndToken", "=", "True", ")", ":", "\n", "\n", "    ", "if", "punctToRemove", "is", "not", "None", ":", "\n", "        ", "for", "p", "in", "punctToRemove", ":", "\n", "            ", "seq", "=", "str", "(", "seq", ")", ".", "replace", "(", "p", ",", "''", ")", "\n", "\n", "", "", "tokens", "=", "str", "(", "seq", ")", ".", "split", "(", "delim", ")", "\n", "if", "addStartToken", ":", "\n", "        ", "tokens", ".", "insert", "(", "0", ",", "'<START>'", ")", "\n", "\n", "", "if", "addEndToken", ":", "\n", "        ", "tokens", ".", "append", "(", "'<END>'", ")", "\n", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions.buildVocab": [[41, 75], ["sorted", "preprocess_questions.tokenize", "SPECIAL_TOKENS.items", "tokenToCount.items", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions.tokenize"], ["", "def", "buildVocab", "(", "sequences", ",", "\n", "minTokenCount", "=", "1", ",", "\n", "delim", "=", "' '", ",", "\n", "punctToRemove", "=", "None", ",", "\n", "addSpecialTok", "=", "False", ")", ":", "\n", "    ", "SPECIAL_TOKENS", "=", "{", "\n", "'<NULL>'", ":", "0", ",", "\n", "'<START>'", ":", "1", ",", "\n", "'<END>'", ":", "2", ",", "\n", "'<UNK>'", ":", "3", ",", "\n", "}", "\n", "\n", "tokenToCount", "=", "{", "}", "\n", "for", "seq", "in", "sequences", ":", "\n", "        ", "seqTokens", "=", "tokenize", "(", "\n", "seq", ",", "\n", "delim", "=", "delim", ",", "\n", "punctToRemove", "=", "punctToRemove", ",", "\n", "addStartToken", "=", "False", ",", "\n", "addEndToken", "=", "False", ")", "\n", "for", "token", "in", "seqTokens", ":", "\n", "            ", "if", "token", "not", "in", "tokenToCount", ":", "\n", "                ", "tokenToCount", "[", "token", "]", "=", "0", "\n", "", "tokenToCount", "[", "token", "]", "+=", "1", "\n", "\n", "", "", "tokenToIdx", "=", "{", "}", "\n", "if", "addSpecialTok", "==", "True", ":", "\n", "        ", "for", "token", ",", "idx", "in", "SPECIAL_TOKENS", ".", "items", "(", ")", ":", "\n", "            ", "tokenToIdx", "[", "token", "]", "=", "idx", "\n", "", "", "for", "token", ",", "count", "in", "sorted", "(", "tokenToCount", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "count", ">=", "minTokenCount", ":", "\n", "            ", "tokenToIdx", "[", "token", "]", "=", "len", "(", "tokenToIdx", ")", "\n", "\n", "", "", "return", "tokenToIdx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions.encode": [[77, 87], ["seqIdx.append", "KeyError"], "function", ["None"], ["", "def", "encode", "(", "seqTokens", ",", "tokenToIdx", ",", "allowUnk", "=", "False", ")", ":", "\n", "    ", "seqIdx", "=", "[", "]", "\n", "for", "token", "in", "seqTokens", ":", "\n", "        ", "if", "token", "not", "in", "tokenToIdx", ":", "\n", "            ", "if", "allowUnk", ":", "\n", "                ", "token", "=", "'<UNK>'", "\n", "", "else", ":", "\n", "                ", "raise", "KeyError", "(", "'Token \"%s\" not in vocab'", "%", "token", ")", "\n", "", "", "seqIdx", ".", "append", "(", "tokenToIdx", "[", "token", "]", ")", "\n", "", "return", "seqIdx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions.decode": [[89, 99], ["tokens.append", "delim.join"], "function", ["None"], ["", "def", "decode", "(", "seqIdx", ",", "idxToToken", ",", "delim", "=", "None", ",", "stopAtEnd", "=", "True", ")", ":", "\n", "    ", "tokens", "=", "[", "]", "\n", "for", "idx", "in", "seqIdx", ":", "\n", "        ", "tokens", ".", "append", "(", "idxToToken", "[", "idx", "]", ")", "\n", "if", "stopAtEnd", "and", "tokens", "[", "-", "1", "]", "==", "'<END>'", ":", "\n", "            ", "break", "\n", "", "", "if", "delim", "is", "None", ":", "\n", "        ", "return", "tokens", "\n", "", "else", ":", "\n", "        ", "return", "delim", ".", "join", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions.preprocessImages": [[101, 121], ["os.path.join", "range", "image_paths.append", "imread", "imresize", "img.transpose.transpose", "image_frames.append", "len", "os.path.isfile", "print"], "function", ["None"], ["", "", "def", "preprocessImages", "(", "obj", ",", "render_dir", "=", "False", ")", ":", "\n", "    ", "working_dir", "=", "os", ".", "path", ".", "join", "(", "render_dir", ",", "'working'", ")", "\n", "path_id", "=", "obj", "[", "'path_id'", "]", "\n", "image_paths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "obj", "[", "'pos_queue'", "]", ")", "-", "1", ")", ":", "\n", "        ", "image_paths", ".", "append", "(", "'%s/%s_%05d.jpg'", "%", "(", "working_dir", ",", "path_id", ",", "i", "+", "1", ")", ")", "\n", "\n", "", "image_frames", "=", "[", "]", "\n", "for", "i", "in", "image_paths", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "i", ")", "==", "False", ":", "\n", "            ", "print", "(", "i", ")", "\n", "return", "False", "\n", "", "img", "=", "imread", "(", "i", ",", "mode", "=", "'RGB'", ")", "\n", "img", "=", "imresize", "(", "img", ",", "(", "224", ",", "224", ")", ",", "interp", "=", "'bicubic'", ")", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "img", "/", "255.0", "\n", "image_frames", ".", "append", "(", "img", ")", "\n", "# TODO: mean subtraction", "\n", "\n", "", "return", "image_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.preprocess_questions.processActions": [[123, 145], ["action_ids.append"], "function", ["None"], ["", "def", "processActions", "(", "actions", ")", ":", "\n", "# from shortest-path-gen format", "\n", "# 0: forward", "\n", "# 1: left", "\n", "# 2: right", "\n", "# 3: stop", "\n", "#", "\n", "# to", "\n", "# 0: null", "\n", "# 1: start", "\n", "# 2: forward", "\n", "# 3: left", "\n", "# 4: right", "\n", "# 5: stop", "\n", "# for model training", "\n", "    ", "action_translations", "=", "{", "0", ":", "2", ",", "1", ":", "3", ",", "2", ":", "4", ",", "3", ":", "5", "}", "\n", "\n", "action_ids", "=", "[", "1", "]", "\n", "\n", "for", "i", "in", "actions", ":", "\n", "        ", "action_ids", ".", "append", "(", "action_translations", "[", "i", "]", ")", "\n", "", "return", "action_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.MaskedNLLCriterion.__init__": [[77, 79], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MaskedNLLCriterion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.MaskedNLLCriterion.forward": [[80, 88], ["torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "mask.float().sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "mask", ")", ":", "\n", "\n", "        ", "logprob_select", "=", "torch", ".", "gather", "(", "input", ",", "1", ",", "target", ")", "\n", "\n", "out", "=", "torch", ".", "masked_select", "(", "logprob_select", ",", "mask", ")", "\n", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "out", ")", "/", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.MultitaskCNNOutput.__init__": [[90, 159], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models.MultitaskCNNOutput.load_state_dict", "models.MultitaskCNNOutput.parameters", "models.MultitaskCNNOutput.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", "=", "191", ",", "\n", "pretrained", "=", "True", ",", "\n", "checkpoint_path", "=", "'models/03_13_h3d_hybrid_cnn.pt'", "\n", ")", ":", "\n", "        ", "super", "(", "MultitaskCNNOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "conv_block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "8", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "conv_block2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "8", ",", "16", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "conv_block3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "conv_block4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "512", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", ")", ")", "\n", "\n", "self", ".", "encoder_seg", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "self", ".", "encoder_depth", "=", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "1", ")", "\n", "self", ".", "encoder_ae", "=", "nn", ".", "Conv2d", "(", "512", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "score_pool2_seg", "=", "nn", ".", "Conv2d", "(", "16", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "self", ".", "score_pool3_seg", "=", "nn", ".", "Conv2d", "(", "32", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "\n", "self", ".", "score_pool2_depth", "=", "nn", ".", "Conv2d", "(", "16", ",", "1", ",", "1", ")", "\n", "self", ".", "score_pool3_depth", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "score_pool2_ae", "=", "nn", ".", "Conv2d", "(", "16", ",", "3", ",", "1", ")", "\n", "self", ".", "score_pool3_ae", "=", "nn", ".", "Conv2d", "(", "32", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "if", "self", ".", "pretrained", "==", "True", ":", "\n", "            ", "print", "(", "'Loading CNN weights from %s'", "%", "checkpoint_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "\n", "checkpoint_path", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state'", "]", ")", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "(", "\n", "m", ".", "out_channels", "+", "m", ".", "in_channels", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.MultitaskCNNOutput.forward": [[160, 201], ["models.MultitaskCNNOutput.conv_block1", "models.MultitaskCNNOutput.conv_block2", "models.MultitaskCNNOutput.conv_block3", "models.MultitaskCNNOutput.conv_block4", "models.MultitaskCNNOutput.classifier", "models.MultitaskCNNOutput.encoder_seg", "models.MultitaskCNNOutput.encoder_depth", "models.MultitaskCNNOutput.encoder_ae", "models.MultitaskCNNOutput.score_pool2_seg", "models.MultitaskCNNOutput.score_pool3_seg", "models.MultitaskCNNOutput.score_pool2_depth", "models.MultitaskCNNOutput.score_pool3_depth", "models.MultitaskCNNOutput.score_pool2_ae", "models.MultitaskCNNOutput.score_pool3_ae", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "models.MultitaskCNNOutput.size", "models.MultitaskCNNOutput.size", "x.size", "models.MultitaskCNNOutput.size", "models.MultitaskCNNOutput.size", "models.MultitaskCNNOutput.size", "models.MultitaskCNNOutput.size", "x.size", "x.size"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "conv1", "=", "self", ".", "conv_block1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "conv_block2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "conv_block3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "conv_block4", "(", "conv3", ")", "\n", "\n", "encoder_output", "=", "self", ".", "classifier", "(", "conv4", ")", "\n", "\n", "encoder_output_seg", "=", "self", ".", "encoder_seg", "(", "encoder_output", ")", "\n", "encoder_output_depth", "=", "self", ".", "encoder_depth", "(", "encoder_output", ")", "\n", "encoder_output_ae", "=", "self", ".", "encoder_ae", "(", "encoder_output", ")", "\n", "\n", "score_pool2_seg", "=", "self", ".", "score_pool2_seg", "(", "conv2", ")", "\n", "score_pool3_seg", "=", "self", ".", "score_pool3_seg", "(", "conv3", ")", "\n", "\n", "score_pool2_depth", "=", "self", ".", "score_pool2_depth", "(", "conv2", ")", "\n", "score_pool3_depth", "=", "self", ".", "score_pool3_depth", "(", "conv3", ")", "\n", "\n", "score_pool2_ae", "=", "self", ".", "score_pool2_ae", "(", "conv2", ")", "\n", "score_pool3_ae", "=", "self", ".", "score_pool3_ae", "(", "conv3", ")", "\n", "\n", "score_seg", "=", "F", ".", "upsample", "(", "encoder_output_seg", ",", "score_pool3_seg", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "score_seg", "+=", "score_pool3_seg", "\n", "score_seg", "=", "F", ".", "upsample", "(", "score_seg", ",", "score_pool2_seg", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "score_seg", "+=", "score_pool2_seg", "\n", "out_seg", "=", "F", ".", "upsample", "(", "score_seg", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "score_depth", "=", "F", ".", "upsample", "(", "encoder_output_depth", ",", "score_pool3_depth", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "score_depth", "+=", "score_pool3_depth", "\n", "score_depth", "=", "F", ".", "upsample", "(", "score_depth", ",", "score_pool2_depth", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "score_depth", "+=", "score_pool2_depth", "\n", "out_depth", "=", "F", ".", "sigmoid", "(", "F", ".", "upsample", "(", "score_depth", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "\n", "score_ae", "=", "F", ".", "upsample", "(", "encoder_output_ae", ",", "score_pool3_ae", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "score_ae", "+=", "score_pool3_ae", "\n", "score_ae", "=", "F", ".", "upsample", "(", "score_ae", ",", "score_pool2_ae", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "score_ae", "+=", "score_pool2_ae", "\n", "out_ae", "=", "F", ".", "sigmoid", "(", "F", ".", "upsample", "(", "score_ae", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "\n", "return", "out_seg", ",", "out_depth", ",", "out_ae", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.MultitaskCNN.__init__": [[203, 272], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models.MultitaskCNN.load_state_dict", "models.MultitaskCNN.parameters", "models.MultitaskCNN.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", "=", "191", ",", "\n", "pretrained", "=", "True", ",", "\n", "checkpoint_path", "=", "'models/03_13_h3d_hybrid_cnn.pt'", "\n", ")", ":", "\n", "        ", "super", "(", "MultitaskCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "conv_block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "8", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "conv_block2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "8", ",", "16", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "conv_block3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "conv_block4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "512", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", ")", ")", "\n", "\n", "self", ".", "encoder_seg", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "self", ".", "encoder_depth", "=", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "1", ")", "\n", "self", ".", "encoder_ae", "=", "nn", ".", "Conv2d", "(", "512", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "score_pool2_seg", "=", "nn", ".", "Conv2d", "(", "16", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "self", ".", "score_pool3_seg", "=", "nn", ".", "Conv2d", "(", "32", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "\n", "self", ".", "score_pool2_depth", "=", "nn", ".", "Conv2d", "(", "16", ",", "1", ",", "1", ")", "\n", "self", ".", "score_pool3_depth", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "score_pool2_ae", "=", "nn", ".", "Conv2d", "(", "16", ",", "3", ",", "1", ")", "\n", "self", ".", "score_pool3_ae", "=", "nn", ".", "Conv2d", "(", "32", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "if", "self", ".", "pretrained", "==", "True", ":", "\n", "            ", "print", "(", "'Loading CNN weights from %s'", "%", "checkpoint_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "\n", "checkpoint_path", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state'", "]", ")", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "(", "\n", "m", ".", "out_channels", "+", "m", ".", "in_channels", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.MultitaskCNN.forward": [[273, 283], ["models.MultitaskCNN.conv_block1", "models.MultitaskCNN.conv_block2", "models.MultitaskCNN.conv_block3", "models.MultitaskCNN.conv_block4", "models.MultitaskCNN.view"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "training", "==", "False", "\n", "\n", "conv1", "=", "self", ".", "conv_block1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "conv_block2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "conv_block3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "conv_block4", "(", "conv3", ")", "\n", "\n", "return", "conv4", ".", "view", "(", "-", "1", ",", "32", "*", "10", "*", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.QuestionLstmEncoder.__init__": [[321, 342], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "models.QuestionLstmEncoder.init_weights", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.QuestionLstmEncoder.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "token_to_idx", ",", "\n", "wordvec_dim", "=", "64", ",", "\n", "rnn_dim", "=", "64", ",", "\n", "rnn_num_layers", "=", "2", ",", "\n", "rnn_dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "QuestionLstmEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "token_to_idx", "=", "token_to_idx", "\n", "self", ".", "NULL", "=", "token_to_idx", "[", "'<NULL>'", "]", "\n", "self", ".", "START", "=", "token_to_idx", "[", "'<START>'", "]", "\n", "self", ".", "END", "=", "token_to_idx", "[", "'<END>'", "]", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "len", "(", "token_to_idx", ")", ",", "wordvec_dim", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "\n", "wordvec_dim", ",", "\n", "rnn_dim", ",", "\n", "rnn_num_layers", ",", "\n", "dropout", "=", "rnn_dropout", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.QuestionLstmEncoder.init_weights": [[343, 346], ["models.QuestionLstmEncoder.embed.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "initrange", "=", "0.1", "\n", "self", ".", "embed", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.QuestionLstmEncoder.forward": [[347, 366], ["x.size", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "x.data.cpu", "range", "idx.view().expand.view().expand.type_as().long", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models.QuestionLstmEncoder.rnn", "idx.view().expand.view().expand.view().expand", "hs.size", "hs.gather().view", "range", "models.QuestionLstmEncoder.embed", "hs.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "idx.view().expand.view().expand.type_as", "idx.view().expand.view().expand.view", "hs.gather"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "T", "=", "x", ".", "size", "(", ")", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "N", ")", ".", "fill_", "(", "T", "-", "1", ")", "\n", "\n", "# Find the last non-null element in each sequence", "\n", "x_cpu", "=", "x", ".", "data", ".", "cpu", "(", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "T", "-", "1", ")", ":", "\n", "                ", "if", "x_cpu", "[", "i", ",", "t", "]", "!=", "self", ".", "NULL", "and", "x_cpu", "[", "i", ",", "t", "+", "1", "]", "==", "self", ".", "NULL", ":", "\n", "                    ", "idx", "[", "i", "]", "=", "t", "\n", "break", "\n", "", "", "", "idx", "=", "idx", ".", "type_as", "(", "x", ".", "data", ")", ".", "long", "(", ")", "\n", "idx", "=", "Variable", "(", "idx", ",", "requires_grad", "=", "False", ")", "\n", "\n", "hs", ",", "_", "=", "self", ".", "rnn", "(", "self", ".", "embed", "(", "x", ")", ")", "\n", "\n", "idx", "=", "idx", ".", "view", "(", "N", ",", "1", ",", "1", ")", ".", "expand", "(", "N", ",", "1", ",", "hs", ".", "size", "(", "2", ")", ")", "\n", "H", "=", "hs", ".", "size", "(", "2", ")", "\n", "return", "hs", ".", "gather", "(", "1", ",", "idx", ")", ".", "view", "(", "N", ",", "H", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.VqaLstmModel.__init__": [[372, 400], ["torch.Module.__init__", "models.QuestionLstmEncoder", "models.build_mlp", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "\n", "vocab", ",", "\n", "rnn_wordvec_dim", "=", "64", ",", "\n", "rnn_dim", "=", "64", ",", "\n", "rnn_num_layers", "=", "2", ",", "\n", "rnn_dropout", "=", "0.5", ",", "\n", "fc_use_batchnorm", "=", "False", ",", "\n", "fc_dropout", "=", "0.5", ",", "\n", "fc_dims", "=", "(", "64", ",", ")", ")", ":", "\n", "        ", "super", "(", "VqaLstmModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "rnn_kwargs", "=", "{", "\n", "'token_to_idx'", ":", "vocab", "[", "'questionTokenToIdx'", "]", ",", "\n", "'wordvec_dim'", ":", "rnn_wordvec_dim", ",", "\n", "'rnn_dim'", ":", "rnn_dim", ",", "\n", "'rnn_num_layers'", ":", "rnn_num_layers", ",", "\n", "'rnn_dropout'", ":", "rnn_dropout", ",", "\n", "}", "\n", "self", ".", "rnn", "=", "QuestionLstmEncoder", "(", "**", "rnn_kwargs", ")", "\n", "\n", "classifier_kwargs", "=", "{", "\n", "'input_dim'", ":", "rnn_dim", ",", "\n", "'hidden_dims'", ":", "fc_dims", ",", "\n", "'output_dim'", ":", "len", "(", "vocab", "[", "'answerTokenToIdx'", "]", ")", ",", "\n", "'use_batchnorm'", ":", "fc_use_batchnorm", ",", "\n", "'dropout'", ":", "fc_dropout", ",", "\n", "'add_sigmoid'", ":", "0", "\n", "}", "\n", "self", ".", "classifier", "=", "build_mlp", "(", "**", "classifier_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.VqaLstmModel.forward": [[401, 405], ["models.VqaLstmModel.rnn", "models.VqaLstmModel.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "questions", ")", ":", "\n", "        ", "q_feats", "=", "self", ".", "rnn", "(", "questions", ")", "\n", "scores", "=", "self", ".", "classifier", "(", "q_feats", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.VqaLstmCnnAttentionModel.__init__": [[408, 450], ["torch.Module.__init__", "models.MultitaskCNN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.QuestionLstmEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.build_mlp", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "len", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "\n", "vocab", ",", "\n", "image_feat_dim", "=", "64", ",", "\n", "question_wordvec_dim", "=", "64", ",", "\n", "question_hidden_dim", "=", "64", ",", "\n", "question_num_layers", "=", "2", ",", "\n", "question_dropout", "=", "0.5", ",", "\n", "fc_use_batchnorm", "=", "False", ",", "\n", "fc_dropout", "=", "0.5", ",", "\n", "fc_dims", "=", "(", "64", ",", ")", ")", ":", "\n", "        ", "super", "(", "VqaLstmCnnAttentionModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "cnn_kwargs", "=", "{", "'num_classes'", ":", "191", ",", "'pretrained'", ":", "True", "}", "\n", "self", ".", "cnn", "=", "MultitaskCNN", "(", "**", "cnn_kwargs", ")", "\n", "self", ".", "cnn_fc_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "10", "*", "10", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "q_rnn_kwargs", "=", "{", "\n", "'token_to_idx'", ":", "vocab", "[", "'questionTokenToIdx'", "]", ",", "\n", "'wordvec_dim'", ":", "question_wordvec_dim", ",", "\n", "'rnn_dim'", ":", "question_hidden_dim", ",", "\n", "'rnn_num_layers'", ":", "question_num_layers", ",", "\n", "'rnn_dropout'", ":", "question_dropout", ",", "\n", "}", "\n", "self", ".", "q_rnn", "=", "QuestionLstmEncoder", "(", "**", "q_rnn_kwargs", ")", "\n", "\n", "self", ".", "img_tr", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "self", ".", "ques_tr", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "classifier_kwargs", "=", "{", "\n", "'input_dim'", ":", "64", ",", "\n", "'hidden_dims'", ":", "fc_dims", ",", "\n", "'output_dim'", ":", "len", "(", "vocab", "[", "'answerTokenToIdx'", "]", ")", ",", "\n", "'use_batchnorm'", ":", "fc_use_batchnorm", ",", "\n", "'dropout'", ":", "fc_dropout", ",", "\n", "'add_sigmoid'", ":", "0", "\n", "}", "\n", "self", ".", "classifier", "=", "build_mlp", "(", "**", "classifier_kwargs", ")", "\n", "\n", "self", ".", "att", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ",", "nn", ".", "Linear", "(", "128", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.VqaLstmCnnAttentionModel.forward": [[451, 482], ["images.size", "models.VqaLstmCnnAttentionModel.cnn", "models.VqaLstmCnnAttentionModel.cnn_fc_layer", "models.VqaLstmCnnAttentionModel.img_tr", "models.VqaLstmCnnAttentionModel.q_rnn", "models.VqaLstmCnnAttentionModel.view().repeat", "ques_feats_repl.view.view.view", "models.VqaLstmCnnAttentionModel.ques_tr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.VqaLstmCnnAttentionModel.att", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.view().repeat", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "models.VqaLstmCnnAttentionModel.classifier", "images.contiguous().view", "models.VqaLstmCnnAttentionModel.view", "models.VqaLstmCnnAttentionModel.view", "images.size", "images.size", "images.size", "models.VqaLstmCnnAttentionModel.view", "torch.softmax.view", "images.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ",", "questions", ")", ":", "\n", "\n", "        ", "N", ",", "T", ",", "_", ",", "_", ",", "_", "=", "images", ".", "size", "(", ")", "\n", "\n", "# bs x 5 x 3 x 224 x 224", "\n", "img_feats", "=", "self", ".", "cnn", "(", "images", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "images", ".", "size", "(", "2", ")", ",", "images", ".", "size", "(", "3", ")", ",", "images", ".", "size", "(", "4", ")", ")", ")", "\n", "img_feats", "=", "self", ".", "cnn_fc_layer", "(", "img_feats", ")", "\n", "\n", "img_feats_tr", "=", "self", ".", "img_tr", "(", "img_feats", ")", "\n", "\n", "ques_feats", "=", "self", ".", "q_rnn", "(", "questions", ")", "\n", "ques_feats_repl", "=", "ques_feats", ".", "view", "(", "N", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "T", ",", "1", ")", "\n", "ques_feats_repl", "=", "ques_feats_repl", ".", "view", "(", "N", "*", "T", ",", "-", "1", ")", "\n", "\n", "ques_feats_tr", "=", "self", ".", "ques_tr", "(", "ques_feats_repl", ")", "\n", "\n", "ques_img_feats", "=", "torch", ".", "cat", "(", "[", "ques_feats_tr", ",", "img_feats_tr", "]", ",", "1", ")", "\n", "\n", "att_feats", "=", "self", ".", "att", "(", "ques_img_feats", ")", "\n", "att_probs", "=", "F", ".", "softmax", "(", "att_feats", ".", "view", "(", "N", ",", "T", ")", ",", "dim", "=", "1", ")", "\n", "att_probs2", "=", "att_probs", ".", "view", "(", "N", ",", "T", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "64", ")", "\n", "\n", "att_img_feats", "=", "torch", ".", "mul", "(", "att_probs2", ",", "img_feats", ".", "view", "(", "N", ",", "T", ",", "64", ")", ")", "\n", "att_img_feats", "=", "torch", ".", "sum", "(", "att_img_feats", ",", "dim", "=", "1", ")", "\n", "\n", "mul_feats", "=", "torch", ".", "mul", "(", "ques_feats", ",", "att_img_feats", ")", "\n", "\n", "scores", "=", "self", ".", "classifier", "(", "mul_feats", ")", "\n", "\n", "return", "scores", ",", "att_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavCnnModel.__init__": [[488, 529], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.build_mlp", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "models.QuestionLstmEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_frames", "=", "5", ",", "\n", "num_actions", "=", "4", ",", "\n", "question_input", "=", "False", ",", "\n", "question_vocab", "=", "False", ",", "\n", "question_wordvec_dim", "=", "64", ",", "\n", "question_hidden_dim", "=", "64", ",", "\n", "question_num_layers", "=", "2", ",", "\n", "question_dropout", "=", "0.5", ",", "\n", "fc_use_batchnorm", "=", "False", ",", "\n", "fc_dropout", "=", "0.5", ",", "\n", "fc_dims", "=", "(", "64", ",", ")", ")", ":", "\n", "        ", "super", "(", "NavCnnModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# cnn_kwargs = {'num_classes': 191, 'pretrained': True}", "\n", "# self.cnn = MultitaskCNN(**cnn_kwargs)", "\n", "self", ".", "cnn_fc_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "10", "*", "10", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "self", ".", "question_input", "=", "question_input", "\n", "if", "self", ".", "question_input", "==", "True", ":", "\n", "            ", "q_rnn_kwargs", "=", "{", "\n", "'token_to_idx'", ":", "question_vocab", "[", "'questionTokenToIdx'", "]", ",", "\n", "'wordvec_dim'", ":", "question_wordvec_dim", ",", "\n", "'rnn_dim'", ":", "question_hidden_dim", ",", "\n", "'rnn_num_layers'", ":", "question_num_layers", ",", "\n", "'rnn_dropout'", ":", "question_dropout", ",", "\n", "}", "\n", "self", ".", "q_rnn", "=", "QuestionLstmEncoder", "(", "**", "q_rnn_kwargs", ")", "\n", "self", ".", "ques_tr", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "", "classifier_kwargs", "=", "{", "\n", "'input_dim'", ":", "64", "*", "num_frames", "+", "self", ".", "question_input", "*", "64", ",", "\n", "'hidden_dims'", ":", "fc_dims", ",", "\n", "'output_dim'", ":", "num_actions", ",", "\n", "'use_batchnorm'", ":", "fc_use_batchnorm", ",", "\n", "'dropout'", ":", "fc_dropout", ",", "\n", "'add_sigmoid'", ":", "0", "\n", "}", "\n", "self", ".", "classifier", "=", "build_mlp", "(", "**", "classifier_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavCnnModel.forward": [[531, 550], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "models.NavCnnModel.cnn_fc_layer", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "models.NavCnnModel.classifier", "models.NavCnnModel.q_rnn", "models.NavCnnModel.ques_tr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img_feats", ",", "questions", "=", "None", ")", ":", "\n", "\n", "# bs x 5 x 3200", "\n", "        ", "N", ",", "T", ",", "_", "=", "img_feats", ".", "size", "(", ")", "\n", "\n", "img_feats", "=", "self", ".", "cnn_fc_layer", "(", "img_feats", ")", "\n", "\n", "img_feats", "=", "img_feats", ".", "view", "(", "N", ",", "T", ",", "-", "1", ")", "\n", "img_feats", "=", "img_feats", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "question_input", "==", "True", ":", "\n", "            ", "ques_feats", "=", "self", ".", "q_rnn", "(", "questions", ")", "\n", "ques_feats", "=", "self", ".", "ques_tr", "(", "ques_feats", ")", "\n", "\n", "img_feats", "=", "torch", ".", "cat", "(", "[", "ques_feats", ",", "img_feats", "]", ",", "1", ")", "\n", "\n", "", "scores", "=", "self", ".", "classifier", "(", "img_feats", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnnMult.__init__": [[552, 612], ["torch.Module.__init__", "print", "torch.Linear", "torch.Linear", "torch.Linear", "print", "print", "torch.Embedding", "torch.Embedding", "torch.Embedding", "print", "getattr"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "image_input", "=", "False", ",", "\n", "image_feat_dim", "=", "128", ",", "\n", "question_input", "=", "False", ",", "\n", "question_embed_dim", "=", "128", ",", "\n", "action_input", "=", "False", ",", "\n", "action_embed_dim", "=", "32", ",", "\n", "num_actions", "=", "4", ",", "\n", "mode", "=", "'sl'", ",", "\n", "rnn_type", "=", "'LSTM'", ",", "\n", "rnn_hidden_dim", "=", "128", ",", "\n", "rnn_num_layers", "=", "2", ",", "\n", "rnn_dropout", "=", "0", ",", "\n", "return_states", "=", "False", ")", ":", "\n", "        ", "super", "(", "NavRnnMult", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "image_input", "=", "image_input", "\n", "self", ".", "image_feat_dim", "=", "image_feat_dim", "\n", "\n", "self", ".", "question_input", "=", "question_input", "\n", "self", ".", "question_embed_dim", "=", "question_embed_dim", "\n", "\n", "self", ".", "action_input", "=", "action_input", "\n", "self", ".", "action_embed_dim", "=", "action_embed_dim", "\n", "\n", "self", ".", "num_actions", "=", "num_actions", "\n", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "rnn_hidden_dim", "=", "rnn_hidden_dim", "\n", "self", ".", "rnn_num_layers", "=", "rnn_num_layers", "\n", "\n", "self", ".", "return_states", "=", "return_states", "\n", "\n", "rnn_input_dim", "=", "0", "\n", "if", "self", ".", "image_input", "==", "True", ":", "\n", "            ", "rnn_input_dim", "+=", "image_feat_dim", "\n", "print", "(", "'Adding input to %s: image, rnn dim: %d'", "%", "(", "self", ".", "rnn_type", ",", "\n", "rnn_input_dim", ")", ")", "\n", "\n", "", "if", "self", ".", "question_input", "==", "True", ":", "\n", "#rnn_input_dim += question_embed_dim", "\n", "            ", "print", "(", "'Adding input to %s: question, rnn dim: %d'", "%", "\n", "(", "self", ".", "rnn_type", ",", "rnn_input_dim", ")", ")", "\n", "\n", "", "if", "self", ".", "action_input", "==", "True", ":", "\n", "            ", "self", ".", "action_embed", "=", "nn", ".", "Embedding", "(", "num_actions", ",", "action_embed_dim", ")", "\n", "rnn_input_dim", "+=", "action_embed_dim", "\n", "print", "(", "'Adding input to %s: action, rnn dim: %d'", "%", "(", "self", ".", "rnn_type", ",", "\n", "rnn_input_dim", ")", ")", "\n", "\n", "", "self", ".", "rnn", "=", "getattr", "(", "nn", ",", "self", ".", "rnn_type", ")", "(", "\n", "rnn_input_dim", ",", "\n", "self", ".", "rnn_hidden_dim", ",", "\n", "self", ".", "rnn_num_layers", ",", "\n", "dropout", "=", "rnn_dropout", ",", "\n", "batch_first", "=", "True", ")", "\n", "print", "(", "'Building %s with hidden dim: %d'", "%", "(", "self", ".", "rnn_type", ",", "\n", "rnn_hidden_dim", ")", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_hidden_dim", ",", "self", ".", "num_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnnMult.init_hidden": [[613, 624], ["next", "models.NavRnnMult.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "weight.new().zero_", "weight.new().zero_", "weight.new().zero_", "weight.new", "weight.new", "weight.new"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "data", "\n", "if", "self", ".", "rnn_type", "==", "'LSTM'", ":", "\n", "            ", "return", "(", "Variable", "(", "\n", "weight", ".", "new", "(", "self", ".", "rnn_num_layers", ",", "bsz", ",", "self", ".", "rnn_hidden_dim", ")", "\n", ".", "zero_", "(", ")", ")", ",", "Variable", "(", "\n", "weight", ".", "new", "(", "self", ".", "rnn_num_layers", ",", "bsz", ",", "self", ".", "rnn_hidden_dim", ")", "\n", ".", "zero_", "(", ")", ")", ")", "\n", "", "elif", "self", ".", "rnn_type", "==", "'GRU'", ":", "\n", "            ", "return", "Variable", "(", "\n", "weight", ".", "new", "(", "self", ".", "rnn_num_layers", ",", "bsz", ",", "self", ".", "rnn_hidden_dim", ")", "\n", ".", "zero_", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnnMult.forward": [[626, 669], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "models.NavRnnMult.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "models.NavRnnMult.decoder", "img_feats.size", "question_feats.repeat.repeat.size", "question_feats.repeat.repeat.view", "question_feats.repeat.repeat.repeat", "rnn_output.contiguous().view", "actions_in.size", "len", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "len", "models.NavRnnMult.action_embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rnn_output.size", "rnn_output.contiguous", "rnn_output.size", "rnn_output.size", "models.NavRnnMult.action_embed"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "\n", "img_feats", ",", "\n", "question_feats", ",", "\n", "actions_in", ",", "\n", "action_lengths", ",", "\n", "hidden", "=", "False", ")", ":", "\n", "        ", "input_feats", "=", "Variable", "(", ")", "\n", "\n", "T", "=", "False", "\n", "if", "self", ".", "image_input", "==", "True", ":", "\n", "            ", "N", ",", "T", ",", "_", "=", "img_feats", ".", "size", "(", ")", "\n", "input_feats", "=", "img_feats", "\n", "\n", "", "if", "self", ".", "question_input", "==", "True", ":", "\n", "            ", "N", ",", "D", "=", "question_feats", ".", "size", "(", ")", "\n", "question_feats", "=", "question_feats", ".", "view", "(", "N", ",", "1", ",", "D", ")", "\n", "if", "T", "==", "False", ":", "\n", "                ", "T", "=", "actions_in", ".", "size", "(", "1", ")", "\n", "", "question_feats", "=", "question_feats", ".", "repeat", "(", "1", ",", "T", ",", "1", ")", "\n", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "question_feats", "\n", "", "else", ":", "\n", "#input_feats = torch.cat([input_feats, question_feats], 2)", "\n", "                ", "input_feats", "=", "torch", ".", "mul", "(", "input_feats", ",", "question_feats", ")", "\n", "\n", "", "", "if", "self", ".", "action_input", "==", "True", ":", "\n", "            ", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "self", ".", "action_embed", "(", "actions_in", ")", "\n", "", "else", ":", "\n", "                ", "input_feats", "=", "torch", ".", "cat", "(", "\n", "[", "input_feats", ",", "self", ".", "action_embed", "(", "actions_in", ")", "]", ",", "2", ")", "\n", "\n", "", "", "packed_input_feats", "=", "pack_padded_sequence", "(", "\n", "input_feats", ",", "action_lengths", ",", "batch_first", "=", "True", ")", "\n", "packed_output", ",", "hidden", "=", "self", ".", "rnn", "(", "packed_input_feats", ")", "\n", "rnn_output", ",", "_", "=", "pad_packed_sequence", "(", "packed_output", ",", "batch_first", "=", "True", ")", "\n", "output", "=", "self", ".", "decoder", "(", "rnn_output", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "rnn_output", ".", "size", "(", "0", ")", "*", "rnn_output", ".", "size", "(", "1", ")", ",", "rnn_output", ".", "size", "(", "2", ")", ")", ")", "\n", "\n", "if", "self", ".", "return_states", "==", "True", ":", "\n", "            ", "return", "rnn_output", ",", "output", ",", "hidden", "\n", "", "else", ":", "\n", "            ", "return", "output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnnMult.step_forward": [[670, 703], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models.NavRnnMult.rnn", "models.NavRnnMult.decoder", "img_feats.size", "question_feats.repeat.repeat.size", "question_feats.repeat.repeat.view", "question_feats.repeat.repeat.repeat", "models.NavRnnMult.contiguous().view", "actions_in.size", "len", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "len", "models.NavRnnMult.action_embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.NavRnnMult.size", "models.NavRnnMult.contiguous", "models.NavRnnMult.size", "models.NavRnnMult.size", "models.NavRnnMult.action_embed"], "methods", ["None"], ["", "", "def", "step_forward", "(", "self", ",", "img_feats", ",", "question_feats", ",", "actions_in", ",", "hidden", ")", ":", "\n", "        ", "input_feats", "=", "Variable", "(", ")", "\n", "\n", "T", "=", "False", "\n", "if", "self", ".", "image_input", "==", "True", ":", "\n", "            ", "N", ",", "T", ",", "_", "=", "img_feats", ".", "size", "(", ")", "\n", "input_feats", "=", "img_feats", "\n", "\n", "", "if", "self", ".", "question_input", "==", "True", ":", "\n", "            ", "N", ",", "D", "=", "question_feats", ".", "size", "(", ")", "\n", "question_feats", "=", "question_feats", ".", "view", "(", "N", ",", "1", ",", "D", ")", "\n", "if", "T", "==", "False", ":", "\n", "                ", "T", "=", "actions_in", ".", "size", "(", "1", ")", "\n", "", "question_feats", "=", "question_feats", ".", "repeat", "(", "1", ",", "T", ",", "1", ")", "\n", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "question_feats", "\n", "", "else", ":", "\n", "#input_feats = torch.cat([input_feats, question_feats], 2)", "\n", "                ", "input_feats", "=", "torch", ".", "mul", "(", "input_feats", ",", "question_feats", ")", "\n", "\n", "", "", "if", "self", ".", "action_input", "==", "True", ":", "\n", "            ", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "self", ".", "action_embed", "(", "actions_in", ")", "\n", "", "else", ":", "\n", "                ", "input_feats", "=", "torch", ".", "cat", "(", "\n", "[", "input_feats", ",", "self", ".", "action_embed", "(", "actions_in", ")", "]", ",", "2", ")", "\n", "\n", "", "", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "input_feats", ",", "hidden", ")", "\n", "\n", "output", "=", "self", ".", "decoder", "(", "output", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "output", ".", "size", "(", "0", ")", "*", "output", ".", "size", "(", "1", ")", ",", "output", ".", "size", "(", "2", ")", ")", ")", "\n", "\n", "return", "output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.__init__": [[706, 766], ["torch.Module.__init__", "print", "torch.Linear", "torch.Linear", "torch.Linear", "print", "print", "torch.Embedding", "torch.Embedding", "torch.Embedding", "print", "getattr"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "image_input", "=", "False", ",", "\n", "image_feat_dim", "=", "128", ",", "\n", "question_input", "=", "False", ",", "\n", "question_embed_dim", "=", "128", ",", "\n", "action_input", "=", "False", ",", "\n", "action_embed_dim", "=", "32", ",", "\n", "num_actions", "=", "4", ",", "\n", "mode", "=", "'sl'", ",", "\n", "rnn_type", "=", "'LSTM'", ",", "\n", "rnn_hidden_dim", "=", "128", ",", "\n", "rnn_num_layers", "=", "2", ",", "\n", "rnn_dropout", "=", "0", ",", "\n", "return_states", "=", "False", ")", ":", "\n", "        ", "super", "(", "NavRnn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "image_input", "=", "image_input", "\n", "self", ".", "image_feat_dim", "=", "image_feat_dim", "\n", "\n", "self", ".", "question_input", "=", "question_input", "\n", "self", ".", "question_embed_dim", "=", "question_embed_dim", "\n", "\n", "self", ".", "action_input", "=", "action_input", "\n", "self", ".", "action_embed_dim", "=", "action_embed_dim", "\n", "\n", "self", ".", "num_actions", "=", "num_actions", "\n", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "rnn_hidden_dim", "=", "rnn_hidden_dim", "\n", "self", ".", "rnn_num_layers", "=", "rnn_num_layers", "\n", "\n", "self", ".", "return_states", "=", "return_states", "\n", "\n", "rnn_input_dim", "=", "0", "\n", "if", "self", ".", "image_input", "==", "True", ":", "\n", "            ", "rnn_input_dim", "+=", "image_feat_dim", "\n", "print", "(", "'Adding input to %s: image, rnn dim: %d'", "%", "(", "self", ".", "rnn_type", ",", "\n", "rnn_input_dim", ")", ")", "\n", "\n", "", "if", "self", ".", "question_input", "==", "True", ":", "\n", "            ", "rnn_input_dim", "+=", "question_embed_dim", "\n", "print", "(", "'Adding input to %s: question, rnn dim: %d'", "%", "\n", "(", "self", ".", "rnn_type", ",", "rnn_input_dim", ")", ")", "\n", "\n", "", "if", "self", ".", "action_input", "==", "True", ":", "\n", "            ", "self", ".", "action_embed", "=", "nn", ".", "Embedding", "(", "num_actions", ",", "action_embed_dim", ")", "\n", "rnn_input_dim", "+=", "action_embed_dim", "\n", "print", "(", "'Adding input to %s: action, rnn dim: %d'", "%", "(", "self", ".", "rnn_type", ",", "\n", "rnn_input_dim", ")", ")", "\n", "\n", "", "self", ".", "rnn", "=", "getattr", "(", "nn", ",", "self", ".", "rnn_type", ")", "(", "\n", "rnn_input_dim", ",", "\n", "self", ".", "rnn_hidden_dim", ",", "\n", "self", ".", "rnn_num_layers", ",", "\n", "dropout", "=", "rnn_dropout", ",", "\n", "batch_first", "=", "True", ")", "\n", "print", "(", "'Building %s with hidden dim: %d'", "%", "(", "self", ".", "rnn_type", ",", "\n", "rnn_hidden_dim", ")", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_hidden_dim", ",", "self", ".", "num_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.init_hidden": [[767, 778], ["next", "models.NavRnn.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "weight.new().zero_", "weight.new().zero_", "weight.new().zero_", "weight.new", "weight.new", "weight.new"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "data", "\n", "if", "self", ".", "rnn_type", "==", "'LSTM'", ":", "\n", "            ", "return", "(", "Variable", "(", "\n", "weight", ".", "new", "(", "self", ".", "rnn_num_layers", ",", "bsz", ",", "self", ".", "rnn_hidden_dim", ")", "\n", ".", "zero_", "(", ")", ")", ",", "Variable", "(", "\n", "weight", ".", "new", "(", "self", ".", "rnn_num_layers", ",", "bsz", ",", "self", ".", "rnn_hidden_dim", ")", "\n", ".", "zero_", "(", ")", ")", ")", "\n", "", "elif", "self", ".", "rnn_type", "==", "'GRU'", ":", "\n", "            ", "return", "Variable", "(", "\n", "weight", ".", "new", "(", "self", ".", "rnn_num_layers", ",", "bsz", ",", "self", ".", "rnn_hidden_dim", ")", "\n", ".", "zero_", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.forward": [[780, 822], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "models.NavRnn.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "models.NavRnn.decoder", "img_feats.size", "question_feats.repeat.repeat.size", "question_feats.repeat.repeat.view", "question_feats.repeat.repeat.repeat", "rnn_output.contiguous().view", "actions_in.size", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "models.NavRnn.action_embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rnn_output.size", "rnn_output.contiguous", "rnn_output.size", "rnn_output.size", "models.NavRnn.action_embed"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "\n", "img_feats", ",", "\n", "question_feats", ",", "\n", "actions_in", ",", "\n", "action_lengths", ",", "\n", "hidden", "=", "False", ")", ":", "\n", "        ", "input_feats", "=", "Variable", "(", ")", "\n", "\n", "T", "=", "False", "\n", "if", "self", ".", "image_input", "==", "True", ":", "\n", "            ", "N", ",", "T", ",", "_", "=", "img_feats", ".", "size", "(", ")", "\n", "input_feats", "=", "img_feats", "\n", "\n", "", "if", "self", ".", "question_input", "==", "True", ":", "\n", "            ", "N", ",", "D", "=", "question_feats", ".", "size", "(", ")", "\n", "question_feats", "=", "question_feats", ".", "view", "(", "N", ",", "1", ",", "D", ")", "\n", "if", "T", "==", "False", ":", "\n", "                ", "T", "=", "actions_in", ".", "size", "(", "1", ")", "\n", "", "question_feats", "=", "question_feats", ".", "repeat", "(", "1", ",", "T", ",", "1", ")", "\n", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "question_feats", "\n", "", "else", ":", "\n", "                ", "input_feats", "=", "torch", ".", "cat", "(", "[", "input_feats", ",", "question_feats", "]", ",", "2", ")", "\n", "\n", "", "", "if", "self", ".", "action_input", "==", "True", ":", "\n", "            ", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "self", ".", "action_embed", "(", "actions_in", ")", "\n", "", "else", ":", "\n", "                ", "input_feats", "=", "torch", ".", "cat", "(", "\n", "[", "input_feats", ",", "self", ".", "action_embed", "(", "actions_in", ")", "]", ",", "2", ")", "\n", "\n", "", "", "packed_input_feats", "=", "pack_padded_sequence", "(", "\n", "input_feats", ",", "action_lengths", ",", "batch_first", "=", "True", ")", "\n", "packed_output", ",", "hidden", "=", "self", ".", "rnn", "(", "packed_input_feats", ")", "\n", "rnn_output", ",", "_", "=", "pad_packed_sequence", "(", "packed_output", ",", "batch_first", "=", "True", ")", "\n", "output", "=", "self", ".", "decoder", "(", "rnn_output", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "rnn_output", ".", "size", "(", "0", ")", "*", "rnn_output", ".", "size", "(", "1", ")", ",", "rnn_output", ".", "size", "(", "2", ")", ")", ")", "\n", "\n", "if", "self", ".", "return_states", "==", "True", ":", "\n", "            ", "return", "rnn_output", ",", "output", ",", "hidden", "\n", "", "else", ":", "\n", "            ", "return", "output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.step_forward": [[823, 855], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models.NavRnn.rnn", "models.NavRnn.decoder", "img_feats.size", "question_feats.repeat.repeat.size", "question_feats.repeat.repeat.view", "question_feats.repeat.repeat.repeat", "models.NavRnn.contiguous().view", "actions_in.size", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "models.NavRnn.action_embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.NavRnn.size", "models.NavRnn.contiguous", "models.NavRnn.size", "models.NavRnn.size", "models.NavRnn.action_embed"], "methods", ["None"], ["", "", "def", "step_forward", "(", "self", ",", "img_feats", ",", "question_feats", ",", "actions_in", ",", "hidden", ")", ":", "\n", "        ", "input_feats", "=", "Variable", "(", ")", "\n", "\n", "T", "=", "False", "\n", "if", "self", ".", "image_input", "==", "True", ":", "\n", "            ", "N", ",", "T", ",", "_", "=", "img_feats", ".", "size", "(", ")", "\n", "input_feats", "=", "img_feats", "\n", "\n", "", "if", "self", ".", "question_input", "==", "True", ":", "\n", "            ", "N", ",", "D", "=", "question_feats", ".", "size", "(", ")", "\n", "question_feats", "=", "question_feats", ".", "view", "(", "N", ",", "1", ",", "D", ")", "\n", "if", "T", "==", "False", ":", "\n", "                ", "T", "=", "actions_in", ".", "size", "(", "1", ")", "\n", "", "question_feats", "=", "question_feats", ".", "repeat", "(", "1", ",", "T", ",", "1", ")", "\n", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "question_feats", "\n", "", "else", ":", "\n", "                ", "input_feats", "=", "torch", ".", "cat", "(", "[", "input_feats", ",", "question_feats", "]", ",", "2", ")", "\n", "\n", "", "", "if", "self", ".", "action_input", "==", "True", ":", "\n", "            ", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "self", ".", "action_embed", "(", "actions_in", ")", "\n", "", "else", ":", "\n", "                ", "input_feats", "=", "torch", ".", "cat", "(", "\n", "[", "input_feats", ",", "self", ".", "action_embed", "(", "actions_in", ")", "]", ",", "2", ")", "\n", "\n", "", "", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "input_feats", ",", "hidden", ")", "\n", "\n", "output", "=", "self", ".", "decoder", "(", "output", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "output", ".", "size", "(", "0", ")", "*", "output", ".", "size", "(", "1", ")", ",", "output", ".", "size", "(", "2", ")", ")", ")", "\n", "\n", "return", "output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavCnnRnnMultModel.__init__": [[857, 909], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.NavRnnMult", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "models.QuestionLstmEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_output", "=", "4", ",", "# forward, left, right, stop", "\n", "rnn_image_input", "=", "True", ",", "\n", "rnn_image_feat_dim", "=", "128", ",", "\n", "question_input", "=", "False", ",", "\n", "question_vocab", "=", "False", ",", "\n", "question_wordvec_dim", "=", "64", ",", "\n", "question_hidden_dim", "=", "64", ",", "\n", "question_num_layers", "=", "2", ",", "\n", "question_dropout", "=", "0.5", ",", "\n", "rnn_question_embed_dim", "=", "128", ",", "\n", "rnn_action_input", "=", "True", ",", "\n", "rnn_action_embed_dim", "=", "32", ",", "\n", "rnn_type", "=", "'LSTM'", ",", "\n", "rnn_hidden_dim", "=", "1024", ",", "\n", "rnn_num_layers", "=", "1", ",", "\n", "rnn_dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "NavCnnRnnMultModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cnn_fc_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "10", "*", "10", ",", "rnn_image_feat_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "self", ".", "rnn_hidden_dim", "=", "rnn_hidden_dim", "\n", "\n", "self", ".", "question_input", "=", "question_input", "\n", "if", "self", ".", "question_input", "==", "True", ":", "\n", "            ", "q_rnn_kwargs", "=", "{", "\n", "'token_to_idx'", ":", "question_vocab", "[", "'questionTokenToIdx'", "]", ",", "\n", "'wordvec_dim'", ":", "question_wordvec_dim", ",", "\n", "'rnn_dim'", ":", "question_hidden_dim", ",", "\n", "'rnn_num_layers'", ":", "question_num_layers", ",", "\n", "'rnn_dropout'", ":", "question_dropout", ",", "\n", "}", "\n", "self", ".", "q_rnn", "=", "QuestionLstmEncoder", "(", "**", "q_rnn_kwargs", ")", "\n", "self", ".", "ques_tr", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "64", ",", "rnn_image_feat_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "", "self", ".", "nav_rnn", "=", "NavRnnMult", "(", "\n", "image_input", "=", "rnn_image_input", ",", "\n", "image_feat_dim", "=", "rnn_image_feat_dim", ",", "\n", "question_input", "=", "question_input", ",", "\n", "question_embed_dim", "=", "question_hidden_dim", ",", "\n", "action_input", "=", "rnn_action_input", ",", "\n", "action_embed_dim", "=", "rnn_action_embed_dim", ",", "\n", "num_actions", "=", "num_output", ",", "\n", "rnn_type", "=", "rnn_type", ",", "\n", "rnn_hidden_dim", "=", "rnn_hidden_dim", ",", "\n", "rnn_num_layers", "=", "rnn_num_layers", ",", "\n", "rnn_dropout", "=", "rnn_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavCnnRnnMultModel.forward": [[910, 941], ["models.NavCnnRnnMultModel.size", "models.NavCnnRnnMultModel.cnn_fc_layer", "models.NavCnnRnnMultModel.q_rnn", "models.NavCnnRnnMultModel.ques_tr", "models.NavCnnRnnMultModel.nav_rnn.step_forward", "models.NavCnnRnnMultModel.nav_rnn", "models.NavCnnRnnMultModel.nav_rnn.step_forward", "models.NavCnnRnnMultModel.nav_rnn"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.step_forward", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.step_forward"], ["", "def", "forward", "(", "self", ",", "\n", "img_feats", ",", "\n", "questions", ",", "\n", "actions_in", ",", "\n", "action_lengths", ",", "\n", "hidden", "=", "False", ",", "\n", "step", "=", "False", ")", ":", "\n", "        ", "N", ",", "T", ",", "_", "=", "img_feats", ".", "size", "(", ")", "\n", "\n", "# B x T x 128", "\n", "img_feats", "=", "self", ".", "cnn_fc_layer", "(", "img_feats", ")", "\n", "\n", "if", "self", ".", "question_input", "==", "True", ":", "\n", "            ", "ques_feats", "=", "self", ".", "q_rnn", "(", "questions", ")", "\n", "ques_feats", "=", "self", ".", "ques_tr", "(", "ques_feats", ")", "\n", "\n", "if", "step", "==", "True", ":", "\n", "                ", "output", ",", "hidden", "=", "self", ".", "nav_rnn", ".", "step_forward", "(", "\n", "img_feats", ",", "ques_feats", ",", "actions_in", ",", "hidden", ")", "\n", "", "else", ":", "\n", "                ", "output", ",", "hidden", "=", "self", ".", "nav_rnn", "(", "img_feats", ",", "ques_feats", ",", "\n", "actions_in", ",", "action_lengths", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "step", "==", "True", ":", "\n", "                ", "output", ",", "hidden", "=", "self", ".", "nav_rnn", ".", "step_forward", "(", "\n", "img_feats", ",", "False", ",", "actions_in", ",", "hidden", ")", "\n", "", "else", ":", "\n", "                ", "output", ",", "hidden", "=", "self", ".", "nav_rnn", "(", "img_feats", ",", "False", ",", "actions_in", ",", "\n", "action_lengths", ")", "\n", "\n", "", "", "return", "output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavCnnRnnModel.__init__": [[944, 996], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.NavRnn", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "models.QuestionLstmEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_output", "=", "4", ",", "# forward, left, right, stop", "\n", "rnn_image_input", "=", "True", ",", "\n", "rnn_image_feat_dim", "=", "128", ",", "\n", "question_input", "=", "False", ",", "\n", "question_vocab", "=", "False", ",", "\n", "question_wordvec_dim", "=", "64", ",", "\n", "question_hidden_dim", "=", "64", ",", "\n", "question_num_layers", "=", "2", ",", "\n", "question_dropout", "=", "0.5", ",", "\n", "rnn_question_embed_dim", "=", "128", ",", "\n", "rnn_action_input", "=", "True", ",", "\n", "rnn_action_embed_dim", "=", "32", ",", "\n", "rnn_type", "=", "'LSTM'", ",", "\n", "rnn_hidden_dim", "=", "1024", ",", "\n", "rnn_num_layers", "=", "1", ",", "\n", "rnn_dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "NavCnnRnnModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cnn_fc_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "10", "*", "10", ",", "rnn_image_feat_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "self", ".", "rnn_hidden_dim", "=", "rnn_hidden_dim", "\n", "\n", "self", ".", "question_input", "=", "question_input", "\n", "if", "self", ".", "question_input", "==", "True", ":", "\n", "            ", "q_rnn_kwargs", "=", "{", "\n", "'token_to_idx'", ":", "question_vocab", "[", "'questionTokenToIdx'", "]", ",", "\n", "'wordvec_dim'", ":", "question_wordvec_dim", ",", "\n", "'rnn_dim'", ":", "question_hidden_dim", ",", "\n", "'rnn_num_layers'", ":", "question_num_layers", ",", "\n", "'rnn_dropout'", ":", "question_dropout", ",", "\n", "}", "\n", "self", ".", "q_rnn", "=", "QuestionLstmEncoder", "(", "**", "q_rnn_kwargs", ")", "\n", "self", ".", "ques_tr", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "", "self", ".", "nav_rnn", "=", "NavRnn", "(", "\n", "image_input", "=", "rnn_image_input", ",", "\n", "image_feat_dim", "=", "rnn_image_feat_dim", ",", "\n", "question_input", "=", "question_input", ",", "\n", "question_embed_dim", "=", "question_hidden_dim", ",", "\n", "action_input", "=", "rnn_action_input", ",", "\n", "action_embed_dim", "=", "rnn_action_embed_dim", ",", "\n", "num_actions", "=", "num_output", ",", "\n", "rnn_type", "=", "rnn_type", ",", "\n", "rnn_hidden_dim", "=", "rnn_hidden_dim", ",", "\n", "rnn_num_layers", "=", "rnn_num_layers", ",", "\n", "rnn_dropout", "=", "rnn_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavCnnRnnModel.forward": [[997, 1028], ["models.NavCnnRnnModel.size", "models.NavCnnRnnModel.cnn_fc_layer", "models.NavCnnRnnModel.q_rnn", "models.NavCnnRnnModel.ques_tr", "models.NavCnnRnnModel.nav_rnn.step_forward", "models.NavCnnRnnModel.nav_rnn", "models.NavCnnRnnModel.nav_rnn.step_forward", "models.NavCnnRnnModel.nav_rnn"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.step_forward", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.step_forward"], ["", "def", "forward", "(", "self", ",", "\n", "img_feats", ",", "\n", "questions", ",", "\n", "actions_in", ",", "\n", "action_lengths", ",", "\n", "hidden", "=", "False", ",", "\n", "step", "=", "False", ")", ":", "\n", "        ", "N", ",", "T", ",", "_", "=", "img_feats", ".", "size", "(", ")", "\n", "\n", "# B x T x 128", "\n", "img_feats", "=", "self", ".", "cnn_fc_layer", "(", "img_feats", ")", "\n", "\n", "if", "self", ".", "question_input", "==", "True", ":", "\n", "            ", "ques_feats", "=", "self", ".", "q_rnn", "(", "questions", ")", "\n", "ques_feats", "=", "self", ".", "ques_tr", "(", "ques_feats", ")", "\n", "\n", "if", "step", "==", "True", ":", "\n", "                ", "output", ",", "hidden", "=", "self", ".", "nav_rnn", ".", "step_forward", "(", "\n", "img_feats", ",", "ques_feats", ",", "actions_in", ",", "hidden", ")", "\n", "", "else", ":", "\n", "                ", "output", ",", "hidden", "=", "self", ".", "nav_rnn", "(", "img_feats", ",", "ques_feats", ",", "\n", "actions_in", ",", "action_lengths", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "step", "==", "True", ":", "\n", "                ", "output", ",", "hidden", "=", "self", ".", "nav_rnn", ".", "step_forward", "(", "\n", "img_feats", ",", "False", ",", "actions_in", ",", "hidden", ")", "\n", "", "else", ":", "\n", "                ", "output", ",", "hidden", "=", "self", ".", "nav_rnn", "(", "img_feats", ",", "False", ",", "actions_in", ",", "\n", "action_lengths", ")", "\n", "\n", "", "", "return", "output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.__init__": [[1031, 1091], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.QuestionLstmEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.NavRnn", "models.build_mlp", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "\n", "question_vocab", ",", "\n", "num_output", "=", "4", ",", "\n", "question_wordvec_dim", "=", "64", ",", "\n", "question_hidden_dim", "=", "64", ",", "\n", "question_num_layers", "=", "2", ",", "\n", "question_dropout", "=", "0.5", ",", "\n", "planner_rnn_image_feat_dim", "=", "128", ",", "\n", "planner_rnn_action_embed_dim", "=", "32", ",", "\n", "planner_rnn_type", "=", "'GRU'", ",", "\n", "planner_rnn_hidden_dim", "=", "1024", ",", "\n", "planner_rnn_num_layers", "=", "1", ",", "\n", "planner_rnn_dropout", "=", "0", ",", "\n", "controller_fc_dims", "=", "(", "256", ",", ")", ")", ":", "\n", "        ", "super", "(", "NavPlannerControllerModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cnn_fc_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "10", "*", "10", ",", "planner_rnn_image_feat_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "q_rnn_kwargs", "=", "{", "\n", "'token_to_idx'", ":", "question_vocab", "[", "'questionTokenToIdx'", "]", ",", "\n", "'wordvec_dim'", ":", "question_wordvec_dim", ",", "\n", "'rnn_dim'", ":", "question_hidden_dim", ",", "\n", "'rnn_num_layers'", ":", "question_num_layers", ",", "\n", "'rnn_dropout'", ":", "question_dropout", ",", "\n", "}", "\n", "self", ".", "q_rnn", "=", "QuestionLstmEncoder", "(", "**", "q_rnn_kwargs", ")", "\n", "self", ".", "ques_tr", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "question_hidden_dim", ",", "question_hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "self", ".", "planner_nav_rnn", "=", "NavRnn", "(", "\n", "image_input", "=", "True", ",", "\n", "image_feat_dim", "=", "planner_rnn_image_feat_dim", ",", "\n", "question_input", "=", "True", ",", "\n", "question_embed_dim", "=", "question_hidden_dim", ",", "\n", "action_input", "=", "True", ",", "\n", "action_embed_dim", "=", "planner_rnn_action_embed_dim", ",", "\n", "num_actions", "=", "num_output", ",", "\n", "rnn_type", "=", "planner_rnn_type", ",", "\n", "rnn_hidden_dim", "=", "planner_rnn_hidden_dim", ",", "\n", "rnn_num_layers", "=", "planner_rnn_num_layers", ",", "\n", "rnn_dropout", "=", "planner_rnn_dropout", ",", "\n", "return_states", "=", "True", ")", "\n", "\n", "controller_kwargs", "=", "{", "\n", "'input_dim'", ":", "\n", "planner_rnn_image_feat_dim", "+", "planner_rnn_action_embed_dim", "+", "\n", "planner_rnn_hidden_dim", ",", "\n", "'hidden_dims'", ":", "\n", "controller_fc_dims", ",", "\n", "'output_dim'", ":", "\n", "2", ",", "\n", "'add_sigmoid'", ":", "\n", "0", "\n", "}", "\n", "self", ".", "controller", "=", "build_mlp", "(", "**", "controller_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.forward": [[1092, 1150], ["models.NavPlannerControllerModel.size", "models.NavPlannerControllerModel.cnn_fc_layer", "models.NavPlannerControllerModel.cnn_fc_layer", "models.NavPlannerControllerModel.q_rnn", "models.NavPlannerControllerModel.ques_tr", "models.NavPlannerControllerModel.planner_nav_rnn", "controller_img_feats.contiguous().view.contiguous().view.size", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.contiguous().view().repeat", "planner_states.gather", "controller_hidden_in.view.view.view", "controller_img_feats.contiguous().view.contiguous().view.contiguous().view", "models.NavPlannerControllerModel.planner_nav_rnn.action_embed().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.NavPlannerControllerModel.controller", "planner_states.size", "planner_states.size", "controller_hidden_in.view.view.size", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.contiguous().view", "controller_img_feats.contiguous().view.contiguous().view.contiguous", "models.NavPlannerControllerModel.planner_nav_rnn.action_embed", "controller_action_lengths.max", "controller_action_lengths.max", "controller_action_lengths.max", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.max", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.size", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "questions", ",", "\n", "planner_img_feats", ",", "\n", "planner_actions_in", ",", "\n", "planner_action_lengths", ",", "\n", "planner_hidden_index", ",", "\n", "controller_img_feats", ",", "\n", "controller_actions_in", ",", "\n", "controller_action_lengths", ",", "\n", "planner_hidden", "=", "False", ")", ":", "\n", "\n", "# ts = time.time()", "\n", "        ", "N_p", ",", "T_p", ",", "_", "=", "planner_img_feats", ".", "size", "(", ")", "\n", "\n", "planner_img_feats", "=", "self", ".", "cnn_fc_layer", "(", "planner_img_feats", ")", "\n", "controller_img_feats", "=", "self", ".", "cnn_fc_layer", "(", "controller_img_feats", ")", "\n", "\n", "ques_feats", "=", "self", ".", "q_rnn", "(", "questions", ")", "\n", "ques_feats", "=", "self", ".", "ques_tr", "(", "ques_feats", ")", "\n", "\n", "planner_states", ",", "planner_scores", ",", "planner_hidden", "=", "self", ".", "planner_nav_rnn", "(", "\n", "planner_img_feats", ",", "ques_feats", ",", "planner_actions_in", ",", "\n", "planner_action_lengths", ")", "\n", "\n", "planner_hidden_index", "=", "planner_hidden_index", "[", ":", ",", ":", "\n", "controller_action_lengths", ".", "\n", "max", "(", ")", "]", "\n", "controller_img_feats", "=", "controller_img_feats", "[", ":", ",", ":", "\n", "controller_action_lengths", ".", "\n", "max", "(", ")", "]", "\n", "controller_actions_in", "=", "controller_actions_in", "[", ":", ",", ":", "\n", "controller_action_lengths", ".", "\n", "max", "(", ")", "]", "\n", "\n", "N_c", ",", "T_c", ",", "_", "=", "controller_img_feats", ".", "size", "(", ")", "\n", "\n", "assert", "planner_hidden_index", ".", "max", "(", ")", ".", "data", "[", "0", "]", "<", "planner_states", ".", "size", "(", "1", ")", "\n", "\n", "planner_hidden_index", "=", "planner_hidden_index", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "N_p", ",", "planner_hidden_index", ".", "size", "(", "1", ")", ",", "1", ")", ".", "repeat", "(", "\n", "1", ",", "1", ",", "planner_states", ".", "size", "(", "2", ")", ")", "\n", "\n", "controller_hidden_in", "=", "planner_states", ".", "gather", "(", "1", ",", "planner_hidden_index", ")", "\n", "controller_hidden_in", "=", "controller_hidden_in", ".", "view", "(", "\n", "N_c", "*", "T_c", ",", "controller_hidden_in", ".", "size", "(", "2", ")", ")", "\n", "\n", "controller_img_feats", "=", "controller_img_feats", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "N_c", "*", "T_c", ",", "-", "1", ")", "\n", "controller_actions_embed", "=", "self", ".", "planner_nav_rnn", ".", "action_embed", "(", "\n", "controller_actions_in", ")", ".", "view", "(", "N_c", "*", "T_c", ",", "-", "1", ")", "\n", "\n", "controller_in", "=", "torch", ".", "cat", "(", "[", "\n", "controller_img_feats", ",", "controller_actions_embed", ",", "\n", "controller_hidden_in", "\n", "]", ",", "1", ")", "\n", "controller_scores", "=", "self", ".", "controller", "(", "controller_in", ")", "\n", "\n", "return", "planner_scores", ",", "controller_scores", ",", "planner_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.planner_step": [[1151, 1160], ["models.NavPlannerControllerModel.cnn_fc_layer", "models.NavPlannerControllerModel.q_rnn", "models.NavPlannerControllerModel.ques_tr", "models.NavPlannerControllerModel.planner_nav_rnn.step_forward"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.step_forward"], ["", "def", "planner_step", "(", "self", ",", "questions", ",", "img_feats", ",", "actions_in", ",", "planner_hidden", ")", ":", "\n", "\n", "        ", "img_feats", "=", "self", ".", "cnn_fc_layer", "(", "img_feats", ")", "\n", "ques_feats", "=", "self", ".", "q_rnn", "(", "questions", ")", "\n", "ques_feats", "=", "self", ".", "ques_tr", "(", "ques_feats", ")", "\n", "planner_scores", ",", "planner_hidden", "=", "self", ".", "planner_nav_rnn", ".", "step_forward", "(", "\n", "img_feats", ",", "ques_feats", ",", "actions_in", ",", "planner_hidden", ")", "\n", "\n", "return", "planner_scores", ",", "planner_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.controller_step": [[1161, 1174], ["models.NavPlannerControllerModel.cnn_fc_layer", "models.NavPlannerControllerModel.planner_nav_rnn.action_embed", "img_feats.view.view.view", "actions_embed.view.view.view", "hidden_in.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.NavPlannerControllerModel.controller"], "methods", ["None"], ["", "def", "controller_step", "(", "self", ",", "img_feats", ",", "actions_in", ",", "hidden_in", ")", ":", "\n", "\n", "        ", "img_feats", "=", "self", ".", "cnn_fc_layer", "(", "img_feats", ")", "\n", "actions_embed", "=", "self", ".", "planner_nav_rnn", ".", "action_embed", "(", "actions_in", ")", "\n", "\n", "img_feats", "=", "img_feats", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "actions_embed", "=", "actions_embed", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "hidden_in", "=", "hidden_in", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "controller_in", "=", "torch", ".", "cat", "(", "[", "img_feats", ",", "actions_embed", ",", "hidden_in", "]", ",", "1", ")", "\n", "controller_scores", "=", "self", ".", "controller", "(", "controller_in", ")", "\n", "\n", "return", "controller_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.build_mlp": [[22, 48], ["layers.append", "torch.Sequential", "layers.append", "layers.append", "layers.append", "layers.append", "torch.Linear", "layers.append", "torch.Dropout", "torch.BatchNorm1d", "torch.Linear", "layers.append", "layers.append", "torch.ReLU", "torch.Sigmoid", "torch.BatchNorm1d", "torch.Dropout"], "function", ["None"], ["def", "build_mlp", "(", "input_dim", ",", "\n", "hidden_dims", ",", "\n", "output_dim", ",", "\n", "use_batchnorm", "=", "False", ",", "\n", "dropout", "=", "0", ",", "\n", "add_sigmoid", "=", "1", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "D", "=", "input_dim", "\n", "if", "dropout", ">", "0", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", "\n", "", "if", "use_batchnorm", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "input_dim", ")", ")", "\n", "", "for", "dim", "in", "hidden_dims", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "D", ",", "dim", ")", ")", "\n", "if", "use_batchnorm", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "", "if", "dropout", ">", "0", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "D", "=", "dim", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "D", ",", "output_dim", ")", ")", "\n", "\n", "if", "add_sigmoid", "==", "1", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.get_state": [[50, 57], ["m.state_dict().items", "v.clone", "m.state_dict"], "function", ["None"], ["", "def", "get_state", "(", "m", ")", ":", "\n", "    ", "if", "m", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "state", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "m", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "state", "[", "k", "]", "=", "v", ".", "clone", "(", ")", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.repackage_hidden": [[59, 66], ["type", "torch.autograd.Variable", "tuple", "h.data.resize_().zero_", "models.repackage_hidden", "h.data.resize_", "h.size", "h.size"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.repackage_hidden"], ["", "def", "repackage_hidden", "(", "h", ",", "batch_size", ")", ":", "\n", "# wraps hidden states in new Variables, to detach them from their history", "\n", "    ", "if", "type", "(", "h", ")", "==", "Variable", ":", "\n", "        ", "return", "Variable", "(", "\n", "h", ".", "data", ".", "resize_", "(", "h", ".", "size", "(", "0", ")", ",", "batch_size", ",", "h", ".", "size", "(", "2", ")", ")", ".", "zero_", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "tuple", "(", "repackage_hidden", "(", "v", ",", "batch_size", ")", "for", "v", "in", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.ensure_shared_grads": [[68, 74], ["zip", "model.parameters", "shared_model.parameters"], "function", ["None"], ["", "", "def", "ensure_shared_grads", "(", "model", ",", "shared_model", ")", ":", "\n", "    ", "for", "param", ",", "shared_param", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "\n", "shared_model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "shared_param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "return", "\n", "", "shared_param", ".", "_grad", "=", "param", ".", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.__init__": [[17, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "info", "=", "{", "}", ",", "metric_names", "=", "[", "]", ",", "log_json", "=", "None", ")", ":", "\n", "        ", "self", ".", "info", "=", "info", "\n", "self", ".", "metric_names", "=", "metric_names", "\n", "\n", "self", ".", "metrics", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "_", "in", "self", ".", "metric_names", "]", "\n", "\n", "self", ".", "stats", "=", "[", "]", "\n", "self", ".", "num_iters", "=", "0", "\n", "\n", "self", ".", "log_json", "=", "log_json", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update": [[28, 57], ["isinstance", "range", "metrics.Metric.stats.append", "len", "float", "float", "float", "current_stats.append", "copy.deepcopy", "isinstance", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "values", ")", ":", "\n", "        ", "assert", "isinstance", "(", "values", ",", "list", ")", "\n", "\n", "self", ".", "num_iters", "+=", "1", "\n", "current_stats", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "values", ")", ")", ":", "\n", "            ", "if", "values", "[", "i", "]", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "isinstance", "(", "values", "[", "i", "]", ",", "list", ")", "==", "False", ":", "\n", "                ", "values", "[", "i", "]", "=", "[", "values", "[", "i", "]", "]", "\n", "\n", "", "if", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", "==", "None", ":", "\n", "                ", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", "=", "np", ".", "mean", "(", "values", "[", "i", "]", ")", "\n", "self", ".", "metrics", "[", "i", "]", "[", "1", "]", "=", "np", ".", "mean", "(", "values", "[", "i", "]", ")", "\n", "self", ".", "metrics", "[", "i", "]", "[", "2", "]", "=", "np", ".", "mean", "(", "values", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", "=", "(", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", "*", "(", "self", ".", "num_iters", "-", "1", ")", "+", "np", ".", "mean", "(", "values", "[", "i", "]", ")", ")", "/", "self", ".", "num_iters", "\n", "self", ".", "metrics", "[", "i", "]", "[", "1", "]", "=", "0.95", "*", "self", ".", "metrics", "[", "i", "]", "[", "1", "]", "+", "0.05", "*", "np", ".", "mean", "(", "values", "[", "i", "]", ")", "\n", "self", ".", "metrics", "[", "i", "]", "[", "2", "]", "=", "np", ".", "mean", "(", "values", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", "=", "float", "(", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", ")", "\n", "self", ".", "metrics", "[", "i", "]", "[", "1", "]", "=", "float", "(", "self", ".", "metrics", "[", "i", "]", "[", "1", "]", ")", "\n", "self", ".", "metrics", "[", "i", "]", "[", "2", "]", "=", "float", "(", "self", ".", "metrics", "[", "i", "]", "[", "2", "]", ")", "\n", "\n", "current_stats", ".", "append", "(", "self", ".", "metrics", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "stats", ".", "append", "(", "copy", ".", "deepcopy", "(", "current_stats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string": [[58, 71], ["metrics.Metric.info.items", "range", "len"], "methods", ["None"], ["", "def", "get_stat_string", "(", "self", ",", "mode", "=", "1", ")", ":", "\n", "\n", "        ", "stat_string", "=", "''", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "info", ".", "items", "(", ")", ":", "\n", "            ", "stat_string", "+=", "'[%s:%s]'", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "stat_string", "+=", "'[iters:%d]'", "%", "self", ".", "num_iters", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "metric_names", ")", ")", ":", "\n", "            ", "stat_string", "+=", "'[%s:%.05f]'", "%", "(", "self", ".", "metric_names", "[", "i", "]", ",", "self", ".", "metrics", "[", "i", "]", "[", "mode", "]", ")", "\n", "\n", "", "return", "stat_string", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.dump_log": [[72, 85], ["json.dump", "open"], "methods", ["None"], ["", "def", "dump_log", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "log_json", "==", "None", ":", "\n", "            ", "return", "False", "\n", "\n", "", "dict_to_save", "=", "{", "\n", "'metric_names'", ":", "self", ".", "metric_names", ",", "\n", "'stats'", ":", "self", ".", "stats", "\n", "}", "\n", "\n", "json", ".", "dump", "(", "dict_to_save", ",", "open", "(", "self", ".", "log_json", ",", "'w'", ")", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.VqaMetric.__init__": [[87, 89], ["metrics.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__"], ["    ", "def", "__init__", "(", "self", ",", "info", "=", "{", "}", ",", "metric_names", "=", "[", "]", ",", "log_json", "=", "None", ")", ":", "\n", "        ", "Metric", ".", "__init__", "(", "self", ",", "info", ",", "metric_names", ",", "log_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.VqaMetric.compute_ranks": [[90, 100], ["numpy.zeros", "numpy.full", "range", "len", "len", "scores[].gt().sum", "scores[].gt"], "methods", ["None"], ["", "def", "compute_ranks", "(", "self", ",", "scores", ",", "labels", ")", ":", "\n", "        ", "accuracy", "=", "np", ".", "zeros", "(", "len", "(", "labels", ")", ")", "\n", "ranks", "=", "np", ".", "full", "(", "len", "(", "labels", ")", ",", "scores", ".", "shape", "[", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ranks", "[", "i", "]", "=", "scores", "[", "i", "]", ".", "gt", "(", "scores", "[", "i", "]", "[", "labels", "[", "i", "]", "]", ")", ".", "sum", "(", ")", "+", "1", "\n", "if", "ranks", "[", "i", "]", "==", "1", ":", "\n", "                ", "accuracy", "[", "i", "]", "=", "1", "\n", "\n", "", "", "return", "accuracy", ",", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.NavMetric.__init__": [[102, 104], ["metrics.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__"], ["    ", "def", "__init__", "(", "self", ",", "info", "=", "{", "}", ",", "metric_names", "=", "[", "]", ",", "log_json", "=", "None", ")", ":", "\n", "        ", "Metric", ".", "__init__", "(", "self", ",", "info", ",", "metric_names", ",", "log_json", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.__init__": [[134, 268], ["data.load_vocab", "numpy.random.seed", "print", "data._dataset_to_tensor", "data._dataset_to_tensor", "data._dataset_to_tensor", "data._dataset_to_tensor", "data._dataset_to_tensor", "isinstance", "numpy.zeros", "range", "torch.LongTensor", "torch.LongTensor", "json.load", "list", "json.load.EqaDataset.env_set.sort", "print", "print", "json.load.EqaDataset.actions.clone().fill_", "json.load.EqaDataset.actions.clone().fill_", "json.load.EqaDataset.action_lengths.clone().fill_", "json.load.EqaDataset.action_lengths.clone().fill_", "json.load.EqaDataset.actions.clone().fill_", "tqdm.tqdm.tqdm", "numpy.ones", "int", "json.load.EqaDataset.actions[].numpy", "open", "set", "print", "logging.info", "json.load.EqaDataset._load_envs", "models.MultitaskCNN", "json.load.EqaDataset.cnn.eval", "json.load.EqaDataset.cnn.cuda", "range", "range", "data.flat_to_hierarchical_actions", "torch.Tensor", "torch.Tensor", "len", "json.load.EqaDataset.planner_pos_queue_idx.append", "json.load.EqaDataset.controller_pos_queue_idx.append", "torch.Tensor", "len", "len", "json.load.EqaDataset.actions.clone", "json.load.EqaDataset.actions.clone", "json.load.EqaDataset.action_lengths.clone", "json.load.EqaDataset.action_lengths.clone", "json.load.EqaDataset.actions.clone", "len", "len", "list", "len", "len", "len", "len", "set", "list", "set"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data._dataset_to_tensor", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data._dataset_to_tensor", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data._dataset_to_tensor", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data._dataset_to_tensor", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data._dataset_to_tensor", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.eval", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.flat_to_hierarchical_actions"], ["    ", "def", "__init__", "(", "self", ",", "\n", "questions_h5", ",", "\n", "vocab", ",", "\n", "num_frames", "=", "1", ",", "\n", "data_json", "=", "False", ",", "\n", "split", "=", "'train'", ",", "\n", "gpu_id", "=", "0", ",", "\n", "input_type", "=", "'ques'", ",", "\n", "max_threads_per_gpu", "=", "10", ",", "\n", "to_cache", "=", "False", ",", "\n", "target_obj_conn_map_dir", "=", "False", ",", "\n", "map_resolution", "=", "1000", ",", "\n", "overfit", "=", "False", ",", "\n", "max_controller_actions", "=", "5", ",", "\n", "max_actions", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "questions_h5", "=", "questions_h5", "\n", "self", ".", "vocab", "=", "load_vocab", "(", "vocab", ")", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "max_controller_actions", "=", "max_controller_actions", "\n", "\n", "np", ".", "random", ".", "seed", "(", ")", "\n", "\n", "self", ".", "data_json", "=", "data_json", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "gpu_id", "=", "gpu_id", "\n", "\n", "self", ".", "input_type", "=", "input_type", "\n", "\n", "self", ".", "max_threads_per_gpu", "=", "max_threads_per_gpu", "\n", "\n", "self", ".", "target_obj_conn_map_dir", "=", "target_obj_conn_map_dir", "\n", "self", ".", "map_resolution", "=", "map_resolution", "\n", "self", ".", "overfit", "=", "overfit", "\n", "\n", "self", ".", "to_cache", "=", "to_cache", "\n", "self", ".", "img_data_cache", "=", "{", "}", "\n", "\n", "print", "(", "'Reading question data into memory'", ")", "\n", "self", ".", "idx", "=", "_dataset_to_tensor", "(", "questions_h5", "[", "'idx'", "]", ")", "\n", "self", ".", "questions", "=", "_dataset_to_tensor", "(", "questions_h5", "[", "'questions'", "]", ")", "\n", "self", ".", "answers", "=", "_dataset_to_tensor", "(", "questions_h5", "[", "'answers'", "]", ")", "\n", "self", ".", "actions", "=", "_dataset_to_tensor", "(", "questions_h5", "[", "'action_labels'", "]", ")", "\n", "self", ".", "action_lengths", "=", "_dataset_to_tensor", "(", "\n", "questions_h5", "[", "'action_lengths'", "]", ")", "\n", "\n", "if", "max_actions", ":", "#max actions will allow us to create arrays of a certain length.  Helpful if you only want to train with 10 actions.", "\n", "            ", "assert", "isinstance", "(", "max_actions", ",", "int", ")", "\n", "num_data_items", "=", "self", ".", "actions", ".", "shape", "[", "0", "]", "\n", "new_actions", "=", "np", ".", "zeros", "(", "(", "num_data_items", ",", "max_actions", "+", "2", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "new_lengths", "=", "np", ".", "ones", "(", "(", "num_data_items", ",", ")", ",", "dtype", "=", "np", ".", "int64", ")", "*", "max_actions", "\n", "for", "i", "in", "range", "(", "num_data_items", ")", ":", "\n", "                ", "action_length", "=", "int", "(", "self", ".", "action_lengths", "[", "i", "]", ")", "\n", "new_actions", "[", "i", ",", "0", "]", "=", "1", "\n", "new_actions", "[", "i", ",", "1", ":", "max_actions", "+", "1", "]", "=", "self", ".", "actions", "[", "i", ",", "action_length", "-", "max_actions", ":", "action_length", "]", ".", "numpy", "(", ")", "\n", "", "self", ".", "actions", "=", "torch", ".", "LongTensor", "(", "new_actions", ")", "\n", "self", ".", "action_lengths", "=", "torch", ".", "LongTensor", "(", "new_lengths", ")", "\n", "\n", "", "if", "self", ".", "data_json", "!=", "False", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "open", "(", "self", ".", "data_json", ",", "'r'", ")", ")", "\n", "self", ".", "envs", "=", "data", "[", "'envs'", "]", "\n", "\n", "self", ".", "env_idx", "=", "data", "[", "self", ".", "split", "+", "'_env_idx'", "]", "\n", "self", ".", "env_list", "=", "[", "self", ".", "envs", "[", "x", "]", "for", "x", "in", "self", ".", "env_idx", "]", "\n", "self", ".", "env_set", "=", "list", "(", "set", "(", "self", ".", "env_list", ")", ")", "\n", "self", ".", "env_set", ".", "sort", "(", ")", "\n", "\n", "if", "self", ".", "overfit", "==", "True", ":", "\n", "                ", "self", ".", "env_idx", "=", "self", ".", "env_idx", "[", ":", "1", "]", "\n", "self", ".", "env_set", "=", "self", ".", "env_list", "=", "[", "self", ".", "envs", "[", "x", "]", "for", "x", "in", "self", ".", "env_idx", "]", "\n", "print", "(", "'Trying to overfit to [house %s]'", "%", "self", ".", "env_set", "[", "0", "]", ")", "\n", "logging", ".", "info", "(", "'Trying to overfit to [house {}]'", ".", "format", "(", "self", ".", "env_set", "[", "0", "]", ")", ")", "\n", "\n", "", "print", "(", "'Total envs: %d'", "%", "len", "(", "list", "(", "set", "(", "self", ".", "envs", ")", ")", ")", ")", "\n", "print", "(", "'Envs in %s: %d'", "%", "(", "self", ".", "split", ",", "\n", "len", "(", "list", "(", "set", "(", "self", ".", "env_idx", ")", ")", ")", ")", ")", "\n", "\n", "if", "input_type", "!=", "'ques'", ":", "\n", "                ", "''''\n                If training, randomly sample and load a subset of environments,\n                train on those, and then cycle through to load the rest.\n\n                On the validation and test set, load in order, and cycle through.\n\n                For both, add optional caching so that if all environments\n                have been cycled through once, then no need to re-load and\n                instead, just the cache can be used.\n                '''", "\n", "\n", "self", ".", "api_threads", "=", "[", "]", "\n", "self", ".", "_load_envs", "(", "start_idx", "=", "0", ",", "in_order", "=", "True", ")", "\n", "\n", "cnn_kwargs", "=", "{", "'num_classes'", ":", "191", ",", "'pretrained'", ":", "True", "}", "\n", "self", ".", "cnn", "=", "MultitaskCNN", "(", "**", "cnn_kwargs", ")", "\n", "self", ".", "cnn", ".", "eval", "(", ")", "\n", "self", ".", "cnn", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "pos_queue", "=", "data", "[", "self", ".", "split", "+", "'_pos_queue'", "]", "\n", "self", ".", "boxes", "=", "data", "[", "self", ".", "split", "+", "'_boxes'", "]", "\n", "\n", "if", "max_actions", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_queue", ")", ")", ":", "\n", "                    ", "self", ".", "pos_queue", "[", "i", "]", "=", "self", ".", "pos_queue", "[", "i", "]", "[", "-", "1", "*", "max_actions", ":", "]", "\n", "\n", "", "", "", "if", "input_type", "==", "'pacman'", ":", "\n", "\n", "            ", "self", ".", "planner_actions", "=", "self", ".", "actions", ".", "clone", "(", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "controller_actions", "=", "self", ".", "actions", ".", "clone", "(", ")", ".", "fill_", "(", "-", "1", ")", "\n", "\n", "self", ".", "planner_action_lengths", "=", "self", ".", "action_lengths", ".", "clone", "(", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "controller_action_lengths", "=", "self", ".", "action_lengths", ".", "clone", "(", ")", ".", "fill_", "(", "\n", "0", ")", "\n", "\n", "self", ".", "planner_hidden_idx", "=", "self", ".", "actions", ".", "clone", "(", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "planner_pos_queue_idx", ",", "self", ".", "controller_pos_queue_idx", "=", "[", "]", ",", "[", "]", "\n", "\n", "# parsing flat actions to planner-controller hierarchy", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "actions", ")", ")", ")", ":", "\n", "\n", "                ", "pa", ",", "ca", ",", "pq_idx", ",", "cq_idx", ",", "ph_idx", "=", "flat_to_hierarchical_actions", "(", "\n", "actions", "=", "self", ".", "actions", "[", "i", "]", "[", ":", "self", ".", "action_lengths", "[", "i", "]", "+", "1", "]", ",", "\n", "controller_action_lim", "=", "max_controller_actions", ")", "\n", "\n", "self", ".", "planner_actions", "[", "i", "]", "[", ":", "len", "(", "pa", ")", "]", "=", "torch", ".", "Tensor", "(", "pa", ")", "\n", "self", ".", "controller_actions", "[", "i", "]", "[", ":", "len", "(", "ca", ")", "]", "=", "torch", ".", "Tensor", "(", "ca", ")", "\n", "\n", "self", ".", "planner_action_lengths", "[", "i", "]", "=", "len", "(", "pa", ")", "-", "1", "\n", "self", ".", "controller_action_lengths", "[", "i", "]", "=", "len", "(", "ca", ")", "\n", "\n", "self", ".", "planner_pos_queue_idx", ".", "append", "(", "pq_idx", ")", "\n", "self", ".", "controller_pos_queue_idx", ".", "append", "(", "cq_idx", ")", "\n", "\n", "self", ".", "planner_hidden_idx", "[", "i", "]", "[", ":", "len", "(", "ca", ")", "]", "=", "torch", ".", "Tensor", "(", "ph_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._pick_envs_to_load": [[269, 285], ["len", "numpy.random.choice", "numpy.random.choice", "len", "len"], "methods", ["None"], ["", "", "", "def", "_pick_envs_to_load", "(", "self", ",", "\n", "split", "=", "'train'", ",", "\n", "max_envs", "=", "10", ",", "\n", "start_idx", "=", "0", ",", "\n", "in_order", "=", "False", ")", ":", "\n", "        ", "if", "split", "in", "[", "'val'", ",", "'test'", "]", "or", "in_order", "==", "True", ":", "\n", "            ", "pruned_env_set", "=", "self", ".", "env_set", "[", "start_idx", ":", "start_idx", "+", "max_envs", "]", "\n", "", "else", ":", "\n", "            ", "if", "max_envs", "<", "len", "(", "self", ".", "env_set", ")", ":", "\n", "                ", "env_inds", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "env_set", ")", ",", "max_envs", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "env_inds", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "env_set", ")", ",", "max_envs", ",", "replace", "=", "True", ")", "\n", "", "pruned_env_set", "=", "[", "self", ".", "env_set", "[", "x", "]", "for", "x", "in", "env_inds", "]", "\n", "", "return", "pruned_env_set", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs": [[286, 364], ["data.EqaDataset._pick_envs_to_load", "time.time", "print", "time.time", "print", "time.time", "range", "print", "data.EqaDataset.available_idx.copy", "range", "print", "len", "len", "range", "House3D.load_config", "Pool", "pool.starmap", "len", "print", "House3D.Environment", "house3d.House3DUtils", "len", "data.EqaDataset.env_set.index", "data.EqaDataset.api_threads.append", "House3D.load_config", "len", "enumerate", "data.EqaDataset.available_idx.remove", "len", "House3D.objrender.RenderAPIThread", "len", "len", "len", "time.time", "time.time", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._pick_envs_to_load"], ["", "def", "_load_envs", "(", "self", ",", "start_idx", "=", "-", "1", ",", "in_order", "=", "False", ")", ":", "\n", "#self._clear_memory()", "\n", "        ", "if", "start_idx", "==", "-", "1", ":", "\n", "            ", "start_idx", "=", "self", ".", "env_set", ".", "index", "(", "self", ".", "pruned_env_set", "[", "-", "1", "]", ")", "+", "1", "\n", "\n", "# Pick envs", "\n", "", "self", ".", "pruned_env_set", "=", "self", ".", "_pick_envs_to_load", "(", "\n", "split", "=", "self", ".", "split", ",", "\n", "max_envs", "=", "self", ".", "max_threads_per_gpu", ",", "\n", "start_idx", "=", "start_idx", ",", "\n", "in_order", "=", "in_order", ")", "\n", "\n", "if", "len", "(", "self", ".", "pruned_env_set", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "# Load api threads", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "len", "(", "self", ".", "api_threads", ")", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "max_threads_per_gpu", ")", ":", "\n", "                ", "self", ".", "api_threads", ".", "append", "(", "\n", "objrender", ".", "RenderAPIThread", "(", "\n", "w", "=", "224", ",", "h", "=", "224", ",", "device", "=", "self", ".", "gpu_id", ")", ")", "\n", "\n", "", "", "try", ":", "\n", "            ", "self", ".", "cfg", "=", "load_config", "(", "'../House3D/tests/config.json'", ")", "\n", "", "except", ":", "\n", "            ", "self", ".", "cfg", "=", "load_config", "(", "'../../House3D/tests/config.json'", ")", "#Sorry guys; this is so Lisa can run on her system; maybe we should make this an input somewhere?", "\n", "\n", "", "print", "(", "'[%.02f] Loaded %d api threads'", "%", "(", "time", ".", "time", "(", ")", "-", "start", ",", "\n", "len", "(", "self", ".", "api_threads", ")", ")", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Load houses", "\n", "from", "multiprocessing", "import", "Pool", "\n", "_args", "=", "(", "[", "h", ",", "self", ".", "cfg", ",", "self", ".", "map_resolution", "]", "\n", "for", "h", "in", "self", ".", "pruned_env_set", ")", "\n", "with", "Pool", "(", "len", "(", "self", ".", "pruned_env_set", ")", ")", "as", "pool", ":", "\n", "            ", "self", ".", "all_houses", "=", "pool", ".", "starmap", "(", "local_create_house", ",", "_args", ")", "\n", "\n", "", "print", "(", "'[%.02f] Loaded %d houses'", "%", "(", "time", ".", "time", "(", ")", "-", "start", ",", "\n", "len", "(", "self", ".", "all_houses", ")", ")", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Load envs", "\n", "self", ".", "env_loaded", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "all_houses", ")", ")", ":", "\n", "            ", "print", "(", "'[%02d/%d][split:%s][gpu:%d][house:%s]'", "%", "\n", "(", "i", "+", "1", ",", "len", "(", "self", ".", "all_houses", ")", ",", "self", ".", "split", ",", "self", ".", "gpu_id", ",", "\n", "self", ".", "all_houses", "[", "i", "]", ".", "house", "[", "'id'", "]", ")", ")", "\n", "environment", "=", "Environment", "(", "self", ".", "api_threads", "[", "i", "]", ",", "self", ".", "all_houses", "[", "i", "]", ",", "self", ".", "cfg", ")", "\n", "self", ".", "env_loaded", "[", "self", ".", "all_houses", "[", "i", "]", ".", "house", "[", "'id'", "]", "]", "=", "House3DUtils", "(", "\n", "environment", ",", "\n", "target_obj_conn_map_dir", "=", "self", ".", "target_obj_conn_map_dir", ",", "\n", "build_graph", "=", "False", ")", "\n", "\n", "# [TODO] Unused till now", "\n", "", "self", ".", "env_ptr", "=", "-", "1", "\n", "\n", "print", "(", "'[%.02f] Loaded %d house3d envs'", "%", "(", "time", ".", "time", "(", ")", "-", "start", ",", "\n", "len", "(", "self", ".", "env_loaded", ")", ")", ")", "\n", "\n", "# Mark available data indices", "\n", "self", ".", "available_idx", "=", "[", "\n", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "env_list", ")", "if", "v", "in", "self", ".", "env_loaded", "\n", "]", "\n", "\n", "# [TODO] only keeping legit sequences", "\n", "# needed for things to play well with old data", "\n", "temp_available_idx", "=", "self", ".", "available_idx", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "temp_available_idx", ")", ")", ":", "\n", "            ", "if", "self", ".", "action_lengths", "[", "temp_available_idx", "[", "i", "]", "]", "<", "5", ":", "\n", "                ", "self", ".", "available_idx", ".", "remove", "(", "temp_available_idx", "[", "i", "]", ")", "\n", "\n", "", "", "print", "(", "'Available inds: %d'", "%", "len", "(", "self", ".", "available_idx", ")", ")", "\n", "\n", "# Flag to check if loaded envs have been cycled through or not", "\n", "# [TODO] Unused till now", "\n", "self", ".", "all_envs_loaded", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._clear_api_threads": [[365, 369], ["range", "len"], "methods", ["None"], ["", "def", "_clear_api_threads", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "api_threads", ")", ")", ":", "\n", "            ", "del", "self", ".", "api_threads", "[", "0", "]", "\n", "", "self", ".", "api_threads", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._clear_memory": [[370, 378], ["hasattr", "hasattr", "hasattr"], "methods", ["None"], ["", "def", "_clear_memory", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'episode_house'", ")", ":", "\n", "            ", "del", "self", ".", "episode_house", "\n", "", "if", "hasattr", "(", "self", ",", "'env_loaded'", ")", ":", "\n", "            ", "del", "self", ".", "env_loaded", "\n", "", "if", "hasattr", "(", "self", ",", "'api_threads'", ")", ":", "\n", "            ", "del", "self", ".", "api_threads", "\n", "", "self", ".", "api_threads", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._check_if_all_envs_loaded": [[379, 387], ["print", "len", "len", "len", "len", "enumerate"], "methods", ["None"], ["", "def", "_check_if_all_envs_loaded", "(", "self", ")", ":", "\n", "        ", "print", "(", "'[CHECK][Cache:%d][Total:%d]'", "%", "(", "len", "(", "self", ".", "img_data_cache", ")", ",", "\n", "len", "(", "self", ".", "env_list", ")", ")", ")", "\n", "if", "len", "(", "self", ".", "img_data_cache", ")", "==", "len", "(", "self", ".", "env_list", ")", ":", "\n", "            ", "self", ".", "available_idx", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "env_list", ")", "]", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.set_camera": [[388, 397], ["e.env.cam.updateDirection", "len"], "methods", ["None"], ["", "", "def", "set_camera", "(", "self", ",", "e", ",", "pos", ",", "robot_height", "=", "1.0", ")", ":", "\n", "        ", "assert", "len", "(", "pos", ")", "==", "4", "\n", "\n", "e", ".", "env", ".", "cam", ".", "pos", ".", "x", "=", "pos", "[", "0", "]", "\n", "e", ".", "env", ".", "cam", ".", "pos", ".", "y", "=", "robot_height", "\n", "e", ".", "env", ".", "cam", ".", "pos", ".", "z", "=", "pos", "[", "2", "]", "\n", "e", ".", "env", ".", "cam", ".", "yaw", "=", "pos", "[", "3", "]", "\n", "\n", "e", ".", "env", ".", "cam", ".", "updateDirection", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.render": [[398, 400], ["e.env.render"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.render"], ["", "def", "render", "(", "self", ",", "e", ")", ":", "\n", "        ", "return", "e", ".", "env", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_frames": [[401, 417], ["range", "numpy.array", "isinstance", "len", "data.EqaDataset.set_camera", "numpy.array", "res.append", "data.EqaDataset.render", "img.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.set_camera", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.render"], ["", "def", "get_frames", "(", "self", ",", "e", ",", "pos_queue", ",", "preprocess", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "pos_queue", ",", "list", ")", "==", "False", ":", "\n", "            ", "pos_queue", "=", "[", "pos_queue", "]", "\n", "\n", "", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pos_queue", ")", ")", ":", "\n", "            ", "self", ".", "set_camera", "(", "e", ",", "pos_queue", "[", "i", "]", ")", "\n", "img", "=", "np", ".", "array", "(", "self", ".", "render", "(", "e", ")", ",", "copy", "=", "False", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "preprocess", "==", "True", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "img", "/", "255.0", "\n", "\n", "", "res", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_hierarchical_features_till_spawn": [[418, 458], ["data.flat_to_hierarchical_actions", "data.EqaDataset.get_frames", "data.EqaDataset.cnn().data.cpu().numpy().copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "len", "raw_img_feats[].copy", "raw_img_feats[].copy", "data.EqaDataset.cnn().data.cpu().numpy", "numpy.array", "len", "len", "data.EqaDataset.cnn().data.cpu", "data.EqaDataset.cnn", "torch.autograd.Variable", "torch.FloatTensor().cuda", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.flat_to_hierarchical_actions", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_frames"], ["", "def", "get_hierarchical_features_till_spawn", "(", "self", ",", "actions", ",", "backtrack_steps", "=", "0", ",", "max_controller_actions", "=", "5", ")", ":", "\n", "\n", "        ", "action_length", "=", "len", "(", "actions", ")", "-", "1", "\n", "pa", ",", "ca", ",", "pq_idx", ",", "cq_idx", ",", "ph_idx", "=", "flat_to_hierarchical_actions", "(", "\n", "actions", "=", "actions", ",", "\n", "controller_action_lim", "=", "max_controller_actions", ")", "\n", "\n", "# count how many actions of same type have been encountered pefore starting navigation", "\n", "backtrack_controller_steps", "=", "actions", "[", "1", ":", "action_length", "-", "backtrack_steps", "+", "1", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "counter", "=", "0", "\n", "\n", "if", "len", "(", "backtrack_controller_steps", ")", ">", "0", ":", "\n", "            ", "while", "(", "counter", "<=", "self", ".", "max_controller_actions", ")", "and", "(", "counter", "<", "len", "(", "backtrack_controller_steps", ")", "and", "(", "backtrack_controller_steps", "[", "counter", "]", "==", "backtrack_controller_steps", "[", "0", "]", ")", ")", ":", "\n", "                ", "counter", "+=", "1", "\n", "\n", "", "", "target_pos_idx", "=", "action_length", "-", "backtrack_steps", "\n", "\n", "controller_step", "=", "True", "\n", "if", "target_pos_idx", "in", "pq_idx", ":", "\n", "            ", "controller_step", "=", "False", "\n", "\n", "", "pq_idx_pruned", "=", "[", "v", "for", "v", "in", "pq_idx", "if", "v", "<=", "target_pos_idx", "]", "\n", "pa_pruned", "=", "pa", "[", ":", "len", "(", "pq_idx_pruned", ")", "+", "1", "]", "\n", "\n", "images", "=", "self", ".", "get_frames", "(", "\n", "self", ".", "episode_house", ",", "\n", "self", ".", "episode_pos_queue", ",", "\n", "preprocess", "=", "True", ")", "\n", "raw_img_feats", "=", "self", ".", "cnn", "(", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "images", ")", "\n", ".", "cuda", "(", ")", ")", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "\n", "controller_img_feat", "=", "torch", ".", "from_numpy", "(", "raw_img_feats", "[", "target_pos_idx", "]", ".", "copy", "(", ")", ")", "\n", "controller_action_in", "=", "pa_pruned", "[", "-", "1", "]", "-", "2", "\n", "\n", "planner_img_feats", "=", "torch", ".", "from_numpy", "(", "raw_img_feats", "[", "pq_idx_pruned", "]", ".", "copy", "(", ")", ")", "\n", "planner_actions_in", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pa_pruned", "[", ":", "-", "1", "]", ")", "-", "1", ")", "\n", "\n", "return", "planner_actions_in", ",", "planner_img_feats", ",", "controller_step", ",", "controller_action_in", ",", "controller_img_feat", ",", "self", ".", "episode_pos_queue", "[", "target_pos_idx", "]", ",", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.__getitem__": [[459, 797], ["data.EqaDataset.get_frames", "numpy.random.choice", "data.EqaDataset.copy", "data.EqaDataset.get_frames", "data.EqaDataset.cnn().data.cpu().numpy().copy", "data.EqaDataset.env_loaded[].set_target_object", "actions_in[].fill_", "actions_out.clone().gt", "actions.clone", "actions[].clone", "len", "actions_out[].fill_", "data.EqaDataset.env_loaded[].set_target_object", "numpy.zeros", "planner_actions_in[].fill_", "planner_actions_out.clone().gt", "numpy.zeros", "controller_out.clone().gt", "range", "data.EqaDataset.cnn().data.cpu().numpy", "all", "all", "data.EqaDataset.get_frames", "data.EqaDataset.cnn().data.cpu().numpy().copy", "numpy.zeros", "data.EqaDataset.copy", "actions_out.clone", "data.EqaDataset.env_loaded[].set_target_object", "planner_actions.clone", "planner_actions[].clone", "len", "planner_actions_out[].fill_", "actions[].clone", "len", "controller_actions_in[].fill_", "len", "controller_out[].fill_", "all", "all", "all", "all", "data.EqaDataset.get_frames", "data.EqaDataset.cnn().data.cpu().numpy().copy", "numpy.zeros", "data.EqaDataset.copy", "planner_actions_out.clone", "controller_out.clone", "data.EqaDataset.cnn().data.cpu", "data.EqaDataset.cnn().data.cpu().numpy", "all", "all", "all", "all", "range", "range", "data.EqaDataset.cnn().data.cpu().numpy", "all", "all", "controller_out[].sum", "range", "range", "data.EqaDataset.cnn().data.cpu", "range", "range", "data.EqaDataset.cnn", "range", "range", "data.EqaDataset.cnn().data.cpu", "range", "range", "torch.autograd.Variable", "range", "range", "torch.FloatTensor().cuda", "data.EqaDataset.cnn", "torch.autograd.Variable", "data.EqaDataset.cnn", "torch.FloatTensor", "torch.FloatTensor().cuda", "torch.autograd.Variable", "torch.FloatTensor().cuda", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_frames", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_frames", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.set_target_object", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.set_target_object", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_frames", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.set_target_object", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_frames"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# [VQA] question-only", "\n", "        ", "if", "self", ".", "input_type", "==", "'ques'", ":", "\n", "            ", "idx", "=", "self", ".", "idx", "[", "index", "]", "\n", "question", "=", "self", ".", "questions", "[", "index", "]", "\n", "answer", "=", "self", ".", "answers", "[", "index", "]", "\n", "\n", "return", "(", "idx", ",", "question", ",", "answer", ")", "\n", "\n", "# [VQA] question+image", "\n", "", "elif", "self", ".", "input_type", "==", "'ques,image'", ":", "\n", "            ", "index", "=", "self", ".", "available_idx", "[", "index", "]", "\n", "\n", "idx", "=", "self", ".", "idx", "[", "index", "]", "\n", "question", "=", "self", ".", "questions", "[", "index", "]", "\n", "answer", "=", "self", ".", "answers", "[", "index", "]", "\n", "\n", "action_length", "=", "self", ".", "action_lengths", "[", "index", "]", "\n", "actions", "=", "self", ".", "actions", "[", "index", "]", "\n", "\n", "actions_in", "=", "actions", "[", "action_length", "-", "self", ".", "num_frames", ":", "action_length", "]", "\n", "actions_out", "=", "actions", "[", "action_length", "-", "self", ".", "num_frames", "+", "1", ":", "\n", "action_length", "+", "1", "]", "\n", "\n", "if", "self", ".", "to_cache", "==", "True", "and", "index", "in", "self", ".", "img_data_cache", ":", "\n", "                ", "images", "=", "self", ".", "img_data_cache", "[", "index", "]", "\n", "", "else", ":", "\n", "                ", "pos_queue", "=", "self", ".", "pos_queue", "[", "index", "]", "[", "\n", "-", "self", ".", "num_frames", ":", "]", "# last 5 frames", "\n", "images", "=", "self", ".", "get_frames", "(", "\n", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ",", "\n", "pos_queue", ",", "\n", "preprocess", "=", "True", ")", "\n", "if", "self", ".", "to_cache", "==", "True", ":", "\n", "                    ", "self", ".", "img_data_cache", "[", "index", "]", "=", "images", ".", "copy", "(", ")", "\n", "\n", "", "", "return", "(", "idx", ",", "question", ",", "answer", ",", "images", ",", "actions_in", ",", "actions_out", ",", "\n", "action_length", ")", "\n", "\n", "# [NAV] question+cnn", "\n", "", "elif", "self", ".", "input_type", "in", "[", "'cnn'", ",", "'cnn+q'", "]", ":", "\n", "\n", "            ", "index", "=", "self", ".", "available_idx", "[", "index", "]", "\n", "\n", "idx", "=", "self", ".", "idx", "[", "index", "]", "\n", "question", "=", "self", ".", "questions", "[", "index", "]", "\n", "answer", "=", "self", ".", "answers", "[", "index", "]", "\n", "\n", "action_length", "=", "self", ".", "action_lengths", "[", "index", "]", "\n", "actions", "=", "self", ".", "actions", "[", "index", "]", "\n", "\n", "if", "self", ".", "to_cache", "==", "True", "and", "index", "in", "self", ".", "img_data_cache", ":", "\n", "                ", "img_feats", "=", "self", ".", "img_data_cache", "[", "index", "]", "\n", "", "else", ":", "\n", "                ", "pos_queue", "=", "self", ".", "pos_queue", "[", "index", "]", "\n", "images", "=", "self", ".", "get_frames", "(", "\n", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ",", "\n", "pos_queue", ",", "\n", "preprocess", "=", "True", ")", "\n", "img_feats", "=", "self", ".", "cnn", "(", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "images", ")", "\n", ".", "cuda", "(", ")", ")", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "if", "self", ".", "to_cache", "==", "True", ":", "\n", "                    ", "self", ".", "img_data_cache", "[", "index", "]", "=", "img_feats", "\n", "\n", "# for val or test (evaluation), or", "\n", "# when target_obj_conn_map_dir is defined (reinforce),", "\n", "# load entire shortest path navigation trajectory", "\n", "# and load connectivity map for intermediate rewards", "\n", "", "", "if", "self", ".", "split", "in", "[", "'val'", ",", "'test'", "\n", "]", "or", "self", ".", "target_obj_conn_map_dir", "!=", "False", ":", "\n", "                ", "target_obj_id", ",", "target_room", "=", "False", ",", "False", "\n", "bbox_obj", "=", "[", "\n", "x", "for", "x", "in", "self", ".", "boxes", "[", "index", "]", "\n", "if", "x", "[", "'type'", "]", "==", "'object'", "and", "x", "[", "'target'", "]", "==", "True", "\n", "]", "[", "0", "]", "[", "'box'", "]", "\n", "for", "obj_id", "in", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "objects", ":", "\n", "                    ", "box2", "=", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "objects", "[", "\n", "obj_id", "]", "[", "'bbox'", "]", "\n", "if", "all", "(", "[", "bbox_obj", "[", "'min'", "]", "[", "x", "]", "==", "box2", "[", "'min'", "]", "[", "x", "]", "for", "x", "in", "range", "(", "3", ")", "]", ")", "==", "True", "and", "all", "(", "[", "bbox_obj", "[", "'max'", "]", "[", "x", "]", "==", "box2", "[", "'max'", "]", "[", "x", "]", "for", "x", "in", "range", "(", "3", ")", "]", ")", "==", "True", ":", "\n", "                        ", "target_obj_id", "=", "obj_id", "\n", "break", "\n", "", "", "bbox_room", "=", "[", "\n", "x", "for", "x", "in", "self", ".", "boxes", "[", "index", "]", "\n", "if", "x", "[", "'type'", "]", "==", "'room'", "and", "x", "[", "'target'", "]", "==", "False", "\n", "]", "[", "0", "]", "\n", "for", "room", "in", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "\n", "index", "]", "]", ".", "env", ".", "house", ".", "all_rooms", ":", "\n", "                    ", "if", "all", "(", "[", "room", "[", "'bbox'", "]", "[", "'min'", "]", "[", "i", "]", "==", "bbox_room", "[", "'box'", "]", "[", "'min'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", "and", "all", "(", "[", "room", "[", "'bbox'", "]", "[", "'max'", "]", "[", "i", "]", "==", "bbox_room", "[", "'box'", "]", "[", "'max'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "                        ", "target_room", "=", "room", "\n", "break", "\n", "", "", "assert", "target_obj_id", "!=", "False", "\n", "assert", "target_room", "!=", "False", "\n", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "set_target_object", "(", "\n", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "objects", "[", "\n", "target_obj_id", "]", ",", "target_room", ")", "\n", "\n", "# [NOTE] only works for batch size = 1", "\n", "self", ".", "episode_pos_queue", "=", "self", ".", "pos_queue", "[", "index", "]", "\n", "self", ".", "episode_house", "=", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", "\n", "self", ".", "target_room", "=", "target_room", "\n", "self", ".", "target_obj", "=", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "\n", "index", "]", "]", ".", "objects", "[", "target_obj_id", "]", "\n", "\n", "actions_in", "=", "actions", "[", ":", "action_length", "]", "\n", "actions_out", "=", "actions", "[", "1", ":", "action_length", "+", "1", "]", "-", "2", "\n", "\n", "return", "(", "idx", ",", "question", ",", "answer", ",", "img_feats", ",", "actions_in", ",", "\n", "actions_out", ",", "action_length", ")", "\n", "\n", "# if action_length is n", "\n", "# images.shape[0] is also n", "\n", "# actions[0] is <START>", "\n", "# actions[n] is <END>", "\n", "\n", "# grab 5 random frames", "\n", "# [NOTE]: this'll break for longer-than-5 navigation sequences", "\n", "", "start_idx", "=", "np", ".", "random", ".", "choice", "(", "img_feats", ".", "shape", "[", "0", "]", "+", "1", "-", "\n", "self", ".", "num_frames", ")", "\n", "img_feats", "=", "img_feats", "[", "start_idx", ":", "start_idx", "+", "self", ".", "num_frames", "]", "\n", "\n", "actions_in", "=", "actions", "[", "start_idx", ":", "start_idx", "+", "self", ".", "num_frames", "]", "\n", "actions_out", "=", "actions", "[", "start_idx", "+", "self", ".", "num_frames", "]", "-", "2", "\n", "\n", "return", "(", "idx", ",", "question", ",", "answer", ",", "img_feats", ",", "actions_in", ",", "actions_out", ",", "\n", "action_length", ")", "\n", "\n", "# [NAV] question+lstm", "\n", "", "elif", "self", ".", "input_type", "in", "[", "'lstm'", ",", "'lstm+q'", "]", ":", "\n", "\n", "            ", "index", "=", "self", ".", "available_idx", "[", "index", "]", "\n", "\n", "idx", "=", "self", ".", "idx", "[", "index", "]", "\n", "question", "=", "self", ".", "questions", "[", "index", "]", "\n", "answer", "=", "self", ".", "answers", "[", "index", "]", "\n", "\n", "action_length", "=", "self", ".", "action_lengths", "[", "index", "]", "\n", "actions", "=", "self", ".", "actions", "[", "index", "]", "\n", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "if", "self", ".", "to_cache", "==", "True", "and", "index", "in", "self", ".", "img_data_cache", ":", "\n", "                    ", "img_feats", "=", "self", ".", "img_data_cache", "[", "index", "]", "\n", "", "else", ":", "\n", "                    ", "pos_queue", "=", "self", ".", "pos_queue", "[", "index", "]", "\n", "images", "=", "self", ".", "get_frames", "(", "\n", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ",", "\n", "pos_queue", ",", "\n", "preprocess", "=", "True", ")", "\n", "raw_img_feats", "=", "self", ".", "cnn", "(", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "images", ")", "\n", ".", "cuda", "(", ")", ")", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "img_feats", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "actions", ".", "shape", "[", "1", "]", ",", "raw_img_feats", ".", "shape", "[", "1", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "img_feats", "[", ":", "raw_img_feats", ".", "shape", "[", "\n", "0", "]", ",", ":", "]", "=", "raw_img_feats", ".", "copy", "(", ")", "\n", "if", "self", ".", "to_cache", "==", "True", ":", "\n", "                        ", "self", ".", "img_data_cache", "[", "index", "]", "=", "img_feats", "\n", "\n", "", "", "", "actions_in", "=", "actions", ".", "clone", "(", ")", "-", "1", "\n", "actions_out", "=", "actions", "[", "1", ":", "]", ".", "clone", "(", ")", "-", "2", "\n", "\n", "actions_in", "[", "action_length", ":", "]", ".", "fill_", "(", "0", ")", "\n", "mask", "=", "actions_out", ".", "clone", "(", ")", ".", "gt", "(", "-", "1", ")", "\n", "if", "len", "(", "actions_out", ")", ">", "action_length", ":", "\n", "                ", "actions_out", "[", "action_length", ":", "]", ".", "fill_", "(", "0", ")", "\n", "\n", "# for val or test (evaluation), or", "\n", "# when target_obj_conn_map_dir is defined (reinforce),", "\n", "# load entire shortest path navigation trajectory", "\n", "# and load connectivity map for intermediate rewards", "\n", "", "if", "self", ".", "split", "in", "[", "'val'", ",", "'test'", "\n", "]", "or", "self", ".", "target_obj_conn_map_dir", "!=", "False", ":", "\n", "                ", "target_obj_id", ",", "target_room", "=", "False", ",", "False", "\n", "bbox_obj", "=", "[", "\n", "x", "for", "x", "in", "self", ".", "boxes", "[", "index", "]", "\n", "if", "x", "[", "'type'", "]", "==", "'object'", "and", "x", "[", "'target'", "]", "==", "True", "\n", "]", "[", "0", "]", "[", "'box'", "]", "\n", "for", "obj_id", "in", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "objects", ":", "\n", "                    ", "box2", "=", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "objects", "[", "\n", "obj_id", "]", "[", "'bbox'", "]", "\n", "if", "all", "(", "[", "bbox_obj", "[", "'min'", "]", "[", "x", "]", "==", "box2", "[", "'min'", "]", "[", "x", "]", "for", "x", "in", "range", "(", "3", ")", "]", ")", "==", "True", "and", "all", "(", "[", "bbox_obj", "[", "'max'", "]", "[", "x", "]", "==", "box2", "[", "'max'", "]", "[", "x", "]", "for", "x", "in", "range", "(", "3", ")", "]", ")", "==", "True", ":", "\n", "                        ", "target_obj_id", "=", "obj_id", "\n", "break", "\n", "", "", "bbox_room", "=", "[", "\n", "x", "for", "x", "in", "self", ".", "boxes", "[", "index", "]", "\n", "if", "x", "[", "'type'", "]", "==", "'room'", "and", "x", "[", "'target'", "]", "==", "False", "\n", "]", "[", "0", "]", "\n", "for", "room", "in", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "\n", "index", "]", "]", ".", "env", ".", "house", ".", "all_rooms", ":", "\n", "                    ", "if", "all", "(", "[", "room", "[", "'bbox'", "]", "[", "'min'", "]", "[", "i", "]", "==", "bbox_room", "[", "'box'", "]", "[", "'min'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", "and", "all", "(", "[", "room", "[", "'bbox'", "]", "[", "'max'", "]", "[", "i", "]", "==", "bbox_room", "[", "'box'", "]", "[", "'max'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "                        ", "target_room", "=", "room", "\n", "break", "\n", "", "", "assert", "target_obj_id", "!=", "False", "\n", "assert", "target_room", "!=", "False", "\n", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "set_target_object", "(", "\n", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "objects", "[", "\n", "target_obj_id", "]", ",", "target_room", ")", "\n", "\n", "# [NOTE] only works for batch size = 1", "\n", "self", ".", "episode_pos_queue", "=", "self", ".", "pos_queue", "[", "index", "]", "\n", "self", ".", "episode_house", "=", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", "\n", "self", ".", "target_room", "=", "target_room", "\n", "self", ".", "target_obj", "=", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "\n", "index", "]", "]", ".", "objects", "[", "target_obj_id", "]", "\n", "\n", "return", "(", "idx", ",", "question", ",", "answer", ",", "False", ",", "actions_in", ",", "actions_out", ",", "\n", "action_length", ",", "mask", ")", "\n", "\n", "", "return", "(", "idx", ",", "question", ",", "answer", ",", "img_feats", ",", "actions_in", ",", "actions_out", ",", "\n", "action_length", ",", "mask", ")", "\n", "\n", "# [NAV] planner-controller", "\n", "", "elif", "self", ".", "input_type", "in", "[", "'pacman'", "]", ":", "\n", "\n", "            ", "index", "=", "self", ".", "available_idx", "[", "index", "]", "\n", "\n", "idx", "=", "self", ".", "idx", "[", "index", "]", "\n", "question", "=", "self", ".", "questions", "[", "index", "]", "\n", "answer", "=", "self", ".", "answers", "[", "index", "]", "\n", "\n", "action_length", "=", "self", ".", "action_lengths", "[", "index", "]", "\n", "actions", "=", "self", ".", "actions", "[", "index", "]", "\n", "\n", "planner_actions", "=", "self", ".", "planner_actions", "[", "index", "]", "\n", "controller_actions", "=", "self", ".", "controller_actions", "[", "index", "]", "\n", "\n", "planner_action_length", "=", "self", ".", "planner_action_lengths", "[", "index", "]", "\n", "controller_action_length", "=", "self", ".", "controller_action_lengths", "[", "index", "]", "\n", "\n", "planner_hidden_idx", "=", "self", ".", "planner_hidden_idx", "[", "index", "]", "\n", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "if", "self", ".", "to_cache", "==", "True", "and", "index", "in", "self", ".", "img_data_cache", ":", "\n", "                    ", "img_feats", "=", "self", ".", "img_data_cache", "[", "index", "]", "\n", "", "else", ":", "\n", "                    ", "pos_queue", "=", "self", ".", "pos_queue", "[", "index", "]", "\n", "images", "=", "self", ".", "get_frames", "(", "\n", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ",", "\n", "pos_queue", ",", "\n", "preprocess", "=", "True", ")", "\n", "raw_img_feats", "=", "self", ".", "cnn", "(", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "images", ")", "\n", ".", "cuda", "(", ")", ")", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "img_feats", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "actions", ".", "shape", "[", "1", "]", ",", "raw_img_feats", ".", "shape", "[", "1", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "img_feats", "[", ":", "raw_img_feats", ".", "shape", "[", "\n", "0", "]", ",", ":", "]", "=", "raw_img_feats", ".", "copy", "(", ")", "\n", "if", "self", ".", "to_cache", "==", "True", ":", "\n", "                        ", "self", ".", "img_data_cache", "[", "index", "]", "=", "img_feats", "\n", "\n", "", "", "", "if", "self", ".", "split", "in", "[", "'val'", ",", "'test'", "\n", "]", "or", "self", ".", "target_obj_conn_map_dir", "!=", "False", ":", "\n", "                ", "target_obj_id", ",", "target_room", "=", "False", ",", "False", "\n", "bbox_obj", "=", "[", "\n", "x", "for", "x", "in", "self", ".", "boxes", "[", "index", "]", "\n", "if", "x", "[", "'type'", "]", "==", "'object'", "and", "x", "[", "'target'", "]", "==", "True", "\n", "]", "[", "0", "]", "[", "'box'", "]", "\n", "for", "obj_id", "in", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "objects", ":", "\n", "                    ", "box2", "=", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "objects", "[", "\n", "obj_id", "]", "[", "'bbox'", "]", "\n", "if", "all", "(", "[", "bbox_obj", "[", "'min'", "]", "[", "x", "]", "==", "box2", "[", "'min'", "]", "[", "x", "]", "for", "x", "in", "range", "(", "3", ")", "]", ")", "==", "True", "and", "all", "(", "[", "bbox_obj", "[", "'max'", "]", "[", "x", "]", "==", "box2", "[", "'max'", "]", "[", "x", "]", "for", "x", "in", "range", "(", "3", ")", "]", ")", "==", "True", ":", "\n", "                        ", "target_obj_id", "=", "obj_id", "\n", "break", "\n", "", "", "bbox_room", "=", "[", "\n", "x", "for", "x", "in", "self", ".", "boxes", "[", "index", "]", "\n", "if", "x", "[", "'type'", "]", "==", "'room'", "and", "x", "[", "'target'", "]", "==", "False", "\n", "]", "[", "0", "]", "\n", "for", "room", "in", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "\n", "index", "]", "]", ".", "env", ".", "house", ".", "all_rooms", ":", "\n", "                    ", "if", "all", "(", "[", "room", "[", "'bbox'", "]", "[", "'min'", "]", "[", "i", "]", "==", "bbox_room", "[", "'box'", "]", "[", "'min'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", "and", "all", "(", "[", "room", "[", "'bbox'", "]", "[", "'max'", "]", "[", "i", "]", "==", "bbox_room", "[", "'box'", "]", "[", "'max'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "                        ", "target_room", "=", "room", "\n", "break", "\n", "", "", "assert", "target_obj_id", "!=", "False", "\n", "assert", "target_room", "!=", "False", "\n", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "set_target_object", "(", "\n", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", ".", "objects", "[", "\n", "target_obj_id", "]", ",", "target_room", ")", "\n", "\n", "# [NOTE] only works for batch size = 1", "\n", "self", ".", "episode_pos_queue", "=", "self", ".", "pos_queue", "[", "index", "]", "\n", "self", ".", "episode_house", "=", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "index", "]", "]", "\n", "self", ".", "target_room", "=", "target_room", "\n", "self", ".", "target_obj", "=", "self", ".", "env_loaded", "[", "self", ".", "env_list", "[", "\n", "index", "]", "]", ".", "objects", "[", "target_obj_id", "]", "\n", "\n", "return", "(", "idx", ",", "question", ",", "answer", ",", "actions", ",", "action_length", ")", "\n", "\n", "", "planner_pos_queue_idx", "=", "self", ".", "planner_pos_queue_idx", "[", "index", "]", "\n", "controller_pos_queue_idx", "=", "self", ".", "controller_pos_queue_idx", "[", "index", "]", "\n", "\n", "planner_img_feats", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "actions", ".", "shape", "[", "1", "]", ",", "img_feats", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "planner_img_feats", "[", ":", "planner_action_length", "]", "=", "img_feats", "[", "\n", "planner_pos_queue_idx", "]", "\n", "\n", "planner_actions_in", "=", "planner_actions", ".", "clone", "(", ")", "-", "1", "\n", "planner_actions_out", "=", "planner_actions", "[", "1", ":", "]", ".", "clone", "(", ")", "-", "2", "\n", "\n", "planner_actions_in", "[", "planner_action_length", ":", "]", ".", "fill_", "(", "0", ")", "\n", "planner_mask", "=", "planner_actions_out", ".", "clone", "(", ")", ".", "gt", "(", "-", "1", ")", "\n", "if", "len", "(", "planner_actions_out", ")", ">", "planner_action_length", ":", "\n", "                ", "planner_actions_out", "[", "planner_action_length", ":", "]", ".", "fill_", "(", "0", ")", "\n", "\n", "", "controller_img_feats", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "actions", ".", "shape", "[", "1", "]", ",", "img_feats", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "controller_img_feats", "[", ":", "controller_action_length", "]", "=", "img_feats", "[", "\n", "controller_pos_queue_idx", "]", "\n", "\n", "controller_actions_in", "=", "actions", "[", "1", ":", "]", ".", "clone", "(", ")", "-", "2", "\n", "if", "len", "(", "controller_actions_in", ")", ">", "controller_action_length", ":", "\n", "                ", "controller_actions_in", "[", "controller_action_length", ":", "]", ".", "fill_", "(", "0", ")", "\n", "\n", "", "controller_out", "=", "controller_actions", "\n", "controller_mask", "=", "controller_out", ".", "clone", "(", ")", ".", "gt", "(", "-", "1", ")", "\n", "if", "len", "(", "controller_out", ")", ">", "controller_action_length", ":", "\n", "                ", "controller_out", "[", "controller_action_length", ":", "]", ".", "fill_", "(", "0", ")", "\n", "\n", "# zero out forced controller return", "\n", "", "for", "i", "in", "range", "(", "controller_action_length", ")", ":", "\n", "                ", "if", "i", ">=", "self", ".", "max_controller_actions", "-", "1", "and", "controller_out", "[", "i", "]", "==", "0", "and", "(", "self", ".", "max_controller_actions", "==", "1", "or", "\n", "controller_out", "[", "i", "-", "self", ".", "max_controller_actions", "+", "1", ":", "i", "]", ".", "sum", "(", ")", "\n", "==", "self", ".", "max_controller_actions", "-", "1", ")", ":", "\n", "                    ", "controller_mask", "[", "i", "]", "=", "0", "\n", "\n", "", "", "return", "(", "idx", ",", "question", ",", "answer", ",", "planner_img_feats", ",", "\n", "planner_actions_in", ",", "planner_actions_out", ",", "\n", "planner_action_length", ",", "planner_mask", ",", "controller_img_feats", ",", "\n", "controller_actions_in", ",", "planner_hidden_idx", ",", "controller_out", ",", "\n", "controller_action_length", ",", "controller_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.__len__": [[798, 803], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "input_type", "==", "'ques'", ":", "\n", "            ", "return", "len", "(", "self", ".", "questions", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "available_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataLoader.__init__": [[806, 888], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "print", "torch.utils.data.DataLoader.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "h5py.File", "data.EqaDataset", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "'questions_h5'", "not", "in", "kwargs", ":", "\n", "            ", "raise", "ValueError", "(", "'Must give questions_h5'", ")", "\n", "", "if", "'data_json'", "not", "in", "kwargs", ":", "\n", "            ", "raise", "ValueError", "(", "'Must give data_json'", ")", "\n", "", "if", "'vocab'", "not", "in", "kwargs", ":", "\n", "            ", "raise", "ValueError", "(", "'Must give vocab'", ")", "\n", "", "if", "'input_type'", "not", "in", "kwargs", ":", "\n", "            ", "raise", "ValueError", "(", "'Must give input_type'", ")", "\n", "", "if", "'split'", "not", "in", "kwargs", ":", "\n", "            ", "raise", "ValueError", "(", "'Must give split'", ")", "\n", "", "if", "'gpu_id'", "not", "in", "kwargs", ":", "\n", "            ", "raise", "ValueError", "(", "'Must give gpu_id'", ")", "\n", "\n", "", "questions_h5_path", "=", "kwargs", ".", "pop", "(", "'questions_h5'", ")", "\n", "data_json", "=", "kwargs", ".", "pop", "(", "'data_json'", ")", "\n", "input_type", "=", "kwargs", ".", "pop", "(", "'input_type'", ")", "\n", "\n", "split", "=", "kwargs", ".", "pop", "(", "'split'", ")", "\n", "vocab", "=", "kwargs", ".", "pop", "(", "'vocab'", ")", "\n", "\n", "gpu_id", "=", "kwargs", ".", "pop", "(", "'gpu_id'", ")", "\n", "\n", "if", "'max_threads_per_gpu'", "in", "kwargs", ":", "\n", "            ", "max_threads_per_gpu", "=", "kwargs", ".", "pop", "(", "'max_threads_per_gpu'", ")", "\n", "", "else", ":", "\n", "            ", "max_threads_per_gpu", "=", "10", "\n", "\n", "", "if", "'to_cache'", "in", "kwargs", ":", "\n", "            ", "to_cache", "=", "kwargs", ".", "pop", "(", "'to_cache'", ")", "\n", "", "else", ":", "\n", "            ", "to_cache", "=", "False", "\n", "\n", "", "if", "'target_obj_conn_map_dir'", "in", "kwargs", ":", "\n", "            ", "target_obj_conn_map_dir", "=", "kwargs", ".", "pop", "(", "'target_obj_conn_map_dir'", ")", "\n", "", "else", ":", "\n", "            ", "target_obj_conn_map_dir", "=", "False", "\n", "\n", "", "if", "'map_resolution'", "in", "kwargs", ":", "\n", "            ", "map_resolution", "=", "kwargs", ".", "pop", "(", "'map_resolution'", ")", "\n", "", "else", ":", "\n", "            ", "map_resolution", "=", "1000", "\n", "\n", "", "if", "'image'", "in", "input_type", "or", "'cnn'", "in", "input_type", ":", "\n", "            ", "kwargs", "[", "'collate_fn'", "]", "=", "eqaCollateCnn", "\n", "", "elif", "'lstm'", "in", "input_type", ":", "\n", "            ", "kwargs", "[", "'collate_fn'", "]", "=", "eqaCollateSeq2seq", "\n", "\n", "", "if", "'overfit'", "in", "kwargs", ":", "\n", "            ", "overfit", "=", "kwargs", ".", "pop", "(", "'overfit'", ")", "\n", "", "else", ":", "\n", "            ", "overfit", "=", "False", "\n", "\n", "", "if", "'max_controller_actions'", "in", "kwargs", ":", "\n", "            ", "max_controller_actions", "=", "kwargs", ".", "pop", "(", "'max_controller_actions'", ")", "\n", "", "else", ":", "\n", "            ", "max_controller_actions", "=", "5", "\n", "\n", "", "if", "'max_actions'", "in", "kwargs", ":", "\n", "            ", "max_actions", "=", "kwargs", ".", "pop", "(", "'max_actions'", ")", "\n", "", "else", ":", "\n", "            ", "max_actions", "=", "None", "\n", "\n", "", "print", "(", "'Reading questions from '", ",", "questions_h5_path", ")", "\n", "with", "h5py", ".", "File", "(", "questions_h5_path", ",", "'r'", ")", "as", "questions_h5", ":", "\n", "            ", "self", ".", "dataset", "=", "EqaDataset", "(", "\n", "questions_h5", ",", "\n", "vocab", ",", "\n", "num_frames", "=", "kwargs", ".", "pop", "(", "'num_frames'", ")", ",", "\n", "data_json", "=", "data_json", ",", "\n", "split", "=", "split", ",", "\n", "gpu_id", "=", "gpu_id", ",", "\n", "input_type", "=", "input_type", ",", "\n", "max_threads_per_gpu", "=", "max_threads_per_gpu", ",", "\n", "to_cache", "=", "to_cache", ",", "\n", "target_obj_conn_map_dir", "=", "target_obj_conn_map_dir", ",", "\n", "map_resolution", "=", "map_resolution", ",", "\n", "overfit", "=", "overfit", ",", "\n", "max_controller_actions", "=", "max_controller_actions", ",", "\n", "max_actions", "=", "max_actions", ")", "\n", "\n", "", "super", "(", "EqaDataLoader", ",", "self", ")", ".", "__init__", "(", "self", ".", "dataset", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataLoader.close": [[889, 891], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataLoader.__enter__": [[892, 894], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataLoader.__exit__": [[895, 897], ["data.EqaDataLoader.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataLoader.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab": [[28, 38], ["open", "json.load", "data.invert_dict", "data.invert_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.invert_dict", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.invert_dict"], ["def", "load_vocab", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "vocab", "=", "json", ".", "load", "(", "f", ")", "\n", "vocab", "[", "'questionIdxToToken'", "]", "=", "invert_dict", "(", "vocab", "[", "'questionTokenToIdx'", "]", ")", "\n", "vocab", "[", "'answerIdxToToken'", "]", "=", "invert_dict", "(", "vocab", "[", "'answerTokenToIdx'", "]", ")", "\n", "\n", "", "assert", "vocab", "[", "'questionTokenToIdx'", "]", "[", "'<NULL>'", "]", "==", "0", "\n", "assert", "vocab", "[", "'questionTokenToIdx'", "]", "[", "'<START>'", "]", "==", "1", "\n", "assert", "vocab", "[", "'questionTokenToIdx'", "]", "[", "'<END>'", "]", "==", "2", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.invert_dict": [[40, 42], ["d.items"], "function", ["None"], ["", "def", "invert_dict", "(", "d", ")", ":", "\n", "    ", "return", "{", "v", ":", "k", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.flat_to_hierarchical_actions": [[53, 88], ["range", "len", "len", "planner_actions.append", "pq_idx.append", "ph_idx.append", "cq_idx.append", "controller_actions.append", "controller_actions.append"], "function", ["None"], ["def", "flat_to_hierarchical_actions", "(", "actions", ",", "controller_action_lim", ")", ":", "\n", "    ", "assert", "len", "(", "actions", ")", "!=", "0", "\n", "\n", "controller_action_ctr", "=", "0", "\n", "\n", "planner_actions", ",", "controller_actions", "=", "[", "1", "]", ",", "[", "]", "\n", "prev_action", "=", "1", "\n", "\n", "pq_idx", ",", "cq_idx", ",", "ph_idx", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "ph_trck", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "actions", ")", ")", ":", "\n", "\n", "        ", "if", "actions", "[", "i", "]", "!=", "prev_action", ":", "\n", "            ", "planner_actions", ".", "append", "(", "actions", "[", "i", "]", ")", "\n", "pq_idx", ".", "append", "(", "i", "-", "1", ")", "\n", "\n", "", "if", "i", ">", "1", ":", "\n", "            ", "ph_idx", ".", "append", "(", "ph_trck", ")", "\n", "if", "actions", "[", "i", "]", "==", "prev_action", ":", "\n", "                ", "controller_actions", ".", "append", "(", "1", ")", "\n", "controller_action_ctr", "+=", "1", "\n", "", "else", ":", "\n", "                ", "controller_actions", ".", "append", "(", "0", ")", "\n", "controller_action_ctr", "=", "0", "\n", "ph_trck", "+=", "1", "\n", "", "cq_idx", ".", "append", "(", "i", "-", "1", ")", "\n", "\n", "\n", "", "prev_action", "=", "actions", "[", "i", "]", "\n", "\n", "if", "controller_action_ctr", "==", "controller_action_lim", "-", "1", ":", "\n", "            ", "prev_action", "=", "False", "\n", "\n", "", "", "return", "planner_actions", ",", "controller_actions", ",", "pq_idx", ",", "cq_idx", ",", "ph_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data._dataset_to_tensor": [[90, 99], ["numpy.asarray", "torch.FloatTensor", "torch.LongTensor"], "function", ["None"], ["", "def", "_dataset_to_tensor", "(", "dset", ",", "mask", "=", "None", ",", "dtype", "=", "np", ".", "int64", ")", ":", "\n", "    ", "arr", "=", "np", ".", "asarray", "(", "dset", ",", "dtype", "=", "dtype", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "arr", "=", "arr", "[", "mask", "]", "\n", "", "if", "dtype", "==", "np", ".", "float32", ":", "\n", "        ", "tensor", "=", "torch", ".", "FloatTensor", "(", "arr", ")", "\n", "", "else", ":", "\n", "        ", "tensor", "=", "torch", ".", "LongTensor", "(", "arr", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.eqaCollateCnn": [[101, 113], ["list", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "zip"], "function", ["None"], ["", "def", "eqaCollateCnn", "(", "batch", ")", ":", "\n", "    ", "transposed", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "idx_batch", "=", "default_collate", "(", "transposed", "[", "0", "]", ")", "\n", "question_batch", "=", "default_collate", "(", "transposed", "[", "1", "]", ")", "\n", "answer_batch", "=", "default_collate", "(", "transposed", "[", "2", "]", ")", "\n", "images_batch", "=", "default_collate", "(", "transposed", "[", "3", "]", ")", "\n", "actions_in_batch", "=", "default_collate", "(", "transposed", "[", "4", "]", ")", "\n", "actions_out_batch", "=", "default_collate", "(", "transposed", "[", "5", "]", ")", "\n", "action_lengths_batch", "=", "default_collate", "(", "transposed", "[", "6", "]", ")", "\n", "return", "[", "\n", "idx_batch", ",", "question_batch", ",", "answer_batch", ",", "images_batch", ",", "\n", "actions_in_batch", ",", "actions_out_batch", ",", "action_lengths_batch", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.eqaCollateSeq2seq": [[116, 130], ["list", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "zip"], "function", ["None"], ["", "def", "eqaCollateSeq2seq", "(", "batch", ")", ":", "\n", "    ", "transposed", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "idx_batch", "=", "default_collate", "(", "transposed", "[", "0", "]", ")", "\n", "questions_batch", "=", "default_collate", "(", "transposed", "[", "1", "]", ")", "\n", "answers_batch", "=", "default_collate", "(", "transposed", "[", "2", "]", ")", "\n", "images_batch", "=", "default_collate", "(", "transposed", "[", "3", "]", ")", "\n", "actions_in_batch", "=", "default_collate", "(", "transposed", "[", "4", "]", ")", "\n", "actions_out_batch", "=", "default_collate", "(", "transposed", "[", "5", "]", ")", "\n", "action_lengths_batch", "=", "default_collate", "(", "transposed", "[", "6", "]", ")", "\n", "mask_batch", "=", "default_collate", "(", "transposed", "[", "7", "]", ")", "\n", "\n", "return", "[", "\n", "idx_batch", ",", "questions_batch", ",", "answers_batch", ",", "images_batch", ",", "\n", "actions_in_batch", ",", "actions_out_batch", ",", "action_lengths_batch", ",", "mask_batch", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_eqa.eval": [[29, 402], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "models.VqaLstmCnnAttentionModel", "data.EqaDataLoader", "print", "os.path.join", "os.path.join", "args.gpus.index", "models.NavPlannerControllerModel", "exit", "data.load_vocab", "getattr", "int", "time.time", "models.NavPlannerControllerModel.load_state_dict", "models.NavPlannerControllerModel.eval", "models.VqaLstmCnnAttentionModel.load_state_dict", "models.VqaLstmCnnAttentionModel.eval", "models.VqaLstmCnnAttentionModel.cuda", "metrics.NavMetric", "metrics.VqaMetric", "print", "data.EqaDataLoader.dataset._load_envs", "data.load_vocab", "len", "shared_nav_model.state_dict", "shared_ans_model.state_dict", "str", "str", "tqdm.tqdm", "print", "print", "data.EqaDataLoader.dataset._load_envs", "metrics.VqaMetric.dump_log", "metrics.NavMetric.dump_log", "models.get_state", "dict", "print", "torch.save", "torch.save", "torch.save", "len", "models.NavPlannerControllerModel.load_state_dict", "models.NavPlannerControllerModel.eval", "models.NavPlannerControllerModel.cuda", "metrics.NavMetric.update", "metrics.VqaMetric.update", "print", "print", "len", "len", "len", "shared_nav_model.state_dict", "torch.autograd.Variable", "models.NavPlannerControllerModel.planner_nav_rnn.init_hidden", "data.EqaDataLoader.dataset.get_hierarchical_features_till_spawn", "torch.autograd.Variable", "torch.autograd.Variable", "range", "h3d.env.reset", "h3d.get_dist_to_target", "data.EqaDataLoader.dataset.get_frames", "torch.autograd.Variable().view", "models.VqaLstmCnnAttentionModel.", "metrics.VqaMetric.compute_ranks", "print", "print", "print", "numpy.array().min", "metrics.NavMetric.get_stat_string", "metrics.VqaMetric.get_stat_string", "invalids.append", "question.cuda", "actions[].numpy", "planner_actions_in.cuda", "planner_img_feats.cuda", "planner_actions_in.size", "models.NavPlannerControllerModel.planner_step", "torch.autograd.Variable", "torch.autograd.Variable", "models.NavPlannerControllerModel.controller_step", "torch.softmax", "int", "int", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.softmax", "int", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "invalids.append", "h3d.step", "data.EqaDataLoader.dataset.cnn().view", "range", "len", "scores.data.cpu", "inside_room.append", "any", "metrics_list.append", "metrics_list.append", "metrics_list.append", "metrics_list.append", "planner_img_feats_var[].view", "planner_actions_in_var[].view", "controller_img_feat.cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "pred_actions.append", "h3d.step", "data.EqaDataLoader.dataset.cnn().view", "dists_to_target.append", "pos_queue.append", "torch.autograd.Variable", "models.NavPlannerControllerModel.controller_step", "torch.softmax", "int", "controller_actions.append", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.autograd.Variable", "numpy.array", "h3d.is_inside_room", "[].data.cpu().numpy", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "[].data.cpu().numpy", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "data.EqaDataLoader.dataset.cnn", "models.NavPlannerControllerModel.planner_step", "torch.softmax", "int", "planner_actions.append", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "h3d.get_dist_to_target", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "scores.max", "str", "str", "str", "str", "str", "str", "str", "str", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "data.EqaDataLoader.dataset.cnn", "[].data.cpu().numpy", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "str", "str", "str", "str", "str", "str", "int", "[].data.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "[].data.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "img.transpose", "img.view().cuda", "[].data.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "metrics.NavMetric.metric_names.index", "metrics.VqaMetric.metric_names.index", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "img.transpose", "img.view().cuda", "[].data.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "img.view", "[].data.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "img.view", "F.softmax.max", "F.softmax.max", "F.softmax.max", "F.softmax.max"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.eval", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.eval", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.get_state", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.eval", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.init_hidden", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_hierarchical_features_till_spawn", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_dist_to_target", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_frames", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.VqaMetric.compute_ranks", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.planner_step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.controller_step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.controller_step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.is_inside_room", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.planner_step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_dist_to_target"], ["def", "eval", "(", "rank", ",", "args", ",", "shared_nav_model", ",", "shared_ans_model", ")", ":", "\n", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpus", ".", "index", "(", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ")", ")", "\n", "\n", "if", "args", ".", "model_type", "==", "'pacman'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "'question_vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "}", "\n", "nav_model", "=", "NavPlannerControllerModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "exit", "(", ")", "\n", "\n", "", "model_kwargs", "=", "{", "'vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "}", "\n", "ans_model", "=", "VqaLstmCnnAttentionModel", "(", "**", "model_kwargs", ")", "\n", "\n", "eval_loader_kwargs", "=", "{", "\n", "'questions_h5'", ":", "getattr", "(", "args", ",", "args", ".", "eval_split", "+", "'_h5'", ")", ",", "\n", "'data_json'", ":", "args", ".", "data_json", ",", "\n", "'vocab'", ":", "args", ".", "vocab_json", ",", "\n", "'target_obj_conn_map_dir'", ":", "args", ".", "target_obj_conn_map_dir", ",", "\n", "'map_resolution'", ":", "args", ".", "map_resolution", ",", "\n", "'batch_size'", ":", "1", ",", "\n", "'input_type'", ":", "args", ".", "model_type", ",", "\n", "'num_frames'", ":", "5", ",", "\n", "'split'", ":", "args", ".", "eval_split", ",", "\n", "'max_threads_per_gpu'", ":", "args", ".", "max_threads_per_gpu", ",", "\n", "'gpu_id'", ":", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ",", "\n", "'to_cache'", ":", "False", ",", "\n", "'max_controller_actions'", ":", "args", ".", "max_controller_actions", ",", "\n", "'max_actions'", ":", "args", ".", "max_actions", "\n", "}", "\n", "\n", "eval_loader", "=", "EqaDataLoader", "(", "**", "eval_loader_kwargs", ")", "\n", "print", "(", "'eval_loader has %d samples'", "%", "len", "(", "eval_loader", ".", "dataset", ")", ")", "\n", "\n", "args", ".", "output_nav_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\n", "'nav_eval_'", "+", "str", "(", "rank", ")", "+", "'.json'", ")", "\n", "args", ".", "output_ans_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\n", "'ans_eval_'", "+", "str", "(", "rank", ")", "+", "'.json'", ")", "\n", "\n", "t", ",", "epoch", ",", "best_eval_acc", "=", "0", ",", "0", ",", "0.0", "\n", "\n", "while", "epoch", "<", "int", "(", "args", ".", "max_epochs", ")", ":", "\n", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "invalids", "=", "[", "]", "\n", "\n", "nav_model", ".", "load_state_dict", "(", "shared_nav_model", ".", "state_dict", "(", ")", ")", "\n", "nav_model", ".", "eval", "(", ")", "\n", "\n", "ans_model", ".", "load_state_dict", "(", "shared_ans_model", ".", "state_dict", "(", ")", ")", "\n", "ans_model", ".", "eval", "(", ")", "\n", "ans_model", ".", "cuda", "(", ")", "\n", "\n", "# that's a lot of numbers", "\n", "nav_metrics", "=", "NavMetric", "(", "\n", "info", "=", "{", "'split'", ":", "args", ".", "eval_split", ",", "\n", "'thread'", ":", "rank", "}", ",", "\n", "metric_names", "=", "[", "\n", "'d_0_10'", ",", "'d_0_30'", ",", "'d_0_50'", ",", "'d_T_10'", ",", "'d_T_30'", ",", "'d_T_50'", ",", "\n", "'d_D_10'", ",", "'d_D_30'", ",", "'d_D_50'", ",", "'d_min_10'", ",", "'d_min_30'", ",", "\n", "'d_min_50'", ",", "'r_T_10'", ",", "'r_T_30'", ",", "'r_T_50'", ",", "'r_e_10'", ",", "'r_e_30'", ",", "\n", "'r_e_50'", ",", "'stop_10'", ",", "'stop_30'", ",", "'stop_50'", ",", "'ep_len_10'", ",", "\n", "'ep_len_30'", ",", "'ep_len_50'", "\n", "]", ",", "\n", "log_json", "=", "args", ".", "output_nav_log_path", ")", "\n", "\n", "vqa_metrics", "=", "VqaMetric", "(", "\n", "info", "=", "{", "'split'", ":", "args", ".", "eval_split", ",", "\n", "'thread'", ":", "rank", "}", ",", "\n", "metric_names", "=", "[", "\n", "'accuracy_10'", ",", "'accuracy_30'", ",", "'accuracy_50'", ",", "'mean_rank_10'", ",", "\n", "'mean_rank_30'", ",", "'mean_rank_50'", ",", "'mean_reciprocal_rank_10'", ",", "\n", "'mean_reciprocal_rank_30'", ",", "'mean_reciprocal_rank_50'", "\n", "]", ",", "\n", "log_json", "=", "args", ".", "output_ans_log_path", ")", "\n", "\n", "if", "'pacman'", "in", "args", ".", "model_type", ":", "\n", "\n", "            ", "done", "=", "False", "\n", "\n", "while", "done", "==", "False", ":", "\n", "\n", "                ", "for", "batch", "in", "tqdm", "(", "eval_loader", ")", ":", "\n", "\n", "                    ", "nav_model", ".", "load_state_dict", "(", "shared_nav_model", ".", "state_dict", "(", ")", ")", "\n", "nav_model", ".", "eval", "(", ")", "\n", "nav_model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "question", ",", "answer", ",", "actions", ",", "action_length", "=", "batch", "\n", "metrics_slug", "=", "{", "}", "\n", "\n", "h3d", "=", "eval_loader", ".", "dataset", ".", "episode_house", "\n", "\n", "# evaluate at multiple initializations", "\n", "for", "i", "in", "[", "10", ",", "30", ",", "50", "]", ":", "\n", "\n", "                        ", "t", "+=", "1", "\n", "\n", "if", "i", ">", "action_length", "[", "0", "]", ":", "\n", "                            ", "invalids", ".", "append", "(", "[", "idx", "[", "0", "]", ",", "i", "]", ")", "\n", "continue", "\n", "\n", "", "question_var", "=", "Variable", "(", "question", ".", "cuda", "(", ")", ")", "\n", "\n", "controller_step", "=", "False", "\n", "planner_hidden", "=", "nav_model", ".", "planner_nav_rnn", ".", "init_hidden", "(", "\n", "1", ")", "\n", "\n", "# forward through planner till spawn", "\n", "(", "\n", "planner_actions_in", ",", "planner_img_feats", ",", "\n", "controller_step", ",", "controller_action_in", ",", "\n", "controller_img_feat", ",", "init_pos", ",", "\n", "controller_action_counter", "\n", ")", "=", "eval_loader", ".", "dataset", ".", "get_hierarchical_features_till_spawn", "(", "\n", "actions", "[", "0", ",", ":", "action_length", "[", "0", "]", "+", "1", "]", ".", "numpy", "(", ")", ",", "i", ",", "args", ".", "max_controller_actions", "\n", ")", "\n", "\n", "planner_actions_in_var", "=", "Variable", "(", "\n", "planner_actions_in", ".", "cuda", "(", ")", ")", "\n", "planner_img_feats_var", "=", "Variable", "(", "\n", "planner_img_feats", ".", "cuda", "(", ")", ")", "\n", "\n", "for", "step", "in", "range", "(", "planner_actions_in", ".", "size", "(", "0", ")", ")", ":", "\n", "\n", "                            ", "planner_scores", ",", "planner_hidden", "=", "nav_model", ".", "planner_step", "(", "\n", "question_var", ",", "planner_img_feats_var", "[", "step", "]", ".", "view", "(", "\n", "1", ",", "1", ",", "\n", "3200", ")", ",", "planner_actions_in_var", "[", "step", "]", ".", "view", "(", "\n", "1", ",", "1", ")", ",", "planner_hidden", ")", "\n", "\n", "", "if", "controller_step", "==", "True", ":", "\n", "\n", "                            ", "controller_img_feat_var", "=", "Variable", "(", "\n", "controller_img_feat", ".", "cuda", "(", ")", ")", "\n", "controller_action_in_var", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "1", ",", "1", ")", ".", "fill_", "(", "\n", "int", "(", "controller_action_in", ")", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "controller_scores", "=", "nav_model", ".", "controller_step", "(", "\n", "controller_img_feat_var", ".", "view", "(", "1", ",", "1", ",", "3200", ")", ",", "\n", "controller_action_in_var", ".", "view", "(", "1", ",", "1", ")", ",", "\n", "planner_hidden", "[", "0", "]", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "controller_scores", ",", "dim", "=", "1", ")", "\n", "controller_action", "=", "int", "(", "\n", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "if", "controller_action", "==", "1", ":", "\n", "                                ", "controller_step", "=", "True", "\n", "", "else", ":", "\n", "                                ", "controller_step", "=", "False", "\n", "\n", "", "action", "=", "int", "(", "controller_action_in", ")", "\n", "action_in", "=", "torch", ".", "LongTensor", "(", "\n", "1", ",", "1", ")", ".", "fill_", "(", "action", "+", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                            ", "prob", "=", "F", ".", "softmax", "(", "planner_scores", ",", "dim", "=", "1", ")", "\n", "action", "=", "int", "(", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "action_in", "=", "torch", ".", "LongTensor", "(", "\n", "1", ",", "1", ")", ".", "fill_", "(", "action", "+", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "", "h3d", ".", "env", ".", "reset", "(", "\n", "x", "=", "init_pos", "[", "0", "]", ",", "y", "=", "init_pos", "[", "2", "]", ",", "yaw", "=", "init_pos", "[", "3", "]", ")", "\n", "\n", "init_dist_to_target", "=", "h3d", ".", "get_dist_to_target", "(", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ")", "\n", "if", "init_dist_to_target", "<", "0", ":", "# unreachable", "\n", "                            ", "invalids", ".", "append", "(", "[", "idx", "[", "0", "]", ",", "i", "]", ")", "\n", "continue", "\n", "\n", "", "episode_length", "=", "0", "\n", "episode_done", "=", "True", "\n", "controller_action_counter", "=", "0", "\n", "\n", "dists_to_target", ",", "pos_queue", ",", "pred_actions", "=", "[", "\n", "init_dist_to_target", "\n", "]", ",", "[", "init_pos", "]", ",", "[", "]", "\n", "planner_actions", ",", "controller_actions", "=", "[", "]", ",", "[", "]", "\n", "\n", "if", "action", "!=", "3", ":", "\n", "\n", "# take the first step", "\n", "                            ", "img", ",", "_", ",", "_", "=", "h3d", ".", "step", "(", "action", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "\n", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "/", "255.0", "\n", "img_feat_var", "=", "eval_loader", ".", "dataset", ".", "cnn", "(", "\n", "Variable", "(", "img", ".", "view", "(", "1", ",", "3", ",", "224", ",", "\n", "224", ")", ".", "cuda", "(", ")", ")", ")", ".", "view", "(", "\n", "1", ",", "1", ",", "3200", ")", "\n", "\n", "for", "step", "in", "range", "(", "args", ".", "max_episode_length", ")", ":", "\n", "\n", "                                ", "episode_length", "+=", "1", "\n", "\n", "if", "controller_step", "==", "False", ":", "\n", "                                    ", "planner_scores", ",", "planner_hidden", "=", "nav_model", ".", "planner_step", "(", "\n", "question_var", ",", "img_feat_var", ",", "\n", "Variable", "(", "action_in", ")", ",", "planner_hidden", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "planner_scores", ",", "dim", "=", "1", ")", "\n", "action", "=", "int", "(", "\n", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "planner_actions", ".", "append", "(", "action", ")", "\n", "\n", "", "pred_actions", ".", "append", "(", "action", ")", "\n", "img", ",", "_", ",", "episode_done", "=", "h3d", ".", "step", "(", "action", ")", "\n", "\n", "episode_done", "=", "episode_done", "or", "episode_length", ">=", "args", ".", "max_episode_length", "\n", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "\n", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "/", "255.0", "\n", "img_feat_var", "=", "eval_loader", ".", "dataset", ".", "cnn", "(", "\n", "Variable", "(", "img", ".", "view", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", ".", "cuda", "(", ")", ")", ")", ".", "view", "(", "1", ",", "1", ",", "3200", ")", "\n", "\n", "dists_to_target", ".", "append", "(", "\n", "h3d", ".", "get_dist_to_target", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ")", ")", "\n", "pos_queue", ".", "append", "(", "[", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "y", ",", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", "\n", "]", ")", "\n", "\n", "if", "episode_done", "==", "True", ":", "\n", "                                    ", "break", "\n", "\n", "# query controller to continue or not", "\n", "", "controller_action_in", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "1", ",", "\n", "1", ")", ".", "fill_", "(", "action", ")", ".", "cuda", "(", ")", ")", "\n", "controller_scores", "=", "nav_model", ".", "controller_step", "(", "\n", "img_feat_var", ",", "controller_action_in", ",", "\n", "planner_hidden", "[", "0", "]", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "controller_scores", ",", "dim", "=", "1", ")", "\n", "controller_action", "=", "int", "(", "\n", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "if", "controller_action", "==", "1", "and", "controller_action_counter", "<", "4", ":", "\n", "                                    ", "controller_action_counter", "+=", "1", "\n", "controller_step", "=", "True", "\n", "", "else", ":", "\n", "                                    ", "controller_action_counter", "=", "0", "\n", "controller_step", "=", "False", "\n", "controller_action", "=", "0", "\n", "\n", "", "controller_actions", ".", "append", "(", "controller_action", ")", "\n", "\n", "action_in", "=", "torch", ".", "LongTensor", "(", "\n", "1", ",", "1", ")", ".", "fill_", "(", "action", "+", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "# run answerer here", "\n", "", "", "if", "len", "(", "pos_queue", ")", "<", "5", ":", "\n", "                            ", "pos_queue", "=", "eval_loader", ".", "dataset", ".", "episode_pos_queue", "[", "len", "(", "\n", "pos_queue", ")", "-", "5", ":", "]", "+", "pos_queue", "\n", "", "images", "=", "eval_loader", ".", "dataset", ".", "get_frames", "(", "\n", "h3d", ",", "pos_queue", "[", "-", "5", ":", "]", ",", "preprocess", "=", "True", ")", "\n", "images_var", "=", "Variable", "(", "\n", "torch", ".", "from_numpy", "(", "images", ")", ".", "cuda", "(", ")", ")", ".", "view", "(", "\n", "1", ",", "5", ",", "3", ",", "224", ",", "224", ")", "\n", "scores", ",", "att_probs", "=", "ans_model", "(", "images_var", ",", "question_var", ")", "\n", "ans_acc", ",", "ans_rank", "=", "vqa_metrics", ".", "compute_ranks", "(", "\n", "scores", ".", "data", ".", "cpu", "(", ")", ",", "answer", ")", "\n", "\n", "pred_answer", "=", "scores", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", "[", "0", "]", "\n", "\n", "print", "(", "'[Q_GT]'", ",", "' '", ".", "join", "(", "[", "\n", "eval_loader", ".", "dataset", ".", "vocab", "[", "'questionIdxToToken'", "]", "[", "x", "]", "\n", "for", "x", "in", "question", "[", "0", "]", "if", "x", "!=", "0", "\n", "]", ")", ")", "\n", "print", "(", "'[A_GT]'", ",", "eval_loader", ".", "dataset", ".", "vocab", "[", "\n", "'answerIdxToToken'", "]", "[", "answer", "[", "0", "]", "]", ")", "\n", "print", "(", "'[A_PRED]'", ",", "eval_loader", ".", "dataset", ".", "vocab", "[", "\n", "'answerIdxToToken'", "]", "[", "pred_answer", "]", ")", "\n", "\n", "# compute stats", "\n", "metrics_slug", "[", "'accuracy_'", "+", "str", "(", "i", ")", "]", "=", "ans_acc", "[", "0", "]", "\n", "metrics_slug", "[", "'mean_rank_'", "+", "str", "(", "i", ")", "]", "=", "ans_rank", "[", "0", "]", "\n", "metrics_slug", "[", "'mean_reciprocal_rank_'", "\n", "+", "str", "(", "i", ")", "]", "=", "1.0", "/", "ans_rank", "[", "0", "]", "\n", "\n", "metrics_slug", "[", "'d_0_'", "+", "str", "(", "i", ")", "]", "=", "dists_to_target", "[", "0", "]", "\n", "metrics_slug", "[", "'d_T_'", "+", "str", "(", "i", ")", "]", "=", "dists_to_target", "[", "-", "1", "]", "\n", "metrics_slug", "[", "'d_D_'", "+", "str", "(", "\n", "i", ")", "]", "=", "dists_to_target", "[", "0", "]", "-", "dists_to_target", "[", "-", "1", "]", "\n", "metrics_slug", "[", "'d_min_'", "+", "str", "(", "i", ")", "]", "=", "np", ".", "array", "(", "\n", "dists_to_target", ")", ".", "min", "(", ")", "\n", "metrics_slug", "[", "'ep_len_'", "+", "str", "(", "i", ")", "]", "=", "episode_length", "\n", "if", "action", "==", "3", ":", "\n", "                            ", "metrics_slug", "[", "'stop_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'stop_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "", "inside_room", "=", "[", "]", "\n", "for", "p", "in", "pos_queue", ":", "\n", "                            ", "inside_room", ".", "append", "(", "\n", "h3d", ".", "is_inside_room", "(", "\n", "p", ",", "eval_loader", ".", "dataset", ".", "target_room", ")", ")", "\n", "", "if", "inside_room", "[", "-", "1", "]", "==", "True", ":", "\n", "                            ", "metrics_slug", "[", "'r_T_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'r_T_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "", "if", "any", "(", "[", "x", "==", "True", "for", "x", "in", "inside_room", "]", ")", "==", "True", ":", "\n", "                            ", "metrics_slug", "[", "'r_e_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'r_e_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "\n", "# navigation metrics", "\n", "", "", "metrics_list", "=", "[", "]", "\n", "for", "i", "in", "nav_metrics", ".", "metric_names", ":", "\n", "                        ", "if", "i", "not", "in", "metrics_slug", ":", "\n", "                            ", "metrics_list", ".", "append", "(", "nav_metrics", ".", "metrics", "[", "\n", "nav_metrics", ".", "metric_names", ".", "index", "(", "i", ")", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "metrics_list", ".", "append", "(", "metrics_slug", "[", "i", "]", ")", "\n", "\n", "", "", "nav_metrics", ".", "update", "(", "metrics_list", ")", "\n", "\n", "# vqa metrics", "\n", "metrics_list", "=", "[", "]", "\n", "for", "i", "in", "vqa_metrics", ".", "metric_names", ":", "\n", "                        ", "if", "i", "not", "in", "metrics_slug", ":", "\n", "                            ", "metrics_list", ".", "append", "(", "vqa_metrics", ".", "metrics", "[", "\n", "vqa_metrics", ".", "metric_names", ".", "index", "(", "i", ")", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "metrics_list", ".", "append", "(", "metrics_slug", "[", "i", "]", ")", "\n", "\n", "", "", "vqa_metrics", ".", "update", "(", "metrics_list", ")", "\n", "\n", "", "try", ":", "\n", "                    ", "print", "(", "nav_metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", ")", "\n", "print", "(", "vqa_metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "\n", "", "print", "(", "'epoch'", ",", "epoch", ")", "\n", "print", "(", "'invalids'", ",", "len", "(", "invalids", ")", ")", "\n", "\n", "eval_loader", ".", "dataset", ".", "_load_envs", "(", ")", "\n", "if", "len", "(", "eval_loader", ".", "dataset", ".", "pruned_env_set", ")", "==", "0", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "epoch", "+=", "1", "\n", "\n", "# checkpoint if best val accuracy", "\n", "if", "vqa_metrics", ".", "metrics", "[", "2", "]", "[", "0", "]", ">", "best_eval_acc", ":", "# ans_acc_50", "\n", "            ", "best_eval_acc", "=", "vqa_metrics", ".", "metrics", "[", "2", "]", "[", "0", "]", "\n", "if", "epoch", "%", "args", ".", "eval_every", "==", "0", "and", "args", ".", "log", "==", "True", ":", "\n", "                ", "vqa_metrics", ".", "dump_log", "(", ")", "\n", "nav_metrics", ".", "dump_log", "(", ")", "\n", "\n", "model_state", "=", "get_state", "(", "nav_model", ")", "\n", "\n", "aad", "=", "dict", "(", "args", ".", "__dict__", ")", "\n", "ad", "=", "{", "}", "\n", "for", "i", "in", "aad", ":", "\n", "                    ", "if", "i", "[", "0", "]", "!=", "'_'", ":", "\n", "                        ", "ad", "[", "i", "]", "=", "aad", "[", "i", "]", "\n", "\n", "", "", "checkpoint", "=", "{", "'args'", ":", "ad", ",", "'state'", ":", "model_state", ",", "'epoch'", ":", "epoch", "}", "\n", "\n", "checkpoint_path", "=", "'%s/epoch_%d_ans_50_%.04f.pt'", "%", "(", "\n", "args", ".", "checkpoint_dir", ",", "epoch", ",", "best_eval_acc", ")", "\n", "print", "(", "'Saving checkpoint to %s'", "%", "checkpoint_path", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "\n", "", "", "print", "(", "'[best_eval_ans_acc_50:%.04f]'", "%", "best_eval_acc", ")", "\n", "\n", "eval_loader", ".", "dataset", ".", "_load_envs", "(", "start_idx", "=", "0", ",", "in_order", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_eqa.train": [[404, 762], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "models.VqaLstmCnnAttentionModel", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "os.path.join", "models.NavPlannerControllerModel.load_state_dict", "models.NavPlannerControllerModel.cuda", "models.VqaLstmCnnAttentionModel.load_state_dict", "models.VqaLstmCnnAttentionModel.eval", "models.VqaLstmCnnAttentionModel.cuda", "metrics.NavMetric", "metrics.VqaMetric", "data.EqaDataLoader", "print", "metrics.NavMetric.update", "args.gpus.index", "models.NavPlannerControllerModel", "exit", "data.load_vocab", "filter", "shared_nav_model.state_dict", "shared_ans_model.state_dict", "int", "data.load_vocab", "shared_nav_model.parameters", "len", "models.MaskedNLLCriterion().cuda", "models.MaskedNLLCriterion().cuda", "data.EqaDataLoader.dataset._check_if_all_envs_loaded", "str", "str", "len", "models.MaskedNLLCriterion", "models.MaskedNLLCriterion", "models.NavPlannerControllerModel.load_state_dict", "models.NavPlannerControllerModel.eval", "models.NavPlannerControllerModel.cuda", "torch.autograd.Variable", "models.NavPlannerControllerModel.planner_nav_rnn.init_hidden", "data.EqaDataLoader.dataset.get_hierarchical_features_till_spawn", "torch.autograd.Variable", "torch.autograd.Variable", "range", "h3d.env.reset", "h3d.get_dist_to_target", "rewards.append", "torch.zeros", "torch.zeros", "torch.zeros", "reversed", "max", "max", "torch.optim.SGD.zero_grad", "data.EqaDataLoader.dataset._load_envs", "len", "shared_nav_model.state_dict", "question.cuda", "actions[].numpy", "max", "planner_actions_in.cuda", "planner_img_feats.cuda", "planner_actions_in.size", "models.NavPlannerControllerModel.planner_step", "torch.autograd.Variable", "torch.autograd.Variable", "models.NavPlannerControllerModel.controller_step", "torch.softmax", "int", "int", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.softmax", "int", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "h3d.step", "data.EqaDataLoader.dataset.cnn().view", "range", "data.EqaDataLoader.dataset.get_frames", "torch.autograd.Variable().view", "models.VqaLstmCnnAttentionModel.", "metrics.VqaMetric.compute_ranks", "metrics.VqaMetric.update", "range", "len", "len", "p_losses.append", "c_losses.append", "reward_list.append", "episode_length_list.append", "models.ensure_shared_grads", "torch.optim.SGD.step", "len", "metrics.NavMetric.update", "print", "len", "int", "planner_img_feats_var[].view", "planner_actions_in_var[].view", "controller_img_feat.cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "h3d.step", "rewards.append", "data.EqaDataLoader.dataset.cnn().view", "dists_to_target.append", "pos_queue.append", "torch.autograd.Variable", "models.NavPlannerControllerModel.controller_step", "torch.softmax", "torch.log_softmax", "controller_log_prob.gather.gather", "controller_log_probs.append", "int", "controller_actions.append", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "len", "scores.data.cpu", "len", "len", "isinstance", "isinstance", "numpy.sum", "models.NavPlannerControllerModel.cpu", "metrics.NavMetric.get_stat_string", "metrics.NavMetric.dump_log", "min", "data.EqaDataLoader.dataset._load_envs", "[].data.cpu().numpy", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "[].data.cpu().numpy", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "data.EqaDataLoader.dataset.cnn", "models.NavPlannerControllerModel.planner_step", "torch.softmax", "torch.log_softmax", "planner_log_prob.gather.gather", "planner_log_probs.append", "int", "planner_actions.append", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "h3d.get_dist_to_target", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "F.softmax.multinomial", "int.fill_", "torch.autograd.Variable", "controller_log_prob.gather.cpu", "torch.autograd.Variable", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "F.softmax.multinomial", "torch.autograd.Variable", "planner_log_prob.gather.cpu", "data.EqaDataLoader.dataset.cnn", "int", "int.cpu().numpy", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.autograd.Variable", "len", "int", "[].data.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "[].data.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "img.transpose", "img.view().cuda", "int.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "img.transpose", "img.view().cuda", "int.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "img.view", "int.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "img.view", "F.softmax.max", "F.softmax.max"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.eval", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.filter", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._check_if_all_envs_loaded", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.eval", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.init_hidden", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_hierarchical_features_till_spawn", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_dist_to_target", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.planner_step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.controller_step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_frames", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.VqaMetric.compute_ranks", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.ensure_shared_grads", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.controller_step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.planner_step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_dist_to_target"], ["", "", "def", "train", "(", "rank", ",", "args", ",", "shared_nav_model", ",", "shared_ans_model", ")", ":", "\n", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpus", ".", "index", "(", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ")", ")", "\n", "\n", "if", "args", ".", "model_type", "==", "'pacman'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "'question_vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "}", "\n", "nav_model", "=", "NavPlannerControllerModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "exit", "(", ")", "\n", "\n", "", "model_kwargs", "=", "{", "'vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "}", "\n", "ans_model", "=", "VqaLstmCnnAttentionModel", "(", "**", "model_kwargs", ")", "\n", "\n", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "shared_nav_model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ")", "\n", "\n", "train_loader_kwargs", "=", "{", "\n", "'questions_h5'", ":", "args", ".", "train_h5", ",", "\n", "'data_json'", ":", "args", ".", "data_json", ",", "\n", "'vocab'", ":", "args", ".", "vocab_json", ",", "\n", "'target_obj_conn_map_dir'", ":", "args", ".", "target_obj_conn_map_dir", ",", "\n", "'map_resolution'", ":", "args", ".", "map_resolution", ",", "\n", "'batch_size'", ":", "1", ",", "\n", "'input_type'", ":", "args", ".", "model_type", ",", "\n", "'num_frames'", ":", "5", ",", "\n", "'split'", ":", "'train'", ",", "\n", "'max_threads_per_gpu'", ":", "args", ".", "max_threads_per_gpu", ",", "\n", "'gpu_id'", ":", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ",", "\n", "'to_cache'", ":", "args", ".", "cache", ",", "\n", "'max_controller_actions'", ":", "args", ".", "max_controller_actions", ",", "\n", "'max_actions'", ":", "args", ".", "max_actions", "\n", "}", "\n", "\n", "args", ".", "output_nav_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\n", "'nav_train_'", "+", "str", "(", "rank", ")", "+", "'.json'", ")", "\n", "args", ".", "output_ans_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\n", "'ans_train_'", "+", "str", "(", "rank", ")", "+", "'.json'", ")", "\n", "\n", "nav_model", ".", "load_state_dict", "(", "shared_nav_model", ".", "state_dict", "(", ")", ")", "\n", "nav_model", ".", "cuda", "(", ")", "\n", "\n", "ans_model", ".", "load_state_dict", "(", "shared_ans_model", ".", "state_dict", "(", ")", ")", "\n", "ans_model", ".", "eval", "(", ")", "\n", "ans_model", ".", "cuda", "(", ")", "\n", "\n", "nav_metrics", "=", "NavMetric", "(", "\n", "info", "=", "{", "'split'", ":", "'train'", ",", "\n", "'thread'", ":", "rank", "}", ",", "\n", "metric_names", "=", "[", "\n", "'planner_loss'", ",", "'controller_loss'", ",", "'reward'", ",", "'episode_length'", "\n", "]", ",", "\n", "log_json", "=", "args", ".", "output_nav_log_path", ")", "\n", "\n", "vqa_metrics", "=", "VqaMetric", "(", "\n", "info", "=", "{", "'split'", ":", "'train'", ",", "\n", "'thread'", ":", "rank", "}", ",", "\n", "metric_names", "=", "[", "'accuracy'", ",", "'mean_rank'", ",", "'mean_reciprocal_rank'", "]", ",", "\n", "log_json", "=", "args", ".", "output_ans_log_path", ")", "\n", "\n", "train_loader", "=", "EqaDataLoader", "(", "**", "train_loader_kwargs", ")", "\n", "\n", "print", "(", "'train_loader has %d samples'", "%", "len", "(", "train_loader", ".", "dataset", ")", ")", "\n", "\n", "t", ",", "epoch", "=", "0", ",", "0", "\n", "p_losses", ",", "c_losses", ",", "reward_list", ",", "episode_length_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "nav_metrics", ".", "update", "(", "[", "10.0", ",", "10.0", ",", "0", ",", "100", "]", ")", "\n", "\n", "mult", "=", "0.1", "\n", "\n", "while", "epoch", "<", "int", "(", "args", ".", "max_epochs", ")", ":", "\n", "\n", "        ", "if", "'pacman'", "in", "args", ".", "model_type", ":", "\n", "\n", "            ", "planner_lossFn", "=", "MaskedNLLCriterion", "(", ")", ".", "cuda", "(", ")", "\n", "controller_lossFn", "=", "MaskedNLLCriterion", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "done", "=", "False", "\n", "all_envs_loaded", "=", "train_loader", ".", "dataset", ".", "_check_if_all_envs_loaded", "(", ")", "\n", "\n", "while", "done", "==", "False", ":", "\n", "\n", "                ", "for", "batch", "in", "train_loader", ":", "\n", "\n", "                    ", "nav_model", ".", "load_state_dict", "(", "shared_nav_model", ".", "state_dict", "(", ")", ")", "\n", "nav_model", ".", "eval", "(", ")", "\n", "nav_model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "question", ",", "answer", ",", "actions", ",", "action_length", "=", "batch", "\n", "metrics_slug", "=", "{", "}", "\n", "\n", "h3d", "=", "train_loader", ".", "dataset", ".", "episode_house", "\n", "\n", "# evaluate at multiple initializations", "\n", "# for i in [10, 30, 50]:", "\n", "\n", "t", "+=", "1", "\n", "\n", "question_var", "=", "Variable", "(", "question", ".", "cuda", "(", ")", ")", "\n", "\n", "controller_step", "=", "False", "\n", "planner_hidden", "=", "nav_model", ".", "planner_nav_rnn", ".", "init_hidden", "(", "1", ")", "\n", "\n", "# forward through planner till spawn", "\n", "(", "\n", "planner_actions_in", ",", "planner_img_feats", ",", "\n", "controller_step", ",", "controller_action_in", ",", "\n", "controller_img_feat", ",", "init_pos", ",", "\n", "controller_action_counter", "\n", ")", "=", "train_loader", ".", "dataset", ".", "get_hierarchical_features_till_spawn", "(", "\n", "actions", "[", "0", ",", ":", "action_length", "[", "0", "]", "+", "1", "]", ".", "numpy", "(", ")", ",", "max", "(", "3", ",", "int", "(", "mult", "*", "action_length", "[", "0", "]", ")", ")", ",", "args", ".", "max_controller_actions", "\n", ")", "\n", "\n", "planner_actions_in_var", "=", "Variable", "(", "\n", "planner_actions_in", ".", "cuda", "(", ")", ")", "\n", "planner_img_feats_var", "=", "Variable", "(", "planner_img_feats", ".", "cuda", "(", ")", ")", "\n", "\n", "for", "step", "in", "range", "(", "planner_actions_in", ".", "size", "(", "0", ")", ")", ":", "\n", "\n", "                        ", "planner_scores", ",", "planner_hidden", "=", "nav_model", ".", "planner_step", "(", "\n", "question_var", ",", "planner_img_feats_var", "[", "step", "]", ".", "view", "(", "\n", "1", ",", "1", ",", "3200", ")", ",", "planner_actions_in_var", "[", "step", "]", ".", "view", "(", "\n", "1", ",", "1", ")", ",", "planner_hidden", ")", "\n", "\n", "", "if", "controller_step", "==", "True", ":", "\n", "\n", "                        ", "controller_img_feat_var", "=", "Variable", "(", "\n", "controller_img_feat", ".", "cuda", "(", ")", ")", "\n", "controller_action_in_var", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "1", ",", "1", ")", ".", "fill_", "(", "\n", "int", "(", "controller_action_in", ")", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "controller_scores", "=", "nav_model", ".", "controller_step", "(", "\n", "controller_img_feat_var", ".", "view", "(", "1", ",", "1", ",", "3200", ")", ",", "\n", "controller_action_in_var", ".", "view", "(", "1", ",", "1", ")", ",", "\n", "planner_hidden", "[", "0", "]", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "controller_scores", ",", "dim", "=", "1", ")", "\n", "controller_action", "=", "int", "(", "\n", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "if", "controller_action", "==", "1", ":", "\n", "                            ", "controller_step", "=", "True", "\n", "", "else", ":", "\n", "                            ", "controller_step", "=", "False", "\n", "\n", "", "action", "=", "int", "(", "controller_action_in", ")", "\n", "action_in", "=", "torch", ".", "LongTensor", "(", "\n", "1", ",", "1", ")", ".", "fill_", "(", "action", "+", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                        ", "prob", "=", "F", ".", "softmax", "(", "planner_scores", ",", "dim", "=", "1", ")", "\n", "action", "=", "int", "(", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "action_in", "=", "torch", ".", "LongTensor", "(", "\n", "1", ",", "1", ")", ".", "fill_", "(", "action", "+", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "", "h3d", ".", "env", ".", "reset", "(", "\n", "x", "=", "init_pos", "[", "0", "]", ",", "y", "=", "init_pos", "[", "2", "]", ",", "yaw", "=", "init_pos", "[", "3", "]", ")", "\n", "\n", "init_dist_to_target", "=", "h3d", ".", "get_dist_to_target", "(", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ")", "\n", "if", "init_dist_to_target", "<", "0", ":", "# unreachable", "\n", "# invalids.append([idx[0], i])", "\n", "                        ", "continue", "\n", "\n", "", "episode_length", "=", "0", "\n", "episode_done", "=", "True", "\n", "controller_action_counter", "=", "0", "\n", "\n", "dists_to_target", ",", "pos_queue", "=", "[", "init_dist_to_target", "]", ",", "[", "\n", "init_pos", "\n", "]", "\n", "\n", "rewards", ",", "planner_actions", ",", "planner_log_probs", ",", "controller_actions", ",", "controller_log_probs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "if", "action", "!=", "3", ":", "\n", "\n", "# take the first step", "\n", "                        ", "img", ",", "rwd", ",", "episode_done", "=", "h3d", ".", "step", "(", "action", ",", "step_reward", "=", "True", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "\n", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "/", "255.0", "\n", "img_feat_var", "=", "train_loader", ".", "dataset", ".", "cnn", "(", "\n", "Variable", "(", "img", ".", "view", "(", "1", ",", "3", ",", "224", ",", "224", ")", ".", "cuda", "(", ")", ")", ")", ".", "view", "(", "\n", "1", ",", "1", ",", "3200", ")", "\n", "\n", "for", "step", "in", "range", "(", "args", ".", "max_episode_length", ")", ":", "\n", "\n", "                            ", "episode_length", "+=", "1", "\n", "\n", "if", "controller_step", "==", "False", ":", "\n", "                                ", "planner_scores", ",", "planner_hidden", "=", "nav_model", ".", "planner_step", "(", "\n", "question_var", ",", "img_feat_var", ",", "\n", "Variable", "(", "action_in", ")", ",", "planner_hidden", ")", "\n", "\n", "planner_prob", "=", "F", ".", "softmax", "(", "planner_scores", ",", "dim", "=", "1", ")", "\n", "planner_log_prob", "=", "F", ".", "log_softmax", "(", "\n", "planner_scores", ",", "dim", "=", "1", ")", "\n", "\n", "action", "=", "planner_prob", ".", "multinomial", "(", ")", ".", "data", "\n", "planner_log_prob", "=", "planner_log_prob", ".", "gather", "(", "\n", "1", ",", "Variable", "(", "action", ")", ")", "\n", "\n", "planner_log_probs", ".", "append", "(", "\n", "planner_log_prob", ".", "cpu", "(", ")", ")", "\n", "\n", "action", "=", "int", "(", "action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ")", "\n", "planner_actions", ".", "append", "(", "action", ")", "\n", "\n", "", "img", ",", "rwd", ",", "episode_done", "=", "h3d", ".", "step", "(", "action", ",", "step_reward", "=", "True", ")", "\n", "\n", "episode_done", "=", "episode_done", "or", "episode_length", ">=", "args", ".", "max_episode_length", "\n", "\n", "rewards", ".", "append", "(", "rwd", ")", "\n", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "\n", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "/", "255.0", "\n", "img_feat_var", "=", "train_loader", ".", "dataset", ".", "cnn", "(", "\n", "Variable", "(", "img", ".", "view", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", ".", "cuda", "(", ")", ")", ")", ".", "view", "(", "1", ",", "1", ",", "3200", ")", "\n", "\n", "dists_to_target", ".", "append", "(", "\n", "h3d", ".", "get_dist_to_target", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ")", ")", "\n", "pos_queue", ".", "append", "(", "[", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "y", ",", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", "\n", "]", ")", "\n", "\n", "if", "episode_done", "==", "True", ":", "\n", "                                ", "break", "\n", "\n", "# query controller to continue or not", "\n", "", "controller_action_in", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "1", ",", "1", ")", ".", "fill_", "(", "action", ")", ".", "cuda", "(", ")", ")", "\n", "controller_scores", "=", "nav_model", ".", "controller_step", "(", "\n", "img_feat_var", ",", "controller_action_in", ",", "\n", "planner_hidden", "[", "0", "]", ")", "\n", "\n", "controller_prob", "=", "F", ".", "softmax", "(", "\n", "controller_scores", ",", "dim", "=", "1", ")", "\n", "controller_log_prob", "=", "F", ".", "log_softmax", "(", "\n", "controller_scores", ",", "dim", "=", "1", ")", "\n", "\n", "controller_action", "=", "controller_prob", ".", "multinomial", "(", "\n", ")", ".", "data", "\n", "\n", "if", "int", "(", "controller_action", "[", "0", "]", "\n", ")", "==", "1", "and", "controller_action_counter", "<", "4", ":", "\n", "                                ", "controller_action_counter", "+=", "1", "\n", "controller_step", "=", "True", "\n", "", "else", ":", "\n", "                                ", "controller_action_counter", "=", "0", "\n", "controller_step", "=", "False", "\n", "controller_action", ".", "fill_", "(", "0", ")", "\n", "\n", "", "controller_log_prob", "=", "controller_log_prob", ".", "gather", "(", "\n", "1", ",", "Variable", "(", "controller_action", ")", ")", "\n", "controller_log_probs", ".", "append", "(", "\n", "controller_log_prob", ".", "cpu", "(", ")", ")", "\n", "\n", "controller_action", "=", "int", "(", "\n", "controller_action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ")", "\n", "controller_actions", ".", "append", "(", "controller_action", ")", "\n", "action_in", "=", "torch", ".", "LongTensor", "(", "\n", "1", ",", "1", ")", ".", "fill_", "(", "action", "+", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "# run answerer here", "\n", "", "", "ans_acc", "=", "[", "0", "]", "\n", "if", "action", "==", "3", ":", "\n", "                        ", "if", "len", "(", "pos_queue", ")", "<", "5", ":", "\n", "                            ", "pos_queue", "=", "train_loader", ".", "dataset", ".", "episode_pos_queue", "[", "len", "(", "\n", "pos_queue", ")", "-", "5", ":", "]", "+", "pos_queue", "\n", "", "images", "=", "train_loader", ".", "dataset", ".", "get_frames", "(", "\n", "h3d", ",", "pos_queue", "[", "-", "5", ":", "]", ",", "preprocess", "=", "True", ")", "\n", "images_var", "=", "Variable", "(", "\n", "torch", ".", "from_numpy", "(", "images", ")", ".", "cuda", "(", ")", ")", ".", "view", "(", "\n", "1", ",", "5", ",", "3", ",", "224", ",", "224", ")", "\n", "scores", ",", "att_probs", "=", "ans_model", "(", "images_var", ",", "question_var", ")", "\n", "ans_acc", ",", "ans_rank", "=", "vqa_metrics", ".", "compute_ranks", "(", "\n", "scores", ".", "data", ".", "cpu", "(", ")", ",", "answer", ")", "\n", "vqa_metrics", ".", "update", "(", "[", "ans_acc", ",", "ans_rank", ",", "1.0", "/", "ans_rank", "]", ")", "\n", "\n", "", "rewards", ".", "append", "(", "h3d", ".", "success_reward", "*", "ans_acc", "[", "0", "]", ")", "\n", "\n", "R", "=", "torch", ".", "zeros", "(", "1", ",", "1", ")", "\n", "\n", "planner_loss", "=", "0", "\n", "controller_loss", "=", "0", "\n", "\n", "planner_rev_idx", "=", "-", "1", "\n", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "rewards", ")", ")", ")", ":", "\n", "                        ", "R", "=", "0.99", "*", "R", "+", "rewards", "[", "i", "]", "\n", "advantage", "=", "R", "-", "nav_metrics", ".", "metrics", "[", "2", "]", "[", "1", "]", "\n", "\n", "if", "i", "<", "len", "(", "controller_actions", ")", ":", "\n", "                            ", "controller_loss", "=", "controller_loss", "-", "controller_log_probs", "[", "i", "]", "*", "Variable", "(", "\n", "advantage", ")", "\n", "\n", "if", "controller_actions", "[", "i", "]", "==", "0", "and", "planner_rev_idx", "+", "len", "(", "planner_log_probs", ")", ">=", "0", ":", "\n", "                                ", "planner_loss", "=", "planner_loss", "-", "planner_log_probs", "[", "planner_rev_idx", "]", "*", "Variable", "(", "\n", "advantage", ")", "\n", "planner_rev_idx", "-=", "1", "\n", "\n", "", "", "elif", "planner_rev_idx", "+", "len", "(", "planner_log_probs", ")", ">=", "0", ":", "\n", "\n", "                            ", "planner_loss", "=", "planner_loss", "-", "planner_log_probs", "[", "planner_rev_idx", "]", "*", "Variable", "(", "\n", "advantage", ")", "\n", "planner_rev_idx", "-=", "1", "\n", "\n", "", "", "controller_loss", "/=", "max", "(", "1", ",", "len", "(", "controller_log_probs", ")", ")", "\n", "planner_loss", "/=", "max", "(", "1", ",", "len", "(", "planner_log_probs", ")", ")", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "if", "isinstance", "(", "planner_loss", ",", "float", ")", "==", "False", "and", "isinstance", "(", "\n", "controller_loss", ",", "float", ")", "==", "False", ":", "\n", "                        ", "p_losses", ".", "append", "(", "planner_loss", ".", "data", "[", "0", ",", "0", "]", ")", "\n", "c_losses", ".", "append", "(", "controller_loss", ".", "data", "[", "0", ",", "0", "]", ")", "\n", "reward_list", ".", "append", "(", "np", ".", "sum", "(", "rewards", ")", ")", "\n", "episode_length_list", ".", "append", "(", "episode_length", ")", "\n", "\n", "(", "planner_loss", "+", "controller_loss", ")", ".", "backward", "(", ")", "\n", "\n", "ensure_shared_grads", "(", "nav_model", ".", "cpu", "(", ")", ",", "shared_nav_model", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "", "if", "len", "(", "reward_list", ")", ">", "50", ":", "\n", "\n", "                        ", "nav_metrics", ".", "update", "(", "[", "\n", "p_losses", ",", "c_losses", ",", "reward_list", ",", "\n", "episode_length_list", "\n", "]", ")", "\n", "\n", "print", "(", "nav_metrics", ".", "get_stat_string", "(", ")", ")", "\n", "if", "args", ".", "log", "==", "True", ":", "\n", "                            ", "nav_metrics", ".", "dump_log", "(", ")", "\n", "\n", "", "if", "nav_metrics", ".", "metrics", "[", "2", "]", "[", "1", "]", ">", "0.35", ":", "\n", "                            ", "mult", "=", "min", "(", "mult", "+", "0.1", ",", "1.0", ")", "\n", "\n", "", "p_losses", ",", "c_losses", ",", "reward_list", ",", "episode_length_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "", "", "if", "all_envs_loaded", "==", "False", ":", "\n", "                    ", "train_loader", ".", "dataset", ".", "_load_envs", "(", "in_order", "=", "True", ")", "\n", "if", "len", "(", "train_loader", ".", "dataset", ".", "pruned_env_set", ")", "==", "0", ":", "\n", "                        ", "done", "=", "True", "\n", "if", "args", ".", "cache", "==", "False", ":", "\n", "                            ", "train_loader", ".", "dataset", ".", "_load_envs", "(", "\n", "start_idx", "=", "0", ",", "in_order", "=", "True", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_vqa.eval": [[28, 155], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "data.EqaDataLoader", "print", "os.path.join", "args.gpus.index", "models.VqaLstmModel", "getattr", "int", "models.VqaLstmCnnAttentionModel.load_state_dict", "models.VqaLstmCnnAttentionModel.eval", "metrics.VqaMetric", "print", "data.load_vocab", "models.VqaLstmCnnAttentionModel", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "len", "shared_model.state_dict", "print", "data.load_vocab", "str", "models.VqaLstmCnnAttentionModel.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "models.VqaLstmCnnAttentionModel.", "torch.nn.CrossEntropyLoss().cuda.", "metrics.VqaMetric.compute_ranks", "metrics.VqaMetric.update", "metrics.VqaMetric.get_stat_string", "data.EqaDataLoader.dataset._check_if_all_envs_loaded", "metrics.VqaMetric.dump_log", "models.get_state", "print", "torch.save", "torch.save", "len", "questions.cuda", "answers.cuda", "model.data.cpu", "print", "len", "models.VqaLstmCnnAttentionModel.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models.VqaLstmCnnAttentionModel.", "torch.nn.CrossEntropyLoss().cuda.", "metrics.VqaMetric.compute_ranks", "metrics.VqaMetric.update", "metrics.VqaMetric.get_stat_string", "data.EqaDataLoader.dataset._load_envs", "questions.cuda", "answers.cuda", "images.cuda", "model.data.cpu", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.eval", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.VqaMetric.compute_ranks", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._check_if_all_envs_loaded", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.get_state", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.VqaMetric.compute_ranks", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs"], ["def", "eval", "(", "rank", ",", "args", ",", "shared_model", ")", ":", "\n", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpus", ".", "index", "(", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ")", ")", "\n", "\n", "if", "args", ".", "input_type", "==", "'ques'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "'vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "}", "\n", "model", "=", "VqaLstmModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "input_type", "==", "'ques,image'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "'vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "}", "\n", "model", "=", "VqaLstmCnnAttentionModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "lossFn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "eval_loader_kwargs", "=", "{", "\n", "'questions_h5'", ":", "getattr", "(", "args", ",", "args", ".", "eval_split", "+", "'_h5'", ")", ",", "\n", "'data_json'", ":", "args", ".", "data_json", ",", "\n", "'vocab'", ":", "args", ".", "vocab_json", ",", "\n", "'batch_size'", ":", "1", ",", "\n", "'input_type'", ":", "args", ".", "input_type", ",", "\n", "'num_frames'", ":", "args", ".", "num_frames", ",", "\n", "'split'", ":", "args", ".", "eval_split", ",", "\n", "'max_threads_per_gpu'", ":", "args", ".", "max_threads_per_gpu", ",", "\n", "'gpu_id'", ":", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ",", "\n", "'to_cache'", ":", "args", ".", "cache", "\n", "}", "\n", "\n", "eval_loader", "=", "EqaDataLoader", "(", "**", "eval_loader_kwargs", ")", "\n", "print", "(", "'eval_loader has %d samples'", "%", "len", "(", "eval_loader", ".", "dataset", ")", ")", "\n", "\n", "args", ".", "output_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\n", "'eval_'", "+", "str", "(", "rank", ")", "+", "'.json'", ")", "\n", "\n", "t", ",", "epoch", ",", "best_eval_acc", "=", "0", ",", "0", ",", "0", "\n", "\n", "while", "epoch", "<", "int", "(", "args", ".", "max_epochs", ")", ":", "\n", "\n", "        ", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "metrics", "=", "VqaMetric", "(", "\n", "info", "=", "{", "'split'", ":", "args", ".", "eval_split", "}", ",", "\n", "metric_names", "=", "[", "\n", "'loss'", ",", "'accuracy'", ",", "'mean_rank'", ",", "'mean_reciprocal_rank'", "\n", "]", ",", "\n", "log_json", "=", "args", ".", "output_log_path", ")", "\n", "\n", "if", "args", ".", "input_type", "==", "'ques'", ":", "\n", "            ", "for", "batch", "in", "eval_loader", ":", "\n", "                ", "t", "+=", "1", "\n", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "questions", ",", "answers", "=", "batch", "\n", "\n", "questions_var", "=", "Variable", "(", "questions", ".", "cuda", "(", ")", ")", "\n", "answers_var", "=", "Variable", "(", "answers", ".", "cuda", "(", ")", ")", "\n", "\n", "scores", "=", "model", "(", "questions_var", ")", "\n", "loss", "=", "lossFn", "(", "scores", ",", "answers_var", ")", "\n", "\n", "# update metrics", "\n", "accuracy", ",", "ranks", "=", "metrics", ".", "compute_ranks", "(", "\n", "scores", ".", "data", ".", "cpu", "(", ")", ",", "answers", ")", "\n", "metrics", ".", "update", "(", "[", "loss", ".", "data", "[", "0", "]", ",", "accuracy", ",", "ranks", ",", "1.0", "/", "ranks", "]", ")", "\n", "\n", "", "print", "(", "metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", ")", "\n", "\n", "", "elif", "args", ".", "input_type", "==", "'ques,image'", ":", "\n", "            ", "done", "=", "False", "\n", "all_envs_loaded", "=", "eval_loader", ".", "dataset", ".", "_check_if_all_envs_loaded", "(", ")", "\n", "\n", "while", "done", "==", "False", ":", "\n", "                ", "for", "batch", "in", "eval_loader", ":", "\n", "                    ", "t", "+=", "1", "\n", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "questions", ",", "answers", ",", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "\n", "questions_var", "=", "Variable", "(", "questions", ".", "cuda", "(", ")", ")", "\n", "answers_var", "=", "Variable", "(", "answers", ".", "cuda", "(", ")", ")", "\n", "images_var", "=", "Variable", "(", "images", ".", "cuda", "(", ")", ")", "\n", "\n", "scores", ",", "att_probs", "=", "model", "(", "images_var", ",", "questions_var", ")", "\n", "loss", "=", "lossFn", "(", "scores", ",", "answers_var", ")", "\n", "\n", "# update metrics", "\n", "accuracy", ",", "ranks", "=", "metrics", ".", "compute_ranks", "(", "\n", "scores", ".", "data", ".", "cpu", "(", ")", ",", "answers", ")", "\n", "metrics", ".", "update", "(", "\n", "[", "loss", ".", "data", "[", "0", "]", ",", "accuracy", ",", "ranks", ",", "1.0", "/", "ranks", "]", ")", "\n", "\n", "", "print", "(", "metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", ")", "\n", "\n", "if", "all_envs_loaded", "==", "False", ":", "\n", "                    ", "eval_loader", ".", "dataset", ".", "_load_envs", "(", ")", "\n", "if", "len", "(", "eval_loader", ".", "dataset", ".", "pruned_env_set", ")", "==", "0", ":", "\n", "                        ", "done", "=", "True", "\n", "", "", "else", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "epoch", "+=", "1", "\n", "\n", "# checkpoint if best val accuracy", "\n", "if", "metrics", ".", "metrics", "[", "1", "]", "[", "0", "]", ">", "best_eval_acc", ":", "\n", "            ", "best_eval_acc", "=", "metrics", ".", "metrics", "[", "1", "]", "[", "0", "]", "\n", "if", "epoch", "%", "args", ".", "eval_every", "==", "0", "and", "args", ".", "log", "==", "True", ":", "\n", "                ", "metrics", ".", "dump_log", "(", ")", "\n", "\n", "model_state", "=", "get_state", "(", "model", ")", "\n", "\n", "if", "args", ".", "checkpoint_path", "!=", "False", ":", "\n", "                    ", "ad", "=", "checkpoint", "[", "'args'", "]", "\n", "", "else", ":", "\n", "                    ", "ad", "=", "args", ".", "__dict__", "\n", "\n", "", "checkpoint", "=", "{", "'args'", ":", "ad", ",", "'state'", ":", "model_state", ",", "'epoch'", ":", "epoch", "}", "\n", "\n", "checkpoint_path", "=", "'%s/epoch_%d_accuracy_%.04f.pt'", "%", "(", "\n", "args", ".", "checkpoint_dir", ",", "epoch", ",", "best_eval_acc", ")", "\n", "print", "(", "'Saving checkpoint to %s'", "%", "checkpoint_path", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "\n", "", "", "print", "(", "'[best_eval_accuracy:%.04f]'", "%", "best_eval_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_vqa.train": [[157, 298], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.optim.Adam", "torch.optim.Adam", "os.path.join", "metrics.VqaMetric", "data.EqaDataLoader", "print", "args.gpus.index", "models.VqaLstmModel", "filter", "data.EqaDataLoader.dataset._load_envs", "int", "data.load_vocab", "models.VqaLstmCnnAttentionModel", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "shared_model.parameters", "len", "data.load_vocab", "str", "models.VqaLstmCnnAttentionModel.load_state_dict", "models.VqaLstmCnnAttentionModel.train", "models.VqaLstmCnnAttentionModel.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "models.VqaLstmCnnAttentionModel.", "torch.nn.CrossEntropyLoss().cuda.", "torch.optim.Adam.zero_grad", "metrics.VqaMetric.compute_ranks", "metrics.VqaMetric.update", "lossFn.backward", "models.ensure_shared_grads", "torch.optim.Adam.step", "data.EqaDataLoader.dataset._check_if_all_envs_loaded", "len", "shared_model.state_dict", "questions.cuda", "answers.cuda", "model.data.cpu", "models.VqaLstmCnnAttentionModel.cpu", "print", "len", "metrics.VqaMetric.get_stat_string", "metrics.VqaMetric.dump_log", "models.VqaLstmCnnAttentionModel.load_state_dict", "models.VqaLstmCnnAttentionModel.train", "models.VqaLstmCnnAttentionModel.cnn.eval", "models.VqaLstmCnnAttentionModel.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models.VqaLstmCnnAttentionModel.", "torch.nn.CrossEntropyLoss().cuda.", "torch.optim.Adam.zero_grad", "metrics.VqaMetric.compute_ranks", "metrics.VqaMetric.update", "lossFn.backward", "models.ensure_shared_grads", "torch.optim.Adam.step", "print", "data.EqaDataLoader.dataset._load_envs", "shared_model.state_dict", "questions.cuda", "answers.cuda", "images.cuda", "model.data.cpu", "models.VqaLstmCnnAttentionModel.cpu", "print", "len", "metrics.VqaMetric.get_stat_string", "metrics.VqaMetric.dump_log", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.filter", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.train", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.VqaMetric.compute_ranks", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.ensure_shared_grads", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._check_if_all_envs_loaded", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.train", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.eval", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.VqaMetric.compute_ranks", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.ensure_shared_grads", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.dump_log"], ["", "", "def", "train", "(", "rank", ",", "args", ",", "shared_model", ")", ":", "\n", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpus", ".", "index", "(", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ")", ")", "\n", "\n", "if", "args", ".", "input_type", "==", "'ques'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "'vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "}", "\n", "model", "=", "VqaLstmModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "input_type", "==", "'ques,image'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "'vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "}", "\n", "model", "=", "VqaLstmCnnAttentionModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "lossFn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "shared_model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ")", "\n", "\n", "train_loader_kwargs", "=", "{", "\n", "'questions_h5'", ":", "args", ".", "train_h5", ",", "\n", "'data_json'", ":", "args", ".", "data_json", ",", "\n", "'vocab'", ":", "args", ".", "vocab_json", ",", "\n", "'batch_size'", ":", "args", ".", "batch_size", ",", "\n", "'input_type'", ":", "args", ".", "input_type", ",", "\n", "'num_frames'", ":", "args", ".", "num_frames", ",", "\n", "'split'", ":", "'train'", ",", "\n", "'max_threads_per_gpu'", ":", "args", ".", "max_threads_per_gpu", ",", "\n", "'gpu_id'", ":", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ",", "\n", "'to_cache'", ":", "args", ".", "cache", "\n", "}", "\n", "\n", "args", ".", "output_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\n", "'train_'", "+", "str", "(", "rank", ")", "+", "'.json'", ")", "\n", "\n", "metrics", "=", "VqaMetric", "(", "\n", "info", "=", "{", "'split'", ":", "'train'", ",", "\n", "'thread'", ":", "rank", "}", ",", "\n", "metric_names", "=", "[", "'loss'", ",", "'accuracy'", ",", "'mean_rank'", ",", "'mean_reciprocal_rank'", "]", ",", "\n", "log_json", "=", "args", ".", "output_log_path", ")", "\n", "\n", "train_loader", "=", "EqaDataLoader", "(", "**", "train_loader_kwargs", ")", "\n", "if", "args", ".", "input_type", "==", "'ques,image'", ":", "\n", "        ", "train_loader", ".", "dataset", ".", "_load_envs", "(", "start_idx", "=", "0", ",", "in_order", "=", "True", ")", "\n", "\n", "", "print", "(", "'train_loader has %d samples'", "%", "len", "(", "train_loader", ".", "dataset", ")", ")", "\n", "\n", "t", ",", "epoch", "=", "0", ",", "0", "\n", "\n", "while", "epoch", "<", "int", "(", "args", ".", "max_epochs", ")", ":", "\n", "\n", "        ", "if", "args", ".", "input_type", "==", "'ques'", ":", "\n", "\n", "            ", "for", "batch", "in", "train_loader", ":", "\n", "\n", "                ", "t", "+=", "1", "\n", "\n", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "questions", ",", "answers", "=", "batch", "\n", "\n", "questions_var", "=", "Variable", "(", "questions", ".", "cuda", "(", ")", ")", "\n", "answers_var", "=", "Variable", "(", "answers", ".", "cuda", "(", ")", ")", "\n", "\n", "scores", "=", "model", "(", "questions_var", ")", "\n", "loss", "=", "lossFn", "(", "scores", ",", "answers_var", ")", "\n", "\n", "# zero grad", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "# update metrics", "\n", "accuracy", ",", "ranks", "=", "metrics", ".", "compute_ranks", "(", "scores", ".", "data", ".", "cpu", "(", ")", ",", "answers", ")", "\n", "metrics", ".", "update", "(", "[", "loss", ".", "data", "[", "0", "]", ",", "accuracy", ",", "ranks", ",", "1.0", "/", "ranks", "]", ")", "\n", "\n", "# backprop and update", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "ensure_shared_grads", "(", "model", ".", "cpu", "(", ")", ",", "shared_model", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "if", "t", "%", "args", ".", "print_every", "==", "0", ":", "\n", "                    ", "print", "(", "metrics", ".", "get_stat_string", "(", ")", ")", "\n", "if", "args", ".", "log", "==", "True", ":", "\n", "                        ", "metrics", ".", "dump_log", "(", ")", "\n", "\n", "", "", "", "", "elif", "args", ".", "input_type", "==", "'ques,image'", ":", "\n", "\n", "            ", "done", "=", "False", "\n", "all_envs_loaded", "=", "train_loader", ".", "dataset", ".", "_check_if_all_envs_loaded", "(", ")", "\n", "\n", "while", "done", "==", "False", ":", "\n", "\n", "                ", "for", "batch", "in", "train_loader", ":", "\n", "\n", "                    ", "t", "+=", "1", "\n", "\n", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", ".", "cnn", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "questions", ",", "answers", ",", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "\n", "questions_var", "=", "Variable", "(", "questions", ".", "cuda", "(", ")", ")", "\n", "answers_var", "=", "Variable", "(", "answers", ".", "cuda", "(", ")", ")", "\n", "images_var", "=", "Variable", "(", "images", ".", "cuda", "(", ")", ")", "\n", "\n", "scores", ",", "att_probs", "=", "model", "(", "images_var", ",", "questions_var", ")", "\n", "loss", "=", "lossFn", "(", "scores", ",", "answers_var", ")", "\n", "\n", "# zero grad", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "# update metrics", "\n", "accuracy", ",", "ranks", "=", "metrics", ".", "compute_ranks", "(", "scores", ".", "data", ".", "cpu", "(", ")", ",", "answers", ")", "\n", "metrics", ".", "update", "(", "[", "loss", ".", "data", "[", "0", "]", ",", "accuracy", ",", "ranks", ",", "1.0", "/", "ranks", "]", ")", "\n", "\n", "# backprop and update", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "ensure_shared_grads", "(", "model", ".", "cpu", "(", ")", ",", "shared_model", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "if", "t", "%", "args", ".", "print_every", "==", "0", ":", "\n", "                        ", "print", "(", "metrics", ".", "get_stat_string", "(", ")", ")", "\n", "if", "args", ".", "log", "==", "True", ":", "\n", "                            ", "metrics", ".", "dump_log", "(", ")", "\n", "\n", "", "", "", "if", "all_envs_loaded", "==", "False", ":", "\n", "                    ", "print", "(", "'[CHECK][Cache:%d][Total:%d]'", "%", "(", "len", "(", "train_loader", ".", "dataset", ".", "img_data_cache", ")", ",", "\n", "len", "(", "train_loader", ".", "dataset", ".", "env_list", ")", ")", ")", "\n", "train_loader", ".", "dataset", ".", "_load_envs", "(", "in_order", "=", "True", ")", "\n", "if", "len", "(", "train_loader", ".", "dataset", ".", "pruned_env_set", ")", "==", "0", ":", "\n", "                        ", "done", "=", "True", "\n", "", "", "else", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.eval": [[37, 727], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "data.EqaDataLoader", "print", "logging.info", "os.path.join", "args.gpus.index", "models.NavCnnModel", "getattr", "int", "models.NavPlannerControllerModel.load_state_dict", "models.NavPlannerControllerModel.eval", "metrics.NavMetric", "print", "logging.info", "data.EqaDataLoader.dataset._load_envs", "models.NavCnnModel", "len", "len", "shared_model.state_dict", "data.load_vocab", "models.NavCnnRnnModel", "str", "tqdm.tqdm", "print", "print", "logging.info", "logging.info", "data.EqaDataLoader.dataset._load_envs", "metrics.NavMetric.dump_log", "models.get_state", "dict", "print", "logging.info", "torch.save", "torch.save", "torch.save", "torch.save", "models.NavCnnRnnModel", "len", "models.NavPlannerControllerModel.load_state_dict", "models.NavPlannerControllerModel.cuda", "metrics.NavMetric.update", "metrics.NavMetric.get_stat_string", "len", "len", "tqdm.tqdm", "print", "print", "logging.info", "logging.info", "data.EqaDataLoader.dataset._load_envs", "print", "logging.info", "len", "data.load_vocab", "models.NavCnnRnnMultModel", "shared_model.state_dict", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "h3d.env.reset", "h3d.get_dist_to_target", "torch.autograd.Variable", "range", "numpy.array().min", "metrics.NavMetric.get_stat_string", "len", "metrics.NavMetric", "models.NavPlannerControllerModel.load_state_dict", "models.NavPlannerControllerModel.cuda", "torch.autograd.Variable", "metrics.NavMetric.update", "metrics.NavMetric.get_stat_string", "len", "len", "len", "tqdm.tqdm", "print", "print", "logging.info", "logging.info", "data.EqaDataLoader.dataset._load_envs", "data.load_vocab", "models.NavPlannerControllerModel", "exit", "invalids.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "invalids.append", "torch.index_select.cuda", "torch.autograd.Variable", "torch.softmax", "int", "actions.append", "h3d.step", "data.EqaDataLoader.dataset.cnn().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dists_to_target.append", "pos_queue.append", "inside_room.append", "any", "metrics_list.append", "metrics_list.append", "shared_model.state_dict", "questions.cuda", "h3d.env.reset", "h3d.get_dist_to_target", "h3d.env.render", "data.EqaDataLoader.dataset.cnn().view", "range", "numpy.array().min", "metrics.NavMetric.get_stat_string", "len", "len", "len", "metrics.NavMetric", "models.NavPlannerControllerModel.load_state_dict", "models.NavPlannerControllerModel.cuda", "metrics.NavMetric.update", "print", "logging.info", "len", "len", "data.load_vocab", "range", "questions.cuda", "models.NavPlannerControllerModel.", "models.NavPlannerControllerModel.", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "h3d.get_dist_to_target", "numpy.array", "h3d.is_inside_room", "invalids.append", "len", "data.EqaDataLoader.dataset.get_frames", "data.EqaDataLoader.dataset.cnn", "torch.autograd.Variable", "action_lengths.clone().fill_", "eval_loader.dataset.cnn.view", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "models.NavPlannerControllerModel.nav_rnn.init_hidden", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "invalids.append", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.softmax", "int", "actions.append", "h3d.step", "data.EqaDataLoader.dataset.cnn().view", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "dists_to_target.append", "pos_queue.append", "actual_pos_queue.append", "inside_room.append", "any", "metrics_list.append", "metrics_list.append", "shared_model.state_dict", "torch.autograd.Variable", "models.NavPlannerControllerModel.planner_nav_rnn.init_hidden", "data.EqaDataLoader.dataset.get_hierarchical_features_till_spawn", "torch.autograd.Variable", "torch.autograd.Variable", "range", "h3d.env.reset", "h3d.get_dist_to_target", "int", "range", "numpy.array().min", "metrics.NavMetric.get_stat_string", "[].data.cpu().numpy", "data.EqaDataLoader.dataset.cnn", "str", "str", "str", "str", "str", "torch.autograd.Variable", "actions_in_pruned.cuda", "models.NavPlannerControllerModel.", "models.NavPlannerControllerModel.", "data.EqaDataLoader.dataset.cnn", "models.NavPlannerControllerModel.", "models.NavPlannerControllerModel.", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "h3d.get_dist_to_target", "numpy.array", "h3d.is_inside_room", "invalids.append", "question.cuda", "actions[].numpy", "planner_actions_in.cuda", "planner_img_feats.cuda", "planner_actions_in.size", "models.NavPlannerControllerModel.planner_step", "invalids.append", "max", "dists_to_target.append", "pos_queue.append", "h3d.step", "inside_room.append", "any", "metrics_list.append", "metrics_list.append", "metrics.NavMetric.get_stat_string", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "str", "str", "str", "str", "str", "str", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "action_lengths.clone", "action_lengths.clone().fill_.cpu().numpy", "action_lengths.clone().fill_.cpu().numpy", "invalids.append", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "[].data.cpu().numpy", "data.EqaDataLoader.dataset.cnn", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "str", "str", "str", "str", "str", "planner_img_feats_var[].unsqueeze().unsqueeze", "planner_actions_in_var[].view", "data.EqaDataLoader.dataset.cnn().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "models.NavPlannerControllerModel.controller_step", "torch.softmax", "int", "controller_actions.append", "torch.softmax", "int", "planner_actions.append", "h3d.get_dist_to_target", "numpy.array", "h3d.is_inside_room", "[].data.cpu", "h3d.env.render.transpose", "h3d.env.render.view().cuda", "metrics.NavMetric.metric_names.index", "h3d.env.render.transpose", "h3d.env.render.view().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "str", "str", "str", "str", "str", "str", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "models.NavPlannerControllerModel.planner_step", "str", "str", "str", "str", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "action_lengths.clone().fill_.cpu", "action_lengths.clone().fill_.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "[].data.cpu", "h3d.env.render.transpose", "h3d.env.render.view().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "metrics.NavMetric.metric_names.index", "planner_img_feats_var[].unsqueeze", "data.EqaDataLoader.dataset.cnn", "torch.autograd.Variable", "[].data.cpu().numpy", "torch.autograd.Variable", "[].data.cpu().numpy", "str", "str", "str", "str", "str", "str", "h3d.env.render.view", "h3d.env.render.view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "controller_img_feats.cuda", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "metrics.NavMetric.metric_names.index", "h3d.env.render.view", "h3d.env.render.transpose", "h3d.env.render.view().cuda", "[].data.cpu", "[].data.cpu", "F.softmax.max", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "F.softmax.max", "h3d.env.render.view", "F.softmax.max", "F.softmax.max"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.eval", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.get_state", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_dist_to_target", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_dist_to_target", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.render", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_dist_to_target", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.is_inside_room", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_frames", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.init_hidden", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavRnn.init_hidden", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset.get_hierarchical_features_till_spawn", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_dist_to_target", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_dist_to_target", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.is_inside_room", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.planner_step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.controller_step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.get_dist_to_target", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.is_inside_room", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.NavPlannerControllerModel.planner_step"], ["", "def", "eval", "(", "rank", ",", "args", ",", "shared_model", ")", ":", "\n", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpus", ".", "index", "(", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ")", ")", "\n", "\n", "if", "args", ".", "model_type", "==", "'cnn'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "}", "\n", "model", "=", "NavCnnModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'cnn+q'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "\n", "'question_input'", ":", "True", ",", "\n", "'question_vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "\n", "}", "\n", "model", "=", "NavCnnModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'lstm'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "}", "\n", "model", "=", "NavCnnRnnModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'lstm+q'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "\n", "'question_input'", ":", "True", ",", "\n", "'question_vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "\n", "}", "\n", "model", "=", "NavCnnRnnModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'lstm-mult+q'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "\n", "'question_input'", ":", "True", ",", "\n", "'question_vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "\n", "}", "\n", "model", "=", "NavCnnRnnMultModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'pacman'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "'question_vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "}", "\n", "model", "=", "NavPlannerControllerModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "exit", "(", ")", "\n", "\n", "", "eval_loader_kwargs", "=", "{", "\n", "'questions_h5'", ":", "getattr", "(", "args", ",", "args", ".", "eval_split", "+", "'_h5'", ")", ",", "\n", "'data_json'", ":", "args", ".", "data_json", ",", "\n", "'vocab'", ":", "args", ".", "vocab_json", ",", "\n", "'target_obj_conn_map_dir'", ":", "args", ".", "target_obj_conn_map_dir", ",", "\n", "'map_resolution'", ":", "args", ".", "map_resolution", ",", "\n", "'batch_size'", ":", "1", ",", "\n", "'input_type'", ":", "args", ".", "model_type", ",", "\n", "'num_frames'", ":", "5", ",", "\n", "'split'", ":", "args", ".", "eval_split", ",", "\n", "'max_threads_per_gpu'", ":", "args", ".", "max_threads_per_gpu", ",", "\n", "'gpu_id'", ":", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ",", "\n", "'to_cache'", ":", "False", ",", "\n", "'overfit'", ":", "args", ".", "overfit", ",", "\n", "'max_controller_actions'", ":", "args", ".", "max_controller_actions", ",", "\n", "}", "\n", "\n", "eval_loader", "=", "EqaDataLoader", "(", "**", "eval_loader_kwargs", ")", "\n", "print", "(", "'eval_loader has %d samples'", "%", "len", "(", "eval_loader", ".", "dataset", ")", ")", "\n", "logging", ".", "info", "(", "\"EVAL: eval_loader has {} samples\"", ".", "format", "(", "len", "(", "eval_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "args", ".", "output_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\n", "'eval_'", "+", "str", "(", "rank", ")", "+", "'.json'", ")", "\n", "\n", "t", ",", "epoch", ",", "best_eval_acc", "=", "0", ",", "0", ",", "0.0", "\n", "\n", "max_epochs", "=", "args", ".", "max_epochs", "\n", "if", "args", ".", "mode", "==", "'eval'", ":", "\n", "        ", "max_epochs", "=", "1", "\n", "", "while", "epoch", "<", "int", "(", "max_epochs", ")", ":", "\n", "\n", "        ", "invalids", "=", "[", "]", "\n", "\n", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# that's a lot of numbers", "\n", "metrics", "=", "NavMetric", "(", "\n", "info", "=", "{", "'split'", ":", "args", ".", "eval_split", ",", "\n", "'thread'", ":", "rank", "}", ",", "\n", "metric_names", "=", "[", "\n", "'d_0_10'", ",", "'d_0_30'", ",", "'d_0_50'", ",", "'d_T_10'", ",", "'d_T_30'", ",", "'d_T_50'", ",", "\n", "'d_D_10'", ",", "'d_D_30'", ",", "'d_D_50'", ",", "'d_min_10'", ",", "'d_min_30'", ",", "\n", "'d_min_50'", ",", "'r_T_10'", ",", "'r_T_30'", ",", "'r_T_50'", ",", "'r_e_10'", ",", "'r_e_30'", ",", "\n", "'r_e_50'", ",", "'stop_10'", ",", "'stop_30'", ",", "'stop_50'", ",", "'ep_len_10'", ",", "\n", "'ep_len_30'", ",", "'ep_len_50'", "\n", "]", ",", "\n", "log_json", "=", "args", ".", "output_log_path", ")", "\n", "\n", "if", "'cnn'", "in", "args", ".", "model_type", ":", "\n", "\n", "            ", "done", "=", "False", "\n", "\n", "while", "done", "==", "False", ":", "\n", "\n", "                ", "for", "batch", "in", "tqdm", "(", "eval_loader", ")", ":", "\n", "\n", "                    ", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "questions", ",", "_", ",", "img_feats", ",", "actions_in", ",", "actions_out", ",", "action_length", "=", "batch", "\n", "metrics_slug", "=", "{", "}", "\n", "\n", "# evaluate at multiple initializations", "\n", "for", "i", "in", "[", "10", ",", "30", ",", "50", "]", ":", "\n", "\n", "                        ", "t", "+=", "1", "\n", "\n", "if", "action_length", "[", "0", "]", "+", "1", "-", "i", "-", "5", "<", "0", ":", "\n", "                            ", "invalids", ".", "append", "(", "idx", "[", "0", "]", ")", "\n", "continue", "\n", "\n", "", "ep_inds", "=", "[", "\n", "x", "for", "x", "in", "range", "(", "action_length", "[", "0", "]", "+", "1", "-", "i", "-", "5", ",", "\n", "action_length", "[", "0", "]", "+", "1", "-", "i", ")", "\n", "]", "\n", "\n", "sub_img_feats", "=", "torch", ".", "index_select", "(", "\n", "img_feats", ",", "1", ",", "torch", ".", "LongTensor", "(", "ep_inds", ")", ")", "\n", "\n", "init_pos", "=", "eval_loader", ".", "dataset", ".", "episode_pos_queue", "[", "\n", "ep_inds", "[", "-", "1", "]", "]", "\n", "\n", "h3d", "=", "eval_loader", ".", "dataset", ".", "episode_house", "\n", "\n", "h3d", ".", "env", ".", "reset", "(", "\n", "x", "=", "init_pos", "[", "0", "]", ",", "y", "=", "init_pos", "[", "2", "]", ",", "yaw", "=", "init_pos", "[", "3", "]", ")", "\n", "\n", "init_dist_to_target", "=", "h3d", ".", "get_dist_to_target", "(", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ")", "\n", "if", "init_dist_to_target", "<", "0", ":", "# unreachable", "\n", "                            ", "invalids", ".", "append", "(", "idx", "[", "0", "]", ")", "\n", "continue", "\n", "\n", "", "sub_img_feats_var", "=", "Variable", "(", "sub_img_feats", ".", "cuda", "(", ")", ")", "\n", "if", "'+q'", "in", "args", ".", "model_type", ":", "\n", "                            ", "questions_var", "=", "Variable", "(", "questions", ".", "cuda", "(", ")", ")", "\n", "\n", "# sample actions till max steps or <stop>", "\n", "# max no. of actions = 100", "\n", "\n", "", "episode_length", "=", "0", "\n", "episode_done", "=", "True", "\n", "\n", "dists_to_target", ",", "pos_queue", ",", "actions", "=", "[", "\n", "init_dist_to_target", "\n", "]", ",", "[", "init_pos", "]", ",", "[", "]", "\n", "\n", "for", "step", "in", "range", "(", "args", ".", "max_episode_length", ")", ":", "\n", "\n", "                            ", "episode_length", "+=", "1", "\n", "\n", "if", "'+q'", "in", "args", ".", "model_type", ":", "\n", "                                ", "scores", "=", "model", "(", "sub_img_feats_var", ",", "\n", "questions_var", ")", "\n", "", "else", ":", "\n", "                                ", "scores", "=", "model", "(", "sub_img_feats_var", ")", "\n", "\n", "", "prob", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "action", "=", "int", "(", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "actions", ".", "append", "(", "action", ")", "\n", "\n", "img", ",", "_", ",", "episode_done", "=", "h3d", ".", "step", "(", "action", ")", "\n", "\n", "episode_done", "=", "episode_done", "or", "episode_length", ">=", "args", ".", "max_episode_length", "\n", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "\n", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "/", "255.0", "\n", "img_feat_var", "=", "eval_loader", ".", "dataset", ".", "cnn", "(", "\n", "Variable", "(", "img", ".", "view", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", ".", "cuda", "(", ")", ")", ")", ".", "view", "(", "1", ",", "1", ",", "3200", ")", "\n", "sub_img_feats_var", "=", "torch", ".", "cat", "(", "\n", "[", "sub_img_feats_var", ",", "img_feat_var", "]", ",", "dim", "=", "1", ")", "\n", "sub_img_feats_var", "=", "sub_img_feats_var", "[", ":", ",", "-", "5", ":", ",", ":", "]", "\n", "\n", "dists_to_target", ".", "append", "(", "\n", "h3d", ".", "get_dist_to_target", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ")", ")", "\n", "pos_queue", ".", "append", "(", "[", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "y", ",", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", "\n", "]", ")", "\n", "\n", "if", "episode_done", "==", "True", ":", "\n", "                                ", "break", "\n", "\n", "# compute stats", "\n", "", "", "metrics_slug", "[", "'d_0_'", "+", "str", "(", "i", ")", "]", "=", "dists_to_target", "[", "0", "]", "\n", "metrics_slug", "[", "'d_T_'", "+", "str", "(", "i", ")", "]", "=", "dists_to_target", "[", "-", "1", "]", "\n", "metrics_slug", "[", "'d_D_'", "+", "str", "(", "\n", "i", ")", "]", "=", "dists_to_target", "[", "0", "]", "-", "dists_to_target", "[", "-", "1", "]", "\n", "metrics_slug", "[", "'d_min_'", "+", "str", "(", "i", ")", "]", "=", "np", ".", "array", "(", "\n", "dists_to_target", ")", ".", "min", "(", ")", "\n", "metrics_slug", "[", "'ep_len_'", "+", "str", "(", "i", ")", "]", "=", "episode_length", "\n", "if", "action", "==", "3", ":", "\n", "                            ", "metrics_slug", "[", "'stop_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'stop_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "", "inside_room", "=", "[", "]", "\n", "for", "p", "in", "pos_queue", ":", "\n", "                            ", "inside_room", ".", "append", "(", "\n", "h3d", ".", "is_inside_room", "(", "\n", "p", ",", "eval_loader", ".", "dataset", ".", "target_room", ")", ")", "\n", "", "if", "inside_room", "[", "-", "1", "]", "==", "True", ":", "\n", "                            ", "metrics_slug", "[", "'r_T_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'r_T_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "", "if", "any", "(", "[", "x", "==", "True", "for", "x", "in", "inside_room", "]", ")", "==", "True", ":", "\n", "                            ", "metrics_slug", "[", "'r_e_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'r_e_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "\n", "# collate and update metrics", "\n", "", "", "metrics_list", "=", "[", "]", "\n", "for", "i", "in", "metrics", ".", "metric_names", ":", "\n", "                        ", "if", "i", "not", "in", "metrics_slug", ":", "\n", "                            ", "metrics_list", ".", "append", "(", "metrics", ".", "metrics", "[", "\n", "metrics", ".", "metric_names", ".", "index", "(", "i", ")", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "metrics_list", ".", "append", "(", "metrics_slug", "[", "i", "]", ")", "\n", "\n", "# update metrics", "\n", "", "", "metrics", ".", "update", "(", "metrics_list", ")", "\n", "\n", "", "print", "(", "metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", ")", "\n", "print", "(", "'invalids'", ",", "len", "(", "invalids", ")", ")", "\n", "logging", ".", "info", "(", "\"EVAL: metrics: {}\"", ".", "format", "(", "metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"EVAL: invalids: {}\"", ".", "format", "(", "len", "(", "invalids", ")", ")", ")", "\n", "\n", "# del h3d", "\n", "eval_loader", ".", "dataset", ".", "_load_envs", "(", ")", "\n", "if", "len", "(", "eval_loader", ".", "dataset", ".", "pruned_env_set", ")", "==", "0", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "elif", "'lstm'", "in", "args", ".", "model_type", ":", "\n", "\n", "            ", "done", "=", "False", "\n", "\n", "while", "done", "==", "False", ":", "\n", "\n", "                ", "if", "args", ".", "overfit", ":", "\n", "                    ", "metrics", "=", "NavMetric", "(", "\n", "info", "=", "{", "'split'", ":", "args", ".", "eval_split", ",", "\n", "'thread'", ":", "rank", "}", ",", "\n", "metric_names", "=", "[", "\n", "'d_0_10'", ",", "'d_0_30'", ",", "'d_0_50'", ",", "'d_T_10'", ",", "'d_T_30'", ",", "'d_T_50'", ",", "\n", "'d_D_10'", ",", "'d_D_30'", ",", "'d_D_50'", ",", "'d_min_10'", ",", "'d_min_30'", ",", "\n", "'d_min_50'", ",", "'r_T_10'", ",", "'r_T_30'", ",", "'r_T_50'", ",", "'r_e_10'", ",", "'r_e_30'", ",", "\n", "'r_e_50'", ",", "'stop_10'", ",", "'stop_30'", ",", "'stop_50'", ",", "'ep_len_10'", ",", "\n", "'ep_len_30'", ",", "'ep_len_50'", "\n", "]", ",", "\n", "log_json", "=", "args", ".", "output_log_path", ")", "\n", "\n", "", "for", "batch", "in", "tqdm", "(", "eval_loader", ")", ":", "\n", "\n", "                    ", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "questions", ",", "answer", ",", "_", ",", "actions_in", ",", "actions_out", ",", "action_lengths", ",", "_", "=", "batch", "\n", "question_var", "=", "Variable", "(", "questions", ".", "cuda", "(", ")", ")", "\n", "metrics_slug", "=", "{", "}", "\n", "\n", "# evaluate at multiple initializations", "\n", "for", "i", "in", "[", "10", ",", "30", ",", "50", "]", ":", "\n", "\n", "                        ", "t", "+=", "1", "\n", "\n", "if", "action_lengths", "[", "0", "]", "-", "1", "-", "i", "<", "0", ":", "\n", "                            ", "invalids", ".", "append", "(", "[", "idx", "[", "0", "]", ",", "i", "]", ")", "\n", "continue", "\n", "\n", "", "h3d", "=", "eval_loader", ".", "dataset", ".", "episode_house", "\n", "\n", "# forward through lstm till spawn", "\n", "if", "len", "(", "eval_loader", ".", "dataset", ".", "episode_pos_queue", "[", ":", "-", "i", "]", "\n", ")", ">", "0", ":", "\n", "                            ", "images", "=", "eval_loader", ".", "dataset", ".", "get_frames", "(", "\n", "h3d", ",", "\n", "eval_loader", ".", "dataset", ".", "episode_pos_queue", "[", ":", "-", "i", "]", ",", "\n", "preprocess", "=", "True", ")", "\n", "raw_img_feats", "=", "eval_loader", ".", "dataset", ".", "cnn", "(", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "images", ")", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "actions_in_pruned", "=", "actions_in", "[", ":", ",", ":", "\n", "action_lengths", "[", "0", "]", "-", "\n", "i", "]", "\n", "actions_in_var", "=", "Variable", "(", "actions_in_pruned", ".", "cuda", "(", ")", ")", "\n", "action_lengths_pruned", "=", "action_lengths", ".", "clone", "(", "\n", ")", ".", "fill_", "(", "action_lengths", "[", "0", "]", "-", "i", ")", "\n", "img_feats_var", "=", "raw_img_feats", ".", "view", "(", "1", ",", "-", "1", ",", "3200", ")", "\n", "\n", "if", "'+q'", "in", "args", ".", "model_type", ":", "\n", "                                ", "scores", ",", "hidden", "=", "model", "(", "\n", "img_feats_var", ",", "question_var", ",", "\n", "actions_in_var", ",", "\n", "action_lengths_pruned", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "                                ", "scores", ",", "hidden", "=", "model", "(", "\n", "img_feats_var", ",", "False", ",", "actions_in_var", ",", "\n", "action_lengths_pruned", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "try", ":", "\n", "                                ", "init_pos", "=", "eval_loader", ".", "dataset", ".", "episode_pos_queue", "[", "\n", "-", "i", "]", "\n", "", "except", ":", "\n", "                                ", "invalids", ".", "append", "(", "[", "idx", "[", "0", "]", ",", "i", "]", ")", "\n", "continue", "\n", "\n", "", "action_in", "=", "torch", ".", "LongTensor", "(", "1", ",", "1", ")", ".", "fill_", "(", "\n", "actions_in", "[", "0", ",", "\n", "action_lengths", "[", "0", "]", "-", "i", "]", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                            ", "init_pos", "=", "eval_loader", ".", "dataset", ".", "episode_pos_queue", "[", "\n", "-", "i", "]", "\n", "hidden", "=", "model", ".", "nav_rnn", ".", "init_hidden", "(", "1", ")", "\n", "action_in", "=", "torch", ".", "LongTensor", "(", "1", ",", "1", ")", ".", "fill_", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "h3d", ".", "env", ".", "reset", "(", "\n", "x", "=", "init_pos", "[", "0", "]", ",", "y", "=", "init_pos", "[", "2", "]", ",", "yaw", "=", "init_pos", "[", "3", "]", ")", "\n", "\n", "init_dist_to_target", "=", "h3d", ".", "get_dist_to_target", "(", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ")", "\n", "if", "init_dist_to_target", "<", "0", ":", "# unreachable", "\n", "                            ", "invalids", ".", "append", "(", "[", "idx", "[", "0", "]", ",", "i", "]", ")", "\n", "continue", "\n", "\n", "", "img", "=", "h3d", ".", "env", ".", "render", "(", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "\n", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "/", "255.0", "\n", "img_feat_var", "=", "eval_loader", ".", "dataset", ".", "cnn", "(", "\n", "Variable", "(", "img", ".", "view", "(", "1", ",", "3", ",", "224", ",", "224", ")", ".", "cuda", "(", ")", ")", ")", ".", "view", "(", "\n", "1", ",", "1", ",", "3200", ")", "\n", "\n", "episode_length", "=", "0", "\n", "episode_done", "=", "True", "\n", "\n", "dists_to_target", ",", "pos_queue", ",", "actions", "=", "[", "\n", "init_dist_to_target", "\n", "]", ",", "[", "init_pos", "]", ",", "[", "]", "\n", "actual_pos_queue", "=", "[", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", ")", "]", "\n", "\n", "for", "step", "in", "range", "(", "args", ".", "max_episode_length", ")", ":", "\n", "\n", "                            ", "episode_length", "+=", "1", "\n", "\n", "if", "'+q'", "in", "args", ".", "model_type", ":", "\n", "                                ", "scores", ",", "hidden", "=", "model", "(", "\n", "img_feat_var", ",", "\n", "question_var", ",", "\n", "Variable", "(", "action_in", ")", ",", "\n", "False", ",", "\n", "hidden", "=", "hidden", ",", "\n", "step", "=", "True", ")", "\n", "", "else", ":", "\n", "                                ", "scores", ",", "hidden", "=", "model", "(", "\n", "img_feat_var", ",", "\n", "False", ",", "\n", "Variable", "(", "action_in", ")", ",", "\n", "False", ",", "\n", "hidden", "=", "hidden", ",", "\n", "step", "=", "True", ")", "\n", "\n", "", "prob", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "action", "=", "int", "(", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "actions", ".", "append", "(", "action", ")", "\n", "\n", "img", ",", "_", ",", "episode_done", "=", "h3d", ".", "step", "(", "action", ")", "\n", "\n", "episode_done", "=", "episode_done", "or", "episode_length", ">=", "args", ".", "max_episode_length", "\n", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "\n", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "/", "255.0", "\n", "img_feat_var", "=", "eval_loader", ".", "dataset", ".", "cnn", "(", "\n", "Variable", "(", "img", ".", "view", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", ".", "cuda", "(", ")", ")", ")", ".", "view", "(", "1", ",", "1", ",", "3200", ")", "\n", "\n", "action_in", "=", "torch", ".", "LongTensor", "(", "\n", "1", ",", "1", ")", ".", "fill_", "(", "action", "+", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "dists_to_target", ".", "append", "(", "\n", "h3d", ".", "get_dist_to_target", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ")", ")", "\n", "pos_queue", ".", "append", "(", "[", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "y", ",", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", "\n", "]", ")", "\n", "\n", "if", "episode_done", "==", "True", ":", "\n", "                                ", "break", "\n", "\n", "", "actual_pos_queue", ".", "append", "(", "[", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", "]", ")", "\n", "\n", "# compute stats", "\n", "", "metrics_slug", "[", "'d_0_'", "+", "str", "(", "i", ")", "]", "=", "dists_to_target", "[", "0", "]", "\n", "metrics_slug", "[", "'d_T_'", "+", "str", "(", "i", ")", "]", "=", "dists_to_target", "[", "-", "1", "]", "\n", "metrics_slug", "[", "'d_D_'", "+", "str", "(", "\n", "i", ")", "]", "=", "dists_to_target", "[", "0", "]", "-", "dists_to_target", "[", "-", "1", "]", "\n", "metrics_slug", "[", "'d_min_'", "+", "str", "(", "i", ")", "]", "=", "np", ".", "array", "(", "\n", "dists_to_target", ")", ".", "min", "(", ")", "\n", "metrics_slug", "[", "'ep_len_'", "+", "str", "(", "i", ")", "]", "=", "episode_length", "\n", "if", "action", "==", "3", ":", "\n", "                            ", "metrics_slug", "[", "'stop_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'stop_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "", "inside_room", "=", "[", "]", "\n", "for", "p", "in", "pos_queue", ":", "\n", "                            ", "inside_room", ".", "append", "(", "\n", "h3d", ".", "is_inside_room", "(", "\n", "p", ",", "eval_loader", ".", "dataset", ".", "target_room", ")", ")", "\n", "", "if", "inside_room", "[", "-", "1", "]", "==", "True", ":", "\n", "                            ", "metrics_slug", "[", "'r_T_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'r_T_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "", "if", "any", "(", "[", "x", "==", "True", "for", "x", "in", "inside_room", "]", ")", "==", "True", ":", "\n", "                            ", "metrics_slug", "[", "'r_e_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'r_e_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "\n", "# collate and update metrics", "\n", "", "", "metrics_list", "=", "[", "]", "\n", "for", "i", "in", "metrics", ".", "metric_names", ":", "\n", "                        ", "if", "i", "not", "in", "metrics_slug", ":", "\n", "                            ", "metrics_list", ".", "append", "(", "metrics", ".", "metrics", "[", "\n", "metrics", ".", "metric_names", ".", "index", "(", "i", ")", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "metrics_list", ".", "append", "(", "metrics_slug", "[", "i", "]", ")", "\n", "\n", "# update metrics", "\n", "", "", "metrics", ".", "update", "(", "metrics_list", ")", "\n", "\n", "", "print", "(", "metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", ")", "\n", "print", "(", "'invalids'", ",", "len", "(", "invalids", ")", ")", "\n", "logging", ".", "info", "(", "\"EVAL: init_steps: {} metrics: {}\"", ".", "format", "(", "i", ",", "metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"EVAL: init_steps: {} invalids: {}\"", ".", "format", "(", "i", ",", "len", "(", "invalids", ")", ")", ")", "\n", "\n", "# del h3d", "\n", "eval_loader", ".", "dataset", ".", "_load_envs", "(", ")", "\n", "print", "(", "\"eval_loader pruned_env_set len: {}\"", ".", "format", "(", "len", "(", "eval_loader", ".", "dataset", ".", "pruned_env_set", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"eval_loader pruned_env_set len: {}\"", ".", "format", "(", "len", "(", "eval_loader", ".", "dataset", ".", "pruned_env_set", ")", ")", ")", "\n", "assert", "len", "(", "eval_loader", ".", "dataset", ".", "pruned_env_set", ")", ">", "0", "\n", "if", "len", "(", "eval_loader", ".", "dataset", ".", "pruned_env_set", ")", "==", "0", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "elif", "'pacman'", "in", "args", ".", "model_type", ":", "\n", "\n", "            ", "done", "=", "False", "\n", "\n", "while", "done", "==", "False", ":", "\n", "                ", "if", "args", ".", "overfit", ":", "\n", "                    ", "metrics", "=", "NavMetric", "(", "\n", "info", "=", "{", "'split'", ":", "args", ".", "eval_split", ",", "\n", "'thread'", ":", "rank", "}", ",", "\n", "metric_names", "=", "[", "\n", "'d_0_10'", ",", "'d_0_30'", ",", "'d_0_50'", ",", "'d_T_10'", ",", "'d_T_30'", ",", "'d_T_50'", ",", "\n", "'d_D_10'", ",", "'d_D_30'", ",", "'d_D_50'", ",", "'d_min_10'", ",", "'d_min_30'", ",", "\n", "'d_min_50'", ",", "'r_T_10'", ",", "'r_T_30'", ",", "'r_T_50'", ",", "'r_e_10'", ",", "'r_e_30'", ",", "\n", "'r_e_50'", ",", "'stop_10'", ",", "'stop_30'", ",", "'stop_50'", ",", "'ep_len_10'", ",", "\n", "'ep_len_30'", ",", "'ep_len_50'", "\n", "]", ",", "\n", "log_json", "=", "args", ".", "output_log_path", ")", "\n", "\n", "", "for", "batch", "in", "tqdm", "(", "eval_loader", ")", ":", "\n", "\n", "                    ", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "question", ",", "answer", ",", "actions", ",", "action_length", "=", "batch", "\n", "metrics_slug", "=", "{", "}", "\n", "\n", "h3d", "=", "eval_loader", ".", "dataset", ".", "episode_house", "\n", "\n", "# evaluate at multiple initializations", "\n", "for", "i", "in", "[", "10", ",", "30", ",", "50", "]", ":", "\n", "\n", "                        ", "t", "+=", "1", "\n", "\n", "if", "i", ">", "action_length", "[", "0", "]", ":", "\n", "                            ", "invalids", ".", "append", "(", "[", "idx", "[", "0", "]", ",", "i", "]", ")", "\n", "continue", "\n", "\n", "", "question_var", "=", "Variable", "(", "question", ".", "cuda", "(", ")", ")", "\n", "\n", "controller_step", "=", "False", "\n", "planner_hidden", "=", "model", ".", "planner_nav_rnn", ".", "init_hidden", "(", "1", ")", "\n", "\n", "# get hierarchical action history", "\n", "(", "\n", "planner_actions_in", ",", "planner_img_feats", ",", "\n", "controller_step", ",", "controller_action_in", ",", "\n", "controller_img_feats", ",", "init_pos", ",", "\n", "controller_action_counter", "\n", ")", "=", "eval_loader", ".", "dataset", ".", "get_hierarchical_features_till_spawn", "(", "\n", "actions", "[", "0", ",", ":", "action_length", "[", "0", "]", "+", "1", "]", ".", "numpy", "(", ")", ",", "i", ",", "args", ".", "max_controller_actions", "\n", ")", "\n", "\n", "planner_actions_in_var", "=", "Variable", "(", "\n", "planner_actions_in", ".", "cuda", "(", ")", ")", "\n", "planner_img_feats_var", "=", "Variable", "(", "\n", "planner_img_feats", ".", "cuda", "(", ")", ")", "\n", "\n", "# forward planner till spawn to update hidden state", "\n", "for", "step", "in", "range", "(", "planner_actions_in", ".", "size", "(", "0", ")", ")", ":", "\n", "\n", "                            ", "planner_scores", ",", "planner_hidden", "=", "model", ".", "planner_step", "(", "\n", "question_var", ",", "planner_img_feats_var", "[", "step", "]", "\n", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "planner_actions_in_var", "[", "step", "]", ".", "view", "(", "1", ",", "1", ")", ",", "\n", "planner_hidden", "\n", ")", "\n", "\n", "", "h3d", ".", "env", ".", "reset", "(", "\n", "x", "=", "init_pos", "[", "0", "]", ",", "y", "=", "init_pos", "[", "2", "]", ",", "yaw", "=", "init_pos", "[", "3", "]", ")", "\n", "\n", "init_dist_to_target", "=", "h3d", ".", "get_dist_to_target", "(", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ")", "\n", "if", "init_dist_to_target", "<", "0", ":", "# unreachable", "\n", "                            ", "invalids", ".", "append", "(", "[", "idx", "[", "0", "]", ",", "i", "]", ")", "\n", "continue", "\n", "\n", "", "dists_to_target", ",", "pos_queue", ",", "pred_actions", "=", "[", "\n", "init_dist_to_target", "\n", "]", ",", "[", "init_pos", "]", ",", "[", "]", "\n", "planner_actions", ",", "controller_actions", "=", "[", "]", ",", "[", "]", "\n", "\n", "episode_length", "=", "0", "\n", "if", "args", ".", "max_controller_actions", ">", "1", ":", "\n", "                            ", "controller_action_counter", "=", "controller_action_counter", "%", "args", ".", "max_controller_actions", "\n", "controller_action_counter", "=", "max", "(", "controller_action_counter", "-", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "                            ", "controller_action_counter", "=", "0", "\n", "\n", "", "first_step", "=", "True", "\n", "first_step_is_controller", "=", "controller_step", "\n", "planner_step", "=", "True", "\n", "action", "=", "int", "(", "controller_action_in", ")", "\n", "\n", "for", "step", "in", "range", "(", "args", ".", "max_episode_length", ")", ":", "\n", "                            ", "if", "not", "first_step", ":", "\n", "                                ", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "\n", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "/", "255.0", "\n", "img_feat_var", "=", "eval_loader", ".", "dataset", ".", "cnn", "(", "\n", "Variable", "(", "img", ".", "view", "(", "1", ",", "3", ",", "224", ",", "\n", "224", ")", ".", "cuda", "(", ")", ")", ")", ".", "view", "(", "\n", "1", ",", "1", ",", "3200", ")", "\n", "", "else", ":", "\n", "                                ", "img_feat_var", "=", "Variable", "(", "controller_img_feats", ".", "cuda", "(", ")", ")", ".", "view", "(", "1", ",", "1", ",", "3200", ")", "\n", "\n", "", "if", "not", "first_step", "or", "first_step_is_controller", ":", "\n", "# query controller to continue or not", "\n", "                                ", "controller_action_in", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "1", ",", "1", ")", ".", "fill_", "(", "action", ")", ".", "cuda", "(", ")", ")", "\n", "controller_scores", "=", "model", ".", "controller_step", "(", "\n", "img_feat_var", ",", "controller_action_in", ",", "\n", "planner_hidden", "[", "0", "]", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "controller_scores", ",", "dim", "=", "1", ")", "\n", "controller_action", "=", "int", "(", "\n", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "if", "controller_action", "==", "1", "and", "controller_action_counter", "<", "args", ".", "max_controller_actions", "-", "1", ":", "\n", "                                    ", "controller_action_counter", "+=", "1", "\n", "planner_step", "=", "False", "\n", "", "else", ":", "\n", "                                    ", "controller_action_counter", "=", "0", "\n", "planner_step", "=", "True", "\n", "controller_action", "=", "0", "\n", "\n", "", "controller_actions", ".", "append", "(", "controller_action", ")", "\n", "first_step", "=", "False", "\n", "\n", "", "if", "planner_step", ":", "\n", "                                ", "if", "not", "first_step", ":", "\n", "                                    ", "action_in", "=", "torch", ".", "LongTensor", "(", "\n", "1", ",", "1", ")", ".", "fill_", "(", "action", "+", "1", ")", ".", "cuda", "(", ")", "\n", "planner_scores", ",", "planner_hidden", "=", "model", ".", "planner_step", "(", "\n", "question_var", ",", "img_feat_var", ",", "\n", "Variable", "(", "action_in", ")", ",", "planner_hidden", ")", "\n", "\n", "", "prob", "=", "F", ".", "softmax", "(", "planner_scores", ",", "dim", "=", "1", ")", "\n", "action", "=", "int", "(", "\n", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "planner_actions", ".", "append", "(", "action", ")", "\n", "\n", "", "episode_done", "=", "action", "==", "3", "or", "episode_length", ">=", "args", ".", "max_episode_length", "\n", "\n", "episode_length", "+=", "1", "\n", "dists_to_target", ".", "append", "(", "\n", "h3d", ".", "get_dist_to_target", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ")", ")", "\n", "pos_queue", ".", "append", "(", "[", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "y", ",", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", "\n", "]", ")", "\n", "\n", "if", "episode_done", ":", "\n", "                                ", "break", "\n", "\n", "", "img", ",", "_", ",", "_", "=", "h3d", ".", "step", "(", "action", ")", "\n", "first_step", "=", "False", "\n", "\n", "# compute stats", "\n", "", "metrics_slug", "[", "'d_0_'", "+", "str", "(", "i", ")", "]", "=", "dists_to_target", "[", "0", "]", "\n", "metrics_slug", "[", "'d_T_'", "+", "str", "(", "i", ")", "]", "=", "dists_to_target", "[", "-", "1", "]", "\n", "metrics_slug", "[", "'d_D_'", "+", "str", "(", "\n", "i", ")", "]", "=", "dists_to_target", "[", "0", "]", "-", "dists_to_target", "[", "-", "1", "]", "\n", "metrics_slug", "[", "'d_min_'", "+", "str", "(", "i", ")", "]", "=", "np", ".", "array", "(", "\n", "dists_to_target", ")", ".", "min", "(", ")", "\n", "metrics_slug", "[", "'ep_len_'", "+", "str", "(", "i", ")", "]", "=", "episode_length", "\n", "if", "action", "==", "3", ":", "\n", "                            ", "metrics_slug", "[", "'stop_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'stop_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "", "inside_room", "=", "[", "]", "\n", "for", "p", "in", "pos_queue", ":", "\n", "                            ", "inside_room", ".", "append", "(", "\n", "h3d", ".", "is_inside_room", "(", "\n", "p", ",", "eval_loader", ".", "dataset", ".", "target_room", ")", ")", "\n", "", "if", "inside_room", "[", "-", "1", "]", "==", "True", ":", "\n", "                            ", "metrics_slug", "[", "'r_T_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'r_T_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "", "if", "any", "(", "[", "x", "==", "True", "for", "x", "in", "inside_room", "]", ")", "==", "True", ":", "\n", "                            ", "metrics_slug", "[", "'r_e_'", "+", "str", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "metrics_slug", "[", "'r_e_'", "+", "str", "(", "i", ")", "]", "=", "0", "\n", "\n", "# collate and update metrics", "\n", "", "", "metrics_list", "=", "[", "]", "\n", "for", "i", "in", "metrics", ".", "metric_names", ":", "\n", "                        ", "if", "i", "not", "in", "metrics_slug", ":", "\n", "                            ", "metrics_list", ".", "append", "(", "metrics", ".", "metrics", "[", "\n", "metrics", ".", "metric_names", ".", "index", "(", "i", ")", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "metrics_list", ".", "append", "(", "metrics_slug", "[", "i", "]", ")", "\n", "\n", "# update metrics", "\n", "", "", "metrics", ".", "update", "(", "metrics_list", ")", "\n", "\n", "", "try", ":", "\n", "                    ", "print", "(", "metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", ")", "\n", "logging", ".", "info", "(", "\"EVAL: metrics: {}\"", ".", "format", "(", "metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", ")", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "\n", "", "print", "(", "'epoch'", ",", "epoch", ")", "\n", "print", "(", "'invalids'", ",", "len", "(", "invalids", ")", ")", "\n", "logging", ".", "info", "(", "\"EVAL: epoch {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "logging", ".", "info", "(", "\"EVAL: invalids {}\"", ".", "format", "(", "invalids", ")", ")", "\n", "\n", "# del h3d", "\n", "eval_loader", ".", "dataset", ".", "_load_envs", "(", ")", "\n", "if", "len", "(", "eval_loader", ".", "dataset", ".", "pruned_env_set", ")", "==", "0", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "epoch", "+=", "1", "\n", "\n", "# checkpoint if best val loss", "\n", "if", "metrics", ".", "metrics", "[", "8", "]", "[", "0", "]", ">", "best_eval_acc", ":", "# d_D_50", "\n", "            ", "best_eval_acc", "=", "metrics", ".", "metrics", "[", "8", "]", "[", "0", "]", "\n", "if", "epoch", "%", "args", ".", "eval_every", "==", "0", "and", "args", ".", "log", "==", "True", ":", "\n", "                ", "metrics", ".", "dump_log", "(", ")", "\n", "\n", "model_state", "=", "get_state", "(", "model", ")", "\n", "\n", "aad", "=", "dict", "(", "args", ".", "__dict__", ")", "\n", "ad", "=", "{", "}", "\n", "for", "i", "in", "aad", ":", "\n", "                    ", "if", "i", "[", "0", "]", "!=", "'_'", ":", "\n", "                        ", "ad", "[", "i", "]", "=", "aad", "[", "i", "]", "\n", "\n", "", "", "checkpoint", "=", "{", "'args'", ":", "ad", ",", "'state'", ":", "model_state", ",", "'epoch'", ":", "epoch", "}", "\n", "\n", "checkpoint_path", "=", "'%s/epoch_%d_d_D_50_%.04f.pt'", "%", "(", "\n", "args", ".", "checkpoint_dir", ",", "epoch", ",", "best_eval_acc", ")", "\n", "print", "(", "'Saving checkpoint to %s'", "%", "checkpoint_path", ")", "\n", "logging", ".", "info", "(", "\"EVAL: Saving checkpoint to {}\"", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "\n", "", "", "print", "(", "'[best_eval_d_D_50:%.04f]'", "%", "best_eval_acc", ")", "\n", "logging", ".", "info", "(", "\"EVAL: [best_eval_d_D_50:{:.04f}]\"", ".", "format", "(", "best_eval_acc", ")", ")", "\n", "\n", "eval_loader", ".", "dataset", ".", "_load_envs", "(", "start_idx", "=", "0", ",", "in_order", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.train": [[729, 1139], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.optim.Adamax", "torch.optim.Adamax", "torch.optim.Adamax", "torch.optim.Adamax", "os.path.join", "data.EqaDataLoader", "print", "logging.info", "args.gpus.index", "models.NavCnnModel", "filter", "metrics.NavMetric", "metrics.NavMetric", "int", "models.NavCnnModel", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "shared_model.parameters", "len", "len", "data.EqaDataLoader.dataset._check_if_all_envs_loaded", "models.get_state", "torch.optim.Adamax.state_dict", "dict", "print", "logging.info", "torch.save", "torch.save", "torch.save", "torch.save", "data.load_vocab", "models.NavCnnRnnModel", "str", "models.MaskedNLLCriterion().cuda", "data.EqaDataLoader.dataset._check_if_all_envs_loaded", "models.NavCnnRnnMultModel", "len", "models.NavPlannerControllerModel.load_state_dict", "models.NavPlannerControllerModel.train", "models.NavPlannerControllerModel.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "MaskedNLLCriterion().cuda.", "torch.optim.Adamax.zero_grad", "metrics.NavMetric.update", "lossFn.backward", "models.ensure_shared_grads", "torch.optim.Adamax.step", "print", "logging.info", "data.EqaDataLoader.dataset._load_envs", "time.time", "time.time", "models.MaskedNLLCriterion().cuda", "models.MaskedNLLCriterion().cuda", "data.EqaDataLoader.dataset._check_if_all_envs_loaded", "len", "data.load_vocab", "models.NavCnnRnnModel", "shared_model.state_dict", "img_feats.cuda", "torch.autograd.Variable", "actions_out.cuda", "models.NavPlannerControllerModel.", "models.NavPlannerControllerModel.", "models.NavPlannerControllerModel.cpu", "print", "logging.info", "len", "models.MaskedNLLCriterion", "models.NavPlannerControllerModel.load_state_dict", "models.NavPlannerControllerModel.train", "models.NavPlannerControllerModel.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "action_lengths.cuda.cuda", "torch.autograd.Variable", "action_lengths.cuda.sort", "torch.log_softmax", "MaskedNLLCriterion().cuda.", "torch.optim.Adamax.zero_grad", "metrics.NavMetric.update", "logging.info", "lossFn.backward", "models.ensure_shared_grads", "torch.optim.Adamax.step", "print", "logging.info", "data.EqaDataLoader.dataset._load_envs", "data.load_vocab", "models.NavPlannerControllerModel", "exit", "questions.cuda", "metrics.NavMetric.get_stat_string", "metrics.NavMetric.dump_log", "len", "len", "data.EqaDataLoader.dataset._load_envs", "shared_model.state_dict", "img_feats.cuda", "torch.autograd.Variable", "actions_in.cuda", "actions_out.cuda", "masks.cuda", "models.NavPlannerControllerModel.", "models.NavPlannerControllerModel.", "enumerate", "actions_out_var[].contiguous().view", "masks_var[].contiguous().view", "models.NavPlannerControllerModel.cpu", "print", "logging.info", "len", "models.MaskedNLLCriterion", "models.MaskedNLLCriterion", "models.NavPlannerControllerModel.load_state_dict", "models.NavPlannerControllerModel.train", "models.NavPlannerControllerModel.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "planner_action_lengths.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "controller_action_lengths.cuda.cuda", "torch.autograd.Variable", "planner_action_lengths.cuda.sort", "models.NavPlannerControllerModel.", "torch.log_softmax", "torch.log_softmax", "MaskedNLLCriterion().cuda.", "MaskedNLLCriterion().cuda.", "torch.optim.Adamax.zero_grad", "metrics.NavMetric.update", "logging.info", "models.ensure_shared_grads", "torch.optim.Adamax.step", "print", "logging.info", "data.EqaDataLoader.dataset._load_envs", "data.load_vocab", "metrics.NavMetric.get_stat_string", "len", "len", "questions.cuda", "action_lengths.cuda.cpu().numpy", "action_lengths.cuda.cpu().numpy", "metrics.NavMetric.get_stat_string", "metrics.NavMetric.dump_log", "len", "len", "data.EqaDataLoader.dataset._load_envs", "shared_model.state_dict", "questions.cuda", "planner_img_feats.cuda", "planner_actions_in.cuda", "planner_actions_out.cuda", "planner_masks.cuda", "controller_img_feats.cuda", "controller_actions_in.cuda", "planner_hidden_idx.cuda", "controller_outs.cuda", "controller_masks.cuda", "planner_action_lengths.cuda.cpu().numpy", "planner_actions_out_var[].contiguous().view", "planner_masks_var[].contiguous().view", "controller_outs_var[].contiguous().view", "controller_masks_var[].contiguous().view", "planner_lossFn.backward", "models.NavPlannerControllerModel.cpu", "print", "logging.info", "len", "actions_out_var[].contiguous", "masks_var[].contiguous", "metrics.NavMetric.get_stat_string", "len", "len", "metrics.NavMetric.get_stat_string", "metrics.NavMetric.dump_log", "len", "len", "data.EqaDataLoader.dataset._load_envs", "action_lengths.cuda.cpu", "action_lengths.cuda.cpu", "planner_action_lengths.cuda.cpu", "planner_actions_out_var[].contiguous", "planner_masks_var[].contiguous", "controller_outs_var[].contiguous", "controller_masks_var[].contiguous", "metrics.NavMetric.get_stat_string", "len", "len", "action_lengths.cuda.max", "action_lengths.cuda.max", "planner_action_lengths.cuda.max", "planner_action_lengths.cuda.max", "controller_action_lengths.cuda.max", "controller_action_lengths.cuda.max"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.filter", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._check_if_all_envs_loaded", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.get_state", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._check_if_all_envs_loaded", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.train", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.ensure_shared_grads", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._check_if_all_envs_loaded", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.train", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.ensure_shared_grads", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.train_nav.train", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.models.ensure_shared_grads", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.load_vocab", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.data.EqaDataset._load_envs", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.training.metrics.Metric.get_stat_string"], ["", "", "def", "train", "(", "rank", ",", "args", ",", "shared_model", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpus", ".", "index", "(", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ")", ")", "\n", "\n", "if", "args", ".", "model_type", "==", "'cnn'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "}", "\n", "model", "=", "NavCnnModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'cnn+q'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "\n", "'question_input'", ":", "True", ",", "\n", "'question_vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "\n", "}", "\n", "model", "=", "NavCnnModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'lstm'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "}", "\n", "model", "=", "NavCnnRnnModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'lstm-mult+q'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "\n", "'question_input'", ":", "True", ",", "\n", "'question_vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "\n", "}", "\n", "model", "=", "NavCnnRnnMultModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'lstm+q'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "\n", "'question_input'", ":", "True", ",", "\n", "'question_vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "\n", "}", "\n", "model", "=", "NavCnnRnnModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'pacman'", ":", "\n", "\n", "        ", "model_kwargs", "=", "{", "'question_vocab'", ":", "load_vocab", "(", "args", ".", "vocab_json", ")", "}", "\n", "model", "=", "NavPlannerControllerModel", "(", "**", "model_kwargs", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "exit", "(", ")", "\n", "\n", "", "lossFn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "optim", "=", "torch", ".", "optim", ".", "Adamax", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "shared_model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ")", "\n", "\n", "train_loader_kwargs", "=", "{", "\n", "'questions_h5'", ":", "args", ".", "train_h5", ",", "\n", "'data_json'", ":", "args", ".", "data_json", ",", "\n", "'vocab'", ":", "args", ".", "vocab_json", ",", "\n", "'batch_size'", ":", "args", ".", "batch_size", ",", "\n", "'input_type'", ":", "args", ".", "model_type", ",", "\n", "'num_frames'", ":", "5", ",", "\n", "'map_resolution'", ":", "args", ".", "map_resolution", ",", "\n", "'split'", ":", "'train'", ",", "\n", "'max_threads_per_gpu'", ":", "args", ".", "max_threads_per_gpu", ",", "\n", "'gpu_id'", ":", "args", ".", "gpus", "[", "rank", "%", "len", "(", "args", ".", "gpus", ")", "]", ",", "\n", "'to_cache'", ":", "args", ".", "cache", ",", "\n", "'overfit'", ":", "args", ".", "overfit", ",", "\n", "'max_controller_actions'", ":", "args", ".", "max_controller_actions", ",", "\n", "'max_actions'", ":", "args", ".", "max_actions", "\n", "}", "\n", "\n", "args", ".", "output_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\n", "'train_'", "+", "str", "(", "rank", ")", "+", "'.json'", ")", "\n", "\n", "if", "'pacman'", "in", "args", ".", "model_type", ":", "\n", "\n", "        ", "metrics", "=", "NavMetric", "(", "\n", "info", "=", "{", "'split'", ":", "'train'", ",", "\n", "'thread'", ":", "rank", "}", ",", "\n", "metric_names", "=", "[", "'planner_loss'", ",", "'controller_loss'", "]", ",", "\n", "log_json", "=", "args", ".", "output_log_path", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "metrics", "=", "NavMetric", "(", "\n", "info", "=", "{", "'split'", ":", "'train'", ",", "\n", "'thread'", ":", "rank", "}", ",", "\n", "metric_names", "=", "[", "'loss'", "]", ",", "\n", "log_json", "=", "args", ".", "output_log_path", ")", "\n", "\n", "", "train_loader", "=", "EqaDataLoader", "(", "**", "train_loader_kwargs", ")", "\n", "\n", "print", "(", "'train_loader has %d samples'", "%", "len", "(", "train_loader", ".", "dataset", ")", ")", "\n", "logging", ".", "info", "(", "'TRAIN: train loader has {} samples'", ".", "format", "(", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "t", ",", "epoch", "=", "0", ",", "0", "\n", "\n", "while", "epoch", "<", "int", "(", "args", ".", "max_epochs", ")", ":", "\n", "\n", "        ", "if", "'cnn'", "in", "args", ".", "model_type", ":", "\n", "\n", "            ", "done", "=", "False", "\n", "all_envs_loaded", "=", "train_loader", ".", "dataset", ".", "_check_if_all_envs_loaded", "(", ")", "\n", "\n", "while", "done", "==", "False", ":", "\n", "\n", "                ", "for", "batch", "in", "train_loader", ":", "\n", "\n", "                    ", "t", "+=", "1", "\n", "\n", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "questions", ",", "_", ",", "img_feats", ",", "_", ",", "actions_out", ",", "_", "=", "batch", "\n", "\n", "img_feats_var", "=", "Variable", "(", "img_feats", ".", "cuda", "(", ")", ")", "\n", "if", "'+q'", "in", "args", ".", "model_type", ":", "\n", "                        ", "questions_var", "=", "Variable", "(", "questions", ".", "cuda", "(", ")", ")", "\n", "", "actions_out_var", "=", "Variable", "(", "actions_out", ".", "cuda", "(", ")", ")", "\n", "\n", "if", "'+q'", "in", "args", ".", "model_type", ":", "\n", "                        ", "scores", "=", "model", "(", "img_feats_var", ",", "questions_var", ")", "\n", "", "else", ":", "\n", "                        ", "scores", "=", "model", "(", "img_feats_var", ")", "\n", "\n", "", "loss", "=", "lossFn", "(", "scores", ",", "actions_out_var", ")", "\n", "\n", "# zero grad", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "# update metrics", "\n", "metrics", ".", "update", "(", "[", "loss", ".", "data", "[", "0", "]", "]", ")", "\n", "\n", "# backprop and update", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "ensure_shared_grads", "(", "model", ".", "cpu", "(", ")", ",", "shared_model", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "if", "t", "%", "args", ".", "print_every", "==", "0", ":", "\n", "                        ", "print", "(", "metrics", ".", "get_stat_string", "(", ")", ")", "\n", "logging", ".", "info", "(", "\"TRAIN: metrics: {}\"", ".", "format", "(", "metrics", ".", "get_stat_string", "(", ")", ")", ")", "\n", "if", "args", ".", "log", "==", "True", ":", "\n", "                            ", "metrics", ".", "dump_log", "(", ")", "\n", "\n", "", "", "print", "(", "'[CHECK][Cache:%d][Total:%d]'", "%", "\n", "(", "len", "(", "train_loader", ".", "dataset", ".", "img_data_cache", ")", ",", "\n", "len", "(", "train_loader", ".", "dataset", ".", "env_list", ")", ")", ")", "\n", "logging", ".", "info", "(", "'TRAIN: [CHECK][Cache:{}][Total:{}]'", ".", "format", "(", "\n", "len", "(", "train_loader", ".", "dataset", ".", "img_data_cache", ")", ",", "len", "(", "train_loader", ".", "dataset", ".", "env_list", ")", ")", ")", "\n", "\n", "", "if", "all_envs_loaded", "==", "False", ":", "\n", "                    ", "train_loader", ".", "dataset", ".", "_load_envs", "(", "in_order", "=", "True", ")", "\n", "if", "len", "(", "train_loader", ".", "dataset", ".", "pruned_env_set", ")", "==", "0", ":", "\n", "                        ", "done", "=", "True", "\n", "if", "args", ".", "cache", "==", "False", ":", "\n", "                            ", "train_loader", ".", "dataset", ".", "_load_envs", "(", "\n", "start_idx", "=", "0", ",", "in_order", "=", "True", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "elif", "'lstm'", "in", "args", ".", "model_type", ":", "\n", "\n", "            ", "lossFn", "=", "MaskedNLLCriterion", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "done", "=", "False", "\n", "all_envs_loaded", "=", "train_loader", ".", "dataset", ".", "_check_if_all_envs_loaded", "(", ")", "\n", "total_times", "=", "[", "]", "\n", "while", "done", "==", "False", ":", "\n", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", "in", "train_loader", ":", "\n", "\n", "                    ", "t", "+=", "1", "\n", "\n", "\n", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "questions", ",", "_", ",", "img_feats", ",", "actions_in", ",", "actions_out", ",", "action_lengths", ",", "masks", "=", "batch", "\n", "\n", "img_feats_var", "=", "Variable", "(", "img_feats", ".", "cuda", "(", ")", ")", "\n", "if", "'+q'", "in", "args", ".", "model_type", ":", "\n", "                        ", "questions_var", "=", "Variable", "(", "questions", ".", "cuda", "(", ")", ")", "\n", "", "actions_in_var", "=", "Variable", "(", "actions_in", ".", "cuda", "(", ")", ")", "\n", "actions_out_var", "=", "Variable", "(", "actions_out", ".", "cuda", "(", ")", ")", "\n", "action_lengths", "=", "action_lengths", ".", "cuda", "(", ")", "\n", "masks_var", "=", "Variable", "(", "masks", ".", "cuda", "(", ")", ")", "\n", "\n", "action_lengths", ",", "perm_idx", "=", "action_lengths", ".", "sort", "(", "\n", "0", ",", "descending", "=", "True", ")", "\n", "\n", "img_feats_var", "=", "img_feats_var", "[", "perm_idx", "]", "\n", "if", "'+q'", "in", "args", ".", "model_type", ":", "\n", "                        ", "questions_var", "=", "questions_var", "[", "perm_idx", "]", "\n", "", "actions_in_var", "=", "actions_in_var", "[", "perm_idx", "]", "\n", "actions_out_var", "=", "actions_out_var", "[", "perm_idx", "]", "\n", "masks_var", "=", "masks_var", "[", "perm_idx", "]", "\n", "\n", "if", "'+q'", "in", "args", ".", "model_type", ":", "\n", "                        ", "scores", ",", "hidden", "=", "model", "(", "img_feats_var", ",", "questions_var", ",", "\n", "actions_in_var", ",", "\n", "action_lengths", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "scores", ",", "hidden", "=", "model", "(", "img_feats_var", ",", "False", ",", "\n", "actions_in_var", ",", "\n", "action_lengths", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "#block out masks", "\n", "", "if", "args", ".", "curriculum", ":", "\n", "                        ", "curriculum_length", "=", "(", "epoch", "+", "1", ")", "*", "5", "\n", "for", "i", ",", "action_length", "in", "enumerate", "(", "action_lengths", ")", ":", "\n", "                            ", "if", "action_length", "-", "curriculum_length", ">", "0", ":", "\n", "                                ", "masks_var", "[", "i", ",", ":", "action_length", "-", "curriculum_length", "]", "=", "0", "\n", "\n", "", "", "", "logprob", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "loss", "=", "lossFn", "(", "\n", "logprob", ",", "actions_out_var", "[", ":", ",", ":", "action_lengths", ".", "max", "(", ")", "]", "\n", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "masks_var", "[", ":", ",", ":", "action_lengths", ".", "max", "(", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ")", "\n", "\n", "# zero grad", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "# update metrics", "\n", "metrics", ".", "update", "(", "[", "loss", ".", "data", "[", "0", "]", "]", ")", "\n", "logging", ".", "info", "(", "\"TRAIN LSTM loss: {:.6f}\"", ".", "format", "(", "loss", ".", "data", "[", "0", "]", ")", ")", "\n", "\n", "# backprop and update", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "ensure_shared_grads", "(", "model", ".", "cpu", "(", ")", ",", "shared_model", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "if", "t", "%", "args", ".", "print_every", "==", "0", ":", "\n", "                        ", "print", "(", "metrics", ".", "get_stat_string", "(", ")", ")", "\n", "logging", ".", "info", "(", "\"TRAIN: metrics: {}\"", ".", "format", "(", "metrics", ".", "get_stat_string", "(", ")", ")", ")", "\n", "if", "args", ".", "log", "==", "True", ":", "\n", "                            ", "metrics", ".", "dump_log", "(", ")", "\n", "\n", "", "", "print", "(", "'[CHECK][Cache:%d][Total:%d]'", "%", "\n", "(", "len", "(", "train_loader", ".", "dataset", ".", "img_data_cache", ")", ",", "\n", "len", "(", "train_loader", ".", "dataset", ".", "env_list", ")", ")", ")", "\n", "logging", ".", "info", "(", "'TRAIN: [CHECK][Cache:{}][Total:{}]'", ".", "format", "(", "\n", "len", "(", "train_loader", ".", "dataset", ".", "img_data_cache", ")", ",", "len", "(", "train_loader", ".", "dataset", ".", "env_list", ")", ")", ")", "\n", "\n", "\n", "", "if", "all_envs_loaded", "==", "False", ":", "\n", "                    ", "train_loader", ".", "dataset", ".", "_load_envs", "(", "in_order", "=", "True", ")", "\n", "if", "len", "(", "train_loader", ".", "dataset", ".", "pruned_env_set", ")", "==", "0", ":", "\n", "                        ", "done", "=", "True", "\n", "if", "args", ".", "cache", "==", "False", ":", "\n", "                            ", "train_loader", ".", "dataset", ".", "_load_envs", "(", "\n", "start_idx", "=", "0", ",", "in_order", "=", "True", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "elif", "'pacman'", "in", "args", ".", "model_type", ":", "\n", "\n", "            ", "planner_lossFn", "=", "MaskedNLLCriterion", "(", ")", ".", "cuda", "(", ")", "\n", "controller_lossFn", "=", "MaskedNLLCriterion", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "done", "=", "False", "\n", "all_envs_loaded", "=", "train_loader", ".", "dataset", ".", "_check_if_all_envs_loaded", "(", ")", "\n", "\n", "while", "done", "==", "False", ":", "\n", "\n", "                ", "for", "batch", "in", "train_loader", ":", "\n", "\n", "                    ", "t", "+=", "1", "\n", "\n", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "idx", ",", "questions", ",", "_", ",", "planner_img_feats", ",", "planner_actions_in", ",", "planner_actions_out", ",", "planner_action_lengths", ",", "planner_masks", ",", "controller_img_feats", ",", "controller_actions_in", ",", "planner_hidden_idx", ",", "controller_outs", ",", "controller_action_lengths", ",", "controller_masks", "=", "batch", "\n", "\n", "questions_var", "=", "Variable", "(", "questions", ".", "cuda", "(", ")", ")", "\n", "\n", "planner_img_feats_var", "=", "Variable", "(", "planner_img_feats", ".", "cuda", "(", ")", ")", "\n", "planner_actions_in_var", "=", "Variable", "(", "\n", "planner_actions_in", ".", "cuda", "(", ")", ")", "\n", "planner_actions_out_var", "=", "Variable", "(", "\n", "planner_actions_out", ".", "cuda", "(", ")", ")", "\n", "planner_action_lengths", "=", "planner_action_lengths", ".", "cuda", "(", ")", "\n", "planner_masks_var", "=", "Variable", "(", "planner_masks", ".", "cuda", "(", ")", ")", "\n", "\n", "controller_img_feats_var", "=", "Variable", "(", "\n", "controller_img_feats", ".", "cuda", "(", ")", ")", "\n", "controller_actions_in_var", "=", "Variable", "(", "\n", "controller_actions_in", ".", "cuda", "(", ")", ")", "\n", "planner_hidden_idx_var", "=", "Variable", "(", "\n", "planner_hidden_idx", ".", "cuda", "(", ")", ")", "\n", "controller_outs_var", "=", "Variable", "(", "controller_outs", ".", "cuda", "(", ")", ")", "\n", "controller_action_lengths", "=", "controller_action_lengths", ".", "cuda", "(", "\n", ")", "\n", "controller_masks_var", "=", "Variable", "(", "controller_masks", ".", "cuda", "(", ")", ")", "\n", "\n", "planner_action_lengths", ",", "perm_idx", "=", "planner_action_lengths", ".", "sort", "(", "\n", "0", ",", "descending", "=", "True", ")", "\n", "\n", "questions_var", "=", "questions_var", "[", "perm_idx", "]", "\n", "\n", "planner_img_feats_var", "=", "planner_img_feats_var", "[", "perm_idx", "]", "\n", "planner_actions_in_var", "=", "planner_actions_in_var", "[", "perm_idx", "]", "\n", "planner_actions_out_var", "=", "planner_actions_out_var", "[", "perm_idx", "]", "\n", "planner_masks_var", "=", "planner_masks_var", "[", "perm_idx", "]", "\n", "\n", "controller_img_feats_var", "=", "controller_img_feats_var", "[", "\n", "perm_idx", "]", "\n", "controller_actions_in_var", "=", "controller_actions_in_var", "[", "\n", "perm_idx", "]", "\n", "controller_outs_var", "=", "controller_outs_var", "[", "perm_idx", "]", "\n", "planner_hidden_idx_var", "=", "planner_hidden_idx_var", "[", "perm_idx", "]", "\n", "controller_action_lengths", "=", "controller_action_lengths", "[", "\n", "perm_idx", "]", "\n", "controller_masks_var", "=", "controller_masks_var", "[", "perm_idx", "]", "\n", "\n", "planner_scores", ",", "controller_scores", ",", "planner_hidden", "=", "model", "(", "\n", "questions_var", ",", "planner_img_feats_var", ",", "\n", "planner_actions_in_var", ",", "\n", "planner_action_lengths", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "planner_hidden_idx_var", ",", "controller_img_feats_var", ",", "\n", "controller_actions_in_var", ",", "controller_action_lengths", ")", "\n", "\n", "planner_logprob", "=", "F", ".", "log_softmax", "(", "planner_scores", ",", "dim", "=", "1", ")", "\n", "controller_logprob", "=", "F", ".", "log_softmax", "(", "\n", "controller_scores", ",", "dim", "=", "1", ")", "\n", "\n", "planner_loss", "=", "planner_lossFn", "(", "\n", "planner_logprob", ",", "\n", "planner_actions_out_var", "[", ":", ",", ":", "planner_action_lengths", ".", "max", "(", "\n", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "planner_masks_var", "[", ":", ",", ":", "planner_action_lengths", ".", "max", "(", ")", "]", "\n", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "controller_loss", "=", "controller_lossFn", "(", "\n", "controller_logprob", ",", "\n", "controller_outs_var", "[", ":", ",", ":", "controller_action_lengths", ".", "max", "(", "\n", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "controller_masks_var", "[", ":", ",", ":", "controller_action_lengths", ".", "max", "(", "\n", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "# zero grad", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "# update metrics", "\n", "metrics", ".", "update", "(", "\n", "[", "planner_loss", ".", "data", "[", "0", "]", ",", "controller_loss", ".", "data", "[", "0", "]", "]", ")", "\n", "logging", ".", "info", "(", "\"TRAINING PACMAN planner-loss: {:.6f} controller-loss: {:.6f}\"", ".", "format", "(", "\n", "planner_loss", ".", "data", "[", "0", "]", ",", "controller_loss", ".", "data", "[", "0", "]", ")", ")", "\n", "\n", "# backprop and update", "\n", "if", "args", ".", "max_controller_actions", "==", "1", ":", "\n", "                        ", "(", "planner_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "                        ", "(", "planner_loss", "+", "controller_loss", ")", ".", "backward", "(", ")", "\n", "\n", "", "ensure_shared_grads", "(", "model", ".", "cpu", "(", ")", ",", "shared_model", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "if", "t", "%", "args", ".", "print_every", "==", "0", ":", "\n", "                        ", "print", "(", "metrics", ".", "get_stat_string", "(", ")", ")", "\n", "logging", ".", "info", "(", "\"TRAIN: metrics: {}\"", ".", "format", "(", "metrics", ".", "get_stat_string", "(", ")", ")", ")", "\n", "if", "args", ".", "log", "==", "True", ":", "\n", "                            ", "metrics", ".", "dump_log", "(", ")", "\n", "\n", "", "", "print", "(", "'[CHECK][Cache:%d][Total:%d]'", "%", "\n", "(", "len", "(", "train_loader", ".", "dataset", ".", "img_data_cache", ")", ",", "\n", "len", "(", "train_loader", ".", "dataset", ".", "env_list", ")", ")", ")", "\n", "logging", ".", "info", "(", "'TRAIN: [CHECK][Cache:{}][Total:{}]'", ".", "format", "(", "\n", "len", "(", "train_loader", ".", "dataset", ".", "img_data_cache", ")", ",", "len", "(", "train_loader", ".", "dataset", ".", "env_list", ")", ")", ")", "\n", "\n", "", "if", "all_envs_loaded", "==", "False", ":", "\n", "                    ", "train_loader", ".", "dataset", ".", "_load_envs", "(", "in_order", "=", "True", ")", "\n", "if", "len", "(", "train_loader", ".", "dataset", ".", "pruned_env_set", ")", "==", "0", ":", "\n", "                        ", "done", "=", "True", "\n", "if", "args", ".", "cache", "==", "False", ":", "\n", "                            ", "train_loader", ".", "dataset", ".", "_load_envs", "(", "\n", "start_idx", "=", "0", ",", "in_order", "=", "True", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "epoch", "+=", "1", "\n", "\n", "if", "epoch", "%", "args", ".", "save_every", "==", "0", ":", "\n", "\n", "            ", "model_state", "=", "get_state", "(", "model", ")", "\n", "optimizer_state", "=", "optim", ".", "state_dict", "(", ")", "\n", "\n", "aad", "=", "dict", "(", "args", ".", "__dict__", ")", "\n", "ad", "=", "{", "}", "\n", "for", "i", "in", "aad", ":", "\n", "                ", "if", "i", "[", "0", "]", "!=", "'_'", ":", "\n", "                    ", "ad", "[", "i", "]", "=", "aad", "[", "i", "]", "\n", "\n", "", "", "checkpoint", "=", "{", "'args'", ":", "ad", ",", "\n", "'state'", ":", "model_state", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'optimizer'", ":", "optimizer_state", "}", "\n", "\n", "checkpoint_path", "=", "'%s/epoch_%d_thread_%d.pt'", "%", "(", "\n", "args", ".", "checkpoint_dir", ",", "epoch", ",", "rank", ")", "\n", "print", "(", "'Saving checkpoint to %s'", "%", "checkpoint_path", ")", "\n", "logging", ".", "info", "(", "\"TRAIN: Saving checkpoint to {}\"", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.shortest-path-gen.generate-paths-a-star.heuristic_estimate": [[21, 23], ["numpy.sqrt"], "function", ["None"], ["def", "heuristic_estimate", "(", "agent_continous", ",", "target_continous", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "(", "agent_continous", "[", "0", "]", "-", "target_continous", "[", "0", "]", ")", "**", "2", "+", "(", "agent_continous", "[", "1", "]", "-", "target_continous", "[", "1", "]", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.shortest-path-gen.generate-paths-a-star.add_neighbors": [[25, 62], ["h3d.env.reset", "h3d.env.move_forward", "all", "h3d.env.house.to_grid", "h3d.env.reset", "h3d.env.rotate", "heapq.heappush", "heapq.heappush", "generate-paths-a-star.heuristic_estimate", "generate-paths-a-star.heuristic_estimate", "numpy.abs", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.shortest-path-gen.generate-paths-a-star.heuristic_estimate", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.shortest-path-gen.generate-paths-a-star.heuristic_estimate"], ["", "def", "add_neighbors", "(", "h3d", ",", "points_queue", ",", "point", ",", "distances_source", ",", "prev_pos", ",", "target_continous", ")", ":", "\n", "    ", "dist", "=", "distances_source", "[", "point", "[", ":", "3", "]", "]", "\n", "\n", "# check and add edges for angle movements", "\n", "for", "angle", "in", "[", "h3d", ".", "rotation_sensitivity", ",", "-", "h3d", ".", "rotation_sensitivity", "]", ":", "\n", "        ", "h3d", ".", "env", ".", "reset", "(", "x", "=", "point", "[", "3", "]", ",", "y", "=", "point", "[", "4", "]", ",", "yaw", "=", "point", "[", "2", "]", ")", "\n", "h3d", ".", "env", ".", "rotate", "(", "angle", ")", "\n", "assert", "h3d", ".", "env", ".", "cam", ".", "yaw", "-", "point", "[", "2", "]", "==", "angle", "\n", "\n", "cand_point", "=", "(", "point", "[", "0", "]", ",", "point", "[", "1", "]", ",", "(", "point", "[", "2", "]", "+", "180", "+", "angle", ")", "%", "360", "-", "180", ")", "\n", "if", "cand_point", "not", "in", "distances_source", ":", "\n", "            ", "distances_source", "[", "cand_point", "]", "=", "dist", "+", "1", "\n", "prev_pos", "[", "cand_point", "]", "=", "point", "\n", "f_dist", "=", "dist", "+", "1", "+", "heuristic_estimate", "(", "(", "point", "[", "3", "]", ",", "point", "[", "4", "]", ")", ",", "target_continous", ")", "\n", "cand_point", "=", "(", "cand_point", "[", "0", "]", ",", "cand_point", "[", "1", "]", ",", "cand_point", "[", "2", "]", ",", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ")", "\n", "heappush", "(", "points_queue", ",", "(", "f_dist", ",", "cand_point", ")", ")", "\n", "\n", "# TODO(akadian): optimization -> check if node has been visited previously before stepping through the environment", "\n", "\n", "# check and add edge for forward movement", "\n", "", "", "h3d", ".", "env", ".", "reset", "(", "x", "=", "point", "[", "3", "]", ",", "y", "=", "point", "[", "4", "]", ",", "yaw", "=", "point", "[", "2", "]", ")", "\n", "pre_pos", "=", "[", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", "]", "\n", "h3d", ".", "env", ".", "move_forward", "(", "dist_fwd", "=", "h3d", ".", "move_sensitivity", ",", "dist_hor", "=", "0", ")", "\n", "post_pos", "=", "[", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", "]", "\n", "if", "all", "(", "[", "np", ".", "abs", "(", "pre_pos", "[", "x", "]", "-", "post_pos", "[", "x", "]", ")", "<", "1e-9", "for", "x", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "        ", "return", "\n", "\n", "", "tx", ",", "ty", "=", "h3d", ".", "env", ".", "house", ".", "to_grid", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ")", "\n", "cand_point", "=", "(", "tx", ",", "ty", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", ")", "\n", "if", "cand_point", "not", "in", "distances_source", ":", "\n", "        ", "distances_source", "[", "cand_point", "]", "=", "dist", "+", "1", "\n", "prev_pos", "[", "cand_point", "]", "=", "point", "\n", "f_dist", "=", "dist", "+", "1", "+", "heuristic_estimate", "(", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ")", ",", "target_continous", ")", "\n", "cand_point", "=", "(", "cand_point", "[", "0", "]", ",", "cand_point", "[", "1", "]", ",", "cand_point", "[", "2", "]", ",", "\n", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ")", "\n", "heappush", "(", "points_queue", ",", "(", "f_dist", ",", "cand_point", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.shortest-path-gen.generate-paths-a-star.main": [[64, 310], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "random.seed", "numpy.random.seed", "os.environ[].split", "os.path.join", "os.path.join", "House3D.load_config", "House3D.objrender.RenderAPIThread", "json.load", "random.shuffle", "tqdm.tqdm", "os.path.exists", "os.makedirs", "int", "str", "str", "open", "sorted", "str().replace", "list", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "House3D.Environment", "house3d.House3DUtils", "os.path.exists", "house3d.House3DUtils.set_target_object", "numpy.argwhere", "numpy.random.choice", "house3d.House3DUtils._get_best_yaw_obj_from_pos", "time.time", "os.path.exists", "House3D.Environment.house.connMap.flatten", "env.house.connMap.flatten.sort", "numpy.argwhere", "time.time", "logging.info", "range", "set", "len", "logging.info", "os.path.join", "logging.info", "len", "os.path.join", "print", "house3d.House3DUtils.load_graph", "print", "house3d.House3DUtils.build_graph", "logging.info", "invalid.append", "logging.info", "str", "qns.keys", "all", "all", "obj_id.append", "all", "all", "os.path.join", "int", "numpy.random.choice", "time.time", "house3d.House3DUtils.env.house.to_coor", "house3d.House3DUtils.env.house.to_coor", "dict", "dict", "heapq.heappush", "time.time", "logging.info", "range", "pos_q.append", "act_q.append", "datetime.datetime.now", "numpy.mean", "numpy.median", "numpy.min", "numpy.max", "logging.info", "os.path.join", "numpy.random.choice", "heapq.heappop", "generate-paths-a-star.add_neighbors", "pos_q.append", "coord_q.append", "house3d.House3DUtils.env.reset", "actual_q.append", "enumerate", "house3d.House3DUtils.env.house._showMoveMap", "logging.info", "open", "pickle.dump", "logging.info", "logging.info", "shortest_path_lengths.append", "invalid.append", "traceback.print_exc", "generate-paths-a-star.heuristic_estimate", "len", "logging.info", "ValueError", "shortest_path_nodes.reverse", "len", "house3d.House3DUtils.env.house.to_grid", "act_q.append", "house3d.House3DUtils.step", "episode_images.append", "actual_q.append", "all", "os.path.join", "len", "range", "range", "range", "range", "shortest_path_nodes.append", "float", "float", "float", "act_q.append", "float", "float", "float", "ValueError", "numpy.abs", "numpy.abs", "len", "act_q.append", "float", "float", "float", "act_q.append", "act_q.append", "numpy.abs", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.set_target_object", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils._get_best_yaw_obj_from_pos", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.load_graph", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.build_graph", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.shortest-path-gen.generate-paths-a-star.add_neighbors", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.shortest-path-gen.generate-paths-a-star.heuristic_estimate", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.utils.house3d.House3DUtils.step"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-questions_json'", ",", "\n", "default", "=", "'/private/home/akadian/eqa-data/suncg-data/eqa_v1.json'", ")", "\n", "parser", ".", "add_argument", "(", "'-graph_dir'", ",", "default", "=", "'/private/home/akadian/eqa-data/suncg-data/a-star'", ")", "\n", "parser", ".", "add_argument", "(", "'-target_obj_conn_map_dir'", ",", "\n", "default", "=", "'/private/home/akadian/eqa-data/suncg-data/a-star/target_obj_conn_map_dir'", ")", "\n", "parser", ".", "add_argument", "(", "'-shortest_path_dir'", ")", "\n", "parser", ".", "add_argument", "(", "'-invalids_dir'", ",", "default", "=", "'/private/home/akadian/eqa-data/suncg-data/invalids/'", ")", "\n", "parser", ".", "add_argument", "(", "'-env_id'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-debug'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-map_resolution'", ",", "default", "=", "1000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-seed'", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-check_validity'", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'-log_path'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-source_candidate_fraction'", ",", "type", "=", "float", ",", "default", "=", "0.05", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "log_path", "is", "None", ":", "\n", "        ", "args", ".", "log_path", "=", "'seed_{}_resolution_{}.{}.log'", ".", "format", "(", "args", ".", "seed", ",", "args", ".", "map_resolution", ",", "\n", "str", "(", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "' '", ",", "'_'", ")", ")", "\n", "", "logging", ".", "basicConfig", "(", "filename", "=", "args", ".", "log_path", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "'%(asctime)-15s %(message)s'", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "shortest_path_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "shortest_path_dir", ")", "\n", "", "args", ".", "gpus", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "','", ")", "\n", "args", ".", "gpus", "=", "[", "int", "(", "x", ")", "for", "x", "in", "args", ".", "gpus", "]", "\n", "# create specific directories corresponding to the resolution", "\n", "args", ".", "graph_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "graph_dir", ",", "str", "(", "args", ".", "map_resolution", ")", ")", "\n", "args", ".", "target_obj_conn_map_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "target_obj_conn_map_dir", ",", "str", "(", "args", ".", "map_resolution", ")", ")", "\n", "# load house3d renderer", "\n", "cfg", "=", "load_config", "(", "'../../House3D/tests/config.json'", ")", "\n", "api_thread", "=", "objrender", ".", "RenderAPIThread", "(", "w", "=", "224", ",", "h", "=", "224", ",", "device", "=", "args", ".", "gpus", "[", "0", "]", ")", "\n", "# load envs list from questions json", "\n", "data", "=", "json", ".", "load", "(", "open", "(", "args", ".", "questions_json", ",", "'r'", ")", ")", "\n", "qns", "=", "data", "[", "'questions'", "]", "\n", "if", "args", ".", "env_id", "is", "None", ":", "\n", "        ", "envs", "=", "sorted", "(", "list", "(", "set", "(", "qns", ".", "keys", "(", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "envs", "=", "[", "args", ".", "env_id", "]", "\n", "", "random", ".", "shuffle", "(", "envs", ")", "\n", "invalid", "=", "[", "]", "\n", "\n", "count_path_found", "=", "0", "\n", "count_valid", "=", "0", "\n", "count_path_not_found", "=", "0", "\n", "count_no_source_cands", "=", "0", "\n", "shortest_path_lengths", "=", "[", "]", "\n", "\n", "for", "h", "in", "tqdm", "(", "envs", ")", ":", "\n", "# `scn2scn` from suncg-toolbox segfaults for this env :/", "\n", "        ", "if", "h", "==", "'436d655f24d385512e1e782b5ba88c6b'", ":", "\n", "            ", "continue", "\n", "", "for", "q", "in", "qns", "[", "h", "]", ":", "\n", "            ", "logging", ".", "info", "(", "\"count_path_found: {}\"", ".", "format", "(", "count_path_found", ")", ")", "\n", "logging", ".", "info", "(", "\"count_valid: {}\"", ".", "format", "(", "count_valid", ")", ")", "\n", "logging", ".", "info", "(", "\"count_path_not_found: {}\"", ".", "format", "(", "count_path_not_found", ")", ")", "\n", "logging", ".", "info", "(", "\"count_no_source_cands: {}\"", ".", "format", "(", "count_no_source_cands", ")", ")", "\n", "if", "len", "(", "shortest_path_lengths", ")", ">", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"shortest path length mean: {}, median: {}, min: {}, max: {}\"", ".", "format", "(", "\n", "np", ".", "mean", "(", "shortest_path_lengths", ")", ",", "np", ".", "median", "(", "shortest_path_lengths", ")", ",", "\n", "np", ".", "min", "(", "shortest_path_lengths", ")", ",", "np", ".", "max", "(", "shortest_path_lengths", ")", ")", ")", "\n", "", "logging", ".", "info", "(", "\"env, question pair: {}_{}\"", ".", "format", "(", "h", ",", "q", "[", "'id'", "]", ")", ")", "\n", "logging", ".", "info", "(", "\"{} {} {}\"", ".", "format", "(", "h", ",", "q", "[", "'question'", "]", ",", "q", "[", "'answer'", "]", ")", ")", "\n", "env", "=", "Environment", "(", "api_thread", ",", "h", ",", "cfg", ",", "ColideRes", "=", "args", ".", "map_resolution", ")", "\n", "h3d", "=", "House3DUtils", "(", "env", ",", "graph_dir", "=", "args", ".", "graph_dir", ",", "\n", "target_obj_conn_map_dir", "=", "args", ".", "target_obj_conn_map_dir", ",", "\n", "build_graph", "=", "False", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "shortest_path_dir", ",", "\"{}_{}.pkl\"", ".", "format", "(", "h", ",", "q", "[", "'id'", "]", ")", ")", ")", ":", "\n", "                ", "logging", ".", "info", "(", "\"Shortest path exists\"", ")", "\n", "continue", "\n", "\n", "# set target object", "\n", "", "bbox_obj", "=", "[", "x", "for", "x", "in", "q", "[", "'bbox'", "]", "if", "x", "[", "'type'", "]", "==", "'object'", "and", "x", "[", "'target'", "]", "is", "True", "]", "[", "0", "]", "\n", "obj_id", "=", "[", "]", "\n", "for", "x", "in", "h3d", ".", "objects", ":", "\n", "                ", "if", "all", "(", "[", "h3d", ".", "objects", "[", "x", "]", "[", "'bbox'", "]", "[", "'min'", "]", "[", "i", "]", "==", "bbox_obj", "[", "'box'", "]", "[", "'min'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", "and", "all", "(", "[", "h3d", ".", "objects", "[", "x", "]", "[", "'bbox'", "]", "[", "'max'", "]", "[", "i", "]", "==", "bbox_obj", "[", "'box'", "]", "[", "'max'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "                    ", "obj_id", ".", "append", "(", "x", ")", "\n", "if", "h3d", ".", "objects", "[", "x", "]", "[", "'fine_class'", "]", "!=", "bbox_obj", "[", "'name'", "]", ":", "\n", "                        ", "logging", ".", "info", "(", "'Name not matched {} {}'", ".", "format", "(", "h3d", ".", "objects", "[", "x", "]", "[", "'fine_class'", "]", ",", "bbox_obj", "[", "'name'", "]", ")", ")", "\n", "", "", "", "assert", "len", "(", "obj_id", ")", "==", "1", "\n", "bbox_room", "=", "[", "x", "for", "x", "in", "q", "[", "'bbox'", "]", "if", "x", "[", "'type'", "]", "==", "'room'", "and", "x", "[", "'target'", "]", "is", "False", "]", "[", "0", "]", "\n", "target_room", "=", "False", "\n", "for", "room", "in", "h3d", ".", "env", ".", "house", ".", "all_rooms", ":", "\n", "                ", "if", "all", "(", "[", "room", "[", "'bbox'", "]", "[", "'min'", "]", "[", "i", "]", "==", "bbox_room", "[", "'box'", "]", "[", "'min'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", "and", "all", "(", "[", "room", "[", "'bbox'", "]", "[", "'max'", "]", "[", "i", "]", "==", "bbox_room", "[", "'box'", "]", "[", "'max'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "                    ", "target_room", "=", "room", "\n", "break", "\n", "", "", "target_obj", "=", "obj_id", "[", "0", "]", "\n", "h3d", ".", "set_target_object", "(", "h3d", ".", "objects", "[", "target_obj", "]", ",", "target_room", ")", "\n", "\n", "# sample a close enough target point", "\n", "target_point_cands", "=", "np", ".", "argwhere", "(", "(", "env", ".", "house", ".", "connMap", ">=", "0", ")", "&", "(", "env", ".", "house", ".", "connMap", "<=", "5", ")", ")", "\n", "target_point_idx", "=", "np", ".", "random", ".", "choice", "(", "target_point_cands", ".", "shape", "[", "0", "]", ")", "\n", "target_yaw", ",", "best_coverage", "=", "h3d", ".", "_get_best_yaw_obj_from_pos", "(", "\n", "target_obj", ",", "\n", "[", "target_point_cands", "[", "target_point_idx", "]", "[", "0", "]", ",", "\n", "target_point_cands", "[", "target_point_idx", "]", "[", "1", "]", "]", ",", "\n", "height", "=", "1.0", ")", "\n", "target_point", "=", "(", "target_point_cands", "[", "target_point_idx", "]", "[", "0", "]", ",", "\n", "target_point_cands", "[", "target_point_idx", "]", "[", "1", "]", ",", "\n", "target_yaw", ")", "\n", "\n", "# graph creation used for selecting a source point", "\n", "t1", "=", "time", "(", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "h3d", ".", "graph_dir", ",", "h3d", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'_'", "+", "target_obj", "+", "'.pkl'", ")", ")", ":", "\n", "                ", "print", "(", "'loading graph'", ")", "\n", "h3d", ".", "load_graph", "(", "os", ".", "path", ".", "join", "(", "h3d", ".", "graph_dir", ",", "h3d", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'_'", "+", "target_obj", "+", "'.pkl'", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'building graph'", ")", "\n", "h3d", ".", "build_graph", "(", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "h3d", ".", "graph_dir", ",", "h3d", ".", "env", ".", "house", ".", "house", "[", "'id'", "]", "+", "'_'", "+", "target_obj", "+", "'.pkl'", ")", ")", "\n", "\n", "", "connmap_values", "=", "env", ".", "house", ".", "connMap", ".", "flatten", "(", ")", "\n", "connmap_values", ".", "sort", "(", ")", "\n", "# threshold for --source_candidate_fraction number of points", "\n", "thresh", "=", "connmap_values", "[", "int", "(", "(", "1.0", "-", "args", ".", "source_candidate_fraction", ")", "*", "connmap_values", ".", "shape", "[", "0", "]", ")", "]", "\n", "source_point_cands", "=", "np", ".", "argwhere", "(", "(", "env", ".", "house", ".", "connMap", "!=", "-", "1", ")", "&", "(", "env", ".", "house", ".", "connMap", ">=", "thresh", ")", ")", "\n", "if", "thresh", "<", "50", ":", "\n", "# sanity check to prevent scenario when agent is spawned close to target location", "\n", "                ", "logging", ".", "info", "(", "\"No source candidates\"", ")", "\n", "invalid", ".", "append", "(", "h", ")", "\n", "count_no_source_cands", "+=", "1", "\n", "continue", "\n", "", "t2", "=", "time", "(", ")", "\n", "logging", ".", "info", "(", "\"Time spent for graph creation {:.6f}s\"", ".", "format", "(", "t2", "-", "t1", ")", ")", "\n", "\n", "for", "it", "in", "range", "(", "10", ")", ":", "\n", "                ", "logging", ".", "info", "(", "\"Try: {}\"", ".", "format", "(", "it", ")", ")", "\n", "try", ":", "\n", "                    ", "source_point_idx", "=", "np", ".", "random", ".", "choice", "(", "source_point_cands", ".", "shape", "[", "0", "]", ")", "\n", "source_point", "=", "(", "source_point_cands", "[", "source_point_idx", "]", "[", "0", "]", ",", "source_point_cands", "[", "source_point_idx", "]", "[", "1", "]", ",", "\n", "np", ".", "random", ".", "choice", "(", "h3d", ".", "angles", ")", ")", "\n", "\n", "# A* for shortest path", "\n", "t3", "=", "time", "(", ")", "\n", "target_x", ",", "target_y", ",", "target_yaw", "=", "target_point", "\n", "source_continous", "=", "h3d", ".", "env", ".", "house", ".", "to_coor", "(", "source_point", "[", "0", "]", ",", "source_point", "[", "1", "]", ",", "shft", "=", "True", ")", "\n", "target_continous", "=", "h3d", ".", "env", ".", "house", ".", "to_coor", "(", "target_x", ",", "target_y", ",", "shft", "=", "True", ")", "\n", "points_queue", "=", "[", "]", "\n", "distances_source", "=", "dict", "(", ")", "\n", "prev_pos", "=", "dict", "(", ")", "\n", "distances_source", "[", "source_point", "]", "=", "0", "\n", "prev_pos", "[", "source_point", "]", "=", "(", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", ")", "\n", "\n", "# schema for point in points_queue:", "\n", "# (x-grid-location, y-grid-location, yaw, x-continous-coordinate, y-continous-coordinate)", "\n", "source_point", "=", "(", "source_point", "[", "0", "]", ",", "source_point", "[", "1", "]", ",", "source_point", "[", "2", "]", ",", "\n", "source_continous", "[", "0", "]", ",", "source_continous", "[", "1", "]", ")", "\n", "heappush", "(", "points_queue", ",", "(", "heuristic_estimate", "(", "source_continous", ",", "target_continous", ")", ",", "source_point", ")", ")", "\n", "\n", "while", "True", ":", "\n", "                        ", "if", "len", "(", "points_queue", ")", "==", "0", ":", "\n", "                            ", "count_path_not_found", "+=", "1", "\n", "logging", ".", "info", "(", "\"A* not able to find path to target\"", ")", "\n", "raise", "ValueError", "(", "\"Path not found to target {} {}\"", ".", "format", "(", "source_point", "[", ":", "3", "]", ",", "target_point", ")", ")", "\n", "", "f_dist", ",", "point", "=", "heappop", "(", "points_queue", ")", "\n", "add_neighbors", "(", "h3d", ",", "points_queue", ",", "point", ",", "distances_source", ",", "prev_pos", ",", "target_continous", ")", "\n", "if", "point", "[", "0", "]", "==", "target_x", "and", "point", "[", "1", "]", "==", "target_y", "and", "point", "[", "2", "]", "==", "target_yaw", ":", "\n", "# store path", "\n", "                            ", "shortest_path_nodes", "=", "[", "]", "\n", "while", "True", ":", "\n", "                                ", "shortest_path_nodes", ".", "append", "(", "point", ")", "\n", "point", "=", "prev_pos", "[", "point", "[", ":", "3", "]", "]", "\n", "if", "point", "[", "0", "]", "==", "-", "1", ":", "\n", "                                    ", "break", "\n", "", "", "shortest_path_nodes", ".", "reverse", "(", ")", "\n", "break", "\n", "", "", "t4", "=", "time", "(", ")", "\n", "logging", ".", "info", "(", "\"Time spent for coupled graph generation and A*: {:.6f}s\"", ".", "format", "(", "t4", "-", "t3", ")", ")", "\n", "\n", "# bookkeeping", "\n", "act_q", ",", "pos_q", ",", "coord_q", ",", "actual_q", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "episode_images", "=", "[", "]", "\n", "movemap", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "shortest_path_nodes", ")", "-", "1", ")", ":", "\n", "                        ", "u", "=", "shortest_path_nodes", "[", "i", "]", "\n", "v", "=", "shortest_path_nodes", "[", "i", "+", "1", "]", "\n", "pos_q", ".", "append", "(", "(", "float", "(", "u", "[", "3", "]", ")", ",", "1.0", ",", "float", "(", "u", "[", "4", "]", ")", ",", "float", "(", "u", "[", "2", "]", ")", ")", ")", "\n", "coord_q", ".", "append", "(", "h3d", ".", "env", ".", "house", ".", "to_grid", "(", "u", "[", "3", "]", ",", "u", "[", "4", "]", ")", ")", "\n", "curr_x", ",", "curr_y", ",", "curr_yaw", "=", "u", "[", "3", "]", ",", "u", "[", "4", "]", ",", "u", "[", "2", "]", "\n", "next_x", ",", "next_y", ",", "next_yaw", "=", "v", "[", "3", "]", ",", "v", "[", "4", "]", ",", "v", "[", "2", "]", "\n", "if", "curr_yaw", "!=", "next_yaw", ":", "\n", "                            ", "if", "next_yaw", "==", "171", "and", "curr_yaw", "==", "-", "180", ":", "\n", "                                ", "act_q", ".", "append", "(", "1", ")", "\n", "", "elif", "next_yaw", "==", "-", "180", "and", "curr_yaw", "==", "171", ":", "\n", "                                ", "act_q", ".", "append", "(", "2", ")", "\n", "", "elif", "next_yaw", "<", "curr_yaw", ":", "\n", "                                ", "act_q", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                                ", "act_q", ".", "append", "(", "2", ")", "\n", "", "", "else", ":", "\n", "                            ", "act_q", ".", "append", "(", "0", ")", "\n", "", "", "pos_q", ".", "append", "(", "(", "shortest_path_nodes", "[", "-", "1", "]", "[", "3", "]", ",", "1.0", ",", "\n", "shortest_path_nodes", "[", "-", "1", "]", "[", "4", "]", ",", "shortest_path_nodes", "[", "-", "1", "]", "[", "2", "]", ")", ")", "\n", "act_q", ".", "append", "(", "3", ")", "\n", "\n", "if", "args", ".", "check_validity", ":", "\n", "                        ", "h3d", ".", "env", ".", "reset", "(", "x", "=", "pos_q", "[", "0", "]", "[", "0", "]", ",", "y", "=", "pos_q", "[", "0", "]", "[", "2", "]", ",", "yaw", "=", "pos_q", "[", "0", "]", "[", "3", "]", ")", "\n", "h3d_yaw", "=", "pos_q", "[", "0", "]", "[", "3", "]", "# dummy yaw limited to [-180, 180)", "\n", "actual_q", ".", "append", "(", "(", "float", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ")", ",", "1.0", ",", "float", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ")", ",", "\n", "float", "(", "h3d", ".", "env", ".", "cam", ".", "yaw", ")", ")", ")", "\n", "for", "i", ",", "action", "in", "enumerate", "(", "act_q", "[", ":", "-", "1", "]", ")", ":", "\n", "                            ", "pre_pos", "=", "[", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", "]", "\n", "img", ",", "_", ",", "episode_done", "=", "h3d", ".", "step", "(", "action", ")", "\n", "episode_images", ".", "append", "(", "img", ")", "\n", "post_pos", "=", "[", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ",", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ",", "h3d", ".", "env", ".", "cam", ".", "yaw", "]", "\n", "actual_q", ".", "append", "(", "(", "float", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", ")", ",", "1.0", ",", "float", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", ")", ",", "\n", "float", "(", "h3d", ".", "env", ".", "cam", ".", "yaw", ")", ")", ")", "\n", "if", "all", "(", "[", "np", ".", "abs", "(", "pre_pos", "[", "x", "]", "-", "post_pos", "[", "x", "]", ")", "<", "1e-9", "for", "x", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "                                ", "raise", "ValueError", "(", "\"Invalid action\"", ")", "\n", "", "angle_delta", "=", "post_pos", "[", "2", "]", "-", "pre_pos", "[", "2", "]", "\n", "h3d_yaw", "=", "(", "h3d_yaw", "+", "180", "+", "angle_delta", ")", "%", "360", "-", "180", "\n", "assert", "np", ".", "abs", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "x", "-", "pos_q", "[", "i", "+", "1", "]", "[", "0", "]", ")", "<", "1e-3", "\n", "assert", "np", ".", "abs", "(", "h3d", ".", "env", ".", "cam", ".", "pos", ".", "z", "-", "pos_q", "[", "i", "+", "1", "]", "[", "2", "]", ")", "<", "1e-3", "\n", "assert", "h3d_yaw", "==", "pos_q", "[", "i", "+", "1", "]", "[", "3", "]", "\n", "", "count_valid", "+=", "1", "\n", "movemap", "=", "h3d", ".", "env", ".", "house", ".", "_showMoveMap", "(", "visualize", "=", "False", ")", "\n", "logging", ".", "info", "(", "\"Valid\"", ")", "\n", "\n", "", "result", "=", "{", "\n", "\"actions\"", ":", "act_q", ",", "\n", "\"actual_q\"", ":", "actual_q", ",", "\n", "\"answer\"", ":", "q", "[", "'answer'", "]", ",", "\n", "\"coordinates\"", ":", "coord_q", ",", "\n", "\"images\"", ":", "episode_images", ",", "\n", "\"movemap\"", ":", "movemap", ",", "\n", "\"positions\"", ":", "pos_q", ",", "\n", "\"question\"", ":", "q", "[", "'question'", "]", ",", "\n", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "shortest_path_dir", ",", "\"{}_{}.pkl\"", ".", "format", "(", "h", ",", "q", "[", "'id'", "]", ")", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "result", ",", "f", ")", "\n", "logging", ".", "info", "(", "\"Saved {}_{}.pkl\"", ".", "format", "(", "h", ",", "q", "[", "'id'", "]", ")", ")", "\n", "logging", ".", "info", "(", "\"Length of shortest path: {}\"", ".", "format", "(", "len", "(", "shortest_path_nodes", ")", ")", ")", "\n", "shortest_path_lengths", ".", "append", "(", "len", "(", "shortest_path_nodes", ")", ")", "\n", "", "count_path_found", "+=", "1", "\n", "break", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "                    ", "raise", "\n", "", "except", ":", "\n", "                    ", "invalid", ".", "append", "(", "\"env, question pair: {}_{}\"", ".", "format", "(", "h", ",", "q", "[", "'id'", "]", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.__init__": [[16, 24], ["nltk.stem.WordNetLemmatizer", "set", "set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "wnl", "=", "WordNetLemmatizer", "(", ")", "\n", "self", ".", "articleMap", "=", "{", "'utensil'", ":", "'a'", ",", "'utensil holder'", ":", "'a'", "}", "\n", "\"\"\"\n        Keeps track of all the rooms+objs from where questions have been generated\n        \"\"\"", "\n", "self", ".", "rooms", "=", "set", "(", ")", "\n", "self", ".", "objects", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.isPlural": [[30, 34], ["question_string_builder.QuestionStringBuilder.wnl.lemmatize"], "methods", ["None"], ["def", "isPlural", "(", "self", ",", "word", ")", ":", "\n", "        ", "lemma", "=", "self", ".", "wnl", ".", "lemmatize", "(", "word", ",", "'n'", ")", "\n", "plural", "=", "True", "if", "word", "is", "not", "lemma", "else", "False", "\n", "return", "plural", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.prepareString": [[39, 57], ["question_string_builder.QuestionStringBuilder.objects.add", "question_string_builder.QuestionStringBuilder.rooms.add", "obj.split", "room.lower().split", "question_string_builder.QuestionStringBuilder.replaceAux", "question_string_builder.QuestionStringBuilder.replaceArticle", "question_string_builder.QuestionStringBuilder.replaceObj", "question_string_builder.QuestionStringBuilder.replaceRoom", "room.lower"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceAux", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceArticle", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceObj", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceRoom"], ["def", "prepareString", "(", "self", ",", "template", ",", "obj", ",", "room", ")", ":", "\n", "        ", "qString", "=", "template", "\n", "\n", "self", ".", "objects", ".", "add", "(", "obj", ")", "\n", "self", ".", "rooms", ".", "add", "(", "room", ")", "\n", "\n", "obj", "=", "' '", ".", "join", "(", "obj", ".", "split", "(", "'_'", ")", ")", "\n", "room", "=", "' '", ".", "join", "(", "room", ".", "lower", "(", ")", ".", "split", "(", "'_'", ")", ")", "\n", "\n", "if", "'<AUX>'", "in", "qString", ":", "\n", "            ", "qString", "=", "self", ".", "replaceAux", "(", "qString", ",", "obj", ")", "\n", "", "if", "'<ARTICLE>'", "in", "qString", ":", "\n", "            ", "qString", "=", "self", ".", "replaceArticle", "(", "qString", ",", "obj", ")", "\n", "", "if", "'<OBJ>'", "in", "qString", "or", "'<OBJ-plural>'", "in", "qString", ":", "\n", "            ", "qString", "=", "self", ".", "replaceObj", "(", "qString", ",", "obj", ")", "\n", "", "if", "'<ROOM>'", "in", "qString", "or", "'<ROOM-plural>'", "in", "qString", ":", "\n", "            ", "qString", "=", "self", ".", "replaceRoom", "(", "qString", ",", "room", ")", "\n", "", "return", "qString", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.prepareStringForLogic": [[58, 76], ["question_string_builder.QuestionStringBuilder.rooms.add", "question_string_builder.QuestionStringBuilder.objects.add", "question_string_builder.QuestionStringBuilder.objects.add", "question_string_builder.QuestionStringBuilder.replaceAux", "question_string_builder.QuestionStringBuilder.replaceArticle", "question_string_builder.QuestionStringBuilder.replaceArticle", "question_string_builder.QuestionStringBuilder.replaceObjForLogic", "question_string_builder.QuestionStringBuilder.replaceRoom", "question_string_builder.QuestionStringBuilder.replaceOp", "room.lower().split", "obj1.split", "obj2.split", "room.lower"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceAux", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceArticle", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceArticle", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceObjForLogic", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceRoom", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceOp"], ["", "def", "prepareStringForLogic", "(", "self", ",", "template", ",", "obj1", ",", "obj2", ",", "room", ",", "op", ")", ":", "\n", "        ", "qString", "=", "template", "\n", "\n", "self", ".", "rooms", ".", "add", "(", "room", ")", "\n", "self", ".", "objects", ".", "add", "(", "obj1", ")", "\n", "self", ".", "objects", ".", "add", "(", "obj2", ")", "\n", "\n", "room", "=", "' '", ".", "join", "(", "room", ".", "lower", "(", ")", ".", "split", "(", "'_'", ")", ")", "\n", "obj1", "=", "' '", ".", "join", "(", "obj1", ".", "split", "(", "'_'", ")", ")", "\n", "obj2", "=", "' '", ".", "join", "(", "obj2", ".", "split", "(", "'_'", ")", ")", "\n", "\n", "qString", "=", "self", ".", "replaceAux", "(", "qString", ",", "obj1", ")", "\n", "qString", "=", "self", ".", "replaceArticle", "(", "qString", ",", "obj1", ")", "\n", "qString", "=", "self", ".", "replaceArticle", "(", "qString", ",", "obj2", ")", "\n", "qString", "=", "self", ".", "replaceObjForLogic", "(", "qString", ",", "obj1", ",", "obj2", ")", "\n", "qString", "=", "self", ".", "replaceRoom", "(", "qString", ",", "room", ")", "\n", "qString", "=", "self", ".", "replaceOp", "(", "qString", ",", "op", ")", "\n", "return", "qString", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceOp": [[77, 80], ["template.replace"], "methods", ["None"], ["", "def", "replaceOp", "(", "self", ",", "template", ",", "op", ")", ":", "\n", "        ", "assert", "'<LOGIC>'", "in", "template", "\n", "return", "template", ".", "replace", "(", "'<LOGIC>'", ",", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceAux": [[81, 87], ["question_string_builder.QuestionStringBuilder.isPlural", "template.replace", "template.replace"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.isPlural"], ["", "def", "replaceAux", "(", "self", ",", "template", ",", "obj", ")", ":", "\n", "        ", "assert", "'<AUX>'", "in", "template", "\n", "if", "self", ".", "isPlural", "(", "obj", ")", ":", "\n", "            ", "return", "template", ".", "replace", "(", "'<AUX>'", ",", "'are'", ")", "\n", "", "else", ":", "\n", "            ", "return", "template", ".", "replace", "(", "'<AUX>'", ",", "'is'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceArticle": [[88, 99], ["question_string_builder.QuestionStringBuilder.isPlural", "template.replace", "template.replace", "template.replace", "template.replace"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.isPlural"], ["", "", "def", "replaceArticle", "(", "self", ",", "template", ",", "obj", ")", ":", "\n", "        ", "assert", "'<ARTICLE>'", "in", "template", "\n", "if", "self", ".", "isPlural", "(", "obj", ")", ":", "\n", "            ", "return", "template", ".", "replace", "(", "' <ARTICLE>'", ",", "''", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "if", "obj", "in", "self", ".", "articleMap", ":", "\n", "                ", "return", "template", ".", "replace", "(", "'<ARTICLE>'", ",", "self", ".", "articleMap", "[", "obj", "]", ",", "1", ")", "\n", "", "elif", "obj", "[", "0", "]", "in", "[", "'a'", ",", "'e'", ",", "'i'", ",", "'o'", ",", "'u'", "]", ":", "\n", "                ", "return", "template", ".", "replace", "(", "'<ARTICLE>'", ",", "'an'", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "return", "template", ".", "replace", "(", "'<ARTICLE>'", ",", "'a'", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceObj": [[100, 108], ["template.replace", "question_string_builder.QuestionStringBuilder.isPlural", "template.replace", "template.replace"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.isPlural"], ["", "", "", "def", "replaceObj", "(", "self", ",", "template", ",", "obj", ")", ":", "\n", "        ", "if", "'<OBJ>'", "in", "template", ":", "\n", "            ", "return", "template", ".", "replace", "(", "'<OBJ>'", ",", "obj", ",", "1", ")", "\n", "", "elif", "'<OBJ-plural>'", "in", "template", ":", "\n", "            ", "if", "self", ".", "isPlural", "(", "obj", ")", ":", "\n", "                ", "return", "template", ".", "replace", "(", "'<OBJ-plural>'", ",", "obj", ")", "\n", "", "else", ":", "\n", "                ", "return", "template", ".", "replace", "(", "'<OBJ-plural>'", ",", "obj", "+", "'s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceObjForLogic": [[109, 112], ["template.replace.replace.replace", "template.replace.replace.replace"], "methods", ["None"], ["", "", "", "def", "replaceObjForLogic", "(", "self", ",", "template", ",", "obj1", ",", "obj2", ")", ":", "\n", "        ", "template", "=", "template", ".", "replace", "(", "'<OBJ1>'", ",", "obj1", ")", "\n", "return", "template", ".", "replace", "(", "'<OBJ2>'", ",", "obj2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.replaceRoom": [[113, 119], ["template.replace", "template.replace"], "methods", ["None"], ["", "def", "replaceRoom", "(", "self", ",", "template", ",", "room", ")", ":", "\n", "# assert '<ROOM>' in template", "\n", "        ", "if", "'<ROOM>'", "in", "template", ":", "\n", "            ", "return", "template", ".", "replace", "(", "'<ROOM>'", ",", "room", ")", "\n", "", "elif", "'<ROOM-plural>'", "in", "template", ":", "\n", "            ", "return", "template", ".", "replace", "(", "'<ROOM-plural>'", ",", "room", "+", "'s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.roomEntity.__init__": [[33, 45], ["list", "engine.roomEntity.name.sort", "set", "str", "str", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "bbox", ",", "meta", ")", ":", "\n", "        ", "self", ".", "name", "=", "list", "(", "\n", "set", "(", "[", "\n", "self", ".", "translations", "[", "str", "(", "x", ")", "]", "\n", "if", "str", "(", "x", ")", "in", "self", ".", "translations", "else", "str", "(", "x", ")", "for", "x", "in", "name", "\n", "]", ")", ")", "\n", "self", ".", "bbox", "=", "bbox", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "type", "=", "'room'", "\n", "\n", "self", ".", "name", ".", "sort", "(", "key", "=", "str", ".", "lower", ")", "\n", "self", ".", "entities", "=", "self", ".", "objects", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.roomEntity.addObject": [[46, 48], ["engine.roomEntity.objects.append"], "methods", ["None"], ["", "def", "addObject", "(", "self", ",", "object_ent", ")", ":", "\n", "        ", "self", ".", "objects", ".", "append", "(", "object_ent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.roomEntity.isValid": [[49, 51], ["len"], "methods", ["None"], ["", "def", "isValid", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "objects", ")", "!=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.objectEntity.__init__": [[74, 83], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "bbox", ",", "meta", ",", "obj_id", "=", "False", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "translations", ":", "self", ".", "name", "=", "self", ".", "translations", "[", "name", "]", "\n", "else", ":", "self", ".", "name", "=", "name", "\n", "self", ".", "bbox", "=", "bbox", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "type", "=", "'object'", "\n", "self", ".", "id", "=", "obj_id", "\n", "\n", "self", ".", "entities", "=", "self", ".", "rooms", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.objectEntity.addRoom": [[84, 86], ["engine.objectEntity.rooms.append"], "methods", ["None"], ["", "def", "addRoom", "(", "self", ",", "room_ent", ")", ":", "\n", "        ", "self", ".", "rooms", ".", "append", "(", "room_ent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.objectEntity.isValid": [[87, 89], ["len"], "methods", ["None"], ["", "def", "isValid", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "rooms", ")", "!=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.__init__": [[263, 308], ["question_string_builder.QuestionStringBuilder", "json.load", "os.path.isfile", "json.load", "print", "open", "open"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "debug", "=", "False", ",", "\n", "object_counts_by_room_file", "=", "\"data/obj_counts_by_room.json\"", "\n", ")", ":", "\n", "        ", "self", ".", "template_fns", "=", "{", "\n", "'filter'", ":", "self", ".", "filter", ",", "\n", "'unique'", ":", "self", ".", "unique", ",", "\n", "'query'", ":", "self", ".", "query", ",", "\n", "'relate'", ":", "self", ".", "relate", ",", "\n", "'distance'", ":", "self", ".", "distance", ",", "\n", "'blacklist'", ":", "self", ".", "blacklist", ",", "\n", "'thresholdSize'", ":", "self", ".", "thresholdSize", "\n", "}", "\n", "\n", "self", ".", "query_fns", "=", "{", "\n", "'query_room'", ":", "self", ".", "queryRoom", ",", "\n", "'query_count'", ":", "self", ".", "queryCount", ",", "\n", "'query_room_count'", ":", "self", ".", "queryRoomCounts", ",", "\n", "'query_global_object_count'", ":", "self", ".", "queryGlobalObjectCounts", ",", "\n", "'query_room_object_count'", ":", "self", ".", "queryRoomObjectCounts", ",", "\n", "'query_exist'", ":", "self", ".", "queryExist", ",", "\n", "'query_logical'", ":", "self", ".", "queryLogical", ",", "\n", "'query_color'", ":", "self", ".", "queryColor", ",", "\n", "'query_color_room'", ":", "self", ".", "queryColorRoom", ",", "\n", "'query_object'", ":", "self", ".", "queryObject", ",", "\n", "'query_object_room'", ":", "self", ".", "queryObjectRoom", ",", "\n", "'query_compare'", ":", "self", ".", "queryCompare", "\n", "}", "\n", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "ent_queue", "=", "None", "\n", "self", ".", "q_str_builder", "=", "QuestionStringBuilder", "(", ")", "\n", "self", ".", "q_obj_builder", "=", "self", ".", "questionObjectBuilder", "\n", "\n", "# update", "\n", "if", "os", ".", "path", ".", "isfile", "(", "object_counts_by_room_file", ")", "==", "True", ":", "\n", "            ", "self", ".", "global_obj_by_room", "=", "json", ".", "load", "(", "\n", "open", "(", "object_counts_by_room_file", ",", "'r'", ")", ")", "\n", "self", ".", "negative_exists", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Not loading data/obj_counts_by_room.json'", ")", "\n", "\n", "# load colors", "\n", "", "self", ".", "env_obj_color_map", "=", "json", ".", "load", "(", "open", "(", "'data/obj_colors.json'", ",", "'r'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.cacheHouse": [[309, 330], ["engine.Engine.isValid", "engine.roomEntity", "engine.Engine.entities[].append", "engine.objectEntity", "engine.roomEntity.addObject", "engine.objectEntity.addRoom", "engine.Engine.entities[].append", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.isValid", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.roomEntity.addObject", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.objectEntity.addRoom"], ["", "def", "cacheHouse", "(", "self", ",", "Hp", ")", ":", "\n", "        ", "self", ".", "house", "=", "Hp", "\n", "\n", "self", ".", "entities", "=", "{", "'rooms'", ":", "[", "]", ",", "'objects'", ":", "[", "]", "}", "\n", "\n", "for", "i", "in", "self", ".", "house", ".", "rooms", ":", "\n", "            ", "room", "=", "roomEntity", "(", "i", "[", "'type'", "]", ",", "i", "[", "'bbox'", "]", ",", "i", ")", "\n", "for", "j", "in", "room", ".", "meta", "[", "'nodes'", "]", ":", "\n", "                ", "obj", "=", "objectEntity", "(", "\n", "self", ".", "house", ".", "objects", "[", "'0_'", "+", "str", "(", "j", ")", "]", "[", "'fine_class'", "]", ",", "\n", "self", ".", "house", ".", "objects", "[", "'0_'", "+", "str", "(", "j", ")", "]", "[", "'bbox'", "]", ",", "\n", "self", ".", "house", ".", "objects", "[", "'0_'", "+", "str", "(", "j", ")", "]", ",", "\n", "obj_id", "=", "'0_'", "+", "str", "(", "j", ")", ")", "\n", "room", ".", "addObject", "(", "obj", ")", "\n", "obj", ".", "addRoom", "(", "room", ")", "\n", "\n", "self", ".", "entities", "[", "'objects'", "]", ".", "append", "(", "obj", ")", "\n", "\n", "", "self", ".", "entities", "[", "'rooms'", "]", ".", "append", "(", "room", ")", "\n", "\n", "", "self", ".", "isValid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.isValid": [[331, 342], ["print", "print", "i.isValid", "i.isValid"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.isValid", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.isValid"], ["", "def", "isValid", "(", "self", ")", ":", "\n", "# print('checking validity...')", "\n", "        ", "for", "i", "in", "self", ".", "entities", "[", "'rooms'", "]", ":", "\n", "            ", "if", "i", ".", "isValid", "(", ")", "==", "False", "and", "self", ".", "debug", "==", "True", ":", "\n", "                ", "print", "(", "'ERROR'", ",", "i", ".", "meta", ")", "\n", "continue", "\n", "\n", "", "", "for", "i", "in", "self", ".", "entities", "[", "'objects'", "]", ":", "\n", "            ", "if", "i", ".", "isValid", "(", ")", "==", "False", "and", "self", ".", "debug", "==", "True", ":", "\n", "                ", "print", "(", "'ERROR'", ",", "i", ".", "meta", ")", "\n", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.clearQueue": [[343, 345], ["None"], "methods", ["None"], ["", "", "", "def", "clearQueue", "(", "self", ")", ":", "\n", "        ", "self", ".", "ent_queue", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.executeFn": [[346, 363], ["isinstance", "list", "i.split"], "methods", ["None"], ["", "def", "executeFn", "(", "self", ",", "template", ")", ":", "\n", "        ", "for", "i", "in", "template", ":", "\n", "            ", "if", "'.'", "in", "i", ":", "\n", "                ", "_", "=", "i", ".", "split", "(", "'.'", ")", "\n", "fn", "=", "_", "[", "0", "]", "\n", "param", "=", "_", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "fn", "=", "i", "\n", "param", "=", "None", "\n", "\n", "", "res", "=", "self", ".", "template_fns", "[", "fn", "]", "(", "param", ")", "\n", "\n", "", "if", "isinstance", "(", "res", ",", "dict", ")", ":", "\n", "            ", "return", "res", "\n", "", "else", ":", "\n", "# return unique questions only", "\n", "            ", "return", "list", "(", "{", "x", "[", "'question'", "]", ":", "x", "for", "x", "in", "res", "}", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.thresholdSize": [[364, 385], ["engine.Engine.thresholdSize.getSize"], "methods", ["None"], ["", "", "def", "thresholdSize", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "def", "getSize", "(", "bbox", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "(", "bbox", "[", "'max'", "]", "[", "0", "]", "-", "bbox", "[", "'min'", "]", "[", "0", "]", ")", "*", "(", "\n", "bbox", "[", "'max'", "]", "[", "1", "]", "-", "bbox", "[", "'min'", "]", "[", "1", "]", ")", "*", "(", "\n", "bbox", "[", "'max'", "]", "[", "2", "]", "-", "bbox", "[", "'min'", "]", "[", "2", "]", ")", "\n", "", "except", ":", "\n", "                ", "return", "np", ".", "prod", "(", "bbox", "[", "'radii'", "]", ")", "*", "8", "\n", "\n", "", "", "assert", "self", ".", "ent_queue", "!=", "None", "\n", "assert", "self", ".", "ent_queue", "[", "'type'", "]", "==", "'objects'", "\n", "\n", "ent", "=", "self", ".", "ent_queue", "\n", "sizes", "=", "[", "getSize", "(", "x", ".", "bbox", ")", "for", "x", "in", "ent", "[", "'elements'", "]", "]", "\n", "idx", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "sizes", ")", "if", "v", "<", "0.0005", "]", "\n", "\n", "for", "i", "in", "idx", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "del", "ent", "[", "'elements'", "]", "[", "i", "]", "\n", "\n", "", "self", ".", "ent_queue", "=", "ent", "\n", "return", "self", ".", "ent_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.blacklist": [[386, 414], ["enumerate", "enumerate", "any"], "methods", ["None"], ["", "def", "blacklist", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "assert", "self", ".", "ent_queue", "!=", "None", "\n", "\n", "ent", "=", "self", ".", "ent_queue", "\n", "\n", "if", "ent", "[", "'type'", "]", "==", "'objects'", ":", "\n", "            ", "template", "=", "args", "[", "0", "]", "\n", "\n", "names", "=", "[", "x", ".", "name", "for", "x", "in", "ent", "[", "'elements'", "]", "]", "\n", "idx", "=", "[", "\n", "i", "for", "i", ",", "v", "in", "enumerate", "(", "names", ")", "\n", "if", "v", "in", "self", ".", "blacklist_objects", "[", "template", "]", "\n", "]", "\n", "for", "i", "in", "idx", "[", ":", ":", "-", "1", "]", ":", "\n", "                ", "del", "ent", "[", "'elements'", "]", "[", "i", "]", "\n", "", "", "elif", "ent", "[", "'type'", "]", "==", "'rooms'", ":", "\n", "            ", "names", "=", "[", "x", ".", "name", "for", "x", "in", "ent", "[", "'elements'", "]", "]", "\n", "idx", "=", "[", "\n", "i", "for", "i", ",", "v", "in", "enumerate", "(", "[", "\n", "any", "(", "[", "k", "for", "k", "in", "x", "if", "k", "in", "self", ".", "blacklist_rooms", "]", ")", "\n", "for", "x", "in", "names", "\n", "]", ")", "if", "v", "==", "True", "\n", "]", "\n", "for", "i", "in", "idx", "[", ":", ":", "-", "1", "]", ":", "\n", "                ", "del", "ent", "[", "'elements'", "]", "[", "i", "]", "\n", "\n", "", "", "self", ".", "ent_queue", "=", "ent", "\n", "return", "self", ".", "ent_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.filter": [[415, 442], ["engine.Engine.blacklist", "engine.Engine.thresholdSize"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.blacklist", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.thresholdSize"], ["", "def", "filter", "(", "self", ",", "*", "args", ")", ":", "\n", "# if ent_queue is empty, execute on parent env entitites", "\n", "        ", "if", "self", ".", "ent_queue", "==", "None", ":", "\n", "            ", "self", ".", "ent_queue", "=", "{", "\n", "'type'", ":", "args", "[", "0", "]", ",", "\n", "'elements'", ":", "self", ".", "entities", "[", "args", "[", "0", "]", "]", "\n", "}", "\n", "", "else", ":", "\n", "            ", "ent", "=", "self", ".", "ent_queue", "\n", "assert", "args", "[", "0", "]", "!=", "ent", "[", "'type'", "]", "\n", "\n", "ent", "=", "{", "\n", "'type'", ":", "\n", "args", "[", "0", "]", ",", "\n", "'elements'", ":", "\n", "[", "z", "for", "y", "in", "[", "x", ".", "entities", "for", "x", "in", "ent", "[", "'elements'", "]", "]", "for", "z", "in", "y", "]", "\n", "}", "\n", "self", ".", "ent_queue", "=", "ent", "\n", "\n", "# remove blacklisted rooms", "\n", "", "if", "self", ".", "ent_queue", "[", "'type'", "]", "==", "'rooms'", "and", "self", ".", "use_blacklist", "==", "True", ":", "\n", "            ", "self", ".", "ent_queue", "=", "self", ".", "blacklist", "(", ")", "\n", "\n", "", "if", "self", ".", "ent_queue", "[", "'type'", "]", "==", "'objects'", "and", "self", ".", "use_threshold_size", "==", "True", ":", "\n", "            ", "self", ".", "ent_queue", "=", "self", ".", "thresholdSize", "(", ")", "\n", "\n", "", "return", "self", ".", "ent_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.unique": [[443, 476], ["enumerate", "enumerate", "names.count", "names.count"], "methods", ["None"], ["", "def", "unique", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "assert", "self", ".", "ent_queue", "!=", "None", "\n", "ent", "=", "self", ".", "ent_queue", "\n", "\n", "# unique based on room+object tuple", "\n", "if", "args", "[", "0", "]", "==", "'combo'", ":", "\n", "# self.ent_queue contains a list of objects", "\n", "            ", "names", "=", "[", "\n", "x", ".", "name", "+", "\" IN \"", "+", "\"_\"", ".", "join", "(", "x", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "for", "x", "in", "ent", "[", "'elements'", "]", "\n", "]", "\n", "\n", "idx", "=", "[", "\n", "i", "for", "i", ",", "v", "in", "enumerate", "(", "[", "names", ".", "count", "(", "x", ")", "for", "x", "in", "names", "]", ")", "if", "v", "!=", "1", "\n", "]", "\n", "for", "i", "in", "idx", "[", ":", ":", "-", "1", "]", ":", "\n", "                ", "del", "ent", "[", "'elements'", "]", "[", "i", "]", "\n", "\n", "", "self", ".", "ent_queue", "=", "ent", "\n", "return", "self", ".", "ent_queue", "\n", "\n", "# unique based on either rooms or objects (only)", "\n", "", "names", "=", "[", "x", ".", "name", "for", "x", "in", "ent", "[", "'elements'", "]", "]", "\n", "idx", "=", "[", "\n", "i", "for", "i", ",", "v", "in", "enumerate", "(", "[", "names", ".", "count", "(", "x", ")", "for", "x", "in", "names", "]", ")", "if", "v", "!=", "1", "\n", "]", "\n", "\n", "for", "i", "in", "idx", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "del", "ent", "[", "'elements'", "]", "[", "i", "]", "\n", "\n", "", "names", "=", "[", "x", ".", "name", "for", "x", "in", "ent", "[", "'elements'", "]", "]", "\n", "self", ".", "ent_queue", "=", "ent", "\n", "return", "self", ".", "ent_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.query": [[477, 482], ["None"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "assert", "self", ".", "ent_queue", "!=", "None", "\n", "ent", "=", "self", ".", "ent_queue", "\n", "\n", "return", "self", ".", "query_fns", "[", "'query_'", "+", "args", "[", "0", "]", "]", "(", "ent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.relate": [[483, 515], ["engine.Engine.house.getNearbyPairs", "len", "engine.Engine.ent_queue[].append", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.getNearbyPairs"], ["", "def", "relate", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "ent", "=", "self", ".", "ent_queue", "\n", "if", "len", "(", "ent", "[", "'elements'", "]", ")", "==", "0", ":", "\n", "            ", "return", "ent", "\n", "\n", "", "if", "ent", "[", "'type'", "]", "==", "'objects'", ":", "\n", "            ", "h_threshold", ",", "v_threshold", "=", "0.05", ",", "0.05", "\n", "", "elif", "ent", "[", "'type'", "]", "==", "'rooms'", ":", "\n", "            ", "h_threshold", ",", "v_threshold", "=", "5.0", ",", "5.0", "\n", "", "nearby_object_pairs", "=", "self", ".", "house", ".", "getNearbyPairs", "(", "\n", "ent", "[", "'elements'", "]", ",", "hthreshold", "=", "h_threshold", ",", "vthreshold", "=", "v_threshold", ")", "\n", "\n", "self", ".", "ent_queue", "[", "'elements'", "]", "=", "[", "]", "\n", "for", "prep", "in", "[", "'on'", ",", "'next_to'", "]", ":", "\n", "            ", "for", "el", "in", "nearby_object_pairs", "[", "prep", "]", ":", "\n", "                ", "if", "len", "(", "[", "\n", "x", "for", "x", "in", "nearby_object_pairs", "[", "prep", "]", "\n", "if", "x", "[", "0", "]", ".", "name", "==", "el", "[", "0", "]", ".", "name", "\n", "]", ")", ">", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "prep", "==", "'on'", ":", "\n", "                    ", "if", "el", "[", "2", "]", ">", "v_threshold", "/", "1000.0", ":", "\n", "                        ", "preps", "=", "[", "(", "'above'", ",", "1", ")", ",", "(", "'under'", ",", "0", ")", "]", "\n", "", "else", ":", "\n", "                        ", "preps", "=", "[", "(", "'on'", ",", "1", ")", ",", "(", "'below'", ",", "0", ")", "]", "\n", "", "", "elif", "prep", "==", "'next_to'", ":", "\n", "                    ", "preps", "=", "[", "(", "'next_to'", ",", "0", ")", ",", "(", "'next_to'", ",", "1", ")", "]", "\n", "\n", "", "self", ".", "ent_queue", "[", "'elements'", "]", ".", "append", "(", "[", "el", ",", "preps", "]", ")", "\n", "\n", "", "", "return", "self", ".", "ent_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.distance": [[517, 550], ["engine.Engine.house.getAllPairwiseDistances", "len", "len", "updated_ent_queue[].append", "updated_ent_queue[].append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.getAllPairwiseDistances"], ["", "def", "distance", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "ent", "=", "self", ".", "ent_queue", "\n", "if", "ent", "[", "'type'", "]", "==", "'objects'", ":", "\n", "            ", "h_low_threshold", ",", "h_high_threshold", "=", "0.2", ",", "2.0", "\n", "", "pairwise_distances", "=", "self", ".", "house", ".", "getAllPairwiseDistances", "(", "\n", "ent", "[", "'elements'", "]", ")", "\n", "\n", "# self.ent_queue['elements'] = []", "\n", "updated_ent_queue", "=", "{", "'type'", ":", "ent", "[", "'type'", "]", ",", "'elements'", ":", "[", "]", "}", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "            ", "sub_list", "=", "[", "\n", "x", "for", "x", "in", "pairwise_distances", "\n", "if", "x", "[", "0", "]", ".", "meta", "[", "'id'", "]", "==", "i", ".", "meta", "[", "'id'", "]", "\n", "or", "x", "[", "1", "]", ".", "meta", "[", "'id'", "]", "==", "i", ".", "meta", "[", "'id'", "]", "\n", "]", "\n", "sub_list", "=", "[", "\n", "x", "for", "x", "in", "sub_list", "if", "x", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", "==", "x", "[", "1", "]", ".", "rooms", "[", "0", "]", ".", "name", "\n", "]", "\n", "far", "=", "[", "x", "for", "x", "in", "sub_list", "if", "x", "[", "2", "]", ">=", "h_high_threshold", "]", "\n", "close", "=", "[", "x", "for", "x", "in", "sub_list", "if", "x", "[", "2", "]", "<=", "h_low_threshold", "]", "\n", "if", "len", "(", "far", ")", "==", "0", "or", "len", "(", "close", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "for", "j", "in", "far", ":", "\n", "                ", "far_ent", "=", "1", "if", "j", "[", "0", "]", ".", "name", "==", "i", ".", "name", "else", "0", "\n", "for", "k", "in", "close", ":", "\n", "                    ", "close_ent", "=", "1", "if", "k", "[", "0", "]", ".", "name", "==", "i", ".", "name", "else", "0", "\n", "updated_ent_queue", "[", "'elements'", "]", ".", "append", "(", "\n", "[", "k", "[", "close_ent", "]", ",", "i", ",", "j", "[", "far_ent", "]", ",", "'closer'", "]", ")", "\n", "updated_ent_queue", "[", "'elements'", "]", ".", "append", "(", "\n", "[", "j", "[", "far_ent", "]", ",", "i", ",", "k", "[", "close_ent", "]", ",", "'farther'", "]", ")", "\n", "\n", "", "", "", "self", ".", "ent_queue", "=", "updated_ent_queue", "\n", "return", "self", ".", "ent_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryRoom": [[551, 567], ["len", "qns.append", "print", "i.rooms[].name[].split", "engine.Engine.q_obj_builder", "print"], "methods", ["None"], ["", "def", "queryRoom", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "            ", "if", "len", "(", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", ">", "1", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryRoom. room has multiple names.'", ",", "\n", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "", "elif", "i", ".", "rooms", "[", "0", "]", ".", "name", "==", "[", "]", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryRoom. room has no name.'", ",", "i", ".", "name", ",", "\n", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "", "if", "\"_\"", ".", "join", "(", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", ".", "split", "(", ")", ")", "not", "in", "self", ".", "blacklist_rooms", ":", "\n", "                ", "qns", ".", "append", "(", "self", ".", "q_obj_builder", "(", "'location'", ",", "[", "i", "]", ",", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", ")", ")", "\n", "", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryCount": [[568, 590], ["len", "len", "qns.append", "print", "engine.Engine.q_obj_builder", "print"], "methods", ["None"], ["", "def", "queryCount", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "            ", "if", "len", "(", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", ">", "1", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryCount. room has multiple names.'", ",", "\n", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "", "elif", "i", ".", "rooms", "[", "0", "]", ".", "name", "==", "[", "]", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryCount. room has no name.'", ",", "i", ".", "name", ",", "\n", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "\n", "", "count", "=", "len", "(", "[", "x", "for", "x", "in", "i", ".", "rooms", "[", "0", "]", ".", "objects", "if", "x", ".", "name", "==", "i", ".", "name", "]", ")", "\n", "if", "count", "<=", "5", ":", "\n", "                ", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "\n", "'count'", ",", "\n", "[", "x", "for", "x", "in", "i", ".", "rooms", "[", "0", "]", ".", "objects", "\n", "if", "x", ".", "name", "==", "i", ".", "name", "]", ",", "count", ")", ")", "\n", "", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryRoomCounts": [[591, 621], ["set", "exp_rooms.count", "set.add", "print", "qns.append", "engine.Engine.q_obj_builder"], "methods", ["None"], ["", "def", "queryRoomCounts", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "rooms_done", "=", "set", "(", ")", "\n", "\n", "# print [i.name for i in ent['elements']]", "\n", "exp_rooms", "=", "[", "\n", "name", "for", "room_ent", "in", "ent", "[", "'elements'", "]", "for", "name", "in", "room_ent", ".", "name", "\n", "]", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "            ", "if", "i", ".", "name", "==", "[", "]", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryRoomCount. room has no name.'", ",", "\n", "i", ".", "name", ",", "i", ".", "name", ")", "\n", "", "continue", "\n", "\n", "", "for", "room_name", "in", "i", ".", "name", ":", "\n", "                ", "if", "room_name", "in", "rooms_done", ":", "continue", "\n", "count", "=", "exp_rooms", ".", "count", "(", "room_name", ")", "\n", "# so that the correct room name is displayed in the question string", "\n", "i", ".", "name", "[", "0", "]", "=", "room_name", "\n", "if", "count", "<", "5", ":", "\n", "                    ", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "'room_count'", ",", "[", "\n", "room_ent", "for", "room_ent", "in", "ent", "[", "'elements'", "]", "\n", "if", "room_name", "in", "room_ent", ".", "name", "\n", "]", ",", "count", ")", ")", "\n", "", "rooms_done", ".", "add", "(", "room_name", ")", "\n", "# count = len([x for x in ent['elements'] if len(x.name) == 1 and x.name[0] == i.name[0]])", "\n", "\n", "", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryRoomObjectCounts": [[622, 663], ["dict", "dict", "len", "len", "obj_to_room_bbox[].append", "obj_to_room_names[].append", "qns.append", "len", "engine.Engine.q_obj_builder", "engine.objectEntity"], "methods", ["None"], ["", "def", "queryRoomObjectCounts", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "obj_to_room_names", ",", "obj_to_room_bbox", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "# we should also include objects appearing in rooms", "\n", "# with multiple or no names (agent can walk through them)", "\n", "\n", "            ", "obj_name", "=", "i", ".", "name", "\n", "obj_room_bbox", "=", "i", ".", "rooms", "[", "0", "]", ".", "meta", "[", "'bbox'", "]", "\n", "\n", "if", "len", "(", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "==", "0", ":", "room_name_for_obj", "=", "\"none\"", "\n", "elif", "len", "(", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", ">", "1", ":", "\n", "                ", "room_name_for_obj", "=", "\" \"", ".", "join", "(", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "else", ":", "\n", "                ", "room_name_for_obj", "=", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "\n", "\n", "# update the room info for the obj. this update should be done only", "\n", "# if we have found an instance of the object in a new room (check using bbox dict)", "\n", "", "if", "obj_name", "not", "in", "obj_to_room_bbox", ":", "\n", "                ", "obj_to_room_bbox", "[", "obj_name", "]", "=", "[", "]", "\n", "", "if", "obj_name", "not", "in", "obj_to_room_names", ":", "\n", "                ", "obj_to_room_names", "[", "obj_name", "]", "=", "[", "]", "\n", "\n", "", "if", "obj_room_bbox", "not", "in", "obj_to_room_bbox", "[", "obj_name", "]", ":", "\n", "                ", "obj_to_room_bbox", "[", "obj_name", "]", ".", "append", "(", "obj_room_bbox", ")", "\n", "obj_to_room_names", "[", "obj_name", "]", ".", "append", "(", "room_name_for_obj", ")", "\n", "\n", "", "", "for", "obj_name", "in", "obj_to_room_names", ":", "\n", "            ", "ans", "=", "len", "(", "obj_to_room_names", "[", "obj_name", "]", ")", "\n", "gt_bboxes", "=", "obj_to_room_bbox", "[", "obj_name", "]", "\n", "if", "ans", "<=", "5", ":", "\n", "                ", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "\n", "# abusing notation here : the bbox entry for the \"dummy\"", "\n", "# object entity is actually a list of bbox entries of the", "\n", "# rooms where this object occurs in the house", "\n", "'room_object_count'", ",", "\n", "[", "objectEntity", "(", "obj_name", ",", "gt_bboxes", ",", "{", "}", ")", "]", ",", "\n", "ans", ")", ")", "\n", "\n", "", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryGlobalObjectCounts": [[664, 708], ["dict", "rooms.append", "entities_in_room.append", "set", "len", "obj_names.count", "set.add", "print", "qns.append", "print", "engine.Engine.q_obj_builder"], "methods", ["None"], ["", "def", "queryGlobalObjectCounts", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "room_wise_dist", "=", "dict", "(", ")", "\n", "rooms", "=", "[", "]", "\n", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "# Ignore objects which occur in rooms with no name or multiple names", "\n", "            ", "if", "len", "(", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", ">", "1", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryCount. room has multiple names.'", ",", "\n", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "", "elif", "i", ".", "rooms", "[", "0", "]", ".", "name", "==", "[", "]", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryCount. room has no name.'", ",", "i", ".", "name", ",", "\n", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "\n", "", "room_name_for_obj", "=", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "\n", "\n", "rooms", ".", "append", "(", "i", ".", "rooms", "[", "0", "]", ")", "\n", "\n", "if", "room_name_for_obj", "not", "in", "room_wise_dist", ":", "\n", "                ", "room_wise_dist", "[", "room_name_for_obj", "]", "=", "[", "]", "\n", "", "entities_in_room", "=", "room_wise_dist", "[", "room_name_for_obj", "]", "\n", "entities_in_room", ".", "append", "(", "i", ")", "\n", "room_wise_dist", "[", "room_name_for_obj", "]", "=", "entities_in_room", "\n", "\n", "", "for", "room_name", "in", "room_wise_dist", ":", "\n", "            ", "if", "room_name", "in", "self", ".", "blacklist_rooms", ":", "continue", "\n", "obj_entities", "=", "room_wise_dist", "[", "room_name", "]", "\n", "obj_names", "=", "[", "obj", ".", "name", "for", "obj", "in", "obj_entities", "]", "\n", "\n", "objs_done", "=", "set", "(", ")", "\n", "for", "obj_entity", "in", "obj_entities", ":", "\n", "                ", "if", "obj_entity", ".", "name", "in", "objs_done", ":", "continue", "\n", "ans", "=", "obj_names", ".", "count", "(", "obj_entity", ".", "name", ")", "\n", "if", "ans", "<=", "5", ":", "\n", "                    ", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "'global_object_count'", ",", "[", "obj_entity", "]", ",", "\n", "ans", ")", ")", "\n", "", "objs_done", ".", "add", "(", "obj_entity", ".", "name", ")", "\n", "\n", "", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryExist": [[709, 756], ["qns.append", "engine.Engine.negative_exists[].append", "engine.objectEntity", "engine.objectEntity.addRoom", "qns.append", "len", "engine.Engine.q_obj_builder", "len", "engine.Engine.q_obj_builder", "print", "print", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.objectEntity.addRoom"], ["", "def", "queryExist", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "            ", "if", "len", "(", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", ">", "1", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryExist. room has multiple names.'", ",", "\n", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "", "elif", "i", ".", "rooms", "[", "0", "]", ".", "name", "==", "[", "]", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryExist. room has no name.'", ",", "i", ".", "name", ",", "\n", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "\n", "", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "\n", "'exist'", ",", "[", "i", "]", ",", "'yes'", ",", "q_type", "=", "'exist_positive'", ")", ")", "\n", "\n", "# generate list of object names in i.rooms[0].name in current env", "\n", "obj_present", "=", "[", "\n", "x", ".", "name", "for", "x", "in", "ent", "[", "'elements'", "]", "\n", "if", "len", "(", "x", ".", "rooms", "[", "0", "]", ".", "name", ")", "!=", "0", "\n", "and", "x", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "==", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "\n", "]", "\n", "if", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "not", "in", "self", ".", "negative_exists", ":", "\n", "                ", "self", ".", "negative_exists", "[", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "]", "=", "[", "]", "\n", "\n", "# generate list of object names for i.rooms[0].name not in i.rooms[0].name in current env", "\n", "", "obj_not_present", "=", "[", "\n", "x", "for", "x", "in", "self", ".", "global_obj_by_room", "[", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "]", "\n", "if", "x", "[", "0", "]", "not", "in", "obj_present", "\n", "and", "x", "[", "0", "]", "not", "in", "self", ".", "negative_exists", "[", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "]", "\n", "]", "\n", "\n", "# create object entity and generate a no question", "\n", "if", "len", "(", "obj_not_present", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "self", ".", "negative_exists", "[", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "]", ".", "append", "(", "\n", "obj_not_present", "[", "0", "]", "[", "0", "]", ")", "\n", "sampled_obj", "=", "objectEntity", "(", "obj_not_present", "[", "0", "]", "[", "0", "]", ",", "{", "}", ",", "{", "}", ")", "\n", "sampled_obj", ".", "addRoom", "(", "i", ".", "rooms", "[", "0", "]", ")", "\n", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "\n", "'exist'", ",", "[", "sampled_obj", "]", ",", "'no'", ",", "q_type", "=", "'exist_negative'", ")", ")", "\n", "\n", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryLogical": [[757, 879], ["set", "range", "range", "random.shuffle", "random.shuffle", "random.shuffle", "len", "set.add", "len", "len", "range", "len", "range", "obj1_entity.rooms.append", "qns.append", "qns.append", "obj1_entity.rooms.append", "qns.append", "qns.append", "obj1_entity.rooms.append", "qns.append", "qns.append", "print", "len", "both_present.append", "len", "both_absent.append", "only_one_present.append", "engine.objectEntity", "engine.objectEntity", "engine.Engine.q_obj_builder", "engine.Engine.q_obj_builder", "engine.objectEntity", "engine.objectEntity", "engine.Engine.q_obj_builder", "engine.Engine.q_obj_builder", "engine.objectEntity", "engine.objectEntity", "engine.Engine.q_obj_builder", "engine.Engine.q_obj_builder", "print", "int", "int", "len"], "methods", ["None"], ["", "def", "queryLogical", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "rooms_done", "=", "set", "(", ")", "\n", "\n", "# the entities queue contains a list of object entities", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "# ignore objects with (1) multiple and (2) no room names", "\n", "            ", "if", "len", "(", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", ">", "1", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "\n", "'exception in queryLogical. room has multiple names.'", ",", "\n", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "", "elif", "i", ".", "rooms", "[", "0", "]", ".", "name", "==", "[", "]", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryLogical. room has no name.'", ",", "\n", "i", ".", "name", ",", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "\n", "", "if", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "in", "rooms_done", ":", "continue", "\n", "# get list of all objects present in the same as room as the current object", "\n", "# note that as we iterate throgh the ent queue, all the objects in the same room", "\n", "# will generate identical list -- so we save the rooms processed in the room_done set", "\n", "\n", "# For example : if the first obj is a bed inside a bedroom, and this bedroom has", "\n", "# a total of 5 objects= : ['chair', 'bed', 'chair', 'dressing_table', 'curtains']", "\n", "# Then, whenever any of these objects is encountered in the loop (for i in ent['elements'])", "\n", "# we will end up generating the same list as shown", "\n", "local_list", "=", "[", "(", "x", ",", "x", ".", "name", ")", "for", "x", "in", "ent", "[", "'elements'", "]", "\n", "if", "len", "(", "x", ".", "rooms", "[", "0", "]", ".", "name", ")", "==", "1", "\n", "and", "x", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "==", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "]", "\n", "local_objects_list_", "=", "[", "obj", "for", "(", "obj", ",", "_", ")", "in", "local_list", "]", "\n", "local_object_names_list", "=", "[", "name", "for", "(", "_", ",", "name", ")", "in", "local_list", "]", "\n", "\n", "# get list of objects which are not present in the room where i resides.", "\n", "# this list is also pruned based on frequency", "\n", "# again, this list will be identical for all objects in the same room", "\n", "objs_not_present", "=", "[", "\n", "x", "[", "0", "]", "for", "x", "in", "self", ".", "global_obj_by_room", "[", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", "]", "\n", "if", "x", "[", "0", "]", "not", "in", "local_object_names_list", "\n", "]", "\n", "\n", "both_present", ",", "both_absent", ",", "only_one_present", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "# print (\"Room : %s\" % i.rooms[0].name)", "\n", "\n", "# populate objects for yes answer questions", "\n", "for", "i_idx", "in", "range", "(", "len", "(", "local_object_names_list", ")", ")", ":", "\n", "                ", "for", "j_idx", "in", "range", "(", "i_idx", "+", "1", ",", "len", "(", "local_object_names_list", ")", ")", ":", "\n", "                    ", "if", "local_object_names_list", "[", "\n", "i_idx", "]", "==", "local_object_names_list", "[", "j_idx", "]", ":", "\n", "                        ", "continue", "\n", "", "both_present", ".", "append", "(", "(", "local_object_names_list", "[", "i_idx", "]", ",", "\n", "local_object_names_list", "[", "j_idx", "]", ")", ")", "\n", "\n", "# populate objects for no answer questions -- part 1", "\n", "", "", "for", "i_idx", "in", "range", "(", "len", "(", "objs_not_present", ")", ")", ":", "\n", "                ", "for", "j_idx", "in", "range", "(", "i_idx", "+", "1", ",", "len", "(", "objs_not_present", ")", ")", ":", "\n", "                    ", "if", "objs_not_present", "[", "i_idx", "]", "==", "objs_not_present", "[", "j_idx", "]", ":", "\n", "                        ", "continue", "\n", "", "both_absent", ".", "append", "(", "(", "objs_not_present", "[", "i_idx", "]", ",", "\n", "objs_not_present", "[", "j_idx", "]", ")", ")", "\n", "\n", "# populate objects for no answer questions -- part 2", "\n", "", "", "for", "obj1", "in", "local_object_names_list", ":", "\n", "                ", "for", "obj2", "in", "objs_not_present", ":", "\n", "                    ", "only_one_present", ".", "append", "(", "(", "obj1", ",", "obj2", ")", ")", "\n", "\n", "# generate a question for each object pairs in the 3 lists", "\n", "", "", "shuffle", "(", "both_present", ")", "\n", "shuffle", "(", "both_absent", ")", "\n", "shuffle", "(", "only_one_present", ")", "\n", "num_yes", "=", "num_no", "=", "len", "(", "both_present", ")", "\n", "only_one_present", ",", "both_absent", "=", "only_one_present", "[", ":", "int", "(", "\n", "num_no", "-", "num_no", "/", "2", ")", "]", ",", "both_absent", "[", ":", "int", "(", "num_no", "/", "2", ")", "]", "\n", "\n", "for", "(", "obj1", ",", "obj2", ")", "in", "both_present", ":", "\n", "                ", "obj1_entity", ",", "obj2_entity", "=", "objectEntity", "(", "obj1", ",", "{", "}", ",", "\n", "{", "}", ")", ",", "objectEntity", "(", "\n", "obj2", ",", "{", "}", ",", "{", "}", ")", "\n", "obj1_entity", ".", "rooms", ".", "append", "(", "i", ".", "rooms", "[", "0", "]", ")", "\n", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "'exist_logic'", ",", "\n", "[", "(", "obj1_entity", ",", "obj2_entity", ")", "]", ",", "'yes'", ",", "\n", "'exist_logical_positive'", ")", ")", "\n", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "'exist_logic'", ",", "\n", "[", "(", "obj1_entity", ",", "obj2_entity", ")", "]", ",", "'yes'", ",", "\n", "'exist_logical_or_positive_1'", ")", ")", "\n", "", "for", "(", "obj1", ",", "obj2", ")", "in", "both_absent", ":", "\n", "                ", "obj1_entity", ",", "obj2_entity", "=", "objectEntity", "(", "obj1", ",", "{", "}", ",", "\n", "{", "}", ")", ",", "objectEntity", "(", "\n", "obj2", ",", "{", "}", ",", "{", "}", ")", "\n", "obj1_entity", ".", "rooms", ".", "append", "(", "\n", "i", ".", "rooms", "[", "0", "]", "\n", ")", "# this is not technically correct, just so that q_string_builder works", "\n", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "'exist_logic'", ",", "\n", "[", "(", "obj1_entity", ",", "obj2_entity", ")", "]", ",", "'no'", ",", "\n", "'exist_logical_negative_1'", ")", ")", "\n", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "'exist_logic'", ",", "\n", "[", "(", "obj1_entity", ",", "obj2_entity", ")", "]", ",", "'no'", ",", "\n", "'exist_logical_or_negative'", ")", ")", "\n", "\n", "", "for", "(", "obj1", ",", "obj2", ")", "in", "only_one_present", ":", "\n", "                ", "obj1_entity", ",", "obj2_entity", "=", "objectEntity", "(", "obj1", ",", "{", "}", ",", "\n", "{", "}", ")", ",", "objectEntity", "(", "\n", "obj2", ",", "{", "}", ",", "{", "}", ")", "\n", "obj1_entity", ".", "rooms", ".", "append", "(", "i", ".", "rooms", "[", "0", "]", ")", "\n", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "'exist_logic'", ",", "\n", "[", "(", "obj1_entity", ",", "obj2_entity", ")", "]", ",", "'no'", ",", "\n", "'exist_logical_negative_2'", ")", ")", "\n", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "'exist_logic'", ",", "\n", "[", "(", "obj1_entity", ",", "obj2_entity", ")", "]", ",", "'yes'", ",", "\n", "'exist_logical_or_positive_2'", ")", ")", "\n", "\n", "# mark room as done", "\n", "", "rooms_done", ".", "add", "(", "i", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", ")", "\n", "\n", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryColor": [[880, 891], ["qns.append", "engine.Engine.q_obj_builder"], "methods", ["None"], ["", "def", "queryColor", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "            ", "if", "self", ".", "house", ".", "id", "+", "'.'", "+", "i", ".", "id", "in", "self", ".", "env_obj_color_map", ":", "\n", "                ", "color", "=", "self", ".", "env_obj_color_map", "[", "self", ".", "house", ".", "id", "+", "'.'", "+", "i", ".", "id", "]", "\n", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "'color'", ",", "[", "i", "]", ",", "color", ")", ")", "\n", "", "else", ":", "\n", "# no color", "\n", "                ", "continue", "\n", "", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryColorRoom": [[892, 914], ["len", "qns.append", "print", "engine.Engine.q_obj_builder", "print"], "methods", ["None"], ["", "def", "queryColorRoom", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "            ", "if", "len", "(", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", ">", "1", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryExist. room has multiple names.'", ",", "\n", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "", "elif", "i", ".", "rooms", "[", "0", "]", ".", "name", "==", "[", "]", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryExist. room has no name.'", ",", "i", ".", "name", ",", "\n", "i", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "\n", "", "if", "self", ".", "house", ".", "id", "+", "'.'", "+", "i", ".", "id", "in", "self", ".", "env_obj_color_map", ":", "\n", "                ", "color", "=", "self", ".", "env_obj_color_map", "[", "self", ".", "house", ".", "id", "+", "'.'", "+", "i", ".", "id", "]", "\n", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "'color_room'", ",", "[", "i", "]", ",", "color", ")", ")", "\n", "", "else", ":", "\n", "# no color", "\n", "                ", "continue", "\n", "", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryObject": [[915, 926], ["qns.append", "engine.Engine.q_obj_builder"], "methods", ["None"], ["", "def", "queryObject", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "            ", "el", "=", "i", "[", "0", "]", "\n", "preps", "=", "i", "[", "1", "]", "\n", "for", "prep_mod", "in", "preps", ":", "\n", "                ", "if", "el", "[", "prep_mod", "[", "1", "]", "^", "1", "]", ".", "name", "not", "in", "self", ".", "blacklist_objects", "[", "'relate'", "]", ":", "\n", "                    ", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "prep_mod", "[", "0", "]", ",", "[", "el", "[", "prep_mod", "[", "1", "]", "]", "]", ",", "\n", "el", "[", "prep_mod", "[", "1", "]", "^", "1", "]", ".", "name", ")", ")", "\n", "", "", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryObjectRoom": [[927, 949], ["len", "print", "qns.append", "print", "engine.Engine.q_obj_builder"], "methods", ["None"], ["", "def", "queryObjectRoom", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "            ", "el", "=", "i", "[", "0", "]", "\n", "preps", "=", "i", "[", "1", "]", "\n", "if", "len", "(", "el", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", ")", ">", "1", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryExist. room has multiple names.'", ",", "\n", "el", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "", "elif", "el", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", "==", "[", "]", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryExist. room has no name.'", ",", "\n", "el", "[", "0", "]", ".", "name", ",", "el", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "", "for", "prep_mod", "in", "preps", ":", "\n", "                ", "if", "el", "[", "prep_mod", "[", "1", "]", "^", "1", "]", ".", "name", "not", "in", "self", ".", "blacklist_objects", "[", "'relate'", "]", ":", "\n", "                    ", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "prep_mod", "[", "0", "]", "+", "'_room'", ",", "\n", "[", "el", "[", "prep_mod", "[", "1", "]", "]", "]", ",", "\n", "el", "[", "prep_mod", "[", "1", "]", "^", "1", "]", ".", "name", ")", ")", "\n", "", "", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.queryCompare": [[950, 970], ["qns.append", "qns.append", "len", "engine.Engine.q_obj_builder", "engine.Engine.q_obj_builder", "print", "print"], "methods", ["None"], ["", "def", "queryCompare", "(", "self", ",", "ent", ")", ":", "\n", "        ", "qns", "=", "[", "]", "\n", "for", "i", "in", "ent", "[", "'elements'", "]", ":", "\n", "            ", "if", "len", "(", "i", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", ")", ">", "1", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryExist. room has multiple names.'", ",", "\n", "i", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "", "elif", "i", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", "==", "[", "]", ":", "\n", "                ", "if", "self", ".", "debug", "==", "True", ":", "\n", "                    ", "print", "(", "'exception in queryExist. room has no name.'", ",", "\n", "i", "[", "0", "]", ".", "name", ",", "i", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", ")", "\n", "", "continue", "\n", "", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "i", "[", "3", "]", "+", "'_room'", ",", "i", "[", ":", "3", "]", ",", "'yes'", ",", "\n", "'dist_compare_positive'", ")", ")", "\n", "qns", ".", "append", "(", "\n", "self", ".", "q_obj_builder", "(", "i", "[", "3", "]", "+", "'_room'", ",", "i", "[", ":", "3", "]", "[", ":", ":", "-", "1", "]", ",", "'no'", ",", "\n", "'dist_compare_negative'", ")", ")", "\n", "", "return", "qns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.questionObjectBuilder": [[971, 1091], ["engine.Engine.q_str_builder.prepareString", "engine.Engine.q_str_builder.prepareString", "engine.Engine.q_str_builder.prepareString", "isinstance", "bbox.append", "engine.Engine.q_str_builder.prepareString", "engine.Engine.q_str_builder.prepareString", "isinstance", "bbox.append", "engine.Engine.q_str_builder.prepareStringForLogic", "engine.Engine.q_str_builder.prepareStringForLogic", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.prepareString", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.prepareString", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.prepareString", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.prepareString", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.prepareString", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.prepareStringForLogic", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.question_string_builder.QuestionStringBuilder.prepareStringForLogic"], ["", "def", "questionObjectBuilder", "(", "self", ",", "template", ",", "q_ent", ",", "a_str", ",", "q_type", "=", "None", ")", ":", "\n", "        ", "if", "q_type", "==", "None", ":", "\n", "            ", "q_type", "=", "template", "\n", "\n", "", "q_str", "=", "self", ".", "templates", "[", "template", "]", "\n", "bbox", "=", "[", "]", "\n", "\n", "if", "template", "==", "'room_count'", ":", "\n", "# if this condition holds, the question type is 'room_count' and the q_ent[0] is a room entity", "\n", "            ", "q_str", "=", "self", ".", "q_str_builder", ".", "prepareString", "(", "q_str", ",", "''", ",", "\n", "q_ent", "[", "0", "]", ".", "name", "[", "0", "]", ")", "\n", "return", "{", "\n", "'question'", ":", "\n", "q_str", ",", "\n", "'answer'", ":", "\n", "a_str", ",", "\n", "'type'", ":", "\n", "q_type", ",", "\n", "'meta'", ":", "{", "}", ",", "\n", "'bbox'", ":", "[", "{", "\n", "'type'", ":", "x", ".", "type", ",", "\n", "'box'", ":", "x", ".", "bbox", ",", "\n", "'name'", ":", "x", ".", "name", ",", "\n", "'target'", ":", "True", "\n", "}", "for", "x", "in", "q_ent", "]", "\n", "}", "\n", "\n", "", "if", "template", "==", "'room_object_count'", ":", "\n", "            ", "q_str", "=", "self", ".", "q_str_builder", ".", "prepareString", "(", "q_str", ",", "q_ent", "[", "0", "]", ".", "name", ",", "''", ")", "\n", "return", "{", "\n", "'question'", ":", "\n", "q_str", ",", "\n", "'answer'", ":", "\n", "a_str", ",", "\n", "'type'", ":", "\n", "q_type", ",", "\n", "'meta'", ":", "{", "}", ",", "\n", "'bbox'", ":", "[", "{", "\n", "'type'", ":", "x", ".", "type", ",", "\n", "'box'", ":", "x", ".", "bbox", ",", "\n", "'name'", ":", "x", ".", "name", ",", "\n", "'target'", ":", "True", "\n", "}", "for", "x", "in", "q_ent", "]", "\n", "}", "\n", "\n", "", "if", "template", "==", "'global_object_count'", ":", "\n", "# if (len(q_ent) == 1) and (not isinstance(q_ent[0], tuple)) and (q_ent[0].type == 'object'):", "\n", "# if this condition holds, the question type is 'global_object_count' and the q_ent[0] is an obj entity", "\n", "            ", "q_str", "=", "self", ".", "q_str_builder", ".", "prepareString", "(", "q_str", ",", "q_ent", "[", "0", "]", ".", "name", ",", "\n", "q_ent", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", ")", "\n", "return", "{", "\n", "'question'", ":", "q_str", ",", "\n", "'answer'", ":", "a_str", ",", "\n", "'type'", ":", "q_type", ",", "\n", "'meta'", ":", "{", "}", ",", "\n", "'bbox'", ":", "[", "{", "}", "]", "\n", "}", "\n", "\n", "", "for", "ent", "in", "q_ent", ":", "\n", "# if ent is a tuple, it means exist_logic questions", "\n", "            ", "if", "isinstance", "(", "ent", ",", "tuple", ")", ":", "\n", "                ", "if", "'or'", "in", "q_type", ":", "\n", "                    ", "q_str", "=", "self", ".", "q_str_builder", ".", "prepareStringForLogic", "(", "\n", "q_str", ",", "ent", "[", "0", "]", ".", "name", ",", "ent", "[", "1", "]", ".", "name", ",", "\n", "ent", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", ",", "\"or\"", ")", "\n", "", "else", ":", "\n", "                    ", "q_str", "=", "self", ".", "q_str_builder", ".", "prepareStringForLogic", "(", "\n", "q_str", ",", "ent", "[", "0", "]", ".", "name", ",", "ent", "[", "1", "]", ".", "name", ",", "\n", "ent", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", ",", "\"and\"", ")", "\n", "", "return", "{", "\n", "'question'", ":", "\n", "q_str", ",", "\n", "'answer'", ":", "\n", "a_str", ",", "\n", "'type'", ":", "\n", "q_type", ",", "\n", "'meta'", ":", "{", "}", ",", "\n", "'bbox'", ":", "[", "{", "\n", "'type'", ":", "ent", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "type", ",", "\n", "'box'", ":", "ent", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "bbox", ",", "\n", "'name'", ":", "ent", "[", "0", "]", ".", "rooms", "[", "0", "]", ".", "name", ",", "\n", "'target'", ":", "True", "\n", "}", "]", "\n", "}", "\n", "\n", "", "bbox", ".", "append", "(", "{", "\n", "'type'", ":", "ent", ".", "type", ",", "\n", "'box'", ":", "ent", ".", "bbox", ",", "\n", "'name'", ":", "ent", ".", "name", ",", "\n", "'target'", ":", "True", "\n", "}", ")", "\n", "if", "not", "isinstance", "(", "ent", ",", "tuple", ")", "and", "len", "(", "ent", ".", "rooms", "[", "0", "]", ".", "name", ")", "!=", "0", ":", "\n", "                ", "q_str", "=", "self", ".", "q_str_builder", ".", "prepareString", "(", "\n", "q_str", ",", "ent", ".", "name", ",", "ent", ".", "rooms", "[", "0", "]", ".", "name", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "q_str", "=", "self", ".", "q_str_builder", ".", "prepareString", "(", "q_str", ",", "ent", ".", "name", ",", "''", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "ent", ",", "tuple", ")", ":", "\n", "                ", "if", "len", "(", "ent", ".", "rooms", "[", "0", "]", ".", "name", ")", "==", "0", ":", "\n", "                    ", "name", "=", "[", "]", "\n", "", "else", ":", "\n", "                    ", "name", "=", "ent", ".", "rooms", "[", "0", "]", ".", "name", "\n", "", "bbox", ".", "append", "(", "{", "\n", "'type'", ":", "ent", ".", "rooms", "[", "0", "]", ".", "type", ",", "\n", "'box'", ":", "ent", ".", "rooms", "[", "0", "]", ".", "bbox", ",", "\n", "'name'", ":", "name", ",", "\n", "'target'", ":", "False", "\n", "}", ")", "\n", "\n", "", "", "if", "'mat'", "in", "q_ent", "[", "0", "]", ".", "meta", ":", "\n", "            ", "mat", "=", "q_ent", "[", "0", "]", ".", "meta", "[", "'mat'", "]", "\n", "", "else", ":", "\n", "            ", "mat", "=", "{", "}", "\n", "\n", "", "return", "{", "\n", "'question'", ":", "q_str", ",", "\n", "'answer'", ":", "a_str", ",", "\n", "'type'", ":", "q_type", ",", "\n", "'meta'", ":", "mat", ",", "\n", "'bbox'", ":", "bbox", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.computeEntropy": [[19, 28], ["len", "math.log"], "function", ["None"], ["def", "computeEntropy", "(", "p_distr", ")", ":", "\n", "\t", "n", "=", "len", "(", "p_distr", ")", "\n", "ent", "=", "0.0", "\n", "if", "n", "==", "1", ":", "return", "ent", "\n", "\n", "for", "p", "in", "p_distr", ":", "\n", "\t\t", "if", "p", "!=", "0.0", ":", "\n", "\t\t\t", "ent", "+=", "-", "(", "p", "*", "math", ".", "log", "(", "p", ",", "n", ")", ")", "\n", "", "", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.computeEntropyForQuestion": [[29, 31], ["entro.computeEntropy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.computeEntropy"], ["", "def", "computeEntropyForQuestion", "(", "ans_freqs", ")", ":", "\n", "\t", "return", "computeEntropy", "(", "[", "freq", "for", "(", "ans", ",", "freq", ")", "in", "ans_freqs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.computeAnswerDistributionForSingleQuestion": [[35, 46], ["dict", "sum", "sorted", "sorted.reverse", "dict.values", "entro.computeEntropyForQuestion", "dict.items", "operator.itemgetter"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.computeEntropyForQuestion"], ["", "def", "computeAnswerDistributionForSingleQuestion", "(", "answers", ")", ":", "\n", "\t", "answer_freq", "=", "dict", "(", ")", "\n", "for", "ans", "in", "answers", ":", "\n", "\t\t", "if", "ans", "not", "in", "answer_freq", ":", "answer_freq", "[", "ans", "]", "=", "1", "\n", "else", ":", "answer_freq", "[", "ans", "]", "=", "answer_freq", "[", "ans", "]", "+", "1", "\n", "\n", "", "total_ans", "=", "sum", "(", "answer_freq", ".", "values", "(", ")", ")", "\n", "answer_freq", "=", "[", "(", "ans", ",", "(", "cnt", "*", "1.", ")", "/", "total_ans", ")", "for", "(", "ans", ",", "cnt", ")", "in", "answer_freq", ".", "items", "(", ")", "]", "\n", "sorted_answer_freq", "=", "sorted", "(", "answer_freq", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "\n", "sorted_answer_freq", ".", "reverse", "(", ")", "\n", "return", "sorted_answer_freq", ",", "total_ans", ",", "computeEntropyForQuestion", "(", "sorted_answer_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.computeAnswerDistributionForAllQuestions": [[48, 59], ["dict", "all_answers.items", "dict", "dict", "entro.computeAnswerDistributionForSingleQuestion"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.computeAnswerDistributionForSingleQuestion"], ["", "def", "computeAnswerDistributionForAllQuestions", "(", "all_answers", ")", ":", "\n", "\t", "answer_distribution_all_qns", "=", "dict", "(", ")", "\n", "qn_counts", ",", "qn_entropy", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "\n", "for", "(", "question", ",", "answers", ")", "in", "all_answers", ".", "items", "(", ")", ":", "\n", "\t\t", "ans_dist", ",", "total_ans", ",", "ent", "=", "computeAnswerDistributionForSingleQuestion", "(", "answers", ")", "\n", "answer_distribution_all_qns", "[", "question", "]", "=", "ans_dist", "\n", "qn_counts", "[", "question", "]", "=", "total_ans", "\n", "qn_entropy", "[", "question", "]", "=", "ent", "\n", "\n", "", "return", "answer_distribution_all_qns", ",", "qn_counts", ",", "qn_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.updateDict": [[62, 69], ["ans_list.append"], "function", ["None"], ["", "def", "updateDict", "(", "qa_pair", ",", "all_answers", ")", ":", "\n", "\t", "q", ",", "a", "=", "qa_pair", "[", "0", "]", ",", "qa_pair", "[", "1", "]", "\n", "if", "q", "not", "in", "all_answers", ":", "all_answers", "[", "q", "]", "=", "[", "a", "]", "\n", "else", ":", "\n", "\t\t", "ans_list", "=", "all_answers", "[", "q", "]", "\n", "ans_list", ".", "append", "(", "a", ")", "\n", "all_answers", "[", "q", "]", "=", "ans_list", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.getObjForQuestion": [[80, 93], ["dict"], "function", ["None"], ["def", "getObjForQuestion", "(", "question", ",", "answer_dist", ",", "count", ",", "entropy", ")", ":", "\n", "\t", "answers", "=", "[", "ans", "for", "(", "ans", ",", "freq", ")", "in", "answer_dist", "]", "\n", "answer_freq", "=", "[", "freq", "for", "(", "ans", ",", "freq", ")", "in", "answer_dist", "]", "\n", "\n", "json_obj", "=", "dict", "(", ")", "\n", "json_obj", "=", "{", "\n", "'ques'", ":", "question", ",", "\n", "'count'", ":", "count", ",", "\n", "'ent'", ":", "entropy", ",", "\n", "'answers'", ":", "answers", ",", "\n", "'answer_freq'", ":", "answer_freq", "\n", "}", "\n", "return", "json_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.getJsonForAllQuestions": [[94, 106], ["answer_distribution_all_qns.keys", "entro.getObjForQuestion", "question_stats_data.append"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.getObjForQuestion"], ["", "def", "getJsonForAllQuestions", "(", "answer_distribution_all_qns", ",", "counts", ",", "entropy", ")", ":", "\n", "\t", "question_stats_data", "=", "[", "]", "\n", "for", "question", "in", "answer_distribution_all_qns", ".", "keys", "(", ")", ":", "\n", "\t\t", "ans_dist", "=", "answer_distribution_all_qns", "[", "question", "]", "\n", "json_obj", "=", "getObjForQuestion", "(", "\n", "question", ",", "\n", "ans_dist", ",", "\n", "counts", "[", "question", "]", ",", "\n", "entropy", "[", "question", "]", "\n", ")", "\n", "question_stats_data", ".", "append", "(", "json_obj", ")", "\n", "", "return", "question_stats_data", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.writeToJson": [[107, 110], ["open", "json.dump"], "function", ["None"], ["", "def", "writeToJson", "(", "question_stats_data", ",", "file_name", ")", ":", "\n", "\t", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "question_stats_data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.printInfoForAllQuestions": [[111, 118], ["print", "answer_distribution_all_qns.keys", "print", "print"], "function", ["None"], ["", "", "def", "printInfoForAllQuestions", "(", "answer_distribution_all_qns", ",", "counts", ",", "entropy", ")", ":", "\n", "\t", "print", "(", "\"Distribution of answers across all questions:\"", ")", "\n", "for", "question", "in", "answer_distribution_all_qns", ".", "keys", "(", ")", ":", "\n", "\t\t", "ans_dist", "=", "answer_distribution_all_qns", "[", "question", "]", "\n", "print", "(", "\"[%d][%f] %s\"", "%", "(", "counts", "[", "question", "]", ",", "entropy", "[", "question", "]", ",", "question", ")", ")", "\n", "for", "(", "ans", ",", "freq", ")", "in", "ans_dist", ":", "\n", "\t\t\t", "print", "(", "\"\\t%s : %f\"", "%", "(", "ans", ",", "freq", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entro.collapseType": [[119, 135], ["None"], "function", ["None"], ["", "", "", "def", "collapseType", "(", "q_type", ")", ":", "\n", "\t", "collapse", "=", "{", "\n", "'exist_positive'", ":", "'exist'", ",", "\n", "'exist_negative'", ":", "'exist'", ",", "\n", "'exist_logical_positive'", ":", "'exist_logic'", ",", "\n", "'exist_logical_negative_1'", ":", "'exist_logic'", ",", "\n", "'exist_logical_negative_2'", ":", "'exist_logic'", ",", "\n", "'exist_logical_or_negative'", ":", "'exist_logic'", ",", "\n", "'exist_logical_or_positive_1'", ":", "'exist_logic'", ",", "\n", "'exist_logical_or_positive_2'", ":", "'exist_logic'", ",", "\n", "'dist_compare_positive'", ":", "'dist_compare'", ",", "\n", "'dist_compare_negative'", ":", "'dist_compare'", "\n", "}", "\n", "\n", "if", "q_type", "in", "collapse", ":", "q_type", "=", "collapse", "[", "q_type", "]", "\n", "return", "q_type", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.sampleForHits.collapseType": [[20, 36], ["None"], "function", ["None"], ["def", "collapseType", "(", "q_type", ")", ":", "\n", "    ", "collapse", "=", "{", "\n", "'exist_positive'", ":", "'exist'", ",", "\n", "'exist_negative'", ":", "'exist'", ",", "\n", "'exist_logical_positive'", ":", "'exist_logic'", ",", "\n", "'exist_logical_negative_1'", ":", "'exist_logic'", ",", "\n", "'exist_logical_negative_2'", ":", "'exist_logic'", ",", "\n", "'exist_logical_or_negative'", ":", "'exist_logic'", ",", "\n", "'exist_logical_or_positive_1'", ":", "'exist_logic'", ",", "\n", "'exist_logical_or_positive_2'", ":", "'exist_logic'", ",", "\n", "'dist_compare_positive'", ":", "'dist_compare'", ",", "\n", "'dist_compare_negative'", ":", "'dist_compare'", "\n", "}", "\n", "\n", "if", "q_type", "in", "collapse", ":", "q_type", "=", "collapse", "[", "q_type", "]", "\n", "return", "q_type", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.sampleForHits.getTemplateToQnStringMapping": [[42, 53], ["print", "tqdm.tqdm", "range", "list", "len", "set", "sampleForHits.collapseType"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entropy_based_filtering.collapseType"], ["def", "getTemplateToQnStringMapping", "(", "question_set", ",", "templates", ")", ":", "\n", "    ", "print", "(", "\"Generating mapping from templates to (unique) question strings...\"", ")", "\n", "\n", "uniq_qns_by_template", "=", "{", "}", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "templates", ")", ")", ")", ":", "\n", "        ", "template", "=", "templates", "[", "i", "]", "\n", "uniq_qns_by_template", "[", "template", "]", "=", "list", "(", "set", "(", "[", "\n", "qn", "[", "'question'", "]", "for", "qn", "in", "question_set", "\n", "if", "qn", "[", "'accept'", "]", "and", "collapseType", "(", "qn", "[", "'type'", "]", ")", "==", "template", "\n", "]", ")", ")", "\n", "", "return", "uniq_qns_by_template", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.sampleForHits.getQnStringToInstancesMapping": [[59, 72], ["print", "tqdm.tqdm", "range", "qn_str_to_instances[].append", "len"], "function", ["None"], ["def", "getQnStringToInstancesMapping", "(", "question_set", ")", ":", "\n", "\n", "    ", "print", "(", "\"Generating mapping from qn str to qn instances\"", ")", "\n", "qn_str_to_instances", "=", "{", "}", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "question_set", ")", ")", ")", ":", "\n", "        ", "qnObj", "=", "question_set", "[", "i", "]", "\n", "if", "not", "qnObj", "[", "'accept'", "]", ":", "continue", "\n", "\n", "qn_str", "=", "qnObj", "[", "'question'", "]", "\n", "if", "qn_str", "not", "in", "qn_str_to_instances", ":", "qn_str_to_instances", "[", "qn_str", "]", "=", "[", "]", "\n", "qn_str_to_instances", "[", "qn_str", "]", ".", "append", "(", "qnObj", ")", "\n", "\n", "", "return", "qn_str_to_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.sampleForHits.getEnvWiseHitQnLimits": [[73, 85], ["sorted", "len", "qns_per_env.items", "operator.itemgetter"], "function", ["None"], ["", "def", "getEnvWiseHitQnLimits", "(", "qns_per_env", ")", ":", "\n", "    ", "qns_per_env_sorted", "=", "sorted", "(", "qns_per_env", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "\n", "num_envs", "=", "len", "(", "qns_per_env_sorted", ")", "\n", "\n", "return", "{", "\n", "'min'", ":", "{", "\n", "'count'", ":", "qns_per_env_sorted", "[", "0", "]", "[", "1", "]", ",", "\n", "'env'", ":", "qns_per_env_sorted", "[", "0", "]", "[", "0", "]", "\n", "}", ",", "\n", "'max'", ":", "{", "\n", "'count'", ":", "qns_per_env_sorted", "[", "num_envs", "-", "1", "]", "[", "1", "]", ",", "\n", "'env'", ":", "qns_per_env_sorted", "[", "num_envs", "-", "1", "]", "[", "0", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.sampleForHits.generateQuestionsForHITs": [[89, 145], ["list", "sampleForHits.getTemplateToQnStringMapping", "sampleForHits.getQnStringToInstancesMapping", "set", "print", "range", "print", "sampleForHits.getEnvWiseHitQnLimits", "print", "print", "set", "numpy.random.choice", "numpy.random.choice", "uniq_qns_by_template[].remove", "len", "len", "list.remove", "qns_for_hits.append", "len", "sampleForHits.collapseType", "set.add"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.sampleForHits.getTemplateToQnStringMapping", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.sampleForHits.getQnStringToInstancesMapping", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.sampleForHits.getEnvWiseHitQnLimits", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entropy_based_filtering.collapseType"], ["", "def", "generateQuestionsForHITs", "(", "question_set", ")", ":", "\n", "    ", "templates", "=", "list", "(", "set", "(", "[", "collapseType", "(", "qn", "[", "'type'", "]", ")", "for", "qn", "in", "question_set", "]", ")", ")", "\n", "uniq_qns_by_template", "=", "getTemplateToQnStringMapping", "(", "question_set", ",", "templates", ")", "\n", "qn_str_instances", "=", "getQnStringToInstancesMapping", "(", "question_set", ")", "\n", "\n", "qns_for_hits", "=", "[", "]", "\n", "hit_qns_done_by_env", "=", "{", "}", "\n", "env_block_list", "=", "set", "(", ")", "\n", "\n", "print", "(", "\"Sampling questions for HITs...\"", ")", "\n", "# the loop should run for # unique (accepted) qns in question_set", "\n", "for", "i", "in", "range", "(", "10000", ")", ":", "\n", "\n", "# check if there are any more questions to sample", "\n", "# if no, then break. if yes, uniformly sample a template", "\n", "        ", "if", "len", "(", "templates", ")", "==", "0", ":", "break", "\n", "sampled_template", "=", "np", ".", "random", ".", "choice", "(", "templates", ")", "\n", "\n", "# check if there are questions left to be sampled from this template", "\n", "# if no, then remove the template from the templates list", "\n", "if", "len", "(", "uniq_qns_by_template", "[", "sampled_template", "]", ")", "==", "0", ":", "\n", "            ", "templates", ".", "remove", "(", "sampled_template", ")", "\n", "continue", "\n", "\n", "# uniformly sample a question string from the sampled template", "\n", "# delete the question string so that it doesn't get sampled again", "\n", "", "sampled_qn_string", "=", "np", ".", "random", ".", "choice", "(", "uniq_qns_by_template", "[", "sampled_template", "]", ")", "\n", "uniq_qns_by_template", "[", "sampled_template", "]", ".", "remove", "(", "sampled_qn_string", ")", "\n", "\n", "# get instances of the sampled question string", "\n", "# add all question instances to the pool of questions for HITs", "\n", "# update the counts for the number of HIT questions per env", "\n", "# while adding all question instances, if the instance corresponds", "\n", "# to a env for which we already have 60 questions, do not add", "\n", "\n", "sampled_qn_string_instances", "=", "qn_str_instances", "[", "sampled_qn_string", "]", "\n", "for", "qnObj", "in", "sampled_qn_string_instances", ":", "\n", "            ", "if", "qnObj", "[", "'house'", "]", "in", "env_block_list", ":", "continue", "\n", "\n", "if", "qnObj", "[", "'house'", "]", "not", "in", "hit_qns_done_by_env", ":", "\n", "                ", "hit_qns_done_by_env", "[", "qnObj", "[", "'house'", "]", "]", "=", "0", "\n", "", "hit_qns_done_by_env", "[", "qnObj", "[", "'house'", "]", "]", "+=", "1", "\n", "\n", "qns_for_hits", ".", "append", "(", "qnObj", ")", "\n", "\n", "# if any env has already reached 60 questions, add it to the block-list", "\n", "", "for", "env", "in", "hit_qns_done_by_env", ":", "\n", "            ", "if", "hit_qns_done_by_env", "[", "env", "]", ">=", "60", ":", "env_block_list", ".", "add", "(", "env", ")", "\n", "\n", "# get the max and the min number of questions for any env", "\n", "", "", "print", "(", "\"break at iteration %d\"", "%", "i", ")", "\n", "limits", "=", "getEnvWiseHitQnLimits", "(", "hit_qns_done_by_env", ")", "\n", "print", "(", "\"# envs = %d\"", "%", "len", "(", "hit_qns_done_by_env", ")", ")", "\n", "print", "(", "\"%s has a min of %d qns\"", "%", "(", "limits", "[", "'min'", "]", "[", "'env'", "]", ",", "limits", "[", "'min'", "]", "[", "'count'", "]", ")", ")", "\n", "\n", "return", "qns_for_hits", ",", "hit_qns_done_by_env", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.sampleForHits.getJson": [[146, 159], ["[].append", "set", "set.add", "list"], "function", ["None"], ["", "def", "getJson", "(", "qns_for_hits", ",", "hits_per_env", ")", ":", "\n", "    ", "envs_with_60_hits", "=", "[", "env", "for", "env", "in", "hits_per_env", "if", "hits_per_env", "[", "env", "]", "==", "60", "]", "\n", "json_for_hits", "=", "{", "}", "\n", "for", "env", "in", "envs_with_60_hits", ":", "\n", "        ", "json_for_hits", "[", "env", "]", "=", "{", "'templates'", ":", "[", "]", ",", "'questions'", ":", "[", "]", "}", "\n", "\n", "", "for", "qnObj", "in", "qns_for_hits", ":", "\n", "        ", "if", "qnObj", "[", "'house'", "]", "not", "in", "envs_with_60_hits", ":", "continue", "\n", "json_for_hits", "[", "qnObj", "[", "'house'", "]", "]", "[", "'questions'", "]", ".", "append", "(", "qnObj", ")", "\n", "templates_set", "=", "set", "(", "json_for_hits", "[", "qnObj", "[", "'house'", "]", "]", "[", "'templates'", "]", ")", "\n", "templates_set", ".", "add", "(", "qnObj", "[", "'type'", "]", ")", "\n", "json_for_hits", "[", "qnObj", "[", "'house'", "]", "]", "[", "'templates'", "]", "=", "list", "(", "templates_set", ")", "\n", "", "return", "json_for_hits", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.__init__": [[19, 34], ["csv.reader", "next", "open", "range", "len", "next.index"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dataDir", ")", ":", "\n", "        ", "self", ".", "dataDir", "=", "dataDir", "\n", "\n", "csvFile", "=", "csv", ".", "reader", "(", "\n", "open", "(", "'../../House3D/House3D/metadata/ModelCategoryMapping.csv'", ",", "'r'", ")", ")", "\n", "headers", "=", "next", "(", "csvFile", ")", "\n", "\n", "self", ".", "modelCategoryMapping", "=", "{", "}", "\n", "\n", "for", "row", "in", "csvFile", ":", "\n", "            ", "self", ".", "modelCategoryMapping", "[", "row", "[", "headers", ".", "index", "(", "'model_id'", ")", "]", "]", "=", "{", "\n", "headers", "[", "x", "]", ":", "row", "[", "x", "]", "\n", "for", "x", "in", "range", "(", "2", ",", "len", "(", "headers", ")", ")", "# 0 is index, 1 is model_id", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.parse": [[42, 99], ["os.path.join", "json.load", "open", "range", "len", "house_parse.HouseParse.rooms.append", "x.lower().split", "x.lower"], "methods", ["None"], ["def", "parse", "(", "self", ",", "houseId", ",", "levelsToExplore", "=", "[", "0", "]", ")", ":", "\n", "        ", "self", ".", "id", "=", "houseId", "\n", "jsonPath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataDir", ",", "'house'", ",", "houseId", ",", "'house.json'", ")", "\n", "data", "=", "json", ".", "load", "(", "open", "(", "jsonPath", ",", "'r'", ")", ")", "\n", "\n", "self", ".", "houseBBox", "=", "data", "[", "'bbox'", "]", "\n", "\n", "self", ".", "rooms", ",", "self", ".", "objects", "=", "[", "]", ",", "{", "}", "\n", "for", "i", "in", "levelsToExplore", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", ")", ")", ":", "\n", "                ", "assert", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'type'", "]", "!=", "'Box'", "\n", "\n", "if", "'valid'", "in", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", ":", "\n", "                    ", "assert", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'valid'", "]", "==", "1", "\n", "\n", "# Rooms", "\n", "", "if", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'type'", "]", "==", "'Room'", ":", "\n", "                    ", "if", "'roomTypes'", "not", "in", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", ":", "\n", "                        ", "continue", "\n", "\n", "# Can rooms have more than one type?", "\n", "# Yes, they can; just found ['Living_Room', 'Dining_Room', 'Kitchen']", "\n", "# assert len(data['levels'][i]['nodes'][j]['roomTypes']) <= 3", "\n", "\n", "", "roomType", "=", "[", "' '", ".", "join", "(", "x", ".", "lower", "(", ")", ".", "split", "(", "'_'", ")", ")", "for", "x", "in", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'roomTypes'", "]", "]", "\n", "\n", "nodes", "=", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "\n", "'nodeIndices'", "]", "if", "'nodeIndices'", "in", "data", "[", "'levels'", "]", "[", "i", "]", "[", "\n", "'nodes'", "]", "[", "j", "]", "else", "[", "]", "\n", "self", ".", "rooms", ".", "append", "(", "{", "\n", "'type'", ":", "\n", "roomType", ",", "\n", "'bbox'", ":", "\n", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'bbox'", "]", ",", "\n", "'nodes'", ":", "\n", "nodes", "\n", "}", ")", "\n", "\n", "# Objects", "\n", "", "elif", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'type'", "]", "==", "'Object'", ":", "\n", "                    ", "if", "'materials'", "not", "in", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", ":", "\n", "                        ", "material", "=", "[", "]", "\n", "", "else", ":", "\n", "                        ", "material", "=", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'materials'", "]", "\n", "", "self", ".", "objects", "[", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'id'", "]", "]", "=", "{", "\n", "'id'", ":", "\n", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'id'", "]", ",", "\n", "'fine_class'", ":", "\n", "self", ".", "modelCategoryMapping", "[", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "\n", "j", "]", "[", "'modelId'", "]", "]", "[", "'fine_grained_class'", "]", ",", "\n", "'coarse_class'", ":", "\n", "self", ".", "modelCategoryMapping", "[", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "\n", "j", "]", "[", "'modelId'", "]", "]", "[", "'coarse_grained_class'", "]", ",", "\n", "'bbox'", ":", "\n", "data", "[", "'levels'", "]", "[", "i", "]", "[", "'nodes'", "]", "[", "j", "]", "[", "'bbox'", "]", ",", "\n", "'mat'", ":", "\n", "material", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.getNearbyPairs": [[120, 185], ["range", "len", "range", "len", "len", "house_parse.HouseParse.getClosestDistance", "house_parse.HouseParse.getClosestDistance", "nearbyPairs[].append", "house_parse.HouseParse.isHigher", "house_parse.HouseParse.isContained", "house_parse.HouseParse.isContained", "house_parse.HouseParse.isContained", "nearbyPairs[].append", "house_parse.HouseParse.isContained", "nearbyPairs[].append", "house_parse.HouseParse.isHigher", "house_parse.HouseParse.isContained", "house_parse.HouseParse.isContained", "nearbyObjectPairs[].append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.getClosestDistance", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.getClosestDistance", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.isHigher", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.isContained", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.isContained", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.isContained", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.isContained", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.isHigher", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.isContained", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.isContained"], ["def", "getNearbyPairs", "(", "self", ",", "\n", "availableEnts", ",", "\n", "hthreshold", "=", "0.005", ",", "\n", "vthreshold", "=", "0.005", ")", ":", "\n", "        ", "assert", "len", "(", "availableEnts", ")", "!=", "0", "\n", "\n", "nearbyPairs", "=", "{", "'on'", ":", "[", "]", ",", "'next_to'", ":", "[", "]", "}", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "availableEnts", ")", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "availableEnts", ")", ")", ":", "\n", "                ", "if", "availableEnts", "[", "i", "]", ".", "name", "!=", "availableEnts", "[", "j", "]", ".", "name", ":", "\n", "# next to", "\n", "                    ", "dist", "=", "self", ".", "getClosestDistance", "(", "\n", "availableEnts", "[", "i", "]", ".", "meta", ",", "\n", "availableEnts", "[", "j", "]", ".", "meta", ",", "\n", "axes", "=", "[", "0", ",", "2", "]", ")", "\n", "if", "dist", "<", "hthreshold", "and", "(", "self", ".", "isContained", "(", "\n", "availableEnts", "[", "i", "]", ".", "meta", ",", "\n", "availableEnts", "[", "j", "]", ".", "meta", ",", "\n", "axis", "=", "0", ")", "&", "self", ".", "isContained", "(", "\n", "availableEnts", "[", "i", "]", ".", "meta", ",", "\n", "availableEnts", "[", "j", "]", ".", "meta", ",", "\n", "axis", "=", "2", ")", ")", "==", "False", ":", "\n", "                        ", "if", "availableEnts", "[", "i", "]", ".", "type", "==", "'room'", "and", "availableEnts", "[", "j", "]", ".", "type", "==", "'room'", ":", "\n", "                            ", "nearbyPairs", "[", "'next_to'", "]", ".", "append", "(", "\n", "(", "availableEnts", "[", "i", "]", ",", "availableEnts", "[", "j", "]", ",", "dist", ")", ")", "\n", "", "elif", "self", ".", "isContained", "(", "\n", "availableEnts", "[", "i", "]", ".", "meta", ",", "\n", "availableEnts", "[", "j", "]", ".", "meta", ",", "\n", "axis", "=", "1", ")", "==", "True", ":", "\n", "                            ", "nearbyPairs", "[", "'next_to'", "]", ".", "append", "(", "\n", "(", "availableEnts", "[", "i", "]", ",", "availableEnts", "[", "j", "]", ",", "dist", ")", ")", "\n", "\n", "# on / below", "\n", "", "", "if", "availableEnts", "[", "i", "]", ".", "type", "==", "'object'", "and", "availableEnts", "[", "j", "]", ".", "type", "==", "'object'", ":", "\n", "                        ", "dist", "=", "self", ".", "getClosestDistance", "(", "\n", "availableEnts", "[", "i", "]", ".", "meta", ",", "\n", "availableEnts", "[", "j", "]", ".", "meta", ",", "\n", "axes", "=", "[", "1", "]", ")", "\n", "if", "dist", "<", "vthreshold", "and", "(", "self", ".", "isContained", "(", "\n", "availableEnts", "[", "i", "]", ".", "meta", ",", "\n", "availableEnts", "[", "j", "]", ".", "meta", ",", "\n", "axis", "=", "0", ")", "&", "self", ".", "isContained", "(", "\n", "availableEnts", "[", "i", "]", ".", "meta", ",", "\n", "availableEnts", "[", "j", "]", ".", "meta", ",", "\n", "axis", "=", "2", ")", ")", "==", "True", "and", "self", ".", "isContained", "(", "\n", "availableEnts", "[", "i", "]", ".", "meta", ",", "\n", "availableEnts", "[", "j", "]", ".", "meta", ",", "\n", "axis", "=", "1", ")", "==", "False", ":", "\n", "\n", "# higher first", "\n", "                            ", "if", "self", ".", "isHigher", "(", "\n", "availableEnts", "[", "i", "]", ".", "meta", ",", "\n", "availableEnts", "[", "j", "]", ".", "meta", ",", "\n", "axis", "=", "1", ")", ":", "\n", "                                ", "nearbyPairs", "[", "'on'", "]", ".", "append", "(", "\n", "(", "availableEnts", "[", "i", "]", ",", "availableEnts", "[", "j", "]", ",", "dist", ")", ")", "\n", "", "elif", "self", ".", "isHigher", "(", "\n", "availableEnts", "[", "i", "]", ".", "meta", ",", "\n", "availableEnts", "[", "j", "]", ".", "meta", ",", "\n", "axis", "=", "1", ")", ":", "\n", "                                ", "nearbyObjectPairs", "[", "'on'", "]", ".", "append", "(", "\n", "(", "availableEnts", "[", "j", "]", ",", "availableEnts", "[", "i", "]", ",", "dist", ")", ")", "\n", "\n", "", "", "", "", "", "", "return", "nearbyPairs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.getClosestDistance": [[193, 224], ["range", "len", "range", "int", "range", "numpy.array", "range", "len", "numpy.linalg.norm", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "list", "len", "range", "len", "len"], "methods", ["None"], ["def", "getClosestDistance", "(", "self", ",", "obj1", ",", "obj2", ",", "axes", "=", "[", "0", ",", "2", "]", ",", "order", "=", "2", ")", ":", "\n", "        ", "assert", "'bbox'", "in", "obj1", "and", "'bbox'", "in", "obj2", "\n", "\n", "bbox", "=", "[", "\n", "{", "\n", "'min'", ":", "np", ".", "array", "(", "obj1", "[", "'bbox'", "]", "[", "'min'", "]", ")", "[", "axes", "]", ",", "\n", "'max'", ":", "np", ".", "array", "(", "obj1", "[", "'bbox'", "]", "[", "'max'", "]", ")", "[", "axes", "]", "\n", "}", ",", "\n", "{", "\n", "'min'", ":", "np", ".", "array", "(", "obj2", "[", "'bbox'", "]", "[", "'min'", "]", ")", "[", "axes", "]", ",", "\n", "'max'", ":", "np", ".", "array", "(", "obj2", "[", "'bbox'", "]", "[", "'max'", "]", ")", "[", "axes", "]", "\n", "}", ",", "\n", "]", "\n", "\n", "cornerInds", "=", "[", "[", "\n", "int", "(", "i", ")", "for", "i", "in", "list", "(", "'{0:0{width}b}'", ".", "format", "(", "j", ",", "width", "=", "len", "(", "axes", ")", ")", ")", "\n", "]", "for", "j", "in", "range", "(", "2", "**", "len", "(", "axes", ")", ")", "]", "\n", "corners", "=", "[", "[", "\n", "np", ".", "array", "(", "\n", "[", "bbox", "[", "obj", "]", "[", "[", "'min'", ",", "'max'", "]", "[", "i", "[", "j", "]", "]", "]", "[", "j", "]", "for", "j", "in", "range", "(", "len", "(", "axes", ")", ")", "]", ")", "\n", "for", "i", "in", "cornerInds", "\n", "]", "for", "obj", "in", "range", "(", "2", ")", "]", "\n", "\n", "dist", "=", "1e5", "\n", "for", "i", "in", "range", "(", "len", "(", "corners", "[", "0", "]", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "corners", "[", "1", "]", ")", ")", ":", "\n", "                ", "d", "=", "np", ".", "linalg", ".", "norm", "(", "corners", "[", "0", "]", "[", "i", "]", "-", "corners", "[", "1", "]", "[", "j", "]", ",", "ord", "=", "order", ")", "\n", "if", "d", "<", "dist", ":", "\n", "                    ", "dist", "=", "d", "\n", "\n", "", "", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.getAllPairwiseDistances": [[225, 240], ["sorted", "house_parse.HouseParse.getClosestDistance", "objDistances.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.getClosestDistance"], ["", "def", "getAllPairwiseDistances", "(", "self", ",", "objList", ",", "axes", "=", "[", "0", ",", "2", "]", ",", "order", "=", "2", ")", ":", "\n", "        ", "objDistances", ",", "objDistancesHash", "=", "[", "]", ",", "{", "}", "\n", "for", "i", "in", "objList", ":", "\n", "            ", "for", "j", "in", "objList", ":", "\n", "                ", "if", "i", ".", "name", "==", "j", ".", "name", ":", "\n", "                    ", "continue", "\n", "", "if", "i", ".", "name", "+", "'x'", "+", "j", ".", "name", "in", "objDistances", "or", "j", ".", "name", "+", "'x'", "+", "i", ".", "name", "in", "objDistancesHash", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "dist", "=", "self", ".", "getClosestDistance", "(", "\n", "i", ".", "meta", ",", "j", ".", "meta", ",", "axes", ",", "order", ")", "\n", "objDistances", ".", "append", "(", "(", "i", ",", "j", ",", "dist", ")", ")", "\n", "objDistancesHash", "[", "i", ".", "name", "+", "'x'", "+", "j", ".", "name", "]", "=", "True", "\n", "\n", "", "", "", "return", "sorted", "(", "objDistances", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.isContained": [[246, 253], ["None"], "methods", ["None"], ["def", "isContained", "(", "self", ",", "obj1", ",", "obj2", ",", "axis", "=", "0", ")", ":", "\n", "        ", "if", "obj1", "[", "'bbox'", "]", "[", "'min'", "]", "[", "axis", "]", "<", "obj2", "[", "'bbox'", "]", "[", "'min'", "]", "[", "axis", "]", "and", "obj1", "[", "'bbox'", "]", "[", "'max'", "]", "[", "axis", "]", ">", "obj2", "[", "'bbox'", "]", "[", "'max'", "]", "[", "axis", "]", ":", "\n", "            ", "return", "True", "\n", "", "elif", "obj2", "[", "'bbox'", "]", "[", "'min'", "]", "[", "axis", "]", "<", "obj1", "[", "'bbox'", "]", "[", "'min'", "]", "[", "axis", "]", "and", "obj2", "[", "'bbox'", "]", "[", "'max'", "]", "[", "axis", "]", ">", "obj1", "[", "'bbox'", "]", "[", "'max'", "]", "[", "axis", "]", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.isHigher": [[258, 263], ["None"], "methods", ["None"], ["def", "isHigher", "(", "self", ",", "obj1", ",", "obj2", ",", "axis", "=", "0", ")", ":", "\n", "        ", "if", "obj1", "[", "'bbox'", "]", "[", "'max'", "]", "[", "axis", "]", ">", "obj2", "[", "'bbox'", "]", "[", "'max'", "]", "[", "axis", "]", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.findClosestPoints": [[270, 278], ["move_tree.query", "res.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.engine.Engine.query"], ["def", "findClosestPoints", "(", "self", ",", "points", ",", "move_map", ",", "move_tree", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "\n", "for", "el", "in", "points", ":", "\n", "            ", "dist", ",", "idx", "=", "move_tree", ".", "query", "(", "[", "el", "[", "0", "]", ",", "el", "[", "1", "]", "]", ")", "\n", "res", ".", "append", "(", "[", "dist", ",", "idx", ",", "move_map", "[", "idx", "]", "]", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.house_parse.HouseParse.getVertices": [[279, 284], ["None"], "methods", ["None"], ["", "def", "getVertices", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "x1", ",", "_", ",", "y1", "=", "bbox", "[", "'min'", "]", "\n", "x2", ",", "_", ",", "y2", "=", "bbox", "[", "'max'", "]", "\n", "\n", "return", "[", "(", "x1", ",", "y1", ")", ",", "(", "x1", ",", "y2", ")", ",", "(", "x2", ",", "y2", ")", ",", "(", "x2", ",", "y1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entropy_based_filtering.getListOfJsonFiles": [[15, 18], ["subprocess.check_output().strip().split", "subprocess.check_output().strip", "subprocess.check_output"], "function", ["None"], ["def", "getListOfJsonFiles", "(", "json_dir", ")", ":", "\n", "    ", "cmd", "=", "\"find \"", "+", "json_dir", "+", "\" -name '*.json'\"", "\n", "return", "subprocess", ".", "check_output", "(", "cmd", ",", "shell", "=", "True", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entropy_based_filtering.getTemplateNameFromPath": [[19, 25], ["file_name.strip().split", "file_name.strip().split.pop", "file_name.strip().split.pop", "[].split", "file_name.strip", "str().strip().split", "str().strip", "str"], "function", ["None"], ["", "def", "getTemplateNameFromPath", "(", "json_file_path", ")", ":", "\n", "    ", "file_name", "=", "str", "(", "json_file_path", ")", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "file_name_comps", "=", "file_name", ".", "strip", "(", ")", ".", "split", "(", "'_'", ")", "\n", "file_name_comps", ".", "pop", "(", "0", ")", "\n", "file_name_comps", ".", "pop", "(", "0", ")", "\n", "return", "\"_\"", ".", "join", "(", "file_name_comps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entropy_based_filtering.getStats": [[26, 38], ["entropy_based_filtering.getListOfJsonFiles", "dict", "entropy_based_filtering.getTemplateNameFromPath", "dict", "json.load", "open"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entropy_based_filtering.getListOfJsonFiles", "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entropy_based_filtering.getTemplateNameFromPath"], ["", "def", "getStats", "(", "json_dir", ")", ":", "\n", "    ", "json_file_paths", "=", "getListOfJsonFiles", "(", "json_dir", ")", "\n", "master_ent", "=", "dict", "(", ")", "\n", "\n", "for", "json_file_path", "in", "json_file_paths", ":", "\n", "        ", "template", "=", "getTemplateNameFromPath", "(", "json_file_path", ")", "\n", "master_ent", "[", "template", "]", "=", "dict", "(", ")", "\n", "\n", "json_data", "=", "json", ".", "load", "(", "open", "(", "json_file_path", ",", "'r'", ")", ")", "\n", "for", "obj", "in", "json_data", ":", "master_ent", "[", "template", "]", "[", "obj", "[", "'ques'", "]", "]", "=", "(", "obj", "[", "'ent'", "]", ",", "obj", "[", "'count'", "]", ")", "\n", "\n", "", "return", "master_ent", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entropy_based_filtering.getEnvWiseStats": [[39, 74], ["list", "print", "tqdm.tqdm", "set", "range", "len", "len", "len", "set", "set", "len", "len", "set", "set", "entropy_based_filtering.collapseType"], "function", ["home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entropy_based_filtering.collapseType"], ["", "def", "getEnvWiseStats", "(", "qns_dataset", ",", "templates", ")", ":", "\n", "    ", "env_wise_stats_json", "=", "{", "}", "\n", "house_ids", "=", "list", "(", "set", "(", "[", "qn", "[", "'house'", "]", "for", "qn", "in", "qns_dataset", "]", ")", ")", "\n", "\n", "print", "(", "\"Computing env-wise stats...\"", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "house_ids", ")", ")", ")", ":", "\n", "        ", "house_id", "=", "house_ids", "[", "i", "]", "\n", "qns_for_house", "=", "[", "qn", "for", "qn", "in", "qns_dataset", "if", "qn", "[", "'house'", "]", "==", "house_id", "]", "\n", "\n", "# total unique questions (across all templates) before and after pruning", "\n", "before", "=", "len", "(", "set", "(", "[", "qn", "[", "'question'", "]", "for", "qn", "in", "qns_for_house", "]", ")", ")", "\n", "after", "=", "len", "(", "set", "(", "[", "qn", "[", "'question'", "]", "for", "qn", "in", "qns_for_house", "if", "qn", "[", "'accept'", "]", "]", ")", ")", "\n", "drop_rate", "=", "(", "before", "-", "after", ")", "/", "(", "1.", "*", "before", ")", "\n", "\n", "env_wise_stats_json", "[", "house_id", "]", "=", "{", "}", "\n", "env_wise_stats_json", "[", "house_id", "]", "[", "'global'", "]", "=", "{", "\n", "'before'", ":", "before", ",", "\n", "'after'", ":", "after", ",", "\n", "'drop_rate'", ":", "drop_rate", "\n", "}", "\n", "\n", "for", "template", "in", "templates", ":", "\n", "            ", "qns_for_template_for_house", "=", "[", "qn", "for", "qn", "in", "qns_for_house", "if", "collapseType", "(", "qn", "[", "'type'", "]", ")", "==", "template", "]", "\n", "before", "=", "len", "(", "set", "(", "[", "qn", "[", "'question'", "]", "for", "qn", "in", "qns_for_template_for_house", "]", ")", ")", "\n", "after", "=", "len", "(", "set", "(", "[", "qn", "[", "'question'", "]", "for", "qn", "in", "qns_for_template_for_house", "if", "qn", "[", "'accept'", "]", "]", ")", ")", "\n", "if", "before", "!=", "0.", ":", "drop_rate", "=", "(", "before", "-", "after", ")", "/", "(", "1.", "*", "before", ")", "\n", "else", ":", "drop_rate", "=", "0.", "\n", "\n", "env_wise_stats_json", "[", "house_id", "]", "[", "template", "]", "=", "{", "\n", "'before'", ":", "before", ",", "\n", "'after'", ":", "after", ",", "\n", "'drop_rate'", ":", "drop_rate", "\n", "}", "\n", "\n", "", "", "return", "env_wise_stats_json", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_EmbodiedQA.question-gen.entropy_based_filtering.collapseType": [[75, 91], ["None"], "function", ["None"], ["", "def", "collapseType", "(", "q_type", ")", ":", "\n", "    ", "collapse", "=", "{", "\n", "'exist_positive'", ":", "'exist'", ",", "\n", "'exist_negative'", ":", "'exist'", ",", "\n", "'exist_logical_positive'", ":", "'exist_logic'", ",", "\n", "'exist_logical_negative_1'", ":", "'exist_logic'", ",", "\n", "'exist_logical_negative_2'", ":", "'exist_logic'", ",", "\n", "'exist_logical_or_negative'", ":", "'exist_logic'", ",", "\n", "'exist_logical_or_positive_1'", ":", "'exist_logic'", ",", "\n", "'exist_logical_or_positive_2'", ":", "'exist_logic'", ",", "\n", "'dist_compare_positive'", ":", "'dist_compare'", ",", "\n", "'dist_compare_negative'", ":", "'dist_compare'", "\n", "}", "\n", "\n", "if", "q_type", "in", "collapse", ":", "q_type", "=", "collapse", "[", "q_type", "]", "\n", "return", "q_type", "\n", "\n"]]}