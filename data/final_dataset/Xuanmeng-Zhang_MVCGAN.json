{"home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.SSIM.__init__": [[35, 47], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mu_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "mu_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_xy_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "\n", "self", ".", "refl", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "\n", "self", ".", "C1", "=", "0.01", "**", "2", "\n", "self", ".", "C2", "=", "0.03", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.SSIM.forward": [[48, 63], ["main.SSIM.refl", "main.SSIM.refl", "main.SSIM.mu_x_pool", "main.SSIM.mu_y_pool", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "main.SSIM.sig_x_pool", "main.SSIM.sig_y_pool", "main.SSIM.sig_xy_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "refl", "(", "x", ")", "\n", "y", "=", "self", ".", "refl", "(", "y", ")", "\n", "\n", "mu_x", "=", "self", ".", "mu_x_pool", "(", "x", ")", "\n", "mu_y", "=", "self", ".", "mu_y_pool", "(", "y", ")", "\n", "\n", "sigma_x", "=", "self", ".", "sig_x_pool", "(", "x", "**", "2", ")", "-", "mu_x", "**", "2", "\n", "sigma_y", "=", "self", ".", "sig_y_pool", "(", "y", "**", "2", ")", "-", "mu_y", "**", "2", "\n", "sigma_xy", "=", "self", ".", "sig_xy_pool", "(", "x", "*", "y", ")", "-", "mu_x", "*", "mu_y", "\n", "\n", "SSIM_n", "=", "(", "2", "*", "mu_x", "*", "mu_y", "+", "self", ".", "C1", ")", "*", "(", "2", "*", "sigma_xy", "+", "self", ".", "C2", ")", "\n", "SSIM_d", "=", "(", "mu_x", "**", "2", "+", "mu_y", "**", "2", "+", "self", ".", "C1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "self", ".", "C2", ")", "\n", "\n", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM_n", "/", "SSIM_d", ")", "/", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.setup": [[64, 70], ["torch.init_process_group"], "function", ["None"], ["", "", "def", "setup", "(", "rank", ",", "world_size", ",", "port", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "port", "\n", "\n", "# initialize the process group", "\n", "dist", ".", "init_process_group", "(", "\"gloo\"", ",", "rank", "=", "rank", ",", "world_size", "=", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.cleanup": [[72, 74], ["torch.destroy_process_group"], "function", ["None"], ["", "def", "cleanup", "(", ")", ":", "\n", "    ", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.load_images": [[75, 84], ["torch.interpolate", "return_images.append"], "function", ["None"], ["", "def", "load_images", "(", "images", ",", "curriculum", ",", "device", ")", ":", "\n", "    ", "return_images", "=", "[", "]", "\n", "head", "=", "0", "\n", "for", "stage", "in", "curriculum", "[", "'stages'", "]", ":", "\n", "        ", "stage_images", "=", "images", "[", "head", ":", "head", "+", "stage", "[", "'batch_size'", "]", "]", "\n", "stage_images", "=", "F", ".", "interpolate", "(", "stage_images", ",", "size", "=", "stage", "[", "'img_size'", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return_images", ".", "append", "(", "stage_images", ")", "\n", "head", "+=", "stage", "[", "'batch_size'", "]", "\n", "", "return", "return_images", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.z_sampler": [[86, 92], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "z_sampler", "(", "shape", ",", "device", ",", "dist", ")", ":", "\n", "    ", "if", "dist", "==", "'gaussian'", ":", "\n", "        ", "z", "=", "torch", ".", "randn", "(", "shape", ",", "device", "=", "device", ")", "\n", "", "elif", "dist", "==", "'uniform'", ":", "\n", "        ", "z", "=", "torch", ".", "rand", "(", "shape", ",", "device", "=", "device", ")", "*", "2", "-", "1", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.train": [[94, 499], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "main.setup", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "getattr", "curriculums.extract_metadata", "int", "int", "main.z_sampler", "getattr", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "SSIM().to", "curriculums.extract_metadata.get", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "curriculums.extract_metadata.get", "torch.load.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "tqdm.tqdm", "tqdm.tqdm.update", "tqdm.tqdm", "range", "main.cleanup", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch_ema.ExponentialMovingAverage", "torch_ema.ExponentialMovingAverage", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.optim.Adam.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "tqdm.tqdm.update", "curriculums.extract_metadata", "torch.utils.data.distributed.DistributedSampler.set_epoch", "enumerate", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.load.parameters", "torch.load.parameters", "main.SSIM", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "curriculums.extract_metadata.get", "torch.cuda.amp.GradScaler.load_state_dict", "os.path.join", "str", "str", "str", "str", "datasets.get_dataset_zxm", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "curriculums.next_upsample_step", "curriculums.last_upsample_step", "tqdm.tqdm.reset", "tqdm.tqdm.set_description", "tqdm.tqdm.update", "curriculums.extract_metadata", "torch.nn.parallel.DistributedDataParallel.train", "torch.nn.parallel.DistributedDataParallel.train", "min", "imgs.to", "max", "torch.optim.Adam.zero_grad", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.unscale_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.cuda.amp.GradScaler.step", "main.z_sampler", "range", "torch.cuda.amp.GradScaler.unscale_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.optim.Adam.zero_grad", "torch_ema.ExponentialMovingAverage.update", "torch_ema.ExponentialMovingAverage.update", "torch.nn.parallel.DistributedDataParallel.module.siren.mapping_network.named_parameters", "torch.nn.parallel.DistributedDataParallel.named_parameters", "torch.nn.parallel.DistributedDataParallel.named_parameters", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "param_group.get", "datetime.datetime.now", "now.strftime.strftime", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cuda.amp.GradScaler.get_scale", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.nn.parallel.DistributedDataParallel", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.nn.parallel.DistributedDataParallel", "discriminator_losses.append", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.cuda.amp.GradScaler.scale().backward", "torch.nn.parallel.DistributedDataParallel.parameters", "curriculums.extract_metadata.get", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "tqdm.tqdm.update", "os.path.join", "torch.barrier", "torch_ema.ExponentialMovingAverage.store", "torch_ema.ExponentialMovingAverage.copy_to", "torch.nn.parallel.DistributedDataParallel.eval", "fid_evaluation.output_images", "torch_ema.ExponentialMovingAverage.restore", "torch.barrier", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "getattr", "getattr", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.optim.Adam.state_dict", "os.path.join", "torch.optim.Adam.state_dict", "os.path.join", "torch.cuda.amp.GradScaler.state_dict", "os.path.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "main.z_sampler", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cuda.amp.GradScaler.get_scale", "d_loss.item", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "math.ceil", "generator_losses.append", "tqdm.tqdm.write", "torch.nn.parallel.DistributedDataParallel.eval", "torchvision.utils.save_image", "torchvision.utils.save_image", "torch_ema.ExponentialMovingAverage.store", "torch_ema.ExponentialMovingAverage.copy_to", "torch.nn.parallel.DistributedDataParallel.eval", "torchvision.utils.save_image", "torchvision.utils.save_image", "torchvision.utils.save_image", "torch_ema.ExponentialMovingAverage.restore", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "fid_evaluation.setup_evaluation", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "fid_evaluation.calculate_fid", "torch.nn.parallel.DistributedDataParallel", "gen_imgs.clamp_.append", "torch.cat.append", "torch.cuda.amp.GradScaler.scale", "max", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.mean", "SSIM().to.mean", "g_loss.item", "torch.cuda.amp.GradScaler.scale", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "os.path.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "os.path.join", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "os.path.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "os.path.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "gen_imgs[].float", "os.path.join", "torch.nn.parallel.DistributedDataParallel.parameters", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.optim.Adam.state_dict", "os.path.join", "torch.optim.Adam.state_dict", "os.path.join", "torch.cuda.amp.GradScaler.state_dict", "os.path.join", "os.path.join", "os.path.join", "open", "f.write", "r_preds.sum", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "reprojection_loss.mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "copy.deepcopy", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gen_imgs.clamp_.clamp_", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "copy.deepcopy", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gen_imgs.clamp_.clamp_", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "copy.deepcopy", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gen_imgs.clamp_.clamp_", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "copy.deepcopy", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gen_imgs.clamp_.clamp_", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "copy.deepcopy", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gen_imgs.clamp_.clamp_", "os.path.join", "torch.autograd.grad.view().norm", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "SSIM().to.", "d_loss.item", "g_loss.item", "torch.cuda.amp.GradScaler.get_scale", "torch.nn.parallel.DistributedDataParallel.module.staged_forward", "gen_imgs.clamp_.append", "torch.nn.parallel.DistributedDataParallel.module.staged_forward", "gen_imgs.clamp_.append", "torch.nn.parallel.DistributedDataParallel.module.staged_forward", "gen_imgs.clamp_.append", "torch.nn.parallel.DistributedDataParallel.module.staged_forward", "gen_imgs.clamp_.append", "torch.nn.parallel.DistributedDataParallel.module.staged_forward", "gen_imgs.clamp_.append", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "fixed_z[].to", "fixed_z[].to", "fixed_z[].to", "fixed_z[].to", "rand_z[].to", "torch.autograd.grad.view", "torch.autograd.grad.size"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.setup", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.curriculums.extract_metadata", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.z_sampler", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.set_device", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.cleanup", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.curriculums.extract_metadata", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.get_dataset_zxm", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.curriculums.next_upsample_step", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.curriculums.last_upsample_step", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.curriculums.extract_metadata", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.train", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.train", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.z_sampler", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.fid_evaluation.output_images", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.main.z_sampler", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.fid_evaluation.setup_evaluation", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.fid_evaluation.calculate_fid", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.staged_forward", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.staged_forward", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.staged_forward", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.staged_forward", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.staged_forward"], ["", "def", "train", "(", "rank", ",", "world_size", ",", "opt", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "\n", "setup", "(", "rank", ",", "world_size", ",", "opt", ".", "port", ")", "\n", "device", "=", "torch", ".", "device", "(", "rank", ")", "\n", "\n", "curriculum", "=", "getattr", "(", "curriculums", ",", "opt", ".", "curriculum", ")", "\n", "metadata", "=", "curriculums", ".", "extract_metadata", "(", "curriculum", ",", "0", ")", "\n", "\n", "fix_row", "=", "int", "(", "5", ")", "\n", "fix_num", "=", "int", "(", "20", ")", "\n", "\n", "fixed_z", "=", "z_sampler", "(", "(", "fix_num", ",", "256", ")", ",", "device", "=", "'cpu'", ",", "dist", "=", "metadata", "[", "'z_dist'", "]", ")", "\n", "\n", "SIREN", "=", "getattr", "(", "siren", ",", "metadata", "[", "'model'", "]", ")", "\n", "\n", "CHANNELS", "=", "3", "\n", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "\n", "if", "opt", ".", "load_dir", "!=", "''", ":", "\n", "        ", "generator", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "load_dir", ",", "'generator.pth'", ")", ",", "map_location", "=", "device", ")", "\n", "discriminator", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "load_dir", ",", "'discriminator.pth'", ")", ",", "map_location", "=", "device", ")", "\n", "ema", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "load_dir", ",", "'ema.pth'", ")", ",", "map_location", "=", "device", ")", "\n", "ema2", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "load_dir", ",", "'ema2.pth'", ")", ",", "map_location", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "generator", "=", "getattr", "(", "generators", ",", "metadata", "[", "'generator'", "]", ")", "(", "SIREN", ",", "metadata", "[", "'latent_dim'", "]", ",", "metadata", "[", "'stereo_auxiliary'", "]", ")", ".", "to", "(", "device", ")", "\n", "discriminator", "=", "getattr", "(", "discriminators", ",", "metadata", "[", "'discriminator'", "]", ")", "(", ")", ".", "to", "(", "device", ")", "\n", "ema", "=", "ExponentialMovingAverage", "(", "generator", ".", "parameters", "(", ")", ",", "decay", "=", "0.999", ")", "\n", "ema2", "=", "ExponentialMovingAverage", "(", "generator", ".", "parameters", "(", ")", ",", "decay", "=", "0.9999", ")", "\n", "\n", "\n", "", "generator_ddp", "=", "DDP", "(", "generator", ",", "device_ids", "=", "[", "rank", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "discriminator_ddp", "=", "DDP", "(", "discriminator", ",", "device_ids", "=", "[", "rank", "]", ",", "find_unused_parameters", "=", "True", ",", "broadcast_buffers", "=", "False", ")", "\n", "generator", "=", "generator_ddp", ".", "module", "\n", "discriminator", "=", "discriminator_ddp", ".", "module", "\n", "\n", "ssim", "=", "SSIM", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "if", "metadata", ".", "get", "(", "'unique_lr'", ",", "False", ")", ":", "\n", "        ", "mapping_network_param_names", "=", "[", "name", "for", "name", ",", "_", "in", "generator_ddp", ".", "module", ".", "siren", ".", "mapping_network", ".", "named_parameters", "(", ")", "]", "\n", "mapping_network_parameters", "=", "[", "p", "for", "n", ",", "p", "in", "generator_ddp", ".", "named_parameters", "(", ")", "if", "n", "in", "mapping_network_param_names", "]", "\n", "generator_parameters", "=", "[", "p", "for", "n", ",", "p", "in", "generator_ddp", ".", "named_parameters", "(", ")", "if", "n", "not", "in", "mapping_network_param_names", "]", "\n", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "generator_parameters", ",", "'name'", ":", "'generator'", "}", ",", "\n", "{", "'params'", ":", "mapping_network_parameters", ",", "'name'", ":", "'mapping_network'", ",", "'lr'", ":", "metadata", "[", "'gen_lr'", "]", "*", "5e-2", "}", "]", ",", "\n", "lr", "=", "metadata", "[", "'gen_lr'", "]", ",", "betas", "=", "metadata", "[", "'betas'", "]", ",", "weight_decay", "=", "metadata", "[", "'weight_decay'", "]", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "generator_ddp", ".", "parameters", "(", ")", ",", "lr", "=", "metadata", "[", "'gen_lr'", "]", ",", "betas", "=", "metadata", "[", "'betas'", "]", ",", "weight_decay", "=", "metadata", "[", "'weight_decay'", "]", ")", "\n", "\n", "", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "discriminator_ddp", ".", "parameters", "(", ")", ",", "lr", "=", "metadata", "[", "'disc_lr'", "]", ",", "betas", "=", "metadata", "[", "'betas'", "]", ",", "weight_decay", "=", "metadata", "[", "'weight_decay'", "]", ")", "\n", "\n", "if", "opt", ".", "load_dir", "!=", "''", ":", "\n", "        ", "optimizer_G", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "load_dir", ",", "'optimizer_G.pth'", ")", ")", ")", "\n", "optimizer_D", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "load_dir", ",", "'optimizer_D.pth'", ")", ")", ")", "\n", "if", "not", "metadata", ".", "get", "(", "'disable_scaler'", ",", "False", ")", ":", "\n", "            ", "scaler", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "load_dir", ",", "'scaler.pth'", ")", ")", ")", "\n", "\n", "", "", "generator_losses", "=", "[", "]", "\n", "discriminator_losses", "=", "[", "]", "\n", "\n", "if", "opt", ".", "set_step", "!=", "None", ":", "\n", "        ", "generator", ".", "step", "=", "opt", ".", "set_step", "\n", "discriminator", ".", "step", "=", "opt", ".", "set_step", "\n", "\n", "", "if", "metadata", ".", "get", "(", "'disable_scaler'", ",", "False", ")", ":", "\n", "        ", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "False", ")", "\n", "\n", "", "generator", ".", "set_device", "(", "device", ")", "\n", "\n", "# ----------", "\n", "#  Training", "\n", "# ----------", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'options.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "opt", ")", ")", "\n", "f", ".", "write", "(", "'\\n\\n'", ")", "\n", "f", ".", "write", "(", "str", "(", "generator", ")", ")", "\n", "f", ".", "write", "(", "'\\n\\n'", ")", "\n", "f", ".", "write", "(", "str", "(", "discriminator", ")", ")", "\n", "f", ".", "write", "(", "'\\n\\n'", ")", "\n", "f", ".", "write", "(", "str", "(", "curriculum", ")", ")", "\n", "\n", "\n", "", "torch", ".", "manual_seed", "(", "rank", ")", "\n", "dataloader", "=", "None", "\n", "total_progress_bar", "=", "tqdm", "(", "total", "=", "opt", ".", "n_epochs", ",", "desc", "=", "\"Total progress\"", ",", "dynamic_ncols", "=", "True", ")", "\n", "total_progress_bar", ".", "update", "(", "discriminator", ".", "epoch", ")", "\n", "interior_step_bar", "=", "tqdm", "(", "dynamic_ncols", "=", "True", ")", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "n_epochs", ")", ":", "\n", "        ", "total_progress_bar", ".", "update", "(", "1", ")", "\n", "\n", "metadata", "=", "curriculums", ".", "extract_metadata", "(", "curriculum", ",", "discriminator", ".", "step", ")", "\n", "\n", "# Set learning rates", "\n", "for", "param_group", "in", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "if", "param_group", ".", "get", "(", "'name'", ",", "None", ")", "==", "'mapping_network'", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "metadata", "[", "'gen_lr'", "]", "*", "5e-2", "\n", "", "else", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "metadata", "[", "'gen_lr'", "]", "\n", "", "param_group", "[", "'betas'", "]", "=", "metadata", "[", "'betas'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "metadata", "[", "'weight_decay'", "]", "\n", "", "for", "param_group", "in", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "metadata", "[", "'disc_lr'", "]", "\n", "param_group", "[", "'betas'", "]", "=", "metadata", "[", "'betas'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "metadata", "[", "'weight_decay'", "]", "\n", "\n", "", "if", "not", "dataloader", "or", "dataloader", ".", "batch_size", "!=", "metadata", "[", "'batch_size'", "]", ":", "\n", "            ", "dataset", "=", "datasets", ".", "get_dataset_zxm", "(", "\n", "metadata", "[", "'dataset'", "]", ",", "\n", "**", "metadata", ")", "\n", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "dataset", ",", "\n", "num_replicas", "=", "world_size", ",", "\n", "rank", "=", "rank", ",", "\n", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_size", "=", "metadata", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "\n", ")", "\n", "\n", "step_next_upsample", "=", "curriculums", ".", "next_upsample_step", "(", "curriculum", ",", "discriminator", ".", "step", ")", "\n", "step_last_upsample", "=", "curriculums", ".", "last_upsample_step", "(", "curriculum", ",", "discriminator", ".", "step", ")", "\n", "\n", "\n", "interior_step_bar", ".", "reset", "(", "total", "=", "(", "step_next_upsample", "-", "step_last_upsample", ")", ")", "\n", "interior_step_bar", ".", "set_description", "(", "f\"Progress to next stage\"", ")", "\n", "interior_step_bar", ".", "update", "(", "(", "discriminator", ".", "step", "-", "step_last_upsample", ")", ")", "\n", "\n", "# modified ", "\n", "", "sampler", ".", "set_epoch", "(", "epoch", "+", "1", ")", "\n", "\n", "for", "i", ",", "(", "imgs", ",", "_", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "# opt.model_save_interval default=5000", "\n", "            ", "if", "discriminator", ".", "step", ">", "0", "and", "discriminator", ".", "step", "%", "opt", ".", "model_save_interval", "==", "0", "and", "rank", "==", "0", ":", "\n", "                ", "now", "=", "datetime", ".", "now", "(", ")", "\n", "now", "=", "now", ".", "strftime", "(", "\"%d--%H:%M--\"", ")", "\n", "torch", ".", "save", "(", "ema", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'{}_ema.pth'", ".", "format", "(", "discriminator", ".", "step", ")", ")", ")", "\n", "torch", ".", "save", "(", "ema2", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'{}_ema2.pth'", ".", "format", "(", "discriminator", ".", "step", ")", ")", ")", "\n", "torch", ".", "save", "(", "generator_ddp", ".", "module", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'{}_generator.pth'", ".", "format", "(", "discriminator", ".", "step", ")", ")", ")", "\n", "torch", ".", "save", "(", "discriminator_ddp", ".", "module", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'{}_discriminator.pth'", ".", "format", "(", "discriminator", ".", "step", ")", ")", ")", "\n", "torch", ".", "save", "(", "optimizer_G", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'{}_optimizer_G.pth'", ".", "format", "(", "discriminator", ".", "step", ")", ")", ")", "\n", "torch", ".", "save", "(", "optimizer_D", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'{}_optimizer_D.pth'", ".", "format", "(", "discriminator", ".", "step", ")", ")", ")", "\n", "torch", ".", "save", "(", "scaler", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'{}_scaler.pth'", ".", "format", "(", "discriminator", ".", "step", ")", ")", ")", "\n", "\n", "", "metadata", "=", "curriculums", ".", "extract_metadata", "(", "curriculum", ",", "discriminator", ".", "step", ")", "\n", "\n", "if", "dataloader", ".", "batch_size", "!=", "metadata", "[", "'batch_size'", "]", ":", "break", "\n", "\n", "if", "scaler", ".", "get_scale", "(", ")", "<", "1", ":", "\n", "                ", "scaler", ".", "update", "(", "1.", ")", "\n", "\n", "", "generator_ddp", ".", "train", "(", ")", "\n", "discriminator_ddp", ".", "train", "(", ")", "\n", "\n", "alpha", "=", "min", "(", "1", ",", "(", "discriminator", ".", "step", "-", "step_last_upsample", ")", "/", "(", "metadata", "[", "'fade_steps'", "]", ")", ")", "\n", "\n", "real_imgs", "=", "imgs", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "metadata", "[", "'nerf_noise'", "]", "=", "max", "(", "0", ",", "1.", "-", "discriminator", ".", "step", "/", "5000.", ")", "\n", "\n", "# TRAIN DISCRIMINATOR", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "z", "=", "z_sampler", "(", "(", "real_imgs", ".", "shape", "[", "0", "]", ",", "metadata", "[", "'latent_dim'", "]", ")", ",", "device", "=", "device", ",", "dist", "=", "metadata", "[", "'z_dist'", "]", ")", "\n", "split_batch_size", "=", "z", ".", "shape", "[", "0", "]", "//", "metadata", "[", "'batch_split'", "]", "\n", "gen_imgs", "=", "[", "]", "\n", "gen_positions", "=", "[", "]", "\n", "\n", "for", "split", "in", "range", "(", "metadata", "[", "'batch_split'", "]", ")", ":", "\n", "                        ", "subset_z", "=", "z", "[", "split", "*", "split_batch_size", ":", "(", "split", "+", "1", ")", "*", "split_batch_size", "]", "\n", "g_imgs", ",", "g_pos", ",", "_", ",", "_", "=", "generator_ddp", "(", "subset_z", ",", "alpha", ",", "**", "metadata", ")", "\n", "\n", "gen_imgs", ".", "append", "(", "g_imgs", ")", "\n", "gen_positions", ".", "append", "(", "g_pos", ")", "\n", "\n", "", "gen_imgs", "=", "torch", ".", "cat", "(", "gen_imgs", ",", "axis", "=", "0", ")", "\n", "gen_positions", "=", "torch", ".", "cat", "(", "gen_positions", ",", "axis", "=", "0", ")", "\n", "\n", "", "assert", "real_imgs", ".", "shape", "==", "gen_imgs", ".", "shape", "\n", "\n", "real_imgs", ".", "requires_grad", "=", "True", "\n", "r_preds", ",", "_", ",", "_", "=", "discriminator_ddp", "(", "real_imgs", ",", "alpha", ",", "**", "metadata", ")", "\n", "\n", "", "if", "metadata", "[", "'r1_lambda'", "]", ">", "0", ":", "\n", "# Gradient penalty", "\n", "                ", "grad_real", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "scaler", ".", "scale", "(", "r_preds", ".", "sum", "(", ")", ")", ",", "inputs", "=", "real_imgs", ",", "create_graph", "=", "True", ")", "\n", "inv_scale", "=", "1.", "/", "scaler", ".", "get_scale", "(", ")", "\n", "grad_real", "=", "[", "p", "*", "inv_scale", "for", "p", "in", "grad_real", "]", "[", "0", "]", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "if", "metadata", "[", "'r1_lambda'", "]", ">", "0", ":", "\n", "                    ", "grad_penalty", "=", "(", "grad_real", ".", "view", "(", "grad_real", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "grad_penalty", "=", "0.5", "*", "metadata", "[", "'r1_lambda'", "]", "*", "grad_penalty", "\n", "", "else", ":", "\n", "                    ", "grad_penalty", "=", "0", "\n", "\n", "", "g_preds", ",", "g_pred_latent", ",", "g_pred_position", "=", "discriminator_ddp", "(", "gen_imgs", ",", "alpha", ",", "**", "metadata", ")", "\n", "if", "metadata", "[", "'z_lambda'", "]", ">", "0", "or", "metadata", "[", "'pos_lambda'", "]", ">", "0", ":", "\n", "                    ", "latent_penalty", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "g_pred_latent", ",", "z", ")", "*", "metadata", "[", "'z_lambda'", "]", "\n", "position_penalty", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "g_pred_position", ",", "gen_positions", ")", "*", "metadata", "[", "'pos_lambda'", "]", "\n", "identity_penalty", "=", "latent_penalty", "+", "position_penalty", "\n", "", "else", ":", "\n", "                    ", "identity_penalty", "=", "0", "\n", "\n", "", "d_loss", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "g_preds", ")", ".", "mean", "(", ")", "+", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "-", "r_preds", ")", ".", "mean", "(", ")", "+", "grad_penalty", "+", "identity_penalty", "\n", "discriminator_losses", ".", "append", "(", "d_loss", ".", "item", "(", ")", ")", "\n", "\n", "", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "scaler", ".", "scale", "(", "d_loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "unscale_", "(", "optimizer_D", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "discriminator_ddp", ".", "parameters", "(", ")", ",", "metadata", "[", "'grad_clip'", "]", ")", "\n", "scaler", ".", "step", "(", "optimizer_D", ")", "\n", "\n", "# TRAIN GENERATOR", "\n", "z", "=", "z_sampler", "(", "(", "imgs", ".", "shape", "[", "0", "]", ",", "metadata", "[", "'latent_dim'", "]", ")", ",", "device", "=", "device", ",", "dist", "=", "metadata", "[", "'z_dist'", "]", ")", "\n", "\n", "split_batch_size", "=", "z", ".", "shape", "[", "0", "]", "//", "metadata", "[", "'batch_split'", "]", "\n", "for", "split", "in", "range", "(", "metadata", "[", "'batch_split'", "]", ")", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "subset_z", "=", "z", "[", "split", "*", "split_batch_size", ":", "(", "split", "+", "1", ")", "*", "split_batch_size", "]", "\n", "gen_imgs", ",", "gen_positions", ",", "gen_init_imgs", ",", "gen_warp_imgs", "=", "generator_ddp", "(", "subset_z", ",", "alpha", ",", "**", "metadata", ")", "\n", "g_preds", ",", "g_pred_latent", ",", "g_pred_position", "=", "discriminator_ddp", "(", "gen_imgs", ",", "alpha", ",", "**", "metadata", ")", "\n", "\n", "topk_percentage", "=", "max", "(", "0.99", "**", "(", "discriminator", ".", "step", "/", "metadata", "[", "'topk_interval'", "]", ")", ",", "metadata", "[", "'topk_v'", "]", ")", "if", "'topk_interval'", "in", "metadata", "and", "'topk_v'", "in", "metadata", "else", "1", "\n", "topk_num", "=", "math", ".", "ceil", "(", "topk_percentage", "*", "g_preds", ".", "shape", "[", "0", "]", ")", "\n", "\n", "g_preds", "=", "torch", ".", "topk", "(", "g_preds", ",", "topk_num", ",", "dim", "=", "0", ")", ".", "values", "\n", "\n", "if", "metadata", "[", "'z_lambda'", "]", ">", "0", "or", "metadata", "[", "'pos_lambda'", "]", ">", "0", ":", "\n", "                        ", "latent_penalty", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "g_pred_latent", ",", "subset_z", ")", "*", "metadata", "[", "'z_lambda'", "]", "\n", "position_penalty", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "g_pred_position", ",", "gen_positions", ")", "*", "metadata", "[", "'pos_lambda'", "]", "\n", "identity_penalty", "=", "latent_penalty", "+", "position_penalty", "\n", "", "else", ":", "\n", "                        ", "identity_penalty", "=", "0", "\n", "\n", "", "if", "metadata", "[", "'reproj_lambda'", "]", ">", "0", ":", "\n", "                        ", "pred", "=", "(", "gen_warp_imgs", "+", "1", ")", "/", "2", "\n", "target", "=", "(", "gen_init_imgs", "+", "1", ")", "/", "2", "\n", "abs_diff", "=", "torch", ".", "abs", "(", "target", "-", "pred", ")", "\n", "l1_loss", "=", "abs_diff", ".", "mean", "(", "1", ",", "True", ")", "\n", "\n", "ssim_loss", "=", "ssim", "(", "pred", ",", "target", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "reprojection_loss", "=", "0.85", "*", "ssim_loss", "+", "0.15", "*", "l1_loss", "\n", "reprojection_loss", "=", "reprojection_loss", ".", "mean", "(", ")", "*", "metadata", "[", "'reproj_lambda'", "]", "\n", "", "else", ":", "\n", "                        ", "reprojection_loss", "=", "0", "\n", "\n", "", "g_loss", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "-", "g_preds", ")", ".", "mean", "(", ")", "+", "identity_penalty", "+", "reprojection_loss", "\n", "generator_losses", ".", "append", "(", "g_loss", ".", "item", "(", ")", ")", "\n", "\n", "", "scaler", ".", "scale", "(", "g_loss", ")", ".", "backward", "(", ")", "\n", "\n", "", "scaler", ".", "unscale_", "(", "optimizer_G", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "generator_ddp", ".", "parameters", "(", ")", ",", "metadata", ".", "get", "(", "'grad_clip'", ",", "0.3", ")", ")", "\n", "scaler", ".", "step", "(", "optimizer_G", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "ema", ".", "update", "(", "generator_ddp", ".", "parameters", "(", ")", ")", "\n", "ema2", ".", "update", "(", "generator_ddp", ".", "parameters", "(", ")", ")", "\n", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "interior_step_bar", ".", "update", "(", "1", ")", "\n", "if", "i", "%", "10", "==", "0", ":", "\n", "                    ", "tqdm", ".", "write", "(", "f\"[Experiment: {opt.output_dir}] [GPU: {os.environ['CUDA_VISIBLE_DEVICES']}] [Epoch: {discriminator.epoch}/{opt.n_epochs}] [D loss: {d_loss.item()}] [G loss: {g_loss.item()}] [Step: {discriminator.step}] [Alpha: {alpha:.2f}] [Img Size: {metadata['output_size']}] [Batch Size: {metadata['batch_size']}] [TopK: {topk_num}] [Scale: {scaler.get_scale()}]\"", ")", "\n", "\n", "", "if", "discriminator", ".", "step", "%", "opt", ".", "sample_interval", "==", "0", ":", "\n", "                    ", "generator_ddp", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                            ", "copied_metadata", "=", "copy", ".", "deepcopy", "(", "metadata", ")", "\n", "copied_metadata", "[", "'h_stddev'", "]", "=", "copied_metadata", "[", "'v_stddev'", "]", "=", "0", "\n", "gen_imgs", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "fixed_z", ".", "shape", "[", "0", "]", ")", ":", "\n", "                                ", "g_imgs", ",", "_", "=", "generator_ddp", ".", "module", ".", "staged_forward", "(", "fixed_z", "[", "idx", ":", "idx", "+", "1", "]", ".", "to", "(", "device", ")", ",", "alpha", ",", "**", "copied_metadata", ")", "\n", "gen_imgs", ".", "append", "(", "g_imgs", ")", "\n", "\n", "", "gen_imgs", "=", "torch", ".", "cat", "(", "gen_imgs", ",", "axis", "=", "0", ")", "\n", "gen_imgs", "=", "(", "(", "gen_imgs", "+", "1", ")", "/", "2", ")", ".", "float", "(", ")", "\n", "gen_imgs", "=", "gen_imgs", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "", "", "save_image", "(", "gen_imgs", "[", ":", "fix_num", "]", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "f\"{discriminator.step}_fixed.png\"", ")", ",", "nrow", "=", "fix_row", ",", "normalize", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                            ", "copied_metadata", "=", "copy", ".", "deepcopy", "(", "metadata", ")", "\n", "copied_metadata", "[", "'h_stddev'", "]", "=", "copied_metadata", "[", "'v_stddev'", "]", "=", "0", "\n", "copied_metadata", "[", "'h_mean'", "]", "+=", "0.5", "\n", "gen_imgs", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "fixed_z", ".", "shape", "[", "0", "]", ")", ":", "\n", "                                ", "g_imgs", ",", "_", "=", "generator_ddp", ".", "module", ".", "staged_forward", "(", "fixed_z", "[", "idx", ":", "idx", "+", "1", "]", ".", "to", "(", "device", ")", ",", "alpha", ",", "**", "copied_metadata", ")", "\n", "gen_imgs", ".", "append", "(", "g_imgs", ")", "\n", "\n", "", "gen_imgs", "=", "torch", ".", "cat", "(", "gen_imgs", ",", "axis", "=", "0", ")", "\n", "gen_imgs", "=", "(", "(", "gen_imgs", "+", "1", ")", "/", "2", ")", ".", "float", "(", ")", "\n", "gen_imgs", "=", "gen_imgs", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "\n", "", "", "save_image", "(", "gen_imgs", "[", ":", "fix_num", "]", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "f\"{discriminator.step}_tilted.png\"", ")", ",", "nrow", "=", "fix_row", ",", "normalize", "=", "True", ")", "\n", "\n", "ema", ".", "store", "(", "generator_ddp", ".", "parameters", "(", ")", ")", "\n", "ema", ".", "copy_to", "(", "generator_ddp", ".", "parameters", "(", ")", ")", "\n", "generator_ddp", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                            ", "copied_metadata", "=", "copy", ".", "deepcopy", "(", "metadata", ")", "\n", "copied_metadata", "[", "'h_stddev'", "]", "=", "copied_metadata", "[", "'v_stddev'", "]", "=", "0", "\n", "gen_imgs", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "fixed_z", ".", "shape", "[", "0", "]", ")", ":", "\n", "                                ", "g_imgs", ",", "_", "=", "generator_ddp", ".", "module", ".", "staged_forward", "(", "fixed_z", "[", "idx", ":", "idx", "+", "1", "]", ".", "to", "(", "device", ")", ",", "alpha", ",", "**", "copied_metadata", ")", "\n", "gen_imgs", ".", "append", "(", "g_imgs", ")", "\n", "\n", "", "gen_imgs", "=", "torch", ".", "cat", "(", "gen_imgs", ",", "axis", "=", "0", ")", "\n", "gen_imgs", "=", "(", "(", "gen_imgs", "+", "1", ")", "/", "2", ")", ".", "float", "(", ")", "\n", "gen_imgs", "=", "gen_imgs", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "\n", "", "", "save_image", "(", "gen_imgs", "[", ":", "fix_num", "]", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "f\"{discriminator.step}_fixed_ema.png\"", ")", ",", "nrow", "=", "fix_row", ",", "normalize", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                            ", "copied_metadata", "=", "copy", ".", "deepcopy", "(", "metadata", ")", "\n", "copied_metadata", "[", "'h_stddev'", "]", "=", "copied_metadata", "[", "'v_stddev'", "]", "=", "0", "\n", "copied_metadata", "[", "'h_mean'", "]", "+=", "0.5", "\n", "gen_imgs", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "fixed_z", ".", "shape", "[", "0", "]", ")", ":", "\n", "                                ", "g_imgs", ",", "_", "=", "generator_ddp", ".", "module", ".", "staged_forward", "(", "fixed_z", "[", "idx", ":", "idx", "+", "1", "]", ".", "to", "(", "device", ")", ",", "alpha", ",", "**", "copied_metadata", ")", "\n", "gen_imgs", ".", "append", "(", "g_imgs", ")", "\n", "\n", "", "gen_imgs", "=", "torch", ".", "cat", "(", "gen_imgs", ",", "axis", "=", "0", ")", "\n", "gen_imgs", "=", "(", "(", "gen_imgs", "+", "1", ")", "/", "2", ")", ".", "float", "(", ")", "\n", "gen_imgs", "=", "gen_imgs", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "\n", "", "", "save_image", "(", "gen_imgs", "[", ":", "fix_num", "]", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "f\"{discriminator.step}_tilted_ema.png\"", ")", ",", "nrow", "=", "fix_row", ",", "normalize", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                            ", "copied_metadata", "=", "copy", ".", "deepcopy", "(", "metadata", ")", "\n", "copied_metadata", "[", "'h_stddev'", "]", "=", "copied_metadata", "[", "'v_stddev'", "]", "=", "0", "\n", "copied_metadata", "[", "'psi'", "]", "=", "0.7", "\n", "rand_z", "=", "torch", ".", "randn_like", "(", "fixed_z", ")", "\n", "gen_imgs", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "fixed_z", ".", "shape", "[", "0", "]", ")", ":", "\n", "                                ", "g_imgs", ",", "_", "=", "generator_ddp", ".", "module", ".", "staged_forward", "(", "rand_z", "[", "idx", ":", "idx", "+", "1", "]", ".", "to", "(", "device", ")", ",", "alpha", ",", "**", "copied_metadata", ")", "\n", "gen_imgs", ".", "append", "(", "g_imgs", ")", "\n", "\n", "", "gen_imgs", "=", "torch", ".", "cat", "(", "gen_imgs", ",", "axis", "=", "0", ")", "\n", "gen_imgs", "=", "(", "(", "gen_imgs", "+", "1", ")", "/", "2", ")", ".", "float", "(", ")", "\n", "gen_imgs", "=", "gen_imgs", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "", "", "save_image", "(", "gen_imgs", "[", ":", "fix_num", "]", ".", "float", "(", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "f\"{discriminator.step}_random.png\"", ")", ",", "nrow", "=", "fix_row", ",", "normalize", "=", "True", ")", "\n", "\n", "ema", ".", "restore", "(", "generator_ddp", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "discriminator", ".", "step", "%", "opt", ".", "sample_interval", "==", "0", ":", "\n", "                    ", "torch", ".", "save", "(", "ema", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'ema.pth'", ")", ")", "\n", "torch", ".", "save", "(", "ema2", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'ema2.pth'", ")", ")", "\n", "torch", ".", "save", "(", "generator_ddp", ".", "module", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'generator.pth'", ")", ")", "\n", "torch", ".", "save", "(", "discriminator_ddp", ".", "module", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'discriminator.pth'", ")", ")", "\n", "torch", ".", "save", "(", "optimizer_G", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'optimizer_G.pth'", ")", ")", "\n", "torch", ".", "save", "(", "optimizer_D", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'optimizer_D.pth'", ")", ")", "\n", "torch", ".", "save", "(", "scaler", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'scaler.pth'", ")", ")", "\n", "torch", ".", "save", "(", "generator_losses", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'generator.losses'", ")", ")", "\n", "torch", ".", "save", "(", "discriminator_losses", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'discriminator.losses'", ")", ")", "\n", "\n", "\n", "", "", "if", "opt", ".", "eval_freq", ">", "0", "and", "(", "discriminator", ".", "step", "+", "1", ")", "%", "opt", ".", "eval_freq", "==", "0", ":", "\n", "                ", "generated_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'evaluation/generated'", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                    ", "fid_evaluation", ".", "setup_evaluation", "(", "metadata", "[", "'dataset'", "]", ",", "generated_dir", ",", "opt", ".", "eval_dir", ",", "dataset_path", "=", "metadata", "[", "'dataset_path'", "]", ",", "target_size", "=", "metadata", "[", "'output_size'", "]", ")", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "ema", ".", "store", "(", "generator_ddp", ".", "parameters", "(", ")", ")", "\n", "ema", ".", "copy_to", "(", "generator_ddp", ".", "parameters", "(", ")", ")", "\n", "generator_ddp", ".", "eval", "(", ")", "\n", "fid_evaluation", ".", "output_images", "(", "alpha", ",", "generator_ddp", ",", "metadata", ",", "rank", ",", "world_size", ",", "generated_dir", ")", "\n", "ema", ".", "restore", "(", "generator_ddp", ".", "parameters", "(", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "                    ", "fid", "=", "fid_evaluation", ".", "calculate_fid", "(", "metadata", "[", "'dataset'", "]", ",", "generated_dir", ",", "opt", ".", "eval_dir", ",", "target_size", "=", "metadata", "[", "'output_size'", "]", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "f'fid.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "f'\\n{discriminator.step}:{fid}'", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "discriminator", ".", "step", "+=", "1", "\n", "generator", ".", "step", "+=", "1", "\n", "", "discriminator", ".", "epoch", "+=", "1", "\n", "generator", ".", "epoch", "+=", "1", "\n", "\n", "", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.fid_evaluation.output_images": [[51, 76], ["copy.deepcopy", "copy.deepcopy.get", "copy.deepcopy.get", "copy.deepcopy.get", "generator.eval", "tqdm.tqdm", "torch.no_grad", "tqdm.tqdm.close", "torch.randn", "generator.module.staged_forward", "torchvision.utils.save_image", "os.path.join", "tqdm.tqdm.update"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.staged_forward"], ["", "def", "output_images", "(", "alpha", ",", "generator", ",", "input_metadata", ",", "rank", ",", "world_size", ",", "output_dir", ",", "num_imgs", "=", "2048", ")", ":", "\n", "    ", "metadata", "=", "copy", ".", "deepcopy", "(", "input_metadata", ")", "\n", "# metadata['img_size'] = 128", "\n", "metadata", "[", "'batch_size'", "]", "=", "2", "\n", "\n", "metadata", "[", "'h_stddev'", "]", "=", "metadata", ".", "get", "(", "'h_stddev_eval'", ",", "metadata", "[", "'h_stddev'", "]", ")", "\n", "metadata", "[", "'v_stddev'", "]", "=", "metadata", ".", "get", "(", "'v_stddev_eval'", ",", "metadata", "[", "'v_stddev'", "]", ")", "\n", "metadata", "[", "'sample_dist'", "]", "=", "metadata", ".", "get", "(", "'sample_dist_eval'", ",", "metadata", "[", "'sample_dist'", "]", ")", "\n", "metadata", "[", "'psi'", "]", "=", "0.6", "\n", "\n", "img_counter", "=", "rank", "\n", "generator", ".", "eval", "(", ")", "\n", "img_counter", "=", "rank", "\n", "\n", "if", "rank", "==", "0", ":", "pbar", "=", "tqdm", "(", "\"generating images\"", ",", "total", "=", "num_imgs", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "while", "img_counter", "<", "num_imgs", ":", "\n", "            ", "z", "=", "torch", ".", "randn", "(", "(", "metadata", "[", "'batch_size'", "]", ",", "generator", ".", "module", ".", "z_dim", ")", ",", "device", "=", "generator", ".", "module", ".", "device", ")", "\n", "generated_imgs", ",", "_", "=", "generator", ".", "module", ".", "staged_forward", "(", "z", ",", "alpha", ",", "**", "metadata", ")", "\n", "\n", "for", "img", "in", "generated_imgs", ":", "\n", "                ", "save_image", "(", "img", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f'{img_counter:0>5}.jpg'", ")", ",", "normalize", "=", "True", ",", "range", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "img_counter", "+=", "world_size", "\n", "if", "rank", "==", "0", ":", "pbar", ".", "update", "(", "world_size", ")", "\n", "", "", "", "if", "rank", "==", "0", ":", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.fid_evaluation.output_real_images": [[26, 36], ["iter", "range", "next", "torchvision.utils.save_image", "os.path.join"], "function", ["None"], ["", "", "", "def", "output_real_images", "(", "dataloader", ",", "num_imgs", ",", "real_dir", ")", ":", "\n", "    ", "img_counter", "=", "0", "\n", "batch_size", "=", "dataloader", ".", "batch_size", "\n", "dataloader", "=", "iter", "(", "dataloader", ")", "\n", "for", "i", "in", "range", "(", "num_imgs", "//", "batch_size", ")", ":", "\n", "        ", "real_imgs", ",", "_", "=", "next", "(", "dataloader", ")", "\n", "\n", "for", "img", "in", "real_imgs", ":", "\n", "            ", "save_image", "(", "img", ",", "os", ".", "path", ".", "join", "(", "real_dir", ",", "f'{img_counter:0>5}.jpg'", ")", ",", "normalize", "=", "True", ",", "range", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "img_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.fid_evaluation.setup_evaluation": [[37, 50], ["os.path.join", "datasets.get_dataset", "print", "fid_evaluation.output_real_images", "print", "os.path.exists", "os.makedirs", "os.makedirs", "str"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.get_dataset", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.fid_evaluation.output_real_images"], ["", "", "", "def", "setup_evaluation", "(", "dataset_name", ",", "generated_dir", ",", "save_dir", ",", "dataset_path", ",", "target_size", "=", "128", ",", "num_imgs", "=", "8000", ")", ":", "\n", "    ", "real_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'EvalImages'", ",", "dataset_name", "+", "'_real_images_'", "+", "str", "(", "target_size", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "real_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "real_dir", ")", "\n", "\n", "", "dataloader", ",", "CHANNELS", "=", "datasets", ".", "get_dataset", "(", "dataset_name", ",", "output_size", "=", "target_size", ",", "dataset_path", "=", "dataset_path", ")", "\n", "print", "(", "'outputting real images...'", ")", "\n", "output_real_images", "(", "dataloader", ",", "num_imgs", ",", "real_dir", ")", "\n", "print", "(", "'...done'", ")", "\n", "\n", "if", "generated_dir", "is", "not", "None", ":", "\n", "        ", "os", ".", "makedirs", "(", "generated_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "return", "real_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.fid_evaluation.calculate_fid": [[77, 81], ["pytorch_fid.fid_score.calculate_fid_given_paths", "torch.cuda.empty_cache"], "function", ["None"], ["", "def", "calculate_fid", "(", "dataset_name", ",", "generated_dir", ",", "real_dir", ",", "target_size", "=", "256", ")", ":", "\n", "# real_dir = os.path.join('EvalImages', dataset_name + '_real_images_' + str(target_size))", "\n", "    ", "fid", "=", "fid_score", ".", "calculate_fid_given_paths", "(", "[", "real_dir", ",", "generated_dir", "]", ",", "128", ",", "'cuda'", ",", "2048", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.curriculums.next_upsample_step": [[47, 55], ["curriculums.extract_metadata", "sorted", "float", "curriculum.keys", "curriculum[].get", "type"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.curriculums.extract_metadata"], ["def", "next_upsample_step", "(", "curriculum", ",", "current_step", ")", ":", "\n", "# Return the epoch when it will next upsample", "\n", "    ", "current_metadata", "=", "extract_metadata", "(", "curriculum", ",", "current_step", ")", "\n", "current_size", "=", "current_metadata", "[", "'output_size'", "]", "\n", "for", "curriculum_step", "in", "sorted", "(", "[", "cs", "for", "cs", "in", "curriculum", ".", "keys", "(", ")", "if", "type", "(", "cs", ")", "==", "int", "]", ")", ":", "\n", "        ", "if", "curriculum_step", ">", "current_step", "and", "curriculum", "[", "curriculum_step", "]", ".", "get", "(", "'output_size'", ",", "1024", ")", ">", "current_size", ":", "\n", "            ", "return", "curriculum_step", "\n", "", "", "return", "float", "(", "'Inf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.curriculums.last_upsample_step": [[56, 65], ["curriculums.extract_metadata", "sorted", "curriculum.keys", "type"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.curriculums.extract_metadata"], ["", "def", "last_upsample_step", "(", "curriculum", ",", "current_step", ")", ":", "\n", "# Returns the start epoch of the current stage, i.e. the epoch", "\n", "# it last upsampled", "\n", "    ", "current_metadata", "=", "extract_metadata", "(", "curriculum", ",", "current_step", ")", "\n", "current_size", "=", "current_metadata", "[", "'output_size'", "]", "\n", "for", "curriculum_step", "in", "sorted", "(", "[", "cs", "for", "cs", "in", "curriculum", ".", "keys", "(", ")", "if", "type", "(", "cs", ")", "==", "int", "]", ")", ":", "\n", "        ", "if", "curriculum_step", "<=", "current_step", "and", "curriculum", "[", "curriculum_step", "]", "[", "'output_size'", "]", "==", "current_size", ":", "\n", "            ", "return", "curriculum_step", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.curriculums.get_current_step": [[66, 72], ["None"], "function", ["None"], ["", "def", "get_current_step", "(", "curriculum", ",", "epoch", ")", ":", "\n", "    ", "step", "=", "0", "\n", "for", "update_epoch", "in", "curriculum", "[", "'update_epochs'", "]", ":", "\n", "        ", "if", "epoch", ">=", "update_epoch", ":", "\n", "            ", "step", "+=", "1", "\n", "", "", "return", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.curriculums.extract_metadata": [[73, 86], ["sorted", "curriculum[].items", "curriculum.keys", "curriculum.keys", "type", "type"], "function", ["None"], ["", "def", "extract_metadata", "(", "curriculum", ",", "current_step", ")", ":", "\n", "    ", "return_dict", "=", "{", "}", "\n", "# process batch_size, num_steps, first sort list, then for every list...", "\n", "for", "curriculum_step", "in", "sorted", "(", "[", "cs", "for", "cs", "in", "curriculum", ".", "keys", "(", ")", "if", "type", "(", "cs", ")", "==", "int", "]", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "if", "curriculum_step", "<=", "current_step", ":", "\n", "            ", "for", "key", ",", "value", "in", "curriculum", "[", "curriculum_step", "]", ".", "items", "(", ")", ":", "\n", "                ", "return_dict", "[", "key", "]", "=", "value", "\n", "", "break", "\n", "\n", "# process other keys like dataset_path, fov and so on", "\n", "", "", "for", "key", "in", "[", "k", "for", "k", "in", "curriculum", ".", "keys", "(", ")", "if", "type", "(", "k", ")", "!=", "int", "]", ":", "\n", "        ", "return_dict", "[", "key", "]", "=", "curriculum", "[", "key", "]", "\n", "", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.render_multiview_image.show": [[16, 22], ["tensor_img.squeeze.permute().squeeze().cpu().numpy", "plt.imshow", "plt.show", "len", "tensor_img.squeeze.squeeze", "tensor_img.squeeze.permute().squeeze().cpu", "tensor_img.squeeze.permute().squeeze", "tensor_img.squeeze.permute"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.render_multiview_image.show"], ["def", "show", "(", "tensor_img", ")", ":", "\n", "    ", "if", "len", "(", "tensor_img", ".", "shape", ")", ">", "3", ":", "\n", "        ", "tensor_img", "=", "tensor_img", ".", "squeeze", "(", "0", ")", "\n", "", "tensor_img", "=", "tensor_img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "tensor_img", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.render_multiview_image.generate_img": [[23, 34], ["torch.no_grad", "generator.staged_forward", "img.permute().squeeze().cpu().numpy.detach", "img.permute().squeeze().cpu().numpy.min", "img.permute().squeeze().cpu().numpy.max", "img.permute().squeeze().cpu().numpy.permute().squeeze().cpu().numpy", "img.permute().squeeze().cpu().numpy.permute().squeeze().cpu", "img.permute().squeeze().cpu().numpy.permute().squeeze", "img.permute().squeeze().cpu().numpy.permute"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.staged_forward"], ["", "def", "generate_img", "(", "gen", ",", "z", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img", ",", "depth_map", "=", "generator", ".", "staged_forward", "(", "z", ",", "**", "kwargs", ")", "\n", "tensor_img", "=", "img", ".", "detach", "(", ")", "\n", "\n", "img_min", "=", "img", ".", "min", "(", ")", "\n", "img_max", "=", "img", ".", "max", "(", ")", "\n", "img", "=", "(", "img", "-", "img_min", ")", "/", "(", "img_max", "-", "img_min", ")", "\n", "img", "=", "img", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "img", ",", "tensor_img", ",", "depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.FFHQ.__init__": [[17, 29], ["torch.utils.data.Dataset.__init__", "glob.glob", "torchvision.Compose", "torchvision.Compose", "len", "torchvision.Resize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.Resize", "torchvision.Resize"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "self", ",", "dataset_path", ",", "output_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data", "=", "glob", ".", "glob", "(", "dataset_path", ")", "\n", "assert", "len", "(", "self", ".", "data", ")", ">", "0", ",", "\"Can't find data; make sure you specify the path to your dataset\"", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "576", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "512", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", "]", ",", "[", "0.5", "]", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "output_size", ",", "output_size", ")", ",", "interpolation", "=", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.FFHQ.__len__": [[30, 32], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.FFHQ.__getitem__": [[33, 38], ["PIL.Image.open", "torchvision.datasets.FFHQ.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "X", "=", "PIL", ".", "Image", ".", "open", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "X", "=", "self", ".", "transform", "(", "X", ")", "\n", "\n", "return", "X", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.CelebAHQ.__init__": [[42, 55], ["torch.utils.data.Dataset.__init__", "glob.glob", "torchvision.Compose", "torchvision.Compose", "len", "torchvision.Resize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.Resize", "torchvision.Resize"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "self", ",", "dataset_path", ",", "output_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data", "=", "glob", ".", "glob", "(", "dataset_path", ")", "\n", "assert", "len", "(", "self", ".", "data", ")", ">", "0", ",", "\"Can't find data; make sure you specify the path to your dataset\"", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "576", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "512", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", "]", ",", "[", "0.5", "]", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "output_size", ",", "output_size", ")", ",", "interpolation", "=", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.CelebAHQ.__len__": [[56, 58], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.CelebAHQ.__getitem__": [[59, 64], ["PIL.Image.open", "torchvision.datasets.CelebAHQ.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "X", "=", "PIL", ".", "Image", ".", "open", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "X", "=", "self", ".", "transform", "(", "X", ")", "\n", "\n", "return", "X", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.Cat.__init__": [[68, 79], ["torch.utils.data.Dataset.__init__", "glob.glob", "torchvision.Compose", "torchvision.Compose", "len", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.Resize", "torchvision.Resize"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "self", ",", "dataset_path", ",", "output_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data", "=", "glob", ".", "glob", "(", "dataset_path", ")", "\n", "assert", "len", "(", "self", ".", "data", ")", ">", "0", ",", "\"Can't find data; make sure you specify the path to your dataset\"", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "CenterCrop", "(", "472", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", "]", ",", "[", "0.5", "]", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "output_size", ",", "output_size", ")", ",", "interpolation", "=", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.Cat.__len__": [[80, 82], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.Cat.__getitem__": [[83, 87], ["PIL.Image.open", "torchvision.datasets.Cat.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "X", "=", "PIL", ".", "Image", ".", "open", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "X", "=", "self", ".", "transform", "(", "X", ")", "\n", "return", "X", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.get_dataset": [[89, 101], ["torch.utils.data.DataLoader", "globals"], "function", ["None"], ["", "", "def", "get_dataset", "(", "name", ",", "subsample", "=", "None", ",", "batch_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "dataset", "=", "globals", "(", ")", "[", "name", "]", "(", "**", "kwargs", ")", "\n", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "False", ",", "\n", "num_workers", "=", "8", "\n", ")", "\n", "return", "dataloader", ",", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.get_dataset_zxm": [[102, 105], ["globals"], "function", ["None"], ["", "def", "get_dataset_zxm", "(", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "dataset", "=", "globals", "(", ")", "[", "name", "]", "(", "**", "kwargs", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.None.datasets.get_dataset_distributed": [[106, 125], ["torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "globals"], "function", ["None"], ["", "def", "get_dataset_distributed", "(", "name", ",", "world_size", ",", "rank", ",", "batch_size", ",", "**", "kwargs", ")", ":", "\n", "    ", "dataset", "=", "globals", "(", ")", "[", "name", "]", "(", "**", "kwargs", ")", "\n", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "dataset", ",", "\n", "num_replicas", "=", "world_size", ",", "\n", "rank", "=", "rank", ",", "\n", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "\n", ")", "\n", "\n", "return", "dataloader", ",", "3", "\n", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.Sine.__init__": [[10, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.Sine.forward": [[12, 14], ["torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "sin", "(", "30.", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.CustomMappingNetwork.__init__": [[50, 69], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "siren.CustomMappingNetwork.network.apply", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "map_hidden_dim", ",", "map_output_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "z_dim", ",", "map_hidden_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "map_hidden_dim", ",", "map_hidden_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "map_hidden_dim", ",", "map_hidden_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "map_hidden_dim", ",", "map_output_dim", ")", ")", "\n", "\n", "self", ".", "network", ".", "apply", "(", "kaiming_leaky_init", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "network", "[", "-", "1", "]", ".", "weight", "*=", "0.25", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.CustomMappingNetwork.forward": [[70, 83], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "network", ")", "-", "1", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "mapping_codes", "=", "self", ".", "network", "[", "i", "]", "(", "z", ")", "\n", "", "else", ":", "\n", "                ", "mapping_codes", "=", "self", ".", "network", "[", "i", "]", "(", "mapping_codes", ")", "\n", "\n", "", "", "frequencies_offsets", "=", "self", ".", "network", "[", "-", "1", "]", "(", "mapping_codes", ")", "\n", "frequencies", "=", "frequencies_offsets", "[", "...", ",", ":", "frequencies_offsets", ".", "shape", "[", "-", "1", "]", "//", "2", "]", "\n", "phase_shifts", "=", "frequencies_offsets", "[", "...", ",", "frequencies_offsets", ".", "shape", "[", "-", "1", "]", "//", "2", ":", "]", "\n", "\n", "return", "frequencies", ",", "phase_shifts", ",", "mapping_codes", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.FiLMLayer.__init__": [[93, 96], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.FiLMLayer.forward": [[97, 102], ["siren.FiLMLayer.layer", "freq.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "phase_shift.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "freq.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "phase_shift.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "freq", ",", "phase_shift", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer", "(", "x", ")", "\n", "freq", "=", "freq", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "phase_shift", "=", "phase_shift", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "return", "torch", ".", "sin", "(", "freq", "*", "x", "+", "phase_shift", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.TALLSIREN.__init__": [[107, 137], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "siren.FiLMLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "siren.CustomMappingNetwork", "siren.TALLSIREN.network.apply", "siren.TALLSIREN.final_layer.apply", "siren.TALLSIREN.color_layer_sine.apply", "siren.TALLSIREN.color_layer_linear.apply", "siren.TALLSIREN.network[].apply", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "siren.frequency_init", "siren.frequency_init", "siren.frequency_init", "siren.frequency_init", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "len"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "2", ",", "z_dim", "=", "100", ",", "hidden_dim", "=", "256", ",", "output_dim", "=", "1", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "self", ".", "network", "=", "nn", ".", "ModuleList", "(", "[", "\n", "FiLMLayer", "(", "input_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "]", ")", "\n", "self", ".", "final_layer", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", "\n", "\n", "self", ".", "color_layer_sine", "=", "FiLMLayer", "(", "hidden_dim", "+", "3", ",", "hidden_dim", ")", "\n", "self", ".", "color_layer_linear", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "128", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "self", ".", "mapping_network", "=", "CustomMappingNetwork", "(", "z_dim", ",", "256", ",", "(", "len", "(", "self", ".", "network", ")", "+", "1", ")", "*", "hidden_dim", "*", "2", ")", "\n", "\n", "self", ".", "network", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "final_layer", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "color_layer_sine", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "color_layer_linear", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "network", "[", "0", "]", ".", "apply", "(", "first_layer_film_sine_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.TALLSIREN.forward": [[138, 141], ["siren.TALLSIREN.mapping_network", "siren.TALLSIREN.forward_with_frequencies_phase_shifts"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts"], ["", "def", "forward", "(", "self", ",", "input", ",", "z", ",", "ray_directions", ",", "**", "kwargs", ")", ":", "\n", "        ", "frequencies", ",", "phase_shifts", "=", "self", ".", "mapping_network", "(", "z", ")", "\n", "return", "self", ".", "forward_with_frequencies_phase_shifts", "(", "input", ",", "frequencies", ",", "phase_shifts", ",", "ray_directions", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.TALLSIREN.forward_with_frequencies_phase_shifts": [[142, 157], ["enumerate", "siren.TALLSIREN.final_layer", "siren.TALLSIREN.color_layer_sine", "siren.TALLSIREN.color_layer_linear", "layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward_with_frequencies_phase_shifts", "(", "self", ",", "input", ",", "frequencies", ",", "phase_shifts", ",", "ray_directions", ",", "**", "kwargs", ")", ":", "\n", "        ", "frequencies", "=", "frequencies", "*", "15", "+", "30", "\n", "\n", "x", "=", "input", "\n", "\n", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "network", ")", ":", "\n", "            ", "start", "=", "index", "*", "self", ".", "hidden_dim", "\n", "end", "=", "(", "index", "+", "1", ")", "*", "self", ".", "hidden_dim", "\n", "x", "=", "layer", "(", "x", ",", "frequencies", "[", "...", ",", "start", ":", "end", "]", ",", "phase_shifts", "[", "...", ",", "start", ":", "end", "]", ")", "\n", "\n", "", "sigma", "=", "self", ".", "final_layer", "(", "x", ")", "\n", "rbg", "=", "self", ".", "color_layer_sine", "(", "torch", ".", "cat", "(", "[", "ray_directions", ",", "x", "]", ",", "dim", "=", "-", "1", ")", ",", "frequencies", "[", "...", ",", "-", "self", ".", "hidden_dim", ":", "]", ",", "phase_shifts", "[", "...", ",", "-", "self", ".", "hidden_dim", ":", "]", ")", "\n", "rbg", "=", "self", ".", "color_layer_linear", "(", "rbg", ")", "\n", "\n", "return", "rbg", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.UniformBoxWarp.__init__": [[241, 244], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sidelength", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "2", "/", "sidelength", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.UniformBoxWarp.forward": [[245, 247], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "coordinates", ")", ":", "\n", "        ", "return", "coordinates", "*", "self", ".", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.SPATIALSIRENBASELINE.__init__": [[171, 203], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "siren.FiLMLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "siren.CustomMappingNetwork", "siren.SPATIALSIRENBASELINE.network.apply", "siren.SPATIALSIRENBASELINE.final_layer.apply", "siren.SPATIALSIRENBASELINE.color_layer_sine.apply", "siren.SPATIALSIRENBASELINE.color_layer_linear.apply", "siren.SPATIALSIRENBASELINE.network[].apply", "siren.UniformBoxWarp", "torch.Linear", "torch.Linear", "torch.Linear", "siren.frequency_init", "siren.frequency_init", "siren.frequency_init", "siren.frequency_init", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "len"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "2", ",", "z_dim", "=", "100", ",", "hidden_dim", "=", "256", ",", "output_dim", "=", "1", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "self", ".", "network", "=", "nn", ".", "ModuleList", "(", "[", "\n", "FiLMLayer", "(", "3", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "]", ")", "\n", "self", ".", "final_layer", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", "\n", "\n", "self", ".", "color_layer_sine", "=", "FiLMLayer", "(", "hidden_dim", "+", "3", ",", "hidden_dim", ")", "\n", "self", ".", "color_layer_linear", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "3", ")", ")", "\n", "\n", "self", ".", "mapping_network", "=", "CustomMappingNetwork", "(", "z_dim", ",", "256", ",", "(", "len", "(", "self", ".", "network", ")", "+", "1", ")", "*", "hidden_dim", "*", "2", ")", "\n", "\n", "self", ".", "network", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "final_layer", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "color_layer_sine", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "color_layer_linear", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "network", "[", "0", "]", ".", "apply", "(", "first_layer_film_sine_init", ")", "\n", "\n", "self", ".", "gridwarper", "=", "UniformBoxWarp", "(", "0.24", ")", "# Don't worry about this, it was added to ensure compatibility with another model. Shouldn't affect performance.", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.SPATIALSIRENBASELINE.forward": [[204, 208], ["siren.SPATIALSIRENBASELINE.mapping_network", "siren.SPATIALSIRENBASELINE.forward_with_frequencies_phase_shifts"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts"], ["", "def", "forward", "(", "self", ",", "input", ",", "z", ",", "ray_directions", ",", "**", "kwargs", ")", ":", "\n", "        ", "frequencies", ",", "phase_shifts", ",", "mapping_codes", "=", "self", ".", "mapping_network", "(", "z", ")", "\n", "outputs", ",", "rbg_feat", "=", "self", ".", "forward_with_frequencies_phase_shifts", "(", "input", ",", "frequencies", ",", "phase_shifts", ",", "ray_directions", ",", "**", "kwargs", ")", "\n", "return", "outputs", ",", "rbg_feat", ",", "mapping_codes", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.SPATIALSIRENBASELINE.forward_with_frequencies_phase_shifts": [[209, 225], ["siren.SPATIALSIRENBASELINE.gridwarper", "enumerate", "siren.SPATIALSIRENBASELINE.final_layer", "siren.SPATIALSIRENBASELINE.color_layer_sine", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "siren.SPATIALSIRENBASELINE.color_layer_linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward_with_frequencies_phase_shifts", "(", "self", ",", "input", ",", "frequencies", ",", "phase_shifts", ",", "ray_directions", ",", "**", "kwargs", ")", ":", "\n", "        ", "frequencies", "=", "frequencies", "*", "15", "+", "30", "\n", "\n", "input", "=", "self", ".", "gridwarper", "(", "input", ")", "\n", "x", "=", "input", "\n", "\n", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "network", ")", ":", "\n", "            ", "start", "=", "index", "*", "self", ".", "hidden_dim", "\n", "end", "=", "(", "index", "+", "1", ")", "*", "self", ".", "hidden_dim", "\n", "x", "=", "layer", "(", "x", ",", "frequencies", "[", "...", ",", "start", ":", "end", "]", ",", "phase_shifts", "[", "...", ",", "start", ":", "end", "]", ")", "\n", "\n", "", "sigma", "=", "self", ".", "final_layer", "(", "x", ")", "\n", "rbg_feat", "=", "self", ".", "color_layer_sine", "(", "torch", ".", "cat", "(", "[", "ray_directions", ",", "x", "]", ",", "dim", "=", "-", "1", ")", ",", "frequencies", "[", "...", ",", "-", "self", ".", "hidden_dim", ":", "]", ",", "phase_shifts", "[", "...", ",", "-", "self", ".", "hidden_dim", ":", "]", ")", "\n", "rbg", "=", "torch", ".", "sigmoid", "(", "self", ".", "color_layer_linear", "(", "rbg_feat", ")", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "rbg", ",", "sigma", "]", ",", "dim", "=", "-", "1", ")", ",", "rbg_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.SPATIALSIRENBASELINE.sigma_forward_with_frequencies_phase_shifts": [[226, 239], ["siren.SPATIALSIRENBASELINE.gridwarper", "enumerate", "siren.SPATIALSIRENBASELINE.final_layer", "layer"], "methods", ["None"], ["", "def", "sigma_forward_with_frequencies_phase_shifts", "(", "self", ",", "input", ",", "frequencies", ",", "phase_shifts", ",", "ray_directions", ",", "**", "kwargs", ")", ":", "\n", "        ", "frequencies", "=", "frequencies", "*", "15", "+", "30", "\n", "\n", "input", "=", "self", ".", "gridwarper", "(", "input", ")", "\n", "x", "=", "input", "\n", "\n", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "network", ")", ":", "\n", "            ", "start", "=", "index", "*", "self", ".", "hidden_dim", "\n", "end", "=", "(", "index", "+", "1", ")", "*", "self", ".", "hidden_dim", "\n", "x", "=", "layer", "(", "x", ",", "frequencies", "[", "...", ",", "start", ":", "end", "]", ",", "phase_shifts", "[", "...", ",", "start", ":", "end", "]", ")", "\n", "\n", "", "sigma", "=", "self", ".", "final_layer", "(", "x", ")", "\n", "return", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.__init__": [[278, 316], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "print", "torch.Linear", "torch.Linear", "torch.Linear", "siren.FiLMLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "siren.CustomMappingNetwork", "siren.EmbeddingPiGAN128.network.apply", "siren.EmbeddingPiGAN128.final_layer.apply", "siren.EmbeddingPiGAN128.color_layer_sine.apply", "siren.EmbeddingPiGAN128.color_layer_linear.apply", "siren.EmbeddingPiGAN128.network[].apply", "torch.Parameter", "torch.Parameter", "torch.Parameter", "siren.UniformBoxWarp", "torch.Linear", "torch.Linear", "torch.Linear", "siren.frequency_init", "siren.frequency_init", "siren.frequency_init", "siren.frequency_init", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "siren.FiLMLayer", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "2", ",", "z_dim", "=", "100", ",", "hidden_dim", "=", "128", ",", "output_dim", "=", "1", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "self", ".", "network", "=", "nn", ".", "ModuleList", "(", "[", "\n", "FiLMLayer", "(", "32", "+", "3", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "FiLMLayer", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "]", ")", "\n", "print", "(", "self", ".", "network", ")", "\n", "\n", "self", ".", "final_layer", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", "\n", "\n", "self", ".", "color_layer_sine", "=", "FiLMLayer", "(", "hidden_dim", "+", "3", ",", "hidden_dim", ")", "\n", "self", ".", "color_layer_linear", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "3", ")", ")", "\n", "\n", "self", ".", "mapping_network", "=", "CustomMappingNetwork", "(", "z_dim", ",", "256", ",", "(", "len", "(", "self", ".", "network", ")", "+", "1", ")", "*", "hidden_dim", "*", "2", ")", "\n", "\n", "self", ".", "network", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "final_layer", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "color_layer_sine", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "color_layer_linear", ".", "apply", "(", "frequency_init", "(", "25", ")", ")", "\n", "self", ".", "network", "[", "0", "]", ".", "apply", "(", "modified_first_sine_init", ")", "\n", "\n", "self", ".", "spatial_embeddings", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "32", ",", "96", ",", "96", ",", "96", ")", "*", "0.01", ")", "\n", "\n", "# !! Important !! Set this value to the expected side-length of your scene. e.g. for for faces, heads usually fit in", "\n", "# a box of side-length 0.24, since the camera has such a narrow FOV. For other scenes, with higher FOV, probably needs to be bigger.", "\n", "self", ".", "gridwarper", "=", "UniformBoxWarp", "(", "0.24", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward": [[317, 320], ["siren.EmbeddingPiGAN128.mapping_network", "siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts"], ["", "def", "forward", "(", "self", ",", "input", ",", "z", ",", "ray_directions", ",", "**", "kwargs", ")", ":", "\n", "        ", "frequencies", ",", "phase_shifts", "=", "self", ".", "mapping_network", "(", "z", ")", "\n", "return", "self", ".", "forward_with_frequencies_phase_shifts", "(", "input", ",", "frequencies", ",", "phase_shifts", ",", "ray_directions", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts": [[321, 338], ["siren.EmbeddingPiGAN128.gridwarper", "siren.sample_from_3dgrid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "siren.EmbeddingPiGAN128.final_layer", "siren.EmbeddingPiGAN128.color_layer_sine", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "siren.EmbeddingPiGAN128.color_layer_linear"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.sample_from_3dgrid"], ["", "def", "forward_with_frequencies_phase_shifts", "(", "self", ",", "input", ",", "frequencies", ",", "phase_shifts", ",", "ray_directions", ",", "**", "kwargs", ")", ":", "\n", "        ", "frequencies", "=", "frequencies", "*", "15", "+", "30", "\n", "\n", "input", "=", "self", ".", "gridwarper", "(", "input", ")", "\n", "shared_features", "=", "sample_from_3dgrid", "(", "input", ",", "self", ".", "spatial_embeddings", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "shared_features", ",", "input", "]", ",", "-", "1", ")", "\n", "\n", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "network", ")", ":", "\n", "            ", "start", "=", "index", "*", "self", ".", "hidden_dim", "\n", "end", "=", "(", "index", "+", "1", ")", "*", "self", ".", "hidden_dim", "\n", "x", "=", "layer", "(", "x", ",", "frequencies", "[", "...", ",", "start", ":", "end", "]", ",", "phase_shifts", "[", "...", ",", "start", ":", "end", "]", ")", "\n", "\n", "", "sigma", "=", "self", ".", "final_layer", "(", "x", ")", "\n", "rbg", "=", "self", ".", "color_layer_sine", "(", "torch", ".", "cat", "(", "[", "ray_directions", ",", "x", "]", ",", "dim", "=", "-", "1", ")", ",", "frequencies", "[", "...", ",", "-", "self", ".", "hidden_dim", ":", "]", ",", "phase_shifts", "[", "...", ",", "-", "self", ".", "hidden_dim", ":", "]", ")", "\n", "rbg", "=", "torch", ".", "sigmoid", "(", "self", ".", "color_layer_linear", "(", "rbg", ")", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "rbg", ",", "sigma", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN256.__init__": [[340, 343], ["siren.EmbeddingPiGAN128.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ",", "hidden_dim", "=", "256", ")", "\n", "self", ".", "spatial_embeddings", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "32", ",", "64", ",", "64", ",", "64", ")", "*", "0.1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.sine_init": [[15, 20], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "isinstance", "m.weight.size", "m.weight.uniform_", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "", "def", "sine_init", "(", "m", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "num_input", "=", "m", ".", "weight", ".", "size", "(", "-", "1", ")", "\n", "m", ".", "weight", ".", "uniform_", "(", "-", "np", ".", "sqrt", "(", "6", "/", "num_input", ")", "/", "30", ",", "np", ".", "sqrt", "(", "6", "/", "num_input", ")", "/", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.first_layer_sine_init": [[22, 27], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "isinstance", "m.weight.size", "m.weight.uniform_"], "function", ["None"], ["", "", "", "def", "first_layer_sine_init", "(", "m", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "num_input", "=", "m", ".", "weight", ".", "size", "(", "-", "1", ")", "\n", "m", ".", "weight", ".", "uniform_", "(", "-", "1", "/", "num_input", ",", "1", "/", "num_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.film_sine_init": [[29, 34], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "isinstance", "m.weight.size", "m.weight.uniform_", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "", "", "def", "film_sine_init", "(", "m", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "num_input", "=", "m", ".", "weight", ".", "size", "(", "-", "1", ")", "\n", "m", ".", "weight", ".", "uniform_", "(", "-", "np", ".", "sqrt", "(", "6", "/", "num_input", ")", "/", "30", ",", "np", ".", "sqrt", "(", "6", "/", "num_input", ")", "/", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.first_layer_film_sine_init": [[36, 41], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "isinstance", "m.weight.size", "m.weight.uniform_"], "function", ["None"], ["", "", "", "def", "first_layer_film_sine_init", "(", "m", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "num_input", "=", "m", ".", "weight", ".", "size", "(", "-", "1", ")", "\n", "m", ".", "weight", ".", "uniform_", "(", "-", "1", "/", "num_input", ",", "1", "/", "num_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.kaiming_leaky_init": [[43, 47], ["classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["", "", "", "def", "kaiming_leaky_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0.2", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.frequency_init": [[84, 91], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "isinstance", "m.weight.size", "m.weight.uniform_", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "", "def", "frequency_init", "(", "freq", ")", ":", "\n", "    ", "def", "init", "(", "m", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "num_input", "=", "m", ".", "weight", ".", "size", "(", "-", "1", ")", "\n", "m", ".", "weight", ".", "uniform_", "(", "-", "np", ".", "sqrt", "(", "6", "/", "num_input", ")", "/", "freq", ",", "np", ".", "sqrt", "(", "6", "/", "num_input", ")", "/", "freq", ")", "\n", "", "", "", "return", "init", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.sample_from_3dgrid": [[249, 266], ["coordinates.float.float", "grid.float.float", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "sampled_features.permute().reshape.permute().reshape", "grid.float.expand", "coordinates.float.reshape", "sampled_features.permute().reshape.permute"], "function", ["None"], ["", "", "def", "sample_from_3dgrid", "(", "coordinates", ",", "grid", ")", ":", "\n", "    ", "\"\"\"\n    Expects coordinates in shape (batch_size, num_points_per_batch, 3)\n    Expects grid in shape (1, channels, H, W, D)\n    (Also works if grid has batch size)\n    Returns sampled features of shape (batch_size, num_points_per_batch, feature_channels)\n    \"\"\"", "\n", "coordinates", "=", "coordinates", ".", "float", "(", ")", "\n", "grid", "=", "grid", ".", "float", "(", ")", "\n", "\n", "batch_size", ",", "n_coords", ",", "n_dims", "=", "coordinates", ".", "shape", "\n", "sampled_features", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "grid", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "\n", "coordinates", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "-", "1", ",", "n_dims", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "True", ")", "\n", "N", ",", "C", ",", "H", ",", "W", ",", "D", "=", "sampled_features", ".", "shape", "\n", "sampled_features", "=", "sampled_features", ".", "permute", "(", "0", ",", "4", ",", "3", ",", "2", ",", "1", ")", ".", "reshape", "(", "N", ",", "H", "*", "W", "*", "D", ",", "C", ")", "\n", "return", "sampled_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.modified_first_sine_init": [[268, 273], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "isinstance", "m.weight.uniform_"], "function", ["None"], ["", "def", "modified_first_sine_init", "(", "m", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "num_input", "=", "3", "\n", "m", ".", "weight", ".", "uniform_", "(", "-", "1", "/", "num_input", ",", "1", "/", "num_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.harmonic_embedding.HarmonicEmbedding.__init__": [[10, 73], ["super().__init__", "harmonic_embedding.HarmonicEmbedding.register_buffer", "torch.linspace", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_harmonic_functions", ":", "int", "=", "6", ",", "\n", "omega0", ":", "float", "=", "1.0", ",", "\n", "logspace", ":", "bool", "=", "True", ",", "\n", "include_input", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Given an input tensor `x` of shape [minibatch, ... , dim],\n        the harmonic embedding layer converts each feature\n        in `x` into a series of harmonic features `embedding`,\n        where for each i in range(dim) the following are present\n        in embedding[...]:\n            ```\n            [\n                sin(x[..., i]),\n                sin(f_1*x[..., i]),\n                sin(f_2*x[..., i]),\n                ...\n                sin(f_N * x[..., i]),\n                cos(x[..., i]),\n                cos(f_1*x[..., i]),\n                cos(f_2*x[..., i]),\n                ...\n                cos(f_N * x[..., i]),\n                x[..., i]     # only present if include_input is True.\n            ]\n            ```\n        where N corresponds to `n_harmonic_functions`, and f_i is a scalar\n        denoting the i-th frequency of the harmonic embedding.\n        The shape of the output is [minibatch, ... , dim * (2 * N + 1)] if\n        include_input is True, otherwise [minibatch, ... , dim * (2 * N)].\n\n        If `logspace==True`, the frequencies `[f_1, ..., f_N]` are\n        powers of 2:\n            `f_1 = 1, ..., f_N = 2**torch.arange(n_harmonic_functions)`\n\n        If `logspace==False`, frequencies are linearly spaced between\n        `1.0` and `2**(n_harmonic_functions-1)`:\n            `f_1, ..., f_N = torch.linspace(\n                1.0, 2**(n_harmonic_functions-1), n_harmonic_functions\n            )`\n\n        Note that `x` is also premultiplied by the base frequency `omega0`\n        before evaluating the harmonic functions.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "logspace", ":", "\n", "            ", "frequencies", "=", "2.0", "**", "torch", ".", "arange", "(", "\n", "n_harmonic_functions", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "frequencies", "=", "torch", ".", "linspace", "(", "\n", "1.0", ",", "\n", "2.0", "**", "(", "n_harmonic_functions", "-", "1", ")", ",", "\n", "n_harmonic_functions", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "\"_frequencies\"", ",", "omega0", "*", "frequencies", ")", "\n", "self", ".", "include_input", "=", "include_input", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.harmonic_embedding.HarmonicEmbedding.forward": [[74, 88], ["torch.cat", "torch.cat", "embed.sin", "embed.cos", "embed.sin", "embed.cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: tensor of shape [..., dim]\n        Returns:\n            embedding: a harmonic embedding of `x` of shape\n                [..., dim * (n_harmonic_functions * 2 + T)] where\n                T is 1 if include_input is True and 0 otherwise.\n        \"\"\"", "\n", "embed", "=", "(", "x", "[", "...", ",", "None", "]", "*", "self", ".", "_frequencies", ")", ".", "view", "(", "*", "x", ".", "shape", "[", ":", "-", "1", "]", ",", "-", "1", ")", "\n", "if", "self", ".", "include_input", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "(", "embed", ".", "sin", "(", ")", ",", "embed", ".", "cos", "(", ")", ",", "x", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "(", "embed", ".", "sin", "(", ")", ",", "embed", ".", "cos", "(", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.ministyleGAN.AdaIN.__init__": [[14, 23], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ministyleGAN.AdaIN.styleModulator.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimIn", ",", "dimOut", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "AdaIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "styleModulator", "=", "nn", ".", "Linear", "(", "dimIn", ",", "2", "*", "dimOut", ")", "\n", "self", ".", "dimOut", "=", "dimOut", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "styleModulator", ".", "weight", "*=", "0.25", "\n", "self", ".", "styleModulator", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.ministyleGAN.AdaIN.forward": [[25, 40], ["x.size", "x.view", "x.view.mean().view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "ministyleGAN.AdaIN.styleModulator", "styleY[].view", "styleY[].view", "x.view.mean"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x: N x C x W x H", "\n", "        ", "batchSize", ",", "nChannel", ",", "width", ",", "height", "=", "x", ".", "size", "(", ")", "\n", "tmpX", "=", "x", ".", "view", "(", "batchSize", ",", "nChannel", ",", "-", "1", ")", "\n", "mux", "=", "tmpX", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "batchSize", ",", "nChannel", ",", "1", ",", "1", ")", "\n", "varx", "=", "torch", ".", "clamp", "(", "(", "tmpX", "*", "tmpX", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "batchSize", ",", "nChannel", ",", "1", ",", "1", ")", "-", "mux", "*", "mux", ",", "min", "=", "0", ")", "\n", "varx", "=", "torch", ".", "rsqrt", "(", "varx", "+", "self", ".", "epsilon", ")", "\n", "x", "=", "(", "x", "-", "mux", ")", "*", "varx", "\n", "\n", "# Adapt style", "\n", "styleY", "=", "self", ".", "styleModulator", "(", "y", ")", "\n", "yA", "=", "styleY", "[", ":", ",", ":", "self", ".", "dimOut", "]", ".", "view", "(", "batchSize", ",", "self", ".", "dimOut", ",", "1", ",", "1", ")", "\n", "yB", "=", "styleY", "[", ":", ",", "self", ".", "dimOut", ":", "]", ".", "view", "(", "batchSize", ",", "self", ".", "dimOut", ",", "1", ",", "1", ")", "\n", "\n", "return", "yA", "*", "x", "+", "yB", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.ministyleGAN.NoiseMultiplier.__init__": [[43, 47], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "ministyleGAN.NoiseMultiplier.module.weight.data.fill_"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NoiseMultiplier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "module", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.ministyleGAN.NoiseMultiplier.forward": [[48, 51], ["ministyleGAN.NoiseMultiplier.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.ministyleGAN.MappingLayer.__init__": [[55, 65], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "ministyleGAN.MappingLayer.FC.append", "custom_layers.EqualizedLinear"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimIn", ",", "dimLatent", ",", "nLayers", ",", "leakyReluLeak", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "MappingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "FC", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "inDim", "=", "dimIn", "\n", "for", "i", "in", "range", "(", "nLayers", ")", ":", "\n", "            ", "self", ".", "FC", ".", "append", "(", "EqualizedLinear", "(", "inDim", ",", "dimLatent", ",", "lrMul", "=", "0.01", ",", "equalized", "=", "True", ",", "initBiasToZero", "=", "True", ")", ")", "\n", "inDim", "=", "dimLatent", "\n", "\n", "", "self", ".", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "leakyReluLeak", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.ministyleGAN.MappingLayer.forward": [[66, 71], ["ministyleGAN.MappingLayer.activation", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "FC", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "layer", "(", "x", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.ministyleGAN.GNet.__init__": [[73, 118], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "custom_layers.NormalizationLayer", "ministyleGAN.AdaIN", "ministyleGAN.NoiseMultiplier", "ministyleGAN.AdaIN", "ministyleGAN.NoiseMultiplier", "custom_layers.EqualizedConv2d", "custom_layers.EqualizedConv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "custom_layers.EqualizedConv2d", "ministyleGAN.GNet.addScale"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.addScale"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dimFeat", ":", "int", "=", "256", ",", "\n", "dimInput", ":", "int", "=", "256", ",", "\n", "dimMapping", ":", "int", "=", "256", ",", "\n", "dimOutput", ":", "int", "=", "3", ",", "\n", "nMappingLayers", ":", "int", "=", "8", ",", "\n", "leakyReluLeak", "=", "0.2", ",", "\n", "generationActivation", "=", "None", ",", "\n", "phiTruncation", "=", "0.5", ",", "\n", "gamma_avg", "=", "0.99", ")", ":", "\n", "\n", "        ", "super", "(", "GNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dimMapping", "=", "dimMapping", "\n", "\n", "self", ".", "scaleLayers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "noiseModulators", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "noramlizationLayer", "=", "NormalizationLayer", "(", ")", "\n", "\n", "self", ".", "adain00", "=", "AdaIN", "(", "dimMapping", ",", "dimInput", ")", "\n", "self", ".", "noiseMod00", "=", "NoiseMultiplier", "(", ")", "\n", "self", ".", "adain01", "=", "AdaIN", "(", "dimMapping", ",", "dimInput", ")", "\n", "self", ".", "noiseMod01", "=", "NoiseMultiplier", "(", ")", "\n", "\n", "\n", "self", ".", "conv0", "=", "EqualizedConv2d", "(", "dimInput", ",", "256", ",", "3", ",", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ",", "padding", "=", "1", ")", "\n", "self", ".", "dimOutput", "=", "dimOutput", "\n", "self", ".", "toRGBLayer", "=", "EqualizedConv2d", "(", "64", ",", "\n", "self", ".", "dimOutput", ",", "\n", "1", ",", "\n", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ")", "\n", "\n", "self", ".", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "leakyReluLeak", ")", "\n", "self", ".", "depthScales", "=", "[", "dimInput", "]", "\n", "self", ".", "depthlist", "=", "[", "128", "]", "\n", "\n", "for", "depth", "in", "self", ".", "depthlist", ":", "\n", "            ", "self", ".", "addScale", "(", "depth", ")", "\n", "\n", "", "self", ".", "toRGBLayer", "=", "EqualizedConv2d", "(", "self", ".", "depthScales", "[", "-", "1", "]", ",", "\n", "self", ".", "dimOutput", ",", "\n", "1", ",", "\n", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.ministyleGAN.GNet.addScale": [[120, 144], ["ministyleGAN.GNet.scaleLayers.append", "ministyleGAN.GNet.scaleLayers[].append", "ministyleGAN.GNet.scaleLayers[].append", "ministyleGAN.GNet.scaleLayers[].append", "ministyleGAN.GNet.scaleLayers[].append", "ministyleGAN.GNet.noiseModulators.append", "ministyleGAN.GNet.noiseModulators[].append", "ministyleGAN.GNet.noiseModulators[].append", "ministyleGAN.GNet.depthScales.append", "torch.ModuleList", "torch.ModuleList", "custom_layers.EqualizedConv2d", "ministyleGAN.AdaIN", "custom_layers.EqualizedConv2d", "ministyleGAN.AdaIN", "torch.ModuleList", "torch.ModuleList", "ministyleGAN.NoiseMultiplier", "ministyleGAN.NoiseMultiplier"], "methods", ["None"], ["", "def", "addScale", "(", "self", ",", "dimNewScale", ")", ":", "\n", "\n", "        ", "lastDim", "=", "self", ".", "depthScales", "[", "-", "1", "]", "\n", "self", ".", "scaleLayers", ".", "append", "(", "nn", ".", "ModuleList", "(", ")", ")", "\n", "self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "EqualizedConv2d", "(", "lastDim", ",", "\n", "dimNewScale", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ")", ")", "\n", "\n", "self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "AdaIN", "(", "self", ".", "dimMapping", ",", "dimNewScale", ")", ")", "\n", "self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "EqualizedConv2d", "(", "dimNewScale", ",", "\n", "dimNewScale", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ")", ")", "\n", "self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "AdaIN", "(", "self", ".", "dimMapping", ",", "dimNewScale", ")", ")", "\n", "\n", "self", ".", "noiseModulators", ".", "append", "(", "nn", ".", "ModuleList", "(", ")", ")", "\n", "self", ".", "noiseModulators", "[", "-", "1", "]", ".", "append", "(", "NoiseMultiplier", "(", ")", ")", "\n", "self", ".", "noiseModulators", "[", "-", "1", "]", ".", "append", "(", "NoiseMultiplier", "(", ")", ")", "\n", "self", ".", "depthScales", ".", "append", "(", "dimNewScale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.ministyleGAN.GNet.forward": [[145, 176], ["mapping.size", "feat.size", "ministyleGAN.GNet.activation", "ministyleGAN.GNet.adain00", "ministyleGAN.GNet.conv0", "ministyleGAN.GNet.activation", "ministyleGAN.GNet.adain01", "enumerate", "ministyleGAN.GNet.toRGBLayer", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ministyleGAN.GNet.noiseMod00", "ministyleGAN.GNet.noiseMod01", "custom_layers.Upscale2d", "ministyleGAN.GNet.activation", "ministyleGAN.GNet.activation", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "ministyleGAN.GNet.size", "ministyleGAN.GNet.size", "ministyleGAN.GNet.size", "ministyleGAN.GNet.size", "ministyleGAN.GNet.size", "ministyleGAN.GNet.size"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.Upscale2d"], ["", "def", "forward", "(", "self", ",", "mapping", ",", "feat", ")", ":", "\n", "        ", "batchSize", "=", "mapping", ".", "size", "(", "0", ")", "\n", "\n", "feat_size", "=", "feat", ".", "size", "(", "2", ")", "\n", "\n", "feature", "=", "feat", "+", "self", ".", "noiseMod00", "(", "torch", ".", "randn", "(", "(", "batchSize", ",", "1", ",", "feat_size", ",", "feat_size", ")", ",", "device", "=", "mapping", ".", "device", ")", ")", "# [batchSize, 256, 16, 16)", "\n", "feature", "=", "self", ".", "activation", "(", "feature", ")", "\n", "feature", "=", "self", ".", "adain00", "(", "feature", ",", "mapping", ")", "\n", "feature", "=", "self", ".", "conv0", "(", "feature", ")", "# [batchSize, 256, 16, 16) -> # [batchSize, 256, 16, 16)", "\n", "feature", "=", "feature", "+", "self", ".", "noiseMod01", "(", "torch", ".", "randn", "(", "(", "batchSize", ",", "1", ",", "feature", ".", "size", "(", "2", ")", ",", "feature", ".", "size", "(", "3", ")", ")", ",", "device", "=", "mapping", ".", "device", ")", ")", "\n", "feature", "=", "self", ".", "activation", "(", "feature", ")", "\n", "feature", "=", "self", ".", "adain01", "(", "feature", ",", "mapping", ")", "\n", "\n", "for", "nLayer", ",", "group", "in", "enumerate", "(", "self", ".", "scaleLayers", ")", ":", "\n", "            ", "noiseMod", "=", "self", ".", "noiseModulators", "[", "nLayer", "]", "# current noise module", "\n", "feature", "=", "Upscale2d", "(", "feature", ")", "# Upsample (nearest neighborhood instead of biniliear)", "\n", "feature", "=", "group", "[", "0", "]", "(", "feature", ")", "+", "noiseMod", "[", "0", "]", "(", "torch", ".", "randn", "(", "(", "batchSize", ",", "1", ",", "\n", "feature", ".", "size", "(", "2", ")", ",", "\n", "feature", ".", "size", "(", "3", ")", ")", ",", "device", "=", "mapping", ".", "device", ")", ")", "# inject noise", "\n", "feature", "=", "self", ".", "activation", "(", "feature", ")", "# activation function", "\n", "feature", "=", "group", "[", "1", "]", "(", "feature", ",", "mapping", ")", "# adaptive instance normalization", "\n", "feature", "=", "group", "[", "2", "]", "(", "feature", ")", "+", "noiseMod", "[", "1", "]", "(", "torch", ".", "randn", "(", "(", "batchSize", ",", "1", ",", "\n", "feature", ".", "size", "(", "2", ")", ",", "\n", "feature", ".", "size", "(", "3", ")", ")", ",", "device", "=", "mapping", ".", "device", ")", ")", "# inject noise", "\n", "feature", "=", "self", ".", "activation", "(", "feature", ")", "# activation function", "\n", "feature", "=", "group", "[", "3", "]", "(", "feature", ",", "mapping", ")", "# adaptive instance normalization", "\n", "\n", "", "rgb", "=", "self", ".", "toRGBLayer", "(", "feature", ")", "\n", "rgb", "=", "torch", ".", "sigmoid", "(", "rgb", ")", "\n", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.ministyleGAN.GNet.getOutputSize": [[177, 181], ["len"], "methods", ["None"], ["", "def", "getOutputSize", "(", "self", ")", ":", "\n", "\n", "        ", "side", "=", "2", "**", "(", "2", "+", "len", "(", "self", ".", "toRGBLayers", ")", ")", "\n", "return", "(", "side", ",", "side", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.ministyleGAN.kaiming_leaky_init": [[7, 11], ["classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["def", "kaiming_leaky_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0.2", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.UniformBoxWarp.__init__": [[23, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sidelength", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "2", "/", "sidelength", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.UniformBoxWarp.forward": [[27, 29], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "coordinates", ")", ":", "\n", "        ", "return", "coordinates", "*", "self", ".", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.CustomMappingNetwork.__init__": [[31, 51], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "nerf.CustomMappingNetwork.network.apply", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "map_hidden_dim", ",", "map_output_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "z_dim", ",", "map_hidden_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "map_hidden_dim", ",", "map_hidden_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "map_hidden_dim", ",", "map_hidden_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "map_hidden_dim", ",", "map_output_dim", ")", "\n", ")", "\n", "\n", "self", ".", "network", ".", "apply", "(", "kaiming_leaky_init", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "network", "[", "-", "1", "]", ".", "weight", "*=", "0.25", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.CustomMappingNetwork.forward": [[52, 59], ["nerf.CustomMappingNetwork.network", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "style", "=", "self", ".", "network", "(", "z", ")", "\n", "style", "=", "F", ".", "leaky_relu", "(", "style", ",", "negative_slope", "=", "0.2", ")", "\n", "style_s", "=", "style", "[", "...", ",", ":", "style", ".", "shape", "[", "-", "1", "]", "//", "2", "]", "\n", "style_b", "=", "style", "[", "...", ",", "style", ".", "shape", "[", "-", "1", "]", "//", "2", ":", "]", "\n", "\n", "return", "style_s", ",", "style_b", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.InstanceNorm.__init__": [[61, 73], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n            @notice: avoid in-place ops.\n            https://discuss.pytorch.org/t/encounter-the-runtimeerror-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation/836/3\n            modify  image -> point cloud\n            for image: [B, C, H, W]\n            for input point coordinate: [B, H * W * num_step, C] -> [B, H * W, num_step, C]\n            perform intance norm \n        \"\"\"", "\n", "super", "(", "InstanceNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_steps", "=", "12", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.InstanceNorm.forward": [[74, 83], ["x.view.view.view", "x.view.view.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "_", ",", "hidden_dim", "=", "x", ".", "shape", "\n", "# print(x.shape)", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_steps", ",", "hidden_dim", ")", "\n", "x", "=", "x", "-", "torch", ".", "mean", "(", "x", ",", "(", "1", ")", ",", "True", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ",", "hidden_dim", ")", "\n", "tmp", "=", "torch", ".", "mul", "(", "x", ",", "x", ")", "# or x ** 2", "\n", "tmp", "=", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "tmp", ",", "(", "1", ")", ",", "True", ")", "+", "self", ".", "epsilon", ")", "\n", "return", "x", "*", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.PixelNorm.__init__": [[85, 95], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n            @notice: avoid in-place ops.\n            https://discuss.pytorch.org/t/encounter-the-runtimeerror-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation/836/3\n            modify  image -> point cloud\n            image: [B, C, H, W]\n            input point coordinate: [B, H * W * num_step, C]\n        \"\"\"", "\n", "super", "(", "PixelNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.PixelNorm.forward": [[96, 101], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "tmp", "=", "torch", ".", "mul", "(", "x", ",", "x", ")", "# or x ** 2", "\n", "tmp1", "=", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "tmp", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "self", ".", "epsilon", ")", "\n", "\n", "return", "x", "*", "tmp1", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.StyleBlock.__init__": [[104, 126], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "nerf.PixelNorm", "nerf.InstanceNorm"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ",", "\n", "hidden_dim", ",", "\n", "with_activation", "=", "True", ",", "\n", "use_pixel_norm", "=", "False", ",", "\n", "use_instance_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", "\n", "# self.layer.apply(_xavier_init)", "\n", "\n", "self", ".", "with_activation", "=", "with_activation", "\n", "\n", "if", "use_pixel_norm", ":", "\n", "            ", "self", ".", "pixel_norm", "=", "PixelNorm", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pixel_norm", "=", "None", "\n", "\n", "", "if", "use_instance_norm", ":", "\n", "            ", "self", ".", "instance_norm", "=", "InstanceNorm", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "instance_norm", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.StyleBlock.forward": [[127, 145], ["nerf.StyleBlock.layer", "style_s.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "style_b.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "nerf.StyleBlock.pixel_norm", "nerf.StyleBlock.instance_norm", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "style_s.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "style_b.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "style_s", ",", "style_b", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer", "(", "x", ")", "\n", "\n", "if", "self", ".", "pixel_norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "pixel_norm", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "instance_norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "instance_norm", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "with_activation", ":", "\n", "            ", "x", "=", "F", ".", "leaky_relu", "(", "x", ",", "negative_slope", "=", "0.1", ")", "\n", "\n", "", "style_s", "=", "style_s", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "style_b", "=", "style_b", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "\n", "x", "=", "style_s", "*", "x", "+", "style_b", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.StyleNeRF.__init__": [[149, 198], ["torch.Module.__init__", "harmonic_embedding.HarmonicEmbedding", "harmonic_embedding.HarmonicEmbedding", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "nerf.StyleNeRF.density_layer.apply", "nerf.StyleBlock", "nerf.StyleBlock", "torch.Linear", "torch.Linear", "torch.Linear", "nerf.CustomMappingNetwork", "nerf.UniformBoxWarp", "nerf.StyleBlock", "nerf.StyleBlock", "nerf.StyleBlock", "nerf.StyleBlock", "nerf.StyleBlock", "nerf.StyleBlock", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "z_dim", ":", "int", "=", "100", ",", "\n", "n_harmonic_functions_xyz", ":", "int", "=", "10", ",", "\n", "n_harmonic_functions_dir", ":", "int", "=", "4", ",", "\n", "hidden_dim_xyz", ":", "int", "=", "256", ",", "\n", "hidden_dim_dir", ":", "int", "=", "256", ",", "\n", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n", "# The harmonic embedding layer converts input 3D coordinates", "\n", "# to a representation that is more suitable for", "\n", "# processing with a deep neural network.", "\n", "self", ".", "harmonic_embedding_xyz", "=", "HarmonicEmbedding", "(", "n_harmonic_functions_xyz", ")", "\n", "self", ".", "harmonic_embedding_dir", "=", "HarmonicEmbedding", "(", "n_harmonic_functions_dir", ")", "\n", "embedding_dim_xyz", "=", "n_harmonic_functions_xyz", "*", "2", "*", "3", "+", "3", "\n", "embedding_dim_dir", "=", "n_harmonic_functions_dir", "*", "2", "*", "3", "+", "3", "\n", "\n", "self", ".", "hidden_dim_xyz", "=", "hidden_dim_xyz", "\n", "self", ".", "hidden_dim_dir", "=", "hidden_dim_dir", "\n", "\n", "self", ".", "mlp_xyz_s0", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StyleBlock", "(", "embedding_dim_xyz", ",", "hidden_dim_xyz", ")", ",", "\n", "StyleBlock", "(", "hidden_dim_xyz", ",", "hidden_dim_xyz", ")", ",", "\n", "StyleBlock", "(", "hidden_dim_xyz", ",", "hidden_dim_xyz", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "mlp_xyz_s1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StyleBlock", "(", "hidden_dim_xyz", "+", "embedding_dim_xyz", ",", "hidden_dim_xyz", ")", ",", "\n", "StyleBlock", "(", "hidden_dim_xyz", ",", "hidden_dim_xyz", ")", ",", "\n", "StyleBlock", "(", "hidden_dim_xyz", ",", "hidden_dim_xyz", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "density_layer", "=", "nn", ".", "Linear", "(", "hidden_dim_xyz", ",", "1", ")", "\n", "self", ".", "density_layer", ".", "apply", "(", "_xavier_init", ")", "\n", "\n", "self", ".", "mlp_xyz_s2", "=", "StyleBlock", "(", "hidden_dim_xyz", ",", "hidden_dim_xyz", ",", "with_activation", "=", "False", ")", "\n", "\n", "self", ".", "mlp_xyz_dir", "=", "StyleBlock", "(", "hidden_dim_xyz", "+", "embedding_dim_dir", ",", "hidden_dim_dir", ")", "\n", "\n", "self", ".", "color_layer", "=", "nn", ".", "Linear", "(", "hidden_dim_dir", ",", "3", ")", "\n", "\n", "self", ".", "mapping_network", "=", "CustomMappingNetwork", "(", "\n", "z_dim", ",", "hidden_dim_xyz", ",", "\n", "(", "len", "(", "self", ".", "mlp_xyz_s0", ")", "+", "len", "(", "self", ".", "mlp_xyz_s1", ")", "+", "1", ")", "*", "2", "*", "hidden_dim_xyz", "+", "hidden_dim_dir", "*", "2", ")", "\n", "\n", "self", ".", "gridwarper", "=", "UniformBoxWarp", "(", "0.24", ")", "\n", "# Don't worry about this, it was added to ensure compatibility with another model. Shouldn't affect performance.", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.StyleNeRF.forward": [[201, 204], ["nerf.StyleNeRF.mapping_network", "nerf.StyleNeRF.forward_with_style"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.StyleNeRF.forward_with_style"], ["", "def", "forward", "(", "self", ",", "input", ",", "z", ",", "ray_directions", ",", "**", "kwargs", ")", ":", "\n", "        ", "style_s", ",", "style_b", "=", "self", ".", "mapping_network", "(", "z", ")", "\n", "return", "self", ".", "forward_with_style", "(", "input", ",", "style_s", ",", "style_b", ",", "ray_directions", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.StyleNeRF.forward_with_style": [[206, 248], ["nerf.StyleNeRF.gridwarper", "nerf.StyleNeRF.contiguous", "nerf.StyleNeRF.harmonic_embedding_xyz", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "nerf.StyleNeRF.density_layer", "nerf.StyleNeRF.mlp_xyz_s2", "nerf.StyleNeRF.harmonic_embedding_dir", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nerf.StyleNeRF.mlp_xyz_dir", "layer", "ray_directions.contiguous", "layer", "layer"], "methods", ["None"], ["", "def", "forward_with_style", "(", "self", ",", "input", ",", "style_s", ",", "style_b", ",", "ray_directions", ",", "**", "kwargs", ")", ":", "\n", "        ", "input", "=", "self", ".", "gridwarper", "(", "input", ")", "\n", "x", "=", "input", ".", "contiguous", "(", ")", "# x / input [B, H * W * num_steps(64 * 64 * 12=49152), 3]   ", "\n", "\n", "# stage 0", "\n", "# add poistion encoding", "\n", "position_encoding", "=", "self", ".", "harmonic_embedding_xyz", "(", "x", ")", "\n", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "mlp_xyz_s0", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "start", "=", "0", "\n", "", "else", ":", "\n", "                ", "start", "+=", "self", ".", "hidden_dim_xyz", "\n", "\n", "", "end", "=", "start", "+", "self", ".", "hidden_dim_xyz", "\n", "\n", "if", "index", "==", "0", ":", "\n", "                ", "x", "=", "layer", "(", "position_encoding", ",", "style_s", "[", "...", ",", "start", ":", "end", "]", ",", "style_b", "[", "...", ",", "start", ":", "end", "]", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer", "(", "x", ",", "style_s", "[", "...", ",", "start", ":", "end", "]", ",", "style_b", "[", "...", ",", "start", ":", "end", "]", ")", "\n", "\n", "# stage 1", "\n", "", "", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "position_encoding", "]", ",", "dim", "=", "2", ")", "# (H, W, N_sample, D+pos_in_dims)", "\n", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "mlp_xyz_s1", ")", ":", "\n", "            ", "start", "+=", "self", ".", "hidden_dim_xyz", "\n", "end", "=", "start", "+", "self", ".", "hidden_dim_xyz", "\n", "x", "=", "layer", "(", "x", ",", "style_s", "[", "...", ",", "start", ":", "end", "]", ",", "style_b", "[", "...", ",", "start", ":", "end", "]", ")", "\n", "\n", "# output density", "\n", "", "sigma", "=", "self", ".", "density_layer", "(", "x", ")", "# (H, W, N_sample, 1)", "\n", "\n", "start", "+=", "self", ".", "hidden_dim_xyz", "\n", "end", "=", "start", "+", "self", ".", "hidden_dim_xyz", "\n", "x", "=", "self", ".", "mlp_xyz_s2", "(", "x", ",", "style_s", "[", "...", ",", "start", ":", "end", "]", ",", "style_b", "[", "...", ",", "start", ":", "end", "]", ")", "\n", "\n", "direction_encoding", "=", "self", ".", "harmonic_embedding_dir", "(", "ray_directions", ".", "contiguous", "(", ")", ")", "# B, 64*64*12, 27", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "direction_encoding", "]", ",", "dim", "=", "-", "1", ")", "# (B, H * W * N_sample, hidden_dim_xyz + dir_enc_dime 256)", "\n", "\n", "start", "+=", "self", ".", "hidden_dim_xyz", "\n", "end", "=", "start", "+", "self", ".", "hidden_dim_xyz", "\n", "x", "=", "self", ".", "mlp_xyz_dir", "(", "x", ",", "style_s", "[", "...", ",", "start", ":", "end", "]", ",", "style_s", "[", "...", ",", "start", ":", "end", "]", ")", "\n", "\n", "return", "x", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf.kaiming_leaky_init": [[9, 13], ["classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["def", "kaiming_leaky_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0.0", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.nerf._xavier_init": [[14, 21], ["classname.find", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "function", ["None"], ["", "", "def", "_xavier_init", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    Performs the Xavier weight initialization of the linear layer `linear`.\n    \"\"\"", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.GlobalAveragePooling.__init__": [[9, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.GlobalAveragePooling.forward": [[11, 13], ["x.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.AdapterBlock.__init__": [[15, 20], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "output_channels", ",", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.AdapterBlock.forward": [[21, 23], ["sgdiscriminators.AdapterBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.StridedResidualConvBlock.__init__": [[32, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sgdiscriminators.StridedResidualConvBlock.network.apply", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "p", "=", "kernel_size", "//", "2", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "p", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "p", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "network", ".", "apply", "(", "kaiming_leaky_init", ")", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.StridedResidualConvBlock.forward": [[45, 52], ["sgdiscriminators.StridedResidualConvBlock.network", "sgdiscriminators.StridedResidualConvBlock.proj", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "y", "=", "self", ".", "network", "(", "input", ")", "\n", "\n", "identity", "=", "self", ".", "proj", "(", "input", ")", "\n", "\n", "y", "=", "(", "y", "+", "identity", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.StridedDiscriminator.__init__": [[54, 84], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "sgdiscriminators.StridedResidualConvBlock", "sgdiscriminators.StridedResidualConvBlock", "sgdiscriminators.StridedResidualConvBlock", "sgdiscriminators.StridedResidualConvBlock", "sgdiscriminators.StridedResidualConvBlock", "sgdiscriminators.StridedResidualConvBlock", "sgdiscriminators.StridedResidualConvBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "# from 4 * 2^0 to 4 * 2^7 4 -> 512", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "StridedResidualConvBlock", "(", "32", ",", "64", ")", ",", "# 6 256x256 -> 128x128", "\n", "StridedResidualConvBlock", "(", "64", ",", "128", ")", ",", "# 5 128x128 -> 64x64", "\n", "StridedResidualConvBlock", "(", "128", ",", "256", ")", ",", "# 4 64x64 -> 32x32", "\n", "StridedResidualConvBlock", "(", "256", ",", "400", ")", ",", "# 3 32x32 -> 16x16", "\n", "StridedResidualConvBlock", "(", "400", ",", "400", ")", ",", "# 2 16x16 -> 8x8", "\n", "StridedResidualConvBlock", "(", "400", ",", "400", ")", ",", "# 1 8x8 -> 4x4", "\n", "StridedResidualConvBlock", "(", "400", ",", "400", ")", ",", "# 7 4x4 -> 2x2", "\n", "]", ")", "\n", "\n", "self", ".", "fromRGB", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "AdapterBlock", "(", "32", ")", ",", "\n", "AdapterBlock", "(", "64", ")", ",", "\n", "AdapterBlock", "(", "128", ")", ",", "\n", "AdapterBlock", "(", "256", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", "\n", "]", ")", "\n", "self", ".", "final_layer", "=", "nn", ".", "Conv2d", "(", "400", ",", "1", ",", "2", ")", "\n", "self", ".", "img_size_to_layer", "=", "{", "2", ":", "7", ",", "4", ":", "6", ",", "8", ":", "5", ",", "16", ":", "4", ",", "32", ":", "3", ",", "64", ":", "2", ",", "128", ":", "1", ",", "256", ":", "0", "}", "\n", "\n", "self", ".", "pose_layer", "=", "nn", ".", "Linear", "(", "2", ",", "400", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.StridedDiscriminator.forward": [[86, 102], ["enumerate", "sgdiscriminators.StridedDiscriminator.final_layer().reshape", "kwargs.get", "layer", "sgdiscriminators.StridedDiscriminator.final_layer", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "alpha", ",", "options", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "self", ".", "img_size_to_layer", "[", "input", ".", "shape", "[", "-", "1", "]", "]", "\n", "x", "=", "self", ".", "fromRGB", "[", "start", "]", "(", "input", ")", "\n", "\n", "if", "kwargs", ".", "get", "(", "'instance_noise'", ",", "0", ")", ">", "0", ":", "\n", "            ", "x", "=", "x", "+", "torch", ".", "randn_like", "(", "x", ")", "*", "kwargs", "[", "'instance_noise'", "]", "\n", "\n", "", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", "[", "start", ":", "]", ")", ":", "\n", "            ", "if", "i", "==", "1", "and", "alpha", "<", "1", ":", "\n", "                ", "x", "=", "alpha", "*", "x", "+", "(", "1", "-", "alpha", ")", "*", "self", ".", "fromRGB", "[", "start", "+", "1", "]", "(", "F", ".", "interpolate", "(", "input", ",", "scale_factor", "=", "0.5", ",", "mode", "=", "'nearest'", ")", ")", "\n", "\n", "", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "final_layer", "(", "x", ")", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "return", "x", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.ResidualCCBlock.__init__": [[235, 247], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sgdiscriminators.ResidualCCBlock.network.apply", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "sgdiscriminators.CoordConv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "sgdiscriminators.CoordConv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "p", "=", "kernel_size", "//", "2", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "\n", "CoordConv", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "p", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "CoordConv", "(", "planes", ",", "planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "p", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "network", ".", "apply", "(", "kaiming_leaky_init", ")", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.ResidualCCBlock.forward": [[248, 255], ["sgdiscriminators.ResidualCCBlock.network", "sgdiscriminators.ResidualCCBlock.proj", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "y", "=", "self", ".", "network", "(", "input", ")", "\n", "\n", "identity", "=", "self", ".", "proj", "(", "input", ")", "\n", "\n", "y", "=", "(", "y", "+", "identity", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.CCSDiscriminator.__init__": [[257, 287], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "# from 4 * 2^0 to 4 * 2^7 4 -> 512", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ResidualCCBlock", "(", "32", ",", "64", ")", ",", "# 6 256x256 -> 128x128", "\n", "ResidualCCBlock", "(", "64", ",", "128", ")", ",", "# 5 128x128 -> 64x64", "\n", "ResidualCCBlock", "(", "128", ",", "256", ")", ",", "# 4 64x64 -> 32x32", "\n", "ResidualCCBlock", "(", "256", ",", "400", ")", ",", "# 3 32x32 -> 16x16", "\n", "ResidualCCBlock", "(", "400", ",", "400", ")", ",", "# 2 16x16 -> 8x8", "\n", "ResidualCCBlock", "(", "400", ",", "400", ")", ",", "# 1 8x8 -> 4x4", "\n", "ResidualCCBlock", "(", "400", ",", "400", ")", ",", "# 7 4x4 -> 2x2", "\n", "]", ")", "\n", "\n", "self", ".", "fromRGB", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "AdapterBlock", "(", "32", ")", ",", "\n", "AdapterBlock", "(", "64", ")", ",", "\n", "AdapterBlock", "(", "128", ")", ",", "\n", "AdapterBlock", "(", "256", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", "\n", "]", ")", "\n", "self", ".", "final_layer", "=", "nn", ".", "Conv2d", "(", "400", ",", "1", ",", "2", ")", "\n", "self", ".", "img_size_to_layer", "=", "{", "2", ":", "7", ",", "4", ":", "6", ",", "8", ":", "5", ",", "16", ":", "4", ",", "32", ":", "3", ",", "64", ":", "2", ",", "128", ":", "1", ",", "256", ":", "0", "}", "\n", "\n", "self", ".", "pose_layer", "=", "nn", ".", "Linear", "(", "2", ",", "400", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.CCSDiscriminator.forward": [[289, 305], ["enumerate", "sgdiscriminators.CCSDiscriminator.final_layer().reshape", "kwargs.get", "layer", "sgdiscriminators.CCSDiscriminator.final_layer", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "alpha", ",", "options", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "self", ".", "img_size_to_layer", "[", "input", ".", "shape", "[", "-", "1", "]", "]", "\n", "x", "=", "self", ".", "fromRGB", "[", "start", "]", "(", "input", ")", "\n", "\n", "if", "kwargs", ".", "get", "(", "'instance_noise'", ",", "0", ")", ">", "0", ":", "\n", "            ", "x", "=", "x", "+", "torch", ".", "randn_like", "(", "x", ")", "*", "kwargs", "[", "'instance_noise'", "]", "\n", "\n", "", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", "[", "start", ":", "]", ")", ":", "\n", "            ", "if", "i", "==", "1", "and", "alpha", "<", "1", ":", "\n", "                ", "x", "=", "alpha", "*", "x", "+", "(", "1", "-", "alpha", ")", "*", "self", ".", "fromRGB", "[", "start", "+", "1", "]", "(", "F", ".", "interpolate", "(", "input", ",", "scale_factor", "=", "0.5", ",", "mode", "=", "'nearest'", ")", ")", "\n", "\n", "", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "final_layer", "(", "x", ")", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "return", "x", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.AddCoords.__init__": [[182, 185], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "self", ",", "with_r", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_r", "=", "with_r", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.AddCoords.forward": [[186, 215], ["input_tensor.size", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "xx_channel.repeat().transpose.repeat().transpose.repeat().transpose", "yy_channel.repeat().transpose.repeat().transpose.repeat().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xx_channel.repeat().transpose.repeat().transpose.float", "yy_channel.repeat().transpose.repeat().transpose.float", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "xx_channel.repeat().transpose.repeat().transpose.repeat", "yy_channel.repeat().transpose.repeat().transpose.repeat", "xx_channel.repeat().transpose.repeat().transpose.type_as", "yy_channel.repeat().transpose.repeat().transpose.type_as", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "xx_channel.repeat().transpose.repeat().transpose.type_as", "yy_channel.repeat().transpose.repeat().transpose.type_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_tensor: shape(batch, channel, x_dim, y_dim)\n        \"\"\"", "\n", "batch_size", ",", "_", ",", "x_dim", ",", "y_dim", "=", "input_tensor", ".", "size", "(", ")", "\n", "\n", "xx_channel", "=", "torch", ".", "arange", "(", "x_dim", ")", ".", "repeat", "(", "1", ",", "y_dim", ",", "1", ")", "\n", "yy_channel", "=", "torch", ".", "arange", "(", "y_dim", ")", ".", "repeat", "(", "1", ",", "x_dim", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "float", "(", ")", "/", "(", "x_dim", "-", "1", ")", "\n", "yy_channel", "=", "yy_channel", ".", "float", "(", ")", "/", "(", "y_dim", "-", "1", ")", "\n", "\n", "xx_channel", "=", "xx_channel", "*", "2", "-", "1", "\n", "yy_channel", "=", "yy_channel", "*", "2", "-", "1", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "yy_channel", "=", "yy_channel", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "\n", "input_tensor", ",", "\n", "xx_channel", ".", "type_as", "(", "input_tensor", ")", ",", "\n", "yy_channel", ".", "type_as", "(", "input_tensor", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "with_r", ":", "\n", "            ", "rr", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "xx_channel", ".", "type_as", "(", "input_tensor", ")", "-", "0.5", ",", "2", ")", "+", "torch", ".", "pow", "(", "yy_channel", ".", "type_as", "(", "input_tensor", ")", "-", "0.5", ",", "2", ")", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "ret", ",", "rr", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.CoordConv.__init__": [[220, 227], ["torch.Module.__init__", "sgdiscriminators.AddCoords", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "with_r", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "addcoords", "=", "AddCoords", "(", "with_r", "=", "with_r", ")", "\n", "in_size", "=", "in_channels", "+", "2", "\n", "if", "with_r", ":", "\n", "            ", "in_size", "+=", "1", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_size", ",", "out_channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.CoordConv.forward": [[228, 232], ["sgdiscriminators.CoordConv.addcoords", "sgdiscriminators.CoordConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ret", "=", "self", ".", "addcoords", "(", "x", ")", "\n", "ret", "=", "self", ".", "conv", "(", "ret", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.CCSEncoderDiscriminator.__init__": [[309, 342], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.ResidualCCBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock", "sgdiscriminators.AdapterBlock"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "# from 4 * 2^0 to 4 * 2^7 4 -> 512", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ResidualCCBlock", "(", "32", ",", "32", ")", ",", "# 8 1024x1024 -> 512x512", "\n", "ResidualCCBlock", "(", "32", ",", "32", ")", ",", "# 7 512x512 -> 256x256", "\n", "ResidualCCBlock", "(", "32", ",", "64", ")", ",", "# 6 256x256 -> 128x128", "\n", "ResidualCCBlock", "(", "64", ",", "128", ")", ",", "# 5 128x128 -> 64x64", "\n", "ResidualCCBlock", "(", "128", ",", "256", ")", ",", "# 4 64x64 -> 32x32", "\n", "ResidualCCBlock", "(", "256", ",", "400", ")", ",", "# 3 32x32 -> 16x16", "\n", "ResidualCCBlock", "(", "400", ",", "400", ")", ",", "# 2 16x16 -> 8x8", "\n", "ResidualCCBlock", "(", "400", ",", "400", ")", ",", "# 1 8x8 -> 4x4", "\n", "ResidualCCBlock", "(", "400", ",", "400", ")", ",", "# 7 4x4 -> 2x2", "\n", "]", ")", "\n", "\n", "self", ".", "fromRGB", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "AdapterBlock", "(", "32", ")", ",", "\n", "AdapterBlock", "(", "32", ")", ",", "\n", "AdapterBlock", "(", "32", ")", ",", "\n", "AdapterBlock", "(", "64", ")", ",", "\n", "AdapterBlock", "(", "128", ")", ",", "\n", "AdapterBlock", "(", "256", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", "\n", "]", ")", "\n", "self", ".", "final_layer", "=", "nn", ".", "Conv2d", "(", "400", ",", "1", "+", "256", "+", "2", ",", "2", ")", "\n", "# self.img_size_to_layer = {2:7, 4:6, 8:5, 16:4, 32:3, 64:2, 128:1, 256:0}", "\n", "self", ".", "img_size_to_layer", "=", "{", "2", ":", "9", ",", "4", ":", "8", ",", "8", ":", "7", ",", "16", ":", "6", ",", "32", ":", "5", ",", "64", ":", "4", ",", "128", ":", "3", ",", "256", ":", "2", ",", "512", ":", "1", ",", "1024", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.CCSEncoderDiscriminator.forward": [[344, 364], ["enumerate", "sgdiscriminators.CCSEncoderDiscriminator.final_layer().reshape", "kwargs.get", "layer", "sgdiscriminators.CCSEncoderDiscriminator.final_layer", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "alpha", ",", "options", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "self", ".", "img_size_to_layer", "[", "input", ".", "shape", "[", "-", "1", "]", "]", "\n", "x", "=", "self", ".", "fromRGB", "[", "start", "]", "(", "input", ")", "\n", "\n", "if", "kwargs", ".", "get", "(", "'instance_noise'", ",", "0", ")", ">", "0", ":", "\n", "            ", "x", "=", "x", "+", "torch", ".", "randn_like", "(", "x", ")", "*", "kwargs", "[", "'instance_noise'", "]", "\n", "\n", "", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", "[", "start", ":", "]", ")", ":", "\n", "            ", "if", "i", "==", "1", "and", "alpha", "<", "1", ":", "\n", "                ", "x", "=", "alpha", "*", "x", "+", "(", "1", "-", "alpha", ")", "*", "self", ".", "fromRGB", "[", "start", "+", "1", "]", "(", "F", ".", "interpolate", "(", "input", ",", "scale_factor", "=", "0.5", ",", "mode", "=", "'nearest'", ")", ")", "\n", "\n", "", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "final_layer", "(", "x", ")", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "prediction", "=", "x", "[", "...", ",", "0", ":", "1", "]", "\n", "latent", "=", "x", "[", "...", ",", "1", ":", "257", "]", "\n", "position", "=", "x", "[", "...", ",", "257", ":", "259", "]", "\n", "\n", "return", "prediction", ",", "latent", ",", "position", "", "", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.sgdiscriminators.kaiming_leaky_init": [[25, 29], ["torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "classname.find", "classname.find"], "function", ["None"], ["", "", "def", "kaiming_leaky_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0.2", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.GlobalAveragePooling.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.GlobalAveragePooling.forward": [[13, 15], ["x.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.AdapterBlock.__init__": [[17, 22], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "output_channels", ",", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.AdapterBlock.forward": [[23, 25], ["discriminators.AdapterBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.AddCoords.__init__": [[38, 41], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "self", ",", "with_r", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_r", "=", "with_r", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.AddCoords.forward": [[42, 71], ["input_tensor.size", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "xx_channel.repeat().transpose.repeat().transpose.repeat().transpose", "yy_channel.repeat().transpose.repeat().transpose.repeat().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xx_channel.repeat().transpose.repeat().transpose.float", "yy_channel.repeat().transpose.repeat().transpose.float", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "xx_channel.repeat().transpose.repeat().transpose.repeat", "yy_channel.repeat().transpose.repeat().transpose.repeat", "xx_channel.repeat().transpose.repeat().transpose.type_as", "yy_channel.repeat().transpose.repeat().transpose.type_as", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "xx_channel.repeat().transpose.repeat().transpose.type_as", "yy_channel.repeat().transpose.repeat().transpose.type_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_tensor: shape(batch, channel, x_dim, y_dim)\n        \"\"\"", "\n", "batch_size", ",", "_", ",", "x_dim", ",", "y_dim", "=", "input_tensor", ".", "size", "(", ")", "\n", "\n", "xx_channel", "=", "torch", ".", "arange", "(", "x_dim", ")", ".", "repeat", "(", "1", ",", "y_dim", ",", "1", ")", "\n", "yy_channel", "=", "torch", ".", "arange", "(", "y_dim", ")", ".", "repeat", "(", "1", ",", "x_dim", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "float", "(", ")", "/", "(", "x_dim", "-", "1", ")", "\n", "yy_channel", "=", "yy_channel", ".", "float", "(", ")", "/", "(", "y_dim", "-", "1", ")", "\n", "\n", "xx_channel", "=", "xx_channel", "*", "2", "-", "1", "\n", "yy_channel", "=", "yy_channel", "*", "2", "-", "1", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "yy_channel", "=", "yy_channel", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "\n", "input_tensor", ",", "\n", "xx_channel", ".", "type_as", "(", "input_tensor", ")", ",", "\n", "yy_channel", ".", "type_as", "(", "input_tensor", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "with_r", ":", "\n", "            ", "rr", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "xx_channel", ".", "type_as", "(", "input_tensor", ")", "-", "0.5", ",", "2", ")", "+", "torch", ".", "pow", "(", "yy_channel", ".", "type_as", "(", "input_tensor", ")", "-", "0.5", ",", "2", ")", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "ret", ",", "rr", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.CoordConv.__init__": [[76, 83], ["torch.Module.__init__", "discriminators.AddCoords", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "with_r", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "addcoords", "=", "AddCoords", "(", "with_r", "=", "with_r", ")", "\n", "in_size", "=", "in_channels", "+", "2", "\n", "if", "with_r", ":", "\n", "            ", "in_size", "+=", "1", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_size", ",", "out_channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.CoordConv.forward": [[84, 88], ["discriminators.CoordConv.addcoords", "discriminators.CoordConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ret", "=", "self", ".", "addcoords", "(", "x", ")", "\n", "ret", "=", "self", ".", "conv", "(", "ret", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.ResidualCoordConvBlock.__init__": [[90, 103], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "discriminators.ResidualCoordConvBlock.network.apply", "discriminators.CoordConv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "discriminators.CoordConv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "downsample", "=", "False", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "p", "=", "kernel_size", "//", "2", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "\n", "CoordConv", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "p", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "CoordConv", "(", "planes", ",", "planes", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "p", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "network", ".", "apply", "(", "kaiming_leaky_init", ")", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ")", "if", "inplanes", "!=", "planes", "else", "None", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.ResidualCoordConvBlock.forward": [[104, 113], ["discriminators.ResidualCoordConvBlock.network", "torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "discriminators.ResidualCoordConvBlock.proj", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "identity", ")", ":", "\n", "        ", "y", "=", "self", ".", "network", "(", "identity", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "y", "=", "nn", ".", "functional", ".", "avg_pool2d", "(", "y", ",", "2", ")", "\n", "if", "self", ".", "downsample", ":", "identity", "=", "nn", ".", "functional", ".", "avg_pool2d", "(", "identity", ",", "2", ")", "\n", "identity", "=", "identity", "if", "self", ".", "proj", "is", "None", "else", "self", ".", "proj", "(", "identity", ")", "\n", "\n", "y", "=", "(", "y", "+", "identity", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.ProgressiveDiscriminator.__init__": [[118, 148], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ResidualCoordConvBlock", "(", "16", ",", "32", ",", "downsample", "=", "True", ")", ",", "# 512x512 -> 256x256", "\n", "ResidualCoordConvBlock", "(", "32", ",", "64", ",", "downsample", "=", "True", ")", ",", "# 256x256 -> 128x128", "\n", "ResidualCoordConvBlock", "(", "64", ",", "128", ",", "downsample", "=", "True", ")", ",", "# 128x128 -> 64x64", "\n", "ResidualCoordConvBlock", "(", "128", ",", "256", ",", "downsample", "=", "True", ")", ",", "# 64x64   -> 32x32", "\n", "ResidualCoordConvBlock", "(", "256", ",", "400", ",", "downsample", "=", "True", ")", ",", "# 32x32   -> 16x16", "\n", "ResidualCoordConvBlock", "(", "400", ",", "400", ",", "downsample", "=", "True", ")", ",", "# 16x16   -> 8x8", "\n", "ResidualCoordConvBlock", "(", "400", ",", "400", ",", "downsample", "=", "True", ")", ",", "# 8x8     -> 4x4", "\n", "ResidualCoordConvBlock", "(", "400", ",", "400", ",", "downsample", "=", "True", ")", ",", "# 4x4     -> 2x2", "\n", "]", ")", "\n", "\n", "self", ".", "fromRGB", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "AdapterBlock", "(", "16", ")", ",", "\n", "AdapterBlock", "(", "32", ")", ",", "\n", "AdapterBlock", "(", "64", ")", ",", "\n", "AdapterBlock", "(", "128", ")", ",", "\n", "AdapterBlock", "(", "256", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", "\n", "]", ")", "\n", "self", ".", "final_layer", "=", "nn", ".", "Conv2d", "(", "400", ",", "1", ",", "2", ")", "\n", "self", ".", "img_size_to_layer", "=", "{", "2", ":", "8", ",", "4", ":", "7", ",", "8", ":", "6", ",", "16", ":", "5", ",", "32", ":", "4", ",", "64", ":", "3", ",", "128", ":", "2", ",", "256", ":", "1", ",", "512", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.ProgressiveDiscriminator.forward": [[150, 162], ["enumerate", "discriminators.ProgressiveDiscriminator.final_layer().reshape", "layer", "discriminators.ProgressiveDiscriminator.final_layer", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "alpha", ",", "instance_noise", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "self", ".", "img_size_to_layer", "[", "input", ".", "shape", "[", "-", "1", "]", "]", "\n", "\n", "x", "=", "self", ".", "fromRGB", "[", "start", "]", "(", "input", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", "[", "start", ":", "]", ")", ":", "\n", "            ", "if", "i", "==", "1", ":", "\n", "                ", "x", "=", "alpha", "*", "x", "+", "(", "1", "-", "alpha", ")", "*", "self", ".", "fromRGB", "[", "start", "+", "1", "]", "(", "F", ".", "interpolate", "(", "input", ",", "scale_factor", "=", "0.5", ",", "mode", "=", "'nearest'", ")", ")", "\n", "", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "final_layer", "(", "x", ")", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.ProgressiveEncoderDiscriminator.__init__": [[169, 199], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.ResidualCoordConvBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock", "discriminators.AdapterBlock"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ResidualCoordConvBlock", "(", "16", ",", "32", ",", "downsample", "=", "True", ")", ",", "# 512x512 -> 256x256", "\n", "ResidualCoordConvBlock", "(", "32", ",", "64", ",", "downsample", "=", "True", ")", ",", "# 256x256 -> 128x128", "\n", "ResidualCoordConvBlock", "(", "64", ",", "128", ",", "downsample", "=", "True", ")", ",", "# 128x128 -> 64x64", "\n", "ResidualCoordConvBlock", "(", "128", ",", "256", ",", "downsample", "=", "True", ")", ",", "# 64x64   -> 32x32", "\n", "ResidualCoordConvBlock", "(", "256", ",", "400", ",", "downsample", "=", "True", ")", ",", "# 32x32   -> 16x16", "\n", "ResidualCoordConvBlock", "(", "400", ",", "400", ",", "downsample", "=", "True", ")", ",", "# 16x16   -> 8x8", "\n", "ResidualCoordConvBlock", "(", "400", ",", "400", ",", "downsample", "=", "True", ")", ",", "# 8x8     -> 4x4", "\n", "ResidualCoordConvBlock", "(", "400", ",", "400", ",", "downsample", "=", "True", ")", ",", "# 4x4     -> 2x2", "\n", "]", ")", "\n", "\n", "self", ".", "fromRGB", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "AdapterBlock", "(", "16", ")", ",", "\n", "AdapterBlock", "(", "32", ")", ",", "\n", "AdapterBlock", "(", "64", ")", ",", "\n", "AdapterBlock", "(", "128", ")", ",", "\n", "AdapterBlock", "(", "256", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", ",", "\n", "AdapterBlock", "(", "400", ")", "\n", "]", ")", "\n", "self", ".", "final_layer", "=", "nn", ".", "Conv2d", "(", "400", ",", "1", "+", "256", "+", "2", ",", "2", ")", "\n", "self", ".", "img_size_to_layer", "=", "{", "2", ":", "8", ",", "4", ":", "7", ",", "8", ":", "6", ",", "16", ":", "5", ",", "32", ":", "4", ",", "64", ":", "3", ",", "128", ":", "2", ",", "256", ":", "1", ",", "512", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.ProgressiveEncoderDiscriminator.forward": [[201, 219], ["enumerate", "discriminators.ProgressiveEncoderDiscriminator.final_layer().reshape", "layer", "discriminators.ProgressiveEncoderDiscriminator.final_layer", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "alpha", ",", "instance_noise", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "instance_noise", ">", "0", ":", "\n", "            ", "input", "=", "input", "+", "torch", ".", "randn_like", "(", "input", ")", "*", "instance_noise", "\n", "\n", "", "start", "=", "self", ".", "img_size_to_layer", "[", "input", ".", "shape", "[", "-", "1", "]", "]", "\n", "x", "=", "self", ".", "fromRGB", "[", "start", "]", "(", "input", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", "[", "start", ":", "]", ")", ":", "\n", "            ", "if", "i", "==", "1", ":", "\n", "                ", "x", "=", "alpha", "*", "x", "+", "(", "1", "-", "alpha", ")", "*", "self", ".", "fromRGB", "[", "start", "+", "1", "]", "(", "F", ".", "interpolate", "(", "input", ",", "scale_factor", "=", "0.5", ",", "mode", "=", "'nearest'", ")", ")", "\n", "", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "final_layer", "(", "x", ")", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "prediction", "=", "x", "[", "...", ",", "0", ":", "1", "]", "\n", "latent", "=", "x", "[", "...", ",", "1", ":", "257", "]", "\n", "position", "=", "x", "[", "...", ",", "257", ":", "259", "]", "\n", "\n", "return", "prediction", ",", "latent", ",", "position", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.discriminators.discriminators.kaiming_leaky_init": [[27, 31], ["classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["", "", "def", "kaiming_leaky_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0.2", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.depth_integration": [[17, 42], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "weights.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.randn", "torch.randn", "torch.exp", "torch.exp", "torch.ones_like", "torch.ones_like", "torch.cumprod", "torch.cumprod", "torch.exp", "torch.exp", "torch.softplus", "torch.relu"], "function", ["None"], ["def", "depth_integration", "(", "sigmas", ",", "z_vals", ",", "device", ",", "noise_std", "=", "0.5", ",", "last_back", "=", "False", ",", "white_back", "=", "False", ",", "clamp_mode", "=", "None", ",", "fill_mode", "=", "None", ")", ":", "\n", "    ", "\"\"\"Performs NeRF volumetric rendering.\"\"\"", "\n", "deltas", "=", "z_vals", "[", ":", ",", ":", ",", "1", ":", "]", "-", "z_vals", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "delta_inf", "=", "1e10", "*", "torch", ".", "ones_like", "(", "deltas", "[", ":", ",", ":", ",", ":", "1", "]", ")", "\n", "deltas", "=", "torch", ".", "cat", "(", "[", "deltas", ",", "delta_inf", "]", ",", "-", "2", ")", "\n", "\n", "noise", "=", "torch", ".", "randn", "(", "sigmas", ".", "shape", ",", "device", "=", "device", ")", "*", "noise_std", "\n", "\n", "if", "clamp_mode", "==", "'softplus'", ":", "\n", "        ", "alphas", "=", "1", "-", "torch", ".", "exp", "(", "-", "deltas", "*", "(", "F", ".", "softplus", "(", "sigmas", "+", "noise", ")", ")", ")", "\n", "", "elif", "clamp_mode", "==", "'relu'", ":", "\n", "        ", "alphas", "=", "1", "-", "torch", ".", "exp", "(", "-", "deltas", "*", "(", "F", ".", "relu", "(", "sigmas", "+", "noise", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "\"Need to choose clamp mode\"", "\n", "\n", "", "alphas_shifted", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "alphas", "[", ":", ",", ":", ",", ":", "1", "]", ")", ",", "1", "-", "alphas", "+", "1e-10", "]", ",", "-", "2", ")", "\n", "weights", "=", "alphas", "*", "torch", ".", "cumprod", "(", "alphas_shifted", ",", "-", "2", ")", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "weights_sum", "=", "weights", ".", "sum", "(", "2", ")", "\n", "\n", "if", "last_back", ":", "\n", "        ", "weights", "[", ":", ",", ":", ",", "-", "1", "]", "+=", "(", "1", "-", "weights_sum", ")", "\n", "\n", "", "depth_final", "=", "torch", ".", "sum", "(", "weights", "*", "z_vals", ",", "-", "2", ")", "\n", "\n", "return", "depth_final", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.rgb_feat_integration": [[43, 83], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "weights.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.randn", "torch.randn", "torch.tensor", "torch.tensor", "torch.exp", "torch.exp", "torch.ones_like", "torch.ones_like", "torch.cumprod", "torch.cumprod", "weights.sum.expand_as", "torch.exp", "torch.exp", "torch.softplus", "weights.sum.squeeze", "torch.relu"], "function", ["None"], ["", "def", "rgb_feat_integration", "(", "rgb_sigma", ",", "feats", ",", "z_vals", ",", "device", ",", "noise_std", "=", "0.5", ",", "last_back", "=", "False", ",", "white_back", "=", "False", ",", "clamp_mode", "=", "None", ",", "fill_mode", "=", "None", ")", ":", "\n", "    ", "\"\"\"Performs NeRF volumetric rendering.\"\"\"", "\n", "\n", "rgbs", "=", "rgb_sigma", "[", "...", ",", ":", "3", "]", "\n", "sigmas", "=", "rgb_sigma", "[", "...", ",", "3", ":", "]", "\n", "\n", "deltas", "=", "z_vals", "[", ":", ",", ":", ",", "1", ":", "]", "-", "z_vals", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "delta_inf", "=", "1e10", "*", "torch", ".", "ones_like", "(", "deltas", "[", ":", ",", ":", ",", ":", "1", "]", ")", "\n", "deltas", "=", "torch", ".", "cat", "(", "[", "deltas", ",", "delta_inf", "]", ",", "-", "2", ")", "\n", "\n", "noise", "=", "torch", ".", "randn", "(", "sigmas", ".", "shape", ",", "device", "=", "device", ")", "*", "noise_std", "\n", "\n", "if", "clamp_mode", "==", "'softplus'", ":", "\n", "        ", "alphas", "=", "1", "-", "torch", ".", "exp", "(", "-", "deltas", "*", "(", "F", ".", "softplus", "(", "sigmas", "+", "noise", ")", ")", ")", "\n", "", "elif", "clamp_mode", "==", "'relu'", ":", "\n", "        ", "alphas", "=", "1", "-", "torch", ".", "exp", "(", "-", "deltas", "*", "(", "F", ".", "relu", "(", "sigmas", "+", "noise", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "\"Need to choose clamp mode\"", "\n", "\n", "", "alphas_shifted", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "alphas", "[", ":", ",", ":", ",", ":", "1", "]", ")", ",", "1", "-", "alphas", "+", "1e-10", "]", ",", "-", "2", ")", "\n", "weights", "=", "alphas", "*", "torch", ".", "cumprod", "(", "alphas_shifted", ",", "-", "2", ")", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "weights_sum", "=", "weights", ".", "sum", "(", "2", ")", "\n", "\n", "if", "last_back", ":", "\n", "        ", "weights", "[", ":", ",", ":", ",", "-", "1", "]", "+=", "(", "1", "-", "weights_sum", ")", "\n", "\n", "", "rgb_final", "=", "torch", ".", "sum", "(", "weights", "*", "rgbs", ",", "-", "2", ")", "\n", "feat_final", "=", "torch", ".", "sum", "(", "weights", "*", "feats", ",", "-", "2", ")", "\n", "depth_final", "=", "torch", ".", "sum", "(", "weights", "*", "z_vals", ",", "-", "2", ")", "\n", "# feats_final = torch.sum(weights * z_vals, -2)", "\n", "\n", "if", "white_back", ":", "\n", "        ", "rgb_final", "=", "rgb_final", "+", "1", "-", "weights_sum", "\n", "\n", "", "if", "fill_mode", "==", "'debug'", ":", "\n", "        ", "rgb_final", "[", "weights_sum", ".", "squeeze", "(", "-", "1", ")", "<", "0.9", "]", "=", "torch", ".", "tensor", "(", "[", "1.", ",", "0", ",", "0", "]", ",", "device", "=", "rgb_final", ".", "device", ")", "\n", "", "elif", "fill_mode", "==", "'weight'", ":", "\n", "        ", "rgb_final", "=", "weights_sum", ".", "expand_as", "(", "rgb_final", ")", "\n", "\n", "", "return", "rgb_final", ",", "feat_final", ",", "depth_final", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.rgb_integration": [[84, 119], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "weights.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.randn", "torch.randn", "torch.tensor", "torch.tensor", "torch.exp", "torch.exp", "torch.ones_like", "torch.ones_like", "torch.cumprod", "torch.cumprod", "weights.sum.expand_as", "torch.exp", "torch.exp", "torch.softplus", "weights.sum.squeeze", "torch.relu"], "function", ["None"], ["", "def", "rgb_integration", "(", "rgbs", ",", "sigmas", ",", "z_vals", ",", "device", ",", "noise_std", "=", "0.5", ",", "last_back", "=", "False", ",", "white_back", "=", "False", ",", "clamp_mode", "=", "None", ",", "fill_mode", "=", "None", ")", ":", "\n", "    ", "\"\"\"Performs NeRF volumetric rendering.\"\"\"", "\n", "\n", "deltas", "=", "z_vals", "[", ":", ",", ":", ",", "1", ":", "]", "-", "z_vals", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "delta_inf", "=", "1e10", "*", "torch", ".", "ones_like", "(", "deltas", "[", ":", ",", ":", ",", ":", "1", "]", ")", "\n", "deltas", "=", "torch", ".", "cat", "(", "[", "deltas", ",", "delta_inf", "]", ",", "-", "2", ")", "\n", "\n", "noise", "=", "torch", ".", "randn", "(", "sigmas", ".", "shape", ",", "device", "=", "device", ")", "*", "noise_std", "\n", "\n", "if", "clamp_mode", "==", "'softplus'", ":", "\n", "        ", "alphas", "=", "1", "-", "torch", ".", "exp", "(", "-", "deltas", "*", "(", "F", ".", "softplus", "(", "sigmas", "+", "noise", ")", ")", ")", "\n", "", "elif", "clamp_mode", "==", "'relu'", ":", "\n", "        ", "alphas", "=", "1", "-", "torch", ".", "exp", "(", "-", "deltas", "*", "(", "F", ".", "relu", "(", "sigmas", "+", "noise", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "\"Need to choose clamp mode\"", "\n", "\n", "", "alphas_shifted", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "alphas", "[", ":", ",", ":", ",", ":", "1", "]", ")", ",", "1", "-", "alphas", "+", "1e-10", "]", ",", "-", "2", ")", "\n", "weights", "=", "alphas", "*", "torch", ".", "cumprod", "(", "alphas_shifted", ",", "-", "2", ")", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "weights_sum", "=", "weights", ".", "sum", "(", "2", ")", "\n", "\n", "if", "last_back", ":", "\n", "        ", "weights", "[", ":", ",", ":", ",", "-", "1", "]", "+=", "(", "1", "-", "weights_sum", ")", "\n", "\n", "", "rgb_final", "=", "torch", ".", "sum", "(", "weights", "*", "rgbs", ",", "-", "2", ")", "\n", "depth_final", "=", "torch", ".", "sum", "(", "weights", "*", "z_vals", ",", "-", "2", ")", "\n", "\n", "if", "white_back", ":", "\n", "        ", "rgb_final", "=", "rgb_final", "+", "1", "-", "weights_sum", "\n", "\n", "", "if", "fill_mode", "==", "'debug'", ":", "\n", "        ", "rgb_final", "[", "weights_sum", ".", "squeeze", "(", "-", "1", ")", "<", "0.9", "]", "=", "torch", ".", "tensor", "(", "[", "1.", ",", "0", ",", "0", "]", ",", "device", "=", "rgb_final", ".", "device", ")", "\n", "", "elif", "fill_mode", "==", "'weight'", ":", "\n", "        ", "rgb_final", "=", "weights_sum", ".", "expand_as", "(", "rgb_final", ")", "\n", "\n", "", "return", "rgb_final", ",", "depth_final", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.feature_fancy_integration": [[120, 158], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "weights.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.randn", "torch.randn", "torch.tensor", "torch.tensor", "torch.exp", "torch.exp", "torch.ones_like", "torch.ones_like", "torch.cumprod", "torch.cumprod", "weights.sum.expand_as", "torch.exp", "torch.exp", "torch.softplus", "weights.sum.squeeze", "torch.relu"], "function", ["None"], ["", "def", "feature_fancy_integration", "(", "rgbs", ",", "sigmas", ",", "z_vals", ",", "device", ",", "noise_std", "=", "0.5", ",", "last_back", "=", "False", ",", "white_back", "=", "False", ",", "clamp_mode", "=", "None", ",", "fill_mode", "=", "None", ")", ":", "\n", "    ", "\"\"\"Performs NeRF volumetric rendering.\"\"\"", "\n", "\n", "# rgbs = rgb_sigma[..., :128]", "\n", "# sigmas = rgb_sigma[..., 128:]", "\n", "\n", "deltas", "=", "z_vals", "[", ":", ",", ":", ",", "1", ":", "]", "-", "z_vals", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "delta_inf", "=", "1e10", "*", "torch", ".", "ones_like", "(", "deltas", "[", ":", ",", ":", ",", ":", "1", "]", ")", "\n", "deltas", "=", "torch", ".", "cat", "(", "[", "deltas", ",", "delta_inf", "]", ",", "-", "2", ")", "\n", "\n", "noise", "=", "torch", ".", "randn", "(", "sigmas", ".", "shape", ",", "device", "=", "device", ")", "*", "noise_std", "\n", "\n", "if", "clamp_mode", "==", "'softplus'", ":", "\n", "        ", "alphas", "=", "1", "-", "torch", ".", "exp", "(", "-", "deltas", "*", "(", "F", ".", "softplus", "(", "sigmas", "+", "noise", ")", ")", ")", "\n", "", "elif", "clamp_mode", "==", "'relu'", ":", "\n", "        ", "alphas", "=", "1", "-", "torch", ".", "exp", "(", "-", "deltas", "*", "(", "F", ".", "relu", "(", "sigmas", "+", "noise", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "\"Need to choose clamp mode\"", "\n", "\n", "", "alphas_shifted", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "alphas", "[", ":", ",", ":", ",", ":", "1", "]", ")", ",", "1", "-", "alphas", "+", "1e-10", "]", ",", "-", "2", ")", "\n", "weights", "=", "alphas", "*", "torch", ".", "cumprod", "(", "alphas_shifted", ",", "-", "2", ")", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "weights_sum", "=", "weights", ".", "sum", "(", "2", ")", "\n", "\n", "if", "last_back", ":", "\n", "        ", "weights", "[", ":", ",", ":", ",", "-", "1", "]", "+=", "(", "1", "-", "weights_sum", ")", "\n", "\n", "", "rgb_final", "=", "torch", ".", "sum", "(", "weights", "*", "rgbs", ",", "-", "2", ")", "\n", "depth_final", "=", "torch", ".", "sum", "(", "weights", "*", "z_vals", ",", "-", "2", ")", "\n", "\n", "if", "white_back", ":", "\n", "        ", "rgb_final", "=", "rgb_final", "+", "1", "-", "weights_sum", "\n", "\n", "", "if", "fill_mode", "==", "'debug'", ":", "\n", "        ", "rgb_final", "[", "weights_sum", ".", "squeeze", "(", "-", "1", ")", "<", "0.9", "]", "=", "torch", ".", "tensor", "(", "[", "1.", ",", "0", ",", "0", "]", ",", "device", "=", "rgb_final", ".", "device", ")", "\n", "", "elif", "fill_mode", "==", "'weight'", ":", "\n", "        ", "rgb_final", "=", "weights_sum", ".", "expand_as", "(", "rgb_final", ")", "\n", "\n", "", "return", "rgb_final", ",", "depth_final", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.fancy_integration": [[159, 197], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "weights.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.randn", "torch.randn", "torch.tensor", "torch.tensor", "torch.exp", "torch.exp", "torch.ones_like", "torch.ones_like", "torch.cumprod", "torch.cumprod", "weights.sum.expand_as", "torch.exp", "torch.exp", "torch.softplus", "weights.sum.squeeze", "torch.relu"], "function", ["None"], ["", "def", "fancy_integration", "(", "rgb_sigma", ",", "z_vals", ",", "device", ",", "noise_std", "=", "0.5", ",", "last_back", "=", "False", ",", "white_back", "=", "False", ",", "clamp_mode", "=", "None", ",", "fill_mode", "=", "None", ")", ":", "\n", "    ", "\"\"\"Performs NeRF volumetric rendering.\"\"\"", "\n", "\n", "rgbs", "=", "rgb_sigma", "[", "...", ",", ":", "3", "]", "\n", "sigmas", "=", "rgb_sigma", "[", "...", ",", "3", ":", "]", "\n", "\n", "deltas", "=", "z_vals", "[", ":", ",", ":", ",", "1", ":", "]", "-", "z_vals", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "delta_inf", "=", "1e10", "*", "torch", ".", "ones_like", "(", "deltas", "[", ":", ",", ":", ",", ":", "1", "]", ")", "\n", "deltas", "=", "torch", ".", "cat", "(", "[", "deltas", ",", "delta_inf", "]", ",", "-", "2", ")", "\n", "\n", "noise", "=", "torch", ".", "randn", "(", "sigmas", ".", "shape", ",", "device", "=", "device", ")", "*", "noise_std", "\n", "\n", "if", "clamp_mode", "==", "'softplus'", ":", "\n", "        ", "alphas", "=", "1", "-", "torch", ".", "exp", "(", "-", "deltas", "*", "(", "F", ".", "softplus", "(", "sigmas", "+", "noise", ")", ")", ")", "\n", "", "elif", "clamp_mode", "==", "'relu'", ":", "\n", "        ", "alphas", "=", "1", "-", "torch", ".", "exp", "(", "-", "deltas", "*", "(", "F", ".", "relu", "(", "sigmas", "+", "noise", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "\"Need to choose clamp mode\"", "\n", "\n", "", "alphas_shifted", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "alphas", "[", ":", ",", ":", ",", ":", "1", "]", ")", ",", "1", "-", "alphas", "+", "1e-10", "]", ",", "-", "2", ")", "\n", "weights", "=", "alphas", "*", "torch", ".", "cumprod", "(", "alphas_shifted", ",", "-", "2", ")", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "weights_sum", "=", "weights", ".", "sum", "(", "2", ")", "\n", "\n", "if", "last_back", ":", "\n", "        ", "weights", "[", ":", ",", ":", ",", "-", "1", "]", "+=", "(", "1", "-", "weights_sum", ")", "\n", "\n", "", "rgb_final", "=", "torch", ".", "sum", "(", "weights", "*", "rgbs", ",", "-", "2", ")", "\n", "depth_final", "=", "torch", ".", "sum", "(", "weights", "*", "z_vals", ",", "-", "2", ")", "\n", "\n", "if", "white_back", ":", "\n", "        ", "rgb_final", "=", "rgb_final", "+", "1", "-", "weights_sum", "\n", "\n", "", "if", "fill_mode", "==", "'debug'", ":", "\n", "        ", "rgb_final", "[", "weights_sum", ".", "squeeze", "(", "-", "1", ")", "<", "0.9", "]", "=", "torch", ".", "tensor", "(", "[", "1.", ",", "0", ",", "0", "]", ",", "device", "=", "rgb_final", ".", "device", ")", "\n", "", "elif", "fill_mode", "==", "'weight'", ":", "\n", "        ", "rgb_final", "=", "weights_sum", ".", "expand_as", "(", "rgb_final", ")", "\n", "\n", "", "return", "rgb_final", ",", "depth_final", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.get_initial_rays_trig": [[199, 222], ["torch.meshgrid", "torch.meshgrid", "x.T.flatten.T.flatten", "y.T.flatten.T.flatten", "math_utils_torch.normalize_vecs", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().to", "torch.stack().to", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "numpy.tan", "torch.stack", "torch.stack", "torch.stack().to.unsqueeze().repeat", "torch.ones_like", "torch.ones_like", "torch.linspace().reshape", "torch.linspace().reshape", "torch.stack", "torch.stack", "torch.stack().to.unsqueeze", "torch.linspace", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.math_utils_torch.normalize_vecs"], ["", "def", "get_initial_rays_trig", "(", "n", ",", "num_steps", ",", "device", ",", "fov", ",", "resolution", ",", "ray_start", ",", "ray_end", ")", ":", "\n", "    ", "\"\"\"Returns sample points, z_vals, and ray directions in camera space.\"\"\"", "\n", "\n", "W", ",", "H", "=", "resolution", "\n", "# Create full screen NDC (-1 to +1) coords [x, y, 0, 1].", "\n", "# Y is flipped to follow image memory layouts.", "\n", "x", ",", "y", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "W", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "1", ",", "-", "1", ",", "H", ",", "device", "=", "device", ")", ")", "\n", "x", "=", "x", ".", "T", ".", "flatten", "(", ")", "\n", "y", "=", "y", ".", "T", ".", "flatten", "(", ")", "\n", "z", "=", "-", "torch", ".", "ones_like", "(", "x", ",", "device", "=", "device", ")", "/", "np", ".", "tan", "(", "(", "2", "*", "math", ".", "pi", "*", "fov", "/", "360", ")", "/", "2", ")", "\n", "\n", "rays_d_cam", "=", "normalize_vecs", "(", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "-", "1", ")", ")", "\n", "\n", "\n", "z_vals", "=", "torch", ".", "linspace", "(", "ray_start", ",", "ray_end", ",", "num_steps", ",", "device", "=", "device", ")", ".", "reshape", "(", "1", ",", "num_steps", ",", "1", ")", ".", "repeat", "(", "W", "*", "H", ",", "1", ",", "1", ")", "\n", "points", "=", "rays_d_cam", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_steps", ",", "1", ")", "*", "z_vals", "\n", "\n", "points", "=", "torch", ".", "stack", "(", "n", "*", "[", "points", "]", ")", "\n", "z_vals", "=", "torch", ".", "stack", "(", "n", "*", "[", "z_vals", "]", ")", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "n", "*", "[", "rays_d_cam", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "return", "points", ",", "z_vals", ",", "rays_d_cam", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.perturb_points": [[223, 230], ["torch.rand", "torch.rand", "ray_directions.unsqueeze"], "function", ["None"], ["", "def", "perturb_points", "(", "points", ",", "z_vals", ",", "ray_directions", ",", "device", ")", ":", "\n", "    ", "distance_between_points", "=", "z_vals", "[", ":", ",", ":", ",", "1", ":", "2", ",", ":", "]", "-", "z_vals", "[", ":", ",", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "offset", "=", "(", "torch", ".", "rand", "(", "z_vals", ".", "shape", ",", "device", "=", "device", ")", "-", "0.5", ")", "*", "distance_between_points", "\n", "z_vals", "=", "z_vals", "+", "offset", "\n", "\n", "points", "=", "points", "+", "offset", "*", "ray_directions", ".", "unsqueeze", "(", "2", ")", "\n", "return", "points", ",", "z_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.transform_sampled_points": [[232, 259], ["volumetric_rendering.perturb_points", "volumetric_rendering.sample_camera_positions", "math_utils_torch.normalize_vecs", "volumetric_rendering.create_cam2world_matrix", "torch.ones", "torch.ones", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.zeros", "torch.zeros", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.ones.reshape().permute", "ray_directions.reshape().permute", "torch.bmm", "torch.bmm", "torch.ones.reshape", "ray_directions.reshape"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.perturb_points", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.sample_camera_positions", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.math_utils_torch.normalize_vecs", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.create_cam2world_matrix"], ["", "def", "transform_sampled_points", "(", "points", ",", "z_vals", ",", "ray_directions", ",", "device", ",", "h_stddev", "=", "1", ",", "v_stddev", "=", "1", ",", "h_mean", "=", "math", ".", "pi", "*", "0.5", ",", "v_mean", "=", "math", ".", "pi", "*", "0.5", ",", "mode", "=", "'normal'", ")", ":", "\n", "    ", "\"\"\"Samples a camera position and maps points in camera space to world space.\"\"\"", "\n", "\n", "n", ",", "num_rays", ",", "num_steps", ",", "channels", "=", "points", ".", "shape", "\n", "\n", "points", ",", "z_vals", "=", "perturb_points", "(", "points", ",", "z_vals", ",", "ray_directions", ",", "device", ")", "\n", "\n", "\n", "camera_origin", ",", "pitch", ",", "yaw", "=", "sample_camera_positions", "(", "n", "=", "points", ".", "shape", "[", "0", "]", ",", "r", "=", "1", ",", "horizontal_stddev", "=", "h_stddev", ",", "vertical_stddev", "=", "v_stddev", ",", "horizontal_mean", "=", "h_mean", ",", "vertical_mean", "=", "v_mean", ",", "device", "=", "device", ",", "mode", "=", "mode", ")", "\n", "forward_vector", "=", "normalize_vecs", "(", "-", "camera_origin", ")", "\n", "\n", "cam2world_matrix", "=", "create_cam2world_matrix", "(", "forward_vector", ",", "camera_origin", ",", "device", "=", "device", ")", "\n", "\n", "points_homogeneous", "=", "torch", ".", "ones", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "points", ".", "shape", "[", "1", "]", ",", "points", ".", "shape", "[", "2", "]", ",", "points", ".", "shape", "[", "3", "]", "+", "1", ")", ",", "device", "=", "device", ")", "\n", "points_homogeneous", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "=", "points", "\n", "\n", "# should be n x 4 x 4 , n x r^2 x num_steps x 4", "\n", "transformed_points", "=", "torch", ".", "bmm", "(", "cam2world_matrix", ",", "points_homogeneous", ".", "reshape", "(", "n", ",", "-", "1", ",", "4", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "num_rays", ",", "num_steps", ",", "4", ")", "\n", "\n", "\n", "transformed_ray_directions", "=", "torch", ".", "bmm", "(", "cam2world_matrix", "[", "...", ",", ":", "3", ",", ":", "3", "]", ",", "ray_directions", ".", "reshape", "(", "n", ",", "-", "1", ",", "3", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "num_rays", ",", "3", ")", "\n", "\n", "homogeneous_origins", "=", "torch", ".", "zeros", "(", "(", "n", ",", "4", ",", "num_rays", ")", ",", "device", "=", "device", ")", "\n", "homogeneous_origins", "[", ":", ",", "3", ",", ":", "]", "=", "1", "\n", "transformed_ray_origins", "=", "torch", ".", "bmm", "(", "cam2world_matrix", ",", "homogeneous_origins", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "num_rays", ",", "4", ")", "[", "...", ",", ":", "3", "]", "\n", "\n", "return", "transformed_points", "[", "...", ",", ":", "3", "]", ",", "z_vals", ",", "transformed_ray_directions", ",", "transformed_ray_origins", ",", "pitch", ",", "yaw", ",", "cam2world_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.truncated_normal_": [[260, 268], ["tensor.new_empty().normal_", "tensor.data.copy_", "tensor.data.mul_().add_", "valid.max", "tensor.new_empty().normal_.gather().squeeze", "tensor.new_empty", "tensor.data.mul_", "tensor.new_empty().normal_.gather"], "function", ["None"], ["", "def", "truncated_normal_", "(", "tensor", ",", "mean", "=", "0", ",", "std", "=", "1", ")", ":", "\n", "    ", "size", "=", "tensor", ".", "shape", "\n", "tmp", "=", "tensor", ".", "new_empty", "(", "size", "+", "(", "4", ",", ")", ")", ".", "normal_", "(", ")", "\n", "valid", "=", "(", "tmp", "<", "2", ")", "&", "(", "tmp", ">", "-", "2", ")", "\n", "ind", "=", "valid", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "tensor", ".", "data", ".", "copy_", "(", "tmp", ".", "gather", "(", "-", "1", ",", "ind", ")", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "tensor", ".", "data", ".", "mul_", "(", "std", ")", ".", "add_", "(", "mean", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.sample_camera_positions": [[269, 316], ["torch.clamp", "torch.clamp", "torch.zeros", "torch.zeros", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "random.random", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.clamp", "torch.clamp", "torch.arccos", "torch.arccos", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "volumetric_rendering.truncated_normal_", "volumetric_rendering.truncated_normal_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.truncated_normal_", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.truncated_normal_"], ["", "def", "sample_camera_positions", "(", "device", ",", "n", "=", "1", ",", "r", "=", "1", ",", "horizontal_stddev", "=", "1", ",", "vertical_stddev", "=", "1", ",", "horizontal_mean", "=", "math", ".", "pi", "*", "0.5", ",", "vertical_mean", "=", "math", ".", "pi", "*", "0.5", ",", "mode", "=", "'normal'", ")", ":", "\n", "    ", "\"\"\"\n    Samples n random locations along a sphere of radius r. Uses the specified distribution.\n    Theta is yaw in radians (-pi, pi)\n    Phi is pitch in radians (0, pi)\n    \"\"\"", "\n", "\n", "if", "mode", "==", "'uniform'", ":", "\n", "        ", "theta", "=", "(", "torch", ".", "rand", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", "-", "0.5", ")", "*", "2", "*", "horizontal_stddev", "+", "horizontal_mean", "\n", "phi", "=", "(", "torch", ".", "rand", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", "-", "0.5", ")", "*", "2", "*", "vertical_stddev", "+", "vertical_mean", "\n", "\n", "", "elif", "mode", "==", "'normal'", "or", "mode", "==", "'gaussian'", ":", "\n", "        ", "theta", "=", "torch", ".", "randn", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", "*", "horizontal_stddev", "+", "horizontal_mean", "\n", "phi", "=", "torch", ".", "randn", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", "*", "vertical_stddev", "+", "vertical_mean", "\n", "\n", "", "elif", "mode", "==", "'hybrid'", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "theta", "=", "(", "torch", ".", "rand", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", "-", "0.5", ")", "*", "2", "*", "horizontal_stddev", "*", "2", "+", "horizontal_mean", "\n", "phi", "=", "(", "torch", ".", "rand", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", "-", "0.5", ")", "*", "2", "*", "vertical_stddev", "*", "2", "+", "vertical_mean", "\n", "", "else", ":", "\n", "            ", "theta", "=", "torch", ".", "randn", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", "*", "horizontal_stddev", "+", "horizontal_mean", "\n", "phi", "=", "torch", ".", "randn", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", "*", "vertical_stddev", "+", "vertical_mean", "\n", "\n", "", "", "elif", "mode", "==", "'truncated_gaussian'", ":", "\n", "        ", "theta", "=", "truncated_normal_", "(", "torch", ".", "zeros", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", ")", "*", "horizontal_stddev", "+", "horizontal_mean", "\n", "phi", "=", "truncated_normal_", "(", "torch", ".", "zeros", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", ")", "*", "vertical_stddev", "+", "vertical_mean", "\n", "\n", "", "elif", "mode", "==", "'spherical_uniform'", ":", "\n", "        ", "theta", "=", "(", "torch", ".", "rand", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", "-", ".5", ")", "*", "2", "*", "horizontal_stddev", "+", "horizontal_mean", "\n", "v_stddev", ",", "v_mean", "=", "vertical_stddev", "/", "math", ".", "pi", ",", "vertical_mean", "/", "math", ".", "pi", "\n", "v", "=", "(", "(", "torch", ".", "rand", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ")", "-", ".5", ")", "*", "2", "*", "v_stddev", "+", "v_mean", ")", "\n", "v", "=", "torch", ".", "clamp", "(", "v", ",", "1e-5", ",", "1", "-", "1e-5", ")", "\n", "phi", "=", "torch", ".", "arccos", "(", "1", "-", "2", "*", "v", ")", "\n", "\n", "", "else", ":", "\n", "# Just use the mean.", "\n", "        ", "theta", "=", "torch", ".", "ones", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float", ")", "*", "horizontal_mean", "\n", "phi", "=", "torch", ".", "ones", "(", "(", "n", ",", "1", ")", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float", ")", "*", "vertical_mean", "\n", "\n", "", "phi", "=", "torch", ".", "clamp", "(", "phi", ",", "1e-5", ",", "math", ".", "pi", "-", "1e-5", ")", "\n", "\n", "output_points", "=", "torch", ".", "zeros", "(", "(", "n", ",", "3", ")", ",", "device", "=", "device", ")", "\n", "output_points", "[", ":", ",", "0", ":", "1", "]", "=", "r", "*", "torch", ".", "sin", "(", "phi", ")", "*", "torch", ".", "cos", "(", "theta", ")", "\n", "output_points", "[", ":", ",", "2", ":", "3", "]", "=", "r", "*", "torch", ".", "sin", "(", "phi", ")", "*", "torch", ".", "sin", "(", "theta", ")", "\n", "output_points", "[", ":", ",", "1", ":", "2", "]", "=", "r", "*", "torch", ".", "cos", "(", "phi", ")", "\n", "\n", "return", "output_points", ",", "phi", ",", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.create_cam2world_matrix": [[317, 336], ["math_utils_torch.normalize_vecs", "torch.tensor().expand_as", "torch.tensor().expand_as", "math_utils_torch.normalize_vecs", "math_utils_torch.normalize_vecs", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.stack", "torch.stack", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.tensor", "torch.tensor", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.math_utils_torch.normalize_vecs", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.math_utils_torch.normalize_vecs", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.math_utils_torch.normalize_vecs"], ["", "def", "create_cam2world_matrix", "(", "forward_vector", ",", "origin", ",", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"Takes in the direction the camera is pointing and the camera origin and returns a cam2world matrix.\"\"\"", "\n", "\n", "forward_vector", "=", "normalize_vecs", "(", "forward_vector", ")", "\n", "up_vector", "=", "torch", ".", "tensor", "(", "[", "0", ",", "1", ",", "0", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", ".", "expand_as", "(", "forward_vector", ")", "\n", "\n", "left_vector", "=", "normalize_vecs", "(", "torch", ".", "cross", "(", "up_vector", ",", "forward_vector", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "up_vector", "=", "normalize_vecs", "(", "torch", ".", "cross", "(", "forward_vector", ",", "left_vector", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "rotation_matrix", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "forward_vector", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "rotation_matrix", "[", ":", ",", ":", "3", ",", ":", "3", "]", "=", "torch", ".", "stack", "(", "(", "-", "left_vector", ",", "up_vector", ",", "-", "forward_vector", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "translation_matrix", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "forward_vector", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "translation_matrix", "[", ":", ",", ":", "3", ",", "3", "]", "=", "origin", "\n", "\n", "cam2world", "=", "translation_matrix", "@", "rotation_matrix", "\n", "\n", "return", "cam2world", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.create_world2cam_matrix": [[339, 344], ["volumetric_rendering.create_cam2world_matrix", "torch.inverse", "torch.inverse"], "function", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.create_cam2world_matrix"], ["", "def", "create_world2cam_matrix", "(", "forward_vector", ",", "origin", ")", ":", "\n", "    ", "\"\"\"Takes in the direction the camera is pointing and the camera origin and returns a world2cam matrix.\"\"\"", "\n", "cam2world", "=", "create_cam2world_matrix", "(", "forward_vector", ",", "origin", ",", "device", "=", "device", ")", "\n", "world2cam", "=", "torch", ".", "inverse", "(", "cam2world", ")", "\n", "return", "world2cam", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.sample_pdf": [[346, 388], ["torch.cumsum", "torch.cumsum", "torch.cat", "torch.cat", "torch.rand.contiguous", "torch.searchsorted", "torch.searchsorted", "torch.clamp_min", "torch.clamp_min", "torch.clamp_max", "torch.clamp_max", "torch.stack().view", "torch.stack().view", "torch.gather", "torch.gather", "cdf_g.view.view", "torch.gather().view", "torch.gather().view", "torch.sum", "torch.sum", "torch.linspace", "torch.linspace", "torch.rand.expand", "torch.rand", "torch.rand", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "torch.gather", "torch.gather"], "function", ["None"], ["", "def", "sample_pdf", "(", "bins", ",", "weights", ",", "N_importance", ",", "det", "=", "False", ",", "eps", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"\n    Sample @N_importance samples from @bins with distribution defined by @weights.\n    Inputs:\n        bins: (N_rays, N_samples_+1) where N_samples_ is \"the number of coarse samples per ray - 2\"\n        weights: (N_rays, N_samples_)\n        N_importance: the number of samples to draw from the distribution\n        det: deterministic or not\n        eps: a small number to prevent division by zero\n    Outputs:\n        samples: the sampled samples\n    Source: https://github.com/kwea123/nerf_pl/blob/master/models/rendering.py\n    \"\"\"", "\n", "N_rays", ",", "N_samples_", "=", "weights", ".", "shape", "\n", "weights", "=", "weights", "+", "eps", "# prevent division by zero (don't do inplace op!)", "\n", "pdf", "=", "weights", "/", "torch", ".", "sum", "(", "weights", ",", "-", "1", ",", "keepdim", "=", "True", ")", "# (N_rays, N_samples_)", "\n", "cdf", "=", "torch", ".", "cumsum", "(", "pdf", ",", "-", "1", ")", "# (N_rays, N_samples), cumulative distribution function", "\n", "cdf", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "cdf", "[", ":", ",", ":", "1", "]", ")", ",", "cdf", "]", ",", "-", "1", ")", "# (N_rays, N_samples_+1)", "\n", "# padded to 0~1 inclusive", "\n", "\n", "if", "det", ":", "\n", "        ", "u", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "N_importance", ",", "device", "=", "bins", ".", "device", ")", "\n", "u", "=", "u", ".", "expand", "(", "N_rays", ",", "N_importance", ")", "\n", "", "else", ":", "\n", "        ", "u", "=", "torch", ".", "rand", "(", "N_rays", ",", "N_importance", ",", "device", "=", "bins", ".", "device", ")", "\n", "", "u", "=", "u", ".", "contiguous", "(", ")", "\n", "\n", "inds", "=", "torch", ".", "searchsorted", "(", "cdf", ",", "u", ")", "\n", "below", "=", "torch", ".", "clamp_min", "(", "inds", "-", "1", ",", "0", ")", "\n", "above", "=", "torch", ".", "clamp_max", "(", "inds", ",", "N_samples_", ")", "\n", "\n", "inds_sampled", "=", "torch", ".", "stack", "(", "[", "below", ",", "above", "]", ",", "-", "1", ")", ".", "view", "(", "N_rays", ",", "2", "*", "N_importance", ")", "\n", "cdf_g", "=", "torch", ".", "gather", "(", "cdf", ",", "1", ",", "inds_sampled", ")", "\n", "cdf_g", "=", "cdf_g", ".", "view", "(", "N_rays", ",", "N_importance", ",", "2", ")", "\n", "bins_g", "=", "torch", ".", "gather", "(", "bins", ",", "1", ",", "inds_sampled", ")", ".", "view", "(", "N_rays", ",", "N_importance", ",", "2", ")", "\n", "\n", "denom", "=", "cdf_g", "[", "...", ",", "1", "]", "-", "cdf_g", "[", "...", ",", "0", "]", "\n", "denom", "[", "denom", "<", "eps", "]", "=", "1", "# denom equals 0 means a bin has weight 0, in which case it will not be sampled", "\n", "# anyway, therefore any value for it is fine (set to 1 here)", "\n", "\n", "samples", "=", "bins_g", "[", "...", ",", "0", "]", "+", "(", "u", "-", "cdf_g", "[", "...", ",", "0", "]", ")", "/", "denom", "*", "(", "bins_g", "[", "...", ",", "1", "]", "-", "bins_g", "[", "...", ",", "0", "]", ")", "\n", "return", "samples", "", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.__init__": [[13, 21], ["torch.Module.__init__", "siren", "refinegan.GNet"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "siren", ",", "z_dim", ",", "stereo_auxiliary", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "siren", "=", "siren", "(", "output_dim", "=", "4", ",", "z_dim", "=", "self", ".", "z_dim", ",", "input_dim", "=", "3", ",", "device", "=", "None", ")", "\n", "self", ".", "stereo_auxiliary", "=", "stereo_auxiliary", "\n", "self", ".", "decoder", "=", "GNet", "(", "dimInput", "=", "256", ",", "dimHidden", "=", "256", ",", "dimMapping", "=", "256", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.set_device": [[22, 26], ["generators.ImplicitGenerator3d.generate_avg_frequencies"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.generate_avg_frequencies"], ["", "def", "set_device", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "siren", ".", "device", "=", "device", "\n", "self", ".", "generate_avg_frequencies", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.forward": [[27, 129], ["generators.ImplicitGenerator3d.siren", "primary_output.reshape.reshape.reshape", "primary_rgb_feat.reshape.reshape.reshape", "volumetric_rendering.rgb_feat_integration", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.reshape", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute().contiguous", "primary_initial_rgb.permute().contiguous.permute().contiguous.reshape", "primary_initial_rgb.permute().contiguous.permute().contiguous.permute().contiguous", "generators.ImplicitGenerator3d.decoder", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "x.T.flatten.T.flatten.T.flatten", "y.T.flatten.T.flatten.T.flatten", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "volumetric_rendering.transform_sampled_points", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "primary_ray_directions_expanded.reshape.reshape.expand", "primary_ray_directions_expanded.reshape.reshape.reshape", "primary_points.reshape.reshape.reshape", "generators.ImplicitGenerator3d.siren", "auxiliary_output.reshape.reshape.reshape", "auxiliary_rgb_feat.reshape.reshape.reshape", "volumetric_rendering.rgb_feat_integration", "auxiliary_rgb_feat_maps.permute().contiguous.permute().contiguous.reshape", "auxiliary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute().contiguous", "auxiliary_initial_rgb.permute().contiguous.permute().contiguous.reshape", "auxiliary_initial_rgb.permute().contiguous.permute().contiguous.permute().contiguous", "rays_d_cam.reshape.reshape.reshape", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "np.tan", "rays_d_cam.reshape.reshape.unsqueeze().repeat", "volumetric_rendering.transform_sampled_points", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "auxiliary_ray_directions_expanded.reshape.reshape.expand", "auxiliary_ray_directions_expanded.reshape.reshape.reshape", "auxiliary_points.reshape.reshape.reshape", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "kwargs.get", "kwargs.get", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute", "primary_initial_rgb.permute().contiguous.permute().contiguous.permute", "primary_depth.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.norm.reshape", "torch.norm.reshape", "torch.norm.reshape", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "kwargs.get", "kwargs.get", "auxiliary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute", "auxiliary_initial_rgb.permute().contiguous.permute().contiguous.permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "rays_d_cam.reshape.reshape.unsqueeze", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.ones.reshape().permute", "torch.ones.reshape().permute", "torch.ones.reshape().permute", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "auxiliary_cam2world_matrix.float", "torch.ones.reshape", "torch.ones.reshape", "torch.ones.reshape"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.rgb_feat_integration", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.transform_sampled_points", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.rgb_feat_integration", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.transform_sampled_points"], ["", "def", "forward", "(", "self", ",", "z", ",", "alpha", ",", "max_mixup_ratio", ",", "stereo_auxiliary", ",", "img_size", ",", "output_size", ",", "fov", ",", "ray_start", ",", "ray_end", ",", "num_steps", ",", "h_stddev", ",", "v_stddev", ",", "h_mean", ",", "v_mean", ",", "hierarchical_sample", ",", "sample_dist", "=", "None", ",", "lock_view_dependence", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Generates images from a noise vector, rendering parameters, and camera distribution.\n        Uses the hierarchical sampling scheme described in NeRF.\n        \"\"\"", "\n", "\n", "batch_size", "=", "z", ".", "shape", "[", "0", "]", "\n", "\n", "# Generate initial camera rays and sample points.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# points_cam, z_vals, rays_d_cam = get_initial_rays_trig(batch_size, num_steps, resolution=(img_size, img_size), device=self.device, fov=fov, ray_start=ray_start, ray_end=ray_end) # batch_size, pixels, num_steps, 1", "\n", "\n", "# get_initial_rays_trig", "\n", "            ", "x", ",", "y", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "img_size", ",", "device", "=", "self", ".", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "1", ",", "-", "1", ",", "img_size", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "x", "=", "x", ".", "T", ".", "flatten", "(", ")", "\n", "y", "=", "y", ".", "T", ".", "flatten", "(", ")", "\n", "z_coord", "=", "-", "torch", ".", "ones_like", "(", "x", ",", "device", "=", "self", ".", "device", ")", "/", "np", ".", "tan", "(", "(", "2", "*", "math", ".", "pi", "*", "fov", "/", "360", ")", "/", "2", ")", "\n", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z_coord", "]", ",", "-", "1", ")", "\n", "rays_d_norm", "=", "torch", ".", "norm", "(", "rays_d_cam", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "rays_d_cam", "=", "rays_d_cam", "/", "rays_d_norm", "# (height*width, 3)", "\n", "\n", "z_vals", "=", "torch", ".", "linspace", "(", "ray_start", ",", "ray_end", ",", "num_steps", ",", "device", "=", "self", ".", "device", ")", ".", "reshape", "(", "1", ",", "num_steps", ",", "1", ")", ".", "repeat", "(", "img_size", "*", "img_size", ",", "1", ",", "1", ")", "\n", "points_cam", "=", "rays_d_cam", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_steps", ",", "1", ")", "*", "z_vals", "\n", "\n", "points_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "points_cam", "]", ")", "\n", "z_vals", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "z_vals", "]", ")", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "rays_d_cam", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "primary_points", ",", "primary_z_vals", ",", "primary_ray_directions", ",", "primary_ray_origins", ",", "primary_pitch", ",", "primary_yaw", ",", "primary_cam2world_matrix", "=", "transform_sampled_points", "(", "points_cam", ",", "z_vals", ",", "rays_d_cam", ",", "h_stddev", "=", "h_stddev", ",", "v_stddev", "=", "v_stddev", ",", "h_mean", "=", "h_mean", ",", "v_mean", "=", "v_mean", ",", "device", "=", "self", ".", "device", ",", "mode", "=", "sample_dist", ")", "\n", "\n", "primary_ray_directions_expanded", "=", "torch", ".", "unsqueeze", "(", "primary_ray_directions", ",", "-", "2", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_steps", ",", "-", "1", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "primary_points", "=", "primary_points", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "\n", "if", "stereo_auxiliary", ":", "\n", "                ", "auxiliary_points", ",", "auxiliary_z_vals", ",", "auxiliary_ray_directions", ",", "auxiliary_ray_origins", ",", "auxiliary_pitch", ",", "auxiliary_yaw", ",", "auxiliary_cam2world_matrix", "=", "transform_sampled_points", "(", "points_cam", ",", "z_vals", ",", "rays_d_cam", ",", "h_stddev", "=", "h_stddev", ",", "v_stddev", "=", "v_stddev", ",", "h_mean", "=", "h_mean", ",", "v_mean", "=", "v_mean", ",", "device", "=", "self", ".", "device", ",", "mode", "=", "sample_dist", ")", "\n", "\n", "auxiliary_ray_directions_expanded", "=", "torch", ".", "unsqueeze", "(", "auxiliary_ray_directions", ",", "-", "2", ")", "\n", "auxiliary_ray_directions_expanded", "=", "auxiliary_ray_directions_expanded", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_steps", ",", "-", "1", ")", "\n", "auxiliary_ray_directions_expanded", "=", "auxiliary_ray_directions_expanded", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "auxiliary_points", "=", "auxiliary_points", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "\n", "# seem useless", "\n", "", "if", "lock_view_dependence", ":", "\n", "                ", "transformed_ray_directions_expanded", "=", "torch", ".", "zeros_like", "(", "transformed_ray_directions_expanded", ")", "\n", "transformed_ray_directions_expanded", "[", "...", ",", "-", "1", "]", "=", "-", "1", "\n", "\n", "# Model prediction on course points", "\n", "", "", "rgb_feat_dim", "=", "256", "\n", "\n", "primary_output", ",", "primary_rgb_feat", ",", "mapping_codes", "=", "self", ".", "siren", "(", "primary_points", ",", "z", ",", "ray_directions", "=", "primary_ray_directions_expanded", ")", "\n", "primary_output", "=", "primary_output", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "4", ")", "\n", "primary_rgb_feat", "=", "primary_rgb_feat", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "rgb_feat_dim", ")", "\n", "\n", "# Create images with NeRF", "\n", "primary_initial_rgb", ",", "primary_rgb_feat_maps", ",", "primary_depth", ",", "_", "=", "rgb_feat_integration", "(", "primary_output", ",", "primary_rgb_feat", ",", "primary_z_vals", ",", "device", "=", "self", ".", "device", ",", "white_back", "=", "kwargs", ".", "get", "(", "'white_back'", ",", "False", ")", ",", "last_back", "=", "kwargs", ".", "get", "(", "'last_back'", ",", "False", ")", ",", "clamp_mode", "=", "kwargs", "[", "'clamp_mode'", "]", ",", "noise_std", "=", "kwargs", "[", "'nerf_noise'", "]", ")", "\n", "\n", "primary_rgb_feat_maps", "=", "primary_rgb_feat_maps", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "rgb_feat_dim", ")", "\n", "primary_rgb_feat_maps", "=", "primary_rgb_feat_maps", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "primary_initial_rgb", "=", "primary_initial_rgb", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "3", ")", "\n", "primary_initial_rgb", "=", "primary_initial_rgb", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "stereo_auxiliary", ":", "\n", "            ", "auxiliary_output", ",", "auxiliary_rgb_feat", ",", "_", "=", "self", ".", "siren", "(", "auxiliary_points", ",", "z", ",", "ray_directions", "=", "auxiliary_ray_directions_expanded", ")", "\n", "auxiliary_output", "=", "auxiliary_output", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "4", ")", "\n", "auxiliary_rgb_feat", "=", "auxiliary_rgb_feat", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "rgb_feat_dim", ")", "\n", "\n", "# Create images with NeRF", "\n", "auxiliary_initial_rgb", ",", "auxiliary_rgb_feat_maps", ",", "auxiliary_depth", ",", "_", "=", "rgb_feat_integration", "(", "auxiliary_output", ",", "auxiliary_rgb_feat", ",", "auxiliary_z_vals", ",", "device", "=", "self", ".", "device", ",", "white_back", "=", "kwargs", ".", "get", "(", "'white_back'", ",", "False", ")", ",", "last_back", "=", "kwargs", ".", "get", "(", "'last_back'", ",", "False", ")", ",", "clamp_mode", "=", "kwargs", "[", "'clamp_mode'", "]", ",", "noise_std", "=", "kwargs", "[", "'nerf_noise'", "]", ")", "\n", "\n", "auxiliary_rgb_feat_maps", "=", "auxiliary_rgb_feat_maps", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "rgb_feat_dim", ")", "\n", "auxiliary_rgb_feat_maps", "=", "auxiliary_rgb_feat_maps", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "auxiliary_initial_rgb", "=", "auxiliary_initial_rgb", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "3", ")", "\n", "auxiliary_initial_rgb", "=", "auxiliary_initial_rgb", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# back project to the 3d space", "\n", "rays_d_cam", "=", "rays_d_cam", ".", "reshape", "(", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "3", ")", ")", "\n", "primary_points_3d", "=", "rays_d_cam", "*", "primary_depth", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "1", ")", "\n", "\n", "primary_points_homogeneous", "=", "torch", ".", "ones", "(", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "4", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "primary_points_homogeneous", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "=", "primary_points_3d", "\n", "\n", "primary_points_project_to_auxiliary", "=", "torch", ".", "bmm", "(", "torch", ".", "inverse", "(", "auxiliary_cam2world_matrix", ".", "float", "(", ")", ")", "@", "primary_cam2world_matrix", ",", "primary_points_homogeneous", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "4", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "4", ")", "\n", "primary_grid_in_auxiliary", "=", "torch", ".", "cat", "(", "(", "-", "primary_points_project_to_auxiliary", "[", "...", ",", "0", ":", "1", "]", "/", "primary_points_project_to_auxiliary", "[", "...", ",", "2", ":", "3", "]", ",", "primary_points_project_to_auxiliary", "[", "...", ",", "1", ":", "2", "]", "/", "primary_points_project_to_auxiliary", "[", "...", ",", "2", ":", "3", "]", ")", ",", "-", "1", ")", "*", "rays_d_norm", ".", "reshape", "(", "1", ",", "img_size", ",", "img_size", ",", "1", ")", "\n", "\n", "warp_rgb_feat_maps", "=", "F", ".", "grid_sample", "(", "auxiliary_rgb_feat_maps", ",", "primary_grid_in_auxiliary", ",", "align_corners", "=", "True", ")", "\n", "warp_rgb", "=", "F", ".", "grid_sample", "(", "auxiliary_initial_rgb", ",", "primary_grid_in_auxiliary", ",", "align_corners", "=", "True", ")", "\n", "\n", "auxiliary_mixup_ratio", "=", "torch", ".", "rand", "(", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ",", "device", "=", "self", ".", "device", ")", "*", "max_mixup_ratio", "\n", "rgb_feat_maps", "=", "(", "1", "-", "auxiliary_mixup_ratio", ")", "*", "primary_rgb_feat_maps", "+", "auxiliary_mixup_ratio", "*", "warp_rgb_feat_maps", "\n", "", "else", ":", "\n", "            ", "rgb_feat_maps", "=", "primary_rgb_feat_maps", "\n", "warp_rgb", "=", "None", "\n", "\n", "", "pixels", "=", "self", ".", "decoder", "(", "mapping_codes", ",", "rgb_feat_maps", ",", "img_size", ",", "output_size", ",", "alpha", ")", "\n", "\n", "return", "pixels", ",", "torch", ".", "cat", "(", "[", "primary_pitch", ",", "primary_yaw", "]", ",", "-", "1", ")", ",", "primary_initial_rgb", ",", "warp_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.generate_avg_frequencies": [[131, 144], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "frequencies.mean", "phase_shifts.mean", "mapping_codes.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "generators.ImplicitGenerator3d.siren.mapping_network"], "methods", ["None"], ["", "def", "generate_avg_frequencies", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculates average frequencies and phase shifts\"\"\"", "\n", "\n", "z", "=", "torch", ".", "randn", "(", "(", "10000", ",", "self", ".", "z_dim", ")", ",", "device", "=", "self", ".", "siren", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "frequencies", ",", "phase_shifts", ",", "mapping_codes", "=", "self", ".", "siren", ".", "mapping_network", "(", "z", ")", "\n", "\n", "", "self", ".", "avg_frequencies", "=", "frequencies", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "avg_phase_shifts", "=", "phase_shifts", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "avg_mapping_codes", "=", "mapping_codes", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "self", ".", "avg_frequencies", ",", "self", ".", "avg_phase_shifts", ",", "self", ".", "avg_mapping_codes", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.staged_forward": [[146, 246], ["generators.ImplicitGenerator3d.generate_avg_frequencies", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "generators.ImplicitGenerator3d.siren.mapping_network", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "x.T.flatten.T.flatten.T.flatten", "y.T.flatten.T.flatten.T.flatten", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "volumetric_rendering.transform_sampled_points", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "primary_ray_directions_expanded.reshape.reshape.expand", "primary_ray_directions_expanded.reshape.reshape.reshape", "primary_points.reshape.reshape.reshape", "generators.ImplicitGenerator3d.siren.forward_with_frequencies_phase_shifts", "primary_output.reshape.reshape.reshape", "primary_rgb_feat.reshape.reshape.reshape", "volumetric_rendering.rgb_feat_integration", "primary_depth.reshape().contiguous().cpu", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.reshape", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute().contiguous", "generators.ImplicitGenerator3d.decoder", "pixels.cpu.cpu.cpu", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "np.tan", "rays_d_cam.reshape.reshape.unsqueeze().repeat", "volumetric_rendering.transform_sampled_points", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "auxiliary_ray_directions_expanded.reshape.reshape.expand", "auxiliary_ray_directions_expanded.reshape.reshape.reshape", "auxiliary_points.reshape.reshape.reshape", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "generators.ImplicitGenerator3d.siren.forward_with_frequencies_phase_shifts", "auxiliary_output.reshape.reshape.reshape", "auxiliary_rgb_feat.reshape.reshape.reshape", "volumetric_rendering.rgb_feat_integration", "auxiliary_rgb_feat_maps.permute().contiguous.permute().contiguous.reshape", "auxiliary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute().contiguous", "rays_d_cam.reshape.reshape.reshape", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "kwargs.get", "kwargs.get", "primary_depth.reshape().contiguous", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute", "primary_depth.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.norm.reshape", "torch.norm.reshape", "torch.norm.reshape", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "rays_d_cam.reshape.reshape.unsqueeze", "kwargs.get", "kwargs.get", "auxiliary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "primary_depth.reshape", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.ones.reshape().permute", "torch.ones.reshape().permute", "torch.ones.reshape().permute", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "auxiliary_cam2world_matrix.float", "torch.ones.reshape", "torch.ones.reshape", "torch.ones.reshape"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.generate_avg_frequencies", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.transform_sampled_points", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.rgb_feat_integration", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.transform_sampled_points", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.rgb_feat_integration"], ["", "def", "staged_forward", "(", "self", ",", "z", ",", "alpha", ",", "max_mixup_ratio", ",", "stereo_auxiliary", ",", "img_size", ",", "output_size", ",", "fov", ",", "ray_start", ",", "ray_end", ",", "num_steps", ",", "h_stddev", ",", "v_stddev", ",", "h_mean", ",", "v_mean", ",", "psi", "=", "0.5", ",", "lock_view_dependence", "=", "False", ",", "max_batch_size", "=", "50000", ",", "depth_map", "=", "False", ",", "near_clip", "=", "0", ",", "far_clip", "=", "2", ",", "sample_dist", "=", "None", ",", "hierarchical_sample", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Similar to forward but used for inference.\n        Calls the model sequencially using max_batch_size to limit memory usage.\n        \"\"\"", "\n", "\n", "batch_size", "=", "z", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "generate_avg_frequencies", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "raw_frequencies", ",", "raw_phase_shifts", ",", "raw_avg_mapping_codes", "=", "self", ".", "siren", ".", "mapping_network", "(", "z", ")", "\n", "\n", "truncated_frequencies", "=", "self", ".", "avg_frequencies", "+", "psi", "*", "(", "raw_frequencies", "-", "self", ".", "avg_frequencies", ")", "\n", "truncated_phase_shifts", "=", "self", ".", "avg_phase_shifts", "+", "psi", "*", "(", "raw_phase_shifts", "-", "self", ".", "avg_phase_shifts", ")", "\n", "truncated_mapping_codes", "=", "self", ".", "avg_mapping_codes", "+", "psi", "*", "(", "raw_avg_mapping_codes", "-", "self", ".", "avg_mapping_codes", ")", "\n", "\n", "# get_initial_rays_trig", "\n", "x", ",", "y", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "img_size", ",", "device", "=", "self", ".", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "1", ",", "-", "1", ",", "img_size", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "x", "=", "x", ".", "T", ".", "flatten", "(", ")", "\n", "y", "=", "y", ".", "T", ".", "flatten", "(", ")", "\n", "z_coord", "=", "-", "torch", ".", "ones_like", "(", "x", ",", "device", "=", "self", ".", "device", ")", "/", "np", ".", "tan", "(", "(", "2", "*", "math", ".", "pi", "*", "fov", "/", "360", ")", "/", "2", ")", "\n", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z_coord", "]", ",", "-", "1", ")", "\n", "rays_d_norm", "=", "torch", ".", "norm", "(", "rays_d_cam", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "rays_d_cam", "=", "rays_d_cam", "/", "rays_d_norm", "# (height*width, 3)", "\n", "\n", "z_vals", "=", "torch", ".", "linspace", "(", "ray_start", ",", "ray_end", ",", "num_steps", ",", "device", "=", "self", ".", "device", ")", ".", "reshape", "(", "1", ",", "num_steps", ",", "1", ")", ".", "repeat", "(", "img_size", "*", "img_size", ",", "1", ",", "1", ")", "\n", "points_cam", "=", "rays_d_cam", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_steps", ",", "1", ")", "*", "z_vals", "\n", "\n", "points_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "points_cam", "]", ")", "\n", "z_vals", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "z_vals", "]", ")", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "rays_d_cam", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "primary_points", ",", "primary_z_vals", ",", "primary_ray_directions", ",", "primary_ray_origins", ",", "primary_pitch", ",", "primary_yaw", ",", "primary_cam2world_matrix", "=", "transform_sampled_points", "(", "points_cam", ",", "z_vals", ",", "rays_d_cam", ",", "h_stddev", "=", "h_stddev", ",", "v_stddev", "=", "v_stddev", ",", "h_mean", "=", "h_mean", ",", "v_mean", "=", "v_mean", ",", "device", "=", "self", ".", "device", ",", "mode", "=", "sample_dist", ")", "\n", "\n", "primary_ray_directions_expanded", "=", "torch", ".", "unsqueeze", "(", "primary_ray_directions", ",", "-", "2", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_steps", ",", "-", "1", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "primary_points", "=", "primary_points", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "\n", "if", "False", ":", "\n", "#TODO: check this sampling strategy", "\n", "                ", "auxiliary_points", ",", "auxiliary_z_vals", ",", "auxiliary_ray_directions", ",", "auxiliary_ray_origins", ",", "auxiliary_pitch", ",", "auxiliary_yaw", ",", "auxiliary_cam2world_matrix", "=", "transform_sampled_points", "(", "points_cam", ",", "z_vals", ",", "rays_d_cam", ",", "h_stddev", "=", "h_stddev", ",", "v_stddev", "=", "v_stddev", ",", "h_mean", "=", "h_mean", ",", "v_mean", "=", "v_mean", ",", "device", "=", "self", ".", "device", ",", "mode", "=", "sample_dist", ")", "\n", "auxiliary_ray_directions_expanded", "=", "torch", ".", "unsqueeze", "(", "auxiliary_ray_directions", ",", "-", "2", ")", "\n", "auxiliary_ray_directions_expanded", "=", "auxiliary_ray_directions_expanded", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_steps", ",", "-", "1", ")", "\n", "auxiliary_ray_directions_expanded", "=", "auxiliary_ray_directions_expanded", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "auxiliary_points", "=", "auxiliary_points", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "\n", "", "if", "lock_view_dependence", ":", "\n", "                ", "transformed_ray_directions_expanded", "=", "torch", ".", "zeros_like", "(", "transformed_ray_directions_expanded", ")", "\n", "transformed_ray_directions_expanded", "[", "...", ",", "-", "1", "]", "=", "-", "1", "\n", "\n", "", "rgb_feat_dim", "=", "256", "\n", "primary_output", ",", "primary_rgb_feat", "=", "self", ".", "siren", ".", "forward_with_frequencies_phase_shifts", "(", "primary_points", ",", "truncated_frequencies", ",", "truncated_phase_shifts", ",", "ray_directions", "=", "primary_ray_directions_expanded", ")", "\n", "\n", "primary_output", "=", "primary_output", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "4", ")", "\n", "primary_rgb_feat", "=", "primary_rgb_feat", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "rgb_feat_dim", ")", "\n", "\n", "primary_initial_rgb", ",", "primary_rgb_feat_maps", ",", "primary_depth", ",", "_", "=", "rgb_feat_integration", "(", "primary_output", ",", "primary_rgb_feat", ",", "primary_z_vals", ",", "device", "=", "self", ".", "device", ",", "white_back", "=", "kwargs", ".", "get", "(", "'white_back'", ",", "False", ")", ",", "last_back", "=", "kwargs", ".", "get", "(", "'last_back'", ",", "False", ")", ",", "clamp_mode", "=", "kwargs", "[", "'clamp_mode'", "]", ",", "noise_std", "=", "kwargs", "[", "'nerf_noise'", "]", ")", "\n", "\n", "primary_depth_map", "=", "primary_depth", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ")", ".", "contiguous", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "primary_rgb_feat_maps", "=", "primary_rgb_feat_maps", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "rgb_feat_dim", ")", "\n", "primary_rgb_feat_maps", "=", "primary_rgb_feat_maps", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "False", ":", "\n", "                ", "auxiliary_output", ",", "auxiliary_rgb_feat", "=", "self", ".", "siren", ".", "forward_with_frequencies_phase_shifts", "(", "auxiliary_points", ",", "truncated_frequencies", ",", "truncated_phase_shifts", ",", "ray_directions", "=", "auxiliary_ray_directions_expanded", ")", "\n", "\n", "auxiliary_output", "=", "auxiliary_output", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "4", ")", "\n", "auxiliary_rgb_feat", "=", "auxiliary_rgb_feat", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "rgb_feat_dim", ")", "\n", "# Create images with NeRF", "\n", "_", ",", "auxiliary_rgb_feat_maps", ",", "auxiliary_depth", ",", "_", "=", "rgb_feat_integration", "(", "auxiliary_output", ",", "auxiliary_rgb_feat", ",", "auxiliary_z_vals", ",", "device", "=", "self", ".", "device", ",", "white_back", "=", "kwargs", ".", "get", "(", "'white_back'", ",", "False", ")", ",", "last_back", "=", "kwargs", ".", "get", "(", "'last_back'", ",", "False", ")", ",", "clamp_mode", "=", "kwargs", "[", "'clamp_mode'", "]", ",", "noise_std", "=", "kwargs", "[", "'nerf_noise'", "]", ")", "\n", "\n", "auxiliary_rgb_feat_maps", "=", "auxiliary_rgb_feat_maps", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "rgb_feat_dim", ")", "\n", "auxiliary_rgb_feat_maps", "=", "auxiliary_rgb_feat_maps", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# back project to the 3d space", "\n", "rays_d_cam", "=", "rays_d_cam", ".", "reshape", "(", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "3", ")", ")", "\n", "primary_points_3d", "=", "rays_d_cam", "*", "primary_depth", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "1", ")", "\n", "\n", "primary_points_homogeneous", "=", "torch", ".", "ones", "(", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "4", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "primary_points_homogeneous", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "=", "primary_points_3d", "\n", "\n", "primary_points_project_to_auxiliary", "=", "torch", ".", "bmm", "(", "torch", ".", "inverse", "(", "auxiliary_cam2world_matrix", ".", "float", "(", ")", ")", "@", "primary_cam2world_matrix", ",", "primary_points_homogeneous", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "4", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "4", ")", "\n", "primary_grid_in_auxiliary", "=", "torch", ".", "cat", "(", "(", "-", "primary_points_project_to_auxiliary", "[", "...", ",", "0", ":", "1", "]", "/", "primary_points_project_to_auxiliary", "[", "...", ",", "2", ":", "3", "]", ",", "primary_points_project_to_auxiliary", "[", "...", ",", "1", ":", "2", "]", "/", "primary_points_project_to_auxiliary", "[", "...", ",", "2", ":", "3", "]", ")", ",", "-", "1", ")", "*", "rays_d_norm", ".", "reshape", "(", "1", ",", "img_size", ",", "img_size", ",", "1", ")", "\n", "\n", "warp_rgb_feat_maps", "=", "F", ".", "grid_sample", "(", "auxiliary_rgb_feat_maps", ",", "primary_grid_in_auxiliary", ",", "align_corners", "=", "True", ")", "\n", "\n", "auxiliary_mixup_ratio", "=", "torch", ".", "rand", "(", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ",", "device", "=", "self", ".", "device", ")", "*", "max_mixup_ratio", "\n", "rgb_feat_maps", "=", "(", "1", "-", "auxiliary_mixup_ratio", ")", "*", "primary_rgb_feat_maps", "+", "auxiliary_mixup_ratio", "*", "warp_rgb_feat_maps", "\n", "", "else", ":", "\n", "                ", "rgb_feat_maps", "=", "primary_rgb_feat_maps", "\n", "\n", "", "pixels", "=", "self", ".", "decoder", "(", "truncated_mapping_codes", ",", "rgb_feat_maps", ",", "img_size", ",", "output_size", ",", "alpha", ")", "\n", "pixels", "=", "pixels", ".", "cpu", "(", ")", "\n", "\n", "", "return", "pixels", ",", "primary_depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.style_mix_forward": [[248, 312], ["generators.ImplicitGenerator3d.generate_avg_frequencies", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "generators.ImplicitGenerator3d.siren.mapping_network", "generators.ImplicitGenerator3d.siren.mapping_network", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "x.T.flatten.T.flatten.T.flatten", "y.T.flatten.T.flatten.T.flatten", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "volumetric_rendering.transform_sampled_points", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "primary_ray_directions_expanded.reshape.reshape.expand", "primary_ray_directions_expanded.reshape.reshape.reshape", "primary_points.reshape.reshape.reshape", "generators.ImplicitGenerator3d.siren.forward_with_frequencies_phase_shifts", "primary_output.reshape.reshape.reshape", "primary_rgb_feat.reshape.reshape.reshape", "volumetric_rendering.rgb_feat_integration", "primary_depth.reshape().contiguous().cpu", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.reshape", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute().contiguous", "generators.ImplicitGenerator3d.decoder", "pixels.cpu.cpu.cpu", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "np.tan", "torch.stack().to.unsqueeze().repeat", "torch.stack().to.unsqueeze().repeat", "torch.stack().to.unsqueeze().repeat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "kwargs.get", "kwargs.get", "primary_depth.reshape().contiguous", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute", "torch.stack().to.unsqueeze", "torch.stack().to.unsqueeze", "torch.stack().to.unsqueeze", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "primary_depth.reshape"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.generate_avg_frequencies", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.transform_sampled_points", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.rgb_feat_integration"], ["", "def", "style_mix_forward", "(", "self", ",", "z1", ",", "z2", ",", "alpha", ",", "max_mixup_ratio", ",", "stereo_auxiliary", ",", "img_size", ",", "output_size", ",", "fov", ",", "ray_start", ",", "ray_end", ",", "num_steps", ",", "h_stddev", ",", "v_stddev", ",", "h_mean", ",", "v_mean", ",", "psi", "=", "1", ",", "lock_view_dependence", "=", "False", ",", "max_batch_size", "=", "50000", ",", "depth_map", "=", "False", ",", "near_clip", "=", "0", ",", "far_clip", "=", "2", ",", "sample_dist", "=", "None", ",", "hierarchical_sample", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        style mixing function\n        \"\"\"", "\n", "\n", "batch_size", "=", "z1", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "generate_avg_frequencies", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "z1_raw_frequencies", ",", "z1_raw_phase_shifts", ",", "z1_raw_avg_mapping_codes", "=", "self", ".", "siren", ".", "mapping_network", "(", "z1", ")", "\n", "z2_raw_frequencies", ",", "z2_raw_phase_shifts", ",", "z2_raw_avg_mapping_codes", "=", "self", ".", "siren", ".", "mapping_network", "(", "z2", ")", "\n", "\n", "# use the style from z1 in nerf", "\n", "truncated_frequencies", "=", "self", ".", "avg_frequencies", "+", "psi", "*", "(", "z1_raw_frequencies", "-", "self", ".", "avg_frequencies", ")", "\n", "truncated_phase_shifts", "=", "self", ".", "avg_phase_shifts", "+", "psi", "*", "(", "z1_raw_phase_shifts", "-", "self", ".", "avg_phase_shifts", ")", "\n", "\n", "# use the style from z2 in 2d gan", "\n", "truncated_mapping_codes", "=", "self", ".", "avg_mapping_codes", "+", "psi", "*", "(", "z2_raw_avg_mapping_codes", "-", "self", ".", "avg_mapping_codes", ")", "\n", "\n", "x", ",", "y", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "img_size", ",", "device", "=", "self", ".", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "1", ",", "-", "1", ",", "img_size", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "x", "=", "x", ".", "T", ".", "flatten", "(", ")", "\n", "y", "=", "y", ".", "T", ".", "flatten", "(", ")", "\n", "z_coord", "=", "-", "torch", ".", "ones_like", "(", "x", ",", "device", "=", "self", ".", "device", ")", "/", "np", ".", "tan", "(", "(", "2", "*", "math", ".", "pi", "*", "fov", "/", "360", ")", "/", "2", ")", "\n", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z_coord", "]", ",", "-", "1", ")", "\n", "rays_d_norm", "=", "torch", ".", "norm", "(", "rays_d_cam", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "rays_d_cam", "=", "rays_d_cam", "/", "rays_d_norm", "# (height*width, 3)", "\n", "\n", "z_vals", "=", "torch", ".", "linspace", "(", "ray_start", ",", "ray_end", ",", "num_steps", ",", "device", "=", "self", ".", "device", ")", ".", "reshape", "(", "1", ",", "num_steps", ",", "1", ")", ".", "repeat", "(", "img_size", "*", "img_size", ",", "1", ",", "1", ")", "\n", "points_cam", "=", "rays_d_cam", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_steps", ",", "1", ")", "*", "z_vals", "\n", "\n", "points_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "points_cam", "]", ")", "\n", "z_vals", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "z_vals", "]", ")", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "rays_d_cam", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "primary_points", ",", "primary_z_vals", ",", "primary_ray_directions", ",", "primary_ray_origins", ",", "primary_pitch", ",", "primary_yaw", ",", "primary_cam2world_matrix", "=", "transform_sampled_points", "(", "points_cam", ",", "z_vals", ",", "rays_d_cam", ",", "h_stddev", "=", "h_stddev", ",", "v_stddev", "=", "v_stddev", ",", "h_mean", "=", "h_mean", ",", "v_mean", "=", "v_mean", ",", "device", "=", "self", ".", "device", ",", "mode", "=", "sample_dist", ")", "\n", "\n", "primary_ray_directions_expanded", "=", "torch", ".", "unsqueeze", "(", "primary_ray_directions", ",", "-", "2", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_steps", ",", "-", "1", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "primary_points", "=", "primary_points", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "\n", "rgb_feat_dim", "=", "256", "\n", "primary_output", ",", "primary_rgb_feat", "=", "self", ".", "siren", ".", "forward_with_frequencies_phase_shifts", "(", "primary_points", ",", "truncated_frequencies", ",", "truncated_phase_shifts", ",", "ray_directions", "=", "primary_ray_directions_expanded", ")", "\n", "\n", "primary_output", "=", "primary_output", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "4", ")", "\n", "primary_rgb_feat", "=", "primary_rgb_feat", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "rgb_feat_dim", ")", "\n", "\n", "primary_initial_rgb", ",", "primary_rgb_feat_maps", ",", "primary_depth", ",", "_", "=", "rgb_feat_integration", "(", "primary_output", ",", "primary_rgb_feat", ",", "primary_z_vals", ",", "device", "=", "self", ".", "device", ",", "white_back", "=", "kwargs", ".", "get", "(", "'white_back'", ",", "False", ")", ",", "last_back", "=", "kwargs", ".", "get", "(", "'last_back'", ",", "False", ")", ",", "clamp_mode", "=", "kwargs", "[", "'clamp_mode'", "]", ",", "noise_std", "=", "kwargs", "[", "'nerf_noise'", "]", ")", "\n", "\n", "primary_depth_map", "=", "primary_depth", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ")", ".", "contiguous", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "primary_rgb_feat_maps", "=", "primary_rgb_feat_maps", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "rgb_feat_dim", ")", "\n", "primary_rgb_feat_maps", "=", "primary_rgb_feat_maps", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "rgb_feat_maps", "=", "primary_rgb_feat_maps", "\n", "\n", "pixels", "=", "self", ".", "decoder", "(", "truncated_mapping_codes", ",", "rgb_feat_maps", ",", "img_size", ",", "output_size", ",", "alpha", ")", "\n", "pixels", "=", "pixels", ".", "cpu", "(", ")", "\n", "\n", "", "return", "pixels", ",", "primary_depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.style_inter_forward": [[313, 386], ["generators.ImplicitGenerator3d.generate_avg_frequencies", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "generators.ImplicitGenerator3d.siren.mapping_network", "generators.ImplicitGenerator3d.siren.mapping_network", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "x.T.flatten.T.flatten.T.flatten", "y.T.flatten.T.flatten.T.flatten", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "volumetric_rendering.transform_sampled_points", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "primary_ray_directions_expanded.reshape.reshape.expand", "primary_ray_directions_expanded.reshape.reshape.reshape", "primary_points.reshape.reshape.reshape", "generators.ImplicitGenerator3d.siren.forward_with_frequencies_phase_shifts", "primary_output.reshape.reshape.reshape", "primary_rgb_feat.reshape.reshape.reshape", "volumetric_rendering.rgb_feat_integration", "primary_depth.reshape().contiguous().cpu", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.reshape", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute().contiguous", "generators.ImplicitGenerator3d.decoder", "pixels.cpu.cpu.cpu", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "np.tan", "torch.stack().to.unsqueeze().repeat", "torch.stack().to.unsqueeze().repeat", "torch.stack().to.unsqueeze().repeat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "kwargs.get", "kwargs.get", "primary_depth.reshape().contiguous", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute", "torch.stack().to.unsqueeze", "torch.stack().to.unsqueeze", "torch.stack().to.unsqueeze", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "primary_depth.reshape"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.generate_avg_frequencies", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.transform_sampled_points", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.rgb_feat_integration"], ["", "def", "style_inter_forward", "(", "self", ",", "z1", ",", "z2", ",", "inter_ratio", ",", "alpha", ",", "max_mixup_ratio", ",", "stereo_auxiliary", ",", "img_size", ",", "output_size", ",", "fov", ",", "ray_start", ",", "ray_end", ",", "num_steps", ",", "h_stddev", ",", "v_stddev", ",", "h_mean", ",", "v_mean", ",", "psi", "=", "1", ",", "lock_view_dependence", "=", "False", ",", "max_batch_size", "=", "50000", ",", "depth_map", "=", "False", ",", "near_clip", "=", "0", ",", "far_clip", "=", "2", ",", "sample_dist", "=", "None", ",", "hierarchical_sample", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        style interpolation function\n        \"\"\"", "\n", "\n", "batch_size", "=", "z1", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "generate_avg_frequencies", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "z1_raw_frequencies", ",", "z1_raw_phase_shifts", ",", "z1_raw_avg_mapping_codes", "=", "self", ".", "siren", ".", "mapping_network", "(", "z1", ")", "\n", "z2_raw_frequencies", ",", "z2_raw_phase_shifts", ",", "z2_raw_avg_mapping_codes", "=", "self", ".", "siren", ".", "mapping_network", "(", "z2", ")", "\n", "\n", "# use the style from z1 ", "\n", "z1_truncated_frequencies", "=", "self", ".", "avg_frequencies", "+", "psi", "*", "(", "z1_raw_frequencies", "-", "self", ".", "avg_frequencies", ")", "\n", "z1_truncated_phase_shifts", "=", "self", ".", "avg_phase_shifts", "+", "psi", "*", "(", "z1_raw_phase_shifts", "-", "self", ".", "avg_phase_shifts", ")", "\n", "z1_truncated_mapping_codes", "=", "self", ".", "avg_mapping_codes", "+", "psi", "*", "(", "z1_raw_avg_mapping_codes", "-", "self", ".", "avg_mapping_codes", ")", "\n", "\n", "# use the style from z2 ", "\n", "z2_truncated_frequencies", "=", "self", ".", "avg_frequencies", "+", "psi", "*", "(", "z2_raw_frequencies", "-", "self", ".", "avg_frequencies", ")", "\n", "z2_truncated_phase_shifts", "=", "self", ".", "avg_phase_shifts", "+", "psi", "*", "(", "z2_raw_phase_shifts", "-", "self", ".", "avg_phase_shifts", ")", "\n", "z2_truncated_mapping_codes", "=", "self", ".", "avg_mapping_codes", "+", "psi", "*", "(", "z2_raw_avg_mapping_codes", "-", "self", ".", "avg_mapping_codes", ")", "\n", "\n", "# interpolation between z1 and z2", "\n", "truncated_frequencies", "=", "z1_truncated_frequencies", "*", "(", "1", "-", "inter_ratio", ")", "+", "z2_truncated_frequencies", "*", "inter_ratio", "\n", "truncated_phase_shifts", "=", "z1_truncated_phase_shifts", "*", "(", "1", "-", "inter_ratio", ")", "+", "z2_truncated_phase_shifts", "*", "inter_ratio", "\n", "truncated_mapping_codes", "=", "z1_truncated_mapping_codes", "*", "(", "1", "-", "inter_ratio", ")", "+", "z2_truncated_mapping_codes", "*", "inter_ratio", "\n", "\n", "# get_initial_rays_trig", "\n", "x", ",", "y", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "img_size", ",", "device", "=", "self", ".", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "1", ",", "-", "1", ",", "img_size", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "x", "=", "x", ".", "T", ".", "flatten", "(", ")", "\n", "y", "=", "y", ".", "T", ".", "flatten", "(", ")", "\n", "z_coord", "=", "-", "torch", ".", "ones_like", "(", "x", ",", "device", "=", "self", ".", "device", ")", "/", "np", ".", "tan", "(", "(", "2", "*", "math", ".", "pi", "*", "fov", "/", "360", ")", "/", "2", ")", "\n", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z_coord", "]", ",", "-", "1", ")", "\n", "rays_d_norm", "=", "torch", ".", "norm", "(", "rays_d_cam", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "rays_d_cam", "=", "rays_d_cam", "/", "rays_d_norm", "# (height*width, 3)", "\n", "\n", "z_vals", "=", "torch", ".", "linspace", "(", "ray_start", ",", "ray_end", ",", "num_steps", ",", "device", "=", "self", ".", "device", ")", ".", "reshape", "(", "1", ",", "num_steps", ",", "1", ")", ".", "repeat", "(", "img_size", "*", "img_size", ",", "1", ",", "1", ")", "\n", "points_cam", "=", "rays_d_cam", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_steps", ",", "1", ")", "*", "z_vals", "\n", "\n", "points_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "points_cam", "]", ")", "\n", "z_vals", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "z_vals", "]", ")", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "rays_d_cam", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "primary_points", ",", "primary_z_vals", ",", "primary_ray_directions", ",", "primary_ray_origins", ",", "primary_pitch", ",", "primary_yaw", ",", "primary_cam2world_matrix", "=", "transform_sampled_points", "(", "points_cam", ",", "z_vals", ",", "rays_d_cam", ",", "h_stddev", "=", "h_stddev", ",", "v_stddev", "=", "v_stddev", ",", "h_mean", "=", "h_mean", ",", "v_mean", "=", "v_mean", ",", "device", "=", "self", ".", "device", ",", "mode", "=", "sample_dist", ")", "\n", "\n", "primary_ray_directions_expanded", "=", "torch", ".", "unsqueeze", "(", "primary_ray_directions", ",", "-", "2", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_steps", ",", "-", "1", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "primary_points", "=", "primary_points", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "\n", "rgb_feat_dim", "=", "256", "\n", "primary_output", ",", "primary_rgb_feat", "=", "self", ".", "siren", ".", "forward_with_frequencies_phase_shifts", "(", "primary_points", ",", "truncated_frequencies", ",", "truncated_phase_shifts", ",", "ray_directions", "=", "primary_ray_directions_expanded", ")", "\n", "\n", "primary_output", "=", "primary_output", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "4", ")", "\n", "primary_rgb_feat", "=", "primary_rgb_feat", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "rgb_feat_dim", ")", "\n", "\n", "primary_initial_rgb", ",", "primary_rgb_feat_maps", ",", "primary_depth", ",", "_", "=", "rgb_feat_integration", "(", "primary_output", ",", "primary_rgb_feat", ",", "primary_z_vals", ",", "device", "=", "self", ".", "device", ",", "white_back", "=", "kwargs", ".", "get", "(", "'white_back'", ",", "False", ")", ",", "last_back", "=", "kwargs", ".", "get", "(", "'last_back'", ",", "False", ")", ",", "clamp_mode", "=", "kwargs", "[", "'clamp_mode'", "]", ",", "noise_std", "=", "kwargs", "[", "'nerf_noise'", "]", ")", "\n", "\n", "primary_depth_map", "=", "primary_depth", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ")", ".", "contiguous", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "primary_rgb_feat_maps", "=", "primary_rgb_feat_maps", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "rgb_feat_dim", ")", "\n", "primary_rgb_feat_maps", "=", "primary_rgb_feat_maps", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "rgb_feat_maps", "=", "primary_rgb_feat_maps", "\n", "\n", "pixels", "=", "self", ".", "decoder", "(", "truncated_mapping_codes", ",", "rgb_feat_maps", ",", "img_size", ",", "output_size", ",", "alpha", ")", "\n", "pixels", "=", "pixels", ".", "cpu", "(", ")", "\n", "\n", "", "return", "pixels", ",", "primary_depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.staged_forward_for_3D_shape": [[387, 410], ["generators.ImplicitGenerator3d.generate_avg_frequencies", "sigmas.reshape().cpu().numpy.reshape().cpu().numpy.reshape().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "generators.ImplicitGenerator3d.siren.mapping_network", "generators.ImplicitGenerator3d.siren.forward_with_frequencies_phase_shifts", "coarse_output.reshape.reshape.reshape", "sigmas.reshape().cpu().numpy.reshape().cpu().numpy.reshape().cpu", "sigmas.reshape().cpu().numpy.reshape().cpu().numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.generate_avg_frequencies", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts"], ["", "def", "staged_forward_for_3D_shape", "(", "self", ",", "z", ",", "samples", ",", "transformed_ray_directions_expanded", ",", "sigmas", ",", "voxel_resolution", ",", "max_batch", ",", "max_mixup_ratio", ",", "stereo_auxiliary", ",", "img_size", ",", "output_size", ",", "fov", ",", "ray_start", ",", "ray_end", ",", "num_steps", ",", "h_stddev", ",", "v_stddev", ",", "h_mean", ",", "v_mean", ",", "psi", "=", "1", ",", "lock_view_dependence", "=", "False", ",", "depth_map", "=", "False", ",", "near_clip", "=", "0", ",", "far_clip", "=", "2", ",", "sample_dist", "=", "None", ",", "hierarchical_sample", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        extract 3D shape\n        \"\"\"", "\n", "head", "=", "0", "\n", "self", ".", "generate_avg_frequencies", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "raw_frequencies", ",", "raw_phase_shifts", ",", "raw_avg_mapping_codes", "=", "self", ".", "siren", ".", "mapping_network", "(", "z", ")", "\n", "\n", "truncated_frequencies", "=", "self", ".", "avg_frequencies", "+", "psi", "*", "(", "raw_frequencies", "-", "self", ".", "avg_frequencies", ")", "\n", "truncated_phase_shifts", "=", "self", ".", "avg_phase_shifts", "+", "psi", "*", "(", "raw_phase_shifts", "-", "self", ".", "avg_phase_shifts", ")", "\n", "\n", "while", "head", "<", "samples", ".", "shape", "[", "1", "]", ":", "\n", "                ", "coarse_output", ",", "_", "=", "self", ".", "siren", ".", "forward_with_frequencies_phase_shifts", "(", "samples", "[", ":", ",", "head", ":", "head", "+", "max_batch", "]", ",", "truncated_frequencies", ",", "truncated_phase_shifts", ",", "ray_directions", "=", "transformed_ray_directions_expanded", "[", ":", ",", ":", "samples", ".", "shape", "[", "1", "]", "-", "head", "]", ")", "\n", "coarse_output", "=", "coarse_output", ".", "reshape", "(", "samples", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "4", ")", "\n", "sigmas", "[", ":", ",", "head", ":", "head", "+", "max_batch", "]", "=", "coarse_output", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "head", "+=", "max_batch", "\n", "\n", "", "", "sigmas", "=", "sigmas", ".", "reshape", "(", "(", "voxel_resolution", ",", "voxel_resolution", ",", "voxel_resolution", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "sigmas", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.staged_forward_pri_and_aux": [[411, 498], ["generators.ImplicitGenerator3d.generate_avg_frequencies", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "generators.ImplicitGenerator3d.siren.mapping_network", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "x.T.flatten.T.flatten.T.flatten", "y.T.flatten.T.flatten.T.flatten", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "volumetric_rendering.transform_sampled_points", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "primary_ray_directions_expanded.reshape.reshape.expand", "primary_ray_directions_expanded.reshape.reshape.reshape", "primary_points.reshape.reshape.reshape", "volumetric_rendering.transform_sampled_points", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "auxiliary_ray_directions_expanded.reshape.reshape.expand", "auxiliary_ray_directions_expanded.reshape.reshape.reshape", "auxiliary_points.reshape.reshape.reshape", "generators.ImplicitGenerator3d.siren.forward_with_frequencies_phase_shifts", "primary_output.reshape.reshape.reshape", "primary_rgb_feat.reshape.reshape.reshape", "volumetric_rendering.rgb_feat_integration", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.reshape", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute().contiguous", "generators.ImplicitGenerator3d.siren.forward_with_frequencies_phase_shifts", "auxiliary_output.reshape.reshape.reshape", "auxiliary_rgb_feat.reshape.reshape.reshape", "volumetric_rendering.rgb_feat_integration", "auxiliary_rgb_feat_maps.permute().contiguous.permute().contiguous.reshape", "auxiliary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute().contiguous", "generators.ImplicitGenerator3d.decoder", "generators.ImplicitGenerator3d.decoder", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "np.tan", "torch.stack().to.unsqueeze().repeat", "torch.stack().to.unsqueeze().repeat", "torch.stack().to.unsqueeze().repeat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "kwargs.get", "kwargs.get", "primary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute", "kwargs.get", "kwargs.get", "auxiliary_rgb_feat_maps.permute().contiguous.permute().contiguous.permute", "torch.stack().to.unsqueeze", "torch.stack().to.unsqueeze", "torch.stack().to.unsqueeze", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.generate_avg_frequencies", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.transform_sampled_points", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.transform_sampled_points", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.rgb_feat_integration", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.EmbeddingPiGAN128.forward_with_frequencies_phase_shifts", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.rgb_feat_integration"], ["", "def", "staged_forward_pri_and_aux", "(", "self", ",", "z", ",", "alpha", ",", "aux_h_mean", ",", "aux_v_mean", ",", "max_mixup_ratio", ",", "stereo_auxiliary", ",", "img_size", ",", "output_size", ",", "fov", ",", "ray_start", ",", "ray_end", ",", "num_steps", ",", "h_stddev", ",", "v_stddev", ",", "h_mean", ",", "v_mean", ",", "psi", "=", "1", ",", "lock_view_dependence", "=", "False", ",", "max_batch_size", "=", "50000", ",", "depth_map", "=", "False", ",", "near_clip", "=", "0", ",", "far_clip", "=", "2", ",", "sample_dist", "=", "None", ",", "hierarchical_sample", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Similar to forward but used for inference and warp.\n        Calls the model sequencially using max_batch_size to limit memory usage.\n        \"\"\"", "\n", "\n", "batch_size", "=", "z", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "generate_avg_frequencies", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "raw_frequencies", ",", "raw_phase_shifts", ",", "raw_avg_mapping_codes", "=", "self", ".", "siren", ".", "mapping_network", "(", "z", ")", "\n", "\n", "truncated_frequencies", "=", "self", ".", "avg_frequencies", "+", "psi", "*", "(", "raw_frequencies", "-", "self", ".", "avg_frequencies", ")", "\n", "truncated_phase_shifts", "=", "self", ".", "avg_phase_shifts", "+", "psi", "*", "(", "raw_phase_shifts", "-", "self", ".", "avg_phase_shifts", ")", "\n", "truncated_mapping_codes", "=", "self", ".", "avg_mapping_codes", "+", "psi", "*", "(", "raw_avg_mapping_codes", "-", "self", ".", "avg_mapping_codes", ")", "\n", "\n", "# get_initial_rays_trig", "\n", "x", ",", "y", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "img_size", ",", "device", "=", "self", ".", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "1", ",", "-", "1", ",", "img_size", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "x", "=", "x", ".", "T", ".", "flatten", "(", ")", "\n", "y", "=", "y", ".", "T", ".", "flatten", "(", ")", "\n", "z_coord", "=", "-", "torch", ".", "ones_like", "(", "x", ",", "device", "=", "self", ".", "device", ")", "/", "np", ".", "tan", "(", "(", "2", "*", "math", ".", "pi", "*", "fov", "/", "360", ")", "/", "2", ")", "\n", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z_coord", "]", ",", "-", "1", ")", "\n", "rays_d_norm", "=", "torch", ".", "norm", "(", "rays_d_cam", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "rays_d_cam", "=", "rays_d_cam", "/", "rays_d_norm", "# (height*width, 3)", "\n", "\n", "z_vals", "=", "torch", ".", "linspace", "(", "ray_start", ",", "ray_end", ",", "num_steps", ",", "device", "=", "self", ".", "device", ")", ".", "reshape", "(", "1", ",", "num_steps", ",", "1", ")", ".", "repeat", "(", "img_size", "*", "img_size", ",", "1", ",", "1", ")", "\n", "points_cam", "=", "rays_d_cam", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_steps", ",", "1", ")", "*", "z_vals", "\n", "\n", "points_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "points_cam", "]", ")", "\n", "z_vals", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "z_vals", "]", ")", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "rays_d_cam", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "primary_points", ",", "primary_z_vals", ",", "primary_ray_directions", ",", "primary_ray_origins", ",", "primary_pitch", ",", "primary_yaw", ",", "primary_cam2world_matrix", "=", "transform_sampled_points", "(", "points_cam", ",", "z_vals", ",", "rays_d_cam", ",", "h_stddev", "=", "h_stddev", ",", "v_stddev", "=", "v_stddev", ",", "h_mean", "=", "h_mean", ",", "v_mean", "=", "v_mean", ",", "device", "=", "self", ".", "device", ",", "mode", "=", "sample_dist", ")", "\n", "\n", "primary_ray_directions_expanded", "=", "torch", ".", "unsqueeze", "(", "primary_ray_directions", ",", "-", "2", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_steps", ",", "-", "1", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "primary_points", "=", "primary_points", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "\n", "# auxliary images", "\n", "#TODO: check this sampling strategy", "\n", "auxiliary_points", ",", "auxiliary_z_vals", ",", "auxiliary_ray_directions", ",", "auxiliary_ray_origins", ",", "auxiliary_pitch", ",", "auxiliary_yaw", ",", "auxiliary_cam2world_matrix", "=", "transform_sampled_points", "(", "points_cam", ",", "z_vals", ",", "rays_d_cam", ",", "h_stddev", "=", "h_stddev", ",", "v_stddev", "=", "v_stddev", ",", "h_mean", "=", "aux_h_mean", ",", "v_mean", "=", "aux_v_mean", ",", "device", "=", "self", ".", "device", ",", "mode", "=", "sample_dist", ")", "\n", "auxiliary_ray_directions_expanded", "=", "torch", ".", "unsqueeze", "(", "auxiliary_ray_directions", ",", "-", "2", ")", "\n", "auxiliary_ray_directions_expanded", "=", "auxiliary_ray_directions_expanded", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_steps", ",", "-", "1", ")", "\n", "auxiliary_ray_directions_expanded", "=", "auxiliary_ray_directions_expanded", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "auxiliary_points", "=", "auxiliary_points", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", "*", "num_steps", ",", "3", ")", "\n", "\n", "if", "lock_view_dependence", ":", "\n", "                ", "transformed_ray_directions_expanded", "=", "torch", ".", "zeros_like", "(", "transformed_ray_directions_expanded", ")", "\n", "transformed_ray_directions_expanded", "[", "...", ",", "-", "1", "]", "=", "-", "1", "\n", "\n", "", "rgb_feat_dim", "=", "256", "\n", "\n", "# primary output", "\n", "primary_output", ",", "primary_rgb_feat", "=", "self", ".", "siren", ".", "forward_with_frequencies_phase_shifts", "(", "primary_points", ",", "truncated_frequencies", ",", "truncated_phase_shifts", ",", "ray_directions", "=", "primary_ray_directions_expanded", ")", "\n", "\n", "primary_output", "=", "primary_output", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "4", ")", "\n", "primary_rgb_feat", "=", "primary_rgb_feat", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "rgb_feat_dim", ")", "\n", "\n", "_", ",", "primary_rgb_feat_maps", ",", "primary_depth", ",", "_", "=", "rgb_feat_integration", "(", "primary_output", ",", "primary_rgb_feat", ",", "primary_z_vals", ",", "device", "=", "self", ".", "device", ",", "white_back", "=", "kwargs", ".", "get", "(", "'white_back'", ",", "False", ")", ",", "last_back", "=", "kwargs", ".", "get", "(", "'last_back'", ",", "False", ")", ",", "clamp_mode", "=", "kwargs", "[", "'clamp_mode'", "]", ",", "noise_std", "=", "kwargs", "[", "'nerf_noise'", "]", ")", "\n", "\n", "primary_rgb_feat_maps", "=", "primary_rgb_feat_maps", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "rgb_feat_dim", ")", "\n", "primary_rgb_feat_maps", "=", "primary_rgb_feat_maps", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# auxilary output", "\n", "auxiliary_output", ",", "auxiliary_rgb_feat", "=", "self", ".", "siren", ".", "forward_with_frequencies_phase_shifts", "(", "auxiliary_points", ",", "truncated_frequencies", ",", "truncated_phase_shifts", ",", "ray_directions", "=", "auxiliary_ray_directions_expanded", ")", "\n", "\n", "auxiliary_output", "=", "auxiliary_output", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "4", ")", "\n", "auxiliary_rgb_feat", "=", "auxiliary_rgb_feat", ".", "reshape", "(", "batch_size", ",", "img_size", "*", "img_size", ",", "num_steps", ",", "rgb_feat_dim", ")", "\n", "\n", "_", ",", "auxiliary_rgb_feat_maps", ",", "auxiliary_depth", ",", "_", "=", "rgb_feat_integration", "(", "auxiliary_output", ",", "auxiliary_rgb_feat", ",", "auxiliary_z_vals", ",", "device", "=", "self", ".", "device", ",", "white_back", "=", "kwargs", ".", "get", "(", "'white_back'", ",", "False", ")", ",", "last_back", "=", "kwargs", ".", "get", "(", "'last_back'", ",", "False", ")", ",", "clamp_mode", "=", "kwargs", "[", "'clamp_mode'", "]", ",", "noise_std", "=", "kwargs", "[", "'nerf_noise'", "]", ")", "\n", "\n", "auxiliary_rgb_feat_maps", "=", "auxiliary_rgb_feat_maps", ".", "reshape", "(", "batch_size", ",", "img_size", ",", "img_size", ",", "rgb_feat_dim", ")", "\n", "auxiliary_rgb_feat_maps", "=", "auxiliary_rgb_feat_maps", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# decode to RGB images", "\n", "primary_pixels", "=", "self", ".", "decoder", "(", "truncated_mapping_codes", ",", "primary_rgb_feat_maps", ",", "img_size", ",", "output_size", ",", "alpha", ")", "\n", "primary_pixels", "=", "primary_pixels", "\n", "\n", "auxiliary_pixels", "=", "self", ".", "decoder", "(", "truncated_mapping_codes", ",", "auxiliary_rgb_feat_maps", ",", "img_size", ",", "output_size", ",", "alpha", ")", "\n", "auxiliary_pixels", "=", "auxiliary_pixels", "\n", "\n", "", "return", "primary_pixels", ",", "auxiliary_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.staged_forward_reproj": [[499, 559], ["generators.ImplicitGenerator3d.generate_avg_frequencies", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "generators.ImplicitGenerator3d.siren.mapping_network", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "x.T.flatten.T.flatten.T.flatten", "y.T.flatten.T.flatten.T.flatten", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "volumetric_rendering.transform_sampled_points", "volumetric_rendering.transform_sampled_points", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "primary_ray_directions_expanded.reshape.reshape.expand", "primary_ray_directions_expanded.reshape.reshape.reshape", "primary_points.reshape.reshape.reshape", "generators.ImplicitGenerator3d.siren.sigma_forward_with_frequencies_phase_shifts", "primary_sigmas.reshape.reshape.reshape", "volumetric_rendering.depth_integration", "rays_d_cam.reshape.reshape.reshape", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.bmm().permute().reshape", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "np.tan", "rays_d_cam.reshape.reshape.unsqueeze().repeat", "volumetric_rendering.depth_integration.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.norm.reshape", "torch.norm.reshape", "torch.norm.reshape", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "kwargs.get", "kwargs.get", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "rays_d_cam.reshape.reshape.unsqueeze", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.ones.reshape().permute", "torch.ones.reshape().permute", "torch.ones.reshape().permute", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "auxiliary_cam2world_matrix.float", "torch.ones.reshape", "torch.ones.reshape", "torch.ones.reshape"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.generators.ImplicitGenerator3d.generate_avg_frequencies", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.transform_sampled_points", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.transform_sampled_points", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.siren.siren.SPATIALSIRENBASELINE.sigma_forward_with_frequencies_phase_shifts", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.volumetric_rendering.depth_integration"], ["", "def", "staged_forward_reproj", "(", "self", ",", "z", ",", "alpha", ",", "aux_h_mean", ",", "aux_v_mean", ",", "max_mixup_ratio", ",", "stereo_auxiliary", ",", "img_size", ",", "output_size", ",", "fov", ",", "ray_start", ",", "ray_end", ",", "num_steps", ",", "h_stddev", ",", "v_stddev", ",", "h_mean", ",", "v_mean", ",", "psi", "=", "1", ",", "lock_view_dependence", "=", "False", ",", "max_batch_size", "=", "50000", ",", "depth_map", "=", "False", ",", "near_clip", "=", "0", ",", "far_clip", "=", "2", ",", "sample_dist", "=", "None", ",", "hierarchical_sample", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Similar to forward but used for reprojection.\n        Calls the model sequencially using max_batch_size to limit memory usage.\n        \"\"\"", "\n", "\n", "batch_size", "=", "z", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "generate_avg_frequencies", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "raw_frequencies", ",", "raw_phase_shifts", ",", "raw_avg_mapping_codes", "=", "self", ".", "siren", ".", "mapping_network", "(", "z", ")", "\n", "\n", "truncated_frequencies", "=", "self", ".", "avg_frequencies", "+", "psi", "*", "(", "raw_frequencies", "-", "self", ".", "avg_frequencies", ")", "\n", "truncated_phase_shifts", "=", "self", ".", "avg_phase_shifts", "+", "psi", "*", "(", "raw_phase_shifts", "-", "self", ".", "avg_phase_shifts", ")", "\n", "truncated_mapping_codes", "=", "self", ".", "avg_mapping_codes", "+", "psi", "*", "(", "raw_avg_mapping_codes", "-", "self", ".", "avg_mapping_codes", ")", "\n", "\n", "# get_initial_rays_trig", "\n", "x", ",", "y", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "output_size", ",", "device", "=", "self", ".", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "1", ",", "-", "1", ",", "output_size", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "x", "=", "x", ".", "T", ".", "flatten", "(", ")", "\n", "y", "=", "y", ".", "T", ".", "flatten", "(", ")", "\n", "z_coord", "=", "-", "torch", ".", "ones_like", "(", "x", ",", "device", "=", "self", ".", "device", ")", "/", "np", ".", "tan", "(", "(", "2", "*", "math", ".", "pi", "*", "fov", "/", "360", ")", "/", "2", ")", "\n", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z_coord", "]", ",", "-", "1", ")", "\n", "rays_d_norm", "=", "torch", ".", "norm", "(", "rays_d_cam", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "rays_d_cam", "=", "rays_d_cam", "/", "rays_d_norm", "# (height*width, 3)", "\n", "\n", "z_vals", "=", "torch", ".", "linspace", "(", "ray_start", ",", "ray_end", ",", "num_steps", ",", "device", "=", "self", ".", "device", ")", ".", "reshape", "(", "1", ",", "num_steps", ",", "1", ")", ".", "repeat", "(", "output_size", "*", "output_size", ",", "1", ",", "1", ")", "\n", "points_cam", "=", "rays_d_cam", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_steps", ",", "1", ")", "*", "z_vals", "\n", "\n", "points_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "points_cam", "]", ")", "\n", "z_vals", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "z_vals", "]", ")", "\n", "rays_d_cam", "=", "torch", ".", "stack", "(", "batch_size", "*", "[", "rays_d_cam", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "primary_points", ",", "primary_z_vals", ",", "primary_ray_directions", ",", "primary_ray_origins", ",", "primary_pitch", ",", "primary_yaw", ",", "primary_cam2world_matrix", "=", "transform_sampled_points", "(", "points_cam", ",", "z_vals", ",", "rays_d_cam", ",", "h_stddev", "=", "h_stddev", ",", "v_stddev", "=", "v_stddev", ",", "h_mean", "=", "h_mean", ",", "v_mean", "=", "v_mean", ",", "device", "=", "self", ".", "device", ",", "mode", "=", "sample_dist", ")", "\n", "auxiliary_points", ",", "auxiliary_z_vals", ",", "auxiliary_ray_directions", ",", "auxiliary_ray_origins", ",", "auxiliary_pitch", ",", "auxiliary_yaw", ",", "auxiliary_cam2world_matrix", "=", "transform_sampled_points", "(", "points_cam", ",", "z_vals", ",", "rays_d_cam", ",", "h_stddev", "=", "h_stddev", ",", "v_stddev", "=", "v_stddev", ",", "h_mean", "=", "aux_h_mean", ",", "v_mean", "=", "aux_v_mean", ",", "device", "=", "self", ".", "device", ",", "mode", "=", "sample_dist", ")", "\n", "\n", "primary_ray_directions_expanded", "=", "torch", ".", "unsqueeze", "(", "primary_ray_directions", ",", "-", "2", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_steps", ",", "-", "1", ")", "\n", "primary_ray_directions_expanded", "=", "primary_ray_directions_expanded", ".", "reshape", "(", "batch_size", ",", "output_size", "*", "output_size", "*", "num_steps", ",", "3", ")", "\n", "primary_points", "=", "primary_points", ".", "reshape", "(", "batch_size", ",", "output_size", "*", "output_size", "*", "num_steps", ",", "3", ")", "\n", "\n", "# primary output", "\n", "primary_sigmas", "=", "self", ".", "siren", ".", "sigma_forward_with_frequencies_phase_shifts", "(", "primary_points", ",", "truncated_frequencies", ",", "truncated_phase_shifts", ",", "ray_directions", "=", "primary_ray_directions_expanded", ")", "\n", "primary_sigmas", "=", "primary_sigmas", ".", "reshape", "(", "batch_size", ",", "output_size", "*", "output_size", ",", "num_steps", ",", "1", ")", "\n", "primary_depth", "=", "depth_integration", "(", "primary_sigmas", ",", "primary_z_vals", ",", "device", "=", "self", ".", "device", ",", "white_back", "=", "kwargs", ".", "get", "(", "'white_back'", ",", "False", ")", ",", "last_back", "=", "kwargs", ".", "get", "(", "'last_back'", ",", "False", ")", ",", "clamp_mode", "=", "kwargs", "[", "'clamp_mode'", "]", ",", "noise_std", "=", "kwargs", "[", "'nerf_noise'", "]", ")", "\n", "\n", "# back project to the 3d space", "\n", "rays_d_cam", "=", "rays_d_cam", ".", "reshape", "(", "(", "batch_size", ",", "output_size", ",", "output_size", ",", "3", ")", ")", "\n", "primary_points_3d", "=", "rays_d_cam", "*", "primary_depth", ".", "reshape", "(", "batch_size", ",", "output_size", ",", "output_size", ",", "1", ")", "\n", "\n", "primary_points_homogeneous", "=", "torch", ".", "ones", "(", "(", "batch_size", ",", "output_size", ",", "output_size", ",", "4", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "primary_points_homogeneous", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "=", "primary_points_3d", "\n", "\n", "primary_points_project_to_auxiliary", "=", "torch", ".", "bmm", "(", "torch", ".", "inverse", "(", "auxiliary_cam2world_matrix", ".", "float", "(", ")", ")", "@", "primary_cam2world_matrix", ",", "primary_points_homogeneous", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "4", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "batch_size", ",", "output_size", ",", "output_size", ",", "4", ")", "\n", "reproject_grid", "=", "torch", ".", "cat", "(", "(", "-", "primary_points_project_to_auxiliary", "[", "...", ",", "0", ":", "1", "]", "/", "primary_points_project_to_auxiliary", "[", "...", ",", "2", ":", "3", "]", ",", "primary_points_project_to_auxiliary", "[", "...", ",", "1", ":", "2", "]", "/", "primary_points_project_to_auxiliary", "[", "...", ",", "2", ":", "3", "]", ")", ",", "-", "1", ")", "*", "rays_d_norm", ".", "reshape", "(", "1", ",", "output_size", ",", "output_size", ",", "1", ")", "\n", "\n", "", "return", "reproject_grid", "", "", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.neural_renderer.Blur.__init__": [[8, 12], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "neural_renderer.Blur.register_buffer"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "f", "=", "torch", ".", "Tensor", "(", "[", "1", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "register_buffer", "(", "'f'", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.neural_renderer.Blur.forward": [[13, 17], ["kornia.filters.filter2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "f", "=", "self", ".", "f", "\n", "f", "=", "f", "[", "None", ",", "None", ",", ":", "]", "*", "f", "[", "None", ",", ":", ",", "None", "]", "\n", "return", "filter2d", "(", "x", ",", "f", ",", "normalized", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.neural_renderer.NeuralRenderer.__init__": [[35, 92], ["torch.Module.__init__", "neural_renderer.Blur", "int", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "math.log2", "math.log2", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "max", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "max", "max", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "max", "range", "max", "range"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "n_feat", "=", "128", ",", "input_dim", "=", "256", ",", "out_dim", "=", "3", ",", "final_actvn", "=", "True", ",", "\n", "min_feat", "=", "32", ",", "input_img_size", "=", "64", ",", "output_img_size", "=", "128", ",", "use_rgb_skip", "=", "True", ",", "\n", "upsample_feat", "=", "\"nn\"", ",", "upsample_rgb", "=", "\"bilinear\"", ",", "use_norm", "=", "False", ",", "device", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "final_actvn", "=", "final_actvn", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "use_rgb_skip", "=", "use_rgb_skip", "\n", "self", ".", "use_norm", "=", "use_norm", "\n", "self", ".", "blur", "=", "Blur", "(", ")", "\n", "n_blocks", "=", "int", "(", "log2", "(", "output_img_size", ")", "-", "log2", "(", "input_img_size", ")", ")", "\n", "\n", "assert", "(", "upsample_feat", "in", "(", "\"nn\"", ",", "\"bilinear\"", ")", ")", "\n", "if", "upsample_feat", "==", "\"nn\"", ":", "\n", "            ", "self", ".", "upsample_2", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2.", ")", "\n", "", "elif", "upsample_feat", "==", "\"bilinear\"", ":", "\n", "            ", "self", ".", "upsample_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "self", ".", "blur", ")", "\n", "\n", "", "assert", "(", "upsample_rgb", "in", "(", "\"nn\"", ",", "\"bilinear\"", ")", ")", "\n", "if", "upsample_rgb", "==", "\"nn\"", ":", "\n", "            ", "self", ".", "upsample_rgb", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2.", ")", "\n", "", "elif", "upsample_rgb", "==", "\"bilinear\"", ":", "\n", "            ", "self", ".", "upsample_rgb", "=", "nn", ".", "Sequential", "(", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "self", ".", "blur", ")", "\n", "\n", "", "if", "n_feat", "==", "input_dim", ":", "\n", "# self.conv_in = nn.Sequential()", "\n", "            ", "self", ".", "add_conv_input", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_conv_input", "=", "True", "\n", "self", ".", "conv_in", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "n_feat", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Conv2d", "(", "n_feat", ",", "n_feat", "//", "2", ",", "3", ",", "1", ",", "1", ")", "]", "+", "\n", "[", "nn", ".", "Conv2d", "(", "max", "(", "n_feat", "//", "(", "2", "**", "(", "i", "+", "1", ")", ")", ",", "min_feat", ")", ",", "\n", "max", "(", "n_feat", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ",", "min_feat", ")", ",", "3", ",", "1", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_blocks", "-", "1", ")", "]", "\n", ")", "\n", "if", "use_rgb_skip", ":", "\n", "            ", "self", ".", "conv_rgb", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Conv2d", "(", "input_dim", ",", "out_dim", ",", "3", ",", "1", ",", "1", ")", "]", "+", "\n", "[", "nn", ".", "Conv2d", "(", "max", "(", "n_feat", "//", "(", "2", "**", "(", "i", "+", "1", ")", ")", ",", "min_feat", ")", ",", "\n", "out_dim", ",", "3", ",", "1", ",", "1", ")", "for", "i", "in", "range", "(", "0", ",", "n_blocks", ")", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_rgb", "=", "nn", ".", "Conv2d", "(", "\n", "max", "(", "n_feat", "//", "(", "2", "**", "(", "n_blocks", ")", ")", ",", "min_feat", ")", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "use_norm", ":", "\n", "            ", "self", ".", "norms", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "InstanceNorm2d", "(", "max", "(", "n_feat", "//", "(", "2", "**", "(", "i", "+", "1", ")", ")", ",", "min_feat", ")", ")", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", "\n", "]", ")", "\n", "", "self", ".", "actvn", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.neural_renderer.NeuralRenderer.forward": [[93, 119], ["enumerate", "neural_renderer.NeuralRenderer.conv_in", "neural_renderer.NeuralRenderer.upsample_rgb", "layer", "neural_renderer.NeuralRenderer.actvn", "neural_renderer.NeuralRenderer.conv_rgb", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "neural_renderer.NeuralRenderer.upsample_2", "neural_renderer.NeuralRenderer.upsample_rgb", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "add_conv_input", ":", "\n", "            ", "net", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "net", "=", "x", "\n", "\n", "", "if", "self", ".", "use_rgb_skip", ":", "\n", "            ", "rgb", "=", "self", ".", "upsample_rgb", "(", "self", ".", "conv_rgb", "[", "0", "]", "(", "x", ")", ")", "\n", "\n", "", "for", "idx", ",", "layer", "in", "enumerate", "(", "self", ".", "conv_layers", ")", ":", "\n", "            ", "hid", "=", "layer", "(", "self", ".", "upsample_2", "(", "net", ")", ")", "\n", "if", "self", ".", "use_norm", ":", "\n", "                ", "hid", "=", "self", ".", "norms", "[", "idx", "]", "(", "hid", ")", "\n", "", "net", "=", "self", ".", "actvn", "(", "hid", ")", "\n", "\n", "if", "self", ".", "use_rgb_skip", ":", "\n", "                ", "rgb", "=", "rgb", "+", "self", ".", "conv_rgb", "[", "idx", "+", "1", "]", "(", "net", ")", "\n", "if", "idx", "<", "len", "(", "self", ".", "conv_layers", ")", "-", "1", ":", "\n", "                    ", "rgb", "=", "self", ".", "upsample_rgb", "(", "rgb", ")", "\n", "\n", "", "", "", "if", "not", "self", ".", "use_rgb_skip", ":", "\n", "            ", "rgb", "=", "self", ".", "conv_rgb", "(", "net", ")", "\n", "\n", "", "if", "self", ".", "final_actvn", ":", "\n", "            ", "rgb", "=", "torch", ".", "sigmoid", "(", "rgb", ")", "\n", "", "return", "rgb", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.ministyleGAN.AdaIN.__init__": [[14, 23], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ministyleGAN.AdaIN.styleModulator.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimIn", ",", "dimOut", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "AdaIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "styleModulator", "=", "nn", ".", "Linear", "(", "dimIn", ",", "2", "*", "dimOut", ")", "\n", "self", ".", "dimOut", "=", "dimOut", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "styleModulator", ".", "weight", "*=", "0.25", "\n", "self", ".", "styleModulator", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.ministyleGAN.AdaIN.forward": [[25, 40], ["x.size", "x.view", "x.view.mean().view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "ministyleGAN.AdaIN.styleModulator", "styleY[].view", "styleY[].view", "x.view.mean"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x: N x C x W x H", "\n", "        ", "batchSize", ",", "nChannel", ",", "width", ",", "height", "=", "x", ".", "size", "(", ")", "\n", "tmpX", "=", "x", ".", "view", "(", "batchSize", ",", "nChannel", ",", "-", "1", ")", "\n", "mux", "=", "tmpX", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "batchSize", ",", "nChannel", ",", "1", ",", "1", ")", "\n", "varx", "=", "torch", ".", "clamp", "(", "(", "tmpX", "*", "tmpX", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "batchSize", ",", "nChannel", ",", "1", ",", "1", ")", "-", "mux", "*", "mux", ",", "min", "=", "0", ")", "\n", "varx", "=", "torch", ".", "rsqrt", "(", "varx", "+", "self", ".", "epsilon", ")", "\n", "x", "=", "(", "x", "-", "mux", ")", "*", "varx", "\n", "\n", "# Adapt style", "\n", "styleY", "=", "self", ".", "styleModulator", "(", "y", ")", "\n", "yA", "=", "styleY", "[", ":", ",", ":", "self", ".", "dimOut", "]", ".", "view", "(", "batchSize", ",", "self", ".", "dimOut", ",", "1", ",", "1", ")", "\n", "yB", "=", "styleY", "[", ":", ",", "self", ".", "dimOut", ":", "]", ".", "view", "(", "batchSize", ",", "self", ".", "dimOut", ",", "1", ",", "1", ")", "\n", "\n", "return", "yA", "*", "x", "+", "yB", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.ministyleGAN.NoiseMultiplier.__init__": [[42, 46], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "ministyleGAN.NoiseMultiplier.module.weight.data.fill_"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["", "", "class", "NoiseMultiplier", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NoiseMultiplier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "module", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.ministyleGAN.NoiseMultiplier.forward": [[47, 50], ["ministyleGAN.NoiseMultiplier.module"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.ministyleGAN.MappingLayer.__init__": [[52, 62], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "ministyleGAN.MappingLayer.FC.append", "custom_layers.EqualizedLinear"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["\n", "# FIXME: remove here, maybe we can use later", "\n", "", "", "class", "MappingLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dimIn", ",", "dimLatent", ",", "nLayers", ",", "leakyReluLeak", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "MappingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "FC", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "inDim", "=", "dimIn", "\n", "for", "i", "in", "range", "(", "nLayers", ")", ":", "\n", "            ", "self", ".", "FC", ".", "append", "(", "EqualizedLinear", "(", "inDim", ",", "dimLatent", ",", "lrMul", "=", "0.01", ",", "equalized", "=", "True", ",", "initBiasToZero", "=", "True", ")", ")", "\n", "inDim", "=", "dimLatent", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.ministyleGAN.MappingLayer.forward": [[63, 68], ["ministyleGAN.MappingLayer.activation", "layer"], "methods", ["None"], ["\n", "", "self", ".", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "leakyReluLeak", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "FC", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "layer", "(", "x", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.ministyleGAN.GNet.__init__": [[70, 111], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "custom_layers.NormalizationLayer", "ministyleGAN.AdaIN", "ministyleGAN.NoiseMultiplier", "ministyleGAN.AdaIN", "ministyleGAN.NoiseMultiplier", "custom_layers.EqualizedConv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "custom_layers.EqualizedConv2d", "ministyleGAN.GNet.addScale"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.addScale"], ["", "return", "x", "\n", "\n", "", "", "class", "GNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "dimFeat", ":", "int", "=", "256", ",", "\n", "dimInput", ":", "int", "=", "256", ",", "\n", "dimMapping", ":", "int", "=", "256", ",", "\n", "dimOutput", ":", "int", "=", "3", ",", "\n", "nMappingLayers", ":", "int", "=", "8", ",", "\n", "leakyReluLeak", "=", "0.2", ",", "\n", "generationActivation", "=", "None", ",", "\n", "phiTruncation", "=", "0.5", ",", "\n", "gamma_avg", "=", "0.99", ")", ":", "\n", "\n", "        ", "super", "(", "GNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dimMapping", "=", "dimMapping", "\n", "\n", "self", ".", "scaleLayers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "noiseModulators", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "noramlizationLayer", "=", "NormalizationLayer", "(", ")", "\n", "\n", "self", ".", "adain00", "=", "AdaIN", "(", "dimMapping", ",", "dimInput", ")", "\n", "self", ".", "noiseMod00", "=", "NoiseMultiplier", "(", ")", "\n", "self", ".", "adain01", "=", "AdaIN", "(", "dimMapping", ",", "dimInput", ")", "\n", "self", ".", "noiseMod01", "=", "NoiseMultiplier", "(", ")", "\n", "\n", "\n", "self", ".", "conv0", "=", "EqualizedConv2d", "(", "dimInput", ",", "256", ",", "3", ",", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ",", "padding", "=", "1", ")", "\n", "self", ".", "dimOutput", "=", "dimOutput", "\n", "self", ".", "toRGBLayer", "=", "EqualizedConv2d", "(", "64", ",", "\n", "self", ".", "dimOutput", ",", "\n", "1", ",", "\n", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ")", "\n", "\n", "self", ".", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "leakyReluLeak", ")", "\n", "self", ".", "depthScales", "=", "[", "dimInput", "]", "\n", "self", ".", "depthlist", "=", "[", "128", "]", "\n", "\n", "for", "depth", "in", "self", ".", "depthlist", ":", "\n", "            ", "self", ".", "addScale", "(", "depth", ")", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.ministyleGAN.GNet.addScale": [[113, 137], ["ministyleGAN.GNet.scaleLayers.append", "ministyleGAN.GNet.scaleLayers[].append", "ministyleGAN.GNet.scaleLayers[].append", "ministyleGAN.GNet.scaleLayers[].append", "ministyleGAN.GNet.scaleLayers[].append", "ministyleGAN.GNet.noiseModulators.append", "ministyleGAN.GNet.noiseModulators[].append", "ministyleGAN.GNet.noiseModulators[].append", "ministyleGAN.GNet.depthScales.append", "torch.ModuleList", "torch.ModuleList", "custom_layers.EqualizedConv2d", "ministyleGAN.AdaIN", "custom_layers.EqualizedConv2d", "ministyleGAN.AdaIN", "torch.ModuleList", "torch.ModuleList", "ministyleGAN.NoiseMultiplier", "ministyleGAN.NoiseMultiplier"], "methods", ["None"], ["", "self", ".", "toRGBLayer", "=", "EqualizedConv2d", "(", "self", ".", "depthScales", "[", "-", "1", "]", ",", "\n", "self", ".", "dimOutput", ",", "\n", "1", ",", "\n", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ")", "\n", "\n", "\n", "", "def", "addScale", "(", "self", ",", "dimNewScale", ")", ":", "\n", "\n", "        ", "lastDim", "=", "self", ".", "depthScales", "[", "-", "1", "]", "\n", "self", ".", "scaleLayers", ".", "append", "(", "nn", ".", "ModuleList", "(", ")", ")", "\n", "self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "EqualizedConv2d", "(", "lastDim", ",", "\n", "dimNewScale", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ")", ")", "\n", "\n", "self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "AdaIN", "(", "self", ".", "dimMapping", ",", "dimNewScale", ")", ")", "\n", "self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "EqualizedConv2d", "(", "dimNewScale", ",", "\n", "dimNewScale", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.ministyleGAN.GNet.forward": [[138, 168], ["mapping.size", "feat.size", "ministyleGAN.GNet.activation", "ministyleGAN.GNet.adain00", "ministyleGAN.GNet.conv0", "ministyleGAN.GNet.activation", "ministyleGAN.GNet.adain01", "enumerate", "ministyleGAN.GNet.toRGBLayer", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ministyleGAN.GNet.noiseMod00", "ministyleGAN.GNet.noiseMod01", "custom_layers.Upscale2d", "ministyleGAN.GNet.activation", "ministyleGAN.GNet.activation", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "ministyleGAN.GNet.size", "ministyleGAN.GNet.size", "ministyleGAN.GNet.size", "ministyleGAN.GNet.size", "ministyleGAN.GNet.size", "ministyleGAN.GNet.size"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.Upscale2d"], ["self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "AdaIN", "(", "self", ".", "dimMapping", ",", "dimNewScale", ")", ")", "\n", "\n", "self", ".", "noiseModulators", ".", "append", "(", "nn", ".", "ModuleList", "(", ")", ")", "\n", "self", ".", "noiseModulators", "[", "-", "1", "]", ".", "append", "(", "NoiseMultiplier", "(", ")", ")", "\n", "self", ".", "noiseModulators", "[", "-", "1", "]", ".", "append", "(", "NoiseMultiplier", "(", ")", ")", "\n", "self", ".", "depthScales", ".", "append", "(", "dimNewScale", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "mapping", ",", "feat", ")", ":", "\n", "        ", "batchSize", "=", "mapping", ".", "size", "(", "0", ")", "\n", "\n", "feat_size", "=", "feat", ".", "size", "(", "2", ")", "\n", "\n", "feature", "=", "feat", "+", "self", ".", "noiseMod00", "(", "torch", ".", "randn", "(", "(", "batchSize", ",", "1", ",", "feat_size", ",", "feat_size", ")", ",", "device", "=", "mapping", ".", "device", ")", ")", "# [batchSize, 256, 16, 16)", "\n", "feature", "=", "self", ".", "activation", "(", "feature", ")", "\n", "feature", "=", "self", ".", "adain00", "(", "feature", ",", "mapping", ")", "\n", "feature", "=", "self", ".", "conv0", "(", "feature", ")", "# [batchSize, 256, 16, 16) -> # [batchSize, 256, 16, 16)", "\n", "feature", "=", "feature", "+", "self", ".", "noiseMod01", "(", "torch", ".", "randn", "(", "(", "batchSize", ",", "1", ",", "feature", ".", "size", "(", "2", ")", ",", "feature", ".", "size", "(", "3", ")", ")", ",", "device", "=", "mapping", ".", "device", ")", ")", "\n", "feature", "=", "self", ".", "activation", "(", "feature", ")", "\n", "feature", "=", "self", ".", "adain01", "(", "feature", ",", "mapping", ")", "\n", "\n", "for", "nLayer", ",", "group", "in", "enumerate", "(", "self", ".", "scaleLayers", ")", ":", "\n", "            ", "noiseMod", "=", "self", ".", "noiseModulators", "[", "nLayer", "]", "# current noise module", "\n", "feature", "=", "Upscale2d", "(", "feature", ")", "# Upsample (nearest neighborhood instead of biniliear)", "\n", "feature", "=", "group", "[", "0", "]", "(", "feature", ")", "+", "noiseMod", "[", "0", "]", "(", "torch", ".", "randn", "(", "(", "batchSize", ",", "1", ",", "\n", "feature", ".", "size", "(", "2", ")", ",", "\n", "feature", ".", "size", "(", "3", ")", ")", ",", "device", "=", "mapping", ".", "device", ")", ")", "# inject noise", "\n", "feature", "=", "self", ".", "activation", "(", "feature", ")", "# activation function", "\n", "feature", "=", "group", "[", "1", "]", "(", "feature", ",", "mapping", ")", "# adaptive instance normalization", "\n", "feature", "=", "group", "[", "2", "]", "(", "feature", ")", "+", "noiseMod", "[", "1", "]", "(", "torch", ".", "randn", "(", "(", "batchSize", ",", "1", ",", "\n", "feature", ".", "size", "(", "2", ")", ",", "\n", "feature", ".", "size", "(", "3", ")", ")", ",", "device", "=", "mapping", ".", "device", ")", ")", "# inject noise", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.ministyleGAN.GNet.getOutputSize": [[169, 173], ["len"], "methods", ["None"], ["feature", "=", "self", ".", "activation", "(", "feature", ")", "# activation function", "\n", "feature", "=", "group", "[", "3", "]", "(", "feature", ",", "mapping", ")", "# adaptive instance normalization", "\n", "\n", "", "rgb", "=", "self", ".", "toRGBLayer", "(", "feature", ")", "\n", "rgb", "=", "torch", ".", "sigmoid", "(", "rgb", ")", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.ministyleGAN.kaiming_leaky_init": [[7, 11], ["classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["def", "kaiming_leaky_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0.2", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.NormalizationLayer.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NormalizationLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.NormalizationLayer.forward": [[14, 16], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "return", "x", "*", "(", "(", "(", "x", "**", "2", ")", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "epsilon", ")", ".", "rsqrt", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.ConstrainedLayer.__init__": [[47, 69], ["torch.Module.__init__", "custom_layers.ConstrainedLayer.module.bias.data.fill_", "custom_layers.ConstrainedLayer.module.weight.data.normal_", "custom_layers.getLayerNormalizationFactor"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.getLayerNormalizationFactor"], ["def", "__init__", "(", "self", ",", "\n", "module", ",", "\n", "equalized", "=", "True", ",", "\n", "lrMul", "=", "1.0", ",", "\n", "initBiasToZero", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        equalized (bool): if true, the layer's weight should evolve within\n                         the range (-1, 1)\n        initBiasToZero (bool): if true, bias will be initialized to zero\n        \"\"\"", "\n", "\n", "super", "(", "ConstrainedLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "equalized", "=", "equalized", "\n", "\n", "if", "initBiasToZero", ":", "\n", "            ", "self", ".", "module", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "if", "self", ".", "equalized", ":", "\n", "            ", "self", ".", "module", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "self", ".", "module", ".", "weight", ".", "data", "/=", "lrMul", "\n", "self", ".", "weight", "=", "getLayerNormalizationFactor", "(", "self", ".", "module", ")", "*", "lrMul", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.ConstrainedLayer.forward": [[70, 76], ["custom_layers.ConstrainedLayer.module"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "module", "(", "x", ")", "\n", "if", "self", ".", "equalized", ":", "\n", "            ", "x", "*=", "self", ".", "weight", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.EqualizedConv2d.__init__": [[80, 102], ["custom_layers.ConstrainedLayer.__init__", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "nChannelsPrevious", ",", "\n", "nChannels", ",", "\n", "kernelSize", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        A nn.Conv2d module with specific constraints\n        Args:\n            nChannelsPrevious (int): number of channels in the previous layer\n            nChannels (int): number of channels of the current layer\n            kernelSize (int): size of the convolutional kernel\n            padding (int): convolution's padding\n            bias (bool): with bias ?\n        \"\"\"", "\n", "\n", "ConstrainedLayer", ".", "__init__", "(", "self", ",", "\n", "nn", ".", "Conv2d", "(", "nChannelsPrevious", ",", "nChannels", ",", "\n", "kernelSize", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "bias", ")", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.EqualizedLinear.__init__": [[106, 120], ["custom_layers.ConstrainedLayer.__init__", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "nChannelsPrevious", ",", "\n", "nChannels", ",", "\n", "bias", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        A nn.Linear module with specific constraints\n        Args:\n            nChannelsPrevious (int): number of channels in the previous layer\n            nChannels (int): number of channels of the current layer\n            bias (bool): with bias ?\n        \"\"\"", "\n", "\n", "ConstrainedLayer", ".", "__init__", "(", "self", ",", "nn", ".", "Linear", "(", "nChannelsPrevious", ",", "nChannels", ",", "bias", "=", "bias", ")", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.Upscale2d": [[18, 27], ["x.contiguous().view.size", "x.contiguous().view.view", "x.contiguous().view.expand", "x.contiguous().view.contiguous().view", "isinstance", "x.contiguous().view.contiguous"], "function", ["None"], ["", "", "def", "Upscale2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "if", "factor", "==", "1", ":", "\n", "        ", "return", "x", "\n", "", "s", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "1", ",", "s", "[", "3", "]", ",", "1", ")", "\n", "x", "=", "x", ".", "expand", "(", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "factor", ",", "s", "[", "3", "]", ",", "factor", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", "*", "factor", ",", "s", "[", "3", "]", "*", "factor", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.getLayerNormalizationFactor": [[29, 38], ["x.weight.size", "numpy.prod", "math.sqrt"], "function", ["None"], ["", "def", "getLayerNormalizationFactor", "(", "x", ")", ":", "\n", "    ", "r\"\"\"\n    Get He's constant for the given layer\n    https://www.cv-foundation.org/openaccess/content_iccv_2015/papers/He_Delving_Deep_into_ICCV_2015_paper.pdf\n    \"\"\"", "\n", "size", "=", "x", ".", "weight", ".", "size", "(", ")", "\n", "fan_in", "=", "prod", "(", "size", "[", "1", ":", "]", ")", "\n", "\n", "return", "math", ".", "sqrt", "(", "2.0", "/", "fan_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.math_utils_torch.transform_vectors": [[8, 14], ["torch.matmul"], "function", ["None"], ["def", "transform_vectors", "(", "matrix", ":", "torch", ".", "Tensor", ",", "vectors4", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Left-multiplies MxM @ NxM. Returns NxM.\n    \"\"\"", "\n", "res", "=", "torch", ".", "matmul", "(", "vectors4", ",", "matrix", ".", "T", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.math_utils_torch.normalize_vecs": [[16, 21], ["torch.norm"], "function", ["None"], ["", "def", "normalize_vecs", "(", "vectors", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Normalize vector lengths.\n    \"\"\"", "\n", "return", "vectors", "/", "(", "torch", ".", "norm", "(", "vectors", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.math_utils_torch.torch_dot": [[22, 27], ["None"], "function", ["None"], ["", "def", "torch_dot", "(", "x", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Dot product of two tensors.\n    \"\"\"", "\n", "return", "(", "x", "*", "y", ")", ".", "sum", "(", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.AdaIN.__init__": [[15, 24], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "refinegan.AdaIN.styleModulator.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimIn", ",", "dimOut", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "AdaIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "styleModulator", "=", "nn", ".", "Linear", "(", "dimIn", ",", "2", "*", "dimOut", ")", "\n", "self", ".", "dimOut", "=", "dimOut", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "styleModulator", ".", "weight", "*=", "0.25", "\n", "self", ".", "styleModulator", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.AdaIN.forward": [[25, 40], ["x.size", "x.view", "x.view.mean().view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "refinegan.AdaIN.styleModulator", "styleY[].view", "styleY[].view", "x.view.mean"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x: N x C x W x H", "\n", "        ", "batchSize", ",", "nChannel", ",", "width", ",", "height", "=", "x", ".", "size", "(", ")", "\n", "tmpX", "=", "x", ".", "view", "(", "batchSize", ",", "nChannel", ",", "-", "1", ")", "\n", "mux", "=", "tmpX", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "batchSize", ",", "nChannel", ",", "1", ",", "1", ")", "\n", "varx", "=", "torch", ".", "clamp", "(", "(", "tmpX", "*", "tmpX", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "batchSize", ",", "nChannel", ",", "1", ",", "1", ")", "-", "mux", "*", "mux", ",", "min", "=", "0", ")", "\n", "varx", "=", "torch", ".", "rsqrt", "(", "varx", "+", "self", ".", "epsilon", ")", "\n", "x", "=", "(", "x", "-", "mux", ")", "*", "varx", "\n", "\n", "# Adapt style", "\n", "styleY", "=", "self", ".", "styleModulator", "(", "y", ")", "\n", "yA", "=", "styleY", "[", ":", ",", ":", "self", ".", "dimOut", "]", ".", "view", "(", "batchSize", ",", "self", ".", "dimOut", ",", "1", ",", "1", ")", "\n", "yB", "=", "styleY", "[", ":", ",", "self", ".", "dimOut", ":", "]", ".", "view", "(", "batchSize", ",", "self", ".", "dimOut", ",", "1", ",", "1", ")", "\n", "\n", "return", "yA", "*", "x", "+", "yB", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.NoiseMultiplier.__init__": [[43, 47], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "refinegan.NoiseMultiplier.module.weight.data.fill_"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NoiseMultiplier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "module", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.NoiseMultiplier.forward": [[48, 51], ["refinegan.NoiseMultiplier.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.Blur.__init__": [[53, 57], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "refinegan.Blur.register_buffer"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "f", "=", "torch", ".", "Tensor", "(", "[", "1", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "register_buffer", "(", "'f'", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.Blur.forward": [[58, 62], ["kornia.filters.filter2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "f", "=", "self", ".", "f", "\n", "f", "=", "f", "[", "None", ",", "None", ",", ":", "]", "*", "f", "[", "None", ",", ":", ",", "None", "]", "\n", "return", "filter2d", "(", "x", ",", "f", ",", "normalized", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.ToRGB.__init__": [[64, 72], ["torch.Module.__init__", "custom_layers.EqualizedConv2d"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "actvn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "EqualizedConv2d", "(", "in_channel", ",", "\n", "3", ",", "\n", "1", ",", "\n", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ")", "\n", "self", ".", "actvn", "=", "actvn", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.ToRGB.forward": [[73, 80], ["refinegan.ToRGB.conv", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "skip", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "\n", "if", "self", ".", "actvn", ":", "\n", "            ", "out", "=", "torch", ".", "sigmoid", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.MappingLayer.__init__": [[82, 92], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "refinegan.MappingLayer.FC.append", "custom_layers.EqualizedLinear"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimIn", ",", "dimLatent", ",", "nLayers", ",", "leakyReluLeak", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "MappingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "FC", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "inDim", "=", "dimIn", "\n", "for", "i", "in", "range", "(", "nLayers", ")", ":", "\n", "            ", "self", ".", "FC", ".", "append", "(", "EqualizedLinear", "(", "inDim", ",", "dimLatent", ",", "lrMul", "=", "0.01", ",", "equalized", "=", "True", ",", "initBiasToZero", "=", "True", ")", ")", "\n", "inDim", "=", "dimLatent", "\n", "\n", "", "self", ".", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "leakyReluLeak", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.MappingLayer.forward": [[93, 98], ["refinegan.MappingLayer.activation", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "FC", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "layer", "(", "x", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__": [[100, 146], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "custom_layers.NormalizationLayer", "refinegan.AdaIN", "refinegan.NoiseMultiplier", "refinegan.AdaIN", "refinegan.NoiseMultiplier", "custom_layers.EqualizedConv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.ModuleList", "torch.ModuleList", "refinegan.GNet.toRGBLayers.append", "refinegan.Blur", "torch.Sequential", "torch.Sequential", "refinegan.ToRGB", "torch.Upsample", "torch.Upsample", "refinegan.GNet.addScale"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.__init__", "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.addScale"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dimInput", ":", "int", "=", "256", ",", "\n", "dimHidden", ":", "int", "=", "256", ",", "\n", "dimMapping", ":", "int", "=", "256", ",", "\n", "nMappingLayers", ":", "int", "=", "4", ",", "\n", "leakyReluLeak", "=", "0.2", ",", "\n", "generationActivation", "=", "None", ",", "\n", "phiTruncation", "=", "0.5", ",", "\n", "gamma_avg", "=", "0.99", ")", ":", "\n", "\n", "        ", "super", "(", "GNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "step", "=", "0", "\n", "\n", "self", ".", "dimMapping", "=", "dimMapping", "\n", "self", ".", "scaleLayers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "noiseModulators", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "noramlizationLayer", "=", "NormalizationLayer", "(", ")", "\n", "\n", "self", ".", "adain00", "=", "AdaIN", "(", "dimMapping", ",", "dimInput", ")", "\n", "self", ".", "noiseMod00", "=", "NoiseMultiplier", "(", ")", "\n", "self", ".", "adain01", "=", "AdaIN", "(", "dimMapping", ",", "dimHidden", ")", "\n", "self", ".", "noiseMod01", "=", "NoiseMultiplier", "(", ")", "\n", "\n", "\n", "self", ".", "conv0", "=", "EqualizedConv2d", "(", "dimInput", ",", "dimHidden", ",", "3", ",", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ",", "padding", "=", "1", ")", "\n", "\n", "\n", "self", ".", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "leakyReluLeak", ")", "\n", "\n", "self", ".", "depthScales", "=", "[", "dimHidden", "]", "\n", "\n", "self", ".", "toRGBLayers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "toRGBLayers", ".", "append", "(", "ToRGB", "(", "dimHidden", ",", "actvn", "=", "False", ")", ")", "\n", "\n", "self", ".", "blur", "=", "Blur", "(", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "self", ".", "blur", ")", "\n", "\n", "self", ".", "depthlist", "=", "[", "256", ",", "256", ",", "128", ",", "64", "]", "\n", "\n", "for", "depth", "in", "self", ".", "depthlist", ":", "\n", "            ", "self", ".", "addScale", "(", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.set_device": [[148, 150], ["None"], "methods", ["None"], ["", "", "def", "set_device", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.addScale": [[151, 177], ["refinegan.GNet.scaleLayers.append", "refinegan.GNet.scaleLayers[].append", "refinegan.GNet.scaleLayers[].append", "refinegan.GNet.scaleLayers[].append", "refinegan.GNet.scaleLayers[].append", "refinegan.GNet.toRGBLayers.append", "refinegan.GNet.noiseModulators.append", "refinegan.GNet.noiseModulators[].append", "refinegan.GNet.noiseModulators[].append", "refinegan.GNet.depthScales.append", "torch.ModuleList", "torch.ModuleList", "custom_layers.EqualizedConv2d", "refinegan.AdaIN", "custom_layers.EqualizedConv2d", "refinegan.AdaIN", "refinegan.ToRGB", "torch.ModuleList", "torch.ModuleList", "refinegan.NoiseMultiplier", "refinegan.NoiseMultiplier"], "methods", ["None"], ["", "def", "addScale", "(", "self", ",", "dimNewScale", ")", ":", "\n", "\n", "        ", "lastDim", "=", "self", ".", "depthScales", "[", "-", "1", "]", "\n", "self", ".", "scaleLayers", ".", "append", "(", "nn", ".", "ModuleList", "(", ")", ")", "\n", "self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "EqualizedConv2d", "(", "lastDim", ",", "\n", "dimNewScale", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ")", ")", "\n", "\n", "self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "AdaIN", "(", "self", ".", "dimMapping", ",", "dimNewScale", ")", ")", "\n", "self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "EqualizedConv2d", "(", "dimNewScale", ",", "\n", "dimNewScale", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "equalized", "=", "True", ",", "\n", "initBiasToZero", "=", "True", ")", ")", "\n", "self", ".", "scaleLayers", "[", "-", "1", "]", ".", "append", "(", "AdaIN", "(", "self", ".", "dimMapping", ",", "dimNewScale", ")", ")", "\n", "\n", "self", ".", "toRGBLayers", ".", "append", "(", "ToRGB", "(", "dimNewScale", ",", "actvn", "=", "False", ")", ")", "\n", "\n", "self", ".", "noiseModulators", ".", "append", "(", "nn", ".", "ModuleList", "(", ")", ")", "\n", "self", ".", "noiseModulators", "[", "-", "1", "]", ".", "append", "(", "NoiseMultiplier", "(", ")", ")", "\n", "self", ".", "noiseModulators", "[", "-", "1", "]", ".", "append", "(", "NoiseMultiplier", "(", ")", ")", "\n", "self", ".", "depthScales", ".", "append", "(", "dimNewScale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.forward": [[178, 220], ["mapping.size", "feat.size", "refinegan.GNet.activation", "refinegan.GNet.adain00", "refinegan.GNet.conv0", "refinegan.GNet.activation", "refinegan.GNet.adain01", "enumerate", "int", "int", "custom_layers.Upscale2d", "refinegan.GNet.activation", "refinegan.GNet.activation", "numpy.log2", "numpy.log2", "refinegan.GNet.upsample"], "methods", ["home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.custom_layers.Upscale2d"], ["", "def", "forward", "(", "self", ",", "mapping", ",", "feat", ",", "img_size", ",", "output_size", ",", "alpha", ")", ":", "\n", "        ", "batchSize", "=", "mapping", ".", "size", "(", "0", ")", "\n", "feat_size", "=", "feat", ".", "size", "(", "2", ")", "\n", "\n", "feature", "=", "feat", "\n", "feature", "=", "self", ".", "activation", "(", "feature", ")", "\n", "feature", "=", "self", ".", "adain00", "(", "feature", ",", "mapping", ")", "\n", "feature", "=", "self", ".", "conv0", "(", "feature", ")", "# [batchSize, 256, 64, 64) -> # [batchSize, 256, 64, 64)", "\n", "\n", "feature", "=", "self", ".", "activation", "(", "feature", ")", "\n", "feature", "=", "self", ".", "adain01", "(", "feature", ",", "mapping", ")", "\n", "\n", "num_depth_scale", "=", "int", "(", "np", ".", "log2", "(", "output_size", ")", ")", "-", "int", "(", "np", ".", "log2", "(", "img_size", ")", ")", "\n", "\n", "# add different scales", "\n", "for", "nLayer", ",", "group", "in", "enumerate", "(", "self", ".", "scaleLayers", ")", ":", "\n", "            ", "if", "nLayer", "+", "1", ">", "num_depth_scale", ":", "\n", "                ", "break", "\n", "\n", "", "skip", "=", "self", ".", "toRGBLayers", "[", "nLayer", "]", "(", "feature", ")", "# calculate the last second feature", "\n", "\n", "noiseMod", "=", "self", ".", "noiseModulators", "[", "nLayer", "]", "# current noise module", "\n", "feature", "=", "Upscale2d", "(", "feature", ")", "# Upsample (nearest neighborhood instead of biniliear)", "\n", "#             feature = group[0](feature) + noiseMod[0](torch.randn((batchSize, 1,", "\n", "#                                                       feature.size(2),", "\n", "#                                                       feature.size(3)), device=mapping.device)) # inject noise", "\n", "feature", "=", "group", "[", "0", "]", "(", "feature", ")", "\n", "feature", "=", "self", ".", "activation", "(", "feature", ")", "# activation function", "\n", "feature", "=", "group", "[", "1", "]", "(", "feature", ",", "mapping", ")", "# adaptive instance normalization", "\n", "#             feature = group[2](feature) + noiseMod[1](torch.randn((batchSize, 1,", "\n", "#                                                       feature.size(2),", "\n", "#                                                       feature.size(3)), device=mapping.device)) # inject noise", "\n", "feature", "=", "group", "[", "2", "]", "(", "feature", ")", "\n", "feature", "=", "self", ".", "activation", "(", "feature", ")", "# activation function", "\n", "feature", "=", "group", "[", "3", "]", "(", "feature", ",", "mapping", ")", "# adaptive instance normalization", "\n", "\n", "", "if", "num_depth_scale", "==", "0", ":", "\n", "            ", "rgb", "=", "self", ".", "toRGBLayers", "[", "num_depth_scale", "]", "(", "feature", ")", "\n", "", "else", ":", "# FIXME: add upsample", "\n", "            ", "rgb", "=", "(", "1", "-", "alpha", ")", "*", "self", ".", "upsample", "(", "skip", ")", "+", "alpha", "*", "self", ".", "toRGBLayers", "[", "num_depth_scale", "]", "(", "feature", ")", "\n", "\n", "", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.GNet.getOutputSize": [[221, 225], ["len"], "methods", ["None"], ["", "def", "getOutputSize", "(", "self", ")", ":", "\n", "\n", "        ", "side", "=", "2", "**", "(", "2", "+", "len", "(", "self", ".", "toRGBLayers", ")", ")", "\n", "return", "(", "side", ",", "side", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Xuanmeng-Zhang_MVCGAN.generators.refinegan.kaiming_leaky_init": [[9, 13], ["classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["def", "kaiming_leaky_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0.2", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "\n"]]}