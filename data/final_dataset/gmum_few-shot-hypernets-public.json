{"home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.metrics_explorer.metrics_dict_to_df": [[35, 52], ["metrics_dict.items", "pandas.DataFrame", "enumerate", "rows.extend", "isinstance", "numpy.mean", "args_dict.items", "ak.startswith"], "function", ["None"], ["def", "metrics_dict_to_df", "(", "\n", "experiment_name", ":", "str", ",", "\n", "metrics_dict", ":", "Dict", "[", "str", ",", "List", "[", "Union", "[", "float", ",", "List", "[", "float", "]", "]", "]", "]", ",", "\n", "args_dict", ":", "Dict", "[", "str", ",", "Any", "]", "\n", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "for", "m_name", ",", "values", "in", "metrics_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "e", ",", "vls", "in", "enumerate", "(", "values", ")", ":", "\n", "            ", "vls", "=", "[", "vls", "]", "if", "not", "isinstance", "(", "vls", ",", "list", ")", "else", "[", "np", ".", "mean", "(", "vls", ")", "]", "#vls", "\n", "rows", ".", "extend", "(", "[", "{", "\n", "\"exp_name\"", ":", "experiment_name", ",", "\n", "\"met_name\"", ":", "m_name", ",", "\n", "\"epoch\"", ":", "e", ",", "\n", "\"value\"", ":", "v", ",", "\n", "**", "{", "ak", ":", "av", "for", "(", "ak", ",", "av", ")", "in", "args_dict", ".", "items", "(", ")", "if", "ak", ".", "startswith", "(", "HN_PREFIX", ")", "}", "\n", "}", "for", "v", "in", "vls", "]", ")", "\n", "", "", "return", "pd", ".", "DataFrame", "(", "rows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.metrics_explorer.load_experiment": [[54, 61], ["streamlit.cache", "json.load", "json.load", "metrics_explorer.metrics_dict_to_df"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.metrics_explorer.metrics_dict_to_df"], ["", "@", "st", ".", "cache", "(", "allow_output_mutation", "=", "True", ",", "suppress_st_warning", "=", "True", ")", "\n", "def", "load_experiment", "(", "experiment_path", ":", "Path", ")", "->", "Tuple", "[", "Dict", ",", "pd", ".", "DataFrame", "]", ":", "\n", "    ", "with", "(", "experiment_path", "/", "METRICS_FILE", ")", ".", "open", "(", "\"r\"", ")", "as", "f", ":", "\n", "        ", "metrics", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "(", "experiment_path", "/", "ARGS_FILE", ")", ".", "open", "(", "\"r\"", ")", "as", "f", ":", "\n", "        ", "args", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "args", ",", "metrics_dict_to_df", "(", "experiment_name", "=", "experiment_path", ".", "name", ",", "metrics_dict", "=", "metrics", ",", "args_dict", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.hn_args.add_hn_args_to_parser": [[5, 70], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["def", "add_hn_args_to_parser", "(", "parser", ":", "ArgumentParser", ")", "->", "ArgumentParser", ":", "\n", "\n", "    ", "hypershot_args", "=", "parser", ".", "add_argument_group", "(", "\"HyperShot-related arguments\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "'--hn_adaptation_strategy'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "choices", "=", "[", "'increasing_alpha'", "]", ",", "help", "=", "'strategy used for manipulating alpha parameter'", ")", "\n", "hypershot_args", ".", "add_argument", "(", "'--hn_alpha_step'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'step used to increase alpha from 0 to 1 during adaptation to new task'", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_hidden_size\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "\"HN hidden size\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_tn_hidden_size\"", ",", "type", "=", "int", ",", "default", "=", "120", ",", "help", "=", "\"TN hidden size\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_taskset_size\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Taskset size\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_neck_len\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Number of layers in the neck of the hypernet\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_head_len\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Number of layers in the heads of the hypernet, must be >= 1\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_taskset_repeats\"", ",", "type", "=", "str", ",", "default", "=", "\"10:10-20:5-30:2\"", ",", "help", "=", "\"A sequence of <epoch:taskset_repeats_until_the_epoch>\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_taskset_print_every\"", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "\"It's a utility\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_detach_ft_in_hn\"", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "\"Detach FE output before hypernetwork in training *after* this epoch\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_detach_ft_in_tn\"", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "\"Detach FE output before target network in training *after* this epoch\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_tn_depth\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Depth of target network\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_dropout\"", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "\"Dropout probability in hypernet\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_sup_aggregation\"", ",", "type", "=", "str", ",", "default", "=", "\"concat\"", ",", "choices", "=", "ALLOWED_AGGREGATIONS", ",", "help", "=", "\"How to aggregate supports from the same class\"", ")", "\n", "\n", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_transformer_layers_no\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of layers in transformer\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_transformer_heads_no\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of attention heads in transformer\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_transformer_feedforward_dim\"", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "\"Transformer's feedforward dimensionality\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_attention_embedding\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Utilize attention-based embedding\"", ")", "\n", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_kernel_layers_no\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Depth of a kernel network\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_kernel_hidden_dim\"", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "\"Hidden dimension of a kernel network\"", ")", "\n", "\n", "hypershot_args", ".", "add_argument", "(", "\"--kernel_transformer_layers_no\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of layers in kernel's transformer\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--kernel_transformer_heads_no\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of attention heads in kernel's transformer\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--kernel_transformer_feedforward_dim\"", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "\"Kernel transformer's feedforward dimensionality\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_kernel_out_size\"", ",", "type", "=", "int", ",", "default", "=", "1600", ",", "help", "=", "\"Kernel output dim\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_kernel_invariance\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Should the HyperNet's kernel be sequence invariant\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_kernel_invariance_type\"", ",", "default", "=", "'attention'", ",", "choices", "=", "[", "'attention'", ",", "'convolution'", "]", ",", "help", "=", "\"The type of invariance operation for the kernel's output\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_kernel_convolution_output_dim\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "\"Kernel convolution's output dim\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_kernel_invariance_pooling\"", ",", "default", "=", "'mean'", ",", "choices", "=", "[", "'average'", ",", "'mean'", ",", "'min'", ",", "'max'", "]", ",", "help", "=", "\"The type of invariance operation for the kernel's output\"", ")", "\n", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_use_support_embeddings\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Concatenate support embeddings with kernel features\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_no_self_relations\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Multiply matrix K to remove self relations (i.e., kernel(x_i, x_i))\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_use_cosine_distance\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Use cosine distance instead of a more specific kernel\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_use_scalar_product\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Use scalar product instead of a more specific kernel\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_use_cosine_nn_kernel\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Use cosine distance in NNKernel\"", ")", "\n", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_val_epochs\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Epochs for finetuning on support set during validation. We recommend to set this to >0 only during testing.\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_val_lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "\"LR for finetuning on support set during validation\"", ")", "\n", "hypershot_args", ".", "add_argument", "(", "\"--hn_val_optim\"", ",", "type", "=", "str", ",", "default", "=", "\"adam\"", ",", "choices", "=", "[", "\"adam\"", ",", "\"sgd\"", "]", ",", "help", "=", "\"Optimizer for finetuning on support set during validation\"", ")", "\n", "\n", "hypermaml_args", "=", "parser", ".", "add_argument_group", "(", "\"HyperMAML-related arguments\"", ")", "\n", "\n", "hypermaml_args", ".", "add_argument", "(", "'--hm_use_class_batch_input'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Strategy for handling query set embeddings as an input of hyper network'", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_enhance_embeddings\"", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "\"Flag that indicates if embeddings should be concatenated with logits and labels\"", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_update_operator\"", ",", "type", "=", "str", ",", "default", "=", "'minus'", ",", "choices", "=", "[", "'minus'", ",", "'plus'", ",", "'multiply'", "]", ",", "help", "=", "\"Add BatchNorm to hypernet\"", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "'--hm_lambda'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'Regularization coefficient for the output of the hypernet'", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "'--hm_save_delta_params'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'saving delta parameters'", ")", "\n", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_maml_warmup\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Train the model in MAML way only at the beggining of the training\"", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_maml_update_feature_net\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Train feature net in the inner loop of MAML\"", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_maml_warmup_epochs\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"The first n epochs where model is trained in MAML way only\"", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_maml_warmup_switch_epochs\"", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "\"The number of epochs for switching from MAML to HyperMAML\"", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_load_feature_net\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Load feature network from file\"", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_feature_net_path\"", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"File with feature network\"", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_detach_feature_net\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Freeze feature network\"", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_detach_before_hyper_net\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Do not calculate gradient which comes from hypernetwork\"", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_support_set_loss\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Use both query and support data when calculating loss\"", ")", "\n", "hypermaml_args", ".", "add_argument", "(", "\"--hm_set_forward_with_adaptation\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Adapt network before test\"", ")", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test_uncertainty.ECELoss.__init__": [[53, 61], ["torch.Module.__init__", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["def", "__init__", "(", "self", ",", "n_bins", "=", "15", ")", ":", "\n", "        ", "\"\"\"\n        n_bins (int): number of confidence interval bins\n        \"\"\"", "\n", "super", "(", "ECELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bin_boundaries", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "n_bins", "+", "1", ")", "\n", "self", ".", "bin_lowers", "=", "bin_boundaries", "[", ":", "-", "1", "]", "\n", "self", ".", "bin_uppers", "=", "bin_boundaries", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test_uncertainty.ECELoss.calibrate": [[62, 75], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.Softplus", "torch.Softplus", "torch.Softplus", "torch.Softplus", "torch.optim.LBFGS.step", "torch.optim.LBFGS.step", "torch.optim.LBFGS.step", "torch.optim.LBFGS.step", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.CrossEntropyLoss().cuda.", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.optim.LBFGS.zero_grad", "torch.optim.LBFGS.zero_grad", "torch.optim.LBFGS.zero_grad", "torch.optim.LBFGS.zero_grad", "nn.CrossEntropyLoss().cuda.backward", "torch.ones.expand_as", "torch.ones.expand_as", "torch.ones.expand_as", "torch.ones.expand_as"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "calibrate", "(", "self", ",", "logits", ",", "labels", ",", "iterations", "=", "50", ",", "lr", "=", "0.01", ")", ":", "\n", "        ", "temperature_raw", "=", "torch", ".", "ones", "(", "1", ",", "requires_grad", "=", "True", ",", "device", "=", "\"cuda\"", ")", "\n", "nll_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "LBFGS", "(", "[", "temperature_raw", "]", ",", "lr", "=", "lr", ",", "max_iter", "=", "iterations", ")", "\n", "softplus", "=", "nn", ".", "Softplus", "(", ")", "#temperature must be > zero, Softplus could be used", "\n", "def", "closure", "(", ")", ":", "\n", "            ", "if", "torch", ".", "is_grad_enabled", "(", ")", ":", "optimizer", ".", "zero_grad", "(", ")", "\n", "#loss = nll_criterion(logits / softplus(temperature_raw.expand_as(logits)), labels)", "\n", "loss", "=", "nll_criterion", "(", "logits", "/", "temperature_raw", ".", "expand_as", "(", "logits", ")", ",", "labels", ")", "\n", "if", "loss", ".", "requires_grad", ":", "loss", ".", "backward", "(", ")", "\n", "return", "loss", "\n", "", "optimizer", ".", "step", "(", "closure", ")", "\n", "return", "temperature_raw", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test_uncertainty.ECELoss.forward": [[76, 95], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "predictions.eq", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "zip", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "in_bin.float().mean", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "confidences.gt", "confidences.le", "in_bin.float().mean.item", "accuracies[].float().mean", "confidences[].mean", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "bin_lower.item", "bin_upper.item", "in_bin.float", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "accuracies[].float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ",", "temperature", "=", "1.0", ",", "onevsrest", "=", "False", ")", ":", "\n", "        ", "logits_scaled", "=", "logits", "/", "temperature", "\n", "if", "(", "onevsrest", ")", ":", "\n", "            ", "softmaxes", "=", "torch", ".", "sigmoid", "(", "logits_scaled", ")", "/", "torch", ".", "sum", "(", "torch", ".", "sigmoid", "(", "logits_scaled", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "softmaxes", "=", "torch", ".", "softmax", "(", "logits_scaled", ",", "dim", "=", "1", ")", "\n", "\n", "", "confidences", ",", "predictions", "=", "torch", ".", "max", "(", "softmaxes", ",", "1", ")", "\n", "accuracies", "=", "predictions", ".", "eq", "(", "labels", ")", "\n", "ece", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "logits", ".", "device", ")", "\n", "for", "bin_lower", ",", "bin_upper", "in", "zip", "(", "self", ".", "bin_lowers", ",", "self", ".", "bin_uppers", ")", ":", "\n", "# Calculated |confidence - accuracy| in each bin", "\n", "            ", "in_bin", "=", "confidences", ".", "gt", "(", "bin_lower", ".", "item", "(", ")", ")", "*", "confidences", ".", "le", "(", "bin_upper", ".", "item", "(", ")", ")", "\n", "prop_in_bin", "=", "in_bin", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "if", "prop_in_bin", ".", "item", "(", ")", ">", "0", ":", "\n", "                ", "accuracy_in_bin", "=", "accuracies", "[", "in_bin", "]", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "avg_confidence_in_bin", "=", "confidences", "[", "in_bin", "]", ".", "mean", "(", ")", "\n", "ece", "+=", "torch", ".", "abs", "(", "avg_confidence_in_bin", "-", "accuracy_in_bin", ")", "*", "prop_in_bin", "\n", "", "", "return", "ece", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test_uncertainty._set_seed": [[26, 38], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "print", "str"], "function", ["None"], ["def", "_set_seed", "(", "seed", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "if", "(", "seed", "!=", "0", ")", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "if", "(", "verbose", ")", ":", "print", "(", "\"[INFO] Setting SEED: \"", "+", "str", "(", "seed", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "(", "verbose", ")", ":", "print", "(", "\"[INFO] Setting SEED: None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test_uncertainty.get_logits_targets": [[96, 226], ["dict", "methods.maml.MAML.cuda", "methods.baselinefinetune.BaselineFinetune", "data.datamgr.SetDataManager", "data.datamgr.SetDataManager.get_data_loader", "methods.maml.MAML.eval", "list", "list", "enumerate", "os.path.join", "data.init_loader", "list", "list", "feat_loader.init_loader.keys", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "methods.baselinefinetune.BaselineFinetune", "io_utils.get_assigned_file", "io_utils.get_best_file", "torch.load", "torch.load", "torch.load", "torch.load", "methods.maml.MAML.load_state_dict", "print", "str", "methods.maml.MAML.get_logits().detach", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "list.append", "list.append", "checkpoint_dir.replace", "random.sample", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "methods.maml.MAML.set_forward().detach", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "list.append", "list.append", "methods.protonet.ProtoNet", "numpy.random.permutation().tolist", "torch.from_numpy.append", "numpy.array", "methods.DKT.DKT", "str", "methods.maml.MAML.get_logits", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "methods.maml.MAML.set_forward", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "methods.matchingnet.MatchingNet", "numpy.repeat", "numpy.random.permutation", "numpy.squeeze", "numpy.repeat", "methods.relationnet.RelationNet", "range", "len", "range", "range", "methods.maml.MAML", "ValueError"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.SetDataManager.get_data_loader", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.feature_loader.init_loader", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.get_assigned_file", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.get_best_file", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.maml.MAML.get_logits", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward"], ["", "", "def", "get_logits_targets", "(", "params", ")", ":", "\n", "    ", "acc_all", "=", "[", "]", "\n", "iter_num", "=", "600", "\n", "few_shot_params", "=", "dict", "(", "n_way", "=", "params", ".", "test_n_way", ",", "n_support", "=", "params", ".", "n_shot", ")", "\n", "\n", "if", "params", ".", "dataset", "in", "[", "'omniglot'", ",", "'cross_char'", "]", ":", "\n", "        ", "assert", "params", ".", "model", "==", "'Conv4'", "and", "not", "params", ".", "train_aug", ",", "'omniglot only support Conv4 without augmentation'", "\n", "params", ".", "model", "=", "'Conv4S'", "\n", "\n", "", "if", "params", ".", "method", "==", "'baseline'", ":", "\n", "        ", "model", "=", "BaselineFinetune", "(", "model_dict", "[", "params", ".", "model", "]", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "==", "'baseline++'", ":", "\n", "        ", "model", "=", "BaselineFinetune", "(", "model_dict", "[", "params", ".", "model", "]", ",", "loss_type", "=", "'dist'", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "==", "'protonet'", ":", "\n", "        ", "model", "=", "ProtoNet", "(", "model_dict", "[", "params", ".", "model", "]", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "==", "'DKT'", ":", "\n", "        ", "model", "=", "DKT", "(", "model_dict", "[", "params", ".", "model", "]", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "==", "'matchingnet'", ":", "\n", "        ", "model", "=", "MatchingNet", "(", "model_dict", "[", "params", ".", "model", "]", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "in", "[", "'relationnet'", ",", "'relationnet_softmax'", "]", ":", "\n", "        ", "if", "params", ".", "model", "==", "'Conv4'", ":", "\n", "            ", "feature_model", "=", "backbone", ".", "Conv4NP", "\n", "", "elif", "params", ".", "model", "==", "'Conv6'", ":", "\n", "            ", "feature_model", "=", "backbone", ".", "Conv6NP", "\n", "", "elif", "params", ".", "model", "==", "'Conv4S'", ":", "\n", "            ", "feature_model", "=", "backbone", ".", "Conv4SNP", "\n", "", "else", ":", "\n", "            ", "feature_model", "=", "lambda", ":", "model_dict", "[", "params", ".", "model", "]", "(", "flatten", "=", "False", ")", "\n", "", "loss_type", "=", "'mse'", "if", "params", ".", "method", "==", "'relationnet'", "else", "'softmax'", "\n", "model", "=", "RelationNet", "(", "feature_model", ",", "loss_type", "=", "loss_type", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "in", "[", "'maml'", ",", "'maml_approx'", "]", ":", "\n", "        ", "backbone", ".", "ConvBlock", ".", "maml", "=", "True", "\n", "backbone", ".", "SimpleBlock", ".", "maml", "=", "True", "\n", "backbone", ".", "BottleneckBlock", ".", "maml", "=", "True", "\n", "backbone", ".", "ResNet", ".", "maml", "=", "True", "\n", "model", "=", "MAML", "(", "model_dict", "[", "params", ".", "model", "]", ",", "approx", "=", "(", "params", ".", "method", "==", "'maml_approx'", ")", ",", "**", "few_shot_params", ")", "\n", "if", "params", ".", "dataset", "in", "[", "'omniglot'", ",", "'cross_char'", "]", ":", "#maml use different parameter in omniglot", "\n", "            ", "model", ".", "n_task", "=", "32", "\n", "model", ".", "task_update_num", "=", "1", "\n", "model", ".", "train_lr", "=", "0.1", "\n", "", "", "else", ":", "\n", "       ", "raise", "ValueError", "(", "'Unknown method'", ")", "\n", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "checkpoint_dir", "=", "'%s/checkpoints/%s/%s_%s'", "%", "(", "configs", ".", "save_dir", ",", "params", ".", "dataset", ",", "params", ".", "model", ",", "params", ".", "method", ")", "\n", "if", "params", ".", "train_aug", ":", "\n", "        ", "checkpoint_dir", "+=", "'_aug'", "\n", "", "if", "not", "params", ".", "method", "in", "[", "'baseline'", ",", "'baseline++'", "]", ":", "\n", "        ", "checkpoint_dir", "+=", "'_%dway_%dshot'", "%", "(", "params", ".", "train_n_way", ",", "params", ".", "n_shot", ")", "\n", "\n", "#modelfile   = get_resume_file(checkpoint_dir)", "\n", "\n", "", "if", "not", "params", ".", "method", "in", "[", "'baseline'", ",", "'baseline++'", "]", ":", "\n", "        ", "if", "params", ".", "save_iter", "!=", "-", "1", ":", "\n", "            ", "modelfile", "=", "get_assigned_file", "(", "checkpoint_dir", ",", "params", ".", "save_iter", ")", "\n", "", "else", ":", "\n", "            ", "modelfile", "=", "get_best_file", "(", "checkpoint_dir", ")", "\n", "", "if", "modelfile", "is", "not", "None", ":", "\n", "            ", "tmp", "=", "torch", ".", "load", "(", "modelfile", ")", "\n", "model", ".", "load_state_dict", "(", "tmp", "[", "'state'", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[WARNING] Cannot find 'best_file.tar' in: \"", "+", "str", "(", "checkpoint_dir", ")", ")", "\n", "\n", "", "", "split", "=", "params", ".", "split", "\n", "if", "params", ".", "save_iter", "!=", "-", "1", ":", "\n", "        ", "split_str", "=", "split", "+", "\"_\"", "+", "str", "(", "params", ".", "save_iter", ")", "\n", "", "else", ":", "\n", "        ", "split_str", "=", "split", "\n", "", "if", "params", ".", "method", "in", "[", "'maml'", ",", "'maml_approx'", ",", "'DKT'", "]", ":", "#maml do not support testing with feature", "\n", "        ", "if", "'Conv'", "in", "params", ".", "model", ":", "\n", "            ", "if", "params", ".", "dataset", "in", "[", "'omniglot'", ",", "'cross_char'", "]", ":", "\n", "                ", "image_size", "=", "28", "\n", "", "else", ":", "\n", "                ", "image_size", "=", "84", "\n", "", "", "else", ":", "\n", "            ", "image_size", "=", "224", "\n", "\n", "", "datamgr", "=", "SetDataManager", "(", "image_size", ",", "n_eposide", "=", "iter_num", ",", "n_query", "=", "15", ",", "**", "few_shot_params", ")", "\n", "\n", "if", "params", ".", "dataset", "==", "'cross'", ":", "\n", "            ", "if", "split", "==", "'base'", ":", "\n", "                ", "loadfile", "=", "configs", ".", "data_dir", "[", "'miniImagenet'", "]", "+", "'all.json'", "\n", "", "else", ":", "\n", "                ", "loadfile", "=", "configs", ".", "data_dir", "[", "'CUB'", "]", "+", "split", "+", "'.json'", "\n", "", "", "elif", "params", ".", "dataset", "==", "'cross_char'", ":", "\n", "            ", "if", "split", "==", "'base'", ":", "\n", "                ", "loadfile", "=", "configs", ".", "data_dir", "[", "'omniglot'", "]", "+", "'noLatin.json'", "\n", "", "else", ":", "\n", "                ", "loadfile", "=", "configs", ".", "data_dir", "[", "'emnist'", "]", "+", "split", "+", "'.json'", "\n", "", "", "else", ":", "\n", "            ", "loadfile", "=", "configs", ".", "data_dir", "[", "params", ".", "dataset", "]", "+", "split", "+", "'.json'", "\n", "\n", "", "novel_loader", "=", "datamgr", ".", "get_data_loader", "(", "loadfile", ",", "aug", "=", "False", ")", "\n", "if", "params", ".", "adaptation", ":", "\n", "            ", "model", ".", "task_update_num", "=", "100", "#We perform adaptation on MAML simply by updating more times.", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "logits_list", "=", "list", "(", ")", "\n", "targets_list", "=", "list", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "novel_loader", ")", ":", "\n", "            ", "logits", "=", "model", ".", "get_logits", "(", "x", ")", ".", "detach", "(", ")", "\n", "targets", "=", "torch", ".", "tensor", "(", "np", ".", "repeat", "(", "range", "(", "params", ".", "test_n_way", ")", ",", "model", ".", "n_query", ")", ")", ".", "cuda", "(", ")", "\n", "logits_list", ".", "append", "(", "logits", ")", "#.cpu().detach().numpy())", "\n", "targets_list", ".", "append", "(", "targets", ")", "#.cpu().detach().numpy())", "\n", "", "", "else", ":", "\n", "        ", "novel_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ".", "replace", "(", "\"checkpoints\"", ",", "\"features\"", ")", ",", "split_str", "+", "\".hdf5\"", ")", "\n", "cl_data_file", "=", "feat_loader", ".", "init_loader", "(", "novel_file", ")", "\n", "logits_list", "=", "list", "(", ")", "\n", "targets_list", "=", "list", "(", ")", "\n", "n_query", "=", "15", "\n", "n_way", "=", "few_shot_params", "[", "'n_way'", "]", "\n", "n_support", "=", "few_shot_params", "[", "'n_support'", "]", "\n", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "for", "i", "in", "range", "(", "iter_num", ")", ":", "\n", "#----------------------", "\n", "            ", "select_class", "=", "random", ".", "sample", "(", "class_list", ",", "n_way", ")", "\n", "z_all", "=", "[", "]", "\n", "for", "cl", "in", "select_class", ":", "\n", "                ", "img_feat", "=", "cl_data_file", "[", "cl", "]", "\n", "perm_ids", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "img_feat", ")", ")", ".", "tolist", "(", ")", "\n", "z_all", ".", "append", "(", "[", "np", ".", "squeeze", "(", "img_feat", "[", "perm_ids", "[", "i", "]", "]", ")", "for", "i", "in", "range", "(", "n_support", "+", "n_query", ")", "]", ")", "# stack each batch", "\n", "", "z_all", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "z_all", ")", ")", "\n", "model", ".", "n_query", "=", "n_query", "\n", "logits", "=", "model", ".", "set_forward", "(", "z_all", ",", "is_feature", "=", "True", ")", ".", "detach", "(", ")", "\n", "targets", "=", "torch", ".", "tensor", "(", "np", ".", "repeat", "(", "range", "(", "n_way", ")", ",", "n_query", ")", ")", ".", "cuda", "(", ")", "\n", "logits_list", ".", "append", "(", "logits", ")", "\n", "targets_list", ".", "append", "(", "targets", ")", "\n", "#----------------------", "\n", "", "", "return", "torch", ".", "cat", "(", "logits_list", ",", "0", ")", ",", "torch", ".", "cat", "(", "targets_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test_uncertainty.main": [[228, 263], ["io_utils.parse_args", "print", "test_uncertainty.ECELoss", "list", "range", "list", "range", "print", "print", "print", "test_uncertainty._set_seed", "test_uncertainty.get_logits_targets", "ECELoss.calibrate().item", "print", "len", "numpy.mean", "test_uncertainty.get_logits_targets", "ECELoss.forward().item", "list.append", "print", "io_utils.parse_args", "list.append", "numpy.mean", "test_uncertainty._set_seed", "test_uncertainty._set_seed", "io_utils.parse_args", "numpy.mean", "numpy.std", "test_uncertainty.ECELoss.calibrate", "test_uncertainty.ECELoss.forward", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.parse_args", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test._set_seed", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test_uncertainty.get_logits_targets", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test_uncertainty.get_logits_targets", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.parse_args", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test._set_seed", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test._set_seed", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.parse_args", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test_uncertainty.ECELoss.calibrate", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "def", "main", "(", ")", ":", "\n", "    ", "params", "=", "parse_args", "(", "'test'", ")", "\n", "seed", "=", "params", ".", "seed", "\n", "repeat", "=", "params", ".", "repeat", "\n", "\n", "# 1. Find the value of temperature (calibration)    ", "\n", "print", "(", "\"Calibration: finding temperature hyperparameter...\"", ")", "\n", "ece_module", "=", "ECELoss", "(", ")", "\n", "temperature_list", "=", "list", "(", ")", "\n", "for", "_", "in", "range", "(", "repeat", ")", ":", "#repeat):", "\n", "        ", "_set_seed", "(", "0", ")", "# random seed", "\n", "logits", ",", "targets", "=", "get_logits_targets", "(", "parse_args", "(", "'test'", ")", ")", "\n", "temperature", "=", "ece_module", ".", "calibrate", "(", "logits", ",", "targets", ",", "iterations", "=", "300", ",", "lr", "=", "0.01", ")", ".", "item", "(", ")", "\n", "if", "(", "temperature", ">", "0", ")", ":", "temperature_list", ".", "append", "(", "temperature", ")", "\n", "print", "(", "\"Calibration: temperature\"", ",", "temperature", ",", "\"; mean temperature\"", ",", "np", ".", "mean", "(", "temperature_list", ")", ")", "\n", "# Filtering invalid temperatures (e.g. temp<0)", "\n", "", "if", "(", "len", "(", "temperature_list", ")", ">", "0", ")", ":", "temperature", "=", "np", ".", "mean", "(", "temperature_list", ")", "\n", "else", ":", "temperature", "=", "1.0", "\n", "\n", "# 2. Use the temperature to record the ECE", "\n", "# repeat the test N times changing the seed in range [seed, seed+repeat]", "\n", "ece_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "seed", ",", "seed", "+", "repeat", ")", ":", "\n", "        ", "if", "(", "seed", "!=", "0", ")", ":", "_set_seed", "(", "i", ")", "\n", "else", ":", "_set_seed", "(", "0", ")", "\n", "logits", ",", "targets", "=", "get_logits_targets", "(", "parse_args", "(", "'test'", ")", ")", "\n", "#ece = ece_module.forward(logits, targets, temperature, onevsrest=params.method=='DKT').item()", "\n", "ece", "=", "ece_module", ".", "forward", "(", "logits", ",", "targets", ",", "temperature", ",", "onevsrest", "=", "False", ")", ".", "item", "(", ")", "\n", "ece_list", ".", "append", "(", "ece", ")", "\n", "print", "(", "\"ECE:\"", ",", "np", ".", "mean", "(", "ece_list", ")", ",", "\"+-\"", ",", "np", ".", "std", "(", "ece_list", ")", ")", "\n", "\n", "# 3. Print the final ECE (averaged over all seeds)", "\n", "", "print", "(", "\"-----------------------------\"", ")", "\n", "print", "(", "'Seeds = %d | Overall ECE = %4.4f +- %4.4f'", "%", "(", "repeat", ",", "np", ".", "mean", "(", "ece_list", ")", ",", "np", ".", "std", "(", "ece_list", ")", ")", ")", "\n", "print", "(", "\"-----------------------------\"", ")", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test._set_seed": [[27, 39], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "print", "str"], "function", ["None"], ["def", "_set_seed", "(", "seed", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "if", "(", "seed", "!=", "0", ")", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "if", "(", "verbose", ")", ":", "print", "(", "\"[INFO] Setting SEED: \"", "+", "str", "(", "seed", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "(", "verbose", ")", ":", "print", "(", "\"[INFO] Setting SEED: None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test.feature_evaluation": [[40, 61], ["cl_data_file.keys", "random.sample", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model.set_forward_adaptation.data.cpu().numpy().argmax", "numpy.repeat", "numpy.random.permutation().tolist", "torch.from_numpy.append", "numpy.array", "model.set_forward_adaptation", "model.set_forward", "range", "numpy.mean", "model.set_forward_adaptation.data.cpu().numpy", "numpy.random.permutation", "numpy.squeeze", "len", "range", "model.set_forward_adaptation.data.cpu"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinefinetune.BaselineFinetune.set_forward_adaptation", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward"], ["", "", "def", "feature_evaluation", "(", "cl_data_file", ",", "model", ",", "n_way", "=", "5", ",", "n_support", "=", "5", ",", "n_query", "=", "15", ",", "adaptation", "=", "False", ")", ":", "\n", "    ", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "\n", "select_class", "=", "random", ".", "sample", "(", "class_list", ",", "n_way", ")", "\n", "z_all", "=", "[", "]", "\n", "for", "cl", "in", "select_class", ":", "\n", "        ", "img_feat", "=", "cl_data_file", "[", "cl", "]", "\n", "perm_ids", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "img_feat", ")", ")", ".", "tolist", "(", ")", "\n", "z_all", ".", "append", "(", "[", "np", ".", "squeeze", "(", "img_feat", "[", "perm_ids", "[", "i", "]", "]", ")", "for", "i", "in", "range", "(", "n_support", "+", "n_query", ")", "]", ")", "# stack each batch", "\n", "\n", "", "z_all", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "z_all", ")", ")", "\n", "\n", "model", ".", "n_query", "=", "n_query", "\n", "if", "adaptation", ":", "\n", "        ", "scores", "=", "model", ".", "set_forward_adaptation", "(", "z_all", ",", "is_feature", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "scores", ",", "_", "=", "model", ".", "set_forward", "(", "z_all", ",", "is_feature", "=", "True", ")", "\n", "", "pred", "=", "scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "y", "=", "np", ".", "repeat", "(", "range", "(", "n_way", ")", ",", "n_query", ")", "\n", "acc", "=", "np", ".", "mean", "(", "pred", "==", "y", ")", "*", "100", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test.single_test": [[63, 230], ["max", "print", "dict", "methods.hypernets.hypermaml.HyperMAML.cuda", "pathlib.Path().exists", "print", "int", "methods.baselinefinetune.BaselineFinetune", "print", "data.datamgr.SetDataManager", "data.datamgr.SetDataManager.get_data_loader", "methods.hypernets.hypermaml.HyperMAML.eval", "isinstance", "os.path.join", "data.init_loader", "range", "numpy.asarray", "numpy.mean", "numpy.std", "print", "open", "time.strftime", "f.write", "methods.baselinefinetune.BaselineFinetune", "pathlib.Path().exists", "checkpoint_dir.replace.replace", "pathlib.Path", "io_utils.get_assigned_file", "io_utils.get_best_file", "torch.load", "torch.load", "torch.load", "methods.hypernets.hypermaml.HyperMAML.load_state_dict", "print", "str", "list", "methods.hypernets.hypermaml.HyperMAML.test_loop", "methods.hypernets.hypermaml.HyperMAML.test_loop", "checkpoint_dir.replace.replace", "test.feature_evaluation", "np.asarray.append", "time.localtime", "methods.protonet.ProtoNet", "methods.hypernets.hypernet_types.keys", "methods.DKT.DKT", "pathlib.Path", "str", "numpy.sqrt", "methods.matchingnet.MatchingNet", "numpy.sqrt", "methods.relationnet.RelationNet", "methods.maml.MAML", "list", "hn_type", "methods.hypernets.hypernet_types.keys", "methods.hypernets.hypermaml.HyperMAML", "ValueError"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.SetDataManager.get_data_loader", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.feature_loader.init_loader", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.get_assigned_file", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.get_best_file", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.test_loop", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.test_loop", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test.feature_evaluation"], ["", "def", "single_test", "(", "params", ")", ":", "\n", "    ", "acc_all", "=", "[", "]", "\n", "\n", "iter_num", "=", "600", "\n", "\n", "n_query", "=", "max", "(", "1", ",", "int", "(", "16", "*", "params", ".", "test_n_way", "/", "params", ".", "train_n_way", ")", ")", "# if test_n_way is smaller than train_n_way, reduce n_query to keep batch size small", "\n", "print", "(", "\"n_query\"", ",", "n_query", ")", "\n", "few_shot_params", "=", "dict", "(", "n_way", "=", "params", ".", "test_n_way", ",", "n_support", "=", "params", ".", "n_shot", ",", "n_query", "=", "n_query", ")", "\n", "\n", "if", "params", ".", "dataset", "in", "[", "'omniglot'", ",", "'cross_char'", "]", ":", "\n", "        ", "assert", "params", ".", "model", "==", "'Conv4'", "and", "not", "params", ".", "train_aug", ",", "'omniglot only support Conv4 without augmentation'", "\n", "# params.model = 'Conv4S'", "\n", "\n", "", "if", "params", ".", "method", "==", "'baseline'", ":", "\n", "        ", "model", "=", "BaselineFinetune", "(", "model_dict", "[", "params", ".", "model", "]", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "==", "'baseline++'", ":", "\n", "        ", "model", "=", "BaselineFinetune", "(", "model_dict", "[", "params", ".", "model", "]", ",", "loss_type", "=", "'dist'", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "==", "'protonet'", ":", "\n", "        ", "model", "=", "ProtoNet", "(", "model_dict", "[", "params", ".", "model", "]", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "==", "'DKT'", ":", "\n", "        ", "model", "=", "DKT", "(", "model_dict", "[", "params", ".", "model", "]", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "==", "'matchingnet'", ":", "\n", "        ", "model", "=", "MatchingNet", "(", "model_dict", "[", "params", ".", "model", "]", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "in", "[", "'relationnet'", ",", "'relationnet_softmax'", "]", ":", "\n", "        ", "if", "params", ".", "model", "==", "'Conv4'", ":", "\n", "            ", "feature_model", "=", "backbone", ".", "Conv4NP", "\n", "", "elif", "params", ".", "model", "==", "'Conv6'", ":", "\n", "            ", "feature_model", "=", "backbone", ".", "Conv6NP", "\n", "", "elif", "params", ".", "model", "==", "'Conv4S'", ":", "\n", "            ", "feature_model", "=", "backbone", ".", "Conv4SNP", "\n", "", "else", ":", "\n", "            ", "feature_model", "=", "lambda", ":", "model_dict", "[", "params", ".", "model", "]", "(", "flatten", "=", "False", ")", "\n", "", "loss_type", "=", "'mse'", "if", "params", ".", "method", "==", "'relationnet'", "else", "'softmax'", "\n", "model", "=", "RelationNet", "(", "feature_model", ",", "loss_type", "=", "loss_type", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "method", "in", "[", "'maml'", ",", "'maml_approx'", "]", ":", "\n", "        ", "backbone", ".", "ConvBlock", ".", "maml", "=", "True", "\n", "backbone", ".", "SimpleBlock", ".", "maml", "=", "True", "\n", "backbone", ".", "BottleneckBlock", ".", "maml", "=", "True", "\n", "backbone", ".", "ResNet", ".", "maml", "=", "True", "\n", "model", "=", "MAML", "(", "model_dict", "[", "params", ".", "model", "]", ",", "params", "=", "params", ",", "approx", "=", "(", "params", ".", "method", "==", "'maml_approx'", ")", ",", "**", "few_shot_params", ")", "\n", "if", "params", ".", "dataset", "in", "[", "'omniglot'", ",", "'cross_char'", "]", ":", "#maml use different parameter in omniglot", "\n", "            ", "model", ".", "n_task", "=", "32", "\n", "model", ".", "task_update_num", "=", "1", "\n", "model", ".", "train_lr", "=", "0.1", "\n", "", "", "elif", "params", ".", "method", "in", "list", "(", "hypernet_types", ".", "keys", "(", ")", ")", ":", "\n", "        ", "few_shot_params", "[", "'n_query'", "]", "=", "15", "\n", "hn_type", ":", "Type", "[", "HyperNetPOC", "]", "=", "hypernet_types", "[", "params", ".", "method", "]", "\n", "model", "=", "hn_type", "(", "model_dict", "[", "params", ".", "model", "]", ",", "params", "=", "params", ",", "**", "few_shot_params", ")", "\n", "# model = HyperNetPOC(model_dict[params.model], **few_shot_params)", "\n", "", "elif", "params", ".", "method", "==", "'hyper_maml'", ":", "\n", "        ", "model", "=", "HyperMAML", "(", "model_dict", "[", "params", ".", "model", "]", ",", "params", "=", "params", ",", "approx", "=", "(", "params", ".", "method", "==", "'maml_approx'", ")", ",", "**", "few_shot_params", ")", "\n", "if", "params", ".", "dataset", "in", "[", "'omniglot'", ",", "'cross_char'", "]", ":", "# maml use different parameter in omniglot", "\n", "            ", "model", ".", "n_task", "=", "32", "\n", "model", ".", "train_lr", "=", "0.1", "\n", "", "", "else", ":", "\n", "       ", "raise", "ValueError", "(", "'Unknown method'", ")", "\n", "\n", "", "few_shot_params", "[", "\"n_query\"", "]", "=", "15", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "checkpoint_dir", "=", "'%s/checkpoints/%s/%s_%s'", "%", "(", "\n", "configs", ".", "save_dir", ",", "\n", "params", ".", "dataset", ",", "\n", "params", ".", "model", ",", "\n", "params", ".", "method", "\n", ")", "\n", "\n", "\n", "\n", "if", "params", ".", "train_aug", ":", "\n", "        ", "checkpoint_dir", "+=", "'_aug'", "\n", "", "if", "not", "params", ".", "method", "in", "[", "'baseline'", ",", "'baseline++'", "]", ":", "\n", "        ", "checkpoint_dir", "+=", "'_%dway_%dshot'", "%", "(", "params", ".", "train_n_way", ",", "params", ".", "n_shot", ")", "\n", "", "if", "params", ".", "checkpoint_suffix", "!=", "\"\"", ":", "\n", "        ", "checkpoint_dir", "=", "checkpoint_dir", "+", "\"_\"", "+", "params", ".", "checkpoint_suffix", "\n", "\n", "", "if", "params", ".", "dataset", "==", "\"cross\"", ":", "\n", "        ", "if", "not", "Path", "(", "checkpoint_dir", ")", ".", "exists", "(", ")", ":", "\n", "            ", "checkpoint_dir", "=", "checkpoint_dir", ".", "replace", "(", "\"cross\"", ",", "\"miniImagenet\"", ")", "\n", "\n", "", "", "assert", "Path", "(", "checkpoint_dir", ")", ".", "exists", "(", ")", ",", "checkpoint_dir", "\n", "\n", "#modelfile   = get_resume_file(checkpoint_dir)", "\n", "\n", "if", "not", "params", ".", "method", "in", "[", "'baseline'", ",", "'baseline++'", "]", ":", "\n", "        ", "if", "params", ".", "save_iter", "!=", "-", "1", ":", "\n", "            ", "modelfile", "=", "get_assigned_file", "(", "checkpoint_dir", ",", "params", ".", "save_iter", ")", "\n", "", "else", ":", "\n", "            ", "modelfile", "=", "get_best_file", "(", "checkpoint_dir", ")", "\n", "\n", "", "print", "(", "\"Using model file\"", ",", "modelfile", ")", "\n", "if", "modelfile", "is", "not", "None", ":", "\n", "            ", "tmp", "=", "torch", ".", "load", "(", "modelfile", ")", "\n", "model", ".", "load_state_dict", "(", "tmp", "[", "'state'", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[WARNING] Cannot find 'best_file.tar' in: \"", "+", "str", "(", "checkpoint_dir", ")", ")", "\n", "\n", "", "", "split", "=", "params", ".", "split", "\n", "if", "params", ".", "save_iter", "!=", "-", "1", ":", "\n", "        ", "split_str", "=", "split", "+", "\"_\"", "+", "str", "(", "params", ".", "save_iter", ")", "\n", "", "else", ":", "\n", "        ", "split_str", "=", "split", "\n", "\n", "", "eval_time", "=", "0", "\n", "if", "params", ".", "method", "in", "[", "'maml'", ",", "'maml_approx'", ",", "'hyper_maml'", ",", "'DKT'", "]", "+", "list", "(", "hypernet_types", ".", "keys", "(", ")", ")", ":", "#maml do not support testing with feature", "\n", "        ", "if", "'Conv'", "in", "params", ".", "model", ":", "\n", "            ", "if", "params", ".", "dataset", "in", "[", "'omniglot'", ",", "'cross_char'", "]", ":", "\n", "                ", "image_size", "=", "28", "\n", "", "else", ":", "\n", "                ", "image_size", "=", "84", "\n", "", "", "else", ":", "\n", "            ", "image_size", "=", "224", "\n", "\n", "", "datamgr", "=", "SetDataManager", "(", "image_size", ",", "n_eposide", "=", "iter_num", ",", "**", "few_shot_params", ")", "\n", "\n", "if", "params", ".", "dataset", "==", "'cross'", ":", "\n", "            ", "if", "split", "==", "'base'", ":", "\n", "                ", "loadfile", "=", "configs", ".", "data_dir", "[", "'miniImagenet'", "]", "+", "'all.json'", "\n", "", "else", ":", "\n", "                ", "loadfile", "=", "configs", ".", "data_dir", "[", "'CUB'", "]", "+", "split", "+", "'.json'", "\n", "", "", "elif", "params", ".", "dataset", "==", "'cross_char'", ":", "\n", "            ", "if", "split", "==", "'base'", ":", "\n", "                ", "loadfile", "=", "configs", ".", "data_dir", "[", "'omniglot'", "]", "+", "'noLatin.json'", "\n", "", "else", ":", "\n", "                ", "loadfile", "=", "configs", ".", "data_dir", "[", "'emnist'", "]", "+", "split", "+", "'.json'", "\n", "", "", "else", ":", "\n", "            ", "loadfile", "=", "configs", ".", "data_dir", "[", "params", ".", "dataset", "]", "+", "split", "+", "'.json'", "\n", "\n", "", "novel_loader", "=", "datamgr", ".", "get_data_loader", "(", "loadfile", ",", "aug", "=", "False", ")", "\n", "if", "params", ".", "adaptation", ":", "\n", "            ", "model", ".", "task_update_num", "=", "100", "if", "params", ".", "hn_val_epochs", "==", "-", "1", "else", "params", ".", "hn_val_epochs", "\n", "#We perform adaptation on MAML simply by updating more times.", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "single_test", "=", "True", "\n", "\n", "if", "isinstance", "(", "model", ",", "(", "MAML", ",", "HyperMAML", ")", ")", ":", "\n", "            ", "acc_mean", ",", "acc_std", ",", "eval_time", ",", "*", "_", "=", "model", ".", "test_loop", "(", "novel_loader", ",", "return_std", "=", "True", ",", "return_time", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "acc_mean", ",", "acc_std", ",", "*", "_", "=", "model", ".", "test_loop", "(", "novel_loader", ",", "return_std", "=", "True", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "novel_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ".", "replace", "(", "\"checkpoints\"", ",", "\"features\"", ")", ",", "split_str", "+", "\".hdf5\"", ")", "#defaut split = novel, but you can also test base or val classes", "\n", "cl_data_file", "=", "feat_loader", ".", "init_loader", "(", "novel_file", ")", "\n", "\n", "for", "i", "in", "range", "(", "iter_num", ")", ":", "\n", "            ", "acc", "=", "feature_evaluation", "(", "cl_data_file", ",", "model", ",", "adaptation", "=", "params", ".", "adaptation", ",", "**", "few_shot_params", ")", "\n", "acc_all", ".", "append", "(", "acc", ")", "\n", "\n", "", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "acc_all", ")", "\n", "print", "(", "'%d Test Acc = %4.2f%% +- %4.2f%%'", "%", "(", "iter_num", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", ")", "\n", "\n", "", "with", "open", "(", "'./record/results.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "timestamp", "=", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "aug_str", "=", "'-aug'", "if", "params", ".", "train_aug", "else", "''", "\n", "aug_str", "+=", "'-adapted'", "if", "params", ".", "adaptation", "else", "''", "\n", "if", "params", ".", "method", "in", "[", "'baseline'", ",", "'baseline++'", "]", ":", "\n", "            ", "exp_setting", "=", "'%s-%s-%s-%s%s %sshot %sway_test'", "%", "(", "params", ".", "dataset", ",", "split_str", ",", "params", ".", "model", ",", "params", ".", "method", ",", "aug_str", ",", "params", ".", "n_shot", ",", "params", ".", "test_n_way", ")", "\n", "", "else", ":", "\n", "            ", "exp_setting", "=", "'%s-%s-%s-%s%s %sshot %sway_train %sway_test'", "%", "(", "params", ".", "dataset", ",", "split_str", ",", "params", ".", "model", ",", "params", ".", "method", ",", "aug_str", ",", "params", ".", "n_shot", ",", "params", ".", "train_n_way", ",", "params", ".", "test_n_way", ")", "\n", "", "acc_str", "=", "'%d Test Acc = %4.2f%% +- %4.2f%%'", "%", "(", "iter_num", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", "\n", "f", ".", "write", "(", "'Time: %s, Setting: %s, Acc: %s \\n'", "%", "(", "timestamp", ",", "exp_setting", ",", "acc_str", ")", ")", "\n", "\n", "", "print", "(", "\"Test loop time:\"", ",", "eval_time", ")", "\n", "return", "acc_mean", ",", "eval_time", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test.perform_test": [[231, 260], ["list", "list", "range", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "print", "print", "print", "test.single_test", "list.append", "list.append", "test._set_seed", "test._set_seed"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test.single_test", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test._set_seed", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test._set_seed"], ["", "def", "perform_test", "(", "params", ")", ":", "\n", "    ", "seed", "=", "params", ".", "seed", "\n", "repeat", "=", "params", ".", "repeat", "\n", "# repeat the test N times changing the seed in range [seed, seed+repeat]", "\n", "accuracy_list", "=", "list", "(", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "seed", ",", "seed", "+", "repeat", ")", ":", "\n", "        ", "if", "(", "seed", "!=", "0", ")", ":", "\n", "            ", "_set_seed", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "_set_seed", "(", "0", ")", "\n", "", "acc", ",", "test_time", "=", "single_test", "(", "params", ")", "\n", "accuracy_list", ".", "append", "(", "acc", ")", "\n", "time_list", ".", "append", "(", "test_time", ")", "\n", "\n", "", "mean_acc", "=", "np", ".", "mean", "(", "accuracy_list", ")", "\n", "std_acc", "=", "np", ".", "std", "(", "accuracy_list", ")", "\n", "mean_time", "=", "np", ".", "mean", "(", "time_list", ")", "\n", "std_time", "=", "np", ".", "std", "(", "time_list", ")", "\n", "print", "(", "\"-----------------------------\"", ")", "\n", "print", "(", "\n", "f'Seeds = {repeat} | Overall Test Acc = {mean_acc:.2f} +- {std_acc:.2f}. Eval time: {mean_time:.2f} +- {std_time:.2f}'", ")", "\n", "print", "(", "\"-----------------------------\"", ")", "\n", "return", "{", "\n", "\"accuracy_mean\"", ":", "mean_acc", ",", "\n", "\"accuracy_std\"", ":", "std_acc", ",", "\n", "\"time_mean\"", ":", "mean_time", ",", "\n", "\"time_std\"", ":", "std_time", ",", "\n", "\"n_seeds\"", ":", "repeat", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test.main": [[262, 265], ["io_utils.parse_args", "test.perform_test"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.parse_args", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.test.perform_test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "params", "=", "parse_args", "(", "'test'", ")", "\n", "perform_test", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.save_features.save_features": [[21, 43], ["h5py.File", "h5py.File.create_dataset", "enumerate", "h5py.File.create_dataset", "h5py.File.close", "len", "x.cuda.cuda", "torch.autograd.Variable", "model", "model.data.cpu().numpy", "y.cpu().numpy", "print", "h5py.File.create_dataset", "model.size", "model.data.cpu", "y.cpu", "len", "list", "model.size", "model.size", "model.size"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["def", "save_features", "(", "model", ",", "data_loader", ",", "outfile", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "outfile", ",", "'w'", ")", "\n", "max_count", "=", "len", "(", "data_loader", ")", "*", "data_loader", ".", "batch_size", "\n", "all_labels", "=", "f", ".", "create_dataset", "(", "'all_labels'", ",", "(", "max_count", ",", ")", ",", "dtype", "=", "'i'", ")", "\n", "all_feats", "=", "None", "\n", "count", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'{:d}/{:d}'", ".", "format", "(", "i", ",", "len", "(", "data_loader", ")", ")", ")", "\n", "", "x", "=", "x", ".", "cuda", "(", ")", "\n", "x_var", "=", "Variable", "(", "x", ")", "\n", "feats", "=", "model", "(", "x_var", ")", "\n", "if", "all_feats", "is", "None", ":", "\n", "            ", "all_feats", "=", "f", ".", "create_dataset", "(", "'all_feats'", ",", "[", "max_count", "]", "+", "list", "(", "feats", ".", "size", "(", ")", "[", "1", ":", "]", ")", ",", "dtype", "=", "'f'", ")", "\n", "", "all_feats", "[", "count", ":", "count", "+", "feats", ".", "size", "(", "0", ")", "]", "=", "feats", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "all_labels", "[", "count", ":", "count", "+", "feats", ".", "size", "(", "0", ")", "]", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "count", "=", "count", "+", "feats", ".", "size", "(", "0", ")", "\n", "\n", "", "count_var", "=", "f", ".", "create_dataset", "(", "'count'", ",", "(", "1", ",", ")", ",", "dtype", "=", "'i'", ")", "\n", "count_var", "[", "0", "]", "=", "count", "\n", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.save_features.do_save_fts": [[44, 136], ["data.datamgr.SimpleDataManager", "data.datamgr.SimpleDataManager.get_data_loader", "backbone.Conv4SNP.cuda", "torch.load", "list", "enumerate", "backbone.Conv4SNP.load_state_dict", "backbone.Conv4SNP.eval", "os.path.dirname", "save_features.save_features", "list", "io_utils.get_assigned_file", "os.path.join", "os.path.join", "state.keys", "os.path.isdir", "os.makedirs", "methods.hypernets.hypernet_types.keys", "io_utils.get_resume_file", "print", "io_utils.get_best_file", "print", "checkpoint_dir.replace", "checkpoint_dir.replace", "backbone.Conv4NP", "ValueError", "key.replace", "state.pop", "state.pop", "backbone.Conv6NP", "str", "backbone.Conv4SNP"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.SetDataManager.get_data_loader", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.save_features.save_features", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.get_assigned_file", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.get_resume_file", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.get_best_file", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv4NP", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv6NP", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv4SNP"], ["", "def", "do_save_fts", "(", "params", ")", ":", "\n", "    ", "illegal_models", "=", "[", "\n", "\"maml\"", ",", "\"maml_approx\"", ",", "\"hyper_maml\"", ",", "\"DKT\"", ",", "\n", "]", "+", "list", "(", "hypernet_types", ".", "keys", "(", ")", ")", "\n", "assert", "params", ".", "method", "not", "in", "illegal_models", ",", "'maml do not support save_feature and run'", "\n", "\n", "if", "'Conv'", "in", "params", ".", "model", ":", "\n", "        ", "if", "params", ".", "dataset", "in", "[", "'omniglot'", ",", "'cross_char'", "]", ":", "\n", "            ", "image_size", "=", "28", "\n", "", "else", ":", "\n", "            ", "image_size", "=", "84", "\n", "", "", "else", ":", "\n", "        ", "image_size", "=", "224", "\n", "\n", "", "if", "params", ".", "dataset", "in", "[", "'omniglot'", ",", "'cross_char'", "]", ":", "\n", "        ", "assert", "params", ".", "model", "==", "'Conv4'", "and", "not", "params", ".", "train_aug", ",", "'omniglot only support Conv4 without augmentation'", "\n", "params", ".", "model", "=", "'Conv4S'", "\n", "\n", "", "split", "=", "params", ".", "split", "\n", "if", "params", ".", "dataset", "==", "'cross'", ":", "\n", "        ", "if", "split", "==", "'base'", ":", "\n", "            ", "loadfile", "=", "configs", ".", "data_dir", "[", "'miniImagenet'", "]", "+", "'all.json'", "\n", "", "else", ":", "\n", "            ", "loadfile", "=", "configs", ".", "data_dir", "[", "'CUB'", "]", "+", "split", "+", "'.json'", "\n", "", "", "elif", "params", ".", "dataset", "==", "'cross_char'", ":", "\n", "        ", "if", "split", "==", "'base'", ":", "\n", "            ", "loadfile", "=", "configs", ".", "data_dir", "[", "'omniglot'", "]", "+", "'noLatin.json'", "\n", "", "else", ":", "\n", "            ", "loadfile", "=", "configs", ".", "data_dir", "[", "'emnist'", "]", "+", "split", "+", "'.json'", "\n", "", "", "else", ":", "\n", "        ", "loadfile", "=", "configs", ".", "data_dir", "[", "params", ".", "dataset", "]", "+", "split", "+", "'.json'", "\n", "\n", "", "checkpoint_dir", "=", "'%s/checkpoints/%s/%s_%s'", "%", "(", "configs", ".", "save_dir", ",", "params", ".", "dataset", ",", "params", ".", "model", ",", "params", ".", "method", ")", "\n", "if", "params", ".", "train_aug", ":", "\n", "        ", "checkpoint_dir", "+=", "'_aug'", "\n", "", "if", "not", "params", ".", "method", "in", "[", "'baseline'", ",", "'baseline++'", "]", ":", "\n", "        ", "checkpoint_dir", "+=", "'_%dway_%dshot'", "%", "(", "params", ".", "train_n_way", ",", "params", ".", "n_shot", ")", "\n", "\n", "", "if", "params", ".", "checkpoint_suffix", "!=", "\"\"", ":", "\n", "        ", "checkpoint_dir", "=", "checkpoint_dir", "+", "\"_\"", "+", "params", ".", "checkpoint_suffix", "\n", "\n", "", "if", "params", ".", "save_iter", "!=", "-", "1", ":", "\n", "        ", "modelfile", "=", "get_assigned_file", "(", "checkpoint_dir", ",", "params", ".", "save_iter", ")", "\n", "", "elif", "params", ".", "method", "in", "[", "'baseline'", ",", "'baseline++'", "]", ":", "\n", "        ", "modelfile", "=", "get_resume_file", "(", "checkpoint_dir", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"looking for best file in\"", ",", "checkpoint_dir", ")", "\n", "modelfile", "=", "get_best_file", "(", "checkpoint_dir", ")", "\n", "print", "(", "\"got\"", ",", "modelfile", ")", "\n", "\n", "", "if", "params", ".", "save_iter", "!=", "-", "1", ":", "\n", "        ", "outfile", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ".", "replace", "(", "\"checkpoints\"", ",", "\"features\"", ")", ",", "\n", "split", "+", "\"_\"", "+", "str", "(", "params", ".", "save_iter", ")", "+", "\".hdf5\"", ")", "\n", "", "else", ":", "\n", "        ", "outfile", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ".", "replace", "(", "\"checkpoints\"", ",", "\"features\"", ")", ",", "split", "+", "\".hdf5\"", ")", "\n", "\n", "", "datamgr", "=", "SimpleDataManager", "(", "image_size", ",", "batch_size", "=", "64", ")", "\n", "data_loader", "=", "datamgr", ".", "get_data_loader", "(", "loadfile", ",", "aug", "=", "False", ")", "\n", "\n", "if", "params", ".", "method", "in", "[", "'relationnet'", ",", "'relationnet_softmax'", "]", ":", "\n", "        ", "if", "params", ".", "model", "==", "'Conv4'", ":", "\n", "            ", "model", "=", "backbone", ".", "Conv4NP", "(", ")", "\n", "", "elif", "params", ".", "model", "==", "'Conv6'", ":", "\n", "            ", "model", "=", "backbone", ".", "Conv6NP", "(", ")", "\n", "", "elif", "params", ".", "model", "==", "'Conv4S'", ":", "\n", "            ", "model", "=", "backbone", ".", "Conv4SNP", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "model_dict", "[", "params", ".", "model", "]", "(", "flatten", "=", "False", ")", "\n", "", "", "elif", "params", ".", "method", "in", "[", "'maml'", ",", "'maml_approx'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'MAML do not support save feature'", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "model_dict", "[", "params", ".", "model", "]", "(", ")", "\n", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "tmp", "=", "torch", ".", "load", "(", "modelfile", ")", "\n", "state", "=", "tmp", "[", "'state'", "]", "\n", "state_keys", "=", "list", "(", "state", ".", "keys", "(", ")", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "state_keys", ")", ":", "\n", "        ", "if", "\"feature.\"", "in", "key", ":", "\n", "            ", "newkey", "=", "key", ".", "replace", "(", "\"feature.\"", ",", "\n", "\"\"", ")", "# an architecture model has attribute 'feature', load architecture feature to backbone by casting name from 'feature.trunk.xx' to 'trunk.xx'", "\n", "state", "[", "newkey", "]", "=", "state", ".", "pop", "(", "key", ")", "\n", "", "else", ":", "\n", "            ", "state", ".", "pop", "(", "key", ")", "\n", "\n", "", "", "model", ".", "load_state_dict", "(", "state", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "outfile", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "save_features", "(", "model", ",", "data_loader", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.utils.one_hot": [[4, 6], ["torch.zeros().scatter_", "y.unsqueeze", "torch.zeros", "len"], "function", ["None"], ["def", "one_hot", "(", "y", ",", "num_class", ")", ":", "\n", "    ", "return", "torch", ".", "zeros", "(", "(", "len", "(", "y", ")", ",", "num_class", ")", ")", ".", "scatter_", "(", "1", ",", "y", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.utils.DBindex": [[7, 24], ["cl_data_file.keys", "len", "numpy.tile", "numpy.transpose", "numpy.sqrt", "range", "numpy.mean", "cl_means.append", "stds.append", "numpy.expand_dims", "numpy.sum", "DBs.append", "numpy.mean", "numpy.sqrt", "numpy.array", "len", "numpy.square", "numpy.max", "numpy.mean", "numpy.sum", "numpy.square", "range"], "function", ["None"], ["", "def", "DBindex", "(", "cl_data_file", ")", ":", "\n", "    ", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "cl_num", "=", "len", "(", "class_list", ")", "\n", "cl_means", "=", "[", "]", "\n", "stds", "=", "[", "]", "\n", "DBs", "=", "[", "]", "\n", "for", "cl", "in", "class_list", ":", "\n", "        ", "cl_means", ".", "append", "(", "np", ".", "mean", "(", "cl_data_file", "[", "cl", "]", ",", "axis", "=", "0", ")", ")", "\n", "stds", ".", "append", "(", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "cl_data_file", "[", "cl", "]", "-", "cl_means", "[", "-", "1", "]", ")", ",", "axis", "=", "1", ")", ")", ")", ")", "\n", "\n", "", "mu_i", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "cl_means", ")", ",", "axis", "=", "0", ")", ",", "(", "len", "(", "class_list", ")", ",", "1", ",", "1", ")", ")", "\n", "mu_j", "=", "np", ".", "transpose", "(", "mu_i", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "mdists", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "mu_i", "-", "mu_j", ")", ",", "axis", "=", "2", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "cl_num", ")", ":", "\n", "        ", "DBs", ".", "append", "(", "np", ".", "max", "(", "[", "(", "stds", "[", "i", "]", "+", "stds", "[", "j", "]", ")", "/", "mdists", "[", "i", ",", "j", "]", "for", "j", "in", "range", "(", "cl_num", ")", "if", "j", "!=", "i", "]", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "DBs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.utils.sparsity": [[25, 32], ["cl_data_file.keys", "numpy.mean", "cl_sparsity.append", "numpy.mean", "numpy.sum"], "function", ["None"], ["", "def", "sparsity", "(", "cl_data_file", ")", ":", "\n", "    ", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "cl_sparsity", "=", "[", "]", "\n", "for", "cl", "in", "class_list", ":", "\n", "        ", "cl_sparsity", ".", "append", "(", "np", ".", "mean", "(", "[", "np", ".", "sum", "(", "x", "!=", "0", ")", "for", "x", "in", "cl_data_file", "[", "cl", "]", "]", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "cl_sparsity", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.distLinear.__init__": [[22, 33], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.weight_norm.WeightNorm.apply", "torch.nn.utils.weight_norm.WeightNorm.apply", "torch.nn.utils.weight_norm.WeightNorm.apply"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ")", ":", "\n", "        ", "super", "(", "distLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "L", "=", "nn", ".", "Linear", "(", "indim", ",", "outdim", ",", "bias", "=", "False", ")", "\n", "self", ".", "class_wise_learnable_norm", "=", "True", "#See the issue#4&8 in the github", "\n", "if", "self", ".", "class_wise_learnable_norm", ":", "\n", "            ", "WeightNorm", ".", "apply", "(", "self", ".", "L", ",", "'weight'", ",", "dim", "=", "0", ")", "#split the weight update component to direction and norm", "\n", "\n", "", "if", "outdim", "<=", "200", ":", "\n", "            ", "self", ".", "scale_factor", "=", "2", ";", "#a fixed scale factor to scale the output of cos value into a reasonably large input for softmax", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_factor", "=", "10", ";", "#in omniglot, a larger scale factor is required to handle >1000 output classes.", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.distLinear.forward": [[34, 44], ["torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "x.div", "backbone.distLinear.L", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "backbone.distLinear.L.weight.data.div", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "x_normalized", "=", "x", ".", "div", "(", "x_norm", "+", "0.00001", ")", "\n", "if", "not", "self", ".", "class_wise_learnable_norm", ":", "\n", "            ", "L_norm", "=", "torch", ".", "norm", "(", "self", ".", "L", ".", "weight", ".", "data", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "self", ".", "L", ".", "weight", ".", "data", ")", "\n", "self", ".", "L", ".", "weight", ".", "data", "=", "self", ".", "L", ".", "weight", ".", "data", ".", "div", "(", "L_norm", "+", "0.00001", ")", "\n", "", "cos_dist", "=", "self", ".", "L", "(", "x_normalized", ")", "#matrix product by forward function, but when using WeightNorm, this also multiply the cosine distance by a class-wise learnable norm, see the issue#4&8 in the github", "\n", "scores", "=", "self", ".", "scale_factor", "*", "(", "cos_dist", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Flatten.__init__": [[46, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Flatten.forward": [[49, 51], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Linear_fw.__init__": [[54, 58], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "Linear_fw", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "#Lazy hack to add fast weight link", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Linear_fw.forward": [[59, 65], ["torch.linear", "torch.linear", "torch.linear", "super().forward"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ")", "#weight.fast (fast weight) is the temporaily adapted weight", "\n", "", "else", ":", "\n", "            ", "out", "=", "super", "(", "Linear_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv2d_fw.__init__": [[67, 72], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "if", "not", "self", ".", "bias", "is", "None", ":", "\n", "            ", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv2d_fw.forward": [[73, 86], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward", "torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "None", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.BatchNorm2d_fw.__init__": [[88, 92], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "super", "(", "BatchNorm2d_fw", ",", "self", ")", ".", "__init__", "(", "num_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.BatchNorm2d_fw.forward": [[93, 102], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.data.size", "x.data.size"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "running_mean", "=", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "running_var", "=", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ",", "training", "=", "True", ",", "momentum", "=", "1", ")", "\n", "#batch_norm momentum hack: follow hack of Kate Rakelly in pytorch-maml/src/layers.py", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "training", "=", "True", ",", "momentum", "=", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvBlock.__init__": [[106, 127], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "backbone.ConvBlock.parametrized_layers.append", "backbone.init_layer"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "pool", "=", "True", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C", ",", "self", ".", "BN", ",", "self", ".", "relu", "]", "\n", "if", "pool", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "pool", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "parametrized_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvBlock.forward": [[129, 132], ["backbone.ConvBlock.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.SimpleBlock.__init__": [[136, 174], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "backbone.SimpleBlock.parametrized_layers.append", "backbone.SimpleBlock.parametrized_layers.append", "backbone.init_layer", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "C2", ",", "self", ".", "BN1", ",", "self", ".", "BN2", "]", "\n", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "BNshortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.SimpleBlock.forward": [[175, 185], ["backbone.SimpleBlock.C1", "backbone.SimpleBlock.BN1", "backbone.SimpleBlock.relu1", "backbone.SimpleBlock.C2", "backbone.SimpleBlock.BN2", "backbone.SimpleBlock.relu2", "backbone.SimpleBlock.BNshortcut", "backbone.SimpleBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "BNshortcut", "(", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.BottleneckBlock.__init__": [[191, 230], ["torch.Module.__init__", "int", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "backbone.BottleneckBlock.parametrized_layers.append", "backbone.init_layer", "backbone.Conv2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bottleneckdim", "=", "int", "(", "outdim", "/", "4", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "bottleneckdim", ",", "bottleneckdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "Conv2d_fw", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "bottleneckdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "BN1", ",", "self", ".", "C2", ",", "self", ".", "BN2", ",", "self", ".", "C3", ",", "self", ".", "BN3", "]", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.BottleneckBlock.forward": [[232, 247], ["backbone.BottleneckBlock.C1", "backbone.BottleneckBlock.BN1", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.C2", "backbone.BottleneckBlock.BN2", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.C3", "backbone.BottleneckBlock.BN3", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C3", "(", "out", ")", "\n", "out", "=", "self", ".", "BN3", "(", "out", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvNet.__init__": [[250, 267], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append", "trunk.append", "trunk.append", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "flatten", "=", "True", ",", "pool", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "3", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "<", "4", ")", ")", "#only pooling for fist 4 layers", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "pool", ":", "\n", "            ", "trunk", ".", "append", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", ":", "int", "=", "outdim", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvNet.forward": [[268, 271], ["backbone.ConvNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvNetNopool.__init__": [[273, 284], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ")", ":", "\n", "        ", "super", "(", "ConvNetNopool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "3", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "in", "[", "0", ",", "1", "]", ")", ",", "padding", "=", "0", "if", "i", "in", "[", "0", ",", "1", "]", "else", "1", ")", "#only first two layer has pooling and no padding", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "[", "64", ",", "19", ",", "19", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvNetNopool.forward": [[285, 288], ["backbone.ConvNetNopool.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvNetS.__init__": [[290, 307], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvNetS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "1", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "<", "4", ")", ")", "#only pooling for fist 4 layers", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "#trunk.append(nn.BatchNorm1d(64))    #TODO remove", "\n", "#trunk.append(nn.ReLU(inplace=True)) #TODO remove", "\n", "#trunk.append(nn.Linear(64, 64))     #TODO remove", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "64", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvNetS.forward": [[308, 313], ["backbone.ConvNetS.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "#only use the first dimension", "\n", "out", "=", "self", ".", "trunk", "(", "out", ")", "\n", "#out = torch.tanh(out) #TODO remove", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvNetSNopool.__init__": [[315, 326], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ")", ":", "\n", "        ", "super", "(", "ConvNetSNopool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "1", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "in", "[", "0", ",", "1", "]", ")", ",", "padding", "=", "0", "if", "i", "in", "[", "0", ",", "1", "]", "else", "1", ")", "#only first two layer has pooling and no padding", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "[", "64", ",", "5", ",", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvNetSNopool.forward": [[327, 331], ["backbone.ConvNetSNopool.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "#only use the first dimension", "\n", "out", "=", "self", ".", "trunk", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ResNet.__init__": [[334, 375], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "backbone.init_layer", "backbone.init_layer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "trunk.append", "trunk.append", "block", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.init_layer", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "list_of_num_layers", ",", "list_of_out_dims", ",", "flatten", "=", "True", ")", ":", "\n", "# list_of_num_layers specifies number of layers in each stage", "\n", "# list_of_out_dims specifies number of output channel for each stage", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "list_of_num_layers", ")", "==", "4", ",", "'Can have only four stages'", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "conv1", "=", "Conv2d_fw", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "bn1", "=", "BatchNorm2d_fw", "(", "64", ")", "\n", "", "else", ":", "\n", "            ", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "init_layer", "(", "conv1", ")", "\n", "init_layer", "(", "bn1", ")", "\n", "\n", "\n", "trunk", "=", "[", "conv1", ",", "bn1", ",", "relu", ",", "pool1", "]", "\n", "\n", "indim", "=", "64", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "\n", "            ", "for", "j", "in", "range", "(", "list_of_num_layers", "[", "i", "]", ")", ":", "\n", "                ", "half_res", "=", "(", "i", ">=", "1", ")", "and", "(", "j", "==", "0", ")", "\n", "B", "=", "block", "(", "indim", ",", "list_of_out_dims", "[", "i", "]", ",", "half_res", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "indim", "=", "list_of_out_dims", "[", "i", "]", "\n", "\n", "", "", "if", "flatten", ":", "\n", "            ", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "trunk", ".", "append", "(", "avgpool", ")", "\n", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "self", ".", "final_feat_dim", "=", "indim", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "[", "indim", ",", "7", ",", "7", "]", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ResNet.forward": [[376, 379], ["backbone.ResNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv3.__init__": [[382, 387], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Conv2d", "(", "3", ",", "36", ",", "3", ",", "stride", "=", "2", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Conv2d", "(", "36", ",", "36", ",", "3", ",", "stride", "=", "2", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Conv2d", "(", "36", ",", "36", ",", "3", ",", "stride", "=", "2", ",", "dilation", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv3.return_clones": [[388, 393], ["backbone.Conv3.layer1.weight.data.clone().detach", "backbone.Conv3.layer2.weight.data.clone().detach", "backbone.Conv3.layer3.weight.data.clone().detach", "backbone.Conv3.layer1.weight.data.clone", "backbone.Conv3.layer2.weight.data.clone", "backbone.Conv3.layer3.weight.data.clone"], "methods", ["None"], ["", "def", "return_clones", "(", "self", ")", ":", "\n", "        ", "layer1_w", "=", "self", ".", "layer1", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "layer2_w", "=", "self", ".", "layer2", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "layer3_w", "=", "self", ".", "layer3", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "return", "[", "layer1_w", ",", "layer2_w", ",", "layer3_w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv3.assign_clones": [[394, 398], ["backbone.Conv3.layer1.weight.data.copy_", "backbone.Conv3.layer2.weight.data.copy_", "backbone.Conv3.layer3.weight.data.copy_"], "methods", ["None"], ["", "def", "assign_clones", "(", "self", ",", "weights_list", ")", ":", "\n", "        ", "self", ".", "layer1", ".", "weight", ".", "data", ".", "copy_", "(", "weights_list", "[", "0", "]", ")", "\n", "self", ".", "layer2", ".", "weight", ".", "data", ".", "copy_", "(", "weights_list", "[", "1", "]", ")", "\n", "self", ".", "layer3", ".", "weight", ".", "data", ".", "copy_", "(", "weights_list", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv3.forward": [[399, 405], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "out.view.view.view", "backbone.Conv3.layer1", "backbone.Conv3.layer2", "backbone.Conv3.layer3", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "layer1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "layer2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "layer3", "(", "out", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.BackboneKernel.__init__": [[409, 417], ["torch.Module.__init__", "backbone.BackboneKernel.create_model"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernelNoInner.create_model"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ":", "int", ",", "output_dim", ":", "int", ",", "num_layers", ":", "int", ",", "hidden_dim", ":", "int", ",", "flatten", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "flatten", "=", "flatten", "\n", "self", ".", "model", "=", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.BackboneKernel.create_model": [[418, 431], ["range", "modules.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modules.append", "modules.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Flatten", "torch.Flatten", "torch.Flatten"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "num_layers", ">=", "1", ",", "\"Number of hidden layers must be at least 1\"", "\n", "modules", "=", "[", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "if", "self", ".", "flatten", ":", "\n", "            ", "modules", "=", "[", "nn", ".", "Flatten", "(", ")", "]", "+", "modules", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "\n", "model", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.BackboneKernel.forward": [[432, 460], ["backbone.BackboneKernel.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "params", ")", ":", "\n", "        ", "r\"\"\"\n        Computes the covariance between x1 and x2.\n        This method should be imlemented by all Kernel subclasses.\n\n        Args:\n            :attr:`x1` (Tensor `n x d` or `b x n x d`):\n                First set of data\n            :attr:`x2` (Tensor `m x d` or `b x m x d`):\n                Second set of data\n            :attr:`diag` (bool):\n                Should the Kernel compute the whole kernel, or just the diag?\n            :attr:`last_dim_is_batch` (tuple, optional):\n                If this is true, it treats the last dimension of the data as another batch dimension.\n                (Useful for additive structure over the dimensions). Default: False\n\n        Returns:\n            :class:`Tensor` or :class:`gpytorch.lazy.LazyTensor`.\n                The exact size depends on the kernel's evaluation mode:\n\n                * `full_covar`: `n x m` or `b x n x m`\n                * `full_covar` with `last_dim_is_batch=True`: `k x n x m` or `b x k x n x m`\n                * `diag`: `n` or `b x n`\n                * `diag` with `last_dim_is_batch=True`: `k x n` or `b x k x n`\n        \"\"\"", "\n", "out", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvNet4WithKernel.__init__": [[463, 476], ["torch.Module.__init__", "backbone.ConvNet", "backbone.BackboneKernel"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConvNet4WithKernel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv_out_size", "=", "1600", "\n", "hn_kernel_layers_no", "=", "4", "\n", "hn_kernel_hidden_dim", "=", "64", "\n", "self", ".", "input_dim", "=", "conv_out_size", "\n", "self", ".", "output_dim", "=", "conv_out_size", "\n", "self", ".", "num_layers", "=", "hn_kernel_layers_no", "\n", "self", ".", "hidden_dim", "=", "hn_kernel_hidden_dim", "\n", "self", ".", "Conv4", "=", "ConvNet", "(", "4", ")", "\n", "self", ".", "nn_kernel", "=", "BackboneKernel", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ",", "\n", "self", ".", "num_layers", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "final_feat_dim", "=", "self", ".", "output_dim", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ConvNet4WithKernel.forward": [[476, 480], ["backbone.ConvNet4WithKernel.Conv4", "backbone.ConvNet4WithKernel.nn_kernel"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv4"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "Conv4", "(", "x", ")", "\n", "out", "=", "self", ".", "nn_kernel", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ResNet10WithKernel.__init__": [[484, 496], ["torch.Module.__init__", "backbone.ConvNet", "backbone.BackboneKernel"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ResNet10WithKernel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv_out_size", "=", "None", "\n", "hn_kernel_layers_no", "=", "None", "\n", "hn_kernel_hidden_dim", "=", "None", "\n", "self", ".", "input_dim", "=", "conv_out_size", "\n", "self", ".", "output_dim", "=", "conv_out_size", "\n", "self", ".", "num_layers", "=", "hn_kernel_layers_no", "\n", "self", ".", "hidden_dim", "=", "hn_kernel_hidden_dim", "\n", "self", ".", "Conv4", "=", "ConvNet", "(", "4", ")", "\n", "self", ".", "nn_kernel", "=", "BackboneKernel", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ",", "\n", "self", ".", "num_layers", ",", "self", ".", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ResNet10WithKernel.forward": [[497, 502], ["backbone.ResNet10WithKernel.Conv4", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "backbone.ResNet10WithKernel.nn_kernel", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv4"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "Conv4", "(", "x", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "flatten", "(", "x", ")", ",", "0", ")", "\n", "out", "=", "self", ".", "nn_kernel", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.init_layer": [[12, 20], ["isinstance", "L.weight.data.normal_", "isinstance", "math.sqrt", "L.weight.data.fill_", "L.bias.data.fill_", "float"], "function", ["None"], ["def", "init_layer", "(", "L", ")", ":", "\n", "# Initialization using fan-in", "\n", "    ", "if", "isinstance", "(", "L", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "L", ".", "kernel_size", "[", "0", "]", "*", "L", ".", "kernel_size", "[", "1", "]", "*", "L", ".", "out_channels", "\n", "L", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "n", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "L", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "L", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "L", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv4": [[504, 506], ["backbone.ConvNet"], "function", ["None"], ["", "", "def", "Conv4", "(", ")", ":", "\n", "    ", "return", "ConvNet", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv4Pool": [[507, 509], ["backbone.ConvNet"], "function", ["None"], ["", "def", "Conv4Pool", "(", ")", ":", "\n", "    ", "return", "ConvNet", "(", "4", ",", "pool", "=", "True", ")", "\n", "", "def", "Conv6", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv6": [[509, 511], ["backbone.ConvNet"], "function", ["None"], ["", "def", "Conv6", "(", ")", ":", "\n", "    ", "return", "ConvNet", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv4NP": [[512, 514], ["backbone.ConvNetNopool"], "function", ["None"], ["", "def", "Conv4NP", "(", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv6NP": [[515, 517], ["backbone.ConvNetNopool"], "function", ["None"], ["", "def", "Conv6NP", "(", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv4S": [[518, 520], ["backbone.ConvNetS"], "function", ["None"], ["", "def", "Conv4S", "(", ")", ":", "\n", "    ", "return", "ConvNetS", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv4SNP": [[521, 523], ["backbone.ConvNetSNopool"], "function", ["None"], ["", "def", "Conv4SNP", "(", ")", ":", "\n", "    ", "return", "ConvNetSNopool", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ResNet10": [[524, 526], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet10", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ResNet18": [[527, 529], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet18", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ResNet34": [[530, 532], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ResNet50": [[533, 535], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ResNet101": [[536, 538], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.Conv4WithKernel": [[539, 541], ["backbone.ConvNet4WithKernel"], "function", ["None"], ["", "def", "Conv4WithKernel", "(", ")", ":", "\n", "    ", "return", "ConvNet4WithKernel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.ResNetWithKernel": [[542, 544], ["backbone.ResNet10WithKernel"], "function", ["None"], ["", "def", "ResNetWithKernel", "(", ")", ":", "\n", "    ", "return", "ResNet10WithKernel", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.ParamHolder.__init__": [[33, 36], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "history", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.ParamHolder.__getattr__": [[37, 43], ["getattr", "print", "io_utils.ParamHolder.history.append"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "it", "=", "getattr", "(", "self", ".", "params", ",", "item", ")", "\n", "if", "item", "not", "in", "self", ".", "history", ":", "\n", "            ", "print", "(", "\"Getting\"", ",", "item", ",", "\"=\"", ",", "it", ")", "\n", "self", ".", "history", ".", "append", "(", "item", ")", "\n", "", "return", "it", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.ParamHolder.get_ignored_args": [[44, 47], ["sorted", "vars().keys", "vars"], "methods", ["None"], ["", "def", "get_ignored_args", "(", "self", ")", ":", "\n", "        ", "return", "sorted", "(", "[", "\n", "k", "for", "k", "in", "vars", "(", "self", ".", "params", ")", ".", "keys", "(", ")", "if", "k", "not", "in", "self", ".", "history", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.parse_args": [[49, 99], ["argparse.ArgumentParser", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser", "io_utils.ParamHolder", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.parse_args", "sorted", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "model_dict.keys", "list", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "hn_args.add_hn_args_to_parser.add_argument", "ValueError", "methods.hypernets.hypernet_types.keys"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.hn_args.add_hn_args_to_parser", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.parse_args"], ["", "", "def", "parse_args", "(", "script", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'few-shot script %s'", "%", "(", "script", ")", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Seed for Numpy and pyTorch. Default: 0 (None)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'CUB'", ",", "help", "=", "'CUB/miniImagenet/cross/omniglot/cross_char'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'Conv4'", ",", "help", "=", "'model: Conv{4|6}{Pool} / ResNet{10|18|34|50|101}'", ",", "choices", "=", "sorted", "(", "model_dict", ".", "keys", "(", ")", ")", ")", "# 50 and 101 are not used in the paper", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "default", "=", "'baseline'", ",", "choices", "=", "[", "'baseline'", ",", "'baseline++'", ",", "'DKT'", ",", "'protonet'", ",", "'matchingnet'", ",", "'relationnet'", ",", "'relationnet_softmax'", ",", "'maml'", ",", "'maml_approx'", ",", "'hyper_maml'", "]", "+", "list", "(", "hypernet_types", ".", "keys", "(", ")", ")", ",", "\n", "help", "=", "'baseline/baseline++/protonet/matchingnet/relationnet{_softmax}/maml{_approx}/hn_poc/hyper_maml'", ")", "#relationnet_softmax replace L2 norm with softmax to expedite training, maml_approx use first-order approximation in the gradient for efficiency", "\n", "parser", ".", "add_argument", "(", "'--train_n_way'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'class num to classify for training'", ")", "#baseline and baseline++ would ignore this parameter", "\n", "parser", ".", "add_argument", "(", "'--test_n_way'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'class num to classify for testing (validation) '", ")", "#baseline and baseline++ only use this parameter in finetuning", "\n", "parser", ".", "add_argument", "(", "'--n_shot'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'number of labeled data in each class, same as n_support'", ")", "#baseline and baseline++ only use this parameter in finetuning", "\n", "parser", ".", "add_argument", "(", "'--train_aug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'perform data augmentation or not during training '", ")", "#still required for save_features.py and test.py to find the model path correctly", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint_suffix\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Suffix for custom experiment differentiation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "\"Learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"adam\"", ",", "\"sgd\"", "]", ",", "help", "=", "\"Optimizer\"", ",", "default", "=", "\"adam\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_val_perms\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of task permutations in evaluation.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_scheduler\"", ",", "type", "=", "str", ",", "help", "=", "\"LR scheduler\"", ",", "default", "=", "\"none\"", ",", "choices", "=", "[", "\n", "\"multisteplr\"", ",", "\"none\"", ",", "\"cosine\"", ",", "\"reducelronplateau\"", "\n", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--milestones\"", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"Milestones for multisteplr\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--maml_save_feature_network\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"if to save feature net used in MAML\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--maml_adapt_classifier\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Adapt only the classifier during second gradient calculation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--evaluate_model\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Skip train phase and perform final test\"", ")", "\n", "\n", "if", "script", "==", "'train'", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "default", "=", "200", ",", "type", "=", "int", ",", "help", "=", "'total number of classes in softmax, only used in baseline'", ")", "#make it larger than the maximum label value in base class", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'Save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Starting epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--stop_epoch'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'Stopping epoch'", ")", "#for meta-learning methods, each epoch contains 100 episodes. The default epoch number is dataset dependent. See train.py", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue from previous trained model with largest epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue from baseline, neglected if resume is true'", ")", "#never used in the paper", "\n", "parser", ".", "add_argument", "(", "\"--es_epoch\"", ",", "type", "=", "int", ",", "default", "=", "250", ",", "\n", "help", "=", "\"Check if val accuracy threshold achieved at this epoch, stop if not.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--es_threshold\"", ",", "type", "=", "float", ",", "default", "=", "70.0", ",", "\n", "help", "=", "\"Val accuracy threshold for early stopping\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_freq\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Evaluation frequency\"", ")", "\n", "\n", "", "elif", "script", "==", "'save_features'", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--split'", ",", "default", "=", "'novel'", ",", "help", "=", "'base/val/novel'", ")", "#default novel, but you can also test base/val class accuracy if you want", "\n", "parser", ".", "add_argument", "(", "'--save_iter'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'save feature from the model trained in x epoch, use the best model if x is -1'", ")", "\n", "", "elif", "script", "==", "'test'", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--split'", ",", "default", "=", "'novel'", ",", "help", "=", "'base/val/novel'", ")", "#default novel, but you can also test base/val class accuracy if you want", "\n", "parser", ".", "add_argument", "(", "'--save_iter'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'saved feature from the model trained in x epoch, use the best model if x is -1'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'further adaptation in test time or not'", ")", "\n", "parser", ".", "add_argument", "(", "'--repeat'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'Repeat the test N times with different seeds and take the mean. The seeds range is [seed, seed+repeat]'", ")", "\n", "", "else", ":", "\n", "       ", "raise", "ValueError", "(", "'Unknown script'", ")", "\n", "\n", "", "parser", "=", "hn_args", ".", "add_hn_args_to_parser", "(", "parser", ")", "\n", "return", "ParamHolder", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.parse_args_regression": [[100, 116], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.parse_args"], ["", "def", "parse_args_regression", "(", "script", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'few-shot script %s'", "%", "(", "script", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Seed for Numpy and pyTorch. Default: 0 (None)'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'Conv3'", ",", "help", "=", "'model: Conv{3} / MLP{2}'", ")", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "default", "=", "'DKT'", ",", "help", "=", "'DKT / transfer'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'QMUL'", ",", "help", "=", "'QMUL / sines'", ")", "\n", "parser", ".", "add_argument", "(", "'--spectral'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use a spectral covariance kernel function'", ")", "\n", "\n", "if", "script", "==", "'train_regression'", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Starting epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--stop_epoch'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "'Stopping epoch'", ")", "#for meta-learning methods, each epoch contains 100 episodes. The default epoch number is dataset dependent. See train.py", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue from previous trained model with largest epoch'", ")", "\n", "", "elif", "script", "==", "'test_regression'", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--n_support'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'Number of points on trajectory to be given as support points'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_test_epochs'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'How many test people?'", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.get_assigned_file": [[117, 120], ["os.path.join"], "function", ["None"], ["", "def", "get_assigned_file", "(", "checkpoint_dir", ",", "num", ")", ":", "\n", "    ", "assign_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "num", ")", ")", "\n", "return", "assign_file", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.get_resume_file": [[121, 134], ["glob.glob", "numpy.array", "numpy.max", "os.path.join", "os.path.join", "len", "len", "int", "os.path.basename", "os.path.basename", "os.path.splitext", "os.path.basename"], "function", ["None"], ["", "def", "get_resume_file", "(", "checkpoint_dir", ")", ":", "\n", "    ", "filelist", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'*.tar'", ")", ")", "\n", "if", "len", "(", "filelist", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "last_model_files", "=", "[", "x", "for", "x", "in", "filelist", "if", "os", ".", "path", ".", "basename", "(", "x", ")", "==", "'last_model.tar'", "]", "\n", "if", "len", "(", "last_model_files", ")", "==", "1", ":", "\n", "        ", "return", "last_model_files", "[", "0", "]", "\n", "\n", "", "filelist", "=", "[", "x", "for", "x", "in", "filelist", "if", "os", ".", "path", ".", "basename", "(", "x", ")", "!=", "'best_model.tar'", "]", "\n", "epochs", "=", "np", ".", "array", "(", "[", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ")", "for", "x", "in", "filelist", "]", ")", "\n", "max_epoch", "=", "np", ".", "max", "(", "epochs", ")", "\n", "resume_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "max_epoch", ")", ")", "\n", "return", "resume_file", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.get_best_file": [[135, 141], ["os.path.join", "os.path.isfile", "io_utils.get_resume_file"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.get_resume_file"], ["", "def", "get_best_file", "(", "checkpoint_dir", ")", ":", "\n", "    ", "best_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'best_model.tar'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "best_file", ")", ":", "\n", "        ", "return", "best_file", "\n", "", "else", ":", "\n", "        ", "return", "get_resume_file", "(", "checkpoint_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.io_utils.setup_neptune": [[142, 169], ["neptune.init", "vars", "pathlib.Path().relative_to", "pathlib.Path", "run_file.exists", "run_file.open", "f.write", "print", "print", "run_file.open", "f.read", "print", "pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "", "def", "setup_neptune", "(", "params", ")", "->", "Run", ":", "\n", "    ", "try", ":", "\n", "        ", "run_name", "=", "Path", "(", "params", ".", "checkpoint_dir", ")", ".", "relative_to", "(", "Path", "(", "configs", ".", "save_dir", ")", "/", "\"checkpoints\"", ")", ".", "name", "\n", "run_file", "=", "Path", "(", "params", ".", "checkpoint_dir", ")", "/", "\"NEPTUNE_RUN.txt\"", "\n", "\n", "run_id", "=", "None", "\n", "if", "params", ".", "resume", "and", "run_file", ".", "exists", "(", ")", ":", "\n", "            ", "with", "run_file", ".", "open", "(", "\"r\"", ")", "as", "f", ":", "\n", "                ", "run_id", "=", "f", ".", "read", "(", ")", "\n", "print", "(", "\"Resuming neptune run\"", ",", "run_id", ")", "\n", "\n", "", "", "run", "=", "neptune", ".", "init", "(", "\n", "name", "=", "run_name", ",", "\n", "source_files", "=", "\"**/*.py\"", ",", "\n", "tags", "=", "[", "params", ".", "checkpoint_suffix", "]", "if", "params", ".", "checkpoint_suffix", "!=", "\"\"", "else", "[", "]", ",", "\n", "run", "=", "run_id", "\n", ")", "\n", "with", "run_file", ".", "open", "(", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "run", ".", "_short_id", ")", "\n", "print", "(", "\"Starting neptune run\"", ",", "run", ".", "_short_id", ")", "\n", "", "run", "[", "\"params\"", "]", "=", "vars", "(", "params", ".", "params", ")", "\n", "run", "[", "\"cmd\"", "]", "=", "f\"python {' '.join(sys.argv)}\"", "\n", "return", "run", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "\"Cannot initialize neptune because of\"", ",", "e", ")", "\n", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.NNKernel.__init__": [[8, 17], ["super().__init__", "gp_kernels.NNKernel.create_model"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernelNoInner.create_model"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "num_layers", ",", "hidden_dim", ",", "flatten", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NNKernel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "flatten", "=", "flatten", "\n", "self", ".", "model", "=", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.NNKernel.create_model": [[18, 31], ["range", "modules.append", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "modules.append", "modules.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Flatten", "torch.Flatten"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "num_layers", ">=", "1", ",", "\"Number of hidden layers must be at least 1\"", "\n", "modules", "=", "[", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "if", "self", ".", "flatten", ":", "\n", "            ", "modules", "=", "[", "nn", ".", "Flatten", "(", ")", "]", "+", "modules", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "\n", "model", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.NNKernel.forward": [[32, 67], ["NotImplementedError", "gp_kernels.NNKernel.model", "gp_kernels.NNKernel.model", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.diag", "torch.diag", "torch.diag", "torch.diag"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "diag", "=", "False", ",", "last_dim_is_batch", "=", "False", ",", "full_covar", "=", "True", ",", "**", "params", ")", ":", "\n", "        ", "r\"\"\"\n        Computes the covariance between x1 and x2.\n        This method should be imlemented by all Kernel subclasses.\n        Args:\n            :attr:`x1` (Tensor `n x d` or `b x n x d`):\n                First set of data\n            :attr:`x2` (Tensor `m x d` or `b x m x d`):\n                Second set of data\n            :attr:`diag` (bool):\n                Should the Kernel compute the whole kernel, or just the diag?\n            :attr:`last_dim_is_batch` (tuple, optional):\n                If this is true, it treats the last dimension of the data as another batch dimension.\n                (Useful for additive structure over the dimensions). Default: False\n        Returns:\n            :class:`Tensor` or :class:`gpytorch.lazy.LazyTensor`.\n                The exact size depends on the kernel's evaluation mode:\n                * `full_covar`: `n x m` or `b x n x m`\n                * `full_covar` with `last_dim_is_batch=True`: `k x n x m` or `b x k x n x m`\n                * `diag`: `n` or `b x n`\n                * `diag` with `last_dim_is_batch=True`: `k x n` or `b x k x n`\n        \"\"\"", "\n", "if", "last_dim_is_batch", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "\n", "            ", "z1", "=", "self", ".", "model", "(", "x1", ")", "\n", "z2", "=", "self", ".", "model", "(", "x2", ")", "\n", "\n", "out", "=", "torch", ".", "matmul", "(", "z1", ",", "z2", ".", "T", ")", "\n", "\n", "if", "diag", ":", "\n", "                ", "return", "torch", ".", "diag", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.PositiveLinear.__init__": [[70, 76], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "gp_kernels.PositiveLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.PositiveLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "PositiveLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.PositiveLinear.reset_parameters": [[77, 79], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.PositiveLinear.forward": [[80, 83], ["torch.functional.softplus", "torch.functional.softplus", "torch.functional.linear", "torch.functional.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "w", "=", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "weight", ")", "\n", "return", "nn", ".", "functional", ".", "linear", "(", "input", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.NNKernelNoInner.__init__": [[86, 95], ["super().__init__", "gp_kernels.NNKernelNoInner.create_model"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernelNoInner.create_model"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "num_layers", ",", "hidden_dim", ",", "flatten", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NNKernelNoInner", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "*", "2", "\n", "self", ".", "output_dim", "=", "1", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "flatten", "=", "flatten", "\n", "self", ".", "model", "=", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.NNKernelNoInner.create_model": [[96, 110], ["range", "modules.append", "torch.Sequential", "torch.Sequential", "gp_kernels.PositiveLinear", "torch.Sigmoid", "torch.Sigmoid", "modules.append", "modules.append", "gp_kernels.PositiveLinear", "gp_kernels.PositiveLinear", "torch.Sigmoid", "torch.Sigmoid", "torch.Flatten", "torch.Flatten"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "num_layers", ">=", "1", ",", "\"Number of hidden layers must be at least 1\"", "\n", "modules", "=", "[", "PositiveLinear", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", ",", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "if", "self", ".", "flatten", ":", "\n", "            ", "modules", "=", "[", "nn", ".", "Flatten", "(", ")", "]", "+", "modules", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "modules", ".", "append", "(", "PositiveLinear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "modules", ".", "append", "(", "PositiveLinear", "(", "self", ".", "hidden_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "\n", "\n", "model", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.NNKernelNoInner.forward": [[111, 153], ["NotImplementedError", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "x1.get_device", "gp_kernels.NNKernelNoInner.model().view", "gp_kernels.NNKernelNoInner.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "diag", "=", "False", ",", "last_dim_is_batch", "=", "False", ",", "full_covar", "=", "True", ",", "**", "params", ")", ":", "\n", "        ", "r\"\"\"\n        Computes the covariance between x1 and x2.\n        This method should be imlemented by all Kernel subclasses.\n        Args:\n            :attr:`x1` (Tensor `n x d` or `b x n x d`):\n                First set of data\n            :attr:`x2` (Tensor `m x d` or `b x m x d`):\n                Second set of data\n            :attr:`diag` (bool):\n                Should the Kernel compute the whole kernel, or just the diag?\n            :attr:`last_dim_is_batch` (tuple, optional):\n                If this is true, it treats the last dimension of the data as another batch dimension.\n                (Useful for additive structure over the dimensions). Default: False\n        Returns:\n            :class:`Tensor` or :class:`gpytorch.lazy.LazyTensor`.\n                The exact size depends on the kernel's evaluation mode:\n                * `full_covar`: `n x m` or `b x n x m`\n                * `full_covar` with `last_dim_is_batch=True`: `k x n x m` or `b x k x n x m`\n                * `diag`: `n` or `b x n`\n                * `diag` with `last_dim_is_batch=True`: `k x n` or `b x k x n`\n        \"\"\"", "\n", "if", "last_dim_is_batch", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "x1", ".", "shape", "[", "0", "]", "\n", "m", "=", "x2", ".", "shape", "[", "0", "]", "\n", "out", "=", "torch", ".", "zeros", "(", "(", "n", ",", "m", ")", ",", "device", "=", "x1", ".", "get_device", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "                    ", "out", "[", "i", ",", "j", "]", "=", "self", ".", "model", "(", "torch", ".", "cat", "(", "(", "x1", "[", "i", "]", ",", "x2", "[", "j", "]", ")", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "i", "!=", "j", ":", "\n", "                        ", "out", "[", "j", ",", "i", "]", "=", "out", "[", "i", ",", "j", "]", "\n", "\n", "#npout = out.cpu().detach().numpy()", "\n", "#print(np.linalg.eigvals(npout))", "\n", "#assert np.all(np.linalg.eigvals(npout) +1e-2 >= 0), \"not positive\"", "\n", "", "", "", "if", "diag", ":", "\n", "                ", "return", "torch", ".", "diag", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.MultiNNKernel.__init__": [[156, 161], ["super().__init__", "isinstance", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_tasks", ",", "kernels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MultiNNKernel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "kernels", ",", "list", ")", ",", "\"kernels must be a list of kernels\"", "\n", "self", ".", "num_tasks", "=", "num_tasks", "\n", "self", ".", "kernels", "=", "nn", ".", "ModuleList", "(", "kernels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.MultiNNKernel.num_outputs_per_input": [[162, 168], ["None"], "methods", ["None"], ["", "def", "num_outputs_per_input", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "\"\"\"\n        Given `n` data points `x1` and `m` datapoints `x2`, this multitask\n        kernel returns an `(n*num_tasks) x (m*num_tasks)` covariance matrix.\n        \"\"\"", "\n", "return", "self", ".", "num_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.models.gp_kernels.MultiNNKernel.forward": [[169, 208], ["NotImplementedError", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "x1.get_device", "gp_kernels.MultiNNKernel.kernels[].model", "gp_kernels.MultiNNKernel.kernels[].model", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "diag", "=", "False", ",", "last_dim_is_batch", "=", "False", ",", "full_covar", "=", "True", ",", "**", "params", ")", ":", "\n", "        ", "r\"\"\"\n        Computes the covariance between x1 and x2.\n        This method should be imlemented by all Kernel subclasses.\n        Args:\n            :attr:`x1` (Tensor `n x d` or `b x n x d`):\n                First set of data\n            :attr:`x2` (Tensor `m x d` or `b x m x d`):\n                Second set of data\n            :attr:`diag` (bool):\n                Should the Kernel compute the whole kernel, or just the diag?\n            :attr:`last_dim_is_batch` (tuple, optional):\n                If this is true, it treats the last dimension of the data as another batch dimension.\n                (Useful for additive structure over the dimensions). Default: False\n        Returns:\n            :class:`Tensor` or :class:`gpytorch.lazy.LazyTensor`.\n                The exact size depends on the kernel's evaluation mode:\n                * `full_covar`: `n x m` or `b x n x m`\n                * `full_covar` with `last_dim_is_batch=True`: `k x n x m` or `b x k x n x m`\n                * `diag`: `n` or `b x n`\n                * `diag` with `last_dim_is_batch=True`: `k x n` or `b x k x n`\n        \"\"\"", "\n", "if", "last_dim_is_batch", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "x1", ".", "shape", "[", "0", "]", "\n", "m", "=", "x2", ".", "shape", "[", "0", "]", "\n", "out", "=", "torch", ".", "zeros", "(", "(", "n", "*", "self", ".", "num_tasks", ",", "m", "*", "self", ".", "num_tasks", ")", ",", "device", "=", "x1", ".", "get_device", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_tasks", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "num_tasks", ")", ":", "\n", "\n", "                    ", "z1", "=", "self", ".", "kernels", "[", "i", "]", ".", "model", "(", "x1", ")", "\n", "z2", "=", "self", ".", "kernels", "[", "j", "]", ".", "model", "(", "x2", ")", "\n", "\n", "out", "[", "i", ":", "n", "*", "self", ".", "num_tasks", ":", "self", ".", "num_tasks", ",", "j", ":", "m", "*", "self", ".", "num_tasks", ":", "self", ".", "num_tasks", "]", "=", "torch", ".", "matmul", "(", "z1", ",", "z2", ".", "T", ")", "\n", "", "", "if", "diag", ":", "\n", "                ", "return", "torch", ".", "diag", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "return", "out", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.additional_transforms.ImageJitter.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transformdict", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "(", "transformtypedict", "[", "k", "]", ",", "transformdict", "[", "k", "]", ")", "for", "k", "in", "transformdict", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.additional_transforms.ImageJitter.__call__": [[20, 29], ["torch.rand", "enumerate", "len", "transformer().enhance().convert", "transformer().enhance", "transformer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "img", "\n", "randtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "\n", "for", "i", ",", "(", "transformer", ",", "alpha", ")", "in", "enumerate", "(", "self", ".", "transforms", ")", ":", "\n", "            ", "r", "=", "alpha", "*", "(", "randtensor", "[", "i", "]", "*", "2.0", "-", "1.0", ")", "+", "1", "\n", "out", "=", "transformer", "(", "out", ")", ".", "enhance", "(", "r", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.qmul_loader.num_to_str": [[12, 21], ["str", "str", "int", "int"], "function", ["None"], ["def", "num_to_str", "(", "num", ")", ":", "\n", "    ", "str_", "=", "''", "\n", "if", "num", "==", "0", ":", "\n", "        ", "str_", "=", "'000'", "\n", "", "elif", "num", "<", "100", ":", "\n", "        ", "str_", "=", "'0'", "+", "str", "(", "int", "(", "num", ")", ")", "\n", "", "else", ":", "\n", "        ", "str_", "=", "str", "(", "int", "(", "num", ")", ")", "\n", "", "return", "str_", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.qmul_loader.get_person_at_curve": [[22, 40], ["torchvision.Compose", "torch.stack", "torch.stack", "torch.stack", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "PIL.Image.open().convert", "transforms.Compose.", "torch.stack.append", "torch.stack().squeeze.append", "torchvision.ToTensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.stack", "torch.stack", "torch.stack", "qmul_loader.num_to_str", "PIL.Image.open", "qmul_loader.num_to_str"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.qmul_loader.num_to_str", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.qmul_loader.num_to_str"], ["", "def", "get_person_at_curve", "(", "person", ",", "curve", ",", "prefix", "=", "'filelists/QMUL/images/'", ")", ":", "\n", "    ", "faces", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "\n", "train_transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "for", "pitch", ",", "angle", "in", "curve", ":", "\n", "        ", "fname", "=", "prefix", "+", "person", "+", "'/'", "+", "person", "[", ":", "-", "4", "]", "+", "'_'", "+", "num_to_str", "(", "pitch", ")", "+", "'_'", "+", "num_to_str", "(", "angle", ")", "+", "'.jpg'", "\n", "img", "=", "Image", ".", "open", "(", "fname", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "train_transforms", "(", "img", ")", "\n", "\n", "faces", ".", "append", "(", "img", ")", "\n", "pitch_norm", "=", "2", "*", "(", "(", "pitch", "-", "60", ")", "/", "(", "120", "-", "60", ")", ")", "-", "1", "\n", "angle_norm", "=", "2", "*", "(", "(", "angle", "-", "0", ")", "/", "(", "180", "-", "0", ")", ")", "-", "1", "\n", "targets", ".", "append", "(", "torch", ".", "Tensor", "(", "[", "pitch_norm", "]", ")", ")", "\n", "\n", "", "faces", "=", "torch", ".", "stack", "(", "faces", ")", "\n", "targets", "=", "torch", ".", "stack", "(", "targets", ")", ".", "squeeze", "(", ")", "\n", "return", "faces", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.qmul_loader.get_batch": [[41, 60], ["numpy.random.uniform", "numpy.random.uniform", "list", "range", "int", "qmul_loader.get_person_at_curve", "inputs.append", "targets.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.sin", "range", "round", "zip"], "function", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.qmul_loader.get_person_at_curve"], ["", "def", "get_batch", "(", "train_people", "=", "train_people", ",", "num_samples", "=", "19", ")", ":", "\n", "## generate trajectory", "\n", "    ", "amp", "=", "np", ".", "random", ".", "uniform", "(", "-", "3", ",", "3", ")", "\n", "phase", "=", "np", ".", "random", ".", "uniform", "(", "-", "5", ",", "5", ")", "\n", "wave", "=", "[", "(", "amp", "*", "np", ".", "sin", "(", "phase", "+", "x", ")", ")", "for", "x", "in", "range", "(", "num_samples", ")", "]", "\n", "## map trajectory to angles/pitches", "\n", "angles", "=", "list", "(", "range", "(", "num_samples", ")", ")", "\n", "angles", "=", "[", "x", "*", "10", "for", "x", "in", "angles", "]", "\n", "pitches", "=", "[", "int", "(", "round", "(", "(", "(", "y", "+", "3", ")", "*", "10", ")", "+", "60", ",", "-", "1", ")", ")", "for", "y", "in", "wave", "]", "\n", "curve", "=", "[", "(", "p", ",", "a", ")", "for", "p", ",", "a", "in", "zip", "(", "pitches", ",", "angles", ")", "]", "\n", "\n", "inputs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "person", "in", "train_people", ":", "\n", "        ", "inps", ",", "targs", "=", "get_person_at_curve", "(", "person", ",", "curve", ")", "\n", "inputs", ".", "append", "(", "inps", ")", "\n", "targets", ".", "append", "(", "targs", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "inputs", ")", ",", "torch", ".", "stack", "(", "targets", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.feature_loader.SimpleHDF5Dataset.__init__": [[6, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_handle", "=", "None", ")", ":", "\n", "        ", "if", "file_handle", "==", "None", ":", "\n", "            ", "self", ".", "f", "=", "''", "\n", "self", ".", "all_feats_dset", "=", "[", "]", "\n", "self", ".", "all_labels", "=", "[", "]", "\n", "self", ".", "total", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "f", "=", "file_handle", "\n", "self", ".", "all_feats_dset", "=", "self", ".", "f", "[", "'all_feats'", "]", "[", "...", "]", "\n", "self", ".", "all_labels", "=", "self", ".", "f", "[", "'all_labels'", "]", "[", "...", "]", "\n", "self", ".", "total", "=", "self", ".", "f", "[", "'count'", "]", "[", "0", "]", "\n", "# print('here')", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.feature_loader.SimpleHDF5Dataset.__getitem__": [[18, 20], ["torch.Tensor", "int"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "torch", ".", "Tensor", "(", "self", ".", "all_feats_dset", "[", "i", ",", ":", "]", ")", ",", "int", "(", "self", ".", "all_labels", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.feature_loader.SimpleHDF5Dataset.__len__": [[21, 23], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.feature_loader.init_loader": [[24, 45], ["numpy.unique().tolist", "range", "h5py.File", "feature_loader.SimpleHDF5Dataset", "numpy.sum", "numpy.delete", "numpy.delete", "len", "cl_data_file[].append", "numpy.unique", "numpy.array"], "function", ["None"], ["", "", "def", "init_loader", "(", "filename", ")", ":", "\n", "    ", "with", "h5py", ".", "File", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "fileset", "=", "SimpleHDF5Dataset", "(", "f", ")", "\n", "\n", "#labels = [ l for l  in fileset.all_labels if l != 0]", "\n", "", "feats", "=", "fileset", ".", "all_feats_dset", "\n", "labels", "=", "fileset", ".", "all_labels", "\n", "while", "np", ".", "sum", "(", "feats", "[", "-", "1", "]", ")", "==", "0", ":", "\n", "        ", "feats", "=", "np", ".", "delete", "(", "feats", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "delete", "(", "labels", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "\n", "", "class_list", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "labels", ")", ")", ".", "tolist", "(", ")", "\n", "inds", "=", "range", "(", "len", "(", "labels", ")", ")", "\n", "\n", "cl_data_file", "=", "{", "}", "\n", "for", "cl", "in", "class_list", ":", "\n", "        ", "cl_data_file", "[", "cl", "]", "=", "[", "]", "\n", "", "for", "ind", "in", "inds", ":", "\n", "        ", "cl_data_file", "[", "labels", "[", "ind", "]", "]", ".", "append", "(", "feats", "[", "ind", "]", ")", "\n", "\n", "", "return", "cl_data_file", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.SimpleDataset.__init__": [[11, 16], ["open", "json.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_file", ",", "transform", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.SimpleDataset.__getitem__": [[18, 24], ["os.path.join", "PIL.Image.open().convert", "dataset.SimpleDataset.transform", "dataset.SimpleDataset.target_transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "meta", "[", "'image_names'", "]", "[", "i", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "meta", "[", "'image_labels'", "]", "[", "i", "]", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.SimpleDataset.__len__": [[25, 27], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "meta", "[", "'image_names'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.SetDataset.__init__": [[30, 52], ["numpy.unique().tolist", "zip", "dict", "open", "json.load", "dataset.SetDataset.sub_meta[].append", "dataset.SubDataset", "dataset.SetDataset.sub_dataloader.append", "numpy.unique", "torch.utils.data.DataLoader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_file", ",", "batch_size", ",", "transform", ")", ":", "\n", "        ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "cl_list", "=", "np", ".", "unique", "(", "self", ".", "meta", "[", "'image_labels'", "]", ")", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "sub_meta", "=", "{", "}", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "self", ".", "sub_meta", "[", "cl", "]", "=", "[", "]", "\n", "\n", "", "for", "x", ",", "y", "in", "zip", "(", "self", ".", "meta", "[", "'image_names'", "]", ",", "self", ".", "meta", "[", "'image_labels'", "]", ")", ":", "\n", "            ", "self", ".", "sub_meta", "[", "y", "]", ".", "append", "(", "x", ")", "\n", "\n", "", "self", ".", "sub_dataloader", "=", "[", "]", "\n", "sub_data_loader_params", "=", "dict", "(", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "#use main thread only or may receive multiple batches", "\n", "pin_memory", "=", "False", ")", "\n", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "sub_dataset", "=", "SubDataset", "(", "self", ".", "sub_meta", "[", "cl", "]", ",", "cl", ",", "transform", "=", "transform", ")", "\n", "self", ".", "sub_dataloader", ".", "append", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sub_dataset", ",", "**", "sub_data_loader_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.SetDataset.__getitem__": [[53, 55], ["next", "iter"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "next", "(", "iter", "(", "self", ".", "sub_dataloader", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.SetDataset.__len__": [[56, 58], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "cl_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.SubDataset.__init__": [[60, 65], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sub_meta", ",", "cl", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "self", ".", "sub_meta", "=", "sub_meta", "\n", "self", ".", "cl", "=", "cl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.SubDataset.__getitem__": [[66, 73], ["os.path.join", "PIL.Image.open().convert", "dataset.SubDataset.transform", "dataset.SubDataset.target_transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "#print( '%d -%d' %(self.cl,i))", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "sub_meta", "[", "i", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "cl", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.SubDataset.__len__": [[74, 76], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.EpisodicBatchSampler.__init__": [[78, 82], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_way", ",", "n_episodes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.EpisodicBatchSampler.__len__": [[83, 85], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.dataset.EpisodicBatchSampler.__iter__": [[86, 89], ["range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "            ", "yield", "torch", ".", "randperm", "(", "self", ".", "n_classes", ")", "[", ":", "self", ".", "n_way", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.TransformLoader.__init__": [[15, 21], ["dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "\n", "normalize_param", "=", "dict", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "jitter_param", "=", "dict", "(", "Brightness", "=", "0.4", ",", "Contrast", "=", "0.4", ",", "Color", "=", "0.4", ")", ")", ":", "\n", "        ", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "normalize_param", "=", "normalize_param", "\n", "self", ".", "jitter_param", "=", "jitter_param", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.TransformLoader.parse_transform": [[22, 37], ["getattr", "data.ImageJitter", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "int", "int"], "methods", ["None"], ["", "def", "parse_transform", "(", "self", ",", "transform_type", ")", ":", "\n", "        ", "if", "transform_type", "==", "'ImageJitter'", ":", "\n", "            ", "method", "=", "add_transforms", ".", "ImageJitter", "(", "self", ".", "jitter_param", ")", "\n", "return", "method", "\n", "", "method", "=", "getattr", "(", "transforms", ",", "transform_type", ")", "\n", "if", "transform_type", "==", "'RandomResizedCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'CenterCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'Resize'", ":", "\n", "            ", "return", "method", "(", "[", "int", "(", "self", ".", "image_size", "*", "1.15", ")", ",", "int", "(", "self", ".", "image_size", "*", "1.15", ")", "]", ")", "\n", "", "elif", "transform_type", "==", "'Normalize'", ":", "\n", "            ", "return", "method", "(", "**", "self", ".", "normalize_param", ")", "\n", "", "else", ":", "\n", "            ", "return", "method", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.TransformLoader.get_composed_transform": [[38, 47], ["torchvision.Compose", "datamgr.TransformLoader.parse_transform"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.TransformLoader.parse_transform"], ["", "", "def", "get_composed_transform", "(", "self", ",", "aug", "=", "False", ")", ":", "\n", "        ", "if", "aug", ":", "\n", "            ", "transform_list", "=", "[", "'RandomResizedCrop'", ",", "'ImageJitter'", ",", "'RandomHorizontalFlip'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "", "else", ":", "\n", "            ", "transform_list", "=", "[", "'Resize'", ",", "'CenterCrop'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "\n", "", "transform_funcs", "=", "[", "self", ".", "parse_transform", "(", "x", ")", "for", "x", "in", "transform_list", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_funcs", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.DataManager.get_data_loader": [[49, 52], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.SimpleDataManager.__init__": [[55, 59], ["super().__init__", "datamgr.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "SimpleDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.SimpleDataManager.get_data_loader": [[60, 69], ["datamgr.SimpleDataManager.trans_loader.get_composed_transform", "data.dataset.SimpleDataset", "dict", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SimpleDataset", "(", "data_file", ",", "transform", ")", "\n", "\n", "data_loader_params", "=", "dict", "(", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "pin_memory", "=", "True", ")", "\n", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.SetDataManager.__init__": [[71, 79], ["super().__init__", "datamgr.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "n_way", ",", "n_support", ",", "n_query", ",", "n_eposide", "=", "100", ")", ":", "\n", "        ", "super", "(", "SetDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "batch_size", "=", "n_support", "+", "n_query", "\n", "self", ".", "n_eposide", "=", "n_eposide", "\n", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.SetDataManager.get_data_loader": [[80, 88], ["datamgr.SetDataManager.trans_loader.get_composed_transform", "data.dataset.SetDataset", "data.dataset.EpisodicBatchSampler", "dict", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SetDataset", "(", "data_file", ",", "self", ".", "batch_size", ",", "transform", ")", "\n", "sampler", "=", "EpisodicBatchSampler", "(", "len", "(", "dataset", ")", ",", "self", ".", "n_way", ",", "self", ".", "n_eposide", ")", "\n", "\n", "data_loader_params", "=", "dict", "(", "batch_sampler", "=", "sampler", ",", "num_workers", "=", "8", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.datamgr._init_fn": [[11, 13], ["numpy.random.seed"], "function", ["None"], ["def", "_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.MatchingNet.__init__": [[14, 24], ["methods.meta_template.MetaTemplate.__init__", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "matchingnet.FullyContextualEmbedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "n_query", "=", "None", ")", ":", "\n", "        ", "super", "(", "MatchingNet", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ")", "\n", "\n", "self", ".", "loss_fn", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "\n", "self", ".", "FCE", "=", "FullyContextualEmbedding", "(", "self", ".", "feat_dim", ")", "\n", "self", ".", "G_encoder", "=", "nn", ".", "LSTM", "(", "self", ".", "feat_dim", ",", "self", ".", "feat_dim", ",", "1", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.MatchingNet.encode_training_set": [[25, 34], ["out_G.squeeze.squeeze.squeeze", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "G.div", "G_encoder", "S.unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "S.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "S.size"], "methods", ["None"], ["", "def", "encode_training_set", "(", "self", ",", "S", ",", "G_encoder", "=", "None", ")", ":", "\n", "        ", "if", "G_encoder", "is", "None", ":", "\n", "            ", "G_encoder", "=", "self", ".", "G_encoder", "\n", "", "out_G", "=", "G_encoder", "(", "S", ".", "unsqueeze", "(", "0", ")", ")", "[", "0", "]", "\n", "out_G", "=", "out_G", ".", "squeeze", "(", "0", ")", "\n", "G", "=", "S", "+", "out_G", "[", ":", ",", ":", "S", ".", "size", "(", "1", ")", "]", "+", "out_G", "[", ":", ",", "S", ".", "size", "(", "1", ")", ":", "]", "\n", "G_norm", "=", "torch", ".", "norm", "(", "G", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "G", ")", "\n", "G_normalized", "=", "G", ".", "div", "(", "G_norm", "+", "0.00001", ")", "\n", "return", "G", ",", "G_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.MatchingNet.get_logprobs": [[35, 46], ["FCE", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "FCE.div", "matchingnet.MatchingNet.softmax", "matchingnet.MatchingNet.relu", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "FCE.div.mm", "G_normalized.transpose", "matchingnet.MatchingNet.mm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "get_logprobs", "(", "self", ",", "f", ",", "G", ",", "G_normalized", ",", "Y_S", ",", "FCE", "=", "None", ")", ":", "\n", "        ", "if", "FCE", "is", "None", ":", "\n", "            ", "FCE", "=", "self", ".", "FCE", "\n", "", "F", "=", "FCE", "(", "f", ",", "G", ")", "\n", "F_norm", "=", "torch", ".", "norm", "(", "F", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "F", ")", "\n", "F_normalized", "=", "F", ".", "div", "(", "F_norm", "+", "0.00001", ")", "\n", "#scores = F.mm(G_normalized.transpose(0,1)) #The implementation of Ross et al., but not consistent with origin paper and would cause large norm feature dominate ", "\n", "scores", "=", "self", ".", "relu", "(", "F_normalized", ".", "mm", "(", "G_normalized", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", "*", "100", "# The original paper use cosine simlarity, but here we scale it by 100 to strengthen highest probability after softmax", "\n", "softmax", "=", "self", ".", "softmax", "(", "scores", ")", "\n", "logprobs", "=", "(", "softmax", ".", "mm", "(", "Y_S", ")", "+", "1e-6", ")", ".", "log", "(", ")", "\n", "return", "logprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.MatchingNet.set_forward": [[47, 59], ["matchingnet.MatchingNet.parse_feature", "z_support.contiguous().view.contiguous().view.contiguous().view", "z_query.contiguous().view.contiguous().view.contiguous().view", "matchingnet.MatchingNet.encode_training_set", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "matchingnet.MatchingNet.get_logprobs", "numpy.repeat", "z_support.contiguous().view.contiguous().view.contiguous", "z_query.contiguous().view.contiguous().view.contiguous", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.one_hot"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.parse_feature", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.MatchingNet.encode_training_set", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.MatchingNet.get_logprobs", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.utils.one_hot"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "        ", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_support", ",", "-", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "G", ",", "G_normalized", "=", "self", ".", "encode_training_set", "(", "z_support", ")", "\n", "\n", "y_s", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", "\n", "Y_S", "=", "Variable", "(", "utils", ".", "one_hot", "(", "y_s", ",", "self", ".", "n_way", ")", ")", ".", "cuda", "(", ")", "\n", "f", "=", "z_query", "\n", "logprobs", "=", "self", ".", "get_logprobs", "(", "f", ",", "G", ",", "G_normalized", ",", "Y_S", ")", "\n", "return", "logprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.MatchingNet.set_forward_loss": [[60, 67], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "matchingnet.MatchingNet.set_forward", "matchingnet.MatchingNet.loss_fn", "numpy.repeat", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "range"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "y_query", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "y_query", "=", "Variable", "(", "y_query", ".", "cuda", "(", ")", ")", "\n", "\n", "logprobs", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "\n", "return", "self", ".", "loss_fn", "(", "logprobs", ",", "y_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.MatchingNet.cuda": [[68, 72], ["super().cuda", "matchingnet.MatchingNet.FCE.cuda"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "super", "(", "MatchingNet", ",", "self", ")", ".", "cuda", "(", ")", "\n", "self", ".", "FCE", "=", "self", ".", "FCE", ".", "cuda", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.__init__": [[74, 80], ["torch.Module.__init__", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ")", ":", "\n", "        ", "super", "(", "FullyContextualEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstmcell", "=", "nn", ".", "LSTMCell", "(", "feat_dim", "*", "2", ",", "feat_dim", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "self", ".", "c_0", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "feat_dim", ")", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "#self.K = K", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.forward": [[82, 97], ["matchingnet.FullyContextualEmbedding.c_0.expand_as", "G.transpose", "G.size", "range", "h.mm", "matchingnet.FullyContextualEmbedding.softmax", "matchingnet.FullyContextualEmbedding.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "matchingnet.FullyContextualEmbedding.lstmcell"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "f", ",", "G", ")", ":", "\n", "        ", "h", "=", "f", "\n", "c", "=", "self", ".", "c_0", ".", "expand_as", "(", "f", ")", "\n", "G_T", "=", "G", ".", "transpose", "(", "0", ",", "1", ")", "\n", "K", "=", "G", ".", "size", "(", "0", ")", "#Tuna to be comfirmed", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "            ", "logit_a", "=", "h", ".", "mm", "(", "G_T", ")", "\n", "a", "=", "self", ".", "softmax", "(", "logit_a", ")", "\n", "r", "=", "a", ".", "mm", "(", "G", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "f", ",", "r", ")", ",", "1", ")", "\n", "\n", "h", ",", "c", "=", "self", ".", "lstmcell", "(", "x", ",", "(", "h", ",", "c", ")", ")", "\n", "h", "=", "h", "+", "f", "\n", "\n", "", "return", "h", "\n", "", "def", "cuda", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda": [[97, 101], ["super().cuda", "matchingnet.FullyContextualEmbedding.c_0.cuda"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "super", "(", "FullyContextualEmbedding", ",", "self", ")", ".", "cuda", "(", ")", "\n", "self", ".", "c_0", "=", "self", ".", "c_0", ".", "cuda", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT.__init__": [[34, 52], ["methods.meta_template.MetaTemplate.__init__", "DKT.DKT.get_model_likelihood_mll", "numpy.prod", "DKT.DKT.feature_extractor.trunk.add_module", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.get_model_likelihood_mll"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ")", ":", "\n", "        ", "super", "(", "DKT", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ")", "\n", "## GP parameters", "\n", "self", ".", "leghtscale_list", "=", "None", "\n", "self", ".", "noise_list", "=", "None", "\n", "self", ".", "outputscale_list", "=", "None", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "writer", "=", "None", "\n", "self", ".", "feature_extractor", "=", "self", ".", "feature", "\n", "self", ".", "get_model_likelihood_mll", "(", ")", "#Init model, likelihood, and mll", "\n", "if", "(", "kernel_type", "==", "\"cossim\"", ")", ":", "\n", "            ", "self", ".", "normalize", "=", "True", "\n", "", "elif", "(", "kernel_type", "==", "\"bncossim\"", ")", ":", "\n", "            ", "self", ".", "normalize", "=", "True", "\n", "latent_size", "=", "np", ".", "prod", "(", "self", ".", "feature_extractor", ".", "final_feat_dim", ")", "\n", "self", ".", "feature_extractor", ".", "trunk", ".", "add_module", "(", "\"bn_out\"", ",", "nn", ".", "BatchNorm1d", "(", "latent_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "normalize", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT.init_summary": [[53, 58], ["time.strftime", "SummaryWriter", "time.gmtime"], "methods", ["None"], ["", "", "def", "init_summary", "(", "self", ")", ":", "\n", "        ", "if", "(", "IS_TBX_INSTALLED", ")", ":", "\n", "            ", "time_string", "=", "strftime", "(", "\"%d%m%Y_%H%M%S\"", ",", "gmtime", "(", ")", ")", "\n", "writer_path", "=", "\"./log/\"", "+", "time_string", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "writer_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT.get_model_likelihood_mll": [[59, 73], ["list", "list", "zip", "gpytorch.models.IndependentModelList().cuda", "gpytorch.likelihoods.LikelihoodList().cuda", "gpytorch.mlls.SumMarginalLogLikelihood().cuda", "gpytorch.likelihoods.GaussianLikelihood", "DKT.ExactGPLayer", "list.append", "list.append", "gpytorch.models.IndependentModelList", "gpytorch.likelihoods.LikelihoodList", "gpytorch.mlls.SumMarginalLogLikelihood", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "", "def", "get_model_likelihood_mll", "(", "self", ",", "train_x_list", "=", "None", ",", "train_y_list", "=", "None", ")", ":", "\n", "        ", "if", "(", "train_x_list", "is", "None", ")", ":", "train_x_list", "=", "[", "torch", ".", "ones", "(", "100", ",", "64", ")", ".", "cuda", "(", ")", "]", "*", "self", ".", "n_way", "\n", "if", "(", "train_y_list", "is", "None", ")", ":", "train_y_list", "=", "[", "torch", ".", "ones", "(", "100", ")", ".", "cuda", "(", ")", "]", "*", "self", ".", "n_way", "\n", "model_list", "=", "list", "(", ")", "\n", "likelihood_list", "=", "list", "(", ")", "\n", "for", "train_x", ",", "train_y", "in", "zip", "(", "train_x_list", ",", "train_y_list", ")", ":", "\n", "            ", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "ExactGPLayer", "(", "train_x", "=", "train_x", ",", "train_y", "=", "train_y", ",", "likelihood", "=", "likelihood", ",", "kernel", "=", "kernel_type", ")", "\n", "model_list", ".", "append", "(", "model", ")", "\n", "likelihood_list", ".", "append", "(", "model", ".", "likelihood", ")", "\n", "", "self", ".", "model", "=", "gpytorch", ".", "models", ".", "IndependentModelList", "(", "*", "model_list", ")", ".", "cuda", "(", ")", "\n", "self", ".", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "LikelihoodList", "(", "*", "likelihood_list", ")", ".", "cuda", "(", ")", "\n", "self", ".", "mll", "=", "gpytorch", ".", "mlls", ".", "SumMarginalLogLikelihood", "(", "self", ".", "likelihood", ",", "self", ".", "model", ")", ".", "cuda", "(", ")", "\n", "return", "self", ".", "model", ",", "self", ".", "likelihood", ",", "self", ".", "mll", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT.set_forward": [[74, 76], ["None"], "methods", ["None"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT.set_forward_loss": [[77, 79], ["None"], "methods", ["None"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT._reset_likelihood": [[80, 83], ["DKT.DKT.likelihood.parameters", "param.data.normal_"], "methods", ["None"], ["", "def", "_reset_likelihood", "(", "self", ",", "debug", "=", "False", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "likelihood", ".", "parameters", "(", ")", ":", "\n", "           ", "param", ".", "data", ".", "normal_", "(", "0.0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT._print_weights": [[84, 88], ["DKT.DKT.feature_extractor.state_dict().items", "print", "print", "DKT.DKT.feature_extractor.state_dict"], "methods", ["None"], ["", "", "def", "_print_weights", "(", "self", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "self", ".", "feature_extractor", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"Layer {}\"", ".", "format", "(", "k", ")", ")", "\n", "print", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT._reset_variational": [[89, 98], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "mean_init.repeat.repeat.repeat", "covar_init.repeat.repeat.repeat", "enumerate", "DKT.DKT.gp_layer.variational_parameters", "param.data.copy_", "param.data.copy_", "ValueError"], "methods", ["None"], ["", "", "def", "_reset_variational", "(", "self", ")", ":", "\n", "        ", "mean_init", "=", "torch", ".", "zeros", "(", "128", ")", "#num_inducing_points", "\n", "covar_init", "=", "torch", ".", "eye", "(", "128", ",", "128", ")", "#num_inducing_points", "\n", "mean_init", "=", "mean_init", ".", "repeat", "(", "64", ",", "1", ")", "#batch_shape", "\n", "covar_init", "=", "covar_init", ".", "repeat", "(", "64", ",", "1", ",", "1", ")", "#batch_shape", "\n", "for", "idx", ",", "param", "in", "enumerate", "(", "self", ".", "gp_layer", ".", "variational_parameters", "(", ")", ")", ":", "\n", "            ", "if", "(", "idx", "==", "0", ")", ":", "param", ".", "data", ".", "copy_", "(", "mean_init", ")", "#\"variational_mean\"", "\n", "elif", "(", "idx", "==", "1", ")", ":", "param", ".", "data", ".", "copy_", "(", "covar_init", ")", "#\"chol_variational_covar\"", "\n", "else", ":", "raise", "ValueError", "(", "'[ERROR] DKT the variational_parameters at index>1 should not exist!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT._reset_parameters": [[99, 113], ["list", "list", "list", "enumerate", "enumerate", "DKT.DKT.leghtscale_list.append", "DKT.DKT.noise_list.append", "DKT.DKT.outputscale_list.append", "DKT.DKT.leghtscale_list[].clone().detach", "DKT.DKT.noise_list[].clone().detach", "DKT.DKT.outputscale_list[].clone().detach", "single_model.covar_module.base_kernel.lengthscale.clone().detach", "single_model.likelihood.noise.clone().detach", "single_model.covar_module.outputscale.clone().detach", "DKT.DKT.leghtscale_list[].clone", "DKT.DKT.noise_list[].clone", "DKT.DKT.outputscale_list[].clone", "single_model.covar_module.base_kernel.lengthscale.clone", "single_model.likelihood.noise.clone", "single_model.covar_module.outputscale.clone"], "methods", ["None"], ["", "", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "leghtscale_list", "is", "None", ")", ":", "\n", "            ", "self", ".", "leghtscale_list", "=", "list", "(", ")", "\n", "self", ".", "noise_list", "=", "list", "(", ")", "\n", "self", ".", "outputscale_list", "=", "list", "(", ")", "\n", "for", "idx", ",", "single_model", "in", "enumerate", "(", "self", ".", "model", ".", "models", ")", ":", "\n", "                ", "self", ".", "leghtscale_list", ".", "append", "(", "single_model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", "\n", "self", ".", "noise_list", ".", "append", "(", "single_model", ".", "likelihood", ".", "noise", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", "\n", "self", ".", "outputscale_list", ".", "append", "(", "single_model", ".", "covar_module", ".", "outputscale", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "idx", ",", "single_model", "in", "enumerate", "(", "self", ".", "model", ".", "models", ")", ":", "\n", "                ", "single_model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", "=", "self", ".", "leghtscale_list", "[", "idx", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "#.requires_grad_(True)", "\n", "single_model", ".", "likelihood", ".", "noise", "=", "self", ".", "noise_list", "[", "idx", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "single_model", ".", "covar_module", ".", "outputscale", "=", "self", ".", "outputscale_list", "[", "idx", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT.train_loop": [[114, 199], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "enumerate", "x.contiguous().view().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x[].contiguous().view().cuda", "numpy.repeat", "x[].contiguous().view().cuda", "numpy.repeat", "list", "int", "range", "DKT.DKT.model.train", "DKT.DKT.likelihood.train", "DKT.DKT.feature_extractor.train", "DKT.DKT.feature_extractor.forward", "enumerate", "float", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "DKT.DKT.model", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "x.size", "x.size", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "range", "range", "list.append", "torch.normalize", "torch.normalize", "torch.normalize", "single_model.set_train_data", "single_model.likelihood.noise.cpu().detach().numpy().squeeze", "float", "len", "float", "DKT.DKT.mll", "DKT.DKT.writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "DKT.DKT.model.eval", "DKT.DKT.likelihood.eval", "DKT.DKT.feature_extractor.eval", "DKT.DKT.feature_extractor.forward().detach", "DKT.DKT.likelihood", "list", "numpy.vstack().argmax", "DKT.DKT.feature_extractor.forward().detach", "DKT.DKT.likelihood", "list", "numpy.vstack().argmax", "print", "DKT.DKT.model.parameters", "DKT.DKT.feature_extractor.parameters", "x.contiguous().view", "x[].contiguous().view", "x[].contiguous().view", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "target.cuda", "single_model.covar_module.base_kernel.lengthscale.mean().cpu().detach().numpy().squeeze", "single_model.covar_module.outputscale.cpu().detach().numpy().squeeze", "len", "len", "len", "torch.normalize", "torch.normalize", "torch.normalize", "len", "list.append", "DKT.DKT.writer.add_scalar", "torch.normalize", "torch.normalize", "torch.normalize", "len", "list.append", "DKT.DKT.writer.add_scalar", "DKT.DKT.writer.add_histogram", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "single_model.likelihood.noise.cpu().detach().numpy", "DKT.DKT.feature_extractor.forward", "DKT.DKT.model", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "numpy.vstack", "numpy.sum", "float", "DKT.DKT.feature_extractor.forward", "DKT.DKT.model", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "numpy.vstack", "numpy.sum", "float", "len", "loss.item", "x.contiguous", "numpy.repeat", "x[].contiguous", "x[].contiguous", "single_model.covar_module.base_kernel.lengthscale.mean().cpu().detach().numpy", "single_model.covar_module.outputscale.cpu().detach().numpy", "len", "len", "x.size", "range", "x.size", "x.size", "single_model.likelihood.noise.cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "single_model.covar_module.base_kernel.lengthscale.mean().cpu().detach", "single_model.covar_module.outputscale.cpu().detach", "single_model.likelihood.noise.cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "single_model.covar_module.base_kernel.lengthscale.mean().cpu", "single_model.covar_module.outputscale.cpu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "single_model.covar_module.base_kernel.lengthscale.mean"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "", "", "def", "train_loop", "(", "self", ",", "epoch", ",", "train_loader", ",", "optimizer", ",", "print_freq", "=", "10", ")", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "self", ".", "model", ".", "parameters", "(", ")", ",", "'lr'", ":", "1e-4", "}", ",", "\n", "{", "'params'", ":", "self", ".", "feature_extractor", ".", "parameters", "(", ")", ",", "'lr'", ":", "1e-3", "}", "]", ")", "\n", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "if", "self", ".", "change_way", ":", "self", ".", "n_way", "=", "x", ".", "size", "(", "0", ")", "\n", "x_all", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "(", "self", ".", "n_support", "+", "self", ".", "n_query", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "cuda", "(", ")", "\n", "y_all", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", "+", "self", ".", "n_support", ")", ")", ".", "cuda", "(", ")", ")", "\n", "x_support", "=", "x", "[", ":", ",", ":", "self", ".", "n_support", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "(", "self", ".", "n_support", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "cuda", "(", ")", "\n", "y_support", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", "\n", "x_query", "=", "x", "[", ":", ",", "self", ".", "n_support", ":", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "(", "self", ".", "n_query", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "cuda", "(", ")", "\n", "y_query", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", "\n", "x_train", "=", "x_all", "\n", "y_train", "=", "y_all", "\n", "\n", "target_list", "=", "list", "(", ")", "\n", "samples_per_model", "=", "int", "(", "len", "(", "y_train", ")", "/", "self", ".", "n_way", ")", "#25 / 5 = 5", "\n", "for", "way", "in", "range", "(", "self", ".", "n_way", ")", ":", "\n", "                ", "target", "=", "torch", ".", "ones", "(", "len", "(", "y_train", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "*", "-", "1.0", "\n", "start_index", "=", "way", "*", "samples_per_model", "\n", "stop_index", "=", "start_index", "+", "samples_per_model", "\n", "target", "[", "start_index", ":", "stop_index", "]", "=", "1.0", "\n", "target_list", ".", "append", "(", "target", ".", "cuda", "(", ")", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "likelihood", ".", "train", "(", ")", "\n", "self", ".", "feature_extractor", ".", "train", "(", ")", "\n", "z_train", "=", "self", ".", "feature_extractor", ".", "forward", "(", "x_train", ")", "\n", "if", "(", "self", ".", "normalize", ")", ":", "z_train", "=", "F", ".", "normalize", "(", "z_train", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "train_list", "=", "[", "z_train", "]", "*", "self", ".", "n_way", "\n", "lenghtscale", "=", "0.0", "\n", "noise", "=", "0.0", "\n", "outputscale", "=", "0.0", "\n", "for", "idx", ",", "single_model", "in", "enumerate", "(", "self", ".", "model", ".", "models", ")", ":", "\n", "                ", "single_model", ".", "set_train_data", "(", "inputs", "=", "z_train", ",", "targets", "=", "target_list", "[", "idx", "]", ",", "strict", "=", "False", ")", "\n", "if", "(", "single_model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", "is", "not", "None", ")", ":", "\n", "                    ", "lenghtscale", "+=", "single_model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "", "noise", "+=", "single_model", ".", "likelihood", ".", "noise", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "(", "single_model", ".", "covar_module", ".", "outputscale", "is", "not", "None", ")", ":", "\n", "                    ", "outputscale", "+=", "single_model", ".", "covar_module", ".", "outputscale", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "", "", "if", "(", "single_model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", "is", "not", "None", ")", ":", "lenghtscale", "/=", "float", "(", "len", "(", "self", ".", "model", ".", "models", ")", ")", "\n", "noise", "/=", "float", "(", "len", "(", "self", ".", "model", ".", "models", ")", ")", "\n", "if", "(", "single_model", ".", "covar_module", ".", "outputscale", "is", "not", "None", ")", ":", "outputscale", "/=", "float", "(", "len", "(", "self", ".", "model", ".", "models", ")", ")", "\n", "\n", "## Optimize", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "*", "self", ".", "model", ".", "train_inputs", ")", "\n", "loss", "=", "-", "self", ".", "mll", "(", "output", ",", "self", ".", "model", ".", "train_targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "iteration", "=", "i", "+", "(", "epoch", "*", "len", "(", "train_loader", ")", ")", "\n", "if", "(", "self", ".", "writer", "is", "not", "None", ")", ":", "self", ".", "writer", ".", "add_scalar", "(", "'loss'", ",", "loss", ",", "self", ".", "iteration", ")", "\n", "\n", "#Eval on the query (validation set)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "likelihood", ".", "eval", "(", ")", "\n", "self", ".", "feature_extractor", ".", "eval", "(", ")", "\n", "z_support", "=", "self", ".", "feature_extractor", ".", "forward", "(", "x_support", ")", ".", "detach", "(", ")", "\n", "if", "(", "self", ".", "normalize", ")", ":", "z_support", "=", "F", ".", "normalize", "(", "z_support", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "z_support_list", "=", "[", "z_support", "]", "*", "len", "(", "y_support", ")", "\n", "predictions", "=", "self", ".", "likelihood", "(", "*", "self", ".", "model", "(", "*", "z_support_list", ")", ")", "#return 20 MultiGaussian Distributions", "\n", "predictions_list", "=", "list", "(", ")", "\n", "for", "gaussian", "in", "predictions", ":", "\n", "                    ", "predictions_list", ".", "append", "(", "torch", ".", "sigmoid", "(", "gaussian", ".", "mean", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "y_pred", "=", "np", ".", "vstack", "(", "predictions_list", ")", ".", "argmax", "(", "axis", "=", "0", ")", "#[model, classes]", "\n", "accuracy_support", "=", "(", "np", ".", "sum", "(", "y_pred", "==", "y_support", ")", "/", "float", "(", "len", "(", "y_support", ")", ")", ")", "*", "100.0", "\n", "if", "(", "self", ".", "writer", "is", "not", "None", ")", ":", "self", ".", "writer", ".", "add_scalar", "(", "'GP_support_accuracy'", ",", "accuracy_support", ",", "self", ".", "iteration", ")", "\n", "z_query", "=", "self", ".", "feature_extractor", ".", "forward", "(", "x_query", ")", ".", "detach", "(", ")", "\n", "if", "(", "self", ".", "normalize", ")", ":", "z_query", "=", "F", ".", "normalize", "(", "z_query", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "z_query_list", "=", "[", "z_query", "]", "*", "len", "(", "y_query", ")", "\n", "predictions", "=", "self", ".", "likelihood", "(", "*", "self", ".", "model", "(", "*", "z_query_list", ")", ")", "#return 20 MultiGaussian Distributions", "\n", "predictions_list", "=", "list", "(", ")", "\n", "for", "gaussian", "in", "predictions", ":", "\n", "                    ", "predictions_list", ".", "append", "(", "torch", ".", "sigmoid", "(", "gaussian", ".", "mean", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "y_pred", "=", "np", ".", "vstack", "(", "predictions_list", ")", ".", "argmax", "(", "axis", "=", "0", ")", "#[model, classes]", "\n", "accuracy_query", "=", "(", "np", ".", "sum", "(", "y_pred", "==", "y_query", ")", "/", "float", "(", "len", "(", "y_query", ")", ")", ")", "*", "100.0", "\n", "if", "(", "self", ".", "writer", "is", "not", "None", ")", ":", "self", ".", "writer", ".", "add_scalar", "(", "'GP_query_accuracy'", ",", "accuracy_query", ",", "self", ".", "iteration", ")", "\n", "\n", "", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "                ", "if", "(", "self", ".", "writer", "is", "not", "None", ")", ":", "self", ".", "writer", ".", "add_histogram", "(", "'z_support'", ",", "z_support", ",", "self", ".", "iteration", ")", "\n", "print", "(", "'Epoch [{:d}] [{:d}/{:d}] | Outscale {:f} | Lenghtscale {:f} | Noise {:f} | Loss {:f} | Supp. {:f} | Query {:f}'", ".", "format", "(", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "outputscale", ",", "lenghtscale", ",", "noise", ",", "loss", ".", "item", "(", ")", ",", "accuracy_support", ",", "accuracy_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT.correct": [[200, 274], ["x[].contiguous().view().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "x[].contiguous().view().cuda", "numpy.repeat", "list", "int", "range", "DKT.DKT.feature_extractor.forward().detach", "enumerate", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "DKT.DKT.model.train", "DKT.DKT.likelihood.train", "DKT.DKT.feature_extractor.eval", "range", "range", "GaussianProcessClassifier", "DKT.DKT.feature_extractor.forward().detach", "GaussianProcessClassifier.fit", "DKT.DKT.feature_extractor.forward().detach", "GaussianProcessClassifier.predict", "numpy.sum", "len", "list.append", "torch.normalize", "torch.normalize", "torch.normalize", "single_model.set_train_data", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "DKT.DKT.model", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "gpytorch.settings.num_likelihood_samples", "DKT.DKT.model.eval", "DKT.DKT.likelihood.eval", "DKT.DKT.feature_extractor.eval", "DKT.DKT.feature_extractor.forward().detach", "DKT.DKT.likelihood", "list", "numpy.vstack().argmax", "numpy.sum", "len", "float", "x[].contiguous().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "x[].contiguous().view", "RBF", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize.cpu().detach().numpy", "torch.from_numpy().cuda.cpu().detach().numpy", "torch.from_numpy().cuda.cpu().detach().numpy", "torch.from_numpy().cuda.cpu().detach().numpy", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize.cpu().detach().numpy", "float", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "target.cuda", "DKT.DKT.feature_extractor.forward", "DKT.DKT.mll", "loss.item", "torch.normalize", "torch.normalize", "torch.normalize", "len", "list.append", "float", "numpy.repeat", "DKT.DKT.feature_extractor.forward", "DKT.DKT.feature_extractor.forward", "numpy.sum", "float", "len", "DKT.DKT.model.parameters", "DKT.DKT.feature_extractor.forward", "DKT.DKT.model", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "numpy.vstack", "x[].contiguous", "range", "x[].contiguous", "torch.normalize.cpu().detach", "torch.from_numpy().cuda.cpu().detach", "torch.from_numpy().cuda.cpu().detach", "torch.from_numpy().cuda.cpu().detach", "torch.normalize.cpu().detach", "len", "x.size", "x.size", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.normalize.cpu", "torch.from_numpy().cuda.cpu", "torch.from_numpy().cuda.cpu", "torch.from_numpy().cuda.cpu", "torch.normalize.cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "", "", "def", "correct", "(", "self", ",", "x", ",", "N", "=", "0", ",", "laplace", "=", "False", ")", ":", "\n", "##Dividing input x in query and support set", "\n", "        ", "x_support", "=", "x", "[", ":", ",", ":", "self", ".", "n_support", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "(", "self", ".", "n_support", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "cuda", "(", ")", "\n", "y_support", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", ".", "cuda", "(", ")", "\n", "x_query", "=", "x", "[", ":", ",", "self", ".", "n_support", ":", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "(", "self", ".", "n_query", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "cuda", "(", ")", "\n", "y_query", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", "\n", "\n", "## Laplace approximation of the posterior", "\n", "if", "(", "laplace", ")", ":", "\n", "            ", "from", "sklearn", ".", "gaussian_process", "import", "GaussianProcessClassifier", "\n", "from", "sklearn", ".", "gaussian_process", ".", "kernels", "import", "RBF", ",", "Matern", "\n", "from", "sklearn", ".", "gaussian_process", ".", "kernels", "import", "ConstantKernel", "as", "C", "\n", "kernel", "=", "1.0", "*", "RBF", "(", "length_scale", "=", "0.1", ",", "length_scale_bounds", "=", "(", "0.1", ",", "10.0", ")", ")", "\n", "gp", "=", "GaussianProcessClassifier", "(", "kernel", "=", "kernel", ",", "optimizer", "=", "None", ")", "\n", "z_support", "=", "self", ".", "feature_extractor", ".", "forward", "(", "x_support", ")", ".", "detach", "(", ")", "\n", "if", "(", "self", ".", "normalize", ")", ":", "z_support", "=", "F", ".", "normalize", "(", "z_support", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "gp", ".", "fit", "(", "z_support", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "y_support", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "z_query", "=", "self", ".", "feature_extractor", ".", "forward", "(", "x_query", ")", ".", "detach", "(", ")", "\n", "if", "(", "self", ".", "normalize", ")", ":", "z_query", "=", "F", ".", "normalize", "(", "z_query", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "y_pred", "=", "gp", ".", "predict", "(", "z_query", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "accuracy", "=", "(", "np", ".", "sum", "(", "y_pred", "==", "y_query", ")", "/", "float", "(", "len", "(", "y_query", ")", ")", ")", "*", "100.0", "\n", "top1_correct", "=", "np", ".", "sum", "(", "y_pred", "==", "y_query", ")", "\n", "count_this", "=", "len", "(", "y_query", ")", "\n", "return", "float", "(", "top1_correct", ")", ",", "count_this", ",", "0.0", "\n", "\n", "", "x_train", "=", "x_support", "\n", "y_train", "=", "y_support", "\n", "\n", "target_list", "=", "list", "(", ")", "\n", "samples_per_model", "=", "int", "(", "len", "(", "y_train", ")", "/", "self", ".", "n_way", ")", "\n", "for", "way", "in", "range", "(", "self", ".", "n_way", ")", ":", "\n", "            ", "target", "=", "torch", ".", "ones", "(", "len", "(", "y_train", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "*", "-", "1.0", "\n", "start_index", "=", "way", "*", "samples_per_model", "\n", "stop_index", "=", "start_index", "+", "samples_per_model", "\n", "target", "[", "start_index", ":", "stop_index", "]", "=", "1.0", "\n", "target_list", ".", "append", "(", "target", ".", "cuda", "(", ")", ")", "\n", "\n", "", "z_train", "=", "self", ".", "feature_extractor", ".", "forward", "(", "x_train", ")", ".", "detach", "(", ")", "#[340, 64]", "\n", "if", "(", "self", ".", "normalize", ")", ":", "z_train", "=", "F", ".", "normalize", "(", "z_train", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "train_list", "=", "[", "z_train", "]", "*", "self", ".", "n_way", "\n", "for", "idx", ",", "single_model", "in", "enumerate", "(", "self", ".", "model", ".", "models", ")", ":", "\n", "            ", "single_model", ".", "set_train_data", "(", "inputs", "=", "z_train", ",", "targets", "=", "target_list", "[", "idx", "]", ",", "strict", "=", "False", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "self", ".", "model", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "1e-3", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "likelihood", ".", "train", "(", ")", "\n", "self", ".", "feature_extractor", ".", "eval", "(", ")", "\n", "\n", "avg_loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "0", ",", "N", ")", ":", "\n", "## Optimize", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "*", "self", ".", "model", ".", "train_inputs", ")", "\n", "loss", "=", "-", "self", ".", "mll", "(", "output", ",", "self", ".", "model", ".", "train_targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "item", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ",", "gpytorch", ".", "settings", ".", "num_likelihood_samples", "(", "32", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "likelihood", ".", "eval", "(", ")", "\n", "self", ".", "feature_extractor", ".", "eval", "(", ")", "\n", "z_query", "=", "self", ".", "feature_extractor", ".", "forward", "(", "x_query", ")", ".", "detach", "(", ")", "\n", "if", "(", "self", ".", "normalize", ")", ":", "z_query", "=", "F", ".", "normalize", "(", "z_query", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "z_query_list", "=", "[", "z_query", "]", "*", "len", "(", "y_query", ")", "\n", "predictions", "=", "self", ".", "likelihood", "(", "*", "self", ".", "model", "(", "*", "z_query_list", ")", ")", "#return n_way MultiGaussians", "\n", "predictions_list", "=", "list", "(", ")", "\n", "for", "gaussian", "in", "predictions", ":", "\n", "                ", "predictions_list", ".", "append", "(", "torch", ".", "sigmoid", "(", "gaussian", ".", "mean", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "y_pred", "=", "np", ".", "vstack", "(", "predictions_list", ")", ".", "argmax", "(", "axis", "=", "0", ")", "#[model, classes]", "\n", "top1_correct", "=", "np", ".", "sum", "(", "y_pred", "==", "y_query", ")", "\n", "count_this", "=", "len", "(", "y_query", ")", "\n", "", "return", "float", "(", "top1_correct", ")", ",", "count_this", ",", "avg_loss", "/", "float", "(", "N", "+", "1e-10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT.test_loop": [[275, 297], ["len", "enumerate", "numpy.asarray", "numpy.mean", "numpy.std", "print", "DKT.DKT.correct", "numpy.asarray.append", "DKT.DKT.writer.add_scalar", "x.size", "x.size", "numpy.mean", "print", "numpy.asarray", "len", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.meta_template.MetaTemplate.correct"], ["", "def", "test_loop", "(", "self", ",", "test_loader", ",", "record", "=", "None", ",", "return_std", "=", "False", ")", ":", "\n", "        ", "print_freq", "=", "10", "\n", "correct", "=", "0", "\n", "count", "=", "0", "\n", "acc_all", "=", "[", "]", "\n", "iter_num", "=", "len", "(", "test_loader", ")", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "if", "self", ".", "change_way", ":", "\n", "                ", "self", ".", "n_way", "=", "x", ".", "size", "(", "0", ")", "\n", "", "correct_this", ",", "count_this", ",", "loss_value", "=", "self", ".", "correct", "(", "x", ")", "\n", "acc_all", ".", "append", "(", "correct_this", "/", "count_this", "*", "100", ")", "\n", "if", "(", "i", "%", "100", "==", "0", ")", ":", "\n", "                ", "acc_mean", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "acc_all", ")", ")", "\n", "print", "(", "'Test | Batch {:d}/{:d} | Loss {:f} | Acc {:f}'", ".", "format", "(", "i", ",", "len", "(", "test_loader", ")", ",", "loss_value", ",", "acc_mean", ")", ")", "\n", "", "", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "acc_all", ")", "\n", "print", "(", "'%d Test Acc = %4.2f%% +- %4.2f%%'", "%", "(", "iter_num", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", ")", "\n", "if", "(", "self", ".", "writer", "is", "not", "None", ")", ":", "self", ".", "writer", ".", "add_scalar", "(", "'test_accuracy'", ",", "acc_mean", ",", "self", ".", "iteration", ")", "\n", "if", "(", "return_std", ")", ":", "return", "acc_mean", ",", "acc_std", "\n", "else", ":", "return", "acc_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.DKT.get_logits": [[298, 337], ["x[].contiguous().view().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "x[].contiguous().view().cuda", "numpy.repeat", "list", "int", "range", "DKT.DKT.feature_extractor.forward().detach", "enumerate", "x.size", "range", "list.append", "torch.normalize", "torch.normalize", "torch.normalize", "single_model.set_train_data", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "gpytorch.settings.num_likelihood_samples", "DKT.DKT.model.eval", "DKT.DKT.likelihood.eval", "DKT.DKT.feature_extractor.eval", "DKT.DKT.feature_extractor.forward().detach", "DKT.DKT.likelihood", "list", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x[].contiguous().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "x[].contiguous().view", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "target.cuda", "DKT.DKT.feature_extractor.forward", "torch.normalize", "torch.normalize", "torch.normalize", "len", "list.append", "numpy.repeat", "len", "DKT.DKT.feature_extractor.forward", "DKT.DKT.model", "x[].contiguous", "range", "x[].contiguous", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "def", "get_logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "##Dividing input x in query and support set", "\n", "x_support", "=", "x", "[", ":", ",", ":", "self", ".", "n_support", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "(", "self", ".", "n_support", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "cuda", "(", ")", "\n", "y_support", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", ".", "cuda", "(", ")", "\n", "x_query", "=", "x", "[", ":", ",", "self", ".", "n_support", ":", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "(", "self", ".", "n_query", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "cuda", "(", ")", "\n", "y_query", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", "\n", "\n", "# Init to dummy values", "\n", "x_train", "=", "x_support", "\n", "y_train", "=", "y_support", "\n", "target_list", "=", "list", "(", ")", "\n", "samples_per_model", "=", "int", "(", "len", "(", "y_train", ")", "/", "self", ".", "n_way", ")", "\n", "for", "way", "in", "range", "(", "self", ".", "n_way", ")", ":", "\n", "            ", "target", "=", "torch", ".", "ones", "(", "len", "(", "y_train", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "*", "-", "1.0", "\n", "start_index", "=", "way", "*", "samples_per_model", "\n", "stop_index", "=", "start_index", "+", "samples_per_model", "\n", "target", "[", "start_index", ":", "stop_index", "]", "=", "1.0", "\n", "target_list", ".", "append", "(", "target", ".", "cuda", "(", ")", ")", "\n", "", "z_train", "=", "self", ".", "feature_extractor", ".", "forward", "(", "x_train", ")", ".", "detach", "(", ")", "#[340, 64]", "\n", "if", "(", "self", ".", "normalize", ")", ":", "z_train", "=", "F", ".", "normalize", "(", "z_train", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "train_list", "=", "[", "z_train", "]", "*", "self", ".", "n_way", "\n", "for", "idx", ",", "single_model", "in", "enumerate", "(", "self", ".", "model", ".", "models", ")", ":", "\n", "            ", "single_model", ".", "set_train_data", "(", "inputs", "=", "z_train", ",", "targets", "=", "target_list", "[", "idx", "]", ",", "strict", "=", "False", ")", "\n", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ",", "gpytorch", ".", "settings", ".", "num_likelihood_samples", "(", "32", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "likelihood", ".", "eval", "(", ")", "\n", "self", ".", "feature_extractor", ".", "eval", "(", ")", "\n", "z_query", "=", "self", ".", "feature_extractor", ".", "forward", "(", "x_query", ")", ".", "detach", "(", ")", "\n", "if", "(", "self", ".", "normalize", ")", ":", "z_query", "=", "F", ".", "normalize", "(", "z_query", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "z_query_list", "=", "[", "z_query", "]", "*", "len", "(", "y_query", ")", "\n", "predictions", "=", "self", ".", "likelihood", "(", "*", "self", ".", "model", "(", "*", "z_query_list", ")", ")", "#return n_way MultiGaussians", "\n", "predictions_list", "=", "list", "(", ")", "\n", "for", "gaussian", "in", "predictions", ":", "\n", "                ", "predictions_list", ".", "append", "(", "gaussian", ".", "mean", ")", "#.cpu().detach().numpy())", "\n", "", "y_pred", "=", "torch", ".", "stack", "(", "predictions_list", ",", "1", ")", "\n", "", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.ExactGPLayer.__init__": [[345, 384], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "super().__init__", "gpytorch.means.ConstantMean", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.LinearKernel", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.RBFKernel", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.MaternKernel", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.PolynomialKernel", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.PolynomialKernel", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.LinearKernel", "models.gp_kernels.NNKernel", "gpytorch.kernels.ScaleKernel", "ValueError", "str"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ",", "kernel", "=", "'linear'", ")", ":", "\n", "#Set the likelihood noise and enable/disable learning", "\n", "        ", "likelihood", ".", "noise_covar", ".", "raw_noise", ".", "requires_grad", "=", "False", "\n", "likelihood", ".", "noise_covar", ".", "noise", "=", "torch", ".", "tensor", "(", "0.1", ")", "\n", "super", "(", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ConstantMean", "(", ")", "\n", "\n", "## Linear kernel", "\n", "if", "(", "kernel", "==", "'linear'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "LinearKernel", "(", ")", ")", "\n", "## RBF kernel", "\n", "", "elif", "(", "kernel", "==", "'rbf'", "or", "kernel", "==", "'RBF'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", ")", ")", "\n", "## Matern kernel", "\n", "", "elif", "(", "kernel", "==", "'matern'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "MaternKernel", "(", ")", ")", "\n", "## Polynomial (p=1)", "\n", "", "elif", "(", "kernel", "==", "'poli1'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "PolynomialKernel", "(", "power", "=", "1", ")", ")", "\n", "## Polynomial (p=2)", "\n", "", "elif", "(", "kernel", "==", "'poli2'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "PolynomialKernel", "(", "power", "=", "2", ")", ")", "\n", "", "elif", "(", "kernel", "==", "'cossim'", "or", "kernel", "==", "'bncossim'", ")", ":", "\n", "## Cosine distance and BatchNorm Cosine distance", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "LinearKernel", "(", ")", ")", "\n", "self", ".", "covar_module", ".", "base_kernel", ".", "variance", "=", "1.0", "\n", "self", ".", "covar_module", ".", "base_kernel", ".", "raw_variance", ".", "requires_grad", "=", "False", "\n", "", "elif", "(", "kernel", "==", "'nn'", ")", ":", "\n", "            ", "self", ".", "input_dim", "=", "1600", "\n", "self", ".", "output_dim", "=", "1600", "\n", "self", ".", "num_layers", "=", "4", "\n", "self", ".", "hidden_dim", "=", "64", "\n", "kernel", "=", "gp_kernels", ".", "NNKernel", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "num_layers", "=", "self", ".", "num_layers", ",", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", ")", "\n", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "kernel", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR] the kernel '\"", "+", "str", "(", "kernel", ")", "+", "\"' is not supported!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT.ExactGPLayer.forward": [[386, 390], ["DKT.ExactGPLayer.mean_module", "DKT.ExactGPLayer.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinetrain.BaselineTrain.__init__": [[11, 22], ["torch.Module.__init__", "model_func", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.Linear", "torch.Linear", "torch.Linear", "baselinetrain.BaselineTrain.classifier.bias.data.fill_", "backbone.distLinear"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "num_class", ",", "loss_type", "=", "'softmax'", ")", ":", "\n", "        ", "super", "(", "BaselineTrain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature", "=", "model_func", "(", ")", "\n", "if", "loss_type", "==", "'softmax'", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feature", ".", "final_feat_dim", ",", "num_class", ")", "\n", "self", ".", "classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "loss_type", "==", "'dist'", ":", "#Baseline ++", "\n", "            ", "self", ".", "classifier", "=", "backbone", ".", "distLinear", "(", "self", ".", "feature", ".", "final_feat_dim", ",", "num_class", ")", "\n", "", "self", ".", "loss_type", "=", "loss_type", "#'softmax' #'dist'", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinetrain.BaselineTrain.forward": [[23, 28], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "baselinetrain.BaselineTrain.feature.forward", "baselinetrain.BaselineTrain.classifier.forward", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "Variable", "(", "x", ".", "cuda", "(", ")", ")", "\n", "out", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "out", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinetrain.BaselineTrain.forward_loss": [[29, 33], ["baselinetrain.BaselineTrain.forward", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "baselinetrain.BaselineTrain.loss_fn", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "forward_loss", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "scores", "=", "self", ".", "forward", "(", "x", ")", "\n", "y", "=", "Variable", "(", "y", ".", "cuda", "(", ")", ")", "\n", "return", "self", ".", "loss_fn", "(", "scores", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinetrain.BaselineTrain.train_loop": [[34, 49], ["enumerate", "optimizer.zero_grad", "baselinetrain.BaselineTrain.forward_loss", "baselinetrain.BaselineTrain.backward", "optimizer.step", "baselinetrain.BaselineTrain.data.item", "print", "len", "float"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinetrain.BaselineTrain.forward_loss"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "train_loader", ",", "optimizer", ")", ":", "\n", "        ", "print_freq", "=", "10", "\n", "avg_loss", "=", "0", "\n", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "forward_loss", "(", "x", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "data", ".", "item", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "#print(optimizer.state_dict()['param_groups'][0]['lr'])", "\n", "                ", "print", "(", "'Epoch {:d} | Batch {:d}/{:d} | Loss {:f}'", ".", "format", "(", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinetrain.BaselineTrain.test_loop": [[50, 52], ["None"], "methods", ["None"], ["", "", "", "def", "test_loop", "(", "self", ",", "val_loader", ")", ":", "\n", "        ", "return", "-", "1", "#no validation, just save model during iteration", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernel.__init__": [[7, 15], ["torch.Module.__init__", "kernels.NNKernel.create_model"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernelNoInner.create_model"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ":", "int", ",", "output_dim", ":", "int", ",", "num_layers", ":", "int", ",", "hidden_dim", ":", "int", ",", "flatten", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "flatten", "=", "flatten", "\n", "self", ".", "model", "=", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernel.create_model": [[16, 32], ["torch.Sequential", "torch.Sequential", "range", "modules.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "modules.append", "modules.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Flatten", "torch.Flatten"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "num_layers", "==", "0", ":", "\n", "            ", "modules", "=", "[", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", "]", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "num_layers", ">=", "1", ",", "\"Number of hidden layers must be at least 1\"", "\n", "modules", "=", "[", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "if", "self", ".", "flatten", ":", "\n", "                ", "modules", "=", "[", "nn", ".", "Flatten", "(", ")", "]", "+", "modules", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "                ", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "\n", "", "model", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernel.forward": [[33, 71], ["NotImplementedError", "kernels.NNKernel.model", "kernels.NNKernel.model", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.diag", "torch.diag", "torch.diag", "torch.diag"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "diag", "=", "False", ",", "last_dim_is_batch", "=", "False", ",", "full_covar", "=", "True", ",", "**", "params", ")", ":", "\n", "        ", "r\"\"\"\n        Computes the covariance between x1 and x2.\n        This method should be imlemented by all Kernel subclasses.\n\n        Args:\n            :attr:`x1` (Tensor `n x d` or `b x n x d`):\n                First set of data\n            :attr:`x2` (Tensor `m x d` or `b x m x d`):\n                Second set of data\n            :attr:`diag` (bool):\n                Should the Kernel compute the whole kernel, or just the diag?\n            :attr:`last_dim_is_batch` (tuple, optional):\n                If this is true, it treats the last dimension of the data as another batch dimension.\n                (Useful for additive structure over the dimensions). Default: False\n\n        Returns:\n            :class:`Tensor` or :class:`gpytorch.lazy.LazyTensor`.\n                The exact size depends on the kernel's evaluation mode:\n\n                * `full_covar`: `n x m` or `b x n x m`\n                * `full_covar` with `last_dim_is_batch=True`: `k x n x m` or `b x k x n x m`\n                * `diag`: `n` or `b x n`\n                * `diag` with `last_dim_is_batch=True`: `k x n` or `b x k x n`\n        \"\"\"", "\n", "if", "last_dim_is_batch", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "\n", "            ", "z1", "=", "self", ".", "model", "(", "x1", ")", "\n", "z2", "=", "self", ".", "model", "(", "x2", ")", "\n", "\n", "out", "=", "torch", ".", "matmul", "(", "z1", ",", "z2", ".", "T", ")", "\n", "\n", "if", "diag", ":", "\n", "                ", "return", "torch", ".", "diag", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.CosineNNKernel.__init__": [[73, 81], ["torch.Module.__init__", "kernels.CosineNNKernel.create_model"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernelNoInner.create_model"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ":", "int", ",", "output_dim", ":", "int", ",", "num_layers", ":", "int", ",", "hidden_dim", ":", "int", ",", "flatten", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "flatten", "=", "flatten", "\n", "self", ".", "model", "=", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.CosineNNKernel.create_model": [[82, 98], ["torch.Sequential", "torch.Sequential", "range", "modules.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "modules.append", "modules.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Flatten", "torch.Flatten"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "num_layers", "==", "0", ":", "\n", "            ", "modules", "=", "[", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", "]", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "num_layers", ">=", "1", ",", "\"Number of hidden layers must be at least 1\"", "\n", "modules", "=", "[", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "if", "self", ".", "flatten", ":", "\n", "                ", "modules", "=", "[", "nn", ".", "Flatten", "(", ")", "]", "+", "modules", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "                ", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "\n", "", "model", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.CosineNNKernel.forward": [[99, 116], ["NotImplementedError", "kernels.CosineNNKernel.model", "kernels.CosineNNKernel.model", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.diag", "torch.diag", "torch.diag", "torch.diag"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "diag", "=", "False", ",", "last_dim_is_batch", "=", "False", ",", "full_covar", "=", "True", ",", "**", "params", ")", ":", "\n", "        ", "if", "last_dim_is_batch", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "\n", "            ", "z1", "=", "self", ".", "model", "(", "x1", ")", "\n", "z2", "=", "self", ".", "model", "(", "x2", ")", "\n", "\n", "normalized_input_a", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "z1", ")", "\n", "normalized_input_b", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "z2", ")", "\n", "out", "=", "torch", ".", "mm", "(", "normalized_input_a", ",", "normalized_input_b", ".", "T", ")", "\n", "out", "+=", "1", "\n", "\n", "if", "diag", ":", "\n", "                ", "return", "torch", ".", "diag", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.ScalarProductKernel.forward": [[119, 121], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "return", "torch", ".", "matmul", "(", "x1", ",", "x2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.CosineDistanceKernel.forward": [[124, 131], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "normalized_input_a", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "x1", ")", "\n", "normalized_input_b", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "x2", ")", "\n", "res", "=", "torch", ".", "mm", "(", "normalized_input_a", ",", "normalized_input_b", ".", "T", ")", "\n", "res", "=", "res", "*", "-", "1", "\n", "res", "+=", "1", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.PositiveLinear.__init__": [[135, 141], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "kernels.PositiveLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.PositiveLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "PositiveLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.PositiveLinear.reset_parameters": [[142, 144], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.PositiveLinear.forward": [[145, 148], ["torch.functional.softplus", "torch.functional.softplus", "torch.functional.linear", "torch.functional.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "w", "=", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "weight", ")", "\n", "return", "nn", ".", "functional", ".", "linear", "(", "input", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernelNoInner.__init__": [[151, 160], ["super().__init__", "kernels.NNKernelNoInner.create_model"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernelNoInner.create_model"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "num_layers", ",", "hidden_dim", ",", "flatten", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NNKernelNoInner", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "*", "2", "\n", "self", ".", "output_dim", "=", "1", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "flatten", "=", "flatten", "\n", "self", ".", "model", "=", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernelNoInner.create_model": [[161, 175], ["range", "modules.append", "torch.Sequential", "torch.Sequential", "kernels.PositiveLinear", "torch.Sigmoid", "torch.Sigmoid", "modules.append", "modules.append", "kernels.PositiveLinear", "kernels.PositiveLinear", "torch.Sigmoid", "torch.Sigmoid", "torch.Flatten", "torch.Flatten"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "num_layers", ">=", "1", ",", "\"Number of hidden layers must be at least 1\"", "\n", "modules", "=", "[", "PositiveLinear", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", ",", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "if", "self", ".", "flatten", ":", "\n", "            ", "modules", "=", "[", "nn", ".", "Flatten", "(", ")", "]", "+", "modules", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "modules", ".", "append", "(", "PositiveLinear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "modules", ".", "append", "(", "PositiveLinear", "(", "self", ".", "hidden_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "\n", "\n", "model", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.NNKernelNoInner.forward": [[176, 221], ["NotImplementedError", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "x1.get_device", "kernels.NNKernelNoInner.model().view", "kernels.NNKernelNoInner.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "diag", "=", "False", ",", "last_dim_is_batch", "=", "False", ",", "full_covar", "=", "True", ",", "**", "params", ")", ":", "\n", "        ", "r\"\"\"\n        Computes the covariance between x1 and x2.\n        This method should be imlemented by all Kernel subclasses.\n\n        Args:\n            :attr:`x1` (Tensor `n x d` or `b x n x d`):\n                First set of data\n            :attr:`x2` (Tensor `m x d` or `b x m x d`):\n                Second set of data\n            :attr:`diag` (bool):\n                Should the Kernel compute the whole kernel, or just the diag?\n            :attr:`last_dim_is_batch` (tuple, optional):\n                If this is true, it treats the last dimension of the data as another batch dimension.\n                (Useful for additive structure over the dimensions). Default: False\n\n        Returns:\n            :class:`Tensor` or :class:`gpytorch.lazy.LazyTensor`.\n                The exact size depends on the kernel's evaluation mode:\n\n                * `full_covar`: `n x m` or `b x n x m`\n                * `full_covar` with `last_dim_is_batch=True`: `k x n x m` or `b x k x n x m`\n                * `diag`: `n` or `b x n`\n                * `diag` with `last_dim_is_batch=True`: `k x n` or `b x k x n`\n        \"\"\"", "\n", "if", "last_dim_is_batch", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "x1", ".", "shape", "[", "0", "]", "\n", "m", "=", "x2", ".", "shape", "[", "0", "]", "\n", "out", "=", "torch", ".", "zeros", "(", "(", "n", ",", "m", ")", ",", "device", "=", "x1", ".", "get_device", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "                    ", "out", "[", "i", ",", "j", "]", "=", "self", ".", "model", "(", "torch", ".", "cat", "(", "(", "x1", "[", "i", "]", ",", "x2", "[", "j", "]", ")", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "i", "!=", "j", ":", "\n", "                        ", "out", "[", "j", ",", "i", "]", "=", "out", "[", "i", ",", "j", "]", "\n", "\n", "#npout = out.cpu().detach().numpy()", "\n", "#print(np.linalg.eigvals(npout))", "\n", "#assert np.all(np.linalg.eigvals(npout) +1e-2 >= 0), \"not positive\"", "\n", "", "", "", "if", "diag", ":", "\n", "                ", "return", "torch", ".", "diag", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.MultiNNKernel.__init__": [[224, 229], ["super().__init__", "isinstance", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_tasks", ",", "kernels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MultiNNKernel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "kernels", ",", "list", ")", ",", "\"kernels must be a list of kernels\"", "\n", "self", ".", "num_tasks", "=", "num_tasks", "\n", "self", ".", "kernels", "=", "nn", ".", "ModuleList", "(", "kernels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.MultiNNKernel.num_outputs_per_input": [[230, 236], ["None"], "methods", ["None"], ["", "def", "num_outputs_per_input", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "\"\"\"\n        Given `n` data points `x1` and `m` datapoints `x2`, this multitask\n        kernel returns an `(n*num_tasks) x (m*num_tasks)` covariance matrix.\n        \"\"\"", "\n", "return", "self", ".", "num_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.MultiNNKernel.forward": [[237, 279], ["NotImplementedError", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "x1.get_device", "kernels.MultiNNKernel.kernels[].model", "kernels.MultiNNKernel.kernels[].model", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "diag", "=", "False", ",", "last_dim_is_batch", "=", "False", ",", "full_covar", "=", "True", ",", "**", "params", ")", ":", "\n", "        ", "r\"\"\"\n        Computes the covariance between x1 and x2.\n        This method should be imlemented by all Kernel subclasses.\n\n        Args:\n            :attr:`x1` (Tensor `n x d` or `b x n x d`):\n                First set of data\n            :attr:`x2` (Tensor `m x d` or `b x m x d`):\n                Second set of data\n            :attr:`diag` (bool):\n                Should the Kernel compute the whole kernel, or just the diag?\n            :attr:`last_dim_is_batch` (tuple, optional):\n                If this is true, it treats the last dimension of the data as another batch dimension.\n                (Useful for additive structure over the dimensions). Default: False\n\n        Returns:\n            :class:`Tensor` or :class:`gpytorch.lazy.LazyTensor`.\n                The exact size depends on the kernel's evaluation mode:\n\n                * `full_covar`: `n x m` or `b x n x m`\n                * `full_covar` with `last_dim_is_batch=True`: `k x n x m` or `b x k x n x m`\n                * `diag`: `n` or `b x n`\n                * `diag` with `last_dim_is_batch=True`: `k x n` or `b x k x n`\n        \"\"\"", "\n", "if", "last_dim_is_batch", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "x1", ".", "shape", "[", "0", "]", "\n", "m", "=", "x2", ".", "shape", "[", "0", "]", "\n", "out", "=", "torch", ".", "zeros", "(", "(", "n", "*", "self", ".", "num_tasks", ",", "m", "*", "self", ".", "num_tasks", ")", ",", "device", "=", "x1", ".", "get_device", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_tasks", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "num_tasks", ")", ":", "\n", "\n", "                    ", "z1", "=", "self", ".", "kernels", "[", "i", "]", ".", "model", "(", "x1", ")", "\n", "z2", "=", "self", ".", "kernels", "[", "j", "]", ".", "model", "(", "x2", ")", "\n", "\n", "out", "[", "i", ":", "n", "*", "self", ".", "num_tasks", ":", "self", ".", "num_tasks", ",", "j", ":", "m", "*", "self", ".", "num_tasks", ":", "self", ".", "num_tasks", "]", "=", "torch", ".", "matmul", "(", "z1", ",", "z2", ".", "T", ")", "\n", "", "", "if", "diag", ":", "\n", "                ", "return", "torch", ".", "diag", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.init_kernel_function": [[281, 296], ["kernels.ScalarProductKernel", "kernels.CosineDistanceKernel", "kernels.CosineNNKernel", "kernels.NNKernel"], "function", ["None"], ["", "", "", "", "def", "init_kernel_function", "(", "kernel_input_dim", ",", "params", ")", ":", "\n", "    ", "if", "params", ".", "hn_use_scalar_product", ":", "\n", "        ", "return", "ScalarProductKernel", "(", ")", "\n", "", "elif", "params", ".", "hn_use_cosine_distance", ":", "\n", "        ", "return", "CosineDistanceKernel", "(", ")", "\n", "", "else", ":", "\n", "# if (not self.use_scalar_product) and (not self.use_cosine_distance):", "\n", "# kernel_output_dim = self.feat_dim + self.n_way if self.attention_embedding else self.feat_dim", "\n", "        ", "kernel_output_dim", "=", "params", ".", "hn_kernel_out_size", "\n", "kernel_layers_no", "=", "params", ".", "hn_kernel_layers_no", "\n", "kernel_hidden_dim", "=", "params", ".", "hn_kernel_hidden_dim", "\n", "if", "params", ".", "hn_use_cosine_nn_kernel", ":", "\n", "            ", "return", "CosineNNKernel", "(", "kernel_input_dim", ",", "kernel_output_dim", ",", "kernel_layers_no", ",", "kernel_hidden_dim", ")", "\n", "", "else", ":", "\n", "            ", "return", "NNKernel", "(", "kernel_input_dim", ",", "kernel_output_dim", ",", "kernel_layers_no", ",", "kernel_hidden_dim", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.protonet.ProtoNet.__init__": [[12, 15], ["methods.meta_template.MetaTemplate.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "n_query", "=", "None", ")", ":", "\n", "        ", "super", "(", "ProtoNet", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ")", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.protonet.ProtoNet.set_forward": [[17, 27], ["protonet.ProtoNet.parse_feature", "z_support.contiguous.contiguous.contiguous", "z_support.contiguous.contiguous.view().mean", "z_query.contiguous().view.contiguous().view.contiguous().view", "protonet.euclidean_dist", "z_support.contiguous.contiguous.view", "z_query.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.parse_feature", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.protonet.euclidean_dist"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "        ", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", "\n", "z_proto", "=", "z_support", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "#the shape of z is [n_data, n_dim]", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "dists", "=", "euclidean_dist", "(", "z_query", ",", "z_proto", ")", "\n", "scores", "=", "-", "dists", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.protonet.ProtoNet.set_forward_loss": [[29, 36], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "protonet.ProtoNet.set_forward", "protonet.ProtoNet.loss_fn", "numpy.repeat", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "range"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "y_query", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "y_query", "=", "Variable", "(", "y_query", ".", "cuda", "(", ")", ")", "\n", "\n", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "\n", "return", "self", ".", "loss_fn", "(", "scores", ",", "y_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.protonet.euclidean_dist": [[38, 50], ["x.unsqueeze().expand.size", "y.unsqueeze().expand.size", "x.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "y.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "", "def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "# x: N x D", "\n", "# y: M x D", "\n", "    ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "m", "=", "y", ".", "size", "(", "0", ")", "\n", "d", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "d", "==", "y", ".", "size", "(", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "\n", "return", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.maml.MAML.__init__": [[13, 26], ["methods.meta_template.MetaTemplate.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "backbone.Linear_fw", "maml.MAML.classifier.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "n_query", ",", "params", "=", "None", ",", "approx", "=", "False", ")", ":", "\n", "        ", "super", "(", "MAML", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ",", "change_way", "=", "False", ")", "\n", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "classifier", "=", "backbone", ".", "Linear_fw", "(", "self", ".", "feat_dim", ",", "n_way", ")", "\n", "self", ".", "classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "maml_adapt_classifier", "=", "params", ".", "maml_adapt_classifier", "\n", "\n", "self", ".", "n_task", "=", "4", "\n", "self", ".", "task_update_num", "=", "5", "\n", "self", ".", "train_lr", "=", "0.01", "\n", "self", ".", "approx", "=", "approx", "#first order approx.        ", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.maml.MAML.forward": [[27, 31], ["maml.MAML.feature.forward", "maml.MAML.classifier.forward"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "out", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.maml.MAML.set_forward": [[32, 69], ["x.cuda.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "x_var[].contiguous().view", "x_var[].contiguous().view", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "maml.MAML.zero_grad", "list", "maml.MAML.forward", "list", "maml.MAML.classifier.parameters", "list", "maml.MAML.parameters", "range", "maml.MAML.forward", "maml.MAML.loss_fn", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "enumerate", "x_var[].contiguous", "x_var[].contiguous", "torch.autograd.Variable", "torch.autograd.Variable", "maml.MAML.classifier.parameters", "maml.MAML.parameters", "maml.MAML.classifier.parameters", "maml.MAML.parameters", "list.append", "x.cuda.cuda.size", "x.cuda.cuda.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "g.detach", "numpy.repeat", "range"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "        ", "assert", "is_feature", "==", "False", ",", "'MAML do not support fixed feature'", "\n", "x", "=", "x", ".", "cuda", "(", ")", "\n", "x_var", "=", "Variable", "(", "x", ")", "\n", "x_a_i", "=", "x_var", "[", ":", ",", ":", "self", ".", "n_support", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_support", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "#support data ", "\n", "x_b_i", "=", "x_var", "[", ":", ",", "self", ".", "n_support", ":", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "#query data", "\n", "y_a_i", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", ")", ".", "cuda", "(", ")", "#label for support data", "\n", "\n", "if", "self", ".", "maml_adapt_classifier", ":", "\n", "            ", "fast_parameters", "=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "for", "weight", "in", "self", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "                ", "weight", ".", "fast", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "fast_parameters", "=", "list", "(", "self", ".", "parameters", "(", ")", ")", "#the first gradient calcuated in line 45 is based on original weight", "\n", "for", "weight", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "weight", ".", "fast", "=", "None", "\n", "\n", "", "", "self", ".", "zero_grad", "(", ")", "\n", "\n", "for", "task_step", "in", "(", "list", "(", "range", "(", "self", ".", "task_update_num", ")", ")", ")", ":", "\n", "            ", "scores", "=", "self", ".", "forward", "(", "x_a_i", ")", "\n", "set_loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y_a_i", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "set_loss", ",", "fast_parameters", ",", "create_graph", "=", "True", ")", "#build full graph support gradient of gradient", "\n", "if", "self", ".", "approx", ":", "\n", "                ", "grad", "=", "[", "g", ".", "detach", "(", ")", "for", "g", "in", "grad", "]", "#do not calculate gradient of gradient if using first order approximation", "\n", "", "fast_parameters", "=", "[", "]", "\n", "parameters", "=", "self", ".", "classifier", ".", "parameters", "(", ")", "if", "self", ".", "maml_adapt_classifier", "else", "self", ".", "parameters", "(", ")", "\n", "for", "k", ",", "weight", "in", "enumerate", "(", "parameters", ")", ":", "\n", "#for usage of weight.fast, please see Linear_fw, Conv_fw in backbone.py ", "\n", "                ", "if", "weight", ".", "fast", "is", "None", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", "-", "self", ".", "train_lr", "*", "grad", "[", "k", "]", "#create weight.fast ", "\n", "", "else", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", ".", "fast", "-", "self", ".", "train_lr", "*", "grad", "[", "k", "]", "#create an updated weight.fast, note the '-' is not merely minus value, but to create a new weight.fast ", "\n", "", "fast_parameters", ".", "append", "(", "weight", ".", "fast", ")", "#gradients calculated in line 45 are based on newest fast weight, but the graph will retain the link to old weight.fasts", "\n", "\n", "", "", "scores", "=", "self", ".", "forward", "(", "x_b_i", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.maml.MAML.set_forward_adaptation": [[70, 72], ["ValueError"], "methods", ["None"], ["", "def", "set_forward_adaptation", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "#overwrite parrent function", "\n", "        ", "raise", "ValueError", "(", "'MAML performs further adapation simply by increasing task_upate_num'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.maml.MAML.set_forward_loss": [[74, 86], ["maml.MAML.set_forward", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "maml.MAML.loss_fn", "maml.MAML.data.topk", "topk_labels.cpu().numpy().flatten", "torch.autograd.Variable().cuda.cpu().numpy", "numpy.sum", "torch.autograd.Variable", "torch.autograd.Variable", "topk_labels.cpu().numpy", "torch.autograd.Variable().cuda.cpu", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.repeat", "topk_labels.cpu", "range"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "scores", "=", "self", ".", "set_forward", "(", "x", ",", "is_feature", "=", "False", ")", "\n", "query_data_labels", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "query_data_labels", ")", "\n", "\n", "topk_scores", ",", "topk_labels", "=", "scores", ".", "data", ".", "topk", "(", "1", ",", "1", ",", "True", ",", "True", ")", "\n", "topk_ind", "=", "topk_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "y_labels", "=", "query_data_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "top1_correct", "=", "np", ".", "sum", "(", "topk_ind", "==", "y_labels", ")", "\n", "task_accuracy", "=", "(", "top1_correct", "/", "len", "(", "query_data_labels", ")", ")", "*", "100", "\n", "\n", "return", "loss", ",", "task_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.maml.MAML.train_loop": [[87, 124], ["optimizer.zero_grad", "enumerate", "numpy.asarray", "numpy.mean", "maml.MAML.set_forward_loss", "loss_all.append", "numpy.asarray.append", "optimizer.zero_grad", "x.size", "x.size", "loss.item", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum.backward", "torch.stack().sum.backward", "optimizer.step", "print", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "float"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward_loss"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "train_loader", ",", "optimizer", ")", ":", "#overwrite parrent function", "\n", "        ", "print_freq", "=", "10", "\n", "avg_loss", "=", "0", "\n", "task_count", "=", "0", "\n", "loss_all", "=", "[", "]", "\n", "acc_all", "=", "[", "]", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#train", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "assert", "self", ".", "n_way", "==", "x", ".", "size", "(", "0", ")", ",", "\"MAML do not support way change\"", "\n", "\n", "loss", ",", "task_accuracy", "=", "self", ".", "set_forward_loss", "(", "x", ")", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "item", "(", ")", "#.data[0]", "\n", "loss_all", ".", "append", "(", "loss", ")", "\n", "acc_all", ".", "append", "(", "task_accuracy", ")", "\n", "\n", "task_count", "+=", "1", "\n", "\n", "if", "task_count", "==", "self", ".", "n_task", ":", "#MAML update several tasks at one time", "\n", "                ", "loss_q", "=", "torch", ".", "stack", "(", "loss_all", ")", ".", "sum", "(", "0", ")", "\n", "loss_q", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "task_count", "=", "0", "\n", "loss_all", "=", "[", "]", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {:d} | Batch {:d}/{:d} | Loss {:f}'", ".", "format", "(", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "", "", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "\n", "metrics", "=", "{", "\"accuracy/train\"", ":", "acc_mean", "}", "\n", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.maml.MAML.test_loop": [[125, 155], ["len", "enumerate", "len", "numpy.asarray", "numpy.mean", "numpy.std", "print", "print", "ret.append", "time.time.time", "maml.MAML.correct", "time.time.time", "numpy.asarray.append", "ret.append", "ret.append", "x.size", "x.size", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.meta_template.MetaTemplate.correct"], ["", "def", "test_loop", "(", "self", ",", "test_loader", ",", "return_std", "=", "False", ",", "return_time", ":", "bool", "=", "False", ")", ":", "#overwrite parrent function", "\n", "        ", "correct", "=", "0", "\n", "count", "=", "0", "\n", "acc_all", "=", "[", "]", "\n", "eval_time", "=", "0", "\n", "iter_num", "=", "len", "(", "test_loader", ")", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "assert", "self", ".", "n_way", "==", "x", ".", "size", "(", "0", ")", ",", "\"MAML do not support way change\"", "\n", "s", "=", "time", "(", ")", "\n", "correct_this", ",", "count_this", "=", "self", ".", "correct", "(", "x", ")", "\n", "t", "=", "time", "(", ")", "\n", "eval_time", "+=", "(", "t", "-", "s", ")", "\n", "acc_all", ".", "append", "(", "correct_this", "/", "count_this", "*", "100", ")", "\n", "\n", "", "num_tasks", "=", "len", "(", "acc_all", ")", "\n", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "acc_all", ")", "\n", "print", "(", "'%d Test Acc = %4.2f%% +- %4.2f%%'", "%", "(", "iter_num", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", ")", "\n", "print", "(", "\"Num tasks\"", ",", "num_tasks", ")", "\n", "\n", "ret", "=", "[", "acc_mean", "]", "\n", "if", "return_std", ":", "\n", "            ", "ret", ".", "append", "(", "acc_std", ")", "\n", "", "if", "return_time", ":", "\n", "            ", "ret", ".", "append", "(", "eval_time", ")", "\n", "", "ret", ".", "append", "(", "{", "}", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.maml.MAML.get_logits": [[157, 161], ["maml.MAML.set_forward", "x.size"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward"], ["", "def", "get_logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "logits", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.meta_template.MetaTemplate.__init__": [[14, 22], ["torch.Module.__init__", "model_func"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "change_way", "=", "True", ")", ":", "\n", "        ", "super", "(", "MetaTemplate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_support", "=", "n_support", "\n", "self", ".", "n_query", "=", "-", "1", "#(change depends on input) ", "\n", "self", ".", "feature", "=", "model_func", "(", ")", "\n", "self", ".", "feat_dim", "=", "self", ".", "feature", ".", "final_feat_dim", "\n", "self", ".", "change_way", "=", "change_way", "#some methods allow different_way classification during training and test", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.meta_template.MetaTemplate.set_forward": [[23, 26], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.meta_template.MetaTemplate.set_forward_loss": [[27, 30], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.meta_template.MetaTemplate.forward": [[31, 34], ["meta_template.MetaTemplate.feature.forward"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.meta_template.MetaTemplate.parse_feature": [[35, 47], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.contiguous().view.contiguous().view.cuda", "x.contiguous().view.contiguous().view.contiguous().view", "meta_template.MetaTemplate.feature.forward", "z_all.view.view.view", "x.contiguous().view.contiguous().view.contiguous", "x.contiguous().view.contiguous().view.size"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "def", "parse_feature", "(", "self", ",", "x", ",", "is_feature", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "x", "=", "Variable", "(", "x", ".", "cuda", "(", ")", ")", "\n", "if", "is_feature", ":", "\n", "            ", "z_all", "=", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "(", "self", ".", "n_support", "+", "self", ".", "n_query", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "z_all", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "z_all", "=", "z_all", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", "+", "self", ".", "n_query", ",", "-", "1", ")", "\n", "", "z_support", "=", "z_all", "[", ":", ",", ":", "self", ".", "n_support", "]", "\n", "z_query", "=", "z_all", "[", ":", ",", "self", ".", "n_support", ":", "]", "\n", "\n", "return", "z_support", ",", "z_query", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.meta_template.MetaTemplate.correct": [[48, 56], ["meta_template.MetaTemplate.set_forward", "numpy.repeat", "meta_template.MetaTemplate.data.topk", "topk_labels.cpu().numpy", "numpy.sum", "range", "float", "len", "topk_labels.cpu"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward"], ["", "def", "correct", "(", "self", ",", "x", ")", ":", "\n", "        ", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "y_query", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", "\n", "\n", "topk_scores", ",", "topk_labels", "=", "scores", ".", "data", ".", "topk", "(", "1", ",", "1", ",", "True", ",", "True", ")", "\n", "topk_ind", "=", "topk_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "top1_correct", "=", "np", ".", "sum", "(", "topk_ind", "[", ":", ",", "0", "]", "==", "y_query", ")", "\n", "return", "float", "(", "top1_correct", ")", ",", "len", "(", "y_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.meta_template.MetaTemplate.train_loop": [[57, 74], ["enumerate", "optimizer.zero_grad", "meta_template.MetaTemplate.set_forward_loss", "meta_template.MetaTemplate.backward", "optimizer.step", "x.size", "x.size", "meta_template.MetaTemplate.item", "print", "len", "float"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward_loss"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "train_loader", ",", "optimizer", ")", ":", "\n", "        ", "print_freq", "=", "10", "\n", "\n", "avg_loss", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "if", "self", ".", "change_way", ":", "\n", "                ", "self", ".", "n_way", "=", "x", ".", "size", "(", "0", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "set_forward_loss", "(", "x", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "item", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "#print(optimizer.state_dict()['param_groups'][0]['lr'])", "\n", "                ", "print", "(", "'Epoch {:d} | Batch {:d}/{:d} | Loss {:f}'", ".", "format", "(", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.meta_template.MetaTemplate.test_loop": [[75, 118], ["collections.defaultdict", "len", "enumerate", "numpy.asarray", "numpy.mean", "numpy.std", "print", "print", "numpy.repeat", "meta_template.MetaTemplate.reshape", "meta_template.MetaTemplate.data.topk", "topk_labels.cpu().numpy", "numpy.sum", "float", "len", "numpy.asarray.append", "x.size", "x.size", "range", "meta_template.MetaTemplate.set_forward_with_adaptation", "acc_at_metrics.items", "numpy.mean", "collections.defaultdict.items", "acc_at[].append", "meta_template.MetaTemplate.set_forward", "topk_labels.cpu", "len", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward_with_adaptation", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward"], ["", "", "", "def", "test_loop", "(", "self", ",", "test_loader", ",", "record", "=", "None", ",", "return_std", ":", "bool", "=", "False", ")", ":", "\n", "        ", "correct", "=", "0", "\n", "count", "=", "0", "\n", "acc_all", "=", "[", "]", "\n", "acc_at", "=", "defaultdict", "(", "list", ")", "\n", "\n", "iter_num", "=", "len", "(", "test_loader", ")", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "if", "self", ".", "change_way", ":", "\n", "                ", "self", ".", "n_way", "=", "x", ".", "size", "(", "0", ")", "\n", "", "y_query", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", "\n", "\n", "try", ":", "\n", "                ", "scores", ",", "acc_at_metrics", "=", "self", ".", "set_forward_with_adaptation", "(", "x", ")", "\n", "for", "(", "k", ",", "v", ")", "in", "acc_at_metrics", ".", "items", "(", ")", ":", "\n", "                    ", "acc_at", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "\n", "", "scores", "=", "scores", ".", "reshape", "(", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "self", ".", "n_way", ")", ")", "\n", "\n", "topk_scores", ",", "topk_labels", "=", "scores", ".", "data", ".", "topk", "(", "1", ",", "1", ",", "True", ",", "True", ")", "\n", "topk_ind", "=", "topk_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "top1_correct", "=", "np", ".", "sum", "(", "topk_ind", "[", ":", ",", "0", "]", "==", "y_query", ")", "\n", "correct_this", "=", "float", "(", "top1_correct", ")", "\n", "count_this", "=", "len", "(", "y_query", ")", "\n", "acc_all", ".", "append", "(", "correct_this", "/", "count_this", "*", "100", ")", "\n", "\n", "", "metrics", "=", "{", "\n", "k", ":", "np", ".", "mean", "(", "v", ")", "if", "len", "(", "v", ")", ">", "0", "else", "0", "\n", "for", "(", "k", ",", "v", ")", "in", "acc_at", ".", "items", "(", ")", "\n", "}", "\n", "\n", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "acc_all", ")", "\n", "print", "(", "metrics", ")", "\n", "print", "(", "'%d Test Acc = %4.2f%% +- %4.2f%%'", "%", "(", "iter_num", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", ")", "\n", "if", "return_std", ":", "\n", "            ", "return", "acc_mean", ",", "acc_std", ",", "metrics", "\n", "", "else", ":", "\n", "            ", "return", "acc_mean", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.meta_template.MetaTemplate.set_forward_adaptation": [[119, 153], ["meta_template.MetaTemplate.parse_feature", "z_support.contiguous().view.contiguous().view.contiguous().view", "z_query.contiguous().view.contiguous().view.contiguous().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Linear", "torch.Linear", "torch.Linear", "linear_clf.cuda.cuda.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "loss_function.cuda.cuda.cuda", "range", "linear_clf.cuda.cuda.", "numpy.repeat", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "linear_clf.cuda.cuda.parameters", "numpy.random.permutation", "range", "z_support.contiguous().view.contiguous().view.contiguous", "z_query.contiguous().view.contiguous().view.contiguous", "range", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "linear_clf.cuda.cuda.", "loss_function.cuda.cuda.", "loss_function.cuda.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "min"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.parse_feature", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "", "def", "set_forward_adaptation", "(", "self", ",", "x", ",", "is_feature", "=", "True", ")", ":", "#further adaptation, default is fixing feature and train a new softmax clasifier", "\n", "        ", "assert", "is_feature", "==", "True", ",", "'Feature is fixed in further adaptation'", "\n", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_support", ",", "-", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "y_support", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", "\n", "y_support", "=", "Variable", "(", "y_support", ".", "cuda", "(", ")", ")", "\n", "\n", "linear_clf", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "n_way", ")", "\n", "linear_clf", "=", "linear_clf", ".", "cuda", "(", ")", "\n", "\n", "set_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "linear_clf", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "dampening", "=", "0.9", ",", "weight_decay", "=", "0.001", ")", "\n", "\n", "loss_function", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_function", "=", "loss_function", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "4", "\n", "support_size", "=", "self", ".", "n_way", "*", "self", ".", "n_support", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "            ", "rand_id", "=", "np", ".", "random", ".", "permutation", "(", "support_size", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "support_size", ",", "batch_size", ")", ":", "\n", "                ", "set_optimizer", ".", "zero_grad", "(", ")", "\n", "selected_id", "=", "torch", ".", "from_numpy", "(", "rand_id", "[", "i", ":", "min", "(", "i", "+", "batch_size", ",", "support_size", ")", "]", ")", ".", "cuda", "(", ")", "\n", "z_batch", "=", "z_support", "[", "selected_id", "]", "\n", "y_batch", "=", "y_support", "[", "selected_id", "]", "\n", "scores", "=", "linear_clf", "(", "z_batch", ")", "\n", "loss", "=", "loss_function", "(", "scores", ",", "y_batch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "set_optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "scores", "=", "linear_clf", "(", "z_query", ")", "\n", "return", "scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernel_convolutions.KernelConv.__init__": [[6, 28], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_shot", ",", "hn_kernel_convolution_output_dim", ")", ":", "\n", "        ", "super", "(", "KernelConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "n_shot", "==", "5", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "2", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", ",", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "3", ",", "5", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "5", "*", "18", "*", "18", ",", "hn_kernel_convolution_output_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "2", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", ",", "3", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "3", ",", "5", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "5", "*", "2", "*", "2", ",", "hn_kernel_convolution_output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernel_convolutions.KernelConv.forward": [[29, 34], ["kernel_convolutions.KernelConv.conv", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "kernel_convolutions.KernelConv.fc"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ",", "end_dim", "=", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.relationnet.RelationNet.__init__": [[13, 23], ["methods.meta_template.MetaTemplate.__init__", "relationnet.RelationModule", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "loss_type", "=", "'mse'", ",", "n_query", "=", "None", ")", ":", "\n", "        ", "super", "(", "RelationNet", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ")", "\n", "\n", "self", ".", "loss_type", "=", "loss_type", "#'softmax'# 'mse'", "\n", "self", ".", "relation_module", "=", "RelationModule", "(", "self", ".", "feat_dim", ",", "8", ",", "self", ".", "loss_type", ")", "#relation net features are not pooled, so self.feat_dim is [dim, w, h] ", "\n", "\n", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.relationnet.RelationNet.set_forward": [[24, 41], ["relationnet.RelationNet.parse_feature", "z_support.contiguous.contiguous.contiguous", "z_support.contiguous.contiguous.view().mean", "z_query.contiguous().view.contiguous().view.contiguous().view", "z_support.contiguous.view().mean.unsqueeze().repeat", "z_query.contiguous().view.contiguous().view.unsqueeze().repeat", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "relationnet.RelationNet.feat_dim.copy", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "relationnet.RelationNet.relation_module().view", "z_support.contiguous.contiguous.view", "z_query.contiguous().view.contiguous().view.contiguous", "z_support.contiguous.view().mean.unsqueeze", "z_query.contiguous().view.contiguous().view.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relationnet.RelationNet.relation_module"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.parse_feature"], ["", "", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "        ", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", "\n", "z_proto", "=", "z_support", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", ",", "*", "self", ".", "feat_dim", ")", ".", "mean", "(", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "*", "self", ".", "feat_dim", ")", "\n", "\n", "\n", "z_proto_ext", "=", "z_proto", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "n_query", "*", "self", ".", "n_way", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "z_query_ext", "=", "z_query", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "n_way", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "z_query_ext", "=", "torch", ".", "transpose", "(", "z_query_ext", ",", "0", ",", "1", ")", "\n", "extend_final_feat_dim", "=", "self", ".", "feat_dim", ".", "copy", "(", ")", "\n", "extend_final_feat_dim", "[", "0", "]", "*=", "2", "\n", "relation_pairs", "=", "torch", ".", "cat", "(", "(", "z_proto_ext", ",", "z_query_ext", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "*", "extend_final_feat_dim", ")", "\n", "relations", "=", "self", ".", "relation_module", "(", "relation_pairs", ")", ".", "view", "(", "-", "1", ",", "self", ".", "n_way", ")", "\n", "\n", "return", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.relationnet.RelationNet.set_forward_adaptation": [[42, 94], ["relationnet.RelationModule", "RelationModule.load_state_dict", "relationnet.RelationNet.parse_feature", "z_support.contiguous.contiguous.contiguous", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "z_support.contiguous.contiguous.data.cpu().numpy", "range", "z_support.contiguous.contiguous.view().mean", "z_query.contiguous().view.contiguous().view.contiguous().view", "z_support.contiguous.view().mean.unsqueeze().repeat", "z_query.contiguous().view.contiguous().view.unsqueeze().repeat", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "relationnet.RelationNet.feat_dim.copy", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "relationnet.RelationNet.relation_module().view", "relationnet.RelationNet.relation_module.load_state_dict", "relationnet.RelationNet.relation_module.state_dict", "relationnet.RelationNet.relation_module.parameters", "numpy.random.permutation().tolist", "numpy.array", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "relationnet.RelationNet.set_forward", "relationnet.RelationNet.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.optim.SGD.step", "RelationModule.state_dict", "z_support.contiguous.contiguous.data.cpu", "torch.Tensor().cuda.size", "torch.Tensor().cuda.size", "torch.Tensor().cuda.size", "numpy.repeat", "utils.one_hot", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "relationnet.RelationNet.loss_fn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "relationnet.RelationNet.loss_fn", "z_support.contiguous.contiguous.view", "z_query.contiguous().view.contiguous().view.contiguous", "z_support.contiguous.view().mean.unsqueeze", "z_query.contiguous().view.contiguous().view.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relationnet.RelationNet.relation_module", "numpy.random.permutation", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "range", "z_support.contiguous.contiguous.size"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.parse_feature", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.utils.one_hot", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_adaptation", "(", "self", ",", "x", ",", "is_feature", "=", "True", ")", ":", "#overwrite parent function", "\n", "        ", "assert", "is_feature", "==", "True", ",", "'Finetune only support fixed feature'", "\n", "full_n_support", "=", "self", ".", "n_support", "\n", "full_n_query", "=", "self", ".", "n_query", "\n", "relation_module_clone", "=", "RelationModule", "(", "self", ".", "feat_dim", ",", "8", ",", "self", ".", "loss_type", ")", "\n", "relation_module_clone", ".", "load_state_dict", "(", "self", ".", "relation_module", ".", "state_dict", "(", ")", ")", "\n", "\n", "\n", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", "\n", "set_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "relation_module", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "dampening", "=", "0.9", ",", "weight_decay", "=", "0.001", ")", "\n", "\n", "self", ".", "n_support", "=", "3", "\n", "self", ".", "n_query", "=", "2", "\n", "\n", "z_support_cpu", "=", "z_support", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "            ", "perm_id", "=", "np", ".", "random", ".", "permutation", "(", "full_n_support", ")", ".", "tolist", "(", ")", "\n", "sub_x", "=", "np", ".", "array", "(", "[", "z_support_cpu", "[", "i", ",", "perm_id", ",", ":", ",", ":", ",", ":", "]", "for", "i", "in", "range", "(", "z_support", ".", "size", "(", "0", ")", ")", "]", ")", "\n", "sub_x", "=", "torch", ".", "Tensor", "(", "sub_x", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "change_way", ":", "\n", "                ", "self", ".", "n_way", "=", "sub_x", ".", "size", "(", "0", ")", "\n", "", "set_optimizer", ".", "zero_grad", "(", ")", "\n", "y", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "scores", "=", "self", ".", "set_forward", "(", "sub_x", ",", "is_feature", "=", "True", ")", "\n", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "                ", "y_oh", "=", "utils", ".", "one_hot", "(", "y", ",", "self", ".", "n_way", ")", "\n", "y_oh", "=", "Variable", "(", "y_oh", ".", "cuda", "(", ")", ")", "\n", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y_oh", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "Variable", "(", "y", ".", "cuda", "(", ")", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "set_optimizer", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "n_support", "=", "full_n_support", "\n", "self", ".", "n_query", "=", "full_n_query", "\n", "z_proto", "=", "z_support", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", ",", "*", "self", ".", "feat_dim", ")", ".", "mean", "(", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "*", "self", ".", "feat_dim", ")", "\n", "\n", "\n", "z_proto_ext", "=", "z_proto", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "n_query", "*", "self", ".", "n_way", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "z_query_ext", "=", "z_query", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "n_way", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "z_query_ext", "=", "torch", ".", "transpose", "(", "z_query_ext", ",", "0", ",", "1", ")", "\n", "extend_final_feat_dim", "=", "self", ".", "feat_dim", ".", "copy", "(", ")", "\n", "extend_final_feat_dim", "[", "0", "]", "*=", "2", "\n", "relation_pairs", "=", "torch", ".", "cat", "(", "(", "z_proto_ext", ",", "z_query_ext", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "*", "extend_final_feat_dim", ")", "\n", "relations", "=", "self", ".", "relation_module", "(", "relation_pairs", ")", ".", "view", "(", "-", "1", ",", "self", ".", "n_way", ")", "\n", "\n", "self", ".", "relation_module", ".", "load_state_dict", "(", "relation_module_clone", ".", "state_dict", "(", ")", ")", "\n", "return", "relations", "\n", "", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.relationnet.RelationNet.set_forward_loss": [[94, 106], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "relationnet.RelationNet.set_forward", "numpy.repeat", "utils.one_hot", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "relationnet.RelationNet.loss_fn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "relationnet.RelationNet.loss_fn", "range", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.utils.one_hot", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "\n", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "            ", "y_oh", "=", "utils", ".", "one_hot", "(", "y", ",", "self", ".", "n_way", ")", "\n", "y_oh", "=", "Variable", "(", "y_oh", ".", "cuda", "(", ")", ")", "\n", "\n", "return", "self", ".", "loss_fn", "(", "scores", ",", "y_oh", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "Variable", "(", "y", ".", "cuda", "(", ")", ")", "\n", "return", "self", ".", "loss_fn", "(", "scores", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.relationnet.RelationConvBlock.__init__": [[108, 123], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.init_layer"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.backbone.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "RelationConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "self", ".", "C", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C", ",", "self", ".", "BN", ",", "self", ".", "relu", ",", "self", ".", "pool", "]", "\n", "\n", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "backbone", ".", "init_layer", "(", "layer", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "parametrized_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.relationnet.RelationConvBlock.forward": [[124, 127], ["relationnet.RelationConvBlock.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.relationnet.RelationModule.__init__": [[130, 143], ["torch.Module.__init__", "relationnet.RelationConvBlock", "relationnet.RelationConvBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "int", "shrink_s", "shrink_s", "int"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "loss_type", "=", "'mse'", ")", ":", "\n", "        ", "super", "(", "RelationModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "padding", "=", "1", "if", "(", "input_size", "[", "1", "]", "<", "10", ")", "and", "(", "input_size", "[", "2", "]", "<", "10", ")", "else", "0", "# when using Resnet, conv map without avgpooling is 7x7, need padding in block to do pooling", "\n", "\n", "self", ".", "layer1", "=", "RelationConvBlock", "(", "input_size", "[", "0", "]", "*", "2", ",", "input_size", "[", "0", "]", ",", "padding", "=", "padding", ")", "\n", "self", ".", "layer2", "=", "RelationConvBlock", "(", "input_size", "[", "0", "]", ",", "input_size", "[", "0", "]", ",", "padding", "=", "padding", ")", "\n", "\n", "shrink_s", "=", "lambda", "s", ":", "int", "(", "(", "int", "(", "(", "s", "-", "2", "+", "2", "*", "padding", ")", "/", "2", ")", "-", "2", "+", "2", "*", "padding", ")", "/", "2", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_size", "[", "0", "]", "*", "shrink_s", "(", "input_size", "[", "1", "]", ")", "*", "shrink_s", "(", "input_size", "[", "2", "]", ")", ",", "hidden_size", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.relationnet.RelationModule.forward": [[144, 155], ["relationnet.RelationModule.layer1", "relationnet.RelationModule.layer2", "relationnet.RelationModule.view", "torch.relu", "torch.relu", "torch.relu", "relationnet.RelationModule.size", "relationnet.RelationModule.fc1", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "relationnet.RelationModule.fc2", "relationnet.RelationModule.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "            ", "out", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "'softmax'", ":", "\n", "            ", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.feature_transfer_regression.Regressor.__init__": [[12, 15], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Regressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Linear", "(", "2916", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.feature_transfer_regression.Regressor.return_clones": [[16, 19], ["feature_transfer_regression.Regressor.layer4.weight.data.clone().detach", "feature_transfer_regression.Regressor.layer4.bias.data.clone().detach", "feature_transfer_regression.Regressor.layer4.weight.data.clone", "feature_transfer_regression.Regressor.layer4.bias.data.clone"], "methods", ["None"], ["", "def", "return_clones", "(", "self", ")", ":", "\n", "        ", "layer4_w", "=", "self", ".", "layer4", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "layer4_b", "=", "self", ".", "layer4", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.feature_transfer_regression.Regressor.assign_clones": [[20, 23], ["feature_transfer_regression.Regressor.layer4.weight.data.copy_", "feature_transfer_regression.Regressor.layer4.weight.data.copy_"], "methods", ["None"], ["", "def", "assign_clones", "(", "self", ",", "weights_list", ")", ":", "\n", "        ", "self", ".", "layer4", ".", "weight", ".", "data", ".", "copy_", "(", "weights_list", "[", "0", "]", ")", "\n", "self", ".", "layer4", ".", "weight", ".", "data", ".", "copy_", "(", "weights_list", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.feature_transfer_regression.Regressor.forward": [[24, 27], ["feature_transfer_regression.Regressor.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.feature_transfer_regression.FeatureTransfer.__init__": [[29, 35], ["torch.Module.__init__", "feature_transfer_regression.Regressor", "feature_transfer_regression.Regressor", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ")", ":", "\n", "        ", "super", "(", "FeatureTransfer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "regressor", "=", "Regressor", "(", ")", "\n", "self", ".", "feature_extractor", "=", "backbone", "\n", "self", ".", "model", "=", "Regressor", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.feature_transfer_regression.FeatureTransfer.train_loop": [[36, 50], ["data.qmul_loader.get_batch", "zip", "batch.cuda", "batch_labels.cuda", "optimizer.zero_grad", "feature_transfer_regression.FeatureTransfer.model", "feature_transfer_regression.FeatureTransfer.criterion", "feature_transfer_regression.FeatureTransfer.backward", "optimizer.step", "feature_transfer_regression.FeatureTransfer.feature_extractor", "print", "feature_transfer_regression.FeatureTransfer.item"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.qmul_loader.get_batch", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "optimizer", ")", ":", "\n", "        ", "batch", ",", "batch_labels", "=", "get_batch", "(", "train_people", ")", "\n", "batch", ",", "batch_labels", "=", "batch", ".", "cuda", "(", ")", ",", "batch_labels", ".", "cuda", "(", ")", "\n", "\n", "for", "inputs", ",", "labels", "in", "zip", "(", "batch", ",", "batch_labels", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "self", ".", "feature_extractor", "(", "inputs", ")", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "(", "epoch", "%", "10", "==", "0", ")", ":", "\n", "                ", "print", "(", "'[%d] - Loss: %.3f'", "%", "(", "\n", "epoch", ",", "loss", ".", "item", "(", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.feature_transfer_regression.FeatureTransfer.test_loop": [[52, 81], ["data.qmul_loader.get_batch", "list", "inputs.cuda", "targets.cuda", "inputs[].cuda", "targets[].cuda", "inputs[].cuda", "targets[].cuda", "numpy.random.randint", "optimizer.zero_grad", "feature_transfer_regression.FeatureTransfer.feature_extractor().detach", "feature_transfer_regression.FeatureTransfer.model().squeeze", "feature_transfer_regression.FeatureTransfer.criterion", "feature_transfer_regression.FeatureTransfer.backward", "optimizer.step", "feature_transfer_regression.FeatureTransfer.feature_extractor.eval", "feature_transfer_regression.FeatureTransfer.model.eval", "feature_transfer_regression.FeatureTransfer.feature_extractor().detach", "feature_transfer_regression.FeatureTransfer.model().squeeze", "feature_transfer_regression.FeatureTransfer.criterion", "numpy.random.choice", "list", "range", "len", "feature_transfer_regression.FeatureTransfer.feature_extractor", "feature_transfer_regression.FeatureTransfer.model", "feature_transfer_regression.FeatureTransfer.feature_extractor", "feature_transfer_regression.FeatureTransfer.model", "range"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.qmul_loader.get_batch", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "", "", "def", "test_loop", "(", "self", ",", "n_support", ",", "optimizer", ")", ":", "# we need optimizer to take one gradient step", "\n", "        ", "inputs", ",", "targets", "=", "get_batch", "(", "test_people", ")", "\n", "\n", "support_ind", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "19", ")", ")", ",", "replace", "=", "False", ",", "size", "=", "n_support", ")", ")", "\n", "query_ind", "=", "[", "i", "for", "i", "in", "range", "(", "19", ")", "if", "i", "not", "in", "support_ind", "]", "\n", "\n", "x_all", "=", "inputs", ".", "cuda", "(", ")", "\n", "y_all", "=", "targets", ".", "cuda", "(", ")", "\n", "\n", "x_support", "=", "inputs", "[", ":", ",", "support_ind", ",", ":", ",", ":", ",", ":", "]", ".", "cuda", "(", ")", "\n", "y_support", "=", "targets", "[", ":", ",", "support_ind", "]", ".", "cuda", "(", ")", "\n", "x_query", "=", "inputs", "[", ":", ",", "query_ind", ",", ":", ",", ":", ",", ":", "]", ".", "cuda", "(", ")", "\n", "y_query", "=", "targets", "[", ":", ",", "query_ind", "]", ".", "cuda", "(", ")", "\n", "\n", "# choose a random test person", "\n", "n", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "test_people", ")", "-", "1", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "z_support", "=", "self", ".", "feature_extractor", "(", "x_support", "[", "n", "]", ")", ".", "detach", "(", ")", "\n", "output_support", "=", "self", ".", "model", "(", "z_support", ")", ".", "squeeze", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output_support", ",", "y_support", "[", "n", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "feature_extractor", ".", "eval", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "z_all", "=", "self", ".", "feature_extractor", "(", "x_all", "[", "n", "]", ")", ".", "detach", "(", ")", "\n", "output_all", "=", "self", ".", "model", "(", "z_all", ")", ".", "squeeze", "(", ")", "\n", "return", "self", ".", "criterion", "(", "output_all", ",", "y_all", "[", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.feature_transfer_regression.FeatureTransfer.save_checkpoint": [[82, 84], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "feature_transfer_regression.FeatureTransfer.feature_extractor.state_dict", "feature_transfer_regression.FeatureTransfer.model.state_dict"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "torch", ".", "save", "(", "{", "'feature_extractor'", ":", "self", ".", "feature_extractor", ".", "state_dict", "(", ")", ",", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", "}", ",", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.feature_transfer_regression.FeatureTransfer.load_checkpoint": [[85, 89], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "feature_transfer_regression.FeatureTransfer.feature_extractor.load_state_dict", "feature_transfer_regression.FeatureTransfer.model.load_state_dict"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "self", ".", "feature_extractor", ".", "load_state_dict", "(", "ckpt", "[", "'feature_extractor'", "]", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "ckpt", "[", "'model'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.transformer.MultiheadAttention.__init__": [[20, 34], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "transformer.MultiheadAttention._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.transformer.MultiheadAttention._reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "embed_dim", ",", "num_heads", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "embed_dim", "%", "num_heads", "==", "0", ",", "\"Embedding dimension must be 0 modulo number of heads.\"", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "\n", "# Stack all weight matrices 1...h together for efficiency", "\n", "# Note that in many implementations you see \"bias=False\" which is optional", "\n", "self", ".", "qkv_proj", "=", "nn", ".", "Linear", "(", "input_dim", ",", "3", "*", "embed_dim", ")", "\n", "self", ".", "o_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.transformer.MultiheadAttention._reset_parameters": [[35, 41], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "transformer.MultiheadAttention.qkv_proj.bias.data.fill_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "transformer.MultiheadAttention.o_proj.bias.data.fill_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "# Original Transformer initialization, see PyTorch documentation", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "qkv_proj", ".", "weight", ")", "\n", "self", ".", "qkv_proj", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "o_proj", ".", "weight", ")", "\n", "self", ".", "o_proj", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.transformer.MultiheadAttention.forward": [[42, 61], ["x.size", "transformer.MultiheadAttention.qkv_proj", "qkv.permute.permute.reshape", "qkv.permute.permute.permute", "qkv.permute.permute.chunk", "transformer.scaled_dot_product", "values.reshape.reshape.permute", "values.reshape.reshape.reshape", "transformer.MultiheadAttention.o_proj"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.transformer.scaled_dot_product"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "batch_size", ",", "seq_length", ",", "embed_dim", "=", "x", ".", "size", "(", ")", "\n", "qkv", "=", "self", ".", "qkv_proj", "(", "x", ")", "\n", "\n", "# Separate Q, K, V from linear output", "\n", "qkv", "=", "qkv", ".", "reshape", "(", "batch_size", ",", "seq_length", ",", "self", ".", "num_heads", ",", "3", "*", "self", ".", "head_dim", ")", "\n", "qkv", "=", "qkv", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# [Batch, Head, SeqLen, Dims]", "\n", "q", ",", "k", ",", "v", "=", "qkv", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Determine value outputs", "\n", "values", ",", "attention", "=", "scaled_dot_product", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ")", "\n", "values", "=", "values", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# [Batch, SeqLen, Head, Dims]", "\n", "values", "=", "values", ".", "reshape", "(", "batch_size", ",", "seq_length", ",", "embed_dim", ")", "\n", "o", "=", "self", ".", "o_proj", "(", "values", ")", "\n", "\n", "if", "return_attention", ":", "\n", "            ", "return", "o", ",", "attention", "\n", "", "else", ":", "\n", "            ", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.transformer.EncoderBlock.__init__": [[65, 90], ["torch.Module.__init__", "transformer.MultiheadAttention", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "num_heads", ",", "dim_feedforward", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            input_dim - Dimensionality of the input\n            num_heads - Number of heads to use in the attention block\n            dim_feedforward - Dimensionality of the hidden layer in the MLP\n            dropout - Dropout probability to use in the dropout layers\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Attention layer", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "input_dim", ",", "input_dim", ",", "num_heads", ")", "\n", "\n", "# Two-layer MLP", "\n", "self", ".", "linear_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "dim_feedforward", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_feedforward", ",", "input_dim", ")", "\n", ")", "\n", "\n", "# Layers to apply in between the main layers", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "input_dim", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "input_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.transformer.EncoderBlock.forward": [[91, 103], ["transformer.EncoderBlock.self_attn", "transformer.EncoderBlock.norm1", "transformer.EncoderBlock.linear_net", "transformer.EncoderBlock.norm2", "transformer.EncoderBlock.dropout", "transformer.EncoderBlock.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# Attention part", "\n", "        ", "attn_out", "=", "self", ".", "self_attn", "(", "x", ",", "mask", "=", "mask", ")", "\n", "x", "=", "x", "+", "self", ".", "dropout", "(", "attn_out", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "\n", "# MLP part", "\n", "linear_out", "=", "self", ".", "linear_net", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "dropout", "(", "linear_out", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.transformer.TransformerEncoder.__init__": [[107, 110], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "transformer.EncoderBlock", "range"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "**", "block_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "EncoderBlock", "(", "**", "block_args", ")", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.transformer.TransformerEncoder.forward": [[111, 115], ["l"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "for", "l", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "l", "(", "x", ",", "mask", "=", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.transformer.TransformerEncoder.get_attention_maps": [[116, 123], ["l.self_attn", "attention_maps.append", "l"], "methods", ["None"], ["", "def", "get_attention_maps", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "attention_maps", "=", "[", "]", "\n", "for", "l", "in", "self", ".", "layers", ":", "\n", "            ", "_", ",", "attn_map", "=", "l", ".", "self_attn", "(", "x", ",", "mask", "=", "mask", ",", "return_attention", "=", "True", ")", "\n", "attention_maps", ".", "append", "(", "attn_map", ")", "\n", "x", "=", "l", "(", "x", ")", "\n", "", "return", "attention_maps", "", "", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.transformer.scaled_dot_product": [[7, 16], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "q.size", "k.transpose", "math.sqrt", "attn_logits.masked_fill.masked_fill"], "function", ["None"], ["def", "scaled_dot_product", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "    ", "d_k", "=", "q", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "attn_logits", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "attn_logits", "=", "attn_logits", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "attn_logits", "=", "attn_logits", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "9e15", ")", "\n", "", "attention", "=", "F", ".", "softmax", "(", "attn_logits", ",", "dim", "=", "-", "1", ")", "\n", "values", "=", "torch", ".", "matmul", "(", "attention", ",", "v", ")", "\n", "return", "values", ",", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinefinetune.BaselineFinetune.__init__": [[10, 13], ["methods.meta_template.MetaTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "loss_type", "=", "\"softmax\"", ")", ":", "\n", "        ", "super", "(", "BaselineFinetune", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ")", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinefinetune.BaselineFinetune.set_forward": [[14, 16], ["baselinefinetune.BaselineFinetune.set_forward_adaptation"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinefinetune.BaselineFinetune.set_forward_adaptation"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "set_forward_adaptation", "(", "x", ",", "is_feature", ")", ";", "#Baseline always do adaptation", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinefinetune.BaselineFinetune.set_forward_adaptation": [[17, 53], ["baselinefinetune.BaselineFinetune.parse_feature", "z_support.contiguous().view.contiguous().view.contiguous().view", "z_query.contiguous().view.contiguous().view.contiguous().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "backbone.distLinear.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "loss_function.cuda.cuda.cuda", "range", "backbone.distLinear.", "numpy.repeat", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.Linear", "torch.Linear", "torch.Linear", "backbone.distLinear.parameters", "numpy.random.permutation", "range", "z_support.contiguous().view.contiguous().view.contiguous", "z_query.contiguous().view.contiguous().view.contiguous", "range", "backbone.distLinear", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "backbone.distLinear.", "loss_function.cuda.cuda.", "loss_function.cuda.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "min"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.parse_feature", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_adaptation", "(", "self", ",", "x", ",", "is_feature", "=", "True", ")", ":", "\n", "        ", "assert", "is_feature", "==", "True", ",", "'Baseline only support testing with feature'", "\n", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_support", ",", "-", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "y_support", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", "\n", "y_support", "=", "Variable", "(", "y_support", ".", "cuda", "(", ")", ")", "\n", "\n", "if", "self", ".", "loss_type", "==", "'softmax'", ":", "\n", "            ", "linear_clf", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "n_way", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "'dist'", ":", "\n", "            ", "linear_clf", "=", "backbone", ".", "distLinear", "(", "self", ".", "feat_dim", ",", "self", ".", "n_way", ")", "\n", "", "linear_clf", "=", "linear_clf", ".", "cuda", "(", ")", "\n", "\n", "set_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "linear_clf", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "dampening", "=", "0.9", ",", "weight_decay", "=", "0.001", ")", "\n", "\n", "loss_function", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_function", "=", "loss_function", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "4", "\n", "support_size", "=", "self", ".", "n_way", "*", "self", ".", "n_support", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "            ", "rand_id", "=", "np", ".", "random", ".", "permutation", "(", "support_size", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "support_size", ",", "batch_size", ")", ":", "\n", "                ", "set_optimizer", ".", "zero_grad", "(", ")", "\n", "selected_id", "=", "torch", ".", "from_numpy", "(", "rand_id", "[", "i", ":", "min", "(", "i", "+", "batch_size", ",", "support_size", ")", "]", ")", ".", "cuda", "(", ")", "\n", "z_batch", "=", "z_support", "[", "selected_id", "]", "\n", "y_batch", "=", "y_support", "[", "selected_id", "]", "\n", "scores", "=", "linear_clf", "(", "z_batch", ")", "\n", "loss", "=", "loss_function", "(", "scores", ",", "y_batch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "set_optimizer", ".", "step", "(", ")", "\n", "", "", "scores", "=", "linear_clf", "(", "z_query", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.baselinefinetune.BaselineFinetune.set_forward_loss": [[55, 57], ["ValueError"], "methods", ["None"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Baseline predict on pretrained feature and do not support finetune backbone'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.__init__": [[19, 24], ["torch.Module.__init__", "DKT_regression.DKT.get_model_likelihood_mll"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.get_model_likelihood_mll"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ")", ":", "\n", "        ", "super", "(", "DKT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "## GP parameters", "\n", "self", ".", "feature_extractor", "=", "backbone", "\n", "self", ".", "get_model_likelihood_mll", "(", ")", "#Init model, likelihood, and mll", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.get_model_likelihood_mll": [[25, 38], ["gpytorch.likelihoods.GaussianLikelihood", "DKT_regression.ExactGPLayer", "ExactGPLayer.cuda", "gpytorch.likelihoods.GaussianLikelihood.cuda", "gpytorch.mlls.ExactMarginalLogLikelihood().cuda", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "gpytorch.mlls.ExactMarginalLogLikelihood", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "get_model_likelihood_mll", "(", "self", ",", "train_x", "=", "None", ",", "train_y", "=", "None", ")", ":", "\n", "        ", "if", "(", "train_x", "is", "None", ")", ":", "train_x", "=", "torch", ".", "ones", "(", "19", ",", "2916", ")", ".", "cuda", "(", ")", "\n", "if", "(", "train_y", "is", "None", ")", ":", "train_y", "=", "torch", ".", "ones", "(", "19", ")", ".", "cuda", "(", ")", "\n", "\n", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "ExactGPLayer", "(", "train_x", "=", "train_x", ",", "train_y", "=", "train_y", ",", "likelihood", "=", "likelihood", ",", "kernel", "=", "kernel_type", ")", "\n", "\n", "self", ".", "model", "=", "model", ".", "cuda", "(", ")", "\n", "self", ".", "likelihood", "=", "likelihood", ".", "cuda", "(", ")", "\n", "self", ".", "mll", "=", "gpytorch", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "self", ".", "likelihood", ",", "self", ".", "model", ")", ".", "cuda", "(", ")", "\n", "self", ".", "mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "return", "self", ".", "model", ",", "self", ".", "likelihood", ",", "self", ".", "mll", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.set_forward": [[39, 41], ["None"], "methods", ["None"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.set_forward_loss": [[42, 44], ["None"], "methods", ["None"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.train_loop": [[45, 64], ["data.qmul_loader.get_batch", "zip", "batch.cuda", "batch_labels.cuda", "optimizer.zero_grad", "DKT_regression.DKT.feature_extractor", "DKT_regression.DKT.model.set_train_data", "DKT_regression.DKT.model", "loss.backward", "optimizer.step", "DKT_regression.DKT.mse", "DKT_regression.DKT.mll", "print", "loss.item", "DKT_regression.DKT.item", "DKT_regression.DKT.model.likelihood.noise.item"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.qmul_loader.get_batch", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "optimizer", ")", ":", "\n", "        ", "batch", ",", "batch_labels", "=", "get_batch", "(", "train_people", ")", "\n", "batch", ",", "batch_labels", "=", "batch", ".", "cuda", "(", ")", ",", "batch_labels", ".", "cuda", "(", ")", "\n", "for", "inputs", ",", "labels", "in", "zip", "(", "batch", ",", "batch_labels", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "self", ".", "feature_extractor", "(", "inputs", ")", "\n", "\n", "self", ".", "model", ".", "set_train_data", "(", "inputs", "=", "z", ",", "targets", "=", "labels", ")", "\n", "predictions", "=", "self", ".", "model", "(", "z", ")", "\n", "loss", "=", "-", "self", ".", "mll", "(", "predictions", ",", "self", ".", "model", ".", "train_targets", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "mse", "=", "self", ".", "mse", "(", "predictions", ".", "mean", ",", "labels", ")", "\n", "\n", "if", "(", "epoch", "%", "10", "==", "0", ")", ":", "\n", "                ", "print", "(", "'[%d] - Loss: %.3f  MSE: %.3f noise: %.3f'", "%", "(", "\n", "epoch", ",", "loss", ".", "item", "(", ")", ",", "mse", ".", "item", "(", ")", ",", "\n", "self", ".", "model", ".", "likelihood", ".", "noise", ".", "item", "(", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.test_loop": [[66, 98], ["data.qmul_loader.get_batch", "list", "inputs.cuda", "targets.cuda", "inputs[].cuda", "targets[].cuda", "targets[].cuda", "numpy.random.randint", "DKT_regression.DKT.feature_extractor().detach", "DKT_regression.DKT.model.set_train_data", "DKT_regression.DKT.model.eval", "DKT_regression.DKT.feature_extractor.eval", "DKT_regression.DKT.likelihood.eval", "DKT_regression.DKT.mse", "numpy.random.choice", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "DKT_regression.DKT.feature_extractor().detach", "DKT_regression.DKT.likelihood", "DKT_regression.DKT.confidence_region", "list", "range", "len", "DKT_regression.DKT.feature_extractor", "DKT_regression.DKT.model", "range", "DKT_regression.DKT.feature_extractor"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.data.qmul_loader.get_batch", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "", "", "def", "test_loop", "(", "self", ",", "n_support", ",", "optimizer", "=", "None", ")", ":", "# no optimizer needed for GP", "\n", "        ", "inputs", ",", "targets", "=", "get_batch", "(", "test_people", ")", "\n", "\n", "support_ind", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "19", ")", ")", ",", "replace", "=", "False", ",", "size", "=", "n_support", ")", ")", "\n", "query_ind", "=", "[", "i", "for", "i", "in", "range", "(", "19", ")", "if", "i", "not", "in", "support_ind", "]", "\n", "\n", "x_all", "=", "inputs", ".", "cuda", "(", ")", "\n", "y_all", "=", "targets", ".", "cuda", "(", ")", "\n", "\n", "x_support", "=", "inputs", "[", ":", ",", "support_ind", ",", ":", ",", ":", ",", ":", "]", ".", "cuda", "(", ")", "\n", "y_support", "=", "targets", "[", ":", ",", "support_ind", "]", ".", "cuda", "(", ")", "\n", "x_query", "=", "inputs", "[", ":", ",", "query_ind", ",", ":", ",", ":", ",", ":", "]", "\n", "y_query", "=", "targets", "[", ":", ",", "query_ind", "]", ".", "cuda", "(", ")", "\n", "\n", "# choose a random test person", "\n", "n", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "test_people", ")", "-", "1", ")", "\n", "\n", "z_support", "=", "self", ".", "feature_extractor", "(", "x_support", "[", "n", "]", ")", ".", "detach", "(", ")", "\n", "self", ".", "model", ".", "set_train_data", "(", "inputs", "=", "z_support", ",", "targets", "=", "y_support", "[", "n", "]", ",", "strict", "=", "False", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "feature_extractor", ".", "eval", "(", ")", "\n", "self", ".", "likelihood", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "z_query", "=", "self", ".", "feature_extractor", "(", "x_all", "[", "n", "]", ")", ".", "detach", "(", ")", "\n", "pred", "=", "self", ".", "likelihood", "(", "self", ".", "model", "(", "z_query", ")", ")", "\n", "lower", ",", "upper", "=", "pred", ".", "confidence_region", "(", ")", "#2 standard deviations above and below the mean", "\n", "\n", "", "mse", "=", "self", ".", "mse", "(", "pred", ".", "mean", ",", "y_all", "[", "n", "]", ")", "\n", "\n", "return", "mse", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.save_checkpoint": [[99, 105], ["DKT_regression.DKT.model.state_dict", "DKT_regression.DKT.likelihood.state_dict", "DKT_regression.DKT.feature_extractor.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "checkpoint", ")", ":", "\n", "# save state", "\n", "        ", "gp_state_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "likelihood_state_dict", "=", "self", ".", "likelihood", ".", "state_dict", "(", ")", "\n", "nn_state_dict", "=", "self", ".", "feature_extractor", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "{", "'gp'", ":", "gp_state_dict", ",", "'likelihood'", ":", "likelihood_state_dict", ",", "'net'", ":", "nn_state_dict", "}", ",", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.DKT.load_checkpoint": [[106, 111], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "DKT_regression.DKT.model.load_state_dict", "DKT_regression.DKT.likelihood.load_state_dict", "DKT_regression.DKT.feature_extractor.load_state_dict"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "ckpt", "[", "'gp'", "]", ")", "\n", "self", ".", "likelihood", ".", "load_state_dict", "(", "ckpt", "[", "'likelihood'", "]", ")", "\n", "self", ".", "feature_extractor", ".", "load_state_dict", "(", "ckpt", "[", "'net'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.ExactGPLayer.__init__": [[113, 125], ["super().__init__", "gpytorch.means.ConstantMean", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.RBFKernel", "gpytorch.kernels.SpectralMixtureKernel", "ValueError", "str"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ",", "kernel", "=", "'linear'", ")", ":", "\n", "        ", "super", "(", "ExactGPLayer", ",", "self", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ConstantMean", "(", ")", "\n", "\n", "## RBF kernel", "\n", "if", "(", "kernel", "==", "'rbf'", "or", "kernel", "==", "'RBF'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", ")", ")", "\n", "## Spectral kernel", "\n", "", "elif", "(", "kernel", "==", "'spectral'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "SpectralMixtureKernel", "(", "num_mixtures", "=", "4", ",", "ard_num_dims", "=", "2916", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR] the kernel '\"", "+", "str", "(", "kernel", ")", "+", "\"' is not supported for regression, use 'rbf' or 'spectral'.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.DKT_regression.ExactGPLayer.forward": [[126, 130], ["DKT_regression.ExactGPLayer.mean_module", "DKT_regression.ExactGPLayer.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__": [[15, 54], ["methods.hypernets.HyperNetPOC.__init__", "methods.kernels.init_kernel_function", "hypernet_kernel.HyperShot.init_embedding_size", "hypernet_kernel.HyperShot.init_hypernet_modules", "hypernet_kernel.HyperShot.build_target_net_architecture", "hypernet_kernel.HyperShot.init_kernel_transformer_architecture", "hypernet_kernel.HyperShot.init_kernel_convolution_architecture"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.__init__", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.kernels.init_kernel_function", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.init_embedding_size", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.build_target_net_architecture", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.init_kernel_transformer_architecture", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.init_kernel_convolution_architecture"], ["    ", "def", "__init__", "(", "\n", "self", ",", "model_func", ":", "nn", ".", "Module", ",", "n_way", ":", "int", ",", "n_support", ":", "int", ",", "n_query", ":", "int", ",", "\n", "params", ":", "\"ArgparseHNParams\"", ",", "target_net_architecture", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "model_func", ",", "n_way", ",", "n_support", ",", "n_query", ",", "params", "=", "params", ",", "target_net_architecture", "=", "target_net_architecture", "\n", ")", "\n", "\n", "# TODO - check!!!", "\n", "\n", "# Use support embeddings - concatenate them with kernel features", "\n", "self", ".", "hn_use_support_embeddings", ":", "bool", "=", "params", ".", "hn_use_support_embeddings", "\n", "# Remove self relations by matrix K multiplication", "\n", "self", ".", "hn_no_self_relations", ":", "bool", "=", "params", ".", "hn_no_self_relations", "\n", "\n", "self", ".", "kernel_function", "=", "init_kernel_function", "(", "\n", "kernel_input_dim", "=", "self", ".", "feat_dim", "+", "self", ".", "n_way", "if", "self", ".", "attention_embedding", "else", "self", ".", "feat_dim", ",", "\n", "params", "=", "params", "\n", ")", "\n", "\n", "# embedding size", "\n", "# TODO - add attention based input also", "\n", "self", ".", "embedding_size", "=", "self", ".", "init_embedding_size", "(", "params", ")", "\n", "\n", "# I will be adding the kernel vector to the stacked images embeddings", "\n", "# TODO: add/check changes for attention-like input", "\n", "self", ".", "hn_kernel_invariance", ":", "bool", "=", "params", ".", "hn_kernel_invariance", "\n", "if", "self", ".", "hn_kernel_invariance", ":", "\n", "            ", "self", ".", "hn_kernel_invariance_type", ":", "str", "=", "params", ".", "hn_kernel_invariance_type", "\n", "self", ".", "hn_kernel_invariance_pooling", ":", "str", "=", "params", ".", "hn_kernel_invariance_pooling", "\n", "\n", "if", "self", ".", "hn_kernel_invariance_type", "==", "'attention'", ":", "\n", "                ", "self", ".", "init_kernel_transformer_architecture", "(", "params", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "init_kernel_convolution_architecture", "(", "params", ")", "\n", "\n", "", "", "self", ".", "query_relations_size", "=", "self", ".", "n_way", "*", "self", ".", "n_support_size_context", "\n", "self", ".", "target_net_architecture", "=", "target_net_architecture", "or", "self", ".", "build_target_net_architecture", "(", "params", ")", "\n", "self", ".", "init_hypernet_modules", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.init_embedding_size": [[55, 74], ["None"], "methods", ["None"], ["", "def", "init_embedding_size", "(", "self", ",", "params", ")", "->", "int", ":", "\n", "        ", "if", "params", ".", "hn_use_support_embeddings", ":", "\n", "            ", "support_embeddings_size", "=", "self", ".", "feat_dim", "*", "self", ".", "n_way", "*", "self", ".", "n_support_size_context", "\n", "", "else", ":", "\n", "            ", "support_embeddings_size", "=", "0", "\n", "\n", "", "if", "params", ".", "hn_kernel_invariance", ":", "\n", "            ", "if", "params", ".", "hn_kernel_invariance_type", "==", "'attention'", ":", "\n", "                ", "return", "support_embeddings_size", "+", "(", "self", ".", "n_way", "*", "self", ".", "n_support_size_context", ")", "\n", "", "else", ":", "\n", "                ", "return", "support_embeddings_size", "+", "params", ".", "hn_kernel_convolution_output_dim", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "params", ".", "hn_no_self_relations", ":", "\n", "                ", "return", "support_embeddings_size", "+", "(", "\n", "(", "(", "self", ".", "n_way", "*", "self", ".", "n_support_size_context", ")", "**", "2", ")", "-", "(", "\n", "self", ".", "n_way", "*", "self", ".", "n_support_size_context", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "support_embeddings_size", "+", "(", "(", "self", ".", "n_way", "*", "self", ".", "n_support_size_context", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.n_support_size_context": [[75, 78], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "n_support_size_context", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "1", "if", "self", ".", "sup_aggregation", "in", "[", "\"mean\"", ",", "\"min_pooling\"", ",", "\"max_pooling\"", "]", "else", "self", ".", "n_support", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.build_target_net_architecture": [[79, 98], ["range", "torch.nn.Sequential", "print", "layers.append", "torch.nn.Linear", "layers.append", "torch.nn.ReLU"], "methods", ["None"], ["", "def", "build_target_net_architecture", "(", "self", ",", "params", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "tn_hidden_size", "=", "params", ".", "hn_tn_hidden_size", "\n", "layers", "=", "[", "]", "\n", "if", "params", ".", "hn_use_support_embeddings", ":", "\n", "            ", "common_insize", "=", "(", "(", "self", ".", "n_way", "*", "self", ".", "n_support_size_context", ")", "+", "self", ".", "feat_dim", ")", "\n", "", "else", ":", "\n", "            ", "common_insize", "=", "(", "self", ".", "n_way", "*", "self", ".", "n_support_size_context", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "params", ".", "hn_tn_depth", ")", ":", "\n", "            ", "is_final", "=", "i", "==", "(", "params", ".", "hn_tn_depth", "-", "1", ")", "\n", "insize", "=", "common_insize", "if", "i", "==", "0", "else", "tn_hidden_size", "\n", "outsize", "=", "self", ".", "n_way", "if", "is_final", "else", "tn_hidden_size", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "insize", ",", "outsize", ")", ")", "\n", "if", "not", "is_final", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "", "res", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "print", "(", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.maybe_aggregate_support_feature": [[99, 116], ["torch.mean().reshape", "torch.max", "pooled.reshape.reshape.reshape", "torch.mean", "torch.min", "pooled.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "maybe_aggregate_support_feature", "(", "self", ",", "support_feature", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Process embeddings for few shot learning\n        \"\"\"", "\n", "if", "self", ".", "n_support", ">", "1", ":", "\n", "            ", "if", "self", ".", "sup_aggregation", "==", "'mean'", ":", "\n", "                ", "return", "torch", ".", "mean", "(", "support_feature", ",", "axis", "=", "1", ")", ".", "reshape", "(", "self", ".", "n_way", ",", "1", ",", "-", "1", ")", "\n", "", "elif", "self", ".", "sup_aggregation", "==", "'max_pooling'", ":", "\n", "                ", "pooled", ",", "_", "=", "torch", ".", "max", "(", "support_feature", ",", "axis", "=", "1", ")", "\n", "pooled", "=", "pooled", ".", "reshape", "(", "self", ".", "n_way", ",", "1", ",", "-", "1", ")", "\n", "return", "pooled", "\n", "", "elif", "self", ".", "sup_aggregation", "==", "'min_pooling'", ":", "\n", "                ", "pooled", ",", "_", "=", "torch", ".", "min", "(", "support_feature", ",", "axis", "=", "1", ")", "\n", "pooled", "=", "pooled", ".", "reshape", "(", "self", ".", "n_way", ",", "1", ",", "-", "1", ")", "\n", "return", "pooled", "\n", "\n", "", "", "return", "support_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.parse_feature": [[117, 121], ["super().parse_feature", "hypernet_kernel.HyperShot.maybe_aggregate_support_feature"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.parse_feature", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.maybe_aggregate_support_feature"], ["", "def", "parse_feature", "(", "self", ",", "x", ",", "is_feature", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "support_feature", ",", "query_feature", "=", "super", "(", ")", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "support_feature", "=", "self", ".", "maybe_aggregate_support_feature", "(", "support_feature", ")", "\n", "return", "support_feature", ",", "query_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.init_kernel_convolution_architecture": [[122, 126], ["methods.kernel_convolutions.KernelConv"], "methods", ["None"], ["", "def", "init_kernel_convolution_architecture", "(", "self", ",", "params", ")", ":", "\n", "# TODO - add convolution-based approach", "\n", "        ", "self", ".", "kernel_2D_convolution", ":", "bool", "=", "True", "\n", "self", ".", "kernel_conv", ":", "nn", ".", "Module", "=", "KernelConv", "(", "self", ".", "n_support", ",", "params", ".", "hn_kernel_convolution_output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.init_kernel_transformer_architecture": [[127, 134], ["methods.transformer.TransformerEncoder"], "methods", ["None"], ["", "def", "init_kernel_transformer_architecture", "(", "self", ",", "params", ")", ":", "\n", "        ", "kernel_transformer_input_dim", ":", "int", "=", "self", ".", "n_way", "*", "self", ".", "n_support_size_context", "\n", "self", ".", "kernel_transformer_encoder", ":", "nn", ".", "Module", "=", "TransformerEncoder", "(", "\n", "num_layers", "=", "params", ".", "kernel_transformer_layers_no", ",", "\n", "input_dim", "=", "kernel_transformer_input_dim", ",", "\n", "num_heads", "=", "params", ".", "kernel_transformer_heads_no", ",", "\n", "dim_feedforward", "=", "params", ".", "kernel_transformer_feedforward_dim", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.build_relations_features": [[136, 148], ["support_feature.reshape", "hypernet_kernel.HyperShot.kernel_function.forward"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "def", "build_relations_features", "(", "self", ",", "support_feature", ":", "torch", ".", "Tensor", ",", "\n", "feature_to_classify", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "supp_way", ",", "n_support", ",", "supp_feat", "=", "support_feature", ".", "shape", "\n", "n_examples", ",", "feat_dim", "=", "feature_to_classify", ".", "shape", "\n", "support_features", "=", "support_feature", ".", "reshape", "(", "supp_way", "*", "n_support", ",", "supp_feat", ")", "\n", "\n", "kernel_values_tensor", "=", "self", ".", "kernel_function", ".", "forward", "(", "support_features", ",", "feature_to_classify", ")", "\n", "\n", "relations", "=", "kernel_values_tensor", ".", "T", "\n", "\n", "return", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.build_kernel_features_embedding": [[149, 189], ["support_feature.reshape", "torch.clone", "hypernet_kernel.HyperShot.kernel_function.forward", "torch.flatten", "torch.ones_like().cuda", "torch.eye().cuda", "torch.unsqueeze", "hypernet_kernel.HyperShot.kernel_transformer_encoder.forward", "torch.unsqueeze", "torch.flatten", "torch.min", "torch.unsqueeze", "hypernet_kernel.HyperShot.kernel_conv.forward", "torch.ones_like", "torch.eye", "torch.max", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward"], ["", "def", "build_kernel_features_embedding", "(", "self", ",", "support_feature", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        x_support: [n_way, n_support, hidden_size]\n        \"\"\"", "\n", "\n", "supp_way", ",", "n_support", ",", "supp_feat", "=", "support_feature", ".", "shape", "\n", "support_features", "=", "support_feature", ".", "reshape", "(", "supp_way", "*", "n_support", ",", "supp_feat", ")", "\n", "support_features_copy", "=", "torch", ".", "clone", "(", "support_features", ")", "\n", "\n", "kernel_values_tensor", "=", "self", ".", "kernel_function", ".", "forward", "(", "support_features", ",", "support_features_copy", ")", "\n", "\n", "# Remove self relations by matrix multiplication", "\n", "if", "self", ".", "hn_no_self_relations", ":", "\n", "            ", "zero_diagonal_matrix", "=", "torch", ".", "ones_like", "(", "kernel_values_tensor", ")", ".", "cuda", "(", ")", "-", "torch", ".", "eye", "(", "\n", "kernel_values_tensor", ".", "shape", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "kernel_values_tensor", "=", "kernel_values_tensor", "*", "zero_diagonal_matrix", "\n", "return", "torch", ".", "flatten", "(", "kernel_values_tensor", "[", "kernel_values_tensor", "!=", "0.0", "]", ")", "\n", "\n", "", "if", "self", ".", "hn_kernel_invariance", ":", "\n", "# TODO - check!!!", "\n", "            ", "if", "self", ".", "hn_kernel_invariance_type", "==", "'attention'", ":", "\n", "                ", "kernel_values_tensor", "=", "torch", ".", "unsqueeze", "(", "kernel_values_tensor", ".", "T", ",", "0", ")", "\n", "encoded", "=", "self", ".", "kernel_transformer_encoder", ".", "forward", "(", "kernel_values_tensor", ")", "\n", "\n", "if", "self", ".", "hn_kernel_invariance_pooling", "==", "'min'", ":", "\n", "                    ", "invariant_kernel_values", ",", "_", "=", "torch", ".", "min", "(", "encoded", ",", "1", ")", "\n", "", "elif", "self", ".", "hn_kernel_invariance_pooling", "==", "'max'", ":", "\n", "                    ", "invariant_kernel_values", ",", "_", "=", "torch", ".", "max", "(", "encoded", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "invariant_kernel_values", "=", "torch", ".", "mean", "(", "encoded", ",", "1", ")", "\n", "\n", "", "return", "invariant_kernel_values", "\n", "", "else", ":", "\n", "# TODO - add convolutional approach", "\n", "                ", "kernel_values_tensor", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "kernel_values_tensor", ".", "T", ",", "0", ")", ",", "0", ")", "\n", "invariant_kernel_values", "=", "torch", ".", "flatten", "(", "self", ".", "kernel_conv", ".", "forward", "(", "kernel_values_tensor", ")", ")", "\n", "\n", "return", "invariant_kernel_values", "\n", "\n", "", "", "return", "kernel_values_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.generate_target_net": [[190, 210], ["hypernet_kernel.HyperShot.build_kernel_features_embedding", "torch.cat.reshape", "hypernet_kernel.HyperShot.hypernet_neck", "copy.deepcopy", "methods.hypernets.utils.set_from_param_dict", "copy.deepcopy.cuda", "torch.cat", "name.replace", "param_net().reshape", "hypernet_kernel.HyperShot.hypernet_heads.items", "torch.flatten", "param_net"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.build_kernel_features_embedding", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.set_from_param_dict", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "generate_target_net", "(", "self", ",", "support_feature", ":", "torch", ".", "Tensor", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "\"\"\"\n        x_support: [n_way, n_support, hidden_size]\n        \"\"\"", "\n", "\n", "embedding", "=", "self", ".", "build_kernel_features_embedding", "(", "support_feature", ")", "\n", "embedding", "=", "embedding", ".", "reshape", "(", "1", ",", "self", ".", "embedding_size", ")", "\n", "# TODO - check!!!", "\n", "if", "self", ".", "hn_use_support_embeddings", ":", "\n", "            ", "embedding", "=", "torch", ".", "cat", "(", "(", "embedding", ",", "torch", ".", "flatten", "(", "support_feature", ")", ")", ",", "0", ")", "\n", "\n", "", "root", "=", "self", ".", "hypernet_neck", "(", "embedding", ")", "\n", "network_params", "=", "{", "\n", "name", ".", "replace", "(", "\"-\"", ",", "\".\"", ")", ":", "param_net", "(", "root", ")", ".", "reshape", "(", "self", ".", "target_net_param_shapes", "[", "name", "]", ")", "\n", "for", "name", ",", "param_net", "in", "self", ".", "hypernet_heads", ".", "items", "(", ")", "\n", "}", "\n", "tn", "=", "deepcopy", "(", "self", ".", "target_net_architecture", ")", "\n", "set_from_param_dict", "(", "tn", ",", "network_params", ")", "\n", "tn", ".", "support_feature", "=", "support_feature", "\n", "return", "tn", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward": [[211, 236], ["hypernet_kernel.HyperShot.parse_feature", "hypernet_kernel.HyperShot.generate_target_net", "query_feature.reshape.reshape.reshape", "hypernet_kernel.HyperShot.build_relations_features", "hypernet_kernel.HyperShot.", "torch.cat", "torch.randperm", "torch.argsort", "hypernet_kernel.HyperShot.build_relations_features", "torch.equal", "hypernet_kernel.HyperShot.", "torch.equal", "len"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.parse_feature", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.generate_target_net", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.build_relations_features", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.build_relations_features"], ["", "def", "set_forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "is_feature", ":", "bool", "=", "False", ",", "permutation_sanity_check", ":", "bool", "=", "False", ")", ":", "\n", "        ", "support_feature", ",", "query_feature", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "classifier", "=", "self", ".", "generate_target_net", "(", "support_feature", ")", "\n", "query_feature", "=", "query_feature", ".", "reshape", "(", "\n", "-", "1", ",", "query_feature", ".", "shape", "[", "-", "1", "]", "\n", ")", "\n", "\n", "relational_query_feature", "=", "self", ".", "build_relations_features", "(", "support_feature", ",", "query_feature", ")", "\n", "# TODO - check!!!", "\n", "if", "self", ".", "hn_use_support_embeddings", ":", "\n", "            ", "relational_query_feature", "=", "torch", ".", "cat", "(", "(", "relational_query_feature", ",", "query_feature", ")", ",", "1", ")", "\n", "", "y_pred", "=", "classifier", "(", "relational_query_feature", ")", "\n", "\n", "if", "permutation_sanity_check", ":", "\n", "### random permutation test", "\n", "            ", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "query_feature", ")", ")", "\n", "rev_perm", "=", "torch", ".", "argsort", "(", "perm", ")", "\n", "query_perm", "=", "query_feature", "[", "perm", "]", "\n", "relation_perm", "=", "self", ".", "build_relations_features", "(", "support_feature", ",", "query_perm", ")", "\n", "assert", "torch", ".", "equal", "(", "relation_perm", "[", "rev_perm", "]", ",", "relational_query_feature", ")", "\n", "y_pred_perm", "=", "classifier", "(", "relation_perm", ")", "\n", "assert", "torch", ".", "equal", "(", "y_pred_perm", "[", "rev_perm", "]", ",", "y_pred", ")", "\n", "\n", "", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward_with_adaptation": [[237, 246], ["super().set_forward_with_adaptation", "hypernet_kernel.HyperShot.parse_feature", "query_feature.reshape.reshape.reshape", "hypernet_kernel.HyperShot.build_relations_features", "methods.hypernets.utils.accuracy_from_scores"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward_with_adaptation", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.parse_feature", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.build_relations_features", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.accuracy_from_scores"], ["", "def", "set_forward_with_adaptation", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "y_pred", ",", "metrics", "=", "super", "(", ")", ".", "set_forward_with_adaptation", "(", "x", ")", "\n", "support_feature", ",", "query_feature", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", "=", "False", ")", "\n", "query_feature", "=", "query_feature", ".", "reshape", "(", "\n", "-", "1", ",", "query_feature", ".", "shape", "[", "-", "1", "]", "\n", ")", "\n", "relational_query_feature", "=", "self", ".", "build_relations_features", "(", "support_feature", ",", "query_feature", ")", "\n", "metrics", "[", "\"accuracy/val_relational\"", "]", "=", "accuracy_from_scores", "(", "relational_query_feature", ",", "self", ".", "n_way", ",", "self", ".", "n_query", ")", "\n", "return", "y_pred", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.set_forward_loss": [[247, 304], ["hypernet_kernel.HyperShot.parse_feature", "hypernet_kernel.HyperShot.generate_target_net", "torch.cat", "torch.cat", "hypernet_kernel.HyperShot.build_relations_features", "hypernet_kernel.HyperShot.", "hypernet_kernel.HyperShot.loss_fn", "hypernet_kernel.HyperShot.get_labels", "hypernet_kernel.HyperShot.get_labels", "torch.nn.functional.one_hot", "torch.cat", "torch.zeros", "torch.cat", "torch.cat.append", "hypernet_kernel.HyperShot.get_labels", "torch.cat.append", "torch.cat.append", "hypernet_kernel.HyperShot.get_labels", "torch.cat.append", "torch.cat.detach", "torch.cat", "torch.cat.detach", "support_feature.detach", "support_feature.reshape", "hypernet_kernel.HyperShot.reshape", "query_feature.reshape", "hypernet_kernel.HyperShot.reshape"], "methods", ["home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.parse_feature", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.generate_target_net", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.hypernet_kernel.HyperShot.build_relations_features", "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.None.utils.one_hot"], ["", "def", "set_forward_loss", "(", "\n", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "detach_ft_hn", ":", "bool", "=", "False", ",", "detach_ft_tn", ":", "bool", "=", "False", ",", "\n", "train_on_support", ":", "bool", "=", "True", ",", "\n", "train_on_query", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "nw", ",", "ne", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "\n", "support_feature", ",", "query_feature", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", "=", "False", ")", "\n", "\n", "# TODO: add/check changes for attention-like input", "\n", "if", "self", ".", "attention_embedding", ":", "\n", "            ", "y_support", "=", "self", ".", "get_labels", "(", "support_feature", ")", "\n", "y_query", "=", "self", ".", "get_labels", "(", "query_feature", ")", "\n", "y_support_one_hot", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "y_support", ")", "\n", "support_feature_with_classes_one_hot", "=", "torch", ".", "cat", "(", "(", "support_feature", ",", "y_support_one_hot", ")", ",", "2", ")", "\n", "y_query_zeros", "=", "torch", ".", "zeros", "(", "(", "y_query", ".", "shape", "[", "0", "]", ",", "y_query", ".", "shape", "[", "1", "]", ",", "y_support_one_hot", ".", "shape", "[", "2", "]", ")", ")", "\n", "query_feature_with_zeros", "=", "torch", ".", "cat", "(", "(", "query_feature", ",", "y_query_zeros", ")", ",", "2", ")", "\n", "feature_to_hn", "=", "support_feature_with_classes_one_hot", ".", "detach", "(", ")", "if", "detach_ft_hn", "else", "support_feature_with_classes_one_hot", "\n", "query_feature_to_hn", "=", "query_feature_with_zeros", "\n", "", "else", ":", "\n", "            ", "feature_to_hn", "=", "support_feature", ".", "detach", "(", ")", "if", "detach_ft_hn", "else", "support_feature", "\n", "query_feature_to_hn", "=", "query_feature", "\n", "\n", "", "classifier", "=", "self", ".", "generate_target_net", "(", "feature_to_hn", ")", "\n", "\n", "feature_to_classify", "=", "[", "]", "\n", "y_to_classify_gt", "=", "[", "]", "\n", "if", "train_on_support", ":", "\n", "            ", "feature_to_classify", ".", "append", "(", "\n", "support_feature", ".", "reshape", "(", "\n", "(", "self", ".", "n_way", "*", "self", ".", "n_support_size_context", ")", ",", "support_feature", ".", "shape", "[", "-", "1", "]", "\n", ")", "\n", ")", "\n", "y_support", "=", "self", ".", "get_labels", "(", "support_feature", ")", "\n", "y_to_classify_gt", ".", "append", "(", "y_support", ".", "reshape", "(", "self", ".", "n_way", "*", "self", ".", "n_support_size_context", ")", ")", "\n", "", "if", "train_on_query", ":", "\n", "            ", "feature_to_classify", ".", "append", "(", "\n", "query_feature", ".", "reshape", "(", "\n", "(", "self", ".", "n_way", "*", "(", "ne", "-", "self", ".", "n_support", ")", ")", ",", "query_feature", ".", "shape", "[", "-", "1", "]", "\n", ")", "\n", ")", "\n", "y_query", "=", "self", ".", "get_labels", "(", "query_feature", ")", "\n", "y_to_classify_gt", ".", "append", "(", "y_query", ".", "reshape", "(", "self", ".", "n_way", "*", "(", "ne", "-", "self", ".", "n_support", ")", ")", ")", "\n", "\n", "", "feature_to_classify", "=", "torch", ".", "cat", "(", "feature_to_classify", ")", "\n", "y_to_classify_gt", "=", "torch", ".", "cat", "(", "y_to_classify_gt", ")", "\n", "\n", "relational_feature_to_classify", "=", "self", ".", "build_relations_features", "(", "support_feature", ",", "feature_to_classify", ")", "\n", "\n", "if", "detach_ft_tn", ":", "\n", "            ", "relational_feature_to_classify", "=", "relational_feature_to_classify", ".", "detach", "(", ")", "\n", "\n", "", "if", "self", ".", "hn_use_support_embeddings", ":", "\n", "            ", "relational_feature_to_classify", "=", "torch", ".", "cat", "(", "(", "relational_feature_to_classify", ",", "feature_to_classify", ")", ",", "1", ")", "\n", "\n", "", "y_pred", "=", "classifier", "(", "relational_feature_to_classify", ")", "\n", "return", "self", ".", "loss_fn", "(", "y_pred", ",", "y_to_classify_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.SinActivation.forward": [[48, 50], ["torch.sin"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.get_param_dict": [[8, 13], ["net.named_parameters"], "function", ["None"], ["    ", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "cl_num", "=", "len", "(", "class_list", ")", "\n", "cl_means", "=", "[", "]", "\n", "stds", "=", "[", "]", "\n", "DBs", "=", "[", "]", "\n", "for", "cl", "in", "class_list", ":", "\n"]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.set_from_param_dict": [[16, 45], ["param_dict.items", "sdk.split", "getattr", "delattr", "setattr", "int", "getattr"], "function", ["None"], ["\n", "", "mu_i", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "cl_means", ")", ",", "axis", "=", "0", ")", ",", "(", "len", "(", "class_list", ")", ",", "1", ",", "1", ")", ")", "\n", "mu_j", "=", "np", ".", "transpose", "(", "mu_i", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "mdists", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "mu_i", "-", "mu_j", ")", ",", "axis", "=", "2", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "cl_num", ")", ":", "\n", "        ", "DBs", ".", "append", "(", "np", ".", "max", "(", "[", "(", "stds", "[", "i", "]", "+", "stds", "[", "j", "]", ")", "/", "mdists", "[", "i", ",", "j", "]", "for", "j", "in", "range", "(", "cl_num", ")", "if", "j", "!=", "i", "]", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "DBs", ")", "\n", "\n", "", "def", "sparsity", "(", "cl_data_file", ")", ":", "\n", "    ", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "cl_sparsity", "=", "[", "]", "\n", "for", "cl", "in", "class_list", ":", "\n", "        ", "cl_sparsity", ".", "append", "(", "np", ".", "mean", "(", "[", "np", ".", "sum", "(", "x", "!=", "0", ")", "for", "x", "in", "cl_data_file", "[", "cl", "]", "]", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "cl_sparsity", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_few-shot-hypernets-public.hypernets.utils.accuracy_from_scores": [[52, 63], ["numpy.repeat", "scores.data.topk", "topk_labels.cpu().numpy", "numpy.sum", "float", "len", "range", "topk_labels.cpu"], "function", ["None"], []]}