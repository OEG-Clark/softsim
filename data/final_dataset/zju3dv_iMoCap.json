{"home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.evaluate_metric": [[21, 80], ["numpy.array().mean", "numpy.array().mean", "body_params.keys", "torch.Tensor().to", "torch.Tensor().to", "torch.is_tensor", "torch.Tensor().to", "torch.Tensor().to", "batch_rodrigues", "torch.Tensor().to", "evaluation.compute_error_3d", "cam_params.keys", "smpl_render.GetKeypoints", "Rc.t", "evaluation.compute_error_3d", "numpy.array", "numpy.array", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().to", "smpl_render.GetKeypoints", "torch.Tensor", "smpl_render.GetKeypoints.detach().cpu().numpy", "smpl_render.GetKeypoints.detach().cpu().numpy", "torch.Tensor", "smpl_render.GetKeypoints.detach().cpu", "len", "smpl_render.GetKeypoints.detach().cpu", "smpl_render.GetKeypoints.detach", "smpl_render.GetKeypoints.detach"], "function", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.batch_rodrigues", "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.compute_error_3d", "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetKeypoints", "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.compute_error_3d", "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetKeypoints"], ["def", "evaluate_metric", "(", "smpl_render", ",", "joints3d", ",", "body_params", ",", "cam_params", "=", "None", ",", "joints_est", "=", "None", ",", "type", "=", "'h36m'", ")", ":", "\n", "    ", "device", "=", "smpl_render", ".", "device", "\n", "if", "'Rh'", "in", "body_params", ".", "keys", "(", ")", ":", "\n", "        ", "Rh", ",", "Th", "=", "body_params", "[", "'Rh'", "]", ",", "body_params", "[", "'Th'", "]", "\n", "Rh", "=", "torch", ".", "Tensor", "(", "Rh", ")", ".", "to", "(", "device", ")", "\n", "Th", "=", "torch", ".", "Tensor", "(", "Th", "[", ":", ",", "None", ",", ":", "]", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "Rh", "=", "None", "\n", "Th", "=", "None", "\n", "", "poses", ",", "shapes", "=", "body_params", "[", "'poses'", "]", ",", "body_params", "[", "'shapes'", "]", "\n", "if", "not", "torch", ".", "is_tensor", "(", "poses", ")", ":", "\n", "        ", "poses", "=", "torch", ".", "Tensor", "(", "poses", ")", ".", "to", "(", "device", ")", "\n", "shapes", "=", "torch", ".", "Tensor", "(", "shapes", ")", ".", "to", "(", "device", ")", "\n", "if", "cam_params", "is", "not", "None", ":", "\n", "            ", "for", "key", "in", "cam_params", ".", "keys", "(", ")", ":", "\n", "                ", "cam_params", "[", "key", "]", "=", "torch", ".", "Tensor", "(", "cam_params", "[", "key", "]", ")", ".", "to", "(", "device", ")", "\n", "", "", "", "if", "Rh", "is", "None", ":", "\n", "        ", "rot", "=", "None", "\n", "", "else", ":", "\n", "        ", "rot", "=", "batch_rodrigues", "(", "Rh", ")", "\n", "", "if", "joints_est", "is", "None", ":", "\n", "        ", "if", "type", "==", "'h36m'", ":", "\n", "            ", "keypoints", "=", "smpl_render", ".", "GetKeypoints", "(", "\n", "inp_pose", "=", "poses", ",", "\n", "inp_betas", "=", "shapes", ",", "\n", "inp_rot", "=", "rot", ",", "\n", "inp_trans", "=", "Th", ",", "\n", "kpts_type", "=", "'h36m'", ",", "\n", ")", "\n", "", "elif", "type", "==", "'cocoplus'", ":", "\n", "            ", "keypoints", "=", "smpl_render", ".", "GetKeypoints", "(", "inp_pose", "=", "poses", ",", "\n", "inp_betas", "=", "shapes", ",", "\n", "inp_rot", "=", "rot", ",", "\n", "kpts_type", "=", "'cocoplus'", ")", "\n", "", "", "else", ":", "\n", "        ", "keypoints", "=", "torch", ".", "Tensor", "(", "joints_est", ")", ".", "to", "(", "smpl_render", ".", "device", ")", "\n", "\n", "", "if", "cam_params", "is", "not", "None", ":", "\n", "        ", "Rc", ",", "Tc", "=", "cam_params", "[", "'Rc'", "]", ",", "cam_params", "[", "'Tc'", "]", "\n", "keypoints", "=", "keypoints", "@", "Rc", ".", "t", "(", ")", "\n", "", "if", "type", "==", "'h36m'", ":", "\n", "        ", "errors_joints", ",", "errors_joints_pa", "=", "compute_error_3d", "(", "\n", "gt3ds", "=", "joints3d", "[", ":", ",", "USE_IDX", "]", ",", "\n", "preds", "=", "keypoints", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "USE_IDX", "]", ",", "\n", "vis", "=", "None", ",", "\n", ")", "\n", "", "elif", "type", "==", "'cocoplus'", ":", "\n", "        ", "joints_pred", "=", "keypoints", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", "len", "(", "USE_IDX", ")", "]", "\n", "errors_joints", ",", "errors_joints_pa", "=", "compute_error_3d", "(", "\n", "gt3ds", "=", "joints3d", "[", ":", ",", "USE_IDX", "]", ",", "\n", "preds", "=", "joints_pred", ",", "\n", "vis", "=", "None", ",", "\n", ")", "\n", "", "errors_joints", "=", "np", ".", "array", "(", "errors_joints", ")", ".", "mean", "(", ")", "\n", "errors_joints_pa", "=", "np", ".", "array", "(", "errors_joints_pa", ")", ".", "mean", "(", ")", "\n", "report", "=", "{", "}", "\n", "report", "[", "'MPJPE-PA'", "]", "=", "'%.2f'", "%", "(", "errors_joints_pa", "*", "1000", ")", "\n", "report", "[", "'MPJPE'", "]", "=", "'%.2f'", "%", "(", "errors_joints", "*", "1000", ")", "\n", "return", "report", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.compute_error_3d": [[81, 123], ["min", "enumerate", "len", "len", "zip", "align_by_pelvis.reshape", "evaluation.align_by_pelvis", "evaluation.align_by_pelvis", "numpy.sqrt", "errors.append", "evaluation.compute_similarity_transform", "numpy.sqrt", "errors_pa.append", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.align_by_pelvis", "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.align_by_pelvis", "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.compute_similarity_transform"], ["", "def", "compute_error_3d", "(", "gt3ds", ",", "preds", ",", "vis", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Returns MPJPE after pelvis alignment and MPJPE after Procrustes. Should\n    evaluate only on the 14 common joints.\n\n    Args:\n        gt3ds (Nx14x3).\n        preds (Nx14x3).\n        vis (N).\n\n    Returns:\n        MPJPE, PA-MPJPE\n    \"\"\"", "\n", "# import open3d", "\n", "# import smpl", "\n", "# import matplotlib.pyplot as plt", "\n", "min_frames", "=", "min", "(", "gt3ds", ".", "shape", "[", "0", "]", ",", "preds", ".", "shape", "[", "0", "]", ")", "\n", "gt3ds", "=", "gt3ds", "[", ":", "min_frames", "]", "\n", "preds", "=", "preds", "[", ":", "min_frames", "]", "\n", "assert", "len", "(", "gt3ds", ")", "==", "len", "(", "preds", ")", "\n", "errors", ",", "errors_pa", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "gt3d", ",", "pred", ")", "in", "enumerate", "(", "zip", "(", "gt3ds", ",", "preds", ")", ")", ":", "\n", "        ", "if", "vis", "is", "None", "or", "vis", "[", "i", "]", ":", "\n", "            ", "gt3d", "=", "gt3d", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "# Root align.", "\n", "gt3d", "=", "align_by_pelvis", "(", "gt3d", ")", "\n", "pred3d", "=", "align_by_pelvis", "(", "pred", ")", "\n", "# ax = smpl.plotSkel3D(gt3d, config=smpl.CONFIG['lsp'])", "\n", "# ax = smpl.plotSkel3D(pred3d, config=smpl.CONFIG['lsp'], ax=ax)", "\n", "# plt.show()", "\n", "# \u5047\u88c5\u589e\u52a0\u4e00\u4e2a\u9aa8\u957f", "\n", "scale", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "gt3d", "**", "2", ")", ")", "/", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pred3d", "**", "2", ")", ")", "\n", "pred3d", "=", "pred3d", "*", "scale", "\n", "# \u589e\u52a0\u9aa8\u957f\u7ed3\u675f", "\n", "joint_error", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "gt3d", "-", "pred3d", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "errors", ".", "append", "(", "np", ".", "mean", "(", "joint_error", ")", ")", "\n", "# Get PA error.", "\n", "pred3d_sym", "=", "compute_similarity_transform", "(", "pred3d", ",", "gt3d", ")", "\n", "pa_error", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "gt3d", "-", "pred3d_sym", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "errors_pa", ".", "append", "(", "np", ".", "mean", "(", "pa_error", ")", ")", "\n", "\n", "", "", "return", "errors", ",", "errors_pa", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.align_by_pelvis": [[124, 141], ["numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "align_by_pelvis", "(", "joints", ",", "get_pelvis", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Aligns joints by pelvis to be at origin. Assumes hips are index 3 and 2 of\n    joints (14x3) in LSP order. Pelvis is midpoint of hips.\n\n    Args:\n        joints (14x3).\n        get_pelvis (bool).\n    \"\"\"", "\n", "left_id", "=", "3", "\n", "right_id", "=", "2", "\n", "\n", "pelvis", "=", "(", "joints", "[", "left_id", ",", ":", "]", "+", "joints", "[", "right_id", ",", ":", "]", ")", "/", "2.", "\n", "if", "get_pelvis", ":", "\n", "        ", "return", "joints", "-", "np", ".", "expand_dims", "(", "pelvis", ",", "axis", "=", "0", ")", ",", "pelvis", "\n", "", "else", ":", "\n", "        ", "return", "joints", "-", "np", ".", "expand_dims", "(", "pelvis", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.compute_similarity_transform": [[142, 197], ["S1.mean", "S2.mean", "numpy.sum", "X1.dot", "numpy.linalg.svd", "numpy.eye", "numpy.sign", "V.dot", "numpy.linalg.det", "np.eye.dot", "numpy.trace", "U.dot", "V.dot.dot", "V.dot.dot", "V.dot.dot"], "function", ["None"], ["", "", "def", "compute_similarity_transform", "(", "S1", ",", "S2", ")", ":", "\n", "    ", "\"\"\"\n    Computes a similarity transform (sR, t) that takes a set of 3D points\n    S1 (3 x N) closest to a set of 3D points S2, where R is an 3x3 rotation\n    matrix, t 3x1 translation, s scale.\n    i.e. solves the orthogonal Procrustes problem.\n\n    Args:\n        S1 (3xN): Original 3D points.\n        S2 (3xN'): Target 3D points.\n\n    Returns:\n        S1_hat: S1 after applying optimal alignment.\n    \"\"\"", "\n", "transposed", "=", "False", "\n", "if", "S1", ".", "shape", "[", "0", "]", "!=", "3", "and", "S1", ".", "shape", "[", "0", "]", "!=", "2", ":", "\n", "        ", "S1", "=", "S1", ".", "T", "\n", "S2", "=", "S2", ".", "T", "\n", "transposed", "=", "True", "\n", "", "assert", "(", "S2", ".", "shape", "[", "1", "]", "==", "S1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# 1. Remove mean.", "\n", "mu1", "=", "S1", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "mu2", "=", "S2", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "X1", "=", "S1", "-", "mu1", "\n", "X2", "=", "S2", "-", "mu2", "\n", "\n", "# 2. Compute variance of X1 used for scale.", "\n", "var1", "=", "np", ".", "sum", "(", "X1", "**", "2", ")", "\n", "\n", "# 3. The outer product of X1 and X2.", "\n", "K", "=", "X1", ".", "dot", "(", "X2", ".", "T", ")", "\n", "\n", "# 4. Solution that Maximizes trace(R'K) is R=U*V', where U, V are", "\n", "# singular vectors of K.", "\n", "U", ",", "s", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "K", ")", "\n", "V", "=", "Vh", ".", "T", "\n", "# Construct Z that fixes the orientation of R to get det(R)=1.", "\n", "Z", "=", "np", ".", "eye", "(", "U", ".", "shape", "[", "0", "]", ")", "\n", "Z", "[", "-", "1", ",", "-", "1", "]", "*=", "np", ".", "sign", "(", "np", ".", "linalg", ".", "det", "(", "U", ".", "dot", "(", "V", ".", "T", ")", ")", ")", "\n", "# Construct R.", "\n", "R", "=", "V", ".", "dot", "(", "Z", ".", "dot", "(", "U", ".", "T", ")", ")", "\n", "\n", "# 5. Recover scale.", "\n", "scale", "=", "np", ".", "trace", "(", "R", ".", "dot", "(", "K", ")", ")", "/", "var1", "\n", "# 6. Recover translation.", "\n", "t", "=", "mu2", "-", "scale", "*", "(", "R", ".", "dot", "(", "mu1", ")", ")", "\n", "\n", "# 7. Error:", "\n", "S1_hat", "=", "scale", "*", "R", ".", "dot", "(", "S1", ")", "+", "t", "\n", "\n", "if", "transposed", ":", "\n", "        ", "S1_hat", "=", "S1_hat", ".", "T", "\n", "\n", "", "return", "S1_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.compute_match_error": [[198, 210], ["range", "numpy.array", "np.array.append", "numpy.abs().mean", "max", "numpy.array", "numpy.abs"], "function", ["None"], ["", "def", "compute_match_error", "(", "match", ",", "match_data", ",", "ref_id", "=", "0", ")", ":", "\n", "    ", "match_gt", "=", "match_data", "[", "'match'", "]", "\n", "match_idx", "=", "match_data", "[", "'index'", "]", "\n", "match_0", "=", "match", "[", ":", ",", "match_gt", "[", "ref_id", "]", "]", "\n", "res", "=", "[", "]", "\n", "mapiv", "=", "cfg", ".", "VIEWS", "\n", "for", "iv", "in", "range", "(", "match", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "res", ".", "append", "(", "np", ".", "array", "(", "match_idx", "[", "mapiv", "[", "iv", "]", "]", ")", "[", "match", "[", "iv", "]", "]", ")", "\n", "", "res", "=", "np", ".", "array", "(", "res", ")", "\n", "error", "=", "np", ".", "abs", "(", "res", "[", "1", ":", "]", "-", "res", "[", ":", "1", "]", ")", ".", "mean", "(", ")", "/", "max", "(", "match_idx", "[", "ref_id", "]", ")", "\n", "match_err", "=", "'%.2f%%'", "%", "(", "error", "*", "100", ")", "\n", "return", "match_err", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.evaluate": [[211, 252], ["list", "os.path.join", "os.path.join", "loadmat", "sorted", "data.keys", "videos[].split", "open", "json.load", "data.keys", "data.pop", "data.pop", "evaluation.compute_match_error", "list", "videonames_all.index", "evaluation.evaluate_metric", "evaluate_metric.keys", "action.replace", "data.keys", "evaluation.GetVertices", "data_.keys", "data_.pop", "float", "len"], "function", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.compute_match_error", "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.evaluate_metric", "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetVertices"], ["", "def", "evaluate", "(", "data", ")", ":", "\n", "    ", "results", "=", "{", "'MPJPE'", ":", "0", ",", "'MPJPE-PA'", ":", "0", "}", "\n", "videos", "=", "list", "(", "data", ".", "keys", "(", ")", ")", "\n", "action", "=", "videos", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "match_gt", "=", "join", "(", "'../dataset/h36m'", ",", "action", ",", "'match_gt.json'", ")", "\n", "with", "open", "(", "match_gt", ")", "as", "f", ":", "\n", "        ", "match_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "if", "'match'", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "match", "=", "data", ".", "pop", "(", "'match'", ")", "\n", "ref_id", "=", "data", ".", "pop", "(", "'ref_id'", ")", "\n", "match_err", "=", "compute_match_error", "(", "match", ",", "match_data", ",", "0", ")", "\n", "results", "[", "'Match'", "]", "=", "match_err", "\n", "\n", "", "pose_gt", "=", "join", "(", "'./data/joints3d/'", ",", "'S9_{}.mat'", ".", "format", "(", "action", ".", "replace", "(", "'1'", ",", "' 1'", ")", ")", ")", "\n", "from", "scipy", ".", "io", "import", "loadmat", ",", "savemat", "\n", "annot", "=", "loadmat", "(", "pose_gt", ")", "\n", "videonames", "=", "sorted", "(", "list", "(", "data", ".", "keys", "(", ")", ")", ")", "\n", "if", "args", ".", "eval0", ":", "\n", "        ", "videonames", "=", "[", "videonames", "[", "0", "]", "]", "\n", "", "videonames_all", "=", "[", "'{}.{}'", ".", "format", "(", "action", ",", "v", ")", "for", "v", "in", "[", "'54138969'", ",", "'55011271'", ",", "'58860488'", ",", "'60457274'", "]", "]", "\n", "for", "videoname", "in", "videonames", ":", "\n", "        ", "test_view", "=", "videonames_all", ".", "index", "(", "videoname", ")", "\n", "idx", "=", "match_data", "[", "'index'", "]", "[", "test_view", "]", "\n", "used_frames", "=", "match_data", "[", "'match'", "]", "[", "test_view", "]", "\n", "idx", "=", "[", "idx", "[", "i", "]", "for", "i", "in", "used_frames", "]", "\n", "if", "args", ".", "fps25", ":", "\n", "            ", "idx", "=", "[", "i", "*", "2", "for", "i", "in", "idx", "]", "\n", "", "joints3d", "=", "annot", "[", "'joints3d'", "]", "[", "idx", ",", ":", ",", ":", "]", "\n", "data_", "=", "data", "[", "videoname", "]", "\n", "joints", "=", "GetVertices", "(", "smpl_render", ",", "data_", ",", "True", ")", "[", "used_frames", ",", ":", ",", ":", "]", "\n", "if", "'camera'", "in", "data_", ".", "keys", "(", ")", ":", "\n", "            ", "camera", "=", "data_", ".", "pop", "(", "'camera'", ")", "\n", "", "else", ":", "\n", "            ", "camera", "=", "None", "\n", "", "joints3d_", "=", "joints3d", "@", "annot", "[", "'R'", "]", "[", "test_view", "]", ".", "T", "+", "annot", "[", "'T'", "]", "[", "test_view", ":", "test_view", "+", "1", "]", "\n", "res", "=", "evaluate_metric", "(", "smpl_render", ",", "joints3d_", ",", "data_", ",", "camera", ",", "joints", ",", "'h36m'", ")", "\n", "for", "key", "in", "res", ".", "keys", "(", ")", ":", "\n", "            ", "results", "[", "key", "]", "+=", "float", "(", "res", "[", "key", "]", ")", "/", "len", "(", "videonames", ")", "\n", "", "", "results", "[", "'MPJPE'", "]", "=", "'{:.2f}'", ".", "format", "(", "results", "[", "'MPJPE'", "]", ")", "\n", "results", "[", "'MPJPE-PA'", "]", "=", "'{:.2f}'", ".", "format", "(", "results", "[", "'MPJPE-PA'", "]", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.GetVertices": [[253, 276], ["params.keys", "torch.Tensor().to", "torch.Tensor().to", "batch_rodrigues", "torch.Tensor().to", "torch.Tensor().to", "smpl_render.GetKeypoints", "smpl_render.GetVertices", "smpl_render.GetVertices.detach().cpu().numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "smpl_render.GetVertices.detach().cpu", "smpl_render.GetVertices.detach"], "function", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.batch_rodrigues", "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetKeypoints", "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetVertices"], ["", "def", "GetVertices", "(", "smpl_render", ",", "params", ",", "return_joints", "=", "False", ")", ":", "\n", "    ", "if", "'Th'", "in", "params", ".", "keys", "(", ")", ":", "\n", "        ", "Th", "=", "torch", ".", "Tensor", "(", "params", "[", "'Th'", "]", "[", ":", ",", "None", ",", ":", "]", ")", ".", "to", "(", "device", ")", "\n", "Rh", "=", "torch", ".", "Tensor", "(", "params", "[", "'Rh'", "]", ")", ".", "to", "(", "device", ")", "\n", "rot", "=", "batch_rodrigues", "(", "Rh", ")", "\n", "", "else", ":", "\n", "        ", "Th", "=", "None", "\n", "rot", "=", "None", "\n", "", "inpdict", "=", "{", "\n", "'inp_pose'", ":", "torch", ".", "Tensor", "(", "params", "[", "'poses'", "]", ")", ".", "to", "(", "device", ")", ",", "\n", "'inp_betas'", ":", "torch", ".", "Tensor", "(", "params", "[", "'shapes'", "]", ")", ".", "to", "(", "device", ")", ",", "\n", "'inp_trans'", ":", "Th", ",", "\n", "'inp_rot'", ":", "rot", ",", "\n", "'kpts_type'", ":", "smpl_render", ".", "valid_type", "\n", "}", "\n", "if", "return_joints", ":", "\n", "        ", "vertices", "=", "smpl_render", ".", "GetKeypoints", "(", "**", "inpdict", ")", "\n", "", "else", ":", "\n", "        ", "vertices", "=", "smpl_render", ".", "GetVertices", "(", "**", "inpdict", ")", "\n", "", "if", "True", ":", "\n", "        ", "return", "vertices", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.script.evaluation.to_table": [[277, 296], ["report_ref.keys", "print", "table.append", "tabulate", "print", "tabulate", "report_ref[].keys", "tabs.append", "tabs.append", "open"], "function", ["None"], ["", "", "def", "to_table", "(", "all_report", ",", "savename", "=", "None", ")", ":", "\n", "# \u8f93\u51fa", "\n", "    ", "headers", "=", "[", "args", ".", "path", ",", "'MPJPE'", ",", "'MPJPE-PA'", ",", "'Match'", "]", "\n", "report_ref", "=", "all_report", "\n", "table", "=", "[", "]", "\n", "for", "act", "in", "report_ref", ".", "keys", "(", ")", ":", "\n", "        ", "tabs", "=", "[", "act", "]", "\n", "for", "key", "in", "headers", "[", "1", ":", "]", ":", "\n", "            ", "if", "key", "in", "report_ref", "[", "act", "]", ".", "keys", "(", ")", ":", "\n", "                ", "tabs", ".", "append", "(", "report_ref", "[", "act", "]", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "                ", "tabs", ".", "append", "(", "'*'", ")", "\n", "", "", "table", ".", "append", "(", "tabs", ")", "\n", "\n", "", "from", "tabulate", "import", "tabulate", "\n", "# tab_name = join(output_dir, 'table_fancy.txt')", "\n", "print", "(", "tabulate", "(", "table", ",", "headers", ",", "tablefmt", "=", "'fancy_grid'", ")", ")", "\n", "if", "savename", "is", "not", "None", ":", "\n", "        ", "print", "(", "tabulate", "(", "table", ",", "headers", ",", "tablefmt", "=", "'plain'", ")", ",", "file", "=", "open", "(", "savename", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.dataset.sample_h36m.mkdir": [[18, 21], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.dataset.sample_h36m.extract_video": [[22, 33], ["sample_h36m.mkdir", "print", "subprocess.call"], "function", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.dataset.sample_h36m.mkdir"], ["", "", "def", "extract_video", "(", "video", ",", "out_dir", ")", ":", "\n", "    ", "mkdir", "(", "out_dir", ")", "\n", "cmd", "=", "[", "\n", "'ffmpeg'", ",", "\n", "'-i'", ",", "'{}'", ".", "format", "(", "video", ")", ",", "\n", "'-start_number'", ",", "'0'", ",", "\n", "# '-r', '25', # h36m sample to 25fps", "\n", "'{temp_dir}/frame%08d.png'", ".", "format", "(", "temp_dir", "=", "out_dir", ")", ",", "\n", "]", "\n", "print", "(", "' '", ".", "join", "(", "cmd", ")", ")", "\n", "subprocess", ".", "call", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.dataset.sample_h36m.compress_video": [[34, 39], ["subprocess.call", "os.system", "os.path.join"], "function", ["None"], ["", "def", "compress_video", "(", "path", ",", "savename", ")", ":", "\n", "    ", "cmd", "=", "[", "'ffmpeg'", ",", "'-y'", ",", "'-i'", ",", "'{}/frame%08d.png'", ".", "format", "(", "\n", "path", ")", ",", "'{}'", ".", "format", "(", "join", "(", "path", ",", "'..'", ",", "savename", "+", "'.mp4'", ")", ")", "]", "\n", "subprocess", ".", "call", "(", "cmd", ")", "\n", "os", ".", "system", "(", "'rm {}/frame*.png'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.dataset.sample_h36m.sample_action": [[41, 122], ["print", "random.seed", "numpy.random.seed", "os.path.exists", "sorted", "os.path.join", "min", "numpy.sort", "enumerate", "sample_h36m.compress_video", "numpy.array().astype", "range", "numpy.zeros", "enumerate", "range", "np.zeros.tolist", "int", "os.path.join", "print", "glob.glob", "os.path.basename().replace", "os.path.basename().replace", "os.path.join", "sample_h36m.extract_video", "os.path.basename().replace", "sorted", "imglists.append", "len", "numpy.linspace().astype", "os.system", "os.path.join", "np.sort.tolist", "numpy.random.choice", "range", "choice_all.sort", "enumerate", "sample_h36m.compress_video", "results.append", "range", "len", "open", "json.dump", "shutil.rmtree", "hashlib.sha1().hexdigest", "os.path.join", "glob.glob", "numpy.array", "list", "list", "os.system", "os.path.join", "len", "len", "len", "results[].index", "int", "os.path.join", "os.path.join", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.join", "numpy.linspace", "os.path.join", "len", "numpy.arange", "hashlib.sha1", "int", "numpy.argwhere", "numpy.array", "range", "np.random.choice.astype", "list", "os.path.join", "s.encode", "numpy.arange", "numpy.arange", "numpy.append", "numpy.append", "numpy.random.choice", "int", "numpy.random.choice", "numpy.random.choice", "int"], "function", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.dataset.sample_h36m.compress_video", "home.repos.pwc.inspect_result.zju3dv_iMoCap.dataset.sample_h36m.extract_video", "home.repos.pwc.inspect_result.zju3dv_iMoCap.dataset.sample_h36m.compress_video"], ["", "def", "sample_action", "(", "video_path", ",", "out_path", ",", "seq", ",", "\n", "max_frame", "=", "2000", ",", "rate", "=", "0.075", ",", "rate_rest", "=", "0.1", ",", "rate_pad", "=", "0.1", ",", "\n", "num_point_pad", "=", "50", ")", ":", "\n", "# initialize RNG with seeds from sequence id", "\n", "    ", "import", "hashlib", "\n", "s", "=", "\"{}:{}:{}:{}:{}:{}\"", ".", "format", "(", "seq", ",", "max_frame", ",", "rate", ",", "rate_rest", ",", "rate_pad", ",", "num_point_pad", ")", "\n", "seed_number", "=", "int", "(", "hashlib", ".", "sha1", "(", "s", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", ",", "16", ")", "%", "(", "10", "**", "8", ")", "\n", "print", "(", "\"GENERATED SEED %d from string '%s'\"", "%", "(", "seed_number", ",", "s", ")", ")", "\n", "random", ".", "seed", "(", "seed_number", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed_number", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "join", "(", "out_path", ",", "seq", ",", "'match_gt.json'", ")", ")", ":", "\n", "        ", "print", "(", "'file already exists!'", ")", "\n", "return", "False", "\n", "", "videos", "=", "sorted", "(", "glob", "(", "join", "(", "video_path", ",", "seq", ",", "'*.mp4'", ")", ")", ")", "\n", "basenames", "=", "[", "os", ".", "path", ".", "basename", "(", "video", ")", ".", "replace", "(", "'.mp4'", ",", "''", ")", "for", "video", "in", "videos", "]", "\n", "for", "video", "in", "videos", ":", "\n", "        ", "basename", "=", "os", ".", "path", ".", "basename", "(", "video", ")", ".", "replace", "(", "'.mp4'", ",", "''", ")", "\n", "out_dir", "=", "join", "(", "out_path", ",", "seq", ",", "basename", ",", "'tmp'", ")", "\n", "extract_video", "(", "video", ",", "out_dir", ")", "\n", "", "imglists", "=", "[", "]", "\n", "for", "video", "in", "videos", ":", "\n", "        ", "basename", "=", "os", ".", "path", ".", "basename", "(", "video", ")", ".", "replace", "(", "'.mp4'", ",", "''", ")", "\n", "imglist", "=", "sorted", "(", "glob", "(", "join", "(", "out_path", ",", "seq", ",", "basename", ",", "'tmp'", ",", "'*.png'", ")", ")", ")", "\n", "imglists", ".", "append", "(", "imglist", "[", ":", "max_frame", "]", ")", "\n", "\n", "", "out_path", "=", "join", "(", "out_path", ",", "seq", ")", "\n", "max_frame", "=", "min", "(", "max_frame", ",", "len", "(", "imglists", "[", "0", "]", ")", ")", "\n", "choice", "=", "np", ".", "sort", "(", "np", ".", "linspace", "(", "0", ",", "max_frame", "-", "1", ",", "int", "(", "max_frame", "*", "rate", ")", ")", ".", "astype", "(", "int", ")", ")", "\n", "# generate the reference video", "\n", "for", "ii", ",", "idx", "in", "enumerate", "(", "choice", ")", ":", "\n", "        ", "os", ".", "system", "(", "'cp {} {}'", ".", "format", "(", "imglists", "[", "0", "]", "[", "idx", "]", ",", "join", "(", "out_path", ",", "basenames", "[", "0", "]", ",", "'frame%08d.png'", "%", "(", "ii", ")", ")", ")", ")", "\n", "", "compress_video", "(", "join", "(", "out_path", ",", "basenames", "[", "0", "]", ")", ",", "basenames", "[", "0", "]", ")", "\n", "# generate the other view", "\n", "results", "=", "[", "choice", ".", "tolist", "(", ")", "]", "\n", "density_index", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "num_point_pad", "*", "0.1", ",", "\n", "num_point_pad", "*", "0.2", ",", "num_point_pad", "]", ")", ".", "astype", "(", "int", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "        ", "choice_section", "=", "np", ".", "random", ".", "choice", "(", "choice", "[", "3", ":", "-", "3", "]", ",", "num_point_pad", ",", "replace", "=", "False", ")", "\n", "choice_all", "=", "[", "]", "\n", "for", "density_i", "in", "range", "(", "len", "(", "density_index", ")", "-", "1", ")", ":", "\n", "            ", "density", "=", "choice_section", "[", "density_index", "[", "density_i", "]", ":", "density_index", "[", "density_i", "+", "1", "]", "]", "\n", "for", "item", "in", "density", ":", "\n", "                ", "index", "=", "np", ".", "argwhere", "(", "choice", "==", "item", ")", "[", "0", ",", "0", "]", "\n", "choice_item", "=", "np", ".", "arange", "(", "choice", "[", "index", "]", "+", "1", ",", "choice", "[", "index", "+", "1", "]", ")", "\n", "if", "density_i", "==", "0", ":", "\n", "                    ", "choice_item", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "pad", "in", "range", "(", "3", ")", ":", "\n", "                        ", "choice_item_p", "=", "np", ".", "arange", "(", "choice", "[", "index", "+", "pad", "]", "+", "1", ",", "choice", "[", "index", "+", "1", "+", "pad", "]", "+", "1", ")", "\n", "choice_item_n", "=", "np", ".", "arange", "(", "choice", "[", "index", "-", "1", "-", "pad", "]", "+", "1", ",", "choice", "[", "index", "-", "pad", "]", "+", "1", ")", "\n", "choice_item", "=", "np", ".", "append", "(", "choice_item", ",", "choice_item_p", ")", "\n", "choice_item", "=", "np", ".", "append", "(", "choice_item", ",", "choice_item_n", ")", "\n", "", "choice_item", "=", "choice_item", ".", "astype", "(", "int", ")", "\n", "", "elif", "density_i", "==", "1", ":", "\n", "                    ", "choice_item", "=", "np", ".", "random", ".", "choice", "(", "choice_item", ",", "int", "(", "choice_item", ".", "shape", "[", "0", "]", "/", "3", ")", ",", "replace", "=", "False", ")", "\n", "", "elif", "density_i", "==", "2", ":", "\n", "                    ", "choice_item", "=", "np", ".", "random", ".", "choice", "(", "choice_item", ",", "int", "(", "choice_item", ".", "shape", "[", "0", "]", "/", "6", ")", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "choice_item", "=", "np", ".", "random", ".", "choice", "(", "choice_item", ",", "1", ",", "replace", "=", "False", ")", "\n", "", "choice_all", "=", "choice_all", "+", "list", "(", "choice_item", ")", "\n", "", "", "choice_all", "=", "list", "(", "choice_all", ")", "+", "list", "(", "choice", ")", "\n", "choice_all", ".", "sort", "(", ")", "\n", "for", "ii", ",", "idx", "in", "enumerate", "(", "choice_all", ")", ":", "\n", "            ", "os", ".", "system", "(", "'cp {} {}'", ".", "format", "(", "imglists", "[", "i", "]", "[", "idx", "]", ",", "join", "(", "out_path", ",", "basenames", "[", "i", "]", ",", "'frame%08d.png'", "%", "(", "ii", ")", ")", ")", ")", "\n", "", "compress_video", "(", "join", "(", "out_path", ",", "basenames", "[", "i", "]", ")", ",", "basenames", "[", "i", "]", ")", "\n", "results", ".", "append", "(", "choice_all", ")", "\n", "", "match_gt", "=", "np", ".", "zeros", "(", "(", "len", "(", "results", ")", ",", "len", "(", "choice", ")", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "ii", ",", "idx", "in", "enumerate", "(", "choice", ")", ":", "\n", "        ", "for", "iv", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "            ", "match_gt", "[", "iv", ",", "ii", "]", "=", "results", "[", "iv", "]", ".", "index", "(", "idx", ")", "\n", "", "", "import", "json", "\n", "output", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "        ", "results", "[", "i", "]", "=", "[", "int", "(", "var", ")", "for", "var", "in", "results", "[", "i", "]", "]", "\n", "", "output", "[", "'index'", "]", "=", "results", "\n", "output", "[", "'match'", "]", "=", "match_gt", ".", "tolist", "(", ")", "\n", "with", "open", "(", "join", "(", "out_path", ",", "'match_gt.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "output", ",", "f", ",", "indent", "=", "4", ")", "\n", "", "import", "shutil", "\n", "for", "basename", "in", "basenames", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "join", "(", "out_path", ",", "basename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.config.default.update_config": [[95, 100], ["cfg.defrost", "cfg.merge_from_file", "cfg.merge_from_list", "cfg.freeze"], "function", ["None"], ["def", "update_config", "(", "cfg", ",", "args", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.config.default.check_config": [[101, 103], ["None"], "function", ["None"], ["", "def", "check_config", "(", "cfg", ")", ":", "\n", "    ", "pass", "\n", "", ""]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.config.cmdline.parse_args": [[3, 27], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.config.cmdline.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Motion capture form Internet Videos'", ")", "\n", "# general", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "\n", "help", "=", "'experiment configure file name'", ",", "\n", "default", "=", "'config/config_example.yml'", ",", "\n", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'opts'", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "parser", ".", "add_argument", "(", "'--exp'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'specify the output name'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'specify the gpu numbers'", ")", "\n", "parser", ".", "add_argument", "(", "'--path'", ",", "type", "=", "str", ",", "default", "=", "'output/serve'", ")", "\n", "parser", ".", "add_argument", "(", "'--vis'", ",", "type", "=", "str", ",", "choices", "=", "[", "'kpts'", ",", "'match'", ",", "'scene'", ",", "'all'", ",", "'mesh'", "]", ",", "\n", "default", "=", "'kpts'", ",", "help", "=", "'match type'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--fps25'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--usecpp'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval0'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--tcc'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.JointMapper.__init__": [[78, 85], ["super().__init__", "smplx_utils.JointMapper.register_buffer", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "joint_maps", "=", "None", ")", ":", "\n", "        ", "super", "(", "JointMapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "joint_maps", "is", "None", ":", "\n", "            ", "self", ".", "joint_maps", "=", "joint_maps", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'joint_maps'", ",", "\n", "torch", ".", "tensor", "(", "joint_maps", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.JointMapper.forward": [[86, 91], ["torch.index_select"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "joints", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "joint_maps", "is", "None", ":", "\n", "            ", "return", "joints", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "index_select", "(", "joints", ",", "1", ",", "self", ".", "joint_maps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.__init__": [[93, 159], ["torch.device", "smplx_utils.JointMapper", "dict", "smplx.create", "smplx.create.to", "smplx.create.parameters", "os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "os.path.join", "print", "os.path.join", "smplx_utils.smpl_to_openpose", "warnings.warn", "[].to", "numpy.load", "[].to", "os.path.dirname", "numpy.load", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.smpl_to_openpose"], ["    ", "def", "__init__", "(", "self", ",", "model_folder", "=", "None", ",", "model_type", "=", "'smplx'", ",", "ext", "=", "'npz'", ",", "\n", "gender", "=", "'neutral'", ",", "\n", "plot_joints", "=", "False", ",", "\n", "plotting_module", "=", "'pyrender'", ",", "\n", "use_face", "=", "True", ",", "\n", "use_hands", "=", "True", ",", "\n", "flat_hand_mean", "=", "False", ",", "\n", "use_face_contour", "=", "False", ",", "\n", "batch_size", "=", "1", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "if", "model_folder", "is", "None", ":", "\n", "            ", "model_folder", "=", "join", "(", "smplx", ".", "__path__", "[", "0", "]", ",", "'models'", ")", "\n", "", "self", ".", "use_hands", "=", "use_hands", "\n", "self", ".", "use_face", "=", "use_face", "\n", "self", ".", "use_face_contour", "=", "use_face_contour", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "joint_mapper", "=", "JointMapper", "(", "smpl_to_openpose", "(", "\n", "model_type", ",", "use_hands", "=", "use_hands", ",", "\n", "use_face", "=", "self", ".", "use_face", ",", "\n", "use_face_contour", "=", "self", ".", "use_face_contour", ",", "\n", "openpose_format", "=", "'coco25'", ")", ")", "\n", "if", "model_type", "==", "'smplh'", "and", "gender", "==", "'neutral'", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "\"smplh does not have neutral model, \\\n                use male instead.\"", ")", "\n", "gender", "=", "'male'", "\n", "", "model_params", "=", "dict", "(", "\n", "joint_mapper", "=", "joint_mapper", ",", "\n", "create_global_orient", "=", "True", ",", "\n", "create_body_pose", "=", "True", ",", "\n", "create_betas", "=", "True", ",", "\n", "create_left_hand_pose", "=", "True", ",", "\n", "create_right_hand_pose", "=", "True", ",", "\n", "create_expression", "=", "True", ",", "\n", "create_jaw_pose", "=", "True", ",", "\n", "create_leye_pose", "=", "True", ",", "\n", "create_reye_pose", "=", "True", ",", "\n", "create_transl", "=", "True", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "model_type", "=", "model_type", ",", "\n", "gender", "=", "gender", ",", "\n", "flat_hand_mean", "=", "flat_hand_mean", ")", "\n", "model", "=", "smplx", ".", "create", "(", "model_folder", ",", "\n", "**", "model_params", ")", "\n", "self", ".", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "for", "par", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "par", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "faces_tensor", "=", "self", ".", "model", ".", "faces_tensor", "\n", "self", ".", "faces", "=", "self", ".", "model", ".", "faces", "\n", "self", ".", "coco17inbody25", "=", "[", "0", ",", "16", ",", "15", ",", "18", ",", "17", ",", "5", ",", "2", ",", "6", ",", "3", ",", "7", ",", "4", ",", "12", ",", "9", ",", "13", ",", "10", ",", "14", ",", "11", "]", "\n", "self", ".", "model_type", "=", "model_type", "\n", "# load regressor", "\n", "reg_path", "=", "join", "(", "'data'", ",", "'smpl_regressor'", ",", "'J_regressor_body25.npy'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "reg_path", ")", ":", "\n", "            ", "self", ".", "J_body25", "=", "np", ".", "load", "(", "reg_path", ")", ".", "T", "\n", "self", ".", "J_body25", "=", "torch", ".", "Tensor", "(", "self", ".", "J_body25", ")", "[", "None", ",", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "", "reg_path", "=", "join", "(", "'data'", ",", "'smpl_regressor'", ",", "'J_regressor_h36m.npy'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "reg_path", ")", ":", "\n", "# TODO:I forget where is the J_regressor from", "\n", "            ", "self", ".", "J_h36m", "=", "np", ".", "load", "(", "reg_path", ")", "\n", "# exchange left foot and right foot", "\n", "self", ".", "J_h36m", "[", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "]", "=", "self", ".", "J_h36m", "[", "[", "4", ",", "5", ",", "6", ",", "1", ",", "2", ",", "3", "]", "]", "\n", "self", ".", "J_h36m", "=", "torch", ".", "Tensor", "(", "self", ".", "J_h36m", ")", "[", "None", ",", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "", "coco_hmmr_path", "=", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'model'", ",", "'coco_hmmr.npy'", ")", "\n", "print", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetVerticesAll": [[160, 178], ["smplx_utils.SMPLX.model", "torch.eye().unsqueeze().repeat", "torch.zeros", "torch.matmul", "torch.eye().unsqueeze().repeat.transpose", "torch.eye().unsqueeze", "torch.eye"], "methods", ["None"], ["", "def", "GetVerticesAll", "(", "self", ",", "inp_rot", "=", "None", ",", "inp_trans", "=", "None", ",", "\n", "global_orient", "=", "None", ",", "body_pose", "=", "None", ",", "jaw_pose", "=", "None", ",", "\n", "left_hand_pose", "=", "None", ",", "right_hand_pose", "=", "None", ",", "\n", "betas", "=", "None", ",", "expression", "=", "None", ")", ":", "\n", "        ", "vertices", "=", "self", ".", "model", "(", "betas", "=", "betas", ",", "\n", "global_orient", "=", "global_orient", ",", "\n", "body_pose", "=", "body_pose", ",", "\n", "jaw_pose", "=", "jaw_pose", ",", "\n", "left_hand_pose", "=", "left_hand_pose", ",", "\n", "right_hand_pose", "=", "right_hand_pose", ",", "\n", "expression", "=", "expression", ",", "\n", "return_verts", "=", "True", ")", ".", "vertices", "\n", "if", "inp_rot", "is", "None", ":", "\n", "            ", "inp_rot", "=", "torch", ".", "eye", "(", "3", ",", "3", ",", "device", "=", "self", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "vertices", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "", "if", "inp_trans", "is", "None", ":", "\n", "            ", "inp_trans", "=", "torch", ".", "zeros", "(", "vertices", ".", "shape", "[", "0", "]", ",", "1", ",", "3", ",", "device", "=", "self", ".", "device", ")", "\n", "", "transform", "=", "torch", ".", "matmul", "(", "vertices", ",", "inp_rot", ".", "transpose", "(", "1", ",", "2", ")", ")", "+", "inp_trans", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.splitKpts": [[179, 188], ["None"], "methods", ["None"], ["", "def", "splitKpts", "(", "self", ",", "keypoints", ")", ":", "\n", "        ", "if", "keypoints", ".", "shape", "[", "1", "]", ">", "67", ":", "\n", "            ", "return", "keypoints", "[", ":", ",", ":", "25", "]", ",", "keypoints", "[", ":", ",", "25", ":", "25", "+", "21", "]", ",", "keypoints", "[", ":", ",", "25", "+", "21", ":", "25", "+", "21", "+", "21", "]", ",", "keypoints", "[", ":", ",", "25", "+", "21", "+", "21", ":", "]", "\n", "", "elif", "keypoints", ".", "shape", "[", "1", "]", ">", "25", ":", "\n", "            ", "return", "keypoints", "[", ":", ",", ":", "25", "]", ",", "keypoints", "[", ":", ",", "25", ":", "25", "+", "21", "]", ",", "keypoints", "[", ":", ",", "25", "+", "21", ":", "25", "+", "21", "+", "21", "]", "\n", "", "else", ":", "\n", "            ", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetKeypointsAll": [[189, 223], ["smplx_utils.SMPLX.model", "torch.eye().unsqueeze().repeat", "torch.zeros", "torch.matmul", "torch.eye().unsqueeze().repeat.transpose", "smplx_utils.SMPLX.splitKpts", "torch.matmul", "torch.eye().unsqueeze", "torch.eye().unsqueeze().repeat.transpose", "smplx_utils.SMPLX.splitKpts", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.splitKpts", "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.splitKpts"], ["", "", "def", "GetKeypointsAll", "(", "self", ",", "inp_rot", "=", "None", ",", "inp_trans", "=", "None", ",", "\n", "global_orient", "=", "None", ",", "body_pose", "=", "None", ",", "jaw_pose", "=", "None", ",", "\n", "left_hand_pose", "=", "None", ",", "right_hand_pose", "=", "None", ",", "\n", "betas", "=", "None", ",", "expression", "=", "None", ",", "\n", "split", "=", "True", ",", "return_verts", "=", "False", ")", ":", "\n", "# Rot: (bn, 3, 3), trans:(bn, 1, 3)", "\n", "        ", "keypoints", "=", "self", ".", "model", "(", "betas", "=", "betas", ",", "\n", "global_orient", "=", "global_orient", ",", "\n", "body_pose", "=", "body_pose", ",", "\n", "jaw_pose", "=", "jaw_pose", ",", "\n", "left_hand_pose", "=", "left_hand_pose", ",", "\n", "right_hand_pose", "=", "right_hand_pose", ",", "\n", "expression", "=", "expression", ",", "\n", "return_verts", "=", "return_verts", ")", "\n", "if", "return_verts", ":", "\n", "            ", "verts", "=", "keypoints", ".", "vertices", "\n", "", "keypoints", "=", "keypoints", ".", "joints", "\n", "# bn, 118, 3", "\n", "if", "inp_rot", "is", "None", ":", "\n", "            ", "inp_rot", "=", "torch", ".", "eye", "(", "3", ",", "3", ",", "device", "=", "self", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "", "if", "inp_trans", "is", "None", ":", "\n", "            ", "inp_trans", "=", "torch", ".", "zeros", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "1", ",", "3", ",", "device", "=", "self", ".", "device", ")", "\n", "", "transform", "=", "torch", ".", "matmul", "(", "keypoints", ",", "inp_rot", ".", "transpose", "(", "1", ",", "2", ")", ")", "+", "inp_trans", "\n", "if", "not", "return_verts", ":", "\n", "            ", "if", "split", "==", "False", ":", "\n", "                ", "return", "transform", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "splitKpts", "(", "transform", ")", "\n", "", "", "else", ":", "\n", "            ", "verts", "=", "torch", ".", "matmul", "(", "verts", ",", "inp_rot", ".", "transpose", "(", "1", ",", "2", ")", ")", "+", "inp_trans", "\n", "if", "split", "==", "False", ":", "\n", "                ", "return", "transform", ",", "verts", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "splitKpts", "(", "transform", ")", ",", "verts", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX._GetVertices": [[224, 242], ["smplx_utils.SMPLX.GetVerticesAll", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetVerticesAll"], ["", "", "", "def", "_GetVertices", "(", "self", ",", "inp_pose", "=", "None", ",", "inp_betas", "=", "None", ",", "inp_trans", "=", "None", ",", "inp_rot", "=", "None", ",", "\n", "jaw_pose", "=", "None", ",", "left_hand_pose", "=", "None", ",", "right_hand_pose", "=", "None", ",", "\n", "expression", "=", "None", ")", ":", "\n", "        ", "global_orient", "=", "inp_pose", "[", ":", ",", ":", "3", "]", "\n", "if", "self", ".", "model_type", "!=", "'smpl'", ":", "# for smplh and smplx", "\n", "            ", "body_pose", "=", "inp_pose", "[", ":", ",", "3", ":", "66", "]", "\n", "", "else", ":", "\n", "            ", "body_pose", "=", "inp_pose", "[", ":", ",", "3", ":", "]", "\n", "", "if", "inp_rot", "is", "not", "None", ":", "\n", "# pass", "\n", "            ", "global_orient", "=", "torch", ".", "zeros_like", "(", "global_orient", ",", "device", "=", "body_pose", ".", "device", ")", "\n", "", "keypoints", "=", "self", ".", "GetVerticesAll", "(", "\n", "global_orient", "=", "global_orient", ",", "\n", "inp_rot", "=", "inp_rot", ",", "inp_trans", "=", "inp_trans", ",", "\n", "betas", "=", "inp_betas", ",", "expression", "=", "expression", ",", "\n", "body_pose", "=", "body_pose", ",", "jaw_pose", "=", "jaw_pose", ",", "\n", "left_hand_pose", "=", "left_hand_pose", ",", "right_hand_pose", "=", "right_hand_pose", ")", "\n", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetVertices": [[243, 284], ["params.keys", "torch.cat", "params_batch.keys", "smplx_utils.SMPLX._GetVertices", "torch.cat.append", "print", "params[].expand", "params.keys", "torch.zeros", "torch.cat", "len"], "methods", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX._GetVertices"], ["", "def", "GetVertices", "(", "self", ",", "inp_pose", "=", "None", ",", "inp_betas", "=", "None", ",", "inp_trans", "=", "None", ",", "inp_rot", "=", "None", ",", "kpts_type", "=", "'body25'", ",", "\n", "jaw_pose", "=", "None", ",", "left_hand_pose", "=", "None", ",", "right_hand_pose", "=", "None", ",", "\n", "expression", "=", "None", ")", ":", "\n", "        ", "params", "=", "{", "'inp_pose'", ":", "inp_pose", ",", "\n", "'inp_betas'", ":", "inp_betas", ",", "\n", "'inp_trans'", ":", "inp_trans", ",", "\n", "'inp_rot'", ":", "inp_rot", ",", "\n", "'jaw_pose'", ":", "jaw_pose", ",", "\n", "'left_hand_pose'", ":", "left_hand_pose", ",", "\n", "'right_hand_pose'", ":", "right_hand_pose", ",", "\n", "'expression'", ":", "expression", "}", "\n", "nBatch", "=", "inp_pose", ".", "shape", "[", "0", "]", "\n", "for", "key", "in", "params", ".", "keys", "(", ")", ":", "\n", "            ", "if", "params", "[", "key", "]", "is", "not", "None", ":", "\n", "                ", "assert", "params", "[", "key", "]", ".", "shape", "[", "0", "]", "==", "nBatch", "or", "params", "[", "key", "]", ".", "shape", "[", "0", "]", "==", "1", ",", "print", "(", "params", "[", "key", "]", ".", "shape", ",", "' is not a proper shape'", ")", "\n", "if", "params", "[", "key", "]", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                    ", "tgt_shape", "=", "[", "nBatch", "]", "+", "[", "-", "1", "]", "*", "(", "len", "(", "params", "[", "key", "]", ".", "shape", ")", "-", "1", ")", "\n", "params", "[", "key", "]", "=", "params", "[", "key", "]", ".", "expand", "(", "tgt_shape", ")", "\n", "# padding or repeating", "\n", "", "", "", "keypoints", "=", "[", "]", "\n", "begin", "=", "0", "\n", "while", "True", ":", "\n", "            ", "if", "begin", ">=", "inp_pose", ".", "shape", "[", "0", "]", ":", "\n", "                ", "break", "\n", "", "params_batch", "=", "{", "\n", "key", ":", "params", "[", "key", "]", "[", "begin", ":", "begin", "+", "self", ".", "batch_size", "]", "if", "params", "[", "key", "]", "is", "not", "None", "else", "None", "for", "key", "in", "params", ".", "keys", "(", ")", "\n", "}", "\n", "batch_indeed", "=", "params_batch", "[", "'inp_pose'", "]", ".", "shape", "[", "0", "]", "\n", "for", "key", "in", "params_batch", ".", "keys", "(", ")", ":", "\n", "                ", "if", "params_batch", "[", "key", "]", "is", "not", "None", ":", "\n", "                    ", "if", "params_batch", "[", "key", "]", ".", "shape", "[", "0", "]", "<", "self", ".", "batch_size", ":", "\n", "# padding zero", "\n", "                        ", "zeros", "=", "torch", ".", "zeros", "(", "(", "self", ".", "batch_size", "-", "params_batch", "[", "key", "]", ".", "shape", "[", "0", "]", ",", "*", "params_batch", "[", "key", "]", ".", "shape", "[", "1", ":", "]", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "params_batch", "[", "key", "]", "=", "torch", ".", "cat", "(", "(", "params_batch", "[", "key", "]", ",", "zeros", ")", ",", "dim", "=", "0", ")", "\n", "", "", "", "_keypoints", "=", "self", ".", "_GetVertices", "(", "**", "params_batch", ")", "\n", "keypoints", ".", "append", "(", "_keypoints", "[", ":", "batch_indeed", "]", ")", "\n", "begin", "=", "begin", "+", "self", ".", "batch_size", "\n", "", "keypoints", "=", "torch", ".", "cat", "(", "keypoints", ",", "dim", "=", "0", ")", "\n", "\n", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX._GetKeypoints": [[285, 347], ["smplx_utils.SMPLX.GetVertices", "torch.matmul", "smplx_utils.SMPLX.GetKeypointsAll", "torch.matmul", "torch.matmul", "torch.zeros_like", "smplx_utils.SMPLX.GetKeypointsAll", "torch.matmul", "torch.zeros_like", "torch.matmul", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetVertices", "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetKeypointsAll", "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetKeypointsAll"], ["", "def", "_GetKeypoints", "(", "self", ",", "inp_pose", "=", "None", ",", "inp_betas", "=", "None", ",", "inp_trans", "=", "None", ",", "inp_rot", "=", "None", ",", "\n", "jaw_pose", "=", "None", ",", "left_hand_pose", "=", "None", ",", "right_hand_pose", "=", "None", ",", "\n", "expression", "=", "None", ",", "kpts_type", "=", "'body25'", ")", ":", "\n", "        ", "if", "self", ".", "model_type", "==", "'smpl'", ":", "\n", "# vertices: (bn, 6890, 3)", "\n", "            ", "vertices", "=", "self", ".", "GetVertices", "(", "inp_pose", ",", "inp_betas", ",", "inp_trans", ",", "inp_rot", ")", "\n", "if", "kpts_type", "==", "'body25'", "or", "kpts_type", "==", "'all'", ":", "\n", "                ", "keypoints", "=", "torch", ".", "matmul", "(", "self", ".", "J_body25", ",", "vertices", ")", "\n", "", "elif", "kpts_type", "==", "'coco17'", ":", "\n", "                ", "keypoints", "=", "torch", ".", "matmul", "(", "self", ".", "J_body25", ",", "vertices", ")", "\n", "keypoints", "=", "keypoints", "[", ":", ",", "self", ".", "coco17inbody25", "]", "\n", "", "elif", "kpts_type", "==", "'cocoplus'", ":", "\n", "                ", "keypoints", "=", "torch", ".", "matmul", "(", "self", ".", "J_coco_hmmr", ",", "vertices", ")", "\n", "", "elif", "kpts_type", "==", "'h36m'", ":", "\n", "                ", "keypoints", "=", "torch", ".", "matmul", "(", "self", ".", "J_h36m", ",", "vertices", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "return", "keypoints", "\n", "", "elif", "self", ".", "model_type", "==", "'smplh'", ":", "\n", "            ", "global_orient", "=", "inp_pose", "[", ":", ",", ":", "3", "]", "\n", "body_pose", "=", "inp_pose", "[", ":", ",", "3", ":", "66", "]", "\n", "if", "inp_rot", "is", "not", "None", ":", "\n", "                ", "global_orient", "=", "torch", ".", "zeros_like", "(", "global_orient", ",", "device", "=", "body_pose", ".", "device", ")", "\n", "\n", "", "keypoints", ",", "vertices", "=", "self", ".", "GetKeypointsAll", "(", "\n", "global_orient", "=", "global_orient", ",", "\n", "inp_rot", "=", "inp_rot", ",", "inp_trans", "=", "inp_trans", ",", "\n", "betas", "=", "inp_betas", ",", "\n", "body_pose", "=", "body_pose", ",", "jaw_pose", "=", "jaw_pose", ",", "\n", "left_hand_pose", "=", "left_hand_pose", ",", "right_hand_pose", "=", "right_hand_pose", ",", "\n", "split", "=", "False", ",", "return_verts", "=", "True", ")", "\n", "body25", "=", "torch", ".", "matmul", "(", "self", ".", "J_body25", ",", "vertices", ")", "\n", "if", "kpts_type", "==", "'body25'", ":", "\n", "                ", "return", "body25", "\n", "", "elif", "kpts_type", "==", "'coco17'", ":", "\n", "                ", "return", "body25", "[", ":", ",", "self", ".", "coco17inbody25", ",", ":", "]", "\n", "", "elif", "kpts_type", "==", "'all'", ":", "\n", "                ", "return", "torch", ".", "cat", "(", "[", "body25", ",", "keypoints", "[", ":", ",", "25", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "elif", "self", ".", "model_type", "==", "'smplx'", ":", "\n", "            ", "global_orient", "=", "inp_pose", "[", ":", ",", ":", "3", "]", "\n", "body_pose", "=", "inp_pose", "[", ":", ",", "3", ":", "66", "]", "\n", "if", "inp_rot", "is", "not", "None", ":", "\n", "                ", "global_orient", "=", "torch", ".", "zeros_like", "(", "global_orient", ",", "device", "=", "body_pose", ".", "device", ")", "\n", "\n", "", "keypoints", "=", "self", ".", "GetKeypointsAll", "(", "\n", "global_orient", "=", "global_orient", ",", "\n", "inp_rot", "=", "inp_rot", ",", "inp_trans", "=", "inp_trans", ",", "\n", "betas", "=", "inp_betas", ",", "expression", "=", "expression", ",", "\n", "body_pose", "=", "body_pose", ",", "jaw_pose", "=", "jaw_pose", ",", "\n", "left_hand_pose", "=", "left_hand_pose", ",", "right_hand_pose", "=", "right_hand_pose", ",", "\n", "split", "=", "False", ")", "\n", "if", "kpts_type", "==", "'body25'", ":", "\n", "                ", "return", "keypoints", "[", ":", ",", ":", "25", "]", "\n", "", "elif", "kpts_type", "==", "'coco17'", ":", "\n", "                ", "return", "keypoints", "[", ":", ",", "self", ".", "coco17inbody25", ",", ":", "]", "\n", "", "elif", "kpts_type", "==", "'all'", ":", "\n", "                ", "return", "keypoints", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetKeypoints": [[348, 363], ["smplx_utils.SMPLX._GetKeypoints"], "methods", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX._GetKeypoints"], ["", "", "", "def", "GetKeypoints", "(", "self", ",", "inp_pose", "=", "None", ",", "inp_betas", "=", "None", ",", "\n", "inp_trans", "=", "None", ",", "inp_rot", "=", "None", ",", "kpts_type", "=", "'body25'", ",", "\n", "jaw_pose", "=", "None", ",", "left_hand_pose", "=", "None", ",", "right_hand_pose", "=", "None", ",", "\n", "expression", "=", "None", ")", ":", "\n", "        ", "params", "=", "{", "'inp_pose'", ":", "inp_pose", ",", "\n", "'inp_betas'", ":", "inp_betas", ",", "\n", "'inp_trans'", ":", "inp_trans", ",", "\n", "'inp_rot'", ":", "inp_rot", ",", "\n", "'jaw_pose'", ":", "jaw_pose", ",", "\n", "'left_hand_pose'", ":", "left_hand_pose", ",", "\n", "'right_hand_pose'", ":", "right_hand_pose", ",", "\n", "'expression'", ":", "expression", "}", "\n", "nBatch", "=", "inp_pose", ".", "shape", "[", "0", "]", "\n", "keypoints", "=", "self", ".", "_GetKeypoints", "(", "kpts_type", "=", "kpts_type", ",", "**", "params", ")", "\n", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetBODY25": [[364, 370], ["smplx_utils.SMPLX.GetKeypoints"], "methods", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetKeypoints"], ["", "def", "GetBODY25", "(", "self", ",", "inp_pose", ",", "inp_betas", "=", "None", ",", "inp_trans", "=", "None", ",", "inp_rot", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "GetKeypoints", "(", "inp_pose", ",", "\n", "inp_betas", "=", "inp_betas", ",", "\n", "inp_trans", "=", "inp_trans", ",", "\n", "inp_rot", "=", "inp_rot", ",", "\n", "kpts_type", "=", "'body25'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetCOCO17": [[371, 377], ["smplx_utils.SMPLX.GetKeypoints"], "methods", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.SMPLX.GetKeypoints"], ["", "def", "GetCOCO17", "(", "self", ",", "inp_pose", ",", "inp_betas", "=", "None", ",", "inp_trans", "=", "None", ",", "inp_rot", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "GetKeypoints", "(", "inp_pose", ",", "\n", "inp_betas", "=", "inp_betas", ",", "\n", "inp_trans", "=", "inp_trans", ",", "\n", "inp_rot", "=", "inp_rot", ",", "\n", "kpts_type", "=", "'coco17'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.smplx_utils.smpl_to_openpose": [[10, 75], ["openpose_format.lower", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "ValueError", "numpy.array", "numpy.array", "numpy.arange"], "function", ["None"], ["def", "smpl_to_openpose", "(", "model_type", "=", "'smplx'", ",", "use_hands", "=", "True", ",", "use_face", "=", "True", ",", "\n", "use_face_contour", "=", "False", ",", "openpose_format", "=", "'coco25'", ")", ":", "\n", "    ", "''' Returns the indices of the permutation that maps OpenPose to SMPL\n\n        Parameters\n        ----------\n        model_type: str, optional\n            The type of SMPL-like model that is used. The default mapping\n            returned is for the SMPLX model\n        use_hands: bool, optional\n            Flag for adding to the returned permutation the mapping for the\n            hand keypoints. Defaults to True\n        use_face: bool, optional\n            Flag for adding to the returned permutation the mapping for the\n            face keypoints. Defaults to True\n        use_face_contour: bool, optional\n            Flag for appending the facial contour keypoints. Defaults to False\n        openpose_format: bool, optional\n            The output format of OpenPose. For now only COCO-25 and COCO-19 is\n            supported. Defaults to 'coco25'\n\n    '''", "\n", "if", "openpose_format", ".", "lower", "(", ")", "==", "'coco25'", ":", "\n", "        ", "if", "model_type", "==", "'smpl'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "24", ",", "12", ",", "17", ",", "19", ",", "21", ",", "16", ",", "18", ",", "20", ",", "0", ",", "2", ",", "5", ",", "8", ",", "1", ",", "4", ",", "\n", "7", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", "]", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "", "elif", "model_type", "==", "'smplh'", ":", "\n", "            ", "body_mapping", "=", "np", ".", "array", "(", "[", "52", ",", "12", ",", "17", ",", "19", ",", "21", ",", "16", ",", "18", ",", "20", ",", "0", ",", "2", ",", "5", ",", "\n", "8", ",", "1", ",", "4", ",", "7", ",", "53", ",", "54", ",", "55", ",", "56", ",", "57", ",", "58", ",", "59", ",", "\n", "60", ",", "61", ",", "62", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "=", "[", "body_mapping", "]", "\n", "if", "use_hands", ":", "\n", "                ", "lhand_mapping", "=", "np", ".", "array", "(", "[", "20", ",", "34", ",", "35", ",", "36", ",", "63", ",", "22", ",", "23", ",", "24", ",", "64", ",", "\n", "25", ",", "26", ",", "27", ",", "65", ",", "31", ",", "32", ",", "33", ",", "66", ",", "28", ",", "\n", "29", ",", "30", ",", "67", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "rhand_mapping", "=", "np", ".", "array", "(", "[", "21", ",", "49", ",", "50", ",", "51", ",", "68", ",", "37", ",", "38", ",", "39", ",", "69", ",", "\n", "40", ",", "41", ",", "42", ",", "70", ",", "46", ",", "47", ",", "48", ",", "71", ",", "43", ",", "\n", "44", ",", "45", ",", "72", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "+=", "[", "lhand_mapping", ",", "rhand_mapping", "]", "\n", "", "return", "np", ".", "concatenate", "(", "mapping", ")", "\n", "# SMPLX", "\n", "", "elif", "model_type", "==", "'smplx'", ":", "\n", "            ", "body_mapping", "=", "np", ".", "array", "(", "[", "55", ",", "12", ",", "17", ",", "19", ",", "21", ",", "16", ",", "18", ",", "20", ",", "0", ",", "2", ",", "5", ",", "\n", "8", ",", "1", ",", "4", ",", "7", ",", "56", ",", "57", ",", "58", ",", "59", ",", "60", ",", "61", ",", "62", ",", "\n", "63", ",", "64", ",", "65", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "=", "[", "body_mapping", "]", "\n", "if", "use_hands", ":", "\n", "                ", "lhand_mapping", "=", "np", ".", "array", "(", "[", "20", ",", "37", ",", "38", ",", "39", ",", "66", ",", "25", ",", "26", ",", "27", ",", "\n", "67", ",", "28", ",", "29", ",", "30", ",", "68", ",", "34", ",", "35", ",", "36", ",", "69", ",", "\n", "31", ",", "32", ",", "33", ",", "70", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "rhand_mapping", "=", "np", ".", "array", "(", "[", "21", ",", "52", ",", "53", ",", "54", ",", "71", ",", "40", ",", "41", ",", "42", ",", "72", ",", "\n", "43", ",", "44", ",", "45", ",", "73", ",", "49", ",", "50", ",", "51", ",", "74", ",", "46", ",", "\n", "47", ",", "48", ",", "75", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "mapping", "+=", "[", "lhand_mapping", ",", "rhand_mapping", "]", "\n", "", "if", "use_face", ":", "\n", "#  end_idx = 127 + 17 * use_face_contour", "\n", "                ", "face_mapping", "=", "np", ".", "arange", "(", "76", ",", "127", "+", "17", "*", "use_face_contour", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "+=", "[", "face_mapping", "]", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "mapping", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown model type: {}'", ".", "format", "(", "model_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.rotation_matrix_to_angle_axis": [[4, 24], ["geometry.rotation_matrix_to_quaternion", "geometry.quaternion_to_angle_axis"], "function", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.rotation_matrix_to_quaternion", "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.quaternion_to_angle_axis"], ["def", "rotation_matrix_to_angle_axis", "(", "rotation_matrix", ")", ":", "\n", "    ", "\"\"\"Convert 3x4 rotation matrix to Rodrigues vector\n\n    Args:\n        rotation_matrix (Tensor): rotation matrix.\n\n    Returns:\n        Tensor: Rodrigues vector transformation.\n\n    Shape:\n        - Input: :math:`(N, 3, 4)`\n        - Output: :math:`(N, 3)`\n\n    Example:\n        >>> input = torch.rand(2, 3, 4)  # Nx4x4\n        >>> output = tgm.rotation_matrix_to_angle_axis(input)  # Nx3\n    \"\"\"", "\n", "# todo add check that matrix is a valid rotation matrix", "\n", "quaternion", "=", "rotation_matrix_to_quaternion", "(", "rotation_matrix", ")", "\n", "return", "quaternion_to_angle_axis", "(", "quaternion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.rotation_matrix_to_quaternion": [[26, 104], ["torch.transpose", "torch.stack", "t0.repeat().t", "torch.stack", "t1.repeat().t", "torch.stack", "t2.repeat().t", "torch.stack", "t3.repeat().t", "mask_c0.view().type_as.view().type_as", "mask_c1.view().type_as.view().type_as", "mask_c2.view().type_as.view().type_as", "mask_c3.view().type_as.view().type_as", "torch.sqrt", "torch.is_tensor", "TypeError", "len", "ValueError", "ValueError", "t0.repeat", "t1.repeat", "t2.repeat", "t3.repeat", "mask_c0.view().type_as.view", "mask_c1.view().type_as.view", "mask_c2.view().type_as.view", "mask_c3.view().type_as.view", "type"], "function", ["None"], ["", "def", "rotation_matrix_to_quaternion", "(", "rotation_matrix", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Convert 3x4 rotation matrix to 4d quaternion vector\n\n    This algorithm is based on algorithm described in\n    https://github.com/KieranWynn/pyquaternion/blob/master/pyquaternion/quaternion.py#L201\n\n    Args:\n        rotation_matrix (Tensor): the rotation matrix to convert.\n\n    Return:\n        Tensor: the rotation in quaternion\n\n    Shape:\n        - Input: :math:`(N, 3, 4)`\n        - Output: :math:`(N, 4)`\n\n    Example:\n        >>> input = torch.rand(4, 3, 4)  # Nx3x4\n        >>> output = tgm.rotation_matrix_to_quaternion(input)  # Nx4\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "rotation_matrix", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", ".", "format", "(", "\n", "type", "(", "rotation_matrix", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "rotation_matrix", ".", "shape", ")", ">", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Input size must be a three dimensional tensor. Got {}\"", ".", "format", "(", "\n", "rotation_matrix", ".", "shape", ")", ")", "\n", "", "if", "not", "rotation_matrix", ".", "shape", "[", "-", "2", ":", "]", "==", "(", "3", ",", "4", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Input size must be a N x 3 x 4  tensor. Got {}\"", ".", "format", "(", "\n", "rotation_matrix", ".", "shape", ")", ")", "\n", "\n", "", "rmat_t", "=", "torch", ".", "transpose", "(", "rotation_matrix", ",", "1", ",", "2", ")", "\n", "\n", "mask_d2", "=", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "<", "eps", "\n", "\n", "mask_d0_d1", "=", "rmat_t", "[", ":", ",", "0", ",", "0", "]", ">", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "\n", "mask_d0_nd1", "=", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "<", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "\n", "\n", "t0", "=", "1", "+", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q0", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "\n", "t0", ",", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "0", ",", "2", "]", "]", ",", "-", "1", ")", "\n", "t0_rep", "=", "t0", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t1", "=", "1", "-", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q1", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "t1", ",", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "1", "]", "]", ",", "-", "1", ")", "\n", "t1_rep", "=", "t1", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t2", "=", "1", "-", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q2", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "t2", "]", ",", "-", "1", ")", "\n", "t2_rep", "=", "t2", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t3", "=", "1", "+", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q3", "=", "torch", ".", "stack", "(", "[", "t3", ",", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "0", "]", "]", ",", "-", "1", ")", "\n", "t3_rep", "=", "t3", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "mask_c0", "=", "mask_d2", "*", "mask_d0_d1", "\n", "mask_c1", "=", "mask_d2", "*", "(", "1", "-", "mask_d0_d1", ")", "\n", "mask_c2", "=", "(", "1", "-", "mask_d2", ")", "*", "mask_d0_nd1", "\n", "mask_c3", "=", "(", "1", "-", "mask_d2", ")", "*", "(", "1", "-", "mask_d0_nd1", ")", "\n", "mask_c0", "=", "mask_c0", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q0", ")", "\n", "mask_c1", "=", "mask_c1", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q1", ")", "\n", "mask_c2", "=", "mask_c2", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q2", ")", "\n", "mask_c3", "=", "mask_c3", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q3", ")", "\n", "\n", "q", "=", "q0", "*", "mask_c0", "+", "q1", "*", "mask_c1", "+", "q2", "*", "mask_c2", "+", "q3", "*", "mask_c3", "\n", "q", "/=", "torch", ".", "sqrt", "(", "t0_rep", "*", "mask_c0", "+", "t1_rep", "*", "mask_c1", "+", "# noqa", "\n", "t2_rep", "*", "mask_c2", "+", "t3_rep", "*", "mask_c3", ")", "# noqa", "\n", "q", "*=", "0.5", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.quaternion_to_angle_axis": [[106, 154], ["torch.sqrt", "torch.where", "torch.is_tensor", "TypeError", "ValueError", "torch.where", "torch.ones_like", "torch.zeros_like", "torch.atan2", "torch.atan2", "type"], "function", ["None"], ["", "def", "quaternion_to_angle_axis", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Convert quaternion vector to angle axis of rotation.\n\n    Adapted from ceres C++ library: ceres-solver/include/ceres/rotation.h\n\n    Args:\n        quaternion (torch.Tensor): tensor with quaternions.\n\n    Return:\n        torch.Tensor: tensor with angle axis of rotation.\n\n    Shape:\n        - Input: :math:`(*, 4)` where `*` means, any number of dimensions\n        - Output: :math:`(*, 3)`\n\n    Example:\n        >>> quaternion = torch.rand(2, 4)  # Nx4\n        >>> angle_axis = tgm.quaternion_to_angle_axis(quaternion)  # Nx3\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "quaternion", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", ".", "format", "(", "\n", "type", "(", "quaternion", ")", ")", ")", "\n", "\n", "", "if", "not", "quaternion", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input must be a tensor of shape Nx4 or 4. Got {}\"", "\n", ".", "format", "(", "quaternion", ".", "shape", ")", ")", "\n", "# unpack input and compute conversion", "\n", "", "q1", "=", "quaternion", "[", "...", ",", "1", "]", "\n", "q2", "=", "quaternion", "[", "...", ",", "2", "]", "\n", "q3", "=", "quaternion", "[", "...", ",", "3", "]", "\n", "sin_squared_theta", "=", "q1", "*", "q1", "+", "q2", "*", "q2", "+", "q3", "*", "q3", "\n", "\n", "sin_theta", "=", "torch", ".", "sqrt", "(", "sin_squared_theta", ")", "\n", "cos_theta", "=", "quaternion", "[", "...", ",", "0", "]", "\n", "two_theta", "=", "2.0", "*", "torch", ".", "where", "(", "\n", "cos_theta", "<", "0.0", ",", "\n", "torch", ".", "atan2", "(", "-", "sin_theta", ",", "-", "cos_theta", ")", ",", "\n", "torch", ".", "atan2", "(", "sin_theta", ",", "cos_theta", ")", ")", "\n", "\n", "k_pos", "=", "two_theta", "/", "sin_theta", "\n", "k_neg", "=", "2.0", "*", "torch", ".", "ones_like", "(", "sin_theta", ")", "\n", "k", "=", "torch", ".", "where", "(", "sin_squared_theta", ">", "0.0", ",", "k_pos", ",", "k_neg", ")", "\n", "\n", "angle_axis", "=", "torch", ".", "zeros_like", "(", "quaternion", ")", "[", "...", ",", ":", "3", "]", "\n", "angle_axis", "[", "...", ",", "0", "]", "+=", "q1", "*", "k", "\n", "angle_axis", "[", "...", ",", "1", "]", "+=", "q2", "*", "k", "\n", "angle_axis", "[", "...", ",", "2", "]", "+=", "q3", "*", "k", "\n", "return", "angle_axis", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.quat2mat": [[159, 180], ["quat.size", "torch.stack().view", "norm_quat.norm", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack"], "function", ["None"], ["", "def", "quat2mat", "(", "quat", ")", ":", "\n", "    ", "\"\"\"Convert quaternion coefficients to rotation matrix.\n    Args:\n        quat: size = [B, 4] 4 <===>(w, x, y, z)\n    Returns:\n        Rotation matrix corresponding to the quaternion -- size = [B, 3, 3]\n    \"\"\"", "\n", "norm_quat", "=", "quat", "\n", "norm_quat", "=", "norm_quat", "/", "norm_quat", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "norm_quat", "[", ":", ",", "0", "]", ",", "norm_quat", "[", ":", ",", "1", "]", ",", "norm_quat", "[", ":", ",", "2", "]", ",", "norm_quat", "[", ":", ",", "3", "]", "\n", "\n", "B", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "\n", "2", "*", "wz", "+", "2", "*", "xy", ",", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "\n", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "w2", "-", "x2", "-", "y2", "+", "z2", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "B", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.batch_rodrigues": [[181, 193], ["torch.norm", "torch.unsqueeze", "torch.div", "torch.cos", "torch.sin", "torch.cat", "geometry.quat2mat"], "function", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.quat2mat"], ["", "def", "batch_rodrigues", "(", "theta", ")", ":", "\n", "#theta N x 3", "\n", "    ", "batch_size", "=", "theta", ".", "shape", "[", "0", "]", "\n", "l1norm", "=", "torch", ".", "norm", "(", "theta", "+", "1e-8", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "angle", "=", "torch", ".", "unsqueeze", "(", "l1norm", ",", "-", "1", ")", "\n", "normalized", "=", "torch", ".", "div", "(", "theta", ",", "angle", ")", "\n", "angle", "=", "angle", "*", "0.5", "\n", "v_cos", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "v_sin", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "quat", "=", "torch", ".", "cat", "(", "[", "v_cos", ",", "v_sin", "*", "normalized", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "quat2mat", "(", "quat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.batch_invRodri": [[195, 201], ["torch.zeros", "torch.cat", "geometry.rotation_matrix_to_angle_axis"], "function", ["home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.rotation_matrix_to_angle_axis"], ["", "def", "batch_invRodri", "(", "R", ")", ":", "\n", "    ", "bn", "=", "R", ".", "shape", "[", "0", "]", "\n", "pack", "=", "torch", ".", "zeros", "(", "bn", ",", "3", ",", "1", ",", "device", "=", "R", ".", "device", ")", "\n", "comb", "=", "torch", ".", "cat", "(", "[", "R", ",", "pack", "]", ",", "dim", "=", "2", ")", "\n", "Rvec", "=", "rotation_matrix_to_angle_axis", "(", "comb", ")", "\n", "return", "Rvec", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.projection": [[203, 229], ["torch.transpose", "torch.transpose", "torch.div", "torch.div", "torch.matmul", "torch.matmul", "camera_mat.transpose"], "function", ["None"], ["", "def", "projection", "(", "points3d", ",", "camera_intri", ",", "R", "=", "None", ",", "T", "=", "None", ",", "distance", "=", "None", ")", ":", "\n", "    ", "\"\"\" project the 3d points to camera coordinate\n\n    Arguments:\n        points3d {Tensor} -- (bn, N, 3)\n        camera_intri {Tensor} -- (bn, 3, 3)\n        distance {Tensor} -- (bn, 1, 1)\n    Returns:\n        points2d -- (bn, N, 2)\n    \"\"\"", "\n", "if", "R", "is", "not", "None", ":", "\n", "        ", "Rt", "=", "torch", ".", "transpose", "(", "R", ",", "1", ",", "2", ")", "\n", "points3d", "=", "torch", ".", "matmul", "(", "points3d", ",", "Rt", ")", "+", "T", "\n", "\n", "", "if", "distance", "is", "None", ":", "\n", "        ", "img_points", "=", "torch", ".", "div", "(", "points3d", "[", ":", ",", ":", ",", ":", "2", "]", ",", "\n", "points3d", "[", ":", ",", ":", ",", "2", ":", "3", "]", ")", "\n", "", "else", ":", "\n", "        ", "img_points", "=", "torch", ".", "div", "(", "points3d", "[", ":", ",", ":", ",", ":", "2", "]", ",", "\n", "distance", ")", "\n", "", "camera_mat", "=", "camera_intri", "[", ":", ",", ":", "2", ",", ":", "2", "]", "\n", "center", "=", "torch", ".", "transpose", "(", "camera_intri", "[", ":", ",", ":", "2", ",", "2", ":", "3", "]", ",", "1", ",", "2", ")", "\n", "img_points", "=", "torch", ".", "matmul", "(", "img_points", ",", "camera_mat", ".", "transpose", "(", "1", ",", "2", ")", ")", "+", "center", "\n", "# img_points = torch.einsum('bki,bji->bjk', [camera_mat, img_points]) \\", "\n", "# + center", "\n", "return", "img_points", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.procrustes": [[230, 341], ["X.mean", "Y.mean", "numpy.sqrt", "numpy.sqrt", "numpy.dot", "numpy.linalg.svd", "numpy.dot", "s.sum", "numpy.concatenate", "numpy.linalg.det", "numpy.dot", "numpy.dot", "numpy.zeros", "numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "procrustes", "(", "X", ",", "Y", ",", "scaling", "=", "True", ",", "reflection", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    A port of MATLAB's `procrustes` function to Numpy.\n\n    Procrustes analysis determines a linear transformation (translation,\n    reflection, orthogonal rotation and scaling) of the points in Y to best\n    conform them to the points in matrix X, using the sum of squared errors\n    as the goodness of fit criterion.\n\n        d, Z, [tform] = procrustes(X, Y)\n\n    Inputs:\n    ------------\n    X, Y    \n        matrices of target and input coordinates. they must have equal\n        numbers of  points (rows), but Y may have fewer dimensions\n        (columns) than X.\n\n    scaling \n        if False, the scaling component of the transformation is forced\n        to 1\n\n    reflection\n        if 'best' (default), the transformation solution may or may not\n        include a reflection component, depending on which fits the data\n        best. setting reflection to True or False forces a solution with\n        reflection or no reflection respectively.\n\n    Outputs\n    ------------\n    d       \n        the residual sum of squared errors, normalized according to a\n        measure of the scale of X, ((X - X.mean(0))**2).sum()\n\n    Z\n        the matrix of transformed Y-values\n\n    tform   \n        a dict specifying the rotation, translation and scaling that\n        maps X --> Y\n\n    >> Taken from https://stackoverflow.com/questions/18925181/procrustes-analysis-with-numpy\n    \"\"\"", "\n", "\n", "n", ",", "m", "=", "X", ".", "shape", "\n", "ny", ",", "my", "=", "Y", ".", "shape", "\n", "\n", "muX", "=", "X", ".", "mean", "(", "0", ")", "\n", "muY", "=", "Y", ".", "mean", "(", "0", ")", "\n", "\n", "X0", "=", "X", "-", "muX", "\n", "Y0", "=", "Y", "-", "muY", "\n", "\n", "ssX", "=", "(", "X0", "**", "2.", ")", ".", "sum", "(", ")", "\n", "ssY", "=", "(", "Y0", "**", "2.", ")", ".", "sum", "(", ")", "\n", "\n", "# centred Frobenius norm", "\n", "normX", "=", "np", ".", "sqrt", "(", "ssX", ")", "\n", "normY", "=", "np", ".", "sqrt", "(", "ssY", ")", "\n", "\n", "# scale to equal (unit) norm", "\n", "X0", "/=", "normX", "\n", "Y0", "/=", "normY", "\n", "\n", "if", "my", "<", "m", ":", "\n", "        ", "Y0", "=", "np", ".", "concatenate", "(", "(", "Y0", ",", "np", ".", "zeros", "(", "n", ",", "m", "-", "my", ")", ")", ",", "0", ")", "\n", "\n", "# optimum rotation matrix of Y", "\n", "", "A", "=", "np", ".", "dot", "(", "X0", ".", "T", ",", "Y0", ")", "\n", "U", ",", "s", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "A", ",", "full_matrices", "=", "False", ")", "\n", "V", "=", "Vt", ".", "T", "\n", "T", "=", "np", ".", "dot", "(", "V", ",", "U", ".", "T", ")", "\n", "\n", "if", "reflection", "is", "not", "'best'", ":", "\n", "\n", "# does the current solution use a reflection?", "\n", "        ", "have_reflection", "=", "np", ".", "linalg", ".", "det", "(", "T", ")", "<", "0", "\n", "\n", "# if that's not what was specified, force another reflection", "\n", "if", "reflection", "!=", "have_reflection", ":", "\n", "            ", "V", "[", ":", ",", "-", "1", "]", "*=", "-", "1", "\n", "s", "[", "-", "1", "]", "*=", "-", "1", "\n", "T", "=", "np", ".", "dot", "(", "V", ",", "U", ".", "T", ")", "\n", "\n", "", "", "traceTA", "=", "s", ".", "sum", "(", ")", "\n", "\n", "if", "scaling", ":", "\n", "\n", "# optimum scaling of Y", "\n", "        ", "b", "=", "traceTA", "*", "normX", "/", "normY", "\n", "\n", "# standarised distance between X and b*Y*T + c", "\n", "d", "=", "1", "-", "traceTA", "**", "2", "\n", "\n", "# transformed coords", "\n", "Z", "=", "normX", "*", "traceTA", "*", "np", ".", "dot", "(", "Y0", ",", "T", ")", "+", "muX", "\n", "\n", "", "else", ":", "\n", "        ", "b", "=", "1", "\n", "d", "=", "1", "+", "ssY", "/", "ssX", "-", "2", "*", "traceTA", "*", "normY", "/", "normX", "\n", "Z", "=", "normY", "*", "np", ".", "dot", "(", "Y0", ",", "T", ")", "+", "muX", "\n", "\n", "# transformation matrix", "\n", "", "if", "my", "<", "m", ":", "\n", "        ", "T", "=", "T", "[", ":", "my", ",", ":", "]", "\n", "", "c", "=", "muX", "-", "b", "*", "np", ".", "dot", "(", "muY", ",", "T", ")", "\n", "\n", "#transformation values ", "\n", "tform", "=", "{", "'rotation'", ":", "T", ",", "'scale'", ":", "b", ",", "'translation'", ":", "c", "}", "\n", "\n", "return", "d", ",", "Z", ",", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.zju3dv_iMoCap.smplmodel.geometry.best_fit_transform": [[342, 384], ["numpy.mean", "numpy.mean", "numpy.dot", "numpy.linalg.svd", "numpy.dot", "numpy.identity", "numpy.linalg.det", "numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "best_fit_transform", "(", "A", ",", "B", ")", ":", "\n", "    ", "'''\n    Calculates the least-squares best-fit transform that maps corresponding points A to B in m spatial dimensions\n    Input:\n      A: Nxm numpy array of corresponding points\n      B: Nxm numpy array of corresponding points\n    Returns:\n      T: (m+1)x(m+1) homogeneous transformation matrix that maps A on to B\n      R: mxm rotation matrix\n      t: mx1 translation vector\n    '''", "\n", "\n", "assert", "A", ".", "shape", "==", "B", ".", "shape", "\n", "\n", "# get number of dimensions", "\n", "m", "=", "A", ".", "shape", "[", "1", "]", "\n", "\n", "# translate points to their centroids", "\n", "centroid_A", "=", "np", ".", "mean", "(", "A", ",", "axis", "=", "0", ")", "\n", "centroid_B", "=", "np", ".", "mean", "(", "B", ",", "axis", "=", "0", ")", "\n", "AA", "=", "A", "-", "centroid_A", "\n", "BB", "=", "B", "-", "centroid_B", "\n", "\n", "# rotation matrix", "\n", "H", "=", "np", ".", "dot", "(", "AA", ".", "T", ",", "BB", ")", "\n", "U", ",", "S", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "H", ")", "\n", "R", "=", "np", ".", "dot", "(", "Vt", ".", "T", ",", "U", ".", "T", ")", "\n", "\n", "# special reflection case", "\n", "if", "np", ".", "linalg", ".", "det", "(", "R", ")", "<", "0", ":", "\n", "       ", "Vt", "[", "m", "-", "1", ",", ":", "]", "*=", "-", "1", "\n", "R", "=", "np", ".", "dot", "(", "Vt", ".", "T", ",", "U", ".", "T", ")", "\n", "\n", "# translation", "\n", "", "t", "=", "centroid_B", ".", "T", "-", "np", ".", "dot", "(", "R", ",", "centroid_A", ".", "T", ")", "\n", "\n", "# homogeneous transformation", "\n", "T", "=", "np", ".", "identity", "(", "m", "+", "1", ")", "\n", "T", "[", ":", "m", ",", ":", "m", "]", "=", "R", "\n", "T", "[", ":", "m", ",", "m", "]", "=", "t", "\n", "\n", "return", "T", ",", "R", ",", "t", "", "", ""]]}