{"home.repos.pwc.inspect_result.yuhangzang_FASA.None.train.parse_args": [[23, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.yuhangzang_FASA.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work-dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume-from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether not to evaluate the checkpoint during training'", ")", "\n", "group_gpus", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpu-ids'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ids of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file (deprecate), '", "\n", "'change to --cfg-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "if", "args", ".", "options", "and", "args", ".", "cfg_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --cfg-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --cfg-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --cfg-options'", ")", "\n", "args", ".", "cfg_options", "=", "args", ".", "options", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.None.train.main": [[88, 187], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmdet.utils.get_root_logger", "dict", "mmdet.utils.collect_env", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "os.basename", "mmdet.models.build_detector", "mmdet.models.build_detector.init_weights", "fasa.train_detector", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "os.abspath", "os.join", "time.localtime", "mmdet.utils.get_root_logger.info", "mmdet.apis.set_random_seed", "mmdet.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "Config.fromfile.get", "Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.utils.collect_env.items", "os.splitext", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.yuhangzang_FASA.None.test.parse_args", "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.apis.train_detector", "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.apis.set_random_seed"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "if", "args", ".", "gpu_ids", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "args", ".", "gpu_ids", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "range", "(", "1", ")", "if", "args", ".", "gpus", "is", "None", "else", "range", "(", "args", ".", "gpus", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "# re-set gpu_ids with distributed training mode", "\n", "_", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "cfg", ".", "gpu_ids", "=", "range", "(", "world_size", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "f'{k}: {v}'", ")", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "meta", "[", "'config'", "]", "=", "cfg", ".", "pretty_text", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Set random seed to {args.seed}, '", "\n", "f'deterministic: {args.deterministic}'", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "meta", "[", "'exp_name'", "]", "=", "osp", ".", "basename", "(", "args", ".", "config", ")", "\n", "\n", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "\n", "train_cfg", "=", "cfg", ".", "get", "(", "'train_cfg'", ")", ",", "\n", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "if", "len", "(", "cfg", ".", "workflow", ")", "==", "2", ":", "\n", "        ", "val_dataset", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "val", ")", "\n", "val_dataset", ".", "pipeline", "=", "cfg", ".", "data", ".", "train", ".", "pipeline", "\n", "datasets", ".", "append", "(", "build_dataset", "(", "val_dataset", ")", ")", "\n", "", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save mmdet version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "mmdet_version", "=", "__version__", "+", "get_git_hash", "(", ")", "[", ":", "7", "]", ",", "\n", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "model", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "train_detector", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "(", "not", "args", ".", "no_validate", ")", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.None.test.parse_args": [[23, 106], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.yuhangzang_FASA.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'MMDet test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work-dir'", ",", "\n", "help", "=", "'the directory to save the file containing evaluation metrics'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file in pickle format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fuse-conv-bn'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to fuse conv and bn, this will slightly increase'", "\n", "'the inference speed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--format-only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Format the output results without perform evaluation. It is'", "\n", "'useful when you want to format the result to a specific format and '", "\n", "'submit it to the test server'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g., \"bbox\",'", "\n", "' \"segm\", \"proposal\" for COCO, and \"mAP\", \"recall\" for PASCAL VOC'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-score-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.3", ",", "\n", "help", "=", "'score threshold (default: 0.3)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpu-collect'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use gpu to collect results.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tmpdir'", ",", "\n", "help", "=", "'tmp directory used for collecting results from multiple '", "\n", "'workers, available when gpu-collect is not specified'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function (deprecate), '", "\n", "'change to --eval-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "if", "args", ".", "options", "and", "args", ".", "eval_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --eval-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --eval-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --eval-options'", ")", "\n", "args", ".", "eval_options", "=", "args", ".", "options", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.None.test.main": [[108, 236], ["test.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "Config.fromfile.model.get", "isinstance", "mmcv.runner.get_dist_info", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "isinstance", "Config.fromfile.data.test.pop", "isinstance", "mmcv.runner.init_dist", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "mmcv.runner.wrap_fp16_model", "mmcv.cnn.fuse_conv_bn", "mmcv.runner.load_checkpoint.get", "mmcv.parallel.MMDataParallel", "mmdet.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmdet.apis.multi_gpu_test", "parse_args.out.endswith", "Config.fromfile.model.neck.get", "mmdet.datasets.replace_ImageToTensor", "max", "os.abspath", "time.localtime", "Config.fromfile.get", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmdet.datasets.build_dataset.format_results", "Config.fromfile.get().copy", "cfg.get().copy.update", "mmdet.datasets.build_dataset.evaluate", "print", "dict", "neck_cfg.get", "Config.fromfile.model.neck.rfp_backbone.get", "cfg.get().copy.pop", "dict", "mmcv.dump", "neck_cfg.rfp_backbone.get", "ds_cfg.pop", "mmdet.datasets.replace_ImageToTensor", "torch.cuda.current_device", "Config.fromfile.get"], "function", ["home.repos.pwc.inspect_result.yuhangzang_FASA.None.test.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "eval", "or", "args", ".", "format_only", "or", "args", ".", "show", "or", "args", ".", "show_dir", ",", "(", "'Please specify at least one operation (save/eval/format/show the '", "\n", "'results / save the results) with the argument \"--out\", \"--eval\"'", "\n", "', \"--format-only\", \"--show\" or \"--show-dir\"'", ")", "\n", "\n", "if", "args", ".", "eval", "and", "args", ".", "format_only", ":", "\n", "        ", "raise", "ValueError", "(", "'--eval and --format_only cannot be both specified'", ")", "\n", "\n", "", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "if", "cfg", ".", "model", ".", "get", "(", "'neck'", ")", ":", "\n", "        ", "if", "isinstance", "(", "cfg", ".", "model", ".", "neck", ",", "list", ")", ":", "\n", "            ", "for", "neck_cfg", "in", "cfg", ".", "model", ".", "neck", ":", "\n", "                ", "if", "neck_cfg", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "                    ", "if", "neck_cfg", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                        ", "neck_cfg", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "", "", "", "", "elif", "cfg", ".", "model", ".", "neck", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "            ", "if", "cfg", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                ", "cfg", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "\n", "# in case the test dataset is concatenated", "\n", "", "", "", "samples_per_gpu", "=", "1", "\n", "if", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "dict", ")", ":", "\n", "        ", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "samples_per_gpu", "=", "cfg", ".", "data", ".", "test", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "# Replace 'ImageToTensor' to 'DefaultFormatBundle'", "\n", "            ", "cfg", ".", "data", ".", "test", ".", "pipeline", "=", "replace_ImageToTensor", "(", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", ")", "\n", "", "", "elif", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "list", ")", ":", "\n", "        ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "            ", "ds_cfg", ".", "test_mode", "=", "True", "\n", "", "samples_per_gpu", "=", "max", "(", "\n", "[", "ds_cfg", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", "]", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "            ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "                ", "ds_cfg", ".", "pipeline", "=", "replace_ImageToTensor", "(", "ds_cfg", ".", "pipeline", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "# allows not to create", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "args", ".", "work_dir", ")", ")", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "json_file", "=", "osp", ".", "join", "(", "args", ".", "work_dir", ",", "f'eval_{timestamp}.json'", ")", "\n", "\n", "# build the dataloader", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "args", ".", "fuse_conv_bn", ":", "\n", "        ", "model", "=", "fuse_conv_bn", "(", "model", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ",", "args", ".", "show_dir", ",", "\n", "args", ".", "show_score_thr", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ",", "\n", "args", ".", "gpu_collect", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "args", ".", "out", ":", "\n", "            ", "print", "(", "f'\\nwriting results to {args.out}'", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "", "kwargs", "=", "{", "}", "if", "args", ".", "eval_options", "is", "None", "else", "args", ".", "eval_options", "\n", "if", "args", ".", "format_only", ":", "\n", "            ", "dataset", ".", "format_results", "(", "outputs", ",", "**", "kwargs", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "            ", "eval_kwargs", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", ".", "copy", "(", ")", "\n", "# hard-code way to remove EvalHook args", "\n", "for", "key", "in", "[", "\n", "'interval'", ",", "'tmpdir'", ",", "'start'", ",", "'gpu_collect'", ",", "'save_best'", ",", "\n", "'rule'", "\n", "]", ":", "\n", "                ", "eval_kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "", "eval_kwargs", ".", "update", "(", "dict", "(", "metric", "=", "args", ".", "eval", ",", "**", "kwargs", ")", ")", "\n", "metric", "=", "dataset", ".", "evaluate", "(", "outputs", ",", "**", "eval_kwargs", ")", "\n", "print", "(", "metric", ")", "\n", "metric_dict", "=", "dict", "(", "config", "=", "args", ".", "config", ",", "metric", "=", "metric", ")", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "                ", "mmcv", ".", "dump", "(", "metric_dict", ",", "json_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.apis.set_random_seed": [[19, 36], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_random_seed", "(", "seed", ",", "deterministic", "=", "False", ")", ":", "\n", "    ", "\"\"\"Set random seed.\n\n    Args:\n        seed (int): Seed to be used.\n        deterministic (bool): Whether to set the deterministic option for\n            CUDNN backend, i.e., set `torch.backends.cudnn.deterministic`\n            to True and `torch.backends.cudnn.benchmark` to False.\n            Default: False.\n    \"\"\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "if", "deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.apis.train_detector": [[38, 173], ["mmdet.utils.get_root_logger", "mmcv.runner.build_optimizer", "mmcv.runner.build_runner", "cfg.get", "mmcv.runner.build_runner.register_training_hooks", "cfg.get", "mmcv.runner.build_runner.run", "isinstance", "mmdet.utils.get_root_logger.warning", "mmdet.datasets.build_dataloader", "cfg.get", "mmcv.parallel.MMDistributedDataParallel", "mmcv.parallel.MMDataParallel", "warnings.warn", "mmcv.runner.Fp16OptimizerHook", "cfg.get", "cfg.data.val.pop", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "cfg.get", "mmcv.runner.build_runner.register_hook", "isinstance", "mmcv.runner.build_runner.resume", "mmdet.utils.get_root_logger.warning", "mmdet.utils.get_root_logger.warning", "len", "mmcv.parallel.MMDataParallel.cuda", "mmcv.parallel.MMDataParallel.cuda", "dict", "mmcv.runner.OptimizerHook", "isinstance", "isinstance", "mmcv.runner.build_runner.register_hook", "mmdet.datasets.replace_ImageToTensor", "dict", "eval_hook", "isinstance", "hook_cfg.copy.copy", "hook_cfg.copy.pop", "mmcv.utils.build_from_cfg", "mmcv.runner.build_runner.register_hook", "mmcv.runner.build_runner.load_checkpoint", "mmcv.runner.DistSamplerSeedHook", "type", "torch.cuda.current_device", "type"], "function", ["None"], ["", "", "def", "train_detector", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "logger", "=", "get_root_logger", "(", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# prepare data loaders", "\n", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "if", "'imgs_per_gpu'", "in", "cfg", ".", "data", ":", "\n", "        ", "logger", ".", "warning", "(", "'\"imgs_per_gpu\" is deprecated in MMDet V2.0. '", "\n", "'Please use \"samples_per_gpu\" instead'", ")", "\n", "if", "'samples_per_gpu'", "in", "cfg", ".", "data", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "f'Got \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} and '", "\n", "f'\"samples_per_gpu\"={cfg.data.samples_per_gpu}, \"imgs_per_gpu\"'", "\n", "f'={cfg.data.imgs_per_gpu} is used in this experiments'", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "'Automatically set \"samples_per_gpu\"=\"imgs_per_gpu\"='", "\n", "f'{cfg.data.imgs_per_gpu} in this experiments'", ")", "\n", "", "cfg", ".", "data", ".", "samples_per_gpu", "=", "cfg", ".", "data", ".", "imgs_per_gpu", "\n", "\n", "", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# cfg.gpus will be ignored if distributed", "\n", "len", "(", "cfg", ".", "gpu_ids", ")", ",", "\n", "dist", "=", "distributed", ",", "\n", "seed", "=", "cfg", ".", "seed", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "\n", "# put model on gpus", "\n", "if", "distributed", ":", "\n", "        ", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "# Sets the `find_unused_parameters` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu_ids", "[", "0", "]", ")", ",", "device_ids", "=", "cfg", ".", "gpu_ids", ")", "\n", "\n", "# build runner", "\n", "", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "\n", "if", "'runner'", "not", "in", "cfg", ":", "\n", "        ", "cfg", ".", "runner", "=", "{", "\n", "'type'", ":", "'EpochBasedRunner'", ",", "\n", "'max_epochs'", ":", "cfg", ".", "total_epochs", "\n", "}", "\n", "warnings", ".", "warn", "(", "\n", "'config is now expected to have a `runner` section, '", "\n", "'please set `runner` in your config.'", ",", "UserWarning", ")", "\n", "", "else", ":", "\n", "        ", "if", "'total_epochs'", "in", "cfg", ":", "\n", "            ", "assert", "cfg", ".", "total_epochs", "==", "cfg", ".", "runner", ".", "max_epochs", "\n", "\n", "", "", "runner", "=", "build_runner", "(", "\n", "cfg", ".", "runner", ",", "\n", "default_args", "=", "dict", "(", "\n", "model", "=", "model", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", ")", "\n", "\n", "# an ugly workaround to make .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "\n", "# fp16 setting", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "optimizer_config", "=", "Fp16OptimizerHook", "(", "\n", "**", "cfg", ".", "optimizer_config", ",", "**", "fp16_cfg", ",", "distributed", "=", "distributed", ")", "\n", "", "elif", "distributed", "and", "'type'", "not", "in", "cfg", ".", "optimizer_config", ":", "\n", "        ", "optimizer_config", "=", "OptimizerHook", "(", "**", "cfg", ".", "optimizer_config", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_config", "=", "cfg", ".", "optimizer_config", "\n", "\n", "# register hooks", "\n", "", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ",", "\n", "cfg", ".", "get", "(", "'momentum_config'", ",", "None", ")", ")", "\n", "if", "distributed", ":", "\n", "        ", "if", "isinstance", "(", "runner", ",", "EpochBasedRunner", ")", "or", "isinstance", "(", "runner", ",", "EpochBasedDynamicRunner", ")", ":", "\n", "            ", "runner", ".", "register_hook", "(", "DistSamplerSeedHook", "(", ")", ")", "\n", "\n", "# register eval hooks", "\n", "", "", "if", "validate", ":", "\n", "# Support batch_size > 1 in validation", "\n", "        ", "val_samples_per_gpu", "=", "cfg", ".", "data", ".", "val", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "\n", "if", "val_samples_per_gpu", ">", "1", ":", "\n", "# Replace 'ImageToTensor' to 'DefaultFormatBundle'", "\n", "            ", "cfg", ".", "data", ".", "val", ".", "pipeline", "=", "replace_ImageToTensor", "(", "\n", "cfg", ".", "data", ".", "val", ".", "pipeline", ")", "\n", "", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "samples_per_gpu", "=", "val_samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "eval_cfg", "[", "'by_epoch'", "]", "=", "cfg", ".", "runner", "[", "'type'", "]", "!=", "'IterBasedRunner'", "\n", "eval_hook", "=", "DistEvalHook", "if", "distributed", "else", "EvalHook", "\n", "runner", ".", "register_hook", "(", "eval_hook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ")", "\n", "\n", "# user-defined hooks", "\n", "", "if", "cfg", ".", "get", "(", "'custom_hooks'", ",", "None", ")", ":", "\n", "        ", "custom_hooks", "=", "cfg", ".", "custom_hooks", "\n", "assert", "isinstance", "(", "custom_hooks", ",", "list", ")", ",", "f'custom_hooks expect list type, but got {type(custom_hooks)}'", "\n", "for", "hook_cfg", "in", "cfg", ".", "custom_hooks", ":", "\n", "            ", "assert", "isinstance", "(", "hook_cfg", ",", "dict", ")", ",", "'Each item in custom_hooks expects dict type, but got '", "f'{type(hook_cfg)}'", "\n", "hook_cfg", "=", "hook_cfg", ".", "copy", "(", ")", "\n", "priority", "=", "hook_cfg", ".", "pop", "(", "'priority'", ",", "'NORMAL'", ")", "\n", "hook", "=", "build_from_cfg", "(", "hook_cfg", ",", "HOOKS", ")", "\n", "runner", ".", "register_hook", "(", "hook", ",", "priority", "=", "priority", ")", "\n", "\n", "", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_roi_head.StandardFASARoIHead._bbox_forward": [[9, 32], ["fasa_roi_head.StandardFASARoIHead.bbox_roi_extractor", "fasa_roi_head.StandardFASARoIHead.shared_head", "fasa_roi_head.StandardFASARoIHead.bbox_head", "dict", "fasa_roi_head.StandardFASARoIHead.bbox_head", "dict"], "methods", ["None"], ["    ", "def", "_bbox_forward", "(", "self", ",", "x", ",", "rois", ")", ":", "\n", "        ", "\"\"\"Box head forward function used in both training and testing.\"\"\"", "\n", "# TODO: a more flexible way to decide which feature maps to use", "\n", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "cls_score", ",", "bbox_pred", ",", "embedding", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "\n", "bbox_results", "=", "dict", "(", "\n", "cls_score", "=", "cls_score", ",", "\n", "bbox_pred", "=", "bbox_pred", ",", "\n", "bbox_feats", "=", "bbox_feats", ",", "\n", "embedding", "=", "embedding", ")", "\n", "", "else", ":", "\n", "            ", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "\n", "bbox_results", "=", "dict", "(", "\n", "cls_score", "=", "cls_score", ",", "bbox_pred", "=", "bbox_pred", ",", "\n", "bbox_feats", "=", "bbox_feats", ")", "\n", "", "return", "bbox_results", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_roi_head.StandardFASARoIHead._bbox_forward_train": [[33, 53], ["mmdet.core.bbox2roi", "fasa_roi_head.StandardFASARoIHead._bbox_forward", "fasa_roi_head.StandardFASARoIHead.bbox_head.get_targets", "fasa_roi_head.StandardFASARoIHead.get", "fasa_roi_head.StandardFASARoIHead.bbox_head.loss", "fasa_roi_head.StandardFASARoIHead.update"], "methods", ["home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_roi_head.StandardFASARoIHead._bbox_forward", "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.loss"], ["", "def", "_bbox_forward_train", "(", "self", ",", "x", ",", "sampling_results", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ")", ":", "\n", "        ", "\"\"\"Run forward function and calculate loss for box head in training.\"\"\"", "\n", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "bbox_results", "=", "self", ".", "_bbox_forward", "(", "x", ",", "rois", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "bbox_head", ".", "get_targets", "(", "sampling_results", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "self", ".", "train_cfg", ")", "\n", "\n", "embedding", "=", "bbox_results", ".", "get", "(", "'embedding'", ",", "None", ")", "\n", "\n", "loss_bbox", "=", "self", ".", "bbox_head", ".", "loss", "(", "\n", "bbox_results", "[", "'cls_score'", "]", ",", "\n", "bbox_results", "[", "'bbox_pred'", "]", ",", "\n", "rois", ",", "\n", "*", "bbox_targets", ",", "\n", "embedding", "=", "embedding", ")", "\n", "\n", "bbox_results", ".", "update", "(", "loss_bbox", "=", "loss_bbox", ")", "\n", "return", "bbox_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.__init__": [[18, 74], ["mmdet.models.roi_heads.bbox_heads.ConvFCBBoxHead.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "fasa_cfg.get", "fasa_cfg.get", "fasa_cfg.get", "fasa_cfg.get", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "lvis_instances.LVIS_INSTANCES.items", "fasa_cfg.get", "fasa_cfg.get", "instance_prob.clamp.clamp.clamp", "torch.Parameter", "torch.Parameter", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "mmcv.runner.get_dist_info", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "int", "instance_prob.clamp.clamp.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.cross_entropy_loss.CrossEntropyCounterLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_shared_convs", "=", "0", ",", "\n", "num_shared_fcs", "=", "0", ",", "\n", "num_cls_convs", "=", "0", ",", "\n", "num_cls_fcs", "=", "0", ",", "\n", "num_reg_convs", "=", "0", ",", "\n", "num_reg_fcs", "=", "0", ",", "\n", "conv_out_channels", "=", "256", ",", "\n", "fc_out_channels", "=", "1024", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "init_cfg", "=", "None", ",", "\n", "fasa_cfg", "=", "None", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvFCFASABBoxHead", ",", "\n", "self", ")", ".", "__init__", "(", "num_shared_convs", ",", "num_shared_fcs", ",", "num_cls_convs", ",", "\n", "num_cls_fcs", ",", "num_reg_convs", ",", "num_reg_fcs", ",", "\n", "conv_out_channels", ",", "fc_out_channels", ",", "conv_cfg", ",", "\n", "norm_cfg", ",", "init_cfg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "feature_mean", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "self", ".", "num_classes", ",", "self", ".", "cls_last_dim", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "self", ".", "feature_std", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "self", ".", "num_classes", ",", "self", ".", "cls_last_dim", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "self", ".", "feature_used", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "self", ".", "num_classes", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "decay_ratio", "=", "fasa_cfg", ".", "get", "(", "'decay_ratio'", ",", "0.1", ")", "\n", "self", ".", "loss_aug_weight", "=", "fasa_cfg", ".", "get", "(", "'loss_aug_weight'", ",", "0.1", ")", "\n", "self", ".", "dynamic_up", "=", "fasa_cfg", ".", "get", "(", "'dynamic_up'", ",", "1.1", ")", "\n", "self", ".", "dynamic_down", "=", "fasa_cfg", ".", "get", "(", "'dynamic_down'", ",", "0.9", ")", "\n", "\n", "self", ".", "instance_count_list", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "LVIS_INSTANCES", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "instance_count_list", "[", "int", "(", "k", ")", "]", "=", "int", "(", "v", ")", "\n", "", "instance_prob_power", "=", "fasa_cfg", ".", "get", "(", "'instance_prob_power'", ",", "1", ")", "\n", "instance_prob_scale", "=", "fasa_cfg", ".", "get", "(", "'instance_prob_scale'", ",", "1", ")", "\n", "instance_prob", "=", "1", "/", "self", ".", "instance_count_list", "\n", "instance_prob", "=", "instance_prob_scale", "*", "torch", ".", "pow", "(", "\n", "instance_prob", "/", "instance_prob", ".", "sum", "(", ")", ",", "instance_prob_power", ")", "\n", "instance_prob", "=", "instance_prob", ".", "clamp", "(", "0", ",", "1", ")", "\n", "self", ".", "prob_list", "=", "nn", ".", "Parameter", "(", "instance_prob", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# Cum Loss", "\n", "self", ".", "cum_loss_perclass_t0", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "self", ".", "num_classes", "+", "1", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "self", ".", "cum_loss_perclass_t1", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "self", ".", "num_classes", "+", "1", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "tf_writer", "=", "None", "\n", "self", ".", "epoch", "=", "0", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.forward": [[75, 117], ["fasa_bbox_head.ConvFCFASABBoxHead.flatten", "conv", "fasa_bbox_head.ConvFCFASABBoxHead.dim", "fasa_bbox_head.ConvFCFASABBoxHead.flatten", "fasa_bbox_head.ConvFCFASABBoxHead.relu", "conv", "fasa_bbox_head.ConvFCFASABBoxHead.dim", "fasa_bbox_head.ConvFCFASABBoxHead.flatten", "fasa_bbox_head.ConvFCFASABBoxHead.relu", "fasa_bbox_head.ConvFCFASABBoxHead.fc_cls", "fasa_bbox_head.ConvFCFASABBoxHead.fc_reg", "conv", "fasa_bbox_head.ConvFCFASABBoxHead.avg_pool", "fasa_bbox_head.ConvFCFASABBoxHead.relu", "fasa_bbox_head.ConvFCFASABBoxHead.avg_pool", "fc", "fasa_bbox_head.ConvFCFASABBoxHead.avg_pool", "fc", "fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# shared part", "\n", "        ", "if", "self", ".", "num_shared_convs", ">", "0", ":", "\n", "            ", "for", "conv", "in", "self", ".", "shared_convs", ":", "\n", "                ", "x", "=", "conv", "(", "x", ")", "\n", "\n", "", "", "if", "self", ".", "num_shared_fcs", ">", "0", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "\n", "for", "fc", "in", "self", ".", "shared_fcs", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "fc", "(", "x", ")", ")", "\n", "# separate branches", "\n", "", "", "x_cls", "=", "x", "\n", "x_reg", "=", "x", "\n", "\n", "for", "conv", "in", "self", ".", "cls_convs", ":", "\n", "            ", "x_cls", "=", "conv", "(", "x_cls", ")", "\n", "", "if", "x_cls", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x_cls", "=", "self", ".", "avg_pool", "(", "x_cls", ")", "\n", "", "x_cls", "=", "x_cls", ".", "flatten", "(", "1", ")", "\n", "", "for", "fc", "in", "self", ".", "cls_fcs", ":", "\n", "            ", "x_cls", "=", "self", ".", "relu", "(", "fc", "(", "x_cls", ")", ")", "\n", "\n", "", "for", "conv", "in", "self", ".", "reg_convs", ":", "\n", "            ", "x_reg", "=", "conv", "(", "x_reg", ")", "\n", "", "if", "x_reg", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x_reg", "=", "self", ".", "avg_pool", "(", "x_reg", ")", "\n", "", "x_reg", "=", "x_reg", ".", "flatten", "(", "1", ")", "\n", "", "for", "fc", "in", "self", ".", "reg_fcs", ":", "\n", "            ", "x_reg", "=", "self", ".", "relu", "(", "fc", "(", "x_reg", ")", ")", "\n", "\n", "", "cls_score", "=", "self", ".", "fc_cls", "(", "x_cls", ")", "if", "self", ".", "with_cls", "else", "None", "\n", "bbox_pred", "=", "self", ".", "fc_reg", "(", "x_reg", ")", "if", "self", ".", "with_reg", "else", "None", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "cls_score", ",", "bbox_pred", ",", "x_cls", "\n", "", "else", ":", "\n", "            ", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.fa_update": [[118, 130], ["len", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "int", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "fasa_bbox_head.ConvFCFASABBoxHead.fa_update_push", "embedding_temp.detach", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.fa_update_push"], ["", "", "def", "fa_update", "(", "self", ",", "embedding", ",", "labels", ")", ":", "\n", "        ", "if", "len", "(", "labels", ")", ">", "0", ":", "\n", "            ", "uniq_c", "=", "torch", ".", "unique", "(", "labels", ")", "\n", "for", "c", "in", "uniq_c", ":", "\n", "                ", "c", "=", "int", "(", "c", ")", "\n", "select_index", "=", "torch", ".", "nonzero", "(", "\n", "labels", "==", "c", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "embedding_temp", "=", "embedding", "[", "select_index", "]", "\n", "\n", "self", ".", "fa_update_push", "(", "embedding_temp", ".", "detach", "(", ")", ",", "c", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.fa_update_push": [[131, 149], ["embedding.mean", "embedding.var", "embedding.numel", "embedding.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad"], "methods", ["None"], ["", "def", "fa_update_push", "(", "self", ",", "embedding", ",", "labels", ")", ":", "\n", "        ", "mean", "=", "embedding", ".", "mean", "(", "dim", "=", "0", ")", "\n", "var", "=", "embedding", ".", "var", "(", "dim", "=", "0", ",", "unbiased", "=", "False", ")", "\n", "n", "=", "embedding", ".", "numel", "(", ")", "/", "embedding", ".", "size", "(", "1", ")", "\n", "if", "n", ">", "1", ":", "\n", "            ", "var", "=", "var", "*", "n", "/", "(", "n", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "var", "=", "var", "\n", "", "if", "self", ".", "feature_used", "[", "labels", "]", ">", "0", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "feature_mean", "[", "labels", "]", "=", "self", ".", "decay_ratio", "*", "mean", "+", "(", "\n", "1", "-", "self", ".", "decay_ratio", ")", "*", "self", ".", "feature_mean", "[", "labels", "]", "\n", "self", ".", "feature_std", "[", "labels", "]", "=", "self", ".", "decay_ratio", "*", "var", "+", "(", "\n", "1", "-", "self", ".", "decay_ratio", ")", "*", "self", ".", "feature_std", "[", "labels", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "feature_mean", "[", "labels", "]", "=", "mean", "\n", "self", ".", "feature_std", "[", "labels", "]", "=", "var", "\n", "self", ".", "feature_used", "[", "labels", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.fa_generate": [[150, 172], ["torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "int", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat.append", "torch.cat.append", "torch.tensor.append", "torch.tensor.append", "new_sample.unsqueeze", "torch.normal().cuda", "torch.normal().cuda", "torch.normal().cuda", "torch.normal().cuda", "torch.normal", "torch.normal", "torch.normal", "torch.normal"], "methods", ["None"], ["", "", "def", "fa_generate", "(", "self", ")", ":", "\n", "        ", "rand", "=", "torch", ".", "rand", "(", "self", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "uniq_c", "=", "torch", ".", "where", "(", "rand", "<", "self", ".", "prob_list", ")", "[", "0", "]", "\n", "embedding_list", ",", "label_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "if", "len", "(", "uniq_c", ")", ">", "0", ":", "\n", "            ", "for", "c", "in", "uniq_c", ":", "\n", "                ", "c", "=", "int", "(", "c", ")", "\n", "if", "self", ".", "feature_used", "[", "c", "]", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "std", "=", "torch", ".", "sqrt", "(", "self", ".", "feature_std", "[", "c", "]", ")", "\n", "new_sample", "=", "self", ".", "feature_mean", "[", "c", "]", "+", "std", "*", "torch", ".", "normal", "(", "\n", "0", ",", "1", ",", "size", "=", "std", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "embedding_list", ".", "append", "(", "new_sample", ".", "unsqueeze", "(", "0", ")", ")", "\n", "label_list", ".", "append", "(", "c", ")", "\n", "\n", "", "", "if", "len", "(", "embedding_list", ")", "!=", "0", ":", "\n", "            ", "embedding_list", "=", "torch", ".", "cat", "(", "embedding_list", ",", "0", ")", "\n", "label_list", "=", "torch", ".", "tensor", "(", "label_list", ",", "device", "=", "embedding_list", ".", "device", ")", "\n", "return", "embedding_list", ",", "label_list", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.dynamic_sampling": [[173, 216], ["mmdet.core.utils.reduce_mean", "mmdet.core.utils.reduce_mean", "mmdet.core.utils.reduce_mean.sum", "torch.Parameter", "torch.Parameter", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "sklearn.cluster.AffinityPropagation().fit", "max", "range", "range", "fasa_bbox_head.ConvFCFASABBoxHead.cum_loss_perclass_t0.sum", "fasa_bbox_head.ConvFCFASABBoxHead.group_cluster_list.append", "len", "fasa_bbox_head.ConvFCFASABBoxHead.cum_loss_perclass_t0[].sum", "fasa_bbox_head.ConvFCFASABBoxHead.cum_loss_perclass_t1[].sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "sklearn.cluster.AffinityPropagation", "feature_mean.square", "feature_mean.square", "enumerate"], "methods", ["None"], ["", "", "def", "dynamic_sampling", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "\n", "\n", "", "cum_labels", "=", "reduce_mean", "(", "self", ".", "loss_cls", ".", "cum_labels", ")", "\n", "cum_losses", "=", "reduce_mean", "(", "self", ".", "loss_cls", ".", "cum_losses", ")", "\n", "sum_loss", "=", "cum_labels", ".", "sum", "(", ")", "\n", "self", ".", "cum_loss_perclass_t1", "=", "nn", ".", "Parameter", "(", "\n", "cum_losses", "/", "sum_loss", ",", "requires_grad", "=", "False", ")", "\n", "\n", "if", "self", ".", "cum_loss_perclass_t0", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "self", ".", "cum_loss_perclass_t0", "[", ":", "]", "=", "self", ".", "cum_loss_perclass_t1", "[", ":", "]", "\n", "\n", "# update group_list", "\n", "", "feature_mean", "=", "self", ".", "feature_mean", "\n", "mean_xy", "=", "torch", ".", "matmul", "(", "feature_mean", ",", "feature_mean", ".", "T", ")", "\n", "mean_x2", "=", "torch", ".", "sum", "(", "feature_mean", ".", "square", "(", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mean_y2", "=", "torch", ".", "sum", "(", "feature_mean", ".", "square", "(", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "distance", "=", "(", "mean_x2", "-", "2", "*", "mean_xy", "+", "mean_y2", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "clustering", "=", "AffinityPropagation", "(", "random_state", "=", "1", ",", "affinity", "=", "'precomputed'", ")", ".", "fit", "(", "distance", ")", "# noqa", "\n", "n_clustering", "=", "max", "(", "clustering", ".", "labels_", ")", "\n", "self", ".", "group_cluster_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_clustering", "+", "1", ")", ":", "\n", "            ", "temp", "=", "[", "ind", "for", "ind", ",", "v", "in", "enumerate", "(", "clustering", ".", "labels_", ")", "if", "v", "==", "i", "]", "\n", "self", ".", "group_cluster_list", ".", "append", "(", "temp", ")", "\n", "\n", "# update prob_list", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "group_cluster_list", ")", ")", ":", "\n", "            ", "select_group", "=", "self", ".", "group_cluster_list", "[", "i", "]", "\n", "loss_t0", "=", "self", ".", "cum_loss_perclass_t0", "[", "select_group", "]", ".", "sum", "(", ")", "\n", "loss_t1", "=", "self", ".", "cum_loss_perclass_t1", "[", "select_group", "]", ".", "sum", "(", ")", "\n", "delta_value", "=", "loss_t1", "-", "loss_t0", "\n", "if", "delta_value", ">", "0", ":", "\n", "                ", "self", ".", "prob_list", "[", "select_group", "]", "=", "(", "self", ".", "prob_list", "[", "select_group", "]", "*", "\n", "self", ".", "dynamic_down", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "", "if", "delta_value", "<", "0", ":", "\n", "                ", "self", ".", "prob_list", "[", "select_group", "]", "=", "(", "self", ".", "prob_list", "[", "select_group", "]", "*", "\n", "self", ".", "dynamic_up", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "# update loss", "\n", "", "", "self", ".", "cum_loss_perclass_t0", "[", ":", "]", "=", "self", ".", "cum_loss_perclass_t1", "[", ":", "]", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.loss": [[217, 301], ["mmcv.runner.force_fp32", "dict", "pos_inds.any", "max", "fasa_bbox_head.ConvFCFASABBoxHead.fa_generate", "fasa_bbox_head.ConvFCFASABBoxHead.loss_bbox", "bbox_pred[].sum", "len", "fasa_bbox_head.ConvFCFASABBoxHead.fa_update", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "cls_score.numel", "fasa_bbox_head.ConvFCFASABBoxHead.loss_cls", "isinstance", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "max", "fasa_bbox_head.ConvFCFASABBoxHead.loss_cls", "fasa_bbox_head.ConvFCFASABBoxHead.bbox_coder.decode", "dict.update", "fasa_bbox_head.ConvFCFASABBoxHead.loss_cls.get_accuracy", "dict.update", "mmdet.models.losses.accuracy", "fasa_bbox_head.ConvFCFASABBoxHead.fc_cls", "len", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "fasa_bbox_head.ConvFCFASABBoxHead.view", "fasa_bbox_head.ConvFCFASABBoxHead.view", "bbox_targets.size", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "fasa_bbox_head.ConvFCFASABBoxHead.size", "pos_inds.type", "fasa_bbox_head.ConvFCFASABBoxHead.size", "pos_inds.type", "pos_inds.type", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pos_inds.type", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pos_inds.type"], "methods", ["home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.fa_generate", "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.fa_update"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_score'", ",", "'bbox_pred'", ")", ")", "\n", "def", "loss", "(", "self", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "rois", ",", "\n", "labels", ",", "\n", "label_weights", ",", "\n", "bbox_targets", ",", "\n", "bbox_weights", ",", "\n", "reduction_override", "=", "None", ",", "\n", "embedding", "=", "None", ")", ":", "\n", "        ", "losses", "=", "dict", "(", ")", "\n", "if", "bbox_pred", "is", "not", "None", ":", "\n", "            ", "bg_class_ind", "=", "self", ".", "num_classes", "\n", "# 0~self.num_classes-1 are FG, self.num_classes is BG", "\n", "pos_inds", "=", "(", "labels", ">=", "0", ")", "&", "(", "labels", "<", "bg_class_ind", ")", "\n", "# do not perform bounding box regression for BG anymore.", "\n", "if", "pos_inds", ".", "any", "(", ")", ":", "\n", "                ", "if", "self", ".", "reg_decoded_bbox", ":", "\n", "# When the regression loss (e.g. `IouLoss`,", "\n", "# `GIouLoss`, `DIouLoss`) is applied directly on", "\n", "# the decoded bounding boxes, it decodes the", "\n", "# already encoded coordinates to absolute format.", "\n", "                    ", "bbox_pred", "=", "self", ".", "bbox_coder", ".", "decode", "(", "rois", "[", ":", ",", "1", ":", "]", ",", "bbox_pred", ")", "\n", "", "if", "self", ".", "reg_class_agnostic", ":", "\n", "                    ", "pos_bbox_pred", "=", "bbox_pred", ".", "view", "(", "\n", "bbox_pred", ".", "size", "(", "0", ")", ",", "4", ")", "[", "pos_inds", ".", "type", "(", "torch", ".", "bool", ")", "]", "\n", "", "else", ":", "\n", "                    ", "pos_bbox_pred", "=", "bbox_pred", ".", "view", "(", "\n", "bbox_pred", ".", "size", "(", "0", ")", ",", "-", "1", ",", "\n", "4", ")", "[", "pos_inds", ".", "type", "(", "torch", ".", "bool", ")", ",", "\n", "labels", "[", "pos_inds", ".", "type", "(", "torch", ".", "bool", ")", "]", "]", "\n", "", "losses", "[", "'loss_bbox'", "]", "=", "self", ".", "loss_bbox", "(", "\n", "pos_bbox_pred", ",", "\n", "bbox_targets", "[", "pos_inds", ".", "type", "(", "torch", ".", "bool", ")", "]", ",", "\n", "bbox_weights", "[", "pos_inds", ".", "type", "(", "torch", ".", "bool", ")", "]", ",", "\n", "avg_factor", "=", "bbox_targets", ".", "size", "(", "0", ")", ",", "\n", "reduction_override", "=", "reduction_override", ")", "\n", "", "else", ":", "\n", "                ", "losses", "[", "'loss_bbox'", "]", "=", "bbox_pred", "[", "pos_inds", "]", ".", "sum", "(", ")", "\n", "\n", "", "", "if", "self", ".", "training", ":", "\n", "            ", "pos_embedding", "=", "embedding", "[", "pos_inds", "]", "\n", "pos_label", "=", "labels", "[", "pos_inds", "]", "\n", "if", "len", "(", "pos_embedding", ")", ">", "0", ":", "\n", "                ", "self", ".", "fa_update", "(", "pos_embedding", ",", "pos_label", ")", "\n", "\n", "", "", "if", "cls_score", "is", "not", "None", ":", "\n", "            ", "avg_factor", "=", "max", "(", "torch", ".", "sum", "(", "label_weights", ">", "0", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "1.", ")", "\n", "if", "cls_score", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "loss_cls_", "=", "self", ".", "loss_cls", "(", "\n", "cls_score", ",", "\n", "labels", ",", "\n", "label_weights", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "reduction_override", "=", "reduction_override", ")", "\n", "if", "isinstance", "(", "loss_cls_", ",", "dict", ")", ":", "\n", "                    ", "losses", ".", "update", "(", "loss_cls_", ")", "\n", "", "else", ":", "\n", "                    ", "losses", "[", "'loss_cls'", "]", "=", "loss_cls_", "\n", "", "if", "self", ".", "custom_activation", ":", "\n", "                    ", "acc_", "=", "self", ".", "loss_cls", ".", "get_accuracy", "(", "cls_score", ",", "labels", ")", "\n", "losses", ".", "update", "(", "acc_", ")", "\n", "", "else", ":", "\n", "                    ", "losses", "[", "'acc'", "]", "=", "accuracy", "(", "cls_score", ",", "labels", ")", "\n", "\n", "", "", "", "if", "(", "self", ".", "epoch", ">=", "1", ")", "and", "self", ".", "training", ":", "\n", "            ", "aug_embedding", ",", "aug_labels", "=", "self", ".", "fa_generate", "(", ")", "\n", "if", "len", "(", "aug_embedding", ")", ">", "0", ":", "\n", "                ", "aug_cls_score", "=", "self", ".", "fc_cls", "(", "\n", "aug_embedding", ")", "if", "self", ".", "with_cls", "else", "None", "\n", "aug_label_weights", "=", "torch", ".", "ones", "(", "\n", "len", "(", "aug_labels", ")", ",", "device", "=", "aug_embedding", ".", "device", ")", "\n", "aug_label_weights", "=", "aug_label_weights", "*", "self", ".", "loss_aug_weight", "\n", "aug_avg_factor", "=", "max", "(", "\n", "torch", ".", "sum", "(", "aug_label_weights", ">", "0", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "1.", ")", "\n", "loss_cls_aug", "=", "self", ".", "loss_cls", "(", "\n", "aug_cls_score", ",", "\n", "aug_labels", ",", "\n", "aug_label_weights", ",", "\n", "avg_factor", "=", "aug_avg_factor", ",", "\n", "reduction_override", "=", "reduction_override", ")", "\n", "losses", "[", "'loss_cls'", "]", "+=", "loss_cls_aug", "\n", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.Shared2FCFASABBoxHead.__init__": [[306, 317], ["fasa_bbox_head.ConvFCFASABBoxHead.__init__"], "methods", ["home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.cross_entropy_loss.CrossEntropyCounterLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fc_out_channels", "=", "1024", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Shared2FCFASABBoxHead", ",", "self", ")", ".", "__init__", "(", "\n", "num_shared_convs", "=", "0", ",", "\n", "num_shared_fcs", "=", "2", ",", "\n", "num_cls_convs", "=", "0", ",", "\n", "num_cls_fcs", "=", "0", ",", "\n", "num_reg_convs", "=", "0", ",", "\n", "num_reg_fcs", "=", "0", ",", "\n", "fc_out_channels", "=", "fc_out_channels", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.epoch_based_dynamic_runner.EpochBasedDynamicRunner.train": [[15, 46], ["epoch_based_dynamic_runner.EpochBasedDynamicRunner.model.train", "epoch_based_dynamic_runner.EpochBasedDynamicRunner.call_hook", "hasattr", "hasattr", "time.sleep", "enumerate", "epoch_based_dynamic_runner.EpochBasedDynamicRunner.call_hook", "len", "hasattr", "epoch_based_dynamic_runner.EpochBasedDynamicRunner.call_hook", "epoch_based_dynamic_runner.EpochBasedDynamicRunner.run_iter", "epoch_based_dynamic_runner.EpochBasedDynamicRunner.call_hook", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.epoch_based_dynamic_runner.EpochBasedDynamicRunner.train"], ["def", "train", "(", "self", ",", "data_loader", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "_max_iters", "=", "self", ".", "_max_epochs", "*", "len", "(", "self", ".", "data_loader", ")", "\n", "self", ".", "call_hook", "(", "'before_train_epoch'", ")", "\n", "\n", "# -- begin: add for adaptive sampling", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'module'", ")", ":", "\n", "            ", "bbox_head", "=", "self", ".", "model", ".", "module", ".", "roi_head", ".", "bbox_head", "\n", "", "else", ":", "\n", "            ", "bbox_head", "=", "self", ".", "model", ".", "roi_head", ".", "bbox_head", "\n", "\n", "", "if", "hasattr", "(", "bbox_head", ",", "'epoch'", ")", ":", "\n", "            ", "bbox_head", ".", "epoch", "=", "self", ".", "_epoch", "\n", "", "if", "(", "self", ".", "rank", "==", "0", ")", "and", "hasattr", "(", "bbox_head", ",", "'tf_writer'", ")", ":", "\n", "            ", "for", "hook", "in", "self", ".", "hooks", ":", "\n", "                ", "if", "isinstance", "(", "hook", ",", "TensorboardLoggerHook", ")", ":", "\n", "                    ", "bbox_head", ".", "tf_writer", "=", "hook", ".", "writer", "\n", "# -- end", "\n", "\n", "", "", "", "time", ".", "sleep", "(", "2", ")", "# Prevent possible deadlock during epoch transition", "\n", "for", "i", ",", "data_batch", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "            ", "self", ".", "_inner_iter", "=", "i", "\n", "self", ".", "call_hook", "(", "'before_train_iter'", ")", "\n", "self", ".", "run_iter", "(", "data_batch", ",", "train_mode", "=", "True", ",", "**", "kwargs", ")", "\n", "self", ".", "call_hook", "(", "'after_train_iter'", ")", "\n", "self", ".", "_iter", "+=", "1", "\n", "\n", "", "self", ".", "call_hook", "(", "'after_train_epoch'", ")", "\n", "self", ".", "_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.epoch_based_dynamic_runner.EpochBasedDynamicRunner.val": [[47, 75], ["torch.no_grad", "epoch_based_dynamic_runner.EpochBasedDynamicRunner.model.eval", "epoch_based_dynamic_runner.EpochBasedDynamicRunner.call_hook", "time.sleep", "hasattr", "bbox_head.loss_cls.open_cums", "enumerate", "bbox_head.dynamic_sampling", "bbox_head.loss_cls.close_cums", "epoch_based_dynamic_runner.EpochBasedDynamicRunner.call_hook", "epoch_based_dynamic_runner.EpochBasedDynamicRunner.call_hook", "epoch_based_dynamic_runner.EpochBasedDynamicRunner.run_iter", "epoch_based_dynamic_runner.EpochBasedDynamicRunner.call_hook"], "methods", ["home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.cross_entropy_loss.CrossEntropyCounterLoss.open_cums", "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.fasa_bbox_head.ConvFCFASABBoxHead.dynamic_sampling", "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.cross_entropy_loss.CrossEntropyCounterLoss.close_cums"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "val", "(", "self", ",", "data_loader", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "mode", "=", "'val'", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "call_hook", "(", "'before_val_epoch'", ")", "\n", "time", ".", "sleep", "(", "2", ")", "# Prevent possible deadlock during epoch transition", "\n", "\n", "# -- begin: add for adaptive sampling", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'module'", ")", ":", "\n", "            ", "bbox_head", "=", "self", ".", "model", ".", "module", ".", "roi_head", ".", "bbox_head", "\n", "", "else", ":", "\n", "            ", "bbox_head", "=", "self", ".", "model", ".", "roi_head", ".", "bbox_head", "\n", "", "bbox_head", ".", "loss_cls", ".", "open_cums", "(", ")", "\n", "# -- end", "\n", "\n", "for", "i", ",", "data_batch", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "            ", "self", ".", "_inner_iter", "=", "i", "\n", "self", ".", "call_hook", "(", "'before_val_iter'", ")", "\n", "self", ".", "run_iter", "(", "data_batch", ",", "train_mode", "=", "False", ")", "\n", "self", ".", "call_hook", "(", "'after_val_iter'", ")", "\n", "\n", "# -- begin: add for adaptive sampling", "\n", "", "bbox_head", ".", "dynamic_sampling", "(", ")", "\n", "bbox_head", ".", "loss_cls", ".", "close_cums", "(", ")", "\n", "# -- end", "\n", "\n", "self", ".", "call_hook", "(", "'after_val_epoch'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.cross_entropy_loss.CrossEntropyCounterLoss.__init__": [[12, 41], ["torch.Module.__init__", "cross_entropy_loss.CrossEntropyCounterLoss.open_cums"], "methods", ["home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.cross_entropy_loss.CrossEntropyCounterLoss.__init__", "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.cross_entropy_loss.CrossEntropyCounterLoss.open_cums"], ["    ", "def", "__init__", "(", "self", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "use_mask", "=", "False", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "class_weight", "=", "None", ",", "\n", "loss_weight", "=", "1.0", ",", "\n", "use_cums", "=", "False", ",", "\n", "num_classes", "=", "1203", ")", ":", "\n", "        ", "\"\"\"CrossEntropyCounterLoss.\n        \"\"\"", "\n", "super", "(", "CrossEntropyCounterLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "use_sigmoid", "is", "False", ")", "or", "(", "use_mask", "is", "False", ")", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "self", ".", "use_mask", "=", "use_mask", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "binary_cross_entropy", "\n", "", "elif", "self", ".", "use_mask", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "mask_cross_entropy", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "cross_entropy", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "use_cums", "=", "use_cums", "\n", "if", "self", ".", "use_cums", ":", "\n", "            ", "self", ".", "open_cums", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.cross_entropy_loss.CrossEntropyCounterLoss.open_cums": [[42, 48], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "def", "open_cums", "(", "self", ")", ":", "\n", "        ", "self", ".", "use_cums", "=", "True", "\n", "self", ".", "reduction_old", "=", "self", ".", "reduction", "\n", "self", ".", "reduction", "=", "'none'", "\n", "self", ".", "cum_losses", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", "+", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "cum_labels", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", "+", "1", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.cross_entropy_loss.CrossEntropyCounterLoss.close_cums": [[49, 54], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "close_cums", "(", "self", ")", ":", "\n", "        ", "self", ".", "use_cums", "=", "False", "\n", "self", ".", "reduction", "=", "self", ".", "reduction_old", "\n", "self", ".", "cum_losses", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", "+", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "cum_labels", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", "+", "1", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuhangzang_FASA.fasa.cross_entropy_loss.CrossEntropyCounterLoss.forward": [[55, 101], ["cls_score.new_tensor", "cross_entropy_loss.CrossEntropyCounterLoss.cls_criterion", "label.unique", "loss_cls.mean.mean.mean", "len", "loss_cls[].sum", "torch.where", "torch.where", "torch.where", "torch.where", "int", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Forward function.\n\n        Args:\n            cls_score (torch.Tensor): The prediction.\n            label (torch.Tensor): The learning label of the prediction.\n            weight (torch.Tensor, optional): Sample-wise loss weight.\n            avg_factor (int, optional): Average factor that is used to average\n                the loss. Defaults to None.\n            reduction (str, optional): The method used to reduce the loss.\n                Options are \"none\", \"mean\" and \"sum\".\n        Returns:\n            torch.Tensor: The calculated loss\n        \"\"\"", "\n", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "if", "self", ".", "class_weight", "is", "not", "None", ":", "\n", "            ", "class_weight", "=", "cls_score", ".", "new_tensor", "(", "\n", "self", ".", "class_weight", ",", "device", "=", "cls_score", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "class_weight", "=", "None", "\n", "", "loss_cls", "=", "self", ".", "loss_weight", "*", "self", ".", "cls_criterion", "(", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", ",", "\n", "class_weight", "=", "class_weight", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "use_cums", ":", "\n", "            ", "unique_labels", "=", "label", ".", "unique", "(", ")", "\n", "for", "u_l", "in", "unique_labels", ":", "\n", "                ", "inds_", "=", "torch", ".", "where", "(", "label", "==", "u_l", ")", "[", "0", "]", "\n", "self", ".", "cum_labels", "[", "int", "(", "u_l", ")", "]", "+=", "len", "(", "inds_", ")", "\n", "self", ".", "cum_losses", "[", "int", "(", "u_l", ")", "]", "+=", "loss_cls", "[", "inds_", "]", ".", "sum", "(", ")", "\n", "", "loss_cls", "=", "loss_cls", ".", "mean", "(", ")", "\n", "\n", "", "return", "loss_cls", "\n", "", "", ""]]}