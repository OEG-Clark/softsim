{"home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetModelnet40.__init__": [[24, 31], ["dataset.DatasetModelnet40.get_samples", "dataset.DatasetModelnet40.get_transforms", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.get_samples", "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.get_transforms"], ["def", "__init__", "(", "self", ",", "split", ",", "noise_type", ")", ":", "\n", "        ", "dataset_path", "=", "cfg", ".", "M40_PATH", "\n", "categories", "=", "np", ".", "arange", "(", "20", ")", "if", "split", "in", "[", "\"train\"", ",", "\"val\"", "]", "else", "np", ".", "arange", "(", "20", ",", "40", ")", "\n", "split", "=", "\"test\"", "if", "split", "==", "\"val\"", "else", "split", "# ModelNet40 has no validation set - use cat 0-19 with test set", "\n", "\n", "self", ".", "samples", ",", "self", ".", "labels", "=", "self", ".", "get_samples", "(", "dataset_path", ",", "split", ",", "categories", ")", "\n", "self", ".", "transforms", "=", "self", ".", "get_transforms", "(", "split", ",", "noise_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetModelnet40.__len__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "samples", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetModelnet40.__getitem__": [[35, 41], ["numpy.array", "dataset.DatasetModelnet40.transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "sample", "=", "{", "'points'", ":", "self", ".", "samples", "[", "item", ",", ":", ",", ":", "]", ",", "'label'", ":", "self", ".", "labels", "[", "item", "]", ",", "'idx'", ":", "np", ".", "array", "(", "item", ",", "dtype", "=", "np", ".", "int32", ")", "}", "\n", "\n", "if", "self", ".", "transforms", ":", "\n", "            ", "sample", "=", "self", ".", "transforms", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetModelnet40.get_transforms": [[42, 78], ["torchvision.transforms.Compose", "ValueError", "dataset.Resampler", "dataset.SplitSourceRef", "dataset.Scale", "dataset.Shear", "dataset.Mirror", "dataset.RandomTransformSE3_euler", "dataset.ShufflePoints", "dataset.SetDeterministic", "dataset.FixedResampler", "dataset.SplitSourceRef", "dataset.RandomTransformSE3_euler", "dataset.ShufflePoints", "dataset.SplitSourceRef", "dataset.Scale", "dataset.Shear", "dataset.Mirror", "dataset.RandomTransformSE3_euler", "dataset.Resampler", "dataset.RandomJitter", "dataset.ShufflePoints", "dataset.SetDeterministic", "dataset.SplitSourceRef", "dataset.RandomTransformSE3_euler", "dataset.Resampler", "dataset.RandomJitter", "dataset.ShufflePoints"], "methods", ["None"], ["", "def", "get_transforms", "(", "self", ",", "split", ",", "noise_type", ")", ":", "\n", "# prepare augmentations", "\n", "        ", "if", "noise_type", "==", "\"clean\"", ":", "\n", "# 1-1 correspondence for each point (resample first before splitting), no noise", "\n", "            ", "if", "split", "==", "\"train\"", ":", "\n", "                ", "transforms", "=", "[", "Transforms", ".", "Resampler", "(", "1024", ")", ",", "\n", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "Scale", "(", ")", ",", "Transforms", ".", "Shear", "(", ")", ",", "Transforms", ".", "Mirror", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "transforms", "=", "[", "Transforms", ".", "SetDeterministic", "(", ")", ",", "\n", "Transforms", ".", "FixedResampler", "(", "1024", ")", ",", "\n", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", "]", "\n", "", "", "elif", "noise_type", "==", "\"jitter\"", ":", "\n", "# Points randomly sampled (might not have perfect correspondence), gaussian noise to position", "\n", "            ", "if", "split", "==", "\"train\"", ":", "\n", "                ", "transforms", "=", "[", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "Scale", "(", ")", ",", "Transforms", ".", "Shear", "(", ")", ",", "Transforms", ".", "Mirror", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", ")", ",", "\n", "Transforms", ".", "Resampler", "(", "1024", ")", ",", "\n", "Transforms", ".", "RandomJitter", "(", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "transforms", "=", "[", "Transforms", ".", "SetDeterministic", "(", ")", ",", "\n", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", ")", ",", "\n", "Transforms", ".", "Resampler", "(", "1024", ")", ",", "\n", "Transforms", ".", "RandomJitter", "(", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Noise type {noise_type} not supported for ModelNet40.\"", ")", "\n", "\n", "", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetModelnet40.get_samples": [[79, 100], ["enumerate", "numpy.concatenate", "numpy.concatenate", "os.path.join", "h5py.File", "numpy.concatenate", "[].flatten().astype", "numpy.concatenate.append", "numpy.concatenate.append", "open", "numpy.isin().flatten", "file.strip().split", "os.path.join", "[].flatten", "numpy.isin", "file.strip"], "methods", ["None"], ["", "def", "get_samples", "(", "self", ",", "dataset_path", ",", "split", ",", "categories", ")", ":", "\n", "        ", "filelist", "=", "[", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "file", ".", "strip", "(", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "for", "file", "in", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "f'{split}_files.txt'", ")", ")", "]", "\n", "\n", "all_data", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "for", "fi", ",", "fname", "in", "enumerate", "(", "filelist", ")", ":", "\n", "            ", "f", "=", "h5py", ".", "File", "(", "fname", ",", "mode", "=", "'r'", ")", "\n", "data", "=", "np", ".", "concatenate", "(", "[", "f", "[", "'data'", "]", "[", ":", "]", ",", "f", "[", "'normal'", "]", "[", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "labels", "=", "f", "[", "'label'", "]", "[", ":", "]", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "if", "categories", "is", "not", "None", ":", "# Filter out unwanted categories", "\n", "                ", "mask", "=", "np", ".", "isin", "(", "labels", ",", "categories", ")", ".", "flatten", "(", ")", "\n", "data", "=", "data", "[", "mask", ",", "...", "]", "\n", "labels", "=", "labels", "[", "mask", ",", "...", "]", "\n", "\n", "", "all_data", ".", "append", "(", "data", ")", "\n", "all_labels", ".", "append", "(", "labels", ")", "\n", "", "all_data", "=", "np", ".", "concatenate", "(", "all_data", ",", "axis", "=", "0", ")", "\n", "all_labels", "=", "np", ".", "concatenate", "(", "all_labels", ",", "axis", "=", "0", ")", "\n", "return", "all_data", ",", "all_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetScanObjectNN.__init__": [[104, 110], ["dataset.DatasetScanObjectNN.get_samples", "dataset.DatasetScanObjectNN.get_transforms"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.get_samples", "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.get_transforms"], ["    ", "def", "__init__", "(", "self", ",", "split", ",", "noise_type", ")", ":", "\n", "        ", "dataset_path", "=", "cfg", ".", "SON_PATH", "\n", "split", "=", "\"test\"", "if", "split", "==", "\"val\"", "else", "split", "\n", "\n", "self", ".", "samples", ",", "self", ".", "labels", "=", "self", ".", "get_samples", "(", "dataset_path", ",", "split", ")", "\n", "self", ".", "transforms", "=", "self", ".", "get_transforms", "(", "split", ",", "noise_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetScanObjectNN.__len__": [[111, 113], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "samples", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetScanObjectNN.__getitem__": [[114, 120], ["numpy.array", "dataset.DatasetScanObjectNN.transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "sample", "=", "{", "'points'", ":", "self", ".", "samples", "[", "item", ",", ":", ",", ":", "]", ",", "'label'", ":", "self", ".", "labels", "[", "item", "]", ",", "'idx'", ":", "np", ".", "array", "(", "item", ",", "dtype", "=", "np", ".", "int32", ")", "}", "\n", "\n", "if", "self", ".", "transforms", ":", "\n", "            ", "sample", "=", "self", ".", "transforms", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetScanObjectNN.get_transforms": [[121, 133], ["torchvision.transforms.Compose", "ValueError", "dataset.SetDeterministic", "dataset.SplitSourceRef", "dataset.RandomTransformSE3_euler", "dataset.Resampler", "dataset.ShufflePoints"], "methods", ["None"], ["", "def", "get_transforms", "(", "self", ",", "split", ",", "noise_type", ")", ":", "\n", "# prepare augmentations", "\n", "        ", "if", "noise_type", "==", "\"sensor\"", "and", "split", "==", "\"test\"", ":", "\n", "            ", "transforms", "=", "[", "Transforms", ".", "SetDeterministic", "(", ")", ",", "\n", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", ")", ",", "\n", "Transforms", ".", "Resampler", "(", "2048", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Only noise type 'sensor' supported for SceneObjectNN.\"", ")", "\n", "\n", "", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetScanObjectNN.get_samples": [[134, 149], ["enumerate", "numpy.concatenate", "numpy.concatenate", "os.path.join", "h5py.File", "[].astype", "[].flatten().astype", "numpy.concatenate.append", "numpy.concatenate.append", "[].flatten"], "methods", ["None"], ["", "def", "get_samples", "(", "self", ",", "dataset_path", ",", "split", ")", ":", "\n", "        ", "filelist", "=", "[", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"test_objectdataset.h5\"", ")", "]", "\n", "\n", "all_data", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "for", "fi", ",", "fname", "in", "enumerate", "(", "filelist", ")", ":", "\n", "            ", "f", "=", "h5py", ".", "File", "(", "fname", ",", "mode", "=", "'r'", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "labels", "=", "f", "[", "'label'", "]", "[", ":", "]", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "all_data", ".", "append", "(", "data", ")", "\n", "all_labels", ".", "append", "(", "labels", ")", "\n", "", "all_data", "=", "np", ".", "concatenate", "(", "all_data", ",", "axis", "=", "0", ")", "\n", "all_labels", "=", "np", ".", "concatenate", "(", "all_labels", ",", "axis", "=", "0", ")", "\n", "return", "all_data", ",", "all_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.__init__": [[153, 158], ["dataset.DatasetLinemod.get_samples", "dataset.DatasetLinemod.get_transforms"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.get_samples", "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.get_transforms"], ["    ", "def", "__init__", "(", "self", ",", "split", ",", "noise_type", ")", ":", "\n", "        ", "subsample", "=", "16", "if", "split", "==", "\"eval\"", "else", "0", "# only use every 16th test sample for evaluation during training", "\n", "split", "=", "\"test\"", "if", "split", "==", "\"eval\"", "else", "split", "\n", "self", ".", "samples", ",", "self", ".", "models", "=", "self", ".", "get_samples", "(", "split", ",", "subsample", ")", "\n", "self", ".", "transforms", "=", "self", ".", "get_transforms", "(", "split", ",", "noise_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.__len__": [[159, 161], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.__getitem__": [[162, 182], ["dataset.DatasetLinemod.transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "item", "=", "self", ".", "samples", "[", "idx", "]", "\n", "model", "=", "self", ".", "models", "[", "item", "[", "'obj_id'", "]", "]", "\n", "\n", "# compose sample", "\n", "sample", "=", "{", "\n", "'idx'", ":", "idx", ",", "\n", "'points_src'", ":", "item", "[", "'pcd'", "]", ",", "\n", "'points_ref'", ":", "model", ",", "\n", "'scene'", ":", "item", "[", "'scene'", "]", ",", "\n", "'frame'", ":", "item", "[", "'frame'", "]", ",", "\n", "'cam'", ":", "item", "[", "'cam'", "]", ",", "\n", "'gt'", ":", "item", "[", "'gt'", "]", ",", "\n", "}", "\n", "if", "'est'", "in", "item", ":", "# initial estimate only given for test split (using PoseCNN)", "\n", "            ", "sample", "[", "'est'", "]", "=", "item", "[", "'est'", "]", "\n", "\n", "", "if", "self", ".", "transforms", ":", "\n", "            ", "sample", "=", "self", ".", "transforms", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.get_transforms": [[183, 217], ["torchvision.transforms.Compose", "ValueError", "dataset.SegmentResampler", "dataset.GtTransformSE3", "dataset.Normalize", "dataset.RandomTransformSE3", "dataset.SetDeterministic", "dataset.SegmentResampler", "dataset.GtTransformSE3", "dataset.Normalize", "dataset.RandomTransformSE3", "dataset.SetDeterministic", "dataset.SegmentResampler", "dataset.EstTransformSE3", "dataset.Normalize"], "methods", ["None"], ["", "def", "get_transforms", "(", "self", ",", "split", ",", "noise_type", ")", ":", "\n", "# prepare augmentations", "\n", "        ", "if", "noise_type", "==", "\"segmentation\"", ":", "\n", "            ", "if", "split", "==", "\"train\"", ":", "\n", "                ", "transforms", "=", "[", "\n", "# resample segmentation (with [p_fg]% from object)", "\n", "Transforms", ".", "SegmentResampler", "(", "1024", ",", "p_fg", "=", "[", "0.5", ",", "1.0", "]", ")", ",", "\n", "# align source and target using GT -- easier to define error this way", "\n", "Transforms", ".", "GtTransformSE3", "(", ")", ",", "\n", "# normalize source and target (mean centered, max dist 1.0)", "\n", "Transforms", ".", "Normalize", "(", ")", ",", "\n", "# apply an initial pose error", "\n", "Transforms", ".", "RandomTransformSE3", "(", "rot_mag", "=", "90.0", ",", "trans_mag", "=", "1.0", ",", "random_mag", "=", "True", ")", "\n", "]", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "                ", "transforms", "=", "[", "\n", "Transforms", ".", "SetDeterministic", "(", ")", ",", "\n", "Transforms", ".", "SegmentResampler", "(", "1024", ",", "p_fg", "=", "[", "0.5", ",", "1.0", "]", ")", ",", "\n", "Transforms", ".", "GtTransformSE3", "(", ")", ",", "\n", "Transforms", ".", "Normalize", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3", "(", "rot_mag", "=", "90.0", ",", "trans_mag", "=", "1.0", ",", "random_mag", "=", "True", ")", "\n", "]", "\n", "", "else", ":", "# start from posecnn", "\n", "                ", "transforms", "=", "[", "\n", "Transforms", ".", "SetDeterministic", "(", ")", ",", "\n", "# randomly resample inside segmentation mask (estimated by PoseCNN)", "\n", "Transforms", ".", "SegmentResampler", "(", "1024", ",", "p_fg", "=", "1.0", ",", "patch", "=", "False", ")", ",", "\n", "# initial (erroneous) alignment using PoseCNN's pose estimation", "\n", "Transforms", ".", "EstTransformSE3", "(", ")", ",", "\n", "Transforms", ".", "Normalize", "(", ")", "\n", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Noise type {noise_type} not supported for LINEMOD.\"", ")", "\n", "", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.get_samples": [[218, 235], ["bop_toolkit_lib.get_model_params", "bop_toolkit_lib.get_model_params", "bop_toolkit_lib.get_model_params", "dict", "trimesh.load", "trimesh.sample.sample_surface_even", "numpy.hstack().astype", "open", "pickle.load", "config.LM_PATH.split", "os.path.join", "os.path.join", "config.LM_PATH.split", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model.load", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.load"], ["", "def", "get_samples", "(", "self", ",", "split", ",", "subsample", "=", "0", ")", ":", "\n", "        ", "model_params", "=", "bop_dataset_params", ".", "get_model_params", "(", "'/'", ".", "join", "(", "cfg", ".", "LM_PATH", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "\n", "cfg", ".", "LM_PATH", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "'eval'", ")", "\n", "mesh_ids", "=", "model_params", "[", "'obj_ids'", "]", "\n", "\n", "models", "=", "dict", "(", ")", "\n", "for", "mesh_id", "in", "mesh_ids", ":", "\n", "            ", "mesh", "=", "trimesh", ".", "load", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "LM_PATH", ",", "f\"models_eval/obj_{mesh_id:06d}.ply\"", ")", ")", "\n", "pcd", ",", "face_indices", "=", "trimesh", ".", "sample", ".", "sample_surface_even", "(", "mesh", ",", "4096", ")", "\n", "models", "[", "mesh_id", "]", "=", "np", ".", "hstack", "(", "[", "pcd", ",", "mesh", ".", "face_normals", "[", "face_indices", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "samples_path", "=", "f\"reagent/{split}_posecnn.pkl\"", "if", "split", "==", "\"test\"", "else", "f\"reagent/{split}.pkl\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "LM_PATH", ",", "samples_path", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "samples", "=", "pickle", ".", "load", "(", "file", ")", "\n", "", "if", "subsample", ">", "0", ":", "# used for evaluation during training", "\n", "            ", "samples", "=", "samples", "[", ":", ":", "subsample", "]", "\n", "", "return", "samples", ",", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.get_rgb": [[237, 246], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "print", "numpy.zeros", "bop_toolkit_lib.load_im", "bop_toolkit_lib.load_im", "bop_toolkit_lib.load_im"], "methods", ["None"], ["", "def", "get_rgb", "(", "self", ",", "scene_id", ",", "im_id", ")", ":", "\n", "        ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "LM_PATH", ",", "\"test\"", ")", "\n", "scene_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "f\"{scene_id:06d}\"", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "scene_path", ",", "f\"rgb/{im_id:06d}.png\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "return", "bop_inout", ".", "load_im", "(", "file_path", ")", "[", "...", ",", ":", "3", "]", "/", "255", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"missing file: {file_path}\"", ")", "\n", "return", "np", ".", "zeros", "(", "(", "480", ",", "640", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.get_depth": [[247, 256], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "bop_toolkit_lib.load_depth", "bop_toolkit_lib.load_depth", "bop_toolkit_lib.load_depth", "print", "numpy.zeros"], "methods", ["None"], ["", "", "def", "get_depth", "(", "self", ",", "scene_id", ",", "im_id", ")", ":", "\n", "        ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "LM_PATH", ",", "\"test\"", ")", "\n", "scene_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "f\"{scene_id:06d}\"", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "scene_path", ",", "f\"depth/{im_id:06d}.png\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "return", "bop_inout", ".", "load_depth", "(", "file_path", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"missing file: {file_path}\"", ")", "\n", "return", "np", ".", "zeros", "(", "(", "480", ",", "640", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.get_seg": [[257, 266], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "bop_toolkit_lib.load_im", "bop_toolkit_lib.load_im", "bop_toolkit_lib.load_im", "print", "numpy.zeros"], "methods", ["None"], ["", "", "def", "get_seg", "(", "self", ",", "scene_id", ",", "im_id", ",", "gt_id", ")", ":", "\n", "        ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "LM_PATH", ",", "\"test\"", ")", "\n", "scene_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "f\"{scene_id:06d}\"", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "scene_path", ",", "f\"mask_visib/{im_id:06d}_{gt_id:06d}.png\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "return", "bop_inout", ".", "load_im", "(", "file_path", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"missing file: {file_path}\"", ")", "\n", "return", "np", ".", "zeros", "(", "(", "480", ",", "640", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.SplitSourceRef.__call__": [[42, 55], ["isinstance", "sample.pop", "sample[].detach", "sample[].detach", "sample[].copy", "sample[].copy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ":", "Dict", ")", ":", "\n", "        ", "if", "'points'", "in", "sample", ":", "\n", "            ", "sample", "[", "'points_raw'", "]", "=", "sample", ".", "pop", "(", "'points'", ")", "\n", "", "else", ":", "\n", "            ", "assert", "'points_raw'", "in", "sample", "\n", "", "if", "isinstance", "(", "sample", "[", "'points_raw'", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "sample", "[", "'points_src'", "]", "=", "sample", "[", "'points_raw'", "]", ".", "detach", "(", ")", "\n", "sample", "[", "'points_ref'", "]", "=", "sample", "[", "'points_raw'", "]", ".", "detach", "(", ")", "\n", "", "else", ":", "# is numpy", "\n", "            ", "sample", "[", "'points_src'", "]", "=", "sample", "[", "'points_raw'", "]", ".", "copy", "(", ")", "\n", "sample", "[", "'points_ref'", "]", "=", "sample", "[", "'points_raw'", "]", ".", "copy", "(", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Resampler.__init__": [[58, 69], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num", ":", "int", ")", ":", "\n", "        ", "\"\"\"Resamples a point cloud containing N points to one containing M\n\n        Guaranteed to have no repeated points if M <= N.\n        Otherwise, it is guaranteed that all points appear at least once.\n\n        Args:\n            num (int): Number of points to resample to, i.e. M\n\n        \"\"\"", "\n", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Resampler.__call__": [[70, 93], ["numpy.random.seed", "augmentation.Resampler._resample", "augmentation.Resampler._resample", "augmentation.Resampler._resample", "len", "math.ceil", "len", "math.ceil", "math.ceil", "ValueError"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.FixedResampler._resample", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.FixedResampler._resample", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.FixedResampler._resample"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "if", "'deterministic'", "in", "sample", "and", "sample", "[", "'deterministic'", "]", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "sample", "[", "'idx'", "]", ")", "\n", "\n", "", "if", "'points'", "in", "sample", ":", "\n", "            ", "sample", "[", "'points'", "]", "=", "self", ".", "_resample", "(", "sample", "[", "'points'", "]", ",", "self", ".", "num", ")", "\n", "", "else", ":", "\n", "            ", "if", "'crop_proportion'", "not", "in", "sample", ":", "\n", "                ", "src_size", ",", "ref_size", "=", "self", ".", "num", ",", "self", ".", "num", "\n", "", "elif", "len", "(", "sample", "[", "'crop_proportion'", "]", ")", "==", "1", ":", "\n", "                ", "src_size", "=", "math", ".", "ceil", "(", "sample", "[", "'crop_proportion'", "]", "[", "0", "]", "*", "self", ".", "num", ")", "\n", "ref_size", "=", "self", ".", "num", "\n", "", "elif", "len", "(", "sample", "[", "'crop_proportion'", "]", ")", "==", "2", ":", "\n", "                ", "src_size", "=", "math", ".", "ceil", "(", "sample", "[", "'crop_proportion'", "]", "[", "0", "]", "*", "self", ".", "num", ")", "\n", "ref_size", "=", "math", ".", "ceil", "(", "sample", "[", "'crop_proportion'", "]", "[", "1", "]", "*", "self", ".", "num", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Crop proportion must have 1 or 2 elements'", ")", "\n", "\n", "", "sample", "[", "'points_src'", "]", "=", "self", ".", "_resample", "(", "sample", "[", "'points_src'", "]", ",", "src_size", ")", "\n", "sample", "[", "'points_ref'", "]", "=", "self", ".", "_resample", "(", "sample", "[", "'points_ref'", "]", ",", "ref_size", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Resampler._resample": [[94, 113], ["numpy.random.choice", "numpy.concatenate", "numpy.random.choice", "numpy.random.choice"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_resample", "(", "points", ",", "k", ")", ":", "\n", "        ", "\"\"\"Resamples the points such that there is exactly k points.\n\n        If the input point cloud has <= k points, it is guaranteed the\n        resampled point cloud contains every point in the input.\n        If the input point cloud has > k points, it is guaranteed the\n        resampled point cloud does not contain repeated point.\n        \"\"\"", "\n", "\n", "if", "k", "<=", "points", ".", "shape", "[", "0", "]", ":", "\n", "            ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "points", ".", "shape", "[", "0", "]", ",", "k", ",", "replace", "=", "False", ")", "\n", "return", "points", "[", "rand_idxs", ",", ":", "]", "\n", "", "elif", "points", ".", "shape", "[", "0", "]", "==", "k", ":", "\n", "            ", "return", "points", "\n", "", "else", ":", "\n", "            ", "rand_idxs", "=", "np", ".", "concatenate", "(", "[", "np", ".", "random", ".", "choice", "(", "points", ".", "shape", "[", "0", "]", ",", "points", ".", "shape", "[", "0", "]", ",", "replace", "=", "False", ")", ",", "\n", "np", ".", "random", ".", "choice", "(", "points", ".", "shape", "[", "0", "]", ",", "k", "-", "points", ".", "shape", "[", "0", "]", ",", "replace", "=", "True", ")", "]", ")", "\n", "return", "points", "[", "rand_idxs", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.FixedResampler._resample": [[119, 126], ["numpy.concatenate", "numpy.tile"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_resample", "(", "points", ",", "k", ")", ":", "\n", "        ", "multiple", "=", "k", "//", "points", ".", "shape", "[", "0", "]", "\n", "remainder", "=", "k", "%", "points", ".", "shape", "[", "0", "]", "\n", "\n", "resampled", "=", "np", ".", "concatenate", "(", "(", "np", ".", "tile", "(", "points", ",", "(", "multiple", ",", "1", ")", ")", ",", "points", "[", ":", "remainder", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "return", "resampled", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomJitter.__init__": [[130, 134], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "0.01", ",", "clip", "=", "0.05", ",", "only_ref", "=", "False", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "clip", "=", "clip", "\n", "self", ".", "only_ref", "=", "only_ref", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomJitter.jitter": [[135, 142], ["numpy.clip", "numpy.random.normal"], "methods", ["None"], ["", "def", "jitter", "(", "self", ",", "pts", ")", ":", "\n", "\n", "        ", "noise", "=", "np", ".", "clip", "(", "np", ".", "random", ".", "normal", "(", "0.0", ",", "scale", "=", "self", ".", "scale", ",", "size", "=", "(", "pts", ".", "shape", "[", "0", "]", ",", "3", ")", ")", ",", "\n", "a_min", "=", "-", "self", ".", "clip", ",", "a_max", "=", "self", ".", "clip", ")", "\n", "pts", "[", ":", ",", ":", "3", "]", "+=", "noise", "# Add noise to xyz", "\n", "\n", "return", "pts", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomJitter.__call__": [[143, 153], ["augmentation.RandomJitter.jitter", "augmentation.RandomJitter.jitter", "augmentation.RandomJitter.jitter"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomJitter.jitter", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomJitter.jitter", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomJitter.jitter"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "if", "'points'", "in", "sample", ":", "\n", "            ", "sample", "[", "'points'", "]", "=", "self", ".", "jitter", "(", "sample", "[", "'points'", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "self", ".", "only_ref", ":", "\n", "                ", "sample", "[", "'points_src'", "]", "=", "self", ".", "jitter", "(", "sample", "[", "'points_src'", "]", ")", "\n", "", "sample", "[", "'points_ref'", "]", "=", "self", ".", "jitter", "(", "sample", "[", "'points_ref'", "]", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.TransformSE3.__init__": [[156, 158], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Applies a random rigid transformation to the source point cloud\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.TransformSE3.apply_transform": [[159, 176], ["igt.copy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "apply_transform", "(", "self", ",", "p0", ",", "transform_mat", ")", ":", "\n", "        ", "p1", "=", "(", "transform_mat", "[", ":", "3", ",", ":", "3", "]", "@", "p0", "[", ":", ",", ":", "3", "]", ".", "T", ")", ".", "T", "+", "transform_mat", "[", ":", "3", ",", "3", "]", "\n", "if", "p0", ".", "shape", "[", "1", "]", ">=", "6", ":", "# Need to rotate normals too", "\n", "            ", "n1", "=", "(", "transform_mat", "[", ":", "3", ",", ":", "3", "]", "@", "p0", "[", ":", ",", "3", ":", "6", "]", ".", "T", ")", ".", "T", "\n", "p1", "=", "np", ".", "concatenate", "(", "(", "p1", ",", "n1", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "if", "p0", ".", "shape", "[", "1", "]", "==", "4", ":", "# label (pose estimation task)", "\n", "            ", "p1", "=", "np", ".", "concatenate", "(", "(", "p1", ",", "p0", "[", ":", ",", "3", "]", "[", ":", ",", "None", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "if", "p0", ".", "shape", "[", "1", "]", ">", "6", ":", "# additional channels after normals", "\n", "            ", "p1", "=", "np", ".", "concatenate", "(", "(", "p1", ",", "p0", "[", ":", ",", "6", ":", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "igt", "=", "transform_mat", "\n", "# invert to get gt", "\n", "gt", "=", "igt", ".", "copy", "(", ")", "\n", "gt", "[", ":", "3", ",", ":", "3", "]", "=", "gt", "[", ":", "3", ",", ":", "3", "]", ".", "T", "\n", "gt", "[", ":", "3", ",", "3", "]", "=", "-", "gt", "[", ":", "3", ",", ":", "3", "]", "@", "gt", "[", ":", "3", ",", "3", "]", "\n", "\n", "return", "p1", ",", "gt", ",", "igt", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.TransformSE3.__call__": [[177, 179], ["NotImplementedError"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Subclasses implement transformation (random, given, etc).\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomTransformSE3.__init__": [[182, 196], ["augmentation.TransformSE3.__init__"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model.ActorCriticHead.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rot_mag", ":", "float", "=", "45.0", ",", "trans_mag", ":", "float", "=", "0.5", ",", "random_mag", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Applies a random rigid transformation to the source point cloud\n\n        Args:\n            rot_mag (float): Maximum rotation in degrees\n            trans_mag (float): Maximum translation T. Random translation will\n              be in the range [-X,X] in each axis\n            random_mag (bool): If true, will randomize the maximum rotation, i.e. will bias towards small\n                               perturbations\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_rot_mag", "=", "rot_mag", "\n", "self", ".", "_trans_mag", "=", "trans_mag", "\n", "self", ".", "_random_mag", "=", "random_mag", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomTransformSE3.generate_transform": [[197, 218], ["scipy.stats.special_ortho_group.rvs", "scipy.spatial.transform.Rotation.as_rotvec", "numpy.linalg.norm", "numpy.deg2rad", "scipy.spatial.transform.Rotation.from_rotvec().as_dcm", "augmentation.uniform_2_sphere", "numpy.random.uniform", "numpy.concatenate().astype", "scipy.spatial.transform.Rotation.from_dcm", "scipy.spatial.transform.Rotation.from_rotvec", "numpy.concatenate", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.uniform_2_sphere"], ["", "def", "generate_transform", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate a random SE3 transformation (3, 4) \"\"\"", "\n", "\n", "if", "self", ".", "_random_mag", ":", "\n", "            ", "rot_mag", ",", "trans_mag", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "self", ".", "_rot_mag", ",", "np", ".", "random", ".", "uniform", "(", ")", "*", "self", ".", "_trans_mag", "\n", "", "else", ":", "\n", "            ", "rot_mag", ",", "trans_mag", "=", "self", ".", "_rot_mag", ",", "self", ".", "_trans_mag", "\n", "\n", "# Generate rotation", "\n", "", "rand_rot", "=", "special_ortho_group", ".", "rvs", "(", "3", ")", "\n", "axis_angle", "=", "Rotation", ".", "as_rotvec", "(", "Rotation", ".", "from_dcm", "(", "rand_rot", ")", ")", "\n", "axis_angle", "/=", "np", ".", "linalg", ".", "norm", "(", "axis_angle", ")", "\n", "axis_angle", "*=", "np", ".", "deg2rad", "(", "rot_mag", ")", "\n", "rand_rot", "=", "Rotation", ".", "from_rotvec", "(", "axis_angle", ")", ".", "as_dcm", "(", ")", "\n", "\n", "# Generate translation", "\n", "rand_trans", "=", "uniform_2_sphere", "(", ")", "\n", "rand_trans", "*=", "np", ".", "random", ".", "uniform", "(", "high", "=", "trans_mag", ")", "\n", "rand_SE3", "=", "np", ".", "concatenate", "(", "(", "rand_rot", ",", "rand_trans", "[", ":", ",", "None", "]", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "rand_SE3", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomTransformSE3.transform": [[219, 222], ["augmentation.RandomTransformSE3.generate_transform", "augmentation.RandomTransformSE3.apply_transform"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomTransformSE3_euler.generate_transform", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.TransformSE3.apply_transform"], ["", "def", "transform", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "transform_mat", "=", "self", ".", "generate_transform", "(", ")", "\n", "return", "self", ".", "apply_transform", "(", "tensor", ",", "transform_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomTransformSE3.__call__": [[223, 236], ["numpy.random.seed", "augmentation.RandomTransformSE3.transform", "augmentation.RandomTransformSE3.transform"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomTransformSE3.transform", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomTransformSE3.transform"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "if", "'deterministic'", "in", "sample", "and", "sample", "[", "'deterministic'", "]", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "sample", "[", "'idx'", "]", ")", "\n", "\n", "", "if", "'points'", "in", "sample", ":", "\n", "            ", "sample", "[", "'points'", "]", ",", "_", ",", "_", "=", "self", ".", "transform", "(", "sample", "[", "'points'", "]", ")", "\n", "", "else", ":", "\n", "            ", "transformed", ",", "transform_r_s", ",", "transform_s_r", "=", "self", ".", "transform", "(", "sample", "[", "'points_src'", "]", ")", "\n", "sample", "[", "'transform_gt'", "]", "=", "transform_r_s", "# Apply to source to get reference", "\n", "sample", "[", "'points_src'", "]", "=", "transformed", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.RandomTransformSE3_euler.generate_transform": [[246, 279], ["numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.array", "numpy.array", "numpy.array", "numpy.random.uniform", "numpy.concatenate().astype", "numpy.random.random", "numpy.concatenate", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["None"], ["def", "generate_transform", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_random_mag", ":", "\n", "            ", "attentuation", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "rot_mag", ",", "trans_mag", "=", "attentuation", "*", "self", ".", "_rot_mag", ",", "attentuation", "*", "self", ".", "_trans_mag", "\n", "", "else", ":", "\n", "            ", "rot_mag", ",", "trans_mag", "=", "self", ".", "_rot_mag", ",", "self", ".", "_trans_mag", "\n", "\n", "# Generate rotation", "\n", "", "anglex", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "np", ".", "pi", "*", "rot_mag", "/", "180.0", "\n", "angley", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "np", ".", "pi", "*", "rot_mag", "/", "180.0", "\n", "anglez", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "np", ".", "pi", "*", "rot_mag", "/", "180.0", "\n", "\n", "cosx", "=", "np", ".", "cos", "(", "anglex", ")", "\n", "cosy", "=", "np", ".", "cos", "(", "angley", ")", "\n", "cosz", "=", "np", ".", "cos", "(", "anglez", ")", "\n", "sinx", "=", "np", ".", "sin", "(", "anglex", ")", "\n", "siny", "=", "np", ".", "sin", "(", "angley", ")", "\n", "sinz", "=", "np", ".", "sin", "(", "anglez", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosx", ",", "-", "sinx", "]", ",", "\n", "[", "0", ",", "sinx", ",", "cosx", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "cosy", ",", "0", ",", "siny", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "siny", ",", "0", ",", "cosy", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "cosz", ",", "-", "sinz", ",", "0", "]", ",", "\n", "[", "sinz", ",", "cosz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R_ab", "=", "Rx", "@", "Ry", "@", "Rz", "\n", "t_ab", "=", "np", ".", "random", ".", "uniform", "(", "-", "trans_mag", ",", "trans_mag", ",", "3", ")", "\n", "\n", "rand_SE3", "=", "np", ".", "concatenate", "(", "(", "R_ab", ",", "t_ab", "[", ":", ",", "None", "]", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "rand_SE3", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.ShufflePoints.__call__": [[283, 290], ["numpy.random.permutation", "numpy.random.permutation", "numpy.random.permutation"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "'points'", "in", "sample", ":", "\n", "            ", "sample", "[", "'points'", "]", "=", "np", ".", "random", ".", "permutation", "(", "sample", "[", "'points'", "]", ")", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'points_ref'", "]", "=", "np", ".", "random", ".", "permutation", "(", "sample", "[", "'points_ref'", "]", ")", "\n", "sample", "[", "'points_src'", "]", "=", "np", ".", "random", ".", "permutation", "(", "sample", "[", "'points_src'", "]", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.SetDeterministic.__call__": [[295, 298], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'deterministic'", "]", "=", "True", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Scale.__init__": [[304, 307], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "0.1", ",", "clip", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "clip", "=", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Scale.scale_points": [[308, 312], ["points[].mean"], "methods", ["None"], ["", "def", "scale_points", "(", "self", ",", "points", ",", "scale", ")", ":", "\n", "        ", "points_mean", "=", "points", "[", ":", ",", ":", "3", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "points", "[", ":", ",", ":", "3", "]", "=", "(", "points", "-", "points_mean", ")", "*", "scale", "+", "points_mean", "# centroid location stays the same", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Scale.__call__": [[313, 320], ["numpy.random.normal().clip", "augmentation.Scale.scale_points", "augmentation.Scale.scale_points", "augmentation.Scale.scale_points", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Scale.scale_points", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Scale.scale_points", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Scale.scale_points"], ["", "def", "__call__", "(", "self", ",", "sample", ":", "Dict", ")", ":", "\n", "        ", "sample", "[", "'scale'", "]", "=", "np", ".", "random", ".", "normal", "(", "1", ",", "self", ".", "scale", ",", "3", ")", ".", "clip", "(", "1", "-", "self", ".", "clip", ",", "1", "+", "self", ".", "clip", ")", "\n", "\n", "sample", "[", "'points_src'", "]", "[", ":", ",", ":", "3", "]", "=", "self", ".", "scale_points", "(", "sample", "[", "'points_src'", "]", "[", ":", ",", ":", "3", "]", ",", "sample", "[", "'scale'", "]", ")", "\n", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", "=", "self", ".", "scale_points", "(", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", ",", "sample", "[", "'scale'", "]", ")", "\n", "sample", "[", "'points_raw'", "]", "[", ":", ",", ":", "3", "]", "=", "self", ".", "scale_points", "(", "sample", "[", "'points_raw'", "]", "[", ":", ",", ":", "3", "]", ",", "sample", "[", "'scale'", "]", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Shear.__init__": [[324, 327], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "5", ",", "clip", "=", "15", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "clip", "=", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Shear.__call__": [[328, 339], ["numpy.deg2rad", "augmentation.uniform_2_sphere", "numpy.cross", "transforms3d.shears.sadn2mat", "numpy.clip", "augmentation.uniform_2_sphere", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.uniform_2_sphere", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.uniform_2_sphere"], ["", "def", "__call__", "(", "self", ",", "sample", ":", "Dict", ")", ":", "\n", "        ", "angle", "=", "np", ".", "deg2rad", "(", "np", ".", "clip", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "self", ".", "scale", ")", ",", "-", "self", ".", "clip", ",", "self", ".", "clip", ")", ")", "\n", "direction", "=", "uniform_2_sphere", "(", ")", "\n", "normal", "=", "np", ".", "cross", "(", "direction", ",", "uniform_2_sphere", "(", ")", ")", "\n", "S", "=", "t3d", ".", "shears", ".", "sadn2mat", "(", "angle", ",", "direction", ",", "normal", ")", "\n", "\n", "sample", "[", "'points_src'", "]", "[", ":", ",", ":", "3", "]", "=", "(", "S", "@", "sample", "[", "'points_src'", "]", "[", ":", ",", ":", "3", "]", ".", "T", ")", ".", "T", "\n", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", "=", "(", "S", "@", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", ".", "T", ")", ".", "T", "\n", "sample", "[", "'points_raw'", "]", "[", ":", ",", ":", "3", "]", "=", "(", "S", "@", "sample", "[", "'points_raw'", "]", "[", ":", ",", ":", "3", "]", ".", "T", ")", ".", "T", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Mirror.__call__": [[343, 352], ["augmentation.uniform_2_sphere", "transforms3d.reflections.rfnorm2mat"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.uniform_2_sphere"], ["def", "__call__", "(", "self", ",", "sample", ":", "Dict", ")", ":", "\n", "        ", "normal", "=", "uniform_2_sphere", "(", ")", "\n", "M", "=", "t3d", ".", "reflections", ".", "rfnorm2mat", "(", "normal", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "\n", "sample", "[", "'points_src'", "]", "[", ":", ",", ":", "3", "]", "=", "(", "M", "@", "sample", "[", "'points_src'", "]", "[", ":", ",", ":", "3", "]", ".", "T", ")", ".", "T", "\n", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", "=", "(", "M", "@", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", ".", "T", ")", ".", "T", "\n", "sample", "[", "'points_raw'", "]", "[", ":", ",", ":", "3", "]", "=", "(", "M", "@", "sample", "[", "'points_raw'", "]", "[", ":", ",", ":", "3", "]", ".", "T", ")", ".", "T", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Normalize.__init__": [[356, 358], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "using_target", "=", "True", ")", ":", "\n", "        ", "self", ".", "using_target", "=", "using_target", "# normalize wrt target", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.Normalize.__call__": [[359, 379], ["[].mean", "numpy.linalg.norm", "numpy.linalg.norm.max", "numpy.eye", "[].mean.squeeze", "numpy.diag_indices"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "t", "=", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", ".", "mean", "(", "axis", "=", "0", ")", "# center offset", "\n", "centered", "=", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", "-", "t", "\n", "dists", "=", "np", ".", "linalg", ".", "norm", "(", "centered", ",", "axis", "=", "1", ")", "\n", "s", "=", "dists", ".", "max", "(", ")", "# scale", "\n", "\n", "# apply to source and target", "\n", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", "=", "centered", "/", "s", "\n", "sample", "[", "'points_src'", "]", "[", ":", ",", ":", "3", "]", "=", "(", "sample", "[", "'points_src'", "]", "[", ":", ",", ":", "3", "]", "-", "t", ")", "/", "s", "\n", "\n", "# for test set with given estimate in unnormalized scale", "\n", "if", "'transform_gt'", "in", "sample", ":", "\n", "            ", "sample", "[", "'transform_gt'", "]", "[", ":", "3", ",", "3", "]", "/=", "s", "\n", "\n", "# keep track (to undo if needed)", "\n", "", "sample", "[", "'normalization'", "]", "=", "np", ".", "eye", "(", "4", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "sample", "[", "'normalization'", "]", "[", "np", ".", "diag_indices", "(", "3", ")", "]", "=", "s", "\n", "sample", "[", "'normalization'", "]", "[", ":", "3", ",", "3", "]", "=", "t", ".", "squeeze", "(", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.GtTransformSE3.__init__": [[383, 386], ["augmentation.TransformSE3.__init__"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model.ActorCriticHead.__init__"], ["def", "__init__", "(", "self", ",", "source_to_target", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "source_to_target", "=", "source_to_target", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.GtTransformSE3.__call__": [[387, 399], ["numpy.eye", "augmentation.GtTransformSE3.apply_transform", "numpy.eye", "[].squeeze", "augmentation.GtTransformSE3.apply_transform", "[].squeeze"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.TransformSE3.apply_transform", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.TransformSE3.apply_transform"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "source_to_target", ":", "\n", "            ", "cam2model", "=", "np", ".", "eye", "(", "4", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cam2model", "[", ":", "3", ",", ":", "3", "]", "=", "sample", "[", "'gt'", "]", "[", "'cam_R_m2c'", "]", ".", "T", "\n", "cam2model", "[", ":", "3", ",", "3", "]", "=", "-", "sample", "[", "'gt'", "]", "[", "'cam_R_m2c'", "]", ".", "T", "@", "sample", "[", "'gt'", "]", "[", "'cam_t_m2c'", "]", ".", "squeeze", "(", ")", "\n", "sample", "[", "'points_src'", "]", ",", "sample", "[", "'est'", "]", ",", "sample", "[", "'c2m'", "]", "=", "self", ".", "apply_transform", "(", "sample", "[", "'points_src'", "]", ",", "cam2model", ")", "\n", "", "else", ":", "\n", "            ", "model2cam", "=", "np", ".", "eye", "(", "4", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "model2cam", "[", ":", "3", ",", ":", "3", "]", "=", "sample", "[", "'gt'", "]", "[", "'cam_R_m2c'", "]", "\n", "model2cam", "[", ":", "3", ",", "3", "]", "=", "sample", "[", "'gt'", "]", "[", "'cam_t_m2c'", "]", ".", "squeeze", "(", ")", "\n", "sample", "[", "'points_ref'", "]", ",", "sample", "[", "'c2m'", "]", ",", "sample", "[", "'est'", "]", "=", "self", ".", "apply_transform", "(", "sample", "[", "'points_ref'", "]", ",", "model2cam", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.EstTransformSE3.__init__": [[403, 405], ["augmentation.TransformSE3.__init__"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model.ActorCriticHead.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.EstTransformSE3.__call__": [[406, 417], ["numpy.linalg.inv", "augmentation.EstTransformSE3.apply_transform", "numpy.eye", "[].squeeze"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.TransformSE3.apply_transform"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "# this is our actual estimate -- it's residual from the best estimate is the initial pose error", "\n", "        ", "est", "=", "sample", "[", "'est'", "]", "\n", "inv_est", "=", "np", ".", "linalg", ".", "inv", "(", "est", ")", "# model2cam -> cam2model -- this is then applied to src points (cam space)", "\n", "sample", "[", "'points_src'", "]", ",", "transform_r_s", ",", "transform_s_r", "=", "self", ".", "apply_transform", "(", "sample", "[", "'points_src'", "]", ",", "inv_est", "[", ":", "3", ",", ":", "]", ")", "\n", "\n", "cam2model", "=", "np", ".", "eye", "(", "4", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cam2model", "[", ":", "3", ",", ":", "3", "]", "=", "sample", "[", "'gt'", "]", "[", "'cam_R_m2c'", "]", ".", "T", "\n", "cam2model", "[", ":", "3", ",", "3", "]", "=", "-", "sample", "[", "'gt'", "]", "[", "'cam_R_m2c'", "]", ".", "T", "@", "sample", "[", "'gt'", "]", "[", "'cam_t_m2c'", "]", ".", "squeeze", "(", ")", "\n", "sample", "[", "'transform_gt'", "]", "=", "(", "cam2model", "@", "est", ")", "[", ":", "3", ",", ":", "]", "# apply to source to get reference", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.SegmentResampler.__init__": [[421, 425], ["augmentation.Resampler.__init__"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model.ActorCriticHead.__init__"], ["def", "__init__", "(", "self", ",", "num", ",", "p_fg", "=", "1.0", ",", "patch", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num", ")", "\n", "self", ".", "p_fg", "=", "p_fg", "\n", "self", ".", "patch", "=", "patch", "# sample continuous patch if true, else sample randomly in cloud", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.SegmentResampler._patch_sample": [[426, 458], ["augmentation.SegmentResampler._patch_sample.project"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.CloudVisualizer.project"], ["", "def", "_patch_sample", "(", "self", ",", "fg_points", ",", "fg_size", ",", "bg_points", ",", "bg_size", ",", "K", ")", ":", "\n", "# assuming points_src to be in camera space, we project to image space for kNN search", "\n", "        ", "def", "project", "(", "points", ")", ":", "\n", "            ", "Xs", ",", "Ys", ",", "Zs", "=", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", "\n", "xs", "=", "np", ".", "divide", "(", "Xs", "*", "K", "[", "0", ",", "0", "]", ",", "Zs", ")", "+", "K", "[", "0", ",", "2", "]", "\n", "ys", "=", "np", ".", "divide", "(", "Ys", "*", "K", "[", "1", ",", "1", "]", ",", "Zs", ")", "+", "K", "[", "1", ",", "2", "]", "\n", "return", "np", ".", "hstack", "(", "[", "xs", "[", ":", ",", "None", "]", ",", "ys", "[", ":", ",", "None", "]", "]", ")", "\n", "\n", "", "fg_2d", "=", "project", "(", "fg_points", ")", "\n", "\n", "# pick a random point on the object as center", "\n", "center_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "fg_points", ".", "shape", "[", "0", "]", ")", "\n", "center_2d", "=", "fg_2d", "[", "center_idx", "]", "\n", "\n", "# find [fg_size] nearest points", "\n", "fg_centered", "=", "fg_2d", "-", "center_2d", "\n", "fg_distance", "=", "np", ".", "linalg", ".", "norm", "(", "fg_centered", ",", "axis", "=", "1", ")", "\n", "fg_neighbors", "=", "np", ".", "argsort", "(", "fg_distance", ")", "[", ":", "fg_size", "]", "\n", "fg", "=", "fg_points", "[", "fg_neighbors", "]", "\n", "\n", "if", "bg_size", ">", "0", ":", "\n", "            ", "bg_2d", "=", "project", "(", "bg_points", ")", "\n", "# find [bg_size] nearest points", "\n", "bg_centered", "=", "bg_2d", "-", "center_2d", "\n", "bg_distance", "=", "np", ".", "linalg", ".", "norm", "(", "bg_centered", ",", "axis", "=", "1", ")", "\n", "bg_neighbors", "=", "np", ".", "argsort", "(", "bg_distance", ")", "[", ":", "bg_size", "]", "\n", "bg", "=", "bg_points", "[", "bg_neighbors", "]", "\n", "", "else", ":", "\n", "            ", "bg", "=", "[", "]", "\n", "bg_neighbors", "=", "[", "]", "\n", "\n", "", "return", "fg", ",", "bg", ",", "fg_neighbors", ",", "bg_neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.SegmentResampler.__call__": [[459, 489], ["isinstance", "math.ceil", "math.floor", "augmentation.SegmentResampler._resample", "numpy.random.uniform", "augmentation.SegmentResampler._patch_sample", "augmentation.SegmentResampler._resample", "augmentation.SegmentResampler._resample", "numpy.vstack", "ValueError"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.FixedResampler._resample", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.SegmentResampler._patch_sample", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.FixedResampler._resample", "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.FixedResampler._resample"], ["", "def", "__call__", "(", "self", ",", "sample", ":", "Dict", ")", ":", "\n", "# [p_fg]% from object, [1-p_fg]% from background", "\n", "        ", "fg", "=", "sample", "[", "'points_src'", "]", "[", ":", ",", "-", "1", "]", ">", "0", "\n", "bg", "=", "sample", "[", "'points_src'", "]", "[", ":", ",", "-", "1", "]", "==", "0", "\n", "if", "isinstance", "(", "self", ".", "p_fg", ",", "list", ")", ":", "\n", "            ", "p_fg", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "p_fg", ")", "\n", "", "else", ":", "\n", "            ", "p_fg", "=", "self", ".", "p_fg", "\n", "", "fg_size", "=", "math", ".", "ceil", "(", "p_fg", "*", "self", ".", "num", ")", "\n", "bg_size", "=", "math", ".", "floor", "(", "(", "1", "-", "p_fg", ")", "*", "self", ".", "num", ")", "\n", "assert", "fg_size", "+", "bg_size", "==", "self", ".", "num", "\n", "if", "self", ".", "patch", ":", "\n", "            ", "fg", ",", "bg", ",", "_", ",", "_", "=", "self", ".", "_patch_sample", "(", "sample", "[", "'points_src'", "]", "[", "fg", "]", ",", "fg_size", ",", "\n", "sample", "[", "'points_src'", "]", "[", "bg", "]", ",", "bg_size", ",", "\n", "sample", "[", "'cam'", "]", "[", "'cam_K'", "]", ")", "\n", "", "else", ":", "\n", "            ", "fg", "=", "self", ".", "_resample", "(", "sample", "[", "'points_src'", "]", "[", "fg", "]", ",", "fg_size", ")", "\n", "bg", "=", "self", ".", "_resample", "(", "sample", "[", "'points_src'", "]", "[", "bg", "]", ",", "bg_size", ")", "\n", "\n", "", "if", "fg_size", ">", "0", "and", "bg_size", ">", "0", ":", "\n", "            ", "sample", "[", "'points_src'", "]", "=", "np", ".", "vstack", "(", "[", "fg", ",", "bg", "]", ")", "\n", "", "elif", "fg_size", ">", "0", ":", "\n", "            ", "sample", "[", "'points_src'", "]", "=", "fg", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"only background pixels sampled\"", ")", "\n", "\n", "# num from model", "\n", "", "sample", "[", "'points_ref'", "]", "=", "self", ".", "_resample", "(", "sample", "[", "'points_ref'", "]", ",", "self", ".", "num", ")", "\n", "\n", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dornik_reagent.dataset.augmentation.uniform_2_sphere": [[12, 38], ["numpy.arccos", "numpy.cos", "numpy.stack", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin"], "function", ["None"], ["def", "uniform_2_sphere", "(", "num", ":", "int", "=", "None", ")", ":", "\n", "    ", "\"\"\"Uniform sampling on a 2-sphere\n\n    Source: https://gist.github.com/andrewbolster/10274979\n\n    Args:\n        num: Number of vectors to sample (or None if single)\n\n    Returns:\n        Random Vector (np.ndarray) of size (num, 3) with norm 1.\n        If num is None returned value will have size (3,)\n\n    \"\"\"", "\n", "if", "num", "is", "not", "None", ":", "\n", "        ", "phi", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "2", "*", "np", ".", "pi", ",", "num", ")", "\n", "cos_theta", "=", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ",", "num", ")", "\n", "", "else", ":", "\n", "        ", "phi", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "2", "*", "np", ".", "pi", ")", "\n", "cos_theta", "=", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ")", "\n", "\n", "", "theta", "=", "np", ".", "arccos", "(", "cos_theta", ")", "\n", "x", "=", "np", ".", "sin", "(", "theta", ")", "*", "np", ".", "cos", "(", "phi", ")", "\n", "y", "=", "np", ".", "sin", "(", "theta", ")", "*", "np", ".", "sin", "(", "phi", ")", "\n", "z", "=", "np", ".", "cos", "(", "theta", ")", "\n", "\n", "return", "np", ".", "stack", "(", "(", "x", ",", "y", ",", "z", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.__init__": [[60, 73], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "# number of trajectories", "\n", "# environment", "\n", "self", ".", "sources", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "values", "=", "[", "]", "\n", "# expert related", "\n", "self", ".", "expert_actions", "=", "[", "]", "\n", "# student related", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "action_logits", "=", "[", "]", "\n", "self", ".", "action_logprobs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.__len__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.start_trajectory": [[77, 91], ["None"], "methods", ["None"], ["", "def", "start_trajectory", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the list into which all samples of a trajectory are gathered.\n        \"\"\"", "\n", "#", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "sources", "+=", "[", "[", "]", "]", "\n", "self", ".", "targets", "+=", "[", "[", "]", "]", "\n", "self", ".", "rewards", "+=", "[", "[", "]", "]", "\n", "self", ".", "values", "+=", "[", "[", "]", "]", "\n", "self", ".", "expert_actions", "+=", "[", "[", "]", "]", "\n", "self", ".", "actions", "+=", "[", "[", "]", "]", "\n", "self", ".", "action_logits", "+=", "[", "[", "]", "]", "\n", "self", ".", "action_logprobs", "+=", "[", "[", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.log_step": [[92, 107], ["buffer.Buffer.sources[].append", "buffer.Buffer.targets[].append", "buffer.Buffer.expert_actions[].append", "buffer.Buffer.rewards[].append", "buffer.Buffer.values[].append", "buffer.Buffer.actions[].append", "buffer.Buffer.action_logits[].append", "buffer.Buffer.action_logprobs[].append", "observation[].detach", "observation[].detach", "expert_action.detach", "reward.detach", "state_value.detach", "action.detach", "torch.cat().detach", "action_logprob.detach", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat"], ["", "def", "log_step", "(", "self", ",", "observation", ",", "state_value", ",", "reward", ",", "expert_action", ",", "\n", "action", ",", "action_logit", ",", "action_logprob", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Logs a single step in a trajectory.\n        \"\"\"", "\n", "self", ".", "sources", "[", "-", "1", "]", ".", "append", "(", "observation", "[", "0", "]", ".", "detach", "(", ")", ")", "\n", "self", ".", "targets", "[", "-", "1", "]", ".", "append", "(", "observation", "[", "1", "]", ".", "detach", "(", ")", ")", "\n", "self", ".", "expert_actions", "[", "-", "1", "]", ".", "append", "(", "expert_action", ".", "detach", "(", ")", ")", "\n", "self", ".", "rewards", "[", "-", "1", "]", ".", "append", "(", "reward", ".", "detach", "(", ")", ")", "\n", "self", ".", "values", "[", "-", "1", "]", ".", "append", "(", "state_value", ".", "detach", "(", ")", ")", "\n", "\n", "self", ".", "actions", "[", "-", "1", "]", ".", "append", "(", "action", ".", "detach", "(", ")", ")", "\n", "self", ".", "action_logits", "[", "-", "1", "]", ".", "append", "(", "torch", ".", "cat", "(", "[", "a", "[", ":", ",", "None", ",", ":", "]", "for", "a", "in", "action_logit", "]", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ")", "\n", "self", ".", "action_logprobs", "[", "-", "1", "]", ".", "append", "(", "action_logprob", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.get_returns_and_advantages": [[108, 117], ["discounted().transpose", "advantage().transpose", "zip", "buffer.discounted", "buffer.advantage", "buffer.cat", "buffer.cat", "buffer.cat"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.discounted", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.advantage", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat"], ["", "def", "get_returns_and_advantages", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Computes the return and advantage per trajectory in the buffer.\n        \"\"\"", "\n", "returns", "=", "[", "discounted", "(", "cat", "(", "rewards", ",", "dim", "=", "-", "1", ")", ",", "GAMMA", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "for", "rewards", "in", "self", ".", "rewards", "]", "# per trajectory", "\n", "advantages", "=", "[", "advantage", "(", "cat", "(", "rewards", ",", "dim", "=", "-", "1", ")", ",", "cat", "(", "values", ",", "dim", "=", "-", "1", ")", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "for", "rewards", ",", "values", "in", "zip", "(", "self", ".", "rewards", ",", "self", ".", "values", ")", "]", "\n", "return", "returns", ",", "advantages", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.get_samples": [[118, 127], ["buffer.Buffer.get_returns_and_advantages", "buffer.catcat"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.get_returns_and_advantages", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.catcat"], ["", "def", "get_samples", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Gather all samples in the buffer for use in a torch.utils.data.TensorDataset.\n        \"\"\"", "\n", "samples", "=", "[", "self", ".", "sources", ",", "self", ".", "targets", ",", "\n", "self", ".", "expert_actions", ",", "self", ".", "values", ",", "\n", "self", ".", "actions", ",", "self", ".", "action_logits", ",", "self", ".", "action_logprobs", "]", "\n", "samples", "+=", "self", ".", "get_returns_and_advantages", "(", ")", "\n", "return", "[", "catcat", "(", "sample", ")", "for", "sample", "in", "samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear": [[128, 141], ["buffer.Buffer.sources.clear", "buffer.Buffer.targets.clear", "buffer.Buffer.rewards.clear", "buffer.Buffer.expert_actions.clear", "buffer.Buffer.values.clear", "buffer.Buffer.actions.clear", "buffer.Buffer.action_logits.clear", "buffer.Buffer.action_logprobs.clear"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Clears the buffer and all its trajectory lists.\n        \"\"\"", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "sources", ".", "clear", "(", ")", "\n", "self", ".", "targets", ".", "clear", "(", ")", "\n", "self", ".", "rewards", ".", "clear", "(", ")", "\n", "self", ".", "expert_actions", ".", "clear", "(", ")", "\n", "self", ".", "values", ".", "clear", "(", ")", "\n", "self", ".", "actions", ".", "clear", "(", ")", "\n", "self", ".", "action_logits", ".", "clear", "(", ")", "\n", "self", ".", "action_logprobs", ".", "clear", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat": [[10, 15], ["functools.reduce", "torch.cat"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat"], ["def", "cat", "(", "list_of_tensors", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Concatenate a list of tensors.\n    \"\"\"", "\n", "return", "functools", ".", "reduce", "(", "lambda", "x", ",", "y", ":", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "dim", ")", ",", "list_of_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.catcat": [[17, 22], ["buffer.cat", "buffer.cat"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat"], ["", "def", "catcat", "(", "list_of_lists_of_tensors", ",", "dim_outer", "=", "0", ",", "dim_inner", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Recursively concatenate a list of tensors.\n    \"\"\"", "\n", "return", "cat", "(", "[", "cat", "(", "inner_list", ",", "dim_inner", ")", "for", "inner_list", "in", "list_of_lists_of_tensors", "]", ",", "dim_outer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.discounted": [[24, 35], ["torch.zeros_like", "numpy.arange"], "function", ["None"], ["", "def", "discounted", "(", "vals", ",", "gamma", "=", "0.99", ")", ":", "\n", "    ", "\"\"\"\n    Computes the discounted sum as used for the return in RL.\n    \"\"\"", "\n", "G", "=", "0", "\n", "discounted", "=", "torch", ".", "zeros_like", "(", "vals", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "vals", ".", "shape", "[", "-", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "G", "=", "vals", "[", "...", ",", "i", "]", "+", "gamma", "*", "G", "\n", "discounted", "[", "...", ",", "i", "]", "=", "G", "\n", "\n", "", "return", "discounted", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.advantage": [[37, 52], ["buffer.discounted", "torch.cat", "buffer.discounted", "torch.zeros().to", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.discounted", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.discounted"], ["", "def", "advantage", "(", "rewards", ",", "values", ")", ":", "\n", "    ", "\"\"\"\n    Computes the advantage of the given returns as compared to the estimated values, optionally using GAE.\n    \"\"\"", "\n", "if", "GAE_LAMBDA", "==", "0", ":", "\n", "        ", "returns", "=", "discounted", "(", "rewards", ",", "GAMMA", ")", "\n", "advantage", "=", "returns", "-", "values", "\n", "", "else", ":", "\n", "# Generalized Advantage Estimation (GAE) https://arxiv.org/abs/1506.02438", "\n", "# via https://github.com/inoryy/reaver/blob/master/reaver/agents/base/actor_critic.py", "\n", "        ", "values", "=", "torch", ".", "cat", "(", "[", "values", ",", "torch", ".", "zeros", "(", "(", "values", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", ".", "to", "(", "DEVICE", ")", "]", ",", "dim", "=", "2", ")", "\n", "deltas", "=", "rewards", "+", "GAMMA", "*", "values", "[", "...", ",", "1", ":", "]", "-", "values", "[", "...", ",", ":", "-", "1", "]", "\n", "advantage", "=", "discounted", "(", "deltas", ",", "GAMMA", "*", "GAE_LAMBDA", ")", "\n", "\n", "", "return", "advantage", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.apply_trafo": [[9, 24], ["pcd.clone", "ret[].mean", "ret[].transpose"], "function", ["None"], ["def", "apply_trafo", "(", "pcd", ",", "trafo", ",", "disentangled", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Applies transformation to clone of pcd tensor - see eq. 9 in paper.\n    \"\"\"", "\n", "ret", "=", "pcd", ".", "clone", "(", ")", "\n", "\n", "if", "disentangled", ":", "# to origin", "\n", "        ", "ret_mean", "=", "ret", "[", "...", ",", ":", "3", "]", ".", "mean", "(", "dim", "=", "1", ")", "[", ":", ",", "None", ",", ":", "]", "\n", "ret", "[", "...", ",", ":", "3", "]", "-=", "ret_mean", "\n", "", "ret", "[", "...", ",", ":", "3", "]", "=", "(", "trafo", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "ret", "[", "...", ",", ":", "3", "]", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "# rotate", "\n", "if", "disentangled", ":", "# from origin", "\n", "        ", "ret", "[", "...", ",", ":", "3", "]", "+=", "ret_mean", "\n", "", "ret", "[", "...", ",", ":", "3", "]", "+=", "trafo", "[", ":", ",", ":", "3", ",", "3", "]", "[", "...", ",", "None", ",", ":", "]", "# translate", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.to_disentangled": [[26, 33], ["pcd[].mean", "pcd[].mean"], "function", ["None"], ["", "def", "to_disentangled", "(", "poses", ",", "pcd", ")", ":", "\n", "    ", "\"\"\"\n    Add rotation-induced translation to translation vector - see eq. 11 in paper.\n    \"\"\"", "\n", "poses", "[", ":", ",", ":", "3", ",", "3", "]", "=", "poses", "[", ":", ",", ":", "3", ",", "3", "]", "-", "pcd", "[", "...", ",", ":", "3", "]", ".", "mean", "(", "dim", "=", "1", ")", "+", "(", "poses", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "pcd", "[", "...", ",", ":", "3", "]", ".", "mean", "(", "dim", "=", "1", ")", "[", ":", ",", ":", ",", "None", "]", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.to_global": [[35, 42], ["pcd[].mean", "pcd[].mean"], "function", ["None"], ["", "def", "to_global", "(", "poses", ",", "pcd", ")", ":", "\n", "    ", "\"\"\"\n    Remove rotation-induced translation from translation vector - see eq. 11 in paper.\n    \"\"\"", "\n", "poses", "[", ":", ",", ":", "3", ",", "3", "]", "=", "poses", "[", ":", ",", ":", "3", ",", "3", "]", "+", "pcd", "[", "...", ",", ":", "3", "]", ".", "mean", "(", "dim", "=", "1", ")", "-", "(", "poses", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "pcd", "[", "...", ",", ":", "3", "]", ".", "mean", "(", "dim", "=", "1", ")", "[", ":", ",", ":", ",", "None", "]", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.square_distance": [[44, 49], ["torch.sum", "pcd1[].contiguous", "pcd2[].contiguous"], "function", ["None"], ["", "def", "square_distance", "(", "pcd1", ",", "pcd2", ")", ":", "\n", "    ", "\"\"\"\n    Squared distance between any two points in the two point clouds.\n    \"\"\"", "\n", "return", "torch", ".", "sum", "(", "(", "pcd1", "[", ":", ",", ":", ",", "None", ",", ":", "]", ".", "contiguous", "(", ")", "-", "pcd2", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations._axis_angle_rotation": [[54, 80], ["torch.cos", "torch.sin", "torch.ones_like", "torch.zeros_like", "torch.stack().reshape", "torch.stack"], "function", ["None"], ["", "def", "_axis_angle_rotation", "(", "axis", ":", "str", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Return the rotation matrices for one of the rotations about an axis\n    of which Euler angles describe, for each value of the angle given.\n\n    Args:\n        axis: Axis label \"X\" or \"Y or \"Z\".\n        angle: any shape tensor of Euler angles in radians\n\n    Returns:\n        Rotation matrices as tensor of shape (..., 3, 3).\n    \"\"\"", "\n", "\n", "cos", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "sin", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "one", "=", "torch", ".", "ones_like", "(", "angle", ")", "\n", "zero", "=", "torch", ".", "zeros_like", "(", "angle", ")", "\n", "\n", "if", "axis", "==", "\"X\"", ":", "\n", "        ", "R_flat", "=", "(", "one", ",", "zero", ",", "zero", ",", "zero", ",", "cos", ",", "-", "sin", ",", "zero", ",", "sin", ",", "cos", ")", "\n", "", "if", "axis", "==", "\"Y\"", ":", "\n", "        ", "R_flat", "=", "(", "cos", ",", "zero", ",", "sin", ",", "zero", ",", "one", ",", "zero", ",", "-", "sin", ",", "zero", ",", "cos", ")", "\n", "", "if", "axis", "==", "\"Z\"", ":", "\n", "        ", "R_flat", "=", "(", "cos", ",", "-", "sin", ",", "zero", ",", "sin", ",", "cos", ",", "zero", ",", "zero", ",", "zero", ",", "one", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "R_flat", ",", "-", "1", ")", ".", "reshape", "(", "angle", ".", "shape", "+", "(", "3", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.euler_angles_to_matrix": [[82, 105], ["map", "functools.reduce", "ValueError", "len", "ValueError", "ValueError", "torch.unbind", "euler_angles.dim", "ValueError"], "function", ["None"], ["", "def", "euler_angles_to_matrix", "(", "euler_angles", ",", "convention", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Convert rotations given as Euler angles in radians to rotation matrices.\n\n    Args:\n        euler_angles: Euler angles in radians as tensor of shape (..., 3).\n        convention: Convention string of three uppercase letters from\n            {\"X\", \"Y\", and \"Z\"}.\n\n    Returns:\n        Rotation matrices as tensor of shape (..., 3, 3).\n    \"\"\"", "\n", "if", "euler_angles", ".", "dim", "(", ")", "==", "0", "or", "euler_angles", ".", "shape", "[", "-", "1", "]", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid input euler angles.\"", ")", "\n", "", "if", "len", "(", "convention", ")", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\"Convention must have 3 letters.\"", ")", "\n", "", "if", "convention", "[", "1", "]", "in", "(", "convention", "[", "0", "]", ",", "convention", "[", "2", "]", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Invalid convention {convention}.\"", ")", "\n", "", "for", "letter", "in", "convention", ":", "\n", "        ", "if", "letter", "not", "in", "(", "\"X\"", ",", "\"Y\"", ",", "\"Z\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid letter {letter} in convention string.\"", ")", "\n", "", "", "matrices", "=", "map", "(", "_axis_angle_rotation", ",", "convention", ",", "torch", ".", "unbind", "(", "euler_angles", ",", "-", "1", ")", ")", "\n", "return", "functools", ".", "reduce", "(", "torch", ".", "matmul", ",", "matrices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations._angle_from_tan": [[107, 138], ["torch.atan2", "torch.atan2", "torch.atan2"], "function", ["None"], ["", "def", "_angle_from_tan", "(", "\n", "axis", ":", "str", ",", "other_axis", ":", "str", ",", "data", ",", "horizontal", ":", "bool", ",", "tait_bryan", ":", "bool", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Extract the first or third Euler angle from the two members of\n    the matrix which are positive constant times its sine and cosine.\n\n    Args:\n        axis: Axis label \"X\" or \"Y or \"Z\" for the angle we are finding.\n        other_axis: Axis label \"X\" or \"Y or \"Z\" for the middle axis in the\n            convention.\n        data: Rotation matrices as tensor of shape (..., 3, 3).\n        horizontal: Whether we are looking for the angle for the third axis,\n            which means the relevant entries are in the same row of the\n            rotation matrix. If not, they are in the same column.\n        tait_bryan: Whether the first and third axes in the convention differ.\n\n    Returns:\n        Euler Angles in radians for each matrix in data as a tensor\n        of shape (...).\n    \"\"\"", "\n", "\n", "i1", ",", "i2", "=", "{", "\"X\"", ":", "(", "2", ",", "1", ")", ",", "\"Y\"", ":", "(", "0", ",", "2", ")", ",", "\"Z\"", ":", "(", "1", ",", "0", ")", "}", "[", "axis", "]", "\n", "if", "horizontal", ":", "\n", "        ", "i2", ",", "i1", "=", "i1", ",", "i2", "\n", "", "even", "=", "(", "axis", "+", "other_axis", ")", "in", "[", "\"XY\"", ",", "\"YZ\"", ",", "\"ZX\"", "]", "\n", "if", "horizontal", "==", "even", ":", "\n", "        ", "return", "torch", ".", "atan2", "(", "data", "[", "...", ",", "i1", "]", ",", "data", "[", "...", ",", "i2", "]", ")", "\n", "", "if", "tait_bryan", ":", "\n", "        ", "return", "torch", ".", "atan2", "(", "-", "data", "[", "...", ",", "i2", "]", ",", "data", "[", "...", ",", "i1", "]", ")", "\n", "", "return", "torch", ".", "atan2", "(", "data", "[", "...", ",", "i2", "]", ",", "-", "data", "[", "...", ",", "i1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations._index_from_letter": [[140, 147], ["None"], "function", ["None"], ["", "def", "_index_from_letter", "(", "letter", ":", "str", ")", ":", "\n", "    ", "if", "letter", "==", "\"X\"", ":", "\n", "        ", "return", "0", "\n", "", "if", "letter", "==", "\"Y\"", ":", "\n", "        ", "return", "1", "\n", "", "if", "letter", "==", "\"Z\"", ":", "\n", "        ", "return", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.matrix_to_euler_angles": [[149, 189], ["transformations._index_from_letter", "transformations._index_from_letter", "torch.stack", "len", "ValueError", "ValueError", "ValueError", "torch.asin", "torch.acos", "transformations._angle_from_tan", "transformations._angle_from_tan", "ValueError", "matrix.size", "matrix.size"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.environment.transformations._index_from_letter", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations._index_from_letter", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations._angle_from_tan", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations._angle_from_tan"], ["", "", "def", "matrix_to_euler_angles", "(", "matrix", ",", "convention", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Convert rotations given as rotation matrices to Euler angles in radians.\n\n    Args:\n        matrix: Rotation matrices as tensor of shape (..., 3, 3).\n        convention: Convention string of three uppercase letters.\n\n    Returns:\n        Euler angles in radians as tensor of shape (..., 3).\n    \"\"\"", "\n", "if", "len", "(", "convention", ")", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\"Convention must have 3 letters.\"", ")", "\n", "", "if", "convention", "[", "1", "]", "in", "(", "convention", "[", "0", "]", ",", "convention", "[", "2", "]", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Invalid convention {convention}.\"", ")", "\n", "", "for", "letter", "in", "convention", ":", "\n", "        ", "if", "letter", "not", "in", "(", "\"X\"", ",", "\"Y\"", ",", "\"Z\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid letter {letter} in convention string.\"", ")", "\n", "", "", "if", "matrix", ".", "size", "(", "-", "1", ")", "!=", "3", "or", "matrix", ".", "size", "(", "-", "2", ")", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Invalid rotation matrix  shape f{matrix.shape}.\"", ")", "\n", "", "i0", "=", "_index_from_letter", "(", "convention", "[", "0", "]", ")", "\n", "i2", "=", "_index_from_letter", "(", "convention", "[", "2", "]", ")", "\n", "tait_bryan", "=", "i0", "!=", "i2", "\n", "if", "tait_bryan", ":", "\n", "        ", "central_angle", "=", "torch", ".", "asin", "(", "\n", "matrix", "[", "...", ",", "i0", ",", "i2", "]", "*", "(", "-", "1.0", "if", "i0", "-", "i2", "in", "[", "-", "1", ",", "2", "]", "else", "1.0", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "central_angle", "=", "torch", ".", "acos", "(", "matrix", "[", "...", ",", "i0", ",", "i0", "]", ")", "\n", "\n", "", "o", "=", "(", "\n", "_angle_from_tan", "(", "\n", "convention", "[", "0", "]", ",", "convention", "[", "1", "]", ",", "matrix", "[", "...", ",", "i2", "]", ",", "False", ",", "tait_bryan", "\n", ")", ",", "\n", "central_angle", ",", "\n", "_angle_from_tan", "(", "\n", "convention", "[", "2", "]", ",", "convention", "[", "1", "]", ",", "matrix", "[", "...", ",", "i0", ",", ":", "]", ",", "True", ",", "tait_bryan", "\n", ")", ",", "\n", ")", "\n", "return", "torch", ".", "stack", "(", "o", ",", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.init": [[17, 33], ["torch.eye().repeat", "torch.eye().repeat", "[].to", "[].to", "torch.eye", "torch.eye"], "function", ["None"], ["def", "init", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Get the initial observation, the ground-truth pose for the expert and initialize the agent's accumulator (identity).\n    \"\"\"", "\n", "# observation", "\n", "pcd_source", ",", "pcd_target", "=", "data", "[", "'points_src'", "]", "[", "...", ",", ":", "3", "]", ".", "to", "(", "DEVICE", ")", ",", "data", "[", "'points_ref'", "]", "[", "...", ",", ":", "3", "]", ".", "to", "(", "DEVICE", ")", "\n", "B", "=", "pcd_source", ".", "shape", "[", "0", "]", "\n", "\n", "# GT (for expert)", "\n", "pose_target", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "DEVICE", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ")", "\n", "pose_target", "[", ":", ",", ":", "3", ",", ":", "]", "=", "data", "[", "'transform_gt'", "]", "\n", "\n", "# initial estimates (identity, for student)", "\n", "pose_source", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "DEVICE", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ")", "\n", "\n", "return", "pcd_source", ",", "pcd_target", ",", "pose_source", ",", "pose_target", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.environment._action_to_step": [[35, 42], ["None"], "function", ["None"], ["", "def", "_action_to_step", "(", "axis_actions", ")", ":", "\n", "    ", "\"\"\"\n    Convert action ids to sign and step size.\n    \"\"\"", "\n", "step", "=", "ALL_STEPS", "[", "axis_actions", "]", "\n", "sign", "=", "(", "(", "axis_actions", "-", "NUM_STEPS", ">=", "0", ")", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "return", "sign", ",", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.step": [[44, 76], ["torch.arange().unsqueeze", "torch.zeros", "torch.zeros", "range", "environment.apply_trafo", "environment._action_to_step", "environment._action_to_step", "torch.eye().repeat", "environment.euler_angles_to_matrix", "torch.arange", "environment.euler_angles_to_matrix", "torch.eye"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.apply_trafo", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment._action_to_step", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment._action_to_step", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.euler_angles_to_matrix", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.euler_angles_to_matrix"], ["", "def", "step", "(", "source", ",", "actions", ",", "pose_source", ",", "disentangled", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Update the state (source and accumulator) using the given actions.\n    \"\"\"", "\n", "actions_t", ",", "actions_r", "=", "actions", "[", ":", ",", "0", "]", ",", "actions", "[", ":", ",", "1", "]", "\n", "indices", "=", "torch", ".", "arange", "(", "source", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# actions to transformations", "\n", "steps_t", "=", "torch", ".", "zeros", "(", "(", "actions", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "device", "=", "DEVICE", ")", "\n", "steps_r", "=", "torch", ".", "zeros", "(", "(", "actions", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "device", "=", "DEVICE", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "sign", ",", "step", "=", "_action_to_step", "(", "actions_t", "[", ":", ",", "i", "]", ")", "\n", "steps_t", "[", "indices", ",", "i", "]", "=", "step", "*", "sign", "\n", "\n", "sign", ",", "step", "=", "_action_to_step", "(", "actions_r", "[", ":", ",", "i", "]", ")", "\n", "steps_r", "[", "indices", ",", "i", "]", "=", "step", "*", "sign", "\n", "\n", "# accumulate transformations", "\n", "", "if", "disentangled", ":", "# eq. 7 in paper", "\n", "        ", "pose_source", "[", ":", ",", ":", "3", ",", ":", "3", "]", "=", "tra", ".", "euler_angles_to_matrix", "(", "steps_r", ",", "'XYZ'", ")", "@", "pose_source", "[", ":", ",", ":", "3", ",", ":", "3", "]", "\n", "pose_source", "[", ":", ",", ":", "3", ",", "3", "]", "+=", "steps_t", "\n", "", "else", ":", "# concatenate 4x4 matrices (eq. 5 in paper)", "\n", "        ", "pose_update", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "DEVICE", ")", ".", "repeat", "(", "pose_source", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "pose_update", "[", ":", ",", ":", "3", ",", ":", "3", "]", "=", "tra", ".", "euler_angles_to_matrix", "(", "steps_r", ",", "'XYZ'", ")", "\n", "pose_update", "[", ":", ",", ":", "3", ",", "3", "]", "=", "steps_t", "\n", "\n", "pose_source", "=", "pose_update", "@", "pose_source", "\n", "\n", "# update source with the accumulated transformation", "\n", "", "new_source", "=", "tra", ".", "apply_trafo", "(", "source", ",", "pose_source", ",", "disentangled", ")", "\n", "\n", "return", "new_source", ",", "pose_source", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.expert": [[78, 112], ["environment.matrix_to_euler_angles", "torch.cat", "torch.cat", "torch.cat", "pose_source[].transpose", "environment.expert._get_axis_action"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.matrix_to_euler_angles", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat"], ["", "def", "expert", "(", "pose_source", ",", "targets", ",", "mode", "=", "'steady'", ")", ":", "\n", "    ", "\"\"\"\n    Get the expert action in the current state.\n    \"\"\"", "\n", "# compute delta, eq. 10 in paper", "\n", "delta_t", "=", "targets", "[", ":", ",", ":", "3", ",", "3", "]", "-", "pose_source", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "delta_R", "=", "targets", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "pose_source", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", "2", ",", "1", ")", "# global accumulator", "\n", "delta_r", "=", "tra", ".", "matrix_to_euler_angles", "(", "delta_R", ",", "'XYZ'", ")", "\n", "\n", "def", "_get_axis_action", "(", "axis_delta", ",", "mode", "=", "'steady'", ")", ":", "\n", "        ", "lower_idx", "=", "(", "torch", ".", "bucketize", "(", "torch", ".", "abs", "(", "axis_delta", ")", ",", "POS_STEPS", ")", "-", "1", ")", ".", "clamp", "(", "0", ",", "NUM_STEPS", ")", "\n", "if", "mode", "==", "'steady'", ":", "\n", "            ", "nearest_idx", "=", "lower_idx", "\n", "", "elif", "mode", "==", "'greedy'", ":", "\n", "            ", "upper_idx", "=", "(", "lower_idx", "+", "1", ")", ".", "clamp", "(", "0", ",", "NUM_STEPS", ")", "\n", "lower_dist", "=", "torch", ".", "abs", "(", "torch", ".", "abs", "(", "axis_delta", ")", "-", "POS_STEPS", "[", "lower_idx", "]", ")", "\n", "upper_dist", "=", "torch", ".", "abs", "(", "POS_STEPS", "[", "upper_idx", "]", "-", "torch", ".", "abs", "(", "axis_delta", ")", ")", "\n", "nearest_idx", "=", "torch", ".", "where", "(", "lower_dist", "<", "upper_dist", ",", "lower_idx", ",", "upper_idx", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "# -- step idx to action", "\n", "", "axis_action", "=", "nearest_idx", "# [0, num_steps] -- 0 = NOP", "\n", "axis_action", "[", "axis_delta", "<", "0", "]", "*=", "-", "1", "# [-num_steps, num_steps + 1] -- 0 = NOP", "\n", "axis_action", "+=", "NUM_STEPS", "# [0, 2 * num_steps + 1 -- num_steps = NOP", "\n", "\n", "return", "axis_action", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "# find bounds per axis s.t. b- <= d <= b+", "\n", "", "action_t", "=", "torch", ".", "cat", "(", "[", "_get_axis_action", "(", "delta_t", "[", ":", ",", "i", "]", ",", "mode", ")", "for", "i", "in", "range", "(", "3", ")", "]", ",", "dim", "=", "2", ")", "\n", "action_r", "=", "torch", ".", "cat", "(", "[", "_get_axis_action", "(", "delta_r", "[", ":", ",", "i", "]", ",", "mode", ")", "for", "i", "in", "range", "(", "3", ")", "]", ",", "dim", "=", "2", ")", "\n", "action", "=", "torch", ".", "cat", "(", "[", "action_t", ",", "action_r", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.reward_step": [[114, 130], ["torch.mean().view", "torch.min", "environment.square_distance", "torch.mean", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.square_distance"], ["", "def", "reward_step", "(", "current_pcd_source", ",", "gt_pcd_source", ",", "prev_chamfer_dist", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Compute the dense step reward for the updated state.\n    \"\"\"", "\n", "dist", "=", "torch", ".", "min", "(", "tra", ".", "square_distance", "(", "current_pcd_source", ",", "gt_pcd_source", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "chamfer_dist", "=", "torch", ".", "mean", "(", "dist", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "prev_chamfer_dist", "is", "not", "None", ":", "\n", "        ", "better", "=", "(", "chamfer_dist", "<", "prev_chamfer_dist", ")", ".", "float", "(", ")", "*", "0.5", "\n", "same", "=", "(", "chamfer_dist", "==", "prev_chamfer_dist", ")", ".", "float", "(", ")", "*", "0.1", "\n", "worse", "=", "(", "chamfer_dist", ">", "prev_chamfer_dist", ")", ".", "float", "(", ")", "*", "0.6", "\n", "\n", "reward", "=", "better", "-", "worse", "-", "same", "\n", "return", "reward", ",", "chamfer_dist", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "zeros_like", "(", "chamfer_dist", ")", ",", "chamfer_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.reward_goal": [[132, 149], ["environment.matrix_to_euler_angles", "torch.abs().view", "torch.abs().view", "torch.cat().view", "pose_source[].transpose", "reward.mean", "torch.abs", "torch.abs", "torch.cat"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.matrix_to_euler_angles", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat"], ["", "", "def", "reward_goal", "(", "pose_source", ",", "targets", ",", "goal_th", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Compute the sparse goal reward for the updated state.\n    \"\"\"", "\n", "# SO(3) version, eq. 10 in paper", "\n", "delta_t", "=", "targets", "[", ":", ",", ":", "3", ",", "3", "]", "-", "pose_source", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "delta_R", "=", "pose_source", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", "2", ",", "1", ")", "@", "targets", "[", ":", ",", ":", "3", ",", ":", "3", "]", "\n", "delta_r", "=", "tra", ".", "matrix_to_euler_angles", "(", "delta_R", ",", "'XYZ'", ")", "\n", "\n", "delta_t", "=", "torch", ".", "abs", "(", "delta_t", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "delta_r", "=", "torch", ".", "abs", "(", "delta_r", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "deltas", "=", "torch", ".", "cat", "(", "[", "delta_t", ",", "delta_r", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "6", ",", "1", ")", "\n", "\n", "# in goal?", "\n", "reward", "=", "(", "deltas", "<", "cfg", ".", "STEPSIZES", "[", "goal_th", "]", ")", ".", "float", "(", ")", "\n", "# take mean over dimensions", "\n", "return", "reward", ".", "mean", "(", "dim", "=", "1", ")", "[", ":", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.metrics.compute_stats": [[10, 25], ["collections.defaultdict", "tqdm.tqdm", "metrics.summarize_metrics", "metrics.dict_all_to_device", "metrics.compute_metrics", "metrics_for_iter[].append"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.utility.metrics.summarize_metrics", "home.repos.pwc.inspect_result.dornik_reagent.utility.metrics.dict_all_to_device", "home.repos.pwc.inspect_result.dornik_reagent.utility.metrics.compute_metrics"], ["def", "compute_stats", "(", "pred_transforms", ",", "data_loader", ")", ":", "\n", "    ", "metrics_for_iter", "=", "defaultdict", "(", "list", ")", "\n", "num_processed", "=", "0", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ",", "leave", "=", "False", ")", ":", "\n", "        ", "dict_all_to_device", "(", "data", ",", "pred_transforms", ".", "device", ")", "\n", "\n", "batch_size", "=", "data", "[", "'points_src'", "]", ".", "shape", "[", "0", "]", "\n", "cur_pred_transforms", "=", "pred_transforms", "[", "num_processed", ":", "num_processed", "+", "batch_size", "]", "\n", "metrics", "=", "compute_metrics", "(", "data", ",", "cur_pred_transforms", ")", "\n", "for", "k", "in", "metrics", ":", "\n", "            ", "metrics_for_iter", "[", "k", "]", ".", "append", "(", "metrics", "[", "k", "]", ")", "\n", "", "num_processed", "+=", "batch_size", "\n", "", "summary_metrics", "=", "summarize_metrics", "(", "metrics_for_iter", ")", "\n", "\n", "return", "metrics_for_iter", ",", "summary_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.metrics.compute_metrics": [[27, 82], ["torch.eye().repeat", "gt_transforms[].transpose", "numpy.stack", "numpy.stack", "numpy.abs().mean", "torch.abs().mean", "torch.rad2deg", "concatenated[].norm", "torch.acos", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.sqrt().max", "torch.norm().mean", "[].mean", "torch.abs().mean.cpu().numpy", "torch.rad2deg.cpu().numpy", "concatenated[].norm.cpu().numpy", "chamfer_dist.cpu().numpy", "dist_add.cpu().numpy", "dist_adi.cpu().numpy", "torch.eye", "scipy.spatial.transform.Rotation.from_dcm().as_euler", "scipy.spatial.transform.Rotation.from_dcm().as_euler", "numpy.abs", "torch.abs", "torch.clamp", "environment.square_distance", "environment.square_distance", "torch.sqrt", "torch.norm", "torch.abs().mean.cpu", "torch.rad2deg.cpu", "concatenated[].norm.cpu", "chamfer_dist.cpu", "dist_add.cpu", "dist_adi.cpu", "gt_transforms[].view", "scipy.spatial.transform.Rotation.from_dcm", "scipy.spatial.transform.Rotation.from_dcm", "points_src.transpose", "points_raw.transpose", "torch.sqrt().min", "r.cpu().numpy", "r.cpu().numpy", "environment.square_distance().max", "torch.sqrt", "r.cpu", "r.cpu", "environment.square_distance", "environment.square_distance"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.square_distance", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.square_distance", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.square_distance", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.square_distance"], ["", "def", "compute_metrics", "(", "data", ",", "pred_transforms", ")", ":", "\n", "    ", "gt_transforms", "=", "data", "[", "'transform_gt'", "]", "\n", "igt_transforms", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "pred_transforms", ".", "device", ")", ".", "repeat", "(", "gt_transforms", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "igt_transforms", "[", ":", ",", ":", "3", ",", ":", "3", "]", "=", "gt_transforms", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", "2", ",", "1", ")", "\n", "igt_transforms", "[", ":", ",", ":", "3", ",", "3", "]", "=", "-", "(", "igt_transforms", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "gt_transforms", "[", ":", ",", ":", "3", ",", "3", "]", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "points_src", "=", "data", "[", "'points_src'", "]", "[", "...", ",", ":", "3", "]", "\n", "points_ref", "=", "data", "[", "'points_ref'", "]", "[", "...", ",", ":", "3", "]", "\n", "if", "'points_raw'", "in", "data", ":", "\n", "        ", "points_raw", "=", "data", "[", "'points_raw'", "]", "[", "...", ",", ":", "3", "]", "\n", "", "else", ":", "\n", "        ", "points_raw", "=", "points_ref", "\n", "\n", "# Euler angles, Individual translation errors (Deep Closest Point convention)", "\n", "", "r_gt_euler_deg", "=", "np", ".", "stack", "(", "[", "Rotation", ".", "from_dcm", "(", "r", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "as_euler", "(", "'xyz'", ",", "degrees", "=", "True", ")", "\n", "for", "r", "in", "gt_transforms", "[", ":", ",", ":", "3", ",", ":", "3", "]", "]", ")", "\n", "r_pred_euler_deg", "=", "np", ".", "stack", "(", "[", "Rotation", ".", "from_dcm", "(", "r", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "as_euler", "(", "'xyz'", ",", "degrees", "=", "True", ")", "\n", "for", "r", "in", "pred_transforms", "[", ":", ",", ":", "3", ",", ":", "3", "]", "]", ")", "\n", "t_gt", "=", "gt_transforms", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "t_pred", "=", "pred_transforms", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "r_mae", "=", "np", ".", "abs", "(", "r_gt_euler_deg", "-", "r_pred_euler_deg", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "t_mae", "=", "torch", ".", "abs", "(", "t_gt", "-", "t_pred", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "# Rotation, translation errors (isotropic, i.e. doesn't depend on error", "\n", "# direction, which is more representative of the actual error)", "\n", "concatenated", "=", "igt_transforms", "@", "pred_transforms", "\n", "rot_trace", "=", "concatenated", "[", ":", ",", "0", ",", "0", "]", "+", "concatenated", "[", ":", ",", "1", ",", "1", "]", "+", "concatenated", "[", ":", ",", "2", ",", "2", "]", "\n", "r_iso", "=", "torch", ".", "rad2deg", "(", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "0.5", "*", "(", "rot_trace", "-", "1", ")", ",", "min", "=", "-", "1.0", ",", "max", "=", "1.0", ")", ")", ")", "\n", "t_iso", "=", "concatenated", "[", ":", ",", ":", "3", ",", "3", "]", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# Modified Chamfer distance", "\n", "src_transformed", "=", "(", "pred_transforms", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "points_src", ".", "transpose", "(", "2", ",", "1", ")", ")", ".", "transpose", "(", "2", ",", "1", ")", "+", "pred_transforms", "[", ":", ",", ":", "3", ",", "3", "]", "[", ":", ",", "None", ",", ":", "]", "\n", "ref_clean", "=", "points_raw", "\n", "residual_transforms", "=", "pred_transforms", "@", "igt_transforms", "\n", "src_clean", "=", "(", "residual_transforms", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "points_raw", ".", "transpose", "(", "2", ",", "1", ")", ")", ".", "transpose", "(", "2", ",", "1", ")", "+", "residual_transforms", "[", ":", ",", ":", "3", ",", "3", "]", "[", ":", ",", "None", ",", ":", "]", "\n", "dist_src", "=", "torch", ".", "min", "(", "tra", ".", "square_distance", "(", "src_transformed", ",", "ref_clean", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "dist_ref", "=", "torch", ".", "min", "(", "tra", ".", "square_distance", "(", "points_ref", ",", "src_clean", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "chamfer_dist", "=", "torch", ".", "mean", "(", "dist_src", ",", "dim", "=", "1", ")", "+", "torch", ".", "mean", "(", "dist_ref", ",", "dim", "=", "1", ")", "\n", "\n", "# ADD/ADI", "\n", "src_diameters", "=", "torch", ".", "sqrt", "(", "tra", ".", "square_distance", "(", "src_clean", ",", "src_clean", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "dist_add", "=", "torch", ".", "norm", "(", "src_clean", "-", "ref_clean", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "/", "src_diameters", "\n", "dist_adi", "=", "torch", ".", "sqrt", "(", "tra", ".", "square_distance", "(", "ref_clean", ",", "src_clean", ")", ")", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "dim", "=", "-", "1", ")", "/", "src_diameters", "\n", "\n", "metrics", "=", "{", "\n", "'r_mae'", ":", "r_mae", ",", "\n", "'t_mae'", ":", "t_mae", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'r_iso'", ":", "r_iso", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'t_iso'", ":", "t_iso", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'chamfer_dist'", ":", "chamfer_dist", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'add'", ":", "dist_add", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'adi'", ":", "dist_adi", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "}", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.metrics.summarize_metrics": [[84, 99], ["numpy.hstack", "k.startswith", "numpy.arange", "numpy.array", "numpy.mean"], "function", ["None"], ["", "def", "summarize_metrics", "(", "metrics", ")", ":", "\n", "    ", "summarized", "=", "{", "}", "\n", "for", "k", "in", "metrics", ":", "\n", "        ", "metrics", "[", "k", "]", "=", "np", ".", "hstack", "(", "metrics", "[", "k", "]", ")", "\n", "if", "k", ".", "startswith", "(", "'ad'", ")", ":", "\n", "            ", "step_precision", "=", "1e-3", "\n", "max_precision", "=", "0.1", "\n", "precisions", "=", "np", ".", "arange", "(", "step_precision", ",", "max_precision", "+", "step_precision", ",", "step_precision", ")", "\n", "recalls", "=", "np", ".", "array", "(", "[", "(", "metrics", "[", "k", "]", "<=", "precision", ")", ".", "mean", "(", ")", "for", "precision", "in", "precisions", "]", ")", "\n", "# integrate area under precision-recall curve -- normalize to 100% (= area given by 1.0 * max_precision)", "\n", "summarized", "[", "k", "+", "'_auc10'", "]", "=", "(", "recalls", "*", "step_precision", ")", ".", "sum", "(", ")", "/", "max_precision", "\n", "", "else", ":", "\n", "            ", "summarized", "[", "k", "]", "=", "np", ".", "mean", "(", "metrics", "[", "k", "]", ")", "\n", "\n", "", "", "return", "summarized", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.metrics.dict_all_to_device": [[101, 111], ["isinstance", "isinstance", "tensor_dict[].to", "metrics.dict_all_to_device", "tensor_dict[].float"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.utility.metrics.dict_all_to_device"], ["", "def", "dict_all_to_device", "(", "tensor_dict", ",", "device", ")", ":", "\n", "    ", "\"\"\"Sends everything into a certain device\n    via RPMNet \"\"\"", "\n", "for", "k", "in", "tensor_dict", ":", "\n", "        ", "if", "isinstance", "(", "tensor_dict", "[", "k", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "tensor_dict", "[", "k", "]", "=", "tensor_dict", "[", "k", "]", ".", "to", "(", "device", ")", "\n", "if", "tensor_dict", "[", "k", "]", ".", "dtype", "==", "torch", ".", "double", ":", "\n", "                ", "tensor_dict", "[", "k", "]", "=", "tensor_dict", "[", "k", "]", ".", "float", "(", ")", "\n", "", "", "if", "isinstance", "(", "tensor_dict", "[", "k", "]", ",", "dict", ")", ":", "\n", "            ", "dict_all_to_device", "(", "tensor_dict", "[", "k", "]", ",", "device", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.CloudVisualizer.__init__": [[20, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "t_sleep", "=", "0.5", ",", "point_size", "=", "3", ",", "ortho", "=", "True", ")", ":", "\n", "        ", "self", ".", "t_sleep", "=", "t_sleep", "\n", "self", ".", "point_size", "=", "point_size", "\n", "self", ".", "ortho", "=", "ortho", "\n", "\n", "self", ".", "pcd_src_2d", ",", "self", ".", "pcd_tgt_2d", ",", "self", ".", "pcd_est", "=", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.CloudVisualizer.reset": [[27, 32], ["visualization.CloudVisualizer.project", "visualization.CloudVisualizer.project", "drawnow.drawnow.drawnow"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.CloudVisualizer.project", "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.CloudVisualizer.project"], ["", "def", "reset", "(", "self", ",", "pcd_src", ",", "pcd_tgt", ",", "pcd_est", ")", ":", "\n", "        ", "self", ".", "pcd_src_2d", "=", "self", ".", "project", "(", "pcd_src", "[", ":", ",", ":", "3", "]", ")", "\n", "self", ".", "pcd_tgt_2d", "=", "self", ".", "project", "(", "pcd_tgt", "[", ":", ",", ":", "3", "]", ")", "\n", "self", ".", "pcd_est", "=", "pcd_est", "[", ":", ",", ":", "3", "]", "\n", "drawnow", "(", "self", ".", "plot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.CloudVisualizer.update": [[33, 37], ["drawnow.drawnow.drawnow", "time.sleep"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "new_est", ")", ":", "\n", "        ", "self", ".", "pcd_est", "=", "new_est", "\n", "drawnow", "(", "self", ".", "plot", ")", "\n", "time", ".", "sleep", "(", "self", ".", "t_sleep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.CloudVisualizer.plot": [[38, 65], ["visualization.CloudVisualizer.project", "numpy.array", "matplotlib.get_cmap", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.yticks", "numpy.vstack().min", "numpy.vstack().max", "numpy.vstack", "numpy.vstack", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.array.max"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.CloudVisualizer.project"], ["", "def", "plot", "(", "self", ")", ":", "\n", "        ", "pcd_est_2d", "=", "self", ".", "project", "(", "self", ".", "pcd_est", ")", "\n", "\n", "# get scale and center", "\n", "yx_min", ",", "yx_max", "=", "np", ".", "vstack", "(", "[", "self", ".", "pcd_src_2d", ",", "self", ".", "pcd_tgt_2d", "]", ")", ".", "min", "(", "axis", "=", "0", ")", ",", "np", ".", "vstack", "(", "[", "self", ".", "pcd_src_2d", ",", "self", ".", "pcd_tgt_2d", "]", ")", ".", "max", "(", "axis", "=", "0", ")", "\n", "dimensions", "=", "yx_max", "-", "yx_min", "\n", "center", "=", "yx_min", "+", "dimensions", "/", "2", "\n", "\n", "# get appropriate x/y axes limits", "\n", "dimensions", "=", "np", ".", "array", "(", "[", "dimensions", ".", "max", "(", ")", "*", "1.1", "]", "*", "2", ")", "\n", "yx_min", "=", "center", "-", "dimensions", "/", "2", "\n", "yx_max", "=", "center", "+", "dimensions", "/", "2", "\n", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'tab20'", ")", "\n", "magenta", ",", "gray", ",", "cyan", "=", "cmap", ".", "colors", "[", "12", "]", ",", "cmap", ".", "colors", "[", "14", "]", ",", "cmap", ".", "colors", "[", "18", "]", "\n", "\n", "plt", ".", "scatter", "(", "self", ".", "pcd_src_2d", "[", ":", ",", "0", "]", ",", "self", ".", "pcd_src_2d", "[", ":", ",", "1", "]", ",", "c", "=", "np", ".", "asarray", "(", "magenta", ")", "[", "None", ",", ":", "]", ",", "\n", "s", "=", "self", ".", "point_size", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "scatter", "(", "self", ".", "pcd_tgt_2d", "[", ":", ",", "0", "]", ",", "self", ".", "pcd_tgt_2d", "[", ":", ",", "1", "]", ",", "c", "=", "np", ".", "asarray", "(", "gray", ")", "[", "None", ",", ":", "]", ",", "\n", "s", "=", "self", ".", "point_size", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "scatter", "(", "pcd_est_2d", "[", ":", ",", "0", "]", ",", "pcd_est_2d", "[", ":", ",", "1", "]", ",", "c", "=", "np", ".", "asarray", "(", "cyan", ")", "[", "None", ",", ":", "]", ",", "\n", "s", "=", "self", ".", "point_size", ",", "alpha", "=", "0.7", ")", "\n", "plt", ".", "xlim", "(", "[", "yx_min", "[", "0", "]", ",", "yx_max", "[", "0", "]", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "yx_min", "[", "1", "]", ",", "yx_max", "[", "1", "]", "]", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.CloudVisualizer.project": [[66, 76], ["numpy.hstack", "numpy.divide", "numpy.divide"], "methods", ["None"], ["", "def", "project", "(", "self", ",", "points", ")", ":", "\n", "        ", "Xs", ",", "Ys", ",", "Zs", "=", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", "+", "3.0", "# push back a little", "\n", "if", "self", ".", "ortho", ":", "\n", "            ", "xs", "=", "Xs", "\n", "ys", "=", "Ys", "\n", "", "else", ":", "\n", "            ", "xs", "=", "np", ".", "divide", "(", "Xs", ",", "Zs", ")", "\n", "ys", "=", "np", ".", "divide", "(", "Ys", ",", "Zs", ")", "\n", "", "points_2d", "=", "np", ".", "hstack", "(", "[", "xs", "[", ":", ",", "None", "]", ",", "ys", "[", ":", ",", "None", "]", "]", ")", "\n", "return", "points_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.CloudVisualizer.capture": [[77, 79], ["matplotlib.savefig"], "methods", ["None"], ["", "def", "capture", "(", "self", ",", "path", ")", ":", "\n", "        ", "plt", ".", "savefig", "(", "path", ",", "dpi", "=", "'figure'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.__init__": [[83, 92], ["bop_toolkit_lib.create_renderer", "print", "tqdm.tqdm.tqdm", "os.path.join", "visualization.OutlineVisualizer.ren.add_object"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_name", ",", "obj_ids", ",", "t_sleep", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "t_sleep", "=", "t_sleep", "\n", "\n", "# -- set-up renderer for mask propagation", "\n", "self", ".", "ren", "=", "renderer", ".", "create_renderer", "(", "640", ",", "480", ",", "renderer_type", "=", "'python'", ",", "mode", "=", "'depth'", ")", "\n", "print", "(", "\"  loading models into BOP renderer...\"", ")", "\n", "for", "obj_id", "in", "tqdm", "(", "obj_ids", ")", ":", "\n", "            ", "obj_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "LM_PATH", ",", "f\"models/obj_{obj_id:06d}.ply\"", ")", "\n", "self", ".", "ren", ".", "add_object", "(", "obj_id", ",", "obj_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.reset": [[93, 135], ["int", "torch.eye().repeat", "[].squeeze", "[].cpu().numpy", "[].clone().cpu", "visualization.OutlineVisualizer.get_contour", "visualization.OutlineVisualizer.get_contour", "[].cpu().numpy", "torch.eye().repeat", "[].float", "visualization.OutlineVisualizer.update", "torch.eye", "[].cpu", "[].clone", "[].cpu", "torch.eye().repeat", "torch.eye", "visualization.OutlineVisualizer.observation[].transpose", "torch.eye", "visualization.OutlineVisualizer.observation[].transpose", "torch.round"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.get_contour", "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.get_contour", "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.update"], ["", "", "def", "reset", "(", "self", ",", "data", ",", "rgb", ",", "split", "=", "'test'", ",", "show_init", "=", "True", ")", ":", "\n", "# --- prepare inputs", "\n", "        ", "self", ".", "split", "=", "split", "\n", "# ground truth", "\n", "self", ".", "obj_id", "=", "int", "(", "data", "[", "'gt'", "]", "[", "'obj_id'", "]", "[", "0", "]", ")", "\n", "self", ".", "gt_m2c", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "data", "[", "'est'", "]", ".", "device", ")", ".", "repeat", "(", "data", "[", "'est'", "]", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "self", ".", "gt_m2c", "[", ":", ",", ":", "3", ",", ":", "3", "]", "=", "data", "[", "'gt'", "]", "[", "'cam_R_m2c'", "]", "\n", "self", ".", "gt_m2c", "[", ":", ",", ":", "3", ",", "3", "]", "=", "data", "[", "'gt'", "]", "[", "'cam_t_m2c'", "]", ".", "squeeze", "(", ")", "\n", "self", ".", "K", "=", "data", "[", "'cam'", "]", "[", "'cam_K'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# normalization", "\n", "self", ".", "scale", "=", "data", "[", "'normalization'", "]", "[", ":", ",", "0", ",", "0", "]", "\n", "self", ".", "offset", "=", "data", "[", "'normalization'", "]", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "# RGB observation", "\n", "self", ".", "rgb", "=", "rgb", "\n", "self", ".", "observation", "=", "data", "[", "'points_src'", "]", "[", "...", ",", ":", "3", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "# --- prepare point clouds", "\n", "if", "split", "==", "'test'", ":", "# -> undo normalization", "\n", "            ", "self", ".", "observation", "[", "...", ",", ":", "3", "]", "=", "self", ".", "observation", "[", "...", ",", ":", "3", "]", "*", "self", ".", "scale", "[", ":", ",", "None", ",", "None", "]", "+", "self", ".", "offset", "[", ":", ",", "None", ",", ":", "]", "\n", "self", ".", "init_o2c", "=", "data", "[", "'est'", "]", "# observation to camera space (ground truth)", "\n", "self", ".", "init_m2c", "=", "data", "[", "'est'", "]", "# erroneous model to camera space (initial error)", "\n", "", "else", ":", "# -> undo error in normalized coords, then undo normalization", "\n", "            ", "self", ".", "observation", "[", "...", ",", ":", "3", "]", "=", "(", "data", "[", "'transform_gt'", "]", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "self", ".", "observation", "[", "...", ",", ":", "3", "]", ".", "transpose", "(", "2", ",", "1", ")", ")", ".", "transpose", "(", "2", ",", "1", ")", "+", "data", "[", "'transform_gt'", "]", "[", ":", ",", ":", "3", ",", "3", "]", "[", ":", ",", "None", ",", ":", "]", "\n", "self", ".", "observation", "[", "...", ",", ":", "3", "]", "=", "self", ".", "observation", "[", "...", ",", ":", "3", "]", "*", "self", ".", "scale", "[", ":", ",", "None", ",", "None", "]", "+", "self", ".", "offset", "[", ":", ",", "None", ",", ":", "]", "\n", "self", ".", "init_o2c", "=", "data", "[", "'est'", "]", "# observation to camera space (ground truth)", "\n", "# erroneous model to camera space (initial error)", "\n", "error", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "data", "[", "'est'", "]", ".", "device", ")", ".", "repeat", "(", "data", "[", "'est'", "]", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "error", "[", ":", ",", ":", "3", ",", ":", "]", "=", "data", "[", "'transform_gt'", "]", "\n", "error", "[", ":", ",", ":", "3", ",", "3", "]", "*=", "self", ".", "scale", "[", ":", ",", "None", "]", "\n", "self", ".", "init_m2c", "=", "data", "[", "'est'", "]", "@", "error", "\n", "\n", "# --- prepare outlines for plotting", "\n", "", "self", ".", "gt_contour", ",", "self", ".", "gt_center", ",", "self", ".", "gt_dimensions", "=", "self", ".", "get_contour", "(", "self", ".", "obj_id", ",", "self", ".", "gt_m2c", ")", "\n", "self", ".", "init_contour", ",", "_", ",", "_", "=", "self", ".", "get_contour", "(", "self", ".", "obj_id", ",", "self", ".", "init_m2c", ")", "\n", "init_o2i", "=", "data", "[", "'cam'", "]", "[", "'cam_K'", "]", ".", "float", "(", ")", "@", "self", ".", "init_o2c", "[", ":", ",", ":", "3", ",", ":", "]", "# to image space", "\n", "proj_src", "=", "(", "init_o2i", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "self", ".", "observation", "[", "...", ",", ":", "3", "]", ".", "transpose", "(", "2", ",", "1", ")", ")", ".", "transpose", "(", "2", ",", "1", ")", "+", "init_o2i", "[", ":", ",", ":", "3", ",", "3", "]", "[", ":", ",", "None", ",", ":", "]", "\n", "self", ".", "proj_src", "=", "torch", ".", "round", "(", "proj_src", "/", "proj_src", "[", "...", ",", "2", "]", "[", "...", ",", "None", "]", ")", "[", "0", ",", ":", ",", ":", "2", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "show_init", ":", "\n", "            ", "self", ".", "update", "(", "torch", ".", "eye", "(", "4", ",", "device", "=", "data", "[", "'est'", "]", ".", "device", ")", ".", "repeat", "(", "data", "[", "'est'", "]", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.update": [[136, 147], ["torch.eye().repeat", "est_init2m[].transpose", "drawnow.drawnow.drawnow", "time.sleep", "torch.eye", "est_init2m[].view"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "est_init2m", ")", ":", "\n", "# pose", "\n", "        ", "est_init2m", "[", ":", ",", ":", "3", ",", "3", "]", "*=", "self", ".", "scale", "[", ":", ",", "None", "]", "\n", "# equiv. to: est_m2c = metrics.invert_tensor(est_init2m @ metrics.invert_tensor(self.init_m2c))", "\n", "est_m2init", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "est_init2m", ".", "device", ")", ".", "repeat", "(", "est_init2m", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "est_m2init", "[", ":", ",", ":", "3", ",", ":", "3", "]", "=", "est_init2m", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", "2", ",", "1", ")", "\n", "est_m2init", "[", ":", ",", ":", "3", ",", "3", "]", "=", "-", "(", "est_m2init", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "est_init2m", "[", ":", ",", ":", "3", ",", "3", "]", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "est_m2c", "=", "self", ".", "init_m2c", "@", "est_m2init", "\n", "# plot", "\n", "drawnow", "(", "self", ".", "plot", ",", "est_m2c", "=", "est_m2c", ")", "\n", "time", ".", "sleep", "(", "self", ".", "t_sleep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.plot": [[148, 180], ["visualization.OutlineVisualizer.get_contour", "visualization.OutlineVisualizer.rgb.copy", "cv2.drawContours", "cv2.drawContours", "cv2.drawContours", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.scatter", "matplotlib.plot", "matplotlib.xlim", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.title", "matplotlib.axis", "visualization.OutlineVisualizer.gt_dimensions.max", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.get_contour", "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.plot"], ["", "def", "plot", "(", "self", ",", "est_m2c", ")", ":", "\n", "        ", "est_contour", ",", "_", ",", "_", "=", "self", ".", "get_contour", "(", "self", ".", "obj_id", ",", "est_m2c", ")", "\n", "\n", "magenta", ",", "gray", ",", "cyan", "=", "(", "1", ",", "0", ",", "1", ")", ",", "(", "0.7", ",", "0.7", ",", "0.7", ")", ",", "(", "0", ",", "0.9", ",", "1.0", ")", "\n", "\n", "vis", "=", "self", ".", "rgb", ".", "copy", "(", ")", "\n", "vis", "=", "cv", ".", "drawContours", "(", "vis", ",", "self", ".", "gt_contour", ",", "-", "1", ",", "gray", ",", "1", ",", "lineType", "=", "cv", ".", "LINE_AA", ")", "\n", "vis", "=", "cv", ".", "drawContours", "(", "vis", ",", "self", ".", "init_contour", ",", "-", "1", ",", "magenta", ",", "1", ",", "lineType", "=", "cv", ".", "LINE_AA", ")", "\n", "vis", "=", "cv", ".", "drawContours", "(", "vis", ",", "est_contour", ",", "-", "1", ",", "cyan", ",", "1", ",", "lineType", "=", "cv", ".", "LINE_AA", ")", "\n", "\n", "# crop", "\n", "focus", "=", "self", ".", "gt_center", "\n", "halfsize", "=", "self", ".", "gt_dimensions", ".", "max", "(", ")", "/", "2", "*", "1.2", "\n", "\n", "# plot", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "self", ".", "rgb", ")", "\n", "plt", ".", "scatter", "(", "self", ".", "proj_src", "[", ":", ",", "0", "]", ",", "self", ".", "proj_src", "[", ":", ",", "1", "]", ",", "c", "=", "np", ".", "asarray", "(", "magenta", ")", "[", "None", ",", ":", "]", ",", "s", "=", "2", ",", "alpha", "=", "0.2", ")", "\n", "plt", ".", "plot", "(", "[", "focus", "[", "1", "]", "-", "halfsize", ",", "focus", "[", "1", "]", "-", "halfsize", ",", "focus", "[", "1", "]", "+", "halfsize", ",", "focus", "[", "1", "]", "+", "halfsize", ",", "\n", "focus", "[", "1", "]", "-", "halfsize", "]", ",", "\n", "[", "focus", "[", "0", "]", "+", "halfsize", ",", "focus", "[", "0", "]", "-", "halfsize", ",", "focus", "[", "0", "]", "-", "halfsize", ",", "focus", "[", "0", "]", "+", "halfsize", ",", "\n", "focus", "[", "0", "]", "+", "halfsize", "]", ",", "\n", "'k-'", ",", "linewidth", "=", "2", ")", "\n", "plt", ".", "xlim", "(", "[", "80", ",", "640", "-", "80", "]", ")", "\n", "plt", ".", "title", "(", "\"Sampled points\"", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "vis", ")", "\n", "plt", ".", "xlim", "(", "[", "focus", "[", "1", "]", "-", "halfsize", ",", "focus", "[", "1", "]", "+", "halfsize", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "focus", "[", "0", "]", "+", "halfsize", ",", "focus", "[", "0", "]", "-", "halfsize", "]", ")", "\n", "plt", ".", "title", "(", "\"Pose estimate (zoomed-in)\"", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.get_contour": [[181, 191], ["cv2.findContours", "float", "float", "float", "float", "m2c[].cpu().numpy", "m2c[].cpu().numpy", "visualization.OutlineVisualizer.ren.render_object", "numpy.argwhere().min", "numpy.argwhere().max", "numpy.uint8", "m2c[].cpu", "m2c[].cpu", "numpy.argwhere", "numpy.argwhere"], "methods", ["None"], ["", "def", "get_contour", "(", "self", ",", "obj_id", ",", "m2c", ")", ":", "\n", "        ", "fx", ",", "fy", ",", "cx", ",", "cy", "=", "float", "(", "self", ".", "K", "[", "0", ",", "0", "]", ")", ",", "float", "(", "self", ".", "K", "[", "1", ",", "1", "]", ")", ",", "float", "(", "self", ".", "K", "[", "0", ",", "2", "]", ")", ",", "float", "(", "self", ".", "K", "[", "1", ",", "2", "]", ")", "\n", "R", ",", "t", "=", "m2c", "[", "0", ",", ":", "3", ",", ":", "3", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "m2c", "[", "0", ",", ":", "3", ",", "3", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "depth", "=", "self", ".", "ren", ".", "render_object", "(", "obj_id", ",", "R", ",", "t", ",", "fx", ",", "fy", ",", "cx", ",", "cy", ")", "[", "'depth'", "]", "\n", "yx_min", ",", "yx_max", "=", "np", ".", "argwhere", "(", "depth", ">", "0", ")", ".", "min", "(", "axis", "=", "0", ")", ",", "np", ".", "argwhere", "(", "depth", ">", "0", ")", ".", "max", "(", "axis", "=", "0", ")", "\n", "dimensions", "=", "yx_max", "-", "yx_min", "\n", "center", "=", "dimensions", "/", "2", "+", "yx_min", "\n", "contour", ",", "_", "=", "cv", ".", "findContours", "(", "np", ".", "uint8", "(", "depth", ">", "0", ")", ",", "cv", ".", "RETR_CCOMP", ",", "\n", "cv", ".", "CHAIN_APPROX_TC89_L1", ")", "\n", "return", "contour", ",", "center", ",", "dimensions", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.capture": [[192, 194], ["matplotlib.savefig"], "methods", ["None"], ["", "def", "capture", "(", "self", ",", "path", ")", ":", "\n", "        ", "plt", ".", "savefig", "(", "path", ",", "dpi", "=", "'figure'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.__init__": [[11, 23], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "logger.Logger.get_latest_run_id", "os.path.join", "os.makedirs", "torch.utils.tensorboard.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.get_latest_run_id"], ["def", "__init__", "(", "self", ",", "log_dir", ",", "log_name", ",", "reset_num_timesteps", "=", "True", ")", ":", "\n", "        ", "self", ".", "name_to_value", "=", "defaultdict", "(", "float", ")", "# values this iteration", "\n", "self", ".", "name_to_count", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "name_to_excluded", "=", "defaultdict", "(", "str", ")", "\n", "\n", "latest_run_id", "=", "self", ".", "get_latest_run_id", "(", "log_dir", ",", "log_name", ")", "\n", "if", "not", "reset_num_timesteps", ":", "\n", "# Continue training in the same directory", "\n", "            ", "latest_run_id", "-=", "1", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f\"{log_name}_{latest_run_id + 1}\"", ")", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.get_latest_run_id": [[24, 38], ["glob.glob", "path.split", "file_name.split", "ext.isdigit", "int", "int", "file_name.split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_latest_run_id", "(", "log_dir", ",", "log_name", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns the latest run number for the given log name and log path,\n        by finding the greatest number in the directories.\n        :return: latest run number\n        \"\"\"", "\n", "max_run_id", "=", "0", "\n", "for", "path", "in", "glob", ".", "glob", "(", "f\"{log_dir}/{log_name}_[0-9]*\"", ")", ":", "\n", "            ", "file_name", "=", "path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "ext", "=", "file_name", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "\n", "if", "log_name", "==", "\"_\"", ".", "join", "(", "file_name", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "1", "]", ")", "and", "ext", ".", "isdigit", "(", ")", "and", "int", "(", "ext", ")", ">", "max_run_id", ":", "\n", "                ", "max_run_id", "=", "int", "(", "ext", ")", "\n", "", "", "return", "max_run_id", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record": [[39, 50], ["None"], "methods", ["None"], ["", "def", "record", "(", "self", ",", "key", ",", "value", ",", "exclude", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Log a value of some diagnostic\n        Call this once for each diagnostic quantity, each iteration\n        If called many times, last value will be used.\n        :param key: save to log this key\n        :param value: save to log this value\n        :param exclude: outputs to be excluded\n        \"\"\"", "\n", "self", ".", "name_to_value", "[", "key", "]", "=", "value", "\n", "self", ".", "name_to_excluded", "[", "key", "]", "=", "exclude", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.dump": [[51, 58], ["logger.Logger.write", "logger.Logger.name_to_value.clear", "logger.Logger.name_to_count.clear", "logger.Logger.name_to_excluded.clear"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.write", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear"], ["", "def", "dump", "(", "self", ",", "step", "=", "0", ")", ":", "\n", "        ", "\"\"\"Write all of the diagnostics from the current iteration\"\"\"", "\n", "self", ".", "write", "(", "self", ".", "name_to_value", ",", "self", ".", "name_to_excluded", ",", "step", ")", "\n", "\n", "self", ".", "name_to_value", ".", "clear", "(", ")", "\n", "self", ".", "name_to_count", ".", "clear", "(", ")", "\n", "self", ".", "name_to_excluded", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.write": [[59, 71], ["zip", "logger.Logger.writer.flush", "sorted", "sorted", "isinstance", "isinstance", "key_values.items", "key_excluded.items", "logger.Logger.writer.add_scalar", "logger.Logger.writer.add_histogram"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "key_values", ",", "key_excluded", ",", "step", "=", "0", ")", ":", "\n", "\n", "        ", "for", "(", "key", ",", "value", ")", ",", "(", "_", ",", "excluded", ")", "in", "zip", "(", "sorted", "(", "key_values", ".", "items", "(", ")", ")", ",", "sorted", "(", "key_excluded", ".", "items", "(", ")", ")", ")", ":", "\n", "\n", "            ", "if", "isinstance", "(", "value", ",", "np", ".", "ScalarType", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ",", "step", ")", "\n", "\n", "", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_histogram", "(", "key", ",", "value", ",", "step", ")", "\n", "\n", "# Flush the output to the file", "\n", "", "", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.close": [[72, 77], ["logger.Logger.writer.close"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Closes the file\"\"\"", "\n", "if", "self", ".", "writer", ":", "\n", "            ", "self", ".", "writer", ".", "close", "(", ")", "\n", "self", ".", "writer", "=", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.dornik_reagent.registration.eval.evaluate": [[21, 108], ["agent.eval", "tqdm.tqdm", "prefetch_generator.BackgroundGenerator", "os.path.exists", "open().write", "torch.no_grad", "print", "torch.cat", "utility.compute_stats", "print", "print", "print", "print", "print", "print", "utility.visualization.CloudVisualizer", "utility.visualization.OutlineVisualizer", "len", "environment.environment.init", "range", "list", "open", "registration.action_from_logits", "environment.environment.step", "environment.transformations.to_global", "tra.to_global.clone().cpu", "torch.eye().repeat", "predictions_unnorm[].transpose", "enumerate", "torch.cat.append", "range", "test_loader.dataset.get_rgb", "utility.visualization.OutlineVisualizer.reset", "utility.visualization.OutlineVisualizer.reset", "utility.visualization.OutlineVisualizer.update", "agent", "agent", "open", "file.write", "int", "int", "source[].cpu().numpy", "target[].cpu().numpy", "current_source[].cpu().numpy", "current_source[].cpu().numpy", "utility.visualization.OutlineVisualizer.update", "utility.visualization.OutlineVisualizer.update", "tra.to_global.clone", "torch.eye", "environment.transformations.to_global().cpu", "current_source[].cpu().numpy", "source[].cpu", "target[].cpu", "current_source[].cpu", "current_source[].cpu", "predictions_unnorm[].view", "environment.transformations.to_global", "current_source[].cpu", "tra.to_global.clone", "estimate[].reshape", "estimate[].reshape", "float", "float"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.write", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.utility.metrics.compute_stats", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.init", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.action_from_logits", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.step", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.to_global", "home.repos.pwc.inspect_result.dornik_reagent.dataset.dataset.DatasetLinemod.get_rgb", "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.reset", "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.reset", "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.update", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.write", "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.update", "home.repos.pwc.inspect_result.dornik_reagent.utility.visualization.OutlineVisualizer.update", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.to_global"], ["def", "evaluate", "(", "agent", ",", "test_loader", ",", "dataset_name", ",", "bop_results_path", "=", "\"\"", ",", "visualize", "=", "False", ")", ":", "\n", "    ", "if", "visualize", ":", "\n", "        ", "if", "dataset_name", "!=", "\"lm\"", ":", "\n", "            ", "vis", "=", "CloudVisualizer", "(", "0.01", ")", "\n", "", "else", ":", "\n", "            ", "vis", "=", "OutlineVisualizer", "(", "\"lm\"", ",", "list", "(", "range", "(", "1", ",", "16", ")", ")", ",", "0.01", ")", "\n", "obj_idx", "=", "0", "\n", "\n", "", "", "agent", ".", "eval", "(", ")", "\n", "progress", "=", "tqdm", "(", "BackgroundGenerator", "(", "test_loader", ")", ",", "total", "=", "len", "(", "test_loader", ")", ")", "\n", "\n", "if", "bop_results_path", "!=", "\"\"", "and", "os", ".", "path", ".", "exists", "(", "bop_results_path", ")", ":", "\n", "        ", "open", "(", "bop_results_path", ",", "'w'", ")", ".", "write", "(", "\"\"", ")", "# BOP toolkit expects file to contain results of a single evaluation run", "\n", "\n", "", "predictions", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", "in", "progress", ":", "\n", "            ", "source", ",", "target", ",", "pose_source", ",", "pose_target", "=", "env", ".", "init", "(", "data", ")", "\n", "current_source", "=", "source", "\n", "\n", "if", "visualize", ":", "\n", "                ", "if", "dataset_name", "==", "\"lm\"", ":", "\n", "                    ", "rgb", "=", "test_loader", ".", "dataset", ".", "get_rgb", "(", "int", "(", "data", "[", "'scene'", "]", "[", "obj_idx", "]", ")", ",", "int", "(", "data", "[", "'frame'", "]", "[", "obj_idx", "]", ")", ")", "\n", "vis", ".", "reset", "(", "data", ",", "rgb", ",", "split", "=", "\"test\"", ")", "\n", "", "else", ":", "\n", "                    ", "vis", ".", "reset", "(", "source", "[", "0", ",", ":", ",", ":", "3", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target", "[", "0", ",", ":", ",", ":", "3", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "current_source", "[", "0", ",", ":", ",", ":", "3", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "vis", ".", "update", "(", "current_source", "[", "0", ",", ":", ",", ":", "3", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "for", "step", "in", "range", "(", "cfg", ".", "ITER_EVAL", ")", ":", "\n", "                ", "if", "cfg", ".", "BENCHMARK", ":", "\n", "# re-use target embedding from first step (faster)", "\n", "                    ", "state_emb", ",", "action_logit", ",", "state_value", ",", "target", "=", "agent", "(", "current_source", ",", "target", ")", "\n", "", "else", ":", "\n", "                    ", "state_emb", ",", "action_logit", ",", "state_value", ",", "_", "=", "agent", "(", "current_source", ",", "target", ")", "\n", "", "actions", "=", "util_model", ".", "action_from_logits", "(", "action_logit", ",", "deterministic", "=", "True", ")", "\n", "current_source", ",", "pose_source", "=", "env", ".", "step", "(", "source", ",", "actions", ",", "pose_source", ",", "cfg", ".", "DISENTANGLED", ")", "\n", "\n", "if", "visualize", ":", "\n", "                    ", "if", "dataset_name", "==", "\"lm\"", ":", "\n", "                        ", "vis", ".", "update", "(", "tra", ".", "to_global", "(", "pose_source", ".", "clone", "(", ")", ",", "source", ")", ".", "cpu", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "vis", ".", "update", "(", "current_source", "[", "0", ",", ":", ",", ":", "3", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "", "if", "cfg", ".", "DISENTANGLED", ":", "\n", "                ", "pose_source", "=", "tra", ".", "to_global", "(", "pose_source", ",", "source", ")", "\n", "\n", "", "if", "dataset_name", "==", "\"lm\"", ":", "\n", "# undo normalization", "\n", "                ", "predictions_unnorm", "=", "pose_source", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "predictions_unnorm", "[", ":", ",", ":", "3", ",", "3", "]", "*=", "data", "[", "'normalization'", "]", "[", ":", ",", "0", ",", "0", "]", "[", ":", ",", "None", "]", "\n", "# apply refinement to initial estimate to get the full model-to-camera estimation", "\n", "#   note: prediction is from initial pose to model space", "\n", "init_i2c", "=", "data", "[", "'est'", "]", "\n", "prediction_m2i", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "\"cpu\"", ")", ".", "repeat", "(", "pose_source", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "prediction_m2i", "[", ":", ",", ":", "3", ",", ":", "3", "]", "=", "predictions_unnorm", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", "2", ",", "1", ")", "\n", "prediction_m2i", "[", ":", ",", ":", "3", ",", "3", "]", "=", "-", "(", "prediction_m2i", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "predictions_unnorm", "[", ":", ",", ":", "3", ",", "3", "]", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "estimates_m2c", "=", "init_i2c", "@", "prediction_m2i", "\n", "# save in BOP format", "\n", "estimates_bop", "=", "\"\"", "\n", "for", "i_est", ",", "estimate", "in", "enumerate", "(", "estimates_m2c", ")", ":", "\n", "                    ", "scene_id", ",", "im_id", ",", "obj_id", "=", "data", "[", "'scene'", "]", "[", "i_est", "]", ",", "data", "[", "'frame'", "]", "[", "i_est", "]", ",", "data", "[", "'gt'", "]", "[", "'obj_id'", "]", "[", "i_est", "]", "\n", "conf", ",", "duration", "=", "1.0", ",", "0.0", "# no confidence estimated, duration would need to be for single frame", "\n", "estimates_bop", "+=", "f\"{scene_id},{im_id},{obj_id},{conf:0.3f},\"", "f\"{' '.join([f'{float(v):0.6f}' for v in estimate[:3, :3].reshape(-1)])},\"", "f\"{' '.join([f'{float(v):0.6f}' for v in estimate[:3, 3].reshape(-1)])},\"", "f\"{duration:0.3f}\\n\"", "\n", "", "with", "open", "(", "bop_results_path", ",", "'a'", ")", "as", "file", ":", "\n", "                    ", "file", ".", "write", "(", "estimates_bop", ")", "\n", "", "", "else", ":", "\n", "                ", "predictions", ".", "append", "(", "pose_source", ")", "\n", "\n", "# COMPUTE STATISTICS", "\n", "", "", "", "if", "dataset_name", "==", "\"lm\"", ":", "\n", "        ", "print", "(", "f\"Stored predictions in BOP format to {bop_results_path}.\"", ")", "\n", "", "else", ":", "\n", "        ", "predictions", "=", "torch", ".", "cat", "(", "predictions", ")", "\n", "eval_metrics", ",", "summary_metrics", "=", "metrics", ".", "compute_stats", "(", "predictions", ",", "data_loader", "=", "test_loader", ")", "\n", "\n", "# log test metrics", "\n", "print", "(", "f\"MAE R: {summary_metrics['r_mae']:0.2f}\"", ")", "\n", "print", "(", "f\"MAE t: {summary_metrics['t_mae']:0.3f}\"", ")", "\n", "print", "(", "f\"ISO R: {summary_metrics['r_iso']:0.2f}\"", ")", "\n", "print", "(", "f\"ISO t: {summary_metrics['t_iso']:0.3f}\"", ")", "\n", "print", "(", "f\"ADI AUC: {(summary_metrics['adi_auc10'] * 100):0.1f}%\"", ")", "\n", "print", "(", "f\"CD: {summary_metrics['chamfer_dist'] * 1000:0.2f}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.train.train": [[29, 190], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.random.get_state", "environment.buffer.Buffer", "environment.buffer.Buffer.start_trajectory", "range", "agent.parameters", "print", "agent.train", "numpy.random.set_state", "tqdm.tqdm", "torch.optim.lr_scheduler.StepLR.step", "numpy.random.get_state", "logger.dump", "prefetch_generator.BackgroundGenerator", "environment.buffer.Buffer.start_trajectory", "train.evaluate", "train.evaluate", "print", "registration.save", "len", "torch.no_grad", "torch.no_grad", "environment.environment.init", "range", "final_rewards.append", "len", "environment.buffer.Buffer.get_samples", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.record", "logger.record", "logger.record", "logger.dump", "environment.buffer.Buffer.clear", "torch.optim.Adam.state_dict", "environment.transformations.to_disentangled", "environment.environment.reward_goal", "environment.environment.expert", "agent", "registration.action_from_logits", "registration.action_stats", "environment.environment.step", "environment.buffer.Buffer.log_step", "train_rewards.append", "torch.zeros().to.view", "agent", "registration.action_stats", "torch.cross_entropy", "torch.cross_entropy", "torch.optim.Adam.zero_grad", "losses_bc.append", "loss.backward", "torch.optim.Adam.step", "logger.record", "numpy.mean", "float", "float", "environment.transformations.apply_trafo", "environment.environment.reward_step", "environment.environment.reward_goal", "torch.zeros().to.view", "new_action_logit[].view", "expert_actions[].reshape", "new_action_logit[].view", "expert_actions[].reshape", "torch.exp().view", "torch.exp().view", "torch.max.mean", "new_action_entropy.mean", "clone_loss.item", "losses_ppo.append", "numpy.mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "environment.environment.reward_step", "torch.zeros().to", "torch.zeros().to", "torch.min().mean", "torch.min().mean", "torch.max", "torch.max", "ppo_loss.item", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.min", "torch.min", "new_values.view", "values_clipped.view", "advantages.repeat", "torch.exp().view.clamp", "advantages.repeat"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.start_trajectory", "home.repos.pwc.inspect_result.dornik_reagent.registration.train.train", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.step", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.dump", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.start_trajectory", "home.repos.pwc.inspect_result.dornik_reagent.registration.train.evaluate", "home.repos.pwc.inspect_result.dornik_reagent.registration.train.evaluate", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.save", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.init", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.get_samples", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.dump", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.clear", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.to_disentangled", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.reward_goal", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.expert", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.action_from_logits", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.action_stats", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.step", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.Buffer.log_step", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.action_stats", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.step", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.apply_trafo", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.reward_step", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.reward_goal", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.reward_step", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat"], ["def", "train", "(", "agent", ",", "logger", ",", "dataset", ",", "noise_type", ",", "epochs", ",", "lr", ",", "lr_step", ",", "alpha", ",", "model_path", ",", "reward_mode", "=", "\"\"", ")", ":", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "agent", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "amsgrad", "=", "True", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "lr_step", ",", "0.5", ")", "\n", "\n", "Dataset", "=", "DatasetModelnet40", "if", "dataset", "==", "\"m40\"", "else", "DatasetLinemod", "\n", "train_dataset", "=", "Dataset", "(", "\"train\"", ",", "noise_type", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfg", ".", "BATCH_SIZE", ",", "shuffle", "=", "True", ")", "\n", "val_dataset", "=", "Dataset", "(", "\"val\"", ",", "noise_type", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "cfg", ".", "BATCH_SIZE", ",", "shuffle", "=", "False", ")", "\n", "test_dataset", "=", "Dataset", "(", "\"test\"", "if", "dataset", "==", "\"m40\"", "else", "\"eval\"", ",", "noise_type", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "cfg", ".", "BATCH_SIZE", ",", "shuffle", "=", "False", ")", "\n", "\n", "RANDOM_STATE", "=", "np", ".", "random", ".", "get_state", "(", ")", "# otherwise loader produces deterministic samples after iter 1", "\n", "losses_bc", ",", "losses_ppo", ",", "train_rewards", ",", "final_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "episode", "=", "0", "# for loss logging (not using epoch)", "\n", "best_chamfer", "=", "np", ".", "infty", "\n", "\n", "buffer", "=", "Buffer", "(", ")", "\n", "buffer", ".", "start_trajectory", "(", ")", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "print", "(", "f\"Epoch {epoch}\"", ")", "\n", "\n", "# -- train", "\n", "agent", ".", "train", "(", ")", "\n", "np", ".", "random", ".", "set_state", "(", "RANDOM_STATE", ")", "\n", "\n", "progress", "=", "tqdm", "(", "BackgroundGenerator", "(", "train_loader", ")", ",", "total", "=", "len", "(", "train_loader", ")", ")", "\n", "for", "data", "in", "progress", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# per sample, generate a full trajectory", "\n", "                ", "source", ",", "target", ",", "pose_source", ",", "pose_target", "=", "env", ".", "init", "(", "data", ")", "\n", "\n", "if", "cfg", ".", "DISENTANGLED", ":", "\n", "                    ", "pose_target", "=", "tra", ".", "to_disentangled", "(", "pose_target", ",", "source", ")", "\n", "", "current_source", "=", "source", "\n", "if", "reward_mode", "==", "\"goal\"", ":", "\n", "                    ", "reward", "=", "env", ".", "reward_goal", "(", "pose_source", ",", "pose_target", ")", "\n", "", "elif", "reward_mode", "==", "\"step\"", ":", "\n", "                    ", "gt_pcd_source", "=", "tra", ".", "apply_trafo", "(", "current_source", ",", "pose_target", ",", "disentangled", "=", "cfg", ".", "DISENTANGLED", ")", "\n", "_", ",", "prev_chamfer", "=", "env", ".", "reward_step", "(", "current_source", ",", "gt_pcd_source", ")", "\n", "\n", "# STAGE 1: generate trajectories", "\n", "", "for", "step", "in", "range", "(", "cfg", ".", "ITER_TRAIN", ")", ":", "\n", "# expert prediction", "\n", "                    ", "expert_action", "=", "env", ".", "expert", "(", "pose_source", ",", "pose_target", ",", "mode", "=", "cfg", ".", "EXPERT_MODE", ")", "\n", "\n", "# student prediction -- stochastic policy", "\n", "state_emb", ",", "action_logit", ",", "state_value", ",", "_", "=", "agent", "(", "current_source", ",", "target", ")", "\n", "\n", "action", "=", "util_model", ".", "action_from_logits", "(", "action_logit", ",", "deterministic", "=", "False", ")", "\n", "action_logprob", ",", "action_entropy", "=", "util_model", ".", "action_stats", "(", "action_logit", ",", "action", ")", "\n", "\n", "# step environment and get reward", "\n", "new_source", ",", "pose_source", "=", "env", ".", "step", "(", "source", ",", "action", ",", "pose_source", ",", "cfg", ".", "DISENTANGLED", ")", "\n", "if", "reward_mode", "==", "\"goal\"", ":", "\n", "                        ", "reward", "=", "env", ".", "reward_goal", "(", "pose_source", ",", "pose_target", ")", "\n", "", "elif", "reward_mode", "==", "\"step\"", ":", "\n", "                        ", "reward", ",", "prev_chamfer", "=", "env", ".", "reward_step", "(", "new_source", ",", "gt_pcd_source", ",", "prev_chamfer", ")", "\n", "", "else", ":", "\n", "                        ", "reward", "=", "torch", ".", "zeros", "(", "(", "pose_source", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "# log trajectory", "\n", "", "buffer", ".", "log_step", "(", "[", "current_source", ",", "target", "]", ",", "state_value", ",", "reward", ",", "\n", "expert_action", ",", "\n", "action", ",", "action_logit", ",", "action_logprob", ")", "\n", "\n", "current_source", "=", "new_source", "\n", "\n", "train_rewards", ".", "append", "(", "reward", ".", "view", "(", "-", "1", ")", ")", "\n", "", "final_rewards", ".", "append", "(", "reward", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "if", "len", "(", "buffer", ")", "==", "cfg", ".", "NUM_TRAJ", ":", "\n", "# STAGE 2: policy (and value estimator) update using BC (and PPO)", "\n", "\n", "# convert buffer to tensor of samples (also computes return and advantage over trajectories)", "\n", "                ", "samples", "=", "buffer", ".", "get_samples", "(", ")", "\n", "ppo_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "*", "samples", ")", "\n", "ppo_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "ppo_dataset", ",", "batch_size", "=", "cfg", ".", "BATCH_SIZE", ",", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "# sample batches from buffer and update", "\n", "for", "batch", "in", "ppo_loader", ":", "\n", "                    ", "sources", ",", "targets", ",", "expert_actions", ",", "state_values", ",", "actions", ",", "action_logits", ",", "action_logprobs", ",", "returns", ",", "advantages", "=", "batch", "\n", "\n", "# -- predict using current policy", "\n", "new_state_emb", ",", "new_action_logit", ",", "new_values", ",", "_", "=", "agent", "(", "sources", ",", "targets", ")", "\n", "new_action_logprob", ",", "new_action_entropy", "=", "util_model", ".", "action_stats", "(", "new_action_logit", ",", "actions", ")", "\n", "\n", "# -- clone term", "\n", "loss_translation", "=", "F", ".", "cross_entropy", "(", "new_action_logit", "[", "0", "]", ".", "view", "(", "-", "1", ",", "11", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "expert_actions", "[", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "loss_rotation", "=", "F", ".", "cross_entropy", "(", "new_action_logit", "[", "1", "]", ".", "view", "(", "-", "1", ",", "11", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "expert_actions", "[", ":", ",", "1", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "clone_loss", "=", "(", "loss_translation", "+", "loss_rotation", ")", "/", "2", "\n", "\n", "if", "alpha", ">", "0", ":", "\n", "# -- policy term", "\n", "# ratio: lp > prev_lp --> probability of selecting that action increased", "\n", "                        ", "ratio", "=", "torch", ".", "exp", "(", "new_action_logprob", "-", "action_logprobs", ")", ".", "view", "(", "-", "1", ",", "6", ")", "\n", "policy_loss", "=", "-", "torch", ".", "min", "(", "ratio", "*", "advantages", ".", "repeat", "(", "1", ",", "6", ")", ",", "\n", "ratio", ".", "clamp", "(", "1", "-", "cfg", ".", "CLIP_EPS", ",", "\n", "1", "+", "cfg", ".", "CLIP_EPS", ")", "*", "advantages", ".", "repeat", "(", "1", ",", "6", ")", ")", ".", "mean", "(", ")", "\n", "\n", "# -- value term", "\n", "value_loss", "=", "(", "new_values", ".", "view", "(", "-", "1", ",", "1", ")", "-", "returns", ")", ".", "pow", "(", "2", ")", "\n", "if", "cfg", ".", "CLIP_VALUE", ":", "\n", "                            ", "values_clipped", "=", "state_values", "+", "(", "new_values", "-", "state_values", ")", ".", "clamp", "(", "-", "cfg", ".", "CLIP_EPS", ",", "cfg", ".", "CLIP_EPS", ")", "\n", "losses_v_clipped", "=", "(", "values_clipped", ".", "view", "(", "-", "1", ",", "1", ")", "-", "returns", ")", ".", "pow", "(", "2", ")", "\n", "value_loss", "=", "torch", ".", "max", "(", "value_loss", ",", "losses_v_clipped", ")", "\n", "", "value_loss", "=", "value_loss", ".", "mean", "(", ")", "\n", "\n", "# -- entropy term", "\n", "entropy_loss", "=", "new_action_entropy", ".", "mean", "(", ")", "\n", "\n", "# -- update", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "clone_loss", "\n", "losses_bc", ".", "append", "(", "clone_loss", ".", "item", "(", ")", ")", "\n", "if", "alpha", ">", "0", ":", "\n", "                        ", "ppo_loss", "=", "policy_loss", "+", "value_loss", "*", "cfg", ".", "C_VALUE", "-", "entropy_loss", "*", "cfg", ".", "C_ENTROPY", "\n", "loss", "+=", "ppo_loss", "*", "alpha", "\n", "losses_ppo", ".", "append", "(", "ppo_loss", ".", "item", "(", ")", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# logging", "\n", "", "if", "alpha", ">", "0", ":", "\n", "                    ", "logger", ".", "record", "(", "\"train/ppo\"", ",", "np", ".", "mean", "(", "losses_ppo", ")", ")", "\n", "", "logger", ".", "record", "(", "\"train/bc\"", ",", "np", ".", "mean", "(", "losses_bc", ")", ")", "\n", "logger", ".", "record", "(", "\"train/reward\"", ",", "float", "(", "torch", ".", "cat", "(", "train_rewards", ",", "dim", "=", "0", ")", ".", "mean", "(", ")", ")", ")", "\n", "logger", ".", "record", "(", "\"train/final_reward\"", ",", "float", "(", "torch", ".", "cat", "(", "final_rewards", ",", "dim", "=", "0", ")", ".", "mean", "(", ")", ")", ")", "\n", "logger", ".", "dump", "(", "step", "=", "episode", ")", "\n", "\n", "# reset", "\n", "losses_bc", ",", "losses_ppo", ",", "train_rewards", ",", "final_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "buffer", ".", "clear", "(", ")", "\n", "episode", "+=", "1", "\n", "\n", "", "buffer", ".", "start_trajectory", "(", ")", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "RANDOM_STATE", "=", "np", ".", "random", ".", "get_state", "(", ")", "# evaluation sets seeds again -- keep random state of the training stage", "\n", "\n", "# -- test", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "            ", "chamfer_val", "=", "evaluate", "(", "agent", ",", "logger", ",", "val_loader", ",", "prefix", "=", "'val'", ")", "\n", "", "if", "test_loader", "is", "not", "None", ":", "\n", "            ", "chamfer_test", "=", "evaluate", "(", "agent", ",", "logger", ",", "test_loader", ")", "\n", "\n", "", "if", "chamfer_test", "<=", "best_chamfer", ":", "\n", "            ", "print", "(", "f\"new best: {chamfer_test}\"", ")", "\n", "best_chamfer", "=", "chamfer_test", "\n", "infos", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "util_model", ".", "save", "(", "agent", ",", "f\"{model_path}.zip\"", ",", "infos", ")", "\n", "", "logger", ".", "dump", "(", "step", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.train.evaluate": [[192, 237], ["agent.eval", "tqdm.tqdm", "torch.cat", "torch.cat", "utility.compute_stats", "isinstance", "prefetch_generator.BackgroundGenerator", "torch.no_grad", "torch.no_grad", "logger.record", "logger.record", "logger.record", "logger.record", "logger.record", "logger.record", "logger.record", "logger.record", "len", "environment.environment.init", "range", "torch.cat.append", "environment.transformations.to_disentangled", "environment.environment.expert", "agent", "registration.action_from_logits", "torch.cross_entropy", "torch.cross_entropy", "val_losses.append", "environment.environment.step", "environment.transformations.to_global", "action_logit[].view", "expert_action[].reshape", "action_logit[].view", "expert_action[].reshape"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.utility.metrics.compute_stats", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.utility.logger.Logger.record", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.init", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.to_disentangled", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.expert", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.action_from_logits", "home.repos.pwc.inspect_result.dornik_reagent.environment.environment.step", "home.repos.pwc.inspect_result.dornik_reagent.environment.transformations.to_global"], ["", "", "def", "evaluate", "(", "agent", ",", "logger", ",", "loader", ",", "prefix", "=", "'test'", ")", ":", "\n", "    ", "agent", ".", "eval", "(", ")", "\n", "progress", "=", "tqdm", "(", "BackgroundGenerator", "(", "loader", ")", ",", "total", "=", "len", "(", "loader", ")", ")", "\n", "predictions", "=", "[", "]", "\n", "val_losses", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", "in", "progress", ":", "\n", "            ", "source", ",", "target", ",", "pose_source", ",", "pose_target", "=", "env", ".", "init", "(", "data", ")", "\n", "if", "cfg", ".", "DISENTANGLED", ":", "\n", "                ", "pose_target", "=", "tra", ".", "to_disentangled", "(", "pose_target", ",", "source", ")", "\n", "\n", "", "current_source", "=", "source", "\n", "for", "step", "in", "range", "(", "cfg", ".", "ITER_EVAL", ")", ":", "\n", "                ", "expert_action", "=", "env", ".", "expert", "(", "pose_source", ",", "pose_target", ",", "mode", "=", "cfg", ".", "EXPERT_MODE", ")", "\n", "\n", "state_emb", ",", "action_logit", ",", "_", ",", "_", "=", "agent", "(", "current_source", ",", "target", ")", "\n", "action", "=", "util_model", ".", "action_from_logits", "(", "action_logit", ",", "deterministic", "=", "True", ")", "\n", "\n", "loss_translation", "=", "F", ".", "cross_entropy", "(", "action_logit", "[", "0", "]", ".", "view", "(", "-", "1", ",", "11", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "expert_action", "[", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "loss_rotation", "=", "F", ".", "cross_entropy", "(", "action_logit", "[", "1", "]", ".", "view", "(", "-", "1", ",", "11", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "expert_action", "[", ":", ",", "1", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "val_losses", ".", "append", "(", "(", "loss_translation", "+", "loss_rotation", ")", ".", "item", "(", ")", "/", "2", ")", "\n", "\n", "current_source", ",", "pose_source", "=", "env", ".", "step", "(", "source", ",", "action", ",", "pose_source", ",", "cfg", ".", "DISENTANGLED", ")", "\n", "", "if", "cfg", ".", "DISENTANGLED", ":", "\n", "                ", "pose_source", "=", "tra", ".", "to_global", "(", "pose_source", ",", "source", ")", "\n", "", "predictions", ".", "append", "(", "pose_source", ")", "\n", "\n", "", "", "predictions", "=", "torch", ".", "cat", "(", "predictions", ")", "\n", "_", ",", "summary_metrics", "=", "metrics", ".", "compute_stats", "(", "predictions", ",", "data_loader", "=", "loader", ")", "\n", "\n", "# log test metrics", "\n", "if", "isinstance", "(", "loader", ".", "dataset", ",", "DatasetLinemod", ")", ":", "\n", "        ", "logger", ".", "record", "(", "f\"{prefix}/add\"", ",", "summary_metrics", "[", "'add'", "]", ")", "\n", "logger", ".", "record", "(", "f\"{prefix}/adi\"", ",", "summary_metrics", "[", "'adi'", "]", ")", "\n", "return", "summary_metrics", "[", "'add'", "]", "\n", "", "else", ":", "\n", "        ", "logger", ".", "record", "(", "f\"{prefix}/mae-r\"", ",", "summary_metrics", "[", "'r_mae'", "]", ")", "\n", "logger", ".", "record", "(", "f\"{prefix}/mae-t\"", ",", "summary_metrics", "[", "'t_mae'", "]", ")", "\n", "logger", ".", "record", "(", "f\"{prefix}/iso-r\"", ",", "summary_metrics", "[", "'r_iso'", "]", ")", "\n", "logger", ".", "record", "(", "f\"{prefix}/iso-t\"", ",", "summary_metrics", "[", "'t_iso'", "]", ")", "\n", "logger", ".", "record", "(", "f\"{prefix}/chamfer\"", ",", "summary_metrics", "[", "'chamfer_dist'", "]", ")", "\n", "logger", ".", "record", "(", "f\"{prefix}/adi-auc\"", ",", "summary_metrics", "[", "'adi_auc10'", "]", "*", "100", ")", "\n", "return", "summary_metrics", "[", "'chamfer_dist'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.Agent.__init__": [[12, 17], ["torch.Module.__init__", "model.StateEmbed", "model.ActorCriticHead"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model.ActorCriticHead.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "state_emb", "=", "StateEmbed", "(", ")", "\n", "self", ".", "actor_critic", "=", "ActorCriticHead", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.Agent.forward": [[18, 30], ["model.Agent.state_emb", "model.Agent.actor_critic", "value.view.view.view", "action[].view", "action[].view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ",", "tgt", ")", ":", "\n", "# O(src, tgt) -> S", "\n", "        ", "state", ",", "emb_tgt", "=", "self", ".", "state_emb", "(", "src", ",", "tgt", ")", "\n", "# S -> a, v", "\n", "action", ",", "value", "=", "self", ".", "actor_critic", "(", "state", ")", "\n", "\n", "# reshape a to B x axis x [step, sign]", "\n", "action", "=", "(", "action", "[", "0", "]", ".", "view", "(", "-", "1", ",", "3", ",", "2", "*", "NUM_STEPSIZES", "+", "1", ")", ",", "\n", "action", "[", "1", "]", ".", "view", "(", "-", "1", ",", "3", ",", "2", "*", "NUM_STEPSIZES", "+", "1", ")", ")", "\n", "value", "=", "value", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "return", "state", ",", "action", ",", "value", ",", "emb_tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.StateEmbed.__init__": [[34, 40], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model.ActorCriticHead.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "IN_CHANNELS", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.StateEmbed.forward": [[41, 54], ["model.StateEmbed.embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "state.view.view.view", "src.transpose", "model.StateEmbed.embed", "len", "tgt.transpose"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model.StateEmbed.embed", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.StateEmbed.embed"], ["", "def", "forward", "(", "self", ",", "src", ",", "tgt", ")", ":", "\n", "        ", "B", ",", "N", ",", "D", "=", "src", ".", "shape", "\n", "\n", "# O=(src,tgt) -> S=[Phi(src), Phi(tgt)]", "\n", "emb_src", "=", "self", ".", "embed", "(", "src", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "if", "BENCHMARK", "and", "len", "(", "tgt", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "emb_tgt", "=", "tgt", "# re-use target embedding from first step", "\n", "", "else", ":", "\n", "            ", "emb_tgt", "=", "self", ".", "embed", "(", "tgt", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "", "state", "=", "torch", ".", "cat", "(", "(", "emb_src", ",", "emb_tgt", ")", ",", "dim", "=", "-", "1", ")", "\n", "state", "=", "state", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "\n", "return", "state", ",", "emb_tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.StateEmbed.embed": [[55, 66], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.StateEmbed.conv3", "x_pooled.view", "model.StateEmbed.conv1", "model.StateEmbed.conv2", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "embed", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "D", ",", "N", "=", "x", ".", "shape", "\n", "\n", "# embedding: BxDxN -> BxFxN", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x1", ")", ")", "\n", "x3", "=", "self", ".", "conv3", "(", "x2", ")", "\n", "\n", "# pooling: BxFxN -> BxFx1", "\n", "x_pooled", "=", "torch", ".", "max", "(", "x3", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "return", "x_pooled", ".", "view", "(", "B", ",", "-", "1", ")", "# global feature BxF", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.ActorCriticHead.__init__": [[70, 96], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model.ActorCriticHead.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "emb_r", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "STATE_DIM", ",", "HEAD_DIM", "*", "2", ")", ",", "\n", "self", ".", "activation", ",", "\n", "nn", ".", "Linear", "(", "HEAD_DIM", "*", "2", ",", "HEAD_DIM", ")", ",", "\n", "self", ".", "activation", "\n", ")", "\n", "self", ".", "action_r", "=", "nn", ".", "Linear", "(", "HEAD_DIM", ",", "NUM_ACTIONS", "*", "NUM_STEPSIZES", "+", "NUM_NOPS", ")", "\n", "\n", "self", ".", "emb_t", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "STATE_DIM", ",", "HEAD_DIM", "*", "2", ")", ",", "\n", "self", ".", "activation", ",", "\n", "nn", ".", "Linear", "(", "HEAD_DIM", "*", "2", ",", "HEAD_DIM", ")", ",", "\n", "self", ".", "activation", "\n", ")", "\n", "self", ".", "action_t", "=", "nn", ".", "Linear", "(", "HEAD_DIM", ",", "NUM_ACTIONS", "*", "NUM_STEPSIZES", "+", "NUM_NOPS", ")", "\n", "\n", "self", ".", "emb_v", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "HEAD_DIM", "*", "2", ",", "HEAD_DIM", ")", ",", "\n", "self", ".", "activation", "\n", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "HEAD_DIM", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.ActorCriticHead.forward": [[97, 111], ["model.ActorCriticHead.emb_t", "model.ActorCriticHead.emb_r", "model.ActorCriticHead.action_t", "model.ActorCriticHead.action_r", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.ActorCriticHead.emb_v", "model.ActorCriticHead.value"], "methods", ["home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat", "home.repos.pwc.inspect_result.dornik_reagent.environment.buffer.cat"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "# S -> S'", "\n", "        ", "emb_t", "=", "self", ".", "emb_t", "(", "state", ")", "\n", "emb_r", "=", "self", ".", "emb_r", "(", "state", ")", "\n", "# S' -> pi", "\n", "action_logits_t", "=", "self", ".", "action_t", "(", "emb_t", ")", "\n", "action_logits_r", "=", "self", ".", "action_r", "(", "emb_r", ")", "\n", "\n", "# S' -> v", "\n", "state_action", "=", "torch", ".", "cat", "(", "[", "emb_t", ",", "emb_r", "]", ",", "dim", "=", "1", ")", "\n", "emb_v", "=", "self", ".", "emb_v", "(", "state_action", ")", "\n", "value", "=", "self", ".", "value", "(", "emb_v", ")", "\n", "\n", "return", "[", "action_logits_t", ",", "action_logits_r", "]", ",", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.action_from_logits": [[114, 119], ["model._get_distributions", "model._get_actions", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model._get_distributions", "home.repos.pwc.inspect_result.dornik_reagent.registration.model._get_actions"], ["", "", "def", "action_from_logits", "(", "logits", ",", "deterministic", "=", "True", ")", ":", "\n", "    ", "distributions", "=", "_get_distributions", "(", "*", "logits", ")", "\n", "actions", "=", "_get_actions", "(", "*", "(", "distributions", "+", "(", "deterministic", ",", ")", ")", ")", "\n", "\n", "return", "torch", ".", "stack", "(", "actions", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.action_stats": [[121, 126], ["model._get_distributions", "model._get_logprob_entropy", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model._get_distributions", "home.repos.pwc.inspect_result.dornik_reagent.registration.model._get_logprob_entropy"], ["", "def", "action_stats", "(", "logits", ",", "action", ")", ":", "\n", "    ", "distributions", "=", "_get_distributions", "(", "*", "logits", ")", "\n", "logprobs", ",", "entropies", "=", "_get_logprob_entropy", "(", "*", "(", "distributions", "+", "(", "action", "[", ":", ",", "0", "]", ",", "action", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "\n", "return", "torch", ".", "stack", "(", "logprobs", ")", ".", "transpose", "(", "1", ",", "0", ")", ",", "torch", ".", "stack", "(", "entropies", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model._get_distributions": [[128, 133], ["torch.distributions.Categorical", "torch.distributions.Categorical"], "function", ["None"], ["", "def", "_get_distributions", "(", "action_logits_t", ",", "action_logits_r", ")", ":", "\n", "    ", "distribution_t", "=", "Categorical", "(", "logits", "=", "action_logits_t", ")", "\n", "distribution_r", "=", "Categorical", "(", "logits", "=", "action_logits_r", ")", "\n", "\n", "return", "distribution_t", ",", "distribution_r", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model._get_actions": [[135, 143], ["torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "distribution_t.sample", "distribution_r.sample"], "function", ["None"], ["", "def", "_get_actions", "(", "distribution_t", ",", "distribution_r", ",", "deterministic", "=", "True", ")", ":", "\n", "    ", "if", "deterministic", ":", "\n", "        ", "action_t", "=", "torch", ".", "argmax", "(", "distribution_t", ".", "probs", ",", "dim", "=", "-", "1", ")", "\n", "action_r", "=", "torch", ".", "argmax", "(", "distribution_r", ".", "probs", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "action_t", "=", "distribution_t", ".", "sample", "(", ")", "\n", "action_r", "=", "distribution_r", ".", "sample", "(", ")", "\n", "", "return", "action_t", ",", "action_r", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model._get_logprob_entropy": [[145, 153], ["distribution_t.log_prob", "distribution_r.log_prob", "distribution_t.entropy", "distribution_r.entropy"], "function", ["None"], ["", "def", "_get_logprob_entropy", "(", "distribution_t", ",", "distribution_r", ",", "action_t", ",", "action_r", ")", ":", "\n", "    ", "logprob_t", "=", "distribution_t", ".", "log_prob", "(", "action_t", ")", "\n", "logprob_r", "=", "distribution_r", ".", "log_prob", "(", "action_r", ")", "\n", "\n", "entropy_t", "=", "distribution_t", ".", "entropy", "(", ")", "\n", "entropy_r", "=", "distribution_r", ".", "entropy", "(", ")", "\n", "\n", "return", "[", "logprob_t", ",", "logprob_r", "]", ",", "[", "entropy_t", ",", "entropy_r", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.load": [[156, 160], ["torch.load", "torch.load", "torch.load", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model.load", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.load", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.load"], ["", "def", "load", "(", "model", ",", "path", ")", ":", "\n", "    ", "infos", "=", "torch", ".", "load", "(", "path", ")", "\n", "model", ".", "load_state_dict", "(", "infos", "[", "'model_state_dict'", "]", ")", "\n", "return", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.save": [[162, 165], ["model.state_dict", "torch.save", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.dornik_reagent.registration.model.save", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.save", "home.repos.pwc.inspect_result.dornik_reagent.registration.model.save"], ["", "def", "save", "(", "model", ",", "path", ",", "infos", "=", "{", "}", ")", ":", "\n", "    ", "infos", "[", "'model_state_dict'", "]", "=", "model", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "infos", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.plot_grad_flow": [[167, 204], ["model.named_parameters", "plt.bar", "plt.bar", "plt.hlines", "plt.xticks", "plt.xlim", "plt.ylim", "plt.xlabel", "plt.ylabel", "plt.title", "plt.grid", "plt.legend", "numpy.arange", "numpy.arange", "range", "layers.append", "ave_grads.append", "max_grads.append", "len", "len", "len", "len", "len", "torch.max().cpu", "torch.max().cpu", "torch.max().cpu", "Line2D", "Line2D", "Line2D", "print", "p.grad.abs().mean", "p.grad.abs().max", "torch.max", "torch.max", "torch.max", "p.grad.abs", "p.grad.abs", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "plot_grad_flow", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    via https://discuss.pytorch.org/t/check-gradient-flow-in-network/15063/7\n\n    Plots the gradients flowing through different layers in the net during training.\n    Can be used for checking for possible gradient vanishing / exploding problems.\n\n    Usage: Plug this function in Trainer class after loss.backwards() as\n    \"plot_grad_flow(self.model.named_parameters())\" to visualize the gradient flow\n    \"\"\"", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "matplotlib", ".", "lines", "import", "Line2D", "\n", "\n", "ave_grads", "=", "[", "]", "\n", "max_grads", "=", "[", "]", "\n", "layers", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "(", "p", ".", "requires_grad", ")", "and", "(", "\"bias\"", "not", "in", "n", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "print", "(", "f\"no grad for {n}\"", ")", "\n", "continue", "\n", "", "layers", ".", "append", "(", "n", ")", "\n", "ave_grads", ".", "append", "(", "p", ".", "grad", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", "\n", "max_grads", ".", "append", "(", "p", ".", "grad", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "", "", "plt", ".", "bar", "(", "np", ".", "arange", "(", "len", "(", "max_grads", ")", ")", ",", "max_grads", ",", "alpha", "=", "0.1", ",", "lw", "=", "1", ",", "color", "=", "\"c\"", ")", "\n", "plt", ".", "bar", "(", "np", ".", "arange", "(", "len", "(", "max_grads", ")", ")", ",", "ave_grads", ",", "alpha", "=", "0.1", ",", "lw", "=", "1", ",", "color", "=", "\"b\"", ")", "\n", "plt", ".", "hlines", "(", "0", ",", "-", "1", ",", "len", "(", "ave_grads", ")", "+", "1", ",", "lw", "=", "2", ",", "color", "=", "\"k\"", ")", "\n", "plt", ".", "xticks", "(", "range", "(", "0", ",", "len", "(", "ave_grads", ")", ",", "1", ")", ",", "layers", ",", "rotation", "=", "\"vertical\"", ")", "\n", "plt", ".", "xlim", "(", "left", "=", "-", "1", ",", "right", "=", "len", "(", "ave_grads", ")", ")", "\n", "plt", ".", "ylim", "(", "bottom", "=", "-", "0.001", ",", "top", "=", "torch", ".", "max", "(", "torch", ".", "stack", "(", "max_grads", ")", ")", ".", "cpu", "(", ")", ")", "\n", "plt", ".", "xlabel", "(", "\"Layers\"", ")", "\n", "plt", ".", "ylabel", "(", "\"average gradient\"", ")", "\n", "plt", ".", "title", "(", "\"Gradient flow\"", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "legend", "(", "[", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "\"c\"", ",", "lw", "=", "4", ")", ",", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "\"b\"", ",", "lw", "=", "4", ")", ",", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "\"k\"", ",", "lw", "=", "4", ")", "]", ",", "[", "'max-gradient'", ",", "'mean-gradient'", ",", "'zero-gradient'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dornik_reagent.registration.model.count_parameters": [[206, 208], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "", ""]]}