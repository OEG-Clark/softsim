{"home.repos.pwc.inspect_result.evidlo_multiml.multiml.observation.get_frames": [[5, 55], ["numpy.zeros", "tqdm.tqdm", "range", "skimage.transform.downscale_local_mean", "type", "type"], "function", ["None"], ["def", "get_frames", "(", "\n", "*", ",", "\n", "scene", ",", "\n", "resolution_ratio", ",", "\n", "num_frames", ",", "\n", "drift", ",", "\n", "frame_size", ",", "\n", "start", "=", "(", "0", ",", "0", ")", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Get noisy observation frames\n\n    Args:\n        scene (ndarray): high-resolution input scene\n        resolution_ratio (int): downsample factor from high-resolution\n            scene to low-resolution frames\n        frame_size (:obj:`list` of :obj:`int`): pixels of size of square frame\n        num_frames (int): number of experiment frames\n        drift (tuple): inter-frame drift, high-resolution  grid\n        start (tuple): top-left coordinate of first frame\n        noise_model (str): 'poisson' or 'gaussian'\n        dbsnr (float): target SNR in db\n    \"\"\"", "\n", "\n", "# FIXME check box bounds correctly, need to account for rotation", "\n", "assert", "(", "\n", "start", "[", "0", "]", ">=", "0", "and", "start", "[", "1", "]", ">=", "0", "and", "\n", "start", "[", "0", "]", "+", "num_frames", "*", "drift", "[", "0", "]", "+", "frame_size", "[", "0", "]", "<", "scene", ".", "shape", "[", "0", "]", "and", "\n", "start", "[", "1", "]", "+", "num_frames", "*", "drift", "[", "1", "]", "+", "frame_size", "[", "1", "]", "<", "scene", ".", "shape", "[", "1", "]", "\n", ")", ",", "\"Frames drift outside of scene bounds\"", "\n", "\n", "# drift should be integer amount on HR grid", "\n", "assert", "(", "type", "(", "drift", "[", "0", "]", ")", "in", "(", "np", ".", "int64", ",", "int", ")", "and", "type", "(", "drift", "[", "1", "]", ")", "in", "(", "np", ".", "int64", ",", "int", ")", ")", "\n", "\n", "# initialize output array", "\n", "frames", "=", "np", ".", "zeros", "(", "(", "num_frames", ",", "frame_size", "[", "0", "]", ",", "frame_size", "[", "1", "]", ")", ")", "\n", "\n", "for", "frame_num", "in", "tqdm", "(", "range", "(", "num_frames", ")", ",", "desc", "=", "'Frames'", ",", "leave", "=", "None", ",", "position", "=", "1", ")", ":", "\n", "        ", "top", "=", "start", "[", "0", "]", "+", "frame_num", "*", "drift", "[", "0", "]", "\n", "left", "=", "start", "[", "1", "]", "+", "frame_num", "*", "drift", "[", "1", "]", "\n", "frames", "[", "frame_num", "]", "=", "downscale_local_mean", "(", "\n", "scene", "[", "\n", "top", ":", "top", "+", "frame_size", "[", "0", "]", "*", "resolution_ratio", ",", "\n", "left", ":", "left", "+", "frame_size", "[", "1", "]", "*", "resolution_ratio", "\n", "]", ",", "\n", "(", "resolution_ratio", ",", "resolution_ratio", ")", "\n", ")", "\n", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.evidlo_multiml.multiml.observation.add_noise": [[56, 84], ["numpy.var", "numpy.random.normal", "numpy.sqrt", "numpy.random.poisson", "poisson.rvs", "frames.max", "frames.max", "signal.mean", "signal.mean"], "function", ["None"], ["", "def", "add_noise", "(", "frames", ",", "noise_model", "=", "None", ",", "max_count", "=", "None", ",", "dbsnr", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Add noise to frames\n\n    Args:\n        noise_model (str): 'poisson' or 'gaussian'\n        dbsnr (float): target SNR in db\n    \"\"\"", "\n", "\n", "if", "noise_model", "==", "'gaussian'", ":", "\n", "        ", "var_sig", "=", "np", ".", "var", "(", "frames", ")", "\n", "var_noise", "=", "var_sig", "/", "10", "**", "(", "dbsnr", "/", "10", ")", "\n", "out", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "frames", ",", "scale", "=", "np", ".", "sqrt", "(", "var_noise", ")", ")", "\n", "", "elif", "noise_model", "==", "'poisson'", ":", "\n", "        ", "if", "max_count", "is", "not", "None", ":", "\n", "            ", "sig_scaled", "=", "frames", "*", "(", "max_count", "/", "frames", ".", "max", "(", ")", ")", "\n", "# print('SNR:{}'.format(np.sqrt(sig_scaled.mean())))", "\n", "out", "=", "np", ".", "random", ".", "poisson", "(", "sig_scaled", ")", "*", "(", "frames", ".", "max", "(", ")", "/", "max_count", ")", "\n", "", "else", ":", "\n", "            ", "avg_brightness", "=", "10", "**", "(", "dbsnr", "/", "10", ")", "**", "2", "\n", "sig_scaled", "=", "signal", "*", "(", "avg_brightness", "/", "signal", ".", "mean", "(", ")", ")", "\n", "out", "=", "poisson", ".", "rvs", "(", "sig_scaled", ")", "*", "(", "signal", ".", "mean", "(", ")", "/", "avg_brightness", ")", "\n", "", "", "elif", "noise_model", "==", "None", ":", "\n", "        ", "return", "frames", "\n", "", "else", ":", "\n", "        ", "raise", "(", "\"Invalid noise model\"", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.evidlo_multiml.multiml.observation.test_sequence": [[85, 111], ["observation.get_frames", "observation.add_noise", "hubble_deep_field"], "function", ["home.repos.pwc.inspect_result.evidlo_multiml.multiml.observation.get_frames", "home.repos.pwc.inspect_result.evidlo_multiml.multiml.observation.add_noise"], ["", "def", "test_sequence", "(", "num_frames", "=", "30", ",", "dbsnr", "=", "-", "25", ",", "drift", "=", "(", "10", ",", "10", ")", ",", "frame_size", "=", "(", "250", ",", "250", ")", ")", ":", "\n", "    ", "\"\"\"Build noisy test image sequence\n\n    Returns:\n        frames_clean\n        frames\n    \"\"\"", "\n", "from", "skimage", ".", "data", "import", "hubble_deep_field", "\n", "scene", "=", "hubble_deep_field", "(", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "frames_clean", "=", "get_frames", "(", "\n", "scene", "=", "scene", ",", "\n", "drift", "=", "drift", ",", "\n", "resolution_ratio", "=", "1", ",", "\n", "frame_size", "=", "frame_size", ",", "\n", "num_frames", "=", "num_frames", ",", "\n", "start", "=", "(", "0", ",", "0", ")", ",", "\n", ")", "\n", "\n", "frames", "=", "add_noise", "(", "\n", "frames_clean", ",", "\n", "noise_model", "=", "'gaussian'", ",", "\n", "dbsnr", "=", "dbsnr", ",", "\n", ")", "\n", "\n", "return", "frames_clean", ",", "frames", "\n", "", ""]], "home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.correlate_and_sum": [[7, 38], ["range", "numpy.fft.fftn", "numpy.zeros", "tqdm.tqdm", "len", "range", "numpy.fft.ifftn", "len", "frames_freq[].conj", "mode.upper", "numpy.sum", "numpy.array", "len", "mode.upper", "numpy.sum", "Exception", "numpy.abs", "mode.upper"], "function", ["None"], ["def", "correlate_and_sum", "(", "frames", ",", "mode", "=", "'CC'", ",", "disable_print", "=", "True", ",", "np", "=", "np", ")", ":", "\n", "    ", "\"\"\"Correlate all frame combinations and sum each group of correlations\n\n    Args:\n        frames (ndarray): input images\n        mode (str, default='PC'): type of correlation to use. ('PC', 'NCC', 'CC')\n\n    Returns:\n        ndarray: axes (group, corr_x_coord, corr_y_coord)\n    \"\"\"", "\n", "\n", "image_axes", "=", "range", "(", "1", ",", "len", "(", "frames", ".", "shape", ")", ")", "\n", "frames_freq", "=", "np", ".", "fft", ".", "fftn", "(", "frames", ",", "axes", "=", "image_axes", ")", "\n", "\n", "product_sums", "=", "np", ".", "zeros", "(", "\n", "(", "len", "(", "frames", ")", "-", "1", ",", "*", "frames", ".", "shape", "[", "1", ":", "]", ")", ",", "\n", "dtype", "=", "'complex128'", "\n", ")", "\n", "for", "time_diff", "in", "tqdm", "(", "\n", "range", "(", "1", ",", "len", "(", "frames_freq", ")", ")", ",", "desc", "=", "'Correlation'", ",", "leave", "=", "None", ",", "\n", "disable", "=", "disable_print", "\n", ")", ":", "\n", "        ", "products", "=", "frames_freq", "[", ":", "-", "time_diff", "]", "*", "frames_freq", "[", "time_diff", ":", "]", ".", "conj", "(", ")", "\n", "if", "mode", ".", "upper", "(", ")", "==", "'PC'", ":", "\n", "            ", "product_sums", "[", "time_diff", "-", "1", "]", "=", "np", ".", "sum", "(", "products", "/", "np", ".", "abs", "(", "products", ")", ",", "axis", "=", "0", ")", "\n", "", "elif", "mode", ".", "upper", "(", ")", "==", "'CC'", ":", "\n", "            ", "product_sums", "[", "time_diff", "-", "1", "]", "=", "np", ".", "sum", "(", "products", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Invalid mode {}'", ".", "format", "(", "mode", ".", "upper", "(", ")", ")", ")", "\n", "\n", "", "", "return", "np", ".", "fft", ".", "ifftn", "(", "np", ".", "array", "(", "product_sums", ")", ",", "axes", "=", "image_axes", ")", ".", "real", "\n", "\n"]], "home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.scale_and_sum": [[40, 90], ["numpy.zeros", "enumerate", "tqdm.tqdm", "tuple", "tuple", "scaled_csums.append", "numpy.array", "skimage.transform.rescale", "tuple", "tuple", "numpy.zeros", "slice", "slice", "int", "len", "len", "slice", "slice", "len"], "function", ["None"], ["", "def", "scale_and_sum", "(", "csums", ",", "scale_dir", "=", "'down'", ",", "disable_print", "=", "True", ")", ":", "\n", "    ", "\"\"\"Scale each correlation group so peaks are incident, then crop and sum\n\n    Args:\n        csums (ndarray): correlation sums\n        scale_dir (str): 'up' or 'down'\n        disable_print (boolean): disable tqdm printing\n\n    Returns:\n        result (ndarray): summed result\n        scaled_csums (ndarray): scaled and cropped version of correlation groups\n\n    \"\"\"", "\n", "\n", "# shape_x, shape_y = csums.shape[1], csums.shape[2]", "\n", "# result = np.zeros((shape_x, shape_y))", "\n", "output_shape", "=", "csums", ".", "shape", "[", "1", ":", "]", "\n", "result", "=", "np", ".", "zeros", "(", "(", "output_shape", ")", ")", "\n", "scaled_csums", "=", "[", "]", "\n", "\n", "for", "diff", ",", "csum", "in", "enumerate", "(", "\n", "tqdm", "(", "csums", ",", "desc", "=", "'Scale'", ",", "leave", "=", "None", ",", "disable", "=", "True", ")", ",", "\n", "1", "\n", ")", ":", "\n", "# pretrim csum to relevant area to make scaling faster", "\n", "        ", "trim_slice", "=", "tuple", "(", "[", "slice", "(", "None", ",", "int", "(", "shape", "/", "(", "len", "(", "csums", ")", "/", "diff", ")", "+", "1", ")", ")", "for", "shape", "in", "output_shape", "]", ")", "\n", "scaled", "=", "csum", "[", "trim_slice", "]", "\n", "# print('precrop', scaled.shape)", "\n", "# scale correlation group so peaks are incident", "\n", "if", "scale_dir", "==", "'up'", ":", "\n", "            ", "scaled", "=", "rescale", "(", "csum", ",", "len", "(", "csums", ")", "/", "diff", ",", "anti_aliasing", "=", "False", ")", "\n", "", "else", ":", "\n", "# scaled = downscale_local_mean(csum, (diff, diff))", "\n", "            ", "scale_slice", "=", "tuple", "(", "[", "slice", "(", "None", ",", "None", ",", "diff", ")", "]", "*", "len", "(", "csums", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "scaled", "=", "csum", "[", "scale_slice", "]", "\n", "pad_slice", "=", "tuple", "(", "[", "slice", "(", "None", ",", "shape", ")", "for", "shape", "in", "scaled", ".", "shape", "]", ")", "\n", "padded", "=", "np", ".", "zeros", "(", "(", "output_shape", ")", ")", "\n", "padded", "[", "pad_slice", "]", "=", "scaled", "\n", "# scaled = size_equalizer(scaled, output_shape, mode='topleft')", "\n", "scaled", "=", "padded", "\n", "\n", "# print('scale', len(csums) / diff)", "\n", "# trim off excess", "\n", "", "trim_slice", "=", "tuple", "(", "[", "slice", "(", "None", ",", "shape", ")", "for", "shape", "in", "output_shape", "]", ")", "\n", "scaled", "=", "scaled", "[", "trim_slice", "]", "\n", "# print('crop')", "\n", "scaled_csums", ".", "append", "(", "scaled", ")", "\n", "result", "+=", "scaled", "\n", "\n", "", "return", "result", ",", "np", ".", "array", "(", "scaled_csums", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.register": [[92, 107], ["multiml.correlate_and_sum", "multiml.scale_and_sum", "numpy.array", "numpy.unravel_index", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.correlate_and_sum", "home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.scale_and_sum"], ["", "def", "register", "(", "frames", ",", "scale_dir", "=", "'down'", ",", "disable_print", "=", "True", ")", ":", "\n", "    ", "\"\"\"Register frames with Multi ML method\n\n    Args:\n        frames (ndarray): stack of frames to register\n        scale_dir (str): scale correlation groups 'up' (subpixel registration) or\n            'down'\n        disable_print (boolean): disable printing\n    \"\"\"", "\n", "csums", "=", "correlate_and_sum", "(", "frames", ",", "disable_print", "=", "disable_print", ")", "\n", "result", ",", "scaled", "=", "scale_and_sum", "(", "csums", ",", "scale_dir", "=", "scale_dir", ",", "disable_print", "=", "disable_print", ")", "\n", "\n", "return", "np", ".", "array", "(", "np", ".", "unravel_index", "(", "\n", "np", ".", "argmax", "(", "result", ")", ",", "\n", "result", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.shift_and_sum": [[115, 186], ["numpy.ceil().astype", "numpy.pad", "numpy.pad", "numpy.zeros", "numpy.zeros", "enumerate", "len", "type", "numpy.ones", "zip", "multiml.size_equalizer", "numpy.ceil", "numpy.array", "numpy.floor().astype", "multiml.roll", "multiml.roll", "numpy.fft.ifftn", "numpy.fft.ifftn", "Exception", "numpy.array().astype", "numpy.ceil().astype", "numpy.floor", "fourier_shift", "fourier_shift", "multiml.size_equalizer", "Exception", "len", "numpy.fft.fftn", "numpy.fft.fftn", "numpy.array", "numpy.ceil", "len"], "function", ["home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.size_equalizer", "home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.roll", "home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.roll", "home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.size_equalizer"], ["", "def", "shift_and_sum", "(", "frames", ",", "drift", ",", "mode", "=", "'full'", ",", "shift_method", "=", "'roll'", ")", ":", "\n", "    ", "\"\"\"Coadd frames by given shift\n\n    Args:\n        frames (ndarray): input frames to coadd\n        drift (ndarray): drift between adjacent frames\n        mode (str): zeropad before coadding ('full') or crop to region of\n            frame overlap ('crop'), or crop to region of first frame ('first')\n        shift_method (str): method for shifting frames ('roll', 'fourier')\n        pad (bool): zeropad images before coadding\n\n    Returns:\n        (ndarray): coadded images\n    \"\"\"", "\n", "\n", "assert", "type", "(", "drift", ")", "is", "np", ".", "ndarray", ",", "\"'drift' should be ndarray\"", "\n", "\n", "pad", "=", "np", ".", "ceil", "(", "drift", "*", "(", "len", "(", "frames", ")", "-", "1", ")", ")", ".", "astype", "(", "int", ")", "\n", "pad_r", "=", "(", "0", ",", "pad", "[", "0", "]", ")", "if", "drift", "[", "0", "]", ">", "0", "else", "(", "-", "pad", "[", "0", "]", ",", "0", ")", "\n", "pad_c", "=", "(", "0", ",", "pad", "[", "1", "]", ")", "if", "drift", "[", "1", "]", ">", "0", "else", "(", "-", "pad", "[", "1", "]", ",", "0", ")", "\n", "frames_ones", "=", "np", ".", "pad", "(", "\n", "np", ".", "ones", "(", "frames", ".", "shape", ",", "dtype", "=", "int", ")", ",", "\n", "(", "(", "0", ",", "0", ")", ",", "pad_r", ",", "pad_c", ")", ",", "\n", "mode", "=", "'constant'", ",", "\n", ")", "\n", "frames_pad", "=", "np", ".", "pad", "(", "frames", ",", "(", "(", "0", ",", "0", ")", ",", "pad_r", ",", "pad_c", ")", ",", "mode", "=", "'constant'", ")", "\n", "\n", "summation", "=", "np", ".", "zeros", "(", "frames_pad", "[", "0", "]", ".", "shape", ",", "dtype", "=", "'complex128'", ")", "\n", "summation_scale", "=", "np", ".", "zeros", "(", "frames_pad", "[", "0", "]", ".", "shape", ",", "dtype", "=", "int", ")", "\n", "\n", "for", "time_diff", ",", "(", "frame", ",", "frame_ones", ")", "in", "enumerate", "(", "zip", "(", "frames_pad", ",", "frames_ones", ")", ")", ":", "\n", "        ", "shift", "=", "np", ".", "array", "(", "drift", ")", "*", "(", "time_diff", "+", "1", ")", "\n", "if", "shift_method", "==", "'roll'", ":", "\n", "            ", "integer_shift", "=", "np", ".", "floor", "(", "shift", ")", ".", "astype", "(", "int", ")", "\n", "shifted", "=", "roll", "(", "frame", ",", "(", "integer_shift", "[", "0", "]", ",", "integer_shift", "[", "1", "]", ")", ")", "\n", "shifted_ones", "=", "roll", "(", "frame_ones", ",", "(", "integer_shift", "[", "0", "]", ",", "integer_shift", "[", "1", "]", ")", ")", "\n", "", "elif", "shift_method", "==", "'fourier'", ":", "\n", "            ", "shifted", "=", "np", ".", "fft", ".", "ifftn", "(", "fourier_shift", "(", "\n", "np", ".", "fft", ".", "fftn", "(", "frame", ")", ",", "\n", "(", "shift", "[", "0", "]", ",", "shift", "[", "1", "]", ")", "\n", ")", ")", "\n", "shifted_ones", "=", "np", ".", "fft", ".", "ifftn", "(", "fourier_shift", "(", "\n", "np", ".", "fft", ".", "fftn", "(", "frame_ones", ")", ",", "\n", "(", "shift", "[", "0", "]", ",", "shift", "[", "1", "]", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Invalid shift_method'", ")", "\n", "", "summation", "+=", "shifted", "\n", "summation_scale", "+=", "shifted_ones", "\n", "\n", "", "summation", "/=", "len", "(", "frames", ")", "\n", "\n", "if", "mode", "==", "'crop'", ":", "\n", "        ", "summation", "=", "size_equalizer", "(", "\n", "summation", ",", "\n", "np", ".", "array", "(", "frames_pad", "[", "0", "]", ".", "shape", ")", ".", "astype", "(", "int", ")", "-", "\n", "np", ".", "ceil", "(", "drift", "*", "(", "len", "(", "frames_pad", ")", "-", "1", ")", ")", ".", "astype", "(", "int", ")", "\n", ")", "\n", "", "elif", "mode", "==", "'full'", ":", "\n", "# FIXME: something wrong with full mode", "\n", "        ", "pass", "\n", "", "elif", "mode", "==", "'first'", ":", "\n", "        ", "summation_scale", "[", "summation_scale", "==", "0", "]", "=", "1", "\n", "summation", "=", "summation", "[", ":", "frames", ".", "shape", "[", "1", "]", ",", ":", "frames", ".", "shape", "[", "2", "]", "]", "\n", "", "elif", "mode", "==", "'center'", ":", "\n", "        ", "summation_scale", "[", "summation_scale", "==", "0", "]", "=", "1", "\n", "summation", "=", "size_equalizer", "(", "summation", ",", "frames", ".", "shape", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Invalid mode'", ")", "\n", "\n", "", "return", "summation", ".", "real", "\n", "\n"]], "home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.roll": [[187, 197], ["numpy.round().astype", "numpy.roll", "numpy.roll", "numpy.round"], "function", ["home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.roll", "home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.roll"], ["", "def", "roll", "(", "x", ",", "shift", ")", ":", "\n", "    ", "shift", "=", "np", ".", "round", "(", "shift", ")", ".", "astype", "(", "int", ")", "\n", "return", "np", ".", "roll", "(", "\n", "np", ".", "roll", "(", "\n", "x", ",", "\n", "shift", "[", "0", "]", ",", "\n", "axis", "=", "0", "\n", ")", ",", "\n", "shift", "[", "1", "]", ",", "\n", "axis", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.evidlo_multiml.multiml.multiml.size_equalizer": [[199, 240], ["numpy.pad", "len"], "function", ["None"], ["", "def", "size_equalizer", "(", "x", ",", "ref_size", ",", "mode", "=", "'center'", ")", ":", "\n", "    ", "\"\"\"\n    Crop or zero-pad a 2D array so that it has the size `ref_size`.\n    Both cropping and zero-padding are done such that the symmetry of the\n    input signal is preserved.\n    Args:\n        x (ndarray): array which will be cropped/zero-padded\n        ref_size (list): list containing the desired size of the array [r1,r2]\n        mode (str): ('center', 'topleft') where x should be placed when zero padding\n    Returns:\n        ndarray that is the cropper/zero-padded version of the input\n    \"\"\"", "\n", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", ",", "\"invalid shape for x\"", "\n", "\n", "if", "x", ".", "shape", "[", "0", "]", ">", "ref_size", "[", "0", "]", ":", "\n", "        ", "pad_left", ",", "pad_right", "=", "0", ",", "0", "\n", "crop_left", "=", "0", "if", "mode", "==", "'topleft'", "else", "(", "x", ".", "shape", "[", "0", "]", "-", "ref_size", "[", "0", "]", "+", "1", ")", "//", "2", "\n", "crop_right", "=", "crop_left", "+", "ref_size", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "crop_left", ",", "crop_right", "=", "0", ",", "x", ".", "shape", "[", "0", "]", "\n", "pad_right", "=", "ref_size", "[", "0", "]", "-", "x", ".", "shape", "[", "0", "]", "if", "mode", "==", "'topleft'", "else", "(", "ref_size", "[", "0", "]", "-", "x", ".", "shape", "[", "0", "]", ")", "//", "2", "\n", "pad_left", "=", "ref_size", "[", "0", "]", "-", "pad_right", "-", "x", ".", "shape", "[", "0", "]", "\n", "", "if", "x", ".", "shape", "[", "1", "]", ">", "ref_size", "[", "1", "]", ":", "\n", "        ", "pad_top", ",", "pad_bottom", "=", "0", ",", "0", "\n", "crop_top", "=", "0", "if", "mode", "==", "'topleft'", "else", "(", "x", ".", "shape", "[", "1", "]", "-", "ref_size", "[", "1", "]", "+", "1", ")", "//", "2", "\n", "crop_bottom", "=", "crop_top", "+", "ref_size", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "crop_top", ",", "crop_bottom", "=", "0", ",", "x", ".", "shape", "[", "1", "]", "\n", "pad_bottom", "=", "ref_size", "[", "1", "]", "-", "x", ".", "shape", "[", "1", "]", "if", "mode", "==", "'topleft'", "else", "(", "ref_size", "[", "1", "]", "-", "x", ".", "shape", "[", "1", "]", ")", "//", "2", "\n", "pad_top", "=", "ref_size", "[", "1", "]", "-", "pad_bottom", "-", "x", ".", "shape", "[", "1", "]", "\n", "\n", "# crop x", "\n", "", "cropped", "=", "x", "[", "crop_left", ":", "crop_right", ",", "crop_top", ":", "crop_bottom", "]", "\n", "# pad x", "\n", "padded", "=", "np", ".", "pad", "(", "\n", "cropped", ",", "\n", "(", "(", "pad_left", ",", "pad_right", ")", ",", "(", "pad_top", ",", "pad_bottom", ")", ")", ",", "\n", "mode", "=", "'constant'", "\n", ")", "\n", "\n", "return", "padded", "\n", "", ""]], "home.repos.pwc.inspect_result.evidlo_multiml.examples.readme_picture.imshow_subplot": [[16, 20], ["matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis"], "function", ["None"], ["def", "imshow_subplot", "(", "image", ",", "rows", ",", "cols", ",", "num", ")", ":", "\n", "    ", "plt", ".", "subplot", "(", "rows", ",", "cols", ",", "num", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "axis", "(", "False", ")", "\n", "\n"]]}