{"home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.validate.test_data_loader": [[26, 31], ["natsort.natsorted", "glob.glob", "natsort.natsorted", "glob.glob"], "function", ["None"], ["def", "test_data_loader", "(", "path", "=", "\"mpeg/\"", ")", ":", "\n", "    ", "folders", "=", "natsorted", "(", "glob", ".", "glob", "(", "path", "+", "\"*\"", ")", ")", "\n", "for", "f", "in", "folders", ":", "\n", "        ", "im_list", "=", "natsorted", "(", "glob", ".", "glob", "(", "f", "+", "\"/*\"", ")", ")", "\n", "yield", "(", "im_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.validate.float_to_uint8": [[33, 38], ["numpy.clip", "numpy.round", "numpy.uint8"], "function", ["None"], ["", "", "def", "float_to_uint8", "(", "image", ")", ":", "\n", "    ", "clip", "=", "np", ".", "clip", "(", "image", ",", "-", "1", ",", "1", ")", "\n", "original_range", "=", "np", ".", "round", "(", "(", "clip", "*", "127.5", ")", "+", "127.5", ")", "\n", "im_uint8", "=", "np", ".", "uint8", "(", "original_range", ")", "\n", "return", "im_uint8", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.validate.prepare_test_data": [[40, 59], ["range", "range", "X_test.append", "imageio.imread", "Y_test.append", "numpy.array", "numpy.array", "len", "imageio.imread", "x_test_array.append", "imageio.imread.reshape"], "function", ["None"], ["", "def", "prepare_test_data", "(", "test_im_list", ")", ":", "\n", "    ", "X_test", "=", "[", "]", "\n", "Y_test", "=", "[", "]", "\n", "\n", "size", "=", "4", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "test_im_list", ")", "-", "size", ")", ":", "\n", "        ", "x_test_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "\n", "            ", "x_image", "=", "imageio", ".", "imread", "(", "test_im_list", "[", "k", "+", "i", "]", ")", "\n", "(", "nw", ",", "nh", ")", "=", "x_image", ".", "shape", "\n", "x_test_array", ".", "append", "(", "x_image", ")", "\n", "\n", "", "X_test", ".", "append", "(", "x_test_array", ")", "\n", "y_image", "=", "imageio", ".", "imread", "(", "test_im_list", "[", "k", "+", "i", "+", "1", "]", ")", "\n", "Y_test", ".", "append", "(", "y_image", ".", "reshape", "(", "1", ",", "nw", ",", "nh", ")", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "X_test", ")", ",", "np", ".", "array", "(", "Y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.validate.normalize": [[60, 63], ["None"], "function", ["None"], ["", "def", "normalize", "(", "tensor", ")", ":", "\n", "    ", "norm", "=", "(", "tensor", "-", "127.5", ")", "/", "127.5", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.validate.test_and_save": [[65, 113], ["torch.no_grad", "model.eval", "validate.test_data_loader", "time.time", "time.time", "validate.prepare_test_data", "os.makedirs", "range", "validate.normalize", "validate.normalize", "model.forward", "validate.float_to_uint8", "validate.float_to_uint8", "imageio.imsave", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "normalize.cpu().numpy", "out.cpu().detach().numpy", "str", "torch.from_numpy().to", "torch.from_numpy().to", "normalize.cpu", "out.cpu().detach", "torch.from_numpy", "torch.from_numpy", "out.cpu"], "function", ["home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.test_data_loader", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.prepare_test_data", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.normalize", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.normalize", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.Model.forward", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.float_to_uint8", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.float_to_uint8"], ["", "def", "test_and_save", "(", "model", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "test_im_batch", "=", "test_data_loader", "(", ")", "\n", "\n", "num_of_test_videos", "=", "0", "\n", "folder_names", "=", "[", "\"coastguard\"", ",", "\"container\"", ",", "\"football\"", ",", "\"foreman\"", ",", "\"garden\"", ",", "\"hall_monitor\"", ",", "\"mobile\"", ",", "\"tennis\"", "]", "\n", "\n", "folder", "=", "0", "\n", "total_frames", "=", "0", "\n", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "for", "test_ims", "in", "test_im_batch", ":", "\n", "            ", "X_test", ",", "Y_test", "=", "prepare_test_data", "(", "test_ims", ")", "\n", "\n", "(", "m", ",", "nc", ",", "nw", ",", "nh", ")", "=", "Y_test", ".", "shape", "\n", "\n", "\n", "d", "=", "5", "\n", "os", ".", "makedirs", "(", "\"Results/\"", "+", "folder_names", "[", "folder", "]", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "frame", "in", "range", "(", "m", ")", ":", "\n", "                ", "inp", "=", "normalize", "(", "torch", ".", "from_numpy", "(", "X_test", "[", "frame", ":", "frame", "+", "1", "]", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", ")", "\n", "real", "=", "normalize", "(", "torch", ".", "from_numpy", "(", "Y_test", "[", "frame", ":", "frame", "+", "1", "]", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", ")", "\n", "\n", "\n", "out", ",", "norm", "=", "model", ".", "forward", "(", "inp", ")", "\n", "\n", "uint8_real", "=", "float_to_uint8", "(", "real", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ")", "\n", "uint8_out", "=", "float_to_uint8", "(", "out", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ")", "\n", "\n", "save_path", "=", "\"Results/\"", "+", "folder_names", "[", "folder", "]", "+", "\"/frame\"", "+", "str", "(", "d", ")", "+", "\".png\"", "\n", "imageio", ".", "imsave", "(", "save_path", ",", "uint8_out", ")", "\n", "d", "+=", "1", "\n", "total_frames", "+=", "1", "\n", "\n", "", "folder", "+=", "1", "\n", "\n", "", "time_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "test_time", "=", "time_end", "-", "time_start", "\n", "\n", "fps", "=", "total_frames", "/", "test_time", "\n", "\n", "", "return", "fps", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.validate.main": [[115, 127], ["model.m.Model", "model.to().float.load_state_dict", "model.to().float.parameters", "model.to().float.to().float", "validate.test_and_save", "logging.info", "torch.load", "model.to().float.to", "str"], "function", ["home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.test_and_save"], ["", "def", "main", "(", ")", ":", "\n", "    ", "path", "=", "\"dfpn.pth\"", "\n", "\n", "model", "=", "m", ".", "Model", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "[", "\"state_dict\"", "]", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "test_fps", "=", "test_and_save", "(", "model", ")", "\n", "\n", "logging", ".", "info", "(", "\"fps: \"", "+", "str", "(", "test_fps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.video_list": [[25, 28], ["natsort.natsorted", "glob.glob"], "function", ["None"], ["def", "video_list", "(", "path", "=", "\"/home/ml/Akin/UCF/\"", ")", ":", "\n", "    ", "videos", "=", "natsorted", "(", "glob", ".", "glob", "(", "path", "+", "\"*\"", ")", ")", "\n", "return", "videos", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.train_data_loader": [[30, 37], ["natsort.natsorted", "batch_im_list.append", "glob.glob"], "function", ["None"], ["", "def", "train_data_loader", "(", "video_list", ")", ":", "\n", "\n", "    ", "batch_im_list", "=", "[", "]", "\n", "for", "video", "in", "video_list", ":", "\n", "        ", "im_list", "=", "natsorted", "(", "glob", ".", "glob", "(", "video", "+", "\"/*\"", ")", ")", "\n", "batch_im_list", ".", "append", "(", "im_list", ")", "\n", "", "return", "batch_im_list", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.test_data_loader": [[40, 45], ["natsort.natsorted", "glob.glob", "natsort.natsorted", "glob.glob"], "function", ["None"], ["", "def", "test_data_loader", "(", "path", "=", "\"/home/ml/Akin/mpeg/\"", ")", ":", "\n", "    ", "folders", "=", "natsorted", "(", "glob", ".", "glob", "(", "path", "+", "\"*\"", ")", ")", "\n", "for", "f", "in", "folders", ":", "\n", "        ", "im_list", "=", "natsorted", "(", "glob", ".", "glob", "(", "f", "+", "\"/*\"", ")", ")", "\n", "yield", "(", "im_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.float_to_uint8": [[47, 52], ["numpy.clip", "numpy.round", "numpy.uint8"], "function", ["None"], ["", "", "def", "float_to_uint8", "(", "image", ")", ":", "\n", "    ", "clip", "=", "np", ".", "clip", "(", "image", ",", "-", "1", ",", "1", ")", "\n", "original_range", "=", "np", ".", "round", "(", "(", "clip", "*", "127.5", ")", "+", "127.5", ")", "\n", "im_uint8", "=", "np", ".", "uint8", "(", "original_range", ")", "\n", "return", "im_uint8", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.prepare_train_data": [[54, 93], ["numpy.array", "len", "random.randint", "imageio.imread", "random.randint", "random.randint", "range", "X_train.append", "np.array.copy", "np.array.copy", "imageio.imread", "img_cropped.reshape.reshape", "numpy.concatenate"], "function", ["None"], ["", "def", "prepare_train_data", "(", "gop_video_batch", ")", ":", "\n", "\n", "    ", "X_train", "=", "[", "]", "\n", "Y_train", "=", "[", "]", "\n", "\n", "patch_size", "=", "128", "\n", "size", "=", "5", "\n", "\n", "for", "gop_ims", "in", "gop_video_batch", ":", "\n", "\n", "        ", "length", "=", "len", "(", "gop_ims", ")", "\n", "s", "=", "random", ".", "randint", "(", "0", ",", "length", "-", "size", ")", "\n", "gop_split", "=", "gop_ims", "[", "s", ":", "s", "+", "size", "]", "\n", "\n", "sample_im", "=", "imageio", ".", "imread", "(", "gop_split", "[", "0", "]", ",", "as_gray", "=", "True", ")", "\n", "\n", "x", "=", "random", ".", "randint", "(", "0", ",", "sample_im", ".", "shape", "[", "1", "]", "-", "patch_size", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "sample_im", ".", "shape", "[", "0", "]", "-", "patch_size", ")", "\n", "\n", "for", "k", "in", "range", "(", "size", ")", ":", "\n", "\n", "            ", "img", "=", "imageio", ".", "imread", "(", "gop_split", "[", "k", "]", ",", "as_gray", "=", "True", ")", "\n", "img_cropped", "=", "img", "[", "y", ":", "y", "+", "patch_size", ",", "x", ":", "x", "+", "patch_size", "]", "\n", "(", "w", ",", "h", ")", "=", "img_cropped", ".", "shape", "\n", "img_cropped", "=", "img_cropped", ".", "reshape", "(", "1", ",", "w", ",", "h", ")", "\n", "\n", "if", "k", "==", "0", ":", "\n", "                ", "img_concat", "=", "img_cropped", "\n", "", "else", ":", "\n", "                ", "img_concat", "=", "np", ".", "concatenate", "(", "(", "img_concat", ",", "img_cropped", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "X_train", ".", "append", "(", "img_concat", ")", "\n", "\n", "", "X", "=", "np", ".", "array", "(", "X_train", ")", "\n", "X_train", "=", "X", ".", "copy", "(", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "Y_train", "=", "X", ".", "copy", "(", ")", "[", ":", ",", "-", "1", ":", "]", "\n", "\n", "\n", "return", "X_train", ",", "Y_train", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.prepare_test_data": [[95, 114], ["range", "range", "X_test.append", "imageio.imread", "Y_test.append", "numpy.array", "numpy.array", "len", "imageio.imread", "x_test_array.append", "imageio.imread.reshape"], "function", ["None"], ["", "def", "prepare_test_data", "(", "test_im_list", ")", ":", "\n", "    ", "X_test", "=", "[", "]", "\n", "Y_test", "=", "[", "]", "\n", "\n", "size", "=", "4", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "test_im_list", ")", "-", "size", ")", ":", "\n", "        ", "x_test_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "\n", "            ", "x_image", "=", "imageio", ".", "imread", "(", "test_im_list", "[", "k", "+", "i", "]", ")", "\n", "(", "nw", ",", "nh", ")", "=", "x_image", ".", "shape", "\n", "x_test_array", ".", "append", "(", "x_image", ")", "\n", "\n", "", "X_test", ".", "append", "(", "x_test_array", ")", "\n", "y_image", "=", "imageio", ".", "imread", "(", "test_im_list", "[", "k", "+", "i", "+", "1", "]", ")", "\n", "Y_test", ".", "append", "(", "y_image", ".", "reshape", "(", "1", ",", "nw", ",", "nh", ")", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "X_test", ")", ",", "np", ".", "array", "(", "Y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.calculate_loss": [[116, 119], ["torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "calculate_loss", "(", "out", ",", "real", ")", ":", "\n", "    ", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "out", "-", "real", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.normalize": [[120, 123], ["None"], "function", ["None"], ["", "def", "normalize", "(", "tensor", ")", ":", "\n", "    ", "norm", "=", "(", "tensor", "-", "127.5", ")", "/", "127.5", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.train_one_step": [[124, 146], ["model.train.train", "train.prepare_train_data", "model.train.forward", "optimizer.zero_grad", "loss.backward", "optimizer.step", "loss.item", "train.normalize", "train.normalize", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "train.calculate_loss", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.prepare_train_data", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.Model.forward", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.normalize", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.normalize", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.calculate_loss"], ["", "def", "train_one_step", "(", "train_ims", ",", "model", ",", "optimizer", ")", ":", "\n", "\n", "    ", "a", "=", "20000", "\n", "b", "=", "1", "\n", "alpha", "=", "a", "/", "(", "a", "+", "b", ")", "\n", "beta", "=", "b", "/", "(", "a", "+", "b", ")", "\n", "\n", "model", "=", "model", ".", "train", "(", ")", "\n", "\n", "X_train", ",", "Y_train", "=", "prepare_train_data", "(", "train_ims", ")", "\n", "\n", "inp", ",", "real", "=", "normalize", "(", "torch", ".", "from_numpy", "(", "X_train", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", ")", ",", "normalize", "(", "torch", ".", "from_numpy", "(", "Y_train", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", ")", "\n", "\n", "out", ",", "norm", "=", "model", ".", "forward", "(", "inp", ")", "\n", "loss", "=", "alpha", "*", "calculate_loss", "(", "out", ",", "real", ")", "+", "beta", "*", "norm", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.test_and_save": [[147, 205], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "train.test_data_loader", "time.time", "time.time", "train.prepare_test_data", "range", "train.normalize", "train.normalize", "model.forward", "train.float_to_uint8", "train.float_to_uint8", "skimage.measure.compare_psnr", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "normalize.cpu().numpy", "out.cpu().detach().numpy", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "normalize.cpu", "out.cpu().detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "out.cpu"], "function", ["home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.test_data_loader", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.prepare_test_data", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.normalize", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.normalize", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.Model.forward", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.float_to_uint8", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.float_to_uint8"], ["", "def", "test_and_save", "(", "model", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "total_test_loss", "=", "0", "\n", "total_test_psnr", "=", "0", "\n", "\n", "test_im_batch", "=", "test_data_loader", "(", ")", "\n", "\n", "num_of_test_videos", "=", "0", "\n", "folder_names", "=", "[", "\"coastguard\"", ",", "\"container\"", ",", "\"football\"", ",", "\"foreman\"", ",", "\"garden\"", ",", "\"hall_monitor\"", ",", "\"mobile\"", ",", "\"tennis\"", "]", "\n", "folder", "=", "0", "\n", "\n", "total_frames", "=", "0", "\n", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "for", "test_ims", "in", "test_im_batch", ":", "\n", "            ", "X_test", ",", "Y_test", "=", "prepare_test_data", "(", "test_ims", ")", "\n", "\n", "(", "m", ",", "nc", ",", "nw", ",", "nh", ")", "=", "Y_test", ".", "shape", "\n", "\n", "video_psnr", "=", "0", "\n", "video_ssim", "=", "0", "\n", "\n", "d", "=", "5", "\n", "\n", "for", "frame", "in", "range", "(", "m", ")", ":", "\n", "                ", "inp", "=", "normalize", "(", "torch", ".", "from_numpy", "(", "X_test", "[", "frame", ":", "frame", "+", "1", "]", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", ")", "\n", "real", "=", "normalize", "(", "torch", ".", "from_numpy", "(", "Y_test", "[", "frame", ":", "frame", "+", "1", "]", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", ")", "\n", "\n", "\n", "out", ",", "norm", "=", "model", ".", "forward", "(", "inp", ")", "\n", "\n", "uint8_real", "=", "float_to_uint8", "(", "real", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ")", "\n", "uint8_out", "=", "float_to_uint8", "(", "out", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ")", "\n", "psnr", "=", "compare_psnr", "(", "uint8_real", ",", "uint8_out", ",", "data_range", "=", "255", ")", "\n", "video_psnr", "+=", "psnr", "\n", "\n", "d", "+=", "1", "\n", "total_frames", "+=", "1", "\n", "\n", "", "num_of_test_videos", "+=", "1", "\n", "\n", "average_video_psnr", "=", "video_psnr", "/", "X_test", ".", "shape", "[", "0", "]", "\n", "total_test_psnr", "+=", "average_video_psnr", "\n", "\n", "\n", "folder", "+=", "1", "\n", "", "time_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "average_test_psnr", "=", "total_test_psnr", "/", "num_of_test_videos", "\n", "\n", "test_time", "=", "time_end", "-", "time_start", "\n", "\n", "fps", "=", "total_frames", "/", "test_time", "\n", "\n", "", "return", "average_test_psnr", ",", "fps", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.save_model": [[208, 214], ["torch.save", "torch.save", "torch.save", "model.state_dict", "optimizer.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "optimizer", ")", ":", "\n", "    ", "state", "=", "{", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "\"res_sc_mae.pth\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.load_pre_model": [[216, 224], ["model.m.state_dict", "m.state_dict.update", "model.m.load_state_dict", "model.m.parameters", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "load_pre_model", "(", "m", ",", "path", ",", "requires_grad", ")", ":", "\n", "    ", "pre_dict", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "[", "\"state_dict\"", "]", "\n", "m_dict", "=", "m", ".", "state_dict", "(", ")", "\n", "m_dict", ".", "update", "(", "pre_dict", ")", "\n", "m", ".", "load_state_dict", "(", "m_dict", ")", "\n", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "requires_grad", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.main": [[226, 308], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "random.seed", "model.m.Model", "filter", "sum", "logging.info", "model.to().float.to().float", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "train.video_list", "logging.info", "logging.info", "time.time", "range", "time.time", "logging.info", "model.to().float.parameters", "model.to().float.parameters", "random.sample", "train.train_data_loader", "train.train_one_step", "print", "numpy.prod", "str", "model.to().float.to", "str", "train.test_and_save", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "p.size", "len", "logging.info", "train.save_model", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.video_list", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.train_data_loader", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.train_one_step", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.test_and_save", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.None.train.save_model"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "torch", ".", "manual_seed", "(", "2", ")", "\n", "random", ".", "seed", "(", "3", ")", "\n", "\n", "\n", "total_train_step", "=", "500000", "\n", "train_step", "=", "2000", "\n", "lr_step", "=", "100000", "\n", "\n", "learning_rate", "=", "1.e-4", "\n", "\n", "model", "=", "m", ".", "Model", "(", ")", "\n", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "logging", ".", "info", "(", "\"number of parameters: \"", "+", "str", "(", "params", ")", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "\n", "average_train_loss", "=", "0", "\n", "\n", "best_test_psnr", "=", "0", "\n", "\n", "all_videos", "=", "video_list", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"train video samples: \"", "+", "str", "(", "len", "(", "all_videos", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"**********\"", ")", "\n", "\n", "batch_size", "=", "8", "\n", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "for", "minibatch_processed", "in", "range", "(", "1", ",", "total_train_step", "+", "1", ")", ":", "\n", "\n", "        ", "batch_video", "=", "random", ".", "sample", "(", "all_videos", ",", "batch_size", ")", "\n", "train_im_list", "=", "train_data_loader", "(", "batch_video", ")", "\n", "train_step_loss", "=", "train_one_step", "(", "train_im_list", ",", "model", ",", "optimizer", ")", "\n", "average_train_loss", "+=", "train_step_loss", "\n", "\n", "print", "(", "minibatch_processed", ",", "train_step_loss", ")", "\n", "\n", "if", "minibatch_processed", "%", "train_step", "==", "0", ":", "\n", "            ", "average_test_psnr", ",", "test_fps", "=", "test_and_save", "(", "model", ")", "\n", "if", "average_test_psnr", ">", "best_test_psnr", ":", "\n", "                ", "best_test_psnr", "=", "average_test_psnr", "\n", "logging", ".", "info", "(", "\"NEW BEST !!!\"", ")", "\n", "\n", "save_model", "(", "model", ",", "optimizer", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"number of iterations: \"", "+", "str", "(", "minibatch_processed", ")", ")", "\n", "logging", ".", "info", "(", "\"learning rate: \"", "+", "str", "(", "learning_rate", ")", ")", "\n", "logging", ".", "info", "(", "\"train_loss: \"", "+", "str", "(", "average_train_loss", "/", "train_step", ")", ")", "\n", "logging", ".", "info", "(", "\"-----\"", ")", "\n", "logging", ".", "info", "(", "\"fps: \"", "+", "str", "(", "test_fps", ")", ")", "\n", "logging", ".", "info", "(", "\"test psnr: \"", "+", "str", "(", "average_test_psnr", ")", ")", "\n", "logging", ".", "info", "(", "\"best psnr: \"", "+", "str", "(", "best_test_psnr", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"****************\"", ")", "\n", "\n", "average_train_loss", "=", "0", "\n", "\n", "", "if", "minibatch_processed", "%", "lr_step", "==", "0", ":", "\n", "            ", "learning_rate", "/=", "2", "\n", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "g", "[", "\"lr\"", "]", "=", "learning_rate", "\n", "\n", "\n", "\n", "", "", "", "time_end", "=", "time", ".", "time", "(", ")", "\n", "training_time", "=", "time_end", "-", "time_start", "\n", "day", "=", "training_time", "//", "(", "24", "*", "3600", ")", "\n", "training_time", "=", "training_time", "%", "(", "24", "*", "3600", ")", "\n", "hour", "=", "training_time", "//", "3600", "\n", "training_time", "%=", "3600", "\n", "minutes", "=", "training_time", "//", "60", "\n", "training_time", "%=", "60", "\n", "seconds", "=", "training_time", "\n", "logging", ".", "info", "(", "\"day:hour:minute:second-> %d:%d:%d:%d\"", "%", "(", "day", ",", "hour", ",", "minutes", ",", "seconds", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.RDB.__init__": [[19, 26], ["torch.Module.__init__", "m.conv_same", "m.conv_same", "m.conv_same", "m.conv_same"], "methods", ["home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.Model.__init__", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same"], ["    ", "def", "__init__", "(", "self", ",", "channel", ")", ":", "\n", "        ", "super", "(", "RDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cnn1", "=", "conv_same", "(", "channel", ",", "channel", ",", "3", ")", "\n", "self", ".", "cnn2", "=", "conv_same", "(", "channel", "*", "2", ",", "channel", ",", "3", ")", "\n", "self", ".", "cnn3", "=", "conv_same", "(", "channel", "*", "3", ",", "channel", ",", "3", ")", "\n", "self", ".", "down_conv", "=", "conv_same", "(", "channel", "*", "4", ",", "channel", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.RDB.forward": [[27, 35], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "m.RDB.cnn1", "m.RDB.cnn2", "m.RDB.cnn3", "m.RDB.down_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c1", "=", "F", ".", "relu", "(", "self", ".", "cnn1", "(", "x", ")", ")", "\n", "c2", "=", "F", ".", "relu", "(", "self", ".", "cnn2", "(", "torch", ".", "cat", "(", "(", "x", ",", "c1", ")", ",", "dim", "=", "1", ")", ")", ")", "\n", "c3", "=", "F", ".", "relu", "(", "self", ".", "cnn3", "(", "torch", ".", "cat", "(", "(", "x", ",", "c1", ",", "c2", ")", ",", "dim", "=", "1", ")", ")", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "x", ",", "c1", ",", "c2", ",", "c3", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "down_conv", "(", "concat", ")", "+", "x", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.Model.__init__": [[39, 88], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "m.conv_same", "m.Model.conv_offset.weight.data.zero_", "m.Model.conv_offset.bias.data.zero_", "torchvision.DeformConv2d", "torchvision.DeformConv2d", "torchvision.DeformConv2d", "torchvision.DeformConv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "m.conv_same", "m.RDB", "m.RDB", "m.conv_same", "m.conv_same", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.conv_same", "m.conv_same", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.RDB", "m.conv_same"], "methods", ["home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.Model.__init__", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same", "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "feature_ext", "=", "nn", ".", "Sequential", "(", "\n", "conv_same", "(", "1", ",", "64", ",", "3", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "conv_same", "(", "64", ",", "64", ",", "3", ")", "\n", ")", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "conv_same", "(", "64", "*", "4", ",", "64", ",", "3", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "conv_same", "(", "64", ",", "64", ",", "3", ")", "\n", ")", "\n", "\n", "\n", "self", ".", "conv_offset", "=", "conv_same", "(", "64", ",", "2", "*", "3", "*", "3", "*", "4", ",", "3", ")", "\n", "self", ".", "conv_offset", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "self", ".", "dcn1", "=", "df", ".", "DeformConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "dcn2", "=", "df", ".", "DeformConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "dcn3", "=", "df", ".", "DeformConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "dcn4", "=", "df", ".", "DeformConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "rec", "=", "nn", ".", "Sequential", "(", "\n", "conv_same", "(", "64", "*", "4", ",", "64", ",", "3", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "RDB", "(", "64", ")", ",", "\n", "conv_same", "(", "64", ",", "1", ",", "3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.Model.forward": [[90, 111], ["m.Model.feature_ext", "m.Model.feature_ext", "m.Model.feature_ext", "m.Model.feature_ext", "m.Model.bottleneck", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "m.Model.dcn1", "m.Model.dcn2", "m.Model.dcn3", "m.Model.dcn4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "m.Model.rec", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "m.Model.conv_offset", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "x", "[", ":", ",", "0", ":", "1", "]", "\n", "x2", "=", "x", "[", ":", ",", "1", ":", "2", "]", "\n", "x3", "=", "x", "[", ":", ",", "2", ":", "3", "]", "\n", "x4", "=", "x", "[", ":", ",", "3", ":", "4", "]", "\n", "\n", "f1", "=", "self", ".", "feature_ext", "(", "x1", ")", "\n", "f2", "=", "self", ".", "feature_ext", "(", "x2", ")", "\n", "f3", "=", "self", ".", "feature_ext", "(", "x3", ")", "\n", "f4", "=", "self", ".", "feature_ext", "(", "x4", ")", "\n", "\n", "b", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "[", "f1", ",", "f2", ",", "f3", ",", "f4", "]", ",", "dim", "=", "1", ")", ")", "\n", "offset1", ",", "offset2", ",", "offset3", ",", "offset4", "=", "torch", ".", "chunk", "(", "self", ".", "conv_offset", "(", "b", ")", ",", "4", ",", "dim", "=", "1", ")", "\n", "d1", "=", "self", ".", "dcn1", "(", "f1", ",", "offset1", ")", "\n", "d2", "=", "self", ".", "dcn2", "(", "f2", ",", "offset2", ")", "\n", "d3", "=", "self", ".", "dcn3", "(", "f3", ",", "offset3", ")", "\n", "d4", "=", "self", ".", "dcn4", "(", "f4", ",", "offset4", ")", "\n", "att", "=", "torch", ".", "cat", "(", "[", "d1", ",", "d2", ",", "d3", ",", "d4", "]", ",", "dim", "=", "1", ")", "\n", "y_pred", "=", "self", ".", "rec", "(", "att", ")", "\n", "\n", "return", "y_pred", ",", "(", "torch", ".", "mean", "(", "offset1", "**", "2", ")", "+", "torch", ".", "mean", "(", "offset2", "**", "2", ")", "+", "torch", ".", "mean", "(", "offset3", "**", "2", ")", "+", "torch", ".", "mean", "(", "offset4", "**", "2", ")", ")", "/", "4.", "\n", "\n"]], "home.repos.pwc.inspect_result.makinyilmaz_DFPN.model.m.conv_same": [[13, 16], ["torch.Conv2d"], "function", ["None"], ["def", "conv_same", "(", "in_ch", ",", "out_ch", ",", "kernel_size", ")", ":", "\n", "    ", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_ch", ",", "out_channels", "=", "out_ch", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "True", ")", "\n", "return", "conv", "\n", "\n"]]}