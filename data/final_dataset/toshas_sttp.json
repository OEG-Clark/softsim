{"home.repos.pwc.inspect_result.toshas_sttp.src.train_imgcls.main": [[26, 326], ["cfg.__dict__.get", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "wandb.init", "wandb.tensorboard.patch", "src.utils.helpers.verify_experiment_integrity", "src.utils.resolvers.resolve_imgcls_dataset", "src.utils.helpers.PersistentRandomSampler", "list", "src.utils.helpers.net_extract_modules_order", "print", "src.utils.helpers.get_statedict_num_params", "print", "list", "src.utils.resolvers.resolve_lr_sched", "os.path.isfile", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.monotonic", "iter", "print", "os.environ.get", "src.utils.resolvers.resolve_ops", "ops_regular_dict.values", "src.utils.resolvers.resolve_imgcls_model", "torch.randn", "torch.randn", "src.utils.resolvers.resolve_ops_factory", "src.utils.resolvers.resolve_stiefel", "src.utils.resolvers.resolve_stiefel", "src.utils.resolvers.resolve_ops_factory.cuda", "model.cuda.state_dict", "src.utils.spectral_tensors_factory.net_reparameterize_standard_to_factory", "print", "model.cuda.cuda", "src.utils.helpers.silent_torch_jit_trace_module", "model.cuda.parameters", "list", "src.utils.resolvers.resolve_optimizer", "torch.load", "torch.load", "model.cuda.load_state_dict", "optimizer.load_state_dict", "src.utils.helpers.PersistentRandomSampler.load_state_dict", "src.utils.helpers.PersistentRandomSampler.fast_forward_to", "torch.no_grad", "torch.no_grad", "train_imgcls.main.forward_factory"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.verify_experiment_integrity", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_imgcls_dataset", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.net_extract_modules_order", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.get_statedict_num_params", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_lr_sched", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_ops", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_imgcls_model", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_ops_factory", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_stiefel", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_stiefel", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.net_reparameterize_standard_to_factory", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.silent_torch_jit_trace_module", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_optimizer", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.fast_forward_to"], ["def", "main", "(", "cfg", ")", ":", "\n", "    ", "assert", "cfg", ".", "experiment", "==", "'imgcls'", "\n", "\n", "seed", "=", "cfg", ".", "__dict__", ".", "get", "(", "'random_seed'", ",", "2020", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "log_dir", "=", "cfg", ".", "log_dir", "\n", "tb_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'tb'", ")", "\n", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'checkpoints'", ")", "\n", "os", ".", "makedirs", "(", "tb_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "wandb_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "checkpoints_dir", ",", "exist_ok", "=", "True", ")", "\n", "checkpoint_path_latest", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'checkpoint_latest.pth'", ")", "\n", "checkpoint_path_best", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'checkpoint_best.pth'", ")", "\n", "is_cuda", "=", "os", ".", "environ", ".", "get", "(", "'CUDA_VISIBLE_DEVICES'", ",", "None", ")", "is", "not", "None", "\n", "\n", "wandb", ".", "init", "(", "\n", "project", "=", "cfg", ".", "wandb_project", ",", "\n", "resume", "=", "True", ",", "\n", "name", "=", "cfg", ".", "experiment_name", ",", "\n", "id", "=", "cfg", ".", "experiment_name", ",", "\n", "config", "=", "cfg", ".", "__dict__", ",", "\n", "dir", "=", "cfg", ".", "wandb_dir", ",", "\n", "save_code", "=", "False", ",", "\n", ")", "\n", "wandb", ".", "tensorboard", ".", "patch", "(", "\n", "save", "=", "False", ",", "# copies tb files into cloud and allows to run tensorboard in the cloud", "\n", "tensorboardX", "=", "False", ",", "\n", "pytorch", "=", "True", ",", "\n", ")", "\n", "\n", "# check the experiment is not resumed with different code and or settings", "\n", "verify_experiment_integrity", "(", "cfg", ")", "\n", "\n", "dataset_train", ",", "dataset_valid", ",", "_", "=", "resolve_imgcls_dataset", "(", "cfg", ")", "\n", "\n", "persistent_random_sampler", "=", "PersistentRandomSampler", "(", "\n", "dataset_train", ",", "\n", "cfg", ".", "num_training_steps", "*", "cfg", ".", "batch_size", "\n", ")", "\n", "\n", "ops_regular_dict", "=", "resolve_ops", "(", "'regular'", ")", "[", "0", "]", "\n", "ops_regular_classes", "=", "list", "(", "ops_regular_dict", ".", "values", "(", ")", ")", "\n", "\n", "model", "=", "resolve_imgcls_model", "(", "cfg", ".", "model_name", ")", "(", "cfg", ")", "\n", "\n", "dummy_input", "=", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ",", ")", "\n", "modules_order", "=", "net_extract_modules_order", "(", "\n", "model", ",", "dummy_input", ",", "ops_regular_classes", ",", "net_prefix", "=", "None", "\n", ")", "\n", "print", "(", "'Modules order:'", "+", "'\\n    '", ".", "join", "(", "[", "''", "]", "+", "modules_order", ")", ")", "\n", "\n", "factory", "=", "None", "\n", "if", "cfg", ".", "ops_use_factory", ":", "\n", "        ", "factory_cls", "=", "resolve_ops_factory", "(", "cfg", ".", "ops_factory_name", ")", "\n", "stiefel_full_cls", "=", "resolve_stiefel", "(", "cfg", ".", "ops_factory_stiefel_name", ",", "is_canonical", "=", "False", ")", "\n", "stiefel_canonical_cls", "=", "resolve_stiefel", "(", "\n", "cfg", ".", "ops_factory_stiefel_name", ",", "is_canonical", "=", "cfg", ".", "use_canonical_householder", "\n", ")", "\n", "factory", "=", "factory_cls", "(", "\n", "stiefel_full_cls", ",", "\n", "stiefel_canonical_cls", ",", "\n", "cfg", ".", "ops_factory_rank", ",", "\n", "**", "cfg", ".", "ops_factory_kwargs", "\n", ")", ".", "cuda", "(", ")", "\n", "\n", "", "orig_num_weights", "=", "get_statedict_num_params", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "compression_pct", "=", "100", "\n", "if", "factory", "is", "not", "None", ":", "\n", "        ", "model", ",", "stats", "=", "net_reparameterize_standard_to_factory", "(", "\n", "model", ",", "factory", ",", "module_names_ignored", "=", "cfg", ".", "ops_factory_ignored", ",", "**", "cfg", ".", "__dict__", ".", "get", "(", "'surgery_kwargs'", ",", "{", "}", ")", "\n", ")", "\n", "assert", "orig_num_weights", "==", "stats", "[", "'nflt32_original_total'", "]", "\n", "compression_pct", "=", "stats", "[", "'compression_net_pct'", "]", "\n", "print", "(", "f'Factory:\\n{json.dumps(stats, indent=4)}\\n{factory}'", ")", "\n", "", "print", "(", "f'Model:\\n{model}'", ")", "\n", "\n", "compression_stats", "=", "{", "\n", "'orig_num_weights'", ":", "orig_num_weights", ",", "\n", "'compression_pct'", ":", "compression_pct", ",", "\n", "}", "\n", "\n", "if", "is_cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "if", "factory", "is", "not", "None", ":", "\n", "            ", "factory", "=", "factory", ".", "cuda", "(", ")", "\n", "\n", "", "", "if", "factory", "is", "not", "None", ":", "\n", "        ", "factory_jit", "=", "silent_torch_jit_trace_module", "(", "factory", ",", "{", "'forward'", ":", "(", ")", "}", ")", "\n", "\n", "", "def", "forward_factory", "(", ")", ":", "\n", "        ", "if", "factory", "is", "not", "None", ":", "\n", "            ", "weights", "=", "factory_jit", ".", "forward", "(", ")", "\n", "factory", ".", "set_tensors", "(", "weights", ")", "\n", "\n", "", "", "param_groups", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "if", "factory", "is", "not", "None", ":", "\n", "        ", "param_groups", "+=", "list", "(", "factory", ".", "parameters", "(", ")", ")", "\n", "", "optimizer", "=", "resolve_optimizer", "(", "cfg", ".", "optimizer", ")", "(", "param_groups", ",", "**", "cfg", ".", "optimizer_kwargs", ")", "\n", "\n", "lr_scheduler", "=", "resolve_lr_sched", "(", "optimizer", ",", "cfg", ".", "lr_sched", ",", "cfg", ".", "num_training_steps", ")", "\n", "\n", "step_loaded", "=", "0", "\n", "metric_best", "=", "None", "\n", "metrics_best_all", "=", "None", "\n", "\n", "# load persistent state", "\n", "if", "os", ".", "path", ".", "isfile", "(", "checkpoint_path_latest", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "checkpoint_path_latest", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", "[", "'model'", "]", ")", "\n", "if", "factory", "is", "not", "None", ":", "\n", "            ", "factory", ".", "load_state_dict", "(", "state_dict", "[", "'factory'", "]", ")", "\n", "", "optimizer", ".", "load_state_dict", "(", "state_dict", "[", "'optimizer'", "]", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "lr_scheduler", ".", "load_state_dict", "(", "state_dict", "[", "'lr_scheduler'", "]", ")", "\n", "", "persistent_random_sampler", ".", "load_state_dict", "(", "state_dict", "[", "'persistent_random_sampler'", "]", ")", "\n", "step_loaded", "=", "state_dict", "[", "'step'", "]", "\n", "metric_best", "=", "state_dict", "[", "'metric_best'", "]", "\n", "metrics_best_all", "=", "state_dict", "[", "'metrics_best_all'", "]", "\n", "persistent_random_sampler", ".", "fast_forward_to", "(", "step_loaded", "*", "cfg", ".", "batch_size", ")", "\n", "if", "step_loaded", "==", "cfg", ".", "num_training_steps", ":", "\n", "            ", "print", "(", "'Experiment was finished earlier; exiting'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# start dataloader workers", "\n", "", "", "dataloader_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "sampler", "=", "persistent_random_sampler", ",", "\n", ")", "\n", "dataloader_valid", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_valid", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "# populate last_tensors", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "forward_factory", "(", ")", "\n", "\n", "# training loop preamble", "\n", "", "if", "step_loaded", "==", "0", ":", "\n", "        ", "print", "(", "'Started training'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Resumed training from step {step_loaded}'", ")", "\n", "", "time_start_sec", "=", "time", ".", "monotonic", "(", ")", "\n", "iter_train", "=", "iter", "(", "dataloader_train", ")", "\n", "\n", "# training loop", "\n", "with", "SilentSummaryWriter", "(", "tb_dir", ")", "as", "tb", ":", "\n", "        ", "tb_add_scalars", "(", "tb", ",", "'compression'", ",", "compression_stats", ")", "\n", "\n", "step", "=", "step_loaded", "\n", "while", "True", ":", "\n", "            ", "step", "+=", "1", "\n", "\n", "images", ",", "target", "=", "next", "(", "iter_train", ")", "\n", "images", "=", "images", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# set models to training", "\n", "model", ".", "train", "(", ")", "\n", "if", "factory", "is", "not", "None", ":", "\n", "                ", "factory", ".", "train", "(", ")", "\n", "\n", "", "forward_factory", "(", ")", "\n", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "\n", "loss_spectral_penalty", "=", "None", "\n", "if", "factory", "is", "not", "None", "and", "cfg", ".", "spectral_penalty", "is", "not", "None", ":", "\n", "                ", "assert", "cfg", ".", "ops_use_factory", ",", "'Spectral penalty is only available in factory mode'", "\n", "loss_spectral_penalty", "=", "resolve_spectral_penalty", "(", "cfg", ".", "spectral_penalty", ")", "(", "\n", "factory", ".", "forward_singular_values", "(", ")", "\n", ")", "\n", "loss", "=", "loss", "+", "cfg", ".", "spectral_penalty_weight", "*", "loss_spectral_penalty", "\n", "\n", "", "loss_stiefel_penalty", "=", "None", "\n", "if", "factory", "is", "not", "None", "and", "factory", ".", "has_stiefel_penalty", ":", "\n", "                ", "loss_stiefel_penalty", "=", "factory", ".", "stiefel_penalty", "(", ")", "\n", "loss", "=", "loss", "+", "cfg", ".", "ops_factory_stiefel_penalty_weight", "*", "loss_stiefel_penalty", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss", "=", "loss", ".", "item", "(", ")", "\n", "\n", "# update lr schedulers", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "if", "step", "%", "cfg", ".", "num_log_loss_steps", "==", "0", ":", "\n", "                ", "tb_add_scalars", "(", "tb", ",", "'batch'", ",", "{", "\n", "'loss'", ":", "loss", ",", "\n", "}", ",", "global_step", "=", "step", ")", "\n", "if", "loss_spectral_penalty", "is", "not", "None", ":", "\n", "                    ", "tb", ".", "add_scalar", "(", "'batch/loss_spectral_penalty'", ",", "loss_spectral_penalty", ",", "global_step", "=", "step", ")", "\n", "", "if", "loss_stiefel_penalty", "is", "not", "None", ":", "\n", "                    ", "tb", ".", "add_scalar", "(", "'batch/loss_stiefel_penalty'", ",", "loss_stiefel_penalty", ",", "global_step", "=", "step", ")", "\n", "", "tb_add_scalars", "(", "tb", ",", "'progress'", ",", "{", "\n", "'lr'", ":", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "\n", "'pct_done'", ":", "100", "*", "step", "/", "cfg", ".", "num_training_steps", ",", "\n", "'eta_hrs'", ":", "(", "time", ".", "monotonic", "(", ")", "-", "time_start_sec", ")", "*", "(", "cfg", ".", "num_training_steps", "-", "step", ")", "/", "\n", "(", "(", "step", "-", "step_loaded", ")", "*", "3600", ")", "\n", "}", ",", "global_step", "=", "step", ")", "\n", "\n", "", "if", "step", "%", "cfg", ".", "num_log_sv_steps", "==", "0", ":", "\n", "# calculate/collect model singular values", "\n", "                ", "svs", "=", "get_singular_values_from_network", "(", "model", ",", "ops_regular_classes", ")", "\n", "if", "factory", "is", "not", "None", "and", "factory", ".", "have_singular_values", ":", "\n", "                    ", "svs", ".", "update", "(", "get_canonical_singular_values_from_spectral_tensors_factory", "(", "factory", ")", ")", "\n", "\n", "# visualize and log svs", "\n", "", "if", "svs", "is", "not", "None", "and", "len", "(", "svs", ".", "keys", "(", ")", ")", ">", "0", ":", "\n", "                    ", "svs_unnorm_vis", "=", "visualize_singular_values", "(", "svs", ",", "modules_order", ",", "\n", "cfg", ".", "vis_truncate_singular_values", ",", "False", ")", "\n", "svs_norm_vis", "=", "visualize_singular_values", "(", "svs", ",", "modules_order", ",", "\n", "cfg", ".", "vis_truncate_singular_values", ",", "True", ")", "\n", "tb", ".", "add_image", "(", "'singular_values/model'", ",", "svs_unnorm_vis", ",", "global_step", "=", "step", ")", "\n", "tb", ".", "add_image", "(", "'singular_values_normalized/model'", ",", "svs_norm_vis", ",", "global_step", "=", "step", ")", "\n", "spectral_norm", "=", "{", "k", ":", "v", "[", "0", "]", ".", "item", "(", ")", "for", "k", ",", "v", "in", "svs", ".", "items", "(", ")", "}", "\n", "stable_rank", "=", "{", "k", ":", "(", "(", "v", "*", "v", ")", ".", "sum", "(", ")", "/", "(", "v", "[", "0", "]", "**", "2", ")", ".", "clamp_min", "(", "1e-7", ")", ")", ".", "item", "(", ")", "for", "k", ",", "v", "in", "svs", ".", "items", "(", ")", "}", "\n", "tb", ".", "add_scalar", "(", "'singular_values_stats/max_spectral_norm'", ",", "\n", "max", "(", "spectral_norm", ".", "values", "(", ")", ")", ",", "global_step", "=", "step", ")", "\n", "tb", ".", "add_scalar", "(", "'singular_values_stats/max_stable_rank'", ",", "\n", "max", "(", "stable_rank", ".", "values", "(", ")", ")", ",", "global_step", "=", "step", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'spectral_norm'", ",", "spectral_norm", ",", "global_step", "=", "step", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'stable_rank'", ",", "stable_rank", ",", "global_step", "=", "step", ")", "\n", "\n", "", "", "if", "step", "%", "cfg", ".", "num_checkpoint_steps", "==", "0", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "\n", "top1acc", ",", "top5acc", "=", "0", ",", "0", "\n", "for", "batch", "in", "dataloader_valid", ":", "\n", "                    ", "images", ",", "target", "=", "batch", "\n", "images", ",", "target", "=", "images", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "output", "=", "model", "(", "images", ")", "\n", "acc1", ",", "acc5", "=", "classification_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1acc", "+=", "acc1", "\n", "top5acc", "+=", "acc5", "\n", "\n", "", "metrics", "=", "{", "\n", "'top1acc'", ":", "100.", "*", "top1acc", ".", "item", "(", ")", "/", "len", "(", "dataset_valid", ")", ",", "\n", "'top5acc'", ":", "100.", "*", "top5acc", ".", "item", "(", ")", "/", "len", "(", "dataset_valid", ")", ",", "\n", "}", "\n", "\n", "metrics_best_all", "=", "get_best_imgcls_metrics", "(", "metrics", ",", "metrics_best_all", ")", "\n", "print", "(", "json", ".", "dumps", "(", "metrics", ",", "indent", "=", "4", ")", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'metrics'", ",", "metrics", ",", "global_step", "=", "step", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'metrics_best'", ",", "metrics_best_all", ",", "global_step", "=", "step", ")", "\n", "\n", "metric_new_best", "=", "metrics_best_all", "[", "'top1acc'", "]", "\n", "have_new_best", "=", "metric_best", "!=", "metric_new_best", "\n", "if", "have_new_best", ":", "\n", "                    ", "print", "(", "f'Step {step}: metric improved from {metric_best} to {metric_new_best}'", ")", "\n", "metric_best", "=", "metric_new_best", "\n", "", "else", ":", "\n", "                    ", "print", "(", "f'Step {step}: Metric did not improve'", ")", "\n", "\n", "# prepare checkpoint", "\n", "", "state_dict", "=", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'persistent_random_sampler'", ":", "persistent_random_sampler", ".", "state_dict", "(", ")", ",", "\n", "'step'", ":", "step", ",", "\n", "'metric_best'", ":", "metric_best", ",", "\n", "'metrics_best_all'", ":", "metrics_best_all", ",", "\n", "}", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                    ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "state_dict", ".", "update", "(", "{", "\n", "'lr_scheduler'", ":", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", ")", "\n", "", "if", "factory", "is", "not", "None", ":", "\n", "                    ", "state_dict", "[", "'factory'", "]", "=", "factory", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "checkpoint_path_latest", "+", "'.tmp'", ")", "\n", "\n", "# handle best model artifacts", "\n", "if", "have_new_best", ":", "\n", "# copy current checkpoint to best model checkpoint", "\n", "                    ", "shutil", ".", "copy", "(", "checkpoint_path_latest", "+", "'.tmp'", ",", "checkpoint_path_best", "+", "'.tmp'", ")", "\n", "# commit best artifacts", "\n", "os", ".", "rename", "(", "checkpoint_path_best", "+", "'.tmp'", ",", "checkpoint_path_best", ")", "\n", "\n", "# commit checkpoint", "\n", "", "os", ".", "rename", "(", "checkpoint_path_latest", "+", "'.tmp'", ",", "checkpoint_path_latest", ")", "\n", "\n", "", "if", "step", "==", "cfg", ".", "num_training_steps", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "print", "(", "f'Step {step}: finished training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.src.train_gan.main": [[33, 632], ["cfg.__dict__.get", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "wandb.init", "wandb.tensorboard.patch", "src.utils.helpers.verify_experiment_integrity", "src.utils.resolvers.resolve_gan_dataset", "src.utils.resolvers.resolve_gan_dataset", "src.utils.helpers.PersistentRandomSampler", "list", "src.utils.resolvers.resolve_gan_models", "src.utils.resolvers.resolve_gan_losses", "src.utils.resolvers.resolve_ops", "list", "g_cls", "src.utils.helpers.net_extract_modules_order", "print", "src.utils.resolvers.resolve_ops", "list", "d_cls", "src.utils.helpers.net_extract_modules_order", "print", "src.utils.helpers.get_statedict_num_params", "print", "src.utils.helpers.get_statedict_num_params", "print", "list", "list", "src.utils.resolvers.resolve_lr_sched", "src.utils.resolvers.resolve_lr_sched", "os.path.isfile", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.monotonic", "iter", "print", "os.environ.get", "src.utils.resolvers.resolve_ops", "ops_regular_dict.values", "g_ops.values", "src.utils.helpers.ModuleEMA", "torch.no_grad", "torch.no_grad", "src.utils.helpers.generate_noise", "g_model.cuda.forward", "src.utils.resolvers.resolve_ops_factory", "src.utils.resolvers.resolve_stiefel", "src.utils.resolvers.resolve_stiefel", "src.utils.resolvers.resolve_ops_factory.cuda", "d_ops.values", "src.utils.resolvers.resolve_ops_factory", "src.utils.resolvers.resolve_stiefel", "src.utils.resolvers.resolve_stiefel", "src.utils.resolvers.resolve_ops_factory.cuda", "g_model.cuda.state_dict", "src.utils.spectral_tensors_factory.net_reparameterize_standard_to_factory", "print", "d_model.cuda.state_dict", "src.utils.spectral_tensors_factory.net_reparameterize_standard_to_factory", "print", "g_model.cuda.cuda", "d_model.cuda.cuda", "src.utils.helpers.silent_torch_jit_trace_module", "src.utils.helpers.silent_torch_jit_trace_module", "g_model.cuda.parameters", "list", "src.utils.resolvers.resolve_optimizer", "d_model.cuda.parameters", "list", "src.utils.resolvers.resolve_optimizer", "torch.load", "torch.load", "g_model.cuda.load_state_dict", "d_model.cuda.load_state_dict", "g_optimizer.load_state_dict", "d_optimizer.load_state_dict", "src.utils.helpers.PersistentRandomSampler.load_state_dict", "src.utils.helpers.PersistentRandomSampler.fast_forward_to", "torch.no_grad", "torch.no_grad", "train_gan.main.forward_g_factory"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.verify_experiment_integrity", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_gan_dataset", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_gan_dataset", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_gan_models", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_gan_losses", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_ops", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.net_extract_modules_order", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_ops", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.net_extract_modules_order", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.get_statedict_num_params", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.get_statedict_num_params", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_lr_sched", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_lr_sched", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_ops", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.generate_noise", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.forward", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_ops_factory", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_stiefel", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_stiefel", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_ops_factory", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_stiefel", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_stiefel", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.net_reparameterize_standard_to_factory", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.net_reparameterize_standard_to_factory", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.silent_torch_jit_trace_module", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.silent_torch_jit_trace_module", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_optimizer", "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_optimizer", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.fast_forward_to"], ["def", "main", "(", "cfg", ")", ":", "\n", "    ", "assert", "cfg", ".", "experiment", "==", "'gan'", "\n", "\n", "seed", "=", "cfg", ".", "__dict__", ".", "get", "(", "'random_seed'", ",", "2020", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "log_dir", "=", "cfg", ".", "log_dir", "\n", "generator_path_best", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'generator_best.onnx'", ")", "\n", "tb_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'tb'", ")", "\n", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'checkpoints'", ")", "\n", "os", ".", "makedirs", "(", "tb_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "wandb_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "checkpoints_dir", ",", "exist_ok", "=", "True", ")", "\n", "checkpoint_path_latest", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'checkpoint_latest.pth'", ")", "\n", "checkpoint_path_best", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'checkpoint_best.pth'", ")", "\n", "is_cuda", "=", "os", ".", "environ", ".", "get", "(", "'CUDA_VISIBLE_DEVICES'", ",", "None", ")", "is", "not", "None", "\n", "\n", "wandb", ".", "init", "(", "\n", "project", "=", "cfg", ".", "wandb_project", ",", "\n", "resume", "=", "True", ",", "\n", "name", "=", "cfg", ".", "experiment_name", ",", "\n", "id", "=", "cfg", ".", "experiment_name", ",", "\n", "config", "=", "cfg", ".", "__dict__", ",", "\n", "dir", "=", "cfg", ".", "wandb_dir", ",", "\n", "save_code", "=", "False", ",", "\n", ")", "\n", "wandb", ".", "tensorboard", ".", "patch", "(", "\n", "save", "=", "False", ",", "# copies tb files into cloud and allows to run tensorboard in the cloud", "\n", "tensorboardX", "=", "False", ",", "\n", "pytorch", "=", "True", ",", "\n", ")", "\n", "\n", "# check the experiment is not resumed with different code and or settings", "\n", "verify_experiment_integrity", "(", "cfg", ")", "\n", "\n", "dataset", ",", "num_classes", "=", "resolve_gan_dataset", "(", "\n", "cfg", ".", "dataset", ",", "cfg", ".", "root_datasets", "[", "cfg", ".", "dataset", "]", ",", "cfg", ".", "dataset_download", ",", "\n", "with_labels", "=", "cfg", ".", "conditioning", ",", "evaluation_transforms", "=", "False", "\n", ")", "\n", "ds_eval", ",", "_", "=", "resolve_gan_dataset", "(", "\n", "cfg", ".", "dataset", ",", "cfg", ".", "root_datasets", "[", "cfg", ".", "dataset", "]", ",", "cfg", ".", "dataset_download", ",", "\n", "with_labels", "=", "False", ",", "evaluation_transforms", "=", "True", "\n", ")", "\n", "if", "cfg", ".", "conditioning", ":", "\n", "        ", "assert", "type", "(", "num_classes", ")", "is", "int", "and", "num_classes", ">", "0", "\n", "", "else", ":", "\n", "        ", "num_classes", "=", "0", "\n", "\n", "", "persistent_random_sampler", "=", "PersistentRandomSampler", "(", "\n", "dataset", ",", "\n", "cfg", ".", "num_training_steps", "*", "cfg", ".", "batch_size", "*", "cfg", ".", "d_step_repeats", "\n", ")", "\n", "\n", "ops_regular_dict", "=", "resolve_ops", "(", "'regular'", ")", "[", "0", "]", "\n", "ops_regular_classes", "=", "list", "(", "ops_regular_dict", ".", "values", "(", ")", ")", "\n", "\n", "g_cls", ",", "d_cls", "=", "resolve_gan_models", "(", "cfg", ".", "model_name", ")", "\n", "g_loss", ",", "d_loss", "=", "resolve_gan_losses", "(", "cfg", ".", "loss_name", ")", "\n", "\n", "g_ops", ",", "g_fn_conv_back", "=", "resolve_ops", "(", "cfg", ".", "g_ops_name", ")", "\n", "g_ops_classes", "=", "list", "(", "g_ops", ".", "values", "(", ")", ")", "\n", "g_model", "=", "g_cls", "(", "cfg", ".", "model_preset", ",", "g_ops", ",", "num_classes", "=", "num_classes", ",", "**", "cfg", ".", "g_kwargs", ")", "\n", "z_sz", "=", "g_model", ".", "z_sz", "\n", "g_model_ema", "=", "None", "\n", "if", "cfg", ".", "g_ema", ":", "\n", "        ", "g_model_ema", "=", "ModuleEMA", "(", "g_model", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "g_model_dummy_input", "=", "generate_noise", "(", "1", ",", "z_sz", ",", "num_classes", ")", "\n", "g_model_dummy_output", "=", "g_model", ".", "forward", "(", "*", "g_model_dummy_input", ")", "\n", "", "g_modules_order", "=", "net_extract_modules_order", "(", "\n", "g_model", ",", "g_model_dummy_input", ",", "ops_regular_classes", "+", "g_ops_classes", ",", "net_prefix", "=", "None", ",", "\n", "classes_ignored", "=", "(", "ConditionalBatchNorm2d", ",", ")", "\n", ")", "\n", "print", "(", "'Generator modules order:'", "+", "'\\n    '", ".", "join", "(", "[", "''", "]", "+", "g_modules_order", ")", ")", "\n", "g_factory", ",", "g_factory_ema", "=", "None", ",", "None", "\n", "if", "cfg", ".", "g_ops_use_factory", ":", "\n", "        ", "g_factory_cls", "=", "resolve_ops_factory", "(", "cfg", ".", "g_ops_factory_name", ")", "\n", "g_stiefel_full_cls", "=", "resolve_stiefel", "(", "cfg", ".", "g_ops_factory_stiefel_name", ",", "is_canonical", "=", "False", ")", "\n", "g_stiefel_canonical_cls", "=", "resolve_stiefel", "(", "\n", "cfg", ".", "g_ops_factory_stiefel_name", ",", "is_canonical", "=", "cfg", ".", "use_canonical_householder", "\n", ")", "\n", "g_factory", "=", "g_factory_cls", "(", "\n", "g_stiefel_full_cls", ",", "\n", "g_stiefel_canonical_cls", ",", "\n", "cfg", ".", "g_ops_factory_rank", ",", "\n", "**", "cfg", ".", "g_ops_factory_kwargs", "\n", ")", ".", "cuda", "(", ")", "\n", "if", "cfg", ".", "g_ema", ":", "\n", "            ", "g_factory_ema", "=", "ModuleEMA", "(", "g_factory", ")", "\n", "\n", "", "", "d_ops", ",", "d_fn_conv_back", "=", "resolve_ops", "(", "cfg", ".", "d_ops_name", ")", "\n", "d_ops_classes", "=", "list", "(", "d_ops", ".", "values", "(", ")", ")", "\n", "d_model", "=", "d_cls", "(", "\n", "cfg", ".", "model_preset", ",", "d_ops", ",", "\n", "num_classes", "=", "num_classes", ",", "**", "cfg", ".", "d_kwargs", "\n", ")", "\n", "d_modules_order", "=", "net_extract_modules_order", "(", "\n", "d_model", ",", "(", "g_model_dummy_output", ",", "g_model_dummy_input", "[", "1", "]", ")", ",", "\n", "ops_regular_classes", "+", "d_ops_classes", ",", "net_prefix", "=", "None", ",", "\n", "classes_ignored", "=", "(", "ConditionalBatchNorm2d", ",", ")", "\n", ")", "\n", "print", "(", "'Discriminator modules order:'", "+", "'\\n    '", ".", "join", "(", "[", "''", "]", "+", "d_modules_order", ")", ")", "\n", "d_factory", "=", "None", "\n", "if", "cfg", ".", "d_ops_use_factory", ":", "\n", "        ", "d_factory_cls", "=", "resolve_ops_factory", "(", "cfg", ".", "d_ops_factory_name", ")", "\n", "d_stiefel_full_cls", "=", "resolve_stiefel", "(", "cfg", ".", "d_ops_factory_stiefel_name", ",", "is_canonical", "=", "False", ")", "\n", "d_stiefel_canonical_cls", "=", "resolve_stiefel", "(", "\n", "cfg", ".", "d_ops_factory_stiefel_name", ",", "is_canonical", "=", "cfg", ".", "use_canonical_householder", "\n", ")", "\n", "d_factory", "=", "d_factory_cls", "(", "\n", "d_stiefel_full_cls", ",", "\n", "d_stiefel_canonical_cls", ",", "\n", "cfg", ".", "d_ops_factory_rank", ",", "\n", "**", "cfg", ".", "d_ops_factory_kwargs", "\n", ")", ".", "cuda", "(", ")", "\n", "\n", "", "g_orig_num_weights", "=", "get_statedict_num_params", "(", "g_model", ".", "state_dict", "(", ")", ")", "\n", "g_compression_pct", "=", "100", "\n", "if", "g_factory", "is", "not", "None", ":", "\n", "        ", "g_model", ",", "g_stats", "=", "net_reparameterize_standard_to_factory", "(", "\n", "g_model", ",", "g_factory", ",", "module_names_ignored", "=", "cfg", ".", "g_ops_factory_ignored", ",", "net_prefix", "=", "None", ",", "\n", "classes_ignored", "=", "(", "ConditionalBatchNorm2d", ",", ")", "\n", ")", "\n", "if", "cfg", ".", "g_ema", ":", "\n", "            ", "g_model_ema", ".", "dst", ",", "_", "=", "net_reparameterize_standard_to_factory", "(", "\n", "g_model_ema", ".", "dst", ",", "g_factory_ema", ".", "dst", ",", "module_names_ignored", "=", "cfg", ".", "g_ops_factory_ignored", ",", "net_prefix", "=", "None", ",", "\n", "classes_ignored", "=", "(", "ConditionalBatchNorm2d", ",", ")", "\n", ")", "\n", "", "assert", "g_orig_num_weights", "==", "g_stats", "[", "'nflt32_original_total'", "]", "\n", "g_compression_pct", "=", "g_stats", "[", "'compression_net_pct'", "]", "\n", "g_fn_conv_back", "=", "net_reparameterize_factory_to_standard", "\n", "print", "(", "f'Generator factory:\\n{json.dumps(g_stats, indent=4)}\\n{g_factory}'", ")", "\n", "", "print", "(", "f'Generator:\\n{g_model}'", ")", "\n", "\n", "d_orig_num_weights", "=", "get_statedict_num_params", "(", "d_model", ".", "state_dict", "(", ")", ")", "\n", "d_compression_pct", "=", "100", "\n", "if", "d_factory", "is", "not", "None", ":", "\n", "        ", "d_model", ",", "d_stats", "=", "net_reparameterize_standard_to_factory", "(", "\n", "d_model", ",", "d_factory", ",", "module_names_ignored", "=", "cfg", ".", "d_ops_factory_ignored", ",", "net_prefix", "=", "None", ",", "\n", "classes_ignored", "=", "(", "ConditionalBatchNorm2d", ",", ")", "\n", ")", "\n", "assert", "d_orig_num_weights", "==", "d_stats", "[", "'nflt32_original_total'", "]", "\n", "d_compression_pct", "=", "d_stats", "[", "'compression_net_pct'", "]", "\n", "print", "(", "f'Discriminator:\\n{json.dumps(d_stats, indent=4)}\\n{d_factory}'", ")", "\n", "", "print", "(", "f'Discriminator:\\n{d_model}'", ")", "\n", "\n", "compression_stats", "=", "{", "\n", "'generator_orig_num_weights'", ":", "g_orig_num_weights", ",", "\n", "'generator_compression_pct'", ":", "g_compression_pct", ",", "\n", "'discriminator_orig_num_weights'", ":", "d_orig_num_weights", ",", "\n", "'discriminator_compression_pct'", ":", "d_compression_pct", ",", "\n", "}", "\n", "\n", "if", "is_cuda", ":", "\n", "        ", "g_model", "=", "g_model", ".", "cuda", "(", ")", "\n", "if", "cfg", ".", "g_ema", ":", "\n", "            ", "g_model_ema", "=", "g_model_ema", ".", "cuda", "(", ")", "\n", "", "d_model", "=", "d_model", ".", "cuda", "(", ")", "\n", "if", "g_factory", "is", "not", "None", ":", "\n", "            ", "g_factory", "=", "g_factory", ".", "cuda", "(", ")", "\n", "if", "cfg", ".", "g_ema", ":", "\n", "                ", "g_factory_ema", "=", "g_factory_ema", ".", "cuda", "(", ")", "\n", "", "", "if", "d_factory", "is", "not", "None", ":", "\n", "            ", "d_factory", "=", "d_factory", ".", "cuda", "(", ")", "\n", "\n", "", "", "if", "g_factory", "is", "not", "None", ":", "\n", "        ", "g_factory_jit", "=", "silent_torch_jit_trace_module", "(", "g_factory", ",", "{", "'forward'", ":", "(", ")", "}", ")", "\n", "", "if", "d_factory", "is", "not", "None", ":", "\n", "        ", "d_factory_jit", "=", "silent_torch_jit_trace_module", "(", "d_factory", ",", "{", "'forward'", ":", "(", ")", "}", ")", "\n", "\n", "", "def", "forward_g_factory", "(", ")", ":", "\n", "        ", "if", "g_factory", "is", "not", "None", ":", "\n", "            ", "g_weights", "=", "g_factory_jit", ".", "forward", "(", ")", "\n", "g_factory", ".", "set_tensors", "(", "g_weights", ")", "\n", "\n", "", "", "def", "forward_d_factory", "(", ")", ":", "\n", "        ", "if", "d_factory", "is", "not", "None", ":", "\n", "            ", "d_weights", "=", "d_factory_jit", ".", "forward", "(", ")", "\n", "d_factory", ".", "set_tensors", "(", "d_weights", ")", "\n", "\n", "", "", "def", "forward_g_factory_ema", "(", ")", ":", "\n", "        ", "if", "g_factory_ema", "is", "not", "None", ":", "\n", "            ", "g_weights_ema", "=", "g_factory_ema", ".", "forward", "(", ")", "\n", "g_factory_ema", ".", "dst", ".", "set_tensors", "(", "g_weights_ema", ")", "\n", "\n", "", "", "g_param_groups", "=", "list", "(", "g_model", ".", "parameters", "(", ")", ")", "\n", "if", "g_factory", "is", "not", "None", ":", "\n", "        ", "g_param_groups", "+=", "list", "(", "g_factory", ".", "parameters", "(", ")", ")", "\n", "", "g_optimizer", "=", "resolve_optimizer", "(", "cfg", ".", "g_optimizer", ")", "(", "g_param_groups", ",", "**", "cfg", ".", "g_optimizer_kwargs", ")", "\n", "\n", "d_param_groups", "=", "list", "(", "d_model", ".", "parameters", "(", ")", ")", "\n", "if", "d_factory", "is", "not", "None", ":", "\n", "        ", "d_param_groups", "+=", "list", "(", "d_factory", ".", "parameters", "(", ")", ")", "\n", "", "d_optimizer", "=", "resolve_optimizer", "(", "cfg", ".", "d_optimizer", ")", "(", "d_param_groups", ",", "**", "cfg", ".", "d_optimizer_kwargs", ")", "\n", "\n", "g_lr_scheduler", "=", "resolve_lr_sched", "(", "g_optimizer", ",", "cfg", ".", "lr_sched", ",", "cfg", ".", "num_training_steps", ")", "\n", "d_lr_scheduler", "=", "resolve_lr_sched", "(", "d_optimizer", ",", "cfg", ".", "lr_sched", ",", "cfg", ".", "num_training_steps", ")", "\n", "\n", "g_spectral_compensation_state", "=", "None", "\n", "if", "cfg", ".", "g_spectral_compensation_frequency", ">", "0", ":", "\n", "        ", "assert", "cfg", ".", "g_ops_name", "==", "'regular'", "and", "not", "cfg", ".", "g_ops_use_factory", ",", "'Incorrect combination of settings'", "\n", "g_spectral_compensation_state", "=", "{", "}", "\n", "\n", "", "d_spectral_compensation_state", "=", "None", "\n", "if", "cfg", ".", "d_spectral_compensation_frequency", ">", "0", ":", "\n", "        ", "assert", "cfg", ".", "d_ops_name", "==", "'regular'", "and", "not", "cfg", ".", "d_ops_use_factory", ",", "'Incorrect combination of settings'", "\n", "d_spectral_compensation_state", "=", "{", "}", "\n", "\n", "", "step_loaded", "=", "0", "\n", "metric_best", "=", "None", "\n", "metrics_best_all", "=", "None", "\n", "\n", "# load persistent state", "\n", "if", "os", ".", "path", ".", "isfile", "(", "checkpoint_path_latest", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "checkpoint_path_latest", ")", "\n", "g_model", ".", "load_state_dict", "(", "state_dict", "[", "'g_model'", "]", ")", "\n", "d_model", ".", "load_state_dict", "(", "state_dict", "[", "'d_model'", "]", ")", "\n", "if", "cfg", ".", "g_ema", ":", "\n", "            ", "g_model_ema", ".", "load_state_dict", "(", "state_dict", "[", "'g_model_ema'", "]", ")", "\n", "", "if", "g_factory", "is", "not", "None", ":", "\n", "            ", "g_factory", ".", "load_state_dict", "(", "state_dict", "[", "'g_factory'", "]", ")", "\n", "if", "cfg", ".", "g_ema", ":", "\n", "                ", "g_factory_ema", ".", "load_state_dict", "(", "state_dict", "[", "'g_factory_ema'", "]", ")", "\n", "", "", "if", "d_factory", "is", "not", "None", ":", "\n", "            ", "d_factory", ".", "load_state_dict", "(", "state_dict", "[", "'d_factory'", "]", ")", "\n", "", "g_optimizer", ".", "load_state_dict", "(", "state_dict", "[", "'g_optimizer'", "]", ")", "\n", "d_optimizer", ".", "load_state_dict", "(", "state_dict", "[", "'d_optimizer'", "]", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "g_lr_scheduler", ".", "load_state_dict", "(", "state_dict", "[", "'g_lr_scheduler'", "]", ")", "\n", "d_lr_scheduler", ".", "load_state_dict", "(", "state_dict", "[", "'d_lr_scheduler'", "]", ")", "\n", "", "if", "g_spectral_compensation_state", "is", "not", "None", ":", "\n", "            ", "g_spectral_compensation_state", "=", "state_dict", "[", "'g_spectral_compensation_state'", "]", "\n", "", "if", "d_spectral_compensation_state", "is", "not", "None", ":", "\n", "            ", "d_spectral_compensation_state", "=", "state_dict", "[", "'d_spectral_compensation_state'", "]", "\n", "", "persistent_random_sampler", ".", "load_state_dict", "(", "state_dict", "[", "'persistent_random_sampler'", "]", ")", "\n", "step_loaded", "=", "state_dict", "[", "'step'", "]", "\n", "metric_best", "=", "state_dict", "[", "'metric_best'", "]", "\n", "metrics_best_all", "=", "state_dict", "[", "'metrics_best_all'", "]", "\n", "persistent_random_sampler", ".", "fast_forward_to", "(", "step_loaded", "*", "cfg", ".", "batch_size", "*", "cfg", ".", "d_step_repeats", ")", "\n", "if", "step_loaded", "==", "cfg", ".", "num_training_steps", ":", "\n", "            ", "print", "(", "'Experiment was finished earlier; exiting'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# start dataloader workers", "\n", "", "", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "sampler", "=", "persistent_random_sampler", ",", "\n", ")", "\n", "\n", "# populate last_tensors", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "forward_g_factory", "(", ")", "\n", "forward_d_factory", "(", ")", "\n", "\n", "# training loop preamble", "\n", "", "if", "step_loaded", "==", "0", ":", "\n", "        ", "print", "(", "'Started training'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Resumed training from step {step_loaded}'", ")", "\n", "", "time_start_sec", "=", "time", ".", "monotonic", "(", ")", "\n", "dataiter", "=", "iter", "(", "dataloader", ")", "\n", "\n", "# training loop", "\n", "with", "SilentSummaryWriter", "(", "tb_dir", ")", "as", "tb", ":", "\n", "        ", "tb_add_scalars", "(", "tb", ",", "'compression'", ",", "compression_stats", ")", "\n", "\n", "step", "=", "step_loaded", "\n", "while", "True", ":", "\n", "            ", "step", "+=", "1", "\n", "\n", "# set models to training", "\n", "g_model", ".", "train", "(", ")", "\n", "d_model", ".", "train", "(", ")", "\n", "if", "g_factory", "is", "not", "None", ":", "\n", "                ", "g_factory", ".", "train", "(", ")", "\n", "", "if", "d_factory", "is", "not", "None", ":", "\n", "                ", "d_factory", ".", "train", "(", ")", "\n", "\n", "", "loss_d", ",", "loss_g", "=", "None", ",", "None", "\n", "loss_g_spectral_penalty", ",", "loss_d_spectral_penalty", "=", "None", ",", "None", "\n", "loss_g_stiefel_penalty", ",", "loss_d_stiefel_penalty", "=", "None", ",", "None", "\n", "\n", "#", "\n", "# update generator", "\n", "#", "\n", "\n", "g_model", ".", "requires_grad_", "(", "True", ")", "\n", "d_model", ".", "requires_grad_", "(", "False", ")", "\n", "if", "d_factory", "is", "not", "None", ":", "\n", "                ", "d_factory", ".", "last_tensors", "=", "tuple", "(", "a", ".", "detach", "(", ")", "for", "a", "in", "d_factory", ".", "last_tensors", ")", "\n", "\n", "", "forward_g_factory", "(", ")", "\n", "fake_z", "=", "generate_noise", "(", "cfg", ".", "batch_size", ",", "z_sz", ",", "num_classes", ",", "device", "=", "g_model", ")", "\n", "fake_rgb", "=", "g_model", ".", "forward", "(", "*", "fake_z", ")", "\n", "fake_out", "=", "d_model", ".", "forward", "(", "fake_rgb", ",", "fake_z", "[", "1", "]", ")", "\n", "loss_g", "=", "g_loss", "(", "fake_out", ",", "fake_z", "[", "1", "]", ")", "\n", "\n", "if", "cfg", ".", "g_spectral_penalty", "is", "not", "None", ":", "\n", "                ", "assert", "cfg", ".", "g_ops_use_factory", ",", "'Spectral penalty is only available in factory mode'", "\n", "loss_g_spectral_penalty", "=", "resolve_spectral_penalty", "(", "cfg", ".", "g_spectral_penalty", ")", "(", "\n", "g_factory", ".", "forward_singular_values", "(", ")", "\n", ")", "\n", "loss_g", "=", "loss_g", "+", "cfg", ".", "g_spectral_penalty_weight", "*", "loss_g_spectral_penalty", "\n", "\n", "", "if", "g_factory", "is", "not", "None", "and", "g_factory", ".", "has_stiefel_penalty", ":", "\n", "                ", "loss_g_stiefel_penalty", "=", "g_factory", ".", "stiefel_penalty", "(", ")", "\n", "loss_g", "=", "loss_g", "+", "cfg", ".", "g_ops_factory_stiefel_penalty_weight", "*", "loss_g_stiefel_penalty", "\n", "\n", "", "g_optimizer", ".", "zero_grad", "(", ")", "\n", "loss_g", ".", "backward", "(", ")", "\n", "g_optimizer", ".", "step", "(", ")", "\n", "loss_g", "=", "loss_g", ".", "item", "(", ")", "\n", "\n", "if", "g_spectral_compensation_state", "is", "not", "None", "and", "step", "%", "cfg", ".", "g_spectral_compensation_frequency", "==", "0", ":", "\n", "                ", "g_spectral_compensation_state", "=", "spectral_compensation_stateful", "(", "\n", "g_model", ",", "\n", "state", "=", "g_spectral_compensation_state", ",", "\n", "classes", "=", "(", "ops_regular_dict", "[", "'cls_conv2d'", "]", ",", "ops_regular_dict", "[", "'cls_linear'", "]", ",", ")", ",", "\n", "**", "cfg", ".", "g_spectral_compensation_kwargs", "\n", ")", "\n", "\n", "#", "\n", "# update discriminator", "\n", "#", "\n", "", "for", "d_step", "in", "range", "(", "cfg", ".", "d_step_repeats", ")", ":", "\n", "                ", "real", "=", "next", "(", "dataiter", ")", "\n", "if", "is_cuda", ":", "\n", "                    ", "if", "type", "(", "real", ")", "in", "(", "tuple", ",", "list", ")", ":", "\n", "                        ", "real", "=", "tuple", "(", "a", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "a", "in", "real", ")", "\n", "", "else", ":", "\n", "                        ", "real", "=", "real", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "", "if", "not", "cfg", ".", "conditioning", ":", "\n", "                    ", "real", "=", "real", ",", "None", "\n", "\n", "", "g_model", ".", "requires_grad_", "(", "False", ")", "\n", "if", "g_factory", "is", "not", "None", ":", "\n", "                    ", "g_factory", ".", "last_tensors", "=", "tuple", "(", "a", ".", "detach", "(", ")", "for", "a", "in", "g_factory", ".", "last_tensors", ")", "\n", "", "d_model", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "forward_d_factory", "(", ")", "\n", "real_out", "=", "d_model", ".", "forward", "(", "*", "real", ")", "\n", "fake_z", "=", "generate_noise", "(", "cfg", ".", "batch_size", ",", "z_sz", ",", "num_classes", ",", "device", "=", "g_model", ")", "\n", "fake_rgb", "=", "g_model", ".", "forward", "(", "*", "fake_z", ")", "\n", "fake_out", "=", "d_model", ".", "forward", "(", "fake_rgb", ",", "fake_z", "[", "1", "]", ")", "\n", "loss_d", "=", "d_loss", "(", "fake_out", ",", "real_out", ",", "real", "[", "1", "]", ")", "\n", "\n", "if", "cfg", ".", "d_spectral_penalty", "is", "not", "None", ":", "\n", "                    ", "assert", "cfg", ".", "d_ops_use_factory", ",", "'Spectral penalty is only available in factory mode'", "\n", "loss_d_spectral_penalty", "=", "resolve_spectral_penalty", "(", "cfg", ".", "d_spectral_penalty", ")", "(", "\n", "d_factory", ".", "forward_singular_values", "(", ")", "\n", ")", "\n", "loss_d", "=", "loss_d", "+", "cfg", ".", "d_spectral_penalty_weight", "*", "loss_d_spectral_penalty", "\n", "\n", "", "if", "d_factory", "is", "not", "None", "and", "d_factory", ".", "has_stiefel_penalty", ":", "\n", "                    ", "loss_d_stiefel_penalty", "=", "d_factory", ".", "stiefel_penalty", "(", ")", "\n", "loss_d", "=", "loss_d", "+", "cfg", ".", "d_ops_factory_stiefel_penalty_weight", "*", "loss_d_stiefel_penalty", "\n", "\n", "", "d_optimizer", ".", "zero_grad", "(", ")", "\n", "loss_d", ".", "backward", "(", ")", "\n", "d_optimizer", ".", "step", "(", ")", "\n", "loss_d", "=", "loss_d", ".", "item", "(", ")", "\n", "\n", "if", "d_spectral_compensation_state", "is", "not", "None", "and", "(", "step", "*", "cfg", ".", "d_step_repeats", "+", "d_step", ")", "%", "cfg", ".", "d_spectral_compensation_frequency", "==", "0", ":", "\n", "                    ", "d_spectral_compensation_state", "=", "spectral_compensation_stateful", "(", "\n", "d_model", ",", "\n", "state", "=", "d_spectral_compensation_state", ",", "\n", "classes", "=", "(", "ops_regular_dict", "[", "'cls_conv2d'", "]", ",", "ops_regular_dict", "[", "'cls_linear'", "]", ",", ")", ",", "\n", "**", "cfg", ".", "d_spectral_compensation_kwargs", "\n", ")", "\n", "\n", "", "", "if", "cfg", ".", "g_ema", ":", "\n", "                ", "g_model_ema", ".", "update", "(", ")", "\n", "if", "g_factory", "is", "not", "None", ":", "\n", "                    ", "g_factory_ema", ".", "update", "(", ")", "\n", "\n", "# update lr schedulers", "\n", "", "", "g_lr_scheduler", ".", "step", "(", ")", "\n", "d_lr_scheduler", ".", "step", "(", ")", "\n", "\n", "if", "step", "%", "cfg", ".", "num_log_loss_steps", "==", "0", ":", "\n", "                ", "tb_add_scalars", "(", "tb", ",", "'batch'", ",", "{", "\n", "'loss_g'", ":", "loss_g", ",", "\n", "'loss_d'", ":", "loss_d", ",", "\n", "}", ",", "global_step", "=", "step", ")", "\n", "if", "loss_g_spectral_penalty", "is", "not", "None", ":", "\n", "                    ", "tb", ".", "add_scalar", "(", "'batch/loss_g_spectral_penalty'", ",", "loss_g_spectral_penalty", ",", "global_step", "=", "step", ")", "\n", "", "if", "loss_d_spectral_penalty", "is", "not", "None", ":", "\n", "                    ", "tb", ".", "add_scalar", "(", "'batch/loss_d_spectral_penalty'", ",", "loss_d_spectral_penalty", ",", "global_step", "=", "step", ")", "\n", "", "if", "loss_g_stiefel_penalty", "is", "not", "None", ":", "\n", "                    ", "tb", ".", "add_scalar", "(", "'batch/loss_g_stiefel_penalty'", ",", "loss_g_stiefel_penalty", ",", "global_step", "=", "step", ")", "\n", "", "if", "loss_d_stiefel_penalty", "is", "not", "None", ":", "\n", "                    ", "tb", ".", "add_scalar", "(", "'batch/loss_d_stiefel_penalty'", ",", "loss_d_stiefel_penalty", ",", "global_step", "=", "step", ")", "\n", "", "tb_add_scalars", "(", "tb", ",", "'progress'", ",", "{", "\n", "'lr_g'", ":", "g_lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "\n", "'lr_d'", ":", "d_lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "\n", "'pct_done'", ":", "100", "*", "step", "/", "cfg", ".", "num_training_steps", ",", "\n", "'eta_hrs'", ":", "(", "time", ".", "monotonic", "(", ")", "-", "time_start_sec", ")", "*", "(", "cfg", ".", "num_training_steps", "-", "step", ")", "/", "\n", "(", "(", "step", "-", "step_loaded", ")", "*", "3600", ")", "\n", "}", ",", "global_step", "=", "step", ")", "\n", "\n", "", "if", "step", "%", "cfg", ".", "num_log_images_steps", "==", "0", ":", "\n", "                ", "GH", ",", "GW", "=", "8", ",", "8", "\n", "if", "cfg", ".", "conditioning", ":", "\n", "                    ", "GH", "=", "min", "(", "num_classes", ",", "10", ")", "\n", "", "GT", "=", "GH", "*", "GW", "\n", "plot_grid", "=", "partial", "(", "make_grid", ",", "pad_value", "=", "0", ",", "nrow", "=", "GW", ")", "\n", "forward_g_factory_ema", "(", ")", "\n", "g", "=", "g_model_ema", ".", "dst", "if", "cfg", ".", "g_ema", "else", "g_model", "\n", "device", "=", "next", "(", "g", ".", "parameters", "(", ")", ")", ".", "device", "\n", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "name", ",", "seed", "in", "(", "(", "'fixed'", ",", "2020", ")", ",", "(", "'random'", ",", "None", ")", ")", ":", "\n", "# random samples, grouped by class if we are in conditional mode", "\n", "                        ", "z", ",", "l", "=", "generate_noise", "(", "GT", ",", "z_sz", ",", "num_classes", ",", "rng_seed", "=", "seed", ",", "device", "=", "g", ")", "\n", "if", "cfg", ".", "conditioning", ":", "\n", "                            ", "if", "GH", "!=", "num_classes", ":", "\n", "                                ", "l", "=", "l", "[", ":", "GH", "]", ".", "view", "(", "GH", ",", "1", ")", ".", "repeat", "(", "1", ",", "GW", ")", ".", "view", "(", "GT", ",", ")", "\n", "", "else", ":", "\n", "                                ", "l", "=", "torch", ".", "arange", "(", "num_classes", ",", "device", "=", "device", ")", ".", "view", "(", "GH", ",", "1", ")", ".", "repeat", "(", "1", ",", "GW", ")", ".", "view", "(", "GT", ",", ")", "\n", "", "", "rgb", "=", "g", ".", "forward", "(", "z", ",", "l", ")", "\n", "padding", "=", "rgb", ".", "shape", "[", "-", "1", "]", "//", "16", "\n", "tb", ".", "add_image", "(", "f'samples_{name}'", ",", "plot_grid", "(", "rgb", ",", "padding", "=", "padding", ")", ",", "global_step", "=", "step", ")", "\n", "\n", "# interpolation sheets", "\n", "z", "=", "z", ".", "view", "(", "GH", ",", "GW", ",", "z_sz", ")", "\n", "z0", ",", "z1", "=", "z", "[", ":", ",", "0", ",", ":", "]", ",", "z", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "z", "=", "[", "batch_interp", "(", "z0", ",", "z1", ",", "t", "/", "(", "GW", "-", "1", ")", ",", "cfg", ".", "z_interp_mode", ")", ".", "unsqueeze", "(", "1", ")", "for", "t", "in", "range", "(", "GW", ")", "]", "\n", "z", "=", "torch", ".", "cat", "(", "z", ",", "dim", "=", "1", ")", ".", "reshape", "(", "GT", ",", "z_sz", ")", "\n", "rgb", "=", "g", ".", "forward", "(", "z", ",", "l", ")", "\n", "tb", ".", "add_image", "(", "f'interpolation_{name}'", ",", "plot_grid", "(", "rgb", ",", "padding", "=", "padding", ")", ",", "global_step", "=", "step", ")", "\n", "\n", "", "", "", "if", "step", "%", "cfg", ".", "num_log_sv_steps", "==", "0", ":", "\n", "# calculate generator singular values", "\n", "                ", "g_svs", "=", "get_singular_values_from_network", "(", "\n", "g_model", ",", "g_ops_classes", "+", "ops_regular_classes", ",", "classes_ignored", "=", "(", "ConditionalBatchNorm2d", ",", ")", "\n", ")", "\n", "if", "g_factory", "is", "not", "None", "and", "g_factory", ".", "have_singular_values", ":", "\n", "                    ", "g_svs", ".", "update", "(", "get_canonical_singular_values_from_spectral_tensors_factory", "(", "g_factory", ")", ")", "\n", "\n", "# calculate discriminator singular values", "\n", "", "d_svs", "=", "get_singular_values_from_network", "(", "\n", "d_model", ",", "d_ops_classes", "+", "ops_regular_classes", ",", "classes_ignored", "=", "(", "ConditionalBatchNorm2d", ",", ")", "\n", ")", "\n", "if", "d_factory", "is", "not", "None", "and", "d_factory", ".", "have_singular_values", ":", "\n", "                    ", "d_svs", ".", "update", "(", "get_canonical_singular_values_from_spectral_tensors_factory", "(", "d_factory", ")", ")", "\n", "\n", "# visualize and log svs", "\n", "", "if", "g_svs", "is", "not", "None", "and", "len", "(", "g_svs", ".", "keys", "(", ")", ")", ">", "0", ":", "\n", "                    ", "g_svs_unnorm_vis", "=", "visualize_singular_values", "(", "g_svs", ",", "g_modules_order", ",", "\n", "cfg", ".", "vis_truncate_singular_values", ",", "False", ")", "\n", "g_svs_norm_vis", "=", "visualize_singular_values", "(", "g_svs", ",", "g_modules_order", ",", "\n", "cfg", ".", "vis_truncate_singular_values", ",", "True", ")", "\n", "tb", ".", "add_image", "(", "'singular_values/generator'", ",", "g_svs_unnorm_vis", ",", "global_step", "=", "step", ")", "\n", "tb", ".", "add_image", "(", "'singular_values_normalized/generator'", ",", "g_svs_norm_vis", ",", "global_step", "=", "step", ")", "\n", "g_spectral_norm", "=", "{", "k", ":", "v", "[", "0", "]", ".", "item", "(", ")", "for", "k", ",", "v", "in", "g_svs", ".", "items", "(", ")", "}", "\n", "g_stable_rank", "=", "{", "k", ":", "(", "(", "v", "*", "v", ")", ".", "sum", "(", ")", "/", "(", "v", "[", "0", "]", "**", "2", ")", ".", "clamp_min", "(", "1e-7", ")", ")", ".", "item", "(", ")", "for", "k", ",", "v", "in", "g_svs", ".", "items", "(", ")", "}", "\n", "tb", ".", "add_scalar", "(", "'singular_values_stats/generator_max_spectral_norm'", ",", "\n", "max", "(", "g_spectral_norm", ".", "values", "(", ")", ")", ",", "global_step", "=", "step", ")", "\n", "tb", ".", "add_scalar", "(", "'singular_values_stats/generator_max_stable_rank'", ",", "\n", "max", "(", "g_stable_rank", ".", "values", "(", ")", ")", ",", "global_step", "=", "step", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'generator_spectral_norm'", ",", "g_spectral_norm", ",", "global_step", "=", "step", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'generator_stable_rank'", ",", "g_stable_rank", ",", "global_step", "=", "step", ")", "\n", "\n", "", "if", "d_svs", "is", "not", "None", "and", "len", "(", "d_svs", ".", "keys", "(", ")", ")", ">", "0", ":", "\n", "                    ", "d_svs_unnorm_vis", "=", "visualize_singular_values", "(", "d_svs", ",", "d_modules_order", ",", "\n", "cfg", ".", "vis_truncate_singular_values", ",", "False", ")", "\n", "d_svs_norm_vis", "=", "visualize_singular_values", "(", "d_svs", ",", "d_modules_order", ",", "\n", "cfg", ".", "vis_truncate_singular_values", ",", "True", ")", "\n", "tb", ".", "add_image", "(", "'singular_values/discriminator'", ",", "d_svs_unnorm_vis", ",", "global_step", "=", "step", ")", "\n", "tb", ".", "add_image", "(", "'singular_values_normalized/discriminator'", ",", "d_svs_norm_vis", ",", "global_step", "=", "step", ")", "\n", "d_spectral_norm", "=", "{", "k", ":", "v", "[", "0", "]", ".", "item", "(", ")", "for", "k", ",", "v", "in", "d_svs", ".", "items", "(", ")", "}", "\n", "d_stable_rank", "=", "{", "k", ":", "(", "(", "v", "*", "v", ")", ".", "sum", "(", ")", "/", "(", "v", "[", "0", "]", "**", "2", ")", ".", "clamp_min", "(", "1e-7", ")", ")", ".", "item", "(", ")", "for", "k", ",", "v", "in", "d_svs", ".", "items", "(", ")", "}", "\n", "tb", ".", "add_scalar", "(", "'singular_values_stats/discriminator_max_spectral_norm'", ",", "\n", "max", "(", "d_spectral_norm", ".", "values", "(", ")", ")", ",", "global_step", "=", "step", ")", "\n", "tb", ".", "add_scalar", "(", "'singular_values_stats/discriminator_max_stable_rank'", ",", "\n", "max", "(", "d_stable_rank", ".", "values", "(", ")", ")", ",", "global_step", "=", "step", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'discriminator_spectral_norm'", ",", "d_spectral_norm", ",", "global_step", "=", "step", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'discriminator_stable_rank'", ",", "d_stable_rank", ",", "global_step", "=", "step", ")", "\n", "\n", "", "", "if", "step", "%", "cfg", ".", "num_checkpoint_steps", "==", "0", ":", "\n", "                ", "g_model", ".", "eval", "(", ")", "\n", "d_model", ".", "eval", "(", ")", "\n", "forward_g_factory_ema", "(", ")", "\n", "\n", "# calculate metrics", "\n", "metrics", "=", "calculate_metrics", "(", "\n", "input1", "=", "GenerativeModelModuleWrapper", "(", "\n", "g_model_ema", ".", "dst", "if", "cfg", ".", "g_ema", "else", "g_model", ",", "\n", "z_sz", ",", "\n", "cfg", ".", "z_type", ",", "\n", "num_classes", "\n", ")", ",", "\n", "input1_model_num_samples", "=", "cfg", ".", "num_validation_images", ",", "\n", "input2", "=", "ds_eval", ",", "\n", "cache_input2_name", "=", "f'specific_{cfg.dataset}_'", "\n", "f'{\"conditional\" if cfg.conditioning else \"unconditional\"}'", ",", "\n", "cuda", "=", "is_cuda", ",", "\n", "save_cpu_ram", "=", "True", ",", "\n", "ppl_z_interp_mode", "=", "cfg", ".", "z_interp_mode", ",", "\n", "**", "cfg", ".", "fidelity_kwargs", "\n", ")", "\n", "metrics_best_all", "=", "get_best_gan_metrics", "(", "metrics", ",", "metrics_best_all", ")", "\n", "print", "(", "json", ".", "dumps", "(", "metrics", ",", "indent", "=", "4", ")", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'metrics'", ",", "metrics", ",", "global_step", "=", "step", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'metrics_best'", ",", "metrics_best_all", ",", "global_step", "=", "step", ")", "\n", "\n", "metric_new_best", "=", "metrics_best_all", "[", "cfg", ".", "fidelity_leading_metric_name", "]", "\n", "have_new_best", "=", "metric_best", "!=", "metric_new_best", "\n", "if", "have_new_best", ":", "\n", "                    ", "print", "(", "f'Step {step}: metric improved from {metric_best} to {metric_new_best}'", ")", "\n", "metric_best", "=", "metric_new_best", "\n", "", "else", ":", "\n", "                    ", "print", "(", "f'Step {step}: Metric did not improve'", ")", "\n", "\n", "# prepare checkpoint", "\n", "", "state_dict", "=", "{", "\n", "'g_model'", ":", "g_model", ".", "state_dict", "(", ")", ",", "\n", "'d_model'", ":", "d_model", ".", "state_dict", "(", ")", ",", "\n", "'g_optimizer'", ":", "g_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'d_optimizer'", ":", "d_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'persistent_random_sampler'", ":", "persistent_random_sampler", ".", "state_dict", "(", ")", ",", "\n", "'step'", ":", "step", ",", "\n", "'metric_best'", ":", "metric_best", ",", "\n", "'metrics_best_all'", ":", "metrics_best_all", ",", "\n", "}", "\n", "if", "cfg", ".", "g_ema", ":", "\n", "                    ", "state_dict", "[", "'g_model_ema'", "]", "=", "g_model_ema", ".", "state_dict", "(", ")", "\n", "", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                    ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "state_dict", ".", "update", "(", "{", "\n", "'g_lr_scheduler'", ":", "g_lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'d_lr_scheduler'", ":", "d_lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", ")", "\n", "", "if", "g_spectral_compensation_state", "is", "not", "None", ":", "\n", "                    ", "state_dict", "[", "'g_spectral_compensation_state'", "]", "=", "g_spectral_compensation_state", "\n", "", "if", "d_spectral_compensation_state", "is", "not", "None", ":", "\n", "                    ", "state_dict", "[", "'d_spectral_compensation_state'", "]", "=", "d_spectral_compensation_state", "\n", "", "if", "g_factory", "is", "not", "None", ":", "\n", "                    ", "state_dict", "[", "'g_factory'", "]", "=", "g_factory", ".", "state_dict", "(", ")", "\n", "if", "cfg", ".", "g_ema", ":", "\n", "                        ", "state_dict", "[", "'g_factory_ema'", "]", "=", "g_factory_ema", ".", "state_dict", "(", ")", "\n", "", "", "if", "d_factory", "is", "not", "None", ":", "\n", "                    ", "state_dict", "[", "'d_factory'", "]", "=", "d_factory", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "checkpoint_path_latest", "+", "'.tmp'", ")", "\n", "\n", "# handle best model artifacts", "\n", "if", "have_new_best", ":", "\n", "# copy current checkpoint to best model checkpoint", "\n", "                    ", "shutil", ".", "copy", "(", "checkpoint_path_latest", "+", "'.tmp'", ",", "checkpoint_path_best", "+", "'.tmp'", ")", "\n", "\n", "# convert generator model to use regular convolutions and dump it to onnx", "\n", "g", "=", "g_model_ema", ".", "dst", "if", "cfg", ".", "g_ema", "else", "g_model", "\n", "if", "g_fn_conv_back", "is", "not", "None", ":", "\n", "                        ", "factory", "=", "None", "\n", "if", "g_factory", "is", "not", "None", ":", "\n", "                            ", "factory", "=", "g_factory_ema", ".", "dst", "if", "cfg", ".", "g_ema", "else", "g_factory", "\n", "", "g", "=", "g_fn_conv_back", "(", "\n", "g", ",", "\n", "inplace", "=", "False", ",", "\n", "net_prefix", "=", "None", ",", "\n", "factory", "=", "factory", ",", "\n", ")", "\n", "\n", "", "dynamic_axes", "=", "{", "'z'", ":", "{", "0", ":", "'batch'", "}", ",", "'rgb'", ":", "{", "0", ":", "'batch'", "}", "}", "\n", "g_model_dummy_input", "=", "generate_noise", "(", "1", ",", "z_sz", ",", "num_classes", ",", "device", "=", "g", ")", "\n", "if", "cfg", ".", "conditioning", ":", "\n", "                        ", "input_names", "=", "[", "'z'", ",", "'condition'", "]", "\n", "dynamic_axes", "[", "'condition'", "]", "=", "{", "0", ":", "'batch'", "}", "\n", "", "else", ":", "\n", "                        ", "input_names", "=", "[", "'z'", "]", "\n", "g_model_dummy_input", "=", "g_model_dummy_input", "[", "0", "]", "\n", "", "torch", ".", "onnx", ".", "export", "(", "\n", "g", ",", "g_model_dummy_input", ",", "\n", "generator_path_best", "+", "'.tmp'", ",", "\n", "opset_version", "=", "11", ",", "# minimum for proper upsampling", "\n", "input_names", "=", "input_names", ",", "output_names", "=", "[", "'rgb'", "]", ",", "\n", "dynamic_axes", "=", "dynamic_axes", ",", "\n", ")", "\n", "\n", "# commit best artifacts", "\n", "os", ".", "rename", "(", "checkpoint_path_best", "+", "'.tmp'", ",", "checkpoint_path_best", ")", "\n", "os", ".", "rename", "(", "generator_path_best", "+", "'.tmp'", ",", "generator_path_best", ")", "\n", "\n", "# commit checkpoint", "\n", "", "os", ".", "rename", "(", "checkpoint_path_latest", "+", "'.tmp'", ",", "checkpoint_path_latest", ")", "\n", "\n", "", "if", "step", "==", "cfg", ".", "num_training_steps", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "print", "(", "f'Step {step}: finished training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.config.dict_deep_update": [[11, 25], ["patch.keys", "isinstance", "config.dict_deep_update", "isinstance", "dict", "overwrite_warns.append", "str", "str"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.config.dict_deep_update"], ["def", "dict_deep_update", "(", "what", ",", "patch", ",", "prefix", "=", "None", ",", "overwrite_warns", "=", "None", ")", ":", "\n", "    ", "for", "k", "in", "patch", ".", "keys", "(", ")", ":", "\n", "        ", "new_prefix", "=", "k", "if", "prefix", "is", "None", "else", "prefix", "+", "'/'", "+", "k", "\n", "if", "isinstance", "(", "patch", "[", "k", "]", ",", "dict", ")", ":", "\n", "            ", "if", "k", "in", "what", ":", "\n", "                ", "assert", "isinstance", "(", "what", "[", "k", "]", ",", "dict", ")", "\n", "", "else", ":", "\n", "                ", "what", "[", "k", "]", "=", "dict", "(", ")", "\n", "", "dict_deep_update", "(", "what", "[", "k", "]", ",", "patch", "[", "k", "]", ",", "prefix", "=", "new_prefix", ",", "overwrite_warns", "=", "overwrite_warns", ")", "\n", "", "else", ":", "\n", "            ", "if", "k", "in", "what", "and", "overwrite_warns", "is", "not", "None", ":", "\n", "                ", "overwrite_warns", ".", "append", "(", "'Overwriting key \\'{}\\': old \\'{}\\' new \\'{}\\''", "\n", ".", "format", "(", "new_prefix", ",", "str", "(", "what", "[", "k", "]", ")", ",", "str", "(", "patch", "[", "k", "]", ")", ")", ")", "\n", "", "what", "[", "k", "]", "=", "patch", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.config.dict_deep_get": [[27, 48], ["enumerate", "type", "key_path.split", "type", "len", "dict_type"], "function", ["None"], ["", "", "", "def", "dict_deep_get", "(", "d", ",", "key_path", ",", "split_ch", "=", "'/'", ",", "default", "=", "None", ",", "create_if_missing", "=", "False", ",", "dict_type", "=", "dict", ")", ":", "\n", "    ", "if", "type", "(", "key_path", ")", "is", "str", ":", "\n", "        ", "parts", "=", "key_path", ".", "split", "(", "split_ch", ")", "\n", "", "elif", "type", "(", "key_path", ")", "is", "list", ":", "\n", "        ", "parts", "=", "key_path", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "for", "i", ",", "part", "in", "enumerate", "(", "parts", ")", ":", "\n", "        ", "is_last", "=", "(", "i", "==", "len", "(", "parts", ")", "-", "1", ")", "\n", "if", "part", "in", "d", ":", "\n", "            ", "d", "=", "d", "[", "part", "]", "\n", "", "else", ":", "\n", "            ", "if", "create_if_missing", ":", "\n", "                ", "if", "is_last", ":", "\n", "                    ", "d", "[", "part", "]", "=", "default", "\n", "", "else", ":", "\n", "                    ", "d", "[", "part", "]", "=", "dict_type", "(", ")", "\n", "", "d", "=", "d", "[", "part", "]", "\n", "", "else", ":", "\n", "                ", "return", "default", "\n", "", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.config.dict_deep_put": [[50, 65], ["enumerate", "type", "key_path.split", "type", "len", "dict_type"], "function", ["None"], ["", "def", "dict_deep_put", "(", "d", ",", "key_path", ",", "val", ",", "split_ch", "=", "'/'", ",", "dict_type", "=", "dict", ")", ":", "\n", "    ", "if", "type", "(", "key_path", ")", "is", "str", ":", "\n", "        ", "parts", "=", "key_path", ".", "split", "(", "split_ch", ")", "\n", "", "elif", "type", "(", "key_path", ")", "is", "list", ":", "\n", "        ", "parts", "=", "key_path", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "for", "i", ",", "part", "in", "enumerate", "(", "parts", ")", ":", "\n", "        ", "is_last", "=", "(", "i", "==", "len", "(", "parts", ")", "-", "1", ")", "\n", "if", "is_last", ":", "\n", "            ", "d", "[", "part", "]", "=", "val", "\n", "", "else", ":", "\n", "            ", "if", "part", "not", "in", "d", ":", "\n", "                ", "d", "[", "part", "]", "=", "dict_type", "(", ")", "\n", "", "d", "=", "d", "[", "part", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.config.expandpath": [[67, 69], ["os.path.abspath", "os.path.expandvars", "os.path.expanduser"], "function", ["None"], ["", "", "", "def", "expandpath", "(", "path", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expandvars", "(", "os", ".", "path", ".", "expanduser", "(", "path", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.config.parse_config_and_args": [[71, 171], ["dict", "loader.add_implicit_resolver", "os.path.basename", "print", "exit", "re.compile", "list", "convert_to_namespace.get", "config.convert_to_namespace", "arg.count", "arg.count", "arg.find", "argv.append", "argv.append", "argv.append", "config.expandpath", "config.dict_deep_update", "ast.literal_eval", "convert_to_namespace.keys", "config.expandpath", "convert_to_namespace.keys", "config.expandpath", "len", "len", "os.path.isfile", "os.path.join", "os.path.isfile", "os.path.splitext", "open", "fp.read().replace", "yaml.safe_load", "type", "type", "config.dict_deep_get", "config.dict_deep_update", "os.path.join", "os.path.join", "os.path.dirname", "os.path.basename", "config.dict_deep_put", "config.dict_deep_put", "config.dict_deep_put", "config.dict_deep_put", "fp.read", "dict", "last_key.count", "last_key.count", "last_key.count", "last_key.count"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.config.convert_to_namespace", "home.repos.pwc.inspect_result.toshas_sttp.utils.config.expandpath", "home.repos.pwc.inspect_result.toshas_sttp.utils.config.dict_deep_update", "home.repos.pwc.inspect_result.toshas_sttp.utils.config.expandpath", "home.repos.pwc.inspect_result.toshas_sttp.utils.config.expandpath", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.dict_deep_get", "home.repos.pwc.inspect_result.toshas_sttp.utils.config.dict_deep_update", "home.repos.pwc.inspect_result.toshas_sttp.utils.config.dict_deep_put", "home.repos.pwc.inspect_result.toshas_sttp.utils.config.dict_deep_put", "home.repos.pwc.inspect_result.toshas_sttp.utils.config.dict_deep_put", "home.repos.pwc.inspect_result.toshas_sttp.utils.config.dict_deep_put"], ["", "def", "parse_config_and_args", "(", "as_namespace", "=", "False", ")", ":", "\n", "    ", "if", "'--help'", "in", "sys", ".", "argv", "or", "'-h'", "in", "sys", ".", "argv", ":", "\n", "        ", "app", "=", "os", ".", "path", ".", "basename", "(", "sys", ".", "argv", "[", "0", "]", ")", "\n", "print", "(", "\n", "f'{app} --cfg <path.yml> [--cfg <path.yml>] [--node-path-key <value>] [--node-path <dict>]\\n'", "+", "\n", "'Multiple configs and command line keys act as deep tree patches.\\n'", "+", "\n", "'Warnings will be issued only for keys overriden by subsequent config files or CLI.\\n'", "+", "\n", "'Lists are treated immutably, subsequent definition overrides entire list.\\n'", "+", "\n", "'If runtime complains about missing attribute in config, just specify using the most convenient way.\\n'", "+", "\n", "'Examples: \\n'", "+", "\n", "'  train.py --cfg ~/semseg.yml\\n'", "+", "\n", "'  train.py --cfg ~/env_dgx.yml --cfg ~/semseg.yml\\n'", "+", "\n", "'  train.py --cfg ~/semseg.yml --optimizer_kwargs-momentum 0.9\\n'", "+", "\n", "'  train.py --cfg ~/semseg.yml --optimizer_kwargs \\'{\"momentum\":0.9,\"dampening\":0.1}\\'\\n'", "\n", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "cfg", "=", "dict", "(", ")", "\n", "\n", "# fix yaml scientific notation loader", "\n", "loader", "=", "yaml", ".", "SafeLoader", "\n", "loader", ".", "add_implicit_resolver", "(", "\n", "u'tag:yaml.org,2002:float'", ",", "\n", "re", ".", "compile", "(", "u'''^(?:\n         [-+]?(?:[0-9][0-9_]*)\\\\.[0-9_]*(?:[eE][-+]?[0-9]+)?\n        |[-+]?(?:[0-9][0-9_]*)(?:[eE][-+]?[0-9]+)\n        |\\\\.[0-9_]+(?:[eE][-+][0-9]+)?\n        |[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*\n        |[-+]?\\\\.(?:inf|Inf|INF)\n        |\\\\.(?:nan|NaN|NAN))$'''", ",", "re", ".", "X", ")", ",", "\n", "list", "(", "u'-+0123456789.'", ")", ")", "\n", "\n", "argv", "=", "[", "]", "\n", "for", "arg", "in", "sys", ".", "argv", "[", "1", ":", "]", ":", "\n", "        ", "assert", "arg", ".", "count", "(", "'='", ")", "in", "(", "0", ",", "1", ")", "\n", "if", "arg", ".", "count", "(", "'='", ")", "==", "1", ":", "\n", "            ", "pos_eq", "=", "arg", ".", "find", "(", "'='", ")", "\n", "arg", ",", "val", "=", "arg", "[", ":", "pos_eq", "]", ",", "arg", "[", "pos_eq", "+", "1", ":", "]", "\n", "assert", "len", "(", "val", ")", ">", "0", "\n", "argv", ".", "append", "(", "arg", ")", "\n", "argv", ".", "append", "(", "val", ")", "\n", "", "else", ":", "\n", "            ", "argv", ".", "append", "(", "arg", ")", "\n", "\n", "", "", "cfg_warnings", "=", "[", "]", "\n", "last_key", "=", "None", "\n", "for", "arg", "in", "argv", ":", "\n", "        ", "if", "len", "(", "arg", ")", ">=", "2", "and", "arg", "[", "0", ":", "2", "]", "==", "'--'", ":", "\n", "            ", "assert", "last_key", "is", "None", ",", "'Key --{} must have a value'", ".", "format", "(", "last_key", ")", "\n", "last_key", "=", "arg", "[", "2", ":", "]", "\n", "continue", "\n", "", "assert", "last_key", "is", "not", "None", ",", "'{} is ambiguous, must begin with \\'--\\' if key, key missing if value'", "\n", "val_str", "=", "arg", "\n", "if", "last_key", "in", "[", "'config'", ",", "'cfg'", "]", ":", "\n", "            ", "cfg_path", "=", "expandpath", "(", "val_str", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cfg_path", ")", ":", "\n", "                ", "cfg_path_proposal", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "sys", ".", "argv", "[", "0", "]", ")", ",", "cfg_path", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cfg_path_proposal", ")", ":", "\n", "                    ", "cfg_path", "=", "cfg_path_proposal", "\n", "", "else", ":", "\n", "                    ", "assert", "False", ",", "'Config file not found in \\'{}\\''", ".", "format", "(", "val_str", ")", "\n", "", "", "cfg_filenamebase", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "cfg_path", ")", ")", "[", "0", "]", "\n", "with", "open", "(", "cfg_path", ")", "as", "fp", ":", "\n", "                ", "data", "=", "fp", ".", "read", "(", ")", ".", "replace", "(", "'__FILENAMEBASE__'", ",", "cfg_filenamebase", ")", "\n", "cfg_patch", "=", "yaml", ".", "safe_load", "(", "data", ")", "\n", "", "assert", "type", "(", "cfg_patch", ")", "is", "dict", ",", "'Config file \\'{}\\' must be a YAML dict'", "\n", "dict_deep_update", "(", "cfg", ",", "cfg_patch", ",", "overwrite_warns", "=", "cfg_warnings", ")", "\n", "last_key", "=", "None", "\n", "continue", "\n", "", "try", ":", "\n", "            ", "val_ast", "=", "ast", ".", "literal_eval", "(", "val_str", ")", "\n", "if", "type", "(", "val_ast", ")", "is", "dict", ":", "\n", "                ", "cfg_node", "=", "dict_deep_get", "(", "cfg", ",", "last_key", ",", "default", "=", "dict", "(", ")", ",", "create_if_missing", "=", "True", ")", "\n", "dict_deep_update", "(", "cfg_node", ",", "val_ast", ")", "\n", "", "elif", "last_key", ".", "count", "(", "'.'", ")", ">", "0", "and", "last_key", ".", "count", "(", "'-'", ")", "==", "0", ":", "\n", "                ", "dict_deep_put", "(", "cfg", ",", "last_key", ",", "val_ast", ",", "split_ch", "=", "'.'", ")", "\n", "", "else", ":", "\n", "                ", "dict_deep_put", "(", "cfg", ",", "last_key", ",", "val_ast", ",", "split_ch", "=", "'-'", ")", "\n", "", "", "except", "(", "SyntaxError", ",", "ValueError", ")", ":", "\n", "            ", "if", "last_key", ".", "count", "(", "'.'", ")", ">", "0", "and", "last_key", ".", "count", "(", "'-'", ")", "==", "0", ":", "\n", "                ", "dict_deep_put", "(", "cfg", ",", "last_key", ",", "val_str", ",", "split_ch", "=", "'.'", ")", "\n", "", "else", ":", "\n", "                ", "dict_deep_put", "(", "cfg", ",", "last_key", ",", "val_str", ",", "split_ch", "=", "'-'", ")", "\n", "", "", "last_key", "=", "None", "\n", "\n", "", "if", "cfg", ".", "get", "(", "\"assert_env_set\"", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "for", "e", "in", "cfg", "[", "\"assert_env_set\"", "]", ":", "\n", "            ", "assert", "e", "in", "os", ".", "environ", ",", "'Environment variable \"{}\" not set'", ".", "format", "(", "e", ")", "\n", "\n", "", "", "if", "'log_dir'", "in", "cfg", ":", "\n", "        ", "if", "'root_wandb'", "in", "cfg", ".", "keys", "(", ")", ":", "\n", "            ", "cfg", "[", "'wandb_dir'", "]", "=", "expandpath", "(", "os", ".", "path", ".", "join", "(", "cfg", "[", "'root_wandb'", "]", ",", "cfg", "[", "'log_dir'", "]", ")", ")", "\n", "", "if", "'root_logs'", "in", "cfg", ".", "keys", "(", ")", ":", "\n", "            ", "cfg", "[", "'log_dir'", "]", "=", "expandpath", "(", "os", ".", "path", ".", "join", "(", "cfg", "[", "'root_logs'", "]", ",", "cfg", "[", "'log_dir'", "]", ")", ")", "\n", "\n", "# convert dict to a one-tier namespace", "\n", "", "", "if", "as_namespace", ":", "\n", "        ", "cfg", "=", "convert_to_namespace", "(", "cfg", ")", "\n", "\n", "", "return", "cfg", ",", "cfg_warnings", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.config.convert_to_namespace": [[173, 181], ["GlobalConfig", "cfg.items", "setattr"], "function", ["None"], ["", "def", "convert_to_namespace", "(", "cfg", ")", ":", "\n", "    ", "class", "GlobalConfig", "(", "argparse", ".", "Namespace", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "namespace", "=", "GlobalConfig", "(", ")", "\n", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "namespace", ",", "k", ",", "v", ")", "\n", "", "return", "namespace", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.config.format_dict": [[183, 185], ["json.dumps"], "function", ["None"], ["", "def", "format_dict", "(", "d", ")", ":", "\n", "    ", "return", "json", ".", "dumps", "(", "d", ",", "indent", "=", "4", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.StiefelHouseholderCanonical.__init__": [[23, 63], ["super().__init__", "torch.nn.Parameter", "stiefel_parameterization.StiefelHouseholderCanonical.register_buffer", "stiefel_parameterization.dof_stiefel_canonical", "numpy.random.RandomState", "torch.zeros", "torch.eye().unsqueeze().repeat", "stiefel_parameterization.StiefelHouseholderCanonical.register_buffer", "torch.no_grad", "torch.ones", "stiefel_parameterization.StiefelHouseholderCanonical.param.zero_", "torch.eye().unsqueeze", "torch.cat", "stiefel_parameterization.StiefelHouseholderCanonical.param.copy_", "ValueError", "torch.from_numpy", "torch.linalg.qr", "[].unsqueeze", "torch.cat.append", "torch.eye", "rng.randn", "r.diag().sign().view", "torch.from_numpy().clamp", "r.diag().sign", "q.geqrf", "torch.from_numpy", "rng.randn", "r.diag"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.dof_stiefel_canonical"], ["def", "__init__", "(", "\n", "self", ",", "batch", ",", "rank", ",", "n", ",", "is_thin", ",", "init_mode", ",", "\n", "init_std", "=", "0.0001", ",", "init_seed", "=", "None", ",", "init_qr_mul_sgn_diag_r", "=", "False", ",", "\n", "handle_det_sign_pos", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "0", "<", "rank", "<=", "n", "\n", "self", ".", "batch", "=", "batch", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "is_thin", "=", "is_thin", "and", "(", "rank", "!=", "n", ")", "\n", "self", ".", "num_param", "=", "batch", "*", "dof_stiefel_canonical", "(", "rank", ",", "n", ")", "\n", "rng", "=", "np", ".", "random", "if", "init_seed", "is", "None", "else", "np", ".", "random", ".", "RandomState", "(", "init_seed", ")", "\n", "self", ".", "param", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "batch", ",", "n", "-", "rank", ",", "rank", ")", ")", "\n", "self", ".", "register_buffer", "(", "'eye'", ",", "torch", ".", "eye", "(", "n", ",", "rank", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", ")", "\n", "if", "handle_det_sign_pos", "and", "rank", "==", "n", "and", "n", "%", "2", "==", "1", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'negate_last_col'", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "n", ")", ")", "\n", "self", ".", "negate_last_col", "[", "-", "1", "]", "=", "-", "1", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "init_mode", "==", "'eye'", ":", "\n", "                ", "self", ".", "param", ".", "zero_", "(", ")", "\n", "", "elif", "init_mode", "in", "(", "'qr_eye_randn'", ",", "'qr_randn'", ")", ":", "\n", "                ", "if", "init_mode", "==", "'qr_eye_randn'", ":", "\n", "                    ", "tmp", "=", "(", "\n", "self", ".", "eye", "+", "\n", "init_std", "*", "torch", ".", "from_numpy", "(", "rng", ".", "randn", "(", "batch", ",", "n", ",", "rank", ")", ")", ".", "clamp", "(", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "tmp", "=", "torch", ".", "from_numpy", "(", "rng", ".", "randn", "(", "batch", ",", "n", ",", "rank", ")", ")", "\n", "", "param", "=", "[", "]", "\n", "for", "m", "in", "tmp", ":", "\n", "                    ", "q", ",", "r", "=", "torch", ".", "linalg", ".", "qr", "(", "m", ")", "\n", "if", "init_qr_mul_sgn_diag_r", ":", "\n", "                        ", "q", "*=", "r", ".", "diag", "(", ")", ".", "sign", "(", ")", ".", "view", "(", "1", ",", "rank", ")", "\n", "", "hh", "=", "q", ".", "geqrf", "(", ")", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", "\n", "param", ".", "append", "(", "hh", "[", ":", ",", "rank", ":", ",", ":", "]", ")", "\n", "", "param", "=", "torch", ".", "cat", "(", "param", ",", "dim", "=", "0", ")", "\n", "self", ".", "param", ".", "copy_", "(", "param", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'Unknown orthogonal initialization {init_mode}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.StiefelHouseholderCanonical.forward": [[64, 76], ["torch.cat", "householder_product", "hasattr", "householder_product.permute"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ")", ":", "\n", "        ", "param", "=", "torch", ".", "cat", "(", "(", "\n", "self", ".", "eye", "[", ":", ",", ":", "self", ".", "rank", ",", ":", "]", ",", "\n", "self", ".", "param", ",", "\n", ")", ",", "dim", "=", "1", ")", "\n", "param_norm", "=", "2", "/", "(", "param", "*", "param", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "thin", "=", "householder_product", "(", "param", ",", "param_norm", ")", "\n", "if", "hasattr", "(", "self", ",", "'negate_last_col'", ")", ":", "\n", "            ", "thin", "=", "thin", "*", "self", ".", "negate_last_col", "\n", "", "if", "not", "self", ".", "is_thin", ":", "\n", "            ", "return", "thin", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "return", "thin", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.StiefelHouseholderCanonical.dof": [[77, 79], ["None"], "methods", ["None"], ["", "def", "dof", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_param", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.StiefelHouseholderCanonical.flops": [[80, 82], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch", "*", "self", ".", "rank", "*", "(", "4", "*", "self", ".", "n", "*", "self", ".", "rank", "+", "3", "*", "self", ".", "n", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.StiefelHouseholder.__init__": [[87, 127], ["super().__init__", "torch.nn.Parameter", "stiefel_parameterization.StiefelHouseholder.register_buffer", "stiefel_parameterization.dof_stiefel", "numpy.random.RandomState", "torch.zeros", "torch.eye().unsqueeze().repeat", "stiefel_parameterization.StiefelHouseholder.register_buffer", "torch.no_grad", "torch.ones", "stiefel_parameterization.StiefelHouseholder.param.zero_", "torch.eye().unsqueeze", "torch.cat", "stiefel_parameterization.StiefelHouseholder.param.copy_", "ValueError", "torch.from_numpy", "torch.linalg.qr", "[].unsqueeze", "torch.cat.append", "torch.eye", "rng.randn", "r.diag().sign().view", "torch.from_numpy().clamp", "r.diag().sign", "q.geqrf", "torch.from_numpy", "rng.randn", "r.diag"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.dof_stiefel"], ["def", "__init__", "(", "\n", "self", ",", "batch", ",", "rank", ",", "n", ",", "is_thin", ",", "init_mode", ",", "\n", "init_std", "=", "0.0001", ",", "init_seed", "=", "None", ",", "init_qr_mul_sgn_diag_r", "=", "False", ",", "\n", "handle_det_sign_pos", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "0", "<", "rank", "<=", "n", "\n", "self", ".", "batch", "=", "batch", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "is_thin", "=", "is_thin", "and", "(", "rank", "!=", "n", ")", "\n", "self", ".", "num_param", "=", "batch", "*", "dof_stiefel", "(", "rank", ",", "n", ")", "\n", "rng", "=", "np", ".", "random", "if", "init_seed", "is", "None", "else", "np", ".", "random", ".", "RandomState", "(", "init_seed", ")", "\n", "self", ".", "param", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "batch", ",", "n", ",", "rank", ")", ")", "\n", "self", ".", "register_buffer", "(", "'eye'", ",", "torch", ".", "eye", "(", "n", ",", "rank", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", ")", "\n", "if", "handle_det_sign_pos", "and", "rank", "==", "n", "and", "n", "%", "2", "==", "1", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'negate_last_col'", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "n", ")", ")", "\n", "self", ".", "negate_last_col", "[", "-", "1", "]", "=", "-", "1", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "init_mode", "==", "'eye'", ":", "\n", "                ", "self", ".", "param", ".", "zero_", "(", ")", "\n", "", "elif", "init_mode", "in", "(", "'qr_eye_randn'", ",", "'qr_randn'", ")", ":", "\n", "                ", "if", "init_mode", "==", "'qr_eye_randn'", ":", "\n", "                    ", "tmp", "=", "(", "\n", "self", ".", "eye", "+", "\n", "init_std", "*", "torch", ".", "from_numpy", "(", "rng", ".", "randn", "(", "batch", ",", "n", ",", "rank", ")", ")", ".", "clamp", "(", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "tmp", "=", "torch", ".", "from_numpy", "(", "rng", ".", "randn", "(", "batch", ",", "n", ",", "rank", ")", ")", "\n", "", "param", "=", "[", "]", "\n", "for", "m", "in", "tmp", ":", "\n", "                    ", "q", ",", "r", "=", "torch", ".", "linalg", ".", "qr", "(", "m", ")", "\n", "if", "init_qr_mul_sgn_diag_r", ":", "\n", "                        ", "q", "*=", "r", ".", "diag", "(", ")", ".", "sign", "(", ")", ".", "view", "(", "1", ",", "rank", ")", "\n", "", "hh", "=", "q", ".", "geqrf", "(", ")", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", "\n", "param", ".", "append", "(", "hh", ")", "\n", "", "param", "=", "torch", ".", "cat", "(", "param", ",", "dim", "=", "0", ")", "\n", "self", ".", "param", ".", "copy_", "(", "param", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'Unknown orthogonal initialization {init_mode}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.StiefelHouseholder.forward": [[128, 137], ["householder_product", "hasattr", "stiefel_parameterization.StiefelHouseholder.param.tril", "householder_product.permute"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ")", ":", "\n", "        ", "param", "=", "self", ".", "param", ".", "tril", "(", "diagonal", "=", "-", "1", ")", "+", "self", ".", "eye", "\n", "param_norm", "=", "2", "/", "(", "param", "*", "param", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "thin", "=", "householder_product", "(", "param", ",", "param_norm", ")", "\n", "if", "hasattr", "(", "self", ",", "'negate_last_col'", ")", ":", "\n", "            ", "thin", "=", "thin", "*", "self", ".", "negate_last_col", "\n", "", "if", "not", "self", ".", "is_thin", ":", "\n", "            ", "return", "thin", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "return", "thin", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.StiefelHouseholder.dof": [[138, 140], ["None"], "methods", ["None"], ["", "def", "dof", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_param", "\n", "", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.dof_stiefel": [[10, 13], ["None"], "function", ["None"], ["", "def", "dof_stiefel", "(", "rank", ",", "n", ")", ":", "\n", "    ", "assert", "rank", "<=", "n", "\n", "return", "rank", "*", "n", "-", "(", "rank", "*", "(", "rank", "+", "1", ")", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.dof_stiefel_canonical": [[15, 18], ["None"], "function", ["None"], ["", "def", "dof_stiefel_canonical", "(", "rank", ",", "n", ")", ":", "\n", "    ", "assert", "rank", "<=", "n", "\n", "return", "rank", "*", "(", "n", "-", "rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.compute_tt_contraction_equation": [[9, 40], ["range", "opt_einsum.get_symbol", "tensor_contraction.compute_tt_contraction_equation.get_next_symbol"], "function", ["None"], ["def", "compute_tt_contraction_equation", "(", "num_cores", ")", ":", "\n", "    ", "assert", "num_cores", ">", "0", "\n", "next_sym", "=", "0", "\n", "\n", "def", "get_next_symbol", "(", ")", ":", "\n", "        ", "nonlocal", "next_sym", "\n", "s", "=", "opt_einsum", ".", "get_symbol", "(", "next_sym", ")", "\n", "next_sym", "+=", "1", "\n", "return", "s", "\n", "\n", "", "equation_left", "=", "\"\"", "\n", "equation_right", "=", "\"\"", "\n", "letter_core_last_rank_right", "=", "None", "\n", "for", "i", "in", "range", "(", "num_cores", ")", ":", "\n", "        ", "letter_rank_left", ",", "letter_rank_right", "=", "None", ",", "None", "\n", "if", "i", "!=", "0", ":", "\n", "            ", "letter_rank_left", "=", "letter_core_last_rank_right", "\n", "", "letter_mode", "=", "get_next_symbol", "(", ")", "\n", "if", "i", "!=", "num_cores", "-", "1", ":", "\n", "            ", "letter_rank_right", "=", "get_next_symbol", "(", ")", "\n", "letter_core_last_rank_right", "=", "letter_rank_right", "\n", "", "if", "i", ">", "0", ":", "\n", "            ", "equation_left", "+=", "','", "\n", "", "if", "letter_rank_left", "is", "not", "None", ":", "\n", "            ", "equation_left", "+=", "letter_rank_left", "\n", "", "equation_left", "+=", "letter_mode", "\n", "if", "letter_rank_right", "is", "not", "None", ":", "\n", "            ", "equation_left", "+=", "letter_rank_right", "\n", "", "equation_right", "+=", "letter_mode", "\n", "", "equation", "=", "equation_left", "+", "'->'", "+", "equation_right", "\n", "return", "equation", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.compute_contraction_fn": [[42, 46], ["opt_einsum.contract_expression"], "function", ["None"], ["", "def", "compute_contraction_fn", "(", "equation", ",", "core_shapes", ")", ":", "\n", "    ", "optimizer", "=", "'dp'", "# produces same results as opt_einsum.BranchBound(nbranch=3) but faster", "\n", "contraction_fn", "=", "opt_einsum", ".", "contract_expression", "(", "equation", ",", "*", "core_shapes", ",", "optimize", "=", "optimizer", ")", "\n", "return", "contraction_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.compute_contraction_flops": [[48, 54], ["opt_einsum.contract_path", "int", "torch.zeros"], "function", ["None"], ["", "def", "compute_contraction_flops", "(", "equation", ",", "core_shapes", ")", ":", "\n", "    ", "optimizer", "=", "'dp'", "# produces same results as opt_einsum.BranchBound(nbranch=3) but faster", "\n", "_", ",", "path_desc", "=", "opt_einsum", ".", "contract_path", "(", "\n", "equation", ",", "*", "(", "torch", ".", "zeros", "(", "a", ")", "for", "a", "in", "core_shapes", ")", ",", "optimize", "=", "optimizer", "\n", ")", "\n", "return", "int", "(", "path_desc", ".", "opt_cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.get_tt_contraction_fn_and_flops": [[56, 80], ["tensor_contraction.compute_tt_contraction_equation", "tensor_contraction.compute_contraction_fn", "tensor_contraction.compute_contraction_flops", "len", "all", "copy.deepcopy", "len", "list", "compute_contraction_fn.", "len", "all", "cores[].dim", "cores[].squeeze", "cores[].squeeze", "all", "all", "len", "cores[].dim", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.compute_tt_contraction_equation", "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.compute_contraction_fn", "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.compute_contraction_flops"], ["", "def", "get_tt_contraction_fn_and_flops", "(", "core_shapes", ")", ":", "\n", "    ", "if", "len", "(", "core_shapes", "[", "0", "]", ")", "==", "2", ":", "\n", "        ", "assert", "len", "(", "core_shapes", "[", "-", "1", "]", ")", "==", "2", "\n", "assert", "all", "(", "len", "(", "a", ")", "==", "3", "for", "a", "in", "core_shapes", "[", "1", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "assert", "core_shapes", "[", "0", "]", "[", "0", "]", "==", "1", "and", "core_shapes", "[", "-", "1", "]", "[", "-", "1", "]", "==", "1", "and", "all", "(", "len", "(", "a", ")", "==", "3", "for", "a", "in", "core_shapes", ")", "\n", "core_shapes", "=", "copy", ".", "deepcopy", "(", "core_shapes", ")", "\n", "core_shapes", "[", "0", "]", ",", "core_shapes", "[", "-", "1", "]", "=", "core_shapes", "[", "0", "]", "[", "1", ":", "]", ",", "core_shapes", "[", "-", "1", "]", "[", ":", "-", "1", "]", "\n", "\n", "", "equation", "=", "compute_tt_contraction_equation", "(", "len", "(", "core_shapes", ")", ")", "\n", "fn", "=", "compute_contraction_fn", "(", "equation", ",", "core_shapes", ")", "\n", "flops", "=", "compute_contraction_flops", "(", "equation", ",", "core_shapes", ")", "\n", "\n", "def", "preprocess_cores_and_contract", "(", "*", "args", ")", ":", "\n", "        ", "cores", "=", "list", "(", "args", ")", "\n", "if", "cores", "[", "0", "]", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "assert", "cores", "[", "-", "1", "]", ".", "dim", "(", ")", "==", "2", "and", "all", "(", "len", "(", "a", ".", "shape", ")", "==", "3", "for", "a", "in", "cores", "[", "1", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "cores", "[", "0", "]", ".", "shape", "[", "0", "]", "==", "1", "and", "cores", "[", "-", "1", "]", ".", "shape", "[", "-", "1", "]", "==", "1", "and", "all", "(", "len", "(", "a", ".", "shape", ")", "==", "3", "for", "a", "in", "cores", ")", "\n", "cores", "[", "0", "]", "=", "cores", "[", "0", "]", ".", "squeeze", "(", "0", ")", "\n", "cores", "[", "-", "1", "]", "=", "cores", "[", "-", "1", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "", "return", "fn", "(", "*", "cores", ")", "\n", "\n", "", "return", "preprocess_cores_and_contract", ",", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.get_full_operator_flops": [[82, 87], ["tensor_contraction.compute_contraction_flops", "len", "len"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.compute_contraction_flops"], ["", "def", "get_full_operator_flops", "(", "A_shape", ",", "x_shape", ")", ":", "\n", "    ", "assert", "len", "(", "A_shape", ")", "==", "2", "and", "len", "(", "x_shape", ")", "==", "2", "and", "A_shape", "[", "1", "]", "==", "x_shape", "[", "0", "]", "\n", "equation", "=", "'ab,bc->ac'", "\n", "flops", "=", "compute_contraction_flops", "(", "equation", ",", "(", "A_shape", ",", "x_shape", ")", ")", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.get_spectral_tt_operator_shapes": [[89, 102], ["dim_factorize_fn", "dim_factorize_fn", "src.utils.tt_utils.get_ranks_tt", "list", "len", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.tt_utils.get_ranks_tt"], ["", "def", "get_spectral_tt_operator_shapes", "(", "A_shape", ",", "x_shape", ",", "max_rank", ",", "dim_factorize_fn", "=", "dim_factorize_simple", ")", ":", "\n", "    ", "assert", "len", "(", "A_shape", ")", "==", "2", "and", "len", "(", "x_shape", ")", "==", "2", "and", "A_shape", "[", "1", "]", "==", "x_shape", "[", "0", "]", "\n", "\n", "dim_dst_modes", "=", "dim_factorize_fn", "(", "A_shape", "[", "0", "]", ",", "True", ")", "\n", "dim_src_modes", "=", "dim_factorize_fn", "(", "A_shape", "[", "1", "]", ",", "False", ")", "\n", "A_modes", "=", "dim_dst_modes", "+", "dim_src_modes", "\n", "\n", "A_tt_ranks", "=", "get_ranks_tt", "(", "dim_dst_modes", "+", "dim_src_modes", ",", "max_rank", ")", "\n", "A_tt_shapes", "=", "list", "(", "(", "A_tt_ranks", "[", "i", "]", ",", "A_modes", "[", "i", "]", ",", "A_tt_ranks", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "len", "(", "A_modes", ")", ")", ")", "\n", "A_tt_shapes", "[", "0", "]", "=", "A_tt_shapes", "[", "0", "]", "[", "1", ":", "]", "\n", "A_tt_shapes", "[", "-", "1", "]", "=", "A_tt_shapes", "[", "-", "1", "]", "[", ":", "-", "1", "]", "\n", "x_tt_shape", "=", "dim_src_modes", "+", "[", "x_shape", "[", "1", "]", "]", "\n", "return", "A_tt_shapes", ",", "x_tt_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.get_spectral_tt_operator_equation": [[104, 148], ["list", "len", "range", "tensor_contraction.compute_tt_contraction_equation.get_next_symbol"], "function", ["None"], ["", "def", "get_spectral_tt_operator_equation", "(", "A_tt_shapes", ",", "x_tt_shape", ")", ":", "\n", "    ", "assert", "len", "(", "A_tt_shapes", ")", ">=", "len", "(", "x_tt_shape", ")", ">=", "2", "\n", "# A: [(o1, r1), (r1, o2, r2), (r2, i1, r3), (r3, i2, r4), (r4, i3)]", "\n", "# x: [i1, i2, i3, x1]", "\n", "num_out_modes", "=", "len", "(", "A_tt_shapes", ")", "-", "len", "(", "x_tt_shape", ")", "+", "1", "\n", "A_in_modes", "=", "list", "(", "rmr", "[", "1", "]", "for", "rmr", "in", "A_tt_shapes", "[", "num_out_modes", ":", "]", ")", "\n", "assert", "A_in_modes", "==", "x_tt_shape", "[", ":", "-", "1", "]", "\n", "num_cores", "=", "len", "(", "A_tt_shapes", ")", "\n", "\n", "next_sym", "=", "0", "\n", "\n", "def", "get_next_symbol", "(", ")", ":", "\n", "        ", "nonlocal", "next_sym", "\n", "s", "=", "opt_einsum", ".", "get_symbol", "(", "next_sym", ")", "\n", "next_sym", "+=", "1", "\n", "return", "s", "\n", "\n", "", "equation_left", "=", "\"\"", "\n", "equation_right", "=", "\"\"", "\n", "equation_part_x", "=", "\"\"", "\n", "letter_core_last_rank_right", "=", "None", "\n", "for", "i", "in", "range", "(", "num_cores", ")", ":", "\n", "        ", "is_core_right_of_sv", "=", "i", ">=", "num_out_modes", "\n", "letter_rank_left", ",", "letter_rank_right", "=", "None", ",", "None", "\n", "if", "i", "!=", "0", ":", "\n", "            ", "letter_rank_left", "=", "letter_core_last_rank_right", "\n", "", "letter_mode", "=", "get_next_symbol", "(", ")", "\n", "if", "i", "!=", "num_cores", "-", "1", ":", "\n", "            ", "letter_rank_right", "=", "get_next_symbol", "(", ")", "\n", "letter_core_last_rank_right", "=", "letter_rank_right", "\n", "", "if", "i", ">", "0", ":", "\n", "            ", "equation_left", "+=", "','", "\n", "", "if", "letter_rank_left", "is", "not", "None", ":", "\n", "            ", "equation_left", "+=", "letter_rank_left", "\n", "", "equation_left", "+=", "letter_mode", "\n", "if", "letter_rank_right", "is", "not", "None", ":", "\n", "            ", "equation_left", "+=", "letter_rank_right", "\n", "", "if", "is_core_right_of_sv", ":", "\n", "            ", "equation_part_x", "+=", "letter_mode", "\n", "", "else", ":", "\n", "            ", "equation_right", "+=", "letter_mode", "\n", "", "", "letter_x_dim1", "=", "get_next_symbol", "(", ")", "\n", "equation", "=", "equation_left", "+", "','", "+", "equation_part_x", "+", "letter_x_dim1", "+", "'->'", "+", "equation_right", "+", "letter_x_dim1", "\n", "return", "equation", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_penalties.spectral_penalty_d_optimal": [[1, 14], ["list", "sum", "sum", "list.values", "s.abs", "s.numel", "s.max().clamp_min", "s.clamp_min().log().sum", "s.max", "s.clamp_min().log", "s.clamp_min"], "function", ["None"], ["def", "spectral_penalty_d_optimal", "(", "svs", ",", "already_abs", "=", "False", ",", "already_normalized", "=", "False", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"\n    D-Optimal Regularizer as described in https://openreview.net/pdf?id=rJNH6sAqY7\n    \"\"\"", "\n", "svs", "=", "list", "(", "svs", ".", "values", "(", ")", ")", "\n", "if", "not", "already_abs", ":", "\n", "        ", "svs", "=", "[", "s", ".", "abs", "(", ")", "for", "s", "in", "svs", "]", "\n", "", "if", "not", "already_normalized", ":", "\n", "        ", "svs", "=", "[", "s", "/", "s", ".", "max", "(", ")", ".", "clamp_min", "(", "eps", ")", "for", "s", "in", "svs", "]", "\n", "", "num_svs_total", "=", "sum", "(", "s", ".", "numel", "(", ")", "for", "s", "in", "svs", ")", "\n", "reg", "=", "sum", "(", "-", "s", ".", "clamp_min", "(", "eps", ")", ".", "log", "(", ")", ".", "sum", "(", ")", "for", "s", "in", "svs", ")", "\n", "reg", "=", "reg", "/", "num_svs_total", "\n", "return", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_penalties.spectral_penalty_divergence": [[16, 34], ["len", "sum", "svs.values", "s.abs", "s.numel", "s.max().clamp_min", "s.sort", "s.max"], "function", ["None"], ["", "def", "spectral_penalty_divergence", "(", "\n", "svs", ",", "param_a", "=", "0.1", ",", "already_abs", "=", "False", ",", "already_normalized", "=", "False", ",", "already_sorted_descending", "=", "False", ",", "eps", "=", "1e-7", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Divergence Regularizer as described in https://openreview.net/pdf?id=rJNH6sAqY7\n    \"\"\"", "\n", "svs", "=", "[", "s", "for", "s", "in", "svs", ".", "values", "(", ")", "if", "s", ".", "numel", "(", ")", ">", "1", "]", "\n", "if", "not", "already_abs", ":", "\n", "        ", "svs", "=", "[", "s", ".", "abs", "(", ")", "for", "s", "in", "svs", "]", "\n", "", "if", "not", "already_normalized", ":", "\n", "        ", "svs", "=", "[", "s", "/", "s", ".", "max", "(", ")", ".", "clamp_min", "(", "eps", ")", "for", "s", "in", "svs", "]", "\n", "", "if", "not", "already_sorted_descending", ":", "\n", "        ", "svs", "=", "[", "s", ".", "sort", "(", "descending", "=", "True", ")", ".", "values", "for", "s", "in", "svs", "]", "\n", "", "var", "=", "param_a", "**", "2", "\n", "num_layers", "=", "len", "(", "svs", ")", "\n", "reg", "=", "[", "(", "(", "1", "-", "s", "[", "1", ":", "]", ")", "**", "2", "/", "var", "-", "(", "s", "[", ":", "-", "1", "]", "-", "s", "[", "1", ":", "]", ")", ".", "clamp_min", "(", "eps", ")", ".", "log", "(", ")", ")", ".", "mean", "(", ")", "for", "s", "in", "svs", "]", "\n", "reg", "=", "sum", "(", "reg", ")", "/", "num_layers", "\n", "return", "reg", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.__init__": [[162, 174], ["numpy.random.RandomState", "len", "numpy.random.RandomState.permutation().tolist", "numpy.random.RandomState.permutation", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_samples_train_total", ",", "rng_seed", "=", "2020", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_samples_train_total", "=", "num_samples_train_total", "\n", "self", ".", "next_sample_id", "=", "0", "\n", "self", ".", "sample_ids", "=", "[", "]", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "rng_seed", ")", "\n", "\n", "while", "len", "(", "self", ".", "sample_ids", ")", "<", "num_samples_train_total", ":", "\n", "            ", "self", ".", "sample_ids", "+=", "rng", ".", "permutation", "(", "len", "(", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "", "self", ".", "sample_ids", "=", "self", ".", "sample_ids", "[", ":", "num_samples_train_total", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.__iter__": [[175, 177], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "sample_ids", "[", "self", ".", "next_sample_id", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.__len__": [[178, 180], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples_train_total", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.state_dict": [[181, 184], ["helpers.PersistentRandomSampler.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "# not saving next_sample_id because sampler is used in look-ahead fashion by DataLoader", "\n", "        ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'dataset'", "and", "key", "!=", "'next_sample_id'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.load_state_dict": [[185, 187], ["helpers.PersistentRandomSampler.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.ModuleEMA.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.PersistentRandomSampler.fast_forward_to": [[188, 190], ["None"], "methods", ["None"], ["", "def", "fast_forward_to", "(", "self", ",", "sample_id", ")", ":", "\n", "        ", "self", ".", "next_sample_id", "=", "sample_id", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.ModuleEMA.__init__": [[193, 204], ["super().__init__", "copy.deepcopy", "helpers.ModuleEMA.dst.zero_grad", "helpers.ModuleEMA.dst.eval", "helpers.ModuleEMA.dst.cpu"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "src", ",", "placement", "=", "'same'", ",", "momentum", "=", "0.9999", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "placement", "in", "(", "'same'", ",", "'cpu'", ")", "\n", "self", ".", "src", "=", "[", "src", "]", "\n", "self", ".", "placement", "=", "placement", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "dst", "=", "copy", ".", "deepcopy", "(", "src", ")", "\n", "self", ".", "dst", ".", "zero_grad", "(", ")", "\n", "self", ".", "dst", ".", "eval", "(", ")", "\n", "if", "placement", "==", "'cpu'", ":", "\n", "            ", "self", ".", "dst", "=", "self", ".", "dst", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.ModuleEMA.update": [[205, 219], ["torch.no_grad", "zip", "ns.endswith", "getattr", "getattr", "hasattr", "hasattr", "torch.is_floating_point", "torch.is_floating_point", "ps_data.cpu.cpu.cpu"], "methods", ["None"], ["", "", "def", "update", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "prop", "in", "(", "'named_parameters'", ",", "'named_buffers'", ")", ":", "\n", "                ", "for", "(", "ns", ",", "ps", ")", ",", "(", "nd", ",", "pd", ")", "in", "zip", "(", "getattr", "(", "self", ".", "src", "[", "0", "]", ",", "prop", ")", "(", ")", ",", "getattr", "(", "self", ".", "dst", ",", "prop", ")", "(", ")", ")", ":", "\n", "                    ", "assert", "ns", "==", "nd", ",", "f'{prop} mismatch: ns=\"{ns}\" and nd=\"{nd}\"'", "\n", "if", "ns", ".", "endswith", "(", "'.num_batches_tracked'", ")", ":", "\n", "                        ", "continue", "\n", "", "assert", "hasattr", "(", "ps", ",", "'data'", ")", "and", "hasattr", "(", "pd", ",", "'data'", ")", ",", "f'{nd} has no .data'", "\n", "assert", "torch", ".", "is_floating_point", "(", "ps", ".", "data", ")", "and", "torch", ".", "is_floating_point", "(", "pd", ".", "data", ")", ",", "f'{nd} not a float'", "\n", "ps_data", "=", "ps", ".", "data", "\n", "if", "self", ".", "placement", "==", "'cpu'", ":", "\n", "                        ", "ps_data", "=", "ps_data", ".", "cpu", "(", ")", "\n", "", "pd", ".", "data", "*=", "self", ".", "momentum", "\n", "pd", ".", "data", "+=", "ps_data", "*", "(", "1", "-", "self", ".", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.ModuleEMA.forward": [[220, 226], ["helpers.ModuleEMA.dst.cuda", "torch.no_grad", "helpers.ModuleEMA.forward"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.forward"], ["", "", "", "", "def", "forward", "(", "self", ",", "*", "args", ",", "cuda", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "dst", "=", "self", ".", "dst", "\n", "if", "cuda", "and", "self", ".", "placement", "==", "'cpu'", ":", "\n", "            ", "dst", "=", "self", ".", "dst", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "dst", ".", "forward", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.SilentSummaryWriter.__init__": [[432, 435], ["helpers.stderr_redirected", "torch.utils.tensorboard.SummaryWriter.__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.stderr_redirected", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "stderr_redirected", "(", ")", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.deep_transform": [[24, 31], ["list", "issubclass", "model.named_children", "setattr", "helpers.deep_transform", "type", "callback"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.deep_transform"], ["def", "deep_transform", "(", "model", ",", "callback", ",", "prefix", "=", "None", ",", "opaque", "=", "None", ")", ":", "\n", "    ", "if", "not", "issubclass", "(", "type", "(", "model", ")", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "return", "\n", "", "for", "k", ",", "v", "in", "list", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "full_prefix", "=", "k", "if", "prefix", "is", "None", "else", "prefix", "+", "'.'", "+", "k", "\n", "setattr", "(", "model", ",", "k", ",", "callback", "(", "v", ",", "full_prefix", ",", "opaque", ")", ")", "\n", "deep_transform", "(", "v", ",", "callback", ",", "full_prefix", ",", "opaque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.is_item_ignored": [[33, 39], ["n.endswith"], "function", ["None"], ["", "", "def", "is_item_ignored", "(", "n", ",", "m", ")", ":", "\n", "    ", "if", "n", ".", "endswith", "(", "'num_batches_tracked'", ")", ":", "\n", "# Useless BatchNorm stats", "\n", "        ", "assert", "m", ".", "dtype", "==", "torch", ".", "int64", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.get_statedict_num_params": [[41, 46], ["all", "sum", "all", "type", "sd.items", "torch.tensor().prod().item", "torch.is_tensor", "helpers.is_item_ignored", "sd.values", "sd.values", "sd.values", "torch.tensor().prod", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.is_item_ignored"], ["", "def", "get_statedict_num_params", "(", "sd", ")", ":", "\n", "    ", "assert", "type", "(", "sd", ")", "is", "OrderedDict", "and", "all", "(", "torch", ".", "is_tensor", "(", "v", ")", "for", "v", "in", "sd", ".", "values", "(", ")", ")", "\n", "sd", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", "if", "not", "is_item_ignored", "(", "k", ",", "v", ")", "}", "\n", "assert", "all", "(", "v", ".", "dtype", "==", "torch", ".", "float32", "for", "v", "in", "sd", ".", "values", "(", ")", ")", "\n", "return", "sum", "(", "[", "torch", ".", "tensor", "(", "m", ".", "shape", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "for", "m", "in", "sd", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.dict_deep_get": [[48, 69], ["enumerate", "type", "key_path.split", "type", "len", "dict_type"], "function", ["None"], ["", "def", "dict_deep_get", "(", "d", ",", "key_path", ",", "split_ch", "=", "'/'", ",", "default", "=", "None", ",", "create_if_missing", "=", "False", ",", "dict_type", "=", "dict", ")", ":", "\n", "    ", "if", "type", "(", "key_path", ")", "is", "str", ":", "\n", "        ", "parts", "=", "key_path", ".", "split", "(", "split_ch", ")", "\n", "", "elif", "type", "(", "key_path", ")", "is", "list", ":", "\n", "        ", "parts", "=", "key_path", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "for", "i", ",", "part", "in", "enumerate", "(", "parts", ")", ":", "\n", "        ", "is_last", "=", "(", "i", "==", "len", "(", "parts", ")", "-", "1", ")", "\n", "if", "part", "in", "d", ":", "\n", "            ", "d", "=", "d", "[", "part", "]", "\n", "", "else", ":", "\n", "            ", "if", "create_if_missing", ":", "\n", "                ", "if", "is_last", ":", "\n", "                    ", "d", "[", "part", "]", "=", "default", "\n", "", "else", ":", "\n", "                    ", "d", "[", "part", "]", "=", "dict_type", "(", ")", "\n", "", "d", "=", "d", "[", "part", "]", "\n", "", "else", ":", "\n", "                ", "return", "default", "\n", "", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.dict_flatten": [[71, 82], ["d.items", "isinstance", "out.update", "helpers.dict_flatten", "isinstance", "isinstance", "out.update", "helpers.dict_flatten", "enumerate"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.ModuleEMA.update", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.dict_flatten", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.ModuleEMA.update", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.dict_flatten"], ["", "def", "dict_flatten", "(", "d", ",", "prefix", "=", "''", ",", "join_char", "=", "'/'", ")", ":", "\n", "    ", "out", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "cur_k", "=", "k", "if", "prefix", "==", "''", "else", "prefix", "+", "join_char", "+", "k", "\n", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "out", ".", "update", "(", "dict_flatten", "(", "v", ",", "cur_k", ",", "join_char", ")", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "list", ")", "or", "isinstance", "(", "v", ",", "tuple", ")", ":", "\n", "            ", "out", ".", "update", "(", "dict_flatten", "(", "{", "f'{i}'", ":", "a", "for", "i", ",", "a", "in", "enumerate", "(", "v", ")", "}", ",", "cur_k", ",", "join_char", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "[", "cur_k", "]", "=", "v", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.module_deep_get": [[84, 96], ["enumerate", "type", "key_path.split", "getattr", "type"], "function", ["None"], ["", "def", "module_deep_get", "(", "d", ",", "key_path", ",", "split_ch", "=", "'.'", ")", ":", "\n", "    ", "if", "type", "(", "key_path", ")", "is", "str", ":", "\n", "        ", "parts", "=", "key_path", ".", "split", "(", "split_ch", ")", "\n", "", "elif", "type", "(", "key_path", ")", "is", "list", ":", "\n", "        ", "parts", "=", "key_path", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "for", "i", ",", "part", "in", "enumerate", "(", "parts", ")", ":", "\n", "        ", "d", "=", "getattr", "(", "d", ",", "part", ")", "\n", "if", "d", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.torch_save_atomic": [[98, 102], ["torch.save", "os.rename"], "function", ["None"], ["", "def", "torch_save_atomic", "(", "what", ",", "path", ")", ":", "\n", "    ", "path_tmp", "=", "path", "+", "'.tmp'", "\n", "torch", ".", "save", "(", "what", ",", "path_tmp", ")", "\n", "os", ".", "rename", "(", "path_tmp", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.state_dict_size": [[104, 118], ["helpers.state_dict_size._state_dict_size"], "function", ["None"], ["", "def", "state_dict_size", "(", "state_dict", ")", ":", "\n", "    ", "size", "=", "0", "\n", "\n", "def", "_state_dict_size", "(", "sd", ")", ":", "\n", "        ", "nonlocal", "size", "\n", "if", "type", "(", "sd", ")", "is", "torch", ".", "Tensor", ":", "\n", "            ", "print", "(", "'Found tensor shape'", ",", "sd", ".", "shape", ",", "list", "(", "sd", ".", "__dict__", ".", "keys", "(", ")", ")", ")", "\n", "size", "+=", "torch", ".", "tensor", "(", "sd", ".", "shape", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "\n", "", "elif", "type", "(", "sd", ")", "in", "(", "OrderedDict", ",", "dict", ")", ":", "\n", "            ", "for", "v", "in", "sd", ".", "values", "(", ")", ":", "\n", "                ", "_state_dict_size", "(", "v", ")", "\n", "\n", "", "", "", "_state_dict_size", "(", "state_dict", ")", "\n", "return", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.get_model_size_bytes": [[120, 129], ["tempfile.NamedTemporaryFile", "torch.save", "os.path.getsize", "model.state_dict", "tempfile.NamedTemporaryFile.close"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.state_dict"], ["", "def", "get_model_size_bytes", "(", "model", ")", ":", "\n", "    ", "f", "=", "None", "\n", "try", ":", "\n", "        ", "f", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "f", ")", "\n", "return", "os", ".", "path", ".", "getsize", "(", "f", ".", "name", ")", "\n", "", "finally", ":", "\n", "        ", "if", "f", "is", "not", "None", ":", "\n", "            ", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.net_extract_modules_order": [[131, 159], ["helpers.deep_transform", "out_module_order.append", "torch.no_grad", "net", "hook.remove", "any", "type", "opaque[].append", "type", "ignored_prefixes.append", "module.register_forward_hook", "prefix.startswith", "functools.partial"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.deep_transform"], ["", "", "", "def", "net_extract_modules_order", "(", "net", ",", "dummy_input", ",", "classes_interest", ",", "net_prefix", "=", "None", ",", "classes_ignored", "=", "None", ")", ":", "\n", "    ", "ignored_prefixes", "=", "[", "]", "\n", "\n", "def", "cb_hook", "(", "prefix", ",", "out_module_order", ",", "module", ",", "input", ",", "output", ")", ":", "\n", "        ", "out_module_order", ".", "append", "(", "prefix", ")", "\n", "\n", "", "def", "cb_embed_tracing_hook", "(", "module", ",", "prefix", ",", "opaque", ")", ":", "\n", "        ", "if", "classes_ignored", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "module", ")", "in", "classes_ignored", ":", "\n", "                ", "ignored_prefixes", ".", "append", "(", "prefix", ")", "\n", "return", "module", "\n", "", "if", "any", "(", "prefix", ".", "startswith", "(", "bp", ")", "for", "bp", "in", "ignored_prefixes", ")", ":", "\n", "                ", "return", "module", "\n", "", "", "if", "type", "(", "module", ")", "in", "classes_interest", ":", "\n", "            ", "opaque", "[", "'hooks'", "]", ".", "append", "(", "module", ".", "register_forward_hook", "(", "partial", "(", "cb_hook", ",", "prefix", ",", "opaque", "[", "'module_order'", "]", ")", ")", ")", "\n", "", "return", "module", "\n", "\n", "", "out", "=", "{", "'hooks'", ":", "[", "]", ",", "'module_order'", ":", "[", "]", "}", "\n", "\n", "deep_transform", "(", "net", ",", "cb_embed_tracing_hook", ",", "prefix", "=", "net_prefix", ",", "opaque", "=", "out", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "net", "(", "*", "dummy_input", ")", "\n", "\n", "", "for", "hook", "in", "out", "[", "'hooks'", "]", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "return", "out", "[", "'module_order'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.generate_validation_fakes": [[228, 246], ["os.makedirs", "numpy.random.RandomState", "int", "torch.no_grad", "range", "numpy.log10", "min", "np.random.RandomState.randint", "helpers.generate_noise", "g_model.forward", "range", "os.path.join", "PIL.Image.fromarray", "Image.fromarray.save", "os.path.isfile", "g_model.forward.clamp"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.generate_noise", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.forward"], ["", "", "", "def", "generate_validation_fakes", "(", "g_model", ",", "num_samples", ",", "batch_size", ",", "z_sz", ",", "num_classes", ",", "root_out", ",", "rng_seed", "=", "2020", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "root_out", ",", "exist_ok", "=", "False", ")", "\n", "num_samples_filename_digits", "=", "int", "(", "np", ".", "log10", "(", "num_samples", ")", ")", "+", "1", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "rng_seed", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_start", "in", "range", "(", "0", ",", "num_samples", ",", "batch_size", ")", ":", "\n", "            ", "batch_end", "=", "min", "(", "num_samples", ",", "batch_start", "+", "batch_size", ")", "\n", "batch_seed", "=", "rng", ".", "randint", "(", "2", "**", "32", ")", "\n", "fake_z", "=", "generate_noise", "(", "\n", "batch_end", "-", "batch_start", ",", "z_sz", ",", "num_classes", "=", "num_classes", ",", "rng_seed", "=", "batch_seed", ",", "device", "=", "g_model", "\n", ")", "\n", "fake_rgb", "=", "g_model", ".", "forward", "(", "*", "fake_z", ")", "\n", "fake_rgb", "=", "(", "255", "*", "(", "fake_rgb", ".", "clamp", "(", "-", "1", ",", "1", ")", "*", "0.5", "+", "0.5", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "to", "(", "'cpu'", ",", "torch", ".", "uint8", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_end", "-", "batch_start", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root_out", ",", "f'{i + batch_start:0{num_samples_filename_digits}d}.png'", ")", "\n", "assert", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "fake_rgb", "[", "i", "]", ",", "mode", "=", "'RGB'", ")", "\n", "img", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.add_filetree_to_zip": [[248, 264], ["os.path.abspath", "os.path.basename", "os.path.dirname", "zip.write", "os.walk", "filter_dirname", "zip.write", "zip.write", "os.path.basename", "filter_filename", "os.path.join", "os.path.relpath", "os.path.join", "os.path.relpath"], "function", ["None"], ["", "", "", "", "def", "add_filetree_to_zip", "(", "zip", ",", "dir_src", ",", "filter_filename", "=", "None", ",", "filter_dirname", "=", "None", ")", ":", "\n", "    ", "dir_src", "=", "os", ".", "path", ".", "abspath", "(", "dir_src", ")", "\n", "dir_src_name", "=", "os", ".", "path", ".", "basename", "(", "dir_src", ")", "\n", "dir_src_parent_dir", "=", "os", ".", "path", ".", "dirname", "(", "dir_src", ")", "\n", "zip", ".", "write", "(", "dir_src", ",", "arcname", "=", "dir_src_name", ")", "\n", "for", "cur_dir", ",", "_", ",", "cur_filenames", "in", "os", ".", "walk", "(", "dir_src", ")", ":", "\n", "        ", "if", "filter_dirname", "is", "not", "None", "and", "filter_dirname", "(", "os", ".", "path", ".", "basename", "(", "cur_dir", ")", ")", ":", "\n", "            ", "continue", "\n", "", "if", "cur_dir", "!=", "dir_src", ":", "\n", "            ", "zip", ".", "write", "(", "cur_dir", ",", "arcname", "=", "os", ".", "path", ".", "relpath", "(", "cur_dir", ",", "dir_src_parent_dir", ")", ")", "\n", "", "for", "filename", "in", "cur_filenames", ":", "\n", "            ", "if", "filter_filename", "is", "not", "None", "and", "filter_filename", "(", "filename", ")", ":", "\n", "                ", "continue", "\n", "", "zip", ".", "write", "(", "\n", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "filename", ")", ",", "\n", "arcname", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "relpath", "(", "cur_dir", ",", "dir_src_parent_dir", ")", ",", "filename", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.pack_source_and_configuration": [[267, 280], ["os.path.abspath", "copy.deepcopy", "json.dumps", "zipfile.ZipFile", "helpers.add_filetree_to_zip", "zip.writestr", "f.endswith"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.add_filetree_to_zip"], ["", "", "", "def", "pack_source_and_configuration", "(", "cfg", ",", "dir_src", ",", "path_zip", ")", ":", "\n", "    ", "dir_src", "=", "os", ".", "path", ".", "abspath", "(", "dir_src", ")", "\n", "cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "__dict__", ")", "\n", "del", "cfg", "[", "'log_dir'", "]", "\n", "cfg_str", "=", "json", ".", "dumps", "(", "cfg", ",", "indent", "=", "4", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "path_zip", ",", "'w'", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "zip", ":", "\n", "        ", "add_filetree_to_zip", "(", "\n", "zip", ",", "\n", "dir_src", ",", "\n", "filter_filename", "=", "lambda", "f", ":", "not", "f", ".", "endswith", "(", "'.py'", ")", ",", "\n", "filter_dirname", "=", "lambda", "d", ":", "d", "in", "(", "'__pycache__'", ",", ")", ",", "\n", ")", "\n", "zip", ".", "writestr", "(", "'cfg.txt'", ",", "cfg_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.pack_directory": [[282, 286], ["os.path.abspath", "zipfile.ZipFile", "helpers.add_filetree_to_zip"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.add_filetree_to_zip"], ["", "", "def", "pack_directory", "(", "path_dir", ",", "path_zip", ",", "filter_filename", ")", ":", "\n", "    ", "path_dir", "=", "os", ".", "path", ".", "abspath", "(", "path_dir", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "path_zip", ",", "'w'", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "zip", ":", "\n", "        ", "add_filetree_to_zip", "(", "zip", ",", "path_dir", ",", "filter_filename", "=", "filter_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.diff_source_dir_and_zip": [[288, 318], ["os.path.abspath", "zipfile.ZipFile", "zip.namelist", "copy.deepcopy", "json.dumps().split", "zip.read().decode().split", "list", "zip.getinfo", "zip.getinfo.is_dir", "os.path.join", "zip.read().decode().split", "list", "difflib.unified_diff", "len", "Exception", "os.path.dirname", "os.path.isfile", "FileNotFoundError", "open", "f.read().split", "difflib.unified_diff", "len", "Exception", "json.dumps", "zip.read().decode", "zip.read().decode", "f.read", "zip.read", "zip.read"], "function", ["None"], ["", "", "def", "diff_source_dir_and_zip", "(", "cfg", ",", "dir_src", ",", "path_zip", ")", ":", "\n", "    ", "dir_src", "=", "os", ".", "path", ".", "abspath", "(", "dir_src", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "path_zip", ")", "as", "zip", ":", "\n", "        ", "for", "file", "in", "zip", ".", "namelist", "(", ")", ":", "\n", "            ", "if", "file", "==", "'cfg.txt'", ":", "\n", "                ", "continue", "\n", "", "file_info", "=", "zip", ".", "getinfo", "(", "file", ")", "\n", "if", "file_info", ".", "is_dir", "(", ")", ":", "\n", "                ", "continue", "\n", "", "path_src", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "dir_src", ")", ",", "file", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path_src", ")", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "path_src", ")", "\n", "", "with", "open", "(", "path_src", ")", "as", "f", ":", "\n", "                ", "lines_src", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "", "lines_zip", "=", "zip", ".", "read", "(", "file", ")", ".", "decode", "(", "'utf-8'", ")", ".", "split", "(", "'\\n'", ")", "\n", "lines_diff", "=", "list", "(", "difflib", ".", "unified_diff", "(", "lines_zip", ",", "lines_src", ")", ")", "\n", "if", "len", "(", "lines_diff", ")", ">", "0", ":", "\n", "                ", "raise", "Exception", "(", "\n", "f'Source ({file}) changed - will not resume. Diff:\\n'", "+", "\n", "f'\\n'", ".", "join", "(", "lines_diff", ")", "\n", ")", "\n", "", "", "cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "__dict__", ")", "\n", "del", "cfg", "[", "'log_dir'", "]", "\n", "cfg_str", "=", "json", ".", "dumps", "(", "cfg", ",", "indent", "=", "4", ")", ".", "split", "(", "'\\n'", ")", "\n", "cfg_zip", "=", "zip", ".", "read", "(", "'cfg.txt'", ")", ".", "decode", "(", "'utf-8'", ")", ".", "split", "(", "'\\n'", ")", "\n", "cfg_diff", "=", "list", "(", "difflib", ".", "unified_diff", "(", "cfg_zip", ",", "cfg_str", ")", ")", "\n", "if", "len", "(", "cfg_diff", ")", ">", "0", ":", "\n", "            ", "raise", "Exception", "(", "\n", "f'Configuration changed - will not resume. Diff:\\n'", "+", "\n", "f'\\n'", ".", "join", "(", "cfg_diff", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.verify_experiment_integrity": [[321, 330], ["os.path.abspath", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs", "os.path.isfile", "helpers.pack_source_and_configuration", "helpers.diff_source_dir_and_zip", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.pack_source_and_configuration", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.diff_source_dir_and_zip"], ["", "", "", "def", "verify_experiment_integrity", "(", "cfg", ")", ":", "\n", "    ", "dir_src", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'..'", ")", ")", "\n", "path_zip", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "log_dir", ",", "'source.zip'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cfg", ".", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "log_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "path_zip", ")", ":", "\n", "        ", "pack_source_and_configuration", "(", "cfg", ",", "dir_src", ",", "path_zip", ")", "\n", "", "else", ":", "\n", "        ", "diff_source_dir_and_zip", "(", "cfg", ",", "dir_src", ",", "path_zip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.get_singular_values_from_network": [[332, 357], ["net.named_modules", "hasattr", "hasattr", "getattr().detach", "weight.permute.reshape", "any", "type", "isinstance", "helpers.is_conv_transposed", "weight.permute.permute", "weight.permute.svd", "type", "ignored_prefixes.append", "getattr", "n.startswith", "range", "len"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.is_conv_transposed"], ["", "", "def", "get_singular_values_from_network", "(", "net", ",", "classes_interest", ",", "classes_ignored", "=", "None", ")", ":", "\n", "    ", "svs", "=", "{", "}", "\n", "ignored_prefixes", "=", "[", "]", "\n", "for", "n", ",", "m", "in", "net", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "classes_ignored", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "m", ")", "in", "classes_ignored", ":", "\n", "                ", "ignored_prefixes", ".", "append", "(", "n", ")", "\n", "continue", "\n", "", "if", "any", "(", "n", ".", "startswith", "(", "bp", ")", "for", "bp", "in", "ignored_prefixes", ")", ":", "\n", "                ", "continue", "\n", "", "", "if", "type", "(", "m", ")", "not", "in", "classes_interest", ":", "\n", "            ", "continue", "\n", "", "assert", "hasattr", "(", "m", ",", "'weight'", ")", ",", "f'{n} has no weight'", "\n", "name", "=", "'weight'", "\n", "if", "hasattr", "(", "m", ",", "'weight_orig'", ")", ":", "\n", "# use trainable parameters if the standard torch.nn.utils.spectral_norm is attached", "\n", "            ", "name", "=", "'weight_orig'", "\n", "", "weight", "=", "getattr", "(", "m", ",", "name", ")", ".", "detach", "(", ")", "\n", "conv_transposed", "=", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvNd", ")", "and", "is_conv_transposed", "(", "m", ")", "\n", "if", "conv_transposed", ":", "\n", "            ", "weight", "=", "weight", ".", "permute", "(", "1", ",", "0", ",", "*", "range", "(", "2", ",", "len", "(", "weight", ".", "shape", ")", ")", ")", "\n", "", "weight", "=", "weight", ".", "reshape", "(", "weight", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "sv", "=", "weight", ".", "svd", "(", "compute_uv", "=", "False", ")", ".", "S", "\n", "svs", "[", "n", "]", "=", "sv", "\n", "", "return", "svs", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.get_best_gan_metrics": [[359, 379], ["current.items"], "function", ["None"], ["", "def", "get_best_gan_metrics", "(", "current", ",", "last", "=", "None", ")", ":", "\n", "    ", "if", "last", "is", "None", ":", "\n", "        ", "return", "current", "\n", "", "out", "=", "last", "\n", "for", "k", ",", "v_cur", "in", "current", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "==", "KEY_METRIC_ISC_MEAN", ":", "\n", "            ", "if", "v_cur", ">", "out", "[", "k", "]", ":", "\n", "                ", "out", "[", "KEY_METRIC_ISC_MEAN", "]", "=", "current", "[", "KEY_METRIC_ISC_MEAN", "]", "\n", "out", "[", "KEY_METRIC_ISC_STD", "]", "=", "current", "[", "KEY_METRIC_ISC_STD", "]", "\n", "", "", "elif", "k", "==", "KEY_METRIC_FID", ":", "\n", "            ", "if", "v_cur", "<", "out", "[", "k", "]", ":", "\n", "                ", "out", "[", "KEY_METRIC_FID", "]", "=", "current", "[", "KEY_METRIC_FID", "]", "\n", "", "", "elif", "k", "==", "KEY_METRIC_KID_MEAN", ":", "\n", "            ", "if", "v_cur", "<", "out", "[", "k", "]", ":", "\n", "                ", "out", "[", "KEY_METRIC_KID_MEAN", "]", "=", "current", "[", "KEY_METRIC_KID_MEAN", "]", "\n", "out", "[", "KEY_METRIC_KID_STD", "]", "=", "current", "[", "KEY_METRIC_KID_STD", "]", "\n", "", "", "elif", "k", "==", "KEY_METRIC_PPL_MEAN", ":", "\n", "            ", "if", "v_cur", "<", "out", "[", "k", "]", ":", "\n", "                ", "out", "[", "KEY_METRIC_PPL_MEAN", "]", "=", "current", "[", "KEY_METRIC_PPL_MEAN", "]", "\n", "", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.get_best_imgcls_metrics": [[381, 389], ["current.items", "out.get"], "function", ["None"], ["", "def", "get_best_imgcls_metrics", "(", "current", ",", "last", "=", "None", ")", ":", "\n", "    ", "if", "last", "is", "None", ":", "\n", "        ", "return", "current", "\n", "", "out", "=", "last", "\n", "for", "k", ",", "v_cur", "in", "current", ".", "items", "(", ")", ":", "\n", "        ", "if", "v_cur", ">", "out", ".", "get", "(", "k", ",", "0", ")", ":", "\n", "            ", "out", "[", "k", "]", "=", "v_cur", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.tb_add_scalars": [[391, 399], ["tag_scalar_dict.items", "isinstance", "helpers.tb_add_scalars", "tb.add_scalar"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.tb_add_scalars"], ["", "def", "tb_add_scalars", "(", "tb", ",", "main_tag", ",", "tag_scalar_dict", ",", "global_step", "=", "None", ")", ":", "\n", "# unlike SummaryWriter.add_scalars, this function does not create a separate FileWriter per each dict entry", "\n", "    ", "for", "k", ",", "v", "in", "tag_scalar_dict", ".", "items", "(", ")", ":", "\n", "        ", "tag", "=", "main_tag", "+", "'/'", "+", "k", "\n", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "tb_add_scalars", "(", "tb", ",", "tag", ",", "v", ",", "global_step", "=", "global_step", ")", "\n", "", "else", ":", "\n", "            ", "tb", ".", "add_scalar", "(", "tag", ",", "v", ",", "global_step", "=", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.fileno": [[401, 406], ["getattr", "isinstance", "ValueError"], "function", ["None"], ["", "", "", "def", "fileno", "(", "file_or_fd", ")", ":", "\n", "    ", "fd", "=", "getattr", "(", "file_or_fd", ",", "'fileno'", ",", "lambda", ":", "file_or_fd", ")", "(", ")", "\n", "if", "not", "isinstance", "(", "fd", ",", "int", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Expected a file (`.fileno()`) or a file descriptor\"", ")", "\n", "", "return", "fd", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.stderr_redirected": [[408, 429], ["helpers.fileno", "os.fdopen", "stderr.flush", "os.dup", "os.dup2", "stderr.flush", "os.dup2", "helpers.fileno", "copied.fileno", "open", "os.dup2", "to_file.fileno"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.fileno", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.fileno", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.fileno", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.fileno"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "stderr_redirected", "(", "to", "=", "os", ".", "devnull", ",", "stderr", "=", "None", ")", ":", "\n", "# https://stackoverflow.com/a/22434262/411907", "\n", "    ", "if", "stderr", "is", "None", ":", "\n", "       ", "stderr", "=", "sys", ".", "stderr", "\n", "\n", "", "stderr_fd", "=", "fileno", "(", "stderr", ")", "\n", "# copy stderr_fd before it is overwritten; `copied` is inheritable on Windows when duplicating a standard stream", "\n", "with", "os", ".", "fdopen", "(", "os", ".", "dup", "(", "stderr_fd", ")", ",", "'wb'", ")", "as", "copied", ":", "\n", "        ", "stderr", ".", "flush", "(", ")", "# flush library buffers that dup2 knows nothing about", "\n", "try", ":", "\n", "            ", "os", ".", "dup2", "(", "fileno", "(", "to", ")", ",", "stderr_fd", ")", "# $ exec >&to", "\n", "", "except", "ValueError", ":", "# filename", "\n", "            ", "with", "open", "(", "to", ",", "'wb'", ")", "as", "to_file", ":", "\n", "                ", "os", ".", "dup2", "(", "to_file", ".", "fileno", "(", ")", ",", "stderr_fd", ")", "# $ exec > to", "\n", "", "", "try", ":", "\n", "            ", "yield", "stderr", "# allow code to be run with the redirected stdout", "\n", "", "finally", ":", "\n", "# restore stderr to its previous value; dup2 makes stderr_fd inheritable unconditionally", "\n", "            ", "stderr", ".", "flush", "(", ")", "\n", "os", ".", "dup2", "(", "copied", ".", "fileno", "(", ")", ",", "stderr_fd", ")", "# $ exec >&copied", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.silent_torch_jit_trace_module": [[437, 449], ["warnings.catch_warnings", "torch.jit.trace_module", "issubclass", "print", "open", "fp.readlines"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print"], ["", "", "", "def", "silent_torch_jit_trace_module", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "ws", ":", "\n", "        ", "out", "=", "torch", ".", "jit", ".", "trace_module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "w", "in", "ws", ":", "\n", "            ", "if", "issubclass", "(", "w", ".", "category", ",", "torch", ".", "jit", ".", "TracerWarning", ")", ":", "\n", "                ", "with", "open", "(", "w", ".", "filename", ")", "as", "fp", ":", "\n", "                    ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "", "line", "=", "lines", "[", "w", ".", "lineno", "-", "1", "]", "\n", "if", "'# produces TracerWarning -- safe to ignore'", "in", "line", ":", "\n", "                    ", "continue", "\n", "", "", "print", "(", "w", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.is_conv_transposed": [[451, 458], ["isinstance", "packaging.version.parse", "packaging.version.parse", "isinstance", "isinstance"], "function", ["None"], ["", "", "def", "is_conv_transposed", "(", "conv", ")", ":", "\n", "    ", "assert", "isinstance", "(", "conv", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvNd", ")", "\n", "if", "packaging", ".", "version", ".", "parse", "(", "torch", ".", "__version__", ")", "<", "packaging", ".", "version", ".", "parse", "(", "'1.5.0'", ")", ":", "\n", "        ", "out", "=", "isinstance", "(", "conv", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvTransposeMixin", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "isinstance", "(", "conv", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvTransposeNd", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.generate_noise": [[460, 477], ["isinstance", "torch.randn", "numpy.random.RandomState", "np.random.RandomState.randn().astype", "torch.from_numpy().to", "next", "torch.randint", "np.random.RandomState.randint", "torch.from_numpy().to", "device.parameters", "np.random.RandomState.randn", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "generate_noise", "(", "num_samples", ",", "z_sz", ",", "num_classes", "=", "0", ",", "rng_seed", "=", "None", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "if", "isinstance", "(", "device", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "device", "=", "next", "(", "device", ".", "parameters", "(", ")", ")", ".", "device", "\n", "", "rng", ",", "labels", "=", "None", ",", "None", "\n", "if", "rng_seed", "is", "None", ":", "\n", "        ", "z", "=", "torch", ".", "randn", "(", "(", "num_samples", ",", "z_sz", ")", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "rng_seed", ")", "\n", "z", "=", "rng", ".", "randn", "(", "num_samples", ",", "z_sz", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "z", "=", "torch", ".", "from_numpy", "(", "z", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "num_classes", ">", "0", ":", "\n", "        ", "if", "rng_seed", "is", "None", ":", "\n", "            ", "labels", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "num_classes", ",", "size", "=", "(", "num_samples", ",", ")", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "labels", "=", "rng", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "num_classes", ",", "size", "=", "(", "num_samples", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "", "return", "z", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.classification_accuracy": [[479, 490], ["max", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().int().sum", "res.append", "output.dim", "target.dim", "target.view", "correct[].reshape().int", "correct[].reshape"], "function", ["None"], ["", "def", "classification_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "assert", "output", ".", "dim", "(", ")", "==", "2", "and", "target", ".", "dim", "(", ")", "==", "1", "and", "output", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "int", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ")", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_optimizer": [[18, 23], ["None"], "function", ["None"], ["def", "resolve_optimizer", "(", "name", ")", ":", "\n", "    ", "return", "{", "\n", "'sgd'", ":", "SGD", ",", "\n", "'adam'", ":", "Adam", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_lr_sched": [[25, 32], ["torch.optim.lr_scheduler.LambdaLR", "ValueError", "max"], "function", ["None"], ["", "def", "resolve_lr_sched", "(", "optimizer", ",", "name", ",", "num_training_steps", ")", ":", "\n", "    ", "if", "name", "==", "'linear'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", ",", "lambda", "step", ":", "max", "(", "0", ",", "num_training_steps", "-", "step", ")", "/", "num_training_steps", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'LR scheduler {name} not supported'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_gan_models": [[34, 38], ["None"], "function", ["None"], ["", "", "def", "resolve_gan_models", "(", "name", ")", ":", "\n", "    ", "return", "{", "\n", "'sngan'", ":", "(", "SNGANGenerator", ",", "SNGANDiscriminator", ")", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_ops": [[40, 57], ["None"], "function", ["None"], ["", "def", "resolve_ops", "(", "name", ")", ":", "\n", "    ", "return", "{", "\n", "'regular'", ":", "{", "\n", "'cls_conv2d'", ":", "torch", ".", "nn", ".", "Conv2d", ",", "\n", "'cls_linear'", ":", "torch", ".", "nn", ".", "Linear", ",", "\n", "'cls_embedding'", ":", "torch", ".", "nn", ".", "Embedding", ",", "\n", "}", ",", "\n", "'spectral_norm_pytorch'", ":", "{", "\n", "'cls_conv2d'", ":", "ops_spectral_norm_pytorch", ".", "SNConv2d", ",", "\n", "'cls_linear'", ":", "ops_spectral_norm_pytorch", ".", "SNLinear", ",", "\n", "'cls_embedding'", ":", "ops_spectral_norm_pytorch", ".", "SNEmbedding", ",", "\n", "}", ",", "\n", "}", "[", "name", "]", ",", "{", "\n", "'regular'", ":", "None", ",", "\n", "'spectral_norm_pytorch'", ":", "ops_spectral_norm_pytorch", ".", "net_reparameterize_ops_spectral_norm_pytorch_to_standard", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_ops_factory": [[59, 64], ["None"], "function", ["None"], ["", "def", "resolve_ops_factory", "(", "name", ")", ":", "\n", "    ", "return", "{", "\n", "'svdp'", ":", "SpectralTensorsFactorySVDP", ",", "\n", "'sttp'", ":", "SpectralTensorsFactorySTTP", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_gan_losses": [[66, 70], ["None"], "function", ["None"], ["", "def", "resolve_gan_losses", "(", "name", ")", ":", "\n", "    ", "return", "{", "\n", "'hinge'", ":", "(", "hinge_loss_gen", ",", "hinge_loss_dis", ")", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_gan_dataset": [[72, 81], ["functools.partial"], "function", ["None"], ["", "def", "resolve_gan_dataset", "(", "name", ",", "root", ",", "download", ",", "with_labels", ",", "evaluation_transforms", ")", ":", "\n", "    ", "return", "{", "\n", "'cifar10'", ":", "load_cifar10_dataset", ",", "\n", "'stl10_48'", ":", "partial", "(", "load_stl10_dataset", ",", "size", "=", "48", ")", ",", "\n", "}", "[", "name", "]", "(", "root", ",", "download", ",", "with_labels", ",", "evaluation_transforms", ")", ",", "{", "\n", "'cifar10'", ":", "10", ",", "\n", "'stl10_48'", ":", "10", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_spectral_penalty": [[83, 88], ["None"], "function", ["None"], ["", "def", "resolve_spectral_penalty", "(", "name", ")", ":", "\n", "    ", "return", "{", "\n", "'d_optimal'", ":", "spectral_penalty_d_optimal", ",", "\n", "'divergence'", ":", "spectral_penalty_divergence", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_stiefel": [[90, 96], ["None"], "function", ["None"], ["", "def", "resolve_stiefel", "(", "name", ",", "is_canonical", ")", ":", "\n", "    ", "assert", "name", "==", "'householder'", "\n", "if", "is_canonical", ":", "\n", "        ", "return", "StiefelHouseholderCanonical", "\n", "", "else", ":", "\n", "        ", "return", "StiefelHouseholder", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_imgcls_dataset": [[98, 140], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "NotImplementedError", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "dataset_class", "dataset_class", "NotImplementedError", "torchvision.transforms.Pad", "torchvision.transforms.RandomResizedCrop"], "function", ["None"], ["", "", "def", "resolve_imgcls_dataset", "(", "cfg", ")", ":", "\n", "    ", "transform_train", ",", "transform_valid", "=", "[", "]", ",", "[", "]", "\n", "if", "cfg", ".", "dataset", "in", "(", "'cifar10'", ",", ")", ":", "\n", "        ", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", "\n", "std", "=", "(", "0.2470", ",", "0.2435", ",", "0.2616", ")", "\n", "num_classes", "=", "{", "\n", "'cifar10'", ":", "10", ",", "\n", "}", "[", "cfg", ".", "dataset", "]", "\n", "transform_train", "+=", "[", "\n", "torchvision", ".", "transforms", ".", "Pad", "(", "4", ")", ",", "\n", "torchvision", ".", "transforms", ".", "RandomResizedCrop", "(", "32", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Dataset {cfg.dataset} functionality not implemented'", ")", "\n", "\n", "", "transform_train", "+=", "[", "\n", "torchvision", ".", "transforms", ".", "RandomHorizontalFlip", "(", ")", "\n", "]", "\n", "transform_epilogue", "=", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", "\n", "transform_train", "+=", "transform_epilogue", "\n", "transform_valid", "+=", "transform_epilogue", "\n", "\n", "transform_train", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "transform_train", ")", "\n", "transform_valid", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "transform_valid", ")", "\n", "\n", "if", "cfg", ".", "dataset", "in", "(", "'cifar10'", ",", ")", ":", "\n", "        ", "dataset_class", "=", "{", "\n", "'cifar10'", ":", "torchvision", ".", "datasets", ".", "CIFAR10", ",", "\n", "}", "[", "cfg", ".", "dataset", "]", "\n", "dataset_train", "=", "dataset_class", "(", "\n", "cfg", ".", "root_datasets", "[", "cfg", ".", "dataset", "]", ",", "train", "=", "True", ",", "transform", "=", "transform_train", ",", "download", "=", "cfg", ".", "dataset_download", "\n", ")", "\n", "dataset_valid", "=", "dataset_class", "(", "\n", "cfg", ".", "root_datasets", "[", "cfg", ".", "dataset", "]", ",", "train", "=", "False", ",", "transform", "=", "transform_valid", ",", "download", "=", "cfg", ".", "dataset_download", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Dataset {cfg.dataset} functionality not implemented'", ")", "\n", "\n", "", "return", "dataset_train", ",", "dataset_valid", ",", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.resolvers.resolve_imgcls_model": [[142, 147], ["None"], "function", ["None"], ["", "def", "resolve_imgcls_model", "(", "name", ")", ":", "\n", "    ", "return", "{", "\n", "'resnet_cifar10'", ":", "ModelNetResnetCifar10", ",", "\n", "'wresnet_cifar'", ":", "ModelNetWresnetCifar", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_compensation.spectral_compensation_stateful": [[11, 54], ["module.named_modules", "ValueError", "isinstance", "state.get", "m.weight.detach().view.svd", "s.max().clamp_min", "torch.max", "u.mm", "isinstance", "any", "m.weight.detach().permute().reshape", "m.weight.detach().view.svd", "s.max().clamp_min", "m.weight.detach().view.reshape().permute().reshape", "m.weight.detach().view.reshape", "torch.no_grad", "m.weight.copy_", "isinstance", "isinstance", "isinstance", "m.weight.detach().view", "NotImplementedError", "s.numel", "s.max", "s.view", "isinstance", "m.weight.detach().permute", "s.numel", "s.max", "m.weight.detach().view.reshape().permute", "m.weight.detach", "m.weight.detach", "range", "type", "m.weight.detach().view.reshape", "range", "len", "len"], "function", ["None"], ["def", "spectral_compensation_stateful", "(", "module", ",", "state", "=", "None", ",", "classes", "=", "None", ",", "normalize", "=", "False", ",", "truncation", "=", "None", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "if", "classes", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Classes subjected to spectral regularization are not specified'", ")", "\n", "", "if", "state", "is", "None", ":", "\n", "        ", "state", "=", "{", "}", "\n", "", "for", "n", ",", "m", "in", "module", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "not", "any", "(", "isinstance", "(", "m", ",", "a", ")", "for", "a", "in", "classes", ")", ":", "\n", "            ", "continue", "\n", "", "shape", "=", "m", ".", "weight", ".", "shape", "\n", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvTransposeNd", ")", ":", "\n", "            ", "mat", "=", "m", ".", "weight", ".", "detach", "(", ")", ".", "permute", "(", "1", ",", "0", ",", "*", "range", "(", "2", ",", "len", "(", "shape", ")", ")", ")", ".", "reshape", "(", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvNd", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Embedding", ")", ":", "\n", "            ", "mat", "=", "m", ".", "weight", ".", "detach", "(", ")", ".", "view", "(", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'Class {type(m)} dispatch not implemented'", ")", "\n", "", "old_sv", "=", "state", ".", "get", "(", "n", ",", "None", ")", "\n", "if", "old_sv", "is", "None", ":", "\n", "            ", "_", ",", "s", ",", "_", "=", "mat", ".", "svd", "(", "compute_uv", "=", "False", ")", "\n", "if", "truncation", "is", "not", "None", "and", "s", ".", "numel", "(", ")", ">", "truncation", ":", "\n", "                ", "s", "=", "s", "[", ":", "truncation", "]", "\n", "", "s", "/=", "s", ".", "max", "(", ")", ".", "clamp_min", "(", "eps", ")", "\n", "state", "[", "n", "]", "=", "s", "\n", "continue", "\n", "", "u", ",", "s", ",", "v", "=", "mat", ".", "svd", "(", ")", "\n", "if", "truncation", "is", "not", "None", "and", "s", ".", "numel", "(", ")", ">", "truncation", ":", "\n", "            ", "u", "=", "u", "[", ":", ",", ":", "truncation", "]", "\n", "s", "=", "s", "[", ":", "truncation", "]", "\n", "v", "=", "v", "[", ":", ",", ":", "truncation", "]", "\n", "", "s_max", "=", "s", ".", "max", "(", ")", ".", "clamp_min", "(", "eps", ")", "\n", "s", "/=", "s_max", "\n", "state", "[", "n", "]", "=", "torch", ".", "max", "(", "s", ",", "old_sv", ")", "\n", "s", "=", "state", "[", "n", "]", "\n", "if", "not", "normalize", ":", "\n", "            ", "s", "*=", "s_max", "\n", "", "mat", "=", "u", ".", "mm", "(", "s", ".", "view", "(", "-", "1", ",", "1", ")", "*", "v", ".", "T", ")", "\n", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvTransposeNd", ")", ":", "\n", "            ", "mat", "=", "mat", ".", "reshape", "(", "shape", "[", "1", "]", ",", "shape", "[", "0", "]", ",", "*", "shape", "[", "2", ":", "]", ")", ".", "permute", "(", "1", ",", "0", ",", "*", "range", "(", "2", ",", "len", "(", "shape", ")", ")", ")", ".", "reshape", "(", "*", "shape", ")", "\n", "", "else", ":", "\n", "            ", "mat", "=", "mat", ".", "reshape", "(", "*", "shape", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "m", ".", "weight", ".", "copy_", "(", "mat", ")", "\n", "", "", "return", "state", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.utils.tt_utils.prime_factors": [[4, 13], ["range", "factors.append", "int", "factors.append", "numpy.sqrt"], "function", ["None"], ["def", "prime_factors", "(", "num", ")", ":", "\n", "    ", "factors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ",", "int", "(", "np", ".", "sqrt", "(", "num", ")", ")", "+", "1", ")", ":", "\n", "        ", "while", "num", "%", "i", "==", "0", ":", "\n", "            ", "factors", ".", "append", "(", "i", ")", "\n", "num", "//=", "i", "\n", "", "", "if", "num", ">", "1", ":", "\n", "        ", "factors", ".", "append", "(", "num", ")", "\n", "", "return", "factors", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.tt_utils.dim_factorize_simple": [[15, 17], ["tt_utils.prime_factors"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.tt_utils.prime_factors"], ["", "def", "dim_factorize_simple", "(", "d", ",", "is_dim_dst", ")", ":", "\n", "    ", "return", "prime_factors", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.tt_utils.get_ranks_tt": [[19, 24], ["list", "numpy.cumprod().tolist", "reversed", "min", "zip", "numpy.cumprod", "numpy.cumprod().tolist", "list", "numpy.cumprod", "list", "reversed"], "function", ["None"], ["", "def", "get_ranks_tt", "(", "shape", ",", "max_rank", ")", ":", "\n", "    ", "ranks_left", "=", "[", "1", "]", "+", "np", ".", "cumprod", "(", "list", "(", "shape", ")", ")", ".", "tolist", "(", ")", "\n", "ranks_right", "=", "list", "(", "reversed", "(", "[", "1", "]", "+", "np", ".", "cumprod", "(", "list", "(", "reversed", "(", "shape", ")", ")", ")", ".", "tolist", "(", ")", ")", ")", "\n", "ranks_tt", "=", "[", "min", "(", "a", ",", "b", ",", "max_rank", ")", "for", "a", ",", "b", "in", "zip", "(", "ranks_left", ",", "ranks_right", ")", "]", "\n", "return", "ranks_tt", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.__init__": [[13, 17], ["matplotlib.font_manager.findfont", "matplotlib.font_manager.findfont", "PIL.ImageFont.truetype", "matplotlib.font_manager.FontProperties", "matplotlib.font_manager.FontProperties"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "60", ")", ":", "\n", "        ", "font_path", "=", "findfont", "(", "FontProperties", "(", "family", "=", "'monospace'", ")", ")", "\n", "self", ".", "font", "=", "ImageFont", ".", "truetype", "(", "font_path", ",", "size", "=", "size", ",", "index", "=", "0", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print_gray": [[18, 27], ["PIL.Image.fromarray", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw.text", "numpy.array", "len", "PIL.ImageDraw.Draw.text"], "methods", ["None"], ["", "def", "print_gray", "(", "self", ",", "img_np_f", ",", "text", ",", "offs_xy", ",", "white", "=", "1.0", ")", ":", "\n", "        ", "assert", "len", "(", "img_np_f", ".", "shape", ")", "==", "2", ",", "\"Image must be single channel\"", "\n", "img_pil", "=", "Image", ".", "fromarray", "(", "img_np_f", ",", "mode", "=", "'F'", ")", "\n", "ctx", "=", "ImageDraw", ".", "Draw", "(", "img_pil", ")", "\n", "step", "=", "self", ".", "size", "//", "15", "\n", "for", "dx", ",", "dy", "in", "(", "(", "-", "1", ",", "-", "1", ")", ",", "(", "-", "1", ",", "0", ")", ",", "(", "-", "1", ",", "1", ")", ",", "(", "0", ",", "-", "1", ")", ",", "(", "0", ",", "1", ")", ",", "(", "1", ",", "-", "1", ")", ",", "(", "1", ",", "0", ")", ",", "(", "1", ",", "1", ")", ")", ":", "\n", "            ", "ctx", ".", "text", "(", "(", "offs_xy", "[", "0", "]", "+", "step", "*", "dx", ",", "offs_xy", "[", "1", "]", "+", "step", "*", "dy", ")", ",", "text", ",", "font", "=", "self", ".", "font", ",", "fill", "=", "0.0", ")", "\n", "", "ctx", ".", "text", "(", "offs_xy", ",", "text", ",", "font", "=", "self", ".", "font", ",", "fill", "=", "white", ")", "\n", "return", "np", ".", "array", "(", "img_pil", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print": [[28, 35], ["len", "range", "visualizations.ImageTextRenderer.print_gray", "visualizations.ImageTextRenderer.print_gray"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print_gray", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print_gray"], ["", "def", "print", "(", "self", ",", "img_np_f", ",", "text", ",", "offs_xy", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "img_np_f", ".", "shape", ")", "==", "3", ":", "\n", "            ", "for", "ch", "in", "range", "(", "3", ")", ":", "\n", "                ", "img_np_f", "[", "ch", "]", "=", "self", ".", "print_gray", "(", "img_np_f", "[", "ch", "]", ",", "text", ",", "offs_xy", ",", "**", "kwargs", ")", "\n", "", "", "else", ":", "\n", "            ", "img_np_f", "=", "self", ".", "print_gray", "(", "img_np_f", ",", "text", ",", "offs_xy", ",", "**", "kwargs", ")", "\n", "", "return", "img_np_f", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.get_text_renderer": [[40, 44], ["visualizations.ImageTextRenderer"], "function", ["None"], ["def", "get_text_renderer", "(", "size", ")", ":", "\n", "    ", "if", "size", "not", "in", "_text_renderers", ":", "\n", "        ", "_text_renderers", "[", "size", "]", "=", "ImageTextRenderer", "(", "size", ")", "\n", "", "return", "_text_renderers", "[", "size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.img_print": [[46, 51], ["visualizations.get_text_renderer", "get_text_renderer.print"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.get_text_renderer", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print"], ["", "def", "img_print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "size", "=", "kwargs", "[", "'size'", "]", "\n", "del", "kwargs", "[", "'size'", "]", "\n", "renderer", "=", "get_text_renderer", "(", "size", ")", "\n", "return", "renderer", ".", "print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.tensor_print": [[53, 75], ["img.cpu().detach.cpu().detach", "range", "isinstance", "min", "kwargs.pop", "visualizations.img_print", "torch.from_numpy", "torch.from_numpy", "len", "img.cpu().detach.dim", "img.cpu().detach.cpu", "min", "len", "img[].numpy", "caption.strip", "isinstance"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.img_print"], ["", "def", "tensor_print", "(", "img", ",", "caption", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "isinstance", "(", "caption", ",", "str", ")", "and", "len", "(", "caption", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "assert", "img", ".", "dim", "(", ")", "==", "4", "and", "img", ".", "shape", "[", "1", "]", "in", "(", "1", ",", "3", ")", ",", "'Expecting 4D tensor with RGB or grayscale'", "\n", "offset", "=", "min", "(", "img", ".", "shape", "[", "2", "]", ",", "img", ".", "shape", "[", "3", "]", ")", "//", "100", "\n", "img", "=", "img", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "offset", "=", "(", "offset", ",", "offset", ")", "\n", "if", "'offsetx'", "in", "kwargs", ":", "\n", "        ", "offset", "=", "(", "kwargs", "[", "'offsetx'", "]", ",", "kwargs", "[", "'offsety'", "]", ")", "\n", "del", "kwargs", "[", "'offsetx'", "]", ",", "kwargs", "[", "'offsety'", "]", "\n", "", "if", "'size'", "in", "kwargs", ":", "\n", "        ", "size", "=", "kwargs", "[", "'size'", "]", "\n", "kwargs", ".", "pop", "(", "'size'", ")", "\n", "", "else", ":", "\n", "        ", "size", "=", "min", "(", "img", ".", "shape", "[", "2", "]", ",", "img", ".", "shape", "[", "3", "]", ")", "//", "15", "\n", "", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "tag", "=", "(", "caption", "if", "isinstance", "(", "caption", ",", "str", ")", "else", "caption", "[", "i", "]", ")", ".", "strip", "(", ")", "\n", "if", "len", "(", "tag", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "img_np", "=", "img_print", "(", "img", "[", "i", "]", ".", "numpy", "(", ")", ",", "tag", ",", "offset", ",", "size", "=", "size", ",", "**", "kwargs", ")", "\n", "img", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "img_np", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.colorize": [[77, 84], ["matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "torch.tensor().float", "torch.tensor().float", "x.permute.permute", "torch.is_tensor", "torch.is_tensor", "matplotlib.cm.get_cmap.", "x.permute.dim", "x.permute.numpy", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "colorize", "(", "x", ",", "cmap", "=", "'jet'", ")", ":", "\n", "    ", "assert", "torch", ".", "is_tensor", "(", "x", ")", "and", "x", ".", "dim", "(", ")", "==", "2", "and", "x", ".", "dtype", "==", "torch", ".", "float32", "\n", "cm", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "cmap", "if", "cmap", "is", "not", "None", "else", "'gray'", ")", "\n", "x", "=", "cm", "(", "x", ".", "numpy", "(", ")", ",", "bytes", "=", "False", ")", "[", "...", ",", "0", ":", "3", "]", "\n", "x", "=", "torch", ".", "tensor", "(", "x", ")", ".", "float", "(", ")", "\n", "x", "=", "x", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.visualize_singular_values": [[86, 131], ["copy.deepcopy", "max", "len", "torch.full", "torch.full", "enumerate", "visualizations.colorize", "range", "torch.interpolate().squeeze", "tensor_print().squeeze.view", "torch.cat", "torch.cat", "tensor_print().squeeze.reshape", "max", "torch.pad", "sv.numel", "tensor_dims.values", "min", "float", "float", "min", "max", "canvas[].copy_", "max", "tensor_print().squeeze", "tensor_print().squeeze", "copy.deepcopy.items", "svs[].min().item", "svs[].max().item", "min", "min", "torch.interpolate", "torch.zeros", "torch.zeros", "[].min().item", "tensor_print().squeeze.unsqueeze", "visualizations.tensor_print", "visualizations.tensor_print", "svs[].min", "svs[].max", "tensor_print().squeeze.unsqueeze", "tensor_print().squeeze.unsqueeze", "[].min"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.colorize", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.tensor_print", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.tensor_print"], ["", "def", "visualize_singular_values", "(", "svs", ",", "module_ordering", ",", "truncate_singular_values", "=", "None", ",", "normalize_each", "=", "False", ")", ":", "\n", "    ", "svs", "=", "copy", ".", "deepcopy", "(", "svs", ")", "\n", "tensor_dims", "=", "{", "name", ":", "sv", ".", "numel", "(", ")", "for", "name", ",", "sv", "in", "svs", ".", "items", "(", ")", "}", "\n", "max_tensor_dim", "=", "max", "(", "tensor_dims", ".", "values", "(", ")", ")", "\n", "if", "truncate_singular_values", "is", "not", "None", ":", "\n", "        ", "max_tensor_dim", "=", "min", "(", "max_tensor_dim", ",", "truncate_singular_values", ")", "\n", "", "num_modules", "=", "len", "(", "module_ordering", ")", "\n", "canvas", "=", "torch", ".", "full", "(", "(", "max_tensor_dim", ",", "num_modules", ")", ",", "fill_value", "=", "-", "1.0", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "sv_min", ",", "sv_min_trunc", ",", "sv_max", "=", "float", "(", "np", ".", "inf", ")", ",", "float", "(", "np", ".", "inf", ")", ",", "-", "1.0", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "module_ordering", ")", ":", "\n", "        ", "if", "name", "not", "in", "svs", ":", "\n", "            ", "continue", "\n", "", "num_svs", "=", "tensor_dims", "[", "name", "]", "\n", "sv_min", "=", "min", "(", "sv_min", ",", "svs", "[", "name", "]", ".", "min", "(", ")", ".", "item", "(", ")", ")", "\n", "sv_max", "=", "max", "(", "sv_max", ",", "svs", "[", "name", "]", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "if", "normalize_each", ":", "\n", "            ", "svs", "[", "name", "]", "=", "svs", "[", "name", "]", "/", "sv_max", "\n", "sv_min", "/=", "sv_max", "\n", "sv_max", "=", "1.0", "\n", "", "if", "truncate_singular_values", "is", "not", "None", ":", "\n", "            ", "num_svs", "=", "min", "(", "num_svs", ",", "truncate_singular_values", ")", "\n", "sv_min_trunc", "=", "min", "(", "sv_min_trunc", ",", "svs", "[", "name", "]", "[", ":", "num_svs", "]", ".", "min", "(", ")", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "sv_min_trunc", "=", "sv_min", "\n", "", "canvas", "[", ":", "num_svs", ",", "i", "]", ".", "copy_", "(", "svs", "[", "name", "]", "[", ":", "num_svs", "]", ")", "\n", "", "mask_ignore", "=", "canvas", "<", "0", "\n", "canvas", "[", "mask_ignore", "]", "=", "0.0", "\n", "canvas", "=", "(", "canvas", "-", "sv_min_trunc", ")", "/", "max", "(", "sv_max", "-", "sv_min_trunc", ",", "1e-8", ")", "\n", "canvas", "=", "colorize", "(", "canvas", ")", "\n", "for", "i", "in", "range", "(", "canvas", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "canvas", "[", "i", "]", "[", "mask_ignore", "]", "=", "0.", "\n", "", "canvas", "=", "F", ".", "interpolate", "(", "canvas", ".", "unsqueeze", "(", "0", ")", ",", "(", "max_tensor_dim", "*", "4", ",", "num_modules", "*", "4", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", "\n", "canvas", "=", "canvas", ".", "view", "(", "3", ",", "-", "1", ",", "4", ")", "\n", "canvas", "=", "torch", ".", "cat", "(", "(", "canvas", ",", "torch", ".", "zeros", "(", "(", "3", ",", "canvas", ".", "shape", "[", "1", "]", ",", "2", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ")", ",", "dim", "=", "2", ")", "\n", "canvas", "=", "canvas", ".", "reshape", "(", "3", ",", "max_tensor_dim", "*", "4", ",", "num_modules", "*", "(", "4", "+", "2", ")", ")", "\n", "margin_top", "=", "16", "\n", "margin_right", "=", "max", "(", "128", "-", "canvas", ".", "shape", "[", "-", "1", "]", ",", "0", ")", "\n", "canvas", "=", "F", ".", "pad", "(", "canvas", ",", "[", "0", ",", "margin_right", ",", "margin_top", ",", "0", "]", ",", "value", "=", "0.", ")", "\n", "if", "truncate_singular_values", "is", "None", "or", "sv_min_trunc", "==", "sv_min", ":", "\n", "        ", "canvas", "=", "tensor_print", "(", "canvas", ".", "unsqueeze", "(", "0", ")", ",", "f'{sv_min:.3f} {sv_max:.3f}'", ",", "size", "=", "10", ")", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "canvas", "=", "tensor_print", "(", "\n", "canvas", ".", "unsqueeze", "(", "0", ")", ",", "f'{sv_min:.3f} {sv_min_trunc:.3f} {sv_max:.3f}'", ",", "size", "=", "10", "\n", ")", ".", "squeeze", "(", "0", ")", "\n", "", "return", "canvas", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.__init__": [[17, 42], ["super().__init__", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "type"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "cls_stiefel_full", ",", "cls_stiefel_canonical", ",", "max_rank", ",", "flatten_filter_dimensions", "=", "True", ",", "\n", "spectrum_eye", "=", "False", ",", "init_mode", "=", "None", ",", "init_std", "=", "None", ",", "init_seed", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "init_seed", "is", "None", "or", "type", "(", "init_seed", ")", "is", "int", "\n", "self", ".", "cls_stiefel_full", "=", "cls_stiefel_full", "\n", "self", ".", "cls_stiefel_canonical", "=", "cls_stiefel_canonical", "\n", "self", ".", "max_rank", "=", "max_rank", "\n", "self", ".", "flatten_filter_dimensions", "=", "flatten_filter_dimensions", "\n", "self", ".", "spectrum_eye", "=", "spectrum_eye", "\n", "self", ".", "init_mode", "=", "init_mode", "\n", "self", ".", "init_std", "=", "init_std", "\n", "self", ".", "init_seed", "=", "init_seed", "\n", "self", ".", "stiefels_full", "=", "OrderedDict", "(", ")", "\n", "self", ".", "stiefels_canonical", "=", "OrderedDict", "(", ")", "\n", "self", ".", "singular_values", "=", "OrderedDict", "(", ")", "\n", "self", ".", "map_tensorname_to_descriptor", "=", "OrderedDict", "(", ")", "\n", "self", ".", "map_corename_to_descriptor", "=", "OrderedDict", "(", ")", "\n", "self", ".", "list_names", "=", "[", "]", "\n", "self", ".", "instantiated", "=", "False", "\n", "self", ".", "num_params", "=", "0", "\n", "self", ".", "list_names", "=", "[", "]", "\n", "self", ".", "map_name_to_id", "=", "{", "}", "\n", "self", ".", "last_tensors", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_stiefel": [[43, 65], ["stiefels.get", "src.utils.stiefel_parameterization.dof_stiefel_canonical", "src.utils.stiefel_parameterization.dof_stiefel"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.dof_stiefel_canonical", "home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.dof_stiefel"], ["", "def", "add_stiefel", "(", "self", ",", "name", ",", "rank", ",", "n", ",", "is_thin", ",", "is_canonical", ",", "target_shape", ")", ":", "\n", "        ", "assert", "rank", "<=", "n", "\n", "shape_desc", "=", "f'{rank}_{n}'", "\n", "stiefels", "=", "self", ".", "stiefels_full", "if", "(", "not", "is_canonical", "or", "self", ".", "cls_stiefel_full", "==", "self", ".", "cls_stiefel_canonical", ")", "else", "self", ".", "stiefels_canonical", "\n", "stiefel", "=", "stiefels", ".", "get", "(", "shape_desc", ",", "None", ")", "\n", "if", "stiefel", "is", "None", ":", "\n", "            ", "stiefel", "=", "{", "\n", "'batch'", ":", "0", ",", "\n", "'rank'", ":", "rank", ",", "\n", "'n'", ":", "n", ",", "\n", "}", "\n", "", "self", ".", "map_corename_to_descriptor", "[", "name", "]", "=", "{", "\n", "'stiefel_desc'", ":", "shape_desc", ",", "\n", "'id'", ":", "stiefel", "[", "'batch'", "]", ",", "\n", "'shape'", ":", "target_shape", ",", "\n", "'is_thin'", ":", "is_thin", ",", "\n", "'is_canonical'", ":", "is_canonical", ",", "\n", "}", "\n", "stiefel", "[", "'batch'", "]", "+=", "1", "\n", "stiefels", "[", "shape_desc", "]", "=", "stiefel", "\n", "return", "dof_stiefel_canonical", "(", "rank", ",", "n", ")", "if", "is_canonical", "else", "dof_stiefel", "(", "rank", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor": [[66, 74], ["len", "spectral_tensors_factory.SpectralTensorsFactoryBase.list_names.append", "spectral_tensors_factory.SpectralTensorsFactoryBase.on_add_tensor"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactorySTTP.on_add_tensor"], ["", "def", "add_tensor", "(", "self", ",", "name", ",", "shape", ",", "target_std", "=", "None", ",", "permute_fwd", "=", "None", ",", "permute_bwd", "=", "None", ")", ":", "\n", "        ", "assert", "not", "self", ".", "instantiated", "\n", "assert", "name", "not", "in", "self", ".", "map_name_to_id", "\n", "\n", "self", ".", "map_name_to_id", "[", "name", "]", "=", "len", "(", "self", ".", "list_names", ")", "\n", "self", ".", "list_names", ".", "append", "(", "name", ")", "\n", "\n", "return", "self", ".", "on_add_tensor", "(", "name", ",", "shape", ",", "target_std", ",", "permute_fwd", ",", "permute_bwd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.instantiate": [[75, 110], ["torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "enumerate", "spectral_tensors_factory.SpectralTensorsFactoryBase.map_tensorname_to_descriptor.items", "torch.nn.ParameterDict", "torch.nn.ParameterDict", "torch.nn.ParameterDict", "torch.nn.ParameterDict", "stiefels.items", "cls_stiefel", "cls_stiefel.dof", "v.copy.copy.copy", "stats.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "k.replace"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.stiefel_parameterization.StiefelHouseholder.dof"], ["", "def", "instantiate", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "instantiated", "\n", "\n", "stats", "=", "[", "]", "\n", "for", "stiefels", ",", "cls_stiefel", ",", "is_canonical", "in", "(", "\n", "(", "self", ".", "stiefels_full", ",", "self", ".", "cls_stiefel_full", ",", "False", ")", ",", "\n", "(", "self", ".", "stiefels_canonical", ",", "self", ".", "cls_stiefel_canonical", ",", "True", ")", ",", "\n", ")", ":", "\n", "            ", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "stiefels", ".", "items", "(", ")", ")", ":", "\n", "                ", "m", "=", "cls_stiefel", "(", "\n", "batch", "=", "v", "[", "'batch'", "]", ",", "\n", "rank", "=", "v", "[", "'rank'", "]", ",", "\n", "n", "=", "v", "[", "'n'", "]", ",", "\n", "is_thin", "=", "True", ",", "\n", "init_mode", "=", "self", ".", "init_mode", ",", "\n", "init_std", "=", "self", ".", "init_std", ",", "\n", "init_seed", "=", "None", "if", "self", ".", "init_seed", "is", "None", "else", "self", ".", "init_seed", "+", "i", ",", "\n", ")", "\n", "stiefels", "[", "k", "]", "=", "m", "\n", "self", ".", "num_params", "+=", "m", ".", "dof", "(", ")", "\n", "v", "=", "v", ".", "copy", "(", ")", "\n", "v", "[", "'is_canonical'", "]", "=", "is_canonical", "\n", "stats", ".", "append", "(", "v", ")", "\n", "", "", "self", ".", "stiefels_full", "=", "torch", ".", "nn", ".", "ModuleDict", "(", "self", ".", "stiefels_full", ")", "\n", "self", ".", "stiefels_canonical", "=", "torch", ".", "nn", ".", "ModuleDict", "(", "self", ".", "stiefels_canonical", ")", "\n", "\n", "if", "not", "self", ".", "spectrum_eye", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "map_tensorname_to_descriptor", ".", "items", "(", ")", ":", "\n", "                ", "sv_init", "=", "torch", ".", "ones", "(", "(", "v", "[", "'num_singular_values'", "]", ",", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "singular_values", "[", "k", ".", "replace", "(", "'.'", ",", "'-'", ")", "]", "=", "torch", ".", "nn", ".", "Parameter", "(", "sv_init", ")", "\n", "self", ".", "num_params", "+=", "v", "[", "'num_singular_values'", "]", "\n", "", "self", ".", "singular_values", "=", "torch", ".", "nn", ".", "ParameterDict", "(", "self", ".", "singular_values", ")", "\n", "\n", "", "self", ".", "instantiated", "=", "True", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.get_names": [[111, 114], ["None"], "methods", ["None"], ["", "def", "get_names", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "instantiated", "\n", "return", "self", ".", "list_names", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.have_singular_values": [[115, 118], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "have_singular_values", "(", "self", ")", ":", "\n", "        ", "return", "not", "self", ".", "spectrum_eye", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.forward_singular_value_one": [[119, 124], ["sv.abs().max().clamp", "sv.abs().max", "sv.abs"], "methods", ["None"], ["", "def", "forward_singular_value_one", "(", "self", ",", "name", ")", ":", "\n", "        ", "assert", "self", ".", "instantiated", "\n", "sv", "=", "self", ".", "singular_values", "[", "name", "]", "\n", "sv", "=", "sv", "/", "sv", ".", "abs", "(", ")", ".", "max", "(", ")", ".", "clamp", "(", "min", "=", "1e-8", ")", "\n", "return", "sv", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.forward_singular_values": [[125, 128], ["k.replace", "spectral_tensors_factory.SpectralTensorsFactoryBase.forward_singular_value_one", "spectral_tensors_factory.SpectralTensorsFactoryBase.singular_values.keys"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.forward_singular_value_one"], ["", "def", "forward_singular_values", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "instantiated", "\n", "return", "{", "k", ".", "replace", "(", "'-'", ",", "'.'", ")", ":", "self", ".", "forward_singular_value_one", "(", "k", ")", "for", "k", "in", "self", ".", "singular_values", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.forward": [[129, 178], ["collections.OrderedDict", "spectral_tensors_factory.SpectralTensorsFactoryBase.map_tensorname_to_descriptor.items", "tuple", "spectral_tensors_factory.SpectralTensorsFactoryBase.forward_singular_values", "src.items", "range", "tensor.permute.permute.reshape", "collections.OrderedDict.values", "v.chunk.chunk.forward", "v.chunk.chunk.chunk", "spectral_tensors_factory.SpectralTensorsFactoryBase.core_name", "core.reshape.reshape.reshape", "cores.append", "core_id.view", "tensor.permute.permute.permute", "a.squeeze", "cores[].reshape", "sv.reshape"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.forward_singular_values", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.forward", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactorySTTP.core_name"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "instantiated", "\n", "singular_values", "=", "None", "\n", "if", "not", "self", ".", "spectrum_eye", ":", "\n", "            ", "singular_values", "=", "self", ".", "forward_singular_values", "(", ")", "\n", "\n", "", "stiefels_full", ",", "stiefels_canonical", "=", "{", "}", ",", "{", "}", "\n", "for", "src", ",", "dst", "in", "(", "\n", "(", "self", ".", "stiefels_full", ",", "stiefels_full", ")", ",", "\n", "(", "self", ".", "stiefels_canonical", ",", "stiefels_canonical", ")", ",", "\n", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "src", ".", "items", "(", ")", ":", "\n", "                ", "v", "=", "v", ".", "forward", "(", ")", "\n", "v", "=", "v", ".", "chunk", "(", "v", ".", "shape", "[", "0", "]", ",", "dim", "=", "0", ")", "# produces TracerWarning -- safe to ignore", "\n", "v", "=", "[", "a", ".", "squeeze", "(", ")", "for", "a", "in", "v", "]", "\n", "dst", "[", "k", "]", "=", "v", "\n", "\n", "", "", "tensors", "=", "OrderedDict", "(", ")", "\n", "for", "name", ",", "desc", "in", "self", ".", "map_tensorname_to_descriptor", ".", "items", "(", ")", ":", "\n", "            ", "num_cores", "=", "desc", "[", "'num_cores'", "]", "\n", "cores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_cores", ")", ":", "\n", "                ", "core_name", "=", "self", ".", "core_name", "(", "name", ",", "i", ")", "\n", "core_desc", "=", "self", ".", "map_corename_to_descriptor", "[", "core_name", "]", "\n", "stiefel_desc", "=", "core_desc", "[", "'stiefel_desc'", "]", "\n", "id_in_stiefel", "=", "core_desc", "[", "'id'", "]", "\n", "is_canonical", "=", "core_desc", "[", "'is_canonical'", "]", "\n", "stiefels", "=", "stiefels_full", "if", "(", "not", "is_canonical", "or", "self", ".", "cls_stiefel_full", "==", "self", ".", "cls_stiefel_canonical", ")", "else", "stiefels_canonical", "\n", "core", "=", "stiefels", "[", "stiefel_desc", "]", "[", "id_in_stiefel", "]", "\n", "if", "not", "core_desc", "[", "'is_thin'", "]", ":", "\n", "                    ", "core", "=", "core", ".", "T", "\n", "", "core", "=", "core", ".", "reshape", "(", "core_desc", "[", "'shape'", "]", ")", "\n", "cores", ".", "append", "(", "core", ")", "\n", "\n", "", "if", "not", "self", ".", "spectrum_eye", ":", "\n", "                ", "sv", "=", "singular_values", "[", "name", "]", "\n", "sv_id", "=", "desc", "[", "'singular_insertion_rank_id'", "]", "-", "1", "\n", "core_id_shape", "=", "cores", "[", "sv_id", "]", ".", "shape", "\n", "core_id", "=", "cores", "[", "sv_id", "]", ".", "reshape", "(", "-", "1", ",", "core_id_shape", "[", "-", "1", "]", ")", "*", "sv", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "cores", "[", "sv_id", "]", "=", "core_id", ".", "view", "(", "core_id_shape", ")", "\n", "\n", "", "tensor", "=", "desc", "[", "'contraction_fn'", "]", "(", "*", "cores", ")", "\n", "tensor", "=", "tensor", ".", "reshape", "(", "desc", "[", "'shape_src'", "]", ")", "\n", "if", "desc", "[", "'permute_from_factory'", "]", "is", "not", "None", ":", "\n", "                ", "tensor", "=", "tensor", ".", "permute", "(", "desc", "[", "'permute_from_factory'", "]", ")", "\n", "", "tensors", "[", "name", "]", "=", "tensor", "\n", "\n", "", "return", "tuple", "(", "tensors", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.forward_2": [[179, 182], ["spectral_tensors_factory.SpectralTensorsFactoryBase.forward", "spectral_tensors_factory.SpectralTensorsFactoryBase.set_tensors"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.forward", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.set_tensors"], ["", "def", "forward_2", "(", "self", ")", ":", "\n", "        ", "t", "=", "self", ".", "forward", "(", ")", "\n", "self", ".", "set_tensors", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.has_stiefel_penalty": [[183, 186], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_stiefel_penalty", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cls_stiefel_full", ".", "has_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.stiefel_penalty": [[187, 198], ["sum", "sum", "v.penalty", "stiefels.values", "stiefels.values"], "methods", ["None"], ["", "def", "stiefel_penalty", "(", "self", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "assert", "self", ".", "cls_stiefel_full", "==", "self", ".", "cls_stiefel_canonical", "\n", "penalty", "=", "sum", "(", "v", ".", "penalty", "(", ")", "\n", "for", "stiefels", "in", "(", "self", ".", "stiefels_full", ",", "self", ".", "stiefels_canonical", ")", "\n", "for", "v", "in", "stiefels", ".", "values", "(", ")", ")", "\n", "if", "normalize", ":", "\n", "            ", "denom", "=", "sum", "(", "v", ".", "batch", "*", "(", "v", ".", "rank", "**", "2", ")", "\n", "for", "stiefels", "in", "(", "self", ".", "stiefels_full", ",", "self", ".", "stiefels_canonical", ")", "\n", "for", "v", "in", "stiefels", ".", "values", "(", ")", ")", "\n", "penalty", "=", "penalty", "/", "denom", "\n", "", "return", "penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.num_parameters": [[199, 202], ["None"], "methods", ["None"], ["", "def", "num_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "instantiated", "\n", "return", "self", ".", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.state_dict": [[203, 208], ["super().state_dict", "super().state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.state_dict"], ["", "def", "state_dict", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "self", ".", "instantiated", "\n", "sd", "=", "super", "(", ")", ".", "state_dict", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "sd", ".", "pop", "(", "'last_tensors'", ",", "None", ")", "\n", "return", "sd", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.set_tensors": [[209, 212], ["None"], "methods", ["None"], ["", "def", "set_tensors", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "assert", "self", ".", "instantiated", "\n", "self", ".", "last_tensors", "=", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.get_tensor_by_name": [[213, 216], ["None"], "methods", ["None"], ["", "def", "get_tensor_by_name", "(", "self", ",", "name", ")", ":", "\n", "        ", "assert", "self", ".", "instantiated", "\n", "return", "self", ".", "last_tensors", "[", "self", ".", "map_name_to_id", "[", "name", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactorySVDP.core_name": [[219, 223], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "core_name", "(", "name", ",", "id", ")", ":", "\n", "        ", "assert", "id", "in", "(", "0", ",", "1", ")", "\n", "return", "f'{name}#{\"U\" if id == 0 else \"Vt\"}'", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactorySVDP.on_add_tensor": [[224, 272], ["min", "spectral_tensors_factory.SpectralTensorsFactorySVDP.add_stiefel", "spectral_tensors_factory.SpectralTensorsFactorySVDP.add_stiefel", "len", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "U.mm", "len", "len", "len", "len", "spectral_tensors_factory.SpectralTensorsFactorySVDP.core_name", "spectral_tensors_factory.SpectralTensorsFactorySVDP.core_name", "range", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_stiefel", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_stiefel", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactorySTTP.core_name", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactorySTTP.core_name"], ["", "def", "on_add_tensor", "(", "self", ",", "name", ",", "shape", ",", "target_std", "=", "None", ",", "permute_to_factory", "=", "None", ",", "permute_from_factory", "=", "None", ")", ":", "\n", "        ", "assert", "not", "self", ".", "instantiated", "\n", "assert", "name", "not", "in", "self", ".", "map_tensorname_to_descriptor", "\n", "assert", "len", "(", "shape", ")", "in", "(", "2", ",", "4", ")", "\n", "assert", "permute_to_factory", "is", "None", "or", "len", "(", "permute_to_factory", ")", "==", "len", "(", "shape", ")", "\n", "assert", "permute_from_factory", "is", "None", "or", "len", "(", "permute_to_factory", ")", "==", "len", "(", "shape", ")", "\n", "\n", "if", "permute_to_factory", "is", "not", "None", ":", "\n", "            ", "shape", "=", "[", "shape", "[", "permute_to_factory", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "shape", ")", ")", "]", "\n", "", "shape_dst", "=", "[", "shape", "[", "0", "]", ",", "torch", ".", "tensor", "(", "shape", "[", "1", ":", "]", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "]", "\n", "rank", "=", "num_singular_values", "=", "min", "(", "shape_dst", "[", "0", "]", ",", "shape_dst", "[", "1", "]", ",", "self", ".", "max_rank", ")", "\n", "\n", "n_param_uncompressed", "=", "shape_dst", "[", "0", "]", "*", "shape_dst", "[", "1", "]", "\n", "n_param_compressed", "=", "0", "if", "self", ".", "spectrum_eye", "else", "num_singular_values", "\n", "\n", "n_param_compressed", "+=", "self", ".", "add_stiefel", "(", "\n", "name", "=", "self", ".", "core_name", "(", "name", ",", "0", ")", ",", "\n", "rank", "=", "rank", ",", "\n", "n", "=", "shape_dst", "[", "0", "]", ",", "\n", "is_thin", "=", "True", ",", "\n", "is_canonical", "=", "self", ".", "spectrum_eye", ",", "\n", "target_shape", "=", "(", "shape_dst", "[", "0", "]", ",", "rank", ")", ",", "\n", ")", "\n", "\n", "n_param_compressed", "+=", "self", ".", "add_stiefel", "(", "\n", "name", "=", "self", ".", "core_name", "(", "name", ",", "1", ")", ",", "\n", "rank", "=", "rank", ",", "\n", "n", "=", "shape_dst", "[", "1", "]", ",", "\n", "is_thin", "=", "False", ",", "\n", "is_canonical", "=", "False", ",", "\n", "target_shape", "=", "(", "rank", ",", "shape_dst", "[", "1", "]", ")", "\n", ")", "\n", "\n", "contraction_fn", "=", "lambda", "U", ",", "Vt", ":", "U", ".", "mm", "(", "Vt", ")", "\n", "\n", "self", ".", "map_tensorname_to_descriptor", "[", "name", "]", "=", "{", "\n", "'shape_src'", ":", "shape", ",", "\n", "'permute_from_factory'", ":", "permute_from_factory", ",", "\n", "'singular_insertion_rank_id'", ":", "1", ",", "\n", "'target_std'", ":", "target_std", ",", "\n", "'num_singular_values'", ":", "num_singular_values", ",", "\n", "'num_cores'", ":", "2", ",", "\n", "'contraction_fn'", ":", "contraction_fn", ",", "\n", "'n_param_uncompressed'", ":", "n_param_uncompressed", ",", "\n", "'n_param_compressed'", ":", "n_param_compressed", ",", "\n", "}", "\n", "\n", "return", "n_param_compressed", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactorySTTP._add_core": [[275, 285], ["spectral_tensors_factory.SpectralTensorsFactorySTTP.add_stiefel"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_stiefel"], ["    ", "def", "_add_core", "(", "self", ",", "name", ",", "r_l", ",", "m", ",", "r_r", ",", "is_left", ",", "is_canonical", ")", ":", "\n", "        ", "if", "is_left", ":", "\n", "            ", "rank", "=", "r_r", "\n", "n", "=", "r_l", "*", "m", "\n", "is_thin", "=", "True", "\n", "", "else", ":", "\n", "            ", "rank", "=", "r_l", "\n", "n", "=", "m", "*", "r_r", "\n", "is_thin", "=", "False", "\n", "", "return", "self", ".", "add_stiefel", "(", "name", ",", "rank", ",", "n", ",", "is_thin", ",", "is_canonical", ",", "(", "r_l", ",", "m", ",", "r_r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactorySTTP.core_name": [[286, 289], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "core_name", "(", "name", ",", "id", ")", ":", "\n", "        ", "return", "f'{name}#core{id}'", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactorySTTP.on_add_tensor": [[290, 347], ["src.utils.tt_utils.dim_factorize_simple", "len", "src.utils.tt_utils.dim_factorize_simple.extend", "src.utils.tt_utils.get_ranks_tt", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "enumerate", "src.utils.tensor_contraction.get_tt_contraction_fn_and_flops", "len", "src.utils.tt_utils.dim_factorize_simple", "len", "spectral_tensors_factory.SpectralTensorsFactorySTTP.core_name", "spectral_tensors_factory.SpectralTensorsFactorySTTP._add_core", "list_core_shapes.append", "len", "len", "len", "len", "len", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "src.utils.tt_utils.dim_factorize_simple.append", "len", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "range", "src.utils.tt_utils.dim_factorize_simple.extend", "len", "len", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "src.utils.tt_utils.dim_factorize_simple", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.tt_utils.dim_factorize_simple", "home.repos.pwc.inspect_result.toshas_sttp.utils.tt_utils.get_ranks_tt", "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.get_tt_contraction_fn_and_flops", "home.repos.pwc.inspect_result.toshas_sttp.utils.tt_utils.dim_factorize_simple", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactorySTTP.core_name", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactorySTTP._add_core", "home.repos.pwc.inspect_result.toshas_sttp.utils.tt_utils.dim_factorize_simple"], ["", "def", "on_add_tensor", "(", "self", ",", "name", ",", "shape", ",", "target_std", "=", "None", ",", "permute_to_factory", "=", "None", ",", "permute_from_factory", "=", "None", ")", ":", "\n", "        ", "assert", "not", "self", ".", "instantiated", "\n", "assert", "name", "not", "in", "self", ".", "map_tensorname_to_descriptor", "\n", "assert", "len", "(", "shape", ")", "in", "(", "2", ",", "4", ")", "\n", "assert", "permute_to_factory", "is", "None", "or", "len", "(", "permute_to_factory", ")", "==", "len", "(", "shape", ")", "\n", "assert", "permute_from_factory", "is", "None", "or", "len", "(", "permute_to_factory", ")", "==", "len", "(", "shape", ")", "\n", "\n", "if", "permute_to_factory", "is", "not", "None", ":", "\n", "            ", "shape", "=", "[", "shape", "[", "permute_to_factory", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "shape", ")", ")", "]", "\n", "", "shape_dst", "=", "dim_factorize_simple", "(", "shape", "[", "0", "]", ",", "True", ")", "\n", "singular_insertion_rank_id", "=", "len", "(", "shape_dst", ")", "\n", "shape_dst", ".", "extend", "(", "dim_factorize_simple", "(", "shape", "[", "1", "]", ",", "False", ")", ")", "\n", "if", "len", "(", "shape", ")", ">", "2", ":", "\n", "            ", "if", "self", ".", "flatten_filter_dimensions", ":", "\n", "                ", "mode_filter_dims", "=", "torch", ".", "tensor", "(", "shape", "[", "2", ":", "]", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "\n", "shape_dst", ".", "append", "(", "mode_filter_dims", ")", "\n", "", "else", ":", "\n", "                ", "for", "d", "in", "shape", "[", "2", ":", "]", ":", "\n", "                    ", "shape_dst", ".", "extend", "(", "dim_factorize_simple", "(", "d", ",", "False", ")", ")", "\n", "", "", "", "ranks_tt", "=", "get_ranks_tt", "(", "shape_dst", ",", "self", ".", "max_rank", ")", "\n", "assert", "len", "(", "ranks_tt", ")", "==", "len", "(", "shape_dst", ")", "+", "1", "and", "ranks_tt", "[", "0", "]", "==", "ranks_tt", "[", "-", "1", "]", "==", "1", "\n", "num_singular_values", "=", "ranks_tt", "[", "singular_insertion_rank_id", "]", "\n", "\n", "n_param_uncompressed", "=", "torch", ".", "tensor", "(", "shape_dst", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "\n", "n_param_compressed", "=", "0", "if", "self", ".", "spectrum_eye", "else", "num_singular_values", "\n", "list_core_shapes", "=", "[", "]", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "shape_dst", ")", ":", "\n", "            ", "core_name", "=", "self", ".", "core_name", "(", "name", ",", "i", ")", "\n", "r_l", "=", "ranks_tt", "[", "i", "]", "\n", "r_r", "=", "ranks_tt", "[", "i", "+", "1", "]", "\n", "is_left", "=", "i", "<", "singular_insertion_rank_id", "\n", "if", "i", "<", "singular_insertion_rank_id", "-", "1", ":", "\n", "                ", "is_canonical", "=", "True", "\n", "", "elif", "i", "==", "singular_insertion_rank_id", "-", "1", ":", "\n", "                ", "is_canonical", "=", "self", ".", "spectrum_eye", "\n", "", "elif", "i", "==", "singular_insertion_rank_id", ":", "\n", "                ", "is_canonical", "=", "False", "\n", "", "else", ":", "\n", "                ", "is_canonical", "=", "True", "\n", "", "n_param_compressed", "+=", "self", ".", "_add_core", "(", "core_name", ",", "r_l", ",", "m", ",", "r_r", ",", "is_left", ",", "is_canonical", ")", "\n", "list_core_shapes", ".", "append", "(", "(", "r_l", ",", "m", ",", "r_r", ")", ")", "\n", "", "contraction_fn", ",", "contraction_flops", "=", "get_tt_contraction_fn_and_flops", "(", "list_core_shapes", ")", "\n", "\n", "self", ".", "map_tensorname_to_descriptor", "[", "name", "]", "=", "{", "\n", "'shape_src'", ":", "shape", ",", "\n", "'permute_from_factory'", ":", "permute_from_factory", ",", "\n", "'singular_insertion_rank_id'", ":", "singular_insertion_rank_id", ",", "\n", "'target_std'", ":", "target_std", ",", "\n", "'num_singular_values'", ":", "num_singular_values", ",", "\n", "'num_cores'", ":", "len", "(", "shape_dst", ")", ",", "\n", "'contraction_fn'", ":", "contraction_fn", ",", "\n", "'contraction_flops'", ":", "contraction_flops", ",", "\n", "'n_param_uncompressed'", ":", "n_param_uncompressed", ",", "\n", "'n_param_compressed'", ":", "n_param_compressed", ",", "\n", "}", "\n", "\n", "return", "n_param_compressed", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralLayerBase.__init__": [[350, 364], ["super().__init__", "isinstance", "spectral_tensors_factory.SpectralLayerBase.init_checks", "spectral_tensors_factory.SpectralLayerBase.initialize", "spectral_tensors_factory.SpectralLayerBase.register_parameter"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralEmbedding.init_checks", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralLayerBase.initialize"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "name", ",", "spectral_tensors_factory", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "module", ",", "(", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvNd", ",", "torch", ".", "nn", ".", "Linear", ",", "torch", ".", "nn", ".", "Embedding", ")", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "weight_shape", "=", "module", ".", "weight", ".", "shape", "\n", "self", ".", "spectral_tensors_factory", "=", "[", "spectral_tensors_factory", "]", "# guard parameters iterator from traversing down", "\n", "self", ".", "init_checks", "(", "module", ")", "\n", "if", "not", "self", ".", "is_embedding", ":", "\n", "            ", "if", "module", ".", "bias", "is", "None", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "bias", "=", "module", ".", "bias", "\n", "", "", "self", ".", "num_param_weight", "=", "None", "\n", "self", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralLayerBase.initialize": [[365, 379], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "spectral_tensors_factory.SpectralLayerBase.spectral_tensors_factory[].add_tensor", "torch.nn.init._calculate_correct_fan", "torch.nn.init._calculate_correct_fan", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor"], ["", "def", "initialize", "(", "self", ",", "fan_mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ",", "nonlinearity_negative_slope", "=", "0", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "std_target", "=", "None", "\n", "permute_to_factory", ",", "permute_from_factory", "=", "None", ",", "None", "\n", "if", "not", "self", ".", "is_embedding", ":", "\n", "                ", "fan", "=", "_calculate_correct_fan", "(", "torch", ".", "empty", "(", "*", "self", ".", "weight_shape", ")", ",", "fan_mode", ")", "\n", "gain", "=", "calculate_gain", "(", "nonlinearity", ",", "nonlinearity_negative_slope", ")", "\n", "std_target", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "if", "self", ".", "is_conv", "and", "self", ".", "is_transposed", ":", "\n", "# unlike every other op having leading dim C_out, transposed_conv.weight is C_in x C_out x K x K", "\n", "                    ", "permute_to_factory", "=", "[", "1", ",", "0", ",", "2", ",", "3", "]", "\n", "permute_from_factory", "=", "[", "1", ",", "0", ",", "2", ",", "3", "]", "\n", "", "", "self", ".", "num_param_weight", "=", "self", ".", "spectral_tensors_factory", "[", "0", "]", ".", "add_tensor", "(", "\n", "self", ".", "name", ",", "self", ".", "weight_shape", ",", "std_target", ",", "permute_to_factory", ",", "permute_from_factory", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralLayerBase.num_parameters_weight": [[381, 383], ["None"], "methods", ["None"], ["", "", "def", "num_parameters_weight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_param_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralConvNd.__init__": [[404, 422], ["src.utils.helpers.is_conv_transposed", "spectral_tensors_factory.SpectralLayerBase.__init__", "type", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "type", "type", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.is_conv_transposed", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["def", "__init__", "(", "self", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "layer_type_name", "=", "self", ".", "map_type_to_name", "[", "type", "(", "module", ")", "]", "\n", "self", ".", "is_conv", "=", "True", "\n", "self", ".", "is_transposed", "=", "is_conv_transposed", "(", "module", ")", "\n", "self", ".", "is_embedding", "=", "False", "\n", "super", "(", ")", ".", "__init__", "(", "module", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_fn", "=", "self", ".", "map_type_to_F", "[", "type", "(", "module", ")", "]", "\n", "self", ".", "conv_cls", "=", "type", "(", "module", ")", "\n", "self", ".", "in_channels", "=", "module", ".", "in_channels", "\n", "self", ".", "out_channels", "=", "module", ".", "out_channels", "\n", "self", ".", "kernel_size", "=", "module", ".", "kernel_size", "\n", "self", ".", "kernel_numel", "=", "torch", ".", "tensor", "(", "self", ".", "kernel_size", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "stride", "=", "module", ".", "stride", "\n", "self", ".", "padding", "=", "module", ".", "padding", "\n", "self", ".", "output_padding", "=", "module", ".", "output_padding", "\n", "self", ".", "dilation", "=", "module", ".", "dilation", "\n", "self", ".", "groups", "=", "module", ".", "groups", "\n", "self", ".", "padding_mode", "=", "module", ".", "padding_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralConvNd.init_checks": [[423, 427], ["isinstance"], "methods", ["None"], ["", "def", "init_checks", "(", "self", ",", "module", ")", ":", "\n", "        ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvNd", ")", "\n", "assert", "not", "self", ".", "is_transposed", "and", "module", ".", "padding_mode", "!=", "'circular'", "or", "module", ".", "padding_mode", "==", "'zeros'", ",", "'Not implemented'", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralConvNd.forward": [[428, 438], ["spectral_tensors_factory.SpectralConvNd.spectral_tensors_factory[].get_tensor_by_name", "spectral_tensors_factory.SpectralConvNd.conv_fn", "spectral_tensors_factory.SpectralConvNd.conv_fn"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.get_tensor_by_name"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "weight", "=", "self", ".", "spectral_tensors_factory", "[", "0", "]", ".", "get_tensor_by_name", "(", "self", ".", "name", ")", "\n", "if", "self", ".", "is_transposed", ":", "\n", "            ", "out", "=", "self", ".", "conv_fn", "(", "\n", "input", ",", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "output_padding", ",", "self", ".", "groups", ",", "self", ".", "dilation", "\n", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "conv_fn", "(", "input", ",", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralConvNd.extra_repr": [[439, 441], ["str"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.layer_type_name} [{\" x \".join([str(a) for a in self.weight_shape])}] stride={self.stride} '", "f'padding={self.padding} dilation={self.dilation} groups={self.groups} has_bias={self.bias is not None}'", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralLinear.__init__": [[445, 452], ["spectral_tensors_factory.SpectralLayerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "layer_type_name", "=", "'Linear'", "\n", "self", ".", "is_conv", "=", "False", "\n", "self", ".", "is_embedding", "=", "False", "\n", "super", "(", ")", ".", "__init__", "(", "module", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "in_features", "=", "module", ".", "in_features", "\n", "self", ".", "out_features", "=", "module", ".", "out_features", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralLinear.init_checks": [[453, 455], ["isinstance"], "methods", ["None"], ["", "def", "init_checks", "(", "self", ",", "module", ")", ":", "\n", "        ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "Linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralLinear.forward": [[456, 459], ["spectral_tensors_factory.SpectralLinear.spectral_tensors_factory[].get_tensor_by_name", "torch.linear", "torch.linear"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.get_tensor_by_name"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "weight", "=", "self", ".", "spectral_tensors_factory", "[", "0", "]", ".", "get_tensor_by_name", "(", "self", ".", "name", ")", "\n", "return", "F", ".", "linear", "(", "input", ",", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralLinear.extra_repr": [[460, 462], ["str"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'[{\" x \".join([str(a) for a in self.weight_shape])}] has_bias={self.bias is not None}'", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralEmbedding.__init__": [[465, 477], ["spectral_tensors_factory.SpectralLayerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "layer_type_name", "=", "'Embedding'", "\n", "self", ".", "is_conv", "=", "False", "\n", "self", ".", "is_embedding", "=", "True", "\n", "super", "(", ")", ".", "__init__", "(", "module", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "embedding_dim", "=", "module", ".", "embedding_dim", "\n", "self", ".", "num_embeddings", "=", "module", ".", "num_embeddings", "\n", "self", ".", "padding_idx", "=", "module", ".", "padding_idx", "\n", "self", ".", "max_norm", "=", "module", ".", "max_norm", "\n", "self", ".", "norm_type", "=", "module", ".", "norm_type", "\n", "self", ".", "scale_grad_by_freq", "=", "module", ".", "scale_grad_by_freq", "\n", "self", ".", "sparse", "=", "module", ".", "sparse", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralEmbedding.init_checks": [[478, 480], ["isinstance"], "methods", ["None"], ["", "def", "init_checks", "(", "self", ",", "module", ")", ":", "\n", "        ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "Embedding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralEmbedding.forward": [[481, 486], ["spectral_tensors_factory.SpectralEmbedding.spectral_tensors_factory[].get_tensor_by_name", "torch.embedding", "torch.embedding"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.get_tensor_by_name"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "weight", "=", "self", ".", "spectral_tensors_factory", "[", "0", "]", ".", "get_tensor_by_name", "(", "self", ".", "name", ")", "\n", "return", "F", ".", "embedding", "(", "\n", "input", ",", "weight", ",", "self", ".", "padding_idx", ",", "self", ".", "max_norm", ",", "\n", "self", ".", "norm_type", ",", "self", ".", "scale_grad_by_freq", ",", "self", ".", "sparse", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralEmbedding.extra_repr": [[488, 490], ["str"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'[{\" x \".join([str(a) for a in self.weight_shape])}]'", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.net_reparameterize_standard_to_factory": [[492, 582], ["src.utils.helpers.get_statedict_num_params", "src.utils.helpers.deep_transform", "spectral_tensors_factory.instantiate", "src.utils.helpers.get_statedict_num_params", "copy.deepcopy", "replacement_cls", "torch.tensor().prod().item", "torch.tensor().prod().item", "replacement_cls.num_parameters_weight", "copy.deepcopy.state_dict", "copy.deepcopy.state_dict", "any", "isinstance", "torch.nn.Identity", "SpectralConvNd.map_type_to_name.keys", "replacement_cls.register_parameter", "print", "type", "ignored_prefixes.append", "SpectralConvNd.map_type_to_name.keys", "replacement_cls.register_parameter", "replacement_cls.register_parameter", "torch.tensor().prod", "torch.tensor().prod", "prefix.startswith", "isinstance", "isinstance", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "print", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "SpectralConvNd.map_type_to_name.keys", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.get_statedict_num_params", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.deep_transform", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.instantiate", "home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.get_statedict_num_params", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralLayerBase.num_parameters_weight", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.state_dict", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print"], ["", "", "def", "net_reparameterize_standard_to_factory", "(", "\n", "net", ",", "spectral_tensors_factory", ",", "\n", "inplace", "=", "True", ",", "module_names_ignored", "=", "None", ",", "\n", "disable_batchnorms", "=", "False", ",", "enable_bias", "=", "False", ",", "disable_bias", "=", "False", ",", "\n", "net_prefix", "=", "None", ",", "classes_ignored", "=", "None", ",", "\n", ")", ":", "\n", "    ", "assert", "not", "(", "enable_bias", "and", "disable_bias", ")", "\n", "\n", "if", "not", "inplace", ":", "\n", "        ", "net", "=", "copy", ".", "deepcopy", "(", "net", ")", "\n", "\n", "", "ignored_prefixes", "=", "[", "]", "\n", "\n", "def", "cb_convert", "(", "op", ",", "prefix", ",", "opaque", ")", ":", "\n", "        ", "if", "module_names_ignored", "is", "not", "None", "and", "prefix", "in", "module_names_ignored", ":", "\n", "            ", "return", "op", "\n", "\n", "", "if", "classes_ignored", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "op", ")", "in", "classes_ignored", ":", "\n", "                ", "ignored_prefixes", ".", "append", "(", "prefix", ")", "\n", "return", "op", "\n", "", "if", "any", "(", "prefix", ".", "startswith", "(", "bp", ")", "for", "bp", "in", "ignored_prefixes", ")", ":", "\n", "                ", "return", "op", "\n", "\n", "", "", "if", "disable_batchnorms", "and", "isinstance", "(", "op", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "return", "Identity", "(", ")", "\n", "\n", "", "if", "op", ".", "__class__", "in", "SpectralConvNd", ".", "map_type_to_name", ".", "keys", "(", ")", ":", "\n", "            ", "replacement_cls", "=", "SpectralConvNd", "\n", "", "elif", "op", ".", "__class__", "==", "torch", ".", "nn", ".", "Linear", ":", "\n", "            ", "replacement_cls", "=", "SpectralLinear", "\n", "", "elif", "op", ".", "__class__", "==", "torch", ".", "nn", ".", "Embedding", ":", "\n", "            ", "replacement_cls", "=", "SpectralEmbedding", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "op", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvNd", ")", ":", "\n", "                ", "print", "(", "'WARNING: Detected a non-standard convolutional layer'", ")", "\n", "", "if", "isinstance", "(", "op", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                ", "print", "(", "'WARNING: Detected a non-standard linear layer'", ")", "\n", "", "return", "op", "\n", "\n", "", "replacement_module", "=", "replacement_cls", "(", "op", ",", "prefix", ",", "spectral_tensors_factory", ")", "\n", "\n", "if", "enable_bias", "and", "op", ".", "__class__", "in", "SpectralConvNd", ".", "map_type_to_name", ".", "keys", "(", ")", ":", "\n", "            ", "if", "replacement_module", ".", "bias", "is", "None", ":", "\n", "                ", "replacement_module", ".", "register_parameter", "(", "\n", "'bias'", ",", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "replacement_module", ".", "out_channels", ",", ")", ")", ")", "\n", ")", "\n", "", "", "if", "enable_bias", "and", "op", ".", "__class__", "==", "torch", ".", "nn", ".", "Linear", ":", "\n", "            ", "if", "replacement_module", ".", "bias", "is", "None", ":", "\n", "                ", "replacement_module", ".", "register_parameter", "(", "\n", "'bias'", ",", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "replacement_module", ".", "out_features", ",", ")", ")", ")", "\n", ")", "\n", "", "", "if", "disable_bias", "and", "op", ".", "__class__", "in", "(", "*", "SpectralConvNd", ".", "map_type_to_name", ".", "keys", "(", ")", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "            ", "del", "replacement_module", ".", "bias", "\n", "replacement_module", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "nflt32_original_weight", "=", "torch", ".", "tensor", "(", "op", ".", "weight", ".", "shape", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "\n", "nflt32_param_weight", "=", "replacement_module", ".", "num_parameters_weight", "(", ")", "\n", "if", "nflt32_param_weight", ">", "nflt32_original_weight", ":", "\n", "            ", "print", "(", "f'Module {prefix} original size is smaller than parameterized: '", "\n", "f'{nflt32_original_weight} < {nflt32_param_weight}'", ")", "\n", "", "opaque", "[", "'nflt32_original_weights'", "]", "+=", "nflt32_original_weight", "\n", "opaque", "[", "'nflt32_parameterized_weights'", "]", "+=", "nflt32_param_weight", "\n", "\n", "return", "replacement_module", "\n", "\n", "", "nflt32_original_total", "=", "get_statedict_num_params", "(", "net", ".", "state_dict", "(", ")", ")", "\n", "opaque", "=", "{", "\n", "'nflt32_original_weights'", ":", "0", ",", "\n", "'nflt32_parameterized_weights'", ":", "0", ",", "\n", "}", "\n", "deep_transform", "(", "net", ",", "cb_convert", ",", "prefix", "=", "net_prefix", ",", "opaque", "=", "opaque", ")", "\n", "stiefel_stats", "=", "spectral_tensors_factory", ".", "instantiate", "(", ")", "\n", "\n", "nflt32_factory", "=", "opaque", "[", "'nflt32_parameterized_weights'", "]", "\n", "nflt32_incompressible", "=", "get_statedict_num_params", "(", "net", ".", "state_dict", "(", ")", ")", "\n", "\n", "compression_net_pct", "=", "100", "*", "(", "nflt32_factory", "+", "nflt32_incompressible", ")", "/", "nflt32_original_total", "\n", "compression_weights_pct", "=", "100", "*", "(", "nflt32_factory", "/", "opaque", "[", "'nflt32_original_weights'", "]", ")", "\n", "\n", "stats", "=", "{", "\n", "'nflt32_original_total'", ":", "nflt32_original_total", ",", "\n", "'nflt32_factory'", ":", "nflt32_factory", ",", "\n", "'nflt32_incompressible'", ":", "nflt32_incompressible", ",", "\n", "'compression_net_pct'", ":", "compression_net_pct", ",", "\n", "'compression_weights_pct'", ":", "compression_weights_pct", ",", "\n", "'stiefel_stats'", ":", "stiefel_stats", ",", "\n", "}", "\n", "\n", "return", "net", ",", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.net_reparameterize_factory_to_standard": [[584, 631], ["src.utils.helpers.deep_transform", "ValueError", "copy.deepcopy", "torch.nn.Embedding.to", "type", "op.conv_cls", "torch.no_grad", "torch.no_grad", "torch.nn.Embedding.weight.data.copy_", "type", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Embedding.bias.data.copy_", "factory.get_tensor_by_name", "next", "id", "type", "torch.nn.Embedding", "torch.nn.Embedding", "op.parameters"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.deep_transform", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.get_tensor_by_name"], ["", "def", "net_reparameterize_factory_to_standard", "(", "net", ",", "inplace", "=", "False", ",", "net_prefix", "=", "None", ",", "factory", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "factory", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Factory must be set'", ")", "\n", "\n", "", "if", "not", "inplace", ":", "\n", "# perform a deep copy of the network, but keep references to factory to prevent factory cloning", "\n", "        ", "net", "=", "copy", ".", "deepcopy", "(", "net", ",", "memo", "=", "{", "id", "(", "factory", ")", ":", "factory", "}", ")", "\n", "\n", "", "def", "cb_convert", "(", "op", ",", "prefix", ",", "opaque", ")", ":", "\n", "        ", "if", "type", "(", "op", ")", "is", "SpectralConvNd", ":", "\n", "            ", "ops_kwargs", "=", "{", "\n", "'in_channels'", ":", "op", ".", "in_channels", ",", "\n", "'out_channels'", ":", "op", ".", "out_channels", ",", "\n", "'kernel_size'", ":", "op", ".", "kernel_size", ",", "\n", "'stride'", ":", "op", ".", "stride", ",", "\n", "'padding'", ":", "op", ".", "padding", ",", "\n", "'dilation'", ":", "op", ".", "dilation", ",", "\n", "'groups'", ":", "op", ".", "groups", ",", "\n", "'bias'", ":", "op", ".", "bias", "is", "not", "None", ",", "\n", "'padding_mode'", ":", "op", ".", "padding_mode", ",", "\n", "}", "\n", "if", "op", ".", "is_transposed", ":", "\n", "                ", "ops_kwargs", "[", "'output_padding'", "]", "=", "op", ".", "output_padding", "\n", "", "out", "=", "op", ".", "conv_cls", "(", "**", "ops_kwargs", ")", "\n", "", "elif", "type", "(", "op", ")", "is", "SpectralLinear", ":", "\n", "            ", "out", "=", "torch", ".", "nn", ".", "Linear", "(", "op", ".", "in_features", ",", "op", ".", "out_features", ",", "bias", "=", "op", ".", "bias", "is", "not", "None", ")", "\n", "", "elif", "type", "(", "op", ")", "is", "SpectralEmbedding", ":", "\n", "            ", "out", "=", "torch", ".", "nn", ".", "Embedding", "(", "\n", "op", ".", "num_embeddings", ",", "\n", "op", ".", "embedding_dim", ",", "\n", "padding_idx", "=", "op", ".", "padding_idx", ",", "\n", "max_norm", "=", "op", ".", "max_norm", ",", "\n", "norm_type", "=", "op", ".", "norm_type", ",", "\n", "scale_grad_by_freq", "=", "op", ".", "scale_grad_by_freq", ",", "\n", "sparse", "=", "op", ".", "sparse", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "op", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "not", "op", ".", "is_embedding", "and", "op", ".", "bias", "is", "not", "None", ":", "\n", "                ", "out", ".", "bias", ".", "data", ".", "copy_", "(", "op", ".", "bias", ".", "data", ")", "\n", "", "out", ".", "weight", ".", "data", ".", "copy_", "(", "factory", ".", "get_tensor_by_name", "(", "op", ".", "name", ")", ")", "\n", "", "out", "=", "out", ".", "to", "(", "next", "(", "op", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "return", "out", "\n", "\n", "", "deep_transform", "(", "net", ",", "cb_convert", ",", "prefix", "=", "net_prefix", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.get_canonical_singular_values_from_spectral_tensors_factory": [[633, 638], ["torch.no_grad", "torch.no_grad", "spectral_tensors_factory.forward_singular_values", "svs[].detach().abs().cpu().sort", "spectral_tensors_factory.forward_singular_values.keys", "svs[].detach().abs().cpu", "svs[].detach().abs", "svs[].detach"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.forward_singular_values"], ["", "def", "get_canonical_singular_values_from_spectral_tensors_factory", "(", "spectral_tensors_factory", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "svs", "=", "spectral_tensors_factory", ".", "forward_singular_values", "(", ")", "\n", "", "svs", "=", "{", "name", ":", "svs", "[", "name", "]", ".", "detach", "(", ")", ".", "abs", "(", ")", ".", "cpu", "(", ")", ".", "sort", "(", "descending", "=", "True", ",", "dim", "=", "0", ")", "[", "0", "]", "for", "name", "in", "svs", ".", "keys", "(", ")", "}", "\n", "return", "svs", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.create_factory": [[14, 20], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "create_factory", "(", "param", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "{", "\n", "'sttp'", ":", "SpectralTensorsFactorySTTP", ",", "\n", "'svdp'", ":", "SpectralTensorsFactorySVDP", ",", "\n", "}", "[", "param", "]", "(", "StiefelHouseholder", ",", "StiefelHouseholderCanonical", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._add_one": [[21, 29], ["test_tt_modules.TestTTModules.create_factory", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.instantiate", "m.reshape.reshape.reshape", "[].item", "test_tt_modules.TestTTModules.assertAlmostEqual", "test_tt_modules.TestTTModules.", "m.reshape.reshape.svd"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.create_factory", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.instantiate"], ["", "def", "_add_one", "(", "self", ",", "param", ",", "max_rank", ",", "shape", ",", "seed", "=", "2020", ")", ":", "\n", "        ", "tf", "=", "self", ".", "create_factory", "(", "param", ",", "max_rank", ",", "init_seed", "=", "seed", ",", "init_mode", "=", "'qr_randn'", ")", "\n", "tf", ".", "add_tensor", "(", "'weight'", ",", "shape", ")", "\n", "tf", ".", "instantiate", "(", ")", "\n", "m", "=", "tf", "(", ")", "[", "0", "]", "\n", "m", "=", "m", ".", "reshape", "(", "m", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "sigma", "=", "m", ".", "svd", "(", ")", "[", "1", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "self", ".", "assertAlmostEqual", "(", "sigma", ",", "1.0", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_one": [[30, 39], ["test_tt_modules.TestTTModules._add_one", "test_tt_modules.TestTTModules._add_one", "test_tt_modules.TestTTModules._add_one", "test_tt_modules.TestTTModules._add_one", "test_tt_modules.TestTTModules._add_one", "test_tt_modules.TestTTModules._add_one", "test_tt_modules.TestTTModules._add_one", "test_tt_modules.TestTTModules._add_one"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._add_one", "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._add_one", "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._add_one", "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._add_one", "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._add_one", "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._add_one", "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._add_one", "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._add_one"], ["", "def", "_test_one", "(", "self", ",", "param", ")", ":", "\n", "        ", "self", ".", "_add_one", "(", "param", ",", "8", ",", "(", "64", ",", "128", ",", "3", ",", "3", ")", ")", "\n", "self", ".", "_add_one", "(", "param", ",", "128", ",", "(", "64", ",", "128", ",", "3", ",", "3", ")", ")", "\n", "self", ".", "_add_one", "(", "param", ",", "8", ",", "(", "64", ",", "128", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "_add_one", "(", "param", ",", "128", ",", "(", "64", ",", "128", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "_add_one", "(", "param", ",", "8", ",", "(", "3", ",", "64", ",", "3", ",", "3", ")", ")", "\n", "self", ".", "_add_one", "(", "param", ",", "128", ",", "(", "3", ",", "64", ",", "3", ",", "3", ")", ")", "\n", "self", ".", "_add_one", "(", "param", ",", "8", ",", "(", "3", ",", "64", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "_add_one", "(", "param", ",", "128", ",", "(", "3", ",", "64", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.test_one_tt": [[40, 42], ["test_tt_modules.TestTTModules._test_one"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_one"], ["", "def", "test_one_tt", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_one", "(", "'sttp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.test_one_svd": [[43, 45], ["test_tt_modules.TestTTModules._test_one"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_one"], ["", "def", "test_one_svd", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_one", "(", "'svdp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_many": [[46, 62], ["test_tt_modules.TestTTModules.create_factory", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.instantiate", "test_tt_modules.TestTTModules.", "enumerate", "w.reshape.reshape.reshape", "[].item", "test_tt_modules.TestTTModules.assertAlmostEqual", "w.reshape.reshape.svd"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.create_factory", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.instantiate"], ["", "def", "_test_many", "(", "self", ",", "param", ")", ":", "\n", "        ", "tf", "=", "self", ".", "create_factory", "(", "param", ",", "32", ",", "init_seed", "=", "2020", ",", "init_mode", "=", "'qr_randn'", ")", "\n", "tf", ".", "add_tensor", "(", "'weight_1'", ",", "(", "64", ",", "128", ",", "3", ",", "3", ")", ")", "\n", "tf", ".", "add_tensor", "(", "'weight_2'", ",", "(", "64", ",", "128", ",", "1", ",", "1", ")", ")", "\n", "tf", ".", "add_tensor", "(", "'weight_3'", ",", "(", "64", ",", "64", ",", "3", ",", "3", ")", ")", "\n", "tf", ".", "add_tensor", "(", "'weight_4'", ",", "(", "64", ",", "64", ",", "1", ",", "1", ")", ")", "\n", "tf", ".", "add_tensor", "(", "'weight_5'", ",", "(", "3", ",", "64", ",", "3", ",", "3", ")", ")", "\n", "tf", ".", "add_tensor", "(", "'weight_6'", ",", "(", "3", ",", "64", ",", "1", ",", "1", ")", ")", "\n", "tf", ".", "add_tensor", "(", "'weight_7'", ",", "(", "3", ",", "64", ",", "7", ",", "7", ")", ")", "\n", "tf", ".", "add_tensor", "(", "'weight_8'", ",", "(", "3", ",", "64", ",", "8", ",", "8", ")", ")", "\n", "tf", ".", "instantiate", "(", ")", "\n", "weights", "=", "tf", "(", ")", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "weights", ")", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "w", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "sigma", "=", "w", ".", "svd", "(", ")", "[", "1", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "self", ".", "assertAlmostEqual", "(", "sigma", ",", "1.0", ",", "4", ",", "msg", "=", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.test_many_tt": [[63, 65], ["test_tt_modules.TestTTModules._test_many"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_many"], ["", "", "def", "test_many_tt", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_many", "(", "'sttp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.test_many_svd": [[66, 68], ["test_tt_modules.TestTTModules._test_many"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_many"], ["", "def", "test_many_svd", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_many", "(", "'svdp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.test_unidim": [[69, 85], ["test_tt_modules.TestTTModules.create_factory", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.add_tensor", "test_tt_modules.TestTTModules.assertEqual", "test_tt_modules.TestTTModules.assertEqual", "test_tt_modules.TestTTModules.assertEqual", "test_tt_modules.TestTTModules.instantiate", "test_tt_modules.TestTTModules.forward_2", "test_tt_modules.TestTTModules.get_tensor_by_name", "test_tt_modules.TestTTModules.get_tensor_by_name", "test_tt_modules.TestTTModules.get_tensor_by_name", "test_tt_modules.TestTTModules.assertAlmostEqual", "test_tt_modules.TestTTModules.assertAlmostEqual", "test_tt_modules.TestTTModules.assertAlmostEqual", "test_tt_modules.TestTTModules.get_tensor_by_name.mm().item", "test_tt_modules.TestTTModules.get_tensor_by_name.T.mm().item", "test_tt_modules.TestTTModules.get_tensor_by_name.item", "test_tt_modules.TestTTModules.get_tensor_by_name.mm", "test_tt_modules.TestTTModules.get_tensor_by_name.T.mm"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.create_factory", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.add_tensor", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.instantiate", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.forward_2", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.get_tensor_by_name", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.get_tensor_by_name", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.get_tensor_by_name"], ["", "def", "test_unidim", "(", "self", ")", ":", "\n", "        ", "tf", "=", "self", ".", "create_factory", "(", "'svdp'", ",", "32", ",", "init_seed", "=", "2020", ",", "init_mode", "=", "'qr_randn'", ")", "\n", "n_param_1_32", "=", "tf", ".", "add_tensor", "(", "'unidim_1_32'", ",", "(", "1", ",", "32", ")", ")", "\n", "n_param_32_1", "=", "tf", ".", "add_tensor", "(", "'unidim_32_1'", ",", "(", "32", ",", "1", ")", ")", "\n", "n_param_1_1", "=", "tf", ".", "add_tensor", "(", "'unidim_1_1'", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "n_param_1_32", ",", "32", ")", "\n", "self", ".", "assertEqual", "(", "n_param_32_1", ",", "32", ")", "\n", "self", ".", "assertEqual", "(", "n_param_1_1", ",", "1", ")", "\n", "tf", ".", "instantiate", "(", ")", "\n", "tf", ".", "forward_2", "(", ")", "\n", "w_1_32", "=", "tf", ".", "get_tensor_by_name", "(", "'unidim_1_32'", ")", "\n", "w_32_1", "=", "tf", ".", "get_tensor_by_name", "(", "'unidim_32_1'", ")", "\n", "w_1_1", "=", "tf", ".", "get_tensor_by_name", "(", "'unidim_1_1'", ")", "\n", "self", ".", "assertAlmostEqual", "(", "w_1_32", ".", "mm", "(", "w_1_32", ".", "T", ")", ".", "item", "(", ")", ",", "1.0", ",", "4", ")", "\n", "self", ".", "assertAlmostEqual", "(", "w_32_1", ".", "T", ".", "mm", "(", "w_32_1", ")", ".", "item", "(", ")", ",", "1.0", ",", "4", ")", "\n", "self", ".", "assertAlmostEqual", "(", "w_1_1", ".", "item", "(", ")", ",", "1.0", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_conv2d": [[86, 103], ["torch.nn.Conv2d", "test_tt_modules.TestTTModules.create_factory", "src.utils.spectral_tensors_factory.SpectralConvNd", "test_tt_modules.TestTTModules.instantiate", "test_tt_modules.TestTTModules.", "test_tt_modules.TestTTModules.set_tensors", "torch.randn", "torch.nn.Conv2d.", "src.utils.spectral_tensors_factory.SpectralConvNd.", "test_tt_modules.TestTTModules.assertEqual", "test_tt_modules.TestTTModules.assertAlmostEqual", "torch.no_grad", "torch.nn.Conv2d.weight.copy_", "test_tt_modules.TestTTModules.get_tensor_by_name"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.create_factory", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.instantiate", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.set_tensors", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.get_tensor_by_name"], ["", "def", "_test_conv2d", "(", "self", ",", "param", ")", ":", "\n", "        ", "c_orig", "=", "torch", ".", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "3", ")", "\n", "tf", "=", "self", ".", "create_factory", "(", "param", ",", "32", ",", "init_seed", "=", "2020", ",", "init_mode", "=", "'qr_randn'", ")", "\n", "c_tf", "=", "SpectralConvNd", "(", "c_orig", ",", "\"c_orig\"", ",", "tf", ")", "\n", "tf", ".", "instantiate", "(", ")", "\n", "\n", "tensors", "=", "tf", "(", ")", "\n", "tf", ".", "set_tensors", "(", "tensors", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "c_orig", ".", "weight", ".", "copy_", "(", "tf", ".", "get_tensor_by_name", "(", "\"c_orig\"", ")", ")", "\n", "\n", "", "dummy", "=", "torch", ".", "randn", "(", "2", ",", "16", ",", "24", ",", "32", ")", "\n", "out_orig", "=", "c_orig", "(", "dummy", ")", "\n", "out_tf", "=", "c_tf", "(", "dummy", ")", "\n", "\n", "self", ".", "assertEqual", "(", "out_orig", ".", "shape", ",", "out_tf", ".", "shape", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "out_orig", "-", "out_tf", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ".", "item", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.test_conv2d_tt": [[104, 106], ["test_tt_modules.TestTTModules._test_conv2d"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_conv2d"], ["", "def", "test_conv2d_tt", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_conv2d", "(", "'sttp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.test_conv2d_svd": [[107, 109], ["test_tt_modules.TestTTModules._test_conv2d"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_conv2d"], ["", "def", "test_conv2d_svd", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_conv2d", "(", "'svdp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_transposed_conv2d": [[110, 127], ["torch.nn.ConvTranspose2d", "test_tt_modules.TestTTModules.create_factory", "src.utils.spectral_tensors_factory.SpectralConvNd", "test_tt_modules.TestTTModules.instantiate", "test_tt_modules.TestTTModules.", "test_tt_modules.TestTTModules.set_tensors", "torch.randn", "torch.nn.ConvTranspose2d.", "src.utils.spectral_tensors_factory.SpectralConvNd.", "test_tt_modules.TestTTModules.assertEqual", "test_tt_modules.TestTTModules.assertAlmostEqual", "torch.no_grad", "torch.nn.ConvTranspose2d.weight.copy_", "test_tt_modules.TestTTModules.get_tensor_by_name"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.create_factory", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.instantiate", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.set_tensors", "home.repos.pwc.inspect_result.toshas_sttp.utils.spectral_tensors_factory.SpectralTensorsFactoryBase.get_tensor_by_name"], ["", "def", "_test_transposed_conv2d", "(", "self", ",", "param", ")", ":", "\n", "        ", "c_orig", "=", "torch", ".", "nn", ".", "ConvTranspose2d", "(", "16", ",", "32", ",", "3", ")", "\n", "tf", "=", "self", ".", "create_factory", "(", "param", ",", "32", ",", "init_seed", "=", "2020", ",", "init_mode", "=", "'qr_randn'", ")", "\n", "c_tf", "=", "SpectralConvNd", "(", "c_orig", ",", "\"c_orig\"", ",", "tf", ")", "\n", "tf", ".", "instantiate", "(", ")", "\n", "\n", "tensors", "=", "tf", "(", ")", "\n", "tf", ".", "set_tensors", "(", "tensors", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "c_orig", ".", "weight", ".", "copy_", "(", "tf", ".", "get_tensor_by_name", "(", "\"c_orig\"", ")", ")", "\n", "\n", "", "dummy", "=", "torch", ".", "randn", "(", "2", ",", "16", ",", "24", ",", "32", ")", "\n", "out_orig", "=", "c_orig", "(", "dummy", ")", "\n", "out_tf", "=", "c_tf", "(", "dummy", ")", "\n", "\n", "self", ".", "assertEqual", "(", "out_orig", ".", "shape", ",", "out_tf", ".", "shape", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "out_orig", "-", "out_tf", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ".", "item", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.test_transposed_conv2d_tt": [[128, 130], ["test_tt_modules.TestTTModules._test_transposed_conv2d"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_transposed_conv2d"], ["", "def", "test_transposed_conv2d_tt", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_transposed_conv2d", "(", "'sttp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.test_transposed_conv2d_svd": [[131, 133], ["test_tt_modules.TestTTModules._test_transposed_conv2d"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_transposed_conv2d"], ["", "def", "test_transposed_conv2d_svd", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_transposed_conv2d", "(", "'svdp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_ttconv": [[134, 171], ["np.random.RandomState", "src.utils.tensor_contraction.get_spectral_tt_operator_shapes", "src.utils.tensor_contraction.get_tt_contraction_fn_and_flops", "src.utils.tensor_contraction.get_spectral_tt_operator_equation", "src.utils.tensor_contraction.compute_contraction_fn", "torch.from_numpy", "A_tt_contraction_fn().reshape", "torch.from_numpy.reshape", "A_tt_contraction_fn().reshape.mm", "src.utils.tensor_contraction.compute_contraction_fn.reshape", "residual.max().item", "test_tt_modules.TestTTModules.assertLess", "test_tt_modules.TestTTModules.assertLess", "torch.from_numpy", "np.random.RandomState.randn", "type", "type", "type", "type", "type", "type", "np.random.RandomState.randn", "A_tt_contraction_fn", "src.utils.tensor_contraction.compute_contraction_fn.", "residual.max"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.get_spectral_tt_operator_shapes", "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.get_tt_contraction_fn_and_flops", "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.get_spectral_tt_operator_equation", "home.repos.pwc.inspect_result.toshas_sttp.utils.tensor_contraction.compute_contraction_fn"], ["", "def", "_test_ttconv", "(", "self", ",", "batch_size", ",", "c_in", ",", "c_out", ",", "kernel_size", ",", "rank", ",", "in_h", ",", "in_w", ")", ":", "\n", "        ", "assert", "kernel_size", "in", "(", "1", ",", "3", ")", "\n", "assert", "type", "(", "rank", ")", "is", "int", "and", "128", ">", "rank", ">", "0", "\n", "assert", "type", "(", "batch_size", ")", "is", "int", "and", "batch_size", ">", "0", "\n", "assert", "type", "(", "c_in", ")", "is", "int", "and", "type", "(", "c_out", ")", "is", "int", "and", "c_in", ">", "0", "and", "c_out", ">", "0", "\n", "assert", "type", "(", "in_h", ")", "is", "int", "and", "type", "(", "in_w", ")", "is", "int", "and", "in_h", ">", "0", "and", "in_w", ">", "0", "\n", "\n", "import", "numpy", "as", "np", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "2020", ")", "\n", "\n", "A_shape", "=", "(", "c_out", ",", "c_in", "*", "kernel_size", "*", "kernel_size", ")", "\n", "x_shape", "=", "(", "c_in", "*", "kernel_size", "*", "kernel_size", ",", "in_h", "*", "in_w", "*", "batch_size", ")", "\n", "\n", "A_tt_shapes", ",", "x_tt_shape", "=", "get_spectral_tt_operator_shapes", "(", "A_shape", ",", "x_shape", ",", "rank", ")", "\n", "\n", "A_tt_contraction_fn", ",", "A_tt_contraction_flops", "=", "get_tt_contraction_fn_and_flops", "(", "A_tt_shapes", ")", "\n", "\n", "A_tt_x_tt_equation", "=", "get_spectral_tt_operator_equation", "(", "A_tt_shapes", ",", "x_tt_shape", ")", "\n", "A_tt_x_tt_fn", "=", "compute_contraction_fn", "(", "A_tt_x_tt_equation", ",", "A_tt_shapes", "+", "[", "x_tt_shape", "]", ")", "\n", "\n", "A_tt", "=", "[", "torch", ".", "from_numpy", "(", "rng", ".", "randn", "(", "*", "a", ")", ")", "for", "a", "in", "A_tt_shapes", "]", "\n", "x_tt", "=", "torch", ".", "from_numpy", "(", "rng", ".", "randn", "(", "*", "x_tt_shape", ")", ")", "\n", "\n", "A", "=", "A_tt_contraction_fn", "(", "*", "A_tt", ")", ".", "reshape", "(", "A_shape", ")", "\n", "x", "=", "x_tt", ".", "reshape", "(", "x_shape", ")", "\n", "\n", "Ax", "=", "A", ".", "mm", "(", "x", ")", "\n", "\n", "A_tt_x_tt", "=", "A_tt_x_tt_fn", "(", "*", "A_tt", ",", "x_tt", ")", ".", "reshape", "(", "A_shape", "[", "0", "]", ",", "x_shape", "[", "1", "]", ")", "\n", "\n", "residual", "=", "(", "Ax", "-", "A_tt_x_tt", ")", ".", "abs", "(", ")", "\n", "L_inf", "=", "residual", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "RMSE", "=", "(", "residual", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "\n", "self", ".", "assertLess", "(", "L_inf", ",", "0.1", ")", "\n", "self", ".", "assertLess", "(", "RMSE", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules.test_ttconv": [[172, 175], ["test_tt_modules.TestTTModules._test_ttconv", "test_tt_modules.TestTTModules._test_ttconv"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_ttconv", "home.repos.pwc.inspect_result.toshas_sttp.test.test_tt_modules.TestTTModules._test_ttconv"], ["", "def", "test_ttconv", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_ttconv", "(", "batch_size", "=", "8", ",", "c_in", "=", "256", ",", "c_out", "=", "512", ",", "kernel_size", "=", "3", ",", "rank", "=", "32", ",", "in_h", "=", "28", ",", "in_w", "=", "28", ")", "\n", "self", ".", "_test_ttconv", "(", "batch_size", "=", "8", ",", "c_in", "=", "128", ",", "c_out", "=", "256", ",", "kernel_size", "=", "1", ",", "rank", "=", "32", ",", "in_h", "=", "56", ",", "in_w", "=", "56", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.datasets.torchvision.AddUniformNoise.__init__": [[10, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "uniform_low", "=", "-", "1", "/", "255.", ",", "uniform_high", "=", "1", "/", "255.", ",", "clamp_low", "=", "-", "1.0", ",", "clamp_high", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "uniform_low", "=", "uniform_low", "\n", "self", ".", "uniform_high", "=", "uniform_high", "\n", "self", ".", "clamp_low", "=", "clamp_low", "\n", "self", ".", "clamp_high", "=", "clamp_high", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.datasets.torchvision.AddUniformNoise.__call__": [[16, 24], ["pic.clamp_", "torch.is_tensor", "TypeError", "TypeError", "torch.rand_like", "type"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "if", "not", "torch", ".", "is_tensor", "(", "pic", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'argument should be a torch tensor. Got {}.'", ".", "format", "(", "type", "(", "pic", ")", ")", ")", "\n", "", "if", "pic", ".", "dtype", "not", "in", "(", "torch", ".", "float32", ",", "torch", ".", "float64", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'argument should be a floating point tensor. Got {}.'", ".", "format", "(", "pic", ".", "dtype", ")", ")", "\n", "", "pic", "+=", "self", ".", "uniform_low", "+", "torch", ".", "rand_like", "(", "pic", ")", "*", "(", "self", ".", "uniform_high", "-", "self", ".", "uniform_low", ")", "\n", "pic", ".", "clamp_", "(", "self", ".", "clamp_low", ",", "self", ".", "clamp_high", ")", "\n", "return", "pic", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.datasets.torchvision.AddUniformNoise.__repr__": [[25, 27], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(uniform: [{self.uniform_low}, {self.uniform_high}], '", "f'clamp: [{self.clamp_low}, {self.clamp_high}])'", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.datasets.torchvision.DropLabelsDataset.__init__": [[39, 41], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ds", ")", ":", "\n", "        ", "self", ".", "ds", "=", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.datasets.torchvision.DropLabelsDataset.__getitem__": [[42, 46], ["type"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "ds", "[", "index", "]", "\n", "assert", "type", "(", "item", ")", "in", "(", "tuple", ",", "list", ")", "\n", "return", "item", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.datasets.torchvision.DropLabelsDataset.__len__": [[47, 49], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.datasets.torchvision.get_transforms_pil_to_tensor_gan_fmt": [[30, 35], ["torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.AddUniformNoise"], "function", ["None"], ["", "", "def", "get_transforms_pil_to_tensor_gan_fmt", "(", ")", ":", "\n", "    ", "return", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "0.5", ",", ")", ")", ",", "\n", "AddUniformNoise", "(", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.datasets.torchvision.load_cifar10_dataset": [[51, 60], ["torchvision.datasets.CIFAR10", "torch_fidelity.datasets.TransformPILtoRGBTensor", "torchvision.transforms.Compose", "torchvision.DropLabelsDataset", "torchvision.get_transforms_pil_to_tensor_gan_fmt"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.datasets.torchvision.get_transforms_pil_to_tensor_gan_fmt"], ["", "", "def", "load_cifar10_dataset", "(", "root", ",", "download", ",", "with_labels", ",", "evaluation_transforms", ")", ":", "\n", "    ", "if", "evaluation_transforms", ":", "\n", "        ", "transform", "=", "TransformPILtoRGBTensor", "(", ")", "\n", "", "else", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "get_transforms_pil_to_tensor_gan_fmt", "(", ")", ")", "\n", "", "dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", ",", "train", "=", "True", ",", "transform", "=", "transform", ",", "download", "=", "download", ")", "\n", "if", "not", "with_labels", ":", "\n", "        ", "dataset", "=", "DropLabelsDataset", "(", "dataset", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.datasets.torchvision.load_stl10_dataset": [[62, 72], ["torchvision.datasets.STL10", "torch_fidelity.datasets.TransformPILtoRGBTensor", "torchvision.transforms.Compose", "torchvision.DropLabelsDataset", "torchvision.transforms.Resize", "torchvision.get_transforms_pil_to_tensor_gan_fmt"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.datasets.torchvision.get_transforms_pil_to_tensor_gan_fmt"], ["", "def", "load_stl10_dataset", "(", "root", ",", "download", ",", "with_labels", ",", "evaluation_transforms", ",", "size", "=", "48", ")", ":", "\n", "    ", "split", "=", "'train'", "if", "with_labels", "else", "'unlabeled'", "\n", "if", "evaluation_transforms", ":", "\n", "        ", "transform", "=", "TransformPILtoRGBTensor", "(", ")", "\n", "", "else", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "size", ")", ",", "*", "get_transforms_pil_to_tensor_gan_fmt", "(", ")", "]", ")", "\n", "", "dataset", "=", "torchvision", ".", "datasets", ".", "STL10", "(", "root", ",", "split", "=", "split", ",", "transform", "=", "transform", ",", "download", "=", "download", ")", "\n", "if", "not", "with_labels", ":", "\n", "        ", "dataset", "=", "DropLabelsDataset", "(", "dataset", ")", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.modules.ops_spectral_norm_pytorch.SNConv2d": [[9, 11], ["torch.utils.spectral_norm", "torch.Conv2d"], "function", ["None"], ["def", "SNConv2d", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.ops_spectral_norm_pytorch.SNLinear": [[13, 15], ["torch.utils.spectral_norm", "torch.Linear"], "function", ["None"], ["", "def", "SNLinear", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Linear", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.ops_spectral_norm_pytorch.SNEmbedding": [[17, 19], ["torch.utils.spectral_norm", "torch.Embedding"], "function", ["None"], ["", "def", "SNEmbedding", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Embedding", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.ops_spectral_norm_pytorch.net_reparameterize_ops_spectral_norm_pytorch_to_standard": [[21, 38], ["src.utils.helpers.deep_transform", "copy.deepcopy", "isinstance", "isinstance", "isinstance", "torch.utils.remove_spectral_norm", "str"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.helpers.deep_transform"], ["", "def", "net_reparameterize_ops_spectral_norm_pytorch_to_standard", "(", "net", ",", "inplace", "=", "False", ",", "net_prefix", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "not", "inplace", ":", "\n", "        ", "net", "=", "copy", ".", "deepcopy", "(", "net", ")", "\n", "\n", "", "def", "cb_convert", "(", "op", ",", "prefix", ",", "opaque", ")", ":", "\n", "        ", "if", "isinstance", "(", "op", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "op", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "op", ",", "torch", ".", "nn", ".", "Embedding", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "nn", ".", "utils", ".", "remove_spectral_norm", "(", "op", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "                ", "if", "'spectral_norm of \\'weight\\' not found in'", "in", "str", "(", "e", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "e", "\n", "", "", "", "return", "op", "\n", "\n", "", "deep_transform", "(", "net", ",", "cb_convert", ",", "prefix", "=", "net_prefix", ")", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.ConditionalBatchNorm2d.__init__": [[88, 96], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_features", ",", "affine", "=", "False", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "num_features", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "num_features", ")", "\n", "torch", ".", "nn", ".", "init", ".", "ones_", "(", "self", ".", "gamma", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "beta", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.ConditionalBatchNorm2d.forward": [[97, 103], ["sngan.ConditionalBatchNorm2d.bn", "sngan.ConditionalBatchNorm2d.gamma", "sngan.ConditionalBatchNorm2d.beta", "sngan.ConditionalBatchNorm2d.view", "sngan.ConditionalBatchNorm2d.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "out", "=", "self", ".", "bn", "(", "x", ")", "\n", "gamma", "=", "self", ".", "gamma", "(", "y", ")", "\n", "beta", "=", "self", ".", "beta", "(", "y", ")", "\n", "out", "=", "gamma", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "*", "out", "+", "beta", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.GBlock.__init__": [[106, 143], ["torch.Module.__init__", "cls_conv2d", "cls_conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "sngan.xavier_init_uniform_if_amenable", "sngan.xavier_init_uniform_if_amenable", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "sngan.ConditionalBatchNorm2d", "sngan.ConditionalBatchNorm2d", "math.sqrt", "math.sqrt", "cls_conv2d", "sngan.xavier_init_uniform_if_amenable"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "hidden_channels", "=", "None", ",", "\n", "upsample", "=", "False", ",", "\n", "num_classes", "=", "0", ",", "\n", "cls_conv2d", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "cls_conv2d", "is", "not", "None", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "if", "hidden_channels", "is", "not", "None", "else", "out_channels", "\n", "self", ".", "learnable_shortcut", "=", "in_channels", "!=", "out_channels", "or", "upsample", "\n", "self", ".", "upsample", "=", "upsample", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "c1", "=", "cls_conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "c2", "=", "cls_conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "num_classes", "==", "0", ":", "\n", "            ", "self", ".", "b1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_channels", ")", "\n", "self", ".", "b2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "hidden_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "b1", "=", "ConditionalBatchNorm2d", "(", "self", ".", "in_channels", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "b2", "=", "ConditionalBatchNorm2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "num_classes", ")", "\n", "\n", "", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "c1", ",", "math", ".", "sqrt", "(", "2.0", ")", ")", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "c2", ",", "math", ".", "sqrt", "(", "2.0", ")", ")", "\n", "\n", "if", "self", ".", "learnable_shortcut", ":", "\n", "            ", "self", ".", "c_shortcut", "=", "cls_conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "c_shortcut", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.GBlock._upsample_conv": [[144, 146], ["conv", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "", "def", "_upsample_conv", "(", "self", ",", "x", ",", "conv", ")", ":", "\n", "        ", "return", "conv", "(", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.GBlock._residual": [[147, 156], ["sngan.GBlock.b1", "sngan.GBlock.activation", "sngan.GBlock.b2", "sngan.GBlock.activation", "sngan.GBlock.c2", "sngan.GBlock._upsample_conv", "sngan.GBlock.c1"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.GBlock._upsample_conv"], ["", "def", "_residual", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "b1", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "self", ".", "_upsample_conv", "(", "h", ",", "self", ".", "c1", ")", "if", "self", ".", "upsample", "else", "self", ".", "c1", "(", "h", ")", "\n", "h", "=", "self", ".", "b2", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "self", ".", "c2", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.GBlock._residual_conditional": [[157, 166], ["sngan.GBlock.b1", "sngan.GBlock.activation", "sngan.GBlock.b2", "sngan.GBlock.activation", "sngan.GBlock.c2", "sngan.GBlock._upsample_conv", "sngan.GBlock.c1"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.GBlock._upsample_conv"], ["", "def", "_residual_conditional", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "b1", "(", "h", ",", "y", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "self", ".", "_upsample_conv", "(", "h", ",", "self", ".", "c1", ")", "if", "self", ".", "upsample", "else", "self", ".", "c1", "(", "h", ")", "\n", "h", "=", "self", ".", "b2", "(", "h", ",", "y", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "self", ".", "c2", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.GBlock._shortcut": [[167, 171], ["sngan.GBlock._upsample_conv", "sngan.GBlock.c_shortcut"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.GBlock._upsample_conv"], ["", "def", "_shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "learnable_shortcut", ":", "\n", "            ", "x", "=", "self", ".", "_upsample_conv", "(", "x", ",", "self", ".", "c_shortcut", ")", "if", "self", ".", "upsample", "else", "self", ".", "c_shortcut", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.GBlock.forward": [[172, 177], ["sngan.GBlock._residual", "sngan.GBlock._shortcut", "sngan.GBlock._residual_conditional", "sngan.GBlock._shortcut"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlockOptimized._residual", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlockOptimized._shortcut", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.GBlock._residual_conditional", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlockOptimized._shortcut"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "if", "y", "is", "None", ":", "\n", "            ", "return", "self", ".", "_residual", "(", "x", ")", "+", "self", ".", "_shortcut", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_residual_conditional", "(", "x", ",", "y", ")", "+", "self", ".", "_shortcut", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlock.__init__": [[180, 207], ["torch.Module.__init__", "cls_conv2d", "cls_conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "sngan.xavier_init_uniform_if_amenable", "sngan.xavier_init_uniform_if_amenable", "math.sqrt", "math.sqrt", "cls_conv2d", "sngan.xavier_init_uniform_if_amenable"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "hidden_channels", "=", "None", ",", "\n", "downsample", "=", "False", ",", "\n", "cls_conv2d", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "cls_conv2d", "is", "not", "None", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "if", "hidden_channels", "is", "not", "None", "else", "in_channels", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "learnable_shortcut", "=", "(", "in_channels", "!=", "out_channels", ")", "or", "downsample", "\n", "\n", "self", ".", "c1", "=", "cls_conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "c2", "=", "cls_conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "c1", ",", "math", ".", "sqrt", "(", "2.0", ")", ")", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "c2", ",", "math", ".", "sqrt", "(", "2.0", ")", ")", "\n", "\n", "if", "self", ".", "learnable_shortcut", ":", "\n", "            ", "self", ".", "c_shortcut", "=", "cls_conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "c_shortcut", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlock._residual": [[208, 217], ["sngan.DBlock.activation", "sngan.DBlock.c1", "sngan.DBlock.activation", "sngan.DBlock.c2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "", "def", "_residual", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "self", ".", "c1", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "self", ".", "c2", "(", "h", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "h", "=", "F", ".", "avg_pool2d", "(", "h", ",", "2", ")", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlock._shortcut": [[218, 223], ["sngan.DBlock.c_shortcut", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "_shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "learnable_shortcut", ":", "\n", "            ", "x", "=", "self", ".", "c_shortcut", "(", "x", ")", "\n", "return", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "if", "self", ".", "downsample", "else", "x", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlock.forward": [[224, 226], ["sngan.DBlock._residual", "sngan.DBlock._shortcut"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlockOptimized._residual", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlockOptimized._shortcut"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_residual", "(", "x", ")", "+", "self", ".", "_shortcut", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlockOptimized.__init__": [[229, 244], ["torch.Module.__init__", "cls_conv2d", "cls_conv2d", "cls_conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "sngan.xavier_init_uniform_if_amenable", "sngan.xavier_init_uniform_if_amenable", "sngan.xavier_init_uniform_if_amenable", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "cls_conv2d", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "cls_conv2d", "is", "not", "None", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "\n", "self", ".", "c1", "=", "cls_conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "c2", "=", "cls_conv2d", "(", "self", ".", "out_channels", ",", "self", ".", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "c_shortcut", "=", "cls_conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "c1", ",", "math", ".", "sqrt", "(", "2.0", ")", ")", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "c2", ",", "math", ".", "sqrt", "(", "2.0", ")", ")", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "c_shortcut", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlockOptimized._residual": [[245, 252], ["sngan.DBlockOptimized.c1", "sngan.DBlockOptimized.activation", "sngan.DBlockOptimized.c2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "_residual", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "c1", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "self", ".", "c2", "(", "h", ")", "\n", "h", "=", "F", ".", "avg_pool2d", "(", "h", ",", "2", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlockOptimized._shortcut": [[253, 255], ["sngan.DBlockOptimized.c_shortcut", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "_shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "c_shortcut", "(", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlockOptimized.forward": [[256, 258], ["sngan.DBlockOptimized._residual", "sngan.DBlockOptimized._shortcut"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlockOptimized._residual", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.DBlockOptimized._shortcut"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_residual", "(", "x", ")", "+", "self", ".", "_shortcut", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.SNGANGenerator.__init__": [[261, 290], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "sngan.xavier_init_uniform_if_amenable", "sngan.xavier_init_uniform_if_amenable", "sngan.GBlock"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable"], ["    ", "def", "__init__", "(", "self", ",", "preset_name", ",", "special_ops", ",", "num_classes", "=", "0", ",", "override_ngf", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "preset", "=", "PRESETS", "[", "preset_name", "]", "\n", "self", ".", "nz", "=", "preset", "[", "'nz'", "]", "\n", "ngf", "=", "preset", "[", "'ngf'", "]", "if", "override_ngf", "is", "None", "else", "override_ngf", "\n", "bottom_width", "=", "preset", "[", "'bottom_width'", "]", "\n", "self", ".", "bottom_width", "=", "bottom_width", "\n", "\n", "self", ".", "noise_to_conv", "=", "nn", ".", "Linear", "(", "self", ".", "nz", ",", "(", "bottom_width", "**", "2", ")", "*", "ngf", ")", "\n", "self", ".", "blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "\n", "GBlock", "(", "\n", "in_channels", "=", "ngf", "//", "b", "[", "'in_factor'", "]", ",", "\n", "out_channels", "=", "ngf", "//", "b", "[", "'out_factor'", "]", ",", "\n", "upsample", "=", "b", "[", "'upsample'", "]", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "cls_conv2d", "=", "special_ops", "[", "'cls_conv2d'", "]", ",", "\n", ")", "for", "b", "in", "preset", "[", "'g_blocks'", "]", "\n", "]", ")", "\n", "\n", "last_num_features", "=", "ngf", "//", "preset", "[", "'g_blocks'", "]", "[", "-", "1", "]", "[", "'out_factor'", "]", "\n", "\n", "self", ".", "last_bn", "=", "nn", ".", "BatchNorm2d", "(", "last_num_features", ")", "\n", "self", ".", "last_conv", "=", "nn", ".", "Conv2d", "(", "last_num_features", ",", "3", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "noise_to_conv", ",", "1.0", ")", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "last_conv", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.SNGANGenerator.forward": [[291, 315], ["sngan.SNGANGenerator.noise_to_conv", "block.view", "sngan.SNGANGenerator.last_bn", "sngan.SNGANGenerator.activation", "sngan.SNGANGenerator.last_conv().tanh", "block", "all", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "len", "sngan.SNGANGenerator.last_conv", "len", "len", "len", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "block.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "assert", "len", "(", "args", ")", "==", "2", "and", "all", "(", "torch", ".", "is_tensor", "(", "a", ")", "for", "a", "in", "args", ")", "\n", "x", ",", "y", "=", "args", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "args", ")", "in", "(", "1", ",", "2", ")", "and", "torch", ".", "is_tensor", "(", "args", "[", "0", "]", ")", "\n", "assert", "len", "(", "args", ")", "==", "1", "or", "(", "torch", ".", "is_tensor", "(", "args", "[", "1", "]", ")", "or", "args", "[", "1", "]", "is", "None", ")", "\n", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "                ", "x", ",", "y", "=", "args", "[", "0", "]", ",", "None", "\n", "", "else", ":", "\n", "                ", "x", ",", "y", "=", "args", "\n", "\n", "", "", "h", "=", "self", ".", "noise_to_conv", "(", "x", ")", "\n", "h", "=", "h", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "h", "=", "block", "(", "h", ",", "y", ")", "\n", "", "h", "=", "self", ".", "last_bn", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "self", ".", "last_conv", "(", "h", ")", ".", "tanh", "(", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "h", "=", "(", "255", "*", "(", "h", ".", "clamp", "(", "-", "1", ",", "1", ")", "*", "0.5", "+", "0.5", ")", ")", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.SNGANGenerator.z_sz": [[316, 319], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "z_sz", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nz", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.SNGANDiscriminator.__init__": [[322, 351], ["super().__init__", "sngan.DBlockOptimized", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.ReLU", "torch.ReLU", "torch.ReLU", "cls_linear", "sngan.xavier_init_uniform_if_amenable", "cls_embedding", "sngan.xavier_init_uniform_if_amenable", "sngan.DBlock"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable", "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable"], ["    ", "def", "__init__", "(", "self", ",", "preset_name", ",", "special_ops", ",", "num_classes", "=", "0", ",", "override_ndf", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "preset", "=", "PRESETS", "[", "preset_name", "]", "\n", "ndf", "=", "preset", "[", "'ndf'", "]", "if", "override_ndf", "is", "None", "else", "override_ndf", "\n", "cls_conv2d", "=", "special_ops", "[", "'cls_conv2d'", "]", "\n", "cls_linear", "=", "special_ops", "[", "'cls_linear'", "]", "\n", "cls_embedding", "=", "special_ops", "[", "'cls_embedding'", "]", "\n", "\n", "self", ".", "block1", "=", "DBlockOptimized", "(", "3", ",", "ndf", "//", "preset", "[", "'d_blocks'", "]", "[", "0", "]", "[", "'in_factor'", "]", ",", "cls_conv2d", "=", "cls_conv2d", ")", "\n", "self", ".", "blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "\n", "DBlock", "(", "\n", "in_channels", "=", "ndf", "//", "b", "[", "'in_factor'", "]", ",", "\n", "out_channels", "=", "ndf", "//", "b", "[", "'out_factor'", "]", ",", "\n", "downsample", "=", "b", "[", "'downsample'", "]", ",", "\n", "cls_conv2d", "=", "cls_conv2d", ",", "\n", ")", "\n", "for", "b", "in", "preset", "[", "'d_blocks'", "]", "\n", "]", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "self", ".", "last_linear", "=", "cls_linear", "(", "ndf", ",", "1", ",", "bias", "=", "False", ")", "\n", "if", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "cond_projection", "=", "cls_embedding", "(", "num_classes", ",", "ndf", ")", "\n", "xavier_init_uniform_if_amenable", "(", "self", ".", "cond_projection", ",", "1.0", ")", "\n", "\n", "", "xavier_init_uniform_if_amenable", "(", "self", ".", "last_linear", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.SNGANDiscriminator.forward": [[352, 378], ["sngan.SNGANDiscriminator.block1", "sngan.SNGANDiscriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "sngan.SNGANDiscriminator.last_linear", "block", "sngan.SNGANDiscriminator.cond_projection", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "all", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "len", "len", "len", "len", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "assert", "len", "(", "args", ")", "==", "2", "and", "all", "(", "torch", ".", "is_tensor", "(", "a", ")", "for", "a", "in", "args", ")", "\n", "x", ",", "y", "=", "args", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "args", ")", "in", "(", "1", ",", "2", ")", "and", "torch", ".", "is_tensor", "(", "args", "[", "0", "]", ")", "\n", "assert", "len", "(", "args", ")", "==", "1", "or", "(", "torch", ".", "is_tensor", "(", "args", "[", "1", "]", ")", "or", "args", "[", "1", "]", "is", "None", ")", "\n", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "                ", "x", ",", "y", "=", "args", "[", "0", "]", ",", "None", "\n", "", "else", ":", "\n", "                ", "x", ",", "y", "=", "args", "\n", "\n", "", "", "h", "=", "x", "\n", "h", "=", "self", ".", "block1", "(", "h", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "h", "=", "block", "(", "h", ")", "\n", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "output", "=", "self", ".", "last_linear", "(", "h", ")", "\n", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "w_y", "=", "self", ".", "cond_projection", "(", "y", ")", "\n", "output", "+=", "torch", ".", "sum", "(", "(", "w_y", "*", "h", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.modules.sngan.xavier_init_uniform_if_amenable": [[82, 85], ["hasattr", "torch.init.xavier_uniform_", "type"], "function", ["None"], ["def", "xavier_init_uniform_if_amenable", "(", "op", ",", "value", ")", ":", "\n", "    ", "if", "hasattr", "(", "op", ",", "'weight'", ")", "and", "type", "(", "op", ".", "weight", ")", "is", "torch", ".", "nn", ".", "parameter", ".", "Parameter", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "op", ".", "weight", ".", "data", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.WideBasic.__init__": [[28, 40], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "WideBasic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.WideBasic.forward": [[42, 48], ["model_wideresnet_cifar.WideBasic.dropout", "model_wideresnet_cifar.WideBasic.conv2", "model_wideresnet_cifar.WideBasic.shortcut", "model_wideresnet_cifar.WideBasic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model_wideresnet_cifar.WideBasic.bn2", "model_wideresnet_cifar.WideBasic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.WideResNet.__init__": [[51, 67], ["torch.Module.__init__", "model_wideresnet_cifar.conv3x3", "model_wideresnet_cifar.WideResNet._wide_layer", "model_wideresnet_cifar.WideResNet._wide_layer", "model_wideresnet_cifar.WideResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.conv3x3", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.WideResNet._wide_layer", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.WideResNet._wide_layer", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.WideResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "28", ",", "widen_factor", "=", "10", ",", "dropout_rate", "=", "0.0", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "nstages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nstages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "WideBasic", ",", "nstages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "WideBasic", ",", "nstages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "WideBasic", ",", "nstages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nstages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nstages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.WideResNet._wide_layer": [[68, 77], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.WideResNet.forward": [[78, 89], ["model_wideresnet_cifar.WideResNet.conv1", "model_wideresnet_cifar.WideResNet.layer1", "model_wideresnet_cifar.WideResNet.layer2", "model_wideresnet_cifar.WideResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "model_wideresnet_cifar.WideResNet.view", "model_wideresnet_cifar.WideResNet.linear", "model_wideresnet_cifar.WideResNet.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.ModelNetWresnetCifar.__init__": [[92, 96], ["super().__init__", "model_wideresnet_cifar.WideResNet"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "cfg", ".", "dataset", "in", "(", "'cifar10'", ",", ")", "\n", "self", ".", "model", "=", "WideResNet", "(", "**", "cfg", ".", "model_name_specific_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.ModelNetWresnetCifar.forward": [[97, 99], ["model_wideresnet_cifar.ModelNetWresnetCifar.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.conv3x3": [[13, 15], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_wideresnet_cifar.conv_init": [[17, 25], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "math.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.LambdaLayer.__init__": [[19, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.LambdaLayer.forward": [[23, 25], ["model_resnet_cifar10.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.BasicBlock.__init__": [[30, 50], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model_resnet_cifar10.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet neurips20 uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "\n", "lambda", "x", ":", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", "\n", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.BasicBlock.forward": [[52, 58], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "model_resnet_cifar10.BasicBlock.bn2", "model_resnet_cifar10.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model_resnet_cifar10.BasicBlock.bn1", "model_resnet_cifar10.BasicBlock.conv2", "model_resnet_cifar10.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ResNet.__init__": [[61, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model_resnet_cifar10.ResNet._make_layer", "model_resnet_cifar10.ResNet._make_layer", "model_resnet_cifar10.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model_resnet_cifar10.ResNet.apply"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ResNet._make_layer", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ResNet._make_layer", "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ResNet._make_layer": [[74, 82], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ResNet.forward": [[83, 92], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "model_resnet_cifar10.ResNet.layer1", "model_resnet_cifar10.ResNet.layer2", "model_resnet_cifar10.ResNet.layer3", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "model_resnet_cifar10.ResNet.view", "model_resnet_cifar10.ResNet.linear", "model_resnet_cifar10.ResNet.bn1", "model_resnet_cifar10.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__": [[142, 148], ["super().__init__", "fn", "globals"], "methods", ["home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "cfg", ".", "dataset", "==", "'cifar10'", "\n", "model_name", "=", "cfg", ".", "model_name_specific", "\n", "fn", "=", "globals", "(", ")", "[", "model_name", "]", "\n", "self", ".", "model", "=", "fn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.ModelNetResnetCifar10.forward": [[149, 151], ["model_resnet_cifar10.ModelNetResnetCifar10.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10._weights_init": [[13, 16], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.resnet20": [[94, 96], ["model_resnet_cifar10.ResNet"], "function", ["None"], ["", "", "def", "resnet20", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.resnet32": [[98, 100], ["model_resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "resnet32", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.resnet44": [[102, 104], ["model_resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "resnet44", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.resnet56": [[106, 108], ["model_resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "resnet56", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.resnet110": [[110, 112], ["model_resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "resnet110", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.resnet1202": [[114, 116], ["model_resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "resnet1202", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.model_resnet_cifar10.test": [[118, 126], ["filter", "print", "print", "net.parameters", "np.prod", "len", "list", "x.data.numpy", "filter", "net.parameters", "len", "p.data.size"], "function", ["home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_sttp.utils.visualizations.ImageTextRenderer.print"], ["", "def", "test", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "total_params", "=", "0", "\n", "\n", "for", "x", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "x", ".", "data", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "", "print", "(", "\"Total number of params\"", ",", "total_params", ")", "\n", "print", "(", "\"Total layers\"", ",", "len", "(", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", "and", "len", "(", "p", ".", "data", ".", "size", "(", ")", ")", ">", "1", ",", "net", ".", "parameters", "(", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.losses.hinge_loss_dis": [[4, 9], ["torch.relu().mean", "torch.relu().mean", "fake.dim", "torch.relu", "torch.relu"], "function", ["None"], ["def", "hinge_loss_dis", "(", "fake", ",", "real", ",", "lbl_real", ")", ":", "\n", "    ", "assert", "fake", ".", "dim", "(", ")", "==", "2", "and", "fake", ".", "shape", "[", "1", "]", "==", "1", "and", "real", ".", "shape", "==", "fake", ".", "shape", "\n", "loss", "=", "F", ".", "relu", "(", "1.0", "-", "real", ")", ".", "mean", "(", ")", "+", "F", ".", "relu", "(", "1.0", "+", "fake", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_sttp.modules.losses.hinge_loss_gen": [[11, 15], ["fake.mean", "fake.dim"], "function", ["None"], ["", "def", "hinge_loss_gen", "(", "fake", ",", "lbl_fake", ")", ":", "\n", "    ", "assert", "fake", ".", "dim", "(", ")", "==", "2", "and", "fake", ".", "shape", "[", "1", "]", "==", "1", "\n", "loss", "=", "-", "fake", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "", ""]]}