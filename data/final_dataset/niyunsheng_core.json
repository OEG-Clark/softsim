{"home.repos.pwc.inspect_result.niyunsheng_core.src.main.main": [[23, 144], ["os.path.join", "os.makedirs", "logging.basicConfig", "logging.getLogger", "utils.log_print", "torch.cuda.is_available", "transform.get_augs", "utils.log_print", "transform.get_augs", "utils.log_print", "utils.log_print", "utils.log_print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.Tensor", "torch.cuda.is_available", "torch.nn.CrossEntropyLoss", "utils.log_print", "trainer.Trainer", "range", "time.strftime", "xception.xception", "model.cuda.cuda", "transform.TwoTransform", "datasets.ff.FFpp", "datasets.ff.FFpp", "weight.cuda.cuda", "utils.log_print", "torch.optim.Adam", "utils.log_print", "torch.load", "model.cuda.load_state_dict", "optim.Adam.load_state_dict", "utils.log_print", "trainer.Trainer.train_epoch", "trainer.Trainer.test_epoch", "time.localtime", "datasets.celeb_df.CelebDF", "datasets.celeb_df.CelebDF", "len", "len", "consistency_loss.ConsistencyCos", "datasets.dffd.DFFD", "datasets.dffd.DFFD", "consistency_loss.ConsistencyL2", "model.cuda.parameters", "datasets.dfdcp.DFDCP", "datasets.dfdcp.DFDCP", "consistency_loss.ConsistencyL1"], "function", ["home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.transform.get_augs", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.transform.get_augs", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.xception.xception", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.trainer.Trainer.train_epoch", "home.repos.pwc.inspect_result.niyunsheng_core.src.trainer.Trainer.test_epoch"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "\"ckpt\"", ",", "args", ".", "dataset", ",", "args", ".", "exp_name", ",", "args", ".", "model_name", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "logfile", "=", "'{}/{}.log'", ".", "format", "(", "save_dir", ",", "time", ".", "strftime", "(", "\"%Y%m%d_%H%M%S\"", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "logfile", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "\n", "log_print", "(", "\"args: {}\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "# model", "\n", "if", "args", ".", "model_name", "==", "\"xception\"", ":", "\n", "        ", "model", "=", "xception", "(", "pretrained", "=", "True", ",", "num_classes", "=", "2", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# transforms", "\n", "", "train_augs", "=", "get_augs", "(", "name", "=", "args", ".", "aug_name", ",", "norm", "=", "args", ".", "norm", ",", "size", "=", "args", ".", "size", ")", "\n", "if", "args", ".", "consistency", "!=", "\"None\"", ":", "\n", "        ", "train_augs", "=", "TwoTransform", "(", "train_augs", ")", "\n", "", "log_print", "(", "\"train aug:{}\"", ".", "format", "(", "train_augs", ")", ")", "\n", "test_augs", "=", "get_augs", "(", "name", "=", "\"None\"", ",", "norm", "=", "args", ".", "norm", ",", "size", "=", "args", ".", "size", ")", "\n", "log_print", "(", "\"test aug:{}\"", ".", "format", "(", "test_augs", ")", ")", "\n", "\n", "# dataset", "\n", "if", "args", ".", "dataset", "==", "\"ff\"", ":", "\n", "        ", "train_dataset", "=", "FFpp", "(", "args", ".", "root", ",", "\"train\"", ",", "train_augs", ",", "num_classes", "=", "args", ".", "num_classes", ",", "quality", "=", "args", ".", "ff_quality", ")", "\n", "test_dataset", "=", "FFpp", "(", "args", ".", "root", ",", "\"test\"", ",", "test_augs", ",", "num_classes", "=", "args", ".", "num_classes", ",", "quality", "=", "args", ".", "ff_quality", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"celebdf\"", ":", "\n", "        ", "train_dataset", "=", "CelebDF", "(", "args", ".", "root", ",", "\"train\"", ",", "train_augs", ")", "\n", "test_dataset", "=", "CelebDF", "(", "args", ".", "root", ",", "\"test\"", ",", "test_augs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"dffd\"", ":", "\n", "        ", "train_dataset", "=", "DFFD", "(", "args", ".", "root", ",", "\"train\"", ",", "train_augs", ")", "\n", "test_dataset", "=", "DFFD", "(", "args", ".", "root", ",", "\"test\"", ",", "test_augs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"dfdcp\"", ":", "\n", "        ", "train_dataset", "=", "DFDCP", "(", "args", ".", "root", ",", "\"train\"", ",", "train_augs", ")", "\n", "test_dataset", "=", "DFDCP", "(", "args", ".", "root", ",", "\"test\"", ",", "test_augs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "log_print", "(", "\"len train dataset:{}\"", ".", "format", "(", "len", "(", "train_dataset", ")", ")", ")", "\n", "log_print", "(", "\"len test dataset:{}\"", ".", "format", "(", "len", "(", "test_dataset", ")", ")", ")", "\n", "# dataloader", "\n", "trainloader", "=", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "args", ".", "shuffle", ",", "\n", "num_workers", "=", "args", ".", "num_workers", "\n", ")", "\n", "testloader", "=", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "args", ".", "shuffle", ",", "\n", "num_workers", "=", "args", ".", "num_workers", "\n", ")", "\n", "\n", "if", "args", ".", "num_classes", "==", "2", ":", "\n", "        ", "ce_weight", "=", "[", "args", ".", "real_weight", ",", "1.0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# CrossEntropy Loss", "\n", "", "weight", "=", "torch", ".", "Tensor", "(", "ce_weight", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "weight", "=", "weight", ".", "cuda", "(", ")", "\n", "", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", ")", "\n", "\n", "if", "args", ".", "consistency", "==", "\"None\"", ":", "\n", "        ", "consistency_fn", "=", "None", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "consistency", "==", "\"cos\"", ":", "\n", "            ", "consistency_fn", "=", "ConsistencyCos", "(", ")", "\n", "", "elif", "args", ".", "consistency", "==", "\"L2\"", ":", "\n", "            ", "consistency_fn", "=", "ConsistencyL2", "(", ")", "\n", "", "elif", "args", ".", "consistency", "==", "\"L1\"", ":", "\n", "            ", "consistency_fn", "=", "ConsistencyL1", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "log_print", "(", "\"consistency loss function: {}, rate:{}\"", ".", "format", "(", "consistency_fn", ",", "args", ".", "consistency_rate", ")", ")", "\n", "\n", "# optimizer", "\n", "", "if", "args", ".", "optimizer", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "log_print", "(", "\"optimizer: {}\"", ".", "format", "(", "optimizer", ")", ")", "\n", "\n", "if", "args", ".", "load_model_path", "is", "not", "None", ":", "\n", "        ", "log_print", "(", "'==> Resuming from checkpoint..'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "load_model_path", ")", "# , map_location=\"cpu\"", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "best_recond", "=", "{", "\n", "\"acc\"", ":", "checkpoint", "[", "'acc'", "]", ",", "\n", "\"auc\"", ":", "checkpoint", "[", "'auc'", "]", ",", "\n", "\"epoch\"", ":", "checkpoint", "[", "'epoch'", "]", ",", "\n", "}", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "log_print", "(", "\"start from best recode: {}\"", ".", "format", "(", "best_recond", ")", ")", "\n", "", "else", ":", "\n", "        ", "best_recond", "=", "{", "\"acc\"", ":", "0", ",", "\"auc\"", ":", "0", ",", "\"epoch\"", ":", "-", "1", ",", "\"tdr3\"", ":", "0", ",", "\"tdr4\"", ":", "0", "}", "\n", "start_epoch", "=", "0", "\n", "\n", "# trainer", "\n", "", "trainer", "=", "Trainer", "(", "\n", "train_loader", "=", "trainloader", ",", "\n", "test_loader", "=", "testloader", ",", "\n", "model", "=", "model", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "loss_fn", "=", "loss_fn", ",", "\n", "consistency_fn", "=", "consistency_fn", ",", "\n", "consistency_rate", "=", "args", ".", "consistency_rate", ",", "\n", "log_interval", "=", "args", ".", "log_interval", ",", "\n", "best_recond", "=", "best_recond", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "exp_name", "=", "args", ".", "exp_name", ",", "\n", "amp", "=", "args", ".", "amp", ")", "\n", "\n", "for", "epoch_idx", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "trainer", ".", "train_epoch", "(", "epoch_idx", ")", "\n", "trainer", ".", "test_epoch", "(", "epoch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.prep_w_mask.get_detector": [[30, 39], ["facenet_pytorch.models.mtcnn.MTCNN", "torch.cuda.is_available"], "function", ["None"], ["def", "get_detector", "(", ")", ":", "\n", "    ", "device", "=", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "face_detector", "=", "MTCNN", "(", "\n", "margin", "=", "0", ",", "\n", "thresholds", "=", "[", "0.60", ",", "0.60", ",", "0.60", "]", ",", "\n", "device", "=", "device", ",", "\n", "select_largest", "=", "True", ",", "# the face with biggest size is ranked first", "\n", "keep_all", "=", "True", ")", "\n", "return", "face_detector", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.prep_w_mask.adjust_bbox_ratio": [[40, 70], ["abs"], "function", ["None"], ["", "def", "adjust_bbox_ratio", "(", "bbox", ",", "avg_ratio", ",", "enlarge", "=", "False", ")", ":", "\n", "    ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "bbox", "\n", "x_len", "=", "xmax", "-", "xmin", "\n", "y_len", "=", "ymax", "-", "ymin", "\n", "ratio", "=", "x_len", "/", "y_len", "\n", "if", "ratio", "==", "avg_ratio", ":", "\n", "        ", "return", "bbox", "\n", "", "elif", "ratio", ">", "avg_ratio", ":", "\n", "        ", "if", "enlarge", ":", "\n", "            ", "r_y_len", "=", "x_len", "/", "avg_ratio", "\n", "ymin", "-=", "(", "r_y_len", "-", "y_len", ")", "/", "2", "\n", "ymax", "=", "ymin", "+", "r_y_len", "\n", "", "else", ":", "\n", "            ", "r_x_len", "=", "(", "y_len", "*", "avg_ratio", ")", "\n", "xmin", "+=", "(", "x_len", "-", "r_x_len", ")", "/", "2", "\n", "xmax", "=", "xmin", "+", "r_x_len", "\n", "", "", "else", ":", "\n", "        ", "if", "enlarge", ":", "\n", "            ", "r_x_len", "=", "y_len", "*", "avg_ratio", "\n", "xmin", "-=", "(", "r_x_len", "-", "x_len", ")", "/", "2", "\n", "xmax", "=", "xmin", "+", "r_x_len", "\n", "", "else", ":", "\n", "            ", "r_y_len", "=", "(", "x_len", "/", "avg_ratio", ")", "\n", "ymin", "+=", "(", "y_len", "-", "r_y_len", ")", "/", "2", "\n", "ymax", "=", "ymin", "+", "r_y_len", "\n", "", "", "rect_ratio", "=", "(", "xmax", "-", "xmin", ")", "/", "(", "ymax", "-", "ymin", ")", "\n", "# if abs(rect_ratio - avg_ratio) > 1e-2:", "\n", "#     print(rect_ratio)", "\n", "assert", "abs", "(", "rect_ratio", "-", "avg_ratio", ")", "<", "0.1", "\n", "return", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.prep_w_mask.is_fake_by_mask": [[71, 80], ["max", "min", "max", "min", "numpy.mean"], "function", ["None"], ["", "def", "is_fake_by_mask", "(", "mask_frame", ",", "boxes", ")", ":", "\n", "    ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "boxes", "\n", "h", ",", "w", ",", "_", "=", "mask_frame", ".", "shape", "\n", "ymin", "=", "max", "(", "ymin", ",", "0", ")", "\n", "ymax", "=", "min", "(", "ymax", ",", "h", ")", "\n", "xmin", "=", "max", "(", "xmin", ",", "0", ")", "\n", "xmax", "=", "min", "(", "xmax", ",", "w", ")", "\n", "# print(np.mean(mask_frame[ymin:ymax, xmin:xmax]))", "\n", "return", "np", ".", "mean", "(", "mask_frame", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", ")", ">", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.prep_w_mask.process_video": [[82, 177], ["print", "cv2.VideoCapture", "cv2.VideoCapture", "int", "min", "video_p.replace", "video_p.replace", "print", "cv2.VideoCapture.get", "int", "cv2.VideoCapture.grab", "cv2.VideoCapture.grab", "glob.glob", "int", "int", "cv2.VideoCapture.get", "cv2.VideoCapture.retrieve", "cv2.VideoCapture.retrieve", "cv2.cvtColor", "PIL.Image.fromarray", "batch_indices.append", "batch_frames.append", "batch_mask_frames.append", "face_detector.detect", "len", "range", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "len", "cv2.cvtColor", "range", "len", "numpy.asarray", "prep_w_mask.adjust_bbox_ratio", "prep_w_mask.is_fake_by_mask", "int", "int", "max", "min", "max", "min", "os.join", "cv2.imwrite", "CROP_NAME_PATTERN.format"], "function", ["home.repos.pwc.inspect_result.niyunsheng_core.src.prep_w_mask.adjust_bbox_ratio", "home.repos.pwc.inspect_result.niyunsheng_core.src.prep_w_mask.is_fake_by_mask"], ["", "def", "process_video", "(", "face_detector", ",", "video_p", ",", "crop_dir", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "fake_type", "==", "\"real\"", ":", "\n", "        ", "maks_p", "=", "video_p", ".", "replace", "(", "\"original_sequences/youtube/{}\"", ".", "format", "(", "args", ".", "quality", ")", ",", "\"manipulated_sequences/Deepfakes/masks\"", ")", "\n", "maks_p", "=", "glob", "(", "maks_p", "[", ":", "-", "4", "]", "+", "\"*\"", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "maks_p", "=", "video_p", ".", "replace", "(", "args", ".", "quality", ",", "\"masks\"", ")", "\n", "", "print", "(", "video_p", ",", "maks_p", ")", "\n", "\n", "capture", "=", "cv2", ".", "VideoCapture", "(", "video_p", ")", "\n", "mask_capture", "=", "cv2", ".", "VideoCapture", "(", "maks_p", ")", "\n", "\n", "if", "not", "int", "(", "capture", ".", "get", "(", "7", ")", ")", "==", "int", "(", "mask_capture", ".", "get", "(", "7", ")", ")", ":", "\n", "        ", "print", "(", "video_p", ",", "maks_p", ")", "\n", "\n", "", "video_fps", "=", "int", "(", "capture", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", ")", "\n", "space", "=", "video_fps", "//", "3", "\n", "frames_num", "=", "min", "(", "int", "(", "capture", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", ",", "\n", "space", "*", "args", ".", "max_num", ")", "\n", "# print(\"start:\", frames_num)", "\n", "# sample frames", "\n", "batch_indices", "=", "[", "]", "\n", "batch_frames", "=", "[", "]", "\n", "batch_mask_frames", "=", "[", "]", "\n", "idx", "=", "0", "\n", "while", "idx", "<", "frames_num", ":", "\n", "        ", "capture", ".", "grab", "(", ")", "\n", "mask_capture", ".", "grab", "(", ")", "\n", "if", "idx", "%", "space", "==", "0", ":", "\n", "# read one frame", "\n", "            ", "success1", ",", "frame", "=", "capture", ".", "retrieve", "(", ")", "\n", "success2", ",", "mask", "=", "mask_capture", ".", "retrieve", "(", ")", "\n", "assert", "success1", ",", "\"read error: {}\"", ".", "format", "(", "capture", ")", "\n", "assert", "success2", ",", "\"read error: {}\"", ".", "format", "(", "mask_capture", ")", "\n", "\n", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "frame", "=", "Image", ".", "fromarray", "(", "frame", ")", "\n", "batch_indices", ".", "append", "(", "idx", ")", "\n", "batch_frames", ".", "append", "(", "frame", ")", "\n", "batch_mask_frames", ".", "append", "(", "mask", ")", "\n", "\n", "", "if", "len", "(", "batch_frames", ")", "==", "BATCH_SIZE", "or", "(", "idx", "==", "frames_num", "-", "1", "\n", "and", "len", "(", "batch_frames", ")", ">", "0", ")", ":", "\n", "# face detection", "\n", "            ", "boxes", ",", "probs", ",", "points", "=", "face_detector", ".", "detect", "(", "batch_frames", ",", "\n", "landmarks", "=", "True", ")", "\n", "# save detection results", "\n", "n_frame", "=", "len", "(", "batch_frames", ")", "\n", "for", "i", "in", "range", "(", "n_frame", ")", ":", "\n", "                ", "frame", "=", "cv2", ".", "cvtColor", "(", "np", ".", "asarray", "(", "batch_frames", "[", "i", "]", ")", ",", "\n", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "frame_idx", "=", "batch_indices", "[", "i", "]", "\n", "frame_boxes", "=", "boxes", "[", "i", "]", "\n", "frame_probs", "=", "probs", "[", "i", "]", "\n", "frame_points", "=", "points", "[", "i", "]", "\n", "if", "frame_boxes", "is", "None", ":", "\n", "                    ", "continue", "# no face is detected", "\n", "", "n_face", "=", "frame_boxes", ".", "shape", "[", "0", "]", "\n", "# print(n_face)", "\n", "for", "j", "in", "range", "(", "n_face", ")", ":", "\n", "                    ", "ori_boxes", "=", "frame_boxes", "[", "j", "]", "\n", "ori_points", "=", "frame_points", "[", "j", "]", "\n", "square_box", "=", "adjust_bbox_ratio", "(", "ori_boxes", ",", "1.", ",", "enlarge", "=", "True", ")", "\n", "square_box", "=", "[", "int", "(", "x", ")", "for", "x", "in", "square_box", "]", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "square_box", "\n", "if", "is_fake_by_mask", "(", "batch_mask_frames", "[", "i", "]", ",", "square_box", ")", ":", "\n", "# save cropping", "\n", "                        ", "h", ",", "w", ",", "_", "=", "frame", ".", "shape", "\n", "# ensure square", "\n", "x_w", "=", "xmax", "-", "xmin", "\n", "ymax", "=", "ymin", "+", "x_w", "\n", "pad", "=", "int", "(", "x_w", "*", "EXPAND_RATIO", ")", "\n", "ymin", "=", "max", "(", "ymin", "-", "pad", ",", "0", ")", "\n", "ymax", "=", "min", "(", "ymax", "+", "pad", ",", "h", ")", "\n", "xmin", "=", "max", "(", "xmin", "-", "pad", ",", "0", ")", "\n", "xmax", "=", "min", "(", "xmax", "+", "pad", ",", "w", ")", "\n", "x_w", "=", "xmax", "-", "xmin", "\n", "y_w", "=", "ymax", "-", "ymin", "\n", "if", "x_w", "<", "y_w", ":", "\n", "                            ", "ymin", "=", "ymin", "+", "(", "y_w", "-", "x_w", ")", "\n", "", "elif", "x_w", ">", "y_w", ":", "\n", "                            ", "xmin", "=", "xmin", "+", "(", "x_w", "-", "y_w", ")", "\n", "", "assert", "ymax", "-", "ymin", "==", "xmax", "-", "xmin", "\n", "crop", "=", "frame", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "crop_p", "=", "osp", ".", "join", "(", "crop_dir", ",", "\n", "CROP_NAME_PATTERN", ".", "format", "(", "frame_idx", ")", ")", "\n", "cv2", ".", "imwrite", "(", "crop_p", ",", "crop", ")", "\n", "# print(frame_idx)", "\n", "break", "\n", "# crop processing done", "\n", "", "", "", "batch_indices", "=", "[", "]", "\n", "batch_frames", "=", "[", "]", "\n", "batch_mask_frames", "=", "[", "]", "\n", "\n", "# read next frame", "\n", "", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.prep_w_mask.delete_imgs": [[178, 181], ["os.listdir", "os.listdir", "os.remove", "os.remove", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "delete_imgs", "(", "save_dir", ",", "max_num", ")", ":", "\n", "    ", "for", "img", "in", "os", ".", "listdir", "(", "save_dir", ")", "[", "max_num", ":", "]", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.prep_w_mask.main": [[182, 213], ["video_ps.sort", "print", "prep_w_mask.get_detector", "tqdm.tqdm", "print", "open", "json.load", "open", "json.load", "open", "json.load", "video.replace().replace", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "video_ps.append", "video_ps.append", "video_ps.append", "video_ps.append", "len", "prep_w_mask.process_video", "print", "os.join", "os.join", "os.join", "os.join", "video.replace", "os.listdir", "os.listdir", "len", "len", "prep_w_mask.delete_imgs", "print", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "len", "os.listdir", "os.listdir"], "function", ["home.repos.pwc.inspect_result.niyunsheng_core.src.prep_w_mask.get_detector", "home.repos.pwc.inspect_result.niyunsheng_core.src.prep_w_mask.process_video", "home.repos.pwc.inspect_result.niyunsheng_core.src.prep_w_mask.delete_imgs"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_root", ",", "\"split/test.json\"", ")", ")", "as", "f", ":", "\n", "        ", "pairs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_root", ",", "\"split/val.json\"", ")", ")", "as", "f", ":", "\n", "        ", "pairs", "+=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_root", ",", "\"split/train.json\"", ")", ")", "as", "f", ":", "\n", "        ", "pairs", "+=", "json", ".", "load", "(", "f", ")", "\n", "", "video_ps", "=", "[", "]", "\n", "for", "a", ",", "b", "in", "pairs", ":", "\n", "        ", "if", "args", ".", "fake_type", "==", "\"real\"", ":", "\n", "            ", "video_ps", ".", "append", "(", "osp", ".", "join", "(", "args", ".", "src_root", ",", "'original_sequences/youtube/{}/videos/{}.mp4'", ".", "format", "(", "args", ".", "quality", ",", "a", ")", ")", ")", "\n", "video_ps", ".", "append", "(", "osp", ".", "join", "(", "args", ".", "src_root", ",", "'original_sequences/youtube/{}/videos/{}.mp4'", ".", "format", "(", "args", ".", "quality", ",", "b", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "video_ps", ".", "append", "(", "osp", ".", "join", "(", "args", ".", "src_root", ",", "'manipulated_sequences/{}/{}/videos/{}_{}.mp4'", ".", "format", "(", "args", ".", "fake_type", ",", "args", ".", "quality", ",", "a", ",", "b", ")", ")", ")", "\n", "video_ps", ".", "append", "(", "osp", ".", "join", "(", "args", ".", "src_root", ",", "'manipulated_sequences/{}/{}/videos/{}_{}.mp4'", ".", "format", "(", "args", ".", "fake_type", ",", "args", ".", "quality", ",", "b", ",", "a", ")", ")", ")", "\n", "\n", "", "", "video_ps", ".", "sort", "(", ")", "\n", "video_ps", "=", "video_ps", "[", "args", ".", "start", ":", "args", ".", "end", "]", "\n", "print", "(", "\"fake_type: \"", ",", "args", ".", "fake_type", ")", "\n", "face_detector", "=", "get_detector", "(", ")", "\n", "for", "video", "in", "tqdm", "(", "video_ps", ")", ":", "\n", "        ", "save_dir", "=", "video", ".", "replace", "(", "args", ".", "src_root", ",", "args", ".", "dst_root", ")", ".", "replace", "(", "\".mp4\"", ",", "\"\"", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "len", "(", "os", ".", "listdir", "(", "save_dir", ")", ")", "<", "args", ".", "max_num", "/", "2", ":", "\n", "            ", "process_video", "(", "face_detector", ",", "video", ",", "save_dir", ",", "args", ")", "\n", "print", "(", "len", "(", "os", ".", "listdir", "(", "save_dir", ")", ")", ",", "save_dir", ")", "\n", "", "elif", "len", "(", "os", ".", "listdir", "(", "save_dir", ")", ")", ">", "args", ".", "max_num", ":", "\n", "            ", "delete_imgs", "(", "save_dir", ",", "args", ".", "max_num", ")", "\n", "print", "(", "len", "(", "os", ".", "listdir", "(", "save_dir", ")", ")", ",", "save_dir", ")", "\n", "\n", "", "", "print", "(", "'[Done]'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.trainer.Trainer.__init__": [[8, 39], ["torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.device_count", "torch.nn.DataParallel"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "train_loader", "=", "None", ",", "\n", "test_loader", "=", "None", ",", "\n", "model", "=", "None", ",", "\n", "optimizer", "=", "None", ",", "\n", "loss_fn", "=", "None", ",", "\n", "consistency_fn", "=", "None", ",", "\n", "consistency_rate", "=", "1.0", ",", "\n", "log_interval", "=", "100", ",", "\n", "best_recond", "=", "{", "\"acc\"", ":", "0", ",", "\"auc\"", ":", "0", ",", "\"epoch\"", ":", "-", "1", "}", ",", "\n", "save_dir", "=", "\"ckpt/test\"", ",", "\n", "exp_name", "=", "\"test\"", ",", "\n", "amp", "=", "False", ")", ":", "\n", "        ", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "test_loader", "=", "test_loader", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "self", ".", "consistency_fn", "=", "consistency_fn", "\n", "self", ".", "consistency_rate", "=", "consistency_rate", "\n", "self", ".", "log_interval", "=", "log_interval", "\n", "self", ".", "best_record", "=", "best_recond", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "exp_name", "=", "exp_name", "\n", "self", ".", "amp", "=", "amp", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.trainer.Trainer.train_epoch": [[40, 114], ["trainer.Trainer.model.train", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "time.time", "enumerate", "utils.log_print", "torch.cuda.amp.GradScaler", "torch.cat.to", "torch.cat.to", "torch.cat.size", "trainer.Trainer.optimizer.zero_grad", "outputs.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "torch.cat.data.cpu().numpy", "utils.evaluate", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "type", "torch.cat", "torch.cat", "amp_class", "trainer.Trainer.model", "utils.AverageMeter.update", "trainer.Trainer.loss_fn", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "loss.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.item", "utils.AverageMeter.update", "loss.item", "utils.log_print", "torch.mean().item", "trainer.Trainer.consistency_fn", "outputs.data.cpu().numpy.data.cpu().numpy.data.cpu", "torch.cat.data.cpu", "trainer.Trainer.item", "torch.cuda.amp.GradScaler.scale", "len", "len", "time.time", "time.time", "torch.mean", "torch.sqrt", "time.time", "time.time", "torch.sum", "len", "len", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.evaluate", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print"], ["", "", "", "def", "train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "train_loss_ce", "=", "AverageMeter", "(", ")", "\n", "train_loss_consistency", "=", "AverageMeter", "(", ")", "\n", "train_loss", "=", "AverageMeter", "(", ")", "\n", "train_acc", "=", "AverageMeter", "(", ")", "\n", "train_auc", "=", "AverageMeter", "(", ")", "\n", "feature_norm", "=", "AverageMeter", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# scaler", "\n", "if", "self", ".", "amp", ":", "\n", "            ", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "if", "type", "(", "data", ")", "is", "list", ":", "\n", "                ", "data", "=", "torch", ".", "cat", "(", "data", ",", "dim", "=", "0", ")", "\n", "label", "=", "torch", ".", "cat", "(", "[", "label", ",", "label", "]", ",", "dim", "=", "0", ")", "\n", "", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "N", "=", "label", ".", "size", "(", "0", ")", "\n", "# forward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "amp", ":", "\n", "                ", "amp_class", "=", "torch", ".", "cuda", ".", "amp", ".", "autocast", "\n", "", "else", ":", "\n", "                ", "amp_class", "=", "EmptyWith", "\n", "\n", "", "with", "amp_class", "(", ")", ":", "\n", "# forward and loss", "\n", "                ", "feature", ",", "outputs", "=", "self", ".", "model", "(", "data", ")", "\n", "feature_norm", ".", "update", "(", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "feature", "*", "feature", ",", "dim", "=", "1", ")", ")", ")", ".", "item", "(", ")", ",", "N", ")", "\n", "loss_ce", "=", "self", ".", "loss_fn", "(", "outputs", ",", "label", ")", "\n", "if", "self", ".", "consistency_fn", "is", "not", "None", ":", "\n", "                    ", "loss_consistency", "=", "self", ".", "consistency_fn", "(", "feature", ")", "\n", "loss", "=", "self", ".", "consistency_rate", "*", "loss_consistency", "+", "loss_ce", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "loss_ce", "\n", "# backward", "\n", "", "", "if", "self", ".", "amp", ":", "\n", "                ", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "outputs", "=", "outputs", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label", "=", "label", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "acc", ",", "auc", ",", "tdr", "=", "evaluate", "(", "outputs", ",", "label", ")", "\n", "train_loss_ce", ".", "update", "(", "loss_ce", ".", "item", "(", ")", ",", "N", ")", "\n", "if", "self", ".", "consistency_fn", "is", "not", "None", ":", "\n", "                ", "train_loss_consistency", ".", "update", "(", "loss_consistency", ".", "item", "(", ")", ",", "N", ")", "\n", "", "train_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "N", ")", "\n", "train_acc", ".", "update", "(", "acc", ",", "N", ")", "\n", "train_auc", ".", "update", "(", "auc", ",", "N", ")", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "if", "self", ".", "consistency_fn", "is", "not", "None", ":", "\n", "                    ", "msg", "=", "'[{}][train] [epoch {}], [iter {} / {}], [loss {:.8f}],[loss ce{:.8f}],[loss consistency {:.8f}], [acc {:.5f}], [auc {:.5f}], [time used {:.1f}], [time left {:.1f}], [feature norm {}]'", ".", "format", "(", "\n", "self", ".", "exp_name", ",", "epoch", ",", "batch_idx", ",", "len", "(", "self", ".", "train_loader", ")", ",", "train_loss", ".", "avg", ",", "train_loss_ce", ".", "avg", ",", "train_loss_consistency", ".", "avg", ",", "train_acc", ".", "avg", ",", "train_auc", ".", "avg", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", "/", "(", "batch_idx", "+", "1", ")", "*", "(", "len", "(", "self", ".", "train_loader", ")", "-", "batch_idx", "-", "1", ")", ",", "feature_norm", ".", "avg", ")", "\n", "", "else", ":", "\n", "                    ", "msg", "=", "'[{}][train] [epoch {}], [iter {} / {}], [loss {:.8f}], [acc {:.5f}], [auc {:.5f}], [time used {:.0f}], [time left {:.0f}], [feature norm {}]'", ".", "format", "(", "\n", "self", ".", "exp_name", ",", "epoch", ",", "batch_idx", ",", "len", "(", "self", ".", "train_loader", ")", ",", "train_loss", ".", "avg", ",", "train_acc", ".", "avg", ",", "train_auc", ".", "avg", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", "/", "(", "batch_idx", "+", "1", ")", "*", "(", "len", "(", "self", ".", "train_loader", ")", "-", "batch_idx", "-", "1", ")", ",", "feature_norm", ".", "avg", ")", "\n", "", "log_print", "(", "msg", ")", "\n", "", "", "if", "self", ".", "consistency_fn", "is", "not", "None", ":", "\n", "            ", "msg", "=", "'[{}][train] [epoch {}], [loss {:.8f}], [loss ce {:.8f}],[loss consistency {:.8f}], [acc {:.5f}], [auc {:.5f}], [time {:.0f}], [lr {:.5f}], [feature norm {}]'", ".", "format", "(", "\n", "self", ".", "exp_name", ",", "epoch", ",", "train_loss", ".", "avg", ",", "train_loss_ce", ".", "avg", ",", "train_loss_consistency", ".", "avg", ",", "train_acc", ".", "avg", ",", "train_auc", ".", "avg", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ",", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "feature_norm", ".", "avg", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "'[{}][train] [epoch {}], [loss {:.8f}], [acc {:.5f}], [auc {:.5f}], [time {:.0f}], [lr {:.5f}], [feature norm {}]'", ".", "format", "(", "\n", "self", ".", "exp_name", ",", "epoch", ",", "train_loss", ".", "avg", ",", "train_acc", ".", "avg", ",", "train_auc", ".", "avg", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ",", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "feature_norm", ".", "avg", ")", "\n", "", "log_print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.trainer.Trainer.test_epoch": [[115, 166], ["trainer.Trainer.model.eval", "time.time", "utils.AverageMeter", "utils.AverageMeter", "numpy.concatenate", "numpy.concatenate", "utils.evaluate", "utils.log_print", "torch.no_grad", "tqdm.tqdm.tqdm", "utils.log_print", "utils.log_print", "torch.save", "enumerate", "data.to.to.to", "label.data.cpu().numpy.data.cpu().numpy.to", "label.data.cpu().numpy.data.cpu().numpy.size", "trainer.Trainer.model", "utils.AverageMeter.update", "trainer.Trainer.loss_fn", "utils.AverageMeter.update", "output.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "label.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "numpy.concatenate.append", "numpy.concatenate.append", "torch.cuda.device_count", "trainer.Trainer.model.module.state_dict", "trainer.Trainer.model.state_dict", "trainer.Trainer.optimizer.state_dict", "len", "torch.mean().item", "trainer.Trainer.item", "time.time", "output.data.cpu().numpy.data.cpu().numpy.data.cpu", "label.data.cpu().numpy.data.cpu().numpy.data.cpu", "torch.mean", "torch.sqrt", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.src.utils.evaluate", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.update"], ["", "def", "test_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "val_loss", "=", "AverageMeter", "(", ")", "\n", "feature_norm", "=", "AverageMeter", "(", ")", "\n", "outputs", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "test_loader", ")", ",", "total", "=", "len", "(", "self", ".", "test_loader", ")", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "N", "=", "label", ".", "size", "(", "0", ")", "\n", "feature", ",", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "feature_norm", ".", "update", "(", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "feature", "*", "feature", ",", "dim", "=", "1", ")", ")", ")", ".", "item", "(", ")", ",", "N", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "output", ",", "label", ")", "\n", "\n", "val_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "N", ")", "\n", "output", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "label", "=", "label", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "\n", "", "", "outputs", "=", "np", ".", "concatenate", "(", "outputs", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "\n", "acc", ",", "auc", ",", "tdr", "=", "evaluate", "(", "outputs", ",", "labels", ")", "\n", "msg", "=", "'[{}][test] [epoch {}], [loss {:.5f}], [acc {:.5f}], [auc {:.5f}], [time {:.1f}], [tdr {}], [feature norm {}]'", ".", "format", "(", "\n", "self", ".", "exp_name", ",", "epoch", ",", "val_loss", ".", "avg", ",", "acc", ",", "auc", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ",", "tdr", ",", "feature_norm", ".", "avg", ")", "\n", "log_print", "(", "msg", ")", "\n", "\n", "# eraly stop", "\n", "if", "self", ".", "best_record", "[", "'acc'", "]", ">", "acc", "and", "self", ".", "best_record", "[", "'epoch'", "]", "+", "5", ">=", "epoch", ":", "\n", "            ", "log_print", "(", "\"early stop, current epoch:{}, best record:{}\"", ".", "format", "(", "epoch", ",", "self", ".", "best_record", ")", ")", "\n", "\n", "# Save checkpoint.", "\n", "", "if", "self", ".", "best_record", "[", "'acc'", "]", "<", "acc", "or", "(", "epoch", "+", "1", ")", "%", "1", "==", "0", "or", "self", ".", "best_record", "[", "'auc'", "]", "<", "auc", ":", "\n", "            ", "log_print", "(", "'Saving..'", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                ", "state_dict", "=", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "state_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "", "state", "=", "{", "\n", "'model'", ":", "state_dict", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'auc'", ":", "auc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "self", ".", "best_record", "=", "{", "'acc'", ":", "acc", ",", "'auc'", ":", "auc", ",", "'epoch'", ":", "epoch", "}", "\n", "torch", ".", "save", "(", "state", ",", "'{}/epoch_{}_acc_{:.3f}_auc_{:.3f}.pth'", ".", "format", "(", "self", ".", "save_dir", ",", "epoch", ",", "acc", "*", "100", ",", "auc", "*", "100", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.niyunsheng_core.src.transform.TwoTransform.__init__": [[15, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_transform", ")", ":", "\n", "        ", "self", ".", "base_transform", "=", "base_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.transform.TwoTransform.__call__": [[18, 22], ["transform.TwoTransform.base_transform", "transform.TwoTransform.base_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "v1", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "v2", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "return", "[", "v1", ",", "v2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.transform.OneOfTrans.__init__": [[26, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_transforms", ")", ":", "\n", "        ", "self", ".", "base_transforms", "=", "base_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.transform.OneOfTrans.__call__": [[29, 31], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "base_transforms", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "base_transforms", ")", "-", "1", ")", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.transform.ALBU_AUG.__init__": [[33, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_transform", ")", ":", "\n", "        ", "self", ".", "transform", "=", "base_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.transform.ALBU_AUG.__call__": [[36, 40], ["isinstance", "numpy.asarray", "transform.ALBU_AUG.transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "Image", ".", "Image", ")", ":", "\n", "            ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "", "return", "self", ".", "transform", "(", "image", "=", "x", ")", "[", "'image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.transform.get_augs": [[41, 118], ["torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomErasing", "torchvision.Normalize", "transform.OneOfTrans", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "transform.ALBU_AUG", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "albumentations.Compose", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomErasing", "torchvision.Normalize", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "albumentations.ImageCompression", "albumentations.GaussNoise", "albumentations.GaussianBlur", "albumentations.HorizontalFlip", "albumentations.OneOf", "albumentations.PadIfNeeded", "albumentations.OneOf", "albumentations.ToGray", "albumentations.ShiftScaleRotate", "albumentations.Normalize", "albumentations.pytorch.ToTensorV2", "albumentations.LongestMaxSize", "albumentations.LongestMaxSize", "albumentations.LongestMaxSize", "albumentations.RandomBrightnessContrast", "albumentations.FancyPCA", "albumentations.HueSaturationValue", "tuple", "tuple"], "function", ["None"], ["", "", "def", "get_augs", "(", "name", "=", "\"base\"", ",", "norm", "=", "\"imagenet\"", ",", "size", "=", "299", ")", ":", "\n", "    ", "IMG_SIZE", "=", "size", "\n", "if", "norm", "==", "\"imagenet\"", ":", "\n", "        ", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "elif", "norm", "==", "\"0.5\"", ":", "\n", "        ", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "", "else", ":", "\n", "        ", "mean", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "std", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "\n", "", "if", "name", "==", "\"None\"", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "IMG_SIZE", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n", "", "elif", "name", "==", "\"RE\"", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "IMG_SIZE", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "RandomErasing", "(", "p", "=", "0.8", ",", "scale", "=", "(", "0.02", ",", "0.20", ")", ",", "ratio", "=", "(", "0.5", ",", "2.0", ")", ",", "inplace", "=", "True", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n", "", "elif", "name", "==", "\"RandCrop\"", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "IMG_SIZE", ",", "scale", "=", "(", "1", "/", "1.3", ",", "1.0", ")", ",", "ratio", "=", "(", "0.9", ",", "1.1", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n", "", "elif", "name", "==", "\"RaAug\"", ":", "\n", "        ", "return", "OneOfTrans", "(", "[", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "IMG_SIZE", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "IMG_SIZE", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "RandomErasing", "(", "p", "=", "1.0", ",", "scale", "=", "(", "0.02", ",", "0.20", ")", ",", "ratio", "=", "(", "0.5", ",", "2.0", ")", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "IMG_SIZE", ",", "scale", "=", "(", "1", "/", "1.3", ",", "1.0", ")", ",", "ratio", "=", "(", "0.9", ",", "1.1", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n", "]", ")", "\n", "", "elif", "name", "==", "\"DFDC_selim\"", ":", "\n", "# dfdc \u7b2c\u4e00\u540d\u6570\u636e\u589e\u5f3a\u65b9\u6848", "\n", "        ", "return", "ALBU_AUG", "(", "A", ".", "Compose", "(", "[", "\n", "A", ".", "ImageCompression", "(", "quality_lower", "=", "60", ",", "quality_upper", "=", "100", ",", "p", "=", "0.5", ")", ",", "\n", "A", ".", "GaussNoise", "(", "p", "=", "0.1", ")", ",", "\n", "A", ".", "GaussianBlur", "(", "blur_limit", "=", "3", ",", "p", "=", "0.05", ")", ",", "\n", "A", ".", "HorizontalFlip", "(", ")", ",", "\n", "A", ".", "OneOf", "(", "[", "\n", "A", ".", "LongestMaxSize", "(", "max_size", "=", "IMG_SIZE", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", ",", "\n", "A", ".", "LongestMaxSize", "(", "max_size", "=", "IMG_SIZE", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", ",", "\n", "A", ".", "LongestMaxSize", "(", "max_size", "=", "IMG_SIZE", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "]", ",", "p", "=", "1.0", ")", ",", "\n", "A", ".", "PadIfNeeded", "(", "min_height", "=", "IMG_SIZE", ",", "min_width", "=", "IMG_SIZE", ",", "border_mode", "=", "cv2", ".", "BORDER_CONSTANT", ")", ",", "\n", "A", ".", "OneOf", "(", "[", "A", ".", "RandomBrightnessContrast", "(", ")", ",", "A", ".", "FancyPCA", "(", ")", ",", "A", ".", "HueSaturationValue", "(", ")", "]", ",", "p", "=", "0.7", ")", ",", "\n", "A", ".", "ToGray", "(", "p", "=", "0.2", ")", ",", "\n", "A", ".", "ShiftScaleRotate", "(", "shift_limit", "=", "0.1", ",", "scale_limit", "=", "0.2", ",", "rotate_limit", "=", "10", ",", "border_mode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "p", "=", "0.5", ")", ",", "\n", "A", ".", "Normalize", "(", "mean", "=", "tuple", "(", "mean", ")", ",", "std", "=", "tuple", "(", "std", ")", ")", ",", "\n", "ToTensorV2", "(", ")", "\n", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.niyunsheng_core.src.xception.SeparableConv2d.__init__": [[34, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "in_channels", ",", "bias", "=", "bias", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.xception.SeparableConv2d.forward": [[40, 44], ["xception.SeparableConv2d.conv1", "xception.SeparableConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.xception.Block.__init__": [[47, 84], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "rep.append", "xception.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_filters", ",", "out_filters", ",", "reps", ",", "strides", "=", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "out_filters", "!=", "in_filters", "or", "strides", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "in_filters", ",", "out_filters", ",", "1", ",", "stride", "=", "strides", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "rep", "=", "[", "]", "\n", "\n", "filters", "=", "in_filters", "\n", "if", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "filters", "=", "out_filters", "\n", "\n", "", "for", "i", "in", "range", "(", "reps", "-", "1", ")", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "filters", ",", "filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "\n", "", "if", "not", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "\n", "", "if", "not", "start_with_relu", ":", "\n", "            ", "rep", "=", "rep", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "rep", "[", "0", "]", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "", "if", "strides", "!=", "1", ":", "\n", "            ", "rep", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "3", ",", "strides", ",", "1", ")", ")", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.xception.Block.forward": [[85, 96], ["xception.Block.rep", "xception.Block.skip", "xception.Block.skipbn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "self", ".", "rep", "(", "inp", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "inp", ")", "\n", "skip", "=", "self", ".", "skipbn", "(", "skip", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "inp", "\n", "\n", "", "x", "+=", "skip", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.xception.Xception.__init__": [[104, 157], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "xception.Xception.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            num_classes: number of classes\n        \"\"\"", "\n", "super", "(", "Xception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "2", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "#do relu here", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "64", ",", "128", ",", "2", ",", "2", ",", "start_with_relu", "=", "False", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block2", "=", "Block", "(", "128", ",", "256", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "256", ",", "728", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block4", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block7", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block8", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "728", ",", "728", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block12", "=", "Block", "(", "728", ",", "1024", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ")", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "1536", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "1536", ")", "\n", "\n", "#do relu here", "\n", "self", ".", "conv4", "=", "SeparableConv2d", "(", "1536", ",", "2048", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "2048", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "\n", "\n", "\n", "#------- init weights --------", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#-----------------------------", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.xception.Xception.forward": [[163, 201], ["xception.Xception.conv1", "xception.Xception.bn1", "xception.Xception.relu", "xception.Xception.conv2", "xception.Xception.bn2", "xception.Xception.relu", "xception.Xception.block1", "xception.Xception.block2", "xception.Xception.block3", "xception.Xception.block4", "xception.Xception.block5", "xception.Xception.block6", "xception.Xception.block7", "xception.Xception.block8", "xception.Xception.block9", "xception.Xception.block10", "xception.Xception.block11", "xception.Xception.block12", "xception.Xception.conv3", "xception.Xception.bn3", "xception.Xception.relu", "xception.Xception.conv4", "xception.Xception.bn4", "xception.Xception.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "x.view.view.view", "xception.Xception.fc", "x.view.view.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# features begin", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# feature end", "\n", "\n", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "[", "x", ",", "y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.xception.xception": [[204, 214], ["xception.Xception", "torch.Linear", "Xception.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "xception", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "Xception", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'xception'", "]", ")", ")", "\n", "", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "2048", ",", "out_features", "=", "num_classes", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.EmptyWith.__enter__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.EmptyWith.__exit__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.__init__": [[21, 23], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.reset": [[24, 29], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.AverageMeter.update": [[30, 35], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print": [[10, 13], ["print", "logger.info"], "function", ["None"], ["def", "log_print", "(", "msg", ")", ":", "\n", "    ", "print", "(", "msg", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.cal_auc": [[36, 55], ["sklearn.metrics.roc_auc_score", "sklearn.metrics.roc_curve", "utils.log_print"], "function", ["home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print"], ["", "", "def", "cal_auc", "(", "pred", ",", "label", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "auc", "=", "roc_auc_score", "(", "label", ",", "pred", ")", "\n", "fprs", ",", "tprs", ",", "_", "=", "roc_curve", "(", "label", ",", "pred", ")", "\n", "tdr", "=", "{", "}", "\n", "tdr", "[", "\"fpr\"", "]", "=", "{", "}", "\n", "for", "t", "in", "[", "0.001", ",", "0.0001", "]", ":", "\n", "            ", "ind", "=", "0", "\n", "for", "fpr", "in", "fprs", ":", "\n", "                ", "if", "fpr", ">", "t", ":", "\n", "                    ", "break", "\n", "", "ind", "+=", "1", "\n", "", "tdr", "[", "t", "]", "=", "tprs", "[", "ind", "-", "1", "]", "\n", "tdr", "[", "\"fpr\"", "]", "[", "t", "]", "=", "fprs", "[", "ind", "-", "1", "]", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "log_print", "(", "e", ")", "\n", "auc", "=", "0", "\n", "tdr", "=", "{", "0.001", ":", "0", ",", "0.0001", ":", "0", "}", "\n", "", "return", "auc", ",", "tdr", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.softmax": [[56, 60], ["numpy.exp", "x.max", "np.exp.sum"], "function", ["None"], ["", "def", "softmax", "(", "x", ",", "axis", "=", "1", ")", ":", "\n", "    ", "x", "=", "x", "-", "x", ".", "max", "(", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "y", "=", "np", ".", "exp", "(", "x", ")", "\n", "return", "y", "/", "y", ".", "sum", "(", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.evaluate": [[61, 69], ["utils.softmax", "numpy.argmax", "utils.cal_auc", "numpy.sum", "len"], "function", ["home.repos.pwc.inspect_result.niyunsheng_core.src.utils.softmax", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.cal_auc"], ["", "def", "evaluate", "(", "output", ",", "label", ")", ":", "\n", "    ", "output", "=", "softmax", "(", "output", ")", "\n", "\n", "pred_idx", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "1", ")", "\n", "acc", "=", "np", ".", "sum", "(", "pred_idx", "==", "label", ")", "/", "len", "(", "label", ")", "\n", "auc", ",", "tdr", "=", "cal_auc", "(", "1", "-", "output", "[", ":", ",", "0", "]", ",", "label", ")", "\n", "\n", "return", "acc", ",", "auc", ",", "tdr", "\n", "", ""]], "home.repos.pwc.inspect_result.niyunsheng_core.src.consistency_loss.ConsistencyCos.__init__": [[5, 8], ["torch.nn.Module.__init__", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConsistencyCos", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mse_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.consistency_loss.ConsistencyCos.forward": [[9, 20], ["torch.nn.functional.normalize", "torch.einsum().unsqueeze", "torch.ones", "torch.cuda.is_available", "consistency_loss.ConsistencyCos.mse_fn", "labels.cuda.cuda.cuda", "torch.einsum", "int", "int", "torch.nn.functional.normalize.size", "torch.nn.functional.normalize.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ")", ":", "\n", "        ", "feat", "=", "nn", ".", "functional", ".", "normalize", "(", "feat", ",", "dim", "=", "1", ")", "\n", "\n", "feat_0", "=", "feat", "[", ":", "int", "(", "feat", ".", "size", "(", "0", ")", "/", "2", ")", ",", ":", "]", "\n", "feat_1", "=", "feat", "[", "int", "(", "feat", ".", "size", "(", "0", ")", "/", "2", ")", ":", ",", ":", "]", "\n", "cos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "feat_0", ",", "feat_1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "labels", "=", "torch", ".", "ones", "(", "(", "cos", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "", "loss", "=", "self", ".", "mse_fn", "(", "cos", ",", "labels", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.consistency_loss.ConsistencyL2.__init__": [[22, 25], ["torch.nn.Module.__init__", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConsistencyL2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mse_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.consistency_loss.ConsistencyL2.forward": [[26, 31], ["consistency_loss.ConsistencyL2.mse_fn", "int", "int", "feat.size", "feat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ")", ":", "\n", "        ", "feat_0", "=", "feat", "[", ":", "int", "(", "feat", ".", "size", "(", "0", ")", "/", "2", ")", ",", ":", "]", "\n", "feat_1", "=", "feat", "[", "int", "(", "feat", ".", "size", "(", "0", ")", "/", "2", ")", ":", ",", ":", "]", "\n", "loss", "=", "self", ".", "mse_fn", "(", "feat_0", ",", "feat_1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.consistency_loss.ConsistencyL1.__init__": [[33, 36], ["torch.nn.Module.__init__", "torch.nn.L1Loss"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConsistencyL1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "L1_fn", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.src.consistency_loss.ConsistencyL1.forward": [[37, 42], ["consistency_loss.ConsistencyL1.L1_fn", "int", "int", "feat.size", "feat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ")", ":", "\n", "        ", "feat_0", "=", "feat", "[", ":", "int", "(", "feat", ".", "size", "(", "0", ")", "/", "2", ")", ",", ":", "]", "\n", "feat_1", "=", "feat", "[", "int", "(", "feat", ".", "size", "(", "0", ")", "/", "2", ")", ":", ",", ":", "]", "\n", "loss", "=", "self", ".", "L1_fn", "(", "feat_0", ",", "feat_1", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.niyunsheng_core.datasets.ff.FFpp.__init__": [[13, 43], ["base_dataset.BaseDataset.__init__", "utils.log_print", "random.sample", "open", "json.load", "len", "len", "os.path.join", "open", "json.load", "glob.glob", "glob.glob", "os.path.join", "open", "json.load", "glob.glob", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "train_type", "=", "\"train\"", ",", "transform", "=", "None", ",", "num_classes", "=", "2", ",", "quality", "=", "'c23'", ")", ":", "\n", "        ", "super", "(", "FFpp", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "transform", "=", "transform", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "fake_imgs", "=", "[", "]", "\n", "real_imgs", "=", "[", "]", "\n", "fake_types", "=", "[", "\"Deepfakes\"", ",", "\"Face2Face\"", ",", "\"FaceSwap\"", ",", "\"NeuralTextures\"", "]", "\n", "\n", "if", "train_type", "==", "\"train\"", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"split/train.json\"", ")", ")", "as", "f", ":", "\n", "                ", "pairs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "elif", "train_type", "==", "\"val\"", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"split/val.json\"", ")", ")", "as", "f", ":", "\n", "                ", "pairs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "elif", "train_type", "==", "\"test\"", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"split/test.json\"", ")", ")", "as", "f", ":", "\n", "                ", "pairs", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "", "for", "pair", "in", "pairs", ":", "\n", "            ", "a", ",", "b", "=", "pair", "\n", "for", "fake_type", "in", "fake_types", ":", "\n", "                ", "fake_imgs", "+=", "[", "[", "t", ",", "1", "]", "for", "t", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"manipulated_sequences/{}/{}/videos\"", ".", "format", "(", "fake_type", ",", "quality", ")", ",", "\"{}_{}\"", ".", "format", "(", "a", ",", "b", ")", ",", "\"*.png\"", ")", ")", "]", "\n", "fake_imgs", "+=", "[", "[", "t", ",", "1", "]", "for", "t", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"manipulated_sequences/{}/{}/videos\"", ".", "format", "(", "fake_type", ",", "quality", ")", ",", "\"{}_{}\"", ".", "format", "(", "b", ",", "a", ")", ",", "\"*.png\"", ")", ")", "]", "\n", "", "real_imgs", "+=", "[", "[", "t", ",", "0", "]", "for", "t", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"original_sequences/youtube/{}/videos\"", ".", "format", "(", "quality", ")", ",", "\"{}\"", ".", "format", "(", "a", ")", ",", "\"*.png\"", ")", ")", "]", "\n", "real_imgs", "+=", "[", "[", "t", ",", "0", "]", "for", "t", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"original_sequences/youtube/{}/videos\"", ".", "format", "(", "quality", ")", ",", "\"{}\"", ".", "format", "(", "b", ")", ",", "\"*.png\"", ")", ")", "]", "\n", "\n", "", "log_print", "(", "\"[{}]\\t fake imgs count :{}, real imgs count :{}\"", ".", "format", "(", "train_type", ",", "len", "(", "fake_imgs", ")", ",", "len", "(", "real_imgs", ")", ")", ")", "\n", "\n", "self", ".", "imgs", "=", "fake_imgs", "+", "real_imgs", "\n", "import", "random", "\n", "self", ".", "imgs", "=", "random", ".", "sample", "(", "self", ".", "imgs", ",", "64", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niyunsheng_core.datasets.celeb_df.CelebDF.__init__": [[12, 35], ["base_dataset.BaseDataset.__init__", "os.path.join", "utils.log_print", "t.replace", "list", "list", "pandas.read_csv().values[].tolist", "filter", "t.replace", "glob.glob", "glob.glob", "len", "len", "glob.glob", "set", "set", "os.path.join", "os.path.join", "os.path.isdir", "os.path.join", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "train_type", "=", "\"train\"", ",", "transform", "=", "None", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "CelebDF", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "transform", "=", "transform", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"List_of_testing_videos.txt\"", ")", "\n", "videos", "=", "[", "t", ".", "replace", "(", "\".mp4\"", ",", "\"\"", ")", "for", "t", "in", "pd", ".", "read_csv", "(", "csv_path", ",", "sep", "=", "\" \"", ",", "header", "=", "None", ")", ".", "values", "[", ":", ",", "1", "]", ".", "tolist", "(", ")", "]", "\n", "if", "train_type", "==", "\"train\"", ":", "\n", "            ", "test_videos", "=", "videos", "\n", "all_videos", "=", "list", "(", "filter", "(", "lambda", "x", ":", "os", ".", "path", ".", "isdir", "(", "x", ")", ",", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"*/*\"", ")", ")", ")", ")", "\n", "all_videos", "=", "[", "t", ".", "replace", "(", "root", "+", "\"/\"", ",", "\"\"", ")", "for", "t", "in", "all_videos", "]", "\n", "videos", "=", "list", "(", "set", "(", "all_videos", ")", "-", "set", "(", "test_videos", ")", ")", "\n", "\n", "", "real_imgs", "=", "[", "]", "\n", "fake_imgs", "=", "[", "]", "\n", "for", "video", "in", "videos", ":", "\n", "            ", "if", "\"real\"", "in", "video", ":", "\n", "                ", "real_imgs", "+=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "video", ",", "\"*.png\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "fake_imgs", "+=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "video", ",", "\"*.png\"", ")", ")", "\n", "\n", "", "", "log_print", "(", "\"[{}]\\t fake imgs count :{}, real imgs count :{}\"", ".", "format", "(", "train_type", ",", "len", "(", "fake_imgs", ")", ",", "len", "(", "real_imgs", ")", ")", ")", "\n", "\n", "self", ".", "imgs", "=", "[", "[", "p", ",", "1", "]", "for", "p", "in", "fake_imgs", "]", "+", "[", "[", "p", ",", "0", "]", "for", "p", "in", "real_imgs", "]", "\n", "self", ".", "imgs", "=", "fake_imgs", "+", "real_imgs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niyunsheng_core.datasets.base_dataset.BaseDataset.__init__": [[5, 11], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "assert", "transform", "is", "not", "None", ",", "\"transform is None\"", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.datasets.base_dataset.BaseDataset.__getitem__": [[12, 20], ["PIL.Image.open().convert", "base_dataset.BaseDataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "imgs", "[", "idx", "]", "[", "0", "]", "\n", "label", "=", "self", ".", "imgs", "[", "idx", "]", "[", "1", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.niyunsheng_core.datasets.base_dataset.BaseDataset.__len__": [[21, 23], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niyunsheng_core.datasets.dfdcp.DFDCP.__init__": [[11, 31], ["base_dataset.BaseDataset.__init__", "os.path.join", "utils.log_print", "open", "json.load", "json.load.keys", "glob.glob", "glob.glob", "len", "len", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "train_type", "=", "\"train\"", ",", "transform", "=", "None", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "DFDCP", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "transform", "=", "transform", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "metadata_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"dataset.json\"", ")", "\n", "with", "open", "(", "metadata_path", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "metadata", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "assert", "train_type", "in", "[", "\"train\"", ",", "\"test\"", "]", "\n", "videos", "=", "[", "k", "for", "k", "in", "metadata", ".", "keys", "(", ")", "if", "metadata", "[", "k", "]", "[", "\"set\"", "]", "==", "train_type", "]", "\n", "\n", "real_imgs", "=", "[", "]", "\n", "fake_imgs", "=", "[", "]", "\n", "for", "video", "in", "videos", ":", "\n", "            ", "if", "metadata", "[", "video", "]", "[", "\"label\"", "]", "==", "\"real\"", ":", "\n", "                ", "real_imgs", "+=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "video", "[", ":", "-", "4", "]", ",", "\"*.png\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "fake_imgs", "+=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "video", "[", ":", "-", "4", "]", ",", "\"*.png\"", ")", ")", "\n", "\n", "", "", "log_print", "(", "\"[{}]\\t fake imgs count :{}, real imgs count :{}\"", ".", "format", "(", "train_type", ",", "len", "(", "fake_imgs", ")", ",", "len", "(", "real_imgs", ")", ")", ")", "\n", "\n", "self", ".", "imgs", "=", "[", "[", "p", ",", "1", "]", "for", "p", "in", "fake_imgs", "]", "+", "[", "[", "p", ",", "0", "]", "for", "p", "in", "real_imgs", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__": [[11, 32], ["base_dataset.BaseDataset.__init__", "utils.log_print", "glob.glob", "print", "glob.glob", "print", "os.path.join", "len", "os.path.join", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.niyunsheng_core.datasets.dffd.DFFD.__init__", "home.repos.pwc.inspect_result.niyunsheng_core.src.utils.log_print"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "train_type", "=", "\"train\"", ",", "transform", "=", "None", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "DFFD", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "transform", "=", "transform", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "real_dirs", "=", "[", "\"youtube\"", ",", "\"ffhq\"", ",", "\"celeba_2w\"", "]", "\n", "\n", "fake_dirs", "=", "[", "\"stylegan_celeba\"", ",", "\"stylegan_ffhq\"", ",", "\"faceapp\"", ",", "\"stargan\"", ",", "\"pggan_v1\"", ",", "\"pggan_v2\"", ",", "\"Deepfakes\"", ",", "\"FaceSwap\"", ",", "\"Face2Face\"", "]", "\n", "\n", "real_imgs", "=", "[", "]", "\n", "for", "d", "in", "real_dirs", ":", "\n", "            ", "tmp_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "d", ",", "train_type", ",", "\"*.png\"", ")", ")", "\n", "print", "(", "d", ",", "len", "(", "tmp_list", ")", ")", "\n", "real_imgs", "+=", "tmp_list", "\n", "", "fake_imgs", "=", "[", "]", "\n", "for", "d", "in", "fake_dirs", ":", "\n", "            ", "tmp_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "d", ",", "train_type", ",", "\"*.png\"", ")", ")", "\n", "print", "(", "d", ",", "len", "(", "tmp_list", ")", ")", "\n", "fake_imgs", "+=", "tmp_list", "\n", "\n", "", "log_print", "(", "\"[{}]\\t fake imgs count :{}, real imgs count :{}\"", ".", "format", "(", "train_type", ",", "len", "(", "fake_imgs", ")", ",", "len", "(", "real_imgs", ")", ")", ")", "\n", "\n", "self", ".", "imgs", "=", "[", "[", "p", ",", "1", "]", "for", "p", "in", "fake_imgs", "]", "+", "[", "[", "p", ",", "0", "]", "for", "p", "in", "real_imgs", "]", "\n", "", "", ""]]}