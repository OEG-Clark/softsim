{"home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.maps_to_keypoints": [[34, 82], ["torch.min", "torch.min", "ops._maps_to_coordinates", "ops._maps_to_coordinates", "torch.mean", "torch.mean", "torch.stack", "torch.stack", "print", "torch.min.detach().cpu().numpy", "torch.max", "torch.max", "torch.min.detach().cpu", "torch.min.detach"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates"], ["", "def", "maps_to_keypoints", "(", "heatmaps", ")", ":", "\n", "  ", "\"\"\"Turns feature-detector heatmaps into (x, y, scale) keypoints.\n\n  This function takes a tensor of feature maps as input. Each map is normalized\n  to a probability distribution and the location of the mean of the distribution\n  (in image coordinates) is computed. This location is used as a low-dimensional\n  representation of the heatmap (i.e. a keypoint).\n\n  To model keypoint presence/absence, the mean intensity of each feature map is\n  also computed, so that each keypoint is represented by an (x, y, scale)\n  triplet.\n\n  Args:\n    heatmaps: [batch_size, num_keypoints, H, W] tensors.\n  Returns:\n    A [batch_size, num_keypoints, 3] tensor with (x, y, scale)-triplets for each\n    keypoint. Coordinate range is [-1, 1] for x and y, and [0, 1] for scale.\n  \"\"\"", "\n", "\n", "# Check that maps are non-negative:", "\n", "map_min", "=", "torch", ".", "min", "(", "heatmaps", ")", "\n", "if", "map_min", "<", "0.0", ":", "\n", "    ", "print", "(", "\"map_min: \"", ",", "map_min", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "assert", "map_min", ">=", "0.0", "\n", "\n", "x_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "x", ")", "\n", "y_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "y", ")", "\n", "map_scales", "=", "torch", ".", "mean", "(", "heatmaps", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "'''\n  map_scales_np = map_scales.data.cpu().numpy()\n  heatmaps_np = heatmaps.data.cpu().numpy()\n  map_scales_signp = torch.mean(torch.sigmoid(heatmaps), dim=(2, 3)).data.cpu().numpy()\n  heatmaps_signp = torch.sigmoid(heatmaps).data.cpu().numpy()\n  map_scales_max = torch.max(torch.sigmoid(heatmaps), dim = -1, keepdim=True)[0]\n  map_scales_max = torch.max(map_scales_max, dim=-2, keepdim=True)[0]\n  heatmaps1 = torch.sigmoid(heatmaps) - 0.9 * map_scales_max\n  heatmaps1 = F.relu(heatmaps1)*10\n  heatmaps1_np = heatmaps1.data.cpu().numpy()\n  xy = change2xy(torch.stack((x_coordinates, y_coordinates), dim=-1), width=16)\n\n  #'''", "\n", "\n", "# Normalize map scales to [0.0, 1.0] across keypoints. This removes a", "\n", "# degeneracy between the encoder and decoder heatmap scales and ensures that", "\n", "# the scales are in a reasonable range for the RNN:", "\n", "map_scales", "/=", "(", "EPSILON", "+", "torch", ".", "max", "(", "map_scales", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "x_coordinates", ",", "y_coordinates", ",", "map_scales", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.maps_to_keypoints1": [[83, 105], ["ops._maps_to_coordinates", "ops._maps_to_coordinates", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates"], ["", "def", "maps_to_keypoints1", "(", "heatmaps", ")", ":", "\n", "  ", "\"\"\"\n  do not use miu\n  \"\"\"", "\n", "\n", "# Check that maps are non-negative:", "\n", "#map_min = torch.min(heatmaps)", "\n", "#if map_min < 0.0:", "\n", "#print(\"map_min: \", map_min.detach().cpu().numpy())", "\n", "#assert map_min >= 0.0", "\n", "\n", "#heatmaps_np = heatmaps.data.cpu().numpy()", "\n", "\n", "x_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "x", ")", "\n", "y_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "y", ")", "\n", "\n", "# Normalize map scales to [0.0, 1.0] across keypoints. This removes a", "\n", "# degeneracy between the encoder and decoder heatmap scales and ensures that", "\n", "# the scales are in a reasonable range for the RNN:", "\n", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "x_coordinates", ",", "y_coordinates", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.maps_to_keypoints1_1": [[106, 130], ["torch.min", "torch.min", "ops._maps_to_coordinates", "ops._maps_to_coordinates", "torch.stack", "torch.stack", "print", "torch.max", "torch.max", "torch.min.detach().cpu().numpy", "heatmaps.view", "heatmaps.size", "heatmaps.size", "torch.min.detach().cpu", "torch.min.detach"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates"], ["", "def", "maps_to_keypoints1_1", "(", "heatmaps", ")", ":", "\n", "  ", "\"\"\"\n  use max value as miu\n  \"\"\"", "\n", "\n", "# Check that maps are non-negative:", "\n", "map_min", "=", "torch", ".", "min", "(", "heatmaps", ")", "\n", "if", "map_min", "<", "0.0", ":", "\n", "    ", "print", "(", "\"map_min: \"", ",", "map_min", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "assert", "map_min", ">=", "0.0", "\n", "\n", "#heatmaps_np = heatmaps.data.cpu().numpy()", "\n", "\n", "x_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "x", ")", "\n", "y_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "y", ")", "\n", "\n", "map_scales", "=", "torch", ".", "max", "(", "heatmaps", ".", "view", "(", "heatmaps", ".", "size", "(", "0", ")", ",", "heatmaps", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "\n", "# Normalize map scales to [0.0, 1.0] across keypoints. This removes a", "\n", "# degeneracy between the encoder and decoder heatmap scales and ensures that", "\n", "# the scales are in a reasonable range for the RNN:", "\n", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "x_coordinates", ",", "y_coordinates", ",", "map_scales", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.maps_to_keypoints2": [[131, 156], ["torch.min", "torch.min", "F.relu.view", "torch.relu", "ops._maps_to_coordinates", "ops._maps_to_coordinates", "torch.stack", "torch.stack", "print", "F.relu.size", "F.relu.size", "torch.topk", "torch.topk", "torch.min.detach().cpu().numpy", "torch.min.detach().cpu", "torch.min.detach"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates"], ["", "def", "maps_to_keypoints2", "(", "heatmaps", ")", ":", "\n", "  ", "\"\"\"\n  do not use miu\n  use max point as coordinate\n  \"\"\"", "\n", "\n", "# Check that maps are non-negative:", "\n", "map_min", "=", "torch", ".", "min", "(", "heatmaps", ")", "\n", "if", "map_min", "<", "0.0", ":", "\n", "    ", "print", "(", "\"map_min: \"", ",", "map_min", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "assert", "map_min", ">=", "0.0", "\n", "#heatmaps_np0 = heatmaps.data.cpu().numpy()", "\n", "heatmaps1", "=", "heatmaps", ".", "view", "(", "heatmaps", ".", "size", "(", "0", ")", ",", "heatmaps", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "topk", "=", "torch", ".", "topk", "(", "heatmaps1", ",", "k", "=", "1", "+", "1", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "heatmaps", "=", "heatmaps", "-", "topk", "[", ":", ",", ":", ",", "-", "1", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "heatmaps", "=", "F", ".", "relu", "(", "heatmaps", ")", "\n", "#heatmaps_np = heatmaps.data.cpu().numpy()", "\n", "\n", "x_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "x", ")", "\n", "y_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "y", ")", "\n", "\n", "# Normalize map scales to [0.0, 1.0] across keypoints. This removes a", "\n", "# degeneracy between the encoder and decoder heatmap scales and ensures that", "\n", "# the scales are in a reasonable range for the RNN:", "\n", "return", "torch", ".", "stack", "(", "(", "x_coordinates", ",", "y_coordinates", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.maps_to_keypoints3": [[157, 183], ["torch.min", "torch.min", "F.relu.view", "torch.relu", "ops._maps_to_coordinates", "ops._maps_to_coordinates", "torch.stack", "torch.stack", "print", "F.relu.size", "F.relu.size", "torch.topk", "torch.topk", "torch.min.detach().cpu().numpy", "torch.max", "torch.max", "torch.min.detach().cpu", "torch.min.detach"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates"], ["", "def", "maps_to_keypoints3", "(", "heatmaps", ")", ":", "\n", "  ", "\"\"\"\n  use miu\n  use max point as coordinate\n  \"\"\"", "\n", "\n", "# Check that maps are non-negative:", "\n", "map_min", "=", "torch", ".", "min", "(", "heatmaps", ")", "\n", "if", "map_min", "<", "0.0", ":", "\n", "    ", "print", "(", "\"map_min: \"", ",", "map_min", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "assert", "map_min", ">=", "0.0", "\n", "heatmaps1", "=", "heatmaps", ".", "view", "(", "heatmaps", ".", "size", "(", "0", ")", ",", "heatmaps", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "topk", "=", "torch", ".", "topk", "(", "heatmaps1", ",", "k", "=", "1", "+", "1", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "heatmaps", "=", "heatmaps", "-", "topk", "[", ":", ",", ":", ",", "-", "1", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "heatmaps", "=", "F", ".", "relu", "(", "heatmaps", ")", "\n", "x_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "x", ")", "\n", "y_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "y", ")", "\n", "map_scales", "=", "topk", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "# Normalize map scales to [0.0, 1.0] across keypoints. This removes a", "\n", "# degeneracy between the encoder and decoder heatmap scales and ensures that", "\n", "# the scales are in a reasonable range for the RNN:", "\n", "map_scales", "/=", "(", "EPSILON", "+", "torch", ".", "max", "(", "map_scales", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", "\n", "#map_scales_np = map_scales.data.cpu().numpy()", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "x_coordinates", ",", "y_coordinates", ",", "map_scales", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.maps_to_keypoints4": [[184, 193], ["ops._maps_to_coordinates", "ops._maps_to_coordinates", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates"], ["", "def", "maps_to_keypoints4", "(", "heatmaps", ")", ":", "\n", "  ", "\"\"\"\n  consider variance\n  \"\"\"", "\n", "x_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "x", ")", "\n", "y_coordinates", "=", "_maps_to_coordinates", "(", "heatmaps", ",", "Axis", ".", "y", ")", "\n", "#x_variance = _maps_to_variance(heatmaps, Axis.x, x_coordinates)", "\n", "#y_variance = _maps_to_variance(heatmaps, Axis.y, y_coordinates)", "\n", "return", "torch", ".", "stack", "(", "(", "x_coordinates", ",", "y_coordinates", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.maps_to_keyareas": [[195, 208], ["torch.min", "torch.min", "print", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min.detach().cpu().numpy", "torch.min.detach().cpu", "torch.min.detach"], "function", ["None"], ["", "def", "maps_to_keyareas", "(", "heatmaps", ")", ":", "\n", "\n", "# Check that maps are non-negative:", "\n", "  ", "map_min", "=", "torch", ".", "min", "(", "heatmaps", ")", "\n", "if", "map_min", "<", "0.0", ":", "\n", "    ", "print", "(", "\"map_min: \"", ",", "map_min", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "assert", "map_min", ">=", "0.0", "\n", "map_scales_max", "=", "torch", ".", "max", "(", "heatmaps", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "map_scales_max", "=", "torch", ".", "max", "(", "map_scales_max", ",", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "heatmaps", "=", "heatmaps", "/", "map_scales_max", "\n", "#heatmaps_np = heatmaps.data.cpu().numpy()", "\n", "\n", "return", "heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.maps_to_keyareas1_1": [[209, 221], ["torch.min", "torch.min", "heatmaps.data.cpu().numpy", "print", "torch.relu", "torch.min.detach().cpu().numpy", "heatmaps.data.cpu", "torch.min.detach().cpu", "torch.min.detach"], "function", ["None"], ["", "def", "maps_to_keyareas1_1", "(", "heatmaps", ")", ":", "\n", "\n", "# Check that maps are non-negative:", "\n", "  ", "map_min", "=", "torch", ".", "min", "(", "heatmaps", ")", "\n", "if", "map_min", "<", "0.0", ":", "\n", "    ", "print", "(", "\"map_min: \"", ",", "map_min", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "assert", "map_min", ">=", "0.0", "\n", "heatmaps", "=", "heatmaps", "-", "0.8", "\n", "heatmaps", "=", "F", ".", "relu", "(", "heatmaps", ")", "*", "5", "\n", "heatmaps_np", "=", "heatmaps", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.maps_to_keyareas1": [[222, 231], ["F.relu.view", "torch.tanh", "torch.tanh", "torch.relu", "F.relu.size", "F.relu.size", "torch.topk", "torch.topk"], "function", ["None"], ["", "def", "maps_to_keyareas1", "(", "heatmaps", ")", ":", "\n", "  ", "heatmaps1", "=", "heatmaps", ".", "view", "(", "heatmaps", ".", "size", "(", "0", ")", ",", "heatmaps", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "topk", "=", "torch", ".", "topk", "(", "heatmaps1", ",", "k", "=", "48", "+", "1", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "heatmaps", "=", "heatmaps", "-", "topk", "[", ":", ",", ":", ",", "-", "1", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "heatmaps", "=", "torch", ".", "tanh", "(", "heatmaps", "*", "10000", ")", "\n", "heatmaps", "=", "F", ".", "relu", "(", "heatmaps", ")", "\n", "#heatmaps_np = heatmaps.data.cpu().numpy()", "\n", "\n", "return", "heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.maps_to_keyareas2": [[232, 242], ["torch.sum.view", "torch.relu", "torch.tanh", "torch.tanh", "torch.sum", "torch.sum", "torch.sum.size", "torch.sum.size", "torch.topk", "torch.topk"], "function", ["None"], ["", "def", "maps_to_keyareas2", "(", "heatmaps", ")", ":", "\n", "  ", "heatmaps1", "=", "heatmaps", ".", "view", "(", "heatmaps", ".", "size", "(", "0", ")", ",", "heatmaps", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "topk", "=", "torch", ".", "topk", "(", "heatmaps1", ",", "k", "=", "1", "+", "1", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "heatmaps", "=", "heatmaps", "-", "topk", "[", ":", ",", ":", ",", "-", "1", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "heatmaps", "=", "F", ".", "relu", "(", "heatmaps", ")", "\n", "heatmaps", "=", "torch", ".", "tanh", "(", "heatmaps", "*", "10000", ")", "\n", "heatmaps", "=", "torch", ".", "sum", "(", "heatmaps", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "#heatmaps_np = heatmaps.data.cpu().numpy()", "\n", "\n", "return", "heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_coordinates": [[244, 279], ["ops._get_pixel_grid", "grid.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._get_pixel_grid"], ["", "def", "_maps_to_coordinates", "(", "maps", ",", "axis", ")", ":", "\n", "  ", "\"\"\"Reduces heatmaps to coordinates along one axis (x or y).\n\n  Args:\n    maps: [batch_size, num_keypoints, H, W] tensors.\n    axis: Axis Enum.\n\n  Returns:\n    A [batch_size, num_keypoints, 2] tensor with (x, y)-coordinates.\n  \"\"\"", "\n", "\n", "width", "=", "maps", ".", "shape", "[", "axis", ".", "value", "]", "\n", "grid", "=", "_get_pixel_grid", "(", "axis", ",", "width", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "shape", "[", "axis", ".", "value", "]", "=", "-", "1", "\n", "grid", "=", "grid", ".", "view", "(", "shape", ")", "\n", "\n", "if", "axis", "==", "Axis", ".", "x", ":", "\n", "    ", "marginalize_dim", "=", "2", "\n", "", "elif", "axis", "==", "Axis", ".", "y", ":", "\n", "    ", "marginalize_dim", "=", "3", "\n", "\n", "# Normalize the heatmaps to a probability distribution (i.e. sum to 1):", "\n", "", "weights", "=", "torch", ".", "sum", "(", "maps", ",", "dim", "=", "marginalize_dim", ",", "keepdim", "=", "True", ")", "\n", "\n", "weights", "/=", "torch", ".", "sum", "(", "weights", ",", "dim", "=", "axis", ".", "value", ",", "keepdim", "=", "True", ")", "+", "EPSILON", "\n", "#weights_np = weights.data.cpu().numpy()", "\n", "\n", "# Compute the center of mass of the marginalized maps to obtain scalar", "\n", "# coordinates:", "\n", "coordinates", "=", "torch", ".", "sum", "(", "weights", "*", "grid", ",", "dim", "=", "axis", ".", "value", ",", "keepdim", "=", "True", ")", "\n", "coordinates", "=", "torch", ".", "squeeze", "(", "coordinates", ",", "-", "1", ")", "\n", "coordinates", "=", "torch", ".", "squeeze", "(", "coordinates", ",", "-", "1", ")", "\n", "\n", "return", "coordinates", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._maps_to_variance": [[280, 305], ["ops._get_pixel_grid", "grid.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._get_pixel_grid"], ["", "def", "_maps_to_variance", "(", "maps", ",", "axis", ",", "miu", ")", ":", "\n", "  ", "\"\"\"Reduces heatmaps to variances along one axis (x or y).\n  \"\"\"", "\n", "\n", "width", "=", "maps", ".", "shape", "[", "axis", ".", "value", "]", "\n", "grid", "=", "_get_pixel_grid", "(", "axis", ",", "width", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "shape", "[", "axis", ".", "value", "]", "=", "-", "1", "\n", "grid", "=", "grid", ".", "view", "(", "shape", ")", "\n", "\n", "if", "axis", "==", "Axis", ".", "x", ":", "\n", "    ", "marginalize_dim", "=", "2", "\n", "", "elif", "axis", "==", "Axis", ".", "y", ":", "\n", "    ", "marginalize_dim", "=", "3", "\n", "\n", "# Normalize the heatmaps to a probability distribution (i.e. sum to 1):", "\n", "", "weights", "=", "torch", ".", "sum", "(", "maps", "+", "EPSILON", ",", "dim", "=", "marginalize_dim", ",", "keepdim", "=", "True", ")", "\n", "\n", "weights", "/=", "torch", ".", "sum", "(", "weights", ",", "dim", "=", "axis", ".", "value", ",", "keepdim", "=", "True", ")", "\n", "miu", "=", "miu", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "var", "=", "(", "grid", "-", "miu", ")", "**", "2", "\n", "variance", "=", "torch", ".", "sum", "(", "weights", "*", "var", ",", "dim", "=", "axis", ".", "value", ",", "keepdim", "=", "True", ")", "\n", "variance", "=", "torch", ".", "squeeze", "(", "variance", ",", "-", "1", ")", "\n", "variance", "=", "torch", ".", "squeeze", "(", "variance", ",", "-", "1", ")", "\n", "return", "variance", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_maps": [[306, 346], ["torch.split", "torch.split", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mul", "torch.mul", "ops._get_pixel_grid", "_get_pixel_grid.view", "ops.keypoints_to_maps.get_grid"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._get_pixel_grid"], ["", "def", "keypoints_to_maps", "(", "keypoints", ",", "sigma", "=", "1.0", ",", "heatmap_width", "=", "16", ")", ":", "\n", "  ", "\"\"\"Turns (x, y, scale)-tuples into pixel maps with a Gaussian blob at (x, y).\n\n  Args:\n    keypoints: [batch_size, num_keypoints, 3] tensor of keypoints where the last\n      dimension contains (x, y, scale) triplets.\n    sigma: Std. dev. of the Gaussian blob, in units of heatmap pixels.\n    heatmap_width: Width of output heatmaps in pixels.\n\n  Returns:\n    A [batch_size, num_keypoints, heatmap_width, heatmap_width] tensor.\n  \"\"\"", "\n", "\n", "coordinates", ",", "map_scales", "=", "torch", ".", "split", "(", "keypoints", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "def", "get_grid", "(", "axis", ")", ":", "\n", "    ", "grid", "=", "_get_pixel_grid", "(", "axis", ",", "heatmap_width", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "shape", "[", "axis", ".", "value", "]", "=", "-", "1", "\n", "return", "grid", ".", "view", "(", "shape", ")", "\n", "\n", "# Expand to [batch_size, num_keypoints, 1, 1] for broadcasting later:", "\n", "", "x_coordinates", "=", "coordinates", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", "]", "\n", "y_coordinates", "=", "coordinates", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "1", "]", "\n", "\n", "# Create two 1-D Gaussian vectors (marginals) and multiply to get a 2-d map:", "\n", "#sigma = torch.FloatTensor(sigma)", "\n", "keypoint_width", "=", "2.0", "*", "(", "sigma", "/", "heatmap_width", ")", "**", "2.0", "\n", "\n", "x_vec", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "x", ")", "-", "x_coordinates", ")", "**", "2", "/", "keypoint_width", ")", "\n", "y_vec", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "y", ")", "-", "y_coordinates", ")", "**", "2", "/", "keypoint_width", ")", "\n", "maps", "=", "torch", ".", "mul", "(", "x_vec", ",", "y_vec", ")", "\n", "\n", "#npmaps0 = maps.data.cpu().numpy()", "\n", "maps", "=", "maps", "*", "map_scales", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", "]", "\n", "#npmaps = maps.data.cpu().numpy()", "\n", "#maps = torch.sum(maps, dim=1, keepdim=True)", "\n", "#npmaps1 = maps.detach().cpu().numpy()", "\n", "\n", "return", "maps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_maps1": [[347, 371], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mul", "torch.mul", "ops._get_pixel_grid", "_get_pixel_grid.view", "ops.keypoints_to_maps.get_grid"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._get_pixel_grid"], ["", "def", "keypoints_to_maps1", "(", "keypoints", ",", "sigma", "=", "1.0", ",", "heatmap_width", "=", "16", ")", ":", "\n", "  ", "\"\"\"\n  do not use miu\n  \"\"\"", "\n", "def", "get_grid", "(", "axis", ")", ":", "\n", "    ", "grid", "=", "_get_pixel_grid", "(", "axis", ",", "heatmap_width", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "shape", "[", "axis", ".", "value", "]", "=", "-", "1", "\n", "return", "grid", ".", "view", "(", "shape", ")", "\n", "\n", "# Expand to [batch_size, num_keypoints, 1, 1] for broadcasting later:", "\n", "", "x_coordinates", "=", "keypoints", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", "]", "\n", "y_coordinates", "=", "keypoints", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "1", "]", "\n", "\n", "# Create two 1-D Gaussian vectors (marginals) and multiply to get a 2-d map:", "\n", "#sigma = torch.FloatTensor(sigma)", "\n", "keypoint_width", "=", "2.0", "*", "(", "sigma", "/", "heatmap_width", ")", "**", "2.0", "\n", "\n", "x_vec", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "x", ")", "-", "x_coordinates", ")", "**", "2", "/", "keypoint_width", ")", "\n", "y_vec", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "y", ")", "-", "y_coordinates", ")", "**", "2", "/", "keypoint_width", ")", "\n", "maps", "=", "torch", ".", "mul", "(", "x_vec", ",", "y_vec", ")", "\n", "#maps_np = maps.data.cpu().numpy()", "\n", "\n", "return", "maps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_maps2": [[372, 399], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mul", "torch.mul", "ops._get_pixel_grid", "_get_pixel_grid.view", "torch.max", "torch.max", "torch.mul.view", "torch.mul.size", "torch.mul.size", "ops.keypoints_to_maps.get_grid"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._get_pixel_grid"], ["", "def", "keypoints_to_maps2", "(", "keypoints", ",", "sigma", "=", "1.0", ",", "heatmap_width", "=", "16", ")", ":", "\n", "  ", "\"\"\"\n  do not use miu\n  re nomalize max value\n  \"\"\"", "\n", "def", "get_grid", "(", "axis", ")", ":", "\n", "    ", "grid", "=", "_get_pixel_grid", "(", "axis", ",", "heatmap_width", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "shape", "[", "axis", ".", "value", "]", "=", "-", "1", "\n", "return", "grid", ".", "view", "(", "shape", ")", "\n", "\n", "# Expand to [batch_size, num_keypoints, 1, 1] for broadcasting later:", "\n", "", "x_coordinates", "=", "keypoints", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", "]", "\n", "y_coordinates", "=", "keypoints", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "1", "]", "\n", "\n", "# Create two 1-D Gaussian vectors (marginals) and multiply to get a 2-d map:", "\n", "#sigma = torch.FloatTensor(sigma)", "\n", "keypoint_width", "=", "2.0", "*", "(", "sigma", "/", "heatmap_width", ")", "**", "2.0", "\n", "\n", "x_vec", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "x", ")", "-", "x_coordinates", ")", "**", "2", "/", "keypoint_width", ")", "\n", "y_vec", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "y", ")", "-", "y_coordinates", ")", "**", "2", "/", "keypoint_width", ")", "\n", "maps", "=", "torch", ".", "mul", "(", "x_vec", ",", "y_vec", ")", "\n", "maps_max", "=", "torch", ".", "max", "(", "maps", ".", "view", "(", "maps", ".", "size", "(", "0", ")", ",", "maps", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "maps", "=", "maps", "/", "maps_max", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "#maps_np = maps.data.cpu().numpy()", "\n", "\n", "return", "maps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_edgemaps": [[400, 429], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mul", "torch.mul", "torch.stack", "torch.stack", "ops._get_pixel_grid", "_get_pixel_grid.view", "torch.stack.append", "ops.keypoints_to_maps.get_grid"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._get_pixel_grid"], ["", "def", "keypoints_to_edgemaps", "(", "keypoints", ",", "neighbor_link", ",", "sigma", "=", "1.0", ",", "heatmap_width", "=", "16", ")", ":", "\n", "  ", "\"\"\"\n  do not use miu\n  \"\"\"", "\n", "def", "get_grid", "(", "axis", ")", ":", "\n", "    ", "grid", "=", "_get_pixel_grid", "(", "axis", ",", "heatmap_width", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "shape", "[", "axis", ".", "value", "]", "=", "-", "1", "\n", "return", "grid", ".", "view", "(", "shape", ")", "\n", "\n", "# Expand to [batch_size, num_keypoints, 1, 1] for broadcasting later:", "\n", "", "x_coordinates", "=", "keypoints", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", "]", "\n", "y_coordinates", "=", "keypoints", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "1", "]", "\n", "\n", "# Create two 1-D Gaussian vectors (marginals) and multiply to get a 2-d map:", "\n", "#sigma = torch.FloatTensor(sigma)", "\n", "keypoint_width", "=", "2.0", "*", "(", "sigma", "/", "heatmap_width", ")", "**", "2.0", "\n", "\n", "x_vec", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "x", ")", "-", "x_coordinates", ")", "**", "2", "/", "keypoint_width", ")", "\n", "y_vec", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "y", ")", "-", "y_coordinates", ")", "**", "2", "/", "keypoint_width", ")", "\n", "maps", "=", "torch", ".", "mul", "(", "x_vec", ",", "y_vec", ")", "\n", "edgemaps", "=", "[", "]", "\n", "for", "edge", "in", "neighbor_link", ":", "\n", "    ", "edgemaps", ".", "append", "(", "maps", "[", ":", ",", "edge", "[", "0", "]", "]", "+", "maps", "[", ":", ",", "edge", "[", "1", "]", "]", ")", "\n", "", "edgemaps", "=", "torch", ".", "stack", "(", "edgemaps", ",", "dim", "=", "1", ")", "\n", "#maps_np = maps.data.cpu().numpy()", "\n", "#edgemaps_np = edgemaps.data.cpu().numpy()", "\n", "\n", "return", "edgemaps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_edgemaps1": [[430, 482], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mul", "torch.mul", "torch.stack", "torch.stack", "ops._get_pixel_grid", "_get_pixel_grid.view", "torch.stack.append", "range", "keypoints.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mul", "torch.mul", "ops.keypoints_to_maps.get_grid"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._get_pixel_grid"], ["", "def", "keypoints_to_edgemaps1", "(", "keypoints", ",", "neighbor_link", ",", "sigma", "=", "1.0", ",", "heatmap_width", "=", "16", ")", ":", "\n", "  ", "\"\"\"\n  do not use miu\n  \"\"\"", "\n", "def", "get_grid", "(", "axis", ")", ":", "\n", "    ", "grid", "=", "_get_pixel_grid", "(", "axis", ",", "heatmap_width", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "shape", "[", "axis", ".", "value", "]", "=", "-", "1", "\n", "return", "grid", ".", "view", "(", "shape", ")", "\n", "\n", "# Expand to [batch_size, num_keypoints, 1, 1] for broadcasting later:", "\n", "", "x_coordinates", "=", "keypoints", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", "]", "\n", "y_coordinates", "=", "keypoints", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "1", "]", "\n", "\n", "# Create two 1-D Gaussian vectors (marginals) and multiply to get a 2-d map:", "\n", "#sigma = torch.FloatTensor(sigma)", "\n", "keypoint_width", "=", "2.0", "*", "(", "sigma", "/", "heatmap_width", ")", "**", "2.0", "\n", "\n", "x_vec", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "x", ")", "-", "x_coordinates", ")", "**", "2", "/", "keypoint_width", ")", "\n", "y_vec", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "y", ")", "-", "y_coordinates", ")", "**", "2", "/", "keypoint_width", ")", "\n", "maps", "=", "torch", ".", "mul", "(", "x_vec", ",", "y_vec", ")", "\n", "#maps_np = maps.data.cpu().numpy()", "\n", "edgemaps", "=", "[", "]", "\n", "d", "=", "1.5", "/", "(", "heatmap_width", "-", "1", ")", "*", "2", "\n", "for", "edge", "in", "neighbor_link", ":", "\n", "    ", "edgemaps", ".", "append", "(", "maps", "[", ":", ",", "edge", "[", "0", "]", "]", "+", "maps", "[", ":", ",", "edge", "[", "1", "]", "]", ")", "\n", "dist", "=", "(", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "0", "]", "-", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "0", "]", ")", "**", "2", "+", "\n", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "1", "]", "-", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "for", "j", "in", "range", "(", "keypoints", ".", "size", "(", "0", ")", ")", ":", "\n", "      ", "if", "dist", "[", "j", "]", ">", "d", "*", "2", ":", "\n", "        ", "x_coordinates1", "=", "0.5", "*", "(", "keypoints", "[", "j", ",", "edge", "[", "0", "]", ",", "0", "]", "+", "\n", "keypoints", "[", "j", ",", "edge", "[", "1", "]", ",", "0", "]", ")", "\n", "y_coordinates1", "=", "0.5", "*", "(", "keypoints", "[", "j", ",", "edge", "[", "0", "]", ",", "1", "]", "+", "\n", "keypoints", "[", "j", ",", "edge", "[", "1", "]", ",", "1", "]", ")", "\n", "x_vec1", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "x", ")", "-", "x_coordinates1", ")", "**", "2", "/", "keypoint_width", ")", "\n", "y_vec1", "=", "torch", ".", "exp", "(", "-", "(", "get_grid", "(", "Axis", ".", "y", ")", "-", "y_coordinates1", ")", "**", "2", "/", "keypoint_width", ")", "\n", "maps1", "=", "torch", ".", "mul", "(", "x_vec1", ",", "y_vec1", ")", "\n", "edgemaps", "[", "-", "1", "]", "[", "j", "]", "+=", "maps1", "[", "0", ",", "0", "]", "\n", "", "", "'''\n    x_coordinates1 = 0.5*(keypoints[:, edge[0], np.newaxis, np.newaxis, np.newaxis, 0]+\n                          keypoints[:, edge[1], np.newaxis, np.newaxis, np.newaxis, 0])\n    y_coordinates1 = 0.5*(keypoints[:, edge[0], np.newaxis, np.newaxis, np.newaxis, 1]+\n                          keypoints[:, edge[1], np.newaxis, np.newaxis, np.newaxis, 1])\n    x_vec1 = torch.exp(-(get_grid(Axis.x) - x_coordinates1) ** 2 / keypoint_width)\n    y_vec1 = torch.exp(-(get_grid(Axis.y) - y_coordinates1) ** 2 / keypoint_width)\n    maps1 = torch.mul(x_vec1, y_vec1)\n    '''", "\n", "#maps1_np = maps1.data.cpu().numpy()", "\n", "", "edgemaps", "=", "torch", ".", "stack", "(", "edgemaps", ",", "dim", "=", "1", ")", "\n", "#edgemaps_np = edgemaps.data.cpu().numpy()", "\n", "\n", "return", "edgemaps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_edgemaps2": [[483, 525], ["torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.stack().squeeze", "torch.stack().squeeze", "ops._get_pixel_grid", "_get_pixel_grid.view", "torch.atan", "torch.atan", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.exp", "torch.exp", "torch.stack().squeeze.append", "torch.max", "torch.max", "torch.FloatTensor", "torch.FloatTensor", "torch.stack", "torch.stack", "torch.stack().squeeze.view", "torch.stack().squeeze.size", "torch.stack().squeeze.size", "ops.keypoints_to_maps.get_grid"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._get_pixel_grid"], ["", "def", "keypoints_to_edgemaps2", "(", "keypoints", ",", "neighbor_link", ",", "sigma", "=", "1.0", ",", "heatmap_width", "=", "16", ")", ":", "\n", "  ", "\"\"\"\n  do not use miu\n  rotation Gaussian\n  \"\"\"", "\n", "def", "get_grid", "(", "axis", ")", ":", "\n", "    ", "grid", "=", "_get_pixel_grid", "(", "axis", ",", "heatmap_width", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "shape", "[", "axis", ".", "value", "]", "=", "-", "1", "\n", "return", "grid", ".", "view", "(", "shape", ")", "\n", "\n", "", "keypoint_width", "=", "2.0", "*", "(", "sigma", "/", "heatmap_width", ")", "**", "2.0", "\n", "\n", "edgemaps", "=", "[", "]", "\n", "S", "=", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "/", "4", "]", "]", ")", ".", "cuda", "(", ")", "\n", "for", "edge", "in", "neighbor_link", ":", "\n", "    ", "x_coordinates1", "=", "0.5", "*", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", "]", "+", "\n", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", "]", ")", "\n", "y_coordinates1", "=", "0.5", "*", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "1", "]", "+", "\n", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "1", "]", ")", "\n", "theta", "=", "torch", ".", "atan", "(", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "1", "]", "-", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "1", "]", ")", "/", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "0", "]", "-", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "0", "]", "+", "EPSILON", ")", ")", "\n", "cos_theta", "=", "torch", ".", "cos", "(", "-", "theta", ")", "\n", "sin_theta", "=", "torch", ".", "sin", "(", "-", "theta", ")", "\n", "R1", "=", "torch", ".", "stack", "(", "[", "cos_theta", ",", "-", "sin_theta", "]", ",", "dim", "=", "-", "1", ")", "\n", "R2", "=", "torch", ".", "stack", "(", "[", "sin_theta", ",", "cos_theta", "]", ",", "dim", "=", "-", "1", ")", "\n", "R", "=", "torch", ".", "stack", "(", "[", "R1", ",", "R2", "]", ",", "dim", "=", "1", ")", "\n", "RT", "=", "torch", ".", "einsum", "(", "'...ij->...ji'", ",", "R", ")", "\n", "Sigma", "=", "torch", ".", "einsum", "(", "'bij, jk, bkm->bim'", ",", "R", ",", "S", ",", "RT", ")", "\n", "x_vec1", "=", "-", "Sigma", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", ",", "0", "]", "*", "(", "get_grid", "(", "Axis", ".", "x", ")", "-", "x_coordinates1", ")", "**", "2", "/", "keypoint_width", "\n", "y_vec1", "=", "-", "Sigma", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "1", ",", "1", "]", "*", "(", "get_grid", "(", "Axis", ".", "y", ")", "-", "y_coordinates1", ")", "**", "2", "/", "keypoint_width", "\n", "xy_vec1", "=", "-", "2", "*", "Sigma", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", ",", "1", "]", "*", "(", "get_grid", "(", "Axis", ".", "x", ")", "-", "x_coordinates1", ")", "*", "(", "get_grid", "(", "Axis", ".", "y", ")", "-", "y_coordinates1", ")", "/", "keypoint_width", "\n", "maps1", "=", "torch", ".", "exp", "(", "x_vec1", "+", "y_vec1", "+", "xy_vec1", ")", "\n", "#maps1_np = maps1.data.cpu().numpy()", "\n", "edgemaps", ".", "append", "(", "maps1", ")", "\n", "", "edgemaps", "=", "torch", ".", "stack", "(", "edgemaps", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "#edgemaps = torch.sum(edgemaps, dim=1, keepdim=True)", "\n", "edgemaps_max", "=", "torch", ".", "max", "(", "edgemaps", ".", "view", "(", "edgemaps", ".", "size", "(", "0", ")", ",", "edgemaps", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "edgemaps", "=", "edgemaps", "/", "edgemaps_max", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "#edgemaps_np = edgemaps.data.cpu().numpy()", "\n", "\n", "return", "edgemaps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_edgemaps3": [[526, 572], ["torch.stack().squeeze", "torch.stack().squeeze", "torch.sum", "torch.sum", "ops._get_pixel_grid", "_get_pixel_grid.view", "torch.atan", "torch.atan", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.einsum", "torch.einsum", "torch.stack", "torch.stack", "torch.einsum", "torch.einsum", "torch.exp", "torch.exp", "torch.sum.append", "torch.max", "torch.max", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.stack", "torch.stack", "torch.sum.view", "range", "torch.sum.size", "torch.FloatTensor", "torch.FloatTensor", "keypoints.size", "ops.keypoints_to_maps.get_grid"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._get_pixel_grid"], ["", "def", "keypoints_to_edgemaps3", "(", "keypoints", ",", "neighbor_link", ",", "sigma", "=", "1.0", ",", "heatmap_width", "=", "16", ")", ":", "\n", "  ", "\"\"\"\n  do not use miu\n  rotation Gaussian\n  changable variance\n  \"\"\"", "\n", "def", "get_grid", "(", "axis", ")", ":", "\n", "    ", "grid", "=", "_get_pixel_grid", "(", "axis", ",", "heatmap_width", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "shape", "[", "axis", ".", "value", "]", "=", "-", "1", "\n", "return", "grid", ".", "view", "(", "shape", ")", "\n", "\n", "", "keypoint_width", "=", "2.0", "*", "(", "sigma", "/", "heatmap_width", ")", "**", "2.0", "\n", "\n", "edgemaps", "=", "[", "]", "\n", "for", "edge", "in", "neighbor_link", ":", "\n", "    ", "dist", "=", "(", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "0", "]", "-", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "0", "]", ")", "**", "2", "+", "\n", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "1", "]", "-", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "x_coordinates1", "=", "0.5", "*", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", "]", "+", "\n", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", "]", ")", "\n", "y_coordinates1", "=", "0.5", "*", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "1", "]", "+", "\n", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "1", "]", ")", "\n", "theta", "=", "torch", ".", "atan", "(", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "1", "]", "-", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "1", "]", ")", "/", "(", "keypoints", "[", ":", ",", "edge", "[", "0", "]", ",", "0", "]", "-", "keypoints", "[", ":", ",", "edge", "[", "1", "]", ",", "0", "]", "+", "EPSILON", ")", ")", "\n", "cos_theta", "=", "torch", ".", "cos", "(", "-", "theta", ")", "\n", "sin_theta", "=", "torch", ".", "sin", "(", "-", "theta", ")", "\n", "R1", "=", "torch", ".", "stack", "(", "[", "cos_theta", ",", "-", "sin_theta", "]", ",", "dim", "=", "-", "1", ")", "\n", "R2", "=", "torch", ".", "stack", "(", "[", "sin_theta", ",", "cos_theta", "]", ",", "dim", "=", "-", "1", ")", "\n", "R", "=", "torch", ".", "stack", "(", "[", "R1", ",", "R2", "]", ",", "dim", "=", "1", ")", "\n", "RT", "=", "torch", ".", "einsum", "(", "'...ij->...ji'", ",", "R", ")", "\n", "S", "=", "[", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "/", "4", "/", "(", "1", "+", "dist", "[", "i", "]", "*", "10", ")", "]", "]", ")", ".", "cuda", "(", ")", "for", "i", "in", "range", "(", "keypoints", ".", "size", "(", "0", ")", ")", "]", "\n", "S", "=", "torch", ".", "stack", "(", "S", ")", "\n", "Sigma", "=", "torch", ".", "einsum", "(", "'bij, bjk, bkm->bim'", ",", "R", ",", "S", ",", "RT", ")", "\n", "x_vec1", "=", "-", "Sigma", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", ",", "0", "]", "*", "(", "get_grid", "(", "Axis", ".", "x", ")", "-", "x_coordinates1", ")", "**", "2", "/", "keypoint_width", "\n", "y_vec1", "=", "-", "Sigma", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "1", ",", "1", "]", "*", "(", "get_grid", "(", "Axis", ".", "y", ")", "-", "y_coordinates1", ")", "**", "2", "/", "keypoint_width", "\n", "xy_vec1", "=", "-", "2", "*", "Sigma", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", ",", "1", "]", "*", "(", "get_grid", "(", "Axis", ".", "x", ")", "-", "x_coordinates1", ")", "*", "(", "get_grid", "(", "Axis", ".", "y", ")", "-", "y_coordinates1", ")", "/", "keypoint_width", "\n", "maps1", "=", "torch", ".", "exp", "(", "x_vec1", "+", "y_vec1", "+", "xy_vec1", ")", "\n", "#maps1_np = maps1.data.cpu().numpy()", "\n", "edgemaps", ".", "append", "(", "maps1", ")", "\n", "", "edgemaps", "=", "torch", ".", "stack", "(", "edgemaps", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "edgemaps", "=", "torch", ".", "sum", "(", "edgemaps", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "edgemaps_max", "=", "torch", ".", "max", "(", "edgemaps", ".", "view", "(", "edgemaps", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "edgemaps", "=", "edgemaps", "/", "edgemaps_max", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "#edgemaps_np = edgemaps.data.cpu().numpy()", "\n", "\n", "return", "edgemaps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops._get_pixel_grid": [[573, 579], ["torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "function", ["None"], ["", "def", "_get_pixel_grid", "(", "axis", ",", "width", ")", ":", "\n", "  ", "\"\"\"Returns an array of length `width` containing pixel coordinates.\"\"\"", "\n", "if", "axis", "==", "Axis", ".", "x", ":", "\n", "    ", "return", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "width", ")", ".", "cuda", "(", ")", "# Left is negative, right is positive.", "\n", "", "elif", "axis", "==", "Axis", ".", "y", ":", "\n", "    ", "return", "torch", ".", "linspace", "(", "1.0", ",", "-", "1.0", ",", "width", ")", ".", "cuda", "(", ")", "# Top is positive, bottom is negative.", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.change2xy": [[581, 586], ["keypoints[].detach().cpu().numpy", "numpy.round", "numpy.round", "numpy.uint8", "keypoints[].detach().cpu", "keypoints[].detach"], "function", ["None"], ["", "", "def", "change2xy", "(", "cfg", ",", "keypoints", ")", ":", "\n", "  ", "xy", "=", "keypoints", "[", ":", ",", ":", ",", ":", "2", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "xy", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "round", "(", "(", "1", "+", "xy", "[", ":", ",", ":", ",", "0", "]", ")", "*", "(", "cfg", ".", "img_w", "-", "1", ")", "/", "2", ")", "\n", "xy", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "round", "(", "(", "1", "-", "xy", "[", ":", ",", ":", ",", "1", "]", ")", "*", "(", "cfg", ".", "img_w", "-", "1", ")", "/", "2", ")", "\n", "return", "np", ".", "uint8", "(", "xy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.add_keypoints": [[587, 613], ["torch.ones_like().cuda", "torch.ones_like().cuda", "range", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "len", "torch.ones_like", "torch.ones_like", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "add_keypoints", "(", "image", ",", "key_points", ",", "radius", "=", "1", ",", "miu", "=", "None", ")", ":", "# image in [-0.5, 0.5]", "\n", "  ", "im_key", "=", "torch", ".", "ones_like", "(", "image", ")", ".", "cuda", "(", ")", "\n", "if", "not", "(", "miu", "is", "None", ")", ":", "\n", "    ", "im_key1", "=", "torch", ".", "zeros_like", "(", "image", ")", ".", "cuda", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "key_points", ")", ")", ":", "\n", "    ", "x", "=", "[", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "0", "]", "-", "radius", ",", "0", ",", "63", ")", ",", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "0", "]", "+", "radius", ",", "0", ",", "63", ")", "]", "\n", "y", "=", "[", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "1", "]", "-", "radius", ",", "0", ",", "63", ")", ",", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "1", "]", "+", "radius", ",", "0", ",", "63", ")", "]", "\n", "im_key", "[", ":", ",", "y", "[", "0", "]", ":", "y", "[", "1", "]", "+", "1", ",", "key_points", "[", "i", "]", "[", "0", "]", "]", "=", "0", "\n", "im_key", "[", ":", ",", "key_points", "[", "i", "]", "[", "1", "]", ",", "x", "[", "0", "]", ":", "x", "[", "1", "]", "+", "1", "]", "=", "0", "\n", "if", "not", "(", "miu", "is", "None", ")", ":", "\n", "      ", "if", "miu", "[", "i", "]", ">", "0", ":", "\n", "        ", "im_key1", "[", ":", ",", "y", "[", "0", "]", ":", "y", "[", "1", "]", "+", "1", ",", "key_points", "[", "i", "]", "[", "0", "]", "]", "=", "miu", "[", "i", "]", "\n", "im_key1", "[", ":", ",", "key_points", "[", "i", "]", "[", "1", "]", ",", "x", "[", "0", "]", ":", "x", "[", "1", "]", "+", "1", "]", "=", "miu", "[", "i", "]", "\n", "\n", "", "", "", "if", "not", "(", "miu", "is", "None", ")", ":", "\n", "    ", "image", "*=", "im_key", "\n", "im_key", "=", "1", "-", "im_key", "\n", "image", "+=", "-", "0.5", "*", "im_key", "\n", "image", "+=", "im_key1", "\n", "", "else", ":", "\n", "#im_key_np = im_key.data.cpu().numpy()", "\n", "    ", "image", "*=", "im_key", "\n", "im_key", "=", "1", "-", "im_key", "\n", "image", "+=", "0.5", "*", "im_key", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.show_keypoints": [[614, 623], ["torch.zeros_like().cuda", "torch.zeros_like().cuda", "range", "len", "torch.zeros_like", "torch.zeros_like", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "function", ["None"], ["", "def", "show_keypoints", "(", "image", ",", "key_points", ",", "img_w", ",", "radius", "=", "1", ")", ":", "\n", "  ", "im_key", "=", "torch", ".", "zeros_like", "(", "image", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "key_points", ")", ")", ":", "\n", "    ", "x", "=", "[", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "0", "]", "-", "radius", ",", "0", ",", "img_w", "-", "1", ")", ",", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "0", "]", "+", "radius", ",", "0", ",", "img_w", "-", "1", ")", "]", "\n", "y", "=", "[", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "1", "]", "-", "radius", ",", "0", ",", "img_w", "-", "1", ")", ",", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "1", "]", "+", "radius", ",", "0", ",", "img_w", "-", "1", ")", "]", "\n", "im_key", "[", ":", ",", "y", "[", "0", "]", ":", "y", "[", "1", "]", "+", "1", ",", "key_points", "[", "i", "]", "[", "0", "]", "]", "=", "1", "\n", "im_key", "[", ":", ",", "key_points", "[", "i", "]", "[", "1", "]", ",", "x", "[", "0", "]", ":", "x", "[", "1", "]", "+", "1", "]", "=", "1", "\n", "", "return", "im_key", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.hyperparameters.ConfigDict.__getattr__": [[23, 28], ["AttributeError"], "methods", ["None"], ["def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "    ", "try", ":", "\n", "      ", "return", "self", "[", "name", "]", "\n", "", "except", "KeyError", ":", "\n", "      ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.hyperparameters.ConfigDict.__setattr__": [[29, 31], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "    ", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.hyperparameters.ConfigDict.get": [[32, 37], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "key", ",", "default", "=", "None", ")", ":", "\n", "    ", "\"\"\"Allows to specify defaults when accessing the config.\"\"\"", "\n", "if", "key", "not", "in", "self", ":", "\n", "      ", "return", "default", "\n", "", "return", "self", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.hyperparameters.get_config": [[39, 108], ["hyperparameters.ConfigDict", "hyperparameters._conv_layer_kwargs", "hyperparameters._dense_layer_kwargs", "int"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.hyperparameters._conv_layer_kwargs", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.hyperparameters._dense_layer_kwargs"], ["", "", "def", "get_config", "(", ")", ":", "\n", "  ", "\"\"\"Default values for all hyperparameters.\"\"\"", "\n", "\n", "cfg", "=", "ConfigDict", "(", ")", "\n", "\n", "cfg", ".", "seed", "=", "1", "\n", "\n", "# Directories:", "\n", "cfg", ".", "dataset", "=", "'Human3.6m'", "\n", "cfg", ".", "data_root", "=", "'../Dataset'", "\n", "cfg", ".", "train_dir", "=", "'train_list.txt'", "\n", "cfg", ".", "test_dir", "=", "'test_list.txt'", "\n", "\n", "# Architecture:", "\n", "cfg", ".", "layers_per_scale", "=", "2", "\n", "cfg", ".", "conv_layer_kwargs", "=", "_conv_layer_kwargs", "(", ")", "\n", "cfg", ".", "dense_layer_kwargs", "=", "_dense_layer_kwargs", "(", ")", "\n", "\n", "# Optimization:", "\n", "cfg", ".", "batch_size", "=", "32", "\n", "cfg", ".", "test_batch_size", "=", "8", "\n", "cfg", ".", "test_N", "=", "224", "\n", "cfg", ".", "steps_per_epoch", "=", "600", "//", "cfg", ".", "batch_size", "\n", "cfg", ".", "num_epochs", "=", "1000", "\n", "cfg", ".", "learning_rate", "=", "0.001", "\n", "cfg", ".", "clipnorm", "=", "1", "\n", "\n", "# Image sequence parameters:", "\n", "cfg", ".", "observed_steps", "=", "10", "\n", "cfg", ".", "predicted_steps", "=", "10", "\n", "cfg", ".", "seq_len", "=", "cfg", ".", "observed_steps", "+", "cfg", ".", "predicted_steps", "\n", "cfg", ".", "n_eval", "=", "50", "\n", "cfg", ".", "img_w", "=", "64", "\n", "cfg", ".", "img_h", "=", "64", "\n", "\n", "# Keypoint encoding settings:", "\n", "cfg", ".", "num_keypoints", "=", "48", "\n", "cfg", ".", "heatmap_width", "=", "16", "\n", "cfg", ".", "heatmap_regularization", "=", "1e-2", "\n", "cfg", ".", "keypoint_width", "=", "1.5", "\n", "cfg", ".", "num_encoder_filters", "=", "32", "\n", "cfg", ".", "separation_loss_scale", "=", "2e-2", "\n", "cfg", ".", "separation_loss_sigma", "=", "2e-3", "\n", "cfg", ".", "reg_lambda", "=", "1e-4", "\n", "\n", "# Agent settings:", "\n", "cfg", ".", "hidden_size", "=", "128", "\n", "cfg", ".", "n_layers", "=", "2", "\n", "\n", "# Dynamics:", "\n", "cfg", ".", "num_rnn_units", "=", "512", "\n", "cfg", ".", "convgru_units", "=", "32", "\n", "cfg", ".", "convprior_net_dim", "=", "32", "\n", "cfg", ".", "convposterior_net_dim", "=", "32", "\n", "cfg", ".", "prior_net_dim", "=", "4", "\n", "cfg", ".", "posterior_net_dim", "=", "128", "\n", "cfg", ".", "latent_code_size", "=", "16", "\n", "cfg", ".", "kl_loss_scale", "=", "1e-2", "\n", "cfg", ".", "kl_annealing_steps", "=", "1000", "\n", "cfg", ".", "use_deterministic_belief", "=", "False", "\n", "cfg", ".", "scheduled_sampling_ramp_steps", "=", "(", "cfg", ".", "steps_per_epoch", "*", "int", "(", "cfg", ".", "num_epochs", "*", "0.8", ")", ")", "\n", "cfg", ".", "scheduled_sampling_p_true_start_obs", "=", "1.0", "\n", "cfg", ".", "scheduled_sampling_p_true_end_obs", "=", "0.1", "\n", "cfg", ".", "scheduled_sampling_p_true_start_pred", "=", "1.0", "\n", "cfg", ".", "scheduled_sampling_p_true_end_pred", "=", "0.5", "\n", "cfg", ".", "num_samples_for_bom", "=", "10", "\n", "cfg", ".", "nsample", "=", "100", "\n", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.hyperparameters._conv_layer_kwargs": [[110, 127], ["hyperparameters.ConfigDict"], "function", ["None"], ["", "def", "_conv_layer_kwargs", "(", ")", ":", "\n", "  ", "\"\"\"Returns a configDict with default conv layer hyperparameters.\"\"\"", "\n", "\n", "cfg", "=", "ConfigDict", "(", ")", "\n", "\n", "cfg", ".", "kernel_size", "=", "3", "\n", "cfg", ".", "padding", "=", "1", "\n", "#cfg.activation = tf.nn.leaky_relu", "\n", "#cfg.kernel_regularizer = tf.keras.regularizers.l2(1e-4)", "\n", "\n", "# He-uniform initialization is suggested by this paper:", "\n", "# https://arxiv.org/abs/1803.01719", "\n", "# The paper only considers ReLU units and it might be different for leaky", "\n", "# ReLU, but it is a better guess than Glorot.", "\n", "#cfg.kernel_initializer = 'he_uniform'", "\n", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.hyperparameters._dense_layer_kwargs": [[129, 137], ["hyperparameters.ConfigDict"], "function", ["None"], ["", "def", "_dense_layer_kwargs", "(", ")", ":", "\n", "  ", "\"\"\"Returns a configDict with default dense layer hyperparameters.\"\"\"", "\n", "\n", "cfg", "=", "ConfigDict", "(", ")", "\n", "#cfg.activation = tf.nn.relu", "\n", "#cfg.kernel_initializer = 'he_uniform'", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_image_encoder.__init__": [[52, 96], ["torch.Module.__init__", "range", "total_modules.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "numpy.log2", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "modules.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.extend", "range", "total_modules.append", "modules.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_keypoints_to_images_net_2image.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "initial_num_filters", "=", "32", ",", "output_map_width", "=", "16", ",", "\n", "layers_per_scale", "=", "1", ",", "**", "conv_layer_kwargs", ")", ":", "\n", "        ", "super", "(", "build_image_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "np", ".", "log2", "(", "input_shape", "[", "1", "]", "/", "output_map_width", ")", "%", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'The ratio of input width and output_map_width must be a perfect '", "\n", "'square, but got {} and {} with ratio {}'", ".", "format", "(", "\n", "input_shape", "[", "1", "]", ",", "output_map_width", ",", "input_shape", "[", "1", "]", "/", "output_map_width", ")", ")", "\n", "", "total_modules", "=", "[", "]", "\n", "modules", "=", "[", "nn", ".", "Conv2d", "(", "input_shape", "[", "0", "]", ",", "initial_num_filters", ",", "\n", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "initial_num_filters", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "# Expand image to initial_num_filters maps:", "\n", "for", "_", "in", "range", "(", "layers_per_scale", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "initial_num_filters", ",", "initial_num_filters", ",", "\n", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "initial_num_filters", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "total_modules", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "modules", ")", ")", "\n", "modules", "=", "[", "]", "\n", "\n", "# Apply downsampling blocks until feature map width is output_map_width:", "\n", "width", "=", "input_shape", "[", "2", "]", "\n", "num_filters", "=", "initial_num_filters", "\n", "while", "width", ">", "output_map_width", ":", "\n", "# Reduce resolution:", "\n", "            ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", "*", "2", ",", "\n", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "\n", "# Apply additional layers:", "\n", "for", "_", "in", "range", "(", "layers_per_scale", ")", ":", "\n", "                ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", "*", "2", ",", "num_filters", "*", "2", ",", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "num_filters", "*=", "2", "\n", "width", "//=", "2", "\n", "total_modules", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "modules", ")", ")", "\n", "modules", "=", "[", "]", "\n", "", "self", ".", "conv", "=", "nn", ".", "ModuleList", "(", "total_modules", ")", "\n", "self", ".", "mp", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_image_encoder.forward": [[97, 102], ["vision_BN3_1.build_image_encoder.mp", "vision_BN3_1.build_image_encoder.mp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h1", "=", "self", ".", "conv", "[", "0", "]", "(", "input", ")", "\n", "h2", "=", "self", ".", "conv", "[", "1", "]", "(", "self", ".", "mp", "(", "h1", ")", ")", "\n", "h3", "=", "self", ".", "conv", "[", "2", "]", "(", "self", ".", "mp", "(", "h2", ")", ")", "\n", "return", "h3", ",", "[", "h2", ",", "h1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_image_decoder.__init__": [[122, 171], ["torch.Module.__init__", "numpy.log2", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "range", "total_modules.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "modules.extend", "range", "total_modules.append", "modules.extend", "modules.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "modules.extend", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "modules.extend", "modules.extend", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_keypoints_to_images_net_2image.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "output_width", ",", "layers_per_scale", "=", "1", ",", "**", "conv_layer_kwargs", ")", ":", "\n", "        ", "super", "(", "build_image_decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_levels", "=", "np", ".", "log2", "(", "output_width", "/", "input_shape", "[", "2", "]", ")", "\n", "if", "self", ".", "num_levels", "%", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'The ratio of output_width and input width must be a perfect '", "\n", "'square, but got {} and {} with ratio {}'", ".", "format", "(", "\n", "output_width", ",", "input_shape", "[", "2", "]", ",", "output_width", "/", "input_shape", "[", "2", "]", ")", ")", "\n", "\n", "# Expand until we have filters_out channels:", "\n", "", "self", ".", "num_filters", "=", "input_shape", "[", "0", "]", "\n", "num_filters", "=", "input_shape", "[", "0", "]", "\n", "self", ".", "up", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "total_modules", "=", "[", "]", "\n", "modules", "=", "[", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "# Expand image to initial_num_filters maps:", "\n", "for", "i", "in", "range", "(", "layers_per_scale", ")", ":", "\n", "            ", "if", "i", "<", "layers_per_scale", "-", "1", ":", "\n", "                ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "\n", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", "//", "2", ",", "\n", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "", "total_modules", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "modules", ")", ")", "\n", "modules", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "self", ".", "num_levels", ")", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", "//", "2", ",", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "# Apply additional layers:", "\n", "for", "j", "in", "range", "(", "layers_per_scale", ")", ":", "\n", "                ", "if", "j", "<", "layers_per_scale", "-", "1", ":", "\n", "                    ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", "//", "2", ",", "num_filters", "//", "2", ",", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "if", "i", "<", "layers_per_scale", "-", "1", ":", "\n", "                        ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", "//", "2", ",", "num_filters", "//", "4", ",", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "else", ":", "\n", "                        ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", "//", "2", ",", "num_filters", "//", "2", ",", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "", "", "num_filters", "//=", "2", "\n", "total_modules", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "modules", ")", ")", "\n", "modules", "=", "[", "]", "\n", "", "self", ".", "out_filters", "=", "num_filters", "\n", "self", ".", "conv", "=", "nn", ".", "ModuleList", "(", "total_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_image_decoder.forward": [[172, 179], ["vision_BN3_1.build_image_decoder.up", "vision_BN3_1.build_image_decoder.up", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "skip", ")", ":", "\n", "        ", "d1", "=", "self", ".", "conv", "[", "0", "]", "(", "x", ")", "\n", "up1", "=", "self", ".", "up", "(", "d1", ")", "\n", "d2", "=", "self", ".", "conv", "[", "1", "]", "(", "torch", ".", "cat", "(", "[", "up1", ",", "skip", "[", "0", "]", "]", ",", "1", ")", ")", "\n", "up2", "=", "self", ".", "up", "(", "d2", ")", "\n", "d3", "=", "self", ".", "conv", "[", "2", "]", "(", "torch", ".", "cat", "(", "[", "up2", ",", "skip", "[", "1", "]", "]", ",", "1", ")", ")", "\n", "return", "d3", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_images_to_keypoints_net.__init__": [[193, 211], ["torch.Module.__init__", "vision_BN3_1.build_image_encoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_keypoints_to_images_net_2image.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "image_shape", ")", ":", "\n", "        ", "super", "(", "build_images_to_keypoints_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Adjust channel number to account for add_coord_channels:", "\n", "encoder_input_shape", "=", "image_shape", "\n", "#encoder_input_shape[0] += 2", "\n", "# Build feature extractor:", "\n", "self", ".", "image_encoder", "=", "build_image_encoder", "(", "\n", "input_shape", "=", "encoder_input_shape", ",", "\n", "initial_num_filters", "=", "cfg", ".", "num_encoder_filters", ",", "\n", "output_map_width", "=", "cfg", ".", "heatmap_width", ",", "\n", "layers_per_scale", "=", "cfg", ".", "layers_per_scale", ",", "\n", "**", "cfg", ".", "conv_layer_kwargs", ")", "\n", "\n", "# Build final layer that maps to the desired number of heatmaps:", "\n", "self", ".", "features_to_keypoint_heatmaps", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "cfg", ".", "img_w", "//", "cfg", ".", "heatmap_width", "*", "cfg", ".", "num_encoder_filters", ",", "\n", "cfg", ".", "num_keypoints", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_images_to_keypoints_net.forward": [[212, 225], ["vision_BN3_1.build_images_to_keypoints_net.image_encoder", "vision_BN3_1.build_images_to_keypoints_net.features_to_keypoint_heatmaps", "ops.maps_to_keypoints1", "ops.keypoints_to_maps1", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.maps_to_keypoints1", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_maps1"], ["", "def", "forward", "(", "self", ",", "image", ",", "pre_keypoints", "=", "None", ")", ":", "\n", "#image = ops.add_coord_channels(image)", "\n", "        ", "encoded", ",", "_", "=", "self", ".", "image_encoder", "(", "image", ")", "\n", "heatmaps", "=", "self", ".", "features_to_keypoint_heatmaps", "(", "encoded", ")", "\n", "if", "not", "pre_keypoints", "is", "None", ":", "\n", "            ", "pre_gaussian_maps", "=", "ops", ".", "keypoints_to_maps1", "(", "pre_keypoints", ",", "sigma", "=", "3.0", ")", "\n", "", "else", ":", "\n", "            ", "pre_gaussian_maps", "=", "torch", ".", "ones_like", "(", "heatmaps", ")", ".", "cuda", "(", ")", "\n", "#pre_gaussian_maps_np = pre_gaussian_maps.data.cpu().numpy()", "\n", "#heatmaps_np = heatmaps.data.cpu().numpy()", "\n", "#keymap_np = (heatmaps * pre_gaussian_maps).data.cpu().numpy()", "\n", "", "keypoints", "=", "ops", ".", "maps_to_keypoints1", "(", "heatmaps", "*", "pre_gaussian_maps", ")", "\n", "return", "keypoints", ",", "heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_keypoints_to_images_net.__init__": [[245, 282], ["torch.Module.__init__", "vision_BN3_1.build_image_encoder", "vision_BN3_1.build_image_decoder", "dict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_keypoints_to_images_net_2image.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "image_shape", ")", ":", "\n", "        ", "super", "(", "build_keypoints_to_images_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Build encoder net to extract appearance features from the first frame:", "\n", "self", ".", "keypoint_width", "=", "cfg", ".", "keypoint_width", "\n", "self", ".", "heatmap_width", "=", "cfg", ".", "heatmap_width", "\n", "self", ".", "appearance_feature_extractor", "=", "build_image_encoder", "(", "\n", "input_shape", "=", "image_shape", ",", "\n", "initial_num_filters", "=", "cfg", ".", "num_encoder_filters", ",", "\n", "layers_per_scale", "=", "cfg", ".", "layers_per_scale", ",", "\n", "**", "cfg", ".", "conv_layer_kwargs", ")", "\n", "\n", "# Build image decoder that goes from Gaussian maps to reconstructed images:", "\n", "num_encoder_output_channels", "=", "(", "\n", "cfg", ".", "num_encoder_filters", "*", "image_shape", "[", "1", "]", "//", "cfg", ".", "heatmap_width", ")", "\n", "input_shape", "=", "[", "num_encoder_output_channels", ",", "cfg", ".", "heatmap_width", ",", "\n", "cfg", ".", "heatmap_width", "]", "\n", "self", ".", "image_decoder", "=", "build_image_decoder", "(", "\n", "input_shape", "=", "input_shape", ",", "\n", "output_width", "=", "image_shape", "[", "1", "]", ",", "\n", "layers_per_scale", "=", "cfg", ".", "layers_per_scale", ",", "\n", "**", "cfg", ".", "conv_layer_kwargs", ")", "\n", "\n", "# Build layers to adjust channel numbers for decoder input and output image:", "\n", "kwargs", "=", "dict", "(", "cfg", ".", "conv_layer_kwargs", ")", "\n", "kwargs", "[", "'kernel_size'", "]", "=", "1", "\n", "kwargs", "[", "'padding'", "]", "=", "0", "\n", "self", ".", "adjust_channels_of_decoder_input", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "cfg", ".", "num_keypoints", "\n", "+", "cfg", ".", "num_encoder_filters", "*", "cfg", ".", "img_w", "//", "cfg", ".", "heatmap_width", "\n", ",", "num_encoder_output_channels", ",", "**", "kwargs", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "\n", "kwargs", "=", "dict", "(", "cfg", ".", "conv_layer_kwargs", ")", "\n", "kwargs", "[", "'kernel_size'", "]", "=", "1", "\n", "kwargs", "[", "'padding'", "]", "=", "0", "\n", "self", ".", "adjust_channels_of_output_image", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "image_decoder", ".", "out_filters", ",", "image_shape", "[", "0", "]", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_keypoints_to_images_net.forward": [[283, 315], ["vision_BN3_1.build_keypoints_to_images_net.appearance_feature_extractor", "ops.keypoints_to_maps2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vision_BN3_1.build_keypoints_to_images_net.adjust_channels_of_decoder_input", "vision_BN3_1.build_keypoints_to_images_net.image_decoder", "vision_BN3_1.build_keypoints_to_images_net.adjust_channels_of_output_image", "ops.keypoints_to_maps2"], "methods", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_maps2", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_maps2"], ["", "def", "forward", "(", "self", ",", "keypoints", ",", "first_frame", ",", "first_frame_keypoints", ",", "predicted_gaussian_maps", "=", "None", ")", ":", "\n", "# Get features and maps for first frame:", "\n", "# Note that we cannot use the Gaussian maps above because the", "\n", "# first_frame_keypoints may be different than the keypoints (i.e. obs vs", "\n", "# pred).", "\n", "        ", "first_frame_features", ",", "skip", "=", "self", ".", "appearance_feature_extractor", "(", "first_frame", ")", "\n", "first_frame_gaussian_maps", "=", "ops", ".", "keypoints_to_maps2", "(", "first_frame_keypoints", ",", "\n", "sigma", "=", "self", ".", "keypoint_width", ",", "\n", "heatmap_width", "=", "self", ".", "heatmap_width", ")", "\n", "\n", "# Convert keypoints to pixel maps:", "\n", "if", "predicted_gaussian_maps", "is", "None", ":", "\n", "            ", "gaussian_maps", "=", "ops", ".", "keypoints_to_maps2", "(", "keypoints", ",", "\n", "sigma", "=", "self", ".", "keypoint_width", ",", "\n", "heatmap_width", "=", "self", ".", "heatmap_width", ")", "\n", "", "else", ":", "\n", "            ", "gaussian_maps", "=", "predicted_gaussian_maps", "\n", "\n", "# Reconstruct image:", "\n", "", "gaussian_maps", "=", "gaussian_maps", "-", "first_frame_gaussian_maps", "\n", "combined_representation", "=", "torch", ".", "cat", "(", "(", "gaussian_maps", ",", "first_frame_features", ")", ",", "1", ")", "\n", "#combined_representation = ops.add_coord_channels(combined_representation)", "\n", "combined_representation", "=", "self", ".", "adjust_channels_of_decoder_input", "(", "\n", "combined_representation", ")", "\n", "decoded_representation", "=", "self", ".", "image_decoder", "(", "combined_representation", ",", "skip", ")", "\n", "image", "=", "self", ".", "adjust_channels_of_output_image", "(", "decoded_representation", ")", "\n", "\n", "# Add in the first frame of the sequence such that the model only needs to", "\n", "# predict the change from the first frame:", "\n", "image", "=", "image", "+", "first_frame", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_image_decoder_2image.__init__": [[317, 372], ["torch.Module.__init__", "numpy.log2", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "range", "total_modules.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "modules.extend", "range", "total_modules.append", "modules.extend", "modules.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "modules.extend", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "modules.extend", "modules.extend", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_keypoints_to_images_net_2image.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "output_width", ",", "layers_per_scale", "=", "1", ",", "**", "conv_layer_kwargs", ")", ":", "\n", "        ", "super", "(", "build_image_decoder_2image", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_levels", "=", "np", ".", "log2", "(", "output_width", "/", "input_shape", "[", "2", "]", ")", "\n", "if", "self", ".", "num_levels", "%", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'The ratio of output_width and input width must be a perfect '", "\n", "'square, but got {} and {} with ratio {}'", ".", "format", "(", "\n", "output_width", ",", "input_shape", "[", "2", "]", ",", "output_width", "/", "input_shape", "[", "2", "]", ")", ")", "\n", "\n", "# Expand until we have filters_out channels:", "\n", "", "self", ".", "num_filters", "=", "input_shape", "[", "0", "]", "\n", "num_filters", "=", "input_shape", "[", "0", "]", "\n", "self", ".", "up", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "total_modules", "=", "[", "]", "\n", "modules", "=", "[", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "# Expand image to initial_num_filters maps:", "\n", "for", "i", "in", "range", "(", "layers_per_scale", ")", ":", "\n", "            ", "if", "i", "<", "layers_per_scale", "-", "1", ":", "\n", "                ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "\n", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", "//", "2", ",", "\n", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "", "total_modules", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "modules", ")", ")", "\n", "modules", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "self", ".", "num_levels", ")", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", "//", "2", ",", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "# Apply additional layers:", "\n", "for", "j", "in", "range", "(", "layers_per_scale", ")", ":", "\n", "                ", "if", "j", "<", "layers_per_scale", "-", "1", ":", "\n", "                    ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", "//", "2", ",", "num_filters", "//", "2", ",", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "if", "i", "<", "layers_per_scale", "-", "1", ":", "\n", "                        ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", "//", "2", ",", "num_filters", "//", "4", ",", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", "//", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "else", ":", "\n", "                        ", "modules", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "num_filters", "//", "2", ",", "num_filters", "//", "2", ",", "**", "conv_layer_kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ")", "\n", "", "", "", "num_filters", "//=", "2", "\n", "total_modules", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "modules", ")", ")", "\n", "modules", "=", "[", "]", "\n", "", "self", ".", "out_filters", "=", "num_filters", "\n", "self", ".", "conv", "=", "nn", ".", "ModuleList", "(", "total_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_image_decoder_2image.forward": [[373, 380], ["vision_BN3_1.build_image_decoder_2image.up", "vision_BN3_1.build_image_decoder_2image.up", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "skip", ")", ":", "\n", "        ", "d1", "=", "self", ".", "conv", "[", "0", "]", "(", "x", ")", "\n", "up1", "=", "self", ".", "up", "(", "d1", ")", "\n", "d2", "=", "self", ".", "conv", "[", "1", "]", "(", "torch", ".", "cat", "(", "[", "up1", ",", "skip", "[", "0", "]", "]", ",", "1", ")", ")", "\n", "up2", "=", "self", ".", "up", "(", "d2", ")", "\n", "d3", "=", "self", ".", "conv", "[", "2", "]", "(", "torch", ".", "cat", "(", "[", "up2", ",", "skip", "[", "1", "]", "]", ",", "1", ")", ")", "\n", "return", "d3", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_keypoints_to_images_net_2image.__init__": [[382, 420], ["torch.Module.__init__", "vision_BN3_1.build_image_encoder", "vision_BN3_1.build_image_decoder_2image", "dict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_keypoints_to_images_net_2image.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "image_shape", ")", ":", "\n", "        ", "super", "(", "build_keypoints_to_images_net_2image", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Build encoder net to extract appearance features from the first frame:", "\n", "self", ".", "keypoint_width", "=", "cfg", ".", "keypoint_width", "\n", "self", ".", "heatmap_width", "=", "cfg", ".", "heatmap_width", "\n", "self", ".", "appearance_feature_extractor", "=", "build_image_encoder", "(", "\n", "input_shape", "=", "image_shape", ",", "\n", "initial_num_filters", "=", "cfg", ".", "num_encoder_filters", ",", "\n", "layers_per_scale", "=", "cfg", ".", "layers_per_scale", ",", "\n", "**", "cfg", ".", "conv_layer_kwargs", ")", "\n", "\n", "# Build image decoder that goes from Gaussian maps to reconstructed images:", "\n", "num_encoder_output_channels", "=", "(", "\n", "cfg", ".", "num_encoder_filters", "*", "image_shape", "[", "1", "]", "//", "cfg", ".", "heatmap_width", ")", "\n", "input_shape", "=", "[", "num_encoder_output_channels", ",", "cfg", ".", "heatmap_width", ",", "\n", "cfg", ".", "heatmap_width", "]", "\n", "self", ".", "image_decoder", "=", "build_image_decoder_2image", "(", "\n", "input_shape", "=", "input_shape", ",", "\n", "output_width", "=", "image_shape", "[", "1", "]", ",", "\n", "layers_per_scale", "=", "cfg", ".", "layers_per_scale", ",", "\n", "**", "cfg", ".", "conv_layer_kwargs", ")", "\n", "\n", "# Build layers to adjust channel numbers for decoder input and output image:", "\n", "kwargs", "=", "dict", "(", "cfg", ".", "conv_layer_kwargs", ")", "\n", "kwargs", "[", "'kernel_size'", "]", "=", "1", "\n", "kwargs", "[", "'padding'", "]", "=", "0", "\n", "self", ".", "adjust_channels_of_decoder_input", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "cfg", ".", "num_keypoints", "*", "3", "\n", "+", "cfg", ".", "num_encoder_filters", "*", "cfg", ".", "img_w", "//", "cfg", ".", "heatmap_width", "*", "2", "\n", ",", "num_encoder_output_channels", ",", "**", "kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_encoder_output_channels", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "\n", "kwargs", "=", "dict", "(", "cfg", ".", "conv_layer_kwargs", ")", "\n", "kwargs", "[", "'kernel_size'", "]", "=", "1", "\n", "kwargs", "[", "'padding'", "]", "=", "0", "\n", "self", ".", "adjust_channels_of_output_image", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "image_decoder", ".", "out_filters", ",", "image_shape", "[", "0", "]", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_keypoints_to_images_net_2image.forward": [[421, 457], ["vision_BN3_1.build_keypoints_to_images_net_2image.appearance_feature_extractor", "ops.keypoints_to_maps2", "vision_BN3_1.build_keypoints_to_images_net_2image.appearance_feature_extractor", "ops.keypoints_to_maps2", "ops.keypoints_to_maps2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vision_BN3_1.build_keypoints_to_images_net_2image.adjust_channels_of_decoder_input", "vision_BN3_1.build_keypoints_to_images_net_2image.image_decoder", "vision_BN3_1.build_keypoints_to_images_net_2image.adjust_channels_of_output_image", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_maps2", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_maps2", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.keypoints_to_maps2"], ["", "def", "forward", "(", "self", ",", "keypoints", ",", "first_frame", ",", "first_frame_keypoints", ",", "sec_frame", ",", "sec_frame_keypoints", ")", ":", "\n", "# Get features and maps for first frame:", "\n", "# Note that we cannot use the Gaussian maps above because the", "\n", "# first_frame_keypoints may be different than the keypoints (i.e. obs vs", "\n", "# pred).", "\n", "        ", "first_frame_features", ",", "skip", "=", "self", ".", "appearance_feature_extractor", "(", "first_frame", ")", "\n", "first_frame_gaussian_maps", "=", "ops", ".", "keypoints_to_maps2", "(", "first_frame_keypoints", ",", "\n", "sigma", "=", "self", ".", "keypoint_width", ",", "\n", "heatmap_width", "=", "self", ".", "heatmap_width", ")", "\n", "\n", "sec_frame_features", ",", "_", "=", "self", ".", "appearance_feature_extractor", "(", "sec_frame", ")", "\n", "sec_frame_gaussian_maps", "=", "ops", ".", "keypoints_to_maps2", "(", "sec_frame_keypoints", ",", "\n", "sigma", "=", "self", ".", "keypoint_width", ",", "\n", "heatmap_width", "=", "self", ".", "heatmap_width", ")", "\n", "\n", "# Convert keypoints to pixel maps:", "\n", "gaussian_maps", "=", "ops", ".", "keypoints_to_maps2", "(", "keypoints", ",", "\n", "sigma", "=", "self", ".", "keypoint_width", ",", "\n", "heatmap_width", "=", "self", ".", "heatmap_width", ")", "\n", "\n", "# Reconstruct image:", "\n", "combined_representation", "=", "torch", ".", "cat", "(", "(", "gaussian_maps", ",", "first_frame_gaussian_maps", ",", "\n", "sec_frame_gaussian_maps", ",", "\n", "first_frame_features", ",", "\n", "sec_frame_features", ")", ",", "1", ")", "\n", "#combined_representation = ops.add_coord_channels(combined_representation)", "\n", "combined_representation", "=", "self", ".", "adjust_channels_of_decoder_input", "(", "\n", "combined_representation", ")", "\n", "decoded_representation", "=", "self", ".", "image_decoder", "(", "combined_representation", ",", "skip", ")", "\n", "image", "=", "self", ".", "adjust_channels_of_output_image", "(", "decoded_representation", ")", "\n", "\n", "# Add in the first frame of the sequence such that the model only needs to", "\n", "# predict the change from the first frame:", "\n", "image", "=", "torch", ".", "tanh", "(", "image", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_all_AE_BN3_kth_1_2.CalDelta_xy": [[94, 103], ["numpy.zeros_like", "numpy.round", "numpy.round"], "function", ["None"], ["def", "CalDelta_xy", "(", "keypoints_np", ",", "width", "=", "64", ")", ":", "\n", "    ", "keypoints_np1", "=", "np", ".", "zeros_like", "(", "keypoints_np", ")", "\n", "keypoints_np1", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "round", "(", "(", "1", "+", "keypoints_np", "[", ":", ",", ":", ",", "0", "]", ")", "*", "(", "width", "-", "1", ")", "/", "2", ")", "\n", "keypoints_np1", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "round", "(", "(", "1", "-", "keypoints_np", "[", ":", ",", ":", ",", "1", "]", ")", "*", "(", "width", "-", "1", ")", "/", "2", ")", "\n", "keypoints_np1", "[", ":", ",", ":", ",", "0", "]", "=", "keypoints_np1", "[", ":", ",", ":", ",", "0", "]", "/", "(", "width", "-", "1", ")", "*", "2", "-", "1", "\n", "keypoints_np1", "[", ":", ",", ":", ",", "1", "]", "=", "1", "-", "keypoints_np1", "[", ":", ",", ":", ",", "1", "]", "/", "(", "width", "-", "1", ")", "*", "2", "\n", "\n", "delta_xy", "=", "keypoints_np1", "-", "keypoints_np", "\n", "return", "delta_xy", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_all_AE_BN3_kth_1_2.kl_criterion": [[106, 112], ["kld.sum", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["def", "kl_criterion", "(", "mu1", ",", "stds1", ",", "mu2", ",", "stds2", ")", ":", "\n", "# KL( N(mu_1, sigma2_1) || N(mu_2, sigma2_2)) =", "\n", "#   log( sqrt(", "\n", "#", "\n", "    ", "kld", "=", "torch", ".", "log", "(", "stds2", "/", "stds1", ")", "+", "(", "stds1", "**", "2", "+", "(", "mu1", "-", "mu2", ")", "**", "2", ")", "/", "(", "2", "*", "stds2", "**", "2", ")", "-", "1", "/", "2", "\n", "return", "kld", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_all_AE_BN3_kth_1_2.get_training_batch": [[162, 167], ["utils.normalize_data"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.normalize_data"], ["def", "get_training_batch", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "sequence", "in", "train_loader", ":", "\n", "            ", "batch", "=", "utils", ".", "normalize_data", "(", "cfg", ",", "dtype", ",", "sequence", ")", "\n", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_all_AE_BN3_kth_1_2.get_testing_batch": [[170, 175], ["utils.normalize_data"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.normalize_data"], ["def", "get_testing_batch", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "sequence", "in", "test_loader", ":", "\n", "            ", "batch", "=", "utils", ".", "normalize_data", "(", "cfg", ",", "dtype", ",", "sequence", ")", "\n", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_all_AE_BN3_kth_1_2.plot": [[179, 284], ["range", "rnn_cell.init_hidden", "range", "min", "range", "utils.save_tensors_image", "utils.save_gif", "build_images_to_keypoints_net", "torch.FloatTensor().cuda.data.cpu().numpy", "train_all_AE_BN3_kth_1_2.CalDelta_xy", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "observed_keypoints.append", "torch.autograd.Variable", "keypoints_to_images_net().detach", "rnn_cell", "gen_keypoints.append", "gen_seq.append", "range", "to_plot.append", "range", "to_plot.append", "range", "range", "torch.FloatTensor().cuda.detach", "observed_keypoints[].data.cpu().numpy", "numpy.round", "numpy.round", "numpy.clip", "observed_keypoints_id.flatten().astype", "numpy.zeros", "observed_keypoints_map_np_flat.reshape.reshape", "observed_keypoints_map_np.reshape.reshape", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "posterior_net", "prior_net", "mean_prior.detach", "std_prior.detach", "std_prior.detach.data.new().normal_", "keypoint_decoder().detach", "torch.exp().data.cpu().numpy", "torch.exp().data.cpu().numpy", "torch.exp().data.cpu().numpy", "numpy.argmax", "numpy.zeros", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "numpy.zeros", "observed_keypoints_map_np_flat.reshape.reshape", "np.argmax.flatten().astype", "observed_keypoints_map_np.reshape.reshape", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "ops.change2xy", "range", "row.append", "row.append", "row.append", "row.append", "gifs[].append", "len", "torch.FloatTensor().cuda.data.cpu", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "keypoints_to_images_net", "ops.add_keypoints", "observed_keypoints[].data.cpu", "observed_keypoints_id.flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "std_prior.detach.data.new", "keypoint_decoder", "torch.exp().data.cpu", "torch.exp().data.cpu", "torch.exp().data.cpu", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "np.argmax.flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].clone", "range", "std_prior.detach.size", "range", "range", "torch.exp", "torch.exp", "torch.exp", "range"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.save_tensors_image", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.save_gif", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_AE_BN3_kth_1_2.CalDelta_xy", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.change2xy", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.add_keypoints"], ["def", "plot", "(", "x", ",", "epoch", ")", ":", "\n", "    ", "gen_keypoints", "=", "[", "]", "\n", "gen_seq", "=", "[", "]", "\n", "gt_seq", "=", "[", "x", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", "\n", "\n", "observed_keypoints", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "observed_steps", ")", ":", "\n", "        ", "keypoints", ",", "_", "=", "build_images_to_keypoints_net", "(", "x", "[", "i", "]", ")", "\n", "keypoints_np", "=", "keypoints", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "delta_xy", "=", "CalDelta_xy", "(", "keypoints_np", ",", "width", "=", "cfg", ".", "img_w", ")", "\n", "delta_xypt", "=", "torch", ".", "FloatTensor", "(", "delta_xy", ")", ".", "cuda", "(", ")", "\n", "keypoints", "=", "keypoints", "+", "delta_xypt", "\n", "observed_keypoints", ".", "append", "(", "keypoints", ".", "detach", "(", ")", ")", "\n", "\n", "", "rnn_cell", ".", "batch_size", "=", "cfg", ".", "test_batch_size", "\n", "rnn_cell", ".", "hidden", "=", "rnn_cell", ".", "init_hidden", "(", ")", "\n", "rnn_cell", ".", "batch_size", "=", "cfg", ".", "batch_size", "\n", "rnn_state", "=", "rnn_cell", ".", "hidden", "[", "0", "]", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "cfg", ".", "n_eval", ")", ":", "\n", "        ", "if", "i", "<", "cfg", ".", "observed_steps", ":", "\n", "            ", "observed_keypoints_np", "=", "observed_keypoints", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "observed_keypoints_np", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "round", "(", "(", "1", "+", "observed_keypoints_np", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "*", "(", "cfg", ".", "img_w", "-", "1", ")", "/", "2", ")", "\n", "observed_keypoints_np", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "round", "(", "(", "1", "-", "observed_keypoints_np", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "*", "(", "cfg", ".", "img_w", "-", "1", ")", "/", "2", ")", "\n", "observed_keypoints_np", "=", "np", ".", "clip", "(", "observed_keypoints_np", ",", "0", ",", "cfg", ".", "img_w", "-", "1", ")", "\n", "observed_keypoints_id", "=", "observed_keypoints_np", "[", ":", ",", ":", ",", "0", "]", "+", "observed_keypoints_np", "[", ":", ",", ":", ",", "1", "]", "*", "cfg", ".", "img_w", "\n", "best_keypoints_id_flat", "=", "observed_keypoints_id", ".", "flatten", "(", ")", ".", "astype", "(", "int", ")", "\n", "observed_keypoints_map_np", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "test_batch_size", ",", "cfg", ".", "num_keypoints", ",", "\n", "cfg", ".", "img_w", ",", "cfg", ".", "img_w", ")", ")", "\n", "observed_keypoints_map_np_flat", "=", "observed_keypoints_map_np", ".", "reshape", "(", "cfg", ".", "test_batch_size", "*", "\n", "cfg", ".", "num_keypoints", ",", "-", "1", ")", "\n", "observed_keypoints_map_np_flat", "[", "range", "(", "cfg", ".", "test_batch_size", "*", "cfg", ".", "num_keypoints", ")", ",", "\n", "best_keypoints_id_flat", "[", "range", "(", "cfg", ".", "test_batch_size", "\n", "*", "cfg", ".", "num_keypoints", ")", "]", "]", "=", "1", "\n", "observed_keypoints_map_np", "=", "observed_keypoints_map_np_flat", ".", "reshape", "(", "cfg", ".", "test_batch_size", ",", "\n", "cfg", ".", "num_keypoints", ",", "\n", "cfg", ".", "img_w", ",", "-", "1", ")", "\n", "observed_keypoints_map_batch", "=", "torch", ".", "FloatTensor", "(", "observed_keypoints_map_np", ")", ".", "cuda", "(", ")", "\n", "observed_keypoints_batch", "=", "observed_keypoints", "[", "i", "]", "\n", "mean", ",", "std", "=", "posterior_net", "(", "rnn_state", ",", "observed_keypoints_map_batch", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "observed_keypoints_batch0", "=", "observed_keypoints_batch", "\n", "", "", "else", ":", "\n", "            ", "mean_prior", ",", "std_prior", "=", "prior_net", "(", "rnn_state", ")", "\n", "mean", "=", "mean_prior", ".", "detach", "(", ")", "\n", "std", "=", "std_prior", ".", "detach", "(", ")", "\n", "", "eps", "=", "Variable", "(", "std", ".", "data", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ")", "\n", "eps", "=", "eps", "*", "std", "+", "mean", "\n", "if", "i", "<", "cfg", ".", "observed_steps", ":", "\n", "            ", "keypoints", "=", "observed_keypoints_batch", "\n", "", "else", ":", "\n", "            ", "sampled_keypoints_flat", "=", "keypoint_decoder", "(", "rnn_state", ",", "eps", ")", ".", "detach", "(", ")", "\n", "sampled_keypoints_flat", "=", "torch", ".", "exp", "(", "sampled_keypoints_flat", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sampled_keypoints_id", "=", "np", ".", "argmax", "(", "sampled_keypoints_flat", ",", "axis", "=", "-", "1", ")", "\n", "keypoints", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "test_batch_size", ",", "cfg", ".", "num_keypoints", ",", "2", ")", ")", "\n", "keypoints", "[", ":", ",", ":", ",", "0", "]", "=", "sampled_keypoints_id", "%", "cfg", ".", "img_w", "/", "(", "cfg", ".", "img_w", "-", "1", ")", "*", "2", "+", "(", "-", "1", ")", "\n", "keypoints", "[", ":", ",", ":", ",", "1", "]", "=", "1", "-", "sampled_keypoints_id", "//", "cfg", ".", "img_w", "/", "(", "cfg", ".", "img_w", "-", "1", ")", "*", "2", "\n", "keypoints", "=", "torch", ".", "FloatTensor", "(", "keypoints", ")", ".", "cuda", "(", ")", "\n", "observed_keypoints_map_np", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "test_batch_size", ",", "cfg", ".", "num_keypoints", ",", "\n", "cfg", ".", "img_w", ",", "cfg", ".", "img_w", ")", ")", "\n", "observed_keypoints_map_np_flat", "=", "observed_keypoints_map_np", ".", "reshape", "(", "cfg", ".", "test_batch_size", "*", "\n", "cfg", ".", "num_keypoints", ",", "-", "1", ")", "\n", "sampled_keypoints_id_flat", "=", "sampled_keypoints_id", ".", "flatten", "(", ")", ".", "astype", "(", "int", ")", "\n", "observed_keypoints_map_np_flat", "[", "range", "(", "cfg", ".", "test_batch_size", "*", "cfg", ".", "num_keypoints", ")", ",", "\n", "sampled_keypoints_id_flat", "[", "range", "(", "cfg", ".", "test_batch_size", "\n", "*", "cfg", ".", "num_keypoints", ")", "]", "]", "=", "1", "\n", "observed_keypoints_map_np", "=", "observed_keypoints_map_np_flat", ".", "reshape", "(", "cfg", ".", "test_batch_size", ",", "\n", "cfg", ".", "num_keypoints", ",", "\n", "cfg", ".", "img_w", ",", "-", "1", ")", "\n", "observed_keypoints_map_batch", "=", "torch", ".", "FloatTensor", "(", "observed_keypoints_map_np", ")", ".", "cuda", "(", ")", "\n", "", "reconstructed_image", "=", "keypoints_to_images_net", "(", "keypoints", ",", "x", "[", "0", "]", ",", "observed_keypoints_batch0", ")", ".", "detach", "(", ")", "\n", "rnn_state", "=", "rnn_cell", "(", "observed_keypoints_map_batch", ",", "eps", ")", "\n", "gen_keypoints", ".", "append", "(", "ops", ".", "change2xy", "(", "keypoints", ")", ")", "\n", "gen_seq", ".", "append", "(", "reconstructed_image", ")", "\n", "\n", "", "to_plot", "=", "[", "]", "\n", "gifs", "=", "[", "[", "]", "for", "t", "in", "range", "(", "cfg", ".", "n_eval", ")", "]", "\n", "\n", "nrow", "=", "min", "(", "cfg", ".", "test_batch_size", ",", "10", ")", "\n", "for", "i", "in", "range", "(", "nrow", ")", ":", "\n", "# ground truth sequence", "\n", "        ", "row", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "cfg", ".", "n_eval", ")", ":", "\n", "            ", "row", ".", "append", "(", "gt_seq", "[", "t", "]", "[", "i", "]", ")", "\n", "", "to_plot", ".", "append", "(", "row", ")", "\n", "\n", "row", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "cfg", ".", "n_eval", ")", ":", "\n", "            ", "row", ".", "append", "(", "ops", ".", "add_keypoints", "(", "gen_seq", "[", "t", "]", "[", "i", "]", ".", "clone", "(", ")", ",", "gen_keypoints", "[", "t", "]", "[", "i", "]", ")", ")", "\n", "", "to_plot", ".", "append", "(", "row", ")", "\n", "\n", "for", "t", "in", "range", "(", "cfg", ".", "n_eval", ")", ":", "\n", "            ", "row", "=", "[", "]", "\n", "row", ".", "append", "(", "gt_seq", "[", "t", "]", "[", "i", "]", ")", "\n", "row", ".", "append", "(", "gen_seq", "[", "t", "]", "[", "i", "]", ")", "\n", "gifs", "[", "t", "]", ".", "append", "(", "row", ")", "\n", "\n", "", "", "fname", "=", "'%s/gen1/sample_%d.png'", "%", "(", "log_dir", ",", "epoch", ")", "\n", "utils", ".", "save_tensors_image", "(", "fname", ",", "to_plot", ")", "\n", "\n", "fname", "=", "'%s/gen1/sample_%d.gif'", "%", "(", "log_dir", ",", "epoch", ")", "\n", "utils", ".", "save_gif", "(", "fname", ",", "gifs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_all_AE_BN3_kth_1_2.val": [[285, 372], ["range", "numpy.zeros", "numpy.zeros", "range", "build_images_to_keypoints_net", "torch.FloatTensor().cuda.data.cpu().numpy", "train_all_AE_BN3_kth_1_2.CalDelta_xy", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "observed_keypoints.append", "all_gen.append", "all_gen_keypoints.append", "rnn_cell.init_hidden", "range", "utils.eval_seq", "torch.FloatTensor().cuda.detach", "torch.autograd.Variable", "rnn_cell", "keypoints_to_images_net().detach", "torch.clamp", "torch.clamp", "torch.clamp", "all_gen_keypoints[].append", "all_gen[].append", "gen_seq.append", "gt_seq.append", "torch.FloatTensor().cuda.data.cpu", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "observed_keypoints[].data.cpu().numpy", "numpy.round", "numpy.round", "numpy.clip", "observed_keypoints_id.flatten().astype", "numpy.zeros", "observed_keypoints_map_np_flat.reshape.reshape", "observed_keypoints_map_np.reshape.reshape", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "posterior_net", "prior_net", "mean_prior.detach", "std_prior.detach", "std_prior.detach.data.new().normal_", "keypoint_decoder().detach", "torch.exp().data.cpu().numpy", "torch.exp().data.cpu().numpy", "torch.exp().data.cpu().numpy", "numpy.argmax", "numpy.zeros", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "numpy.zeros", "observed_keypoints_map_np_flat.reshape.reshape", "np.argmax.flatten().astype", "observed_keypoints_map_np.reshape.reshape", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "ops.change2xy", "keypoints_to_images_net", "torch.clamp.data.cpu().numpy", "x[].data.cpu().numpy", "observed_keypoints[].data.cpu", "observed_keypoints_id.flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "std_prior.detach.data.new", "keypoint_decoder", "torch.exp().data.cpu", "torch.exp().data.cpu", "torch.exp().data.cpu", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "np.argmax.flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "std_prior.detach.size", "range", "torch.clamp.data.cpu", "x[].data.cpu", "range", "torch.exp", "torch.exp", "torch.exp", "range"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_AE_BN3_kth_1_2.CalDelta_xy", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.eval_seq", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.change2xy"], ["", "def", "val", "(", "x", ",", "epoch", ")", ":", "\n", "    ", "observed_keypoints", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "observed_steps", ")", ":", "\n", "        ", "keypoints", ",", "_", "=", "build_images_to_keypoints_net", "(", "x", "[", "i", "]", ")", "\n", "keypoints_np", "=", "keypoints", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "delta_xy", "=", "CalDelta_xy", "(", "keypoints_np", ",", "width", "=", "cfg", ".", "img_w", ")", "\n", "delta_xypt", "=", "torch", ".", "FloatTensor", "(", "delta_xy", ")", ".", "cuda", "(", ")", "\n", "keypoints", "=", "keypoints", "+", "delta_xypt", "\n", "observed_keypoints", ".", "append", "(", "keypoints", ".", "detach", "(", ")", ")", "\n", "\n", "", "ssim", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "test_batch_size", ",", "cfg", ".", "nsample", ",", "cfg", ".", "n_eval", ")", ")", "\n", "psnr", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "test_batch_size", ",", "cfg", ".", "nsample", ",", "cfg", ".", "n_eval", ")", ")", "\n", "all_gen", "=", "[", "]", "\n", "all_gen_keypoints", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "cfg", ".", "nsample", ")", ":", "\n", "        ", "gen_seq", "=", "[", "]", "\n", "gt_seq", "=", "[", "]", "\n", "all_gen", ".", "append", "(", "[", "]", ")", "\n", "all_gen_keypoints", ".", "append", "(", "[", "]", ")", "\n", "rnn_cell", ".", "batch_size", "=", "cfg", ".", "test_batch_size", "\n", "rnn_cell", ".", "hidden", "=", "rnn_cell", ".", "init_hidden", "(", ")", "\n", "rnn_cell", ".", "batch_size", "=", "cfg", ".", "batch_size", "\n", "rnn_state", "=", "rnn_cell", ".", "hidden", "[", "0", "]", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "n_eval", ")", ":", "\n", "            ", "if", "i", "<", "cfg", ".", "observed_steps", ":", "\n", "                ", "observed_keypoints_np", "=", "observed_keypoints", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "observed_keypoints_np", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "round", "(", "(", "1", "+", "observed_keypoints_np", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "*", "(", "cfg", ".", "reso", "-", "1", ")", "/", "2", ")", "\n", "observed_keypoints_np", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "round", "(", "(", "1", "-", "observed_keypoints_np", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "*", "(", "cfg", ".", "reso", "-", "1", ")", "/", "2", ")", "\n", "observed_keypoints_np", "=", "np", ".", "clip", "(", "observed_keypoints_np", ",", "0", ",", "cfg", ".", "reso", "-", "1", ")", "\n", "observed_keypoints_id", "=", "observed_keypoints_np", "[", ":", ",", ":", ",", "0", "]", "+", "observed_keypoints_np", "[", ":", ",", ":", ",", "1", "]", "*", "cfg", ".", "reso", "\n", "best_keypoints_id_flat", "=", "observed_keypoints_id", ".", "flatten", "(", ")", ".", "astype", "(", "int", ")", "\n", "observed_keypoints_map_np", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "test_batch_size", ",", "cfg", ".", "num_keypoints", ",", "\n", "cfg", ".", "reso", ",", "cfg", ".", "reso", ")", ")", "\n", "observed_keypoints_map_np_flat", "=", "observed_keypoints_map_np", ".", "reshape", "(", "cfg", ".", "test_batch_size", "*", "\n", "cfg", ".", "num_keypoints", ",", "-", "1", ")", "\n", "observed_keypoints_map_np_flat", "[", "range", "(", "cfg", ".", "test_batch_size", "*", "cfg", ".", "num_keypoints", ")", ",", "\n", "best_keypoints_id_flat", "[", "range", "(", "cfg", ".", "test_batch_size", "\n", "*", "cfg", ".", "num_keypoints", ")", "]", "]", "=", "1", "\n", "observed_keypoints_map_np", "=", "observed_keypoints_map_np_flat", ".", "reshape", "(", "cfg", ".", "test_batch_size", ",", "\n", "cfg", ".", "num_keypoints", ",", "\n", "cfg", ".", "reso", ",", "-", "1", ")", "\n", "observed_keypoints_map_batch", "=", "torch", ".", "FloatTensor", "(", "observed_keypoints_map_np", ")", ".", "cuda", "(", ")", "\n", "observed_keypoints_batch", "=", "observed_keypoints", "[", "i", "]", "\n", "mean", ",", "std", "=", "posterior_net", "(", "rnn_state", ",", "observed_keypoints_map_batch", ")", "\n", "", "else", ":", "\n", "                ", "mean_prior", ",", "std_prior", "=", "prior_net", "(", "rnn_state", ")", "\n", "mean", "=", "mean_prior", ".", "detach", "(", ")", "\n", "std", "=", "std_prior", ".", "detach", "(", ")", "\n", "", "eps", "=", "Variable", "(", "std", ".", "data", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ")", "\n", "eps", "=", "eps", "*", "std", "+", "mean", "\n", "if", "i", "<", "cfg", ".", "observed_steps", ":", "\n", "                ", "keypoints", "=", "observed_keypoints_batch", "\n", "", "else", ":", "\n", "                ", "sampled_keypoints_flat", "=", "keypoint_decoder", "(", "rnn_state", ",", "eps", ")", ".", "detach", "(", ")", "\n", "sampled_keypoints_flat", "=", "torch", ".", "exp", "(", "sampled_keypoints_flat", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sampled_keypoints_id", "=", "np", ".", "argmax", "(", "sampled_keypoints_flat", ",", "axis", "=", "-", "1", ")", "\n", "keypoints", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "test_batch_size", ",", "cfg", ".", "num_keypoints", ",", "2", ")", ")", "\n", "keypoints", "[", ":", ",", ":", ",", "0", "]", "=", "sampled_keypoints_id", "%", "cfg", ".", "reso", "/", "(", "cfg", ".", "reso", "-", "1", ")", "*", "2", "+", "(", "-", "1", ")", "\n", "keypoints", "[", ":", ",", ":", ",", "1", "]", "=", "1", "-", "sampled_keypoints_id", "//", "cfg", ".", "reso", "/", "(", "cfg", ".", "reso", "-", "1", ")", "*", "2", "\n", "keypoints", "=", "torch", ".", "FloatTensor", "(", "keypoints", ")", ".", "cuda", "(", ")", "\n", "observed_keypoints_map_np", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "test_batch_size", ",", "cfg", ".", "num_keypoints", ",", "\n", "cfg", ".", "reso", ",", "cfg", ".", "reso", ")", ")", "\n", "observed_keypoints_map_np_flat", "=", "observed_keypoints_map_np", ".", "reshape", "(", "cfg", ".", "test_batch_size", "*", "\n", "cfg", ".", "num_keypoints", ",", "-", "1", ")", "\n", "sampled_keypoints_id_flat", "=", "sampled_keypoints_id", ".", "flatten", "(", ")", ".", "astype", "(", "int", ")", "\n", "observed_keypoints_map_np_flat", "[", "range", "(", "cfg", ".", "test_batch_size", "*", "cfg", ".", "num_keypoints", ")", ",", "\n", "sampled_keypoints_id_flat", "[", "range", "(", "cfg", ".", "test_batch_size", "\n", "*", "cfg", ".", "num_keypoints", ")", "]", "]", "=", "1", "\n", "observed_keypoints_map_np", "=", "observed_keypoints_map_np_flat", ".", "reshape", "(", "cfg", ".", "test_batch_size", ",", "\n", "cfg", ".", "num_keypoints", ",", "\n", "cfg", ".", "reso", ",", "-", "1", ")", "\n", "observed_keypoints_map_batch", "=", "torch", ".", "FloatTensor", "(", "observed_keypoints_map_np", ")", ".", "cuda", "(", ")", "\n", "", "rnn_state", "=", "rnn_cell", "(", "observed_keypoints_map_batch", ",", "eps", ")", "\n", "reconstructed_image", "=", "keypoints_to_images_net", "(", "keypoints", ",", "x", "[", "cfg", ".", "observed_steps", "-", "1", "]", ",", "\n", "observed_keypoints", "[", "cfg", ".", "observed_steps", "-", "1", "]", ")", ".", "detach", "(", ")", "\n", "reconstructed_image", "=", "torch", ".", "clamp", "(", "reconstructed_image", ",", "-", "0.5", ",", "0.5", ")", "\n", "\n", "all_gen_keypoints", "[", "s", "]", ".", "append", "(", "ops", ".", "change2xy", "(", "keypoints", ")", ")", "\n", "all_gen", "[", "s", "]", ".", "append", "(", "reconstructed_image", ")", "\n", "gen_seq", ".", "append", "(", "reconstructed_image", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "0.5", ")", "\n", "gt_seq", ".", "append", "(", "x", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "0.5", ")", "\n", "", "_", ",", "ssim", "[", ":", ",", "s", ",", ":", "]", ",", "psnr", "[", ":", ",", "s", ",", ":", "]", "=", "utils", ".", "eval_seq", "(", "gt_seq", ",", "gen_seq", ")", "\n", "\n", "", "return", "ssim", ",", "psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_all_AE_BN3_kth_1_2.train": [[374, 459], ["rnn_cell.zero_grad", "keypoint_decoder.zero_grad", "prior_net.zero_grad", "posterior_net.zero_grad", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "range", "rnn_cell.init_hidden", "range", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "rnn_cell_optimizer.step", "keypoint_decoder_optimizer.step", "prior_net_optimizer.step", "posterior_net_optimizer.step", "build_images_to_keypoints_net", "keypoints.data.cpu().numpy", "train_all_AE_BN3_kth_1_2.CalDelta_xy", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "observed_keypoints.append", "numpy.zeros", "observed_keypoints[].data.cpu().numpy", "numpy.round", "numpy.round", "numpy.clip", "numpy.eye", "observed_keypoints_id.flatten().astype", "torch.FloatTensor().cuda.reshape", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "observed_keypoints_map_np_flat.reshape.reshape", "observed_keypoints_map_np.reshape.reshape", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "prior_net", "posterior_net", "range", "torch.min", "torch.min", "torch.min", "best_sample_ind.detach().cpu().numpy.detach().cpu().numpy", "torch.stack", "torch.stack", "torch.stack", "keypoint_decoder", "torch.sum", "torch.sum", "torch.sum", "rnn_cell", "rnn_cell.parameters", "keypoint_decoder.parameters", "prior_net.parameters", "posterior_net.parameters", "torch.FloatTensor().cuda.data.cpu().numpy", "torch.FloatTensor().cuda.data.cpu().numpy", "torch.FloatTensor().cuda.data.cpu().numpy", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "keypoints.detach", "train_all_AE_BN3_kth_1_2.kl_criterion", "torch.autograd.Variable", "sampled_latent_list.append", "keypoint_decoder().detach", "sample_losses.append", "torch.stack", "torch.stack", "torch.stack", "keypoints.data.cpu", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "observed_keypoints[].data.cpu", "observed_keypoints_id.flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "std.data.new().normal_", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "best_sample_ind.detach().cpu().numpy.detach().cpu", "torch.FloatTensor().cuda.data.cpu", "torch.FloatTensor().cuda.data.cpu", "torch.FloatTensor().cuda.data.cpu", "range", "keypoint_decoder", "range", "std.data.new", "torch.sum", "torch.sum", "torch.sum", "best_sample_ind.detach().cpu().numpy.detach", "range", "std.size"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_AE_BN3_kth_1_2.CalDelta_xy", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_all_AE_BN3_kth_1_2.kl_criterion"], ["", "def", "train", "(", "x", ",", "train_step", ")", ":", "\n", "    ", "rnn_cell", ".", "zero_grad", "(", ")", "\n", "keypoint_decoder", ".", "zero_grad", "(", ")", "\n", "prior_net", ".", "zero_grad", "(", ")", "\n", "posterior_net", ".", "zero_grad", "(", ")", "\n", "\n", "kl_divergence", "=", "torch", ".", "FloatTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "mse", "=", "torch", ".", "FloatTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "keypoints_pi", "=", "torch", ".", "FloatTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "observed_keypoints", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "observed_steps", "+", "cfg", ".", "predicted_steps", ")", ":", "\n", "        ", "keypoints", ",", "_", "=", "build_images_to_keypoints_net", "(", "x", "[", "i", "]", ")", "\n", "keypoints_np", "=", "keypoints", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "delta_xy", "=", "CalDelta_xy", "(", "keypoints_np", ",", "width", "=", "cfg", ".", "img_w", ")", "\n", "delta_xypt", "=", "torch", ".", "FloatTensor", "(", "delta_xy", ")", ".", "cuda", "(", ")", "\n", "keypoints", "=", "keypoints", "+", "delta_xypt", "\n", "observed_keypoints", ".", "append", "(", "keypoints", ".", "detach", "(", ")", ")", "\n", "#'''", "\n", "", "rnn_cell", ".", "hidden", "=", "rnn_cell", ".", "init_hidden", "(", ")", "\n", "rnn_state", "=", "rnn_cell", ".", "hidden", "[", "0", "]", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "cfg", ".", "observed_steps", "+", "cfg", ".", "predicted_steps", ")", ":", "\n", "        ", "observed_keypoints_map_np", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "batch_size", ",", "cfg", ".", "num_keypoints", ",", "\n", "cfg", ".", "img_w", ",", "cfg", ".", "img_w", ")", ")", "\n", "observed_keypoints_np", "=", "observed_keypoints", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "observed_keypoints_np", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "round", "(", "(", "1", "+", "observed_keypoints_np", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "*", "(", "cfg", ".", "img_w", "-", "1", ")", "/", "2", ")", "\n", "observed_keypoints_np", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "round", "(", "(", "1", "-", "observed_keypoints_np", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "*", "(", "cfg", ".", "img_w", "-", "1", ")", "/", "2", ")", "\n", "observed_keypoints_np", "=", "np", ".", "clip", "(", "observed_keypoints_np", ",", "0", ",", "cfg", ".", "img_w", "-", "1", ")", "\n", "eye", "=", "np", ".", "eye", "(", "cfg", ".", "img_w", "**", "2", ")", "\n", "observed_keypoints_id", "=", "observed_keypoints_np", "[", ":", ",", ":", ",", "0", "]", "+", "observed_keypoints_np", "[", ":", ",", ":", ",", "1", "]", "*", "cfg", ".", "img_w", "\n", "best_keypoints_id_flat", "=", "observed_keypoints_id", ".", "flatten", "(", ")", ".", "astype", "(", "int", ")", "\n", "probs", "=", "eye", "[", "best_keypoints_id_flat", "]", "\n", "probs", "=", "probs", ".", "reshape", "(", "cfg", ".", "batch_size", ",", "cfg", ".", "num_keypoints", ",", "-", "1", ")", "\n", "probs", "=", "torch", ".", "FloatTensor", "(", "probs", ")", ".", "cuda", "(", ")", "\n", "observed_keypoints_map_np_flat", "=", "observed_keypoints_map_np", ".", "reshape", "(", "cfg", ".", "batch_size", "*", "cfg", ".", "num_keypoints", ",", "-", "1", ")", "\n", "observed_keypoints_map_np_flat", "[", "range", "(", "cfg", ".", "batch_size", "*", "cfg", ".", "num_keypoints", ")", ",", "\n", "best_keypoints_id_flat", "[", "range", "(", "cfg", ".", "batch_size", "*", "cfg", ".", "num_keypoints", ")", "]", "\n", "]", "=", "1", "\n", "observed_keypoints_map_np", "=", "observed_keypoints_map_np_flat", ".", "reshape", "(", "cfg", ".", "batch_size", ",", "cfg", ".", "num_keypoints", ",", "\n", "cfg", ".", "img_w", ",", "-", "1", ")", "\n", "observed_keypoints_map_batch", "=", "torch", ".", "FloatTensor", "(", "observed_keypoints_map_np", ")", ".", "cuda", "(", ")", "\n", "mean_prior", ",", "std_prior", "=", "prior_net", "(", "rnn_state", ")", "\n", "mean", ",", "std", "=", "posterior_net", "(", "rnn_state", ",", "observed_keypoints_map_batch", ")", "\n", "if", "i", ">", "0", ":", "\n", "            ", "kl_divergence", "+=", "kl_criterion", "(", "mean_prior", ",", "std_prior", ",", "mean", ",", "std", ")", "\n", "\n", "# Conduct BestOfMany", "\n", "", "sampled_latent_list", "=", "[", "]", "\n", "sample_losses", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "cfg", ".", "num_samples_for_bom", ")", ":", "\n", "            ", "eps", "=", "Variable", "(", "std", ".", "data", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ")", "\n", "eps", "=", "eps", "*", "std", "+", "mean", "\n", "sampled_latent_list", ".", "append", "(", "eps", ")", "\n", "sampled_keypoints_flat", "=", "keypoint_decoder", "(", "rnn_state", ",", "eps", ")", ".", "detach", "(", ")", "\n", "sample_losses", ".", "append", "(", "torch", ".", "sum", "(", "-", "probs", "*", "sampled_keypoints_flat", ",", "dim", "=", "(", "1", ",", "2", ")", ")", ".", "detach", "(", ")", ")", "\n", "", "_", ",", "best_sample_ind", "=", "torch", ".", "min", "(", "torch", ".", "stack", "(", "sample_losses", ")", ",", "dim", "=", "0", ")", "\n", "best_sample_ind", "=", "best_sample_ind", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "best_latent", "=", "torch", ".", "stack", "(", "[", "sampled_latent_list", "[", "best_sample_ind", "[", "j", "]", "]", "[", "j", "]", "\n", "for", "j", "in", "range", "(", "cfg", ".", "batch_size", ")", "]", ")", "\n", "best_keypoints_flat", "=", "keypoint_decoder", "(", "rnn_state", ",", "best_latent", ")", "\n", "keypoints_pi", "+=", "torch", ".", "sum", "(", "-", "probs", "*", "best_keypoints_flat", ")", "\n", "rnn_state", "=", "rnn_cell", "(", "observed_keypoints_map_batch", ",", "best_latent", ")", "\n", "\n", "#'''", "\n", "", "keypoints_pi", "/=", "(", "cfg", ".", "observed_steps", "+", "cfg", ".", "predicted_steps", ")", "*", "cfg", ".", "num_keypoints", "*", "cfg", ".", "batch_size", "\n", "kl_divergence", "/=", "(", "cfg", ".", "observed_steps", "+", "cfg", ".", "predicted_steps", "-", "1", ")", "*", "cfg", ".", "batch_size", "\n", "\n", "loss", "=", "keypoints_pi", "+", "cfg", ".", "kl_loss_scale", "*", "kl_divergence", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "rnn_cell", ".", "parameters", "(", ")", ",", "cfg", ".", "clipnorm", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "keypoint_decoder", ".", "parameters", "(", ")", ",", "cfg", ".", "clipnorm", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "prior_net", ".", "parameters", "(", ")", ",", "cfg", ".", "clipnorm", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "posterior_net", ".", "parameters", "(", ")", ",", "cfg", ".", "clipnorm", ")", "\n", "\n", "rnn_cell_optimizer", ".", "step", "(", ")", "\n", "keypoint_decoder_optimizer", ".", "step", "(", ")", "\n", "prior_net_optimizer", ".", "step", "(", ")", "\n", "posterior_net_optimizer", ".", "step", "(", ")", "\n", "\n", "return", "kl_divergence", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "mse", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "keypoints_pi", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.get_minibatches_idx": [[17, 54], ["numpy.arange", "range", "numpy.delete", "random.shuffle", "minibatches.append", "minibatches.append", "zip", "list", "print", "range", "len", "len", "trainfiles[].split", "list.append", "len", "listdir", "f.endswith"], "function", ["None"], ["def", "get_minibatches_idx", "(", "n", ",", "\n", "minibatch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "min_frame", "=", "None", ",", "\n", "trainfiles", "=", "None", ",", "\n", "del_list", "=", "None", ")", ":", "\n", "  ", "\"\"\"\n  Used to shuffle the dataset at each iteration.\n  \"\"\"", "\n", "idx_list", "=", "np", ".", "arange", "(", "n", ",", "dtype", "=", "\"int32\"", ")", "\n", "\n", "if", "min_frame", "!=", "None", ":", "\n", "    ", "if", "del_list", "==", "None", ":", "\n", "      ", "del_list", "=", "list", "(", ")", "\n", "for", "i", "in", "idx_list", ":", "\n", "        ", "vid_path", "=", "trainfiles", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", "\n", "length", "=", "len", "(", "[", "f", "for", "f", "in", "listdir", "(", "vid_path", ")", "if", "f", ".", "endswith", "(", "'.png'", ")", "]", ")", "\n", "if", "length", "<", "min_frame", ":", "\n", "          ", "del_list", ".", "append", "(", "i", ")", "\n", "", "", "print", "(", "'[!] Discarded %d samples from training set!'", "%", "len", "(", "del_list", ")", ")", "\n", "", "idx_list", "=", "np", ".", "delete", "(", "idx_list", ",", "del_list", ")", "\n", "\n", "", "if", "shuffle", ":", "\n", "    ", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "\n", "", "minibatches", "=", "[", "]", "\n", "minibatch_start", "=", "0", "\n", "for", "i", "in", "range", "(", "n", "//", "minibatch_size", ")", ":", "\n", "    ", "minibatches", ".", "append", "(", "\n", "idx_list", "[", "minibatch_start", ":", "minibatch_start", "+", "minibatch_size", "]", ")", "\n", "minibatch_start", "+=", "minibatch_size", "\n", "\n", "", "if", "(", "minibatch_start", "!=", "n", ")", ":", "\n", "# Make a minibatch out of what is left", "\n", "    ", "minibatches", ".", "append", "(", "idx_list", "[", "minibatch_start", ":", "]", ")", "\n", "\n", "", "return", "zip", "(", "range", "(", "len", "(", "minibatches", ")", ")", ",", "minibatches", ")", ",", "del_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.load_dataset": [[55, 158], ["MovingMNIST", "MovingMNIST", "RobotPush", "RobotPush", "KTH", "KTH", "Suturning", "Suturning", "Human", "Human", "Human", "Human", "Kitti", "Kitti", "Penn", "Penn"], "function", ["None"], ["", "def", "load_dataset", "(", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "dataset", "==", "'smmnist'", ":", "\n", "        ", "from", "data", ".", "moving_mnist", "import", "MovingMNIST", "\n", "train_data", "=", "MovingMNIST", "(", "\n", "train", "=", "True", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "observed_steps", "+", "opt", ".", "predicted_steps", ",", "\n", "image_size", "=", "opt", ".", "img_w", ",", "\n", "deterministic", "=", "False", ",", "\n", "num_digits", "=", "opt", ".", "num_digits", ")", "\n", "test_data", "=", "MovingMNIST", "(", "\n", "train", "=", "False", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "img_w", ",", "\n", "deterministic", "=", "False", ",", "\n", "num_digits", "=", "opt", ".", "num_digits", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'bair'", ":", "\n", "        ", "from", "data", ".", "bair", "import", "RobotPush", "\n", "train_data", "=", "RobotPush", "(", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "train", "=", "True", ",", "\n", "seq_len", "=", "opt", ".", "observed_steps", "+", "opt", ".", "predicted_steps", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "test_data", "=", "RobotPush", "(", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "train", "=", "False", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'kth'", ":", "\n", "        ", "from", "data", ".", "kth", "import", "KTH", "\n", "train_data", "=", "KTH", "(", "\n", "train", "=", "True", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "observed_steps", "+", "opt", ".", "predicted_steps", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "test_data", "=", "KTH", "(", "\n", "train", "=", "False", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'JIGSAWS-Suturing'", ":", "\n", "        ", "from", "data", ".", "Suturning", "import", "Suturning", "\n", "train_data", "=", "Suturning", "(", "\n", "train", "=", "True", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "observed_steps", "+", "opt", ".", "predicted_steps", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "test_data", "=", "Suturning", "(", "\n", "train", "=", "False", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'Human3.6m'", ":", "\n", "        ", "from", "data", ".", "human", "import", "Human", "\n", "train_data", "=", "Human", "(", "\n", "train", "=", "True", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "observed_steps", "+", "opt", ".", "predicted_steps", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "test_data", "=", "Human", "(", "\n", "train", "=", "False", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'Human3.6m_hr'", ":", "\n", "        ", "from", "data", ".", "human_hr", "import", "Human", "\n", "train_data", "=", "Human", "(", "\n", "train", "=", "True", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "observed_steps", "+", "opt", ".", "predicted_steps", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "test_data", "=", "Human", "(", "\n", "train", "=", "False", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'kitti'", ":", "\n", "        ", "from", "data", ".", "kitti", "import", "Kitti", "\n", "train_data", "=", "Kitti", "(", "\n", "train", "=", "True", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "observed_steps", "+", "opt", ".", "predicted_steps", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "test_data", "=", "Kitti", "(", "\n", "train", "=", "False", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'penn'", ":", "\n", "        ", "from", "data", ".", "penn", "import", "Penn", "\n", "train_data", "=", "Penn", "(", "\n", "train", "=", "True", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "observed_steps", "+", "opt", ".", "predicted_steps", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "test_data", "=", "Penn", "(", "\n", "train", "=", "False", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "img_w", ")", "\n", "\n", "", "return", "train_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.sequence_input": [[159, 161], ["torch.autograd.Variable", "x.type"], "function", ["None"], ["", "def", "sequence_input", "(", "seq", ",", "dtype", ")", ":", "\n", "    ", "return", "[", "Variable", "(", "x", ".", "type", "(", "dtype", ")", ")", "for", "x", "in", "seq", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.change_to_video": [[162, 165], ["sequence.transpose_().transpose_", "sequence.transpose_"], "function", ["None"], ["", "def", "change_to_video", "(", "sequence", ")", ":", "\n", "    ", "sequence", ".", "transpose_", "(", "0", ",", "1", ")", ".", "transpose_", "(", "1", ",", "2", ")", "\n", "return", "sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.normalize_data": [[166, 174], ["sequence.transpose_", "sequence.transpose_().transpose_", "utils.sequence_input", "sequence.transpose_"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.sequence_input"], ["", "def", "normalize_data", "(", "opt", ",", "dtype", ",", "sequence", ")", ":", "\n", "\n", "    ", "sequence", ".", "transpose_", "(", "0", ",", "1", ")", "\n", "sequence", ".", "transpose_", "(", "3", ",", "4", ")", ".", "transpose_", "(", "2", ",", "3", ")", "\n", "\n", "#sequence.transpose_(0, 1)", "\n", "\n", "return", "sequence_input", "(", "sequence", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.init_weights": [[176, 187], ["classname.find", "torch.nn.init.xavier_normal_", "m.bias.data.fill_", "classname.find", "torch.nn.init.kaiming_normal_", "m.bias.data.fill_"], "function", ["None"], ["", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "if", "not", "(", "m", ".", "bias", "is", "None", ")", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "not", "(", "m", ".", "bias", "is", "None", ")", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.set_learning_rate": [[188, 192], ["None"], "function", ["None"], ["", "", "", "def", "set_learning_rate", "(", "optimizer", ",", "lr", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the given value\"\"\"", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.is_sequence": [[194, 200], ["hasattr", "hasattr", "hasattr", "hasattr", "type"], "function", ["None"], ["", "", "def", "is_sequence", "(", "arg", ")", ":", "\n", "    ", "return", "(", "not", "hasattr", "(", "arg", ",", "\"strip\"", ")", "and", "\n", "not", "type", "(", "arg", ")", "is", "np", ".", "ndarray", "and", "\n", "not", "hasattr", "(", "arg", ",", "\"dot\"", ")", "and", "\n", "(", "hasattr", "(", "arg", ",", "\"__getitem__\"", ")", "or", "\n", "hasattr", "(", "arg", ",", "\"__iter__\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.image_tensor": [[201, 248], ["len", "utils.is_sequence", "torch.ones", "enumerate", "torch.ones", "enumerate", "hasattr", "utils.image_tensor", "images[].dim", "images[].size", "images[].size", "images[].size", "images[].size", "images[].size", "result[].copy_", "images[].dim", "images[].size", "images[].size", "images[].size", "images[].size", "images[].size", "result[].copy_", "inputs.dim", "isinstance", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.is_sequence", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.image_tensor"], ["", "def", "image_tensor", "(", "inputs", ",", "padding", "=", "1", ")", ":", "\n", "# assert is_sequence(inputs)", "\n", "    ", "assert", "len", "(", "inputs", ")", ">", "0", "\n", "# print(inputs)", "\n", "\n", "# if this is a list of lists, unpack them all and grid them up", "\n", "if", "is_sequence", "(", "inputs", "[", "0", "]", ")", "or", "(", "hasattr", "(", "inputs", ",", "\"dim\"", ")", "and", "inputs", ".", "dim", "(", ")", ">", "4", ")", ":", "\n", "        ", "images", "=", "[", "image_tensor", "(", "x", ")", "for", "x", "in", "inputs", "]", "\n", "if", "images", "[", "0", "]", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "c_dim", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "x_dim", "=", "images", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "y_dim", "=", "images", "[", "0", "]", ".", "size", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "c_dim", "=", "1", "\n", "x_dim", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "y_dim", "=", "images", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "\n", "", "result", "=", "torch", ".", "ones", "(", "c_dim", ",", "\n", "x_dim", "*", "len", "(", "images", ")", "+", "padding", "*", "(", "len", "(", "images", ")", "-", "1", ")", ",", "\n", "y_dim", ")", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "            ", "result", "[", ":", ",", "i", "*", "x_dim", "+", "i", "*", "padding", ":", "\n", "(", "i", "+", "1", ")", "*", "x_dim", "+", "i", "*", "padding", ",", ":", "]", ".", "copy_", "(", "image", ")", "\n", "\n", "", "return", "result", "\n", "\n", "# if this is just a list, make a stacked image", "\n", "", "else", ":", "\n", "        ", "images", "=", "[", "x", ".", "data", "if", "isinstance", "(", "x", ",", "torch", ".", "autograd", ".", "Variable", ")", "else", "x", "\n", "for", "x", "in", "inputs", "]", "\n", "# print(images)", "\n", "if", "images", "[", "0", "]", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "c_dim", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "x_dim", "=", "images", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "y_dim", "=", "images", "[", "0", "]", ".", "size", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "c_dim", "=", "1", "\n", "x_dim", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "y_dim", "=", "images", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "\n", "", "result", "=", "torch", ".", "ones", "(", "c_dim", ",", "\n", "x_dim", ",", "\n", "y_dim", "*", "len", "(", "images", ")", "+", "padding", "*", "(", "len", "(", "images", ")", "-", "1", ")", ")", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "            ", "result", "[", ":", ",", ":", ",", "i", "*", "y_dim", "+", "i", "*", "padding", ":", "\n", "(", "i", "+", "1", ")", "*", "y_dim", "+", "i", "*", "padding", "]", ".", "copy_", "(", "image", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.make_image": [[249, 268], ["PIL.Image.fromarray", "tensor.expand.cpu().clamp", "tensor.expand.size", "tensor.expand.expand", "tensor.expand.transpose().transpose().numpy", "numpy.array", "range", "numpy.uint8", "tensor.expand.size", "tensor.expand.size", "len", "tensor.expand.cpu", "tensor.expand.transpose().transpose", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "tensor.expand.transpose"], "function", ["None"], ["", "", "def", "make_image", "(", "tensor", ",", "colored_kp", "=", "False", ",", "key_points", "=", "None", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "cpu", "(", ")", ".", "clamp", "(", "-", "0.5", ",", "0.5", ")", "+", "0.5", "\n", "if", "tensor", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "        ", "tensor", "=", "tensor", ".", "expand", "(", "3", ",", "tensor", ".", "size", "(", "1", ")", ",", "tensor", ".", "size", "(", "2", ")", ")", "\n", "", "tensor", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "numpy", "(", ")", "*", "255", "\n", "\n", "if", "colored_kp", ":", "\n", "        ", "radius", "=", "1", "\n", "color_bar", "=", "np", ".", "array", "(", "[", "[", "248", ",", "248", ",", "24", "]", ",", "[", "246", ",", "221", ",", "41", "]", ",", "[", "254", ",", "191", ",", "60", "]", ",", "\n", "[", "213", ",", "190", ",", "39", "]", ",", "[", "148", ",", "202", ",", "73", "]", ",", "[", "83", ",", "204", ",", "125", "]", ",", "\n", "[", "41", ",", "195", ",", "170", "]", ",", "[", "1", ",", "183", ",", "202", "]", ",", "[", "33", ",", "164", ",", "227", "]", ",", "\n", "[", "45", ",", "142", ",", "242", "]", ",", "[", "58", ",", "115", ",", "255", "]", ",", "[", "71", ",", "86", ",", "247", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "key_points", ")", ")", ":", "\n", "            ", "x", "=", "[", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "0", "]", "-", "radius", ",", "0", ",", "63", ")", ",", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "0", "]", "+", "radius", ",", "0", ",", "63", ")", "]", "\n", "y", "=", "[", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "1", "]", "-", "radius", ",", "0", ",", "63", ")", ",", "np", ".", "clip", "(", "key_points", "[", "i", "]", "[", "1", "]", "+", "radius", ",", "0", ",", "63", ")", "]", "\n", "tensor", "[", "y", "[", "0", "]", ":", "y", "[", "1", "]", "+", "1", ",", "key_points", "[", "i", "]", "[", "0", "]", "]", "=", "color_bar", "[", "i", "]", "\n", "tensor", "[", "key_points", "[", "i", "]", "[", "1", "]", ",", "x", "[", "0", "]", ":", "x", "[", "1", "]", "+", "1", "]", "=", "color_bar", "[", "i", "]", "\n", "# pdb.set_trace()", "\n", "", "", "return", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "tensor", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.save_image": [[269, 272], ["utils.make_image", "make_image.save"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.make_image"], ["", "def", "save_image", "(", "filename", ",", "tensor", ",", "colored_kp", "=", "False", ",", "key_points", "=", "None", ")", ":", "\n", "    ", "img", "=", "make_image", "(", "tensor", ",", "colored_kp", ",", "key_points", ")", "\n", "img", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.save_tensors_image": [[273, 276], ["utils.image_tensor", "utils.save_image"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.image_tensor", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.save_image"], ["", "def", "save_tensors_image", "(", "filename", ",", "inputs", ",", "padding", "=", "1", ")", ":", "\n", "    ", "images", "=", "image_tensor", "(", "inputs", ",", "padding", ")", "\n", "return", "save_image", "(", "filename", ",", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.save_gif": [[277, 301], ["imageio.mimsave", "utils.image_tensor", "img.transpose().transpose().clamp.cpu", "img.transpose().transpose().clamp.transpose().transpose().clamp", "images.append", "numpy.array", "range", "img.transpose().transpose().clamp.astype", "img.transpose().transpose().clamp.transpose().transpose", "img.transpose().transpose().clamp.numpy", "len", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "img.transpose().transpose().clamp.transpose"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.image_tensor"], ["", "def", "save_gif", "(", "filename", ",", "inputs", ",", "duration", "=", "0.15", ",", "colored_kp", "=", "False", ",", "key_points", "=", "None", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "m", "=", "0", "\n", "for", "tensor", "in", "inputs", ":", "\n", "        ", "img", "=", "image_tensor", "(", "tensor", ",", "padding", "=", "0", ")", "\n", "img", "=", "img", ".", "cpu", "(", ")", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "clamp", "(", "-", "0.5", ",", "0.5", ")", "\n", "img", "=", "(", "img", ".", "numpy", "(", ")", "+", "0.5", ")", "*", "255", "\n", "if", "colored_kp", ":", "\n", "            ", "img", "+=", "255", "\n", "radius", "=", "1", "\n", "kp", "=", "key_points", "[", "m", "]", "\n", "color_bar", "=", "np", ".", "array", "(", "[", "[", "248", ",", "248", ",", "24", "]", ",", "[", "246", ",", "221", ",", "41", "]", ",", "[", "254", ",", "191", ",", "60", "]", ",", "\n", "[", "213", ",", "190", ",", "39", "]", ",", "[", "148", ",", "202", ",", "73", "]", ",", "[", "83", ",", "204", ",", "125", "]", ",", "\n", "[", "41", ",", "195", ",", "170", "]", ",", "[", "1", ",", "183", ",", "202", "]", ",", "[", "33", ",", "164", ",", "227", "]", ",", "\n", "[", "45", ",", "142", ",", "242", "]", ",", "[", "58", ",", "115", ",", "255", "]", ",", "[", "71", ",", "86", ",", "247", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "kp", ")", ")", ":", "\n", "                ", "x", "=", "[", "np", ".", "clip", "(", "kp", "[", "i", "]", "[", "0", "]", "-", "radius", ",", "0", ",", "63", ")", ",", "np", ".", "clip", "(", "kp", "[", "i", "]", "[", "0", "]", "+", "radius", ",", "0", ",", "63", ")", "]", "\n", "y", "=", "[", "np", ".", "clip", "(", "kp", "[", "i", "]", "[", "1", "]", "-", "radius", ",", "0", ",", "63", ")", ",", "np", ".", "clip", "(", "kp", "[", "i", "]", "[", "1", "]", "+", "radius", ",", "0", ",", "63", ")", "]", "\n", "img", "[", "y", "[", "0", "]", ":", "y", "[", "1", "]", "+", "1", ",", "kp", "[", "i", "]", "[", "0", "]", "]", "=", "color_bar", "[", "i", "]", "\n", "img", "[", "kp", "[", "i", "]", "[", "1", "]", ",", "x", "[", "0", "]", ":", "x", "[", "1", "]", "+", "1", "]", "=", "color_bar", "[", "i", "]", "\n", "", "m", "+=", "1", "\n", "", "images", ".", "append", "(", "img", ".", "astype", "(", "'uint8'", ")", ")", "\n", "", "imageio", ".", "mimsave", "(", "filename", ",", "images", ",", "duration", "=", "duration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.draw_text_tensor": [[302, 309], ["tensor.transpose().transpose().data.cpu().numpy", "PIL.Image.fromarray", "PIL.ImageDraw.Draw", "ImageDraw.Draw.text", "numpy.asarray", "torch.autograd.Variable().transpose().transpose", "numpy.uint8", "tensor.transpose().transpose().data.cpu", "torch.autograd.Variable().transpose", "torch.autograd.Variable", "tensor.transpose().transpose", "torch.Tensor", "tensor.transpose"], "function", ["None"], ["", "def", "draw_text_tensor", "(", "tensor", ",", "text", ")", ":", "\n", "    ", "np_x", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np_x", "*", "255", ")", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "pil", ")", "\n", "draw", ".", "text", "(", "(", "4", ",", "64", ")", ",", "text", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "img", "=", "np", ".", "asarray", "(", "pil", ")", "\n", "return", "Variable", "(", "torch", ".", "Tensor", "(", "img", "/", "255.", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.save_gif_with_text": [[310, 318], ["zip", "imageio.mimsave", "utils.image_tensor", "img.cpu.cpu", "images.append", "img.cpu.transpose().transpose().clamp().numpy", "img.cpu.astype", "utils.draw_text_tensor", "zip", "img.cpu.transpose().transpose().clamp", "img.cpu.transpose().transpose", "img.cpu.transpose"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.image_tensor", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.draw_text_tensor"], ["", "def", "save_gif_with_text", "(", "filename", ",", "inputs", ",", "text", ",", "duration", "=", "0.25", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "tensor", ",", "text", "in", "zip", "(", "inputs", ",", "text", ")", ":", "\n", "        ", "img", "=", "image_tensor", "(", "[", "draw_text_tensor", "(", "ti", ",", "texti", ")", "for", "ti", ",", "texti", "in", "zip", "(", "tensor", ",", "text", ")", "]", ",", "padding", "=", "0", ")", "\n", "img", "=", "img", ".", "cpu", "(", ")", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "clamp", "(", "0", ",", "1", ")", ".", "numpy", "(", ")", "*", "255", "\n", "images", ".", "append", "(", "img", ".", "astype", "(", "'uint8'", ")", ")", "\n", "", "imageio", ".", "mimsave", "(", "filename", ",", "images", ",", "duration", "=", "duration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.merge": [[319, 329], ["numpy.zeros", "enumerate"], "function", ["None"], ["", "def", "merge", "(", "images", ",", "size", ")", ":", "\n", "    ", "h", ",", "w", "=", "images", ".", "shape", "[", "1", "]", ",", "images", ".", "shape", "[", "2", "]", "\n", "img", "=", "np", ".", "zeros", "(", "(", "h", "*", "size", "[", "0", "]", ",", "w", "*", "size", "[", "1", "]", ")", ")", "\n", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "i", "=", "idx", "%", "size", "[", "1", "]", "\n", "j", "=", "idx", "//", "size", "[", "1", "]", "\n", "img", "[", "j", "*", "h", ":", "j", "*", "h", "+", "h", ",", "i", "*", "w", ":", "i", "*", "w", "+", "w", "]", "=", "image", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.transform": [[331, 333], ["None"], "function", ["None"], ["", "def", "transform", "(", "input_", ")", ":", "\n", "    ", "return", "2", "*", "input_", "-", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.inverse_transform": [[335, 337], ["None"], "function", ["None"], ["", "def", "inverse_transform", "(", "input_", ")", ":", "\n", "    ", "return", "(", "input_", "+", "1.", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.imsave": [[339, 341], ["imageio.imwrite", "utils.merge"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.merge"], ["", "def", "imsave", "(", "images", ",", "size", ",", "path", ")", ":", "\n", "    ", "return", "imageio", ".", "imwrite", "(", "path", ",", "merge", "(", "images", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.gauss2D_mask": [[342, 353], ["numpy.exp", "np.exp.sum"], "function", ["None"], ["", "def", "gauss2D_mask", "(", "center", ",", "shape", ",", "sigma", "=", "0.5", ")", ":", "\n", "  ", "m", ",", "n", "=", "[", "ss", "-", "1", "for", "ss", "in", "shape", "]", "\n", "y", ",", "x", "=", "np", ".", "ogrid", "[", "0", ":", "m", "+", "1", ",", "0", ":", "n", "+", "1", "]", "\n", "y", "=", "y", "-", "center", "[", "0", "]", "\n", "x", "=", "x", "-", "center", "[", "1", "]", "\n", "z", "=", "x", "*", "x", "+", "y", "*", "y", "\n", "h", "=", "np", ".", "exp", "(", "-", "z", "/", "(", "2.", "*", "sigma", "*", "sigma", "/", "(", "shape", "[", "0", "]", "**", "2", ")", ")", ")", "\n", "sumh", "=", "h", ".", "sum", "(", ")", "\n", "if", "sumh", "!=", "0", ":", "\n", "    ", "h", "=", "h", "/", "sumh", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.visualize_lm": [[354, 364], ["numpy.zeros", "range", "numpy.amax", "utils.inverse_transform", "utils.inverse_transform", "utils.gauss2D_mask", "gauss2D_mask.max"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.inverse_transform", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.inverse_transform", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.gauss2D_mask"], ["", "def", "visualize_lm", "(", "posex", ",", "posey", ",", "image_size", ",", "num_keypoints", ")", ":", "\n", "    ", "posey", "=", "inverse_transform", "(", "posey", ")", "*", "image_size", "\n", "posex", "=", "inverse_transform", "(", "posex", ")", "*", "image_size", "\n", "cpose", "=", "np", ".", "zeros", "(", "(", "image_size", ",", "image_size", ",", "num_keypoints", ")", ")", "\n", "for", "j", "in", "range", "(", "num_keypoints", ")", ":", "\n", "        ", "gmask", "=", "gauss2D_mask", "(", "\n", "(", "posey", "[", "j", "]", ",", "posex", "[", "j", "]", ")", ",", "(", "image_size", ",", "image_size", ")", ",", "sigma", "=", "8.", ")", "\n", "cpose", "[", ":", ",", ":", ",", "j", "]", "=", "gmask", "/", "gmask", ".", "max", "(", ")", "\n", "\n", "", "return", "np", ".", "amax", "(", "cpose", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.mse_metric": [[365, 369], ["numpy.sum", "float"], "function", ["None"], ["", "def", "mse_metric", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "err", "=", "np", ".", "sum", "(", "(", "x1", "-", "x2", ")", "**", "2", ")", "\n", "err", "/=", "float", "(", "x1", ".", "shape", "[", "0", "]", "*", "x1", ".", "shape", "[", "1", "]", "*", "x1", ".", "shape", "[", "2", "]", ")", "\n", "return", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.l1_metric": [[370, 374], ["numpy.sum", "float", "abs"], "function", ["None"], ["", "def", "l1_metric", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "err", "=", "np", ".", "sum", "(", "abs", "(", "x1", "-", "x2", ")", ")", "\n", "err", "/=", "float", "(", "x1", ".", "shape", "[", "0", "]", "*", "x1", ".", "shape", "[", "1", "]", "*", "x1", ".", "shape", "[", "2", "]", ")", "\n", "return", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.eval_seq": [[375, 391], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "range", "utils.l1_metric", "skimage.metrics.structural_similarity", "skimage.metrics.peak_signal_noise_ratio"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.l1_metric"], ["", "def", "eval_seq", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "T", "=", "len", "(", "gt", ")", "\n", "bs", "=", "gt", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "ssim", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "psnr", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "l1", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "# calculate for each channel respectively", "\n", "                ", "ssim", "[", "i", ",", "t", "]", "+=", "ssim_metric", "(", "gt", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "pred", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "data_range", "=", "1.0", ")", "\n", "psnr", "[", "i", ",", "t", "]", "+=", "psnr_metric", "(", "gt", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "pred", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "data_range", "=", "1.0", ")", "\n", "", "ssim", "[", "i", ",", "t", "]", "/=", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "psnr", "[", "i", ",", "t", "]", "/=", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "l1", "[", "i", ",", "t", "]", "=", "l1_metric", "(", "gt", "[", "t", "]", "[", "i", "]", ",", "pred", "[", "t", "]", "[", "i", "]", ")", "\n", "\n", "", "", "return", "l1", ",", "ssim", ",", "psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.eval_seq1": [[392, 417], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "range", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "LPIPSmodel.forward().squeeze().data.cpu().numpy", "range", "utils.l1_metric", "numpy.tile", "numpy.tile", "skimage.metrics.structural_similarity", "skimage.metrics.peak_signal_noise_ratio", "torch.FloatTensor", "torch.FloatTensor", "LPIPSmodel.forward().squeeze().data.cpu", "LPIPSmodel.forward().squeeze", "LPIPSmodel.forward"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.l1_metric", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.vision_BN3_1.build_keypoints_to_images_net_2image.forward"], ["", "def", "eval_seq1", "(", "gt", ",", "pred", ",", "LPIPSmodel", ")", ":", "\n", "    ", "T", "=", "len", "(", "gt", ")", "\n", "bs", "=", "gt", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "ssim", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "psnr", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "l1", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "lpips", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "# calculate for each channel respectively", "\n", "                ", "ssim", "[", "i", ",", "t", "]", "+=", "ssim_metric", "(", "gt", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "pred", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "data_range", "=", "1.0", ")", "\n", "psnr", "[", "i", ",", "t", "]", "+=", "psnr_metric", "(", "gt", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "pred", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "data_range", "=", "1.0", ")", "\n", "", "ssim", "[", "i", ",", "t", "]", "/=", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "psnr", "[", "i", ",", "t", "]", "/=", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "l1", "[", "i", ",", "t", "]", "=", "l1_metric", "(", "gt", "[", "t", "]", "[", "i", "]", ",", "pred", "[", "t", "]", "[", "i", "]", ")", "\n", "", "", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "        ", "gt_im", "=", "2", "*", "gt", "[", "t", "]", "-", "1", "# normalize to [-1, 1]", "\n", "pred_im", "=", "2", "*", "pred", "[", "t", "]", "-", "1", "\n", "if", "gt_im", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "gt_im", "=", "np", ".", "tile", "(", "gt_im", ",", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "pred_im", "=", "np", ".", "tile", "(", "pred_im", ",", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "", "gt_im", "=", "torch", ".", "FloatTensor", "(", "gt_im", ")", ".", "cuda", "(", ")", "\n", "pred_im", "=", "torch", ".", "FloatTensor", "(", "pred_im", ")", ".", "cuda", "(", ")", "\n", "lpips", "[", ":", ",", "t", "]", "=", "LPIPSmodel", ".", "forward", "(", "gt_im", ",", "pred_im", ")", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "l1", ",", "ssim", ",", "psnr", ",", "lpips", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.changed_keypoints": [[418, 421], ["None"], "function", ["None"], ["", "def", "changed_keypoints", "(", "keypoints", ",", "weight", ")", ":", "\n", "    ", "keypoints", "=", "keypoints", "*", "weight", "\n", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.changed_keypoints1": [[422, 425], ["torch.clamp"], "function", ["None"], ["", "def", "changed_keypoints1", "(", "keypoints", ",", "weight", ")", ":", "\n", "    ", "keypoints", "=", "torch", ".", "clamp", "(", "0.95", "*", "keypoints", "+", "0.05", "*", "weight", ",", "min", "=", "0", ",", "max", "=", "1.0", ")", "\n", "return", "keypoints", "", "", ""]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_AE_BN3_kth_1_2.CalDelta_xy": [[89, 98], ["numpy.zeros_like", "numpy.round", "numpy.round"], "function", ["None"], ["def", "CalDelta_xy", "(", "keypoints_np", ")", ":", "\n", "    ", "keypoints_np1", "=", "np", ".", "zeros_like", "(", "keypoints_np", ")", "\n", "keypoints_np1", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "round", "(", "(", "1", "+", "keypoints_np", "[", ":", ",", ":", ",", "0", "]", ")", "*", "(", "cfg", ".", "img_w", "-", "1", ")", "/", "2", ")", "\n", "keypoints_np1", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "round", "(", "(", "1", "-", "keypoints_np", "[", ":", ",", ":", ",", "1", "]", ")", "*", "(", "cfg", ".", "img_w", "-", "1", ")", "/", "2", ")", "\n", "keypoints_np1", "[", ":", ",", ":", ",", "0", "]", "=", "keypoints_np1", "[", ":", ",", ":", ",", "0", "]", "/", "(", "cfg", ".", "img_w", "-", "1", ")", "*", "2", "-", "1", "\n", "keypoints_np1", "[", ":", ",", ":", ",", "1", "]", "=", "1", "-", "keypoints_np1", "[", ":", ",", ":", ",", "1", "]", "/", "(", "cfg", ".", "img_w", "-", "1", ")", "*", "2", "\n", "\n", "delta_xy", "=", "keypoints_np1", "-", "keypoints_np", "\n", "return", "delta_xy", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_AE_BN3_kth_1_2.get_training_batch": [[138, 143], ["utils.normalize_data"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.normalize_data"], ["def", "get_training_batch", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "sequence", "in", "train_loader", ":", "\n", "            ", "batch", "=", "utils", ".", "normalize_data", "(", "cfg", ",", "dtype", ",", "sequence", ")", "\n", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_AE_BN3_kth_1_2.get_testing_batch": [[146, 151], ["utils.normalize_data"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.normalize_data"], ["def", "get_testing_batch", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "sequence", "in", "test_loader", ":", "\n", "            ", "batch", "=", "utils", ".", "normalize_data", "(", "cfg", ",", "dtype", ",", "sequence", ")", "\n", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_AE_BN3_kth_1_2.plot": [[155, 197], ["range", "range", "min", "range", "utils.save_tensors_image", "utils.save_gif", "build_images_to_keypoints_net", "observed_keypoints.append", "keypoints_to_images_net", "gen_keypointsxy.append", "gen_seq.append", "range", "to_plot.append", "range", "to_plot.append", "range", "range", "keypoints.detach", "ops.change2xy", "keypoints_to_images_net.detach", "range", "row.append", "row.append", "row.append", "row.append", "gifs[].append", "len", "ops.add_keypoints", "[].clone"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.save_tensors_image", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.utils.save_gif", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.change2xy", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.ops.add_keypoints"], ["def", "plot", "(", "x", ",", "epoch", ")", ":", "\n", "    ", "gen_seq", "=", "[", "]", "\n", "gen_keypointsxy", "=", "[", "]", "\n", "gt_seq", "=", "[", "x", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", "\n", "\n", "observed_keypoints", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "n_eval", ")", ":", "\n", "        ", "keypoints", ",", "_", "=", "build_images_to_keypoints_net", "(", "x", "[", "i", "]", ")", "\n", "observed_keypoints", ".", "append", "(", "keypoints", ".", "detach", "(", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "cfg", ".", "n_eval", ")", ":", "\n", "        ", "reconstructed_image", "=", "keypoints_to_images_net", "(", "observed_keypoints", "[", "i", "]", ",", "x", "[", "0", "]", ",", "observed_keypoints", "[", "0", "]", ")", "\n", "gen_keypointsxy", ".", "append", "(", "ops", ".", "change2xy", "(", "observed_keypoints", "[", "i", "]", ")", ")", "\n", "gen_seq", ".", "append", "(", "reconstructed_image", ".", "detach", "(", ")", ")", "\n", "\n", "", "to_plot", "=", "[", "]", "\n", "gifs", "=", "[", "[", "]", "for", "t", "in", "range", "(", "cfg", ".", "n_eval", ")", "]", "\n", "\n", "nrow", "=", "min", "(", "cfg", ".", "test_batch_size", ",", "10", ")", "\n", "for", "i", "in", "range", "(", "nrow", ")", ":", "\n", "# ground truth sequence", "\n", "        ", "row", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "cfg", ".", "n_eval", ")", ":", "\n", "            ", "row", ".", "append", "(", "gt_seq", "[", "t", "]", "[", "i", "]", ")", "\n", "", "to_plot", ".", "append", "(", "row", ")", "\n", "\n", "row", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "cfg", ".", "n_eval", ")", ":", "\n", "            ", "row", ".", "append", "(", "ops", ".", "add_keypoints", "(", "gen_seq", "[", "t", "]", "[", "i", "]", ".", "clone", "(", ")", ",", "gen_keypointsxy", "[", "t", "]", "[", "i", "]", ")", ")", "\n", "", "to_plot", ".", "append", "(", "row", ")", "\n", "\n", "for", "t", "in", "range", "(", "cfg", ".", "n_eval", ")", ":", "\n", "            ", "row", "=", "[", "]", "\n", "row", ".", "append", "(", "gt_seq", "[", "t", "]", "[", "i", "]", ")", "\n", "row", ".", "append", "(", "gen_seq", "[", "t", "]", "[", "i", "]", ")", "\n", "gifs", "[", "t", "]", ".", "append", "(", "row", ")", "\n", "\n", "", "", "fname", "=", "'%s/gen/sample_%d.png'", "%", "(", "log_dir", ",", "epoch", ")", "\n", "utils", ".", "save_tensors_image", "(", "fname", ",", "to_plot", ")", "\n", "\n", "fname", "=", "'%s/gen/sample_%d.gif'", "%", "(", "log_dir", ",", "epoch", ")", "\n", "utils", ".", "save_gif", "(", "fname", ",", "gifs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_AE_BN3_kth_1_2.train": [[199, 236], ["build_images_to_keypoints_net.zero_grad", "keypoints_to_images_net.zero_grad", "range", "range", "losses.temporal_separation_loss", "losses.sparse_loss", "losses.detect_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "build_images_to_keypoints_net_optimizer.step", "keypoints_to_images_net_optimizer.step", "build_images_to_keypoints_net", "keypoints.data.cpu().numpy", "train_AE_BN3_kth_1_2.CalDelta_xy", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "observed_keypoints.append", "observed_heatmaps.append", "keypoints_to_images_net", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "build_images_to_keypoints_net.parameters", "keypoints_to_images_net.parameters", "mse.data.cpu().numpy", "losses.temporal_separation_loss.data.cpu().numpy", "losses.sparse_loss.data.cpu().numpy", "losses.detect_loss.data.cpu().numpy", "mse_criterion", "keypoints.data.cpu", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "mse.data.cpu", "losses.temporal_separation_loss.data.cpu", "losses.sparse_loss.data.cpu", "losses.detect_loss.data.cpu"], "function", ["home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.losses.temporal_separation_loss", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.losses.sparse_loss", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.losses.detect_loss", "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.train_AE_BN3_kth_1_2.CalDelta_xy"], ["", "def", "train", "(", "x", ")", ":", "\n", "    ", "build_images_to_keypoints_net", ".", "zero_grad", "(", ")", "\n", "keypoints_to_images_net", ".", "zero_grad", "(", ")", "\n", "\n", "mse", "=", "0", "\n", "observed_keypoints", "=", "[", "]", "\n", "observed_heatmaps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "observed_steps", "+", "cfg", ".", "predicted_steps", ")", ":", "\n", "        ", "keypoints", ",", "heatmaps", "=", "build_images_to_keypoints_net", "(", "x", "[", "i", "]", ")", "\n", "keypoints_np", "=", "keypoints", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "delta_xy", "=", "CalDelta_xy", "(", "keypoints_np", ")", "\n", "delta_xypt", "=", "torch", ".", "FloatTensor", "(", "delta_xy", ")", ".", "cuda", "(", ")", "\n", "keypoints", "=", "keypoints", "+", "delta_xypt", "\n", "observed_keypoints", ".", "append", "(", "keypoints", ")", "\n", "observed_heatmaps", ".", "append", "(", "heatmaps", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "cfg", ".", "observed_steps", "+", "cfg", ".", "predicted_steps", ")", ":", "\n", "        ", "reconstructed_image", "=", "keypoints_to_images_net", "(", "observed_keypoints", "[", "i", "]", ",", "x", "[", "0", "]", ",", "observed_keypoints", "[", "0", "]", ")", "\n", "mse", "+=", "0.5", "*", "mse_criterion", "(", "reconstructed_image", ",", "x", "[", "i", "]", ")", "\n", "\n", "", "mse", "/=", "(", "cfg", ".", "observed_steps", "+", "cfg", ".", "predicted_steps", ")", "*", "cfg", ".", "batch_size", "\n", "separation_loss", "=", "losses", ".", "temporal_separation_loss", "(", "\n", "cfg", ",", "torch", ".", "stack", "(", "observed_keypoints", "[", ":", "cfg", ".", "observed_steps", "]", ")", ")", "\n", "sparse_loss", "=", "losses", ".", "sparse_loss", "(", "torch", ".", "stack", "(", "observed_heatmaps", ")", ",", "cfg", ")", "\n", "incite", "=", "losses", ".", "detect_loss", "(", "torch", ".", "stack", "(", "observed_heatmaps", ")", ")", "\n", "\n", "loss", "=", "mse", "+", "incite", "#+ separation_loss + sparse_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "build_images_to_keypoints_net", ".", "parameters", "(", ")", ",", "cfg", ".", "clipnorm", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "keypoints_to_images_net", ".", "parameters", "(", ")", ",", "cfg", ".", "clipnorm", ")", "\n", "\n", "build_images_to_keypoints_net_optimizer", ".", "step", "(", ")", "\n", "keypoints_to_images_net_optimizer", ".", "step", "(", ")", "\n", "\n", "return", "mse", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "separation_loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "sparse_loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "incite", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.losses.temporal_separation_loss": [[24, 73], ["torch.mean", "torch.mean", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["def", "temporal_separation_loss", "(", "cfg", ",", "coords", ")", ":", "\n", "    ", "\"\"\"Encourages keypoint to have different temporal trajectories.\n\n    If two keypoints move along trajectories that are identical up to a time-\n    invariant translation (offset), this suggest that they both represent the same\n    object and are redundant, which we want to avoid.\n\n    To measure this similarity of trajectories, we first center each trajectory by\n    subtracting its mean. Then, we compute the pairwise distance between all\n    trajectories at each timepoint. These distances are higher for trajectories\n    that are less similar. To compute the loss, the distances are transformed by\n    a Gaussian and averaged across time and across trajectories.\n\n    Args:\n      cfg: ConfigDict.\n      coords: [time, batch, num_landmarks, 3] coordinate tensor.\n\n    Returns:\n      Separation loss.\n    \"\"\"", "\n", "x", "=", "coords", "[", "Ellipsis", ",", "0", "]", "\n", "y", "=", "coords", "[", "Ellipsis", ",", "1", "]", "\n", "\n", "# Center trajectories:", "\n", "x", "=", "x", "-", "torch", ".", "mean", "(", "x", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "y", "=", "y", "-", "torch", ".", "mean", "(", "y", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "# Compute pairwise distance matrix:", "\n", "d", "=", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "-", "x", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", ":", "]", ")", "**", "2.0", "+", "\n", "(", "y", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "-", "y", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", ":", "]", ")", "**", "2.0", ")", "\n", "\n", "# Temporal mean:", "\n", "d", "=", "torch", ".", "mean", "(", "d", ",", "dim", "=", "0", ")", "\n", "\n", "# Apply Gaussian function such that loss falls off with distance:", "\n", "loss_matrix", "=", "torch", ".", "exp", "(", "-", "d", "/", "(", "2.0", "*", "cfg", ".", "separation_loss_sigma", "**", "2.0", ")", ")", "\n", "loss_matrix", "=", "torch", ".", "mean", "(", "loss_matrix", ",", "dim", "=", "0", ")", "# Mean across batch.", "\n", "loss", "=", "torch", ".", "sum", "(", "loss_matrix", ")", "# Sum matrix elements.", "\n", "\n", "# Subtract sum of values on diagonal, which are always 1:", "\n", "loss", "=", "loss", "-", "cfg", ".", "num_keypoints", "\n", "\n", "# Normalize by maximal possible value. The loss is now scaled between 0 (all", "\n", "# keypoints are infinitely far apart) and 1 (all keypoints are at the same", "\n", "# location):", "\n", "loss", "=", "loss", "/", "(", "cfg", ".", "num_keypoints", "*", "(", "cfg", ".", "num_keypoints", "-", "1", ")", ")", "\n", "\n", "\n", "return", "cfg", ".", "separation_loss_scale", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.losses.sparse_loss": [[74, 83], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "sparse_loss", "(", "weight_matrix", ",", "cfg", ")", ":", "\n", "    ", "\"\"\"L1-loss on mean heatmap activations, to encourage sparsity.\"\"\"", "\n", "weight_shape", "=", "weight_matrix", ".", "shape", "\n", "assert", "len", "(", "weight_shape", ")", "==", "5", ",", "weight_shape", "\n", "\n", "heatmap_mean", "=", "torch", ".", "mean", "(", "weight_matrix", ",", "dim", "=", "(", "3", ",", "4", ")", ")", "\n", "penalty", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "heatmap_mean", ")", ")", "\n", "\n", "return", "penalty", "*", "cfg", ".", "heatmap_regularization", "\n", "\n"]], "home.repos.pwc.inspect_result.xjgaocs_Grid-Keypoint-Learning.None.losses.detect_loss": [[84, 94], ["weight_matrix.view", "torch.mean", "torch.mean", "len", "weight_matrix.size", "weight_matrix.size", "weight_matrix.size", "torch.max", "torch.max", "torch.min", "torch.min", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "detect_loss", "(", "weight_matrix", ",", "gama", "=", "0.01", ")", ":", "\n", "    ", "weight_shape", "=", "weight_matrix", ".", "shape", "\n", "assert", "len", "(", "weight_shape", ")", "==", "5", ",", "weight_shape", "\n", "weight_matrix1", "=", "weight_matrix", ".", "view", "(", "weight_matrix", ".", "size", "(", "0", ")", ",", "\n", "weight_matrix", ".", "size", "(", "1", ")", ",", "weight_matrix", ".", "size", "(", "2", ")", ",", "-", "1", ")", "\n", "heatmap_max", "=", "torch", ".", "max", "(", "weight_matrix1", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "heatmap_mean", "=", "torch", ".", "mean", "(", "weight_matrix1", ",", "dim", "=", "-", "1", ")", "\n", "max_min", "=", "torch", ".", "min", "(", "heatmap_max", "-", "heatmap_mean", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "incite", "=", "-", "torch", ".", "sum", "(", "max_min", ")", "\n", "return", "gama", "*", "incite", "\n", "", ""]]}